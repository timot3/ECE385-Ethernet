
ethernet.elf:     file format elf32-littlenios2
ethernet.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000230

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0001ad28 memsz 0x0001ad28 flags r-x
    LOAD off    0x0001bd48 vaddr 0x0801ad48 paddr 0x0801c8d4 align 2**12
         filesz 0x00001b8c memsz 0x00001b8c flags rw-
    LOAD off    0x0001e460 vaddr 0x0801e460 paddr 0x0801e460 align 2**12
         filesz 0x00000000 memsz 0x00000660 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001a278  08000230  08000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000008a0  0801a4a8  0801a4a8  0001b4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b8c  0801ad48  0801c8d4  0001bd48  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000660  0801e460  0801e460  0001e460  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0001d8d4  2**0
                  CONTENTS
  7 .sdram        00000000  0801eac0  0801eac0  0001d8d4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001d8d4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001408  00000000  00000000  0001d8f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00035a66  00000000  00000000  0001ed00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000d669  00000000  00000000  00054766  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000102ce  00000000  00000000  00061dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000431c  00000000  00000000  000720a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000774d  00000000  00000000  000763bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001ada6  00000000  00000000  0007db09  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000988b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001fb0  00000000  00000000  000988f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000a117e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000a1181  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000a118d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000a118e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000a118f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000a1193  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000a1197  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000a119b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000a11a6  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000a11b1  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  000a11bc  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000027  00000000  00000000  000a11c4  2**0
                  CONTENTS, READONLY
 30 .jdi          00004e82  00000000  00000000  000a11eb  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00083df0  00000000  00000000  000a606d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000230 l    d  .text	00000000 .text
0801a4a8 l    d  .rodata	00000000 .rodata
0801ad48 l    d  .rwdata	00000000 .rwdata
0801e460 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
0801eac0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ethernet_bsp//obj/HAL/src/crt0.o
08000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
0801e470 l     O .bss	00000004 usb_delay.2608
0801e474 l     O .bss	00000001 tmp_addr.2609
00000000 l    df *ABS*	00000000 EtherCard.cpp
00000000 l    df *ABS*	00000000 bufferfiller.cpp
00000000 l    df *ABS*	00000000 dhcp.cpp
0801e4a0 l     O .bss	00000001 _ZL9dhcpState
0801ad78 l     O .rwdata	00000020 _ZL8hostname
0801e4a4 l     O .bss	00000004 _ZL10currentXid
0801e4a8 l     O .bss	00000004 _ZL10stateTimer
0801e4ac l     O .bss	00000004 _ZL10leaseStart
0801e4b0 l     O .bss	00000004 _ZL9leaseTime
0801e4b4 l     O .bss	00000004 _ZL6bufPtr
0801e4b8 l     O .bss	00000004 _ZL20dhcpCustomOptionList
0801e4bc l     O .bss	00000004 _ZL24dhcpCustomOptionCallback
0800280c l     F .text	0000003c _ZL8addToBufh
08002848 l     F .text	00000070 _ZL8addByteshPKh
080028b8 l     F .text	00000064 _ZL9addOptionhhPKh
0800291c l     F .text	00000364 _ZL17send_dhcp_messagePh
0801c850 l     O .rwdata	00000004 _ZZL17send_dhcp_messagePhE6cookie
08002c80 l     F .text	000000d4 _ZL18process_dhcp_offertPh
08002d54 l     F .text	00000210 _ZL16process_dhcp_ackt
08002f64 l     F .text	00000158 _ZL26dhcp_received_message_typeth
080030bc l     F .text	00000058 _ZL10toAsciiHexh
0801e4c0 l     O .bss	00000002 _ZZN9EtherCard21dhcpAddOptionCallbackEhPFvhPKhhEE10optionList
00000000 l    df *ABS*	00000000 dns.cpp
0801e4c2 l     O .bss	00000001 _ZL8dnstid_l
08003514 l     F .text	000001f0 _ZL10dnsRequestPKcb
08003704 l     F .text	000001e8 _ZL17checkForDnsAnswert
00000000 l    df *ABS*	00000000 enc28j60.cpp
0801e4c8 l     O .bss	00000001 _ZL12Enc28j60Bank
0801e4c9 l     O .bss	00000001 _ZL9selectPin
08003aac l     F .text	00000080 _ZL7writeOphhh
08003b2c l     F .text	000000c4 _ZL6readOphh
08003bf0 l     F .text	00000080 _ZL7SetBankh
08003c70 l     F .text	0000005c _ZL12writeRegBytehh
08003ccc l     F .text	00000074 _ZL8writeReght
08003d40 l     F .text	00000048 _ZL11readRegByteh
08003d88 l     F .text	00000064 _ZL7readRegh
08003dec l     F .text	00000078 _ZL8writePhyht
08003e64 l     F .text	00000080 _ZL11readPhyByteh
0800414c l     F .text	00000108 _ZL7readBuftPh
08004254 l     F .text	00000128 _ZL8writeBuftPKh
0801e4ca l     O .bss	00000001 _ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket
0801e4cc l     O .bss	00000002 _ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr
00000000 l    df *ABS*	00000000 stash.cpp
00000000 l    df *ABS*	00000000 tcpip.cpp
0801c864 l     O .rwdata	00000001 _ZL20tcpclient_src_port_l
0801e4d8 l     O .bss	00000001 _ZL6tcp_fd
0801e4d9 l     O .bss	00000001 _ZL16tcp_client_state
0801e4da l     O .bss	00000001 _ZL17tcp_client_port_h
0801e4db l     O .bss	00000001 _ZL17tcp_client_port_l
0801e4dc l     O .bss	00000004 _ZL20client_tcp_result_cb
0801e4e0 l     O .bss	00000004 _ZL22client_tcp_datafill_cb
0801e4e4 l     O .bss	00000001 _ZL6www_fd
0801e4e8 l     O .bss	00000004 _ZL17client_browser_cb
0801e4ec l     O .bss	00000004 _ZL27client_additionalheaderline
0801e4f0 l     O .bss	00000004 _ZL14client_postval
0801e4f4 l     O .bss	00000004 _ZL13client_urlbuf
0801e4f8 l     O .bss	00000004 _ZL17client_urlbuf_var
0801e4fc l     O .bss	00000004 _ZL14client_hoststr
0801e500 l     O .bss	00000004 _ZL7icmp_cb
0801e504 l     O .bss	00000006 _ZL11destmacaddr
0801e50a l     O .bss	00000001 _ZL19waiting_for_dns_mac
0801e50b l     O .bss	00000001 _ZL11has_dns_mac
0801e50c l     O .bss	00000001 _ZL20waiting_for_dest_mac
0801e50d l     O .bss	00000001 _ZL12has_dest_mac
0801e50e l     O .bss	00000006 _ZL9gwmacaddr
0801e514 l     O .bss	00000001 _ZL9waitgwmac
0801e516 l     O .bss	00000002 _ZL13info_data_len
0801c865 l     O .rwdata	00000001 _ZL6seqnum
0801c866 l     O .rwdata	00000001 _ZL9result_fd
0801e518 l     O .bss	00000004 _ZL10result_ptr
0801e51c l     O .bss	00000004 _ZL3SEQ
0801c86d l     O .rwdata	00000008 _ZL9arpreqhdr
0801a6dc l     O .rodata	00000009 _ZL5iphdr
0801a6e5 l     O .rodata	0000000a _ZL9ntpreqhdr
08005b58 l     F .text	00000184 _ZL13fill_checksumhhth
08005cdc l     F .text	00000050 _ZL7setMACsPKh
08005d2c l     F .text	00000060 _ZL12setMACandIPsPKhS0_
08005d8c l     F .text	00000044 _ZL24check_ip_message_is_fromPKh
08005dd0 l     F .text	000000bc _ZL6is_lanPKhS0_
08005e8c l     F .text	00000090 _ZL25eth_type_is_arp_and_my_ipt
08005f1c l     F .text	000000dc _ZL24eth_type_is_ip_and_my_ipt
08005ff8 l     F .text	00000080 _ZL20fill_ip_hdr_checksumv
08006078 l     F .text	0000006c _ZL11make_eth_ipv
080060e4 l     F .text	00000100 _ZL8step_seqth
080061e4 l     F .text	000000e4 _ZL12make_tcpheadth
080062c8 l     F .text	000000c8 _ZL28make_arp_answer_from_requestv
08006390 l     F .text	000000a4 _ZL28make_echo_reply_from_requestt
080065b4 l     F .text	0000012c _ZL24make_tcp_synack_from_synv
08006770 l     F .text	000000f0 _ZL21make_tcp_ack_from_anysh
08006860 l     F .text	000000b8 _ZL30make_tcp_ack_with_data_noflagst
08006980 l     F .text	000000a8 _ZL16getBigEndianLongh
08006a28 l     F .text	00000088 _ZL17setSequenceNumberm
080073ec l     F .text	000000d4 _ZL17client_arp_whohasPh
08007540 l     F .text	00000068 _ZL16client_store_macPhS_
080075a8 l     F .text	0000003c _ZL21client_gw_arp_refreshv
080076a8 l     F .text	00000204 _ZL10client_synhhh
08007918 l     F .text	00000174 _ZL31www_client_internal_datafill_cbh
08007a8c l     F .text	000000f8 _ZL29www_client_internal_result_cbhhtt
08007cf4 l     F .text	00000078 _ZL15tcp_datafill_cbh
08007d6c l     F .text	00000064 _ZL13tcp_result_cbhhtt
00000000 l    df *ABS*	00000000 udpserver.cpp
00000000 l    df *ABS*	00000000 webutil.cpp
00000000 l    df *ABS*	00000000 main.cpp
0801a7f8 l     O .rodata	0000000e _ZL7website
0801c875 l     O .rwdata	00000006 _ZL5mymac
0801e524 l     O .bss	00000004 _ZL5timer
08008df0 l     F .text	00000074 _ZL12my_result_cbhtt
0801c887 l     O .rwdata	00000004 _ZZ4mainE4mask
0801c883 l     O .rwdata	00000004 _ZZ4mainE3dns
0801c87f l     O .rwdata	00000004 _ZZ4mainE2gw
0801c87b l     O .rwdata	00000004 _ZZ4mainE2ip
00000000 l    df *ABS*	00000000 vmi_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
0801ad98 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 itoa.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 utoa.c
00000000 l    df *ABS*	00000000 vfprintf.c
0801aa92 l     O .rodata	00000010 zeroes.4404
0800d798 l     F .text	000000bc __sbprintf
0801aaa2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0800d9a8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800f500 l     F .text	00000008 __fp_unlock
0800f514 l     F .text	0000019c __sinit.part.1
0800f6b0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0801b5e4 l     O .rwdata	00000020 lc_ctype_charset
0801b5c4 l     O .rwdata	00000020 lc_message_charset
0801b604 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0801aad0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0801219c l     F .text	000000fc __sprint_r.part.0
0801abf4 l     O .rodata	00000010 zeroes.4349
080137d8 l     F .text	000000bc __sbprintf
0801ac04 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
08017644 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08017758 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08017784 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
08017a6c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08017b54 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
08017c40 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08017e1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0801c8c4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_times.c
08018234 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08018318 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08018454 l     F .text	00000034 alt_dev_reg
0801b7e4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0801874c l     F .text	0000020c altera_avalon_jtag_uart_irq
08018958 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0801918c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08019524 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08019984 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08019ae4 l     F .text	0000003c alt_get_errno
08019b20 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
0801c85c  w    O .rwdata	00000008 _ZTI11StashHeader
0801e56c g     O .bss	00000004 alt_instruction_exception_handler
08008abc g     F .text	00000028 _ZN9EtherCard18udpServerListeningEv
0800adec g     F .text	00000018 putchar
080023f8 g     F .text	000000a0 _ZN9EtherCard4wtoaEtPc
080099dc g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
080117a8 g     F .text	00000074 _mprec_log10
08011894 g     F .text	0000008c __any_on
08013ee4 g     F .text	00000054 _isatty_r
0801aadc g     O .rodata	00000028 __mprec_tinytens
08017d58 g     F .text	0000007c alt_main
0800b008 g     F .text	00000090 strcpy
0801c844 g     O .rwdata	00000008 ctrl_xfers
0800ae04 g     F .text	000000c0 _puts_r
0801e9c0 g     O .bss	00000100 alt_irq
08013f38 g     F .text	00000060 _lseek_r
08007c70 g     F .text	00000084 _ZN9EtherCard8httpPostEPKcS1_S1_S1_PFvhttE
08001a48 g     F .text	00000644 USB_Task
08008d70 g     F .text	00000040 _ZN9EtherCard7copyMacEPhPKh
0801c8d4 g       *ABS*	00000000 __flash_rwdata_start
08008838  w    F .text	00000038 _ZNK12BufferFiller8positionEv
0801601c g     F .text	00000088 .hidden __eqdf2
08010334 g     F .text	0000005c _gettimeofday_r
0801eac0 g       *ABS*	00000000 __alt_heap_start
0800ada8 g     F .text	0000003c printf
08013ff8 g     F .text	0000009c _wcrtomb_r
08000b44 g     F .text	00000088 kbdPoll
08004114 g     F .text	00000038 _ZN8ENC28J608isLinkUpEv
08012138 g     F .text	0000005c __sseek
0800f860 g     F .text	00000010 __sinit
08013894 g     F .text	00000140 __swbuf_r
08009d00 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
08010390 g     F .text	0000007c _setlocale_r
0801a9e8  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
0800f6b8 g     F .text	00000078 __sfmoreglue
08017df8 g     F .text	00000024 __malloc_unlock
08009764 g     F .text	00000274 _ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
0801e520 g     O .bss	00000001 numListeners
0801c854  w    O .rwdata	00000007 _ZTS5Stash
080049c4 g     F .text	000000ac _ZN5Stash9fetchByteEhh
08004a70 g     F .text	00000064 _ZN5Stash7initMapEh
0801070c g     F .text	0000015c memmove
0800f848 g     F .text	00000018 _cleanup
08010868 g     F .text	000000a8 _Balloc
08000c98 g     F .text	0000008c MAXreg_wr
0801ad48 g     O .rwdata	00000030 ClientDriverTable
08007e90 g     F .text	00000088 _ZN9EtherCard24packetLoopIcmpCheckReplyEPKh
080160a4 g     F .text	000000dc .hidden __gtdf2
08019d68 g     F .text	00000024 altera_nios2_gen2_irq_init
0800208c g     F .text	0000002c MSDProbe
08000000 g     F .entry	0000000c __reset
08018270 g     F .text	00000078 times
08007be8 g     F .text	00000088 _ZN9EtherCard9browseUrlEPKcS1_S1_S1_PFvhttE
08001548 g     F .text	000000e8 XferCtrlData
08004e40 g     F .text	0000008c _ZN5Stash4saveEv
08000020 g       *ABS*	00000000 __flash_exceptions_start
0801e570 g     O .bss	00000010 hid_ep
08013e88 g     F .text	0000005c _fstat_r
0801e534 g     O .bss	00000004 errno
080038ec g     F .text	00000168 _ZN9EtherCard9dnsLookupEPKcb
080120b4 g     F .text	00000008 __seofread
08003324 g     F .text	000001f0 _ZN9EtherCard16DhcpStateMachineEt
08005a40  w    F .text	00000064 _ZN5StashC1Eh
0801e558 g     O .bss	00000004 alt_argv
08024844 g       *ABS*	00000000 _gp
080182e8 g     F .text	00000030 usleep
0801e48d g     O .bss	00000004 _ZN9EtherCard6dhcpipE
08000e94 g     F .text	00000080 MAXreg_rd
0801b664 g     O .rwdata	00000180 alt_fd_list
08000a7c g     F .text	00000040 HID_init
0800ade4 g     F .text	00000008 _putchar_r
08019d8c g     F .text	00000090 alt_find_dev
0800b33c g     F .text	00000008 _times_r
0800ab08 g     F .text	00000148 memcpy
0800f508 g     F .text	0000000c _cleanup_r
08009ab0 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0801745c g     F .text	000000dc .hidden __floatsidf
08019a68 g     F .text	0000007c alt_io_redirect
08016180 g     F .text	000000f4 .hidden __ltdf2
0801a4a8 g       *ABS*	00000000 __DTOR_END__
080050ec g     F .text	00000124 _ZN5Stash3getEv
08009ac8 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
080047f4 g     F .text	0000007c _ZN8ENC28J606copyinEhPh
0800aec4 g     F .text	00000014 puts
0801a924  w    O .rodata	0000000c _ZTIN10__cxxabiv121__vmi_class_type_infoE
08019fe8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08011fec g     F .text	00000074 __fpclassifyd
08008ae4 g     F .text	000001b8 _ZN9EtherCard27udpServerHasProcessedPacketEt
08008870 g     F .text	000000a0 _ZN9EtherCard21udpServerListenOnPortEPFvtPhtPKctEt
08011704 g     F .text	000000a4 __ratio
080137bc g     F .text	0000001c __vfiprintf_internal
0801e476 g     O .bss	00000001 ether
08018b50 g     F .text	0000021c altera_avalon_jtag_uart_read
0800a258 g     F .text	00000014 malloc
0800ad78 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0800a0bc g     F .text	00000064 .hidden __udivsi3
08017aa8 g     F .text	000000ac isatty
0801ab2c g     O .rodata	000000c8 __mprec_tens
08004ecc g     F .text	00000078 _ZN5Stash7releaseEv
0801e61c g     O .bss	00000040 listeners
080074ec g     F .text	00000054 _ZN9EtherCard16clientWaitingDnsEv
0801040c g     F .text	0000000c __locale_charset
0801e544 g     O .bss	00000008 alt_timezone
08002498 g     F .text	0000034c _ZN12BufferFiller6emit_pEPKcz
0801e530 g     O .bss	00000004 __malloc_top_pad
0801c84c g     O .rwdata	00000001 usb_task_state
0801c8a4 g     O .rwdata	00000004 __mb_cur_max
0800a254 g     F .text	00000004 itoa
0801043c g     F .text	0000000c _localeconv_r
08008ff4 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD1Ev
0801a6a8  w    O .rodata	0000000c _ZTV5Stash
08006e74 g     F .text	000000f4 _ZN9EtherCard16ntpProcessAnswerEPmh
08010c9c g     F .text	0000003c __i2b
0800fce4 g     F .text	000004c8 __sfvwrite_r
08009c48 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0800aed8 g     F .text	00000054 _sbrk_r
0801e598 g     O .bss	00000084 _ZN5Stash4bufsE
0801a96c  w    O .rodata	00000020 _ZTVSt9type_info
080066e0 g     F .text	00000090 _ZN9EtherCard19getTcpPayloadLengthEv
08013f98 g     F .text	00000060 _read_r
080011fc g     F .text	00000094 MAX3421E_init
0801c8bc g     O .rwdata	00000004 alt_max_fd
08004870 g     F .text	000000ec _ZN5Stash10allocBlockEv
08004d1c g     F .text	000000a0 _ZN5Stash6createEv
08005a40  w    F .text	00000064 _ZN5StashC2Eh
08013b7c g     F .text	000000f0 _fclose_r
0800f4d0 g     F .text	00000030 fflush
0801e52c g     O .bss	00000004 __malloc_max_sbrked_mem
08003ee4 g     F .text	00000230 _ZN8ENC28J6010initializeEtPKhh
08014da0 g     F .text	000008ac .hidden __adddf3
08002364 g     F .text	00000094 _ZN9EtherCard11staticSetupEPKhS1_S1_S1_
0801aa1c  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
080114ac g     F .text	0000010c __b2d
080147dc g     F .text	000005c4 .hidden __umoddi3
08017c7c g     F .text	000000dc lseek
08009b0c g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
08009a34 g     F .text	00000004 _ZdlPv
0801c894 g     O .rwdata	00000004 _global_impure_ptr
08009004 g     F .text	00000034 _ZN10__cxxabiv121__vmi_class_type_infoD0Ev
08011a88 g     F .text	00000564 _realloc_r
08004c8c g     F .text	00000090 _ZN5Stash9freeCountEv
0801eac0 g       *ABS*	00000000 __bss_end
08019894 g     F .text	000000f0 alt_iic_isr_register
0801812c g     F .text	00000108 alt_tick
080141e0 g     F .text	000005fc .hidden __udivdi3
08013de4 g     F .text	00000024 _fputwc_r
0801ab04 g     O .rodata	00000028 __mprec_bigtens
08010a80 g     F .text	00000104 __s2b
08017538 g     F .text	000000a8 .hidden __floatunsidf
080111ec g     F .text	00000060 __mcmp
08004778 g     F .text	0000007c _ZN8ENC28J607copyoutEhPKh
080027e4 g     F .text	00000028 _Z6millisv
08003a54 g     F .text	00000058 _Z5delayi
0800f880 g     F .text	00000018 __fp_lock_all
08019848 g     F .text	0000004c alt_ic_irq_enabled
080059e4  w    F .text	0000005c _ZN5StashC1Ev
08006b28 g     F .text	00000070 _ZN9EtherCard26httpServerReply_with_flagsEth
08018090 g     F .text	0000009c alt_alarm_stop
0801e568 g     O .bss	00000004 alt_irq_active
08002154 g     F .text	0000002c DummyProbe
08006f68 g     F .text	00000188 _ZN9EtherCard10udpPrepareEtPKht
080000fc g     F .exceptions	000000d4 alt_irq_handler
0801b63c g     O .rwdata	00000028 alt_dev_null
0801e49c g     O .bss	00000002 _ZN9EtherCard8delaycntE
0801e495 g     O .bss	00000004 _ZN9EtherCard5hisipE
08009038 g     F .text	00000128 _ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
08000abc g     F .text	00000088 mousePoll
0801a98c  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
08001050 g     F .text	00000024 Vbus_power
08019504 g     F .text	00000020 alt_dcache_flush_all
08010b84 g     F .text	00000068 __hi0bits
0800b49c g     F .text	00000004 utoa
080173dc g     F .text	00000080 .hidden __fixdfsi
0801c8d4 g       *ABS*	00000000 __ram_rwdata_end
0801e485 g     O .bss	00000004 _ZN9EtherCard11broadcastipE
080099d8 g     F .text	00000004 _ZNSt9type_infoD1Ev
0801c8b4 g     O .rwdata	00000008 alt_dev_list
08018354 g     F .text	00000100 write
08011920 g     F .text	000000a0 _putc_r
080099ec g     F .text	00000004 _ZNSt9type_infoD0Ev
0801ad48 g       *ABS*	00000000 __ram_rodata_end
0801e475 g     O .bss	00000001 usb_error
080177c0 g     F .text	000000b8 fstat
08016180 g     F .text	000000f4 .hidden __ledf2
08008c9c g     F .text	00000050 _ZN9EtherCard7printIpEPKcPKh
08006b98 g     F .text	0000015c _ZN9EtherCard17clientIcmpRequestEPKh
08010f64 g     F .text	00000140 __pow5mult
080122b0 g     F .text	0000150c ___vfiprintf_internal_r
0801e540 g     O .bss	00000004 __nlocale_changed
0800a120 g     F .text	00000058 .hidden __umodsi3
080099e4 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
08005b18 g     F .text	00000040 _Z8memcpy_PPvPKvj
08007e64 g     F .text	0000002c _ZN9EtherCard20registerPingCallbackEPFvPhE
08005554 g     F .text	00000330 _ZN5Stash7extractEttPv
0801eac0 g       *ABS*	00000000 end
0800a1ec g     F .text	00000068 __itoa
0800725c g     F .text	00000190 _ZN9EtherCard7sendWolEPh
08005518 g     F .text	0000003c _ZN5Stash6lengthEv
0801868c g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
080016a4 g     F .text	0000017c XferDispatchPkt
08009b78 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
08008ff4 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD2Ev
0801a4a8 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0801e4c7 g     O .bss	00000001 _ZN8ENC28J6019promiscuous_enabledE
08019204 g     F .text	0000007c alt_avalon_timer_sc_init
080175e0 g     F .text	00000064 .hidden __clzsi2
080078ac g     F .text	0000006c _ZN9EtherCard12clientTcpReqEPFhhhttEPFthEt
08009a38 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
08018d6c g     F .text	00000224 altera_avalon_jtag_uart_write
0800f870 g     F .text	00000004 __sfp_lock_acquire
08010628 g     F .text	000000e4 memchr
0800b4a0 g     F .text	000022dc ___vfprintf_internal_r
080013c8 g     F .text	00000034 MaxGpxHandler
0800f9d4 g     F .text	00000310 _free_r
08010418 g     F .text	00000010 __locale_mb_cur_max
08004678 g     F .text	00000070 _ZN8ENC28J6016disableBroadcastEb
0801e481 g     O .bss	00000004 _ZN9EtherCard7netmaskE
080032a4 g     F .text	00000048 _ZN9EtherCard21dhcpAddOptionCallbackEhPFvhPKhhE
0801a1e8 g     F .text	00000180 __call_exitprocs
08006918 g     F .text	00000068 _ZN9EtherCard15httpServerReplyEt
08007b84 g     F .text	00000064 _ZN9EtherCard9browseUrlEPKcS1_S1_PFvhttE
0801e47d g     O .bss	00000004 _ZN9EtherCard4myipE
0801e53c g     O .bss	00000004 __mlocale_changed
0801c89c g     O .rwdata	00000004 __malloc_sbrk_base
08000230 g     F .text	0000003c _start
0801e560 g     O .bss	00000004 _alt_tick_rate
08000f14 g     F .text	00000094 MAXbytes_rd
0801a95c  w    O .rodata	0000000d _ZTSSt9type_info
08004f44 g     F .text	0000011c _ZN5Stash3putEc
080110a4 g     F .text	00000148 __lshift
08018f90 g     F .text	000001fc alt_avalon_spi_command
0801e564 g     O .bss	00000004 _alt_nticks
08017e58 g     F .text	00000104 read
080184c0 g     F .text	00000068 alt_sys_init
0801e978 g     O .bss	00000048 devtable
0801a0d0 g     F .text	00000118 __register_exitproc
08000674 g     F .text	00000408 HIDKProbe
080032ec g     F .text	00000038 _ZN9EtherCard21dhcpAddOptionCallbackEPhPFvhPKhhE
0801e580 g     O .bss	00000018 msd_ep
0800b130 g     F .text	000000d0 strncmp
08009d44 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
08007f18 g     F .text	0000011c _ZN9EtherCard6acceptEtt
0800437c g     F .text	00000140 _ZN8ENC28J6013packetReceiveEv
08010cd8 g     F .text	0000028c __multiply
080189f8 g     F .text	00000068 altera_avalon_jtag_uart_close
080019b0 g     F .text	00000098 USB_init
08005288 g     F .text	00000290 _ZN5Stash7prepareEPKcz
0800a178 g     F .text	00000028 .hidden __mulsi3
0801e878 g     O .bss	00000100 bigbuf
0801ad48 g       *ABS*	00000000 __ram_rwdata_start
0801a4a8 g       *ABS*	00000000 __ram_rodata_start
0800b200 g     F .text	000000ec strncpy
0801e850 g     O .bss	00000028 __malloc_current_mallinfo
0801e46c g     O .bss	00000001 last_usb_task_state
080115b8 g     F .text	0000014c __d2b
080099d8 g     F .text	00000004 _ZNSt9type_infoD2Ev
080046e8 g     F .text	00000090 _ZN8ENC28J606peekinEhh
0801a6b4  w    O .rodata	00000018 _ZTI5Stash
08009f40 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
0801e464 g     O .bss	00000008 dev0ep
0801a8fc  w    O .rodata	00000026 _ZTSN10__cxxabiv121__vmi_class_type_infoE
08018528 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08019f24 g     F .text	000000c4 alt_get_fd
080193ac g     F .text	00000158 alt_busy_sleep
080020b8 g     F .text	00000038 MSDEventHandler
08013a4c g     F .text	00000054 _close_r
0801e4c6 g     O .bss	00000001 _ZN8ENC28J6017broadcast_enabledE
0800aa8c g     F .text	0000007c memcmp
080185e8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0801eac0 g       *ABS*	00000000 __alt_stack_base
08018638 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0801c84e g     O .rwdata	00000002 _ZN9EtherCard7hisportE
08009d00 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
08008034 g     F .text	00000770 _ZN9EtherCard10packetLoopEt
080087f8  w    F .text	00000040 _ZN12BufferFillerC2EPh
080044bc g     F .text	00000158 _ZN8ENC28J6010packetSendEt
0800d854 g     F .text	00000154 __swsetup_r
0801564c g     F .text	000009d0 .hidden __divdf3
0800f730 g     F .text	00000118 __sfp
0801181c g     F .text	00000078 __copybits
080099dc g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
0801b1bc g     O .rwdata	00000408 __malloc_av_
0800f87c g     F .text	00000004 __sinit_lock_release
0800211c g     F .text	00000038 CDCEventHandler
08016274 g     F .text	0000086c .hidden __muldf3
08002180 g     F .text	00000038 DummyEventHandler
08012060 g     F .text	00000054 __sread
08006ab0 g     F .text	0000002c _ZN9EtherCard17getSequenceNumberEv
08019e1c g     F .text	00000108 alt_find_file
0801e65c g     O .bss	000001f4 _ZN8ENC28J606bufferE
08019560 g     F .text	000000a4 alt_dev_llist_insert
08017dd4 g     F .text	00000024 __malloc_lock
08017fe0 g     F .text	000000b0 sbrk
08005060 g     F .text	0000008c _ZN5Stash5printEPc
08007dd0 g     F .text	0000004c _ZN9EtherCard7tcpSendEv
0801a9bc  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0800f474 g     F .text	0000005c _fflush_r
08013aa0 g     F .text	000000dc _calloc_r
0800b344 g     F .text	00000158 __utoa
08017878 g     F .text	000001f4 gettimeofday
0801e460 g       *ABS*	00000000 __bss_start
08006434 g     F .text	00000180 _ZN9EtherCard12makeUdpReplyEPKcht
08001074 g     F .text	00000188 MAX_busprobe
0801e460 g     O .bss	00000002 hid_device
0800ac50 g     F .text	00000128 memset
08008e64 g     F .text	00000190 main
08006adc g     F .text	0000004c _ZN9EtherCard18httpServerReplyAckEv
08001290 g     F .text	0000006c MAX3421E_Task
0801e55c g     O .bss	00000004 alt_envp
0801e528 g     O .bss	00000004 __malloc_max_total_mem
08018588 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080139d4 g     F .text	00000018 __swbuf
08002210 g     F .text	00000084 ConvUTF8ToStr
08012194 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
08013c6c g     F .text	00000014 fclose
0800dbd0 g     F .text	00001688 _dtoa_r
0800a280 g     F .text	0000080c _malloc_r
08014154 g     F .text	00000030 __ascii_wctomb
0800b2ec g     F .text	00000050 time
0801c8c0 g     O .rwdata	00000004 alt_errno
0801a9b0  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
08004614 g     F .text	00000064 _ZN8ENC28J6015enableBroadcastEb
08005884 g     F .text	0000013c _ZN5Stash7cleanupEv
080101ac g     F .text	000000c4 _fwalk
0801e477 g     O .bss	00000006 _ZN9EtherCard5mymacE
08005aa4  w    F .text	00000050 _ZN5Stash5writeEh
080119c0 g     F .text	000000c8 putc
08009fc4 g     F .text	00000084 .hidden __divsi3
08001820 g     F .text	00000190 XferInTransfer
0800f8b0 g     F .text	00000124 _malloc_trim_r
08004dbc g     F .text	00000084 _ZN5Stash4openEh
0801a4a8 g       *ABS*	00000000 __CTOR_END__
08005210 g     F .text	00000078 _ZN5Stash4sizeEv
080021d8 g     F .text	00000038 GetDevtable
0800af2c g     F .text	000000dc strcmp
0801a4a8 g       *ABS*	00000000 __flash_rodata_start
0801a4a8 g       *ABS*	00000000 __DTOR_LIST__
0801e4c4 g     O .bss	00000002 _ZN8ENC28J6010bufferSizeE
08001630 g     F .text	00000074 XferCtrlND
0801e491 g     O .bss	00000004 _ZN9EtherCard5dnsipE
0801601c g     F .text	00000088 .hidden __nedf2
08000fa8 g     F .text	000000a8 MAX3421E_reset
08018488 g     F .text	00000038 alt_irq_init
08017f5c g     F .text	00000084 alt_release_fd
080070f0 g     F .text	000000d0 _ZN9EtherCard11udpTransmitEt
08009d10 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
0801ac14 g     O .rodata	00000100 .hidden __clz_tab
0801e538 g     O .bss	00000004 _PathLocale
0801a084 g     F .text	00000014 atexit
080139ec g     F .text	00000060 _write_r
08010448 g     F .text	00000018 setlocale
0801a930  w    O .rodata	0000002c _ZTVN10__cxxabiv121__vmi_class_type_infoE
080075e4 g     F .text	00000044 _ZN9EtherCard7setGwIpEPKh
0801c898 g     O .rwdata	00000004 _impure_ptr
0801e554 g     O .bss	00000004 alt_argc
0800f258 g     F .text	0000021c __sflush_r
08019664 g     F .text	00000060 _do_dtors
08010434 g     F .text	00000008 __locale_cjk_lang
08007e1c g     F .text	00000048 _ZN9EtherCard8tcpReplyEh
08000d24 g     F .text	00000170 MAXbytes_wr
08008db0 g     F .text	00000040 _ZN9EtherCard6copyIpEPhPKh
08008910 g     F .text	000000d4 _ZN9EtherCard26udpServerPauseListenOnPortEt
080089e4 g     F .text	000000d8 _ZN9EtherCard27udpServerResumeListenOnPortEt
08000020 g       .exceptions	00000000 alt_irq_entry
08011448 g     F .text	00000064 __ulp
0800f898 g     F .text	00000018 __fp_unlock_all
0801c8ac g     O .rwdata	00000008 alt_fs_list
08005af4 g     F .text	00000024 _Z4PSTRPc
080020f0 g     F .text	0000002c CDCProbe
0801e54c g     O .bss	00000008 alt_resettime
08009ac8 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
08000020 g       *ABS*	00000000 __ram_exceptions_start
08010460 g     F .text	0000000c localeconv
08002294 g     F .text	000000d0 _ZN9EtherCard5beginEtPKhh
080021b8 g     F .text	00000020 GetUsbTaskState
0801c867 g     O .rwdata	00000006 allOnes
080196e4 g     F .text	00000050 alt_ic_isr_register
0801aa10  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0801c8d4 g       *ABS*	00000000 _edata
08000c04 g     F .text	00000038 HIDKEventHandler
0801eac0 g       *ABS*	00000000 _end
08009160 g     F .text	00000604 _ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
080012fc g     F .text	000000cc MaxIntHandler
08013c80 g     F .text	00000164 __fputwc
08000230 g       *ABS*	00000000 __ram_exceptions_end
0801e4ce g     O .bss	00000007 _ZN5Stash3mapE
08018a60 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08000c3c g     F .text	00000034 SPI_init
080197bc g     F .text	0000008c alt_ic_irq_disable
0801e489 g     O .bss	00000004 _ZN9EtherCard4gwipE
080120bc g     F .text	0000007c __swrite
0801c8a0 g     O .rwdata	00000004 __malloc_trim_threshold
08010428 g     F .text	0000000c __locale_msgcharset
0801a098 g     F .text	00000038 exit
08010270 g     F .text	000000c4 _fwalk_reent
08009ea4 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
0801124c g     F .text	000001fc __mdiff
080087a4 g     F .text	00000030 _ZN9EtherCard20persistTcpConnectionEb
080074c0 g     F .text	0000002c _ZN9EtherCard15clientWaitingGwEv
0800a048 g     F .text	00000074 .hidden __modsi3
0800495c g     F .text	00000068 _ZN5Stash9freeBlockEh
080059c0  w    F .text	00000024 _ZN11StashHeaderC1Ev
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
0800f874 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
080059e4  w    F .text	0000005c _ZN5StashC2Ev
08006cf4 g     F .text	00000180 _ZN9EtherCard10ntpRequestEPhh
08000bcc g     F .text	00000038 HIDMEventHandler
0801a474 g     F .text	00000034 _exit
08019280 g     F .text	0000012c alt_alarm_start
0801a368 g     F .text	0000010c .hidden __muldi3
0801046c g     F .text	000001bc __smakebuf_r
080087d4  w    F .text	00000024 _ZN8ENC28J609tcpOffsetEv
0800b098 g     F .text	00000098 strlen
0801c88c  w    O .rwdata	00000008 _ZTISt9type_info
08019c0c g     F .text	0000015c open
080160a4 g     F .text	000000dc .hidden __gedf2
0800a1a0 g     F .text	0000004c clock
0801a6cc  w    O .rodata	0000000e _ZTS11StashHeader
0801e49a g     O .bss	00000001 _ZN9EtherCard22persist_tcp_connectionE
0801c8a8 g     O .rwdata	00000004 __wctomb
08012298 g     F .text	00000018 __sprint_r
080196c4 g     F .text	00000020 alt_icache_flush_all
0801c8d0 g     O .rwdata	00000004 alt_priority_mask
0801e499 g     O .bss	00000001 _ZN9EtherCard10using_dhcpE
08019734 g     F .text	00000088 alt_ic_irq_enable
0800d77c g     F .text	0000001c __vfprintf_internal
0800026c g     F .text	00000408 HIDMProbe
08014184 g     F .text	0000005c _wctomb_r
08000c70 g     F .text	00000028 SPI_wr
08016ae0 g     F .text	000008fc .hidden __subdf3
08010bec g     F .text	000000b0 __lo0bits
0801c8c8 g     O .rwdata	00000008 alt_alarm_list
08019604 g     F .text	00000060 _do_ctors
080071c0 g     F .text	0000009c _ZN9EtherCard7sendUdpEPKchtPKht
08008cec g     F .text	00000084 _ZN9EtherCard7printIpEPKh
08014094 g     F .text	000000c0 wcrtomb
08017680 g     F .text	000000d8 close
08003114 g     F .text	00000190 _ZN9EtherCard9dhcpSetupEPKcb
08017bbc g     F .text	00000084 alt_load
08007628 g     F .text	00000080 _ZN9EtherCard22updateBroadcastAddressEv
080087f8  w    F .text	00000040 _ZN12BufferFillerC1EPh
080099f0 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
08004ad4 g     F .text	000001b8 _ZN5Stash4loadEhh
08013e08 g     F .text	00000080 fputwc
0800a26c g     F .text	00000014 free
0800f878 g     F .text	00000004 __sinit_lock_acquire
080013fc g     F .text	0000014c XferCtrlReq
08010938 g     F .text	00000148 __multadd
08009ad8 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
080059c0  w    F .text	00000024 _ZN11StashHeaderC2Ev
08010910 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408c14 	ori	at,at,560
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	008200b4 	movhi	r2,2050
 8000140:	10ba7004 	addi	r2,r2,-5696
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	008200b4 	movhi	r2,2050
 8000158:	10ba7004 	addi	r2,r2,-5696
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e4:	00bfffc4 	movi	r2,-1
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001f0:	d0a74a17 	ldw	r2,-25304(gp)
 80001f4:	10000726 	beq	r2,zero,8000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f8:	d0a74a17 	ldw	r2,-25304(gp)
 80001fc:	e0fffd17 	ldw	r3,-12(fp)
 8000200:	e1bffe17 	ldw	r6,-8(fp)
 8000204:	e17fff17 	ldw	r5,-4(fp)
 8000208:	1809883a 	mov	r4,r3
 800020c:	103ee83a 	callr	r2
 8000210:	00000206 	br	800021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000218:	0005883a 	mov	r2,zero
}
 800021c:	e037883a 	mov	sp,fp
 8000220:	dfc00117 	ldw	ra,4(sp)
 8000224:	df000017 	ldw	fp,0(sp)
 8000228:	dec00204 	addi	sp,sp,8
 800022c:	f800283a 	ret

Disassembly of section .text:

08000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000230:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000238:	068200b4 	movhi	gp,2050
    ori gp, gp, %lo(_gp)
 800023c:	d6921114 	ori	gp,gp,18500
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000240:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000244:	10b91814 	ori	r2,r2,58464

    movhi r3, %hi(__bss_end)
 8000248:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 800024c:	18fab014 	ori	r3,r3,60096

    beq r2, r3, 1f
 8000250:	10c00326 	beq	r2,r3,8000260 <_start+0x30>

0:
    stw zero, (r2)
 8000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800025c:	10fffd36 	bltu	r2,r3,8000254 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000260:	8017bbc0 	call	8017bbc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000264:	8017d580 	call	8017d58 <alt_main>

08000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000268:	003fff06 	br	8000268 <alt_after_alt_main>

0800026c <HIDMProbe>:
/* HID Mouse probe. Called from USB state machine.                          */
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe(BYTE addr, DWORD flags) {
 800026c:	defff204 	addi	sp,sp,-56
 8000270:	dfc00d15 	stw	ra,52(sp)
 8000274:	df000c15 	stw	fp,48(sp)
 8000278:	df000c04 	addi	fp,sp,48
 800027c:	2005883a 	mov	r2,r4
 8000280:	e17fff15 	stw	r5,-4(fp)
 8000284:	e0bffe05 	stb	r2,-8(fp)
  BYTE tmpbyte;
  BYTE rcode;
  BYTE confvalue;
  WORD total_length;
  USB_DESCR *data_ptr = (USB_DESCR *)&bigbuf;
 8000288:	008200b4 	movhi	r2,2050
 800028c:	10ba1e04 	addi	r2,r2,-6024
 8000290:	e0bffa15 	stw	r2,-24(fp)
  BYTE *byte_ptr = bigbuf;
 8000294:	008200b4 	movhi	r2,2050
 8000298:	10ba1e04 	addi	r2,r2,-6024
 800029c:	e0bffb15 	stw	r2,-20(fp)
  rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0,
 80002a0:	e0fffe03 	ldbu	r3,-8(fp)
 80002a4:	008200b4 	movhi	r2,2050
 80002a8:	10ba1e04 	addi	r2,r2,-6024
 80002ac:	d8800415 	stw	r2,16(sp)
 80002b0:	00800244 	movi	r2,9
 80002b4:	d8800315 	stw	r2,12(sp)
 80002b8:	d8000215 	stw	zero,8(sp)
 80002bc:	00800084 	movi	r2,2
 80002c0:	d8800115 	stw	r2,4(sp)
 80002c4:	d8000015 	stw	zero,0(sp)
 80002c8:	01c00184 	movi	r7,6
 80002cc:	01802004 	movi	r6,128
 80002d0:	000b883a 	mov	r5,zero
 80002d4:	1809883a 	mov	r4,r3
 80002d8:	80013fc0 	call	80013fc <XferCtrlReq>
 80002dc:	e0bffc05 	stb	r2,-16(fp)
                           bigbuf); // get configuration descriptor
  if (rcode) {                      // error handling
 80002e0:	e0bffc03 	ldbu	r2,-16(fp)
 80002e4:	10000226 	beq	r2,zero,80002f0 <HIDMProbe+0x84>
    // printf("unable to get configuration descriptor");
    return (FALSE);
 80002e8:	0005883a 	mov	r2,zero
 80002ec:	0000dc06 	br	8000660 <HIDMProbe+0x3f4>
  }
  if (data_ptr->descr.config.wTotalLength > 256) {
 80002f0:	e0bffa17 	ldw	r2,-24(fp)
 80002f4:	1080008b 	ldhu	r2,2(r2)
 80002f8:	10bfffcc 	andi	r2,r2,65535
 80002fc:	10804070 	cmpltui	r2,r2,257
 8000300:	1000031e 	bne	r2,zero,8000310 <HIDMProbe+0xa4>
    total_length = 256;
 8000304:	00804004 	movi	r2,256
 8000308:	e0bff90d 	sth	r2,-28(fp)
 800030c:	00000306 	br	800031c <HIDMProbe+0xb0>
  } else {
    total_length = data_ptr->descr.config.wTotalLength;
 8000310:	e0bffa17 	ldw	r2,-24(fp)
 8000314:	1080008b 	ldhu	r2,2(r2)
 8000318:	e0bff90d 	sth	r2,-28(fp)
  }
  rcode = XferGetConfDescr(addr, 0, total_length, 0,
 800031c:	e13ffe03 	ldbu	r4,-8(fp)
 8000320:	e0fff90b 	ldhu	r3,-28(fp)
 8000324:	008200b4 	movhi	r2,2050
 8000328:	10ba1e04 	addi	r2,r2,-6024
 800032c:	d8800415 	stw	r2,16(sp)
 8000330:	d8c00315 	stw	r3,12(sp)
 8000334:	d8000215 	stw	zero,8(sp)
 8000338:	00800084 	movi	r2,2
 800033c:	d8800115 	stw	r2,4(sp)
 8000340:	d8000015 	stw	zero,0(sp)
 8000344:	01c00184 	movi	r7,6
 8000348:	01802004 	movi	r6,128
 800034c:	000b883a 	mov	r5,zero
 8000350:	80013fc0 	call	80013fc <XferCtrlReq>
 8000354:	e0bffc05 	stb	r2,-16(fp)
                           bigbuf); // get the whole configuration
  if (rcode) {                      // error handling
 8000358:	e0bffc03 	ldbu	r2,-16(fp)
 800035c:	10000226 	beq	r2,zero,8000368 <HIDMProbe+0xfc>
    // printf("unable to get configuration");
    return (FALSE);
 8000360:	0005883a 	mov	r2,zero
 8000364:	0000be06 	br	8000660 <HIDMProbe+0x3f4>
  }
  confvalue = data_ptr->descr.config.bConfigurationValue;
 8000368:	e0bffa17 	ldw	r2,-24(fp)
 800036c:	10800143 	ldbu	r2,5(r2)
 8000370:	e0bffc45 	stb	r2,-15(fp)
  // printf("checking configuration value (length: %d): ",
  //		data_ptr->descr.config.wTotalLength);
  // for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
  // printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
  //}
  while (byte_ptr < bigbuf + total_length) {
 8000374:	0000b306 	br	8000644 <HIDMProbe+0x3d8>
    if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) {
 8000378:	e0bffa17 	ldw	r2,-24(fp)
 800037c:	10800043 	ldbu	r2,1(r2)
 8000380:	10803fcc 	andi	r2,r2,255
 8000384:	10800120 	cmpeqi	r2,r2,4
 8000388:	1000091e 	bne	r2,zero,80003b0 <HIDMProbe+0x144>
      byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 800038c:	e0bffa17 	ldw	r2,-24(fp)
 8000390:	10800003 	ldbu	r2,0(r2)
 8000394:	10803fcc 	andi	r2,r2,255
 8000398:	e0fffb17 	ldw	r3,-20(fp)
 800039c:	1885883a 	add	r2,r3,r2
 80003a0:	e0bffb15 	stw	r2,-20(fp)
      data_ptr = (USB_DESCR *)byte_ptr;
 80003a4:	e0bffb17 	ldw	r2,-20(fp)
 80003a8:	e0bffa15 	stw	r2,-24(fp)
 80003ac:	0000a506 	br	8000644 <HIDMProbe+0x3d8>
    } // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
    else {
      // printf("starting interface parsing at byte location %d\n",
      //		data_ptr->descr.config.bLength);
      BYTE class = data_ptr->descr.interface.bInterfaceClass;
 80003b0:	e0bffa17 	ldw	r2,-24(fp)
 80003b4:	10800143 	ldbu	r2,5(r2)
 80003b8:	e0bffc85 	stb	r2,-14(fp)
      BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 80003bc:	e0bffa17 	ldw	r2,-24(fp)
 80003c0:	10800183 	ldbu	r2,6(r2)
 80003c4:	e0bffcc5 	stb	r2,-13(fp)
      BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 80003c8:	e0bffa17 	ldw	r2,-24(fp)
 80003cc:	108001c3 	ldbu	r2,7(r2)
 80003d0:	e0bffd05 	stb	r2,-12(fp)
      // printf("class %x, subclass %x, protocol %x,\n", class, subclass,
      //		protocol);
      // interface descriptor
      if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS &&
 80003d4:	e0bffc83 	ldbu	r2,-14(fp)
 80003d8:	108000d8 	cmpnei	r2,r2,3
 80003dc:	1000971e 	bne	r2,zero,800063c <HIDMProbe+0x3d0>
 80003e0:	e0bffcc3 	ldbu	r2,-13(fp)
 80003e4:	10800058 	cmpnei	r2,r2,1
 80003e8:	1000941e 	bne	r2,zero,800063c <HIDMProbe+0x3d0>
 80003ec:	e0bffd03 	ldbu	r2,-12(fp)
 80003f0:	10800098 	cmpnei	r2,r2,2
 80003f4:	1000911e 	bne	r2,zero,800063c <HIDMProbe+0x3d0>
          protocol == HID_PROTOCOL_MOUSE) {
        // detected a mouse
        devtable[addr].devclass = HID_M; // device class
 80003f8:	e0fffe03 	ldbu	r3,-8(fp)
 80003fc:	008200b4 	movhi	r2,2050
 8000400:	10ba5e04 	addi	r2,r2,-5768
 8000404:	180690fa 	slli	r3,r3,3
 8000408:	10c5883a 	add	r2,r2,r3
 800040c:	10800104 	addi	r2,r2,4
 8000410:	00c00084 	movi	r3,2
 8000414:	10c00005 	stb	r3,0(r2)
        tmpbyte = devtable[addr].epinfo->MaxPktSize;
 8000418:	e0fffe03 	ldbu	r3,-8(fp)
 800041c:	008200b4 	movhi	r2,2050
 8000420:	10ba5e04 	addi	r2,r2,-5768
 8000424:	180690fa 	slli	r3,r3,3
 8000428:	10c5883a 	add	r2,r2,r3
 800042c:	10800017 	ldw	r2,0(r2)
 8000430:	1080008b 	ldhu	r2,2(r2)
 8000434:	e0bffd45 	stb	r2,-11(fp)
        HID_init();                     // initialize data structures
 8000438:	8000a7c0 	call	8000a7c <HID_init>
        devtable[addr].epinfo = hid_ep; // switch endpoint information structure
 800043c:	e0fffe03 	ldbu	r3,-8(fp)
 8000440:	008200b4 	movhi	r2,2050
 8000444:	10ba5e04 	addi	r2,r2,-5768
 8000448:	180690fa 	slli	r3,r3,3
 800044c:	10c7883a 	add	r3,r2,r3
 8000450:	008200b4 	movhi	r2,2050
 8000454:	10b95c04 	addi	r2,r2,-6800
 8000458:	18800015 	stw	r2,0(r3)
        devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
 800045c:	e0fffe03 	ldbu	r3,-8(fp)
 8000460:	008200b4 	movhi	r2,2050
 8000464:	10ba5e04 	addi	r2,r2,-5768
 8000468:	180690fa 	slli	r3,r3,3
 800046c:	10c5883a 	add	r2,r2,r3
 8000470:	10800017 	ldw	r2,0(r2)
 8000474:	e0fffd43 	ldbu	r3,-11(fp)
 8000478:	10c0008d 	sth	r3,2(r2)
        hid_device.interface = data_ptr->descr.interface.bInterfaceNumber;
 800047c:	e0bffa17 	ldw	r2,-24(fp)
 8000480:	10800083 	ldbu	r2,2(r2)
 8000484:	d0a70745 	stb	r2,-25571(gp)
        hid_device.addr = addr;
 8000488:	e0bffe03 	ldbu	r2,-8(fp)
 800048c:	d0a70705 	stb	r2,-25572(gp)
        byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8000490:	e0bffa17 	ldw	r2,-24(fp)
 8000494:	10800003 	ldbu	r2,0(r2)
 8000498:	10803fcc 	andi	r2,r2,255
 800049c:	e0fffb17 	ldw	r3,-20(fp)
 80004a0:	1885883a 	add	r2,r3,r2
 80004a4:	e0bffb15 	stw	r2,-20(fp)
        data_ptr = (USB_DESCR *)byte_ptr;
 80004a8:	e0bffb17 	ldw	r2,-20(fp)
 80004ac:	e0bffa15 	stw	r2,-24(fp)
        while (byte_ptr < bigbuf + total_length) {
 80004b0:	00005b06 	br	8000620 <HIDMProbe+0x3b4>
          if (data_ptr->descr.config.bDescriptorType !=
 80004b4:	e0bffa17 	ldw	r2,-24(fp)
 80004b8:	10800043 	ldbu	r2,1(r2)
 80004bc:	10803fcc 	andi	r2,r2,255
 80004c0:	10800160 	cmpeqi	r2,r2,5
 80004c4:	1000091e 	bne	r2,zero,80004ec <HIDMProbe+0x280>
              USB_DESCRIPTOR_ENDPOINT) { // skip to endpoint descriptor
            byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 80004c8:	e0bffa17 	ldw	r2,-24(fp)
 80004cc:	10800003 	ldbu	r2,0(r2)
 80004d0:	10803fcc 	andi	r2,r2,255
 80004d4:	e0fffb17 	ldw	r3,-20(fp)
 80004d8:	1885883a 	add	r2,r3,r2
 80004dc:	e0bffb15 	stw	r2,-20(fp)
            data_ptr = (USB_DESCR *)byte_ptr;
 80004e0:	e0bffb17 	ldw	r2,-20(fp)
 80004e4:	e0bffa15 	stw	r2,-24(fp)
 80004e8:	00004d06 	br	8000620 <HIDMProbe+0x3b4>
          } else {
            /* fill endpoint information structure */
            devtable[addr].epinfo[1].epAddr =
 80004ec:	e0fffe03 	ldbu	r3,-8(fp)
 80004f0:	008200b4 	movhi	r2,2050
 80004f4:	10ba5e04 	addi	r2,r2,-5768
 80004f8:	180690fa 	slli	r3,r3,3
 80004fc:	10c5883a 	add	r2,r2,r3
 8000500:	10800017 	ldw	r2,0(r2)
 8000504:	10800204 	addi	r2,r2,8
                data_ptr->descr.endpoint.bEndpointAddress;
 8000508:	e0fffa17 	ldw	r3,-24(fp)
 800050c:	18c00083 	ldbu	r3,2(r3)
              USB_DESCRIPTOR_ENDPOINT) { // skip to endpoint descriptor
            byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
            data_ptr = (USB_DESCR *)byte_ptr;
          } else {
            /* fill endpoint information structure */
            devtable[addr].epinfo[1].epAddr =
 8000510:	10c00005 	stb	r3,0(r2)
                data_ptr->descr.endpoint.bEndpointAddress;
            devtable[addr].epinfo[1].Attr =
 8000514:	e0fffe03 	ldbu	r3,-8(fp)
 8000518:	008200b4 	movhi	r2,2050
 800051c:	10ba5e04 	addi	r2,r2,-5768
 8000520:	180690fa 	slli	r3,r3,3
 8000524:	10c5883a 	add	r2,r2,r3
 8000528:	10800017 	ldw	r2,0(r2)
 800052c:	10800204 	addi	r2,r2,8
                data_ptr->descr.endpoint.bmAttributes;
 8000530:	e0fffa17 	ldw	r3,-24(fp)
 8000534:	18c000c3 	ldbu	r3,3(r3)
            data_ptr = (USB_DESCR *)byte_ptr;
          } else {
            /* fill endpoint information structure */
            devtable[addr].epinfo[1].epAddr =
                data_ptr->descr.endpoint.bEndpointAddress;
            devtable[addr].epinfo[1].Attr =
 8000538:	10c00045 	stb	r3,1(r2)
                data_ptr->descr.endpoint.bmAttributes;
            devtable[addr].epinfo[1].MaxPktSize =
 800053c:	e0fffe03 	ldbu	r3,-8(fp)
 8000540:	008200b4 	movhi	r2,2050
 8000544:	10ba5e04 	addi	r2,r2,-5768
 8000548:	180690fa 	slli	r3,r3,3
 800054c:	10c5883a 	add	r2,r2,r3
 8000550:	10800017 	ldw	r2,0(r2)
 8000554:	10800204 	addi	r2,r2,8
                data_ptr->descr.endpoint.wMaxPacketSize;
 8000558:	e0fffa17 	ldw	r3,-24(fp)
 800055c:	18c0010b 	ldhu	r3,4(r3)
            /* fill endpoint information structure */
            devtable[addr].epinfo[1].epAddr =
                data_ptr->descr.endpoint.bEndpointAddress;
            devtable[addr].epinfo[1].Attr =
                data_ptr->descr.endpoint.bmAttributes;
            devtable[addr].epinfo[1].MaxPktSize =
 8000560:	10c0008d 	sth	r3,2(r2)
                data_ptr->descr.endpoint.wMaxPacketSize;
            devtable[addr].epinfo[1].Interval =
 8000564:	e0fffe03 	ldbu	r3,-8(fp)
 8000568:	008200b4 	movhi	r2,2050
 800056c:	10ba5e04 	addi	r2,r2,-5768
 8000570:	180690fa 	slli	r3,r3,3
 8000574:	10c5883a 	add	r2,r2,r3
 8000578:	10800017 	ldw	r2,0(r2)
 800057c:	10800204 	addi	r2,r2,8
                data_ptr->descr.endpoint.bInterval;
 8000580:	e0fffa17 	ldw	r3,-24(fp)
 8000584:	18c00183 	ldbu	r3,6(r3)
                data_ptr->descr.endpoint.bEndpointAddress;
            devtable[addr].epinfo[1].Attr =
                data_ptr->descr.endpoint.bmAttributes;
            devtable[addr].epinfo[1].MaxPktSize =
                data_ptr->descr.endpoint.wMaxPacketSize;
            devtable[addr].epinfo[1].Interval =
 8000588:	10c00105 	stb	r3,4(r2)
                data_ptr->descr.endpoint.bInterval;
            // devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
            /* configure device */
            rcode = XferSetConf(addr, 0, confvalue); // set configuration
 800058c:	e0fffe03 	ldbu	r3,-8(fp)
 8000590:	e0bffc43 	ldbu	r2,-15(fp)
 8000594:	d8000415 	stw	zero,16(sp)
 8000598:	d8000315 	stw	zero,12(sp)
 800059c:	d8000215 	stw	zero,8(sp)
 80005a0:	d8000115 	stw	zero,4(sp)
 80005a4:	d8800015 	stw	r2,0(sp)
 80005a8:	01c00244 	movi	r7,9
 80005ac:	000d883a 	mov	r6,zero
 80005b0:	000b883a 	mov	r5,zero
 80005b4:	1809883a 	mov	r4,r3
 80005b8:	80013fc0 	call	80013fc <XferCtrlReq>
 80005bc:	e0bffc05 	stb	r2,-16(fp)
            if (rcode) {                             // error handling
 80005c0:	e0bffc03 	ldbu	r2,-16(fp)
 80005c4:	10000226 	beq	r2,zero,80005d0 <HIDMProbe+0x364>
              return (FALSE);
 80005c8:	0005883a 	mov	r2,zero
 80005cc:	00002406 	br	8000660 <HIDMProbe+0x3f4>
            }
            rcode = XferSetProto(addr, 0, hid_device.interface, BOOT_PROTOCOL);
 80005d0:	e0fffe03 	ldbu	r3,-8(fp)
 80005d4:	d0a70743 	ldbu	r2,-25571(gp)
 80005d8:	10803fcc 	andi	r2,r2,255
 80005dc:	d8000415 	stw	zero,16(sp)
 80005e0:	d8000315 	stw	zero,12(sp)
 80005e4:	d8800215 	stw	r2,8(sp)
 80005e8:	d8000115 	stw	zero,4(sp)
 80005ec:	d8000015 	stw	zero,0(sp)
 80005f0:	01c002c4 	movi	r7,11
 80005f4:	01800844 	movi	r6,33
 80005f8:	000b883a 	mov	r5,zero
 80005fc:	1809883a 	mov	r4,r3
 8000600:	80013fc0 	call	80013fc <XferCtrlReq>
 8000604:	e0bffc05 	stb	r2,-16(fp)
            if (rcode) { // error handling
 8000608:	e0bffc03 	ldbu	r2,-16(fp)
 800060c:	10000226 	beq	r2,zero,8000618 <HIDMProbe+0x3ac>
              return (FALSE);
 8000610:	0005883a 	mov	r2,zero
 8000614:	00001206 	br	8000660 <HIDMProbe+0x3f4>
            } else {
              return (TRUE);
 8000618:	00800044 	movi	r2,1
 800061c:	00001006 	br	8000660 <HIDMProbe+0x3f4>
        devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
        hid_device.interface = data_ptr->descr.interface.bInterfaceNumber;
        hid_device.addr = addr;
        byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
        data_ptr = (USB_DESCR *)byte_ptr;
        while (byte_ptr < bigbuf + total_length) {
 8000620:	e0fff90b 	ldhu	r3,-28(fp)
 8000624:	008200b4 	movhi	r2,2050
 8000628:	10ba1e04 	addi	r2,r2,-6024
 800062c:	1885883a 	add	r2,r3,r2
 8000630:	e0fffb17 	ldw	r3,-20(fp)
 8000634:	18bf9f36 	bltu	r3,r2,80004b4 <HIDMProbe+0x248>
      BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
      BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
      // printf("class %x, subclass %x, protocol %x,\n", class, subclass,
      //		protocol);
      // interface descriptor
      if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS &&
 8000638:	00000206 	br	8000644 <HIDMProbe+0x3d8>
            }
          }
        }    // while( byte_ptr....
      }      // if (Class matches
      else { // if class don't match; die on first interface. Not really correct
        return (FALSE);
 800063c:	0005883a 	mov	r2,zero
 8000640:	00000706 	br	8000660 <HIDMProbe+0x3f4>
  // printf("checking configuration value (length: %d): ",
  //		data_ptr->descr.config.wTotalLength);
  // for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
  // printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
  //}
  while (byte_ptr < bigbuf + total_length) {
 8000644:	e0fff90b 	ldhu	r3,-28(fp)
 8000648:	008200b4 	movhi	r2,2050
 800064c:	10ba1e04 	addi	r2,r2,-6024
 8000650:	1885883a 	add	r2,r3,r2
 8000654:	e0fffb17 	ldw	r3,-20(fp)
 8000658:	18bf4736 	bltu	r3,r2,8000378 <HIDMProbe+0x10c>
      else { // if class don't match; die on first interface. Not really correct
        return (FALSE);
      }
    } // else if( data_ptr->
  }   // while( byte_ptr < &buf + total_length
  return (FALSE);
 800065c:	0005883a 	mov	r2,zero
}
 8000660:	e037883a 	mov	sp,fp
 8000664:	dfc00117 	ldw	ra,4(sp)
 8000668:	df000017 	ldw	fp,0(sp)
 800066c:	dec00204 	addi	sp,sp,8
 8000670:	f800283a 	ret

08000674 <HIDKProbe>:
/* assumes configuration length is less than 256 bytes */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor */
/* sets keyboard in boot protocol */
/* assumes single configuration, single endpoint, and interface configuration 0
 */
BOOL HIDKProbe(BYTE addr, DWORD flags) {
 8000674:	defff204 	addi	sp,sp,-56
 8000678:	dfc00d15 	stw	ra,52(sp)
 800067c:	df000c15 	stw	fp,48(sp)
 8000680:	df000c04 	addi	fp,sp,48
 8000684:	2005883a 	mov	r2,r4
 8000688:	e17fff15 	stw	r5,-4(fp)
 800068c:	e0bffe05 	stb	r2,-8(fp)
  BYTE tmpbyte;
  BYTE rcode;
  BYTE confvalue;
  WORD total_length;
  USB_DESCR *data_ptr = (USB_DESCR *)&bigbuf;
 8000690:	008200b4 	movhi	r2,2050
 8000694:	10ba1e04 	addi	r2,r2,-6024
 8000698:	e0bffa15 	stw	r2,-24(fp)
  BYTE *byte_ptr = bigbuf;
 800069c:	008200b4 	movhi	r2,2050
 80006a0:	10ba1e04 	addi	r2,r2,-6024
 80006a4:	e0bffb15 	stw	r2,-20(fp)
  rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0,
 80006a8:	e0fffe03 	ldbu	r3,-8(fp)
 80006ac:	008200b4 	movhi	r2,2050
 80006b0:	10ba1e04 	addi	r2,r2,-6024
 80006b4:	d8800415 	stw	r2,16(sp)
 80006b8:	00800244 	movi	r2,9
 80006bc:	d8800315 	stw	r2,12(sp)
 80006c0:	d8000215 	stw	zero,8(sp)
 80006c4:	00800084 	movi	r2,2
 80006c8:	d8800115 	stw	r2,4(sp)
 80006cc:	d8000015 	stw	zero,0(sp)
 80006d0:	01c00184 	movi	r7,6
 80006d4:	01802004 	movi	r6,128
 80006d8:	000b883a 	mov	r5,zero
 80006dc:	1809883a 	mov	r4,r3
 80006e0:	80013fc0 	call	80013fc <XferCtrlReq>
 80006e4:	e0bffc05 	stb	r2,-16(fp)
                           bigbuf); // get configuration descriptor
  if (rcode) {                      // error handling
 80006e8:	e0bffc03 	ldbu	r2,-16(fp)
 80006ec:	10000226 	beq	r2,zero,80006f8 <HIDKProbe+0x84>
    return (FALSE);
 80006f0:	0005883a 	mov	r2,zero
 80006f4:	0000dc06 	br	8000a68 <HIDKProbe+0x3f4>
  }
  if (data_ptr->descr.config.wTotalLength > 256) {
 80006f8:	e0bffa17 	ldw	r2,-24(fp)
 80006fc:	1080008b 	ldhu	r2,2(r2)
 8000700:	10bfffcc 	andi	r2,r2,65535
 8000704:	10804070 	cmpltui	r2,r2,257
 8000708:	1000031e 	bne	r2,zero,8000718 <HIDKProbe+0xa4>
    total_length = 256;
 800070c:	00804004 	movi	r2,256
 8000710:	e0bff90d 	sth	r2,-28(fp)
 8000714:	00000306 	br	8000724 <HIDKProbe+0xb0>
  } else {
    total_length = data_ptr->descr.config.wTotalLength;
 8000718:	e0bffa17 	ldw	r2,-24(fp)
 800071c:	1080008b 	ldhu	r2,2(r2)
 8000720:	e0bff90d 	sth	r2,-28(fp)
  }
  rcode = XferGetConfDescr(addr, 0, total_length, 0,
 8000724:	e13ffe03 	ldbu	r4,-8(fp)
 8000728:	e0fff90b 	ldhu	r3,-28(fp)
 800072c:	008200b4 	movhi	r2,2050
 8000730:	10ba1e04 	addi	r2,r2,-6024
 8000734:	d8800415 	stw	r2,16(sp)
 8000738:	d8c00315 	stw	r3,12(sp)
 800073c:	d8000215 	stw	zero,8(sp)
 8000740:	00800084 	movi	r2,2
 8000744:	d8800115 	stw	r2,4(sp)
 8000748:	d8000015 	stw	zero,0(sp)
 800074c:	01c00184 	movi	r7,6
 8000750:	01802004 	movi	r6,128
 8000754:	000b883a 	mov	r5,zero
 8000758:	80013fc0 	call	80013fc <XferCtrlReq>
 800075c:	e0bffc05 	stb	r2,-16(fp)
                           bigbuf); // get the whole configuration
  if (rcode) {                      // error handling
 8000760:	e0bffc03 	ldbu	r2,-16(fp)
 8000764:	10000226 	beq	r2,zero,8000770 <HIDKProbe+0xfc>
    return (FALSE);
 8000768:	0005883a 	mov	r2,zero
 800076c:	0000be06 	br	8000a68 <HIDKProbe+0x3f4>
  }
  confvalue = data_ptr->descr.config
 8000770:	e0bffa17 	ldw	r2,-24(fp)
 8000774:	10800143 	ldbu	r2,5(r2)
 8000778:	e0bffc45 	stb	r2,-15(fp)
                  .bConfigurationValue; // save configuration value to use later
  while (byte_ptr < bigbuf + total_length) { // parse configuration
 800077c:	0000b306 	br	8000a4c <HIDKProbe+0x3d8>
    if (data_ptr->descr.config.bDescriptorType !=
 8000780:	e0bffa17 	ldw	r2,-24(fp)
 8000784:	10800043 	ldbu	r2,1(r2)
 8000788:	10803fcc 	andi	r2,r2,255
 800078c:	10800120 	cmpeqi	r2,r2,4
 8000790:	1000091e 	bne	r2,zero,80007b8 <HIDKProbe+0x144>
        USB_DESCRIPTOR_INTERFACE) { // skip to the next descriptor
      byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8000794:	e0bffa17 	ldw	r2,-24(fp)
 8000798:	10800003 	ldbu	r2,0(r2)
 800079c:	10803fcc 	andi	r2,r2,255
 80007a0:	e0fffb17 	ldw	r3,-20(fp)
 80007a4:	1885883a 	add	r2,r3,r2
 80007a8:	e0bffb15 	stw	r2,-20(fp)
      data_ptr = (USB_DESCR *)byte_ptr;
 80007ac:	e0bffb17 	ldw	r2,-20(fp)
 80007b0:	e0bffa15 	stw	r2,-24(fp)
 80007b4:	0000a506 	br	8000a4c <HIDKProbe+0x3d8>
    } // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
    else {
      // printf("starting interface parsing at byte location %d\n",
      //		data_ptr->descr.config.bLength);
      BYTE class = data_ptr->descr.interface.bInterfaceClass;
 80007b8:	e0bffa17 	ldw	r2,-24(fp)
 80007bc:	10800143 	ldbu	r2,5(r2)
 80007c0:	e0bffc85 	stb	r2,-14(fp)
      BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 80007c4:	e0bffa17 	ldw	r2,-24(fp)
 80007c8:	10800183 	ldbu	r2,6(r2)
 80007cc:	e0bffcc5 	stb	r2,-13(fp)
      BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 80007d0:	e0bffa17 	ldw	r2,-24(fp)
 80007d4:	108001c3 	ldbu	r2,7(r2)
 80007d8:	e0bffd05 	stb	r2,-12(fp)
      // printf("class %x, subclass %x, protocol %x,\n", class, subclass,
      //		protocol);
      // interface descriptor
      if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS &&
 80007dc:	e0bffc83 	ldbu	r2,-14(fp)
 80007e0:	108000d8 	cmpnei	r2,r2,3
 80007e4:	1000971e 	bne	r2,zero,8000a44 <HIDKProbe+0x3d0>
 80007e8:	e0bffcc3 	ldbu	r2,-13(fp)
 80007ec:	10800058 	cmpnei	r2,r2,1
 80007f0:	1000941e 	bne	r2,zero,8000a44 <HIDKProbe+0x3d0>
 80007f4:	e0bffd03 	ldbu	r2,-12(fp)
 80007f8:	10800058 	cmpnei	r2,r2,1
 80007fc:	1000911e 	bne	r2,zero,8000a44 <HIDKProbe+0x3d0>
          protocol == HID_PROTOCOL_KEYBOARD) {
        // detected a keyboard
        devtable[addr].devclass = HID_K;             // fill device class
 8000800:	e0fffe03 	ldbu	r3,-8(fp)
 8000804:	008200b4 	movhi	r2,2050
 8000808:	10ba5e04 	addi	r2,r2,-5768
 800080c:	180690fa 	slli	r3,r3,3
 8000810:	10c5883a 	add	r2,r2,r3
 8000814:	10800104 	addi	r2,r2,4
 8000818:	00c00044 	movi	r3,1
 800081c:	10c00005 	stb	r3,0(r2)
        tmpbyte = devtable[addr].epinfo->MaxPktSize; // save max.packet size
 8000820:	e0fffe03 	ldbu	r3,-8(fp)
 8000824:	008200b4 	movhi	r2,2050
 8000828:	10ba5e04 	addi	r2,r2,-5768
 800082c:	180690fa 	slli	r3,r3,3
 8000830:	10c5883a 	add	r2,r2,r3
 8000834:	10800017 	ldw	r2,0(r2)
 8000838:	1080008b 	ldhu	r2,2(r2)
 800083c:	e0bffd45 	stb	r2,-11(fp)
        HID_init();                     // initialize data structures
 8000840:	8000a7c0 	call	8000a7c <HID_init>
        devtable[addr].epinfo = hid_ep; // switch endpoint information structure
 8000844:	e0fffe03 	ldbu	r3,-8(fp)
 8000848:	008200b4 	movhi	r2,2050
 800084c:	10ba5e04 	addi	r2,r2,-5768
 8000850:	180690fa 	slli	r3,r3,3
 8000854:	10c7883a 	add	r3,r2,r3
 8000858:	008200b4 	movhi	r2,2050
 800085c:	10b95c04 	addi	r2,r2,-6800
 8000860:	18800015 	stw	r2,0(r3)
        devtable[addr].epinfo[0].MaxPktSize = tmpbyte; // fill in max.packet
 8000864:	e0fffe03 	ldbu	r3,-8(fp)
 8000868:	008200b4 	movhi	r2,2050
 800086c:	10ba5e04 	addi	r2,r2,-5768
 8000870:	180690fa 	slli	r3,r3,3
 8000874:	10c5883a 	add	r2,r2,r3
 8000878:	10800017 	ldw	r2,0(r2)
 800087c:	e0fffd43 	ldbu	r3,-11(fp)
 8000880:	10c0008d 	sth	r3,2(r2)
                                                       // size
        hid_device.interface =
            data_ptr->descr
                .interface.bInterfaceNumber; // fill in interface number to be
 8000884:	e0bffa17 	ldw	r2,-24(fp)
 8000888:	10800083 	ldbu	r2,2(r2)
        tmpbyte = devtable[addr].epinfo->MaxPktSize; // save max.packet size
        HID_init();                     // initialize data structures
        devtable[addr].epinfo = hid_ep; // switch endpoint information structure
        devtable[addr].epinfo[0].MaxPktSize = tmpbyte; // fill in max.packet
                                                       // size
        hid_device.interface =
 800088c:	d0a70745 	stb	r2,-25571(gp)
            data_ptr->descr
                .interface.bInterfaceNumber; // fill in interface number to be
                                             // used in HID requests
        hid_device.addr = addr; // fill in address
 8000890:	e0bffe03 	ldbu	r2,-8(fp)
 8000894:	d0a70705 	stb	r2,-25572(gp)
        byte_ptr =
            byte_ptr +
            data_ptr->descr.config.bLength; // skip to the next descriptor
 8000898:	e0bffa17 	ldw	r2,-24(fp)
 800089c:	10800003 	ldbu	r2,0(r2)
            data_ptr->descr
                .interface.bInterfaceNumber; // fill in interface number to be
                                             // used in HID requests
        hid_device.addr = addr; // fill in address
        byte_ptr =
            byte_ptr +
 80008a0:	10803fcc 	andi	r2,r2,255
        hid_device.interface =
            data_ptr->descr
                .interface.bInterfaceNumber; // fill in interface number to be
                                             // used in HID requests
        hid_device.addr = addr; // fill in address
        byte_ptr =
 80008a4:	e0fffb17 	ldw	r3,-20(fp)
 80008a8:	1885883a 	add	r2,r3,r2
 80008ac:	e0bffb15 	stw	r2,-20(fp)
            byte_ptr +
            data_ptr->descr.config.bLength; // skip to the next descriptor
        data_ptr = (USB_DESCR *)byte_ptr;
 80008b0:	e0bffb17 	ldw	r2,-20(fp)
 80008b4:	e0bffa15 	stw	r2,-24(fp)
        while (byte_ptr < bigbuf + total_length) {
 80008b8:	00005b06 	br	8000a28 <HIDKProbe+0x3b4>
          if (data_ptr->descr.config.bDescriptorType !=
 80008bc:	e0bffa17 	ldw	r2,-24(fp)
 80008c0:	10800043 	ldbu	r2,1(r2)
 80008c4:	10803fcc 	andi	r2,r2,255
 80008c8:	10800160 	cmpeqi	r2,r2,5
 80008cc:	1000091e 	bne	r2,zero,80008f4 <HIDKProbe+0x280>
              USB_DESCRIPTOR_ENDPOINT) { // skip to endpoint descriptor
            byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 80008d0:	e0bffa17 	ldw	r2,-24(fp)
 80008d4:	10800003 	ldbu	r2,0(r2)
 80008d8:	10803fcc 	andi	r2,r2,255
 80008dc:	e0fffb17 	ldw	r3,-20(fp)
 80008e0:	1885883a 	add	r2,r3,r2
 80008e4:	e0bffb15 	stw	r2,-20(fp)
            data_ptr = (USB_DESCR *)byte_ptr;
 80008e8:	e0bffb17 	ldw	r2,-20(fp)
 80008ec:	e0bffa15 	stw	r2,-24(fp)
 80008f0:	00004d06 	br	8000a28 <HIDKProbe+0x3b4>
          } else {
            /* fill endpoint information structure */
            devtable[addr].epinfo[1].epAddr =
 80008f4:	e0fffe03 	ldbu	r3,-8(fp)
 80008f8:	008200b4 	movhi	r2,2050
 80008fc:	10ba5e04 	addi	r2,r2,-5768
 8000900:	180690fa 	slli	r3,r3,3
 8000904:	10c5883a 	add	r2,r2,r3
 8000908:	10800017 	ldw	r2,0(r2)
 800090c:	10800204 	addi	r2,r2,8
                data_ptr->descr.endpoint.bEndpointAddress;
 8000910:	e0fffa17 	ldw	r3,-24(fp)
 8000914:	18c00083 	ldbu	r3,2(r3)
              USB_DESCRIPTOR_ENDPOINT) { // skip to endpoint descriptor
            byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
            data_ptr = (USB_DESCR *)byte_ptr;
          } else {
            /* fill endpoint information structure */
            devtable[addr].epinfo[1].epAddr =
 8000918:	10c00005 	stb	r3,0(r2)
                data_ptr->descr.endpoint.bEndpointAddress;
            devtable[addr].epinfo[1].Attr =
 800091c:	e0fffe03 	ldbu	r3,-8(fp)
 8000920:	008200b4 	movhi	r2,2050
 8000924:	10ba5e04 	addi	r2,r2,-5768
 8000928:	180690fa 	slli	r3,r3,3
 800092c:	10c5883a 	add	r2,r2,r3
 8000930:	10800017 	ldw	r2,0(r2)
 8000934:	10800204 	addi	r2,r2,8
                data_ptr->descr.endpoint.bmAttributes;
 8000938:	e0fffa17 	ldw	r3,-24(fp)
 800093c:	18c000c3 	ldbu	r3,3(r3)
            data_ptr = (USB_DESCR *)byte_ptr;
          } else {
            /* fill endpoint information structure */
            devtable[addr].epinfo[1].epAddr =
                data_ptr->descr.endpoint.bEndpointAddress;
            devtable[addr].epinfo[1].Attr =
 8000940:	10c00045 	stb	r3,1(r2)
                data_ptr->descr.endpoint.bmAttributes;
            devtable[addr].epinfo[1].MaxPktSize =
 8000944:	e0fffe03 	ldbu	r3,-8(fp)
 8000948:	008200b4 	movhi	r2,2050
 800094c:	10ba5e04 	addi	r2,r2,-5768
 8000950:	180690fa 	slli	r3,r3,3
 8000954:	10c5883a 	add	r2,r2,r3
 8000958:	10800017 	ldw	r2,0(r2)
 800095c:	10800204 	addi	r2,r2,8
                data_ptr->descr.endpoint.wMaxPacketSize;
 8000960:	e0fffa17 	ldw	r3,-24(fp)
 8000964:	18c0010b 	ldhu	r3,4(r3)
            /* fill endpoint information structure */
            devtable[addr].epinfo[1].epAddr =
                data_ptr->descr.endpoint.bEndpointAddress;
            devtable[addr].epinfo[1].Attr =
                data_ptr->descr.endpoint.bmAttributes;
            devtable[addr].epinfo[1].MaxPktSize =
 8000968:	10c0008d 	sth	r3,2(r2)
                data_ptr->descr.endpoint.wMaxPacketSize;
            devtable[addr].epinfo[1].Interval =
 800096c:	e0fffe03 	ldbu	r3,-8(fp)
 8000970:	008200b4 	movhi	r2,2050
 8000974:	10ba5e04 	addi	r2,r2,-5768
 8000978:	180690fa 	slli	r3,r3,3
 800097c:	10c5883a 	add	r2,r2,r3
 8000980:	10800017 	ldw	r2,0(r2)
 8000984:	10800204 	addi	r2,r2,8
                data_ptr->descr.endpoint.bInterval;
 8000988:	e0fffa17 	ldw	r3,-24(fp)
 800098c:	18c00183 	ldbu	r3,6(r3)
                data_ptr->descr.endpoint.bEndpointAddress;
            devtable[addr].epinfo[1].Attr =
                data_ptr->descr.endpoint.bmAttributes;
            devtable[addr].epinfo[1].MaxPktSize =
                data_ptr->descr.endpoint.wMaxPacketSize;
            devtable[addr].epinfo[1].Interval =
 8000990:	10c00105 	stb	r3,4(r2)
                data_ptr->descr.endpoint.bInterval;
            /* configure device */
            rcode = XferSetConf(addr, 0, confvalue); // set configuration
 8000994:	e0fffe03 	ldbu	r3,-8(fp)
 8000998:	e0bffc43 	ldbu	r2,-15(fp)
 800099c:	d8000415 	stw	zero,16(sp)
 80009a0:	d8000315 	stw	zero,12(sp)
 80009a4:	d8000215 	stw	zero,8(sp)
 80009a8:	d8000115 	stw	zero,4(sp)
 80009ac:	d8800015 	stw	r2,0(sp)
 80009b0:	01c00244 	movi	r7,9
 80009b4:	000d883a 	mov	r6,zero
 80009b8:	000b883a 	mov	r5,zero
 80009bc:	1809883a 	mov	r4,r3
 80009c0:	80013fc0 	call	80013fc <XferCtrlReq>
 80009c4:	e0bffc05 	stb	r2,-16(fp)
            if (rcode) {                             // error handling
 80009c8:	e0bffc03 	ldbu	r2,-16(fp)
 80009cc:	10000226 	beq	r2,zero,80009d8 <HIDKProbe+0x364>
              return (FALSE);
 80009d0:	0005883a 	mov	r2,zero
 80009d4:	00002406 	br	8000a68 <HIDKProbe+0x3f4>
            }
            rcode = XferSetProto(addr, 0, hid_device.interface, BOOT_PROTOCOL);
 80009d8:	e0fffe03 	ldbu	r3,-8(fp)
 80009dc:	d0a70743 	ldbu	r2,-25571(gp)
 80009e0:	10803fcc 	andi	r2,r2,255
 80009e4:	d8000415 	stw	zero,16(sp)
 80009e8:	d8000315 	stw	zero,12(sp)
 80009ec:	d8800215 	stw	r2,8(sp)
 80009f0:	d8000115 	stw	zero,4(sp)
 80009f4:	d8000015 	stw	zero,0(sp)
 80009f8:	01c002c4 	movi	r7,11
 80009fc:	01800844 	movi	r6,33
 8000a00:	000b883a 	mov	r5,zero
 8000a04:	1809883a 	mov	r4,r3
 8000a08:	80013fc0 	call	80013fc <XferCtrlReq>
 8000a0c:	e0bffc05 	stb	r2,-16(fp)
            if (rcode) { // error handling
 8000a10:	e0bffc03 	ldbu	r2,-16(fp)
 8000a14:	10000226 	beq	r2,zero,8000a20 <HIDKProbe+0x3ac>
              return (FALSE);
 8000a18:	0005883a 	mov	r2,zero
 8000a1c:	00001206 	br	8000a68 <HIDKProbe+0x3f4>
            } else {
              return (TRUE);
 8000a20:	00800044 	movi	r2,1
 8000a24:	00001006 	br	8000a68 <HIDKProbe+0x3f4>
        hid_device.addr = addr; // fill in address
        byte_ptr =
            byte_ptr +
            data_ptr->descr.config.bLength; // skip to the next descriptor
        data_ptr = (USB_DESCR *)byte_ptr;
        while (byte_ptr < bigbuf + total_length) {
 8000a28:	e0fff90b 	ldhu	r3,-28(fp)
 8000a2c:	008200b4 	movhi	r2,2050
 8000a30:	10ba1e04 	addi	r2,r2,-6024
 8000a34:	1885883a 	add	r2,r3,r2
 8000a38:	e0fffb17 	ldw	r3,-20(fp)
 8000a3c:	18bf9f36 	bltu	r3,r2,80008bc <HIDKProbe+0x248>
      BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
      BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
      // printf("class %x, subclass %x, protocol %x,\n", class, subclass,
      //		protocol);
      // interface descriptor
      if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS &&
 8000a40:	00000206 	br	8000a4c <HIDKProbe+0x3d8>
          }
        }    // while( byte_ptr....
      }      // if (Class matches
      else { // if class don't match; stop processing after first interface. Not
             // really correct
        return (FALSE);
 8000a44:	0005883a 	mov	r2,zero
 8000a48:	00000706 	br	8000a68 <HIDKProbe+0x3f4>
  if (rcode) {                      // error handling
    return (FALSE);
  }
  confvalue = data_ptr->descr.config
                  .bConfigurationValue; // save configuration value to use later
  while (byte_ptr < bigbuf + total_length) { // parse configuration
 8000a4c:	e0fff90b 	ldhu	r3,-28(fp)
 8000a50:	008200b4 	movhi	r2,2050
 8000a54:	10ba1e04 	addi	r2,r2,-6024
 8000a58:	1885883a 	add	r2,r3,r2
 8000a5c:	e0fffb17 	ldw	r3,-20(fp)
 8000a60:	18bf4736 	bltu	r3,r2,8000780 <HIDKProbe+0x10c>
             // really correct
        return (FALSE);
      }
    } // else if( data_ptr->
  }   // while( byte_ptr < &buf + total_length
  return (FALSE);
 8000a64:	0005883a 	mov	r2,zero
}
 8000a68:	e037883a 	mov	sp,fp
 8000a6c:	dfc00117 	ldw	ra,4(sp)
 8000a70:	df000017 	ldw	fp,0(sp)
 8000a74:	dec00204 	addi	sp,sp,8
 8000a78:	f800283a 	ret

08000a7c <HID_init>:
/* HID data structures initialization */
void HID_init(void) {
 8000a7c:	deffff04 	addi	sp,sp,-4
 8000a80:	df000015 	stw	fp,0(sp)
 8000a84:	d839883a 	mov	fp,sp
  hid_ep[1].sndToggle = bmSNDTOG0;
 8000a88:	008200b4 	movhi	r2,2050
 8000a8c:	10b95c04 	addi	r2,r2,-6800
 8000a90:	00c01004 	movi	r3,64
 8000a94:	10c00345 	stb	r3,13(r2)
  hid_ep[1].rcvToggle = bmRCVTOG0;
 8000a98:	008200b4 	movhi	r2,2050
 8000a9c:	10b95c04 	addi	r2,r2,-6800
 8000aa0:	00c00404 	movi	r3,16
 8000aa4:	10c00385 	stb	r3,14(r2)
}
 8000aa8:	0001883a 	nop
 8000aac:	e037883a 	mov	sp,fp
 8000ab0:	df000017 	ldw	fp,0(sp)
 8000ab4:	dec00104 	addi	sp,sp,4
 8000ab8:	f800283a 	ret

08000abc <mousePoll>:
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT *buf) {
 8000abc:	defffb04 	addi	sp,sp,-20
 8000ac0:	dfc00415 	stw	ra,16(sp)
 8000ac4:	df000315 	stw	fp,12(sp)
 8000ac8:	df000304 	addi	fp,sp,12
 8000acc:	e13fff15 	stw	r4,-4(fp)
  BYTE rcode;
  MAXreg_wr(rPERADDR, hid_device.addr); // set peripheral address
 8000ad0:	d0a70703 	ldbu	r2,-25572(gp)
 8000ad4:	10803fcc 	andi	r2,r2,255
 8000ad8:	100b883a 	mov	r5,r2
 8000adc:	01003804 	movi	r4,224
 8000ae0:	8000c980 	call	8000c98 <MAXreg_wr>
  rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE *)buf,
 8000ae4:	d0a70703 	ldbu	r2,-25572(gp)
 8000ae8:	11003fcc 	andi	r4,r2,255
                         devtable[hid_device.addr].epinfo[1].MaxPktSize);
 8000aec:	d0a70703 	ldbu	r2,-25572(gp)
 8000af0:	10c03fcc 	andi	r3,r2,255
 8000af4:	008200b4 	movhi	r2,2050
 8000af8:	10ba5e04 	addi	r2,r2,-5768
 8000afc:	180690fa 	slli	r3,r3,3
 8000b00:	10c5883a 	add	r2,r2,r3
 8000b04:	10800017 	ldw	r2,0(r2)
 8000b08:	10800204 	addi	r2,r2,8
 8000b0c:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT *buf) {
  BYTE rcode;
  MAXreg_wr(rPERADDR, hid_device.addr); // set peripheral address
  rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE *)buf,
 8000b10:	10803fcc 	andi	r2,r2,255
 8000b14:	d8800015 	stw	r2,0(sp)
 8000b18:	e1ffff17 	ldw	r7,-4(fp)
 8000b1c:	01800204 	movi	r6,8
 8000b20:	01400044 	movi	r5,1
 8000b24:	80018200 	call	8001820 <XferInTransfer>
 8000b28:	e0bffe05 	stb	r2,-8(fp)
                         devtable[hid_device.addr].epinfo[1].MaxPktSize);
  return (rcode);
 8000b2c:	e0bffe03 	ldbu	r2,-8(fp)
}
 8000b30:	e037883a 	mov	sp,fp
 8000b34:	dfc00117 	ldw	ra,4(sp)
 8000b38:	df000017 	ldw	fp,0(sp)
 8000b3c:	dec00204 	addi	sp,sp,8
 8000b40:	f800283a 	ret

08000b44 <kbdPoll>:
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT *buf) {
 8000b44:	defffb04 	addi	sp,sp,-20
 8000b48:	dfc00415 	stw	ra,16(sp)
 8000b4c:	df000315 	stw	fp,12(sp)
 8000b50:	df000304 	addi	fp,sp,12
 8000b54:	e13fff15 	stw	r4,-4(fp)
  BYTE rcode;
  MAXreg_wr(rPERADDR, hid_device.addr); // set peripheral address
 8000b58:	d0a70703 	ldbu	r2,-25572(gp)
 8000b5c:	10803fcc 	andi	r2,r2,255
 8000b60:	100b883a 	mov	r5,r2
 8000b64:	01003804 	movi	r4,224
 8000b68:	8000c980 	call	8000c98 <MAXreg_wr>
  rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE *)buf,
 8000b6c:	d0a70703 	ldbu	r2,-25572(gp)
 8000b70:	11003fcc 	andi	r4,r2,255
                         devtable[hid_device.addr].epinfo[1].MaxPktSize);
 8000b74:	d0a70703 	ldbu	r2,-25572(gp)
 8000b78:	10c03fcc 	andi	r3,r2,255
 8000b7c:	008200b4 	movhi	r2,2050
 8000b80:	10ba5e04 	addi	r2,r2,-5768
 8000b84:	180690fa 	slli	r3,r3,3
 8000b88:	10c5883a 	add	r2,r2,r3
 8000b8c:	10800017 	ldw	r2,0(r2)
 8000b90:	10800204 	addi	r2,r2,8
 8000b94:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT *buf) {
  BYTE rcode;
  MAXreg_wr(rPERADDR, hid_device.addr); // set peripheral address
  rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE *)buf,
 8000b98:	10803fcc 	andi	r2,r2,255
 8000b9c:	d8800015 	stw	r2,0(sp)
 8000ba0:	e1ffff17 	ldw	r7,-4(fp)
 8000ba4:	01800204 	movi	r6,8
 8000ba8:	01400044 	movi	r5,1
 8000bac:	80018200 	call	8001820 <XferInTransfer>
 8000bb0:	e0bffe05 	stb	r2,-8(fp)
                         devtable[hid_device.addr].epinfo[1].MaxPktSize);
  return (rcode);
 8000bb4:	e0bffe03 	ldbu	r2,-8(fp)
}
 8000bb8:	e037883a 	mov	sp,fp
 8000bbc:	dfc00117 	ldw	ra,4(sp)
 8000bc0:	df000017 	ldw	fp,0(sp)
 8000bc4:	dec00204 	addi	sp,sp,8
 8000bc8:	f800283a 	ret

08000bcc <HIDMEventHandler>:
BOOL HIDMEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 8000bcc:	defffb04 	addi	sp,sp,-20
 8000bd0:	df000415 	stw	fp,16(sp)
 8000bd4:	df000404 	addi	fp,sp,16
 8000bd8:	2007883a 	mov	r3,r4
 8000bdc:	2805883a 	mov	r2,r5
 8000be0:	e1bffe15 	stw	r6,-8(fp)
 8000be4:	e1ffff15 	stw	r7,-4(fp)
 8000be8:	e0fffc05 	stb	r3,-16(fp)
 8000bec:	e0bffd05 	stb	r2,-12(fp)
  return (FALSE);
 8000bf0:	0005883a 	mov	r2,zero
}
 8000bf4:	e037883a 	mov	sp,fp
 8000bf8:	df000017 	ldw	fp,0(sp)
 8000bfc:	dec00104 	addi	sp,sp,4
 8000c00:	f800283a 	ret

08000c04 <HIDKEventHandler>:
BOOL HIDKEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 8000c04:	defffb04 	addi	sp,sp,-20
 8000c08:	df000415 	stw	fp,16(sp)
 8000c0c:	df000404 	addi	fp,sp,16
 8000c10:	2007883a 	mov	r3,r4
 8000c14:	2805883a 	mov	r2,r5
 8000c18:	e1bffe15 	stw	r6,-8(fp)
 8000c1c:	e1ffff15 	stw	r7,-4(fp)
 8000c20:	e0fffc05 	stb	r3,-16(fp)
 8000c24:	e0bffd05 	stb	r2,-12(fp)
  return (FALSE);
 8000c28:	0005883a 	mov	r2,zero
}
 8000c2c:	e037883a 	mov	sp,fp
 8000c30:	df000017 	ldw	fp,0(sp)
 8000c34:	dec00104 	addi	sp,sp,4
 8000c38:	f800283a 	ret

08000c3c <SPI_init>:
// variables and data structures
// External variables
extern BYTE usb_task_state;

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
 8000c3c:	defffc04 	addi	sp,sp,-16
 8000c40:	df000315 	stw	fp,12(sp)
 8000c44:	df000304 	addi	fp,sp,12
 8000c48:	2807883a 	mov	r3,r5
 8000c4c:	3005883a 	mov	r2,r6
 8000c50:	e13ffd05 	stb	r4,-12(fp)
 8000c54:	e0fffe05 	stb	r3,-8(fp)
 8000c58:	e0bfff05 	stb	r2,-4(fp)
  // Don't need to initialize SPI port, already ready to go with BSP
}
 8000c5c:	0001883a 	nop
 8000c60:	e037883a 	mov	sp,fp
 8000c64:	df000017 	ldw	fp,0(sp)
 8000c68:	dec00104 	addi	sp,sp,4
 8000c6c:	f800283a 	ret

08000c70 <SPI_wr>:

// writes single byte to MAX3421E via SPI, simultanously reads status register
// and returns it
BYTE SPI_wr(BYTE data) {
 8000c70:	defffe04 	addi	sp,sp,-8
 8000c74:	df000115 	stw	fp,4(sp)
 8000c78:	df000104 	addi	fp,sp,4
 8000c7c:	2005883a 	mov	r2,r4
 8000c80:	e0bfff05 	stb	r2,-4(fp)
  // This function is never used by the code, so you do not need to fill it in
}
 8000c84:	0001883a 	nop
 8000c88:	e037883a 	mov	sp,fp
 8000c8c:	df000017 	ldw	fp,0(sp)
 8000c90:	dec00104 	addi	sp,sp,4
 8000c94:	f800283a 	ret

08000c98 <MAXreg_wr>:
// writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
 8000c98:	defff704 	addi	sp,sp,-36
 8000c9c:	dfc00815 	stw	ra,32(sp)
 8000ca0:	df000715 	stw	fp,28(sp)
 8000ca4:	df000704 	addi	fp,sp,28
 8000ca8:	2007883a 	mov	r3,r4
 8000cac:	2805883a 	mov	r2,r5
 8000cb0:	e0fffe05 	stb	r3,-8(fp)
 8000cb4:	e0bfff05 	stb	r2,-4(fp)
  //                        const alt_u8* wdata,
  //                        alt_u32 read_length,
  //                        alt_u8* read_data,
  //                        alt_u32 flags)
  // write reg + 2 via SPI
  alt_u8 sendData[2] = {reg + 2, val};
 8000cb8:	e0bffe03 	ldbu	r2,-8(fp)
 8000cbc:	10800084 	addi	r2,r2,2
 8000cc0:	e0bffd05 	stb	r2,-12(fp)
 8000cc4:	e0bfff03 	ldbu	r2,-4(fp)
 8000cc8:	e0bffd45 	stb	r2,-11(fp)
  int ret = alt_avalon_spi_command(SPI_0_BASE, USB_SS, 2, sendData, 0, NULL, 0);
 8000ccc:	e0bffd04 	addi	r2,fp,-12
 8000cd0:	d8000215 	stw	zero,8(sp)
 8000cd4:	d8000115 	stw	zero,4(sp)
 8000cd8:	d8000015 	stw	zero,0(sp)
 8000cdc:	100f883a 	mov	r7,r2
 8000ce0:	01800084 	movi	r6,2
 8000ce4:	01400044 	movi	r5,1
 8000ce8:	01000074 	movhi	r4,1
 8000cec:	21042804 	addi	r4,r4,4256
 8000cf0:	8018f900 	call	8018f90 <alt_avalon_spi_command>
 8000cf4:	e0bffc15 	stw	r2,-16(fp)
  // write val via SPI
  // read return code from SPI peripheral (see Intel documentation)
  // if return code < 0 print an error
  if (ret < 0)
 8000cf8:	e0bffc17 	ldw	r2,-16(fp)
 8000cfc:	1000030e 	bge	r2,zero,8000d0c <MAXreg_wr+0x74>
    printf("error in MAXreg_wr - readData less than 0");
 8000d00:	010200b4 	movhi	r4,2050
 8000d04:	21292a04 	addi	r4,r4,-23384
 8000d08:	800ada80 	call	800ada8 <printf>
  // deselect MAX3421E (may not be necessary if you are using SPI peripheral)
}
 8000d0c:	0001883a 	nop
 8000d10:	e037883a 	mov	sp,fp
 8000d14:	dfc00117 	ldw	ra,4(sp)
 8000d18:	df000017 	ldw	fp,0(sp)
 8000d1c:	dec00204 	addi	sp,sp,8
 8000d20:	f800283a 	ret

08000d24 <MAXbytes_wr>:
// multiple-byte write
// returns a pointer to a memory position after last written
BYTE *MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE *data) {
 8000d24:	defff304 	addi	sp,sp,-52
 8000d28:	dfc00c15 	stw	ra,48(sp)
 8000d2c:	df000b15 	stw	fp,44(sp)
 8000d30:	dc000a15 	stw	r16,40(sp)
 8000d34:	df000b04 	addi	fp,sp,44
 8000d38:	201b883a 	mov	r13,r4
 8000d3c:	2809883a 	mov	r4,r5
 8000d40:	e1bffe15 	stw	r6,-8(fp)
 8000d44:	e37ffc05 	stb	r13,-16(fp)
 8000d48:	e13ffd05 	stb	r4,-12(fp)
 8000d4c:	d809883a 	mov	r4,sp
 8000d50:	2021883a 	mov	r16,r4
  // psuedocode:
  // select MAX3421E (may not be necessary if you are using SPI peripheral)
  // write reg + 2 via SPI
  alt_u8 sendData[nbytes + 1];
 8000d54:	e13ffd03 	ldbu	r4,-12(fp)
 8000d58:	21000044 	addi	r4,r4,1
 8000d5c:	217fffc4 	addi	r5,r4,-1
 8000d60:	e17ff915 	stw	r5,-28(fp)
 8000d64:	200b883a 	mov	r5,r4
 8000d68:	2817883a 	mov	r11,r5
 8000d6c:	0019883a 	mov	r12,zero
 8000d70:	580ad77a 	srli	r5,r11,29
 8000d74:	601090fa 	slli	r8,r12,3
 8000d78:	2a10b03a 	or	r8,r5,r8
 8000d7c:	580e90fa 	slli	r7,r11,3
 8000d80:	200b883a 	mov	r5,r4
 8000d84:	2813883a 	mov	r9,r5
 8000d88:	0015883a 	mov	r10,zero
 8000d8c:	480ad77a 	srli	r5,r9,29
 8000d90:	500690fa 	slli	r3,r10,3
 8000d94:	28c6b03a 	or	r3,r5,r3
 8000d98:	480490fa 	slli	r2,r9,3
 8000d9c:	2005883a 	mov	r2,r4
 8000da0:	108000c4 	addi	r2,r2,3
 8000da4:	1004d0ba 	srli	r2,r2,2
 8000da8:	1085883a 	add	r2,r2,r2
 8000dac:	1085883a 	add	r2,r2,r2
 8000db0:	d8b7c83a 	sub	sp,sp,r2
 8000db4:	d8800304 	addi	r2,sp,12
 8000db8:	1005883a 	mov	r2,r2
 8000dbc:	e0bffa15 	stw	r2,-24(fp)
  sendData[0] = reg + 2;
 8000dc0:	e0bffc03 	ldbu	r2,-16(fp)
 8000dc4:	10800084 	addi	r2,r2,2
 8000dc8:	1007883a 	mov	r3,r2
 8000dcc:	e0bffa17 	ldw	r2,-24(fp)
 8000dd0:	10c00005 	stb	r3,0(r2)

  for (int i = 1; i < nbytes + 1; i++)
 8000dd4:	00800044 	movi	r2,1
 8000dd8:	e0bff815 	stw	r2,-32(fp)
 8000ddc:	00000c06 	br	8000e10 <MAXbytes_wr+0xec>
    sendData[i] = data[i - 1];
 8000de0:	e0bff817 	ldw	r2,-32(fp)
 8000de4:	10bfffc4 	addi	r2,r2,-1
 8000de8:	e0fffe17 	ldw	r3,-8(fp)
 8000dec:	1885883a 	add	r2,r3,r2
 8000df0:	10c00003 	ldbu	r3,0(r2)
 8000df4:	e13ffa17 	ldw	r4,-24(fp)
 8000df8:	e0bff817 	ldw	r2,-32(fp)
 8000dfc:	2085883a 	add	r2,r4,r2
 8000e00:	10c00005 	stb	r3,0(r2)
  // select MAX3421E (may not be necessary if you are using SPI peripheral)
  // write reg + 2 via SPI
  alt_u8 sendData[nbytes + 1];
  sendData[0] = reg + 2;

  for (int i = 1; i < nbytes + 1; i++)
 8000e04:	e0bff817 	ldw	r2,-32(fp)
 8000e08:	10800044 	addi	r2,r2,1
 8000e0c:	e0bff815 	stw	r2,-32(fp)
 8000e10:	e0bffd03 	ldbu	r2,-12(fp)
 8000e14:	10800044 	addi	r2,r2,1
 8000e18:	e0fff817 	ldw	r3,-32(fp)
 8000e1c:	18bff016 	blt	r3,r2,8000de0 <MAXbytes_wr+0xbc>
    sendData[i] = data[i - 1];

  // write data[n] via SPI, where n goes from 0 to nbytes-1
  int ret = alt_avalon_spi_command(SPI_0_BASE, USB_SS, nbytes + 1, sendData, 0,
 8000e20:	e0bffd03 	ldbu	r2,-12(fp)
 8000e24:	10800044 	addi	r2,r2,1
 8000e28:	1007883a 	mov	r3,r2
 8000e2c:	e0bffa17 	ldw	r2,-24(fp)
 8000e30:	d8000215 	stw	zero,8(sp)
 8000e34:	d8000115 	stw	zero,4(sp)
 8000e38:	d8000015 	stw	zero,0(sp)
 8000e3c:	100f883a 	mov	r7,r2
 8000e40:	180d883a 	mov	r6,r3
 8000e44:	01400044 	movi	r5,1
 8000e48:	01000074 	movhi	r4,1
 8000e4c:	21042804 	addi	r4,r4,4256
 8000e50:	8018f900 	call	8018f90 <alt_avalon_spi_command>
 8000e54:	e0bffb15 	stw	r2,-20(fp)
                                   NULL, 0);
  // read return code from SPI peripheral (see Intel documentation)
  // if return code < 0  print an error
  if (ret < 0) {
 8000e58:	e0bffb17 	ldw	r2,-20(fp)
 8000e5c:	1000030e 	bge	r2,zero,8000e6c <MAXbytes_wr+0x148>
    printf("error in MAXbytes_wr - readData less than 0");
 8000e60:	010200b4 	movhi	r4,2050
 8000e64:	21293504 	addi	r4,r4,-23340
 8000e68:	800ada80 	call	800ada8 <printf>
    // return (BYTE)-1;
  }
  // deselect MAX3421E (may not be necessary if you are using SPI peripheral)
  // return (data + nbytes);
  return (data + nbytes);
 8000e6c:	e0bffd03 	ldbu	r2,-12(fp)
 8000e70:	e0fffe17 	ldw	r3,-8(fp)
 8000e74:	1885883a 	add	r2,r3,r2
 8000e78:	8037883a 	mov	sp,r16
}
 8000e7c:	e6ffff04 	addi	sp,fp,-4
 8000e80:	dfc00217 	ldw	ra,8(sp)
 8000e84:	df000117 	ldw	fp,4(sp)
 8000e88:	dc000017 	ldw	r16,0(sp)
 8000e8c:	dec00304 	addi	sp,sp,12
 8000e90:	f800283a 	ret

08000e94 <MAXreg_rd>:

// reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
 8000e94:	defff804 	addi	sp,sp,-32
 8000e98:	dfc00715 	stw	ra,28(sp)
 8000e9c:	df000615 	stw	fp,24(sp)
 8000ea0:	df000604 	addi	fp,sp,24
 8000ea4:	2005883a 	mov	r2,r4
 8000ea8:	e0bfff05 	stb	r2,-4(fp)
  // select MAX3421E (may not be necessary if you are using SPI peripheral)
  //  - Device driver does this
  // write reg via SPI
  alt_u8 readData[1];
  alt_u8 send[1];
  send[0] = reg;
 8000eac:	e0bfff03 	ldbu	r2,-4(fp)
 8000eb0:	e0bffe45 	stb	r2,-7(fp)
  int ret = alt_avalon_spi_command(SPI_0_BASE, USB_SS, 1, send, 1, readData, 0);
 8000eb4:	e0fffe44 	addi	r3,fp,-7
 8000eb8:	d8000215 	stw	zero,8(sp)
 8000ebc:	e0bffe04 	addi	r2,fp,-8
 8000ec0:	d8800115 	stw	r2,4(sp)
 8000ec4:	00800044 	movi	r2,1
 8000ec8:	d8800015 	stw	r2,0(sp)
 8000ecc:	180f883a 	mov	r7,r3
 8000ed0:	01800044 	movi	r6,1
 8000ed4:	01400044 	movi	r5,1
 8000ed8:	01000074 	movhi	r4,1
 8000edc:	21042804 	addi	r4,r4,4256
 8000ee0:	8018f900 	call	8018f90 <alt_avalon_spi_command>
 8000ee4:	e0bffd15 	stw	r2,-12(fp)
  // read val via SPI
  // read return code from SPI peripheral (see Intel documentation)
  // if return code < 0 print an error
  if (ret < 0) {
 8000ee8:	e0bffd17 	ldw	r2,-12(fp)
 8000eec:	1000030e 	bge	r2,zero,8000efc <MAXreg_rd+0x68>
    printf("error in MAXreg_rd - readData less than 0");
 8000ef0:	010200b4 	movhi	r4,2050
 8000ef4:	21294004 	addi	r4,r4,-23296
 8000ef8:	800ada80 	call	800ada8 <printf>
  }

  // deselect MAX3421E (may not be necessary if you are using SPI peripheral)
  //  - Device driver does this
  // return val
  return readData[0];
 8000efc:	e0bffe03 	ldbu	r2,-8(fp)
}
 8000f00:	e037883a 	mov	sp,fp
 8000f04:	dfc00117 	ldw	ra,4(sp)
 8000f08:	df000017 	ldw	fp,0(sp)
 8000f0c:	dec00204 	addi	sp,sp,8
 8000f10:	f800283a 	ret

08000f14 <MAXbytes_rd>:

// multiple-byte write
// returns a pointer to a memory position after last written
BYTE *MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE *data) {
 8000f14:	defff604 	addi	sp,sp,-40
 8000f18:	dfc00915 	stw	ra,36(sp)
 8000f1c:	df000815 	stw	fp,32(sp)
 8000f20:	df000804 	addi	fp,sp,32
 8000f24:	2007883a 	mov	r3,r4
 8000f28:	2805883a 	mov	r2,r5
 8000f2c:	e1bfff15 	stw	r6,-4(fp)
 8000f30:	e0fffd05 	stb	r3,-12(fp)
 8000f34:	e0bffe05 	stb	r2,-8(fp)
  // psuedocode:
  // select MAX3421E (may not be necessary if you are using SPI peripheral)
  // write reg via SPI
  //  alt_u8 readData;
  alt_u8 send[1] = {reg};
 8000f38:	e0bffd03 	ldbu	r2,-12(fp)
 8000f3c:	e0bffc05 	stb	r2,-16(fp)
  int ret =
      alt_avalon_spi_command(SPI_0_BASE, USB_SS, 1, send, nbytes, data, 0);
 8000f40:	e0bffe03 	ldbu	r2,-8(fp)
  // psuedocode:
  // select MAX3421E (may not be necessary if you are using SPI peripheral)
  // write reg via SPI
  //  alt_u8 readData;
  alt_u8 send[1] = {reg};
  int ret =
 8000f44:	e13ffc04 	addi	r4,fp,-16
 8000f48:	d8000215 	stw	zero,8(sp)
 8000f4c:	e0ffff17 	ldw	r3,-4(fp)
 8000f50:	d8c00115 	stw	r3,4(sp)
 8000f54:	d8800015 	stw	r2,0(sp)
 8000f58:	200f883a 	mov	r7,r4
 8000f5c:	01800044 	movi	r6,1
 8000f60:	01400044 	movi	r5,1
 8000f64:	01000074 	movhi	r4,1
 8000f68:	21042804 	addi	r4,r4,4256
 8000f6c:	8018f900 	call	8018f90 <alt_avalon_spi_command>
 8000f70:	e0bffb15 	stw	r2,-20(fp)
      alt_avalon_spi_command(SPI_0_BASE, USB_SS, 1, send, nbytes, data, 0);
  // read data[n] from SPI, where n goes from 0 to nbytes-1
  // read return code from SPI peripheral (see Intel documentation)
  // if return code < 0 print an error
  if (ret < 0) {
 8000f74:	e0bffb17 	ldw	r2,-20(fp)
 8000f78:	1000030e 	bge	r2,zero,8000f88 <MAXbytes_rd+0x74>
    printf("error in MAXbytes_rd - readData less than 0");
 8000f7c:	010200b4 	movhi	r4,2050
 8000f80:	21294b04 	addi	r4,r4,-23252
 8000f84:	800ada80 	call	800ada8 <printf>
    // return (BYTE)-1;
  }

  // deselect MAX3421E (may not be necessary if you are using SPI peripheral)
  // return (data + nbytes);
  return (data + nbytes);
 8000f88:	e0bffe03 	ldbu	r2,-8(fp)
 8000f8c:	e0ffff17 	ldw	r3,-4(fp)
 8000f90:	1885883a 	add	r2,r3,r2
}
 8000f94:	e037883a 	mov	sp,fp
 8000f98:	dfc00117 	ldw	ra,4(sp)
 8000f9c:	df000017 	ldw	fp,0(sp)
 8000fa0:	dec00204 	addi	sp,sp,8
 8000fa4:	f800283a 	ret

08000fa8 <MAX3421E_reset>:
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
 8000fa8:	defffd04 	addi	sp,sp,-12
 8000fac:	dfc00215 	stw	ra,8(sp)
 8000fb0:	df000115 	stw	fp,4(sp)
 8000fb4:	df000104 	addi	fp,sp,4
  // hardware reset, then software reset
  IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 8000fb8:	0007883a 	mov	r3,zero
 8000fbc:	00800074 	movhi	r2,1
 8000fc0:	10845404 	addi	r2,r2,4432
 8000fc4:	10c00035 	stwio	r3,0(r2)
  usleep(1000000);
 8000fc8:	010003f4 	movhi	r4,15
 8000fcc:	21109004 	addi	r4,r4,16960
 8000fd0:	80182e80 	call	80182e8 <usleep>
  IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 8000fd4:	00c00044 	movi	r3,1
 8000fd8:	00800074 	movhi	r2,1
 8000fdc:	10845404 	addi	r2,r2,4432
 8000fe0:	10c00035 	stwio	r3,0(r2)
  BYTE tmp = 0;
 8000fe4:	e03fff05 	stb	zero,-4(fp)
  MAXreg_wr(rUSBCTL, bmCHIPRES); // Chip reset. This stops the oscillator
 8000fe8:	01400804 	movi	r5,32
 8000fec:	01001e04 	movi	r4,120
 8000ff0:	8000c980 	call	8000c98 <MAXreg_wr>
  MAXreg_wr(rUSBCTL, 0x00);      // Remove the reset
 8000ff4:	000b883a 	mov	r5,zero
 8000ff8:	01001e04 	movi	r4,120
 8000ffc:	8000c980 	call	8000c98 <MAXreg_wr>
  while (!(MAXreg_rd(rUSBIRQ) & bmOSCOKIRQ)) { // wait until the PLL stabilizes
 8001000:	00000806 	br	8001024 <MAX3421E_reset+0x7c>
    tmp++;                                     // timeout after 256 attempts
 8001004:	e0bfff03 	ldbu	r2,-4(fp)
 8001008:	10800044 	addi	r2,r2,1
 800100c:	e0bfff05 	stb	r2,-4(fp)
    if (tmp == 0) {
 8001010:	e0bfff03 	ldbu	r2,-4(fp)
 8001014:	1000031e 	bne	r2,zero,8001024 <MAX3421E_reset+0x7c>
      printf("reset timeout!");
 8001018:	010200b4 	movhi	r4,2050
 800101c:	21295604 	addi	r4,r4,-23208
 8001020:	800ada80 	call	800ada8 <printf>
  usleep(1000000);
  IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
  BYTE tmp = 0;
  MAXreg_wr(rUSBCTL, bmCHIPRES); // Chip reset. This stops the oscillator
  MAXreg_wr(rUSBCTL, 0x00);      // Remove the reset
  while (!(MAXreg_rd(rUSBIRQ) & bmOSCOKIRQ)) { // wait until the PLL stabilizes
 8001024:	01001a04 	movi	r4,104
 8001028:	8000e940 	call	8000e94 <MAXreg_rd>
 800102c:	10803fcc 	andi	r2,r2,255
 8001030:	1080004c 	andi	r2,r2,1
 8001034:	103ff326 	beq	r2,zero,8001004 <MAX3421E_reset+0x5c>
    tmp++;                                     // timeout after 256 attempts
    if (tmp == 0) {
      printf("reset timeout!");
    }
  }
}
 8001038:	0001883a 	nop
 800103c:	e037883a 	mov	sp,fp
 8001040:	dfc00117 	ldw	ra,4(sp)
 8001044:	df000017 	ldw	fp,0(sp)
 8001048:	dec00204 	addi	sp,sp,8
 800104c:	f800283a 	ret

08001050 <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
 8001050:	defffe04 	addi	sp,sp,-8
 8001054:	df000115 	stw	fp,4(sp)
 8001058:	df000104 	addi	fp,sp,4
 800105c:	e13fff15 	stw	r4,-4(fp)
  // power on/off successful
  return (1);
 8001060:	00800044 	movi	r2,1
}
 8001064:	e037883a 	mov	sp,fp
 8001068:	df000017 	ldw	fp,0(sp)
 800106c:	dec00104 	addi	sp,sp,4
 8001070:	f800283a 	ret

08001074 <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
 8001074:	defffd04 	addi	sp,sp,-12
 8001078:	dfc00215 	stw	ra,8(sp)
 800107c:	df000115 	stw	fp,4(sp)
 8001080:	df000104 	addi	fp,sp,4
  BYTE bus_sample;

  //  MAXreg_wr(rHCTL,bmSAMPLEBUS);
  bus_sample = MAXreg_rd(rHRSL);         // Get J,K status
 8001084:	01003e04 	movi	r4,248
 8001088:	8000e940 	call	8000e94 <MAXreg_rd>
 800108c:	e0bfff05 	stb	r2,-4(fp)
  bus_sample &= (bmJSTATUS | bmKSTATUS); // zero the rest of the byte
 8001090:	e0ffff03 	ldbu	r3,-4(fp)
 8001094:	00bff004 	movi	r2,-64
 8001098:	1884703a 	and	r2,r3,r2
 800109c:	e0bfff05 	stb	r2,-4(fp)

  switch (bus_sample) { // start full-speed or low-speed host
 80010a0:	e0bfff03 	ldbu	r2,-4(fp)
 80010a4:	10c01020 	cmpeqi	r3,r2,64
 80010a8:	1800221e 	bne	r3,zero,8001134 <MAX_busprobe+0xc0>
 80010ac:	10c01048 	cmpgei	r3,r2,65
 80010b0:	1800021e 	bne	r3,zero,80010bc <MAX_busprobe+0x48>
 80010b4:	10003b26 	beq	r2,zero,80011a4 <MAX_busprobe+0x130>
      MAXreg_wr(rMODE, MODE_FS_HOST); // start full-speed host
      usb_task_state = (USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
    }
    break;
  } // end switch( bus_sample )
}
 80010b8:	00004a06 	br	80011e4 <MAX_busprobe+0x170>

  //  MAXreg_wr(rHCTL,bmSAMPLEBUS);
  bus_sample = MAXreg_rd(rHRSL);         // Get J,K status
  bus_sample &= (bmJSTATUS | bmKSTATUS); // zero the rest of the byte

  switch (bus_sample) { // start full-speed or low-speed host
 80010bc:	10c02020 	cmpeqi	r3,r2,128
 80010c0:	1800031e 	bne	r3,zero,80010d0 <MAX_busprobe+0x5c>
 80010c4:	10803020 	cmpeqi	r2,r2,192
 80010c8:	1000331e 	bne	r2,zero,8001198 <MAX_busprobe+0x124>
      MAXreg_wr(rMODE, MODE_FS_HOST); // start full-speed host
      usb_task_state = (USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
    }
    break;
  } // end switch( bus_sample )
}
 80010cc:	00004506 	br	80011e4 <MAX_busprobe+0x170>
  bus_sample &= (bmJSTATUS | bmKSTATUS); // zero the rest of the byte

  switch (bus_sample) { // start full-speed or low-speed host
  case (bmJSTATUS):
    /*kludgy*/
    if (usb_task_state !=
 80010d0:	d0a00203 	ldbu	r2,-32760(gp)
 80010d4:	10803fcc 	andi	r2,r2,255
 80010d8:	108004e0 	cmpeqi	r2,r2,19
 80010dc:	10003e1e 	bne	r2,zero,80011d8 <MAX_busprobe+0x164>
        USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { // bus reset causes
                                                     // connection detect
                                                     // interrupt
      if (!(MAXreg_rd(rMODE) & bmLOWSPEED)) {
 80010e0:	01003604 	movi	r4,216
 80010e4:	8000e940 	call	8000e94 <MAXreg_rd>
 80010e8:	10803fcc 	andi	r2,r2,255
 80010ec:	1080008c 	andi	r2,r2,2
 80010f0:	1000071e 	bne	r2,zero,8001110 <MAX_busprobe+0x9c>
        MAXreg_wr(rMODE, MODE_FS_HOST); // start full-speed host
 80010f4:	01403244 	movi	r5,201
 80010f8:	01003604 	movi	r4,216
 80010fc:	8000c980 	call	8000c98 <MAXreg_wr>
        printf("Starting in full speed\n");
 8001100:	010200b4 	movhi	r4,2050
 8001104:	21295a04 	addi	r4,r4,-23192
 8001108:	800aec40 	call	800aec4 <puts>
 800110c:	00000606 	br	8001128 <MAX_busprobe+0xb4>
      } else {
        MAXreg_wr(rMODE, MODE_LS_HOST); // start low-speed host
 8001110:	014032c4 	movi	r5,203
 8001114:	01003604 	movi	r4,216
 8001118:	8000c980 	call	8000c98 <MAXreg_wr>
        printf("Starting in low speed\n");
 800111c:	010200b4 	movhi	r4,2050
 8001120:	21296004 	addi	r4,r4,-23168
 8001124:	800aec40 	call	800aec4 <puts>
      }
      usb_task_state = (USB_STATE_ATTACHED); // signal usb state machine to
 8001128:	00800404 	movi	r2,16
 800112c:	d0a00205 	stb	r2,-32760(gp)
                                             // start attachment sequence
    }
    break;
 8001130:	00002906 	br	80011d8 <MAX_busprobe+0x164>
  case (bmKSTATUS):
    if (usb_task_state !=
 8001134:	d0a00203 	ldbu	r2,-32760(gp)
 8001138:	10803fcc 	andi	r2,r2,255
 800113c:	108004e0 	cmpeqi	r2,r2,19
 8001140:	1000271e 	bne	r2,zero,80011e0 <MAX_busprobe+0x16c>
        USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { // bus reset causes
                                                     // connection detect
                                                     // interrupt
      if (!(MAXreg_rd(rMODE) & bmLOWSPEED)) {
 8001144:	01003604 	movi	r4,216
 8001148:	8000e940 	call	8000e94 <MAXreg_rd>
 800114c:	10803fcc 	andi	r2,r2,255
 8001150:	1080008c 	andi	r2,r2,2
 8001154:	1000071e 	bne	r2,zero,8001174 <MAX_busprobe+0x100>
        MAXreg_wr(rMODE, MODE_LS_HOST); // start low-speed host
 8001158:	014032c4 	movi	r5,203
 800115c:	01003604 	movi	r4,216
 8001160:	8000c980 	call	8000c98 <MAXreg_wr>
        printf("Starting in low speed\n");
 8001164:	010200b4 	movhi	r4,2050
 8001168:	21296004 	addi	r4,r4,-23168
 800116c:	800aec40 	call	800aec4 <puts>
 8001170:	00000606 	br	800118c <MAX_busprobe+0x118>
      } else {
        MAXreg_wr(rMODE, MODE_FS_HOST); // start full-speed host
 8001174:	01403244 	movi	r5,201
 8001178:	01003604 	movi	r4,216
 800117c:	8000c980 	call	8000c98 <MAXreg_wr>
        printf("Starting in full speed\n");
 8001180:	010200b4 	movhi	r4,2050
 8001184:	21295a04 	addi	r4,r4,-23192
 8001188:	800aec40 	call	800aec4 <puts>
      }
      usb_task_state = (USB_STATE_ATTACHED); // signal usb state machine to
 800118c:	00800404 	movi	r2,16
 8001190:	d0a00205 	stb	r2,-32760(gp)
                                             // start attachment sequence
    }
    break;
 8001194:	00001206 	br	80011e0 <MAX_busprobe+0x16c>
  case (bmSE1): // illegal state
    usb_task_state = (USB_DETACHED_SUBSTATE_ILLEGAL);
 8001198:	00800104 	movi	r2,4
 800119c:	d0a00205 	stb	r2,-32760(gp)
    break;
 80011a0:	00001006 	br	80011e4 <MAX_busprobe+0x170>
  case (bmSE0): // disconnected state
    if (!((usb_task_state & USB_STATE_MASK) ==
 80011a4:	d0a00203 	ldbu	r2,-32760(gp)
 80011a8:	10803fcc 	andi	r2,r2,255
 80011ac:	10803c0c 	andi	r2,r2,240
 80011b0:	10000326 	beq	r2,zero,80011c0 <MAX_busprobe+0x14c>
          USB_STATE_DETACHED)) // if we came here from other than detached state
      usb_task_state =
 80011b4:	00800044 	movi	r2,1
 80011b8:	d0a00205 	stb	r2,-32760(gp)
          (USB_DETACHED_SUBSTATE_INITIALIZE); // clear device data structures
    else {
      MAXreg_wr(rMODE, MODE_FS_HOST); // start full-speed host
      usb_task_state = (USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
    }
    break;
 80011bc:	00000906 	br	80011e4 <MAX_busprobe+0x170>
    if (!((usb_task_state & USB_STATE_MASK) ==
          USB_STATE_DETACHED)) // if we came here from other than detached state
      usb_task_state =
          (USB_DETACHED_SUBSTATE_INITIALIZE); // clear device data structures
    else {
      MAXreg_wr(rMODE, MODE_FS_HOST); // start full-speed host
 80011c0:	01403244 	movi	r5,201
 80011c4:	01003604 	movi	r4,216
 80011c8:	8000c980 	call	8000c98 <MAXreg_wr>
      usb_task_state = (USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
 80011cc:	008000c4 	movi	r2,3
 80011d0:	d0a00205 	stb	r2,-32760(gp)
    }
    break;
 80011d4:	00000306 	br	80011e4 <MAX_busprobe+0x170>
        printf("Starting in low speed\n");
      }
      usb_task_state = (USB_STATE_ATTACHED); // signal usb state machine to
                                             // start attachment sequence
    }
    break;
 80011d8:	0001883a 	nop
 80011dc:	00000106 	br	80011e4 <MAX_busprobe+0x170>
        printf("Starting in full speed\n");
      }
      usb_task_state = (USB_STATE_ATTACHED); // signal usb state machine to
                                             // start attachment sequence
    }
    break;
 80011e0:	0001883a 	nop
      MAXreg_wr(rMODE, MODE_FS_HOST); // start full-speed host
      usb_task_state = (USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
    }
    break;
  } // end switch( bus_sample )
}
 80011e4:	0001883a 	nop
 80011e8:	e037883a 	mov	sp,fp
 80011ec:	dfc00117 	ldw	ra,4(sp)
 80011f0:	df000017 	ldw	fp,0(sp)
 80011f4:	dec00204 	addi	sp,sp,8
 80011f8:	f800283a 	ret

080011fc <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
 80011fc:	defffe04 	addi	sp,sp,-8
 8001200:	dfc00115 	stw	ra,4(sp)
 8001204:	df000015 	stw	fp,0(sp)
 8001208:	d839883a 	mov	fp,sp
  /* Configure full-duplex SPI, interrupt pulse   */
  MAXreg_wr(rPINCTL, (bmFDUPSPI + bmINTLEVEL +
 800120c:	01400684 	movi	r5,26
 8001210:	01002204 	movi	r4,136
 8001214:	8000c980 	call	8000c98 <MAXreg_wr>
                      bmGPXB)); // Full-duplex SPI, level interrupt, GPX
  MAX3421E_reset();             // stop/start the oscillator
 8001218:	8000fa80 	call	8000fa8 <MAX3421E_reset>
  /* configure power switch   */
  Vbus_power(OFF); // turn Vbus power off
 800121c:	0009883a 	mov	r4,zero
 8001220:	80010500 	call	8001050 <Vbus_power>
  MAXreg_wr(
 8001224:	01402004 	movi	r5,128
 8001228:	01002e04 	movi	r4,184
 800122c:	8000c980 	call	8000c98 <MAXreg_wr>
      rGPINIEN,
      bmGPINIEN7); // enable interrupt on GPIN7 (power switch overload flag)
  Vbus_power(ON);
 8001230:	01000044 	movi	r4,1
 8001234:	80010500 	call	8001050 <Vbus_power>
  /* configure host operation */
  MAXreg_wr(
 8001238:	01403444 	movi	r5,209
 800123c:	01003604 	movi	r4,216
 8001240:	8000c980 	call	8000c98 <MAXreg_wr>
      rMODE,
      bmDPPULLDN | bmDMPULLDN | bmHOST |
          bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
  // MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE ); // enable SOF,
  // connection detection, bus event IRQs
  MAXreg_wr(rHIEN, bmCONDETIE); // connection detection
 8001244:	01400804 	movi	r5,32
 8001248:	01003404 	movi	r4,208
 800124c:	8000c980 	call	8000c98 <MAXreg_wr>
  /* HXFRDNIRQ is checked in Dispatch packet function */
  MAXreg_wr(rHCTL, bmSAMPLEBUS); // update the JSTATUS and KSTATUS bits
 8001250:	01400104 	movi	r5,4
 8001254:	01003a04 	movi	r4,232
 8001258:	8000c980 	call	8000c98 <MAXreg_wr>
  MAX_busprobe();                // check if anything is connected
 800125c:	80010740 	call	8001074 <MAX_busprobe>
  MAXreg_wr(rHIRQ, bmCONDETIRQ); // clear connection detect interrupt
 8001260:	01400804 	movi	r5,32
 8001264:	01003204 	movi	r4,200
 8001268:	8000c980 	call	8000c98 <MAXreg_wr>
  MAXreg_wr(rCPUCTL, 0x01);      // enable interrupt pin
 800126c:	01400044 	movi	r5,1
 8001270:	01002004 	movi	r4,128
 8001274:	8000c980 	call	8000c98 <MAXreg_wr>
}
 8001278:	0001883a 	nop
 800127c:	e037883a 	mov	sp,fp
 8001280:	dfc00117 	ldw	ra,4(sp)
 8001284:	df000017 	ldw	fp,0(sp)
 8001288:	dec00204 	addi	sp,sp,8
 800128c:	f800283a 	ret

08001290 <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
 8001290:	defffe04 	addi	sp,sp,-8
 8001294:	dfc00115 	stw	ra,4(sp)
 8001298:	df000015 	stw	fp,0(sp)
 800129c:	d839883a 	mov	fp,sp
  if (IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 80012a0:	00800074 	movhi	r2,1
 80012a4:	10845c04 	addi	r2,r2,4464
 80012a8:	10800037 	ldwio	r2,0(r2)
 80012ac:	1000041e 	bne	r2,zero,80012c0 <MAX3421E_Task+0x30>
    printf("MAX interrupt\n\r");
 80012b0:	010200b4 	movhi	r4,2050
 80012b4:	21296604 	addi	r4,r4,-23144
 80012b8:	800ada80 	call	800ada8 <printf>
    MaxIntHandler();
 80012bc:	80012fc0 	call	80012fc <MaxIntHandler>
  }
  if (IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
 80012c0:	00800074 	movhi	r2,1
 80012c4:	10845804 	addi	r2,r2,4448
 80012c8:	10800037 	ldwio	r2,0(r2)
 80012cc:	10800058 	cmpnei	r2,r2,1
 80012d0:	1000041e 	bne	r2,zero,80012e4 <MAX3421E_Task+0x54>
    printf("GPX interrupt\n\r");
 80012d4:	010200b4 	movhi	r4,2050
 80012d8:	21296a04 	addi	r4,r4,-23128
 80012dc:	800ada80 	call	800ada8 <printf>
    MaxGpxHandler();
 80012e0:	80013c80 	call	80013c8 <MaxGpxHandler>
  }
}
 80012e4:	0001883a 	nop
 80012e8:	e037883a 	mov	sp,fp
 80012ec:	dfc00117 	ldw	ra,4(sp)
 80012f0:	df000017 	ldw	fp,0(sp)
 80012f4:	dec00204 	addi	sp,sp,8
 80012f8:	f800283a 	ret

080012fc <MaxIntHandler>:

void MaxIntHandler(void) {
 80012fc:	defffd04 	addi	sp,sp,-12
 8001300:	dfc00215 	stw	ra,8(sp)
 8001304:	df000115 	stw	fp,4(sp)
 8001308:	df000104 	addi	fp,sp,4
  BYTE HIRQ;
  BYTE HIRQ_sendback = 0x00;
 800130c:	e03fff05 	stb	zero,-4(fp)
  HIRQ = MAXreg_rd(rHIRQ); // determine interrupt source
 8001310:	01003204 	movi	r4,200
 8001314:	8000e940 	call	8000e94 <MAXreg_rd>
 8001318:	e0bfff45 	stb	r2,-3(fp)
  printf("IRQ: %x\n", HIRQ);
 800131c:	e0bfff43 	ldbu	r2,-3(fp)
 8001320:	100b883a 	mov	r5,r2
 8001324:	010200b4 	movhi	r4,2050
 8001328:	21296e04 	addi	r4,r4,-23112
 800132c:	800ada80 	call	800ada8 <printf>
  if (HIRQ & bmFRAMEIRQ) { //->1ms SOF interrupt handler
 8001330:	e0bfff43 	ldbu	r2,-3(fp)
 8001334:	1080100c 	andi	r2,r2,64
 8001338:	10000326 	beq	r2,zero,8001348 <MaxIntHandler+0x4c>
    HIRQ_sendback |= bmFRAMEIRQ;
 800133c:	e0bfff03 	ldbu	r2,-4(fp)
 8001340:	10801014 	ori	r2,r2,64
 8001344:	e0bfff05 	stb	r2,-4(fp)
  } // end FRAMEIRQ handling

  if (HIRQ & bmCONDETIRQ) {
 8001348:	e0bfff43 	ldbu	r2,-3(fp)
 800134c:	1080080c 	andi	r2,r2,32
 8001350:	10000426 	beq	r2,zero,8001364 <MaxIntHandler+0x68>
    MAX_busprobe();
 8001354:	80010740 	call	8001074 <MAX_busprobe>
    HIRQ_sendback |= bmCONDETIRQ; // set sendback to 1 to clear register
 8001358:	e0bfff03 	ldbu	r2,-4(fp)
 800135c:	10800814 	ori	r2,r2,32
 8001360:	e0bfff05 	stb	r2,-4(fp)
  }
  if (HIRQ & bmSNDBAVIRQ) // if the send buffer is clear (previous transfer
 8001364:	e0bfff43 	ldbu	r2,-3(fp)
 8001368:	1080020c 	andi	r2,r2,8
 800136c:	10000326 	beq	r2,zero,800137c <MaxIntHandler+0x80>
                          // completed without issue)
  {
    MAXreg_wr(rSNDBC, 0x00); // clear the send buffer (not really necessary, but
 8001370:	000b883a 	mov	r5,zero
 8001374:	01000e04 	movi	r4,56
 8001378:	8000c980 	call	8000c98 <MAXreg_wr>
                             // clears interrupt)
  }
  if (HIRQ & bmBUSEVENTIRQ) { // bus event is either reset or suspend
 800137c:	e0bfff43 	ldbu	r2,-3(fp)
 8001380:	1080004c 	andi	r2,r2,1
 8001384:	10000626 	beq	r2,zero,80013a0 <MaxIntHandler+0xa4>
    usb_task_state++;         // advance USB task state machine
 8001388:	d0a00203 	ldbu	r2,-32760(gp)
 800138c:	10800044 	addi	r2,r2,1
 8001390:	d0a00205 	stb	r2,-32760(gp)
    HIRQ_sendback |= bmBUSEVENTIRQ;
 8001394:	e0bfff03 	ldbu	r2,-4(fp)
 8001398:	10800054 	ori	r2,r2,1
 800139c:	e0bfff05 	stb	r2,-4(fp)
  }
  /* End HIRQ interrupts handling, clear serviced IRQs    */
  MAXreg_wr(rHIRQ,
 80013a0:	e0bfff03 	ldbu	r2,-4(fp)
 80013a4:	100b883a 	mov	r5,r2
 80013a8:	01003204 	movi	r4,200
 80013ac:	8000c980 	call	8000c98 <MAXreg_wr>
            HIRQ_sendback); // write '1' to CONDETIRQ to ack bus state change
}
 80013b0:	0001883a 	nop
 80013b4:	e037883a 	mov	sp,fp
 80013b8:	dfc00117 	ldw	ra,4(sp)
 80013bc:	df000017 	ldw	fp,0(sp)
 80013c0:	dec00204 	addi	sp,sp,8
 80013c4:	f800283a 	ret

080013c8 <MaxGpxHandler>:

void MaxGpxHandler(void) {
 80013c8:	defffd04 	addi	sp,sp,-12
 80013cc:	dfc00215 	stw	ra,8(sp)
 80013d0:	df000115 	stw	fp,4(sp)
 80013d4:	df000104 	addi	fp,sp,4
  BYTE GPINIRQ;
  GPINIRQ = MAXreg_rd(rGPINIRQ); // read both IRQ registers
 80013d8:	01002c04 	movi	r4,176
 80013dc:	8000e940 	call	8000e94 <MAXreg_rd>
 80013e0:	e0bfff05 	stb	r2,-4(fp)
}
 80013e4:	0001883a 	nop
 80013e8:	e037883a 	mov	sp,fp
 80013ec:	dfc00117 	ldw	ra,4(sp)
 80013f0:	df000017 	ldw	fp,0(sp)
 80013f4:	dec00204 	addi	sp,sp,8
 80013f8:	f800283a 	ret

080013fc <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq(BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo,
                 BYTE wValHi, WORD wInd, WORD nbytes, BYTE *dataptr) {
 80013fc:	defff104 	addi	sp,sp,-60
 8001400:	dfc00e15 	stw	ra,56(sp)
 8001404:	df000d15 	stw	fp,52(sp)
 8001408:	df000d04 	addi	fp,sp,52
 800140c:	2015883a 	mov	r10,r4
 8001410:	2813883a 	mov	r9,r5
 8001414:	3011883a 	mov	r8,r6
 8001418:	380d883a 	mov	r6,r7
 800141c:	e1400217 	ldw	r5,8(fp)
 8001420:	e1000317 	ldw	r4,12(fp)
 8001424:	e0c00417 	ldw	r3,16(fp)
 8001428:	e0800517 	ldw	r2,20(fp)
 800142c:	e2bff805 	stb	r10,-32(fp)
 8001430:	e27ff905 	stb	r9,-28(fp)
 8001434:	e23ffa05 	stb	r8,-24(fp)
 8001438:	e1bffb05 	stb	r6,-20(fp)
 800143c:	e17ffc05 	stb	r5,-16(fp)
 8001440:	e13ffd05 	stb	r4,-12(fp)
 8001444:	e0fffe0d 	sth	r3,-8(fp)
 8001448:	e0bfff0d 	sth	r2,-4(fp)
  BOOL direction = FALSE; // request direction, IN or OUT
 800144c:	e03ff415 	stw	zero,-48(fp)
  BYTE datastage = 1;     // request data stage present or absent
 8001450:	00800044 	movi	r2,1
 8001454:	e0bff505 	stb	r2,-44(fp)
  BYTE rcode;
  SETUP_PKT setup_pkt;
  if (dataptr == NULL) {
 8001458:	e0800617 	ldw	r2,24(fp)
 800145c:	1000011e 	bne	r2,zero,8001464 <XferCtrlReq+0x68>
    datastage = 0;
 8001460:	e03ff505 	stb	zero,-44(fp)
  }
  MAXreg_wr(rPERADDR, addr); // set peripheral address
 8001464:	e0bff803 	ldbu	r2,-32(fp)
 8001468:	100b883a 	mov	r5,r2
 800146c:	01003804 	movi	r4,224
 8001470:	8000c980 	call	8000c98 <MAXreg_wr>
  /* fill in setup packet */
  if (bmReqType & 0x80) {
 8001474:	e0bffa03 	ldbu	r2,-24(fp)
 8001478:	10803fcc 	andi	r2,r2,255
 800147c:	1080201c 	xori	r2,r2,128
 8001480:	10bfe004 	addi	r2,r2,-128
 8001484:	1000020e 	bge	r2,zero,8001490 <XferCtrlReq+0x94>
    direction = TRUE; // determine request direction
 8001488:	00800044 	movi	r2,1
 800148c:	e0bff415 	stw	r2,-48(fp)
  }
  /* fill in setup packet */
  setup_pkt.ReqType_u.bmRequestType = bmReqType;
 8001490:	e0bffa03 	ldbu	r2,-24(fp)
 8001494:	e0bff585 	stb	r2,-42(fp)
  setup_pkt.bRequest = bRequest;
 8001498:	e0bffb03 	ldbu	r2,-20(fp)
 800149c:	e0bff5c5 	stb	r2,-41(fp)
  setup_pkt.wVal_u.wValueLo = wValLo;
 80014a0:	e0bffc03 	ldbu	r2,-16(fp)
 80014a4:	e0bff605 	stb	r2,-40(fp)
  setup_pkt.wVal_u.wValueHi = wValHi;
 80014a8:	e0bffd03 	ldbu	r2,-12(fp)
 80014ac:	e0bff645 	stb	r2,-39(fp)
  setup_pkt.wIndex = wInd;
 80014b0:	e0bffe0b 	ldhu	r2,-8(fp)
 80014b4:	e0bff68d 	sth	r2,-38(fp)
  setup_pkt.wLength = nbytes;
 80014b8:	e0bfff0b 	ldhu	r2,-4(fp)
 80014bc:	e0bff70d 	sth	r2,-36(fp)
  MAXbytes_wr(rSUDFIFO, 8, (BYTE *)&setup_pkt); // transfer to setup packet FIFO
 80014c0:	e0bff584 	addi	r2,fp,-42
 80014c4:	100d883a 	mov	r6,r2
 80014c8:	01400204 	movi	r5,8
 80014cc:	01000804 	movi	r4,32
 80014d0:	8000d240 	call	8000d24 <MAXbytes_wr>
  rcode = XferDispatchPkt(tokSETUP, ep);        // dispatch packet
 80014d4:	e0bff903 	ldbu	r2,-28(fp)
 80014d8:	100b883a 	mov	r5,r2
 80014dc:	01000404 	movi	r4,16
 80014e0:	80016a40 	call	80016a4 <XferDispatchPkt>
 80014e4:	e0bff545 	stb	r2,-43(fp)
  if (rcode) {                                  // return HRSLT if not zero
 80014e8:	e0bff543 	ldbu	r2,-43(fp)
 80014ec:	10000226 	beq	r2,zero,80014f8 <XferCtrlReq+0xfc>
    return (rcode);
 80014f0:	e0bff543 	ldbu	r2,-43(fp)
 80014f4:	00000f06 	br	8001534 <XferCtrlReq+0x138>
  }
  rcode = ctrl_xfers[datastage](
 80014f8:	e0bff503 	ldbu	r2,-44(fp)
 80014fc:	1085883a 	add	r2,r2,r2
 8001500:	1087883a 	add	r3,r2,r2
 8001504:	d0a00004 	addi	r2,gp,-32768
 8001508:	1885883a 	add	r2,r3,r2
 800150c:	10800017 	ldw	r2,0(r2)
 8001510:	e13ff803 	ldbu	r4,-32(fp)
 8001514:	e17ff903 	ldbu	r5,-28(fp)
 8001518:	e1bfff0b 	ldhu	r6,-4(fp)
 800151c:	e0fff417 	ldw	r3,-48(fp)
 8001520:	d8c00015 	stw	r3,0(sp)
 8001524:	e1c00617 	ldw	r7,24(fp)
 8001528:	103ee83a 	callr	r2
 800152c:	e0bff545 	stb	r2,-43(fp)
      addr, ep, nbytes, dataptr,
      direction); // call data stage or no data stage transfer
  return (rcode);
 8001530:	e0bff543 	ldbu	r2,-43(fp)
}
 8001534:	e037883a 	mov	sp,fp
 8001538:	dfc00117 	ldw	ra,4(sp)
 800153c:	df000017 	ldw	fp,0(sp)
 8001540:	dec00204 	addi	sp,sp,8
 8001544:	f800283a 	ret

08001548 <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData(BYTE addr, BYTE ep, WORD nbytes, BYTE *dataptr,
                  BOOL direction) {
 8001548:	defff804 	addi	sp,sp,-32
 800154c:	dfc00715 	stw	ra,28(sp)
 8001550:	df000615 	stw	fp,24(sp)
 8001554:	df000604 	addi	fp,sp,24
 8001558:	2807883a 	mov	r3,r5
 800155c:	3005883a 	mov	r2,r6
 8001560:	e1ffff15 	stw	r7,-4(fp)
 8001564:	e13ffc05 	stb	r4,-16(fp)
 8001568:	e0fffd05 	stb	r3,-12(fp)
 800156c:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;

  // MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
  if (direction) { // IN transfer
 8001570:	e0800217 	ldw	r2,8(fp)
 8001574:	10002826 	beq	r2,zero,8001618 <XferCtrlData+0xd0>
    devtable[addr].epinfo[ep].rcvToggle = bmRCVTOG1;
 8001578:	e0fffc03 	ldbu	r3,-16(fp)
 800157c:	008200b4 	movhi	r2,2050
 8001580:	10ba5e04 	addi	r2,r2,-5768
 8001584:	180690fa 	slli	r3,r3,3
 8001588:	10c5883a 	add	r2,r2,r3
 800158c:	10c00017 	ldw	r3,0(r2)
 8001590:	e0bffd03 	ldbu	r2,-12(fp)
 8001594:	100490fa 	slli	r2,r2,3
 8001598:	1885883a 	add	r2,r3,r2
 800159c:	00c00804 	movi	r3,32
 80015a0:	10c00185 	stb	r3,6(r2)
    rcode = XferInTransfer(addr, ep, nbytes, dataptr,
 80015a4:	e13ffc03 	ldbu	r4,-16(fp)
 80015a8:	e17ffd03 	ldbu	r5,-12(fp)
 80015ac:	e1bffe0b 	ldhu	r6,-8(fp)
                           devtable[addr].epinfo[ep].MaxPktSize);
 80015b0:	e0fffc03 	ldbu	r3,-16(fp)
 80015b4:	008200b4 	movhi	r2,2050
 80015b8:	10ba5e04 	addi	r2,r2,-5768
 80015bc:	180690fa 	slli	r3,r3,3
 80015c0:	10c5883a 	add	r2,r2,r3
 80015c4:	10c00017 	ldw	r3,0(r2)
 80015c8:	e0bffd03 	ldbu	r2,-12(fp)
 80015cc:	100490fa 	slli	r2,r2,3
 80015d0:	1885883a 	add	r2,r3,r2
 80015d4:	1080008b 	ldhu	r2,2(r2)
  BYTE rcode;

  // MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
  if (direction) { // IN transfer
    devtable[addr].epinfo[ep].rcvToggle = bmRCVTOG1;
    rcode = XferInTransfer(addr, ep, nbytes, dataptr,
 80015d8:	10803fcc 	andi	r2,r2,255
 80015dc:	d8800015 	stw	r2,0(sp)
 80015e0:	e1ffff17 	ldw	r7,-4(fp)
 80015e4:	80018200 	call	8001820 <XferInTransfer>
 80015e8:	e0bffb05 	stb	r2,-20(fp)
                           devtable[addr].epinfo[ep].MaxPktSize);
    if (rcode) {
 80015ec:	e0bffb03 	ldbu	r2,-20(fp)
 80015f0:	10000226 	beq	r2,zero,80015fc <XferCtrlData+0xb4>
      return (rcode);
 80015f4:	e0bffb03 	ldbu	r2,-20(fp)
 80015f8:	00000806 	br	800161c <XferCtrlData+0xd4>
    }
    rcode = XferDispatchPkt(tokOUTHS, ep);
 80015fc:	e0bffd03 	ldbu	r2,-12(fp)
 8001600:	100b883a 	mov	r5,r2
 8001604:	01002804 	movi	r4,160
 8001608:	80016a40 	call	80016a4 <XferDispatchPkt>
 800160c:	e0bffb05 	stb	r2,-20(fp)
    return (rcode);
 8001610:	e0bffb03 	ldbu	r2,-20(fp)
 8001614:	00000106 	br	800161c <XferCtrlData+0xd4>
  } else { // OUT not implemented
    return (0xff);
 8001618:	00bfffc4 	movi	r2,-1
  }
}
 800161c:	e037883a 	mov	sp,fp
 8001620:	dfc00117 	ldw	ra,4(sp)
 8001624:	df000017 	ldw	fp,0(sp)
 8001628:	dec00204 	addi	sp,sp,8
 800162c:	f800283a 	ret

08001630 <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND(BYTE addr, BYTE ep, WORD nbytes, BYTE *dataptr,
                BOOL direction) {
 8001630:	defff904 	addi	sp,sp,-28
 8001634:	dfc00615 	stw	ra,24(sp)
 8001638:	df000515 	stw	fp,20(sp)
 800163c:	df000504 	addi	fp,sp,20
 8001640:	2807883a 	mov	r3,r5
 8001644:	3005883a 	mov	r2,r6
 8001648:	e1ffff15 	stw	r7,-4(fp)
 800164c:	e13ffc05 	stb	r4,-16(fp)
 8001650:	e0fffd05 	stb	r3,-12(fp)
 8001654:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;
  if (direction) { // GET
 8001658:	e0800217 	ldw	r2,8(fp)
 800165c:	10000626 	beq	r2,zero,8001678 <XferCtrlND+0x48>
    rcode = XferDispatchPkt(tokOUTHS, ep);
 8001660:	e0bffd03 	ldbu	r2,-12(fp)
 8001664:	100b883a 	mov	r5,r2
 8001668:	01002804 	movi	r4,160
 800166c:	80016a40 	call	80016a4 <XferDispatchPkt>
 8001670:	e0bffb05 	stb	r2,-20(fp)
 8001674:	00000506 	br	800168c <XferCtrlND+0x5c>
  } else {
    rcode = XferDispatchPkt(tokINHS, ep);
 8001678:	e0bffd03 	ldbu	r2,-12(fp)
 800167c:	100b883a 	mov	r5,r2
 8001680:	01002004 	movi	r4,128
 8001684:	80016a40 	call	80016a4 <XferDispatchPkt>
 8001688:	e0bffb05 	stb	r2,-20(fp)
  }
  return (rcode);
 800168c:	e0bffb03 	ldbu	r2,-20(fp)
}
 8001690:	e037883a 	mov	sp,fp
 8001694:	dfc00117 	ldw	ra,4(sp)
 8001698:	df000017 	ldw	fp,0(sp)
 800169c:	dec00204 	addi	sp,sp,8
 80016a0:	f800283a 	ret

080016a4 <XferDispatchPkt>:
 * sudFIFO-sendFIFO loaded. */
/* Result code: 0 success, nonzero = error condition */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout */
BYTE XferDispatchPkt(BYTE token, BYTE ep) {
 80016a4:	defff904 	addi	sp,sp,-28
 80016a8:	dfc00615 	stw	ra,24(sp)
 80016ac:	df000515 	stw	fp,20(sp)
 80016b0:	df000504 	addi	fp,sp,20
 80016b4:	2007883a 	mov	r3,r4
 80016b8:	2805883a 	mov	r2,r5
 80016bc:	e0fffe05 	stb	r3,-8(fp)
 80016c0:	e0bfff05 	stb	r2,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80016c4:	d0a74817 	ldw	r2,-25312(gp)
  DWORD timeout =
      (alt_nticks() * 1000) / alt_ticks_per_second() + USB_XFER_TIMEOUT;
 80016c8:	0140fa04 	movi	r5,1000
 80016cc:	1009883a 	mov	r4,r2
 80016d0:	800a1780 	call	800a178 <__mulsi3>
 80016d4:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80016d8:	d0a74717 	ldw	r2,-25316(gp)
 80016dc:	100b883a 	mov	r5,r2
 80016e0:	1809883a 	mov	r4,r3
 80016e4:	800a0bc0 	call	800a0bc <__udivsi3>
/* Result code: 0 success, nonzero = error condition */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout */
BYTE XferDispatchPkt(BYTE token, BYTE ep) {
  DWORD timeout =
 80016e8:	1084e204 	addi	r2,r2,5000
 80016ec:	e0bffc15 	stw	r2,-16(fp)
      (alt_nticks() * 1000) / alt_ticks_per_second() + USB_XFER_TIMEOUT;
  BYTE tmpdata;
  BYTE rcode;
  char retry_count = 0;
 80016f0:	e03ffb45 	stb	zero,-19(fp)
  BYTE nak_count = 0;
 80016f4:	e03ffb85 	stb	zero,-18(fp)

  while (1) {
    MAXreg_wr(rHXFR, (token | ep)); // launch the transfer
 80016f8:	e0fffe03 	ldbu	r3,-8(fp)
 80016fc:	e0bfff03 	ldbu	r2,-4(fp)
 8001700:	1884b03a 	or	r2,r3,r2
 8001704:	10803fcc 	andi	r2,r2,255
 8001708:	100b883a 	mov	r5,r2
 800170c:	01003c04 	movi	r4,240
 8001710:	8000c980 	call	8000c98 <MAXreg_wr>
    rcode = 0xff;
 8001714:	00bfffc4 	movi	r2,-1
 8001718:	e0bffb05 	stb	r2,-20(fp)
    while ((alt_nticks() * 1000) / alt_ticks_per_second() < timeout) {
 800171c:	00000d06 	br	8001754 <XferDispatchPkt+0xb0>
      tmpdata = MAXreg_rd(rHIRQ);
 8001720:	01003204 	movi	r4,200
 8001724:	8000e940 	call	8000e94 <MAXreg_rd>
 8001728:	e0bffd05 	stb	r2,-12(fp)
      if (tmpdata & bmHXFRDNIRQ) {
 800172c:	e0bffd03 	ldbu	r2,-12(fp)
 8001730:	10803fcc 	andi	r2,r2,255
 8001734:	1080201c 	xori	r2,r2,128
 8001738:	10bfe004 	addi	r2,r2,-128
 800173c:	1000050e 	bge	r2,zero,8001754 <XferDispatchPkt+0xb0>
        MAXreg_wr(rHIRQ, bmHXFRDNIRQ); // clear the interrupt
 8001740:	01402004 	movi	r5,128
 8001744:	01003204 	movi	r4,200
 8001748:	8000c980 	call	8000c98 <MAXreg_wr>
        rcode = 0x00;
 800174c:	e03ffb05 	stb	zero,-20(fp)
        break;
 8001750:	00000c06 	br	8001784 <XferDispatchPkt+0xe0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8001754:	d0a74817 	ldw	r2,-25312(gp)
  BYTE nak_count = 0;

  while (1) {
    MAXreg_wr(rHXFR, (token | ep)); // launch the transfer
    rcode = 0xff;
    while ((alt_nticks() * 1000) / alt_ticks_per_second() < timeout) {
 8001758:	0140fa04 	movi	r5,1000
 800175c:	1009883a 	mov	r4,r2
 8001760:	800a1780 	call	800a178 <__mulsi3>
 8001764:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8001768:	d0a74717 	ldw	r2,-25316(gp)
 800176c:	100b883a 	mov	r5,r2
 8001770:	1809883a 	mov	r4,r3
 8001774:	800a0bc0 	call	800a0bc <__udivsi3>
 8001778:	1007883a 	mov	r3,r2
 800177c:	e0bffc17 	ldw	r2,-16(fp)
 8001780:	18bfe736 	bltu	r3,r2,8001720 <XferDispatchPkt+0x7c>
        MAXreg_wr(rHIRQ, bmHXFRDNIRQ); // clear the interrupt
        rcode = 0x00;
        break;
      }
    }
    if (rcode != 0x00) { // exit if timeout
 8001784:	e0bffb03 	ldbu	r2,-20(fp)
 8001788:	10000226 	beq	r2,zero,8001794 <XferDispatchPkt+0xf0>
      return (rcode);
 800178c:	e0bffb03 	ldbu	r2,-20(fp)
 8001790:	00001e06 	br	800180c <XferDispatchPkt+0x168>
    }
    rcode = (MAXreg_rd(rHRSL) & 0x0f);
 8001794:	01003e04 	movi	r4,248
 8001798:	8000e940 	call	8000e94 <MAXreg_rd>
 800179c:	108003cc 	andi	r2,r2,15
 80017a0:	e0bffb05 	stb	r2,-20(fp)
    if (rcode == hrNAK) {
 80017a4:	e0bffb03 	ldbu	r2,-20(fp)
 80017a8:	10800118 	cmpnei	r2,r2,4
 80017ac:	1000071e 	bne	r2,zero,80017cc <XferDispatchPkt+0x128>
      nak_count++;
 80017b0:	e0bffb83 	ldbu	r2,-18(fp)
 80017b4:	10800044 	addi	r2,r2,1
 80017b8:	e0bffb85 	stb	r2,-18(fp)
      if (nak_count == USB_NAK_LIMIT) {
 80017bc:	e0bffb83 	ldbu	r2,-18(fp)
 80017c0:	10803218 	cmpnei	r2,r2,200
 80017c4:	10000b1e 	bne	r2,zero,80017f4 <XferDispatchPkt+0x150>
        break;
 80017c8:	00000f06 	br	8001808 <XferDispatchPkt+0x164>
      } else {
        continue;
      }
    }
    if (rcode == hrTIMEOUT) {
 80017cc:	e0bffb03 	ldbu	r2,-20(fp)
 80017d0:	10800398 	cmpnei	r2,r2,14
 80017d4:	1000091e 	bne	r2,zero,80017fc <XferDispatchPkt+0x158>
      retry_count++;
 80017d8:	e0bffb43 	ldbu	r2,-19(fp)
 80017dc:	10800044 	addi	r2,r2,1
 80017e0:	e0bffb45 	stb	r2,-19(fp)
      if (retry_count == USB_RETRY_LIMIT) {
 80017e4:	e0bffb47 	ldb	r2,-19(fp)
 80017e8:	108000d8 	cmpnei	r2,r2,3
 80017ec:	10000526 	beq	r2,zero,8001804 <XferDispatchPkt+0x160>
        break;
      } else {
        continue;
 80017f0:	00000106 	br	80017f8 <XferDispatchPkt+0x154>
    if (rcode == hrNAK) {
      nak_count++;
      if (nak_count == USB_NAK_LIMIT) {
        break;
      } else {
        continue;
 80017f4:	0001883a 	nop
      } else {
        continue;
      }
    } else
      break;
  } // while( 1 )
 80017f8:	003fbf06 	br	80016f8 <XferDispatchPkt+0x54>
        break;
      } else {
        continue;
      }
    } else
      break;
 80017fc:	0001883a 	nop
 8001800:	00000106 	br	8001808 <XferDispatchPkt+0x164>
      }
    }
    if (rcode == hrTIMEOUT) {
      retry_count++;
      if (retry_count == USB_RETRY_LIMIT) {
        break;
 8001804:	0001883a 	nop
        continue;
      }
    } else
      break;
  } // while( 1 )
  return (rcode);
 8001808:	e0bffb03 	ldbu	r2,-20(fp)
}
 800180c:	e037883a 	mov	sp,fp
 8001810:	dfc00117 	ldw	ra,4(sp)
 8001814:	df000017 	ldw	fp,0(sp)
 8001818:	dec00204 	addi	sp,sp,8
 800181c:	f800283a 	ret

08001820 <XferInTransfer>:
   packets if necessary. Transfers 'nbytes' bytes. Keep sending INs and writes
   data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode
   f0 means RCVDAVIRQ error, fe USB xfer timeout */
BYTE XferInTransfer(BYTE addr /* not sure if it's necessary */, BYTE ep,
                    WORD nbytes, BYTE *data, BYTE maxpktsize) {
 8001820:	defff804 	addi	sp,sp,-32
 8001824:	dfc00715 	stw	ra,28(sp)
 8001828:	df000615 	stw	fp,24(sp)
 800182c:	df000604 	addi	fp,sp,24
 8001830:	2011883a 	mov	r8,r4
 8001834:	2809883a 	mov	r4,r5
 8001838:	3007883a 	mov	r3,r6
 800183c:	e1fffe15 	stw	r7,-8(fp)
 8001840:	e0800217 	ldw	r2,8(fp)
 8001844:	e23ffb05 	stb	r8,-20(fp)
 8001848:	e13ffc05 	stb	r4,-16(fp)
 800184c:	e0fffd0d 	sth	r3,-12(fp)
 8001850:	e0bfff05 	stb	r2,-4(fp)
  BYTE rcode;
  BYTE i;
  BYTE tmpbyte;
  BYTE pktsize;
  WORD xfrlen = 0;
 8001854:	e03ffa0d 	sth	zero,-24(fp)
  MAXreg_wr(rHCTL, devtable[addr].epinfo[ep].rcvToggle); // set toggle value
 8001858:	e0fffb03 	ldbu	r3,-20(fp)
 800185c:	008200b4 	movhi	r2,2050
 8001860:	10ba5e04 	addi	r2,r2,-5768
 8001864:	180690fa 	slli	r3,r3,3
 8001868:	10c5883a 	add	r2,r2,r3
 800186c:	10c00017 	ldw	r3,0(r2)
 8001870:	e0bffc03 	ldbu	r2,-16(fp)
 8001874:	100490fa 	slli	r2,r2,3
 8001878:	1885883a 	add	r2,r3,r2
 800187c:	10800183 	ldbu	r2,6(r2)
 8001880:	10803fcc 	andi	r2,r2,255
 8001884:	100b883a 	mov	r5,r2
 8001888:	01003a04 	movi	r4,232
 800188c:	8000c980 	call	8000c98 <MAXreg_wr>
  while (1) { // use a 'return' to exit this loop
    rcode = XferDispatchPkt(
 8001890:	e0bffc03 	ldbu	r2,-16(fp)
 8001894:	100b883a 	mov	r5,r2
 8001898:	0009883a 	mov	r4,zero
 800189c:	80016a40 	call	80016a4 <XferDispatchPkt>
 80018a0:	e0bffa85 	stb	r2,-22(fp)
        tokIN, ep); // IN packet to EP-'endpoint'. Function takes care of NAKS.
    if (rcode) {
 80018a4:	e0bffa83 	ldbu	r2,-22(fp)
 80018a8:	10000226 	beq	r2,zero,80018b4 <XferInTransfer+0x94>
      return (rcode); // should be 0, indicating ACK. Else return error code.
 80018ac:	e0bffa83 	ldbu	r2,-22(fp)
 80018b0:	00003a06 	br	800199c <XferInTransfer+0x17c>
    }
    /* check for RCVDAVIRQ and generate error if not present */
    /* the only case when absence of RCVDAVIRQ makes sense is when toggle error
     * occurred. Need to add handling for that */
    if ((MAXreg_rd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 80018b4:	01003204 	movi	r4,200
 80018b8:	8000e940 	call	8000e94 <MAXreg_rd>
 80018bc:	10803fcc 	andi	r2,r2,255
 80018c0:	1080010c 	andi	r2,r2,4
 80018c4:	1000021e 	bne	r2,zero,80018d0 <XferInTransfer+0xb0>
      return (0xf0); // receive error
 80018c8:	00bffc04 	movi	r2,-16
 80018cc:	00003306 	br	800199c <XferInTransfer+0x17c>
    }
    pktsize = MAXreg_rd(rRCVBC); // number of received bytes
 80018d0:	01000c04 	movi	r4,48
 80018d4:	8000e940 	call	8000e94 <MAXreg_rd>
 80018d8:	e0bffac5 	stb	r2,-21(fp)
    // printf ("pktsize: %d\n", pktsize);
    data = MAXbytes_rd(rRCVFIFO, pktsize, data);
 80018dc:	e0bffac3 	ldbu	r2,-21(fp)
 80018e0:	e1bffe17 	ldw	r6,-8(fp)
 80018e4:	100b883a 	mov	r5,r2
 80018e8:	01000204 	movi	r4,8
 80018ec:	8000f140 	call	8000f14 <MAXbytes_rd>
 80018f0:	e0bffe15 	stw	r2,-8(fp)
    MAXreg_wr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 80018f4:	01400104 	movi	r5,4
 80018f8:	01003204 	movi	r4,200
 80018fc:	8000c980 	call	8000c98 <MAXreg_wr>
    xfrlen += pktsize; // add this packet's byte count to total transfer length
 8001900:	e0fffac3 	ldbu	r3,-21(fp)
 8001904:	e0bffa0b 	ldhu	r2,-24(fp)
 8001908:	1885883a 	add	r2,r3,r2
 800190c:	e0bffa0d 	sth	r2,-24(fp)
    /* The transfer is complete under two conditions:           */
    /* 1. The device sent a short packet (L.T. maxPacketSize)   */
    /* 2. 'nbytes' have been transferred.                       */
    if ((pktsize < maxpktsize) ||
 8001910:	e0fffac3 	ldbu	r3,-21(fp)
 8001914:	e0bfff03 	ldbu	r2,-4(fp)
 8001918:	18800336 	bltu	r3,r2,8001928 <XferInTransfer+0x108>
 800191c:	e0fffa0b 	ldhu	r3,-24(fp)
 8001920:	e0bffd0b 	ldhu	r2,-12(fp)
 8001924:	18bfda36 	bltu	r3,r2,8001890 <XferInTransfer+0x70>
        (xfrlen >= nbytes)) { // have we transferred 'nbytes' bytes?
      if (MAXreg_rd(rHRSL) & bmRCVTOGRD) { // save toggle value
 8001928:	01003e04 	movi	r4,248
 800192c:	8000e940 	call	8000e94 <MAXreg_rd>
 8001930:	10803fcc 	andi	r2,r2,255
 8001934:	1080040c 	andi	r2,r2,16
 8001938:	10000c26 	beq	r2,zero,800196c <XferInTransfer+0x14c>
        devtable[addr].epinfo[ep].rcvToggle = bmRCVTOG1;
 800193c:	e0fffb03 	ldbu	r3,-20(fp)
 8001940:	008200b4 	movhi	r2,2050
 8001944:	10ba5e04 	addi	r2,r2,-5768
 8001948:	180690fa 	slli	r3,r3,3
 800194c:	10c5883a 	add	r2,r2,r3
 8001950:	10c00017 	ldw	r3,0(r2)
 8001954:	e0bffc03 	ldbu	r2,-16(fp)
 8001958:	100490fa 	slli	r2,r2,3
 800195c:	1885883a 	add	r2,r3,r2
 8001960:	00c00804 	movi	r3,32
 8001964:	10c00185 	stb	r3,6(r2)
 8001968:	00000b06 	br	8001998 <XferInTransfer+0x178>
      } else {
        devtable[addr].epinfo[ep].rcvToggle = bmRCVTOG0;
 800196c:	e0fffb03 	ldbu	r3,-20(fp)
 8001970:	008200b4 	movhi	r2,2050
 8001974:	10ba5e04 	addi	r2,r2,-5768
 8001978:	180690fa 	slli	r3,r3,3
 800197c:	10c5883a 	add	r2,r2,r3
 8001980:	10c00017 	ldw	r3,0(r2)
 8001984:	e0bffc03 	ldbu	r2,-16(fp)
 8001988:	100490fa 	slli	r2,r2,3
 800198c:	1885883a 	add	r2,r3,r2
 8001990:	00c00404 	movi	r3,16
 8001994:	10c00185 	stb	r3,6(r2)
      }
      return (0);
 8001998:	0005883a 	mov	r2,zero
    }
  } // while( 1 )
}
 800199c:	e037883a 	mov	sp,fp
 80019a0:	dfc00117 	ldw	ra,4(sp)
 80019a4:	df000017 	ldw	fp,0(sp)
 80019a8:	dec00204 	addi	sp,sp,8
 80019ac:	f800283a 	ret

080019b0 <USB_init>:
/* initialization of USB data structures */
void USB_init(void) {
 80019b0:	defffe04 	addi	sp,sp,-8
 80019b4:	df000115 	stw	fp,4(sp)
 80019b8:	df000104 	addi	fp,sp,4
  BYTE i;
  for (i = 0; i < (USB_NUMDEVICES + 1); i++) {
 80019bc:	e03fff05 	stb	zero,-4(fp)
 80019c0:	00001006 	br	8001a04 <USB_init+0x54>
    devtable[i].epinfo = NULL; // clear device table
 80019c4:	e0ffff03 	ldbu	r3,-4(fp)
 80019c8:	008200b4 	movhi	r2,2050
 80019cc:	10ba5e04 	addi	r2,r2,-5768
 80019d0:	180690fa 	slli	r3,r3,3
 80019d4:	10c5883a 	add	r2,r2,r3
 80019d8:	10000015 	stw	zero,0(r2)
    devtable[i].devclass = 0;
 80019dc:	e0ffff03 	ldbu	r3,-4(fp)
 80019e0:	008200b4 	movhi	r2,2050
 80019e4:	10ba5e04 	addi	r2,r2,-5768
 80019e8:	180690fa 	slli	r3,r3,3
 80019ec:	10c5883a 	add	r2,r2,r3
 80019f0:	10800104 	addi	r2,r2,4
 80019f4:	10000005 	stb	zero,0(r2)
  } // while( 1 )
}
/* initialization of USB data structures */
void USB_init(void) {
  BYTE i;
  for (i = 0; i < (USB_NUMDEVICES + 1); i++) {
 80019f8:	e0bfff03 	ldbu	r2,-4(fp)
 80019fc:	10800044 	addi	r2,r2,1
 8001a00:	e0bfff05 	stb	r2,-4(fp)
 8001a04:	e0bfff03 	ldbu	r2,-4(fp)
 8001a08:	10800270 	cmpltui	r2,r2,9
 8001a0c:	103fed1e 	bne	r2,zero,80019c4 <USB_init+0x14>
    devtable[i].epinfo = NULL; // clear device table
    devtable[i].devclass = 0;
  }
  devtable[0].epinfo = &dev0ep; // set single ep for uninitialized device
 8001a10:	008200b4 	movhi	r2,2050
 8001a14:	10ba5e04 	addi	r2,r2,-5768
 8001a18:	d0e70804 	addi	r3,gp,-25568
 8001a1c:	10c00015 	stw	r3,0(r2)
  dev0ep.MaxPktSize = 0;
 8001a20:	d027088d 	sth	zero,-25566(gp)
  dev0ep.sndToggle = bmSNDTOG0; // set DATA0/1 toggles to 0
 8001a24:	00801004 	movi	r2,64
 8001a28:	d0a70945 	stb	r2,-25563(gp)
  dev0ep.rcvToggle = bmRCVTOG0;
 8001a2c:	00800404 	movi	r2,16
 8001a30:	d0a70985 	stb	r2,-25562(gp)
}
 8001a34:	0001883a 	nop
 8001a38:	e037883a 	mov	sp,fp
 8001a3c:	df000017 	ldw	fp,0(sp)
 8001a40:	dec00104 	addi	sp,sp,4
 8001a44:	f800283a 	ret

08001a48 <USB_Task>:
/* USB state machine. Connect/disconnect, enumeration, initialization   */
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task(void) {
 8001a48:	deffb204 	addi	sp,sp,-312
 8001a4c:	dfc04d15 	stw	ra,308(sp)
 8001a50:	df004c15 	stw	fp,304(sp)
 8001a54:	dc004b15 	stw	r16,300(sp)
 8001a58:	df004c04 	addi	fp,sp,304
  USB_DEVICE_DESCRIPTOR buf;

  BYTE rcode, tmpdata;
  BYTE i;

  switch (usb_task_state & USB_STATE_MASK) {
 8001a5c:	d0a00203 	ldbu	r2,-32760(gp)
 8001a60:	10803fcc 	andi	r2,r2,255
 8001a64:	10803c0c 	andi	r2,r2,240
 8001a68:	10c00820 	cmpeqi	r3,r2,32
 8001a6c:	1801121e 	bne	r3,zero,8001eb8 <USB_Task+0x470>
 8001a70:	10c00848 	cmpgei	r3,r2,33
 8001a74:	1800041e 	bne	r3,zero,8001a88 <USB_Task+0x40>
 8001a78:	10000a26 	beq	r2,zero,8001aa4 <USB_Task+0x5c>
 8001a7c:	10800420 	cmpeqi	r2,r2,16
 8001a80:	10001b1e 	bne	r2,zero,8001af0 <USB_Task+0xa8>
  case (USB_STATE_ERROR):
    // vTaskDelay( LED_RATE ); //stay here if error
    break; //( USB_STATE_ERROR )
  default:
    // Should never get here
    break;
 8001a84:	00017a06 	br	8002070 <USB_Task+0x628>
  USB_DEVICE_DESCRIPTOR buf;

  BYTE rcode, tmpdata;
  BYTE i;

  switch (usb_task_state & USB_STATE_MASK) {
 8001a88:	10c01020 	cmpeqi	r3,r2,64
 8001a8c:	18016f1e 	bne	r3,zero,800204c <USB_Task+0x604>
 8001a90:	10c03fe0 	cmpeqi	r3,r2,255
 8001a94:	18016f1e 	bne	r3,zero,8002054 <USB_Task+0x60c>
 8001a98:	10800c20 	cmpeqi	r2,r2,48
 8001a9c:	1001441e 	bne	r2,zero,8001fb0 <USB_Task+0x568>
  case (USB_STATE_ERROR):
    // vTaskDelay( LED_RATE ); //stay here if error
    break; //( USB_STATE_ERROR )
  default:
    // Should never get here
    break;
 8001aa0:	00017306 	br	8002070 <USB_Task+0x628>

  switch (usb_task_state & USB_STATE_MASK) {
  /* Detached state - when nothing is connected to ( or just disconnected from)
   * USB bus   */
  case (USB_STATE_DETACHED):
    switch (usb_task_state) {
 8001aa4:	d0a00203 	ldbu	r2,-32760(gp)
 8001aa8:	10803fcc 	andi	r2,r2,255
 8001aac:	10c000e0 	cmpeqi	r3,r2,3
 8001ab0:	1800091e 	bne	r3,zero,8001ad8 <USB_Task+0x90>
 8001ab4:	10c00120 	cmpeqi	r3,r2,4
 8001ab8:	18000b1e 	bne	r3,zero,8001ae8 <USB_Task+0xa0>
 8001abc:	10800060 	cmpeqi	r2,r2,1
 8001ac0:	1000011e 	bne	r2,zero,8001ac8 <USB_Task+0x80>
      break;
    case (USB_DETACHED_SUBSTATE_ILLEGAL):
      /* don't know what to do yet */
      break;
    }                        // switch( usb_task_state )
    break;                   //( USB_STATE_DETACHED ):
 8001ac4:	00016a06 	br	8002070 <USB_Task+0x628>
   * USB bus   */
  case (USB_STATE_DETACHED):
    switch (usb_task_state) {
    case (USB_DETACHED_SUBSTATE_INITIALIZE):
      /* cleanup device data structures */
      USB_init();
 8001ac8:	80019b00 	call	80019b0 <USB_init>
      usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 8001acc:	008000c4 	movi	r2,3
 8001ad0:	d0a00205 	stb	r2,-32760(gp)
      break;
 8001ad4:	00000506 	br	8001aec <USB_Task+0xa4>
    case (USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE):
      /* Do nothing */
      MAXreg_wr(rHCTL, bmSAMPLEBUS);
 8001ad8:	01400104 	movi	r5,4
 8001adc:	01003a04 	movi	r4,232
 8001ae0:	8000c980 	call	8000c98 <MAXreg_wr>
      break;
 8001ae4:	00000106 	br	8001aec <USB_Task+0xa4>
    case (USB_DETACHED_SUBSTATE_ILLEGAL):
      /* don't know what to do yet */
      break;
 8001ae8:	0001883a 	nop
    }                        // switch( usb_task_state )
    break;                   //( USB_STATE_DETACHED ):
 8001aec:	00016006 	br	8002070 <USB_Task+0x628>
                             /**/
  case (USB_STATE_ATTACHED): // prepare for enumeration
    switch (usb_task_state) {
 8001af0:	d0a00203 	ldbu	r2,-32760(gp)
 8001af4:	10803fcc 	andi	r2,r2,255
 8001af8:	10bffc04 	addi	r2,r2,-16
 8001afc:	10c001a8 	cmpgeui	r3,r2,6
 8001b00:	1801561e 	bne	r3,zero,800205c <USB_Task+0x614>
 8001b04:	100690ba 	slli	r3,r2,2
 8001b08:	00820034 	movhi	r2,2048
 8001b0c:	1086c704 	addi	r2,r2,6940
 8001b10:	1885883a 	add	r2,r3,r2
 8001b14:	10800017 	ldw	r2,0(r2)
 8001b18:	1000683a 	jmp	r2
 8001b1c:	08001b34 	orhi	zero,at,108
 8001b20:	08001b6c 	andhi	zero,at,109
 8001b24:	08001ba8 	cmpgeui	zero,at,110
 8001b28:	08001bcc 	andi	zero,at,111
 8001b2c:	08001c0c 	andi	zero,at,112
 8001b30:	08001c20 	cmpeqi	zero,at,112
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8001b34:	d0a74817 	ldw	r2,-25312(gp)
    case (USB_STATE_ATTACHED):
      usb_delay = (alt_nticks() * 1000) / alt_ticks_per_second() +
 8001b38:	0140fa04 	movi	r5,1000
 8001b3c:	1009883a 	mov	r4,r2
 8001b40:	800a1780 	call	800a178 <__mulsi3>
 8001b44:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8001b48:	d0a74717 	ldw	r2,-25316(gp)
 8001b4c:	100b883a 	mov	r5,r2
 8001b50:	1809883a 	mov	r4,r3
 8001b54:	800a0bc0 	call	800a0bc <__udivsi3>
 8001b58:	10803204 	addi	r2,r2,200
 8001b5c:	d0a70b15 	stw	r2,-25556(gp)
                  200; // initial settle 200ms
      usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 8001b60:	00800444 	movi	r2,17
 8001b64:	d0a00205 	stb	r2,-32760(gp)
      break;                             // case( USB_STATE_ATTACHED )
 8001b68:	0000d206 	br	8001eb4 <USB_Task+0x46c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8001b6c:	d0a74817 	ldw	r2,-25312(gp)
    case (USB_ATTACHED_SUBSTATE_SETTLE): // waiting for settle timer to expire
      if ((alt_nticks() * 1000) / alt_ticks_per_second() > usb_delay) {
 8001b70:	0140fa04 	movi	r5,1000
 8001b74:	1009883a 	mov	r4,r2
 8001b78:	800a1780 	call	800a178 <__mulsi3>
 8001b7c:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8001b80:	d0a74717 	ldw	r2,-25316(gp)
 8001b84:	100b883a 	mov	r5,r2
 8001b88:	1809883a 	mov	r4,r3
 8001b8c:	800a0bc0 	call	800a0bc <__udivsi3>
 8001b90:	1007883a 	mov	r3,r2
 8001b94:	d0a70b17 	ldw	r2,-25556(gp)
 8001b98:	10c0c32e 	bgeu	r2,r3,8001ea8 <USB_Task+0x460>
        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 8001b9c:	00800484 	movi	r2,18
 8001ba0:	d0a00205 	stb	r2,-32760(gp)
      }
      break; // case( USB_ATTACHED_SUBSTATE_SETTLE )
 8001ba4:	0000c006 	br	8001ea8 <USB_Task+0x460>
    case (USB_ATTACHED_SUBSTATE_RESET_DEVICE):
      MAXreg_wr(rHIRQ, bmBUSEVENTIRQ); // clear bus event IRQ
 8001ba8:	01400044 	movi	r5,1
 8001bac:	01003204 	movi	r4,200
 8001bb0:	8000c980 	call	8000c98 <MAXreg_wr>
      MAXreg_wr(rHCTL, bmBUSRST);      // issue bus reset
 8001bb4:	01400044 	movi	r5,1
 8001bb8:	01003a04 	movi	r4,232
 8001bbc:	8000c980 	call	8000c98 <MAXreg_wr>
      usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 8001bc0:	008004c4 	movi	r2,19
 8001bc4:	d0a00205 	stb	r2,-32760(gp)
      break; // case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
 8001bc8:	0000ba06 	br	8001eb4 <USB_Task+0x46c>
    case (USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE): // wait for bus reset and
                                                      // first SOF
      if ((MAXreg_rd(rHCTL) & bmBUSRST) == 0) {
 8001bcc:	01003a04 	movi	r4,232
 8001bd0:	8000e940 	call	8000e94 <MAXreg_rd>
 8001bd4:	10803fcc 	andi	r2,r2,255
 8001bd8:	1080004c 	andi	r2,r2,1
 8001bdc:	1000b41e 	bne	r2,zero,8001eb0 <USB_Task+0x468>
        tmpdata = MAXreg_rd(rMODE) | bmSOFKAENAB; // start SOF generation
 8001be0:	01003604 	movi	r4,216
 8001be4:	8000e940 	call	8000e94 <MAXreg_rd>
 8001be8:	10800214 	ori	r2,r2,8
 8001bec:	e0bfb945 	stb	r2,-283(fp)
        MAXreg_wr(rMODE, tmpdata);
 8001bf0:	e0bfb943 	ldbu	r2,-283(fp)
 8001bf4:	100b883a 	mov	r5,r2
 8001bf8:	01003604 	movi	r4,216
 8001bfc:	8000c980 	call	8000c98 <MAXreg_wr>
        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 8001c00:	00800504 	movi	r2,20
 8001c04:	d0a00205 	stb	r2,-32760(gp)
      }
      break; // case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 8001c08:	0000a906 	br	8001eb0 <USB_Task+0x468>
    case (USB_ATTACHED_SUBSTATE_WAIT_SOF):
      if (MAXreg_rd(rHIRQ) |
 8001c0c:	01003204 	movi	r4,200
 8001c10:	8000e940 	call	8000e94 <MAXreg_rd>
          bmFRAMEIRQ) { // when first SOF received we can continue
        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
 8001c14:	00800544 	movi	r2,21
 8001c18:	d0a00205 	stb	r2,-32760(gp)
      }
      break; // case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
 8001c1c:	0000a506 	br	8001eb4 <USB_Task+0x46c>
    case (
        USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE): // send request for
                                                           // first 8 bytes of
                                                           // device descriptor
      devtable[0].epinfo->MaxPktSize =
 8001c20:	008200b4 	movhi	r2,2050
 8001c24:	10ba5e04 	addi	r2,r2,-5768
 8001c28:	10800017 	ldw	r2,0(r2)
 8001c2c:	00c00204 	movi	r3,8
 8001c30:	10c0008d 	sth	r3,2(r2)
          0x0008; // fill max packet size with minimum allowed
      rcode =
 8001c34:	e0bfba04 	addi	r2,fp,-280
 8001c38:	d8800415 	stw	r2,16(sp)
 8001c3c:	00800204 	movi	r2,8
 8001c40:	d8800315 	stw	r2,12(sp)
 8001c44:	d8000215 	stw	zero,8(sp)
 8001c48:	00800044 	movi	r2,1
 8001c4c:	d8800115 	stw	r2,4(sp)
 8001c50:	d8000015 	stw	zero,0(sp)
 8001c54:	01c00184 	movi	r7,6
 8001c58:	01802004 	movi	r6,128
 8001c5c:	000b883a 	mov	r5,zero
 8001c60:	0009883a 	mov	r4,zero
 8001c64:	80013fc0 	call	80013fc <XferCtrlReq>
 8001c68:	e0bfb985 	stb	r2,-282(fp)
          XferGetDevDescr(0, 0, 8, (BYTE *)&buf); // get device descriptor size
      if (rcode == 0) {
 8001c6c:	e0bfb983 	ldbu	r2,-282(fp)
 8001c70:	1000861e 	bne	r2,zero,8001e8c <USB_Task+0x444>
        devtable[0].epinfo->MaxPktSize = buf.bMaxPacketSize0;
 8001c74:	008200b4 	movhi	r2,2050
 8001c78:	10ba5e04 	addi	r2,r2,-5768
 8001c7c:	10800017 	ldw	r2,0(r2)
 8001c80:	e0ffbbc3 	ldbu	r3,-273(fp)
 8001c84:	18c03fcc 	andi	r3,r3,255
 8001c88:	10c0008d 	sth	r3,2(r2)

        rcode = XferGetDevDescr(0, 0, buf.bLength,
 8001c8c:	e0bfba03 	ldbu	r2,-280(fp)
 8001c90:	10803fcc 	andi	r2,r2,255
 8001c94:	e0ffba04 	addi	r3,fp,-280
 8001c98:	d8c00415 	stw	r3,16(sp)
 8001c9c:	d8800315 	stw	r2,12(sp)
 8001ca0:	d8000215 	stw	zero,8(sp)
 8001ca4:	00800044 	movi	r2,1
 8001ca8:	d8800115 	stw	r2,4(sp)
 8001cac:	d8000015 	stw	zero,0(sp)
 8001cb0:	01c00184 	movi	r7,6
 8001cb4:	01802004 	movi	r6,128
 8001cb8:	000b883a 	mov	r5,zero
 8001cbc:	0009883a 	mov	r4,zero
 8001cc0:	80013fc0 	call	80013fc <XferCtrlReq>
 8001cc4:	e0bfb985 	stb	r2,-282(fp)
                                (BYTE *)&buf); // get full descriptor
        // pull the string descriptor for the product if it exists
        // hackish, store this somewhere
        if (buf.iManufacturer != 0) {
 8001cc8:	e0bfbd83 	ldbu	r2,-266(fp)
 8001ccc:	10803fcc 	andi	r2,r2,255
 8001cd0:	10003426 	beq	r2,zero,8001da4 <USB_Task+0x35c>
          USB_STRING_DESCRIPTOR strDesc;
          rcode = XferGetStrDescr(0, 0, 2, buf.iManufacturer, LANG_EN_US,
 8001cd4:	e0bfbd83 	ldbu	r2,-266(fp)
 8001cd8:	10803fcc 	andi	r2,r2,255
 8001cdc:	e0ffbe84 	addi	r3,fp,-262
 8001ce0:	d8c00415 	stw	r3,16(sp)
 8001ce4:	00c00084 	movi	r3,2
 8001ce8:	d8c00315 	stw	r3,12(sp)
 8001cec:	00c10244 	movi	r3,1033
 8001cf0:	d8c00215 	stw	r3,8(sp)
 8001cf4:	00c000c4 	movi	r3,3
 8001cf8:	d8c00115 	stw	r3,4(sp)
 8001cfc:	d8800015 	stw	r2,0(sp)
 8001d00:	01c00184 	movi	r7,6
 8001d04:	01802004 	movi	r6,128
 8001d08:	000b883a 	mov	r5,zero
 8001d0c:	0009883a 	mov	r4,zero
 8001d10:	80013fc0 	call	80013fc <XferCtrlReq>
 8001d14:	e0bfb985 	stb	r2,-282(fp)
                                  (BYTE *)&strDesc);
          rcode = XferGetStrDescr(0, 0, strDesc.bLength, buf.iManufacturer,
 8001d18:	e0bfbd83 	ldbu	r2,-266(fp)
 8001d1c:	10803fcc 	andi	r2,r2,255
 8001d20:	e0ffbe83 	ldbu	r3,-262(fp)
 8001d24:	18c03fcc 	andi	r3,r3,255
 8001d28:	e13fbe84 	addi	r4,fp,-262
 8001d2c:	d9000415 	stw	r4,16(sp)
 8001d30:	d8c00315 	stw	r3,12(sp)
 8001d34:	00c10244 	movi	r3,1033
 8001d38:	d8c00215 	stw	r3,8(sp)
 8001d3c:	00c000c4 	movi	r3,3
 8001d40:	d8c00115 	stw	r3,4(sp)
 8001d44:	d8800015 	stw	r2,0(sp)
 8001d48:	01c00184 	movi	r7,6
 8001d4c:	01802004 	movi	r6,128
 8001d50:	000b883a 	mov	r5,zero
 8001d54:	0009883a 	mov	r4,zero
 8001d58:	80013fc0 	call	80013fc <XferCtrlReq>
 8001d5c:	e0bfb985 	stb	r2,-282(fp)
                                  LANG_EN_US, (BYTE *)&strDesc);
          printf("Mfgr string(%i): %s\n", buf.iManufacturer,
 8001d60:	e0bfbd83 	ldbu	r2,-266(fp)
 8001d64:	14003fcc 	andi	r16,r2,255
                 ConvUTF8ToStr(strDesc.bString, (strDesc.bLength >> 1) - 1));
 8001d68:	e0bfbe83 	ldbu	r2,-262(fp)
          USB_STRING_DESCRIPTOR strDesc;
          rcode = XferGetStrDescr(0, 0, 2, buf.iManufacturer, LANG_EN_US,
                                  (BYTE *)&strDesc);
          rcode = XferGetStrDescr(0, 0, strDesc.bLength, buf.iManufacturer,
                                  LANG_EN_US, (BYTE *)&strDesc);
          printf("Mfgr string(%i): %s\n", buf.iManufacturer,
 8001d6c:	10803fcc 	andi	r2,r2,255
 8001d70:	1004d07a 	srli	r2,r2,1
 8001d74:	10bfffc4 	addi	r2,r2,-1
 8001d78:	10c03fcc 	andi	r3,r2,255
 8001d7c:	e0bfbe84 	addi	r2,fp,-262
 8001d80:	10800084 	addi	r2,r2,2
 8001d84:	180b883a 	mov	r5,r3
 8001d88:	1009883a 	mov	r4,r2
 8001d8c:	80022100 	call	8002210 <ConvUTF8ToStr>
 8001d90:	100d883a 	mov	r6,r2
 8001d94:	800b883a 	mov	r5,r16
 8001d98:	010200b4 	movhi	r4,2050
 8001d9c:	21297104 	addi	r4,r4,-23100
 8001da0:	800ada80 	call	800ada8 <printf>
                 ConvUTF8ToStr(strDesc.bString, (strDesc.bLength >> 1) - 1));
        }
        if (buf.iProduct != 0) {
 8001da4:	e0bfbdc3 	ldbu	r2,-265(fp)
 8001da8:	10803fcc 	andi	r2,r2,255
 8001dac:	10003426 	beq	r2,zero,8001e80 <USB_Task+0x438>
          USB_STRING_DESCRIPTOR strDesc;
          rcode = XferGetStrDescr(0, 0, 2, buf.iProduct, LANG_EN_US,
 8001db0:	e0bfbdc3 	ldbu	r2,-265(fp)
 8001db4:	10803fcc 	andi	r2,r2,255
 8001db8:	e0ffbe84 	addi	r3,fp,-262
 8001dbc:	d8c00415 	stw	r3,16(sp)
 8001dc0:	00c00084 	movi	r3,2
 8001dc4:	d8c00315 	stw	r3,12(sp)
 8001dc8:	00c10244 	movi	r3,1033
 8001dcc:	d8c00215 	stw	r3,8(sp)
 8001dd0:	00c000c4 	movi	r3,3
 8001dd4:	d8c00115 	stw	r3,4(sp)
 8001dd8:	d8800015 	stw	r2,0(sp)
 8001ddc:	01c00184 	movi	r7,6
 8001de0:	01802004 	movi	r6,128
 8001de4:	000b883a 	mov	r5,zero
 8001de8:	0009883a 	mov	r4,zero
 8001dec:	80013fc0 	call	80013fc <XferCtrlReq>
 8001df0:	e0bfb985 	stb	r2,-282(fp)
                                  (BYTE *)&strDesc);
          rcode = XferGetStrDescr(0, 0, strDesc.bLength, buf.iProduct,
 8001df4:	e0bfbdc3 	ldbu	r2,-265(fp)
 8001df8:	10803fcc 	andi	r2,r2,255
 8001dfc:	e0ffbe83 	ldbu	r3,-262(fp)
 8001e00:	18c03fcc 	andi	r3,r3,255
 8001e04:	e13fbe84 	addi	r4,fp,-262
 8001e08:	d9000415 	stw	r4,16(sp)
 8001e0c:	d8c00315 	stw	r3,12(sp)
 8001e10:	00c10244 	movi	r3,1033
 8001e14:	d8c00215 	stw	r3,8(sp)
 8001e18:	00c000c4 	movi	r3,3
 8001e1c:	d8c00115 	stw	r3,4(sp)
 8001e20:	d8800015 	stw	r2,0(sp)
 8001e24:	01c00184 	movi	r7,6
 8001e28:	01802004 	movi	r6,128
 8001e2c:	000b883a 	mov	r5,zero
 8001e30:	0009883a 	mov	r4,zero
 8001e34:	80013fc0 	call	80013fc <XferCtrlReq>
 8001e38:	e0bfb985 	stb	r2,-282(fp)
                                  LANG_EN_US, (BYTE *)&strDesc);
          printf("Product string(%i): %s\n", buf.iProduct,
 8001e3c:	e0bfbdc3 	ldbu	r2,-265(fp)
 8001e40:	14003fcc 	andi	r16,r2,255
                 ConvUTF8ToStr(strDesc.bString, (strDesc.bLength >> 1) - 1));
 8001e44:	e0bfbe83 	ldbu	r2,-262(fp)
          USB_STRING_DESCRIPTOR strDesc;
          rcode = XferGetStrDescr(0, 0, 2, buf.iProduct, LANG_EN_US,
                                  (BYTE *)&strDesc);
          rcode = XferGetStrDescr(0, 0, strDesc.bLength, buf.iProduct,
                                  LANG_EN_US, (BYTE *)&strDesc);
          printf("Product string(%i): %s\n", buf.iProduct,
 8001e48:	10803fcc 	andi	r2,r2,255
 8001e4c:	1004d07a 	srli	r2,r2,1
 8001e50:	10bfffc4 	addi	r2,r2,-1
 8001e54:	10c03fcc 	andi	r3,r2,255
 8001e58:	e0bfbe84 	addi	r2,fp,-262
 8001e5c:	10800084 	addi	r2,r2,2
 8001e60:	180b883a 	mov	r5,r3
 8001e64:	1009883a 	mov	r4,r2
 8001e68:	80022100 	call	8002210 <ConvUTF8ToStr>
 8001e6c:	100d883a 	mov	r6,r2
 8001e70:	800b883a 	mov	r5,r16
 8001e74:	010200b4 	movhi	r4,2050
 8001e78:	21297704 	addi	r4,r4,-23076
 8001e7c:	800ada80 	call	800ada8 <printf>
                 ConvUTF8ToStr(strDesc.bString, (strDesc.bLength >> 1) - 1));
        }
        usb_task_state = USB_STATE_ADDRESSING;
 8001e80:	00800804 	movi	r2,32
 8001e84:	d0a00205 	stb	r2,-32760(gp)
      } else {
        usb_error = rcode;
        last_usb_task_state = usb_task_state;
        usb_task_state = USB_STATE_ERROR;
      }
      break; // case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 8001e88:	00000a06 	br	8001eb4 <USB_Task+0x46c>
                 ConvUTF8ToStr(strDesc.bString, (strDesc.bLength >> 1) - 1));
        }
        usb_task_state = USB_STATE_ADDRESSING;

      } else {
        usb_error = rcode;
 8001e8c:	e0bfb983 	ldbu	r2,-282(fp)
 8001e90:	d0a70c45 	stb	r2,-25551(gp)
        last_usb_task_state = usb_task_state;
 8001e94:	d0a00203 	ldbu	r2,-32760(gp)
 8001e98:	d0a70a05 	stb	r2,-25560(gp)
        usb_task_state = USB_STATE_ERROR;
 8001e9c:	00bfffc4 	movi	r2,-1
 8001ea0:	d0a00205 	stb	r2,-32760(gp)
      }
      break; // case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 8001ea4:	00000306 	br	8001eb4 <USB_Task+0x46c>
      break;                             // case( USB_STATE_ATTACHED )
    case (USB_ATTACHED_SUBSTATE_SETTLE): // waiting for settle timer to expire
      if ((alt_nticks() * 1000) / alt_ticks_per_second() > usb_delay) {
        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
      }
      break; // case( USB_ATTACHED_SUBSTATE_SETTLE )
 8001ea8:	0001883a 	nop
 8001eac:	00006b06 	br	800205c <USB_Task+0x614>
      if ((MAXreg_rd(rHCTL) & bmBUSRST) == 0) {
        tmpdata = MAXreg_rd(rMODE) | bmSOFKAENAB; // start SOF generation
        MAXreg_wr(rMODE, tmpdata);
        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
      }
      break; // case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 8001eb0:	0001883a 	nop
        last_usb_task_state = usb_task_state;
        usb_task_state = USB_STATE_ERROR;
      }
      break; // case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
    }        // switch( usb_task_state )
    break;   // case ( USB_STATE_ATTACHED )
 8001eb4:	00006906 	br	800205c <USB_Task+0x614>
  case (USB_STATE_ADDRESSING): // give device an address
    for (i = 1; i < USB_NUMDEVICES; i++) {
 8001eb8:	00800044 	movi	r2,1
 8001ebc:	e0bfb905 	stb	r2,-284(fp)
 8001ec0:	00002d06 	br	8001f78 <USB_Task+0x530>
      if (devtable[i].epinfo == NULL) {
 8001ec4:	e0ffb903 	ldbu	r3,-284(fp)
 8001ec8:	008200b4 	movhi	r2,2050
 8001ecc:	10ba5e04 	addi	r2,r2,-5768
 8001ed0:	180690fa 	slli	r3,r3,3
 8001ed4:	10c5883a 	add	r2,r2,r3
 8001ed8:	10800017 	ldw	r2,0(r2)
 8001edc:	1000231e 	bne	r2,zero,8001f6c <USB_Task+0x524>
        devtable[i].epinfo = devtable[0].epinfo; // set correct MaxPktSize
 8001ee0:	e13fb903 	ldbu	r4,-284(fp)
 8001ee4:	008200b4 	movhi	r2,2050
 8001ee8:	10ba5e04 	addi	r2,r2,-5768
 8001eec:	10c00017 	ldw	r3,0(r2)
 8001ef0:	008200b4 	movhi	r2,2050
 8001ef4:	10ba5e04 	addi	r2,r2,-5768
 8001ef8:	200890fa 	slli	r4,r4,3
 8001efc:	1105883a 	add	r2,r2,r4
 8001f00:	10c00015 	stw	r3,0(r2)
        // devtable[ i ].epinfo->MaxPktSize = devtable[ 0 ].epinfo->MaxPktSize;
        // //copy uninitialized device record to have correct MaxPktSize
        rcode = XferSetAddr(0, 0, i);
 8001f04:	e0bfb903 	ldbu	r2,-284(fp)
 8001f08:	d8000415 	stw	zero,16(sp)
 8001f0c:	d8000315 	stw	zero,12(sp)
 8001f10:	d8000215 	stw	zero,8(sp)
 8001f14:	d8000115 	stw	zero,4(sp)
 8001f18:	d8800015 	stw	r2,0(sp)
 8001f1c:	01c00144 	movi	r7,5
 8001f20:	000d883a 	mov	r6,zero
 8001f24:	000b883a 	mov	r5,zero
 8001f28:	0009883a 	mov	r4,zero
 8001f2c:	80013fc0 	call	80013fc <XferCtrlReq>
 8001f30:	e0bfb985 	stb	r2,-282(fp)
        if (rcode == 0) {
 8001f34:	e0bfb983 	ldbu	r2,-282(fp)
 8001f38:	1000051e 	bne	r2,zero,8001f50 <USB_Task+0x508>
          tmp_addr = i;
 8001f3c:	e0bfb903 	ldbu	r2,-284(fp)
 8001f40:	d0a70c05 	stb	r2,-25552(gp)
          usb_task_state = USB_STATE_CONFIGURING;
 8001f44:	00800c04 	movi	r2,48
 8001f48:	d0a00205 	stb	r2,-32760(gp)
        } else {
          usb_error = rcode; // set address error
          last_usb_task_state = usb_task_state;
          usb_task_state = USB_STATE_ERROR;
        }
        break; // break if address assigned or error occurred during address
 8001f4c:	00000d06 	br	8001f84 <USB_Task+0x53c>
        rcode = XferSetAddr(0, 0, i);
        if (rcode == 0) {
          tmp_addr = i;
          usb_task_state = USB_STATE_CONFIGURING;
        } else {
          usb_error = rcode; // set address error
 8001f50:	e0bfb983 	ldbu	r2,-282(fp)
 8001f54:	d0a70c45 	stb	r2,-25551(gp)
          last_usb_task_state = usb_task_state;
 8001f58:	d0a00203 	ldbu	r2,-32760(gp)
 8001f5c:	d0a70a05 	stb	r2,-25560(gp)
          usb_task_state = USB_STATE_ERROR;
 8001f60:	00bfffc4 	movi	r2,-1
 8001f64:	d0a00205 	stb	r2,-32760(gp)
        }
        break; // break if address assigned or error occurred during address
 8001f68:	00000606 	br	8001f84 <USB_Task+0x53c>
      }
      break; // case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
    }        // switch( usb_task_state )
    break;   // case ( USB_STATE_ATTACHED )
  case (USB_STATE_ADDRESSING): // give device an address
    for (i = 1; i < USB_NUMDEVICES; i++) {
 8001f6c:	e0bfb903 	ldbu	r2,-284(fp)
 8001f70:	10800044 	addi	r2,r2,1
 8001f74:	e0bfb905 	stb	r2,-284(fp)
 8001f78:	e0bfb903 	ldbu	r2,-284(fp)
 8001f7c:	10800230 	cmpltui	r2,r2,8
 8001f80:	103fd01e 	bne	r2,zero,8001ec4 <USB_Task+0x47c>
        }
        break; // break if address assigned or error occurred during address
               // assignment attempt
      }
    }
    if (usb_task_state == USB_STATE_ADDRESSING) {
 8001f84:	d0a00203 	ldbu	r2,-32760(gp)
 8001f88:	10803fcc 	andi	r2,r2,255
 8001f8c:	10800818 	cmpnei	r2,r2,32
 8001f90:	1000341e 	bne	r2,zero,8002064 <USB_Task+0x61c>
      usb_error = 0xfe;
 8001f94:	00bfff84 	movi	r2,-2
 8001f98:	d0a70c45 	stb	r2,-25551(gp)
      last_usb_task_state = usb_task_state;
 8001f9c:	d0a00203 	ldbu	r2,-32760(gp)
 8001fa0:	d0a70a05 	stb	r2,-25560(gp)
      usb_task_state = USB_STATE_ERROR;
 8001fa4:	00bfffc4 	movi	r2,-1
 8001fa8:	d0a00205 	stb	r2,-32760(gp)
    }
    break; // case ( USB_STATE_ADDRESSING )
 8001fac:	00002d06 	br	8002064 <USB_Task+0x61c>
  case (
      USB_STATE_CONFIGURING): // checking for driver
                              // run device class probes until one returns TRUE
    for (i = 0; i < USB_NUMCLASSES; i++) {
 8001fb0:	e03fb905 	stb	zero,-284(fp)
 8001fb4:	00001706 	br	8002014 <USB_Task+0x5cc>
      rcode = ClientDriverTable[i].Initialize(tmp_addr, 0);
 8001fb8:	e0bfb903 	ldbu	r2,-284(fp)
 8001fbc:	040200b4 	movhi	r16,2050
 8001fc0:	842b5204 	addi	r16,r16,-21176
 8001fc4:	01400304 	movi	r5,12
 8001fc8:	1009883a 	mov	r4,r2
 8001fcc:	800a1780 	call	800a178 <__mulsi3>
 8001fd0:	8085883a 	add	r2,r16,r2
 8001fd4:	10800017 	ldw	r2,0(r2)
 8001fd8:	d0e70c03 	ldbu	r3,-25552(gp)
 8001fdc:	18c03fcc 	andi	r3,r3,255
 8001fe0:	000b883a 	mov	r5,zero
 8001fe4:	1809883a 	mov	r4,r3
 8001fe8:	103ee83a 	callr	r2
 8001fec:	e0bfb985 	stb	r2,-282(fp)
      if (rcode == TRUE) {
 8001ff0:	e0bfb983 	ldbu	r2,-282(fp)
 8001ff4:	10800058 	cmpnei	r2,r2,1
 8001ff8:	1000031e 	bne	r2,zero,8002008 <USB_Task+0x5c0>
        usb_task_state = USB_STATE_RUNNING;
 8001ffc:	00801004 	movi	r2,64
 8002000:	d0a00205 	stb	r2,-32760(gp)
        break;
 8002004:	00000606 	br	8002020 <USB_Task+0x5d8>
    }
    break; // case ( USB_STATE_ADDRESSING )
  case (
      USB_STATE_CONFIGURING): // checking for driver
                              // run device class probes until one returns TRUE
    for (i = 0; i < USB_NUMCLASSES; i++) {
 8002008:	e0bfb903 	ldbu	r2,-284(fp)
 800200c:	10800044 	addi	r2,r2,1
 8002010:	e0bfb905 	stb	r2,-284(fp)
 8002014:	e0bfb903 	ldbu	r2,-284(fp)
 8002018:	10800130 	cmpltui	r2,r2,4
 800201c:	103fe61e 	bne	r2,zero,8001fb8 <USB_Task+0x570>
      if (rcode == TRUE) {
        usb_task_state = USB_STATE_RUNNING;
        break;
      }
    }
    if (usb_task_state == USB_STATE_CONFIGURING) {
 8002020:	d0a00203 	ldbu	r2,-32760(gp)
 8002024:	10803fcc 	andi	r2,r2,255
 8002028:	10800c18 	cmpnei	r2,r2,48
 800202c:	10000f1e 	bne	r2,zero,800206c <USB_Task+0x624>
      usb_error = 0xfd;
 8002030:	00bfff44 	movi	r2,-3
 8002034:	d0a70c45 	stb	r2,-25551(gp)
      last_usb_task_state = usb_task_state;
 8002038:	d0a00203 	ldbu	r2,-32760(gp)
 800203c:	d0a70a05 	stb	r2,-25560(gp)
      usb_task_state = USB_STATE_ERROR;
 8002040:	00bfffc4 	movi	r2,-1
 8002044:	d0a00205 	stb	r2,-32760(gp)
    }
    break; //( USB_STATE_CONFIGURING )
 8002048:	00000806 	br	800206c <USB_Task+0x624>
  case (USB_STATE_RUNNING):
    // vTaskDelay( LED_RATE );
    break; //( USB_STATE_RUNNING )
 800204c:	0001883a 	nop
 8002050:	00000706 	br	8002070 <USB_Task+0x628>
  case (USB_STATE_ERROR):
    // vTaskDelay( LED_RATE ); //stay here if error
    break; //( USB_STATE_ERROR )
 8002054:	0001883a 	nop
 8002058:	00000506 	br	8002070 <USB_Task+0x628>
        last_usb_task_state = usb_task_state;
        usb_task_state = USB_STATE_ERROR;
      }
      break; // case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
    }        // switch( usb_task_state )
    break;   // case ( USB_STATE_ATTACHED )
 800205c:	0001883a 	nop
 8002060:	00000306 	br	8002070 <USB_Task+0x628>
    if (usb_task_state == USB_STATE_ADDRESSING) {
      usb_error = 0xfe;
      last_usb_task_state = usb_task_state;
      usb_task_state = USB_STATE_ERROR;
    }
    break; // case ( USB_STATE_ADDRESSING )
 8002064:	0001883a 	nop
 8002068:	00000106 	br	8002070 <USB_Task+0x628>
    if (usb_task_state == USB_STATE_CONFIGURING) {
      usb_error = 0xfd;
      last_usb_task_state = usb_task_state;
      usb_task_state = USB_STATE_ERROR;
    }
    break; //( USB_STATE_CONFIGURING )
 800206c:	0001883a 	nop
    break; //( USB_STATE_ERROR )
  default:
    // Should never get here
    break;
  } // switch( usb_task_state & STATE_MASK )
}
 8002070:	0001883a 	nop
 8002074:	e6ffff04 	addi	sp,fp,-4
 8002078:	dfc00217 	ldw	ra,8(sp)
 800207c:	df000117 	ldw	fp,4(sp)
 8002080:	dc000017 	ldw	r16,0(sp)
 8002084:	dec00304 	addi	sp,sp,12
 8002088:	f800283a 	ret

0800208c <MSDProbe>:

// place-holders for MSD (mass-storage device) drivers, we don't have them
// ported. returns TRUE if device is successfully identified and configured,
// otherwise returns FALSE
BOOL MSDProbe(BYTE addr, DWORD flags) { return (FALSE); }
 800208c:	defffd04 	addi	sp,sp,-12
 8002090:	df000215 	stw	fp,8(sp)
 8002094:	df000204 	addi	fp,sp,8
 8002098:	2005883a 	mov	r2,r4
 800209c:	e17fff15 	stw	r5,-4(fp)
 80020a0:	e0bffe05 	stb	r2,-8(fp)
 80020a4:	0005883a 	mov	r2,zero
 80020a8:	e037883a 	mov	sp,fp
 80020ac:	df000017 	ldw	fp,0(sp)
 80020b0:	dec00104 	addi	sp,sp,4
 80020b4:	f800283a 	ret

080020b8 <MSDEventHandler>:

BOOL MSDEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 80020b8:	defffb04 	addi	sp,sp,-20
 80020bc:	df000415 	stw	fp,16(sp)
 80020c0:	df000404 	addi	fp,sp,16
 80020c4:	2007883a 	mov	r3,r4
 80020c8:	2805883a 	mov	r2,r5
 80020cc:	e1bffe15 	stw	r6,-8(fp)
 80020d0:	e1ffff15 	stw	r7,-4(fp)
 80020d4:	e0fffc05 	stb	r3,-16(fp)
 80020d8:	e0bffd05 	stb	r2,-12(fp)

  return (FALSE);
 80020dc:	0005883a 	mov	r2,zero
}
 80020e0:	e037883a 	mov	sp,fp
 80020e4:	df000017 	ldw	fp,0(sp)
 80020e8:	dec00104 	addi	sp,sp,4
 80020ec:	f800283a 	ret

080020f0 <CDCProbe>:
// CDC (communication device class also not supported)
BOOL CDCProbe(BYTE address, DWORD flags) { return (FALSE); }
 80020f0:	defffd04 	addi	sp,sp,-12
 80020f4:	df000215 	stw	fp,8(sp)
 80020f8:	df000204 	addi	fp,sp,8
 80020fc:	2005883a 	mov	r2,r4
 8002100:	e17fff15 	stw	r5,-4(fp)
 8002104:	e0bffe05 	stb	r2,-8(fp)
 8002108:	0005883a 	mov	r2,zero
 800210c:	e037883a 	mov	sp,fp
 8002110:	df000017 	ldw	fp,0(sp)
 8002114:	dec00104 	addi	sp,sp,4
 8002118:	f800283a 	ret

0800211c <CDCEventHandler>:

BOOL CDCEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 800211c:	defffb04 	addi	sp,sp,-20
 8002120:	df000415 	stw	fp,16(sp)
 8002124:	df000404 	addi	fp,sp,16
 8002128:	2007883a 	mov	r3,r4
 800212c:	2805883a 	mov	r2,r5
 8002130:	e1bffe15 	stw	r6,-8(fp)
 8002134:	e1ffff15 	stw	r7,-4(fp)
 8002138:	e0fffc05 	stb	r3,-16(fp)
 800213c:	e0bffd05 	stb	r2,-12(fp)
  return (FALSE);
 8002140:	0005883a 	mov	r2,zero
}
 8002144:	e037883a 	mov	sp,fp
 8002148:	df000017 	ldw	fp,0(sp)
 800214c:	dec00104 	addi	sp,sp,4
 8002150:	f800283a 	ret

08002154 <DummyProbe>:

BOOL DummyProbe(BYTE address, DWORD flags) { return (FALSE); }
 8002154:	defffd04 	addi	sp,sp,-12
 8002158:	df000215 	stw	fp,8(sp)
 800215c:	df000204 	addi	fp,sp,8
 8002160:	2005883a 	mov	r2,r4
 8002164:	e17fff15 	stw	r5,-4(fp)
 8002168:	e0bffe05 	stb	r2,-8(fp)
 800216c:	0005883a 	mov	r2,zero
 8002170:	e037883a 	mov	sp,fp
 8002174:	df000017 	ldw	fp,0(sp)
 8002178:	dec00104 	addi	sp,sp,4
 800217c:	f800283a 	ret

08002180 <DummyEventHandler>:

BOOL DummyEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 8002180:	defffb04 	addi	sp,sp,-20
 8002184:	df000415 	stw	fp,16(sp)
 8002188:	df000404 	addi	fp,sp,16
 800218c:	2007883a 	mov	r3,r4
 8002190:	2805883a 	mov	r2,r5
 8002194:	e1bffe15 	stw	r6,-8(fp)
 8002198:	e1ffff15 	stw	r7,-4(fp)
 800219c:	e0fffc05 	stb	r3,-16(fp)
 80021a0:	e0bffd05 	stb	r2,-12(fp)
  return (FALSE);
 80021a4:	0005883a 	mov	r2,zero
}
 80021a8:	e037883a 	mov	sp,fp
 80021ac:	df000017 	ldw	fp,0(sp)
 80021b0:	dec00104 	addi	sp,sp,4
 80021b4:	f800283a 	ret

080021b8 <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState(void) { return (usb_task_state); }
 80021b8:	deffff04 	addi	sp,sp,-4
 80021bc:	df000015 	stw	fp,0(sp)
 80021c0:	d839883a 	mov	fp,sp
 80021c4:	d0a00203 	ldbu	r2,-32760(gp)
 80021c8:	e037883a 	mov	sp,fp
 80021cc:	df000017 	ldw	fp,0(sp)
 80021d0:	dec00104 	addi	sp,sp,4
 80021d4:	f800283a 	ret

080021d8 <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD *GetDevtable(BYTE index) { return (&devtable[index]); }
 80021d8:	defffe04 	addi	sp,sp,-8
 80021dc:	df000115 	stw	fp,4(sp)
 80021e0:	df000104 	addi	fp,sp,4
 80021e4:	2005883a 	mov	r2,r4
 80021e8:	e0bfff05 	stb	r2,-4(fp)
 80021ec:	e0bfff03 	ldbu	r2,-4(fp)
 80021f0:	100690fa 	slli	r3,r2,3
 80021f4:	008200b4 	movhi	r2,2050
 80021f8:	10ba5e04 	addi	r2,r2,-5768
 80021fc:	1885883a 	add	r2,r3,r2
 8002200:	e037883a 	mov	sp,fp
 8002204:	df000017 	ldw	fp,0(sp)
 8002208:	dec00104 	addi	sp,sp,4
 800220c:	f800283a 	ret

08002210 <ConvUTF8ToStr>:

char *ConvUTF8ToStr(BYTE *utf8, BYTE length) {
 8002210:	defffc04 	addi	sp,sp,-16
 8002214:	df000315 	stw	fp,12(sp)
 8002218:	df000304 	addi	fp,sp,12
 800221c:	e13ffe15 	stw	r4,-8(fp)
 8002220:	2805883a 	mov	r2,r5
 8002224:	e0bfff05 	stb	r2,-4(fp)
  BYTE i;
  for (i = 0; i < length; i++) {
 8002228:	e03ffd05 	stb	zero,-12(fp)
 800222c:	00000d06 	br	8002264 <ConvUTF8ToStr+0x54>
    utf8[i] = utf8[2 * i];
 8002230:	e0bffd03 	ldbu	r2,-12(fp)
 8002234:	e0fffe17 	ldw	r3,-8(fp)
 8002238:	1887883a 	add	r3,r3,r2
 800223c:	e0bffd03 	ldbu	r2,-12(fp)
 8002240:	1085883a 	add	r2,r2,r2
 8002244:	1009883a 	mov	r4,r2
 8002248:	e0bffe17 	ldw	r2,-8(fp)
 800224c:	1105883a 	add	r2,r2,r4
 8002250:	10800003 	ldbu	r2,0(r2)
 8002254:	18800005 	stb	r2,0(r3)
/* Function to access devtable[] from outside */
DEV_RECORD *GetDevtable(BYTE index) { return (&devtable[index]); }

char *ConvUTF8ToStr(BYTE *utf8, BYTE length) {
  BYTE i;
  for (i = 0; i < length; i++) {
 8002258:	e0bffd03 	ldbu	r2,-12(fp)
 800225c:	10800044 	addi	r2,r2,1
 8002260:	e0bffd05 	stb	r2,-12(fp)
 8002264:	e0fffd03 	ldbu	r3,-12(fp)
 8002268:	e0bfff03 	ldbu	r2,-4(fp)
 800226c:	18bff036 	bltu	r3,r2,8002230 <ConvUTF8ToStr+0x20>
    utf8[i] = utf8[2 * i];
  }
  utf8[length] = 0x00;
 8002270:	e0bfff03 	ldbu	r2,-4(fp)
 8002274:	e0fffe17 	ldw	r3,-8(fp)
 8002278:	1885883a 	add	r2,r3,r2
 800227c:	10000005 	stb	zero,0(r2)
  return (char *)utf8;
 8002280:	e0bffe17 	ldw	r2,-8(fp)
}
 8002284:	e037883a 	mov	sp,fp
 8002288:	df000017 	ldw	fp,0(sp)
 800228c:	dec00104 	addi	sp,sp,4
 8002290:	f800283a 	ret

08002294 <_ZN9EtherCard5beginEtPKhh>:
bool EtherCard::using_dhcp = false;
bool EtherCard::persist_tcp_connection = false;
uint16_t EtherCard::delaycnt = 0; // request gateway ARP lookup

uint8_t EtherCard::begin(const uint16_t size, const uint8_t *macaddr,
                         uint8_t csPin) {
 8002294:	defff904 	addi	sp,sp,-28
 8002298:	dfc00615 	stw	ra,24(sp)
 800229c:	df000515 	stw	fp,20(sp)
 80022a0:	df000504 	addi	fp,sp,20
 80022a4:	2007883a 	mov	r3,r4
 80022a8:	e17ffe15 	stw	r5,-8(fp)
 80022ac:	3005883a 	mov	r2,r6
 80022b0:	e0fffd0d 	sth	r3,-12(fp)
 80022b4:	e0bfff05 	stb	r2,-4(fp)
  using_dhcp = true;
 80022b8:	00800044 	movi	r2,1
 80022bc:	d0a71545 	stb	r2,-25515(gp)
  copyMac(mymac, macaddr);
 80022c0:	e17ffe17 	ldw	r5,-8(fp)
 80022c4:	d1270cc4 	addi	r4,gp,-25549
 80022c8:	8008d700 	call	8008d70 <_ZN9EtherCard7copyMacEPhPKh>
  uint8_t ret = initialize(size, mymac, csPin);
 80022cc:	e0bffd0b 	ldhu	r2,-12(fp)
 80022d0:	e0ffff03 	ldbu	r3,-4(fp)
 80022d4:	180d883a 	mov	r6,r3
 80022d8:	d1670cc4 	addi	r5,gp,-25549
 80022dc:	1009883a 	mov	r4,r2
 80022e0:	8003ee40 	call	8003ee4 <_ZN8ENC28J6010initializeEtPKhh>
 80022e4:	e0bffc05 	stb	r2,-16(fp)
  printf("mymac: ");
 80022e8:	010200b4 	movhi	r4,2050
 80022ec:	21297d04 	addi	r4,r4,-23052
 80022f0:	800ada80 	call	800ada8 <printf>
  for (int i = 0; i < 6; i++)
 80022f4:	e03ffb15 	stw	zero,-20(fp)
 80022f8:	e0bffb17 	ldw	r2,-20(fp)
 80022fc:	10800188 	cmpgei	r2,r2,6
 8002300:	10000d1e 	bne	r2,zero,8002338 <_ZN9EtherCard5beginEtPKhh+0xa4>
    printf("%x, ", mymac[i]);
 8002304:	e0fffb17 	ldw	r3,-20(fp)
 8002308:	d0a70cc4 	addi	r2,gp,-25549
 800230c:	1885883a 	add	r2,r3,r2
 8002310:	10800003 	ldbu	r2,0(r2)
 8002314:	10803fcc 	andi	r2,r2,255
 8002318:	100b883a 	mov	r5,r2
 800231c:	010200b4 	movhi	r4,2050
 8002320:	21297f04 	addi	r4,r4,-23044
 8002324:	800ada80 	call	800ada8 <printf>
                         uint8_t csPin) {
  using_dhcp = true;
  copyMac(mymac, macaddr);
  uint8_t ret = initialize(size, mymac, csPin);
  printf("mymac: ");
  for (int i = 0; i < 6; i++)
 8002328:	e0bffb17 	ldw	r2,-20(fp)
 800232c:	10800044 	addi	r2,r2,1
 8002330:	e0bffb15 	stw	r2,-20(fp)
 8002334:	003ff006 	br	80022f8 <_ZN9EtherCard5beginEtPKhh+0x64>
    printf("%x, ", mymac[i]);
  printf("\nfinished init (ret: %x)\n", ret);
 8002338:	e0bffc03 	ldbu	r2,-16(fp)
 800233c:	100b883a 	mov	r5,r2
 8002340:	010200b4 	movhi	r4,2050
 8002344:	21298104 	addi	r4,r4,-23036
 8002348:	800ada80 	call	800ada8 <printf>
  return ret;
 800234c:	e0bffc03 	ldbu	r2,-16(fp)
}
 8002350:	e037883a 	mov	sp,fp
 8002354:	dfc00117 	ldw	ra,4(sp)
 8002358:	df000017 	ldw	fp,0(sp)
 800235c:	dec00204 	addi	sp,sp,8
 8002360:	f800283a 	ret

08002364 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>:

bool EtherCard::staticSetup(const uint8_t *my_ip, const uint8_t *gw_ip,
                            const uint8_t *dns_ip, const uint8_t *mask) {
 8002364:	defffa04 	addi	sp,sp,-24
 8002368:	dfc00515 	stw	ra,20(sp)
 800236c:	df000415 	stw	fp,16(sp)
 8002370:	df000404 	addi	fp,sp,16
 8002374:	e13ffc15 	stw	r4,-16(fp)
 8002378:	e17ffd15 	stw	r5,-12(fp)
 800237c:	e1bffe15 	stw	r6,-8(fp)
 8002380:	e1ffff15 	stw	r7,-4(fp)
  using_dhcp = true;
 8002384:	00800044 	movi	r2,1
 8002388:	d0a71545 	stb	r2,-25515(gp)

  if (my_ip != 0)
 800238c:	e0bffc17 	ldw	r2,-16(fp)
 8002390:	10000326 	beq	r2,zero,80023a0 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x3c>
    copyIp(myip, my_ip);
 8002394:	e17ffc17 	ldw	r5,-16(fp)
 8002398:	d1270e44 	addi	r4,gp,-25543
 800239c:	8008db00 	call	8008db0 <_ZN9EtherCard6copyIpEPhPKh>
  if (gw_ip != 0)
 80023a0:	e0bffd17 	ldw	r2,-12(fp)
 80023a4:	10000226 	beq	r2,zero,80023b0 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x4c>
    setGwIp(gw_ip);
 80023a8:	e13ffd17 	ldw	r4,-12(fp)
 80023ac:	80075e40 	call	80075e4 <_ZN9EtherCard7setGwIpEPKh>
  if (dns_ip != 0)
 80023b0:	e0bffe17 	ldw	r2,-8(fp)
 80023b4:	10000326 	beq	r2,zero,80023c4 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x60>
    copyIp(dnsip, dns_ip);
 80023b8:	e17ffe17 	ldw	r5,-8(fp)
 80023bc:	d1271344 	addi	r4,gp,-25523
 80023c0:	8008db00 	call	8008db0 <_ZN9EtherCard6copyIpEPhPKh>
  if (mask != 0)
 80023c4:	e0bfff17 	ldw	r2,-4(fp)
 80023c8:	10000326 	beq	r2,zero,80023d8 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x74>
    copyIp(netmask, mask);
 80023cc:	e17fff17 	ldw	r5,-4(fp)
 80023d0:	d1270f44 	addi	r4,gp,-25539
 80023d4:	8008db00 	call	8008db0 <_ZN9EtherCard6copyIpEPhPKh>
  updateBroadcastAddress();
 80023d8:	80076280 	call	8007628 <_ZN9EtherCard22updateBroadcastAddressEv>
  delaycnt = 0; // request gateway ARP lookup
 80023dc:	d027160d 	sth	zero,-25512(gp)
  return true;
 80023e0:	00800044 	movi	r2,1
}
 80023e4:	e037883a 	mov	sp,fp
 80023e8:	dfc00117 	ldw	ra,4(sp)
 80023ec:	df000017 	ldw	fp,0(sp)
 80023f0:	dec00204 	addi	sp,sp,8
 80023f4:	f800283a 	ret

080023f8 <_ZN9EtherCard4wtoaEtPc>:

char *EtherCard::wtoa(uint16_t value, char *ptr) {
 80023f8:	defffb04 	addi	sp,sp,-20
 80023fc:	dfc00415 	stw	ra,16(sp)
 8002400:	df000315 	stw	fp,12(sp)
 8002404:	df000304 	addi	fp,sp,12
 8002408:	e13ffd15 	stw	r4,-12(fp)
 800240c:	2805883a 	mov	r2,r5
 8002410:	e1bfff15 	stw	r6,-4(fp)
 8002414:	e0bffe0d 	sth	r2,-8(fp)
  if (value > 9)
 8002418:	e0bffe0b 	ldhu	r2,-8(fp)
 800241c:	108002b0 	cmpltui	r2,r2,10
 8002420:	10000a1e 	bne	r2,zero,800244c <_ZN9EtherCard4wtoaEtPc+0x54>
    ptr = wtoa(value / 10, ptr);
 8002424:	e0bffe0b 	ldhu	r2,-8(fp)
 8002428:	01400284 	movi	r5,10
 800242c:	1009883a 	mov	r4,r2
 8002430:	800a0bc0 	call	800a0bc <__udivsi3>
 8002434:	10bfffcc 	andi	r2,r2,65535
 8002438:	e1bfff17 	ldw	r6,-4(fp)
 800243c:	100b883a 	mov	r5,r2
 8002440:	e13ffd17 	ldw	r4,-12(fp)
 8002444:	80023f80 	call	80023f8 <_ZN9EtherCard4wtoaEtPc>
 8002448:	e0bfff15 	stw	r2,-4(fp)
  *ptr = '0' + value % 10;
 800244c:	e0bffe0b 	ldhu	r2,-8(fp)
 8002450:	01400284 	movi	r5,10
 8002454:	1009883a 	mov	r4,r2
 8002458:	800a1200 	call	800a120 <__umodsi3>
 800245c:	10800c04 	addi	r2,r2,48
 8002460:	1007883a 	mov	r3,r2
 8002464:	e0bfff17 	ldw	r2,-4(fp)
 8002468:	10c00005 	stb	r3,0(r2)
  *++ptr = 0;
 800246c:	e0bfff17 	ldw	r2,-4(fp)
 8002470:	10800044 	addi	r2,r2,1
 8002474:	e0bfff15 	stw	r2,-4(fp)
 8002478:	e0bfff17 	ldw	r2,-4(fp)
 800247c:	10000005 	stb	zero,0(r2)
  return ptr;
 8002480:	e0bfff17 	ldw	r2,-4(fp)
}
 8002484:	e037883a 	mov	sp,fp
 8002488:	dfc00117 	ldw	ra,4(sp)
 800248c:	df000017 	ldw	fp,0(sp)
 8002490:	dec00204 	addi	sp,sp,8
 8002494:	f800283a 	ret

08002498 <_ZN12BufferFiller6emit_pEPKcz>:
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void BufferFiller::emit_p(const char *fmt, ...) {
 8002498:	defff404 	addi	sp,sp,-48
 800249c:	dfc00915 	stw	ra,36(sp)
 80024a0:	df000815 	stw	fp,32(sp)
 80024a4:	dc000715 	stw	r16,28(sp)
 80024a8:	df000804 	addi	fp,sp,32
 80024ac:	e13ffd15 	stw	r4,-12(fp)
 80024b0:	e17ffe15 	stw	r5,-8(fp)
 80024b4:	e1800215 	stw	r6,8(fp)
 80024b8:	e1c00315 	stw	r7,12(fp)
  va_list ap;
  va_start(ap, fmt);
 80024bc:	e0800204 	addi	r2,fp,8
 80024c0:	e0bffc15 	stw	r2,-16(fp)
  for (;;) {
    char c = *fmt++;
 80024c4:	e0bffe17 	ldw	r2,-8(fp)
 80024c8:	10c00044 	addi	r3,r2,1
 80024cc:	e0fffe15 	stw	r3,-8(fp)
 80024d0:	10800003 	ldbu	r2,0(r2)
 80024d4:	e0bffb05 	stb	r2,-20(fp)
    if (c == 0)
 80024d8:	e0bffb07 	ldb	r2,-20(fp)
 80024dc:	1000b926 	beq	r2,zero,80027c4 <_ZN12BufferFiller6emit_pEPKcz+0x32c>
      break;
    if (c != '$') {
 80024e0:	e0bffb07 	ldb	r2,-20(fp)
 80024e4:	10800920 	cmpeqi	r2,r2,36
 80024e8:	1000081e 	bne	r2,zero,800250c <_ZN12BufferFiller6emit_pEPKcz+0x74>
      *ptr++ = c;
 80024ec:	e0bffd17 	ldw	r2,-12(fp)
 80024f0:	10800117 	ldw	r2,4(r2)
 80024f4:	11000044 	addi	r4,r2,1
 80024f8:	e0fffd17 	ldw	r3,-12(fp)
 80024fc:	19000115 	stw	r4,4(r3)
 8002500:	e0fffb03 	ldbu	r3,-20(fp)
 8002504:	10c00005 	stb	r3,0(r2)
      continue;
 8002508:	0000ad06 	br	80027c0 <_ZN12BufferFiller6emit_pEPKcz+0x328>
    }
    c = *fmt++;
 800250c:	e0bffe17 	ldw	r2,-8(fp)
 8002510:	10c00044 	addi	r3,r2,1
 8002514:	e0fffe15 	stw	r3,-8(fp)
 8002518:	10800003 	ldbu	r2,0(r2)
 800251c:	e0bffb05 	stb	r2,-20(fp)
    switch (c) {
 8002520:	e0bffb07 	ldb	r2,-20(fp)
 8002524:	10bfef04 	addi	r2,r2,-68
 8002528:	10c00428 	cmpgeui	r3,r2,16
 800252c:	18008f1e 	bne	r3,zero,800276c <_ZN12BufferFiller6emit_pEPKcz+0x2d4>
 8002530:	100690ba 	slli	r3,r2,2
 8002534:	00820034 	movhi	r2,2048
 8002538:	10895204 	addi	r2,r2,9544
 800253c:	1885883a 	add	r2,r3,r2
 8002540:	10800017 	ldw	r2,0(r2)
 8002544:	1000683a 	jmp	r2
 8002548:	08002588 	cmpgei	zero,at,150
 800254c:	08002714 	ori	zero,at,156
 8002550:	080026bc 	xorhi	zero,at,154
 8002554:	0800276c 	andhi	zero,at,157
 8002558:	080025b8 	rdprs	zero,at,150
 800255c:	0800276c 	andhi	zero,at,157
 8002560:	0800276c 	andhi	zero,at,157
 8002564:	0800276c 	andhi	zero,at,157
 8002568:	0800266c 	andhi	zero,at,153
 800256c:	0800276c 	andhi	zero,at,157
 8002570:	0800276c 	andhi	zero,at,157
 8002574:	0800276c 	andhi	zero,at,157
 8002578:	0800276c 	andhi	zero,at,157
 800257c:	0800276c 	andhi	zero,at,157
 8002580:	0800276c 	andhi	zero,at,157
 8002584:	08002698 	cmpnei	zero,at,154
    case 'D':

      ether.wtoa(va_arg(ap, int), (char *)ptr);
 8002588:	e0bffc17 	ldw	r2,-16(fp)
 800258c:	10c00104 	addi	r3,r2,4
 8002590:	e0fffc15 	stw	r3,-16(fp)
 8002594:	10800017 	ldw	r2,0(r2)
 8002598:	10ffffcc 	andi	r3,r2,65535
 800259c:	e0bffd17 	ldw	r2,-12(fp)
 80025a0:	10800117 	ldw	r2,4(r2)
 80025a4:	100d883a 	mov	r6,r2
 80025a8:	180b883a 	mov	r5,r3
 80025ac:	d1270c84 	addi	r4,gp,-25550
 80025b0:	80023f80 	call	80023f8 <_ZN9EtherCard4wtoaEtPc>

      break;
 80025b4:	00007506 	br	800278c <_ZN12BufferFiller6emit_pEPKcz+0x2f4>
      dtostrf(va_arg(ap, double), 10, 3, (char *)ptr);
      break;
#endif
    case 'H': {

      char p1 = va_arg(ap, int);
 80025b8:	e0bffc17 	ldw	r2,-16(fp)
 80025bc:	10c00104 	addi	r3,r2,4
 80025c0:	e0fffc15 	stw	r3,-16(fp)
 80025c4:	10800017 	ldw	r2,0(r2)
 80025c8:	e0bff805 	stb	r2,-32(fp)

      char p2;
      p2 = (p1 >> 4) & 0x0F;
 80025cc:	e0bff807 	ldb	r2,-32(fp)
 80025d0:	1005d13a 	srai	r2,r2,4
 80025d4:	108003cc 	andi	r2,r2,15
 80025d8:	e0bff845 	stb	r2,-31(fp)
      p1 = p1 & 0x0F;
 80025dc:	e0bff803 	ldbu	r2,-32(fp)
 80025e0:	108003cc 	andi	r2,r2,15
 80025e4:	e0bff805 	stb	r2,-32(fp)
      if (p1 > 9)
 80025e8:	e0bff807 	ldb	r2,-32(fp)
 80025ec:	10800290 	cmplti	r2,r2,10
 80025f0:	1000031e 	bne	r2,zero,8002600 <_ZN12BufferFiller6emit_pEPKcz+0x168>
        p1 += 0x07; // adjust 0x0a-0x0f to come out 'a'-'f'
 80025f4:	e0bff803 	ldbu	r2,-32(fp)
 80025f8:	108001c4 	addi	r2,r2,7
 80025fc:	e0bff805 	stb	r2,-32(fp)
      p1 += 0x30;   // and complete
 8002600:	e0bff803 	ldbu	r2,-32(fp)
 8002604:	10800c04 	addi	r2,r2,48
 8002608:	e0bff805 	stb	r2,-32(fp)
      if (p2 > 9)
 800260c:	e0bff847 	ldb	r2,-31(fp)
 8002610:	10800290 	cmplti	r2,r2,10
 8002614:	1000031e 	bne	r2,zero,8002624 <_ZN12BufferFiller6emit_pEPKcz+0x18c>
        p2 += 0x07; // adjust 0x0a-0x0f to come out 'a'-'f'
 8002618:	e0bff843 	ldbu	r2,-31(fp)
 800261c:	108001c4 	addi	r2,r2,7
 8002620:	e0bff845 	stb	r2,-31(fp)
      p2 += 0x30;   // and complete
 8002624:	e0bff843 	ldbu	r2,-31(fp)
 8002628:	10800c04 	addi	r2,r2,48
 800262c:	e0bff845 	stb	r2,-31(fp)
      *ptr++ = p2;
 8002630:	e0bffd17 	ldw	r2,-12(fp)
 8002634:	10800117 	ldw	r2,4(r2)
 8002638:	11000044 	addi	r4,r2,1
 800263c:	e0fffd17 	ldw	r3,-12(fp)
 8002640:	19000115 	stw	r4,4(r3)
 8002644:	e0fff843 	ldbu	r3,-31(fp)
 8002648:	10c00005 	stb	r3,0(r2)
      *ptr++ = p1;
 800264c:	e0bffd17 	ldw	r2,-12(fp)
 8002650:	10800117 	ldw	r2,4(r2)
 8002654:	11000044 	addi	r4,r2,1
 8002658:	e0fffd17 	ldw	r3,-12(fp)
 800265c:	19000115 	stw	r4,4(r3)
 8002660:	e0fff803 	ldbu	r3,-32(fp)
 8002664:	10c00005 	stb	r3,0(r2)
      continue;
 8002668:	00005506 	br	80027c0 <_ZN12BufferFiller6emit_pEPKcz+0x328>
    }
    case 'L':
      itoa(va_arg(ap, long), (char *)ptr, 10);
 800266c:	e0bffc17 	ldw	r2,-16(fp)
 8002670:	10c00104 	addi	r3,r2,4
 8002674:	e0fffc15 	stw	r3,-16(fp)
 8002678:	10c00017 	ldw	r3,0(r2)
 800267c:	e0bffd17 	ldw	r2,-12(fp)
 8002680:	10800117 	ldw	r2,4(r2)
 8002684:	01800284 	movi	r6,10
 8002688:	100b883a 	mov	r5,r2
 800268c:	1809883a 	mov	r4,r3
 8002690:	800a2540 	call	800a254 <itoa>
      break;
 8002694:	00003d06 	br	800278c <_ZN12BufferFiller6emit_pEPKcz+0x2f4>
    case 'S':
      strcpy((char *)ptr, va_arg(ap, const char *));
 8002698:	e0bffd17 	ldw	r2,-12(fp)
 800269c:	11000117 	ldw	r4,4(r2)
 80026a0:	e0bffc17 	ldw	r2,-16(fp)
 80026a4:	10c00104 	addi	r3,r2,4
 80026a8:	e0fffc15 	stw	r3,-16(fp)
 80026ac:	10800017 	ldw	r2,0(r2)
 80026b0:	100b883a 	mov	r5,r2
 80026b4:	800b0080 	call	800b008 <strcpy>
      break;
 80026b8:	00003406 	br	800278c <_ZN12BufferFiller6emit_pEPKcz+0x2f4>
    case 'F': {
      const char *s = va_arg(ap, const char *);
 80026bc:	e0bffc17 	ldw	r2,-16(fp)
 80026c0:	10c00104 	addi	r3,r2,4
 80026c4:	e0fffc15 	stw	r3,-16(fp)
 80026c8:	10800017 	ldw	r2,0(r2)
 80026cc:	e0bff915 	stw	r2,-28(fp)
      char d;
      while ((d = *s++) != 0)
 80026d0:	e0bff917 	ldw	r2,-28(fp)
 80026d4:	10c00044 	addi	r3,r2,1
 80026d8:	e0fff915 	stw	r3,-28(fp)
 80026dc:	10800003 	ldbu	r2,0(r2)
 80026e0:	e0bffb45 	stb	r2,-19(fp)
 80026e4:	e0bffb47 	ldb	r2,-19(fp)
 80026e8:	1004c03a 	cmpne	r2,r2,zero
 80026ec:	10803fcc 	andi	r2,r2,255
 80026f0:	10003026 	beq	r2,zero,80027b4 <_ZN12BufferFiller6emit_pEPKcz+0x31c>
        *ptr++ = d;
 80026f4:	e0bffd17 	ldw	r2,-12(fp)
 80026f8:	10800117 	ldw	r2,4(r2)
 80026fc:	11000044 	addi	r4,r2,1
 8002700:	e0fffd17 	ldw	r3,-12(fp)
 8002704:	19000115 	stw	r4,4(r3)
 8002708:	e0fffb43 	ldbu	r3,-19(fp)
 800270c:	10c00005 	stb	r3,0(r2)
      strcpy((char *)ptr, va_arg(ap, const char *));
      break;
    case 'F': {
      const char *s = va_arg(ap, const char *);
      char d;
      while ((d = *s++) != 0)
 8002710:	003fef06 	br	80026d0 <_ZN12BufferFiller6emit_pEPKcz+0x238>
        *ptr++ = d;
      continue;
    }
    case 'E': {
      byte *s = va_arg(ap, byte *);
 8002714:	e0bffc17 	ldw	r2,-16(fp)
 8002718:	10c00104 	addi	r3,r2,4
 800271c:	e0fffc15 	stw	r3,-16(fp)
 8002720:	10800017 	ldw	r2,0(r2)
 8002724:	e0bffa15 	stw	r2,-24(fp)
      char d;
      while ((d = *s++) != 0)
 8002728:	e0bffa17 	ldw	r2,-24(fp)
 800272c:	10c00044 	addi	r3,r2,1
 8002730:	e0fffa15 	stw	r3,-24(fp)
 8002734:	10800003 	ldbu	r2,0(r2)
 8002738:	e0bffb85 	stb	r2,-18(fp)
 800273c:	e0bffb87 	ldb	r2,-18(fp)
 8002740:	1004c03a 	cmpne	r2,r2,zero
 8002744:	10803fcc 	andi	r2,r2,255
 8002748:	10001c26 	beq	r2,zero,80027bc <_ZN12BufferFiller6emit_pEPKcz+0x324>
        *ptr++ = d;
 800274c:	e0bffd17 	ldw	r2,-12(fp)
 8002750:	10800117 	ldw	r2,4(r2)
 8002754:	11000044 	addi	r4,r2,1
 8002758:	e0fffd17 	ldw	r3,-12(fp)
 800275c:	19000115 	stw	r4,4(r3)
 8002760:	e0fffb83 	ldbu	r3,-18(fp)
 8002764:	10c00005 	stb	r3,0(r2)
      continue;
    }
    case 'E': {
      byte *s = va_arg(ap, byte *);
      char d;
      while ((d = *s++) != 0)
 8002768:	003fef06 	br	8002728 <_ZN12BufferFiller6emit_pEPKcz+0x290>
        *ptr++ = d;
      continue;
    }
    default:
      *ptr++ = c;
 800276c:	e0bffd17 	ldw	r2,-12(fp)
 8002770:	10800117 	ldw	r2,4(r2)
 8002774:	11000044 	addi	r4,r2,1
 8002778:	e0fffd17 	ldw	r3,-12(fp)
 800277c:	19000115 	stw	r4,4(r3)
 8002780:	e0fffb03 	ldbu	r3,-20(fp)
 8002784:	10c00005 	stb	r3,0(r2)
      continue;
 8002788:	00000d06 	br	80027c0 <_ZN12BufferFiller6emit_pEPKcz+0x328>
    }
    ptr += strlen((char *)ptr);
 800278c:	e0bffd17 	ldw	r2,-12(fp)
 8002790:	14000117 	ldw	r16,4(r2)
 8002794:	e0bffd17 	ldw	r2,-12(fp)
 8002798:	10800117 	ldw	r2,4(r2)
 800279c:	1009883a 	mov	r4,r2
 80027a0:	800b0980 	call	800b098 <strlen>
 80027a4:	8087883a 	add	r3,r16,r2
 80027a8:	e0bffd17 	ldw	r2,-12(fp)
 80027ac:	10c00115 	stw	r3,4(r2)
 80027b0:	003f4406 	br	80024c4 <_ZN12BufferFiller6emit_pEPKcz+0x2c>
    case 'F': {
      const char *s = va_arg(ap, const char *);
      char d;
      while ((d = *s++) != 0)
        *ptr++ = d;
      continue;
 80027b4:	0001883a 	nop
 80027b8:	003f4206 	br	80024c4 <_ZN12BufferFiller6emit_pEPKcz+0x2c>
    case 'E': {
      byte *s = va_arg(ap, byte *);
      char d;
      while ((d = *s++) != 0)
        *ptr++ = d;
      continue;
 80027bc:	0001883a 	nop
#include <string.h>

void BufferFiller::emit_p(const char *fmt, ...) {
  va_list ap;
  va_start(ap, fmt);
  for (;;) {
 80027c0:	003f4006 	br	80024c4 <_ZN12BufferFiller6emit_pEPKcz+0x2c>
    char c = *fmt++;
    if (c == 0)
      break;
 80027c4:	0001883a 	nop
      continue;
    }
    ptr += strlen((char *)ptr);
  }
  va_end(ap);
}
 80027c8:	0001883a 	nop
 80027cc:	e6ffff04 	addi	sp,fp,-4
 80027d0:	dfc00217 	ldw	ra,8(sp)
 80027d4:	df000117 	ldw	fp,4(sp)
 80027d8:	dc000017 	ldw	r16,0(sp)
 80027dc:	dec00504 	addi	sp,sp,20
 80027e0:	f800283a 	ret

080027e4 <_Z6millisv>:
static uint8_t *dhcpCustomOptionList = NULL;
static DhcpOptionCallback dhcpCustomOptionCallback = NULL;

extern uint8_t allOnes[]; // = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

uint32_t millis() { return (uint32_t)clock(); }
 80027e4:	defffe04 	addi	sp,sp,-8
 80027e8:	dfc00115 	stw	ra,4(sp)
 80027ec:	df000015 	stw	fp,0(sp)
 80027f0:	d839883a 	mov	fp,sp
 80027f4:	800a1a00 	call	800a1a0 <clock>
 80027f8:	e037883a 	mov	sp,fp
 80027fc:	dfc00117 	ldw	ra,4(sp)
 8002800:	df000017 	ldw	fp,0(sp)
 8002804:	dec00204 	addi	sp,sp,8
 8002808:	f800283a 	ret

0800280c <_ZL8addToBufh>:

static void addToBuf(byte b) { *bufPtr++ = b; }
 800280c:	defffe04 	addi	sp,sp,-8
 8002810:	df000115 	stw	fp,4(sp)
 8002814:	df000104 	addi	fp,sp,4
 8002818:	2005883a 	mov	r2,r4
 800281c:	e0bfff05 	stb	r2,-4(fp)
 8002820:	d0a71c17 	ldw	r2,-25488(gp)
 8002824:	10c00044 	addi	r3,r2,1
 8002828:	d0e71c15 	stw	r3,-25488(gp)
 800282c:	e0ffff03 	ldbu	r3,-4(fp)
 8002830:	10c00005 	stb	r3,0(r2)
 8002834:	0001883a 	nop
 8002838:	e037883a 	mov	sp,fp
 800283c:	df000017 	ldw	fp,0(sp)
 8002840:	dec00104 	addi	sp,sp,4
 8002844:	f800283a 	ret

08002848 <_ZL8addByteshPKh>:

static void addBytes(byte len, const byte *data) {
 8002848:	defffc04 	addi	sp,sp,-16
 800284c:	dfc00315 	stw	ra,12(sp)
 8002850:	df000215 	stw	fp,8(sp)
 8002854:	df000204 	addi	fp,sp,8
 8002858:	2005883a 	mov	r2,r4
 800285c:	e17fff15 	stw	r5,-4(fp)
 8002860:	e0bffe05 	stb	r2,-8(fp)
  while (len-- > 0)
 8002864:	e0bffe03 	ldbu	r2,-8(fp)
 8002868:	10ffffc4 	addi	r3,r2,-1
 800286c:	e0fffe05 	stb	r3,-8(fp)
 8002870:	10803fcc 	andi	r2,r2,255
 8002874:	1004c03a 	cmpne	r2,r2,zero
 8002878:	10803fcc 	andi	r2,r2,255
 800287c:	10000826 	beq	r2,zero,80028a0 <_ZL8addByteshPKh+0x58>
    addToBuf(*data++);
 8002880:	e0bfff17 	ldw	r2,-4(fp)
 8002884:	10c00044 	addi	r3,r2,1
 8002888:	e0ffff15 	stw	r3,-4(fp)
 800288c:	10800003 	ldbu	r2,0(r2)
 8002890:	10803fcc 	andi	r2,r2,255
 8002894:	1009883a 	mov	r4,r2
 8002898:	800280c0 	call	800280c <_ZL8addToBufh>
uint32_t millis() { return (uint32_t)clock(); }

static void addToBuf(byte b) { *bufPtr++ = b; }

static void addBytes(byte len, const byte *data) {
  while (len-- > 0)
 800289c:	003ff106 	br	8002864 <_ZL8addByteshPKh+0x1c>
    addToBuf(*data++);
}
 80028a0:	0001883a 	nop
 80028a4:	e037883a 	mov	sp,fp
 80028a8:	dfc00117 	ldw	ra,4(sp)
 80028ac:	df000017 	ldw	fp,0(sp)
 80028b0:	dec00204 	addi	sp,sp,8
 80028b4:	f800283a 	ret

080028b8 <_ZL9addOptionhhPKh>:

static void addOption(byte opt, byte len, const byte *data) {
 80028b8:	defffb04 	addi	sp,sp,-20
 80028bc:	dfc00415 	stw	ra,16(sp)
 80028c0:	df000315 	stw	fp,12(sp)
 80028c4:	df000304 	addi	fp,sp,12
 80028c8:	2007883a 	mov	r3,r4
 80028cc:	2805883a 	mov	r2,r5
 80028d0:	e1bfff15 	stw	r6,-4(fp)
 80028d4:	e0fffd05 	stb	r3,-12(fp)
 80028d8:	e0bffe05 	stb	r2,-8(fp)
  addToBuf(opt);
 80028dc:	e0bffd03 	ldbu	r2,-12(fp)
 80028e0:	1009883a 	mov	r4,r2
 80028e4:	800280c0 	call	800280c <_ZL8addToBufh>
  addToBuf(len);
 80028e8:	e0bffe03 	ldbu	r2,-8(fp)
 80028ec:	1009883a 	mov	r4,r2
 80028f0:	800280c0 	call	800280c <_ZL8addToBufh>
  addBytes(len, data);
 80028f4:	e0bffe03 	ldbu	r2,-8(fp)
 80028f8:	e17fff17 	ldw	r5,-4(fp)
 80028fc:	1009883a 	mov	r4,r2
 8002900:	80028480 	call	8002848 <_ZL8addByteshPKh>
}
 8002904:	0001883a 	nop
 8002908:	e037883a 	mov	sp,fp
 800290c:	dfc00117 	ldw	ra,4(sp)
 8002910:	df000017 	ldw	fp,0(sp)
 8002914:	dec00204 	addi	sp,sp,8
 8002918:	f800283a 	ret

0800291c <_ZL17send_dhcp_messagePh>:
#define DHCP_OPT_CLIENT_IDENTIFIER 61
#define DHCP_OPT_END 255

#define DHCP_HTYPE_ETHER 1

static void send_dhcp_message(uint8_t *requestip) {
 800291c:	defff904 	addi	sp,sp,-28
 8002920:	dfc00615 	stw	ra,24(sp)
 8002924:	df000515 	stw	fp,20(sp)
 8002928:	df000504 	addi	fp,sp,20
 800292c:	e13fff15 	stw	r4,-4(fp)

  memset(gPB, 0, UDP_DATA_P + sizeof(DHCPdata));
 8002930:	00804584 	movi	r2,278
 8002934:	100d883a 	mov	r6,r2
 8002938:	000b883a 	mov	r5,zero
 800293c:	010200b4 	movhi	r4,2050
 8002940:	21399704 	addi	r4,r4,-6564
 8002944:	800ac500 	call	800ac50 <memset>

  EtherCard::udpPrepare(
      DHCP_CLIENT_PORT,
      (dhcpState == DHCP_STATE_BOUND ? EtherCard::dhcpip : allOnes),
 8002948:	d0a71703 	ldbu	r2,-25508(gp)

static void send_dhcp_message(uint8_t *requestip) {

  memset(gPB, 0, UDP_DATA_P + sizeof(DHCPdata));

  EtherCard::udpPrepare(
 800294c:	10803fcc 	andi	r2,r2,255
 8002950:	108000d8 	cmpnei	r2,r2,3
 8002954:	1000021e 	bne	r2,zero,8002960 <_ZL17send_dhcp_messagePh+0x44>
 8002958:	d0a71244 	addi	r2,gp,-25527
 800295c:	00000206 	br	8002968 <_ZL17send_dhcp_messagePh+0x4c>
 8002960:	008200b4 	movhi	r2,2050
 8002964:	10b219c4 	addi	r2,r2,-14233
      DHCP_CLIENT_PORT,
      (dhcpState == DHCP_STATE_BOUND ? EtherCard::dhcpip : allOnes),
      DHCP_SERVER_PORT);
 8002968:	018010c4 	movi	r6,67
 800296c:	100b883a 	mov	r5,r2
 8002970:	01001104 	movi	r4,68
 8002974:	8006f680 	call	8006f68 <_ZN9EtherCard10udpPrepareEtPKht>

  // If we ever don't do this, the DHCP renewal gets sent to whatever random
  // destmacaddr was used by other code. Rather than cache the MAC address of
  // the DHCP server, just force a broadcast here in all cases.
  EtherCard::copyMac(gPB + ETH_DST_MAC, allOnes); // force broadcast mac
 8002978:	014200b4 	movhi	r5,2050
 800297c:	297219c4 	addi	r5,r5,-14233
 8002980:	010200b4 	movhi	r4,2050
 8002984:	21399704 	addi	r4,r4,-6564
 8002988:	8008d700 	call	8008d70 <_ZN9EtherCard7copyMacEPhPKh>

  // Build DHCP Packet from buf[UDP_DATA_P]
  DHCPdata *dhcpPtr = (DHCPdata *)(gPB + UDP_DATA_P);
 800298c:	008200b4 	movhi	r2,2050
 8002990:	10b9a184 	addi	r2,r2,-6522
 8002994:	e0bffe15 	stw	r2,-8(fp)
  dhcpPtr->op = DHCP_BOOTREQUEST;
 8002998:	e0bffe17 	ldw	r2,-8(fp)
 800299c:	00c00044 	movi	r3,1
 80029a0:	10c00005 	stb	r3,0(r2)
  dhcpPtr->htype = 1;
 80029a4:	e0bffe17 	ldw	r2,-8(fp)
 80029a8:	00c00044 	movi	r3,1
 80029ac:	10c00045 	stb	r3,1(r2)
  dhcpPtr->hlen = 6;
 80029b0:	e0bffe17 	ldw	r2,-8(fp)
 80029b4:	00c00184 	movi	r3,6
 80029b8:	10c00085 	stb	r3,2(r2)
  dhcpPtr->xid = currentXid;
 80029bc:	d0e71817 	ldw	r3,-25504(gp)
 80029c0:	e0bffe17 	ldw	r2,-8(fp)
 80029c4:	19803fcc 	andi	r6,r3,255
 80029c8:	11000103 	ldbu	r4,4(r2)
 80029cc:	2008703a 	and	r4,r4,zero
 80029d0:	200b883a 	mov	r5,r4
 80029d4:	3009883a 	mov	r4,r6
 80029d8:	2908b03a 	or	r4,r5,r4
 80029dc:	11000105 	stb	r4,4(r2)
 80029e0:	1808d23a 	srli	r4,r3,8
 80029e4:	21803fcc 	andi	r6,r4,255
 80029e8:	11000143 	ldbu	r4,5(r2)
 80029ec:	2008703a 	and	r4,r4,zero
 80029f0:	200b883a 	mov	r5,r4
 80029f4:	3009883a 	mov	r4,r6
 80029f8:	2908b03a 	or	r4,r5,r4
 80029fc:	11000145 	stb	r4,5(r2)
 8002a00:	1808d43a 	srli	r4,r3,16
 8002a04:	21803fcc 	andi	r6,r4,255
 8002a08:	11000183 	ldbu	r4,6(r2)
 8002a0c:	2008703a 	and	r4,r4,zero
 8002a10:	200b883a 	mov	r5,r4
 8002a14:	3009883a 	mov	r4,r6
 8002a18:	2908b03a 	or	r4,r5,r4
 8002a1c:	11000185 	stb	r4,6(r2)
 8002a20:	180ad63a 	srli	r5,r3,24
 8002a24:	10c001c3 	ldbu	r3,7(r2)
 8002a28:	1806703a 	and	r3,r3,zero
 8002a2c:	1809883a 	mov	r4,r3
 8002a30:	2807883a 	mov	r3,r5
 8002a34:	20c6b03a 	or	r3,r4,r3
 8002a38:	10c001c5 	stb	r3,7(r2)
  if (dhcpState == DHCP_STATE_BOUND) {
 8002a3c:	d0a71703 	ldbu	r2,-25508(gp)
 8002a40:	10803fcc 	andi	r2,r2,255
 8002a44:	108000d8 	cmpnei	r2,r2,3
 8002a48:	1000051e 	bne	r2,zero,8002a60 <_ZL17send_dhcp_messagePh+0x144>
    EtherCard::copyIp(dhcpPtr->ciaddr, EtherCard::myip);
 8002a4c:	e0bffe17 	ldw	r2,-8(fp)
 8002a50:	10800304 	addi	r2,r2,12
 8002a54:	d1670e44 	addi	r5,gp,-25543
 8002a58:	1009883a 	mov	r4,r2
 8002a5c:	8008db00 	call	8008db0 <_ZN9EtherCard6copyIpEPhPKh>
  }
  EtherCard::copyMac(dhcpPtr->chaddr, EtherCard::mymac);
 8002a60:	e0bffe17 	ldw	r2,-8(fp)
 8002a64:	10800704 	addi	r2,r2,28
 8002a68:	d1670cc4 	addi	r5,gp,-25549
 8002a6c:	1009883a 	mov	r4,r2
 8002a70:	8008d700 	call	8008d70 <_ZN9EtherCard7copyMacEPhPKh>

  // options defined as option, length, value
  bufPtr = gPB + UDP_DATA_P + sizeof(DHCPdata);
 8002a74:	00c04584 	movi	r3,278
 8002a78:	008200b4 	movhi	r2,2050
 8002a7c:	10b99704 	addi	r2,r2,-6564
 8002a80:	1885883a 	add	r2,r3,r2
 8002a84:	d0a71c15 	stw	r2,-25488(gp)
  // DHCP magic cookie
  static const uint8_t cookie[] = {0x63, 0x82, 0x53, 0x63};
  for (byte i = 0; i < sizeof(cookie); i++)
 8002a88:	e03ffb05 	stb	zero,-20(fp)
 8002a8c:	e0bffb03 	ldbu	r2,-20(fp)
 8002a90:	10800128 	cmpgeui	r2,r2,4
 8002a94:	10000b1e 	bne	r2,zero,8002ac4 <_ZL17send_dhcp_messagePh+0x1a8>
    addToBuf((unsigned char)cookie[i]);
 8002a98:	e0fffb03 	ldbu	r3,-20(fp)
 8002a9c:	d0a00304 	addi	r2,gp,-32756
 8002aa0:	1885883a 	add	r2,r3,r2
 8002aa4:	10800003 	ldbu	r2,0(r2)
 8002aa8:	10803fcc 	andi	r2,r2,255
 8002aac:	1009883a 	mov	r4,r2
 8002ab0:	800280c0 	call	800280c <_ZL8addToBufh>

  // options defined as option, length, value
  bufPtr = gPB + UDP_DATA_P + sizeof(DHCPdata);
  // DHCP magic cookie
  static const uint8_t cookie[] = {0x63, 0x82, 0x53, 0x63};
  for (byte i = 0; i < sizeof(cookie); i++)
 8002ab4:	e0bffb03 	ldbu	r2,-20(fp)
 8002ab8:	10800044 	addi	r2,r2,1
 8002abc:	e0bffb05 	stb	r2,-20(fp)
 8002ac0:	003ff206 	br	8002a8c <_ZL17send_dhcp_messagePh+0x170>
    addToBuf((unsigned char)cookie[i]);
  addToBuf(
      DHCP_OPT_MESSAGE_TYPE); // DHCP_STATE_SELECTING, DHCP_STATE_REQUESTING
 8002ac4:	01000d44 	movi	r4,53
 8002ac8:	800280c0 	call	800280c <_ZL8addToBufh>
  addToBuf(1);                // Length
 8002acc:	01000044 	movi	r4,1
 8002ad0:	800280c0 	call	800280c <_ZL8addToBufh>
  addToBuf(dhcpState == DHCP_STATE_INIT ? DHCP_DISCOVER : DHCP_REQUEST);
 8002ad4:	d0a71703 	ldbu	r2,-25508(gp)
 8002ad8:	10803fcc 	andi	r2,r2,255
 8002adc:	1000021e 	bne	r2,zero,8002ae8 <_ZL17send_dhcp_messagePh+0x1cc>
 8002ae0:	00800044 	movi	r2,1
 8002ae4:	00000106 	br	8002aec <_ZL17send_dhcp_messagePh+0x1d0>
 8002ae8:	008000c4 	movi	r2,3
 8002aec:	1009883a 	mov	r4,r2
 8002af0:	800280c0 	call	800280c <_ZL8addToBufh>

  // Client Identifier Option, this is the client mac address
  addToBuf(DHCP_OPT_CLIENT_IDENTIFIER);
 8002af4:	01000f44 	movi	r4,61
 8002af8:	800280c0 	call	800280c <_ZL8addToBufh>
  addToBuf(1 + ETH_LEN); // Length (hardware type + client MAC)
 8002afc:	010001c4 	movi	r4,7
 8002b00:	800280c0 	call	800280c <_ZL8addToBufh>
  addToBuf(DHCP_HTYPE_ETHER);
 8002b04:	01000044 	movi	r4,1
 8002b08:	800280c0 	call	800280c <_ZL8addToBufh>
  addBytes(ETH_LEN, EtherCard::mymac);
 8002b0c:	d1670cc4 	addi	r5,gp,-25549
 8002b10:	01000184 	movi	r4,6
 8002b14:	80028480 	call	8002848 <_ZL8addByteshPKh>

  if (hostname[0]) {
 8002b18:	008200b4 	movhi	r2,2050
 8002b1c:	10ab5e04 	addi	r2,r2,-21128
 8002b20:	10800003 	ldbu	r2,0(r2)
 8002b24:	10803fcc 	andi	r2,r2,255
 8002b28:	1080201c 	xori	r2,r2,128
 8002b2c:	10bfe004 	addi	r2,r2,-128
 8002b30:	10000926 	beq	r2,zero,8002b58 <_ZL17send_dhcp_messagePh+0x23c>
    addOption(DHCP_OPT_HOSTNAME, strlen(hostname), (byte *)hostname);
 8002b34:	010200b4 	movhi	r4,2050
 8002b38:	212b5e04 	addi	r4,r4,-21128
 8002b3c:	800b0980 	call	800b098 <strlen>
 8002b40:	10803fcc 	andi	r2,r2,255
 8002b44:	018200b4 	movhi	r6,2050
 8002b48:	31ab5e04 	addi	r6,r6,-21128
 8002b4c:	100b883a 	mov	r5,r2
 8002b50:	01000304 	movi	r4,12
 8002b54:	80028b80 	call	80028b8 <_ZL9addOptionhhPKh>
  }

  if (requestip != NULL) {
 8002b58:	e0bfff17 	ldw	r2,-4(fp)
 8002b5c:	10000826 	beq	r2,zero,8002b80 <_ZL17send_dhcp_messagePh+0x264>
    addOption(DHCP_OPT_REQUESTED_ADDRESS, IP_LEN, requestip);
 8002b60:	e1bfff17 	ldw	r6,-4(fp)
 8002b64:	01400104 	movi	r5,4
 8002b68:	01000c84 	movi	r4,50
 8002b6c:	80028b80 	call	80028b8 <_ZL9addOptionhhPKh>
    addOption(DHCP_OPT_SERVER_IDENTIFIER, IP_LEN, EtherCard::dhcpip);
 8002b70:	d1a71244 	addi	r6,gp,-25527
 8002b74:	01400104 	movi	r5,4
 8002b78:	01000d84 	movi	r4,54
 8002b7c:	80028b80 	call	80028b8 <_ZL9addOptionhhPKh>
  }

  // Additional info in parameter list - minimal list for what we need
  byte len = 3;
 8002b80:	008000c4 	movi	r2,3
 8002b84:	e0bffb45 	stb	r2,-19(fp)
  if (dhcpCustomOptionList) {
 8002b88:	d0a71d17 	ldw	r2,-25484(gp)
 8002b8c:	10000e26 	beq	r2,zero,8002bc8 <_ZL17send_dhcp_messagePh+0x2ac>
    uint8_t *p = dhcpCustomOptionList;
 8002b90:	d0a71d17 	ldw	r2,-25484(gp)
 8002b94:	e0bffc15 	stw	r2,-16(fp)
    while (*p++ != 0)
 8002b98:	e0bffc17 	ldw	r2,-16(fp)
 8002b9c:	10c00044 	addi	r3,r2,1
 8002ba0:	e0fffc15 	stw	r3,-16(fp)
 8002ba4:	10800003 	ldbu	r2,0(r2)
 8002ba8:	10803fcc 	andi	r2,r2,255
 8002bac:	1004c03a 	cmpne	r2,r2,zero
 8002bb0:	10803fcc 	andi	r2,r2,255
 8002bb4:	10000426 	beq	r2,zero,8002bc8 <_ZL17send_dhcp_messagePh+0x2ac>
      len++;
 8002bb8:	e0bffb43 	ldbu	r2,-19(fp)
 8002bbc:	10800044 	addi	r2,r2,1
 8002bc0:	e0bffb45 	stb	r2,-19(fp)

  // Additional info in parameter list - minimal list for what we need
  byte len = 3;
  if (dhcpCustomOptionList) {
    uint8_t *p = dhcpCustomOptionList;
    while (*p++ != 0)
 8002bc4:	003ff406 	br	8002b98 <_ZL17send_dhcp_messagePh+0x27c>
      len++;
  }
  addToBuf(DHCP_OPT_PARAMETER_REQUEST_LIST);
 8002bc8:	01000dc4 	movi	r4,55
 8002bcc:	800280c0 	call	800280c <_ZL8addToBufh>
  addToBuf(len); // Length
 8002bd0:	e0bffb43 	ldbu	r2,-19(fp)
 8002bd4:	1009883a 	mov	r4,r2
 8002bd8:	800280c0 	call	800280c <_ZL8addToBufh>
  addToBuf(DHCP_OPT_SUBNET_MASK);
 8002bdc:	01000044 	movi	r4,1
 8002be0:	800280c0 	call	800280c <_ZL8addToBufh>
  addToBuf(DHCP_OPT_ROUTERS);
 8002be4:	010000c4 	movi	r4,3
 8002be8:	800280c0 	call	800280c <_ZL8addToBufh>
  addToBuf(DHCP_OPT_DOMAIN_NAME_SERVERS);
 8002bec:	01000184 	movi	r4,6
 8002bf0:	800280c0 	call	800280c <_ZL8addToBufh>
  if (dhcpCustomOptionList) {
 8002bf4:	d0a71d17 	ldw	r2,-25484(gp)
 8002bf8:	10000e26 	beq	r2,zero,8002c34 <_ZL17send_dhcp_messagePh+0x318>
    uint8_t *p = dhcpCustomOptionList; // Custom option list
 8002bfc:	d0a71d17 	ldw	r2,-25484(gp)
 8002c00:	e0bffd15 	stw	r2,-12(fp)
    while (*p != 0) {
 8002c04:	e0bffd17 	ldw	r2,-12(fp)
 8002c08:	10800003 	ldbu	r2,0(r2)
 8002c0c:	10803fcc 	andi	r2,r2,255
 8002c10:	10000826 	beq	r2,zero,8002c34 <_ZL17send_dhcp_messagePh+0x318>
      addToBuf(*p++);
 8002c14:	e0bffd17 	ldw	r2,-12(fp)
 8002c18:	10c00044 	addi	r3,r2,1
 8002c1c:	e0fffd15 	stw	r3,-12(fp)
 8002c20:	10800003 	ldbu	r2,0(r2)
 8002c24:	10803fcc 	andi	r2,r2,255
 8002c28:	1009883a 	mov	r4,r2
 8002c2c:	800280c0 	call	800280c <_ZL8addToBufh>
  addToBuf(DHCP_OPT_SUBNET_MASK);
  addToBuf(DHCP_OPT_ROUTERS);
  addToBuf(DHCP_OPT_DOMAIN_NAME_SERVERS);
  if (dhcpCustomOptionList) {
    uint8_t *p = dhcpCustomOptionList; // Custom option list
    while (*p != 0) {
 8002c30:	003ff406 	br	8002c04 <_ZL17send_dhcp_messagePh+0x2e8>
      addToBuf(*p++);
    }
  }
  addToBuf(DHCP_OPT_END);
 8002c34:	01003fc4 	movi	r4,255
 8002c38:	800280c0 	call	800280c <_ZL8addToBufh>

  // packet size will be under 300 bytes
  EtherCard::udpTransmit((bufPtr - gPB) - UDP_DATA_P);
 8002c3c:	d0a71c17 	ldw	r2,-25488(gp)
 8002c40:	1007883a 	mov	r3,r2
 8002c44:	008200b4 	movhi	r2,2050
 8002c48:	10b99704 	addi	r2,r2,-6564
 8002c4c:	1009883a 	mov	r4,r2
 8002c50:	00bff584 	movi	r2,-42
 8002c54:	1105c83a 	sub	r2,r2,r4
 8002c58:	1885883a 	add	r2,r3,r2
 8002c5c:	10bfffcc 	andi	r2,r2,65535
 8002c60:	1009883a 	mov	r4,r2
 8002c64:	80070f00 	call	80070f0 <_ZN9EtherCard11udpTransmitEt>
}
 8002c68:	0001883a 	nop
 8002c6c:	e037883a 	mov	sp,fp
 8002c70:	dfc00117 	ldw	ra,4(sp)
 8002c74:	df000017 	ldw	fp,0(sp)
 8002c78:	dec00204 	addi	sp,sp,8
 8002c7c:	f800283a 	ret

08002c80 <_ZL18process_dhcp_offertPh>:

static void process_dhcp_offer(uint16_t len, uint8_t *offeredip) {
 8002c80:	defff904 	addi	sp,sp,-28
 8002c84:	dfc00615 	stw	ra,24(sp)
 8002c88:	df000515 	stw	fp,20(sp)
 8002c8c:	df000504 	addi	fp,sp,20
 8002c90:	2005883a 	mov	r2,r4
 8002c94:	e17fff15 	stw	r5,-4(fp)
 8002c98:	e0bffe0d 	sth	r2,-8(fp)
  // Map struct onto payload
  DHCPdata *dhcpPtr = (DHCPdata *)(gPB + UDP_DATA_P);
 8002c9c:	008200b4 	movhi	r2,2050
 8002ca0:	10b9a184 	addi	r2,r2,-6522
 8002ca4:	e0bffc15 	stw	r2,-16(fp)

  // Offered IP address is in yiaddr
  EtherCard::copyIp(offeredip, dhcpPtr->yiaddr);
 8002ca8:	e0bffc17 	ldw	r2,-16(fp)
 8002cac:	10800404 	addi	r2,r2,16
 8002cb0:	100b883a 	mov	r5,r2
 8002cb4:	e13fff17 	ldw	r4,-4(fp)
 8002cb8:	8008db00 	call	8008db0 <_ZN9EtherCard6copyIpEPhPKh>

  // Search for the server IP
  byte *ptr = (byte *)(dhcpPtr + 1) + 4;
 8002cbc:	e0bffc17 	ldw	r2,-16(fp)
 8002cc0:	10803c04 	addi	r2,r2,240
 8002cc4:	e0bffb15 	stw	r2,-20(fp)
  do {
    byte option = *ptr++;
 8002cc8:	e0bffb17 	ldw	r2,-20(fp)
 8002ccc:	10c00044 	addi	r3,r2,1
 8002cd0:	e0fffb15 	stw	r3,-20(fp)
 8002cd4:	10800003 	ldbu	r2,0(r2)
 8002cd8:	e0bffd05 	stb	r2,-12(fp)
    byte optionLen = *ptr++;
 8002cdc:	e0bffb17 	ldw	r2,-20(fp)
 8002ce0:	10c00044 	addi	r3,r2,1
 8002ce4:	e0fffb15 	stw	r3,-20(fp)
 8002ce8:	10800003 	ldbu	r2,0(r2)
 8002cec:	e0bffd45 	stb	r2,-11(fp)
    if (option == DHCP_OPT_SERVER_IDENTIFIER) {
 8002cf0:	e0bffd03 	ldbu	r2,-12(fp)
 8002cf4:	10800d98 	cmpnei	r2,r2,54
 8002cf8:	1000051e 	bne	r2,zero,8002d10 <_ZL18process_dhcp_offertPh+0x90>
      EtherCard::copyIp(EtherCard::dhcpip, ptr);
 8002cfc:	e17ffb17 	ldw	r5,-20(fp)
 8002d00:	d1271244 	addi	r4,gp,-25527
 8002d04:	8008db00 	call	8008db0 <_ZN9EtherCard6copyIpEPhPKh>
      break;
 8002d08:	0001883a 	nop
    }
    ptr += optionLen;
  } while (ptr < gPB + len);
}
 8002d0c:	00000b06 	br	8002d3c <_ZL18process_dhcp_offertPh+0xbc>
    byte optionLen = *ptr++;
    if (option == DHCP_OPT_SERVER_IDENTIFIER) {
      EtherCard::copyIp(EtherCard::dhcpip, ptr);
      break;
    }
    ptr += optionLen;
 8002d10:	e0bffd43 	ldbu	r2,-11(fp)
 8002d14:	e0fffb17 	ldw	r3,-20(fp)
 8002d18:	1885883a 	add	r2,r3,r2
 8002d1c:	e0bffb15 	stw	r2,-20(fp)
  } while (ptr < gPB + len);
 8002d20:	e0fffe0b 	ldhu	r3,-8(fp)
 8002d24:	008200b4 	movhi	r2,2050
 8002d28:	10b99704 	addi	r2,r2,-6564
 8002d2c:	1885883a 	add	r2,r3,r2
 8002d30:	e0fffb17 	ldw	r3,-20(fp)
 8002d34:	1880012e 	bgeu	r3,r2,8002d3c <_ZL18process_dhcp_offertPh+0xbc>
  // Offered IP address is in yiaddr
  EtherCard::copyIp(offeredip, dhcpPtr->yiaddr);

  // Search for the server IP
  byte *ptr = (byte *)(dhcpPtr + 1) + 4;
  do {
 8002d38:	003fe306 	br	8002cc8 <_ZL18process_dhcp_offertPh+0x48>
      EtherCard::copyIp(EtherCard::dhcpip, ptr);
      break;
    }
    ptr += optionLen;
  } while (ptr < gPB + len);
}
 8002d3c:	0001883a 	nop
 8002d40:	e037883a 	mov	sp,fp
 8002d44:	dfc00117 	ldw	ra,4(sp)
 8002d48:	df000017 	ldw	fp,0(sp)
 8002d4c:	dec00204 	addi	sp,sp,8
 8002d50:	f800283a 	ret

08002d54 <_ZL16process_dhcp_ackt>:

static void process_dhcp_ack(uint16_t len) {
 8002d54:	defff804 	addi	sp,sp,-32
 8002d58:	dfc00715 	stw	ra,28(sp)
 8002d5c:	df000615 	stw	fp,24(sp)
 8002d60:	df000604 	addi	fp,sp,24
 8002d64:	2005883a 	mov	r2,r4
 8002d68:	e0bfff0d 	sth	r2,-4(fp)
  // Map struct onto payload
  DHCPdata *dhcpPtr = (DHCPdata *)(gPB + UDP_DATA_P);
 8002d6c:	008200b4 	movhi	r2,2050
 8002d70:	10b9a184 	addi	r2,r2,-6522
 8002d74:	e0bffd15 	stw	r2,-12(fp)

  // Allocated IP address is in yiaddr
  EtherCard::copyIp(EtherCard::myip, dhcpPtr->yiaddr);
 8002d78:	e0bffd17 	ldw	r2,-12(fp)
 8002d7c:	10800404 	addi	r2,r2,16
 8002d80:	100b883a 	mov	r5,r2
 8002d84:	d1270e44 	addi	r4,gp,-25543
 8002d88:	8008db00 	call	8008db0 <_ZN9EtherCard6copyIpEPhPKh>

  // Scan through variable length option list identifying options we want
  byte *ptr = (byte *)(dhcpPtr + 1) + 4;
 8002d8c:	e0bffd17 	ldw	r2,-12(fp)
 8002d90:	10803c04 	addi	r2,r2,240
 8002d94:	e0bffa15 	stw	r2,-24(fp)
  bool done = false;
 8002d98:	e03ffb05 	stb	zero,-20(fp)
  do {
    byte option = *ptr++;
 8002d9c:	e0bffa17 	ldw	r2,-24(fp)
 8002da0:	10c00044 	addi	r3,r2,1
 8002da4:	e0fffa15 	stw	r3,-24(fp)
 8002da8:	10800003 	ldbu	r2,0(r2)
 8002dac:	e0bffe05 	stb	r2,-8(fp)
    byte optionLen = *ptr++;
 8002db0:	e0bffa17 	ldw	r2,-24(fp)
 8002db4:	10c00044 	addi	r3,r2,1
 8002db8:	e0fffa15 	stw	r3,-24(fp)
 8002dbc:	10800003 	ldbu	r2,0(r2)
 8002dc0:	e0bffe45 	stb	r2,-7(fp)
    switch (option) {
 8002dc4:	e0bffe03 	ldbu	r2,-8(fp)
 8002dc8:	10c001a0 	cmpeqi	r3,r2,6
 8002dcc:	1800161e 	bne	r3,zero,8002e28 <_ZL16process_dhcp_ackt+0xd4>
 8002dd0:	10c001c8 	cmpgei	r3,r2,7
 8002dd4:	1800051e 	bne	r3,zero,8002dec <_ZL16process_dhcp_ackt+0x98>
 8002dd8:	10c00060 	cmpeqi	r3,r2,1
 8002ddc:	18000a1e 	bne	r3,zero,8002e08 <_ZL16process_dhcp_ackt+0xb4>
 8002de0:	108000e0 	cmpeqi	r2,r2,3
 8002de4:	10000c1e 	bne	r2,zero,8002e18 <_ZL16process_dhcp_ackt+0xc4>
 8002de8:	00003106 	br	8002eb0 <_ZL16process_dhcp_ackt+0x15c>
 8002dec:	10c00ea0 	cmpeqi	r3,r2,58
 8002df0:	1800111e 	bne	r3,zero,8002e38 <_ZL16process_dhcp_ackt+0xe4>
 8002df4:	10c03fe0 	cmpeqi	r3,r2,255
 8002df8:	18002a1e 	bne	r3,zero,8002ea4 <_ZL16process_dhcp_ackt+0x150>
 8002dfc:	10800ce0 	cmpeqi	r2,r2,51
 8002e00:	10000d1e 	bne	r2,zero,8002e38 <_ZL16process_dhcp_ackt+0xe4>
 8002e04:	00002a06 	br	8002eb0 <_ZL16process_dhcp_ackt+0x15c>
      case DHCP_OPT_SUBNET_MASK:
        EtherCard::copyIp(EtherCard::netmask, ptr);
 8002e08:	e17ffa17 	ldw	r5,-24(fp)
 8002e0c:	d1270f44 	addi	r4,gp,-25539
 8002e10:	8008db00 	call	8008db0 <_ZN9EtherCard6copyIpEPhPKh>
        break;
 8002e14:	00004006 	br	8002f18 <_ZL16process_dhcp_ackt+0x1c4>
      case DHCP_OPT_ROUTERS:
        EtherCard::copyIp(EtherCard::gwip, ptr);
 8002e18:	e17ffa17 	ldw	r5,-24(fp)
 8002e1c:	d1271144 	addi	r4,gp,-25531
 8002e20:	8008db00 	call	8008db0 <_ZN9EtherCard6copyIpEPhPKh>
        break;
 8002e24:	00003c06 	br	8002f18 <_ZL16process_dhcp_ackt+0x1c4>
      case DHCP_OPT_DOMAIN_NAME_SERVERS:
        EtherCard::copyIp(EtherCard::dnsip, ptr);
 8002e28:	e17ffa17 	ldw	r5,-24(fp)
 8002e2c:	d1271344 	addi	r4,gp,-25523
 8002e30:	8008db00 	call	8008db0 <_ZN9EtherCard6copyIpEPhPKh>
        break;
 8002e34:	00003806 	br	8002f18 <_ZL16process_dhcp_ackt+0x1c4>
      case DHCP_OPT_LEASE_TIME:
      case DHCP_OPT_RENEWAL_TIME:
        leaseTime = 0;
 8002e38:	d0271b15 	stw	zero,-25492(gp)
        for (byte i = 0; i < 4; i++)
 8002e3c:	e03ffb45 	stb	zero,-19(fp)
 8002e40:	e0bffb43 	ldbu	r2,-19(fp)
 8002e44:	10800128 	cmpgeui	r2,r2,4
 8002e48:	10000d1e 	bne	r2,zero,8002e80 <_ZL16process_dhcp_ackt+0x12c>
          leaseTime = (leaseTime << 8) + ptr[i];
 8002e4c:	d0a71b17 	ldw	r2,-25492(gp)
 8002e50:	1006923a 	slli	r3,r2,8
 8002e54:	e0bffb43 	ldbu	r2,-19(fp)
 8002e58:	e13ffa17 	ldw	r4,-24(fp)
 8002e5c:	2085883a 	add	r2,r4,r2
 8002e60:	10800003 	ldbu	r2,0(r2)
 8002e64:	10803fcc 	andi	r2,r2,255
 8002e68:	1885883a 	add	r2,r3,r2
 8002e6c:	d0a71b15 	stw	r2,-25492(gp)
        EtherCard::copyIp(EtherCard::dnsip, ptr);
        break;
      case DHCP_OPT_LEASE_TIME:
      case DHCP_OPT_RENEWAL_TIME:
        leaseTime = 0;
        for (byte i = 0; i < 4; i++)
 8002e70:	e0bffb43 	ldbu	r2,-19(fp)
 8002e74:	10800044 	addi	r2,r2,1
 8002e78:	e0bffb45 	stb	r2,-19(fp)
 8002e7c:	003ff006 	br	8002e40 <_ZL16process_dhcp_ackt+0xec>
          leaseTime = (leaseTime << 8) + ptr[i];
        if (leaseTime != DHCP_INFINITE_LEASE) {
 8002e80:	d0a71b17 	ldw	r2,-25492(gp)
 8002e84:	10bfffe0 	cmpeqi	r2,r2,-1
 8002e88:	1000221e 	bne	r2,zero,8002f14 <_ZL16process_dhcp_ackt+0x1c0>
          leaseTime *= 1000; // milliseconds
 8002e8c:	d0a71b17 	ldw	r2,-25492(gp)
 8002e90:	0140fa04 	movi	r5,1000
 8002e94:	1009883a 	mov	r4,r2
 8002e98:	800a1780 	call	800a178 <__mulsi3>
 8002e9c:	d0a71b15 	stw	r2,-25492(gp)
        }
        break;
 8002ea0:	00001c06 	br	8002f14 <_ZL16process_dhcp_ackt+0x1c0>
      case DHCP_OPT_END:
        done = true;
 8002ea4:	00800044 	movi	r2,1
 8002ea8:	e0bffb05 	stb	r2,-20(fp)
        break;
 8002eac:	00001a06 	br	8002f18 <_ZL16process_dhcp_ackt+0x1c4>
      default: {
        // Is is a custom configured option?
        if (dhcpCustomOptionList) {
 8002eb0:	d0a71d17 	ldw	r2,-25484(gp)
 8002eb4:	10001826 	beq	r2,zero,8002f18 <_ZL16process_dhcp_ackt+0x1c4>
          uint8_t *p = dhcpCustomOptionList;
 8002eb8:	d0a71d17 	ldw	r2,-25484(gp)
 8002ebc:	e0bffc15 	stw	r2,-16(fp)
          while (*p != 0) {
 8002ec0:	e0bffc17 	ldw	r2,-16(fp)
 8002ec4:	10800003 	ldbu	r2,0(r2)
 8002ec8:	10803fcc 	andi	r2,r2,255
 8002ecc:	10001226 	beq	r2,zero,8002f18 <_ZL16process_dhcp_ackt+0x1c4>
            if (option == *p) {
 8002ed0:	e0bffc17 	ldw	r2,-16(fp)
 8002ed4:	10800003 	ldbu	r2,0(r2)
 8002ed8:	10c03fcc 	andi	r3,r2,255
 8002edc:	e0bffe03 	ldbu	r2,-8(fp)
 8002ee0:	1880081e 	bne	r3,r2,8002f04 <_ZL16process_dhcp_ackt+0x1b0>
              dhcpCustomOptionCallback(option, ptr, optionLen);
 8002ee4:	d0a71e17 	ldw	r2,-25480(gp)
 8002ee8:	e0fffe03 	ldbu	r3,-8(fp)
 8002eec:	e13ffe43 	ldbu	r4,-7(fp)
 8002ef0:	200d883a 	mov	r6,r4
 8002ef4:	e17ffa17 	ldw	r5,-24(fp)
 8002ef8:	1809883a 	mov	r4,r3
 8002efc:	103ee83a 	callr	r2
              break;
 8002f00:	00000506 	br	8002f18 <_ZL16process_dhcp_ackt+0x1c4>
            }
            p++;
 8002f04:	e0bffc17 	ldw	r2,-16(fp)
 8002f08:	10800044 	addi	r2,r2,1
 8002f0c:	e0bffc15 	stw	r2,-16(fp)
        break;
      default: {
        // Is is a custom configured option?
        if (dhcpCustomOptionList) {
          uint8_t *p = dhcpCustomOptionList;
          while (*p != 0) {
 8002f10:	003feb06 	br	8002ec0 <_ZL16process_dhcp_ackt+0x16c>
        for (byte i = 0; i < 4; i++)
          leaseTime = (leaseTime << 8) + ptr[i];
        if (leaseTime != DHCP_INFINITE_LEASE) {
          leaseTime *= 1000; // milliseconds
        }
        break;
 8002f14:	0001883a 	nop
            p++;
          }
        }
      }
    }
    ptr += optionLen;
 8002f18:	e0bffe43 	ldbu	r2,-7(fp)
 8002f1c:	e0fffa17 	ldw	r3,-24(fp)
 8002f20:	1885883a 	add	r2,r3,r2
 8002f24:	e0bffa15 	stw	r2,-24(fp)
  } while (!done && ptr < gPB + len);
 8002f28:	e0bffb03 	ldbu	r2,-20(fp)
 8002f2c:	1000071e 	bne	r2,zero,8002f4c <_ZL16process_dhcp_ackt+0x1f8>
 8002f30:	e0ffff0b 	ldhu	r3,-4(fp)
 8002f34:	008200b4 	movhi	r2,2050
 8002f38:	10b99704 	addi	r2,r2,-6564
 8002f3c:	1885883a 	add	r2,r3,r2
 8002f40:	e0fffa17 	ldw	r3,-24(fp)
 8002f44:	1880012e 	bgeu	r3,r2,8002f4c <_ZL16process_dhcp_ackt+0x1f8>
  EtherCard::copyIp(EtherCard::myip, dhcpPtr->yiaddr);

  // Scan through variable length option list identifying options we want
  byte *ptr = (byte *)(dhcpPtr + 1) + 4;
  bool done = false;
  do {
 8002f48:	003f9406 	br	8002d9c <_ZL16process_dhcp_ackt+0x48>
        }
      }
    }
    ptr += optionLen;
  } while (!done && ptr < gPB + len);
}
 8002f4c:	0001883a 	nop
 8002f50:	e037883a 	mov	sp,fp
 8002f54:	dfc00117 	ldw	ra,4(sp)
 8002f58:	df000017 	ldw	fp,0(sp)
 8002f5c:	dec00204 	addi	sp,sp,8
 8002f60:	f800283a 	ret

08002f64 <_ZL26dhcp_received_message_typeth>:

static bool dhcp_received_message_type(uint16_t len, byte msgType) {
 8002f64:	defff904 	addi	sp,sp,-28
 8002f68:	dfc00615 	stw	ra,24(sp)
 8002f6c:	df000515 	stw	fp,20(sp)
 8002f70:	df000504 	addi	fp,sp,20
 8002f74:	2007883a 	mov	r3,r4
 8002f78:	2805883a 	mov	r2,r5
 8002f7c:	e0fffe0d 	sth	r3,-8(fp)
 8002f80:	e0bfff05 	stb	r2,-4(fp)
  // Map struct onto payload
  DHCPdata *dhcpPtr = (DHCPdata *)(gPB + UDP_DATA_P);
 8002f84:	008200b4 	movhi	r2,2050
 8002f88:	10b9a184 	addi	r2,r2,-6522
 8002f8c:	e0bffc15 	stw	r2,-16(fp)

  if (len >= 70 && gPB[UDP_SRC_PORT_L_P] == DHCP_SERVER_PORT &&
 8002f90:	e0bffe0b 	ldhu	r2,-8(fp)
 8002f94:	108011b0 	cmpltui	r2,r2,70
 8002f98:	1000421e 	bne	r2,zero,80030a4 <_ZL26dhcp_received_message_typeth+0x140>
 8002f9c:	008200b4 	movhi	r2,2050
 8002fa0:	10b99704 	addi	r2,r2,-6564
 8002fa4:	108008c3 	ldbu	r2,35(r2)
 8002fa8:	10803fcc 	andi	r2,r2,255
 8002fac:	108010d8 	cmpnei	r2,r2,67
 8002fb0:	10003c1e 	bne	r2,zero,80030a4 <_ZL26dhcp_received_message_typeth+0x140>
      dhcpPtr->xid == currentXid) {
 8002fb4:	e0bffc17 	ldw	r2,-16(fp)
 8002fb8:	10c00103 	ldbu	r3,4(r2)
 8002fbc:	11000143 	ldbu	r4,5(r2)
 8002fc0:	2008923a 	slli	r4,r4,8
 8002fc4:	20c6b03a 	or	r3,r4,r3
 8002fc8:	11000183 	ldbu	r4,6(r2)
 8002fcc:	2008943a 	slli	r4,r4,16
 8002fd0:	20c6b03a 	or	r3,r4,r3
 8002fd4:	108001c3 	ldbu	r2,7(r2)
 8002fd8:	1004963a 	slli	r2,r2,24
 8002fdc:	10c4b03a 	or	r2,r2,r3
 8002fe0:	1007883a 	mov	r3,r2
 8002fe4:	d0a71817 	ldw	r2,-25504(gp)

static bool dhcp_received_message_type(uint16_t len, byte msgType) {
  // Map struct onto payload
  DHCPdata *dhcpPtr = (DHCPdata *)(gPB + UDP_DATA_P);

  if (len >= 70 && gPB[UDP_SRC_PORT_L_P] == DHCP_SERVER_PORT &&
 8002fe8:	18802e1e 	bne	r3,r2,80030a4 <_ZL26dhcp_received_message_typeth+0x140>
      dhcpPtr->xid == currentXid) {

    byte *ptr = (byte *)(dhcpPtr + 1) + 4;
 8002fec:	e0bffc17 	ldw	r2,-16(fp)
 8002ff0:	10803c04 	addi	r2,r2,240
 8002ff4:	e0bffb15 	stw	r2,-20(fp)
    do {
      byte option = *ptr++;
 8002ff8:	e0bffb17 	ldw	r2,-20(fp)
 8002ffc:	10c00044 	addi	r3,r2,1
 8003000:	e0fffb15 	stw	r3,-20(fp)
 8003004:	10800003 	ldbu	r2,0(r2)
 8003008:	e0bffd05 	stb	r2,-12(fp)
      byte optionLen = *ptr++;
 800300c:	e0bffb17 	ldw	r2,-20(fp)
 8003010:	10c00044 	addi	r3,r2,1
 8003014:	e0fffb15 	stw	r3,-20(fp)
 8003018:	10800003 	ldbu	r2,0(r2)
 800301c:	e0bffd45 	stb	r2,-11(fp)
      printf("option: %x, msg: %x\n", option, *ptr);
 8003020:	e0fffd03 	ldbu	r3,-12(fp)
 8003024:	e0bffb17 	ldw	r2,-20(fp)
 8003028:	10800003 	ldbu	r2,0(r2)
 800302c:	10803fcc 	andi	r2,r2,255
 8003030:	100d883a 	mov	r6,r2
 8003034:	180b883a 	mov	r5,r3
 8003038:	010200b4 	movhi	r4,2050
 800303c:	21298804 	addi	r4,r4,-23008
 8003040:	800ada80 	call	800ada8 <printf>
      if (option == DHCP_OPT_MESSAGE_TYPE && *ptr == msgType) {
 8003044:	e0bffd03 	ldbu	r2,-12(fp)
 8003048:	10800d58 	cmpnei	r2,r2,53
 800304c:	10000a1e 	bne	r2,zero,8003078 <_ZL26dhcp_received_message_typeth+0x114>
 8003050:	e0bffb17 	ldw	r2,-20(fp)
 8003054:	10800003 	ldbu	r2,0(r2)
 8003058:	10c03fcc 	andi	r3,r2,255
 800305c:	e0bfff03 	ldbu	r2,-4(fp)
 8003060:	1880051e 	bne	r3,r2,8003078 <_ZL26dhcp_received_message_typeth+0x114>
        printf("returning true in received message\n");
 8003064:	010200b4 	movhi	r4,2050
 8003068:	21298e04 	addi	r4,r4,-22984
 800306c:	800aec40 	call	800aec4 <puts>
        return true;
 8003070:	00800044 	movi	r2,1
 8003074:	00000c06 	br	80030a8 <_ZL26dhcp_received_message_typeth+0x144>
      }
      ptr += optionLen;
 8003078:	e0bffd43 	ldbu	r2,-11(fp)
 800307c:	e0fffb17 	ldw	r3,-20(fp)
 8003080:	1885883a 	add	r2,r3,r2
 8003084:	e0bffb15 	stw	r2,-20(fp)
    } while (ptr < gPB + len);
 8003088:	e0fffe0b 	ldhu	r3,-8(fp)
 800308c:	008200b4 	movhi	r2,2050
 8003090:	10b99704 	addi	r2,r2,-6564
 8003094:	1885883a 	add	r2,r3,r2
 8003098:	e0fffb17 	ldw	r3,-20(fp)
 800309c:	1880012e 	bgeu	r3,r2,80030a4 <_ZL26dhcp_received_message_typeth+0x140>

  if (len >= 70 && gPB[UDP_SRC_PORT_L_P] == DHCP_SERVER_PORT &&
      dhcpPtr->xid == currentXid) {

    byte *ptr = (byte *)(dhcpPtr + 1) + 4;
    do {
 80030a0:	003fd506 	br	8002ff8 <_ZL26dhcp_received_message_typeth+0x94>
        return true;
      }
      ptr += optionLen;
    } while (ptr < gPB + len);
  }
  return false;
 80030a4:	0005883a 	mov	r2,zero
}
 80030a8:	e037883a 	mov	sp,fp
 80030ac:	dfc00117 	ldw	ra,4(sp)
 80030b0:	df000017 	ldw	fp,0(sp)
 80030b4:	dec00204 	addi	sp,sp,8
 80030b8:	f800283a 	ret

080030bc <_ZL10toAsciiHexh>:

static char toAsciiHex(byte b) {
 80030bc:	defffd04 	addi	sp,sp,-12
 80030c0:	df000215 	stw	fp,8(sp)
 80030c4:	df000204 	addi	fp,sp,8
 80030c8:	2005883a 	mov	r2,r4
 80030cc:	e0bfff05 	stb	r2,-4(fp)
  char c = b & 0x0f;
 80030d0:	e0bfff03 	ldbu	r2,-4(fp)
 80030d4:	108003cc 	andi	r2,r2,15
 80030d8:	e0bffe05 	stb	r2,-8(fp)
  c += (c <= 9) ? '0' : 'A' - 10;
 80030dc:	e0bffe07 	ldb	r2,-8(fp)
 80030e0:	10800288 	cmpgei	r2,r2,10
 80030e4:	1000021e 	bne	r2,zero,80030f0 <_ZL10toAsciiHexh+0x34>
 80030e8:	00800c04 	movi	r2,48
 80030ec:	00000106 	br	80030f4 <_ZL10toAsciiHexh+0x38>
 80030f0:	00800dc4 	movi	r2,55
 80030f4:	e0fffe03 	ldbu	r3,-8(fp)
 80030f8:	10c5883a 	add	r2,r2,r3
 80030fc:	e0bffe05 	stb	r2,-8(fp)
  return c;
 8003100:	e0bffe03 	ldbu	r2,-8(fp)
}
 8003104:	e037883a 	mov	sp,fp
 8003108:	df000017 	ldw	fp,0(sp)
 800310c:	dec00104 	addi	sp,sp,4
 8003110:	f800283a 	ret

08003114 <_ZN9EtherCard9dhcpSetupEPKcb>:

bool EtherCard::dhcpSetup(const char *hname, bool fromRam) {
 8003114:	defffa04 	addi	sp,sp,-24
 8003118:	dfc00515 	stw	ra,20(sp)
 800311c:	df000415 	stw	fp,16(sp)
 8003120:	dc000315 	stw	r16,12(sp)
 8003124:	df000404 	addi	fp,sp,16
 8003128:	e13ffd15 	stw	r4,-12(fp)
 800312c:	2805883a 	mov	r2,r5
 8003130:	e0bffe05 	stb	r2,-8(fp)
  // Use during setup, as this discards all incoming requests until it returns.
  // That shouldn't be a problem, because we don't have an IPaddress yet.
  // Will try 60 secs to obtain DHCP-lease.

  using_dhcp = true;
 8003134:	00800044 	movi	r2,1
 8003138:	d0a71545 	stb	r2,-25515(gp)

  if (hname != NULL) {
 800313c:	e0bffd17 	ldw	r2,-12(fp)
 8003140:	10000c26 	beq	r2,zero,8003174 <_ZN9EtherCard9dhcpSetupEPKcb+0x60>
    if (fromRam) {
 8003144:	e0bffe03 	ldbu	r2,-8(fp)
 8003148:	10000626 	beq	r2,zero,8003164 <_ZN9EtherCard9dhcpSetupEPKcb+0x50>
      strncpy(hostname, hname, DHCP_HOSTNAME_MAX_LEN);
 800314c:	01800804 	movi	r6,32
 8003150:	e17ffd17 	ldw	r5,-12(fp)
 8003154:	010200b4 	movhi	r4,2050
 8003158:	212b5e04 	addi	r4,r4,-21128
 800315c:	800b2000 	call	800b200 <strncpy>
 8003160:	00002006 	br	80031e4 <_ZN9EtherCard9dhcpSetupEPKcb+0xd0>
    } else {
      printf("BAD THING HAPPENED IN dhcpSetup\n");
 8003164:	010200b4 	movhi	r4,2050
 8003168:	21299704 	addi	r4,r4,-22948
 800316c:	800aec40 	call	800aec4 <puts>
 8003170:	00001c06 	br	80031e4 <_ZN9EtherCard9dhcpSetupEPKcb+0xd0>
    }
  } else {
    // Set a unique hostname, use Arduino-?? with last octet of mac address
    hostname[strlen(hostname) - 2] = toAsciiHex(
 8003174:	010200b4 	movhi	r4,2050
 8003178:	212b5e04 	addi	r4,r4,-21128
 800317c:	800b0980 	call	800b098 <strlen>
 8003180:	143fff84 	addi	r16,r2,-2
        mymac[5] >> 4); // Appends mac to last 2 digits of the hostname
 8003184:	d0a70e03 	ldbu	r2,-25544(gp)
 8003188:	10803fcc 	andi	r2,r2,255
 800318c:	1005d13a 	srai	r2,r2,4
    } else {
      printf("BAD THING HAPPENED IN dhcpSetup\n");
    }
  } else {
    // Set a unique hostname, use Arduino-?? with last octet of mac address
    hostname[strlen(hostname) - 2] = toAsciiHex(
 8003190:	10803fcc 	andi	r2,r2,255
 8003194:	1009883a 	mov	r4,r2
 8003198:	80030bc0 	call	80030bc <_ZL10toAsciiHexh>
 800319c:	1007883a 	mov	r3,r2
        mymac[5] >> 4); // Appends mac to last 2 digits of the hostname
 80031a0:	008200b4 	movhi	r2,2050
 80031a4:	10ab5e04 	addi	r2,r2,-21128
 80031a8:	1405883a 	add	r2,r2,r16
 80031ac:	10c00005 	stb	r3,0(r2)
    hostname[strlen(hostname) - 1] =
 80031b0:	010200b4 	movhi	r4,2050
 80031b4:	212b5e04 	addi	r4,r4,-21128
 80031b8:	800b0980 	call	800b098 <strlen>
 80031bc:	143fffc4 	addi	r16,r2,-1
        toAsciiHex(mymac[5]); // Even if it's smaller than the maximum <thus,
 80031c0:	d0a70e03 	ldbu	r2,-25544(gp)
 80031c4:	10803fcc 	andi	r2,r2,255
 80031c8:	1009883a 	mov	r4,r2
 80031cc:	80030bc0 	call	80030bc <_ZL10toAsciiHexh>
 80031d0:	1007883a 	mov	r3,r2
 80031d4:	008200b4 	movhi	r2,2050
 80031d8:	10ab5e04 	addi	r2,r2,-21128
 80031dc:	1405883a 	add	r2,r2,r16
 80031e0:	10c00005 	stb	r3,0(r2)
                              // strlen(hostname)>
  }

  dhcpState = DHCP_STATE_INIT;
 80031e4:	d0271705 	stb	zero,-25508(gp)
  uint16_t start = millis();
 80031e8:	80027e40 	call	80027e4 <_Z6millisv>
 80031ec:	e0bffc0d 	sth	r2,-16(fp)

  while (dhcpState != DHCP_STATE_BOUND && uint16_t(millis()) - start < 60000) {
 80031f0:	d0a71703 	ldbu	r2,-25508(gp)
 80031f4:	10803fcc 	andi	r2,r2,255
 80031f8:	108000e0 	cmpeqi	r2,r2,3
 80031fc:	1000081e 	bne	r2,zero,8003220 <_ZN9EtherCard9dhcpSetupEPKcb+0x10c>
 8003200:	80027e40 	call	80027e4 <_Z6millisv>
 8003204:	10ffffcc 	andi	r3,r2,65535
 8003208:	e0bffc0b 	ldhu	r2,-16(fp)
 800320c:	1885c83a 	sub	r2,r3,r2
 8003210:	00fa97d4 	movui	r3,59999
 8003214:	18800216 	blt	r3,r2,8003220 <_ZN9EtherCard9dhcpSetupEPKcb+0x10c>
 8003218:	00800044 	movi	r2,1
 800321c:	00000106 	br	8003224 <_ZN9EtherCard9dhcpSetupEPKcb+0x110>
 8003220:	0005883a 	mov	r2,zero
 8003224:	10803fcc 	andi	r2,r2,255
 8003228:	10000826 	beq	r2,zero,800324c <_ZN9EtherCard9dhcpSetupEPKcb+0x138>
    if (isLinkUp()) {
 800322c:	80041140 	call	8004114 <_ZN8ENC28J608isLinkUpEv>
 8003230:	10803fcc 	andi	r2,r2,255
 8003234:	103fee26 	beq	r2,zero,80031f0 <_ZN9EtherCard9dhcpSetupEPKcb+0xdc>
      DhcpStateMachine(packetReceive());
 8003238:	800437c0 	call	800437c <_ZN8ENC28J6013packetReceiveEv>
 800323c:	10bfffcc 	andi	r2,r2,65535
 8003240:	1009883a 	mov	r4,r2
 8003244:	80033240 	call	8003324 <_ZN9EtherCard16DhcpStateMachineEt>
  }

  dhcpState = DHCP_STATE_INIT;
  uint16_t start = millis();

  while (dhcpState != DHCP_STATE_BOUND && uint16_t(millis()) - start < 60000) {
 8003248:	003fe906 	br	80031f0 <_ZN9EtherCard9dhcpSetupEPKcb+0xdc>
    if (isLinkUp()) {
      DhcpStateMachine(packetReceive());
    }
  }
  updateBroadcastAddress();
 800324c:	80076280 	call	8007628 <_ZN9EtherCard22updateBroadcastAddressEv>
  delaycnt = 0;
 8003250:	d027160d 	sth	zero,-25512(gp)
  printf("Finished dhcpSetup... returning %d (%d)\n",
 8003254:	d0a71703 	ldbu	r2,-25508(gp)
 8003258:	10803fcc 	andi	r2,r2,255
 800325c:	108000e0 	cmpeqi	r2,r2,3
 8003260:	10803fcc 	andi	r2,r2,255
 8003264:	d0e71703 	ldbu	r3,-25508(gp)
 8003268:	18c03fcc 	andi	r3,r3,255
         (dhcpState == DHCP_STATE_BOUND), dhcpState);
 800326c:	180d883a 	mov	r6,r3
 8003270:	100b883a 	mov	r5,r2
 8003274:	010200b4 	movhi	r4,2050
 8003278:	21299f04 	addi	r4,r4,-22916
 800327c:	800ada80 	call	800ada8 <printf>
  return dhcpState == DHCP_STATE_BOUND;
 8003280:	d0a71703 	ldbu	r2,-25508(gp)
 8003284:	10803fcc 	andi	r2,r2,255
 8003288:	108000e0 	cmpeqi	r2,r2,3
}
 800328c:	e6ffff04 	addi	sp,fp,-4
 8003290:	dfc00217 	ldw	ra,8(sp)
 8003294:	df000117 	ldw	fp,4(sp)
 8003298:	dc000017 	ldw	r16,0(sp)
 800329c:	dec00304 	addi	sp,sp,12
 80032a0:	f800283a 	ret

080032a4 <_ZN9EtherCard21dhcpAddOptionCallbackEhPFvhPKhhE>:

void EtherCard::dhcpAddOptionCallback(uint8_t option,
                                      DhcpOptionCallback callback) {
 80032a4:	defffd04 	addi	sp,sp,-12
 80032a8:	df000215 	stw	fp,8(sp)
 80032ac:	df000204 	addi	fp,sp,8
 80032b0:	2005883a 	mov	r2,r4
 80032b4:	e17fff15 	stw	r5,-4(fp)
 80032b8:	e0bffe05 	stb	r2,-8(fp)
  static uint8_t optionList[2];
  optionList[0] = option;
 80032bc:	e0bffe03 	ldbu	r2,-8(fp)
 80032c0:	d0a71f05 	stb	r2,-25476(gp)
  optionList[1] = 0;
 80032c4:	d0271f45 	stb	zero,-25475(gp)
  dhcpCustomOptionList = optionList;
 80032c8:	d0a71f04 	addi	r2,gp,-25476
 80032cc:	d0a71d15 	stw	r2,-25484(gp)
  dhcpCustomOptionCallback = callback;
 80032d0:	e0bfff17 	ldw	r2,-4(fp)
 80032d4:	d0a71e15 	stw	r2,-25480(gp)
}
 80032d8:	0001883a 	nop
 80032dc:	e037883a 	mov	sp,fp
 80032e0:	df000017 	ldw	fp,0(sp)
 80032e4:	dec00104 	addi	sp,sp,4
 80032e8:	f800283a 	ret

080032ec <_ZN9EtherCard21dhcpAddOptionCallbackEPhPFvhPKhhE>:

void EtherCard::dhcpAddOptionCallback(uint8_t *optionlist,
                                      DhcpOptionCallback callback) {
 80032ec:	defffd04 	addi	sp,sp,-12
 80032f0:	df000215 	stw	fp,8(sp)
 80032f4:	df000204 	addi	fp,sp,8
 80032f8:	e13ffe15 	stw	r4,-8(fp)
 80032fc:	e17fff15 	stw	r5,-4(fp)
  dhcpCustomOptionList = optionlist;
 8003300:	e0bffe17 	ldw	r2,-8(fp)
 8003304:	d0a71d15 	stw	r2,-25484(gp)
  dhcpCustomOptionCallback = callback;
 8003308:	e0bfff17 	ldw	r2,-4(fp)
 800330c:	d0a71e15 	stw	r2,-25480(gp)
}
 8003310:	0001883a 	nop
 8003314:	e037883a 	mov	sp,fp
 8003318:	df000017 	ldw	fp,0(sp)
 800331c:	dec00104 	addi	sp,sp,4
 8003320:	f800283a 	ret

08003324 <_ZN9EtherCard16DhcpStateMachineEt>:

void EtherCard::DhcpStateMachine(uint16_t len) {
 8003324:	defffc04 	addi	sp,sp,-16
 8003328:	dfc00315 	stw	ra,12(sp)
 800332c:	df000215 	stw	fp,8(sp)
 8003330:	df000204 	addi	fp,sp,8
 8003334:	2005883a 	mov	r2,r4
 8003338:	e0bfff0d 	sth	r2,-4(fp)
    printf("Renew\n");
    break;
  }
#endif

  switch (dhcpState) {
 800333c:	d0a71703 	ldbu	r2,-25508(gp)
 8003340:	10803fcc 	andi	r2,r2,255
 8003344:	10c00168 	cmpgeui	r3,r2,5
 8003348:	18006c1e 	bne	r3,zero,80034fc <_ZN9EtherCard16DhcpStateMachineEt+0x1d8>
 800334c:	100690ba 	slli	r3,r2,2
 8003350:	00820034 	movhi	r2,2048
 8003354:	108cd904 	addi	r2,r2,13156
 8003358:	1885883a 	add	r2,r3,r2
 800335c:	10800017 	ldw	r2,0(r2)
 8003360:	1000683a 	jmp	r2
 8003364:	080033cc 	andi	zero,at,207
 8003368:	08003408 	cmpgei	zero,at,208
 800336c:	08003470 	cmpltui	zero,at,209
 8003370:	08003378 	rdprs	zero,at,205
 8003374:	08003470 	cmpltui	zero,at,209

  case DHCP_STATE_BOUND:
    //!@todo Due to millis() wrap-around, DHCP renewal may not work if leaseTime
    //!is larger than 49days
    if (leaseTime != DHCP_INFINITE_LEASE &&
 8003378:	d0a71b17 	ldw	r2,-25492(gp)
 800337c:	10bfffe0 	cmpeqi	r2,r2,-1
 8003380:	1000081e 	bne	r2,zero,80033a4 <_ZN9EtherCard16DhcpStateMachineEt+0x80>
        millis() - leaseStart >= leaseTime) {
 8003384:	80027e40 	call	80027e4 <_Z6millisv>
 8003388:	1007883a 	mov	r3,r2
 800338c:	d0a71a17 	ldw	r2,-25496(gp)
 8003390:	1887c83a 	sub	r3,r3,r2
 8003394:	d0a71b17 	ldw	r2,-25492(gp)
  switch (dhcpState) {

  case DHCP_STATE_BOUND:
    //!@todo Due to millis() wrap-around, DHCP renewal may not work if leaseTime
    //!is larger than 49days
    if (leaseTime != DHCP_INFINITE_LEASE &&
 8003398:	18800236 	bltu	r3,r2,80033a4 <_ZN9EtherCard16DhcpStateMachineEt+0x80>
 800339c:	00800044 	movi	r2,1
 80033a0:	00000106 	br	80033a8 <_ZN9EtherCard16DhcpStateMachineEt+0x84>
 80033a4:	0005883a 	mov	r2,zero
 80033a8:	10803fcc 	andi	r2,r2,255
 80033ac:	10004e26 	beq	r2,zero,80034e8 <_ZN9EtherCard16DhcpStateMachineEt+0x1c4>
        millis() - leaseStart >= leaseTime) {
      send_dhcp_message(myip);
 80033b0:	d1270e44 	addi	r4,gp,-25543
 80033b4:	800291c0 	call	800291c <_ZL17send_dhcp_messagePh>
      dhcpState = DHCP_STATE_RENEWING;
 80033b8:	00800104 	movi	r2,4
 80033bc:	d0a71705 	stb	r2,-25508(gp)
      stateTimer = millis();
 80033c0:	80027e40 	call	80027e4 <_Z6millisv>
 80033c4:	d0a71915 	stw	r2,-25500(gp)
    }
    break;
 80033c8:	00004706 	br	80034e8 <_ZN9EtherCard16DhcpStateMachineEt+0x1c4>

  case DHCP_STATE_INIT:
    currentXid = millis();
 80033cc:	80027e40 	call	80027e4 <_Z6millisv>
 80033d0:	d0a71815 	stw	r2,-25504(gp)
    memset(myip, 0, IP_LEN); // force ip 0.0.0.0
 80033d4:	01800104 	movi	r6,4
 80033d8:	000b883a 	mov	r5,zero
 80033dc:	d1270e44 	addi	r4,gp,-25543
 80033e0:	800ac500 	call	800ac50 <memset>
    send_dhcp_message(NULL);
 80033e4:	0009883a 	mov	r4,zero
 80033e8:	800291c0 	call	800291c <_ZL17send_dhcp_messagePh>
    enableBroadcast(true); // Temporarily enable broadcasts
 80033ec:	01000044 	movi	r4,1
 80033f0:	80046140 	call	8004614 <_ZN8ENC28J6015enableBroadcastEb>
    dhcpState = DHCP_STATE_SELECTING;
 80033f4:	00800044 	movi	r2,1
 80033f8:	d0a71705 	stb	r2,-25508(gp)
    stateTimer = millis();
 80033fc:	80027e40 	call	80027e4 <_Z6millisv>
 8003400:	d0a71915 	stw	r2,-25500(gp)
    break;
 8003404:	00003d06 	br	80034fc <_ZN9EtherCard16DhcpStateMachineEt+0x1d8>

  case DHCP_STATE_SELECTING:
    if (dhcp_received_message_type(len, DHCP_OFFER)) {
 8003408:	e0bfff0b 	ldhu	r2,-4(fp)
 800340c:	01400084 	movi	r5,2
 8003410:	1009883a 	mov	r4,r2
 8003414:	8002f640 	call	8002f64 <_ZL26dhcp_received_message_typeth>
 8003418:	10803fcc 	andi	r2,r2,255
 800341c:	10000b26 	beq	r2,zero,800344c <_ZN9EtherCard16DhcpStateMachineEt+0x128>
      uint8_t offeredip[IP_LEN];
      process_dhcp_offer(len, offeredip);
 8003420:	e0bfff0b 	ldhu	r2,-4(fp)
 8003424:	e17ffe04 	addi	r5,fp,-8
 8003428:	1009883a 	mov	r4,r2
 800342c:	8002c800 	call	8002c80 <_ZL18process_dhcp_offertPh>
      send_dhcp_message(offeredip);
 8003430:	e13ffe04 	addi	r4,fp,-8
 8003434:	800291c0 	call	800291c <_ZL17send_dhcp_messagePh>
      dhcpState = DHCP_STATE_REQUESTING;
 8003438:	00800084 	movi	r2,2
 800343c:	d0a71705 	stb	r2,-25508(gp)
      stateTimer = millis();
 8003440:	80027e40 	call	80027e4 <_Z6millisv>
 8003444:	d0a71915 	stw	r2,-25500(gp)
    } else {
      if (millis() - stateTimer > DHCP_REQUEST_TIMEOUT) {
        dhcpState = DHCP_STATE_INIT;
      }
    }
    break;
 8003448:	00002906 	br	80034f0 <_ZN9EtherCard16DhcpStateMachineEt+0x1cc>
      process_dhcp_offer(len, offeredip);
      send_dhcp_message(offeredip);
      dhcpState = DHCP_STATE_REQUESTING;
      stateTimer = millis();
    } else {
      if (millis() - stateTimer > DHCP_REQUEST_TIMEOUT) {
 800344c:	80027e40 	call	80027e4 <_Z6millisv>
 8003450:	1007883a 	mov	r3,r2
 8003454:	d0a71917 	ldw	r2,-25500(gp)
 8003458:	1885c83a 	sub	r2,r3,r2
 800345c:	1089c468 	cmpgeui	r2,r2,10001
 8003460:	10803fcc 	andi	r2,r2,255
 8003464:	10002226 	beq	r2,zero,80034f0 <_ZN9EtherCard16DhcpStateMachineEt+0x1cc>
        dhcpState = DHCP_STATE_INIT;
 8003468:	d0271705 	stb	zero,-25508(gp)
      }
    }
    break;
 800346c:	00002006 	br	80034f0 <_ZN9EtherCard16DhcpStateMachineEt+0x1cc>

  case DHCP_STATE_REQUESTING:
  case DHCP_STATE_RENEWING:
    if (dhcp_received_message_type(len, DHCP_ACK)) {
 8003470:	e0bfff0b 	ldhu	r2,-4(fp)
 8003474:	01400144 	movi	r5,5
 8003478:	1009883a 	mov	r4,r2
 800347c:	8002f640 	call	8002f64 <_ZL26dhcp_received_message_typeth>
 8003480:	10803fcc 	andi	r2,r2,255
 8003484:	10000f26 	beq	r2,zero,80034c4 <_ZN9EtherCard16DhcpStateMachineEt+0x1a0>
      disableBroadcast(true); // Disable broadcast after temporary enable
 8003488:	01000044 	movi	r4,1
 800348c:	80046780 	call	8004678 <_ZN8ENC28J6016disableBroadcastEb>
      process_dhcp_ack(len);
 8003490:	e0bfff0b 	ldhu	r2,-4(fp)
 8003494:	1009883a 	mov	r4,r2
 8003498:	8002d540 	call	8002d54 <_ZL16process_dhcp_ackt>
      leaseStart = millis();
 800349c:	80027e40 	call	80027e4 <_Z6millisv>
 80034a0:	d0a71a15 	stw	r2,-25496(gp)
      if (gwip[0] != 0)
 80034a4:	d0a71143 	ldbu	r2,-25531(gp)
 80034a8:	10803fcc 	andi	r2,r2,255
 80034ac:	10000226 	beq	r2,zero,80034b8 <_ZN9EtherCard16DhcpStateMachineEt+0x194>
        setGwIp(gwip); // why is this? because it initiates an arp request
 80034b0:	d1271144 	addi	r4,gp,-25531
 80034b4:	80075e40 	call	80075e4 <_ZN9EtherCard7setGwIpEPKh>
      dhcpState = DHCP_STATE_BOUND;
 80034b8:	008000c4 	movi	r2,3
 80034bc:	d0a71705 	stb	r2,-25508(gp)
    } else {
      if (millis() - stateTimer > DHCP_REQUEST_TIMEOUT) {
        dhcpState = DHCP_STATE_INIT;
      }
    }
    break;
 80034c0:	00000d06 	br	80034f8 <_ZN9EtherCard16DhcpStateMachineEt+0x1d4>
      leaseStart = millis();
      if (gwip[0] != 0)
        setGwIp(gwip); // why is this? because it initiates an arp request
      dhcpState = DHCP_STATE_BOUND;
    } else {
      if (millis() - stateTimer > DHCP_REQUEST_TIMEOUT) {
 80034c4:	80027e40 	call	80027e4 <_Z6millisv>
 80034c8:	1007883a 	mov	r3,r2
 80034cc:	d0a71917 	ldw	r2,-25500(gp)
 80034d0:	1885c83a 	sub	r2,r3,r2
 80034d4:	1089c468 	cmpgeui	r2,r2,10001
 80034d8:	10803fcc 	andi	r2,r2,255
 80034dc:	10000626 	beq	r2,zero,80034f8 <_ZN9EtherCard16DhcpStateMachineEt+0x1d4>
        dhcpState = DHCP_STATE_INIT;
 80034e0:	d0271705 	stb	zero,-25508(gp)
      }
    }
    break;
 80034e4:	00000406 	br	80034f8 <_ZN9EtherCard16DhcpStateMachineEt+0x1d4>
        millis() - leaseStart >= leaseTime) {
      send_dhcp_message(myip);
      dhcpState = DHCP_STATE_RENEWING;
      stateTimer = millis();
    }
    break;
 80034e8:	0001883a 	nop
 80034ec:	00000306 	br	80034fc <_ZN9EtherCard16DhcpStateMachineEt+0x1d8>
    } else {
      if (millis() - stateTimer > DHCP_REQUEST_TIMEOUT) {
        dhcpState = DHCP_STATE_INIT;
      }
    }
    break;
 80034f0:	0001883a 	nop
 80034f4:	00000106 	br	80034fc <_ZN9EtherCard16DhcpStateMachineEt+0x1d8>
    } else {
      if (millis() - stateTimer > DHCP_REQUEST_TIMEOUT) {
        dhcpState = DHCP_STATE_INIT;
      }
    }
    break;
 80034f8:	0001883a 	nop
  }
}
 80034fc:	0001883a 	nop
 8003500:	e037883a 	mov	sp,fp
 8003504:	dfc00117 	ldw	ra,4(sp)
 8003508:	df000017 	ldw	fp,0(sp)
 800350c:	dec00204 	addi	sp,sp,8
 8003510:	f800283a 	ret

08003514 <_ZL10dnsRequestPKcb>:
#define DNSCLIENT_SRC_PORT_H 0xE0

#define DNS_TYPE_A 1
#define DNS_CLASS_IN 1

static void dnsRequest(const char *hostname, bool fromRam) {
 8003514:	defffa04 	addi	sp,sp,-24
 8003518:	dfc00515 	stw	ra,20(sp)
 800351c:	df000415 	stw	fp,16(sp)
 8003520:	df000404 	addi	fp,sp,16
 8003524:	e13ffe15 	stw	r4,-8(fp)
 8003528:	2805883a 	mov	r2,r5
 800352c:	e0bfff05 	stb	r2,-4(fp)
  ++dnstid_l; // increment for next request, finally wrap
 8003530:	d0a71f83 	ldbu	r2,-25474(gp)
 8003534:	10800044 	addi	r2,r2,1
 8003538:	d0a71f85 	stb	r2,-25474(gp)
  if (ether.dnsip[0] == 0)
 800353c:	d0a71343 	ldbu	r2,-25523(gp)
 8003540:	10803fcc 	andi	r2,r2,255
 8003544:	1000041e 	bne	r2,zero,8003558 <_ZL10dnsRequestPKcb+0x44>
    memset(ether.dnsip, 8, IP_LEN); // use 8.8.8.8 Google DNS as default
 8003548:	01800104 	movi	r6,4
 800354c:	01400204 	movi	r5,8
 8003550:	d1271344 	addi	r4,gp,-25523
 8003554:	800ac500 	call	800ac50 <memset>
  ether.udpPrepare((DNSCLIENT_SRC_PORT_H << 8) | dnstid_l, ether.dnsip,
 8003558:	d0a71f83 	ldbu	r2,-25474(gp)
 800355c:	10c03fcc 	andi	r3,r2,255
 8003560:	00b80004 	movi	r2,-8192
 8003564:	1884b03a 	or	r2,r3,r2
 8003568:	10bfffcc 	andi	r2,r2,65535
                   DNS_PORT);
 800356c:	01800d44 	movi	r6,53
 8003570:	d1671344 	addi	r5,gp,-25523
 8003574:	1009883a 	mov	r4,r2
 8003578:	8006f680 	call	8006f68 <_ZN9EtherCard10udpPrepareEtPKht>
  memset(gPB + UDP_DATA_P, 0, 12);
 800357c:	008200b4 	movhi	r2,2050
 8003580:	10b9a184 	addi	r2,r2,-6522
 8003584:	01800304 	movi	r6,12
 8003588:	000b883a 	mov	r5,zero
 800358c:	1009883a 	mov	r4,r2
 8003590:	800ac500 	call	800ac50 <memset>

  byte *p = gPB + UDP_DATA_P + 12;
 8003594:	008200b4 	movhi	r2,2050
 8003598:	10b9a484 	addi	r2,r2,-6510
 800359c:	e0bffc15 	stw	r2,-16(fp)
  char c;
  do {
    byte n = 0;
 80035a0:	e03ffd05 	stb	zero,-12(fp)
    for (;;) {
      //            c = fromRam ? *hostname : pgm_read_byte(hostname);
      c = *hostname;
 80035a4:	e0bffe17 	ldw	r2,-8(fp)
 80035a8:	10800003 	ldbu	r2,0(r2)
 80035ac:	e0bffd45 	stb	r2,-11(fp)
      ++hostname;
 80035b0:	e0bffe17 	ldw	r2,-8(fp)
 80035b4:	10800044 	addi	r2,r2,1
 80035b8:	e0bffe15 	stw	r2,-8(fp)
      if (c == '.' || c == 0)
 80035bc:	e0bffd47 	ldb	r2,-11(fp)
 80035c0:	10800ba0 	cmpeqi	r2,r2,46
 80035c4:	10000b1e 	bne	r2,zero,80035f4 <_ZL10dnsRequestPKcb+0xe0>
 80035c8:	e0bffd47 	ldb	r2,-11(fp)
 80035cc:	10000926 	beq	r2,zero,80035f4 <_ZL10dnsRequestPKcb+0xe0>
        break;
      p[++n] = c;
 80035d0:	e0bffd03 	ldbu	r2,-12(fp)
 80035d4:	10800044 	addi	r2,r2,1
 80035d8:	e0bffd05 	stb	r2,-12(fp)
 80035dc:	e0bffd03 	ldbu	r2,-12(fp)
 80035e0:	e0fffc17 	ldw	r3,-16(fp)
 80035e4:	1885883a 	add	r2,r3,r2
 80035e8:	e0fffd43 	ldbu	r3,-11(fp)
 80035ec:	10c00005 	stb	r3,0(r2)

  byte *p = gPB + UDP_DATA_P + 12;
  char c;
  do {
    byte n = 0;
    for (;;) {
 80035f0:	003fec06 	br	80035a4 <_ZL10dnsRequestPKcb+0x90>
      ++hostname;
      if (c == '.' || c == 0)
        break;
      p[++n] = c;
    }
    *p++ = n;
 80035f4:	e0bffc17 	ldw	r2,-16(fp)
 80035f8:	10c00044 	addi	r3,r2,1
 80035fc:	e0fffc15 	stw	r3,-16(fp)
 8003600:	e0fffd03 	ldbu	r3,-12(fp)
 8003604:	10c00005 	stb	r3,0(r2)
    p += n;
 8003608:	e0bffd03 	ldbu	r2,-12(fp)
 800360c:	e0fffc17 	ldw	r3,-16(fp)
 8003610:	1885883a 	add	r2,r3,r2
 8003614:	e0bffc15 	stw	r2,-16(fp)
  } while (c != 0);
 8003618:	e0bffd47 	ldb	r2,-11(fp)
 800361c:	10000126 	beq	r2,zero,8003624 <_ZL10dnsRequestPKcb+0x110>
                   DNS_PORT);
  memset(gPB + UDP_DATA_P, 0, 12);

  byte *p = gPB + UDP_DATA_P + 12;
  char c;
  do {
 8003620:	003fdf06 	br	80035a0 <_ZL10dnsRequestPKcb+0x8c>
    }
    *p++ = n;
    p += n;
  } while (c != 0);

  *p++ = 0; // terminate with zero, means root domain.
 8003624:	e0bffc17 	ldw	r2,-16(fp)
 8003628:	10c00044 	addi	r3,r2,1
 800362c:	e0fffc15 	stw	r3,-16(fp)
 8003630:	10000005 	stb	zero,0(r2)
  *p++ = 0;
 8003634:	e0bffc17 	ldw	r2,-16(fp)
 8003638:	10c00044 	addi	r3,r2,1
 800363c:	e0fffc15 	stw	r3,-16(fp)
 8003640:	10000005 	stb	zero,0(r2)
  *p++ = DNS_TYPE_A;
 8003644:	e0bffc17 	ldw	r2,-16(fp)
 8003648:	10c00044 	addi	r3,r2,1
 800364c:	e0fffc15 	stw	r3,-16(fp)
 8003650:	00c00044 	movi	r3,1
 8003654:	10c00005 	stb	r3,0(r2)
  *p++ = 0;
 8003658:	e0bffc17 	ldw	r2,-16(fp)
 800365c:	10c00044 	addi	r3,r2,1
 8003660:	e0fffc15 	stw	r3,-16(fp)
 8003664:	10000005 	stb	zero,0(r2)
  *p++ = DNS_CLASS_IN;
 8003668:	e0bffc17 	ldw	r2,-16(fp)
 800366c:	10c00044 	addi	r3,r2,1
 8003670:	e0fffc15 	stw	r3,-16(fp)
 8003674:	00c00044 	movi	r3,1
 8003678:	10c00005 	stb	r3,0(r2)
  byte i = p - gPB - UDP_DATA_P;
 800367c:	e0bffc17 	ldw	r2,-16(fp)
 8003680:	1007883a 	mov	r3,r2
 8003684:	008200b4 	movhi	r2,2050
 8003688:	10b99704 	addi	r2,r2,-6564
 800368c:	1009883a 	mov	r4,r2
 8003690:	00bff584 	movi	r2,-42
 8003694:	1105c83a 	sub	r2,r2,r4
 8003698:	1885883a 	add	r2,r3,r2
 800369c:	e0bffd85 	stb	r2,-10(fp)
  gPB[UDP_DATA_P] = i;
 80036a0:	008200b4 	movhi	r2,2050
 80036a4:	10b99704 	addi	r2,r2,-6564
 80036a8:	e0fffd83 	ldbu	r3,-10(fp)
 80036ac:	10c00a85 	stb	r3,42(r2)
  gPB[UDP_DATA_P + 1] = dnstid_l;
 80036b0:	d0e71f83 	ldbu	r3,-25474(gp)
 80036b4:	008200b4 	movhi	r2,2050
 80036b8:	10b99704 	addi	r2,r2,-6564
 80036bc:	10c00ac5 	stb	r3,43(r2)
  gPB[UDP_DATA_P + 2] = 1; // flags, standard recursive query
 80036c0:	008200b4 	movhi	r2,2050
 80036c4:	10b99704 	addi	r2,r2,-6564
 80036c8:	00c00044 	movi	r3,1
 80036cc:	10c00b05 	stb	r3,44(r2)
  gPB[UDP_DATA_P + 5] = 1; // 1 question
 80036d0:	008200b4 	movhi	r2,2050
 80036d4:	10b99704 	addi	r2,r2,-6564
 80036d8:	00c00044 	movi	r3,1
 80036dc:	10c00bc5 	stb	r3,47(r2)
  ether.udpTransmit(i);
 80036e0:	e0bffd83 	ldbu	r2,-10(fp)
 80036e4:	1009883a 	mov	r4,r2
 80036e8:	80070f00 	call	80070f0 <_ZN9EtherCard11udpTransmitEt>
}
 80036ec:	0001883a 	nop
 80036f0:	e037883a 	mov	sp,fp
 80036f4:	dfc00117 	ldw	ra,4(sp)
 80036f8:	df000017 	ldw	fp,0(sp)
 80036fc:	dec00204 	addi	sp,sp,8
 8003700:	f800283a 	ret

08003704 <_ZL17checkForDnsAnswert>:

static bool checkForDnsAnswer(uint16_t plen) {
 8003704:	defffc04 	addi	sp,sp,-16
 8003708:	dfc00315 	stw	ra,12(sp)
 800370c:	df000215 	stw	fp,8(sp)
 8003710:	df000204 	addi	fp,sp,8
 8003714:	2005883a 	mov	r2,r4
 8003718:	e0bfff0d 	sth	r2,-4(fp)
  byte *p = gPB + UDP_DATA_P;                           // start of UDP payload
 800371c:	008200b4 	movhi	r2,2050
 8003720:	10b9a184 	addi	r2,r2,-6522
 8003724:	e0bffe15 	stw	r2,-8(fp)
  if (plen < 70 || gPB[UDP_SRC_PORT_L_P] != DNS_PORT || // from DNS source port
 8003728:	e0bfff0b 	ldhu	r2,-4(fp)
 800372c:	108011b0 	cmpltui	r2,r2,70
 8003730:	10001a1e 	bne	r2,zero,800379c <_ZL17checkForDnsAnswert+0x98>
 8003734:	008200b4 	movhi	r2,2050
 8003738:	10b99704 	addi	r2,r2,-6564
 800373c:	108008c3 	ldbu	r2,35(r2)
 8003740:	10803fcc 	andi	r2,r2,255
 8003744:	10800d58 	cmpnei	r2,r2,53
 8003748:	1000141e 	bne	r2,zero,800379c <_ZL17checkForDnsAnswert+0x98>
      gPB[UDP_DST_PORT_H_P] !=
 800374c:	008200b4 	movhi	r2,2050
 8003750:	10b99704 	addi	r2,r2,-6564
 8003754:	10800903 	ldbu	r2,36(r2)
  ether.udpTransmit(i);
}

static bool checkForDnsAnswer(uint16_t plen) {
  byte *p = gPB + UDP_DATA_P;                           // start of UDP payload
  if (plen < 70 || gPB[UDP_SRC_PORT_L_P] != DNS_PORT || // from DNS source port
 8003758:	10803fcc 	andi	r2,r2,255
 800375c:	10803818 	cmpnei	r2,r2,224
 8003760:	10000e1e 	bne	r2,zero,800379c <_ZL17checkForDnsAnswert+0x98>
      gPB[UDP_DST_PORT_H_P] !=
          DNSCLIENT_SRC_PORT_H || // response to same port as we sent from (MSB)
      gPB[UDP_DST_PORT_L_P] !=
 8003764:	008200b4 	movhi	r2,2050
 8003768:	10b99704 	addi	r2,r2,-6564
 800376c:	10c00943 	ldbu	r3,37(r2)
 8003770:	d0a71f83 	ldbu	r2,-25474(gp)

static bool checkForDnsAnswer(uint16_t plen) {
  byte *p = gPB + UDP_DATA_P;                           // start of UDP payload
  if (plen < 70 || gPB[UDP_SRC_PORT_L_P] != DNS_PORT || // from DNS source port
      gPB[UDP_DST_PORT_H_P] !=
          DNSCLIENT_SRC_PORT_H || // response to same port as we sent from (MSB)
 8003774:	18c03fcc 	andi	r3,r3,255
 8003778:	10803fcc 	andi	r2,r2,255
 800377c:	1880071e 	bne	r3,r2,800379c <_ZL17checkForDnsAnswert+0x98>
      gPB[UDP_DST_PORT_L_P] !=
          dnstid_l ||   // response to same port as we sent from (LSB)
      p[1] != dnstid_l) // message id same as we sent
 8003780:	e0bffe17 	ldw	r2,-8(fp)
 8003784:	10800044 	addi	r2,r2,1
 8003788:	10c00003 	ldbu	r3,0(r2)
 800378c:	d0a71f83 	ldbu	r2,-25474(gp)
  byte *p = gPB + UDP_DATA_P;                           // start of UDP payload
  if (plen < 70 || gPB[UDP_SRC_PORT_L_P] != DNS_PORT || // from DNS source port
      gPB[UDP_DST_PORT_H_P] !=
          DNSCLIENT_SRC_PORT_H || // response to same port as we sent from (MSB)
      gPB[UDP_DST_PORT_L_P] !=
          dnstid_l ||   // response to same port as we sent from (LSB)
 8003790:	18c03fcc 	andi	r3,r3,255
 8003794:	10803fcc 	andi	r2,r2,255
 8003798:	18800226 	beq	r3,r2,80037a4 <_ZL17checkForDnsAnswert+0xa0>
      p[1] != dnstid_l) // message id same as we sent
    return false;       // not our DNS response
 800379c:	0005883a 	mov	r2,zero
 80037a0:	00004d06 	br	80038d8 <_ZL17checkForDnsAnswert+0x1d4>
  if ((p[3] & 0x0F) != 0)
 80037a4:	e0bffe17 	ldw	r2,-8(fp)
 80037a8:	108000c4 	addi	r2,r2,3
 80037ac:	10800003 	ldbu	r2,0(r2)
 80037b0:	10803fcc 	andi	r2,r2,255
 80037b4:	108003cc 	andi	r2,r2,15
 80037b8:	10000226 	beq	r2,zero,80037c4 <_ZL17checkForDnsAnswert+0xc0>
    return true; // DNS response received with error
 80037bc:	00800044 	movi	r2,1
 80037c0:	00004506 	br	80038d8 <_ZL17checkForDnsAnswert+0x1d4>

  p += *p; // we encoded the query len into tid
 80037c4:	e0bffe17 	ldw	r2,-8(fp)
 80037c8:	10800003 	ldbu	r2,0(r2)
 80037cc:	10803fcc 	andi	r2,r2,255
 80037d0:	e0fffe17 	ldw	r3,-8(fp)
 80037d4:	1885883a 	add	r2,r3,r2
 80037d8:	e0bffe15 	stw	r2,-8(fp)
  for (;;) {
    if (*p & 0xC0)
 80037dc:	e0bffe17 	ldw	r2,-8(fp)
 80037e0:	10800003 	ldbu	r2,0(r2)
 80037e4:	10803fcc 	andi	r2,r2,255
 80037e8:	1080300c 	andi	r2,r2,192
 80037ec:	10000426 	beq	r2,zero,8003800 <_ZL17checkForDnsAnswert+0xfc>
      p += 2;
 80037f0:	e0bffe17 	ldw	r2,-8(fp)
 80037f4:	10800084 	addi	r2,r2,2
 80037f8:	e0bffe15 	stw	r2,-8(fp)
 80037fc:	00001206 	br	8003848 <_ZL17checkForDnsAnswert+0x144>
    else
      while (++p < gPB + plen) {
 8003800:	e0bffe17 	ldw	r2,-8(fp)
 8003804:	10800044 	addi	r2,r2,1
 8003808:	e0bffe15 	stw	r2,-8(fp)
 800380c:	e0ffff0b 	ldhu	r3,-4(fp)
 8003810:	008200b4 	movhi	r2,2050
 8003814:	10b99704 	addi	r2,r2,-6564
 8003818:	1885883a 	add	r2,r3,r2
 800381c:	e0fffe17 	ldw	r3,-8(fp)
 8003820:	1885803a 	cmpltu	r2,r3,r2
 8003824:	10803fcc 	andi	r2,r2,255
 8003828:	10000726 	beq	r2,zero,8003848 <_ZL17checkForDnsAnswert+0x144>
        if (*p == 0) {
 800382c:	e0bffe17 	ldw	r2,-8(fp)
 8003830:	10800003 	ldbu	r2,0(r2)
 8003834:	10803fcc 	andi	r2,r2,255
 8003838:	103ff11e 	bne	r2,zero,8003800 <_ZL17checkForDnsAnswert+0xfc>
          ++p;
 800383c:	e0bffe17 	ldw	r2,-8(fp)
 8003840:	10800044 	addi	r2,r2,1
 8003844:	e0bffe15 	stw	r2,-8(fp)
          break;
        }
      }
    if (p + 14 > gPB + plen)
 8003848:	e0bffe17 	ldw	r2,-8(fp)
 800384c:	10c00384 	addi	r3,r2,14
 8003850:	e13fff0b 	ldhu	r4,-4(fp)
 8003854:	008200b4 	movhi	r2,2050
 8003858:	10b99704 	addi	r2,r2,-6564
 800385c:	2085883a 	add	r2,r4,r2
 8003860:	10c01b36 	bltu	r2,r3,80038d0 <_ZL17checkForDnsAnswert+0x1cc>
      break;
    if (p[1] == DNS_TYPE_A && p[9] == 4) { // type "A" and IPv4
 8003864:	e0bffe17 	ldw	r2,-8(fp)
 8003868:	10800044 	addi	r2,r2,1
 800386c:	10800003 	ldbu	r2,0(r2)
 8003870:	10803fcc 	andi	r2,r2,255
 8003874:	10800058 	cmpnei	r2,r2,1
 8003878:	10000c1e 	bne	r2,zero,80038ac <_ZL17checkForDnsAnswert+0x1a8>
 800387c:	e0bffe17 	ldw	r2,-8(fp)
 8003880:	10800244 	addi	r2,r2,9
 8003884:	10800003 	ldbu	r2,0(r2)
 8003888:	10803fcc 	andi	r2,r2,255
 800388c:	10800118 	cmpnei	r2,r2,4
 8003890:	1000061e 	bne	r2,zero,80038ac <_ZL17checkForDnsAnswert+0x1a8>
      ether.copyIp(ether.hisip, p + 10);
 8003894:	e0bffe17 	ldw	r2,-8(fp)
 8003898:	10800284 	addi	r2,r2,10
 800389c:	100b883a 	mov	r5,r2
 80038a0:	d1271444 	addi	r4,gp,-25519
 80038a4:	8008db00 	call	8008db0 <_ZN9EtherCard6copyIpEPhPKh>
      break;
 80038a8:	00000a06 	br	80038d4 <_ZL17checkForDnsAnswert+0x1d0>
    }
    p += p[9] + 10;
 80038ac:	e0bffe17 	ldw	r2,-8(fp)
 80038b0:	10800244 	addi	r2,r2,9
 80038b4:	10800003 	ldbu	r2,0(r2)
 80038b8:	10803fcc 	andi	r2,r2,255
 80038bc:	10800284 	addi	r2,r2,10
 80038c0:	e0fffe17 	ldw	r3,-8(fp)
 80038c4:	1885883a 	add	r2,r3,r2
 80038c8:	e0bffe15 	stw	r2,-8(fp)
    return false;       // not our DNS response
  if ((p[3] & 0x0F) != 0)
    return true; // DNS response received with error

  p += *p; // we encoded the query len into tid
  for (;;) {
 80038cc:	003fc306 	br	80037dc <_ZL17checkForDnsAnswert+0xd8>
          ++p;
          break;
        }
      }
    if (p + 14 > gPB + plen)
      break;
 80038d0:	0001883a 	nop
      ether.copyIp(ether.hisip, p + 10);
      break;
    }
    p += p[9] + 10;
  }
  return false; // No error
 80038d4:	0005883a 	mov	r2,zero
}
 80038d8:	e037883a 	mov	sp,fp
 80038dc:	dfc00117 	ldw	ra,4(sp)
 80038e0:	df000017 	ldw	fp,0(sp)
 80038e4:	dec00204 	addi	sp,sp,8
 80038e8:	f800283a 	ret

080038ec <_ZN9EtherCard9dnsLookupEPKcb>:

bool EtherCard::dnsLookup(const char *name, bool fromRam) {
 80038ec:	defffb04 	addi	sp,sp,-20
 80038f0:	dfc00415 	stw	ra,16(sp)
 80038f4:	df000315 	stw	fp,12(sp)
 80038f8:	df000304 	addi	fp,sp,12
 80038fc:	e13ffe15 	stw	r4,-8(fp)
 8003900:	2805883a 	mov	r2,r5
 8003904:	e0bfff05 	stb	r2,-4(fp)
  uint16_t start = clock();
 8003908:	800a1a00 	call	800a1a0 <clock>
 800390c:	e0bffd0d 	sth	r2,-12(fp)

  while (!isLinkUp()) {
 8003910:	80041140 	call	8004114 <_ZN8ENC28J608isLinkUpEv>
 8003914:	1080005c 	xori	r2,r2,1
 8003918:	10803fcc 	andi	r2,r2,255
 800391c:	10000926 	beq	r2,zero,8003944 <_ZN9EtherCard9dnsLookupEPKcb+0x58>
    if (uint16_t(clock()) - start >= 30000) {
 8003920:	800a1a00 	call	800a1a0 <clock>
 8003924:	10ffffcc 	andi	r3,r2,65535
 8003928:	e0bffd0b 	ldhu	r2,-12(fp)
 800392c:	1885c83a 	sub	r2,r3,r2
 8003930:	109d4c08 	cmpgei	r2,r2,30000
 8003934:	10803fcc 	andi	r2,r2,255
 8003938:	103ff526 	beq	r2,zero,8003910 <_ZN9EtherCard9dnsLookupEPKcb+0x24>
      return false; // timeout waiting for link
 800393c:	0005883a 	mov	r2,zero
 8003940:	00003f06 	br	8003a40 <_ZN9EtherCard9dnsLookupEPKcb+0x154>
    }
  }
  while (clientWaitingDns()) {
 8003944:	80074ec0 	call	80074ec <_ZN9EtherCard16clientWaitingDnsEv>
 8003948:	10803fcc 	andi	r2,r2,255
 800394c:	1004c03a 	cmpne	r2,r2,zero
 8003950:	10803fcc 	andi	r2,r2,255
 8003954:	10000d26 	beq	r2,zero,800398c <_ZN9EtherCard9dnsLookupEPKcb+0xa0>
    packetLoop(packetReceive());
 8003958:	800437c0 	call	800437c <_ZN8ENC28J6013packetReceiveEv>
 800395c:	10bfffcc 	andi	r2,r2,65535
 8003960:	1009883a 	mov	r4,r2
 8003964:	80080340 	call	8008034 <_ZN9EtherCard10packetLoopEt>
    if (uint16_t(clock()) - start >= 30000) {
 8003968:	800a1a00 	call	800a1a0 <clock>
 800396c:	10ffffcc 	andi	r3,r2,65535
 8003970:	e0bffd0b 	ldhu	r2,-12(fp)
 8003974:	1885c83a 	sub	r2,r3,r2
 8003978:	109d4c08 	cmpgei	r2,r2,30000
 800397c:	10803fcc 	andi	r2,r2,255
 8003980:	103ff026 	beq	r2,zero,8003944 <_ZN9EtherCard9dnsLookupEPKcb+0x58>
      return false; // timeout waiting for gateway ARP
 8003984:	0005883a 	mov	r2,zero
 8003988:	00002d06 	br	8003a40 <_ZN9EtherCard9dnsLookupEPKcb+0x154>
    }
  }

  memset(hisip, 0, IP_LEN);
 800398c:	01800104 	movi	r6,4
 8003990:	000b883a 	mov	r5,zero
 8003994:	d1271444 	addi	r4,gp,-25519
 8003998:	800ac500 	call	800ac50 <memset>
  dnsRequest(name, fromRam);
 800399c:	e0bfff03 	ldbu	r2,-4(fp)
 80039a0:	100b883a 	mov	r5,r2
 80039a4:	e13ffe17 	ldw	r4,-8(fp)
 80039a8:	80035140 	call	8003514 <_ZL10dnsRequestPKcb>

  start = time(NULL);
 80039ac:	0009883a 	mov	r4,zero
 80039b0:	800b2ec0 	call	800b2ec <time>
 80039b4:	e0bffd0d 	sth	r2,-12(fp)
  while (hisip[0] == 0) {
 80039b8:	d0a71443 	ldbu	r2,-25519(gp)
 80039bc:	10803fcc 	andi	r2,r2,255
 80039c0:	10001e1e 	bne	r2,zero,8003a3c <_ZN9EtherCard9dnsLookupEPKcb+0x150>
    if (uint16_t(clock()) - start >= 30000)
 80039c4:	800a1a00 	call	800a1a0 <clock>
 80039c8:	10ffffcc 	andi	r3,r2,65535
 80039cc:	e0bffd0b 	ldhu	r2,-12(fp)
 80039d0:	1885c83a 	sub	r2,r3,r2
 80039d4:	109d4c08 	cmpgei	r2,r2,30000
 80039d8:	10803fcc 	andi	r2,r2,255
 80039dc:	10000226 	beq	r2,zero,80039e8 <_ZN9EtherCard9dnsLookupEPKcb+0xfc>
      return false; // timeout waiting for dns response
 80039e0:	0005883a 	mov	r2,zero
 80039e4:	00001606 	br	8003a40 <_ZN9EtherCard9dnsLookupEPKcb+0x154>
    uint16_t len = packetReceive();
 80039e8:	800437c0 	call	800437c <_ZN8ENC28J6013packetReceiveEv>
 80039ec:	e0bffd8d 	sth	r2,-10(fp)
    if (len > 0 &&
 80039f0:	e0bffd8b 	ldhu	r2,-10(fp)
 80039f4:	10000726 	beq	r2,zero,8003a14 <_ZN9EtherCard9dnsLookupEPKcb+0x128>
        packetLoop(len) == 0) // packet not handled by tcp/ip packet loop
 80039f8:	e0bffd8b 	ldhu	r2,-10(fp)
 80039fc:	1009883a 	mov	r4,r2
 8003a00:	80080340 	call	8008034 <_ZN9EtherCard10packetLoopEt>
  start = time(NULL);
  while (hisip[0] == 0) {
    if (uint16_t(clock()) - start >= 30000)
      return false; // timeout waiting for dns response
    uint16_t len = packetReceive();
    if (len > 0 &&
 8003a04:	10bfffcc 	andi	r2,r2,65535
 8003a08:	1000021e 	bne	r2,zero,8003a14 <_ZN9EtherCard9dnsLookupEPKcb+0x128>
 8003a0c:	00800044 	movi	r2,1
 8003a10:	00000106 	br	8003a18 <_ZN9EtherCard9dnsLookupEPKcb+0x12c>
 8003a14:	0005883a 	mov	r2,zero
 8003a18:	10803fcc 	andi	r2,r2,255
 8003a1c:	103fe626 	beq	r2,zero,80039b8 <_ZN9EtherCard9dnsLookupEPKcb+0xcc>
        packetLoop(len) == 0) // packet not handled by tcp/ip packet loop
      if (checkForDnsAnswer(len))
 8003a20:	e0bffd8b 	ldhu	r2,-10(fp)
 8003a24:	1009883a 	mov	r4,r2
 8003a28:	80037040 	call	8003704 <_ZL17checkForDnsAnswert>
 8003a2c:	10803fcc 	andi	r2,r2,255
 8003a30:	103fe126 	beq	r2,zero,80039b8 <_ZN9EtherCard9dnsLookupEPKcb+0xcc>
        return false; // DNS response received with error
 8003a34:	0005883a 	mov	r2,zero
 8003a38:	00000106 	br	8003a40 <_ZN9EtherCard9dnsLookupEPKcb+0x154>
  }

  return true;
 8003a3c:	00800044 	movi	r2,1
}
 8003a40:	e037883a 	mov	sp,fp
 8003a44:	dfc00117 	ldw	ra,4(sp)
 8003a48:	df000017 	ldw	fp,0(sp)
 8003a4c:	dec00204 	addi	sp,sp,8
 8003a50:	f800283a 	ret

08003a54 <_Z5delayi>:

struct transmit_status_vector {
  uint8_t bytes[7];
};

void delay(int milli_seconds) {
 8003a54:	defffc04 	addi	sp,sp,-16
 8003a58:	dfc00315 	stw	ra,12(sp)
 8003a5c:	df000215 	stw	fp,8(sp)
 8003a60:	df000204 	addi	fp,sp,8
 8003a64:	e13fff15 	stw	r4,-4(fp)
  // Converting time into milli_seconds
  // Storing start time
  clock_t start_time = clock();
 8003a68:	800a1a00 	call	800a1a0 <clock>
 8003a6c:	e0bffe15 	stw	r2,-8(fp)

  // looping till required time is not achieved
  while (clock() < start_time + milli_seconds)
 8003a70:	800a1a00 	call	800a1a0 <clock>
 8003a74:	1009883a 	mov	r4,r2
 8003a78:	e0ffff17 	ldw	r3,-4(fp)
 8003a7c:	e0bffe17 	ldw	r2,-8(fp)
 8003a80:	1885883a 	add	r2,r3,r2
 8003a84:	2085803a 	cmpltu	r2,r4,r2
 8003a88:	10803fcc 	andi	r2,r2,255
 8003a8c:	10000126 	beq	r2,zero,8003a94 <_Z5delayi+0x40>
 8003a90:	003ff706 	br	8003a70 <_Z5delayi+0x1c>
    ;
}
 8003a94:	0001883a 	nop
 8003a98:	e037883a 	mov	sp,fp
 8003a9c:	dfc00117 	ldw	ra,4(sp)
 8003aa0:	df000017 	ldw	fp,0(sp)
 8003aa4:	dec00204 	addi	sp,sp,8
 8003aa8:	f800283a 	ret

08003aac <_ZL7writeOphhh>:

static void writeOp(uint8_t op, uint8_t address, uint8_t data) {
 8003aac:	defff704 	addi	sp,sp,-36
 8003ab0:	dfc00815 	stw	ra,32(sp)
 8003ab4:	df000715 	stw	fp,28(sp)
 8003ab8:	df000704 	addi	fp,sp,28
 8003abc:	2807883a 	mov	r3,r5
 8003ac0:	3005883a 	mov	r2,r6
 8003ac4:	e13ffd05 	stb	r4,-12(fp)
 8003ac8:	e0fffe05 	stb	r3,-8(fp)
 8003acc:	e0bfff05 	stb	r2,-4(fp)
  uint8_t send_data[2];
  send_data[0] = op | (address & ADDR_MASK);
 8003ad0:	e0bffe03 	ldbu	r2,-8(fp)
 8003ad4:	108007cc 	andi	r2,r2,31
 8003ad8:	1007883a 	mov	r3,r2
 8003adc:	e0bffd03 	ldbu	r2,-12(fp)
 8003ae0:	1884b03a 	or	r2,r3,r2
 8003ae4:	e0bffc05 	stb	r2,-16(fp)
  send_data[1] = data;
 8003ae8:	e0bfff03 	ldbu	r2,-4(fp)
 8003aec:	e0bffc45 	stb	r2,-15(fp)
  alt_avalon_spi_command(SPI_0_BASE, ETHERNET_CHIP_SLAVE,
                         2,         // write one byte
                         send_data, // write data
                         0,         // Read one byte
                         0,         // read into SPDR
                         0);        // no flags
 8003af0:	d8000215 	stw	zero,8(sp)
 8003af4:	d8000115 	stw	zero,4(sp)
 8003af8:	d8000015 	stw	zero,0(sp)
 8003afc:	e1fffc04 	addi	r7,fp,-16
 8003b00:	01800084 	movi	r6,2
 8003b04:	000b883a 	mov	r5,zero
 8003b08:	01000074 	movhi	r4,1
 8003b0c:	21042804 	addi	r4,r4,4256
 8003b10:	8018f900 	call	8018f90 <alt_avalon_spi_command>
}
 8003b14:	0001883a 	nop
 8003b18:	e037883a 	mov	sp,fp
 8003b1c:	dfc00117 	ldw	ra,4(sp)
 8003b20:	df000017 	ldw	fp,0(sp)
 8003b24:	dec00204 	addi	sp,sp,8
 8003b28:	f800283a 	ret

08003b2c <_ZL6readOphh>:

static uint8_t readOp(uint8_t op, uint8_t address) {
 8003b2c:	defff804 	addi	sp,sp,-32
 8003b30:	dfc00715 	stw	ra,28(sp)
 8003b34:	df000615 	stw	fp,24(sp)
 8003b38:	df000604 	addi	fp,sp,24
 8003b3c:	2007883a 	mov	r3,r4
 8003b40:	2805883a 	mov	r2,r5
 8003b44:	e0fffe05 	stb	r3,-8(fp)
 8003b48:	e0bfff05 	stb	r2,-4(fp)
  uint8_t send_data[1];
  send_data[0] = op | (address & ADDR_MASK);
 8003b4c:	e0bfff03 	ldbu	r2,-4(fp)
 8003b50:	108007cc 	andi	r2,r2,31
 8003b54:	1007883a 	mov	r3,r2
 8003b58:	e0bffe03 	ldbu	r2,-8(fp)
 8003b5c:	1884b03a 	or	r2,r3,r2
 8003b60:	e0bffd05 	stb	r2,-12(fp)

  if (address & 0x80) {
 8003b64:	e0bfff03 	ldbu	r2,-4(fp)
 8003b68:	10803fcc 	andi	r2,r2,255
 8003b6c:	1080201c 	xori	r2,r2,128
 8003b70:	10bfe004 	addi	r2,r2,-128
 8003b74:	10000d0e 	bge	r2,zero,8003bac <_ZL6readOphh+0x80>
    alt_avalon_spi_command(SPI_0_BASE, ETHERNET_CHIP_SLAVE,
                           1,            // write one byte
                           send_data,    // write data
                           2,            // Read one byte
                           recieve_data, // read into SPDR
                           0);           // no flags
 8003b78:	d8000215 	stw	zero,8(sp)
 8003b7c:	e0bffd44 	addi	r2,fp,-11
 8003b80:	d8800115 	stw	r2,4(sp)
 8003b84:	00800084 	movi	r2,2
 8003b88:	d8800015 	stw	r2,0(sp)
 8003b8c:	e1fffd04 	addi	r7,fp,-12
 8003b90:	01800044 	movi	r6,1
 8003b94:	000b883a 	mov	r5,zero
 8003b98:	01000074 	movhi	r4,1
 8003b9c:	21042804 	addi	r4,r4,4256
 8003ba0:	8018f900 	call	8018f90 <alt_avalon_spi_command>
    return recieve_data[1];
 8003ba4:	e0bffd83 	ldbu	r2,-10(fp)
 8003ba8:	00000c06 	br	8003bdc <_ZL6readOphh+0xb0>
    alt_avalon_spi_command(SPI_0_BASE, ETHERNET_CHIP_SLAVE,
                           1,            // write one byte
                           send_data,    // write data
                           1,            // Read one byte
                           recieve_data, // read into SPDR
                           0);           // no flags
 8003bac:	d8000215 	stw	zero,8(sp)
 8003bb0:	e0bffdc4 	addi	r2,fp,-9
 8003bb4:	d8800115 	stw	r2,4(sp)
 8003bb8:	00800044 	movi	r2,1
 8003bbc:	d8800015 	stw	r2,0(sp)
 8003bc0:	e1fffd04 	addi	r7,fp,-12
 8003bc4:	01800044 	movi	r6,1
 8003bc8:	000b883a 	mov	r5,zero
 8003bcc:	01000074 	movhi	r4,1
 8003bd0:	21042804 	addi	r4,r4,4256
 8003bd4:	8018f900 	call	8018f90 <alt_avalon_spi_command>
    return recieve_data[0];
 8003bd8:	e0bffdc3 	ldbu	r2,-9(fp)
  }

  return 0;
}
 8003bdc:	e037883a 	mov	sp,fp
 8003be0:	dfc00117 	ldw	ra,4(sp)
 8003be4:	df000017 	ldw	fp,0(sp)
 8003be8:	dec00204 	addi	sp,sp,8
 8003bec:	f800283a 	ret

08003bf0 <_ZL7SetBankh>:

static void SetBank(uint8_t address) {
 8003bf0:	defffd04 	addi	sp,sp,-12
 8003bf4:	dfc00215 	stw	ra,8(sp)
 8003bf8:	df000115 	stw	fp,4(sp)
 8003bfc:	df000104 	addi	fp,sp,4
 8003c00:	2005883a 	mov	r2,r4
 8003c04:	e0bfff05 	stb	r2,-4(fp)
  if ((address & BANK_MASK) != Enc28j60Bank) {
 8003c08:	e0bfff03 	ldbu	r2,-4(fp)
 8003c0c:	10c0180c 	andi	r3,r2,96
 8003c10:	d0a72103 	ldbu	r2,-25468(gp)
 8003c14:	10803fcc 	andi	r2,r2,255
 8003c18:	18800f26 	beq	r3,r2,8003c58 <_ZL7SetBankh+0x68>
    writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1 | ECON1_BSEL0);
 8003c1c:	018000c4 	movi	r6,3
 8003c20:	014007c4 	movi	r5,31
 8003c24:	01002804 	movi	r4,160
 8003c28:	8003aac0 	call	8003aac <_ZL7writeOphhh>
    Enc28j60Bank = address & BANK_MASK;
 8003c2c:	e0bfff03 	ldbu	r2,-4(fp)
 8003c30:	1080180c 	andi	r2,r2,96
 8003c34:	d0a72105 	stb	r2,-25468(gp)
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank >> 5);
 8003c38:	d0a72103 	ldbu	r2,-25468(gp)
 8003c3c:	10803fcc 	andi	r2,r2,255
 8003c40:	1005d17a 	srai	r2,r2,5
 8003c44:	10803fcc 	andi	r2,r2,255
 8003c48:	100d883a 	mov	r6,r2
 8003c4c:	014007c4 	movi	r5,31
 8003c50:	01002004 	movi	r4,128
 8003c54:	8003aac0 	call	8003aac <_ZL7writeOphhh>
  }
}
 8003c58:	0001883a 	nop
 8003c5c:	e037883a 	mov	sp,fp
 8003c60:	dfc00117 	ldw	ra,4(sp)
 8003c64:	df000017 	ldw	fp,0(sp)
 8003c68:	dec00204 	addi	sp,sp,8
 8003c6c:	f800283a 	ret

08003c70 <_ZL12writeRegBytehh>:

static void writeRegByte(uint8_t address, uint8_t data) {
 8003c70:	defffc04 	addi	sp,sp,-16
 8003c74:	dfc00315 	stw	ra,12(sp)
 8003c78:	df000215 	stw	fp,8(sp)
 8003c7c:	df000204 	addi	fp,sp,8
 8003c80:	2007883a 	mov	r3,r4
 8003c84:	2805883a 	mov	r2,r5
 8003c88:	e0fffe05 	stb	r3,-8(fp)
 8003c8c:	e0bfff05 	stb	r2,-4(fp)
  SetBank(address);
 8003c90:	e0bffe03 	ldbu	r2,-8(fp)
 8003c94:	1009883a 	mov	r4,r2
 8003c98:	8003bf00 	call	8003bf0 <_ZL7SetBankh>
  writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
 8003c9c:	e0bffe03 	ldbu	r2,-8(fp)
 8003ca0:	e0ffff03 	ldbu	r3,-4(fp)
 8003ca4:	180d883a 	mov	r6,r3
 8003ca8:	100b883a 	mov	r5,r2
 8003cac:	01001004 	movi	r4,64
 8003cb0:	8003aac0 	call	8003aac <_ZL7writeOphhh>
}
 8003cb4:	0001883a 	nop
 8003cb8:	e037883a 	mov	sp,fp
 8003cbc:	dfc00117 	ldw	ra,4(sp)
 8003cc0:	df000017 	ldw	fp,0(sp)
 8003cc4:	dec00204 	addi	sp,sp,8
 8003cc8:	f800283a 	ret

08003ccc <_ZL8writeReght>:

static void writeReg(uint8_t address, uint16_t data) {
 8003ccc:	defffc04 	addi	sp,sp,-16
 8003cd0:	dfc00315 	stw	ra,12(sp)
 8003cd4:	df000215 	stw	fp,8(sp)
 8003cd8:	df000204 	addi	fp,sp,8
 8003cdc:	2007883a 	mov	r3,r4
 8003ce0:	2805883a 	mov	r2,r5
 8003ce4:	e0fffe05 	stb	r3,-8(fp)
 8003ce8:	e0bfff0d 	sth	r2,-4(fp)
  writeRegByte(address, data);
 8003cec:	e0bffe03 	ldbu	r2,-8(fp)
 8003cf0:	e0ffff0b 	ldhu	r3,-4(fp)
 8003cf4:	18c03fcc 	andi	r3,r3,255
 8003cf8:	180b883a 	mov	r5,r3
 8003cfc:	1009883a 	mov	r4,r2
 8003d00:	8003c700 	call	8003c70 <_ZL12writeRegBytehh>
  writeRegByte(address + 1, data >> 8);
 8003d04:	e0bffe03 	ldbu	r2,-8(fp)
 8003d08:	10800044 	addi	r2,r2,1
 8003d0c:	10c03fcc 	andi	r3,r2,255
 8003d10:	e0bfff0b 	ldhu	r2,-4(fp)
 8003d14:	1004d23a 	srli	r2,r2,8
 8003d18:	10bfffcc 	andi	r2,r2,65535
 8003d1c:	100b883a 	mov	r5,r2
 8003d20:	1809883a 	mov	r4,r3
 8003d24:	8003c700 	call	8003c70 <_ZL12writeRegBytehh>
}
 8003d28:	0001883a 	nop
 8003d2c:	e037883a 	mov	sp,fp
 8003d30:	dfc00117 	ldw	ra,4(sp)
 8003d34:	df000017 	ldw	fp,0(sp)
 8003d38:	dec00204 	addi	sp,sp,8
 8003d3c:	f800283a 	ret

08003d40 <_ZL11readRegByteh>:

static uint8_t readRegByte(uint8_t address) {
 8003d40:	defffd04 	addi	sp,sp,-12
 8003d44:	dfc00215 	stw	ra,8(sp)
 8003d48:	df000115 	stw	fp,4(sp)
 8003d4c:	df000104 	addi	fp,sp,4
 8003d50:	2005883a 	mov	r2,r4
 8003d54:	e0bfff05 	stb	r2,-4(fp)
  SetBank(address);
 8003d58:	e0bfff03 	ldbu	r2,-4(fp)
 8003d5c:	1009883a 	mov	r4,r2
 8003d60:	8003bf00 	call	8003bf0 <_ZL7SetBankh>
  return readOp(ENC28J60_READ_CTRL_REG, address);
 8003d64:	e0bfff03 	ldbu	r2,-4(fp)
 8003d68:	100b883a 	mov	r5,r2
 8003d6c:	0009883a 	mov	r4,zero
 8003d70:	8003b2c0 	call	8003b2c <_ZL6readOphh>
}
 8003d74:	e037883a 	mov	sp,fp
 8003d78:	dfc00117 	ldw	ra,4(sp)
 8003d7c:	df000017 	ldw	fp,0(sp)
 8003d80:	dec00204 	addi	sp,sp,8
 8003d84:	f800283a 	ret

08003d88 <_ZL7readRegh>:

static uint16_t readReg(byte address) {
 8003d88:	defffc04 	addi	sp,sp,-16
 8003d8c:	dfc00315 	stw	ra,12(sp)
 8003d90:	df000215 	stw	fp,8(sp)
 8003d94:	dc000115 	stw	r16,4(sp)
 8003d98:	df000204 	addi	fp,sp,8
 8003d9c:	2005883a 	mov	r2,r4
 8003da0:	e0bffe05 	stb	r2,-8(fp)
  return readRegByte(address) + (readRegByte(address + 1) << 8);
 8003da4:	e0bffe03 	ldbu	r2,-8(fp)
 8003da8:	1009883a 	mov	r4,r2
 8003dac:	8003d400 	call	8003d40 <_ZL11readRegByteh>
 8003db0:	14003fcc 	andi	r16,r2,255
 8003db4:	e0bffe03 	ldbu	r2,-8(fp)
 8003db8:	10800044 	addi	r2,r2,1
 8003dbc:	10803fcc 	andi	r2,r2,255
 8003dc0:	1009883a 	mov	r4,r2
 8003dc4:	8003d400 	call	8003d40 <_ZL11readRegByteh>
 8003dc8:	10803fcc 	andi	r2,r2,255
 8003dcc:	1004923a 	slli	r2,r2,8
 8003dd0:	8085883a 	add	r2,r16,r2
}
 8003dd4:	e6ffff04 	addi	sp,fp,-4
 8003dd8:	dfc00217 	ldw	ra,8(sp)
 8003ddc:	df000117 	ldw	fp,4(sp)
 8003de0:	dc000017 	ldw	r16,0(sp)
 8003de4:	dec00304 	addi	sp,sp,12
 8003de8:	f800283a 	ret

08003dec <_ZL8writePhyht>:

static void writePhy(uint8_t address, uint16_t data) {
 8003dec:	defffc04 	addi	sp,sp,-16
 8003df0:	dfc00315 	stw	ra,12(sp)
 8003df4:	df000215 	stw	fp,8(sp)
 8003df8:	df000204 	addi	fp,sp,8
 8003dfc:	2007883a 	mov	r3,r4
 8003e00:	2805883a 	mov	r2,r5
 8003e04:	e0fffe05 	stb	r3,-8(fp)
 8003e08:	e0bfff0d 	sth	r2,-4(fp)
  writeRegByte(MIREGADR, address);
 8003e0c:	e0bffe03 	ldbu	r2,-8(fp)
 8003e10:	100b883a 	mov	r5,r2
 8003e14:	01003504 	movi	r4,212
 8003e18:	8003c700 	call	8003c70 <_ZL12writeRegBytehh>
  writeReg(MIWR, data);
 8003e1c:	e0bfff0b 	ldhu	r2,-4(fp)
 8003e20:	100b883a 	mov	r5,r2
 8003e24:	01003584 	movi	r4,214
 8003e28:	8003ccc0 	call	8003ccc <_ZL8writeReght>
  while (readRegByte(MISTAT) & MISTAT_BUSY)
 8003e2c:	01003a84 	movi	r4,234
 8003e30:	8003d400 	call	8003d40 <_ZL11readRegByteh>
 8003e34:	10803fcc 	andi	r2,r2,255
 8003e38:	1080004c 	andi	r2,r2,1
 8003e3c:	1004c03a 	cmpne	r2,r2,zero
 8003e40:	10803fcc 	andi	r2,r2,255
 8003e44:	10000126 	beq	r2,zero,8003e4c <_ZL8writePhyht+0x60>
 8003e48:	003ff806 	br	8003e2c <_ZL8writePhyht+0x40>
    ;
}
 8003e4c:	0001883a 	nop
 8003e50:	e037883a 	mov	sp,fp
 8003e54:	dfc00117 	ldw	ra,4(sp)
 8003e58:	df000017 	ldw	fp,0(sp)
 8003e5c:	dec00204 	addi	sp,sp,8
 8003e60:	f800283a 	ret

08003e64 <_ZL11readPhyByteh>:

static uint16_t readPhyByte(uint8_t address) {
 8003e64:	defffd04 	addi	sp,sp,-12
 8003e68:	dfc00215 	stw	ra,8(sp)
 8003e6c:	df000115 	stw	fp,4(sp)
 8003e70:	df000104 	addi	fp,sp,4
 8003e74:	2005883a 	mov	r2,r4
 8003e78:	e0bfff05 	stb	r2,-4(fp)
  writeRegByte(MIREGADR, address);
 8003e7c:	e0bfff03 	ldbu	r2,-4(fp)
 8003e80:	100b883a 	mov	r5,r2
 8003e84:	01003504 	movi	r4,212
 8003e88:	8003c700 	call	8003c70 <_ZL12writeRegBytehh>
  writeRegByte(MICMD, MICMD_MIIRD);
 8003e8c:	01400044 	movi	r5,1
 8003e90:	01003484 	movi	r4,210
 8003e94:	8003c700 	call	8003c70 <_ZL12writeRegBytehh>
  while (readRegByte(MISTAT) & MISTAT_BUSY)
 8003e98:	01003a84 	movi	r4,234
 8003e9c:	8003d400 	call	8003d40 <_ZL11readRegByteh>
 8003ea0:	10803fcc 	andi	r2,r2,255
 8003ea4:	1080004c 	andi	r2,r2,1
 8003ea8:	1004c03a 	cmpne	r2,r2,zero
 8003eac:	10803fcc 	andi	r2,r2,255
 8003eb0:	10000126 	beq	r2,zero,8003eb8 <_ZL11readPhyByteh+0x54>
 8003eb4:	003ff806 	br	8003e98 <_ZL11readPhyByteh+0x34>
    ;
  writeRegByte(MICMD, 0x00);
 8003eb8:	000b883a 	mov	r5,zero
 8003ebc:	01003484 	movi	r4,210
 8003ec0:	8003c700 	call	8003c70 <_ZL12writeRegBytehh>
  return readRegByte(MIRD + 1);
 8003ec4:	01003644 	movi	r4,217
 8003ec8:	8003d400 	call	8003d40 <_ZL11readRegByteh>
 8003ecc:	10803fcc 	andi	r2,r2,255
}
 8003ed0:	e037883a 	mov	sp,fp
 8003ed4:	dfc00117 	ldw	ra,4(sp)
 8003ed8:	df000017 	ldw	fp,0(sp)
 8003edc:	dec00204 	addi	sp,sp,8
 8003ee0:	f800283a 	ret

08003ee4 <_ZN8ENC28J6010initializeEtPKhh>:

uint8_t ENC28J60::initialize(uint16_t size, const uint8_t *macaddr,
                             uint8_t csPin) {
 8003ee4:	defffa04 	addi	sp,sp,-24
 8003ee8:	dfc00515 	stw	ra,20(sp)
 8003eec:	df000415 	stw	fp,16(sp)
 8003ef0:	df000404 	addi	fp,sp,16
 8003ef4:	2007883a 	mov	r3,r4
 8003ef8:	e17ffe15 	stw	r5,-8(fp)
 8003efc:	3005883a 	mov	r2,r6
 8003f00:	e0fffd0d 	sth	r3,-12(fp)
 8003f04:	e0bfff05 	stb	r2,-4(fp)
  bufferSize = size;
 8003f08:	e0bffd0b 	ldhu	r2,-12(fp)
 8003f0c:	d0a7200d 	sth	r2,-25472(gp)
  selectPin = csPin;
 8003f10:	e0bfff03 	ldbu	r2,-4(fp)
 8003f14:	d0a72145 	stb	r2,-25467(gp)

  writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
 8003f18:	01803fc4 	movi	r6,255
 8003f1c:	000b883a 	mov	r5,zero
 8003f20:	01003fc4 	movi	r4,255
 8003f24:	8003aac0 	call	8003aac <_ZL7writeOphhh>
  delay(2); // errata B7/2
 8003f28:	01000084 	movi	r4,2
 8003f2c:	8003a540 	call	8003a54 <_Z5delayi>
  while (!(readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY))
 8003f30:	01400744 	movi	r5,29
 8003f34:	0009883a 	mov	r4,zero
 8003f38:	8003b2c0 	call	8003b2c <_ZL6readOphh>
 8003f3c:	10803fcc 	andi	r2,r2,255
 8003f40:	1080004c 	andi	r2,r2,1
 8003f44:	1005003a 	cmpeq	r2,r2,zero
 8003f48:	10803fcc 	andi	r2,r2,255
 8003f4c:	10000126 	beq	r2,zero,8003f54 <_ZN8ENC28J6010initializeEtPKhh+0x70>
 8003f50:	003ff706 	br	8003f30 <_ZN8ENC28J6010initializeEtPKhh+0x4c>
    ;

  writeReg(ERXST, RXSTART_INIT);
 8003f54:	000b883a 	mov	r5,zero
 8003f58:	01000204 	movi	r4,8
 8003f5c:	8003ccc0 	call	8003ccc <_ZL8writeReght>
  writeReg(ERXRDPT, RXSTART_INIT);
 8003f60:	000b883a 	mov	r5,zero
 8003f64:	01000304 	movi	r4,12
 8003f68:	8003ccc0 	call	8003ccc <_ZL8writeReght>
  writeReg(ERXND, RXSTOP_INIT);
 8003f6c:	0142ffc4 	movi	r5,3071
 8003f70:	01000284 	movi	r4,10
 8003f74:	8003ccc0 	call	8003ccc <_ZL8writeReght>
  writeReg(ETXST, TXSTART_INIT);
 8003f78:	01430004 	movi	r5,3072
 8003f7c:	01000104 	movi	r4,4
 8003f80:	8003ccc0 	call	8003ccc <_ZL8writeReght>
  writeReg(ETXND, TXSTOP_INIT);
 8003f84:	01447fc4 	movi	r5,4607
 8003f88:	01000184 	movi	r4,6
 8003f8c:	8003ccc0 	call	8003ccc <_ZL8writeReght>

  // Stretch pulses for LED, LED_A=Link, LED_B=activity
  writePhy(PHLCON, 0x476);
 8003f90:	01411d84 	movi	r5,1142
 8003f94:	01000504 	movi	r4,20
 8003f98:	8003dec0 	call	8003dec <_ZL8writePhyht>

  writeRegByte(ERXFCON,
               ERXFCON_UCEN | ERXFCON_CRCEN | ERXFCON_PMEN | ERXFCON_BCEN);
 8003f9c:	01402c44 	movi	r5,177
 8003fa0:	01000e04 	movi	r4,56
 8003fa4:	8003c700 	call	8003c70 <_ZL12writeRegBytehh>
  writeReg(EPMM0, 0x303f);
 8003fa8:	014c0fc4 	movi	r5,12351
 8003fac:	01000a04 	movi	r4,40
 8003fb0:	8003ccc0 	call	8003ccc <_ZL8writeReght>
  writeReg(EPMCS, 0xf7f9);
 8003fb4:	017dfe54 	movui	r5,63481
 8003fb8:	01000c04 	movi	r4,48
 8003fbc:	8003ccc0 	call	8003ccc <_ZL8writeReght>
  writeRegByte(MACON1, MACON1_MARXEN);
 8003fc0:	01400044 	movi	r5,1
 8003fc4:	01003004 	movi	r4,192
 8003fc8:	8003c700 	call	8003c70 <_ZL12writeRegBytehh>
  writeOp(ENC28J60_BIT_FIELD_SET, MACON3,
          MACON3_PADCFG0 | MACON3_TXCRCEN | MACON3_FRMLNEN);
 8003fcc:	01800c84 	movi	r6,50
 8003fd0:	01403084 	movi	r5,194
 8003fd4:	01002004 	movi	r4,128
 8003fd8:	8003aac0 	call	8003aac <_ZL7writeOphhh>
  writeReg(MAIPG, 0x0C12);
 8003fdc:	01430484 	movi	r5,3090
 8003fe0:	01003184 	movi	r4,198
 8003fe4:	8003ccc0 	call	8003ccc <_ZL8writeReght>
  writeRegByte(MABBIPG, 0x12);
 8003fe8:	01400484 	movi	r5,18
 8003fec:	01003104 	movi	r4,196
 8003ff0:	8003c700 	call	8003c70 <_ZL12writeRegBytehh>
  writeReg(MAMXFL, MAX_FRAMELEN);
 8003ff4:	01417704 	movi	r5,1500
 8003ff8:	01003284 	movi	r4,202
 8003ffc:	8003ccc0 	call	8003ccc <_ZL8writeReght>
  writeRegByte(MAADR5, macaddr[0]);
 8004000:	e0bffe17 	ldw	r2,-8(fp)
 8004004:	10800003 	ldbu	r2,0(r2)
 8004008:	10803fcc 	andi	r2,r2,255
 800400c:	100b883a 	mov	r5,r2
 8004010:	01003904 	movi	r4,228
 8004014:	8003c700 	call	8003c70 <_ZL12writeRegBytehh>
  writeRegByte(MAADR4, macaddr[1]);
 8004018:	e0bffe17 	ldw	r2,-8(fp)
 800401c:	10800044 	addi	r2,r2,1
 8004020:	10800003 	ldbu	r2,0(r2)
 8004024:	10803fcc 	andi	r2,r2,255
 8004028:	100b883a 	mov	r5,r2
 800402c:	01003944 	movi	r4,229
 8004030:	8003c700 	call	8003c70 <_ZL12writeRegBytehh>
  writeRegByte(MAADR3, macaddr[2]);
 8004034:	e0bffe17 	ldw	r2,-8(fp)
 8004038:	10800084 	addi	r2,r2,2
 800403c:	10800003 	ldbu	r2,0(r2)
 8004040:	10803fcc 	andi	r2,r2,255
 8004044:	100b883a 	mov	r5,r2
 8004048:	01003884 	movi	r4,226
 800404c:	8003c700 	call	8003c70 <_ZL12writeRegBytehh>
  writeRegByte(MAADR2, macaddr[3]);
 8004050:	e0bffe17 	ldw	r2,-8(fp)
 8004054:	108000c4 	addi	r2,r2,3
 8004058:	10800003 	ldbu	r2,0(r2)
 800405c:	10803fcc 	andi	r2,r2,255
 8004060:	100b883a 	mov	r5,r2
 8004064:	010038c4 	movi	r4,227
 8004068:	8003c700 	call	8003c70 <_ZL12writeRegBytehh>
  writeRegByte(MAADR1, macaddr[4]);
 800406c:	e0bffe17 	ldw	r2,-8(fp)
 8004070:	10800104 	addi	r2,r2,4
 8004074:	10800003 	ldbu	r2,0(r2)
 8004078:	10803fcc 	andi	r2,r2,255
 800407c:	100b883a 	mov	r5,r2
 8004080:	01003804 	movi	r4,224
 8004084:	8003c700 	call	8003c70 <_ZL12writeRegBytehh>
  writeRegByte(MAADR0, macaddr[5]);
 8004088:	e0bffe17 	ldw	r2,-8(fp)
 800408c:	10800144 	addi	r2,r2,5
 8004090:	10800003 	ldbu	r2,0(r2)
 8004094:	10803fcc 	andi	r2,r2,255
 8004098:	100b883a 	mov	r5,r2
 800409c:	01003844 	movi	r4,225
 80040a0:	8003c700 	call	8003c70 <_ZL12writeRegBytehh>
  writePhy(PHCON2, PHCON2_HDLDIS);
 80040a4:	01404004 	movi	r5,256
 80040a8:	01000404 	movi	r4,16
 80040ac:	8003dec0 	call	8003dec <_ZL8writePhyht>
  SetBank(ECON1);
 80040b0:	010007c4 	movi	r4,31
 80040b4:	8003bf00 	call	8003bf0 <_ZL7SetBankh>
  writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE | EIE_PKTIE);
 80040b8:	01803004 	movi	r6,192
 80040bc:	014006c4 	movi	r5,27
 80040c0:	01002004 	movi	r4,128
 80040c4:	8003aac0 	call	8003aac <_ZL7writeOphhh>
  writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
 80040c8:	01800104 	movi	r6,4
 80040cc:	014007c4 	movi	r5,31
 80040d0:	01002004 	movi	r4,128
 80040d4:	8003aac0 	call	8003aac <_ZL7writeOphhh>

  uint8_t rev = readRegByte(EREVID);
 80040d8:	01001c84 	movi	r4,114
 80040dc:	8003d400 	call	8003d40 <_ZL11readRegByteh>
 80040e0:	e0bffc05 	stb	r2,-16(fp)
  // microchip forgot to step the number on the silicon when they
  // released the revision B7. 6 is now rev B7. We still have
  // to see what they do when they release B8. At the moment
  // there is no B8 out yet
  if (rev > 5)
 80040e4:	e0bffc03 	ldbu	r2,-16(fp)
 80040e8:	108001b0 	cmpltui	r2,r2,6
 80040ec:	1000031e 	bne	r2,zero,80040fc <_ZN8ENC28J6010initializeEtPKhh+0x218>
    ++rev;
 80040f0:	e0bffc03 	ldbu	r2,-16(fp)
 80040f4:	10800044 	addi	r2,r2,1
 80040f8:	e0bffc05 	stb	r2,-16(fp)

  return rev;
 80040fc:	e0bffc03 	ldbu	r2,-16(fp)
}
 8004100:	e037883a 	mov	sp,fp
 8004104:	dfc00117 	ldw	ra,4(sp)
 8004108:	df000017 	ldw	fp,0(sp)
 800410c:	dec00204 	addi	sp,sp,8
 8004110:	f800283a 	ret

08004114 <_ZN8ENC28J608isLinkUpEv>:

bool ENC28J60::isLinkUp() { return (readPhyByte(PHSTAT2) >> 2) & 1; }
 8004114:	defffe04 	addi	sp,sp,-8
 8004118:	dfc00115 	stw	ra,4(sp)
 800411c:	df000015 	stw	fp,0(sp)
 8004120:	d839883a 	mov	fp,sp
 8004124:	01000444 	movi	r4,17
 8004128:	8003e640 	call	8003e64 <_ZL11readPhyByteh>
 800412c:	10bfffcc 	andi	r2,r2,65535
 8004130:	1080010c 	andi	r2,r2,4
 8004134:	1004c03a 	cmpne	r2,r2,zero
 8004138:	e037883a 	mov	sp,fp
 800413c:	dfc00117 	ldw	ra,4(sp)
 8004140:	df000017 	ldw	fp,0(sp)
 8004144:	dec00204 	addi	sp,sp,8
 8004148:	f800283a 	ret

0800414c <_ZL7readBuftPh>:

static void readBuf(uint16_t len, byte *data) {
 800414c:	defff504 	addi	sp,sp,-44
 8004150:	dfc00a15 	stw	ra,40(sp)
 8004154:	df000915 	stw	fp,36(sp)
 8004158:	dc000815 	stw	r16,32(sp)
 800415c:	df000904 	addi	fp,sp,36
 8004160:	e17ffe15 	stw	r5,-8(fp)
 8004164:	e13ffd0d 	sth	r4,-12(fp)
  if (len != 0) {
 8004168:	e13ffd0b 	ldhu	r4,-12(fp)
 800416c:	20003226 	beq	r4,zero,8004238 <_ZL7readBuftPh+0xec>
                           1,         //
                           send_data, // write data
                           len,       // Read 8 bytes
                           data,      // read into SPDR
                           0);        // no flags
    data += len;
 8004170:	d809883a 	mov	r4,sp
 8004174:	2021883a 	mov	r16,r4

bool ENC28J60::isLinkUp() { return (readPhyByte(PHSTAT2) >> 2) & 1; }

static void readBuf(uint16_t len, byte *data) {
  if (len != 0) {
    uint8_t send_data[1], data2[len];
 8004178:	e13ffd0b 	ldhu	r4,-12(fp)
 800417c:	213fffc4 	addi	r4,r4,-1
 8004180:	e13ffa15 	stw	r4,-24(fp)
 8004184:	200b883a 	mov	r5,r4
 8004188:	29400044 	addi	r5,r5,1
 800418c:	2815883a 	mov	r10,r5
 8004190:	0017883a 	mov	r11,zero
 8004194:	500ad77a 	srli	r5,r10,29
 8004198:	580e90fa 	slli	r7,r11,3
 800419c:	29ceb03a 	or	r7,r5,r7
 80041a0:	500c90fa 	slli	r6,r10,3
 80041a4:	200b883a 	mov	r5,r4
 80041a8:	29400044 	addi	r5,r5,1
 80041ac:	2811883a 	mov	r8,r5
 80041b0:	0013883a 	mov	r9,zero
 80041b4:	400ad77a 	srli	r5,r8,29
 80041b8:	480690fa 	slli	r3,r9,3
 80041bc:	28c6b03a 	or	r3,r5,r3
 80041c0:	400490fa 	slli	r2,r8,3
 80041c4:	2005883a 	mov	r2,r4
 80041c8:	10800044 	addi	r2,r2,1
 80041cc:	108000c4 	addi	r2,r2,3
 80041d0:	1004d0ba 	srli	r2,r2,2
 80041d4:	1085883a 	add	r2,r2,r2
 80041d8:	1085883a 	add	r2,r2,r2
 80041dc:	d8b7c83a 	sub	sp,sp,r2
 80041e0:	d8800304 	addi	r2,sp,12
 80041e4:	1005883a 	mov	r2,r2
 80041e8:	e0bffb15 	stw	r2,-20(fp)
    send_data[0] = ENC28J60_READ_BUF_MEM;
 80041ec:	00800e84 	movi	r2,58
 80041f0:	e0bffc05 	stb	r2,-16(fp)
    alt_avalon_spi_command(SPI_0_BASE, ETHERNET_CHIP_SLAVE,
 80041f4:	e0bffd0b 	ldhu	r2,-12(fp)
                           1,         //
                           send_data, // write data
                           len,       // Read 8 bytes
                           data,      // read into SPDR
                           0);        // no flags
 80041f8:	e13ffc04 	addi	r4,fp,-16
 80041fc:	d8000215 	stw	zero,8(sp)
 8004200:	e0fffe17 	ldw	r3,-8(fp)
 8004204:	d8c00115 	stw	r3,4(sp)
 8004208:	d8800015 	stw	r2,0(sp)
 800420c:	200f883a 	mov	r7,r4
 8004210:	01800044 	movi	r6,1
 8004214:	000b883a 	mov	r5,zero
 8004218:	01000074 	movhi	r4,1
 800421c:	21042804 	addi	r4,r4,4256
 8004220:	8018f900 	call	8018f90 <alt_avalon_spi_command>
    data += len;
 8004224:	e0bffd0b 	ldhu	r2,-12(fp)
 8004228:	e0fffe17 	ldw	r3,-8(fp)
 800422c:	1885883a 	add	r2,r3,r2
 8004230:	e0bffe15 	stw	r2,-8(fp)
 8004234:	8037883a 	mov	sp,r16
  }
}
 8004238:	0001883a 	nop
 800423c:	e6ffff04 	addi	sp,fp,-4
 8004240:	dfc00217 	ldw	ra,8(sp)
 8004244:	df000117 	ldw	fp,4(sp)
 8004248:	dc000017 	ldw	r16,0(sp)
 800424c:	dec00304 	addi	sp,sp,12
 8004250:	f800283a 	ret

08004254 <_ZL8writeBuftPKh>:

static void writeBuf(uint16_t len, const byte *data) {
 8004254:	defff604 	addi	sp,sp,-40
 8004258:	dfc00915 	stw	ra,36(sp)
 800425c:	df000815 	stw	fp,32(sp)
 8004260:	dc000715 	stw	r16,28(sp)
 8004264:	df000804 	addi	fp,sp,32
 8004268:	e17ffe15 	stw	r5,-8(fp)
 800426c:	e13ffd0d 	sth	r4,-12(fp)
  if (len != 0) {
 8004270:	e13ffd0b 	ldhu	r4,-12(fp)
 8004274:	20003a26 	beq	r4,zero,8004360 <_ZL8writeBuftPKh+0x10c>
                           send_data, // write data
                           0,         // Read 8 bytes
                           0,         // read into SPDR
                           0);        // no flags

    data += len;
 8004278:	d809883a 	mov	r4,sp
 800427c:	2021883a 	mov	r16,r4
  }
}

static void writeBuf(uint16_t len, const byte *data) {
  if (len != 0) {
    uint8_t send_data[len + 1];
 8004280:	e13ffd0b 	ldhu	r4,-12(fp)
 8004284:	e13ffb15 	stw	r4,-20(fp)
 8004288:	200b883a 	mov	r5,r4
 800428c:	29400044 	addi	r5,r5,1
 8004290:	2815883a 	mov	r10,r5
 8004294:	0017883a 	mov	r11,zero
 8004298:	500ad77a 	srli	r5,r10,29
 800429c:	580e90fa 	slli	r7,r11,3
 80042a0:	29ceb03a 	or	r7,r5,r7
 80042a4:	500c90fa 	slli	r6,r10,3
 80042a8:	200b883a 	mov	r5,r4
 80042ac:	29400044 	addi	r5,r5,1
 80042b0:	2811883a 	mov	r8,r5
 80042b4:	0013883a 	mov	r9,zero
 80042b8:	400ad77a 	srli	r5,r8,29
 80042bc:	480690fa 	slli	r3,r9,3
 80042c0:	28c6b03a 	or	r3,r5,r3
 80042c4:	400490fa 	slli	r2,r8,3
 80042c8:	2005883a 	mov	r2,r4
 80042cc:	10800044 	addi	r2,r2,1
 80042d0:	108000c4 	addi	r2,r2,3
 80042d4:	1004d0ba 	srli	r2,r2,2
 80042d8:	1085883a 	add	r2,r2,r2
 80042dc:	1085883a 	add	r2,r2,r2
 80042e0:	d8b7c83a 	sub	sp,sp,r2
 80042e4:	d8800304 	addi	r2,sp,12
 80042e8:	1005883a 	mov	r2,r2
 80042ec:	e0bffc15 	stw	r2,-16(fp)
    send_data[0] = ENC28J60_WRITE_BUF_MEM;
 80042f0:	e0bffc17 	ldw	r2,-16(fp)
 80042f4:	00c01e84 	movi	r3,122
 80042f8:	10c00005 	stb	r3,0(r2)
	memcpy(send_data + 1, data, len);
 80042fc:	e0bffc17 	ldw	r2,-16(fp)
 8004300:	10800044 	addi	r2,r2,1
 8004304:	e0fffd0b 	ldhu	r3,-12(fp)
 8004308:	180d883a 	mov	r6,r3
 800430c:	e17ffe17 	ldw	r5,-8(fp)
 8004310:	1009883a 	mov	r4,r2
 8004314:	800ab080 	call	800ab08 <memcpy>

    alt_avalon_spi_command(SPI_0_BASE, ETHERNET_CHIP_SLAVE,
                           len + 1,   //
 8004318:	e0bffd0b 	ldhu	r2,-12(fp)
 800431c:	10800044 	addi	r2,r2,1
  if (len != 0) {
    uint8_t send_data[len + 1];
    send_data[0] = ENC28J60_WRITE_BUF_MEM;
	memcpy(send_data + 1, data, len);

    alt_avalon_spi_command(SPI_0_BASE, ETHERNET_CHIP_SLAVE,
 8004320:	1007883a 	mov	r3,r2
 8004324:	e0bffc17 	ldw	r2,-16(fp)
                           len + 1,   //
                           send_data, // write data
                           0,         // Read 8 bytes
                           0,         // read into SPDR
                           0);        // no flags
 8004328:	d8000215 	stw	zero,8(sp)
 800432c:	d8000115 	stw	zero,4(sp)
 8004330:	d8000015 	stw	zero,0(sp)
 8004334:	100f883a 	mov	r7,r2
 8004338:	180d883a 	mov	r6,r3
 800433c:	000b883a 	mov	r5,zero
 8004340:	01000074 	movhi	r4,1
 8004344:	21042804 	addi	r4,r4,4256
 8004348:	8018f900 	call	8018f90 <alt_avalon_spi_command>

    data += len;
 800434c:	e0bffd0b 	ldhu	r2,-12(fp)
 8004350:	e0fffe17 	ldw	r3,-8(fp)
 8004354:	1885883a 	add	r2,r3,r2
 8004358:	e0bffe15 	stw	r2,-8(fp)
 800435c:	8037883a 	mov	sp,r16
  }
}
 8004360:	0001883a 	nop
 8004364:	e6ffff04 	addi	sp,fp,-4
 8004368:	dfc00217 	ldw	ra,8(sp)
 800436c:	df000117 	ldw	fp,4(sp)
 8004370:	dc000017 	ldw	r16,0(sp)
 8004374:	dec00304 	addi	sp,sp,12
 8004378:	f800283a 	ret

0800437c <_ZN8ENC28J6013packetReceiveEv>:

uint16_t ENC28J60::packetReceive() {
 800437c:	defffc04 	addi	sp,sp,-16
 8004380:	dfc00315 	stw	ra,12(sp)
 8004384:	df000215 	stw	fp,8(sp)
 8004388:	df000204 	addi	fp,sp,8
  static uint16_t gNextPacketPtr = RXSTART_INIT;
  static bool unreleasedPacket = false;
  uint16_t len = 0;
 800438c:	e03ffe0d 	sth	zero,-8(fp)

  if (unreleasedPacket) {
 8004390:	d0a72183 	ldbu	r2,-25466(gp)
 8004394:	10803fcc 	andi	r2,r2,255
 8004398:	10000e26 	beq	r2,zero,80043d4 <_ZN8ENC28J6013packetReceiveEv+0x58>
    if (gNextPacketPtr == 0)
 800439c:	d0a7220b 	ldhu	r2,-25464(gp)
 80043a0:	10bfffcc 	andi	r2,r2,65535
 80043a4:	1000041e 	bne	r2,zero,80043b8 <_ZN8ENC28J6013packetReceiveEv+0x3c>
      writeReg(ERXRDPT, RXSTOP_INIT);
 80043a8:	0142ffc4 	movi	r5,3071
 80043ac:	01000304 	movi	r4,12
 80043b0:	8003ccc0 	call	8003ccc <_ZL8writeReght>
 80043b4:	00000606 	br	80043d0 <_ZN8ENC28J6013packetReceiveEv+0x54>
    else
      writeReg(ERXRDPT, gNextPacketPtr - 1);
 80043b8:	d0a7220b 	ldhu	r2,-25464(gp)
 80043bc:	10bfffc4 	addi	r2,r2,-1
 80043c0:	10bfffcc 	andi	r2,r2,65535
 80043c4:	100b883a 	mov	r5,r2
 80043c8:	01000304 	movi	r4,12
 80043cc:	8003ccc0 	call	8003ccc <_ZL8writeReght>
    unreleasedPacket = false;
 80043d0:	d0272185 	stb	zero,-25466(gp)
  }

  if (readRegByte(EPKTCNT) > 0) {
 80043d4:	01000e44 	movi	r4,57
 80043d8:	8003d400 	call	8003d40 <_ZL11readRegByteh>
 80043dc:	10803fcc 	andi	r2,r2,255
 80043e0:	1004c03a 	cmpne	r2,r2,zero
 80043e4:	10803fcc 	andi	r2,r2,255
 80043e8:	10002e26 	beq	r2,zero,80044a4 <_ZN8ENC28J6013packetReceiveEv+0x128>
    writeReg(ERDPT, gNextPacketPtr);
 80043ec:	d0a7220b 	ldhu	r2,-25464(gp)
 80043f0:	10bfffcc 	andi	r2,r2,65535
 80043f4:	100b883a 	mov	r5,r2
 80043f8:	0009883a 	mov	r4,zero
 80043fc:	8003ccc0 	call	8003ccc <_ZL8writeReght>
      uint16_t nextPacket;
      uint16_t byteCount;
      uint16_t status;
    } header;

    readBuf(sizeof header, (byte *)&header);
 8004400:	00800184 	movi	r2,6
 8004404:	10bfffcc 	andi	r2,r2,65535
 8004408:	e0fffe84 	addi	r3,fp,-6
 800440c:	180b883a 	mov	r5,r3
 8004410:	1009883a 	mov	r4,r2
 8004414:	800414c0 	call	800414c <_ZL7readBuftPh>

    gNextPacketPtr = header.nextPacket;
 8004418:	e0bffe8b 	ldhu	r2,-6(fp)
 800441c:	d0a7220d 	sth	r2,-25464(gp)
    len = header.byteCount - 4; // remove the CRC count
 8004420:	e0bfff0b 	ldhu	r2,-4(fp)
 8004424:	10bfff04 	addi	r2,r2,-4
 8004428:	e0bffe0d 	sth	r2,-8(fp)
    if (len > bufferSize - 1)
 800442c:	e0bffe0b 	ldhu	r2,-8(fp)
 8004430:	d0e7200b 	ldhu	r3,-25472(gp)
 8004434:	18ffffcc 	andi	r3,r3,65535
 8004438:	18ffffc4 	addi	r3,r3,-1
 800443c:	1880030e 	bge	r3,r2,800444c <_ZN8ENC28J6013packetReceiveEv+0xd0>
      len = bufferSize - 1;
 8004440:	d0a7200b 	ldhu	r2,-25472(gp)
 8004444:	10bfffc4 	addi	r2,r2,-1
 8004448:	e0bffe0d 	sth	r2,-8(fp)
    if ((header.status & 0x80) == 0)
 800444c:	e0bfff8b 	ldhu	r2,-2(fp)
 8004450:	10bfffcc 	andi	r2,r2,65535
 8004454:	1080200c 	andi	r2,r2,128
 8004458:	1000021e 	bne	r2,zero,8004464 <_ZN8ENC28J6013packetReceiveEv+0xe8>
      len = 0;
 800445c:	e03ffe0d 	sth	zero,-8(fp)
 8004460:	00000506 	br	8004478 <_ZN8ENC28J6013packetReceiveEv+0xfc>
    else
      readBuf(len, buffer);
 8004464:	e0bffe0b 	ldhu	r2,-8(fp)
 8004468:	014200b4 	movhi	r5,2050
 800446c:	29799704 	addi	r5,r5,-6564
 8004470:	1009883a 	mov	r4,r2
 8004474:	800414c0 	call	800414c <_ZL7readBuftPh>
    buffer[len] = 0;
 8004478:	e0fffe0b 	ldhu	r3,-8(fp)
 800447c:	008200b4 	movhi	r2,2050
 8004480:	10b99704 	addi	r2,r2,-6564
 8004484:	10c5883a 	add	r2,r2,r3
 8004488:	10000005 	stb	zero,0(r2)
    unreleasedPacket = true;
 800448c:	00800044 	movi	r2,1
 8004490:	d0a72185 	stb	r2,-25466(gp)

    writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
 8004494:	01801004 	movi	r6,64
 8004498:	01400784 	movi	r5,30
 800449c:	01002004 	movi	r4,128
 80044a0:	8003aac0 	call	8003aac <_ZL7writeOphhh>
  }
  return len;
 80044a4:	e0bffe0b 	ldhu	r2,-8(fp)
}
 80044a8:	e037883a 	mov	sp,fp
 80044ac:	dfc00117 	ldw	ra,4(sp)
 80044b0:	df000017 	ldw	fp,0(sp)
 80044b4:	dec00204 	addi	sp,sp,8
 80044b8:	f800283a 	ret

080044bc <_ZN8ENC28J6010packetSendEt>:

void ENC28J60::packetSend(uint16_t len) {
 80044bc:	defffa04 	addi	sp,sp,-24
 80044c0:	dfc00515 	stw	ra,20(sp)
 80044c4:	df000415 	stw	fp,16(sp)
 80044c8:	df000404 	addi	fp,sp,16
 80044cc:	2005883a 	mov	r2,r4
 80044d0:	e0bfff0d 	sth	r2,-4(fp)
  byte retry = 0;
 80044d4:	e03ffc85 	stb	zero,-14(fp)
    // the Microchip TCP/IP stack implementation used to first check
    // whether TXERIF is set and only then reset the transmit logic
    // but this has been changed in later versions; possibly they
    // have a reason for this; they don't mention this in the errata
    // sheet
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
 80044d8:	01802004 	movi	r6,128
 80044dc:	014007c4 	movi	r5,31
 80044e0:	01002004 	movi	r4,128
 80044e4:	8003aac0 	call	8003aac <_ZL7writeOphhh>
    writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
 80044e8:	01802004 	movi	r6,128
 80044ec:	014007c4 	movi	r5,31
 80044f0:	01002804 	movi	r4,160
 80044f4:	8003aac0 	call	8003aac <_ZL7writeOphhh>
    writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF | EIR_TXIF);
 80044f8:	01800284 	movi	r6,10
 80044fc:	01400704 	movi	r5,28
 8004500:	01002804 	movi	r4,160
 8004504:	8003aac0 	call	8003aac <_ZL7writeOphhh>

    // prepare new transmission
    if (retry == 0) {
 8004508:	e0bffc83 	ldbu	r2,-14(fp)
 800450c:	1000121e 	bne	r2,zero,8004558 <_ZN8ENC28J6010packetSendEt+0x9c>
      writeReg(EWRPT, TXSTART_INIT);
 8004510:	01430004 	movi	r5,3072
 8004514:	01000084 	movi	r4,2
 8004518:	8003ccc0 	call	8003ccc <_ZL8writeReght>
      writeReg(ETXND, TXSTART_INIT + len);
 800451c:	e0bfff0b 	ldhu	r2,-4(fp)
 8004520:	10830004 	addi	r2,r2,3072
 8004524:	10bfffcc 	andi	r2,r2,65535
 8004528:	100b883a 	mov	r5,r2
 800452c:	01000184 	movi	r4,6
 8004530:	8003ccc0 	call	8003ccc <_ZL8writeReght>
      writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
 8004534:	000d883a 	mov	r6,zero
 8004538:	000b883a 	mov	r5,zero
 800453c:	01001e84 	movi	r4,122
 8004540:	8003aac0 	call	8003aac <_ZL7writeOphhh>
      writeBuf(len, buffer);
 8004544:	e0bfff0b 	ldhu	r2,-4(fp)
 8004548:	014200b4 	movhi	r5,2050
 800454c:	29799704 	addi	r5,r5,-6564
 8004550:	1009883a 	mov	r4,r2
 8004554:	80042540 	call	8004254 <_ZL8writeBuftPKh>
    }

    // initiate transmission
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
 8004558:	01800204 	movi	r6,8
 800455c:	014007c4 	movi	r5,31
 8004560:	01002004 	movi	r4,128
 8004564:	8003aac0 	call	8003aac <_ZL7writeOphhh>
    // to the errata (Errata Issue 13; Example 1) you only need to wait until
    // either TXIF or TXERIF gets set; however this leads to hangs; apparently
    // Microchip realized this and in later implementations of their tcp/ip
    // stack they introduced a counter to avoid hangs; of course they didn't
    // update the errata sheet
    uint16_t count = 0;
 8004568:	e03ffc0d 	sth	zero,-16(fp)
    while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
 800456c:	01000704 	movi	r4,28
 8004570:	8003d400 	call	8003d40 <_ZL11readRegByteh>
 8004574:	10803fcc 	andi	r2,r2,255
 8004578:	1080028c 	andi	r2,r2,10
 800457c:	1000081e 	bne	r2,zero,80045a0 <_ZN8ENC28J6010packetSendEt+0xe4>
 8004580:	e0bffc0b 	ldhu	r2,-16(fp)
 8004584:	10800044 	addi	r2,r2,1
 8004588:	e0bffc0d 	sth	r2,-16(fp)
 800458c:	e0bffc0b 	ldhu	r2,-16(fp)
 8004590:	1080fa28 	cmpgeui	r2,r2,1000
 8004594:	1000021e 	bne	r2,zero,80045a0 <_ZN8ENC28J6010packetSendEt+0xe4>
 8004598:	00800044 	movi	r2,1
 800459c:	00000106 	br	80045a4 <_ZN8ENC28J6010packetSendEt+0xe8>
 80045a0:	0005883a 	mov	r2,zero
 80045a4:	10803fcc 	andi	r2,r2,255
 80045a8:	10000126 	beq	r2,zero,80045b0 <_ZN8ENC28J6010packetSendEt+0xf4>
 80045ac:	003fef06 	br	800456c <_ZN8ENC28J6010packetSendEt+0xb0>
      ;

    if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
 80045b0:	01000704 	movi	r4,28
 80045b4:	8003d400 	call	8003d40 <_ZL11readRegByteh>
 80045b8:	10803fcc 	andi	r2,r2,255
 80045bc:	1080008c 	andi	r2,r2,2
 80045c0:	1000051e 	bne	r2,zero,80045d8 <_ZN8ENC28J6010packetSendEt+0x11c>
 80045c4:	e0bffc0b 	ldhu	r2,-16(fp)
 80045c8:	1080fa28 	cmpgeui	r2,r2,1000
 80045cc:	1000021e 	bne	r2,zero,80045d8 <_ZN8ENC28J6010packetSendEt+0x11c>
 80045d0:	00800044 	movi	r2,1
 80045d4:	00000106 	br	80045dc <_ZN8ENC28J6010packetSendEt+0x120>
 80045d8:	0005883a 	mov	r2,zero
 80045dc:	10803fcc 	andi	r2,r2,255
 80045e0:	1000051e 	bne	r2,zero,80045f8 <_ZN8ENC28J6010packetSendEt+0x13c>
      // no error; start new transmission
      break;
    }

    // cancel previous transmission if stuck
    writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
 80045e4:	01800204 	movi	r6,8
 80045e8:	014007c4 	movi	r5,31
 80045ec:	01002804 	movi	r4,160
 80045f0:	8003aac0 	call	8003aac <_ZL7writeOphhh>

#if ETHERCARD_RETRY_LATECOLLISIONS == 0
    break;
 80045f4:	00000106 	br	80045fc <_ZN8ENC28J6010packetSendEt+0x140>
    while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
      ;

    if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
      // no error; start new transmission
      break;
 80045f8:	0001883a 	nop
      break;
    }

    retry++;
  }
}
 80045fc:	0001883a 	nop
 8004600:	e037883a 	mov	sp,fp
 8004604:	dfc00117 	ldw	ra,4(sp)
 8004608:	df000017 	ldw	fp,0(sp)
 800460c:	dec00204 	addi	sp,sp,8
 8004610:	f800283a 	ret

08004614 <_ZN8ENC28J6015enableBroadcastEb>:

void ENC28J60::enableBroadcast(bool temporary) {
 8004614:	defffd04 	addi	sp,sp,-12
 8004618:	dfc00215 	stw	ra,8(sp)
 800461c:	df000115 	stw	fp,4(sp)
 8004620:	df000104 	addi	fp,sp,4
 8004624:	2005883a 	mov	r2,r4
 8004628:	e0bfff05 	stb	r2,-4(fp)
  writeRegByte(ERXFCON, readRegByte(ERXFCON) | ERXFCON_BCEN);
 800462c:	01000e04 	movi	r4,56
 8004630:	8003d400 	call	8003d40 <_ZL11readRegByteh>
 8004634:	10800054 	ori	r2,r2,1
 8004638:	10803fcc 	andi	r2,r2,255
 800463c:	100b883a 	mov	r5,r2
 8004640:	01000e04 	movi	r4,56
 8004644:	8003c700 	call	8003c70 <_ZL12writeRegBytehh>
  if (!temporary)
 8004648:	e0bfff03 	ldbu	r2,-4(fp)
 800464c:	1080005c 	xori	r2,r2,1
 8004650:	10803fcc 	andi	r2,r2,255
 8004654:	10000226 	beq	r2,zero,8004660 <_ZN8ENC28J6015enableBroadcastEb+0x4c>
    broadcast_enabled = true;
 8004658:	00800044 	movi	r2,1
 800465c:	d0a72085 	stb	r2,-25470(gp)
}
 8004660:	0001883a 	nop
 8004664:	e037883a 	mov	sp,fp
 8004668:	dfc00117 	ldw	ra,4(sp)
 800466c:	df000017 	ldw	fp,0(sp)
 8004670:	dec00204 	addi	sp,sp,8
 8004674:	f800283a 	ret

08004678 <_ZN8ENC28J6016disableBroadcastEb>:

void ENC28J60::disableBroadcast(bool temporary) {
 8004678:	defffd04 	addi	sp,sp,-12
 800467c:	dfc00215 	stw	ra,8(sp)
 8004680:	df000115 	stw	fp,4(sp)
 8004684:	df000104 	addi	fp,sp,4
 8004688:	2005883a 	mov	r2,r4
 800468c:	e0bfff05 	stb	r2,-4(fp)
  if (!temporary)
 8004690:	e0bfff03 	ldbu	r2,-4(fp)
 8004694:	1080005c 	xori	r2,r2,1
 8004698:	10803fcc 	andi	r2,r2,255
 800469c:	10000126 	beq	r2,zero,80046a4 <_ZN8ENC28J6016disableBroadcastEb+0x2c>
    broadcast_enabled = false;
 80046a0:	d0272085 	stb	zero,-25470(gp)
  if (!broadcast_enabled)
 80046a4:	d0a72083 	ldbu	r2,-25470(gp)
 80046a8:	1080005c 	xori	r2,r2,1
 80046ac:	10803fcc 	andi	r2,r2,255
 80046b0:	10000726 	beq	r2,zero,80046d0 <_ZN8ENC28J6016disableBroadcastEb+0x58>
    writeRegByte(ERXFCON, readRegByte(ERXFCON) & ~ERXFCON_BCEN);
 80046b4:	01000e04 	movi	r4,56
 80046b8:	8003d400 	call	8003d40 <_ZL11readRegByteh>
 80046bc:	10803fcc 	andi	r2,r2,255
 80046c0:	10803f8c 	andi	r2,r2,254
 80046c4:	100b883a 	mov	r5,r2
 80046c8:	01000e04 	movi	r4,56
 80046cc:	8003c700 	call	8003c70 <_ZL12writeRegBytehh>
}
 80046d0:	0001883a 	nop
 80046d4:	e037883a 	mov	sp,fp
 80046d8:	dfc00117 	ldw	ra,4(sp)
 80046dc:	df000017 	ldw	fp,0(sp)
 80046e0:	dec00204 	addi	sp,sp,8
 80046e4:	f800283a 	ret

080046e8 <_ZN8ENC28J606peekinEhh>:

byte ENC28J60::peekin (byte page, byte off) {
 80046e8:	defffb04 	addi	sp,sp,-20
 80046ec:	dfc00415 	stw	ra,16(sp)
 80046f0:	df000315 	stw	fp,12(sp)
 80046f4:	df000304 	addi	fp,sp,12
 80046f8:	2007883a 	mov	r3,r4
 80046fc:	2805883a 	mov	r2,r5
 8004700:	e0fffe05 	stb	r3,-8(fp)
 8004704:	e0bfff05 	stb	r2,-4(fp)
    byte result = 0;
 8004708:	e03ffd85 	stb	zero,-10(fp)
    uint16_t destPos = SCRATCH_START + (page << SCRATCH_PAGE_SHIFT) + off;
 800470c:	e0bffe03 	ldbu	r2,-8(fp)
 8004710:	100491ba 	slli	r2,r2,6
 8004714:	1007883a 	mov	r3,r2
 8004718:	e0bfff03 	ldbu	r2,-4(fp)
 800471c:	1885883a 	add	r2,r3,r2
 8004720:	10848004 	addi	r2,r2,4608
 8004724:	e0bffd0d 	sth	r2,-12(fp)
    if (SCRATCH_START <= destPos && destPos < SCRATCH_LIMIT) {
 8004728:	e0bffd0b 	ldhu	r2,-12(fp)
 800472c:	10848030 	cmpltui	r2,r2,4608
 8004730:	10000b1e 	bne	r2,zero,8004760 <_ZN8ENC28J606peekinEhh+0x78>
 8004734:	e0bffd0b 	ldhu	r2,-12(fp)
 8004738:	10880028 	cmpgeui	r2,r2,8192
 800473c:	1000081e 	bne	r2,zero,8004760 <_ZN8ENC28J606peekinEhh+0x78>
        writeReg(ERDPT, destPos);
 8004740:	e0bffd0b 	ldhu	r2,-12(fp)
 8004744:	100b883a 	mov	r5,r2
 8004748:	0009883a 	mov	r4,zero
 800474c:	8003ccc0 	call	8003ccc <_ZL8writeReght>
        readBuf(1, &result);
 8004750:	e0bffd84 	addi	r2,fp,-10
 8004754:	100b883a 	mov	r5,r2
 8004758:	01000044 	movi	r4,1
 800475c:	800414c0 	call	800414c <_ZL7readBuftPh>
    }
    return result;
 8004760:	e0bffd83 	ldbu	r2,-10(fp)
}
 8004764:	e037883a 	mov	sp,fp
 8004768:	dfc00117 	ldw	ra,4(sp)
 800476c:	df000017 	ldw	fp,0(sp)
 8004770:	dec00204 	addi	sp,sp,8
 8004774:	f800283a 	ret

08004778 <_ZN8ENC28J607copyoutEhPKh>:

void ENC28J60::copyout (byte page, const byte* data) {
 8004778:	defffb04 	addi	sp,sp,-20
 800477c:	dfc00415 	stw	ra,16(sp)
 8004780:	df000315 	stw	fp,12(sp)
 8004784:	df000304 	addi	fp,sp,12
 8004788:	2005883a 	mov	r2,r4
 800478c:	e17fff15 	stw	r5,-4(fp)
 8004790:	e0bffe05 	stb	r2,-8(fp)
    uint16_t destPos = SCRATCH_START + (page << SCRATCH_PAGE_SHIFT);
 8004794:	e0bffe03 	ldbu	r2,-8(fp)
 8004798:	100491ba 	slli	r2,r2,6
 800479c:	10848004 	addi	r2,r2,4608
 80047a0:	e0bffd0d 	sth	r2,-12(fp)
    if (destPos < SCRATCH_START || destPos > SCRATCH_LIMIT - SCRATCH_PAGE_SIZE)
 80047a4:	e0bffd0b 	ldhu	r2,-12(fp)
 80047a8:	10848030 	cmpltui	r2,r2,4608
 80047ac:	10000b1e 	bne	r2,zero,80047dc <_ZN8ENC28J607copyoutEhPKh+0x64>
 80047b0:	e0bffd0b 	ldhu	r2,-12(fp)
 80047b4:	1087f070 	cmpltui	r2,r2,8129
 80047b8:	10000826 	beq	r2,zero,80047dc <_ZN8ENC28J607copyoutEhPKh+0x64>
        return;
    writeReg(EWRPT, destPos);
 80047bc:	e0bffd0b 	ldhu	r2,-12(fp)
 80047c0:	100b883a 	mov	r5,r2
 80047c4:	01000084 	movi	r4,2
 80047c8:	8003ccc0 	call	8003ccc <_ZL8writeReght>
    writeBuf(SCRATCH_PAGE_SIZE, data);
 80047cc:	e17fff17 	ldw	r5,-4(fp)
 80047d0:	01001004 	movi	r4,64
 80047d4:	80042540 	call	8004254 <_ZL8writeBuftPKh>
 80047d8:	00000106 	br	80047e0 <_ZN8ENC28J607copyoutEhPKh+0x68>
}

void ENC28J60::copyout (byte page, const byte* data) {
    uint16_t destPos = SCRATCH_START + (page << SCRATCH_PAGE_SHIFT);
    if (destPos < SCRATCH_START || destPos > SCRATCH_LIMIT - SCRATCH_PAGE_SIZE)
        return;
 80047dc:	0001883a 	nop
    writeReg(EWRPT, destPos);
    writeBuf(SCRATCH_PAGE_SIZE, data);
}
 80047e0:	e037883a 	mov	sp,fp
 80047e4:	dfc00117 	ldw	ra,4(sp)
 80047e8:	df000017 	ldw	fp,0(sp)
 80047ec:	dec00204 	addi	sp,sp,8
 80047f0:	f800283a 	ret

080047f4 <_ZN8ENC28J606copyinEhPh>:

void ENC28J60::copyin (byte page, byte* data) {
 80047f4:	defffb04 	addi	sp,sp,-20
 80047f8:	dfc00415 	stw	ra,16(sp)
 80047fc:	df000315 	stw	fp,12(sp)
 8004800:	df000304 	addi	fp,sp,12
 8004804:	2005883a 	mov	r2,r4
 8004808:	e17fff15 	stw	r5,-4(fp)
 800480c:	e0bffe05 	stb	r2,-8(fp)
    uint16_t destPos = SCRATCH_START + (page << SCRATCH_PAGE_SHIFT);
 8004810:	e0bffe03 	ldbu	r2,-8(fp)
 8004814:	100491ba 	slli	r2,r2,6
 8004818:	10848004 	addi	r2,r2,4608
 800481c:	e0bffd0d 	sth	r2,-12(fp)
    if (destPos < SCRATCH_START || destPos > SCRATCH_LIMIT - SCRATCH_PAGE_SIZE)
 8004820:	e0bffd0b 	ldhu	r2,-12(fp)
 8004824:	10848030 	cmpltui	r2,r2,4608
 8004828:	10000b1e 	bne	r2,zero,8004858 <_ZN8ENC28J606copyinEhPh+0x64>
 800482c:	e0bffd0b 	ldhu	r2,-12(fp)
 8004830:	1087f070 	cmpltui	r2,r2,8129
 8004834:	10000826 	beq	r2,zero,8004858 <_ZN8ENC28J606copyinEhPh+0x64>
        return;
    writeReg(ERDPT, destPos);
 8004838:	e0bffd0b 	ldhu	r2,-12(fp)
 800483c:	100b883a 	mov	r5,r2
 8004840:	0009883a 	mov	r4,zero
 8004844:	8003ccc0 	call	8003ccc <_ZL8writeReght>
    readBuf(SCRATCH_PAGE_SIZE, data);
 8004848:	e17fff17 	ldw	r5,-4(fp)
 800484c:	01001004 	movi	r4,64
 8004850:	800414c0 	call	800414c <_ZL7readBuftPh>
 8004854:	00000106 	br	800485c <_ZN8ENC28J606copyinEhPh+0x68>
}

void ENC28J60::copyin (byte page, byte* data) {
    uint16_t destPos = SCRATCH_START + (page << SCRATCH_PAGE_SHIFT);
    if (destPos < SCRATCH_START || destPos > SCRATCH_LIMIT - SCRATCH_PAGE_SIZE)
        return;
 8004858:	0001883a 	nop
    writeReg(ERDPT, destPos);
    readBuf(SCRATCH_PAGE_SIZE, data);
}
 800485c:	e037883a 	mov	sp,fp
 8004860:	dfc00117 	ldw	ra,4(sp)
 8004864:	df000017 	ldw	fp,0(sp)
 8004868:	dec00204 	addi	sp,sp,8
 800486c:	f800283a 	ret

08004870 <_ZN5Stash10allocBlockEv>:
//#define FLOATEMIT // uncomment line to enable $T in emit_P for float emitting

byte Stash::map[SCRATCH_MAP_SIZE];
Stash::Block Stash::bufs[BUFCOUNT];

uint8_t Stash::allocBlock () {
 8004870:	defffe04 	addi	sp,sp,-8
 8004874:	df000115 	stw	fp,4(sp)
 8004878:	df000104 	addi	fp,sp,4
    for (uint8_t i = 0; i < sizeof map; ++i)
 800487c:	e03fff05 	stb	zero,-4(fp)
 8004880:	e0bfff03 	ldbu	r2,-4(fp)
 8004884:	108001e8 	cmpgeui	r2,r2,7
 8004888:	10002f1e 	bne	r2,zero,8004948 <_ZN5Stash10allocBlockEv+0xd8>
        if (map[i] != 0)
 800488c:	e0ffff03 	ldbu	r3,-4(fp)
 8004890:	d0a72284 	addi	r2,gp,-25462
 8004894:	1885883a 	add	r2,r3,r2
 8004898:	10800003 	ldbu	r2,0(r2)
 800489c:	10803fcc 	andi	r2,r2,255
 80048a0:	10002526 	beq	r2,zero,8004938 <_ZN5Stash10allocBlockEv+0xc8>
            for (uint8_t j = 0; j < 8; ++j)
 80048a4:	e03fff45 	stb	zero,-3(fp)
 80048a8:	e0bfff43 	ldbu	r2,-3(fp)
 80048ac:	10800228 	cmpgeui	r2,r2,8
 80048b0:	1000211e 	bne	r2,zero,8004938 <_ZN5Stash10allocBlockEv+0xc8>
                if (bitRead(map[i], j)) {
 80048b4:	e0ffff03 	ldbu	r3,-4(fp)
 80048b8:	d0a72284 	addi	r2,gp,-25462
 80048bc:	1885883a 	add	r2,r3,r2
 80048c0:	10800003 	ldbu	r2,0(r2)
 80048c4:	10c03fcc 	andi	r3,r2,255
 80048c8:	e0bfff43 	ldbu	r2,-3(fp)
 80048cc:	1885d83a 	sra	r2,r3,r2
 80048d0:	1080004c 	andi	r2,r2,1
 80048d4:	10001426 	beq	r2,zero,8004928 <_ZN5Stash10allocBlockEv+0xb8>
                    bitClear(map[i], j);
 80048d8:	e0ffff03 	ldbu	r3,-4(fp)
 80048dc:	e13fff03 	ldbu	r4,-4(fp)
 80048e0:	d0a72284 	addi	r2,gp,-25462
 80048e4:	2085883a 	add	r2,r4,r2
 80048e8:	10800003 	ldbu	r2,0(r2)
 80048ec:	e13fff43 	ldbu	r4,-3(fp)
 80048f0:	01400044 	movi	r5,1
 80048f4:	2908983a 	sll	r4,r5,r4
 80048f8:	0108303a 	nor	r4,zero,r4
 80048fc:	1104703a 	and	r2,r2,r4
 8004900:	1009883a 	mov	r4,r2
 8004904:	d0a72284 	addi	r2,gp,-25462
 8004908:	1885883a 	add	r2,r3,r2
 800490c:	11000005 	stb	r4,0(r2)
                    return (i << 3) + j;
 8004910:	e0bfff03 	ldbu	r2,-4(fp)
 8004914:	100490fa 	slli	r2,r2,3
 8004918:	1007883a 	mov	r3,r2
 800491c:	e0bfff43 	ldbu	r2,-3(fp)
 8004920:	1885883a 	add	r2,r3,r2
 8004924:	00000906 	br	800494c <_ZN5Stash10allocBlockEv+0xdc>
Stash::Block Stash::bufs[BUFCOUNT];

uint8_t Stash::allocBlock () {
    for (uint8_t i = 0; i < sizeof map; ++i)
        if (map[i] != 0)
            for (uint8_t j = 0; j < 8; ++j)
 8004928:	e0bfff43 	ldbu	r2,-3(fp)
 800492c:	10800044 	addi	r2,r2,1
 8004930:	e0bfff45 	stb	r2,-3(fp)
 8004934:	003fdc06 	br	80048a8 <_ZN5Stash10allocBlockEv+0x38>

byte Stash::map[SCRATCH_MAP_SIZE];
Stash::Block Stash::bufs[BUFCOUNT];

uint8_t Stash::allocBlock () {
    for (uint8_t i = 0; i < sizeof map; ++i)
 8004938:	e0bfff03 	ldbu	r2,-4(fp)
 800493c:	10800044 	addi	r2,r2,1
 8004940:	e0bfff05 	stb	r2,-4(fp)
 8004944:	003fce06 	br	8004880 <_ZN5Stash10allocBlockEv+0x10>
            for (uint8_t j = 0; j < 8; ++j)
                if (bitRead(map[i], j)) {
                    bitClear(map[i], j);
                    return (i << 3) + j;
                }
    return 0;
 8004948:	0005883a 	mov	r2,zero
}
 800494c:	e037883a 	mov	sp,fp
 8004950:	df000017 	ldw	fp,0(sp)
 8004954:	dec00104 	addi	sp,sp,4
 8004958:	f800283a 	ret

0800495c <_ZN5Stash9freeBlockEh>:

void Stash::freeBlock (uint8_t block) {
 800495c:	defffe04 	addi	sp,sp,-8
 8004960:	df000115 	stw	fp,4(sp)
 8004964:	df000104 	addi	fp,sp,4
 8004968:	2005883a 	mov	r2,r4
 800496c:	e0bfff05 	stb	r2,-4(fp)
    bitSet(map[block>>3], block & 7);
 8004970:	e0bfff03 	ldbu	r2,-4(fp)
 8004974:	1007d0fa 	srai	r3,r2,3
 8004978:	e0bfff03 	ldbu	r2,-4(fp)
 800497c:	1009d0fa 	srai	r4,r2,3
 8004980:	d0a72284 	addi	r2,gp,-25462
 8004984:	2085883a 	add	r2,r4,r2
 8004988:	10800003 	ldbu	r2,0(r2)
 800498c:	e13fff03 	ldbu	r4,-4(fp)
 8004990:	210001cc 	andi	r4,r4,7
 8004994:	01400044 	movi	r5,1
 8004998:	2908983a 	sll	r4,r5,r4
 800499c:	1104b03a 	or	r2,r2,r4
 80049a0:	1009883a 	mov	r4,r2
 80049a4:	d0a72284 	addi	r2,gp,-25462
 80049a8:	1885883a 	add	r2,r3,r2
 80049ac:	11000005 	stb	r4,0(r2)
}
 80049b0:	0001883a 	nop
 80049b4:	e037883a 	mov	sp,fp
 80049b8:	df000017 	ldw	fp,0(sp)
 80049bc:	dec00104 	addi	sp,sp,4
 80049c0:	f800283a 	ret

080049c4 <_ZN5Stash9fetchByteEhh>:

uint8_t Stash::fetchByte (uint8_t blk, uint8_t off) {
 80049c4:	defffc04 	addi	sp,sp,-16
 80049c8:	dfc00315 	stw	ra,12(sp)
 80049cc:	df000215 	stw	fp,8(sp)
 80049d0:	df000204 	addi	fp,sp,8
 80049d4:	2007883a 	mov	r3,r4
 80049d8:	2805883a 	mov	r2,r5
 80049dc:	e0fffe05 	stb	r3,-8(fp)
 80049e0:	e0bfff05 	stb	r2,-4(fp)
    return blk == bufs[WRITEBUF].bnum ? bufs[WRITEBUF].bytes[off] :
 80049e4:	008200b4 	movhi	r2,2050
 80049e8:	10b96604 	addi	r2,r2,-6760
 80049ec:	10801003 	ldbu	r2,64(r2)
           blk == bufs[READBUF].bnum ? bufs[READBUF].bytes[off] :
           ether.peekin(blk, off);
 80049f0:	10c03fcc 	andi	r3,r2,255
 80049f4:	e0bffe03 	ldbu	r2,-8(fp)
 80049f8:	1880061e 	bne	r3,r2,8004a14 <_ZN5Stash9fetchByteEhh+0x50>
void Stash::freeBlock (uint8_t block) {
    bitSet(map[block>>3], block & 7);
}

uint8_t Stash::fetchByte (uint8_t blk, uint8_t off) {
    return blk == bufs[WRITEBUF].bnum ? bufs[WRITEBUF].bytes[off] :
 80049fc:	e0ffff03 	ldbu	r3,-4(fp)
           blk == bufs[READBUF].bnum ? bufs[READBUF].bytes[off] :
           ether.peekin(blk, off);
 8004a00:	008200b4 	movhi	r2,2050
 8004a04:	10b96604 	addi	r2,r2,-6760
 8004a08:	10c5883a 	add	r2,r2,r3
 8004a0c:	10800003 	ldbu	r2,0(r2)
 8004a10:	00001206 	br	8004a5c <_ZN5Stash9fetchByteEhh+0x98>
    bitSet(map[block>>3], block & 7);
}

uint8_t Stash::fetchByte (uint8_t blk, uint8_t off) {
    return blk == bufs[WRITEBUF].bnum ? bufs[WRITEBUF].bytes[off] :
           blk == bufs[READBUF].bnum ? bufs[READBUF].bytes[off] :
 8004a14:	008200b4 	movhi	r2,2050
 8004a18:	10b96604 	addi	r2,r2,-6760
 8004a1c:	10802083 	ldbu	r2,130(r2)
           ether.peekin(blk, off);
 8004a20:	10c03fcc 	andi	r3,r2,255
 8004a24:	e0bffe03 	ldbu	r2,-8(fp)
 8004a28:	1880071e 	bne	r3,r2,8004a48 <_ZN5Stash9fetchByteEhh+0x84>
    bitSet(map[block>>3], block & 7);
}

uint8_t Stash::fetchByte (uint8_t blk, uint8_t off) {
    return blk == bufs[WRITEBUF].bnum ? bufs[WRITEBUF].bytes[off] :
           blk == bufs[READBUF].bnum ? bufs[READBUF].bytes[off] :
 8004a2c:	e0ffff03 	ldbu	r3,-4(fp)
           ether.peekin(blk, off);
 8004a30:	008200b4 	movhi	r2,2050
 8004a34:	10b96604 	addi	r2,r2,-6760
 8004a38:	10c5883a 	add	r2,r2,r3
 8004a3c:	10801084 	addi	r2,r2,66
 8004a40:	10800003 	ldbu	r2,0(r2)
 8004a44:	00000506 	br	8004a5c <_ZN5Stash9fetchByteEhh+0x98>
 8004a48:	e0bffe03 	ldbu	r2,-8(fp)
 8004a4c:	e0ffff03 	ldbu	r3,-4(fp)
 8004a50:	180b883a 	mov	r5,r3
 8004a54:	1009883a 	mov	r4,r2
 8004a58:	80046e80 	call	80046e8 <_ZN8ENC28J606peekinEhh>
}
 8004a5c:	e037883a 	mov	sp,fp
 8004a60:	dfc00117 	ldw	ra,4(sp)
 8004a64:	df000017 	ldw	fp,0(sp)
 8004a68:	dec00204 	addi	sp,sp,8
 8004a6c:	f800283a 	ret

08004a70 <_ZN5Stash7initMapEh>:


// block 0 is special since always occupied
void Stash::initMap (uint8_t last /*=SCRATCH_PAGE_NUM*/) {
 8004a70:	defffd04 	addi	sp,sp,-12
 8004a74:	dfc00215 	stw	ra,8(sp)
 8004a78:	df000115 	stw	fp,4(sp)
 8004a7c:	df000104 	addi	fp,sp,4
 8004a80:	2005883a 	mov	r2,r4
 8004a84:	e0bfff05 	stb	r2,-4(fp)
    last = SCRATCH_PAGE_NUM;
 8004a88:	00800e04 	movi	r2,56
 8004a8c:	e0bfff05 	stb	r2,-4(fp)
    while (--last > 0)
 8004a90:	e0bfff03 	ldbu	r2,-4(fp)
 8004a94:	10bfffc4 	addi	r2,r2,-1
 8004a98:	e0bfff05 	stb	r2,-4(fp)
 8004a9c:	e0bfff03 	ldbu	r2,-4(fp)
 8004aa0:	1004c03a 	cmpne	r2,r2,zero
 8004aa4:	10803fcc 	andi	r2,r2,255
 8004aa8:	10000426 	beq	r2,zero,8004abc <_ZN5Stash7initMapEh+0x4c>
        freeBlock(last);
 8004aac:	e0bfff03 	ldbu	r2,-4(fp)
 8004ab0:	1009883a 	mov	r4,r2
 8004ab4:	800495c0 	call	800495c <_ZN5Stash9freeBlockEh>


// block 0 is special since always occupied
void Stash::initMap (uint8_t last /*=SCRATCH_PAGE_NUM*/) {
    last = SCRATCH_PAGE_NUM;
    while (--last > 0)
 8004ab8:	003ff506 	br	8004a90 <_ZN5Stash7initMapEh+0x20>
        freeBlock(last);
}
 8004abc:	0001883a 	nop
 8004ac0:	e037883a 	mov	sp,fp
 8004ac4:	dfc00117 	ldw	ra,4(sp)
 8004ac8:	df000017 	ldw	fp,0(sp)
 8004acc:	dec00204 	addi	sp,sp,8
 8004ad0:	f800283a 	ret

08004ad4 <_ZN5Stash4loadEhh>:

// load a page/block either into the write or into the readbuffer
void Stash::load (uint8_t idx, uint8_t blk) {
 8004ad4:	defffb04 	addi	sp,sp,-20
 8004ad8:	dfc00415 	stw	ra,16(sp)
 8004adc:	df000315 	stw	fp,12(sp)
 8004ae0:	dc000215 	stw	r16,8(sp)
 8004ae4:	df000304 	addi	fp,sp,12
 8004ae8:	2007883a 	mov	r3,r4
 8004aec:	2805883a 	mov	r2,r5
 8004af0:	e0fffd05 	stb	r3,-12(fp)
 8004af4:	e0bffe05 	stb	r2,-8(fp)
    if (blk != bufs[idx].bnum) {
 8004af8:	e0bffd03 	ldbu	r2,-12(fp)
 8004afc:	040200b4 	movhi	r16,2050
 8004b00:	84396604 	addi	r16,r16,-6760
 8004b04:	01401084 	movi	r5,66
 8004b08:	1009883a 	mov	r4,r2
 8004b0c:	800a1780 	call	800a178 <__mulsi3>
 8004b10:	8085883a 	add	r2,r16,r2
 8004b14:	10801004 	addi	r2,r2,64
 8004b18:	10800003 	ldbu	r2,0(r2)
 8004b1c:	10c03fcc 	andi	r3,r2,255
 8004b20:	e0bffe03 	ldbu	r2,-8(fp)
 8004b24:	18805326 	beq	r3,r2,8004c74 <_ZN5Stash4loadEhh+0x1a0>
        if (idx == WRITEBUF) {
 8004b28:	e0bffd03 	ldbu	r2,-12(fp)
 8004b2c:	1000201e 	bne	r2,zero,8004bb0 <_ZN5Stash4loadEhh+0xdc>
            ether.copyout((uint8_t)bufs[idx].bnum, (const uint8_t*)bufs[idx].bytes);
 8004b30:	e0bffd03 	ldbu	r2,-12(fp)
 8004b34:	040200b4 	movhi	r16,2050
 8004b38:	84396604 	addi	r16,r16,-6760
 8004b3c:	01401084 	movi	r5,66
 8004b40:	1009883a 	mov	r4,r2
 8004b44:	800a1780 	call	800a178 <__mulsi3>
 8004b48:	8085883a 	add	r2,r16,r2
 8004b4c:	10801004 	addi	r2,r2,64
 8004b50:	10800003 	ldbu	r2,0(r2)
 8004b54:	14003fcc 	andi	r16,r2,255
 8004b58:	e0bffd03 	ldbu	r2,-12(fp)
 8004b5c:	01401084 	movi	r5,66
 8004b60:	1009883a 	mov	r4,r2
 8004b64:	800a1780 	call	800a178 <__mulsi3>
 8004b68:	1007883a 	mov	r3,r2
 8004b6c:	008200b4 	movhi	r2,2050
 8004b70:	10b96604 	addi	r2,r2,-6760
 8004b74:	1885883a 	add	r2,r3,r2
 8004b78:	100b883a 	mov	r5,r2
 8004b7c:	8009883a 	mov	r4,r16
 8004b80:	80047780 	call	8004778 <_ZN8ENC28J607copyoutEhPKh>
            if (blk == bufs[READBUF].bnum)
 8004b84:	008200b4 	movhi	r2,2050
 8004b88:	10b96604 	addi	r2,r2,-6760
 8004b8c:	10802083 	ldbu	r2,130(r2)
 8004b90:	10c03fcc 	andi	r3,r2,255
 8004b94:	e0bffe03 	ldbu	r2,-8(fp)
 8004b98:	1880171e 	bne	r3,r2,8004bf8 <_ZN5Stash4loadEhh+0x124>
                bufs[READBUF].bnum = 255; // forget read page if same
 8004b9c:	008200b4 	movhi	r2,2050
 8004ba0:	10b96604 	addi	r2,r2,-6760
 8004ba4:	00ffffc4 	movi	r3,-1
 8004ba8:	10c02085 	stb	r3,130(r2)
 8004bac:	00001206 	br	8004bf8 <_ZN5Stash4loadEhh+0x124>
        } else if (blk == bufs[WRITEBUF].bnum) {
 8004bb0:	008200b4 	movhi	r2,2050
 8004bb4:	10b96604 	addi	r2,r2,-6760
 8004bb8:	10801003 	ldbu	r2,64(r2)
 8004bbc:	10c03fcc 	andi	r3,r2,255
 8004bc0:	e0bffe03 	ldbu	r2,-8(fp)
 8004bc4:	18800c1e 	bne	r3,r2,8004bf8 <_ZN5Stash4loadEhh+0x124>
            // special case: read page is same as write buffer
            memcpy(&bufs[READBUF], &bufs[WRITEBUF], sizeof bufs[0]);
 8004bc8:	008200b4 	movhi	r2,2050
 8004bcc:	10b96604 	addi	r2,r2,-6760
 8004bd0:	00c200b4 	movhi	r3,2050
 8004bd4:	18f96604 	addi	r3,r3,-6760
 8004bd8:	10801084 	addi	r2,r2,66
 8004bdc:	1809883a 	mov	r4,r3
 8004be0:	00c01084 	movi	r3,66
 8004be4:	180d883a 	mov	r6,r3
 8004be8:	200b883a 	mov	r5,r4
 8004bec:	1009883a 	mov	r4,r2
 8004bf0:	800ab080 	call	800ab08 <memcpy>
            return;
 8004bf4:	00001f06 	br	8004c74 <_ZN5Stash4loadEhh+0x1a0>
        }
        bufs[idx].bnum = blk;
 8004bf8:	e0bffd03 	ldbu	r2,-12(fp)
 8004bfc:	040200b4 	movhi	r16,2050
 8004c00:	84396604 	addi	r16,r16,-6760
 8004c04:	01401084 	movi	r5,66
 8004c08:	1009883a 	mov	r4,r2
 8004c0c:	800a1780 	call	800a178 <__mulsi3>
 8004c10:	8085883a 	add	r2,r16,r2
 8004c14:	10801004 	addi	r2,r2,64
 8004c18:	e0fffe03 	ldbu	r3,-8(fp)
 8004c1c:	10c00005 	stb	r3,0(r2)
        ether.copyin(bufs[idx].bnum, bufs[idx].bytes);
 8004c20:	e0bffd03 	ldbu	r2,-12(fp)
 8004c24:	040200b4 	movhi	r16,2050
 8004c28:	84396604 	addi	r16,r16,-6760
 8004c2c:	01401084 	movi	r5,66
 8004c30:	1009883a 	mov	r4,r2
 8004c34:	800a1780 	call	800a178 <__mulsi3>
 8004c38:	8085883a 	add	r2,r16,r2
 8004c3c:	10801004 	addi	r2,r2,64
 8004c40:	10800003 	ldbu	r2,0(r2)
 8004c44:	14003fcc 	andi	r16,r2,255
 8004c48:	e0bffd03 	ldbu	r2,-12(fp)
 8004c4c:	01401084 	movi	r5,66
 8004c50:	1009883a 	mov	r4,r2
 8004c54:	800a1780 	call	800a178 <__mulsi3>
 8004c58:	1007883a 	mov	r3,r2
 8004c5c:	008200b4 	movhi	r2,2050
 8004c60:	10b96604 	addi	r2,r2,-6760
 8004c64:	1885883a 	add	r2,r3,r2
 8004c68:	100b883a 	mov	r5,r2
 8004c6c:	8009883a 	mov	r4,r16
 8004c70:	80047f40 	call	80047f4 <_ZN8ENC28J606copyinEhPh>
    }
}
 8004c74:	e6ffff04 	addi	sp,fp,-4
 8004c78:	dfc00217 	ldw	ra,8(sp)
 8004c7c:	df000117 	ldw	fp,4(sp)
 8004c80:	dc000017 	ldw	r16,0(sp)
 8004c84:	dec00304 	addi	sp,sp,12
 8004c88:	f800283a 	ret

08004c8c <_ZN5Stash9freeCountEv>:

uint8_t Stash::freeCount () {
 8004c8c:	defffe04 	addi	sp,sp,-8
 8004c90:	df000115 	stw	fp,4(sp)
 8004c94:	df000104 	addi	fp,sp,4
    uint8_t count = 0;
 8004c98:	e03fff05 	stb	zero,-4(fp)
    for (uint8_t i = 0; i < sizeof map; ++i)
 8004c9c:	e03fff45 	stb	zero,-3(fp)
 8004ca0:	e0bfff43 	ldbu	r2,-3(fp)
 8004ca4:	108001e8 	cmpgeui	r2,r2,7
 8004ca8:	1000171e 	bne	r2,zero,8004d08 <_ZN5Stash9freeCountEv+0x7c>
        for (uint8_t m = 0x80; m != 0; m >>= 1)
 8004cac:	00bfe004 	movi	r2,-128
 8004cb0:	e0bfff85 	stb	r2,-2(fp)
 8004cb4:	e0bfff83 	ldbu	r2,-2(fp)
 8004cb8:	10000f26 	beq	r2,zero,8004cf8 <_ZN5Stash9freeCountEv+0x6c>
            if (map[i] & m)
 8004cbc:	e0ffff43 	ldbu	r3,-3(fp)
 8004cc0:	d0a72284 	addi	r2,gp,-25462
 8004cc4:	1885883a 	add	r2,r3,r2
 8004cc8:	10c00003 	ldbu	r3,0(r2)
 8004ccc:	e0bfff83 	ldbu	r2,-2(fp)
 8004cd0:	1884703a 	and	r2,r3,r2
 8004cd4:	10803fcc 	andi	r2,r2,255
 8004cd8:	10000326 	beq	r2,zero,8004ce8 <_ZN5Stash9freeCountEv+0x5c>
                ++count;
 8004cdc:	e0bfff03 	ldbu	r2,-4(fp)
 8004ce0:	10800044 	addi	r2,r2,1
 8004ce4:	e0bfff05 	stb	r2,-4(fp)
}

uint8_t Stash::freeCount () {
    uint8_t count = 0;
    for (uint8_t i = 0; i < sizeof map; ++i)
        for (uint8_t m = 0x80; m != 0; m >>= 1)
 8004ce8:	e0bfff83 	ldbu	r2,-2(fp)
 8004cec:	1005d07a 	srai	r2,r2,1
 8004cf0:	e0bfff85 	stb	r2,-2(fp)
 8004cf4:	003fef06 	br	8004cb4 <_ZN5Stash9freeCountEv+0x28>
    }
}

uint8_t Stash::freeCount () {
    uint8_t count = 0;
    for (uint8_t i = 0; i < sizeof map; ++i)
 8004cf8:	e0bfff43 	ldbu	r2,-3(fp)
 8004cfc:	10800044 	addi	r2,r2,1
 8004d00:	e0bfff45 	stb	r2,-3(fp)
 8004d04:	003fe606 	br	8004ca0 <_ZN5Stash9freeCountEv+0x14>
        for (uint8_t m = 0x80; m != 0; m >>= 1)
            if (map[i] & m)
                ++count;
    return count;
 8004d08:	e0bfff03 	ldbu	r2,-4(fp)
}
 8004d0c:	e037883a 	mov	sp,fp
 8004d10:	df000017 	ldw	fp,0(sp)
 8004d14:	dec00104 	addi	sp,sp,4
 8004d18:	f800283a 	ret

08004d1c <_ZN5Stash6createEv>:

// create a new stash; make it the active stash; return the first block as a handle
uint8_t Stash::create () {
 8004d1c:	defffc04 	addi	sp,sp,-16
 8004d20:	dfc00315 	stw	ra,12(sp)
 8004d24:	df000215 	stw	fp,8(sp)
 8004d28:	df000204 	addi	fp,sp,8
 8004d2c:	e13fff15 	stw	r4,-4(fp)
    uint8_t blk = allocBlock();
 8004d30:	80048700 	call	8004870 <_ZN5Stash10allocBlockEv>
 8004d34:	e0bffe05 	stb	r2,-8(fp)
    load(WRITEBUF, blk);
 8004d38:	e0bffe03 	ldbu	r2,-8(fp)
 8004d3c:	100b883a 	mov	r5,r2
 8004d40:	0009883a 	mov	r4,zero
 8004d44:	8004ad40 	call	8004ad4 <_ZN5Stash4loadEhh>
    bufs[WRITEBUF].head.count = 0;
 8004d48:	008200b4 	movhi	r2,2050
 8004d4c:	10b96604 	addi	r2,r2,-6760
 8004d50:	10000005 	stb	zero,0(r2)
    bufs[WRITEBUF].head.first = bufs[0].head.last = blk;
 8004d54:	008200b4 	movhi	r2,2050
 8004d58:	10b96604 	addi	r2,r2,-6760
 8004d5c:	e0fffe03 	ldbu	r3,-8(fp)
 8004d60:	10c00085 	stb	r3,2(r2)
 8004d64:	008200b4 	movhi	r2,2050
 8004d68:	10b96604 	addi	r2,r2,-6760
 8004d6c:	10c00083 	ldbu	r3,2(r2)
 8004d70:	008200b4 	movhi	r2,2050
 8004d74:	10b96604 	addi	r2,r2,-6760
 8004d78:	10c00045 	stb	r3,1(r2)
    bufs[WRITEBUF].tail = sizeof (StashHeader);
 8004d7c:	00c000c4 	movi	r3,3
 8004d80:	008200b4 	movhi	r2,2050
 8004d84:	10b96604 	addi	r2,r2,-6760
 8004d88:	10c00f85 	stb	r3,62(r2)
    bufs[WRITEBUF].next = 0;
 8004d8c:	008200b4 	movhi	r2,2050
 8004d90:	10b96604 	addi	r2,r2,-6760
 8004d94:	10000fc5 	stb	zero,63(r2)
    return open(blk); // you are now the active stash
 8004d98:	e0bffe03 	ldbu	r2,-8(fp)
 8004d9c:	100b883a 	mov	r5,r2
 8004da0:	e13fff17 	ldw	r4,-4(fp)
 8004da4:	8004dbc0 	call	8004dbc <_ZN5Stash4openEh>
}
 8004da8:	e037883a 	mov	sp,fp
 8004dac:	dfc00117 	ldw	ra,4(sp)
 8004db0:	df000017 	ldw	fp,0(sp)
 8004db4:	dec00204 	addi	sp,sp,8
 8004db8:	f800283a 	ret

08004dbc <_ZN5Stash4openEh>:

// the stashheader part only contains reasonable data if we are the first block
uint8_t Stash::open (uint8_t blk) {
 8004dbc:	defffc04 	addi	sp,sp,-16
 8004dc0:	dfc00315 	stw	ra,12(sp)
 8004dc4:	df000215 	stw	fp,8(sp)
 8004dc8:	df000204 	addi	fp,sp,8
 8004dcc:	e13ffe15 	stw	r4,-8(fp)
 8004dd0:	2805883a 	mov	r2,r5
 8004dd4:	e0bfff05 	stb	r2,-4(fp)
    curr = blk;
 8004dd8:	e0bffe17 	ldw	r2,-8(fp)
 8004ddc:	e0ffff03 	ldbu	r3,-4(fp)
 8004de0:	10c001c5 	stb	r3,7(r2)
    offs = sizeof (StashHeader); // goto first byte
 8004de4:	00c000c4 	movi	r3,3
 8004de8:	e0bffe17 	ldw	r2,-8(fp)
 8004dec:	10c00205 	stb	r3,8(r2)
    load(READBUF, curr);
 8004df0:	e0bffe17 	ldw	r2,-8(fp)
 8004df4:	108001c3 	ldbu	r2,7(r2)
 8004df8:	10803fcc 	andi	r2,r2,255
 8004dfc:	100b883a 	mov	r5,r2
 8004e00:	01000044 	movi	r4,1
 8004e04:	8004ad40 	call	8004ad4 <_ZN5Stash4loadEhh>
    memcpy((StashHeader*) this, bufs[READBUF].bytes, sizeof (StashHeader));
 8004e08:	e0bffe17 	ldw	r2,-8(fp)
 8004e0c:	10800104 	addi	r2,r2,4
 8004e10:	018000c4 	movi	r6,3
 8004e14:	014200b4 	movhi	r5,2050
 8004e18:	29797684 	addi	r5,r5,-6694
 8004e1c:	1009883a 	mov	r4,r2
 8004e20:	800ab080 	call	800ab08 <memcpy>
    return curr;
 8004e24:	e0bffe17 	ldw	r2,-8(fp)
 8004e28:	108001c3 	ldbu	r2,7(r2)
}
 8004e2c:	e037883a 	mov	sp,fp
 8004e30:	dfc00117 	ldw	ra,4(sp)
 8004e34:	df000017 	ldw	fp,0(sp)
 8004e38:	dec00204 	addi	sp,sp,8
 8004e3c:	f800283a 	ret

08004e40 <_ZN5Stash4saveEv>:

// save the metadata of current block into the first block
void Stash::save () {
 8004e40:	defffd04 	addi	sp,sp,-12
 8004e44:	dfc00215 	stw	ra,8(sp)
 8004e48:	df000115 	stw	fp,4(sp)
 8004e4c:	df000104 	addi	fp,sp,4
 8004e50:	e13fff15 	stw	r4,-4(fp)
    load(WRITEBUF, first);
 8004e54:	e0bfff17 	ldw	r2,-4(fp)
 8004e58:	10800143 	ldbu	r2,5(r2)
 8004e5c:	10803fcc 	andi	r2,r2,255
 8004e60:	100b883a 	mov	r5,r2
 8004e64:	0009883a 	mov	r4,zero
 8004e68:	8004ad40 	call	8004ad4 <_ZN5Stash4loadEhh>
    memcpy(bufs[WRITEBUF].bytes, (StashHeader*) this, sizeof (StashHeader));
 8004e6c:	e0bfff17 	ldw	r2,-4(fp)
 8004e70:	10800104 	addi	r2,r2,4
 8004e74:	018000c4 	movi	r6,3
 8004e78:	100b883a 	mov	r5,r2
 8004e7c:	010200b4 	movhi	r4,2050
 8004e80:	21396604 	addi	r4,r4,-6760
 8004e84:	800ab080 	call	800ab08 <memcpy>
    if (bufs[READBUF].bnum == first)
 8004e88:	008200b4 	movhi	r2,2050
 8004e8c:	10b96604 	addi	r2,r2,-6760
 8004e90:	10c02083 	ldbu	r3,130(r2)
 8004e94:	e0bfff17 	ldw	r2,-4(fp)
 8004e98:	10800143 	ldbu	r2,5(r2)
 8004e9c:	18c03fcc 	andi	r3,r3,255
 8004ea0:	10803fcc 	andi	r2,r2,255
 8004ea4:	1880031e 	bne	r3,r2,8004eb4 <_ZN5Stash4saveEv+0x74>
        load(READBUF, 0); // invalidates original in case it was the same block
 8004ea8:	000b883a 	mov	r5,zero
 8004eac:	01000044 	movi	r4,1
 8004eb0:	8004ad40 	call	8004ad4 <_ZN5Stash4loadEhh>
}
 8004eb4:	0001883a 	nop
 8004eb8:	e037883a 	mov	sp,fp
 8004ebc:	dfc00117 	ldw	ra,4(sp)
 8004ec0:	df000017 	ldw	fp,0(sp)
 8004ec4:	dec00204 	addi	sp,sp,8
 8004ec8:	f800283a 	ret

08004ecc <_ZN5Stash7releaseEv>:

// follow the linked list of blocks and free every block
void Stash::release () {
 8004ecc:	defffd04 	addi	sp,sp,-12
 8004ed0:	dfc00215 	stw	ra,8(sp)
 8004ed4:	df000115 	stw	fp,4(sp)
 8004ed8:	df000104 	addi	fp,sp,4
 8004edc:	e13fff15 	stw	r4,-4(fp)
    while (first > 0) {
 8004ee0:	e0bfff17 	ldw	r2,-4(fp)
 8004ee4:	10800143 	ldbu	r2,5(r2)
 8004ee8:	10803fcc 	andi	r2,r2,255
 8004eec:	10000f26 	beq	r2,zero,8004f2c <_ZN5Stash7releaseEv+0x60>
        freeBlock(first);
 8004ef0:	e0bfff17 	ldw	r2,-4(fp)
 8004ef4:	10800143 	ldbu	r2,5(r2)
 8004ef8:	10803fcc 	andi	r2,r2,255
 8004efc:	1009883a 	mov	r4,r2
 8004f00:	800495c0 	call	800495c <_ZN5Stash9freeBlockEh>
        first = ether.peekin(first, 63);
 8004f04:	e0bfff17 	ldw	r2,-4(fp)
 8004f08:	10800143 	ldbu	r2,5(r2)
 8004f0c:	10803fcc 	andi	r2,r2,255
 8004f10:	01400fc4 	movi	r5,63
 8004f14:	1009883a 	mov	r4,r2
 8004f18:	80046e80 	call	80046e8 <_ZN8ENC28J606peekinEhh>
 8004f1c:	1007883a 	mov	r3,r2
 8004f20:	e0bfff17 	ldw	r2,-4(fp)
 8004f24:	10c00145 	stb	r3,5(r2)
        load(READBUF, 0); // invalidates original in case it was the same block
}

// follow the linked list of blocks and free every block
void Stash::release () {
    while (first > 0) {
 8004f28:	003fed06 	br	8004ee0 <_ZN5Stash7releaseEv+0x14>
        freeBlock(first);
        first = ether.peekin(first, 63);
    }
}
 8004f2c:	0001883a 	nop
 8004f30:	e037883a 	mov	sp,fp
 8004f34:	dfc00117 	ldw	ra,4(sp)
 8004f38:	df000017 	ldw	fp,0(sp)
 8004f3c:	dec00204 	addi	sp,sp,8
 8004f40:	f800283a 	ret

08004f44 <_ZN5Stash3putEc>:

void Stash::put (char c) {
 8004f44:	defffb04 	addi	sp,sp,-20
 8004f48:	dfc00415 	stw	ra,16(sp)
 8004f4c:	df000315 	stw	fp,12(sp)
 8004f50:	df000304 	addi	fp,sp,12
 8004f54:	e13ffe15 	stw	r4,-8(fp)
 8004f58:	2805883a 	mov	r2,r5
 8004f5c:	e0bfff05 	stb	r2,-4(fp)
    load(WRITEBUF, last);
 8004f60:	e0bffe17 	ldw	r2,-8(fp)
 8004f64:	10800183 	ldbu	r2,6(r2)
 8004f68:	10803fcc 	andi	r2,r2,255
 8004f6c:	100b883a 	mov	r5,r2
 8004f70:	0009883a 	mov	r4,zero
 8004f74:	8004ad40 	call	8004ad4 <_ZN5Stash4loadEhh>
    uint8_t t = bufs[WRITEBUF].tail;
 8004f78:	008200b4 	movhi	r2,2050
 8004f7c:	10b96604 	addi	r2,r2,-6760
 8004f80:	10800f83 	ldbu	r2,62(r2)
 8004f84:	e0bffd05 	stb	r2,-12(fp)
    bufs[WRITEBUF].bytes[t++] = c;
 8004f88:	e0bffd03 	ldbu	r2,-12(fp)
 8004f8c:	10c00044 	addi	r3,r2,1
 8004f90:	e0fffd05 	stb	r3,-12(fp)
 8004f94:	11003fcc 	andi	r4,r2,255
 8004f98:	e0ffff03 	ldbu	r3,-4(fp)
 8004f9c:	008200b4 	movhi	r2,2050
 8004fa0:	10b96604 	addi	r2,r2,-6760
 8004fa4:	1105883a 	add	r2,r2,r4
 8004fa8:	10c00005 	stb	r3,0(r2)
    if (t <= 62)
 8004fac:	e0bffd03 	ldbu	r2,-12(fp)
 8004fb0:	10800fe8 	cmpgeui	r2,r2,63
 8004fb4:	1000051e 	bne	r2,zero,8004fcc <_ZN5Stash3putEc+0x88>
        bufs[WRITEBUF].tail = t;
 8004fb8:	008200b4 	movhi	r2,2050
 8004fbc:	10b96604 	addi	r2,r2,-6760
 8004fc0:	e0fffd03 	ldbu	r3,-12(fp)
 8004fc4:	10c00f85 	stb	r3,62(r2)
        last = bufs[WRITEBUF].next;
        load(WRITEBUF, last);
        bufs[WRITEBUF].tail = bufs[WRITEBUF].next = 0;
        ++count;
    }
}
 8004fc8:	00001f06 	br	8005048 <_ZN5Stash3putEc+0x104>
    uint8_t t = bufs[WRITEBUF].tail;
    bufs[WRITEBUF].bytes[t++] = c;
    if (t <= 62)
        bufs[WRITEBUF].tail = t;
    else {
        bufs[WRITEBUF].next = allocBlock();
 8004fcc:	80048700 	call	8004870 <_ZN5Stash10allocBlockEv>
 8004fd0:	1007883a 	mov	r3,r2
 8004fd4:	008200b4 	movhi	r2,2050
 8004fd8:	10b96604 	addi	r2,r2,-6760
 8004fdc:	10c00fc5 	stb	r3,63(r2)
        last = bufs[WRITEBUF].next;
 8004fe0:	008200b4 	movhi	r2,2050
 8004fe4:	10b96604 	addi	r2,r2,-6760
 8004fe8:	10c00fc3 	ldbu	r3,63(r2)
 8004fec:	e0bffe17 	ldw	r2,-8(fp)
 8004ff0:	10c00185 	stb	r3,6(r2)
        load(WRITEBUF, last);
 8004ff4:	e0bffe17 	ldw	r2,-8(fp)
 8004ff8:	10800183 	ldbu	r2,6(r2)
 8004ffc:	10803fcc 	andi	r2,r2,255
 8005000:	100b883a 	mov	r5,r2
 8005004:	0009883a 	mov	r4,zero
 8005008:	8004ad40 	call	8004ad4 <_ZN5Stash4loadEhh>
        bufs[WRITEBUF].tail = bufs[WRITEBUF].next = 0;
 800500c:	008200b4 	movhi	r2,2050
 8005010:	10b96604 	addi	r2,r2,-6760
 8005014:	10000fc5 	stb	zero,63(r2)
 8005018:	008200b4 	movhi	r2,2050
 800501c:	10b96604 	addi	r2,r2,-6760
 8005020:	10c00fc3 	ldbu	r3,63(r2)
 8005024:	008200b4 	movhi	r2,2050
 8005028:	10b96604 	addi	r2,r2,-6760
 800502c:	10c00f85 	stb	r3,62(r2)
        ++count;
 8005030:	e0bffe17 	ldw	r2,-8(fp)
 8005034:	10800103 	ldbu	r2,4(r2)
 8005038:	10800044 	addi	r2,r2,1
 800503c:	1007883a 	mov	r3,r2
 8005040:	e0bffe17 	ldw	r2,-8(fp)
 8005044:	10c00105 	stb	r3,4(r2)
    }
}
 8005048:	0001883a 	nop
 800504c:	e037883a 	mov	sp,fp
 8005050:	dfc00117 	ldw	ra,4(sp)
 8005054:	df000017 	ldw	fp,0(sp)
 8005058:	dec00204 	addi	sp,sp,8
 800505c:	f800283a 	ret

08005060 <_ZN5Stash5printEPc>:

void Stash::print (char* str) {
 8005060:	defffb04 	addi	sp,sp,-20
 8005064:	dfc00415 	stw	ra,16(sp)
 8005068:	df000315 	stw	fp,12(sp)
 800506c:	df000304 	addi	fp,sp,12
 8005070:	e13ffe15 	stw	r4,-8(fp)
 8005074:	e17fff15 	stw	r5,-4(fp)
	int i = 0;
 8005078:	e03ffd15 	stw	zero,-12(fp)
	while(str[i] != NULL) {
 800507c:	e0bffd17 	ldw	r2,-12(fp)
 8005080:	e0ffff17 	ldw	r3,-4(fp)
 8005084:	1885883a 	add	r2,r3,r2
 8005088:	10800003 	ldbu	r2,0(r2)
 800508c:	10803fcc 	andi	r2,r2,255
 8005090:	1080201c 	xori	r2,r2,128
 8005094:	10bfe004 	addi	r2,r2,-128
 8005098:	10000e26 	beq	r2,zero,80050d4 <_ZN5Stash5printEPc+0x74>
		put(str[i]);
 800509c:	e0bffd17 	ldw	r2,-12(fp)
 80050a0:	e0ffff17 	ldw	r3,-4(fp)
 80050a4:	1885883a 	add	r2,r3,r2
 80050a8:	10800003 	ldbu	r2,0(r2)
 80050ac:	10803fcc 	andi	r2,r2,255
 80050b0:	1080201c 	xori	r2,r2,128
 80050b4:	10bfe004 	addi	r2,r2,-128
 80050b8:	100b883a 	mov	r5,r2
 80050bc:	e13ffe17 	ldw	r4,-8(fp)
 80050c0:	8004f440 	call	8004f44 <_ZN5Stash3putEc>
		i++;
 80050c4:	e0bffd17 	ldw	r2,-12(fp)
 80050c8:	10800044 	addi	r2,r2,1
 80050cc:	e0bffd15 	stw	r2,-12(fp)
    }
}

void Stash::print (char* str) {
	int i = 0;
	while(str[i] != NULL) {
 80050d0:	003fea06 	br	800507c <_ZN5Stash5printEPc+0x1c>
		put(str[i]);
		i++;
	}
}
 80050d4:	0001883a 	nop
 80050d8:	e037883a 	mov	sp,fp
 80050dc:	dfc00117 	ldw	ra,4(sp)
 80050e0:	df000017 	ldw	fp,0(sp)
 80050e4:	dec00204 	addi	sp,sp,8
 80050e8:	f800283a 	ret

080050ec <_ZN5Stash3getEv>:

char Stash::get () {
 80050ec:	defffc04 	addi	sp,sp,-16
 80050f0:	dfc00315 	stw	ra,12(sp)
 80050f4:	df000215 	stw	fp,8(sp)
 80050f8:	df000204 	addi	fp,sp,8
 80050fc:	e13fff15 	stw	r4,-4(fp)
    load(READBUF, curr);
 8005100:	e0bfff17 	ldw	r2,-4(fp)
 8005104:	108001c3 	ldbu	r2,7(r2)
 8005108:	10803fcc 	andi	r2,r2,255
 800510c:	100b883a 	mov	r5,r2
 8005110:	01000044 	movi	r4,1
 8005114:	8004ad40 	call	8004ad4 <_ZN5Stash4loadEhh>
    if (curr == last && offs >= bufs[READBUF].tail)
 8005118:	e0bfff17 	ldw	r2,-4(fp)
 800511c:	10c001c3 	ldbu	r3,7(r2)
 8005120:	e0bfff17 	ldw	r2,-4(fp)
 8005124:	10800183 	ldbu	r2,6(r2)
 8005128:	18c03fcc 	andi	r3,r3,255
 800512c:	10803fcc 	andi	r2,r2,255
 8005130:	18800a1e 	bne	r3,r2,800515c <_ZN5Stash3getEv+0x70>
 8005134:	e0bfff17 	ldw	r2,-4(fp)
 8005138:	10c00203 	ldbu	r3,8(r2)
 800513c:	008200b4 	movhi	r2,2050
 8005140:	10b96604 	addi	r2,r2,-6760
 8005144:	10802003 	ldbu	r2,128(r2)
 8005148:	18c03fcc 	andi	r3,r3,255
 800514c:	10803fcc 	andi	r2,r2,255
 8005150:	18800236 	bltu	r3,r2,800515c <_ZN5Stash3getEv+0x70>
        return 0;
 8005154:	0005883a 	mov	r2,zero
 8005158:	00002806 	br	80051fc <_ZN5Stash3getEv+0x110>
    uint8_t b = bufs[READBUF].bytes[offs];
 800515c:	e0bfff17 	ldw	r2,-4(fp)
 8005160:	10800203 	ldbu	r2,8(r2)
 8005164:	10c03fcc 	andi	r3,r2,255
 8005168:	008200b4 	movhi	r2,2050
 800516c:	10b96604 	addi	r2,r2,-6760
 8005170:	10c5883a 	add	r2,r2,r3
 8005174:	10801084 	addi	r2,r2,66
 8005178:	10800003 	ldbu	r2,0(r2)
 800517c:	e0bffe05 	stb	r2,-8(fp)
    if (++offs >= 63 && curr != last) {
 8005180:	e0bfff17 	ldw	r2,-4(fp)
 8005184:	10800203 	ldbu	r2,8(r2)
 8005188:	10800044 	addi	r2,r2,1
 800518c:	1007883a 	mov	r3,r2
 8005190:	e0bfff17 	ldw	r2,-4(fp)
 8005194:	10c00205 	stb	r3,8(r2)
 8005198:	e0bfff17 	ldw	r2,-4(fp)
 800519c:	10800203 	ldbu	r2,8(r2)
 80051a0:	10803fcc 	andi	r2,r2,255
 80051a4:	10800ff0 	cmpltui	r2,r2,63
 80051a8:	1000091e 	bne	r2,zero,80051d0 <_ZN5Stash3getEv+0xe4>
 80051ac:	e0bfff17 	ldw	r2,-4(fp)
 80051b0:	10c001c3 	ldbu	r3,7(r2)
 80051b4:	e0bfff17 	ldw	r2,-4(fp)
 80051b8:	10800183 	ldbu	r2,6(r2)
 80051bc:	18c03fcc 	andi	r3,r3,255
 80051c0:	10803fcc 	andi	r2,r2,255
 80051c4:	18800226 	beq	r3,r2,80051d0 <_ZN5Stash3getEv+0xe4>
 80051c8:	00800044 	movi	r2,1
 80051cc:	00000106 	br	80051d4 <_ZN5Stash3getEv+0xe8>
 80051d0:	0005883a 	mov	r2,zero
 80051d4:	10803fcc 	andi	r2,r2,255
 80051d8:	10000726 	beq	r2,zero,80051f8 <_ZN5Stash3getEv+0x10c>
        curr = bufs[READBUF].next;
 80051dc:	008200b4 	movhi	r2,2050
 80051e0:	10b96604 	addi	r2,r2,-6760
 80051e4:	10c02043 	ldbu	r3,129(r2)
 80051e8:	e0bfff17 	ldw	r2,-4(fp)
 80051ec:	10c001c5 	stb	r3,7(r2)
        offs = 0;
 80051f0:	e0bfff17 	ldw	r2,-4(fp)
 80051f4:	10000205 	stb	zero,8(r2)
    }
    return b;
 80051f8:	e0bffe03 	ldbu	r2,-8(fp)
}
 80051fc:	e037883a 	mov	sp,fp
 8005200:	dfc00117 	ldw	ra,4(sp)
 8005204:	df000017 	ldw	fp,0(sp)
 8005208:	dec00204 	addi	sp,sp,8
 800520c:	f800283a 	ret

08005210 <_ZN5Stash4sizeEv>:

// fetchbyte(last, 62) is tail, i.e., number of characters in last block
uint16_t Stash::size () {
 8005210:	defffc04 	addi	sp,sp,-16
 8005214:	dfc00315 	stw	ra,12(sp)
 8005218:	df000215 	stw	fp,8(sp)
 800521c:	dc000115 	stw	r16,4(sp)
 8005220:	df000204 	addi	fp,sp,8
 8005224:	e13ffe15 	stw	r4,-8(fp)
    return 63 * count + fetchByte(last, 62) - sizeof (StashHeader);
 8005228:	e0bffe17 	ldw	r2,-8(fp)
 800522c:	10800103 	ldbu	r2,4(r2)
 8005230:	10803fcc 	andi	r2,r2,255
 8005234:	01400fc4 	movi	r5,63
 8005238:	1009883a 	mov	r4,r2
 800523c:	800a1780 	call	800a178 <__mulsi3>
 8005240:	1021883a 	mov	r16,r2
 8005244:	e0bffe17 	ldw	r2,-8(fp)
 8005248:	10800183 	ldbu	r2,6(r2)
 800524c:	10803fcc 	andi	r2,r2,255
 8005250:	01400f84 	movi	r5,62
 8005254:	1009883a 	mov	r4,r2
 8005258:	80049c40 	call	80049c4 <_ZN5Stash9fetchByteEhh>
 800525c:	10803fcc 	andi	r2,r2,255
 8005260:	8085883a 	add	r2,r16,r2
 8005264:	1007883a 	mov	r3,r2
 8005268:	008000c4 	movi	r2,3
 800526c:	1885c83a 	sub	r2,r3,r2
}
 8005270:	e6ffff04 	addi	sp,fp,-4
 8005274:	dfc00217 	ldw	ra,8(sp)
 8005278:	df000117 	ldw	fp,4(sp)
 800527c:	dc000017 	ldw	r16,0(sp)
 8005280:	dec00304 	addi	sp,sp,12
 8005284:	f800283a 	ret

08005288 <_ZN5Stash7prepareEPKcz>:

// write information about the fmt string and the arguments into special page/block 0
// block 0 is initially marked as allocated and never returned by allocateBlock
void Stash::prepare (const char* fmt, ...) {
 8005288:	deffed04 	addi	sp,sp,-76
 800528c:	dfc00f15 	stw	ra,60(sp)
 8005290:	df000e15 	stw	fp,56(sp)
 8005294:	dc000d15 	stw	r16,52(sp)
 8005298:	df000e04 	addi	fp,sp,56
 800529c:	e13ffe15 	stw	r4,-8(fp)
 80052a0:	e1400215 	stw	r5,8(fp)
 80052a4:	e1800315 	stw	r6,12(fp)
 80052a8:	e1c00415 	stw	r7,16(fp)
    Stash::load(WRITEBUF, 0);
 80052ac:	000b883a 	mov	r5,zero
 80052b0:	0009883a 	mov	r4,zero
 80052b4:	8004ad40 	call	8004ad4 <_ZN5Stash4loadEhh>
    uint16_t* segs = Stash::bufs[WRITEBUF].words;
 80052b8:	008200b4 	movhi	r2,2050
 80052bc:	10b96604 	addi	r2,r2,-6760
 80052c0:	e0bff215 	stw	r2,-56(fp)
    *segs++ = strlen(fmt);
 80052c4:	e43ff217 	ldw	r16,-56(fp)
 80052c8:	80800084 	addi	r2,r16,2
 80052cc:	e0bff215 	stw	r2,-56(fp)
 80052d0:	e13ffe17 	ldw	r4,-8(fp)
 80052d4:	800b0980 	call	800b098 <strlen>
 80052d8:	8080000d 	sth	r2,0(r16)
    *segs++ = (uint32_t) fmt;
 80052dc:	e0bff217 	ldw	r2,-56(fp)
 80052e0:	10c00084 	addi	r3,r2,2
 80052e4:	e0fff215 	stw	r3,-56(fp)
 80052e8:	e0fffe17 	ldw	r3,-8(fp)
 80052ec:	10c0000d 	sth	r3,0(r2)
    *segs++ = (uint32_t) fmt >> 16;
 80052f0:	e0bff217 	ldw	r2,-56(fp)
 80052f4:	10c00084 	addi	r3,r2,2
 80052f8:	e0fff215 	stw	r3,-56(fp)
 80052fc:	e0fffe17 	ldw	r3,-8(fp)
 8005300:	1806d43a 	srli	r3,r3,16
 8005304:	10c0000d 	sth	r3,0(r2)
    va_list ap;
    va_start(ap, fmt);
 8005308:	e0800204 	addi	r2,fp,8
 800530c:	e0bff815 	stw	r2,-32(fp)
    for (;;) {
        char c = *fmt++;
 8005310:	e0bffe17 	ldw	r2,-8(fp)
 8005314:	10c00044 	addi	r3,r2,1
 8005318:	e0fffe15 	stw	r3,-8(fp)
 800531c:	10800003 	ldbu	r2,0(r2)
 8005320:	e0bff505 	stb	r2,-44(fp)
        if (c == 0)
 8005324:	e0bff507 	ldb	r2,-44(fp)
 8005328:	10007326 	beq	r2,zero,80054f8 <_ZN5Stash7prepareEPKcz+0x270>
            break;
        if (c == '$') {
 800532c:	e0bff507 	ldb	r2,-44(fp)
 8005330:	10800918 	cmpnei	r2,r2,36
 8005334:	103ff61e 	bne	r2,zero,8005310 <_ZN5Stash7prepareEPKcz+0x88>
            uint32_t argval = va_arg(ap, int), arglen = 0;
 8005338:	e0bff817 	ldw	r2,-32(fp)
 800533c:	10c00104 	addi	r3,r2,4
 8005340:	e0fff815 	stw	r3,-32(fp)
 8005344:	10800017 	ldw	r2,0(r2)
 8005348:	e0bff615 	stw	r2,-40(fp)
 800534c:	e03ff315 	stw	zero,-52(fp)
            switch (*fmt++) {
 8005350:	e0bffe17 	ldw	r2,-8(fp)
 8005354:	10c00044 	addi	r3,r2,1
 8005358:	e0fffe15 	stw	r3,-8(fp)
 800535c:	10800003 	ldbu	r2,0(r2)
 8005360:	10803fcc 	andi	r2,r2,255
 8005364:	1080201c 	xori	r2,r2,128
 8005368:	10bfe004 	addi	r2,r2,-128
 800536c:	10bfef04 	addi	r2,r2,-68
 8005370:	10c00428 	cmpgeui	r3,r2,16
 8005374:	18004a1e 	bne	r3,zero,80054a0 <_ZN5Stash7prepareEPKcz+0x218>
 8005378:	100690ba 	slli	r3,r2,2
 800537c:	00820034 	movhi	r2,2048
 8005380:	1094e404 	addi	r2,r2,21392
 8005384:	1885883a 	add	r2,r3,r2
 8005388:	10800017 	ldw	r2,0(r2)
 800538c:	1000683a 	jmp	r2
 8005390:	080053d0 	cmplti	zero,at,335
 8005394:	0800542c 	andhi	zero,at,336
 8005398:	08005418 	cmpnei	zero,at,336
 800539c:	080054a0 	cmpeqi	zero,at,338
 80053a0:	08005468 	cmpgeui	zero,at,337
 80053a4:	080054a0 	cmpeqi	zero,at,338
 80053a8:	080054a0 	cmpeqi	zero,at,338
 80053ac:	080054a0 	cmpeqi	zero,at,338
 80053b0:	080054a0 	cmpeqi	zero,at,338
 80053b4:	080054a0 	cmpeqi	zero,at,338
 80053b8:	080054a0 	cmpeqi	zero,at,338
 80053bc:	080054a0 	cmpeqi	zero,at,338
 80053c0:	080054a0 	cmpeqi	zero,at,338
 80053c4:	080054a0 	cmpeqi	zero,at,338
 80053c8:	080054a0 	cmpeqi	zero,at,338
 80053cc:	08005404 	addi	zero,at,336
            case 'D': {
                char buf[7];
                ether.wtoa(argval, buf);
 80053d0:	e0bff617 	ldw	r2,-40(fp)
 80053d4:	10bfffcc 	andi	r2,r2,65535
 80053d8:	e0fff904 	addi	r3,fp,-28
 80053dc:	180d883a 	mov	r6,r3
 80053e0:	100b883a 	mov	r5,r2
 80053e4:	d1270c84 	addi	r4,gp,-25550
 80053e8:	80023f80 	call	80023f8 <_ZN9EtherCard4wtoaEtPc>
                arglen = strlen(buf);
 80053ec:	e0bff904 	addi	r2,fp,-28
 80053f0:	1009883a 	mov	r4,r2
 80053f4:	800b0980 	call	800b098 <strlen>
 80053f8:	e0bff315 	stw	r2,-52(fp)
                break;
 80053fc:	0001883a 	nop
 8005400:	00002706 	br	80054a0 <_ZN5Stash7prepareEPKcz+0x218>
            }
            case 'S':
                arglen = strlen((const char*) argval);
 8005404:	e0bff617 	ldw	r2,-40(fp)
 8005408:	1009883a 	mov	r4,r2
 800540c:	800b0980 	call	800b098 <strlen>
 8005410:	e0bff315 	stw	r2,-52(fp)
                break;
 8005414:	00002206 	br	80054a0 <_ZN5Stash7prepareEPKcz+0x218>
            case 'F':
                arglen = strlen((const char*) argval);
 8005418:	e0bff617 	ldw	r2,-40(fp)
 800541c:	1009883a 	mov	r4,r2
 8005420:	800b0980 	call	800b098 <strlen>
 8005424:	e0bff315 	stw	r2,-52(fp)
                break;
 8005428:	00001d06 	br	80054a0 <_ZN5Stash7prepareEPKcz+0x218>
            case 'E': {
                byte* s = (byte*) argval;
 800542c:	e0bff617 	ldw	r2,-40(fp)
 8005430:	e0bff415 	stw	r2,-48(fp)
                char d;
                while ((d = *s++) != 0)
 8005434:	e0bff417 	ldw	r2,-48(fp)
 8005438:	10c00044 	addi	r3,r2,1
 800543c:	e0fff415 	stw	r3,-48(fp)
 8005440:	10800003 	ldbu	r2,0(r2)
 8005444:	e0bff705 	stb	r2,-36(fp)
 8005448:	e0bff707 	ldb	r2,-36(fp)
 800544c:	1004c03a 	cmpne	r2,r2,zero
 8005450:	10803fcc 	andi	r2,r2,255
 8005454:	10001126 	beq	r2,zero,800549c <_ZN5Stash7prepareEPKcz+0x214>
                    ++arglen;
 8005458:	e0bff317 	ldw	r2,-52(fp)
 800545c:	10800044 	addi	r2,r2,1
 8005460:	e0bff315 	stw	r2,-52(fp)
                arglen = strlen((const char*) argval);
                break;
            case 'E': {
                byte* s = (byte*) argval;
                char d;
                while ((d = *s++) != 0)
 8005464:	003ff306 	br	8005434 <_ZN5Stash7prepareEPKcz+0x1ac>
                    ++arglen;
                break;
            }
            case 'H': {
                Stash stash (argval);
 8005468:	e0bff617 	ldw	r2,-40(fp)
 800546c:	10c03fcc 	andi	r3,r2,255
 8005470:	e0bffb04 	addi	r2,fp,-20
 8005474:	180b883a 	mov	r5,r3
 8005478:	1009883a 	mov	r4,r2
 800547c:	8005a400 	call	8005a40 <_ZN5StashC1Eh>
                arglen = stash.size();
 8005480:	e0bffb04 	addi	r2,fp,-20
 8005484:	1009883a 	mov	r4,r2
 8005488:	80052100 	call	8005210 <_ZN5Stash4sizeEv>
 800548c:	10bfffcc 	andi	r2,r2,65535
 8005490:	e0bff315 	stw	r2,-52(fp)
                break;
 8005494:	0001883a 	nop
 8005498:	00000106 	br	80054a0 <_ZN5Stash7prepareEPKcz+0x218>
            case 'E': {
                byte* s = (byte*) argval;
                char d;
                while ((d = *s++) != 0)
                    ++arglen;
                break;
 800549c:	0001883a 	nop
                Stash stash (argval);
                arglen = stash.size();
                break;
            }
            }
            *segs++ = argval;
 80054a0:	e0bff217 	ldw	r2,-56(fp)
 80054a4:	10c00084 	addi	r3,r2,2
 80054a8:	e0fff215 	stw	r3,-56(fp)
 80054ac:	e0fff617 	ldw	r3,-40(fp)
 80054b0:	10c0000d 	sth	r3,0(r2)
            *segs++ = argval >> 16;
 80054b4:	e0bff217 	ldw	r2,-56(fp)
 80054b8:	10c00084 	addi	r3,r2,2
 80054bc:	e0fff215 	stw	r3,-56(fp)
 80054c0:	e0fff617 	ldw	r3,-40(fp)
 80054c4:	1806d43a 	srli	r3,r3,16
 80054c8:	10c0000d 	sth	r3,0(r2)
            Stash::bufs[WRITEBUF].words[0] += arglen - 2;
 80054cc:	008200b4 	movhi	r2,2050
 80054d0:	10b96604 	addi	r2,r2,-6760
 80054d4:	1080000b 	ldhu	r2,0(r2)
 80054d8:	e0fff317 	ldw	r3,-52(fp)
 80054dc:	10c5883a 	add	r2,r2,r3
 80054e0:	10bfff84 	addi	r2,r2,-2
 80054e4:	1007883a 	mov	r3,r2
 80054e8:	008200b4 	movhi	r2,2050
 80054ec:	10b96604 	addi	r2,r2,-6760
 80054f0:	10c0000d 	sth	r3,0(r2)
    *segs++ = strlen(fmt);
    *segs++ = (uint32_t) fmt;
    *segs++ = (uint32_t) fmt >> 16;
    va_list ap;
    va_start(ap, fmt);
    for (;;) {
 80054f4:	003f8606 	br	8005310 <_ZN5Stash7prepareEPKcz+0x88>
        char c = *fmt++;
        if (c == 0)
            break;
 80054f8:	0001883a 	nop
            *segs++ = argval >> 16;
            Stash::bufs[WRITEBUF].words[0] += arglen - 2;
        }
    }
    va_end(ap);
}
 80054fc:	0001883a 	nop
 8005500:	e6ffff04 	addi	sp,fp,-4
 8005504:	dfc00217 	ldw	ra,8(sp)
 8005508:	df000117 	ldw	fp,4(sp)
 800550c:	dc000017 	ldw	r16,0(sp)
 8005510:	dec00604 	addi	sp,sp,24
 8005514:	f800283a 	ret

08005518 <_ZN5Stash6lengthEv>:

uint16_t Stash::length () {
 8005518:	defffe04 	addi	sp,sp,-8
 800551c:	dfc00115 	stw	ra,4(sp)
 8005520:	df000015 	stw	fp,0(sp)
 8005524:	d839883a 	mov	fp,sp
    Stash::load(WRITEBUF, 0);
 8005528:	000b883a 	mov	r5,zero
 800552c:	0009883a 	mov	r4,zero
 8005530:	8004ad40 	call	8004ad4 <_ZN5Stash4loadEhh>
    return Stash::bufs[WRITEBUF].words[0];
 8005534:	008200b4 	movhi	r2,2050
 8005538:	10b96604 	addi	r2,r2,-6760
 800553c:	1080000b 	ldhu	r2,0(r2)
}
 8005540:	e037883a 	mov	sp,fp
 8005544:	dfc00117 	ldw	ra,4(sp)
 8005548:	df000017 	ldw	fp,0(sp)
 800554c:	dec00204 	addi	sp,sp,8
 8005550:	f800283a 	ret

08005554 <_ZN5Stash7extractEttPv>:

void Stash::extract (uint16_t offset, uint16_t count, void* buf) {
 8005554:	deffef04 	addi	sp,sp,-68
 8005558:	dfc01015 	stw	ra,64(sp)
 800555c:	df000f15 	stw	fp,60(sp)
 8005560:	df000f04 	addi	fp,sp,60
 8005564:	2007883a 	mov	r3,r4
 8005568:	2805883a 	mov	r2,r5
 800556c:	e1bfff15 	stw	r6,-4(fp)
 8005570:	e0fffd0d 	sth	r3,-12(fp)
 8005574:	e0bffe0d 	sth	r2,-8(fp)
    Stash::load(WRITEBUF, 0);
 8005578:	000b883a 	mov	r5,zero
 800557c:	0009883a 	mov	r4,zero
 8005580:	8004ad40 	call	8004ad4 <_ZN5Stash4loadEhh>
    uint16_t* segs = Stash::bufs[WRITEBUF].words;
 8005584:	008200b4 	movhi	r2,2050
 8005588:	10b96604 	addi	r2,r2,-6760
 800558c:	e0bff115 	stw	r2,-60(fp)
    const char* fmt = (const char*)((segs[2] << 16) | segs[1]);
 8005590:	e0bff117 	ldw	r2,-60(fp)
 8005594:	10800104 	addi	r2,r2,4
 8005598:	1080000b 	ldhu	r2,0(r2)
 800559c:	10bfffcc 	andi	r2,r2,65535
 80055a0:	1006943a 	slli	r3,r2,16
 80055a4:	e0bff117 	ldw	r2,-60(fp)
 80055a8:	10800084 	addi	r2,r2,2
 80055ac:	1080000b 	ldhu	r2,0(r2)
 80055b0:	10bfffcc 	andi	r2,r2,65535
 80055b4:	1884b03a 	or	r2,r3,r2
 80055b8:	e0bff215 	stw	r2,-56(fp)
    segs += 2;
 80055bc:	e0bff117 	ldw	r2,-60(fp)
 80055c0:	10800104 	addi	r2,r2,4
 80055c4:	e0bff115 	stw	r2,-60(fp)
    Stash stash;
 80055c8:	e0bff804 	addi	r2,fp,-32
 80055cc:	1009883a 	mov	r4,r2
 80055d0:	80059e40 	call	80059e4 <_ZN5StashC1Ev>
    char mode = '@', tmp[7], *ptr = NULL, *out = (char*) buf;
 80055d4:	00801004 	movi	r2,64
 80055d8:	e0bff305 	stb	r2,-52(fp)
 80055dc:	e03ff415 	stw	zero,-48(fp)
 80055e0:	e0bfff17 	ldw	r2,-4(fp)
 80055e4:	e0bff515 	stw	r2,-44(fp)
    for (uint16_t i = 0; i < offset + count; ) {
 80055e8:	e03ff60d 	sth	zero,-40(fp)
 80055ec:	e0fff60b 	ldhu	r3,-40(fp)
 80055f0:	e13ffd0b 	ldhu	r4,-12(fp)
 80055f4:	e0bffe0b 	ldhu	r2,-8(fp)
 80055f8:	2085883a 	add	r2,r4,r2
 80055fc:	18809c0e 	bge	r3,r2,8005870 <_ZN5Stash7extractEttPv+0x31c>
        char c = 0;
 8005600:	e03ff685 	stb	zero,-38(fp)
        switch (mode) {
 8005604:	e0bff307 	ldb	r2,-52(fp)
 8005608:	10bff004 	addi	r2,r2,-64
 800560c:	10c00528 	cmpgeui	r3,r2,20
 8005610:	1800831e 	bne	r3,zero,8005820 <_ZN5Stash7extractEttPv+0x2cc>
 8005614:	100690ba 	slli	r3,r2,2
 8005618:	00820034 	movhi	r2,2048
 800561c:	10958b04 	addi	r2,r2,22060
 8005620:	1885883a 	add	r2,r3,r2
 8005624:	10800017 	ldw	r2,0(r2)
 8005628:	1000683a 	jmp	r2
 800562c:	0800567c 	xorhi	zero,at,345
 8005630:	08005820 	cmpeqi	zero,at,352
 8005634:	08005820 	cmpeqi	zero,at,352
 8005638:	08005820 	cmpeqi	zero,at,352
 800563c:	080057c4 	addi	zero,at,351
 8005640:	080057f4 	orhi	zero,at,351
 8005644:	080057dc 	xori	zero,at,351
 8005648:	08005820 	cmpeqi	zero,at,352
 800564c:	0800580c 	andi	zero,at,352
 8005650:	08005820 	cmpeqi	zero,at,352
 8005654:	08005820 	cmpeqi	zero,at,352
 8005658:	08005820 	cmpeqi	zero,at,352
 800565c:	08005820 	cmpeqi	zero,at,352
 8005660:	08005820 	cmpeqi	zero,at,352
 8005664:	08005820 	cmpeqi	zero,at,352
 8005668:	08005820 	cmpeqi	zero,at,352
 800566c:	08005820 	cmpeqi	zero,at,352
 8005670:	08005820 	cmpeqi	zero,at,352
 8005674:	08005820 	cmpeqi	zero,at,352
 8005678:	080057c4 	addi	zero,at,351
        case '@': {
            c = *fmt++;
 800567c:	e0bff217 	ldw	r2,-56(fp)
 8005680:	10c00044 	addi	r3,r2,1
 8005684:	e0fff215 	stw	r3,-56(fp)
 8005688:	10800003 	ldbu	r2,0(r2)
 800568c:	e0bff685 	stb	r2,-38(fp)
            if (c == 0)
 8005690:	e0bff687 	ldb	r2,-38(fp)
 8005694:	10007526 	beq	r2,zero,800586c <_ZN5Stash7extractEttPv+0x318>
                return;
            if (c != '$')
 8005698:	e0bff687 	ldb	r2,-38(fp)
 800569c:	10800920 	cmpeqi	r2,r2,36
 80056a0:	10005e26 	beq	r2,zero,800581c <_ZN5Stash7extractEttPv+0x2c8>
                break;
            uint32_t arg = *++segs;
 80056a4:	e0bff117 	ldw	r2,-60(fp)
 80056a8:	10800084 	addi	r2,r2,2
 80056ac:	e0bff115 	stw	r2,-60(fp)
 80056b0:	e0bff117 	ldw	r2,-60(fp)
 80056b4:	1080000b 	ldhu	r2,0(r2)
 80056b8:	10bfffcc 	andi	r2,r2,65535
 80056bc:	e0bff715 	stw	r2,-36(fp)
            arg |= *++segs << 16;
 80056c0:	e0bff117 	ldw	r2,-60(fp)
 80056c4:	10800084 	addi	r2,r2,2
 80056c8:	e0bff115 	stw	r2,-60(fp)
 80056cc:	e0bff117 	ldw	r2,-60(fp)
 80056d0:	1080000b 	ldhu	r2,0(r2)
 80056d4:	10bfffcc 	andi	r2,r2,65535
 80056d8:	1004943a 	slli	r2,r2,16
 80056dc:	1007883a 	mov	r3,r2
 80056e0:	e0bff717 	ldw	r2,-36(fp)
 80056e4:	10c4b03a 	or	r2,r2,r3
 80056e8:	e0bff715 	stw	r2,-36(fp)
            mode = *fmt++;
 80056ec:	e0bff217 	ldw	r2,-56(fp)
 80056f0:	10c00044 	addi	r3,r2,1
 80056f4:	e0fff215 	stw	r3,-56(fp)
 80056f8:	10800003 	ldbu	r2,0(r2)
 80056fc:	e0bff305 	stb	r2,-52(fp)
            switch (mode) {
 8005700:	e0bff307 	ldb	r2,-52(fp)
 8005704:	10bfef04 	addi	r2,r2,-68
 8005708:	10c00428 	cmpgeui	r3,r2,16
 800570c:	1800551e 	bne	r3,zero,8005864 <_ZN5Stash7extractEttPv+0x310>
 8005710:	100690ba 	slli	r3,r2,2
 8005714:	00820034 	movhi	r2,2048
 8005718:	1095ca04 	addi	r2,r2,22312
 800571c:	1885883a 	add	r2,r3,r2
 8005720:	10800017 	ldw	r2,0(r2)
 8005724:	1000683a 	jmp	r2
 8005728:	08005768 	cmpgeui	zero,at,349
 800572c:	08005790 	cmplti	zero,at,350
 8005730:	08005790 	cmplti	zero,at,350
 8005734:	08005864 	muli	zero,at,353
 8005738:	0800579c 	xori	zero,at,350
 800573c:	08005864 	muli	zero,at,353
 8005740:	08005864 	muli	zero,at,353
 8005744:	08005864 	muli	zero,at,353
 8005748:	08005864 	muli	zero,at,353
 800574c:	08005864 	muli	zero,at,353
 8005750:	08005864 	muli	zero,at,353
 8005754:	08005864 	muli	zero,at,353
 8005758:	08005864 	muli	zero,at,353
 800575c:	08005864 	muli	zero,at,353
 8005760:	08005864 	muli	zero,at,353
 8005764:	08005790 	cmplti	zero,at,350
            case 'D':
                ether.wtoa(arg, tmp);
 8005768:	e0bff717 	ldw	r2,-36(fp)
 800576c:	10bfffcc 	andi	r2,r2,65535
 8005770:	e0fffb04 	addi	r3,fp,-20
 8005774:	180d883a 	mov	r6,r3
 8005778:	100b883a 	mov	r5,r2
 800577c:	d1270c84 	addi	r4,gp,-25550
 8005780:	80023f80 	call	80023f8 <_ZN9EtherCard4wtoaEtPc>
                ptr = tmp;
 8005784:	e0bffb04 	addi	r2,fp,-20
 8005788:	e0bff415 	stw	r2,-48(fp)
                break;
 800578c:	00000c06 	br	80057c0 <_ZN5Stash7extractEttPv+0x26c>
            case 'S':
            case 'F':
            case 'E':
                ptr = (char*) arg;
 8005790:	e0bff717 	ldw	r2,-36(fp)
 8005794:	e0bff415 	stw	r2,-48(fp)
                break;
 8005798:	00000906 	br	80057c0 <_ZN5Stash7extractEttPv+0x26c>
            case 'H':
                stash.open(arg);
 800579c:	e0bff717 	ldw	r2,-36(fp)
 80057a0:	10c03fcc 	andi	r3,r2,255
 80057a4:	e0bff804 	addi	r2,fp,-32
 80057a8:	180b883a 	mov	r5,r3
 80057ac:	1009883a 	mov	r4,r2
 80057b0:	8004dbc0 	call	8004dbc <_ZN5Stash4openEh>
                ptr = (char*) &stash;
 80057b4:	e0bff804 	addi	r2,fp,-32
 80057b8:	e0bff415 	stw	r2,-48(fp)
                break;
 80057bc:	0001883a 	nop
            }
            continue;
 80057c0:	00002806 	br	8005864 <_ZN5Stash7extractEttPv+0x310>
        }
        case 'D':
        case 'S':
            c = *ptr++;
 80057c4:	e0bff417 	ldw	r2,-48(fp)
 80057c8:	10c00044 	addi	r3,r2,1
 80057cc:	e0fff415 	stw	r3,-48(fp)
 80057d0:	10800003 	ldbu	r2,0(r2)
 80057d4:	e0bff685 	stb	r2,-38(fp)
            break;
 80057d8:	00001106 	br	8005820 <_ZN5Stash7extractEttPv+0x2cc>
        case 'F':
            c = *ptr++;
 80057dc:	e0bff417 	ldw	r2,-48(fp)
 80057e0:	10c00044 	addi	r3,r2,1
 80057e4:	e0fff415 	stw	r3,-48(fp)
 80057e8:	10800003 	ldbu	r2,0(r2)
 80057ec:	e0bff685 	stb	r2,-38(fp)
            break;
 80057f0:	00000b06 	br	8005820 <_ZN5Stash7extractEttPv+0x2cc>
        case 'E':
            c = *ptr++;
 80057f4:	e0bff417 	ldw	r2,-48(fp)
 80057f8:	10c00044 	addi	r3,r2,1
 80057fc:	e0fff415 	stw	r3,-48(fp)
 8005800:	10800003 	ldbu	r2,0(r2)
 8005804:	e0bff685 	stb	r2,-38(fp)
            break;
 8005808:	00000506 	br	8005820 <_ZN5Stash7extractEttPv+0x2cc>
        case 'H':
            c = ((Stash*) ptr)->get();
 800580c:	e13ff417 	ldw	r4,-48(fp)
 8005810:	80050ec0 	call	80050ec <_ZN5Stash3getEv>
 8005814:	e0bff685 	stb	r2,-38(fp)
            break;
 8005818:	00000106 	br	8005820 <_ZN5Stash7extractEttPv+0x2cc>
        case '@': {
            c = *fmt++;
            if (c == 0)
                return;
            if (c != '$')
                break;
 800581c:	0001883a 	nop
            break;
        case 'H':
            c = ((Stash*) ptr)->get();
            break;
        }
        if (c == 0) {
 8005820:	e0bff687 	ldb	r2,-38(fp)
 8005824:	1000031e 	bne	r2,zero,8005834 <_ZN5Stash7extractEttPv+0x2e0>
            mode = '@';
 8005828:	00801004 	movi	r2,64
 800582c:	e0bff305 	stb	r2,-52(fp)
            continue;
 8005830:	00000d06 	br	8005868 <_ZN5Stash7extractEttPv+0x314>
        }
        if (i >= offset)
 8005834:	e0fff60b 	ldhu	r3,-40(fp)
 8005838:	e0bffd0b 	ldhu	r2,-12(fp)
 800583c:	18800536 	bltu	r3,r2,8005854 <_ZN5Stash7extractEttPv+0x300>
            *out++ = c;
 8005840:	e0bff517 	ldw	r2,-44(fp)
 8005844:	10c00044 	addi	r3,r2,1
 8005848:	e0fff515 	stw	r3,-44(fp)
 800584c:	e0fff683 	ldbu	r3,-38(fp)
 8005850:	10c00005 	stb	r3,0(r2)
        ++i;
 8005854:	e0bff60b 	ldhu	r2,-40(fp)
 8005858:	10800044 	addi	r2,r2,1
 800585c:	e0bff60d 	sth	r2,-40(fp)
 8005860:	003f6206 	br	80055ec <_ZN5Stash7extractEttPv+0x98>
            case 'H':
                stash.open(arg);
                ptr = (char*) &stash;
                break;
            }
            continue;
 8005864:	0001883a 	nop
    uint16_t* segs = Stash::bufs[WRITEBUF].words;
    const char* fmt = (const char*)((segs[2] << 16) | segs[1]);
    segs += 2;
    Stash stash;
    char mode = '@', tmp[7], *ptr = NULL, *out = (char*) buf;
    for (uint16_t i = 0; i < offset + count; ) {
 8005868:	003f6006 	br	80055ec <_ZN5Stash7extractEttPv+0x98>
        char c = 0;
        switch (mode) {
        case '@': {
            c = *fmt++;
            if (c == 0)
                return;
 800586c:	0001883a 	nop
        }
        if (i >= offset)
            *out++ = c;
        ++i;
    }
}
 8005870:	e037883a 	mov	sp,fp
 8005874:	dfc00117 	ldw	ra,4(sp)
 8005878:	df000017 	ldw	fp,0(sp)
 800587c:	dec00204 	addi	sp,sp,8
 8005880:	f800283a 	ret

08005884 <_ZN5Stash7cleanupEv>:

void Stash::cleanup () {
 8005884:	defff704 	addi	sp,sp,-36
 8005888:	dfc00815 	stw	ra,32(sp)
 800588c:	df000715 	stw	fp,28(sp)
 8005890:	df000704 	addi	fp,sp,28
    Stash::load(WRITEBUF, 0);
 8005894:	000b883a 	mov	r5,zero
 8005898:	0009883a 	mov	r4,zero
 800589c:	8004ad40 	call	8004ad4 <_ZN5Stash4loadEhh>
    uint16_t* segs = Stash::bufs[WRITEBUF].words;
 80058a0:	008200b4 	movhi	r2,2050
 80058a4:	10b96604 	addi	r2,r2,-6760
 80058a8:	e0bff915 	stw	r2,-28(fp)
    const char* fmt = (const char*)((segs[2] << 16) | segs[1]);
 80058ac:	e0bff917 	ldw	r2,-28(fp)
 80058b0:	10800104 	addi	r2,r2,4
 80058b4:	1080000b 	ldhu	r2,0(r2)
 80058b8:	10bfffcc 	andi	r2,r2,65535
 80058bc:	1006943a 	slli	r3,r2,16
 80058c0:	e0bff917 	ldw	r2,-28(fp)
 80058c4:	10800084 	addi	r2,r2,2
 80058c8:	1080000b 	ldhu	r2,0(r2)
 80058cc:	10bfffcc 	andi	r2,r2,65535
 80058d0:	1884b03a 	or	r2,r3,r2
 80058d4:	e0bffa15 	stw	r2,-24(fp)
    segs += 2;
 80058d8:	e0bff917 	ldw	r2,-28(fp)
 80058dc:	10800104 	addi	r2,r2,4
 80058e0:	e0bff915 	stw	r2,-28(fp)
    for (;;) {
        char c = *fmt++;
 80058e4:	e0bffa17 	ldw	r2,-24(fp)
 80058e8:	10c00044 	addi	r3,r2,1
 80058ec:	e0fffa15 	stw	r3,-24(fp)
 80058f0:	10800003 	ldbu	r2,0(r2)
 80058f4:	e0bffb05 	stb	r2,-20(fp)
        if (c == 0)
 80058f8:	e0bffb07 	ldb	r2,-20(fp)
 80058fc:	10002926 	beq	r2,zero,80059a4 <_ZN5Stash7cleanupEv+0x120>
            break;
        if (c == '$') {
 8005900:	e0bffb07 	ldb	r2,-20(fp)
 8005904:	10800918 	cmpnei	r2,r2,36
 8005908:	103ff61e 	bne	r2,zero,80058e4 <_ZN5Stash7cleanupEv+0x60>
            uint32_t arg = *++segs;
 800590c:	e0bff917 	ldw	r2,-28(fp)
 8005910:	10800084 	addi	r2,r2,2
 8005914:	e0bff915 	stw	r2,-28(fp)
 8005918:	e0bff917 	ldw	r2,-28(fp)
 800591c:	1080000b 	ldhu	r2,0(r2)
 8005920:	10bfffcc 	andi	r2,r2,65535
 8005924:	e0bffc15 	stw	r2,-16(fp)
            arg |= *++segs << 16;
 8005928:	e0bff917 	ldw	r2,-28(fp)
 800592c:	10800084 	addi	r2,r2,2
 8005930:	e0bff915 	stw	r2,-28(fp)
 8005934:	e0bff917 	ldw	r2,-28(fp)
 8005938:	1080000b 	ldhu	r2,0(r2)
 800593c:	10bfffcc 	andi	r2,r2,65535
 8005940:	1004943a 	slli	r2,r2,16
 8005944:	1007883a 	mov	r3,r2
 8005948:	e0bffc17 	ldw	r2,-16(fp)
 800594c:	10c4b03a 	or	r2,r2,r3
 8005950:	e0bffc15 	stw	r2,-16(fp)
            if (*fmt++ == 'H') {
 8005954:	e0bffa17 	ldw	r2,-24(fp)
 8005958:	10c00044 	addi	r3,r2,1
 800595c:	e0fffa15 	stw	r3,-24(fp)
 8005960:	10800003 	ldbu	r2,0(r2)
 8005964:	10803fcc 	andi	r2,r2,255
 8005968:	1080201c 	xori	r2,r2,128
 800596c:	10bfe004 	addi	r2,r2,-128
 8005970:	10801220 	cmpeqi	r2,r2,72
 8005974:	10803fcc 	andi	r2,r2,255
 8005978:	103fda26 	beq	r2,zero,80058e4 <_ZN5Stash7cleanupEv+0x60>
                Stash stash (arg);
 800597c:	e0bffc17 	ldw	r2,-16(fp)
 8005980:	10c03fcc 	andi	r3,r2,255
 8005984:	e0bffd04 	addi	r2,fp,-12
 8005988:	180b883a 	mov	r5,r3
 800598c:	1009883a 	mov	r4,r2
 8005990:	8005a400 	call	8005a40 <_ZN5StashC1Eh>
                stash.release();
 8005994:	e0bffd04 	addi	r2,fp,-12
 8005998:	1009883a 	mov	r4,r2
 800599c:	8004ecc0 	call	8004ecc <_ZN5Stash7releaseEv>
void Stash::cleanup () {
    Stash::load(WRITEBUF, 0);
    uint16_t* segs = Stash::bufs[WRITEBUF].words;
    const char* fmt = (const char*)((segs[2] << 16) | segs[1]);
    segs += 2;
    for (;;) {
 80059a0:	003fd006 	br	80058e4 <_ZN5Stash7cleanupEv+0x60>
        char c = *fmt++;
        if (c == 0)
            break;
 80059a4:	0001883a 	nop
                Stash stash (arg);
                stash.release();
            }
        }
    }
}
 80059a8:	0001883a 	nop
 80059ac:	e037883a 	mov	sp,fp
 80059b0:	dfc00117 	ldw	ra,4(sp)
 80059b4:	df000017 	ldw	fp,0(sp)
 80059b8:	dec00204 	addi	sp,sp,8
 80059bc:	f800283a 	ret

080059c0 <_ZN11StashHeaderC1Ev>:
/** This structure describes the structure of memory used within the ENC28J60 network interface. */
typedef struct {
    uint8_t count;     ///< Number of allocated pages
    uint8_t first;     ///< First allocated page
    uint8_t last;      ///< Last allocated page
} StashHeader;
 80059c0:	defffe04 	addi	sp,sp,-8
 80059c4:	df000115 	stw	fp,4(sp)
 80059c8:	df000104 	addi	fp,sp,4
 80059cc:	e13fff15 	stw	r4,-4(fp)
 80059d0:	0001883a 	nop
 80059d4:	e037883a 	mov	sp,fp
 80059d8:	df000017 	ldw	fp,0(sp)
 80059dc:	dec00104 	addi	sp,sp,4
 80059e0:	f800283a 	ret

080059e4 <_ZN5StashC1Ev>:
public:
    static void initMap (uint8_t last=SCRATCH_PAGE_NUM);
    static void load (uint8_t idx, uint8_t blk);
    static uint8_t freeCount ();

    Stash () : curr (0) { first = 0; }
 80059e4:	defffd04 	addi	sp,sp,-12
 80059e8:	dfc00215 	stw	ra,8(sp)
 80059ec:	df000115 	stw	fp,4(sp)
 80059f0:	df000104 	addi	fp,sp,4
 80059f4:	e13fff15 	stw	r4,-4(fp)
 80059f8:	e0bfff17 	ldw	r2,-4(fp)
 80059fc:	10800104 	addi	r2,r2,4
 8005a00:	1009883a 	mov	r4,r2
 8005a04:	80059c00 	call	80059c0 <_ZN11StashHeaderC1Ev>
 8005a08:	008200b4 	movhi	r2,2050
 8005a0c:	10a9ac04 	addi	r2,r2,-22864
 8005a10:	e0ffff17 	ldw	r3,-4(fp)
 8005a14:	18800015 	stw	r2,0(r3)
 8005a18:	e0bfff17 	ldw	r2,-4(fp)
 8005a1c:	100001c5 	stb	zero,7(r2)
 8005a20:	e0bfff17 	ldw	r2,-4(fp)
 8005a24:	10000145 	stb	zero,5(r2)
 8005a28:	0001883a 	nop
 8005a2c:	e037883a 	mov	sp,fp
 8005a30:	dfc00117 	ldw	ra,4(sp)
 8005a34:	df000017 	ldw	fp,0(sp)
 8005a38:	dec00204 	addi	sp,sp,8
 8005a3c:	f800283a 	ret

08005a40 <_ZN5StashC1Eh>:
    Stash (uint8_t fd) { open(fd); }
 8005a40:	defffc04 	addi	sp,sp,-16
 8005a44:	dfc00315 	stw	ra,12(sp)
 8005a48:	df000215 	stw	fp,8(sp)
 8005a4c:	df000204 	addi	fp,sp,8
 8005a50:	e13ffe15 	stw	r4,-8(fp)
 8005a54:	2805883a 	mov	r2,r5
 8005a58:	e0bfff05 	stb	r2,-4(fp)
 8005a5c:	e0bffe17 	ldw	r2,-8(fp)
 8005a60:	10800104 	addi	r2,r2,4
 8005a64:	1009883a 	mov	r4,r2
 8005a68:	80059c00 	call	80059c0 <_ZN11StashHeaderC1Ev>
 8005a6c:	008200b4 	movhi	r2,2050
 8005a70:	10a9ac04 	addi	r2,r2,-22864
 8005a74:	e0fffe17 	ldw	r3,-8(fp)
 8005a78:	18800015 	stw	r2,0(r3)
 8005a7c:	e0bfff03 	ldbu	r2,-4(fp)
 8005a80:	100b883a 	mov	r5,r2
 8005a84:	e13ffe17 	ldw	r4,-8(fp)
 8005a88:	8004dbc0 	call	8004dbc <_ZN5Stash4openEh>
 8005a8c:	0001883a 	nop
 8005a90:	e037883a 	mov	sp,fp
 8005a94:	dfc00117 	ldw	ra,4(sp)
 8005a98:	df000017 	ldw	fp,0(sp)
 8005a9c:	dec00204 	addi	sp,sp,8
 8005aa0:	f800283a 	ret

08005aa4 <_ZN5Stash5writeEh>:
    void put (char c);
    void print (char* str);
    char get ();
    uint16_t size ();

    virtual size_t write(uint8_t b) { put(b); return 1; }
 8005aa4:	defffc04 	addi	sp,sp,-16
 8005aa8:	dfc00315 	stw	ra,12(sp)
 8005aac:	df000215 	stw	fp,8(sp)
 8005ab0:	df000204 	addi	fp,sp,8
 8005ab4:	e13ffe15 	stw	r4,-8(fp)
 8005ab8:	2805883a 	mov	r2,r5
 8005abc:	e0bfff05 	stb	r2,-4(fp)
 8005ac0:	e0bfff03 	ldbu	r2,-4(fp)
 8005ac4:	10803fcc 	andi	r2,r2,255
 8005ac8:	1080201c 	xori	r2,r2,128
 8005acc:	10bfe004 	addi	r2,r2,-128
 8005ad0:	100b883a 	mov	r5,r2
 8005ad4:	e13ffe17 	ldw	r4,-8(fp)
 8005ad8:	8004f440 	call	8004f44 <_ZN5Stash3putEc>
 8005adc:	00800044 	movi	r2,1
 8005ae0:	e037883a 	mov	sp,fp
 8005ae4:	dfc00117 	ldw	ra,4(sp)
 8005ae8:	df000017 	ldw	fp,0(sp)
 8005aec:	dec00204 	addi	sp,sp,8
 8005af0:	f800283a 	ret

08005af4 <_Z4PSTRPc>:
// 0xE3,0,4,0xFA,0,1,0,0,0,1 }; //NTP request header
extern const uint8_t allOnes[] = {
    0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF}; // Used for hardware (MAC) and IP broadcast addresses

char *PSTR(char *str) { return str; }
 8005af4:	defffe04 	addi	sp,sp,-8
 8005af8:	df000115 	stw	fp,4(sp)
 8005afc:	df000104 	addi	fp,sp,4
 8005b00:	e13fff15 	stw	r4,-4(fp)
 8005b04:	e0bfff17 	ldw	r2,-4(fp)
 8005b08:	e037883a 	mov	sp,fp
 8005b0c:	df000017 	ldw	fp,0(sp)
 8005b10:	dec00104 	addi	sp,sp,4
 8005b14:	f800283a 	ret

08005b18 <_Z8memcpy_PPvPKvj>:
const unsigned char iphdr[] = {0x45, 0,    0, 0x82, 0,
                               0,    0x40, 0, 0x20}; // IP header
const unsigned char ntpreqhdr[] = {0xE3, 0, 4, 0xFA, 0,
                                   1,    0, 0, 0,    1}; // NTP request header

void *memcpy_P(void *dest, const void *src, std::size_t count) {
 8005b18:	defffb04 	addi	sp,sp,-20
 8005b1c:	dfc00415 	stw	ra,16(sp)
 8005b20:	df000315 	stw	fp,12(sp)
 8005b24:	df000304 	addi	fp,sp,12
 8005b28:	e13ffd15 	stw	r4,-12(fp)
 8005b2c:	e17ffe15 	stw	r5,-8(fp)
 8005b30:	e1bfff15 	stw	r6,-4(fp)
  return memcpy(dest, src, count);
 8005b34:	e1bfff17 	ldw	r6,-4(fp)
 8005b38:	e17ffe17 	ldw	r5,-8(fp)
 8005b3c:	e13ffd17 	ldw	r4,-12(fp)
 8005b40:	800ab080 	call	800ab08 <memcpy>
}
 8005b44:	e037883a 	mov	sp,fp
 8005b48:	dfc00117 	ldw	ra,4(sp)
 8005b4c:	df000017 	ldw	fp,0(sp)
 8005b50:	dec00204 	addi	sp,sp,8
 8005b54:	f800283a 	ret

08005b58 <_ZL13fill_checksumhhth>:

static void fill_checksum(uint8_t dest, uint8_t off, uint16_t len,
                          uint8_t type) {
 8005b58:	defff804 	addi	sp,sp,-32
 8005b5c:	df000715 	stw	fp,28(sp)
 8005b60:	df000704 	addi	fp,sp,28
 8005b64:	2011883a 	mov	r8,r4
 8005b68:	2809883a 	mov	r4,r5
 8005b6c:	3007883a 	mov	r3,r6
 8005b70:	3805883a 	mov	r2,r7
 8005b74:	e23ffc05 	stb	r8,-16(fp)
 8005b78:	e13ffd05 	stb	r4,-12(fp)
 8005b7c:	e0fffe0d 	sth	r3,-8(fp)
 8005b80:	e0bfff05 	stb	r2,-4(fp)
  const uint8_t *ptr = gPB + off;
 8005b84:	e0fffd03 	ldbu	r3,-12(fp)
 8005b88:	008200b4 	movhi	r2,2050
 8005b8c:	10b99704 	addi	r2,r2,-6564
 8005b90:	1885883a 	add	r2,r3,r2
 8005b94:	e0bff915 	stw	r2,-28(fp)
  uint32_t sum = type == 1   ? IP_PROTO_UDP_V + len - 8
                 : type == 2 ? IP_PROTO_TCP_V + len - 8
                             : 0;
 8005b98:	e0bfff03 	ldbu	r2,-4(fp)
 8005b9c:	10800058 	cmpnei	r2,r2,1
 8005ba0:	1000031e 	bne	r2,zero,8005bb0 <_ZL13fill_checksumhhth+0x58>
}

static void fill_checksum(uint8_t dest, uint8_t off, uint16_t len,
                          uint8_t type) {
  const uint8_t *ptr = gPB + off;
  uint32_t sum = type == 1   ? IP_PROTO_UDP_V + len - 8
 8005ba4:	e0bffe0b 	ldhu	r2,-8(fp)
 8005ba8:	10800244 	addi	r2,r2,9
 8005bac:	00000706 	br	8005bcc <_ZL13fill_checksumhhth+0x74>
                 : type == 2 ? IP_PROTO_TCP_V + len - 8
                             : 0;
 8005bb0:	e0bfff03 	ldbu	r2,-4(fp)
 8005bb4:	10800098 	cmpnei	r2,r2,2
 8005bb8:	1000031e 	bne	r2,zero,8005bc8 <_ZL13fill_checksumhhth+0x70>

static void fill_checksum(uint8_t dest, uint8_t off, uint16_t len,
                          uint8_t type) {
  const uint8_t *ptr = gPB + off;
  uint32_t sum = type == 1   ? IP_PROTO_UDP_V + len - 8
                 : type == 2 ? IP_PROTO_TCP_V + len - 8
 8005bbc:	e0bffe0b 	ldhu	r2,-8(fp)
 8005bc0:	10bfff84 	addi	r2,r2,-2
 8005bc4:	00000106 	br	8005bcc <_ZL13fill_checksumhhth+0x74>
                             : 0;
 8005bc8:	0005883a 	mov	r2,zero
 8005bcc:	e0bffa15 	stw	r2,-24(fp)
  while (len > 1) {
 8005bd0:	e0bffe0b 	ldhu	r2,-8(fp)
 8005bd4:	108000b0 	cmpltui	r2,r2,2
 8005bd8:	1000151e 	bne	r2,zero,8005c30 <_ZL13fill_checksumhhth+0xd8>
    sum += (uint16_t)(((uint32_t)*ptr << 8) | *(ptr + 1));
 8005bdc:	e0bff917 	ldw	r2,-28(fp)
 8005be0:	10800003 	ldbu	r2,0(r2)
 8005be4:	10803fcc 	andi	r2,r2,255
 8005be8:	1004923a 	slli	r2,r2,8
 8005bec:	1007883a 	mov	r3,r2
 8005bf0:	e0bff917 	ldw	r2,-28(fp)
 8005bf4:	10800044 	addi	r2,r2,1
 8005bf8:	10800003 	ldbu	r2,0(r2)
 8005bfc:	10803fcc 	andi	r2,r2,255
 8005c00:	1884b03a 	or	r2,r3,r2
 8005c04:	10bfffcc 	andi	r2,r2,65535
 8005c08:	e0fffa17 	ldw	r3,-24(fp)
 8005c0c:	1885883a 	add	r2,r3,r2
 8005c10:	e0bffa15 	stw	r2,-24(fp)
    ptr += 2;
 8005c14:	e0bff917 	ldw	r2,-28(fp)
 8005c18:	10800084 	addi	r2,r2,2
 8005c1c:	e0bff915 	stw	r2,-28(fp)
    len -= 2;
 8005c20:	e0bffe0b 	ldhu	r2,-8(fp)
 8005c24:	10bfff84 	addi	r2,r2,-2
 8005c28:	e0bffe0d 	sth	r2,-8(fp)
                          uint8_t type) {
  const uint8_t *ptr = gPB + off;
  uint32_t sum = type == 1   ? IP_PROTO_UDP_V + len - 8
                 : type == 2 ? IP_PROTO_TCP_V + len - 8
                             : 0;
  while (len > 1) {
 8005c2c:	003fe806 	br	8005bd0 <_ZL13fill_checksumhhth+0x78>
    sum += (uint16_t)(((uint32_t)*ptr << 8) | *(ptr + 1));
    ptr += 2;
    len -= 2;
  }
  if (len)
 8005c30:	e0bffe0b 	ldhu	r2,-8(fp)
 8005c34:	10000726 	beq	r2,zero,8005c54 <_ZL13fill_checksumhhth+0xfc>
    sum += ((uint32_t)*ptr) << 8;
 8005c38:	e0bff917 	ldw	r2,-28(fp)
 8005c3c:	10800003 	ldbu	r2,0(r2)
 8005c40:	10803fcc 	andi	r2,r2,255
 8005c44:	1004923a 	slli	r2,r2,8
 8005c48:	e0fffa17 	ldw	r3,-24(fp)
 8005c4c:	1885883a 	add	r2,r3,r2
 8005c50:	e0bffa15 	stw	r2,-24(fp)
  while (sum >> 16)
 8005c54:	e0bffa17 	ldw	r2,-24(fp)
 8005c58:	1004d43a 	srli	r2,r2,16
 8005c5c:	10000726 	beq	r2,zero,8005c7c <_ZL13fill_checksumhhth+0x124>
    sum = (uint16_t)sum + (sum >> 16);
 8005c60:	e0bffa17 	ldw	r2,-24(fp)
 8005c64:	10ffffcc 	andi	r3,r2,65535
 8005c68:	e0bffa17 	ldw	r2,-24(fp)
 8005c6c:	1004d43a 	srli	r2,r2,16
 8005c70:	1885883a 	add	r2,r3,r2
 8005c74:	e0bffa15 	stw	r2,-24(fp)
    ptr += 2;
    len -= 2;
  }
  if (len)
    sum += ((uint32_t)*ptr) << 8;
  while (sum >> 16)
 8005c78:	003ff606 	br	8005c54 <_ZL13fill_checksumhhth+0xfc>
    sum = (uint16_t)sum + (sum >> 16);
  uint16_t ck = ~(uint16_t)sum;
 8005c7c:	e0bffa17 	ldw	r2,-24(fp)
 8005c80:	0084303a 	nor	r2,zero,r2
 8005c84:	e0bffb0d 	sth	r2,-20(fp)
  gPB[dest] = ck >> 8;
 8005c88:	e0fffc03 	ldbu	r3,-16(fp)
 8005c8c:	e0bffb0b 	ldhu	r2,-20(fp)
 8005c90:	1005d23a 	srai	r2,r2,8
 8005c94:	1009883a 	mov	r4,r2
 8005c98:	008200b4 	movhi	r2,2050
 8005c9c:	10b99704 	addi	r2,r2,-6564
 8005ca0:	10c5883a 	add	r2,r2,r3
 8005ca4:	11000005 	stb	r4,0(r2)
  gPB[dest + 1] = ck;
 8005ca8:	e0bffc03 	ldbu	r2,-16(fp)
 8005cac:	10c00044 	addi	r3,r2,1
 8005cb0:	e0bffb0b 	ldhu	r2,-20(fp)
 8005cb4:	1009883a 	mov	r4,r2
 8005cb8:	008200b4 	movhi	r2,2050
 8005cbc:	10b99704 	addi	r2,r2,-6564
 8005cc0:	10c5883a 	add	r2,r2,r3
 8005cc4:	11000005 	stb	r4,0(r2)
}
 8005cc8:	0001883a 	nop
 8005ccc:	e037883a 	mov	sp,fp
 8005cd0:	df000017 	ldw	fp,0(sp)
 8005cd4:	dec00104 	addi	sp,sp,4
 8005cd8:	f800283a 	ret

08005cdc <_ZL7setMACsPKh>:

static void setMACs(const uint8_t *mac) {
 8005cdc:	defffd04 	addi	sp,sp,-12
 8005ce0:	dfc00215 	stw	ra,8(sp)
 8005ce4:	df000115 	stw	fp,4(sp)
 8005ce8:	df000104 	addi	fp,sp,4
 8005cec:	e13fff15 	stw	r4,-4(fp)
  EtherCard::copyMac(gPB + ETH_DST_MAC, mac);
 8005cf0:	e17fff17 	ldw	r5,-4(fp)
 8005cf4:	010200b4 	movhi	r4,2050
 8005cf8:	21399704 	addi	r4,r4,-6564
 8005cfc:	8008d700 	call	8008d70 <_ZN9EtherCard7copyMacEPhPKh>
  EtherCard::copyMac(gPB + ETH_SRC_MAC, EtherCard::mymac);
 8005d00:	008200b4 	movhi	r2,2050
 8005d04:	10b99884 	addi	r2,r2,-6558
 8005d08:	d1670cc4 	addi	r5,gp,-25549
 8005d0c:	1009883a 	mov	r4,r2
 8005d10:	8008d700 	call	8008d70 <_ZN9EtherCard7copyMacEPhPKh>
}
 8005d14:	0001883a 	nop
 8005d18:	e037883a 	mov	sp,fp
 8005d1c:	dfc00117 	ldw	ra,4(sp)
 8005d20:	df000017 	ldw	fp,0(sp)
 8005d24:	dec00204 	addi	sp,sp,8
 8005d28:	f800283a 	ret

08005d2c <_ZL12setMACandIPsPKhS0_>:

static void setMACandIPs(const uint8_t *mac, const uint8_t *dst) {
 8005d2c:	defffc04 	addi	sp,sp,-16
 8005d30:	dfc00315 	stw	ra,12(sp)
 8005d34:	df000215 	stw	fp,8(sp)
 8005d38:	df000204 	addi	fp,sp,8
 8005d3c:	e13ffe15 	stw	r4,-8(fp)
 8005d40:	e17fff15 	stw	r5,-4(fp)
  setMACs(mac);
 8005d44:	e13ffe17 	ldw	r4,-8(fp)
 8005d48:	8005cdc0 	call	8005cdc <_ZL7setMACsPKh>
  EtherCard::copyIp(gPB + IP_DST_P, dst);
 8005d4c:	008200b4 	movhi	r2,2050
 8005d50:	10b99e84 	addi	r2,r2,-6534
 8005d54:	e17fff17 	ldw	r5,-4(fp)
 8005d58:	1009883a 	mov	r4,r2
 8005d5c:	8008db00 	call	8008db0 <_ZN9EtherCard6copyIpEPhPKh>
  EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
 8005d60:	008200b4 	movhi	r2,2050
 8005d64:	10b99d84 	addi	r2,r2,-6538
 8005d68:	d1670e44 	addi	r5,gp,-25543
 8005d6c:	1009883a 	mov	r4,r2
 8005d70:	8008db00 	call	8008db0 <_ZN9EtherCard6copyIpEPhPKh>
}
 8005d74:	0001883a 	nop
 8005d78:	e037883a 	mov	sp,fp
 8005d7c:	dfc00117 	ldw	ra,4(sp)
 8005d80:	df000017 	ldw	fp,0(sp)
 8005d84:	dec00204 	addi	sp,sp,8
 8005d88:	f800283a 	ret

08005d8c <_ZL24check_ip_message_is_fromPKh>:

static uint8_t check_ip_message_is_from(const uint8_t *ip) {
 8005d8c:	defffd04 	addi	sp,sp,-12
 8005d90:	dfc00215 	stw	ra,8(sp)
 8005d94:	df000115 	stw	fp,4(sp)
 8005d98:	df000104 	addi	fp,sp,4
 8005d9c:	e13fff15 	stw	r4,-4(fp)
  return memcmp(gPB + IP_SRC_P, ip, IP_LEN) == 0;
 8005da0:	008200b4 	movhi	r2,2050
 8005da4:	10b99d84 	addi	r2,r2,-6538
 8005da8:	01800104 	movi	r6,4
 8005dac:	e17fff17 	ldw	r5,-4(fp)
 8005db0:	1009883a 	mov	r4,r2
 8005db4:	800aa8c0 	call	800aa8c <memcmp>
 8005db8:	1005003a 	cmpeq	r2,r2,zero
}
 8005dbc:	e037883a 	mov	sp,fp
 8005dc0:	dfc00117 	ldw	ra,4(sp)
 8005dc4:	df000017 	ldw	fp,0(sp)
 8005dc8:	dec00204 	addi	sp,sp,8
 8005dcc:	f800283a 	ret

08005dd0 <_ZL6is_lanPKhS0_>:

static bool is_lan(const uint8_t source[IP_LEN],
                   const uint8_t destination[IP_LEN]) {
 8005dd0:	defffc04 	addi	sp,sp,-16
 8005dd4:	df000315 	stw	fp,12(sp)
 8005dd8:	df000304 	addi	fp,sp,12
 8005ddc:	e13ffe15 	stw	r4,-8(fp)
 8005de0:	e17fff15 	stw	r5,-4(fp)
  if (source[0] == 0 || destination[0] == 0) {
 8005de4:	e0bffe17 	ldw	r2,-8(fp)
 8005de8:	10800003 	ldbu	r2,0(r2)
 8005dec:	10803fcc 	andi	r2,r2,255
 8005df0:	10000426 	beq	r2,zero,8005e04 <_ZL6is_lanPKhS0_+0x34>
 8005df4:	e0bfff17 	ldw	r2,-4(fp)
 8005df8:	10800003 	ldbu	r2,0(r2)
 8005dfc:	10803fcc 	andi	r2,r2,255
 8005e00:	1000021e 	bne	r2,zero,8005e0c <_ZL6is_lanPKhS0_+0x3c>
    return false;
 8005e04:	0005883a 	mov	r2,zero
 8005e08:	00001c06 	br	8005e7c <_ZL6is_lanPKhS0_+0xac>
  }
  for (int i = 0; i < IP_LEN; i++)
 8005e0c:	e03ffd15 	stw	zero,-12(fp)
 8005e10:	e0bffd17 	ldw	r2,-12(fp)
 8005e14:	10800108 	cmpgei	r2,r2,4
 8005e18:	1000171e 	bne	r2,zero,8005e78 <_ZL6is_lanPKhS0_+0xa8>
    if ((source[i] & EtherCard::netmask[i]) !=
 8005e1c:	e0bffd17 	ldw	r2,-12(fp)
 8005e20:	e0fffe17 	ldw	r3,-8(fp)
 8005e24:	1885883a 	add	r2,r3,r2
 8005e28:	10c00003 	ldbu	r3,0(r2)
        (destination[i] & EtherCard::netmask[i])) {
 8005e2c:	e0bffd17 	ldw	r2,-12(fp)
 8005e30:	e13fff17 	ldw	r4,-4(fp)
 8005e34:	2085883a 	add	r2,r4,r2
                   const uint8_t destination[IP_LEN]) {
  if (source[0] == 0 || destination[0] == 0) {
    return false;
  }
  for (int i = 0; i < IP_LEN; i++)
    if ((source[i] & EtherCard::netmask[i]) !=
 8005e38:	10800003 	ldbu	r2,0(r2)
 8005e3c:	1884f03a 	xor	r2,r3,r2
 8005e40:	1009883a 	mov	r4,r2
 8005e44:	e0fffd17 	ldw	r3,-12(fp)
 8005e48:	d0a70f44 	addi	r2,gp,-25539
 8005e4c:	1885883a 	add	r2,r3,r2
 8005e50:	10800003 	ldbu	r2,0(r2)
 8005e54:	2084703a 	and	r2,r4,r2
 8005e58:	10803fcc 	andi	r2,r2,255
 8005e5c:	10000226 	beq	r2,zero,8005e68 <_ZL6is_lanPKhS0_+0x98>
        (destination[i] & EtherCard::netmask[i])) {
      return false;
 8005e60:	0005883a 	mov	r2,zero
 8005e64:	00000506 	br	8005e7c <_ZL6is_lanPKhS0_+0xac>
static bool is_lan(const uint8_t source[IP_LEN],
                   const uint8_t destination[IP_LEN]) {
  if (source[0] == 0 || destination[0] == 0) {
    return false;
  }
  for (int i = 0; i < IP_LEN; i++)
 8005e68:	e0bffd17 	ldw	r2,-12(fp)
 8005e6c:	10800044 	addi	r2,r2,1
 8005e70:	e0bffd15 	stw	r2,-12(fp)
 8005e74:	003fe606 	br	8005e10 <_ZL6is_lanPKhS0_+0x40>
    if ((source[i] & EtherCard::netmask[i]) !=
        (destination[i] & EtherCard::netmask[i])) {
      return false;
    }
  return true;
 8005e78:	00800044 	movi	r2,1
}
 8005e7c:	e037883a 	mov	sp,fp
 8005e80:	df000017 	ldw	fp,0(sp)
 8005e84:	dec00104 	addi	sp,sp,4
 8005e88:	f800283a 	ret

08005e8c <_ZL25eth_type_is_arp_and_my_ipt>:

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
 8005e8c:	defffd04 	addi	sp,sp,-12
 8005e90:	dfc00215 	stw	ra,8(sp)
 8005e94:	df000115 	stw	fp,4(sp)
 8005e98:	df000104 	addi	fp,sp,4
 8005e9c:	2005883a 	mov	r2,r4
 8005ea0:	e0bfff0d 	sth	r2,-4(fp)
  return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
         gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
 8005ea4:	e0bfff0b 	ldhu	r2,-4(fp)
 8005ea8:	10800a70 	cmpltui	r2,r2,41
 8005eac:	1000151e 	bne	r2,zero,8005f04 <_ZL25eth_type_is_arp_and_my_ipt+0x78>
    }
  return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
  return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
 8005eb0:	008200b4 	movhi	r2,2050
 8005eb4:	10b99704 	addi	r2,r2,-6564
 8005eb8:	10800303 	ldbu	r2,12(r2)
 8005ebc:	10803fcc 	andi	r2,r2,255
 8005ec0:	10800218 	cmpnei	r2,r2,8
 8005ec4:	10000f1e 	bne	r2,zero,8005f04 <_ZL25eth_type_is_arp_and_my_ipt+0x78>
         gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
 8005ec8:	008200b4 	movhi	r2,2050
 8005ecc:	10b99704 	addi	r2,r2,-6564
 8005ed0:	10800343 	ldbu	r2,13(r2)
    }
  return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
  return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
 8005ed4:	10803fcc 	andi	r2,r2,255
 8005ed8:	10800198 	cmpnei	r2,r2,6
 8005edc:	1000091e 	bne	r2,zero,8005f04 <_ZL25eth_type_is_arp_and_my_ipt+0x78>
         gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
         memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
 8005ee0:	008200b4 	movhi	r2,2050
 8005ee4:	10b9a084 	addi	r2,r2,-6526
 8005ee8:	01800104 	movi	r6,4
 8005eec:	d1670e44 	addi	r5,gp,-25543
 8005ef0:	1009883a 	mov	r4,r2
 8005ef4:	800aa8c0 	call	800aa8c <memcmp>
  return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
  return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
         gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
 8005ef8:	1000021e 	bne	r2,zero,8005f04 <_ZL25eth_type_is_arp_and_my_ipt+0x78>
 8005efc:	00800044 	movi	r2,1
 8005f00:	00000106 	br	8005f08 <_ZL25eth_type_is_arp_and_my_ipt+0x7c>
 8005f04:	0005883a 	mov	r2,zero
         memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}
 8005f08:	e037883a 	mov	sp,fp
 8005f0c:	dfc00117 	ldw	ra,4(sp)
 8005f10:	df000017 	ldw	fp,0(sp)
 8005f14:	dec00204 	addi	sp,sp,8
 8005f18:	f800283a 	ret

08005f1c <_ZL24eth_type_is_ip_and_my_ipt>:

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
 8005f1c:	defffd04 	addi	sp,sp,-12
 8005f20:	dfc00215 	stw	ra,8(sp)
 8005f24:	df000115 	stw	fp,4(sp)
 8005f28:	df000104 	addi	fp,sp,4
 8005f2c:	2005883a 	mov	r2,r4
 8005f30:	e0bfff0d 	sth	r2,-4(fp)
  return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
         gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
         gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
 8005f34:	e0bfff0b 	ldhu	r2,-4(fp)
 8005f38:	10800ab0 	cmpltui	r2,r2,42
 8005f3c:	1000281e 	bne	r2,zero,8005fe0 <_ZL24eth_type_is_ip_and_my_ipt+0xc4>
         gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
         memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
  return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
 8005f40:	008200b4 	movhi	r2,2050
 8005f44:	10b99704 	addi	r2,r2,-6564
 8005f48:	10800303 	ldbu	r2,12(r2)
 8005f4c:	10803fcc 	andi	r2,r2,255
 8005f50:	10800218 	cmpnei	r2,r2,8
 8005f54:	1000221e 	bne	r2,zero,8005fe0 <_ZL24eth_type_is_ip_and_my_ipt+0xc4>
         gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
 8005f58:	008200b4 	movhi	r2,2050
 8005f5c:	10b99704 	addi	r2,r2,-6564
 8005f60:	10800343 	ldbu	r2,13(r2)
         gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
         memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
  return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
 8005f64:	10803fcc 	andi	r2,r2,255
 8005f68:	10001d1e 	bne	r2,zero,8005fe0 <_ZL24eth_type_is_ip_and_my_ipt+0xc4>
         gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
         gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
 8005f6c:	008200b4 	movhi	r2,2050
 8005f70:	10b99704 	addi	r2,r2,-6564
 8005f74:	10800383 	ldbu	r2,14(r2)
         memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
  return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
         gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
 8005f78:	10803fcc 	andi	r2,r2,255
 8005f7c:	10801158 	cmpnei	r2,r2,69
 8005f80:	1000171e 	bne	r2,zero,8005fe0 <_ZL24eth_type_is_ip_and_my_ipt+0xc4>
         gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
         (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0 // not my IP
 8005f84:	008200b4 	movhi	r2,2050
 8005f88:	10b99e84 	addi	r2,r2,-6534
 8005f8c:	01800104 	movi	r6,4
 8005f90:	d1670e44 	addi	r5,gp,-25543
 8005f94:	1009883a 	mov	r4,r2
 8005f98:	800aa8c0 	call	800aa8c <memcmp>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
  return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
         gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
         gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
 8005f9c:	10000e26 	beq	r2,zero,8005fd8 <_ZL24eth_type_is_ip_and_my_ipt+0xbc>
         (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0 // not my IP
          || (memcmp(gPB + IP_DST_P, EtherCard::broadcastip, IP_LEN) ==
 8005fa0:	008200b4 	movhi	r2,2050
 8005fa4:	10b99e84 	addi	r2,r2,-6534
 8005fa8:	01800104 	movi	r6,4
 8005fac:	d1671044 	addi	r5,gp,-25535
 8005fb0:	1009883a 	mov	r4,r2
 8005fb4:	800aa8c0 	call	800aa8c <memcmp>
 8005fb8:	10000726 	beq	r2,zero,8005fd8 <_ZL24eth_type_is_ip_and_my_ipt+0xbc>
              0) // not subnet broadcast
          || (memcmp(gPB + IP_DST_P, allOnes, IP_LEN) ==
 8005fbc:	008200b4 	movhi	r2,2050
 8005fc0:	10b99e84 	addi	r2,r2,-6534
 8005fc4:	01800104 	movi	r6,4
 8005fc8:	d16008c4 	addi	r5,gp,-32733
 8005fcc:	1009883a 	mov	r4,r2
 8005fd0:	800aa8c0 	call	800aa8c <memcmp>
 8005fd4:	1000021e 	bne	r2,zero,8005fe0 <_ZL24eth_type_is_ip_and_my_ipt+0xc4>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
  return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
         gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
         gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
 8005fd8:	00800044 	movi	r2,1
 8005fdc:	00000106 	br	8005fe4 <_ZL24eth_type_is_ip_and_my_ipt+0xc8>
 8005fe0:	0005883a 	mov	r2,zero
          || (memcmp(gPB + IP_DST_P, EtherCard::broadcastip, IP_LEN) ==
              0) // not subnet broadcast
          || (memcmp(gPB + IP_DST_P, allOnes, IP_LEN) ==
              0)); // not global broadcasts
  //!@todo Handle multicast
}
 8005fe4:	e037883a 	mov	sp,fp
 8005fe8:	dfc00117 	ldw	ra,4(sp)
 8005fec:	df000017 	ldw	fp,0(sp)
 8005ff0:	dec00204 	addi	sp,sp,8
 8005ff4:	f800283a 	ret

08005ff8 <_ZL20fill_ip_hdr_checksumv>:

static void fill_ip_hdr_checksum() {
 8005ff8:	defffe04 	addi	sp,sp,-8
 8005ffc:	dfc00115 	stw	ra,4(sp)
 8006000:	df000015 	stw	fp,0(sp)
 8006004:	d839883a 	mov	fp,sp
  gPB[IP_CHECKSUM_P] = 0;
 8006008:	008200b4 	movhi	r2,2050
 800600c:	10b99704 	addi	r2,r2,-6564
 8006010:	10000605 	stb	zero,24(r2)
  gPB[IP_CHECKSUM_P + 1] = 0;
 8006014:	008200b4 	movhi	r2,2050
 8006018:	10b99704 	addi	r2,r2,-6564
 800601c:	10000645 	stb	zero,25(r2)
  gPB[IP_FLAGS_P] = 0x40;  // don't fragment
 8006020:	008200b4 	movhi	r2,2050
 8006024:	10b99704 	addi	r2,r2,-6564
 8006028:	00c01004 	movi	r3,64
 800602c:	10c00505 	stb	r3,20(r2)
  gPB[IP_FLAGS_P + 1] = 0; // fragment offset
 8006030:	008200b4 	movhi	r2,2050
 8006034:	10b99704 	addi	r2,r2,-6564
 8006038:	10000545 	stb	zero,21(r2)
  gPB[IP_TTL_P] = 64;      // ttl
 800603c:	008200b4 	movhi	r2,2050
 8006040:	10b99704 	addi	r2,r2,-6564
 8006044:	00c01004 	movi	r3,64
 8006048:	10c00585 	stb	r3,22(r2)
  fill_checksum(IP_CHECKSUM_P, IP_P, IP_HEADER_LEN, 0);
 800604c:	000f883a 	mov	r7,zero
 8006050:	01800504 	movi	r6,20
 8006054:	01400384 	movi	r5,14
 8006058:	01000604 	movi	r4,24
 800605c:	8005b580 	call	8005b58 <_ZL13fill_checksumhhth>
}
 8006060:	0001883a 	nop
 8006064:	e037883a 	mov	sp,fp
 8006068:	dfc00117 	ldw	ra,4(sp)
 800606c:	df000017 	ldw	fp,0(sp)
 8006070:	dec00204 	addi	sp,sp,8
 8006074:	f800283a 	ret

08006078 <_ZL11make_eth_ipv>:

static void make_eth_ip() {
 8006078:	defffe04 	addi	sp,sp,-8
 800607c:	dfc00115 	stw	ra,4(sp)
 8006080:	df000015 	stw	fp,0(sp)
 8006084:	d839883a 	mov	fp,sp
  setMACs(gPB + ETH_SRC_MAC);
 8006088:	008200b4 	movhi	r2,2050
 800608c:	10b99884 	addi	r2,r2,-6558
 8006090:	1009883a 	mov	r4,r2
 8006094:	8005cdc0 	call	8005cdc <_ZL7setMACsPKh>
  EtherCard::copyIp(gPB + IP_DST_P, gPB + IP_SRC_P);
 8006098:	008200b4 	movhi	r2,2050
 800609c:	10b99e84 	addi	r2,r2,-6534
 80060a0:	00c200b4 	movhi	r3,2050
 80060a4:	18f99d84 	addi	r3,r3,-6538
 80060a8:	180b883a 	mov	r5,r3
 80060ac:	1009883a 	mov	r4,r2
 80060b0:	8008db00 	call	8008db0 <_ZN9EtherCard6copyIpEPhPKh>
  EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
 80060b4:	008200b4 	movhi	r2,2050
 80060b8:	10b99d84 	addi	r2,r2,-6538
 80060bc:	d1670e44 	addi	r5,gp,-25543
 80060c0:	1009883a 	mov	r4,r2
 80060c4:	8008db00 	call	8008db0 <_ZN9EtherCard6copyIpEPhPKh>
  fill_ip_hdr_checksum();
 80060c8:	8005ff80 	call	8005ff8 <_ZL20fill_ip_hdr_checksumv>
}
 80060cc:	0001883a 	nop
 80060d0:	e037883a 	mov	sp,fp
 80060d4:	dfc00117 	ldw	ra,4(sp)
 80060d8:	df000017 	ldw	fp,0(sp)
 80060dc:	dec00204 	addi	sp,sp,8
 80060e0:	f800283a 	ret

080060e4 <_ZL8step_seqth>:

static void step_seq(uint16_t rel_ack_num, uint8_t cp_seq) {
 80060e4:	defffc04 	addi	sp,sp,-16
 80060e8:	df000315 	stw	fp,12(sp)
 80060ec:	df000304 	addi	fp,sp,12
 80060f0:	2007883a 	mov	r3,r4
 80060f4:	2805883a 	mov	r2,r5
 80060f8:	e0fffe0d 	sth	r3,-8(fp)
 80060fc:	e0bfff05 	stb	r2,-4(fp)
  uint8_t i;
  uint8_t tseq;
  i = 4;
 8006100:	00800104 	movi	r2,4
 8006104:	e0bffd05 	stb	r2,-12(fp)
  while (i > 0) {
 8006108:	e0bffd03 	ldbu	r2,-12(fp)
 800610c:	10003026 	beq	r2,zero,80061d0 <_ZL8step_seqth+0xec>
    rel_ack_num = gPB[TCP_SEQ_H_P + i - 1] + rel_ack_num;
 8006110:	e0bffd03 	ldbu	r2,-12(fp)
 8006114:	10c00944 	addi	r3,r2,37
 8006118:	008200b4 	movhi	r2,2050
 800611c:	10b99704 	addi	r2,r2,-6564
 8006120:	10c5883a 	add	r2,r2,r3
 8006124:	10800003 	ldbu	r2,0(r2)
 8006128:	10c03fcc 	andi	r3,r2,255
 800612c:	e0bffe0b 	ldhu	r2,-8(fp)
 8006130:	1885883a 	add	r2,r3,r2
 8006134:	e0bffe0d 	sth	r2,-8(fp)
    tseq = gPB[TCP_SEQACK_H_P + i - 1];
 8006138:	e0bffd03 	ldbu	r2,-12(fp)
 800613c:	10c00a44 	addi	r3,r2,41
 8006140:	008200b4 	movhi	r2,2050
 8006144:	10b99704 	addi	r2,r2,-6564
 8006148:	10c5883a 	add	r2,r2,r3
 800614c:	10800003 	ldbu	r2,0(r2)
 8006150:	e0bffd45 	stb	r2,-11(fp)
    gPB[TCP_SEQACK_H_P + i - 1] = rel_ack_num;
 8006154:	e0bffd03 	ldbu	r2,-12(fp)
 8006158:	10c00a44 	addi	r3,r2,41
 800615c:	e0bffe0b 	ldhu	r2,-8(fp)
 8006160:	1009883a 	mov	r4,r2
 8006164:	008200b4 	movhi	r2,2050
 8006168:	10b99704 	addi	r2,r2,-6564
 800616c:	10c5883a 	add	r2,r2,r3
 8006170:	11000005 	stb	r4,0(r2)
    if (cp_seq)
 8006174:	e0bfff03 	ldbu	r2,-4(fp)
 8006178:	10000826 	beq	r2,zero,800619c <_ZL8step_seqth+0xb8>
      gPB[TCP_SEQ_H_P + i - 1] = tseq;
 800617c:	e0bffd03 	ldbu	r2,-12(fp)
 8006180:	10c00944 	addi	r3,r2,37
 8006184:	008200b4 	movhi	r2,2050
 8006188:	10b99704 	addi	r2,r2,-6564
 800618c:	10c5883a 	add	r2,r2,r3
 8006190:	e0fffd43 	ldbu	r3,-11(fp)
 8006194:	10c00005 	stb	r3,0(r2)
 8006198:	00000606 	br	80061b4 <_ZL8step_seqth+0xd0>
    else
      gPB[TCP_SEQ_H_P + i - 1] = 0; // some preset value
 800619c:	e0bffd03 	ldbu	r2,-12(fp)
 80061a0:	10c00944 	addi	r3,r2,37
 80061a4:	008200b4 	movhi	r2,2050
 80061a8:	10b99704 	addi	r2,r2,-6564
 80061ac:	10c5883a 	add	r2,r2,r3
 80061b0:	10000005 	stb	zero,0(r2)
    rel_ack_num = rel_ack_num >> 8;
 80061b4:	e0bffe0b 	ldhu	r2,-8(fp)
 80061b8:	1005d23a 	srai	r2,r2,8
 80061bc:	e0bffe0d 	sth	r2,-8(fp)
    i--;
 80061c0:	e0bffd03 	ldbu	r2,-12(fp)
 80061c4:	10bfffc4 	addi	r2,r2,-1
 80061c8:	e0bffd05 	stb	r2,-12(fp)

static void step_seq(uint16_t rel_ack_num, uint8_t cp_seq) {
  uint8_t i;
  uint8_t tseq;
  i = 4;
  while (i > 0) {
 80061cc:	003fce06 	br	8006108 <_ZL8step_seqth+0x24>
    else
      gPB[TCP_SEQ_H_P + i - 1] = 0; // some preset value
    rel_ack_num = rel_ack_num >> 8;
    i--;
  }
}
 80061d0:	0001883a 	nop
 80061d4:	e037883a 	mov	sp,fp
 80061d8:	df000017 	ldw	fp,0(sp)
 80061dc:	dec00104 	addi	sp,sp,4
 80061e0:	f800283a 	ret

080061e4 <_ZL12make_tcpheadth>:

static void make_tcphead(uint16_t rel_ack_num, uint8_t cp_seq) {
 80061e4:	defffb04 	addi	sp,sp,-20
 80061e8:	dfc00415 	stw	ra,16(sp)
 80061ec:	df000315 	stw	fp,12(sp)
 80061f0:	df000304 	addi	fp,sp,12
 80061f4:	2007883a 	mov	r3,r4
 80061f8:	2805883a 	mov	r2,r5
 80061fc:	e0fffe0d 	sth	r3,-8(fp)
 8006200:	e0bfff05 	stb	r2,-4(fp)
  uint8_t i = gPB[TCP_DST_PORT_H_P];
 8006204:	008200b4 	movhi	r2,2050
 8006208:	10b99704 	addi	r2,r2,-6564
 800620c:	10800903 	ldbu	r2,36(r2)
 8006210:	e0bffd05 	stb	r2,-12(fp)
  gPB[TCP_DST_PORT_H_P] = gPB[TCP_SRC_PORT_H_P];
 8006214:	008200b4 	movhi	r2,2050
 8006218:	10b99704 	addi	r2,r2,-6564
 800621c:	10c00883 	ldbu	r3,34(r2)
 8006220:	008200b4 	movhi	r2,2050
 8006224:	10b99704 	addi	r2,r2,-6564
 8006228:	10c00905 	stb	r3,36(r2)
  gPB[TCP_SRC_PORT_H_P] = i;
 800622c:	008200b4 	movhi	r2,2050
 8006230:	10b99704 	addi	r2,r2,-6564
 8006234:	e0fffd03 	ldbu	r3,-12(fp)
 8006238:	10c00885 	stb	r3,34(r2)
  uint8_t j = gPB[TCP_DST_PORT_L_P];
 800623c:	008200b4 	movhi	r2,2050
 8006240:	10b99704 	addi	r2,r2,-6564
 8006244:	10800943 	ldbu	r2,37(r2)
 8006248:	e0bffd45 	stb	r2,-11(fp)
  gPB[TCP_DST_PORT_L_P] = gPB[TCP_SRC_PORT_L_P];
 800624c:	008200b4 	movhi	r2,2050
 8006250:	10b99704 	addi	r2,r2,-6564
 8006254:	10c008c3 	ldbu	r3,35(r2)
 8006258:	008200b4 	movhi	r2,2050
 800625c:	10b99704 	addi	r2,r2,-6564
 8006260:	10c00945 	stb	r3,37(r2)
  gPB[TCP_SRC_PORT_L_P] = j;
 8006264:	008200b4 	movhi	r2,2050
 8006268:	10b99704 	addi	r2,r2,-6564
 800626c:	e0fffd43 	ldbu	r3,-11(fp)
 8006270:	10c008c5 	stb	r3,35(r2)
  step_seq(rel_ack_num, cp_seq);
 8006274:	e0bffe0b 	ldhu	r2,-8(fp)
 8006278:	e0ffff03 	ldbu	r3,-4(fp)
 800627c:	180b883a 	mov	r5,r3
 8006280:	1009883a 	mov	r4,r2
 8006284:	80060e40 	call	80060e4 <_ZL8step_seqth>
  gPB[TCP_CHECKSUM_H_P] = 0;
 8006288:	008200b4 	movhi	r2,2050
 800628c:	10b99704 	addi	r2,r2,-6564
 8006290:	10000c85 	stb	zero,50(r2)
  gPB[TCP_CHECKSUM_L_P] = 0;
 8006294:	008200b4 	movhi	r2,2050
 8006298:	10b99704 	addi	r2,r2,-6564
 800629c:	10000cc5 	stb	zero,51(r2)
  gPB[TCP_HEADER_LEN_P] = 0x50;
 80062a0:	008200b4 	movhi	r2,2050
 80062a4:	10b99704 	addi	r2,r2,-6564
 80062a8:	00c01404 	movi	r3,80
 80062ac:	10c00b85 	stb	r3,46(r2)
}
 80062b0:	0001883a 	nop
 80062b4:	e037883a 	mov	sp,fp
 80062b8:	dfc00117 	ldw	ra,4(sp)
 80062bc:	df000017 	ldw	fp,0(sp)
 80062c0:	dec00204 	addi	sp,sp,8
 80062c4:	f800283a 	ret

080062c8 <_ZL28make_arp_answer_from_requestv>:

static void make_arp_answer_from_request() {
 80062c8:	defffe04 	addi	sp,sp,-8
 80062cc:	dfc00115 	stw	ra,4(sp)
 80062d0:	df000015 	stw	fp,0(sp)
 80062d4:	d839883a 	mov	fp,sp
  printf("In make arp answer form request\n");
 80062d8:	010200b4 	movhi	r4,2050
 80062dc:	2129bc04 	addi	r4,r4,-22800
 80062e0:	800aec40 	call	800aec4 <puts>
  setMACs(gPB + ETH_SRC_MAC);
 80062e4:	008200b4 	movhi	r2,2050
 80062e8:	10b99884 	addi	r2,r2,-6558
 80062ec:	1009883a 	mov	r4,r2
 80062f0:	8005cdc0 	call	8005cdc <_ZL7setMACsPKh>
  gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
 80062f4:	008200b4 	movhi	r2,2050
 80062f8:	10b99704 	addi	r2,r2,-6564
 80062fc:	10000505 	stb	zero,20(r2)
  gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
 8006300:	008200b4 	movhi	r2,2050
 8006304:	10b99704 	addi	r2,r2,-6564
 8006308:	00c00084 	movi	r3,2
 800630c:	10c00545 	stb	r3,21(r2)
  EtherCard::copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
 8006310:	008200b4 	movhi	r2,2050
 8006314:	10b99f04 	addi	r2,r2,-6532
 8006318:	00c200b4 	movhi	r3,2050
 800631c:	18f99c84 	addi	r3,r3,-6542
 8006320:	180b883a 	mov	r5,r3
 8006324:	1009883a 	mov	r4,r2
 8006328:	8008d700 	call	8008d70 <_ZN9EtherCard7copyMacEPhPKh>
  EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
 800632c:	008200b4 	movhi	r2,2050
 8006330:	10b99c84 	addi	r2,r2,-6542
 8006334:	d1670cc4 	addi	r5,gp,-25549
 8006338:	1009883a 	mov	r4,r2
 800633c:	8008d700 	call	8008d70 <_ZN9EtherCard7copyMacEPhPKh>
  EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
 8006340:	008200b4 	movhi	r2,2050
 8006344:	10b9a084 	addi	r2,r2,-6526
 8006348:	00c200b4 	movhi	r3,2050
 800634c:	18f99e04 	addi	r3,r3,-6536
 8006350:	180b883a 	mov	r5,r3
 8006354:	1009883a 	mov	r4,r2
 8006358:	8008db00 	call	8008db0 <_ZN9EtherCard6copyIpEPhPKh>
  EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
 800635c:	008200b4 	movhi	r2,2050
 8006360:	10b99e04 	addi	r2,r2,-6536
 8006364:	d1670e44 	addi	r5,gp,-25543
 8006368:	1009883a 	mov	r4,r2
 800636c:	8008db00 	call	8008db0 <_ZN9EtherCard6copyIpEPhPKh>
  EtherCard::packetSend(42);
 8006370:	01000a84 	movi	r4,42
 8006374:	80044bc0 	call	80044bc <_ZN8ENC28J6010packetSendEt>
}
 8006378:	0001883a 	nop
 800637c:	e037883a 	mov	sp,fp
 8006380:	dfc00117 	ldw	ra,4(sp)
 8006384:	df000017 	ldw	fp,0(sp)
 8006388:	dec00204 	addi	sp,sp,8
 800638c:	f800283a 	ret

08006390 <_ZL28make_echo_reply_from_requestt>:

static void make_echo_reply_from_request(uint16_t len) {
 8006390:	defffd04 	addi	sp,sp,-12
 8006394:	dfc00215 	stw	ra,8(sp)
 8006398:	df000115 	stw	fp,4(sp)
 800639c:	df000104 	addi	fp,sp,4
 80063a0:	2005883a 	mov	r2,r4
 80063a4:	e0bfff0d 	sth	r2,-4(fp)
  make_eth_ip();
 80063a8:	80060780 	call	8006078 <_ZL11make_eth_ipv>
  gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
 80063ac:	008200b4 	movhi	r2,2050
 80063b0:	10b99704 	addi	r2,r2,-6564
 80063b4:	10000885 	stb	zero,34(r2)
  if (gPB[ICMP_CHECKSUM_P] > (0xFF - 0x08))
 80063b8:	008200b4 	movhi	r2,2050
 80063bc:	10b99704 	addi	r2,r2,-6564
 80063c0:	10800903 	ldbu	r2,36(r2)
 80063c4:	10803fcc 	andi	r2,r2,255
 80063c8:	10803e30 	cmpltui	r2,r2,248
 80063cc:	1000081e 	bne	r2,zero,80063f0 <_ZL28make_echo_reply_from_requestt+0x60>
    gPB[ICMP_CHECKSUM_P + 1]++;
 80063d0:	008200b4 	movhi	r2,2050
 80063d4:	10b99704 	addi	r2,r2,-6564
 80063d8:	10800943 	ldbu	r2,37(r2)
 80063dc:	10800044 	addi	r2,r2,1
 80063e0:	1007883a 	mov	r3,r2
 80063e4:	008200b4 	movhi	r2,2050
 80063e8:	10b99704 	addi	r2,r2,-6564
 80063ec:	10c00945 	stb	r3,37(r2)
  gPB[ICMP_CHECKSUM_P] += 0x08;
 80063f0:	008200b4 	movhi	r2,2050
 80063f4:	10b99704 	addi	r2,r2,-6564
 80063f8:	10800903 	ldbu	r2,36(r2)
 80063fc:	10800204 	addi	r2,r2,8
 8006400:	1007883a 	mov	r3,r2
 8006404:	008200b4 	movhi	r2,2050
 8006408:	10b99704 	addi	r2,r2,-6564
 800640c:	10c00905 	stb	r3,36(r2)
  EtherCard::packetSend(len);
 8006410:	e0bfff0b 	ldhu	r2,-4(fp)
 8006414:	1009883a 	mov	r4,r2
 8006418:	80044bc0 	call	80044bc <_ZN8ENC28J6010packetSendEt>
}
 800641c:	0001883a 	nop
 8006420:	e037883a 	mov	sp,fp
 8006424:	dfc00117 	ldw	ra,4(sp)
 8006428:	df000017 	ldw	fp,0(sp)
 800642c:	dec00204 	addi	sp,sp,8
 8006430:	f800283a 	ret

08006434 <_ZN9EtherCard12makeUdpReplyEPKcht>:

void EtherCard::makeUdpReply(const char *data, uint8_t datalen, uint16_t port) {
 8006434:	defffb04 	addi	sp,sp,-20
 8006438:	dfc00415 	stw	ra,16(sp)
 800643c:	df000315 	stw	fp,12(sp)
 8006440:	df000304 	addi	fp,sp,12
 8006444:	e13ffd15 	stw	r4,-12(fp)
 8006448:	2807883a 	mov	r3,r5
 800644c:	3005883a 	mov	r2,r6
 8006450:	e0fffe05 	stb	r3,-8(fp)
 8006454:	e0bfff0d 	sth	r2,-4(fp)
  if (datalen > 220)
 8006458:	e0bffe03 	ldbu	r2,-8(fp)
 800645c:	10803770 	cmpltui	r2,r2,221
 8006460:	1000021e 	bne	r2,zero,800646c <_ZN9EtherCard12makeUdpReplyEPKcht+0x38>
    datalen = 220;
 8006464:	00bff704 	movi	r2,-36
 8006468:	e0bffe05 	stb	r2,-8(fp)
  gPB[IP_TOTLEN_H_P] = (IP_HEADER_LEN + UDP_HEADER_LEN + datalen) >> 8;
 800646c:	e0bffe03 	ldbu	r2,-8(fp)
 8006470:	10800704 	addi	r2,r2,28
 8006474:	1005d23a 	srai	r2,r2,8
 8006478:	1007883a 	mov	r3,r2
 800647c:	008200b4 	movhi	r2,2050
 8006480:	10b99704 	addi	r2,r2,-6564
 8006484:	10c00405 	stb	r3,16(r2)
  gPB[IP_TOTLEN_L_P] = IP_HEADER_LEN + UDP_HEADER_LEN + datalen;
 8006488:	e0bffe03 	ldbu	r2,-8(fp)
 800648c:	10800704 	addi	r2,r2,28
 8006490:	1007883a 	mov	r3,r2
 8006494:	008200b4 	movhi	r2,2050
 8006498:	10b99704 	addi	r2,r2,-6564
 800649c:	10c00445 	stb	r3,17(r2)
  make_eth_ip();
 80064a0:	80060780 	call	8006078 <_ZL11make_eth_ipv>
  gPB[UDP_DST_PORT_H_P] = gPB[UDP_SRC_PORT_H_P];
 80064a4:	008200b4 	movhi	r2,2050
 80064a8:	10b99704 	addi	r2,r2,-6564
 80064ac:	10c00883 	ldbu	r3,34(r2)
 80064b0:	008200b4 	movhi	r2,2050
 80064b4:	10b99704 	addi	r2,r2,-6564
 80064b8:	10c00905 	stb	r3,36(r2)
  gPB[UDP_DST_PORT_L_P] = gPB[UDP_SRC_PORT_L_P];
 80064bc:	008200b4 	movhi	r2,2050
 80064c0:	10b99704 	addi	r2,r2,-6564
 80064c4:	10c008c3 	ldbu	r3,35(r2)
 80064c8:	008200b4 	movhi	r2,2050
 80064cc:	10b99704 	addi	r2,r2,-6564
 80064d0:	10c00945 	stb	r3,37(r2)
  gPB[UDP_SRC_PORT_H_P] = port >> 8;
 80064d4:	e0bfff0b 	ldhu	r2,-4(fp)
 80064d8:	1005d23a 	srai	r2,r2,8
 80064dc:	1007883a 	mov	r3,r2
 80064e0:	008200b4 	movhi	r2,2050
 80064e4:	10b99704 	addi	r2,r2,-6564
 80064e8:	10c00885 	stb	r3,34(r2)
  gPB[UDP_SRC_PORT_L_P] = port;
 80064ec:	e0bfff0b 	ldhu	r2,-4(fp)
 80064f0:	1007883a 	mov	r3,r2
 80064f4:	008200b4 	movhi	r2,2050
 80064f8:	10b99704 	addi	r2,r2,-6564
 80064fc:	10c008c5 	stb	r3,35(r2)
  gPB[UDP_LEN_H_P] = (UDP_HEADER_LEN + datalen) >> 8;
 8006500:	e0bffe03 	ldbu	r2,-8(fp)
 8006504:	10800204 	addi	r2,r2,8
 8006508:	1005d23a 	srai	r2,r2,8
 800650c:	1007883a 	mov	r3,r2
 8006510:	008200b4 	movhi	r2,2050
 8006514:	10b99704 	addi	r2,r2,-6564
 8006518:	10c00985 	stb	r3,38(r2)
  gPB[UDP_LEN_L_P] = UDP_HEADER_LEN + datalen;
 800651c:	e0bffe03 	ldbu	r2,-8(fp)
 8006520:	10800204 	addi	r2,r2,8
 8006524:	1007883a 	mov	r3,r2
 8006528:	008200b4 	movhi	r2,2050
 800652c:	10b99704 	addi	r2,r2,-6564
 8006530:	10c009c5 	stb	r3,39(r2)
  gPB[UDP_CHECKSUM_H_P] = 0;
 8006534:	008200b4 	movhi	r2,2050
 8006538:	10b99704 	addi	r2,r2,-6564
 800653c:	10000a05 	stb	zero,40(r2)
  gPB[UDP_CHECKSUM_L_P] = 0;
 8006540:	008200b4 	movhi	r2,2050
 8006544:	10b99704 	addi	r2,r2,-6564
 8006548:	10000a45 	stb	zero,41(r2)
  memcpy(gPB + UDP_DATA_P, data, datalen);
 800654c:	008200b4 	movhi	r2,2050
 8006550:	10b9a184 	addi	r2,r2,-6522
 8006554:	e0fffe03 	ldbu	r3,-8(fp)
 8006558:	180d883a 	mov	r6,r3
 800655c:	e17ffd17 	ldw	r5,-12(fp)
 8006560:	1009883a 	mov	r4,r2
 8006564:	800ab080 	call	800ab08 <memcpy>
  fill_checksum(UDP_CHECKSUM_H_P, IP_SRC_P, 16 + datalen, 1);
 8006568:	e0bffe03 	ldbu	r2,-8(fp)
 800656c:	10800404 	addi	r2,r2,16
 8006570:	10bfffcc 	andi	r2,r2,65535
 8006574:	01c00044 	movi	r7,1
 8006578:	100d883a 	mov	r6,r2
 800657c:	01400684 	movi	r5,26
 8006580:	01000a04 	movi	r4,40
 8006584:	8005b580 	call	8005b58 <_ZL13fill_checksumhhth>
  packetSend(UDP_HEADER_LEN + IP_HEADER_LEN + ETH_HEADER_LEN + datalen);
 8006588:	e0bffe03 	ldbu	r2,-8(fp)
 800658c:	10800a84 	addi	r2,r2,42
 8006590:	10bfffcc 	andi	r2,r2,65535
 8006594:	1009883a 	mov	r4,r2
 8006598:	80044bc0 	call	80044bc <_ZN8ENC28J6010packetSendEt>
}
 800659c:	0001883a 	nop
 80065a0:	e037883a 	mov	sp,fp
 80065a4:	dfc00117 	ldw	ra,4(sp)
 80065a8:	df000017 	ldw	fp,0(sp)
 80065ac:	dec00204 	addi	sp,sp,8
 80065b0:	f800283a 	ret

080065b4 <_ZL24make_tcp_synack_from_synv>:

static void make_tcp_synack_from_syn() {
 80065b4:	defffe04 	addi	sp,sp,-8
 80065b8:	dfc00115 	stw	ra,4(sp)
 80065bc:	df000015 	stw	fp,0(sp)
 80065c0:	d839883a 	mov	fp,sp
  gPB[IP_TOTLEN_H_P] = 0;
 80065c4:	008200b4 	movhi	r2,2050
 80065c8:	10b99704 	addi	r2,r2,-6564
 80065cc:	10000405 	stb	zero,16(r2)
  gPB[IP_TOTLEN_L_P] = IP_HEADER_LEN + TCP_HEADER_LEN_PLAIN + 4;
 80065d0:	008200b4 	movhi	r2,2050
 80065d4:	10b99704 	addi	r2,r2,-6564
 80065d8:	00c00b04 	movi	r3,44
 80065dc:	10c00445 	stb	r3,17(r2)
  make_eth_ip();
 80065e0:	80060780 	call	8006078 <_ZL11make_eth_ipv>
  gPB[TCP_FLAGS_P] = TCP_FLAGS_SYNACK_V;
 80065e4:	008200b4 	movhi	r2,2050
 80065e8:	10b99704 	addi	r2,r2,-6564
 80065ec:	00c00484 	movi	r3,18
 80065f0:	10c00bc5 	stb	r3,47(r2)
  make_tcphead(1, 0);
 80065f4:	000b883a 	mov	r5,zero
 80065f8:	01000044 	movi	r4,1
 80065fc:	80061e40 	call	80061e4 <_ZL12make_tcpheadth>
  gPB[TCP_SEQ_H_P + 0] = 0;
 8006600:	008200b4 	movhi	r2,2050
 8006604:	10b99704 	addi	r2,r2,-6564
 8006608:	10000985 	stb	zero,38(r2)
  gPB[TCP_SEQ_H_P + 1] = 0;
 800660c:	008200b4 	movhi	r2,2050
 8006610:	10b99704 	addi	r2,r2,-6564
 8006614:	100009c5 	stb	zero,39(r2)
  gPB[TCP_SEQ_H_P + 2] = seqnum;
 8006618:	d0e00843 	ldbu	r3,-32735(gp)
 800661c:	008200b4 	movhi	r2,2050
 8006620:	10b99704 	addi	r2,r2,-6564
 8006624:	10c00a05 	stb	r3,40(r2)
  gPB[TCP_SEQ_H_P + 3] = 0;
 8006628:	008200b4 	movhi	r2,2050
 800662c:	10b99704 	addi	r2,r2,-6564
 8006630:	10000a45 	stb	zero,41(r2)
  seqnum += 3;
 8006634:	d0a00843 	ldbu	r2,-32735(gp)
 8006638:	108000c4 	addi	r2,r2,3
 800663c:	d0a00845 	stb	r2,-32735(gp)
  gPB[TCP_OPTIONS_P] = 2;
 8006640:	008200b4 	movhi	r2,2050
 8006644:	10b99704 	addi	r2,r2,-6564
 8006648:	00c00084 	movi	r3,2
 800664c:	10c00d85 	stb	r3,54(r2)
  gPB[TCP_OPTIONS_P + 1] = 4;
 8006650:	008200b4 	movhi	r2,2050
 8006654:	10b99704 	addi	r2,r2,-6564
 8006658:	00c00104 	movi	r3,4
 800665c:	10c00dc5 	stb	r3,55(r2)
  gPB[TCP_OPTIONS_P + 2] = 0x05;
 8006660:	008200b4 	movhi	r2,2050
 8006664:	10b99704 	addi	r2,r2,-6564
 8006668:	00c00144 	movi	r3,5
 800666c:	10c00e05 	stb	r3,56(r2)
  gPB[TCP_OPTIONS_P + 3] = 0x0;
 8006670:	008200b4 	movhi	r2,2050
 8006674:	10b99704 	addi	r2,r2,-6564
 8006678:	10000e45 	stb	zero,57(r2)
  gPB[TCP_HEADER_LEN_P] = 0x60;
 800667c:	008200b4 	movhi	r2,2050
 8006680:	10b99704 	addi	r2,r2,-6564
 8006684:	00c01804 	movi	r3,96
 8006688:	10c00b85 	stb	r3,46(r2)
  gPB[TCP_WIN_SIZE] = 0x5; // 1400=0x578
 800668c:	008200b4 	movhi	r2,2050
 8006690:	10b99704 	addi	r2,r2,-6564
 8006694:	00c00144 	movi	r3,5
 8006698:	10c00c05 	stb	r3,48(r2)
  gPB[TCP_WIN_SIZE + 1] = 0x78;
 800669c:	008200b4 	movhi	r2,2050
 80066a0:	10b99704 	addi	r2,r2,-6564
 80066a4:	00c01e04 	movi	r3,120
 80066a8:	10c00c45 	stb	r3,49(r2)
  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8 + TCP_HEADER_LEN_PLAIN + 4, 2);
 80066ac:	01c00084 	movi	r7,2
 80066b0:	01800804 	movi	r6,32
 80066b4:	01400684 	movi	r5,26
 80066b8:	01000c84 	movi	r4,50
 80066bc:	8005b580 	call	8005b58 <_ZL13fill_checksumhhth>
  EtherCard::packetSend(IP_HEADER_LEN + TCP_HEADER_LEN_PLAIN + 4 +
                        ETH_HEADER_LEN);
 80066c0:	01000e84 	movi	r4,58
 80066c4:	80044bc0 	call	80044bc <_ZN8ENC28J6010packetSendEt>
}
 80066c8:	0001883a 	nop
 80066cc:	e037883a 	mov	sp,fp
 80066d0:	dfc00117 	ldw	ra,4(sp)
 80066d4:	df000017 	ldw	fp,0(sp)
 80066d8:	dec00204 	addi	sp,sp,8
 80066dc:	f800283a 	ret

080066e0 <_ZN9EtherCard19getTcpPayloadLengthEv>:

uint16_t EtherCard::getTcpPayloadLength() {
 80066e0:	defffe04 	addi	sp,sp,-8
 80066e4:	df000115 	stw	fp,4(sp)
 80066e8:	df000104 	addi	fp,sp,4
  int16_t i = (((int16_t)gPB[IP_TOTLEN_H_P]) << 8) | gPB[IP_TOTLEN_L_P];
 80066ec:	008200b4 	movhi	r2,2050
 80066f0:	10b99704 	addi	r2,r2,-6564
 80066f4:	10800403 	ldbu	r2,16(r2)
 80066f8:	10803fcc 	andi	r2,r2,255
 80066fc:	1004923a 	slli	r2,r2,8
 8006700:	1007883a 	mov	r3,r2
 8006704:	008200b4 	movhi	r2,2050
 8006708:	10b99704 	addi	r2,r2,-6564
 800670c:	10800443 	ldbu	r2,17(r2)
 8006710:	10803fcc 	andi	r2,r2,255
 8006714:	1884b03a 	or	r2,r3,r2
 8006718:	e0bfff0d 	sth	r2,-4(fp)
  i -= IP_HEADER_LEN;
 800671c:	e0bfff0b 	ldhu	r2,-4(fp)
 8006720:	10bffb04 	addi	r2,r2,-20
 8006724:	e0bfff0d 	sth	r2,-4(fp)
  i -= (gPB[TCP_HEADER_LEN_P] >> 4) * 4; // generate len in bytes;
 8006728:	e0ffff0b 	ldhu	r3,-4(fp)
 800672c:	008200b4 	movhi	r2,2050
 8006730:	10b99704 	addi	r2,r2,-6564
 8006734:	10800b83 	ldbu	r2,46(r2)
 8006738:	10803fcc 	andi	r2,r2,255
 800673c:	1005d13a 	srai	r2,r2,4
 8006740:	1085883a 	add	r2,r2,r2
 8006744:	1085883a 	add	r2,r2,r2
 8006748:	1885c83a 	sub	r2,r3,r2
 800674c:	e0bfff0d 	sth	r2,-4(fp)
  if (i <= 0)
 8006750:	e0bfff0f 	ldh	r2,-4(fp)
 8006754:	00800116 	blt	zero,r2,800675c <_ZN9EtherCard19getTcpPayloadLengthEv+0x7c>
    i = 0;
 8006758:	e03fff0d 	sth	zero,-4(fp)
  return (uint16_t)i;
 800675c:	e0bfff0b 	ldhu	r2,-4(fp)
}
 8006760:	e037883a 	mov	sp,fp
 8006764:	df000017 	ldw	fp,0(sp)
 8006768:	dec00104 	addi	sp,sp,4
 800676c:	f800283a 	ret

08006770 <_ZL21make_tcp_ack_from_anysh>:

static void make_tcp_ack_from_any(int16_t datlentoack, uint8_t addflags) {
 8006770:	defffb04 	addi	sp,sp,-20
 8006774:	dfc00415 	stw	ra,16(sp)
 8006778:	df000315 	stw	fp,12(sp)
 800677c:	df000304 	addi	fp,sp,12
 8006780:	2007883a 	mov	r3,r4
 8006784:	2805883a 	mov	r2,r5
 8006788:	e0fffe0d 	sth	r3,-8(fp)
 800678c:	e0bfff05 	stb	r2,-4(fp)
  gPB[TCP_FLAGS_P] = TCP_FLAGS_ACK_V | addflags;
 8006790:	e0bfff03 	ldbu	r2,-4(fp)
 8006794:	10800414 	ori	r2,r2,16
 8006798:	1007883a 	mov	r3,r2
 800679c:	008200b4 	movhi	r2,2050
 80067a0:	10b99704 	addi	r2,r2,-6564
 80067a4:	10c00bc5 	stb	r3,47(r2)
  if (addflags != TCP_FLAGS_RST_V && datlentoack == 0)
 80067a8:	e0bfff03 	ldbu	r2,-4(fp)
 80067ac:	10800120 	cmpeqi	r2,r2,4
 80067b0:	1000041e 	bne	r2,zero,80067c4 <_ZL21make_tcp_ack_from_anysh+0x54>
 80067b4:	e0bffe0f 	ldh	r2,-8(fp)
 80067b8:	1000021e 	bne	r2,zero,80067c4 <_ZL21make_tcp_ack_from_anysh+0x54>
    datlentoack = 1;
 80067bc:	00800044 	movi	r2,1
 80067c0:	e0bffe0d 	sth	r2,-8(fp)
  make_tcphead(datlentoack, 1); // no options
 80067c4:	e0bffe0b 	ldhu	r2,-8(fp)
 80067c8:	10bfffcc 	andi	r2,r2,65535
 80067cc:	01400044 	movi	r5,1
 80067d0:	1009883a 	mov	r4,r2
 80067d4:	80061e40 	call	80061e4 <_ZL12make_tcpheadth>
  uint16_t j = IP_HEADER_LEN + TCP_HEADER_LEN_PLAIN;
 80067d8:	00800a04 	movi	r2,40
 80067dc:	e0bffd0d 	sth	r2,-12(fp)
  gPB[IP_TOTLEN_H_P] = j >> 8;
 80067e0:	e0bffd0b 	ldhu	r2,-12(fp)
 80067e4:	1005d23a 	srai	r2,r2,8
 80067e8:	1007883a 	mov	r3,r2
 80067ec:	008200b4 	movhi	r2,2050
 80067f0:	10b99704 	addi	r2,r2,-6564
 80067f4:	10c00405 	stb	r3,16(r2)
  gPB[IP_TOTLEN_L_P] = j;
 80067f8:	e0bffd0b 	ldhu	r2,-12(fp)
 80067fc:	1007883a 	mov	r3,r2
 8006800:	008200b4 	movhi	r2,2050
 8006804:	10b99704 	addi	r2,r2,-6564
 8006808:	10c00445 	stb	r3,17(r2)
  make_eth_ip();
 800680c:	80060780 	call	8006078 <_ZL11make_eth_ipv>
  gPB[TCP_WIN_SIZE] = 0x4; // 1024=0x400, 1280=0x500 2048=0x800 768=0x300
 8006810:	008200b4 	movhi	r2,2050
 8006814:	10b99704 	addi	r2,r2,-6564
 8006818:	00c00104 	movi	r3,4
 800681c:	10c00c05 	stb	r3,48(r2)
  gPB[TCP_WIN_SIZE + 1] = 0;
 8006820:	008200b4 	movhi	r2,2050
 8006824:	10b99704 	addi	r2,r2,-6564
 8006828:	10000c45 	stb	zero,49(r2)
  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8 + TCP_HEADER_LEN_PLAIN, 2);
 800682c:	01c00084 	movi	r7,2
 8006830:	01800704 	movi	r6,28
 8006834:	01400684 	movi	r5,26
 8006838:	01000c84 	movi	r4,50
 800683c:	8005b580 	call	8005b58 <_ZL13fill_checksumhhth>
  EtherCard::packetSend(IP_HEADER_LEN + TCP_HEADER_LEN_PLAIN + ETH_HEADER_LEN);
 8006840:	01000d84 	movi	r4,54
 8006844:	80044bc0 	call	80044bc <_ZN8ENC28J6010packetSendEt>
}
 8006848:	0001883a 	nop
 800684c:	e037883a 	mov	sp,fp
 8006850:	dfc00117 	ldw	ra,4(sp)
 8006854:	df000017 	ldw	fp,0(sp)
 8006858:	dec00204 	addi	sp,sp,8
 800685c:	f800283a 	ret

08006860 <_ZL30make_tcp_ack_with_data_noflagst>:

static void make_tcp_ack_with_data_noflags(uint16_t dlen) {
 8006860:	defffc04 	addi	sp,sp,-16
 8006864:	dfc00315 	stw	ra,12(sp)
 8006868:	df000215 	stw	fp,8(sp)
 800686c:	df000204 	addi	fp,sp,8
 8006870:	2005883a 	mov	r2,r4
 8006874:	e0bfff0d 	sth	r2,-4(fp)
  uint16_t j = IP_HEADER_LEN + TCP_HEADER_LEN_PLAIN + dlen;
 8006878:	e0bfff0b 	ldhu	r2,-4(fp)
 800687c:	10800a04 	addi	r2,r2,40
 8006880:	e0bffe0d 	sth	r2,-8(fp)
  gPB[IP_TOTLEN_H_P] = j >> 8;
 8006884:	e0bffe0b 	ldhu	r2,-8(fp)
 8006888:	1005d23a 	srai	r2,r2,8
 800688c:	1007883a 	mov	r3,r2
 8006890:	008200b4 	movhi	r2,2050
 8006894:	10b99704 	addi	r2,r2,-6564
 8006898:	10c00405 	stb	r3,16(r2)
  gPB[IP_TOTLEN_L_P] = j;
 800689c:	e0bffe0b 	ldhu	r2,-8(fp)
 80068a0:	1007883a 	mov	r3,r2
 80068a4:	008200b4 	movhi	r2,2050
 80068a8:	10b99704 	addi	r2,r2,-6564
 80068ac:	10c00445 	stb	r3,17(r2)
  fill_ip_hdr_checksum();
 80068b0:	8005ff80 	call	8005ff8 <_ZL20fill_ip_hdr_checksumv>
  gPB[TCP_CHECKSUM_H_P] = 0;
 80068b4:	008200b4 	movhi	r2,2050
 80068b8:	10b99704 	addi	r2,r2,-6564
 80068bc:	10000c85 	stb	zero,50(r2)
  gPB[TCP_CHECKSUM_L_P] = 0;
 80068c0:	008200b4 	movhi	r2,2050
 80068c4:	10b99704 	addi	r2,r2,-6564
 80068c8:	10000cc5 	stb	zero,51(r2)
  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8 + TCP_HEADER_LEN_PLAIN + dlen, 2);
 80068cc:	e0bfff0b 	ldhu	r2,-4(fp)
 80068d0:	10800704 	addi	r2,r2,28
 80068d4:	10bfffcc 	andi	r2,r2,65535
 80068d8:	01c00084 	movi	r7,2
 80068dc:	100d883a 	mov	r6,r2
 80068e0:	01400684 	movi	r5,26
 80068e4:	01000c84 	movi	r4,50
 80068e8:	8005b580 	call	8005b58 <_ZL13fill_checksumhhth>
  EtherCard::packetSend(IP_HEADER_LEN + TCP_HEADER_LEN_PLAIN + dlen +
 80068ec:	e0bfff0b 	ldhu	r2,-4(fp)
 80068f0:	10800d84 	addi	r2,r2,54
 80068f4:	10bfffcc 	andi	r2,r2,65535
                        ETH_HEADER_LEN);
 80068f8:	1009883a 	mov	r4,r2
 80068fc:	80044bc0 	call	80044bc <_ZN8ENC28J6010packetSendEt>
}
 8006900:	0001883a 	nop
 8006904:	e037883a 	mov	sp,fp
 8006908:	dfc00117 	ldw	ra,4(sp)
 800690c:	df000017 	ldw	fp,0(sp)
 8006910:	dec00204 	addi	sp,sp,8
 8006914:	f800283a 	ret

08006918 <_ZN9EtherCard15httpServerReplyEt>:

void EtherCard::httpServerReply(uint16_t dlen) {
 8006918:	defffd04 	addi	sp,sp,-12
 800691c:	dfc00215 	stw	ra,8(sp)
 8006920:	df000115 	stw	fp,4(sp)
 8006924:	df000104 	addi	fp,sp,4
 8006928:	2005883a 	mov	r2,r4
 800692c:	e0bfff0d 	sth	r2,-4(fp)
  make_tcp_ack_from_any(info_data_len, 0); // send ack for http get
 8006930:	d0a7348b 	ldhu	r2,-25390(gp)
 8006934:	10bfffcc 	andi	r2,r2,65535
 8006938:	10a0001c 	xori	r2,r2,32768
 800693c:	10a00004 	addi	r2,r2,-32768
 8006940:	000b883a 	mov	r5,zero
 8006944:	1009883a 	mov	r4,r2
 8006948:	80067700 	call	8006770 <_ZL21make_tcp_ack_from_anysh>
  gPB[TCP_FLAGS_P] = TCP_FLAGS_ACK_V | TCP_FLAGS_PUSH_V | TCP_FLAGS_FIN_V;
 800694c:	008200b4 	movhi	r2,2050
 8006950:	10b99704 	addi	r2,r2,-6564
 8006954:	00c00644 	movi	r3,25
 8006958:	10c00bc5 	stb	r3,47(r2)
  make_tcp_ack_with_data_noflags(dlen); // send data
 800695c:	e0bfff0b 	ldhu	r2,-4(fp)
 8006960:	1009883a 	mov	r4,r2
 8006964:	80068600 	call	8006860 <_ZL30make_tcp_ack_with_data_noflagst>
}
 8006968:	0001883a 	nop
 800696c:	e037883a 	mov	sp,fp
 8006970:	dfc00117 	ldw	ra,4(sp)
 8006974:	df000017 	ldw	fp,0(sp)
 8006978:	dec00204 	addi	sp,sp,8
 800697c:	f800283a 	ret

08006980 <_ZL16getBigEndianLongh>:

static uint32_t getBigEndianLong(
    byte offs) { // get the sequence number of packets after an ack from GET
 8006980:	defffe04 	addi	sp,sp,-8
 8006984:	df000115 	stw	fp,4(sp)
 8006988:	df000104 	addi	fp,sp,4
 800698c:	2005883a 	mov	r2,r4
 8006990:	e0bfff05 	stb	r2,-4(fp)
  return (((unsigned long)gPB[offs] * 256 + gPB[offs + 1]) * 256 +
 8006994:	e0ffff03 	ldbu	r3,-4(fp)
 8006998:	008200b4 	movhi	r2,2050
 800699c:	10b99704 	addi	r2,r2,-6564
 80069a0:	10c5883a 	add	r2,r2,r3
 80069a4:	10800003 	ldbu	r2,0(r2)
 80069a8:	10803fcc 	andi	r2,r2,255
 80069ac:	1006923a 	slli	r3,r2,8
 80069b0:	e0bfff03 	ldbu	r2,-4(fp)
 80069b4:	11000044 	addi	r4,r2,1
 80069b8:	008200b4 	movhi	r2,2050
 80069bc:	10b99704 	addi	r2,r2,-6564
 80069c0:	1105883a 	add	r2,r2,r4
 80069c4:	10800003 	ldbu	r2,0(r2)
 80069c8:	10803fcc 	andi	r2,r2,255
 80069cc:	1885883a 	add	r2,r3,r2
 80069d0:	1006923a 	slli	r3,r2,8
          gPB[offs + 2]) *
 80069d4:	e0bfff03 	ldbu	r2,-4(fp)
 80069d8:	11000084 	addi	r4,r2,2
 80069dc:	008200b4 	movhi	r2,2050
 80069e0:	10b99704 	addi	r2,r2,-6564
 80069e4:	1105883a 	add	r2,r2,r4
 80069e8:	10800003 	ldbu	r2,0(r2)
  make_tcp_ack_with_data_noflags(dlen); // send data
}

static uint32_t getBigEndianLong(
    byte offs) { // get the sequence number of packets after an ack from GET
  return (((unsigned long)gPB[offs] * 256 + gPB[offs + 1]) * 256 +
 80069ec:	10803fcc 	andi	r2,r2,255
 80069f0:	1885883a 	add	r2,r3,r2
          gPB[offs + 2]) *
 80069f4:	1006923a 	slli	r3,r2,8
             256 +
         gPB[offs + 3];
 80069f8:	e0bfff03 	ldbu	r2,-4(fp)
 80069fc:	110000c4 	addi	r4,r2,3
 8006a00:	008200b4 	movhi	r2,2050
 8006a04:	10b99704 	addi	r2,r2,-6564
 8006a08:	1105883a 	add	r2,r2,r4
 8006a0c:	10800003 	ldbu	r2,0(r2)

static uint32_t getBigEndianLong(
    byte offs) { // get the sequence number of packets after an ack from GET
  return (((unsigned long)gPB[offs] * 256 + gPB[offs + 1]) * 256 +
          gPB[offs + 2]) *
             256 +
 8006a10:	10803fcc 	andi	r2,r2,255
         gPB[offs + 3];
 8006a14:	1885883a 	add	r2,r3,r2
} // thanks to mstuetz for the missing (unsigned long)
 8006a18:	e037883a 	mov	sp,fp
 8006a1c:	df000017 	ldw	fp,0(sp)
 8006a20:	dec00104 	addi	sp,sp,4
 8006a24:	f800283a 	ret

08006a28 <_ZL17setSequenceNumberm>:

static void setSequenceNumber(uint32_t seq) {
 8006a28:	defffe04 	addi	sp,sp,-8
 8006a2c:	df000115 	stw	fp,4(sp)
 8006a30:	df000104 	addi	fp,sp,4
 8006a34:	e13fff15 	stw	r4,-4(fp)
  gPB[TCP_SEQ_H_P] = (seq & 0xff000000) >> 24;
 8006a38:	e0bfff17 	ldw	r2,-4(fp)
 8006a3c:	1004d63a 	srli	r2,r2,24
 8006a40:	1007883a 	mov	r3,r2
 8006a44:	008200b4 	movhi	r2,2050
 8006a48:	10b99704 	addi	r2,r2,-6564
 8006a4c:	10c00985 	stb	r3,38(r2)
  gPB[TCP_SEQ_H_P + 1] = (seq & 0xff0000) >> 16;
 8006a50:	e0bfff17 	ldw	r2,-4(fp)
 8006a54:	10803fec 	andhi	r2,r2,255
 8006a58:	1004d43a 	srli	r2,r2,16
 8006a5c:	1007883a 	mov	r3,r2
 8006a60:	008200b4 	movhi	r2,2050
 8006a64:	10b99704 	addi	r2,r2,-6564
 8006a68:	10c009c5 	stb	r3,39(r2)
  gPB[TCP_SEQ_H_P + 2] = (seq & 0xff00) >> 8;
 8006a6c:	e0bfff17 	ldw	r2,-4(fp)
 8006a70:	10bfc00c 	andi	r2,r2,65280
 8006a74:	1004d23a 	srli	r2,r2,8
 8006a78:	1007883a 	mov	r3,r2
 8006a7c:	008200b4 	movhi	r2,2050
 8006a80:	10b99704 	addi	r2,r2,-6564
 8006a84:	10c00a05 	stb	r3,40(r2)
  gPB[TCP_SEQ_H_P + 3] = (seq & 0xff);
 8006a88:	e0bfff17 	ldw	r2,-4(fp)
 8006a8c:	1007883a 	mov	r3,r2
 8006a90:	008200b4 	movhi	r2,2050
 8006a94:	10b99704 	addi	r2,r2,-6564
 8006a98:	10c00a45 	stb	r3,41(r2)
}
 8006a9c:	0001883a 	nop
 8006aa0:	e037883a 	mov	sp,fp
 8006aa4:	df000017 	ldw	fp,0(sp)
 8006aa8:	dec00104 	addi	sp,sp,4
 8006aac:	f800283a 	ret

08006ab0 <_ZN9EtherCard17getSequenceNumberEv>:

uint32_t EtherCard::getSequenceNumber() {
 8006ab0:	defffe04 	addi	sp,sp,-8
 8006ab4:	dfc00115 	stw	ra,4(sp)
 8006ab8:	df000015 	stw	fp,0(sp)
 8006abc:	d839883a 	mov	fp,sp
  return getBigEndianLong(TCP_SEQ_H_P);
 8006ac0:	01000984 	movi	r4,38
 8006ac4:	80069800 	call	8006980 <_ZL16getBigEndianLongh>
}
 8006ac8:	e037883a 	mov	sp,fp
 8006acc:	dfc00117 	ldw	ra,4(sp)
 8006ad0:	df000017 	ldw	fp,0(sp)
 8006ad4:	dec00204 	addi	sp,sp,8
 8006ad8:	f800283a 	ret

08006adc <_ZN9EtherCard18httpServerReplyAckEv>:

void EtherCard::httpServerReplyAck() {
 8006adc:	defffe04 	addi	sp,sp,-8
 8006ae0:	dfc00115 	stw	ra,4(sp)
 8006ae4:	df000015 	stw	fp,0(sp)
 8006ae8:	d839883a 	mov	fp,sp
  make_tcp_ack_from_any(getTcpPayloadLength(), 0); // send ack for http request
 8006aec:	80066e00 	call	80066e0 <_ZN9EtherCard19getTcpPayloadLengthEv>
 8006af0:	10bfffcc 	andi	r2,r2,65535
 8006af4:	10a0001c 	xori	r2,r2,32768
 8006af8:	10a00004 	addi	r2,r2,-32768
 8006afc:	000b883a 	mov	r5,zero
 8006b00:	1009883a 	mov	r4,r2
 8006b04:	80067700 	call	8006770 <_ZL21make_tcp_ack_from_anysh>
  SEQ = getSequenceNumber(); // get the sequence number of packets after an ack
 8006b08:	8006ab00 	call	8006ab0 <_ZN9EtherCard17getSequenceNumberEv>
 8006b0c:	d0a73615 	stw	r2,-25384(gp)
                             // from GET
}
 8006b10:	0001883a 	nop
 8006b14:	e037883a 	mov	sp,fp
 8006b18:	dfc00117 	ldw	ra,4(sp)
 8006b1c:	df000017 	ldw	fp,0(sp)
 8006b20:	dec00204 	addi	sp,sp,8
 8006b24:	f800283a 	ret

08006b28 <_ZN9EtherCard26httpServerReply_with_flagsEth>:

void EtherCard::httpServerReply_with_flags(uint16_t dlen, uint8_t flags) {
 8006b28:	defffc04 	addi	sp,sp,-16
 8006b2c:	dfc00315 	stw	ra,12(sp)
 8006b30:	df000215 	stw	fp,8(sp)
 8006b34:	df000204 	addi	fp,sp,8
 8006b38:	2007883a 	mov	r3,r4
 8006b3c:	2805883a 	mov	r2,r5
 8006b40:	e0fffe0d 	sth	r3,-8(fp)
 8006b44:	e0bfff05 	stb	r2,-4(fp)
  setSequenceNumber(SEQ);
 8006b48:	d0a73617 	ldw	r2,-25384(gp)
 8006b4c:	1009883a 	mov	r4,r2
 8006b50:	8006a280 	call	8006a28 <_ZL17setSequenceNumberm>
  gPB[TCP_FLAGS_P] = flags;             // final packet
 8006b54:	008200b4 	movhi	r2,2050
 8006b58:	10b99704 	addi	r2,r2,-6564
 8006b5c:	e0ffff03 	ldbu	r3,-4(fp)
 8006b60:	10c00bc5 	stb	r3,47(r2)
  make_tcp_ack_with_data_noflags(dlen); // send data
 8006b64:	e0bffe0b 	ldhu	r2,-8(fp)
 8006b68:	1009883a 	mov	r4,r2
 8006b6c:	80068600 	call	8006860 <_ZL30make_tcp_ack_with_data_noflagst>
  SEQ = SEQ + dlen;
 8006b70:	e0fffe0b 	ldhu	r3,-8(fp)
 8006b74:	d0a73617 	ldw	r2,-25384(gp)
 8006b78:	1885883a 	add	r2,r3,r2
 8006b7c:	d0a73615 	stw	r2,-25384(gp)
}
 8006b80:	0001883a 	nop
 8006b84:	e037883a 	mov	sp,fp
 8006b88:	dfc00117 	ldw	ra,4(sp)
 8006b8c:	df000017 	ldw	fp,0(sp)
 8006b90:	dec00204 	addi	sp,sp,8
 8006b94:	f800283a 	ret

08006b98 <_ZN9EtherCard17clientIcmpRequestEPKh>:

void EtherCard::clientIcmpRequest(const uint8_t *destip) {
 8006b98:	defffd04 	addi	sp,sp,-12
 8006b9c:	dfc00215 	stw	ra,8(sp)
 8006ba0:	df000115 	stw	fp,4(sp)
 8006ba4:	df000104 	addi	fp,sp,4
 8006ba8:	e13fff15 	stw	r4,-4(fp)
  if (is_lan(EtherCard::myip, destip)) {
 8006bac:	e17fff17 	ldw	r5,-4(fp)
 8006bb0:	d1270e44 	addi	r4,gp,-25543
 8006bb4:	8005dd00 	call	8005dd0 <_ZL6is_lanPKhS0_>
 8006bb8:	10803fcc 	andi	r2,r2,255
 8006bbc:	10000426 	beq	r2,zero,8006bd0 <_ZN9EtherCard17clientIcmpRequestEPKh+0x38>
    setMACandIPs(destmacaddr, destip);
 8006bc0:	e17fff17 	ldw	r5,-4(fp)
 8006bc4:	d1273004 	addi	r4,gp,-25408
 8006bc8:	8005d2c0 	call	8005d2c <_ZL12setMACandIPsPKhS0_>
 8006bcc:	00000306 	br	8006bdc <_ZN9EtherCard17clientIcmpRequestEPKh+0x44>
  } else {
    setMACandIPs(gwmacaddr, destip);
 8006bd0:	e17fff17 	ldw	r5,-4(fp)
 8006bd4:	d1273284 	addi	r4,gp,-25398
 8006bd8:	8005d2c0 	call	8005d2c <_ZL12setMACandIPsPKhS0_>
  }
  gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 8006bdc:	008200b4 	movhi	r2,2050
 8006be0:	10b99704 	addi	r2,r2,-6564
 8006be4:	00c00204 	movi	r3,8
 8006be8:	10c00305 	stb	r3,12(r2)
  gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 8006bec:	008200b4 	movhi	r2,2050
 8006bf0:	10b99704 	addi	r2,r2,-6564
 8006bf4:	10000345 	stb	zero,13(r2)
  memcpy_P(gPB + IP_P, iphdr, sizeof iphdr);
 8006bf8:	008200b4 	movhi	r2,2050
 8006bfc:	10b99a84 	addi	r2,r2,-6550
 8006c00:	01800244 	movi	r6,9
 8006c04:	014200b4 	movhi	r5,2050
 8006c08:	2969b704 	addi	r5,r5,-22820
 8006c0c:	1009883a 	mov	r4,r2
 8006c10:	8005b180 	call	8005b18 <_Z8memcpy_PPvPKvj>
  gPB[IP_TOTLEN_L_P] = 0x54;
 8006c14:	008200b4 	movhi	r2,2050
 8006c18:	10b99704 	addi	r2,r2,-6564
 8006c1c:	00c01504 	movi	r3,84
 8006c20:	10c00445 	stb	r3,17(r2)
  gPB[IP_PROTO_P] = IP_PROTO_ICMP_V;
 8006c24:	008200b4 	movhi	r2,2050
 8006c28:	10b99704 	addi	r2,r2,-6564
 8006c2c:	00c00044 	movi	r3,1
 8006c30:	10c005c5 	stb	r3,23(r2)
  fill_ip_hdr_checksum();
 8006c34:	8005ff80 	call	8005ff8 <_ZL20fill_ip_hdr_checksumv>
  gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREQUEST_V;
 8006c38:	008200b4 	movhi	r2,2050
 8006c3c:	10b99704 	addi	r2,r2,-6564
 8006c40:	00c00204 	movi	r3,8
 8006c44:	10c00885 	stb	r3,34(r2)
  gPB[ICMP_TYPE_P + 1] = 0; // code
 8006c48:	008200b4 	movhi	r2,2050
 8006c4c:	10b99704 	addi	r2,r2,-6564
 8006c50:	100008c5 	stb	zero,35(r2)
  gPB[ICMP_CHECKSUM_H_P] = 0;
 8006c54:	008200b4 	movhi	r2,2050
 8006c58:	10b99704 	addi	r2,r2,-6564
 8006c5c:	10000905 	stb	zero,36(r2)
  gPB[ICMP_CHECKSUM_L_P] = 0;
 8006c60:	008200b4 	movhi	r2,2050
 8006c64:	10b99704 	addi	r2,r2,-6564
 8006c68:	10000945 	stb	zero,37(r2)
  gPB[ICMP_IDENT_H_P] = 5;                  // some number
 8006c6c:	008200b4 	movhi	r2,2050
 8006c70:	10b99704 	addi	r2,r2,-6564
 8006c74:	00c00144 	movi	r3,5
 8006c78:	10c00985 	stb	r3,38(r2)
  gPB[ICMP_IDENT_L_P] = EtherCard::myip[3]; // last byte of my IP
 8006c7c:	d0e70f03 	ldbu	r3,-25540(gp)
 8006c80:	008200b4 	movhi	r2,2050
 8006c84:	10b99704 	addi	r2,r2,-6564
 8006c88:	10c009c5 	stb	r3,39(r2)
  gPB[ICMP_IDENT_L_P + 1] = 0;              // seq number, high byte
 8006c8c:	008200b4 	movhi	r2,2050
 8006c90:	10b99704 	addi	r2,r2,-6564
 8006c94:	10000a05 	stb	zero,40(r2)
  gPB[ICMP_IDENT_L_P + 2] =
      1; // seq number, low byte, we send only 1 ping at a time
 8006c98:	008200b4 	movhi	r2,2050
 8006c9c:	10b99704 	addi	r2,r2,-6564
 8006ca0:	00c00044 	movi	r3,1
 8006ca4:	10c00a45 	stb	r3,41(r2)
  memset(gPB + ICMP_DATA_P, PINGPATTERN, 56);
 8006ca8:	008200b4 	movhi	r2,2050
 8006cac:	10b9a184 	addi	r2,r2,-6522
 8006cb0:	01800e04 	movi	r6,56
 8006cb4:	01401084 	movi	r5,66
 8006cb8:	1009883a 	mov	r4,r2
 8006cbc:	800ac500 	call	800ac50 <memset>
  fill_checksum(ICMP_CHECKSUM_H_P, ICMP_TYPE_P, 56 + 8, 0);
 8006cc0:	000f883a 	mov	r7,zero
 8006cc4:	01801004 	movi	r6,64
 8006cc8:	01400884 	movi	r5,34
 8006ccc:	01000904 	movi	r4,36
 8006cd0:	8005b580 	call	8005b58 <_ZL13fill_checksumhhth>
  packetSend(98);
 8006cd4:	01001884 	movi	r4,98
 8006cd8:	80044bc0 	call	80044bc <_ZN8ENC28J6010packetSendEt>
}
 8006cdc:	0001883a 	nop
 8006ce0:	e037883a 	mov	sp,fp
 8006ce4:	dfc00117 	ldw	ra,4(sp)
 8006ce8:	df000017 	ldw	fp,0(sp)
 8006cec:	dec00204 	addi	sp,sp,8
 8006cf0:	f800283a 	ret

08006cf4 <_ZN9EtherCard10ntpRequestEPhh>:

void EtherCard::ntpRequest(uint8_t *ntpip, uint8_t srcport) {
 8006cf4:	defffc04 	addi	sp,sp,-16
 8006cf8:	dfc00315 	stw	ra,12(sp)
 8006cfc:	df000215 	stw	fp,8(sp)
 8006d00:	df000204 	addi	fp,sp,8
 8006d04:	e13ffe15 	stw	r4,-8(fp)
 8006d08:	2805883a 	mov	r2,r5
 8006d0c:	e0bfff05 	stb	r2,-4(fp)
  if (is_lan(myip, ntpip)) {
 8006d10:	e17ffe17 	ldw	r5,-8(fp)
 8006d14:	d1270e44 	addi	r4,gp,-25543
 8006d18:	8005dd00 	call	8005dd0 <_ZL6is_lanPKhS0_>
 8006d1c:	10803fcc 	andi	r2,r2,255
 8006d20:	10000426 	beq	r2,zero,8006d34 <_ZN9EtherCard10ntpRequestEPhh+0x40>
    setMACandIPs(destmacaddr, ntpip);
 8006d24:	e17ffe17 	ldw	r5,-8(fp)
 8006d28:	d1273004 	addi	r4,gp,-25408
 8006d2c:	8005d2c0 	call	8005d2c <_ZL12setMACandIPsPKhS0_>
 8006d30:	00000306 	br	8006d40 <_ZN9EtherCard10ntpRequestEPhh+0x4c>
  } else {
    setMACandIPs(gwmacaddr, ntpip);
 8006d34:	e17ffe17 	ldw	r5,-8(fp)
 8006d38:	d1273284 	addi	r4,gp,-25398
 8006d3c:	8005d2c0 	call	8005d2c <_ZL12setMACandIPsPKhS0_>
  }
  gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 8006d40:	008200b4 	movhi	r2,2050
 8006d44:	10b99704 	addi	r2,r2,-6564
 8006d48:	00c00204 	movi	r3,8
 8006d4c:	10c00305 	stb	r3,12(r2)
  gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 8006d50:	008200b4 	movhi	r2,2050
 8006d54:	10b99704 	addi	r2,r2,-6564
 8006d58:	10000345 	stb	zero,13(r2)
  memcpy_P(gPB + IP_P, iphdr, sizeof iphdr);
 8006d5c:	008200b4 	movhi	r2,2050
 8006d60:	10b99a84 	addi	r2,r2,-6550
 8006d64:	01800244 	movi	r6,9
 8006d68:	014200b4 	movhi	r5,2050
 8006d6c:	2969b704 	addi	r5,r5,-22820
 8006d70:	1009883a 	mov	r4,r2
 8006d74:	8005b180 	call	8005b18 <_Z8memcpy_PPvPKvj>
  gPB[IP_TOTLEN_L_P] = 0x4c;
 8006d78:	008200b4 	movhi	r2,2050
 8006d7c:	10b99704 	addi	r2,r2,-6564
 8006d80:	00c01304 	movi	r3,76
 8006d84:	10c00445 	stb	r3,17(r2)
  gPB[IP_PROTO_P] = IP_PROTO_UDP_V;
 8006d88:	008200b4 	movhi	r2,2050
 8006d8c:	10b99704 	addi	r2,r2,-6564
 8006d90:	00c00444 	movi	r3,17
 8006d94:	10c005c5 	stb	r3,23(r2)
  fill_ip_hdr_checksum();
 8006d98:	8005ff80 	call	8005ff8 <_ZL20fill_ip_hdr_checksumv>
  gPB[UDP_DST_PORT_H_P] = 0;
 8006d9c:	008200b4 	movhi	r2,2050
 8006da0:	10b99704 	addi	r2,r2,-6564
 8006da4:	10000905 	stb	zero,36(r2)
  gPB[UDP_DST_PORT_L_P] = NTP_PORT; // ntp = 123
 8006da8:	008200b4 	movhi	r2,2050
 8006dac:	10b99704 	addi	r2,r2,-6564
 8006db0:	00c01ec4 	movi	r3,123
 8006db4:	10c00945 	stb	r3,37(r2)
  gPB[UDP_SRC_PORT_H_P] = 10;
 8006db8:	008200b4 	movhi	r2,2050
 8006dbc:	10b99704 	addi	r2,r2,-6564
 8006dc0:	00c00284 	movi	r3,10
 8006dc4:	10c00885 	stb	r3,34(r2)
  gPB[UDP_SRC_PORT_L_P] = srcport; // lower 8 bit of src port
 8006dc8:	008200b4 	movhi	r2,2050
 8006dcc:	10b99704 	addi	r2,r2,-6564
 8006dd0:	e0ffff03 	ldbu	r3,-4(fp)
 8006dd4:	10c008c5 	stb	r3,35(r2)
  gPB[UDP_LEN_H_P] = 0;
 8006dd8:	008200b4 	movhi	r2,2050
 8006ddc:	10b99704 	addi	r2,r2,-6564
 8006de0:	10000985 	stb	zero,38(r2)
  gPB[UDP_LEN_L_P] = 56; // fixed len
 8006de4:	008200b4 	movhi	r2,2050
 8006de8:	10b99704 	addi	r2,r2,-6564
 8006dec:	00c00e04 	movi	r3,56
 8006df0:	10c009c5 	stb	r3,39(r2)
  gPB[UDP_CHECKSUM_H_P] = 0;
 8006df4:	008200b4 	movhi	r2,2050
 8006df8:	10b99704 	addi	r2,r2,-6564
 8006dfc:	10000a05 	stb	zero,40(r2)
  gPB[UDP_CHECKSUM_L_P] = 0;
 8006e00:	008200b4 	movhi	r2,2050
 8006e04:	10b99704 	addi	r2,r2,-6564
 8006e08:	10000a45 	stb	zero,41(r2)
  memset(gPB + UDP_DATA_P, 0, 48);
 8006e0c:	008200b4 	movhi	r2,2050
 8006e10:	10b9a184 	addi	r2,r2,-6522
 8006e14:	01800c04 	movi	r6,48
 8006e18:	000b883a 	mov	r5,zero
 8006e1c:	1009883a 	mov	r4,r2
 8006e20:	800ac500 	call	800ac50 <memset>
  memcpy_P(gPB + UDP_DATA_P, ntpreqhdr, 10);
 8006e24:	008200b4 	movhi	r2,2050
 8006e28:	10b9a184 	addi	r2,r2,-6522
 8006e2c:	01800284 	movi	r6,10
 8006e30:	014200b4 	movhi	r5,2050
 8006e34:	2969b944 	addi	r5,r5,-22811
 8006e38:	1009883a 	mov	r4,r2
 8006e3c:	8005b180 	call	8005b18 <_Z8memcpy_PPvPKvj>

  fill_checksum(UDP_CHECKSUM_H_P, IP_SRC_P, 16 + 48, 1);
 8006e40:	01c00044 	movi	r7,1
 8006e44:	01801004 	movi	r6,64
 8006e48:	01400684 	movi	r5,26
 8006e4c:	01000a04 	movi	r4,40
 8006e50:	8005b580 	call	8005b58 <_ZL13fill_checksumhhth>
  packetSend(90);
 8006e54:	01001684 	movi	r4,90
 8006e58:	80044bc0 	call	80044bc <_ZN8ENC28J6010packetSendEt>
}
 8006e5c:	0001883a 	nop
 8006e60:	e037883a 	mov	sp,fp
 8006e64:	dfc00117 	ldw	ra,4(sp)
 8006e68:	df000017 	ldw	fp,0(sp)
 8006e6c:	dec00204 	addi	sp,sp,8
 8006e70:	f800283a 	ret

08006e74 <_ZN9EtherCard16ntpProcessAnswerEPmh>:

uint8_t EtherCard::ntpProcessAnswer(uint32_t *time, uint8_t dstport_l) {
 8006e74:	defffd04 	addi	sp,sp,-12
 8006e78:	df000215 	stw	fp,8(sp)
 8006e7c:	df000204 	addi	fp,sp,8
 8006e80:	e13ffe15 	stw	r4,-8(fp)
 8006e84:	2805883a 	mov	r2,r5
 8006e88:	e0bfff05 	stb	r2,-4(fp)
  if ((dstport_l && gPB[UDP_DST_PORT_L_P] != dstport_l) ||
 8006e8c:	e0bfff03 	ldbu	r2,-4(fp)
 8006e90:	10000626 	beq	r2,zero,8006eac <_ZN9EtherCard16ntpProcessAnswerEPmh+0x38>
 8006e94:	008200b4 	movhi	r2,2050
 8006e98:	10b99704 	addi	r2,r2,-6564
 8006e9c:	10800943 	ldbu	r2,37(r2)
 8006ea0:	10c03fcc 	andi	r3,r2,255
 8006ea4:	e0bfff03 	ldbu	r2,-4(fp)
 8006ea8:	1880111e 	bne	r3,r2,8006ef0 <_ZN9EtherCard16ntpProcessAnswerEPmh+0x7c>
      gPB[UDP_LEN_H_P] != 0 || gPB[UDP_LEN_L_P] != 56 ||
 8006eac:	008200b4 	movhi	r2,2050
 8006eb0:	10b99704 	addi	r2,r2,-6564
 8006eb4:	10800983 	ldbu	r2,38(r2)
  fill_checksum(UDP_CHECKSUM_H_P, IP_SRC_P, 16 + 48, 1);
  packetSend(90);
}

uint8_t EtherCard::ntpProcessAnswer(uint32_t *time, uint8_t dstport_l) {
  if ((dstport_l && gPB[UDP_DST_PORT_L_P] != dstport_l) ||
 8006eb8:	10803fcc 	andi	r2,r2,255
 8006ebc:	10000c1e 	bne	r2,zero,8006ef0 <_ZN9EtherCard16ntpProcessAnswerEPmh+0x7c>
      gPB[UDP_LEN_H_P] != 0 || gPB[UDP_LEN_L_P] != 56 ||
 8006ec0:	008200b4 	movhi	r2,2050
 8006ec4:	10b99704 	addi	r2,r2,-6564
 8006ec8:	108009c3 	ldbu	r2,39(r2)
 8006ecc:	10803fcc 	andi	r2,r2,255
 8006ed0:	10800e18 	cmpnei	r2,r2,56
 8006ed4:	1000061e 	bne	r2,zero,8006ef0 <_ZN9EtherCard16ntpProcessAnswerEPmh+0x7c>
      gPB[UDP_SRC_PORT_L_P] != 0x7b)
 8006ed8:	008200b4 	movhi	r2,2050
 8006edc:	10b99704 	addi	r2,r2,-6564
 8006ee0:	108008c3 	ldbu	r2,35(r2)
  packetSend(90);
}

uint8_t EtherCard::ntpProcessAnswer(uint32_t *time, uint8_t dstport_l) {
  if ((dstport_l && gPB[UDP_DST_PORT_L_P] != dstport_l) ||
      gPB[UDP_LEN_H_P] != 0 || gPB[UDP_LEN_L_P] != 56 ||
 8006ee4:	10803fcc 	andi	r2,r2,255
 8006ee8:	10801ee0 	cmpeqi	r2,r2,123
 8006eec:	1000021e 	bne	r2,zero,8006ef8 <_ZN9EtherCard16ntpProcessAnswerEPmh+0x84>
      gPB[UDP_SRC_PORT_L_P] != 0x7b)
    return 0;
 8006ef0:	0005883a 	mov	r2,zero
 8006ef4:	00001806 	br	8006f58 <_ZN9EtherCard16ntpProcessAnswerEPmh+0xe4>
  ((uint8_t *)time)[3] = gPB[0x52];
 8006ef8:	e0bffe17 	ldw	r2,-8(fp)
 8006efc:	10c000c4 	addi	r3,r2,3
 8006f00:	008200b4 	movhi	r2,2050
 8006f04:	10b99704 	addi	r2,r2,-6564
 8006f08:	10801483 	ldbu	r2,82(r2)
 8006f0c:	18800005 	stb	r2,0(r3)
  ((uint8_t *)time)[2] = gPB[0x53];
 8006f10:	e0bffe17 	ldw	r2,-8(fp)
 8006f14:	10c00084 	addi	r3,r2,2
 8006f18:	008200b4 	movhi	r2,2050
 8006f1c:	10b99704 	addi	r2,r2,-6564
 8006f20:	108014c3 	ldbu	r2,83(r2)
 8006f24:	18800005 	stb	r2,0(r3)
  ((uint8_t *)time)[1] = gPB[0x54];
 8006f28:	e0bffe17 	ldw	r2,-8(fp)
 8006f2c:	10c00044 	addi	r3,r2,1
 8006f30:	008200b4 	movhi	r2,2050
 8006f34:	10b99704 	addi	r2,r2,-6564
 8006f38:	10801503 	ldbu	r2,84(r2)
 8006f3c:	18800005 	stb	r2,0(r3)
  ((uint8_t *)time)[0] = gPB[0x55];
 8006f40:	008200b4 	movhi	r2,2050
 8006f44:	10b99704 	addi	r2,r2,-6564
 8006f48:	10c01543 	ldbu	r3,85(r2)
 8006f4c:	e0bffe17 	ldw	r2,-8(fp)
 8006f50:	10c00005 	stb	r3,0(r2)
  return 1;
 8006f54:	00800044 	movi	r2,1
}
 8006f58:	e037883a 	mov	sp,fp
 8006f5c:	df000017 	ldw	fp,0(sp)
 8006f60:	dec00104 	addi	sp,sp,4
 8006f64:	f800283a 	ret

08006f68 <_ZN9EtherCard10udpPrepareEtPKht>:

void EtherCard::udpPrepare(uint16_t sport, const uint8_t *dip, uint16_t dport) {
 8006f68:	defffb04 	addi	sp,sp,-20
 8006f6c:	dfc00415 	stw	ra,16(sp)
 8006f70:	df000315 	stw	fp,12(sp)
 8006f74:	df000304 	addi	fp,sp,12
 8006f78:	2007883a 	mov	r3,r4
 8006f7c:	e17ffe15 	stw	r5,-8(fp)
 8006f80:	3005883a 	mov	r2,r6
 8006f84:	e0fffd0d 	sth	r3,-12(fp)
 8006f88:	e0bfff0d 	sth	r2,-4(fp)
  if (is_lan(myip, dip)) { // this works because both dns mac and destinations
 8006f8c:	e17ffe17 	ldw	r5,-8(fp)
 8006f90:	d1270e44 	addi	r4,gp,-25543
 8006f94:	8005dd00 	call	8005dd0 <_ZL6is_lanPKhS0_>
 8006f98:	10803fcc 	andi	r2,r2,255
 8006f9c:	10000426 	beq	r2,zero,8006fb0 <_ZN9EtherCard10udpPrepareEtPKht+0x48>
                           // mac are stored in same variable - destmacaddr
    setMACandIPs(destmacaddr,
                 dip); // at different times. The program could have separate
 8006fa0:	e17ffe17 	ldw	r5,-8(fp)
 8006fa4:	d1273004 	addi	r4,gp,-25408
 8006fa8:	8005d2c0 	call	8005d2c <_ZL12setMACandIPsPKhS0_>
 8006fac:	00000306 	br	8006fbc <_ZN9EtherCard10udpPrepareEtPKht+0x54>
                       // variable for dns mac, then here should be
  } else { // checked if dip is dns ip and separately if dip is hisip and then
           // use correct mac.
    setMACandIPs(gwmacaddr, dip);
 8006fb0:	e17ffe17 	ldw	r5,-8(fp)
 8006fb4:	d1273284 	addi	r4,gp,-25398
 8006fb8:	8005d2c0 	call	8005d2c <_ZL12setMACandIPsPKhS0_>
  }
  // see http://tldp.org/HOWTO/Multicast-HOWTO-2.html
  // multicast or broadcast address, https://github.com/njh/EtherCard/issues/59
  if ((dip[0] & 0xF0) == 0xE0 || *((unsigned long *)dip) == 0xFFFFFFFF ||
 8006fbc:	e0bffe17 	ldw	r2,-8(fp)
 8006fc0:	10800003 	ldbu	r2,0(r2)
 8006fc4:	10803fcc 	andi	r2,r2,255
 8006fc8:	10803c0c 	andi	r2,r2,240
 8006fcc:	10803820 	cmpeqi	r2,r2,224
 8006fd0:	1000091e 	bne	r2,zero,8006ff8 <_ZN9EtherCard10udpPrepareEtPKht+0x90>
 8006fd4:	e0bffe17 	ldw	r2,-8(fp)
 8006fd8:	10800017 	ldw	r2,0(r2)
 8006fdc:	10bfffe0 	cmpeqi	r2,r2,-1
 8006fe0:	1000051e 	bne	r2,zero,8006ff8 <_ZN9EtherCard10udpPrepareEtPKht+0x90>
      !memcmp(broadcastip, dip, IP_LEN))
 8006fe4:	01800104 	movi	r6,4
 8006fe8:	e17ffe17 	ldw	r5,-8(fp)
 8006fec:	d1271044 	addi	r4,gp,-25535
 8006ff0:	800aa8c0 	call	800aa8c <memcmp>
           // use correct mac.
    setMACandIPs(gwmacaddr, dip);
  }
  // see http://tldp.org/HOWTO/Multicast-HOWTO-2.html
  // multicast or broadcast address, https://github.com/njh/EtherCard/issues/59
  if ((dip[0] & 0xF0) == 0xE0 || *((unsigned long *)dip) == 0xFFFFFFFF ||
 8006ff4:	1000041e 	bne	r2,zero,8007008 <_ZN9EtherCard10udpPrepareEtPKht+0xa0>
      !memcmp(broadcastip, dip, IP_LEN))
    EtherCard::copyMac(gPB + ETH_DST_MAC, allOnes);
 8006ff8:	d16008c4 	addi	r5,gp,-32733
 8006ffc:	010200b4 	movhi	r4,2050
 8007000:	21399704 	addi	r4,r4,-6564
 8007004:	8008d700 	call	8008d70 <_ZN9EtherCard7copyMacEPhPKh>
  gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 8007008:	008200b4 	movhi	r2,2050
 800700c:	10b99704 	addi	r2,r2,-6564
 8007010:	00c00204 	movi	r3,8
 8007014:	10c00305 	stb	r3,12(r2)
  gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 8007018:	008200b4 	movhi	r2,2050
 800701c:	10b99704 	addi	r2,r2,-6564
 8007020:	10000345 	stb	zero,13(r2)
  memcpy_P(gPB + IP_P, iphdr, sizeof iphdr);
 8007024:	008200b4 	movhi	r2,2050
 8007028:	10b99a84 	addi	r2,r2,-6550
 800702c:	01800244 	movi	r6,9
 8007030:	014200b4 	movhi	r5,2050
 8007034:	2969b704 	addi	r5,r5,-22820
 8007038:	1009883a 	mov	r4,r2
 800703c:	8005b180 	call	8005b18 <_Z8memcpy_PPvPKvj>
  gPB[IP_TOTLEN_H_P] = 0;
 8007040:	008200b4 	movhi	r2,2050
 8007044:	10b99704 	addi	r2,r2,-6564
 8007048:	10000405 	stb	zero,16(r2)
  gPB[IP_PROTO_P] = IP_PROTO_UDP_V;
 800704c:	008200b4 	movhi	r2,2050
 8007050:	10b99704 	addi	r2,r2,-6564
 8007054:	00c00444 	movi	r3,17
 8007058:	10c005c5 	stb	r3,23(r2)
  gPB[UDP_DST_PORT_H_P] = (dport >> 8);
 800705c:	e0bfff0b 	ldhu	r2,-4(fp)
 8007060:	1005d23a 	srai	r2,r2,8
 8007064:	1007883a 	mov	r3,r2
 8007068:	008200b4 	movhi	r2,2050
 800706c:	10b99704 	addi	r2,r2,-6564
 8007070:	10c00905 	stb	r3,36(r2)
  gPB[UDP_DST_PORT_L_P] = dport;
 8007074:	e0bfff0b 	ldhu	r2,-4(fp)
 8007078:	1007883a 	mov	r3,r2
 800707c:	008200b4 	movhi	r2,2050
 8007080:	10b99704 	addi	r2,r2,-6564
 8007084:	10c00945 	stb	r3,37(r2)
  gPB[UDP_SRC_PORT_H_P] = (sport >> 8);
 8007088:	e0bffd0b 	ldhu	r2,-12(fp)
 800708c:	1005d23a 	srai	r2,r2,8
 8007090:	1007883a 	mov	r3,r2
 8007094:	008200b4 	movhi	r2,2050
 8007098:	10b99704 	addi	r2,r2,-6564
 800709c:	10c00885 	stb	r3,34(r2)
  gPB[UDP_SRC_PORT_L_P] = sport;
 80070a0:	e0bffd0b 	ldhu	r2,-12(fp)
 80070a4:	1007883a 	mov	r3,r2
 80070a8:	008200b4 	movhi	r2,2050
 80070ac:	10b99704 	addi	r2,r2,-6564
 80070b0:	10c008c5 	stb	r3,35(r2)
  gPB[UDP_LEN_H_P] = 0;
 80070b4:	008200b4 	movhi	r2,2050
 80070b8:	10b99704 	addi	r2,r2,-6564
 80070bc:	10000985 	stb	zero,38(r2)
  gPB[UDP_CHECKSUM_H_P] = 0;
 80070c0:	008200b4 	movhi	r2,2050
 80070c4:	10b99704 	addi	r2,r2,-6564
 80070c8:	10000a05 	stb	zero,40(r2)
  gPB[UDP_CHECKSUM_L_P] = 0;
 80070cc:	008200b4 	movhi	r2,2050
 80070d0:	10b99704 	addi	r2,r2,-6564
 80070d4:	10000a45 	stb	zero,41(r2)
}
 80070d8:	0001883a 	nop
 80070dc:	e037883a 	mov	sp,fp
 80070e0:	dfc00117 	ldw	ra,4(sp)
 80070e4:	df000017 	ldw	fp,0(sp)
 80070e8:	dec00204 	addi	sp,sp,8
 80070ec:	f800283a 	ret

080070f0 <_ZN9EtherCard11udpTransmitEt>:

void EtherCard::udpTransmit(uint16_t datalen) {
 80070f0:	defffd04 	addi	sp,sp,-12
 80070f4:	dfc00215 	stw	ra,8(sp)
 80070f8:	df000115 	stw	fp,4(sp)
 80070fc:	df000104 	addi	fp,sp,4
 8007100:	2005883a 	mov	r2,r4
 8007104:	e0bfff0d 	sth	r2,-4(fp)
  gPB[IP_TOTLEN_H_P] = (IP_HEADER_LEN + UDP_HEADER_LEN + datalen) >> 8;
 8007108:	e0bfff0b 	ldhu	r2,-4(fp)
 800710c:	10800704 	addi	r2,r2,28
 8007110:	1005d23a 	srai	r2,r2,8
 8007114:	1007883a 	mov	r3,r2
 8007118:	008200b4 	movhi	r2,2050
 800711c:	10b99704 	addi	r2,r2,-6564
 8007120:	10c00405 	stb	r3,16(r2)
  gPB[IP_TOTLEN_L_P] = IP_HEADER_LEN + UDP_HEADER_LEN + datalen;
 8007124:	e0bfff0b 	ldhu	r2,-4(fp)
 8007128:	10800704 	addi	r2,r2,28
 800712c:	1007883a 	mov	r3,r2
 8007130:	008200b4 	movhi	r2,2050
 8007134:	10b99704 	addi	r2,r2,-6564
 8007138:	10c00445 	stb	r3,17(r2)
  fill_ip_hdr_checksum();
 800713c:	8005ff80 	call	8005ff8 <_ZL20fill_ip_hdr_checksumv>
  gPB[UDP_LEN_H_P] = (UDP_HEADER_LEN + datalen) >> 8;
 8007140:	e0bfff0b 	ldhu	r2,-4(fp)
 8007144:	10800204 	addi	r2,r2,8
 8007148:	1005d23a 	srai	r2,r2,8
 800714c:	1007883a 	mov	r3,r2
 8007150:	008200b4 	movhi	r2,2050
 8007154:	10b99704 	addi	r2,r2,-6564
 8007158:	10c00985 	stb	r3,38(r2)
  gPB[UDP_LEN_L_P] = UDP_HEADER_LEN + datalen;
 800715c:	e0bfff0b 	ldhu	r2,-4(fp)
 8007160:	10800204 	addi	r2,r2,8
 8007164:	1007883a 	mov	r3,r2
 8007168:	008200b4 	movhi	r2,2050
 800716c:	10b99704 	addi	r2,r2,-6564
 8007170:	10c009c5 	stb	r3,39(r2)
  fill_checksum(UDP_CHECKSUM_H_P, IP_SRC_P, 16 + datalen, 1);
 8007174:	e0bfff0b 	ldhu	r2,-4(fp)
 8007178:	10800404 	addi	r2,r2,16
 800717c:	10bfffcc 	andi	r2,r2,65535
 8007180:	01c00044 	movi	r7,1
 8007184:	100d883a 	mov	r6,r2
 8007188:	01400684 	movi	r5,26
 800718c:	01000a04 	movi	r4,40
 8007190:	8005b580 	call	8005b58 <_ZL13fill_checksumhhth>
  packetSend(UDP_HEADER_LEN + IP_HEADER_LEN + ETH_HEADER_LEN + datalen);
 8007194:	e0bfff0b 	ldhu	r2,-4(fp)
 8007198:	10800a84 	addi	r2,r2,42
 800719c:	10bfffcc 	andi	r2,r2,65535
 80071a0:	1009883a 	mov	r4,r2
 80071a4:	80044bc0 	call	80044bc <_ZN8ENC28J6010packetSendEt>
}
 80071a8:	0001883a 	nop
 80071ac:	e037883a 	mov	sp,fp
 80071b0:	dfc00117 	ldw	ra,4(sp)
 80071b4:	df000017 	ldw	fp,0(sp)
 80071b8:	dec00204 	addi	sp,sp,8
 80071bc:	f800283a 	ret

080071c0 <_ZN9EtherCard7sendUdpEPKchtPKht>:

void EtherCard::sendUdp(const char *data, uint8_t datalen, uint16_t sport,
                        const uint8_t *dip, uint16_t dport) {
 80071c0:	defff904 	addi	sp,sp,-28
 80071c4:	dfc00615 	stw	ra,24(sp)
 80071c8:	df000515 	stw	fp,20(sp)
 80071cc:	df000504 	addi	fp,sp,20
 80071d0:	e13ffb15 	stw	r4,-20(fp)
 80071d4:	2809883a 	mov	r4,r5
 80071d8:	3007883a 	mov	r3,r6
 80071dc:	e1fffe15 	stw	r7,-8(fp)
 80071e0:	e0800217 	ldw	r2,8(fp)
 80071e4:	e13ffc05 	stb	r4,-16(fp)
 80071e8:	e0fffd0d 	sth	r3,-12(fp)
 80071ec:	e0bfff0d 	sth	r2,-4(fp)
  udpPrepare(sport, dip, dport);
 80071f0:	e0bffd0b 	ldhu	r2,-12(fp)
 80071f4:	e0ffff0b 	ldhu	r3,-4(fp)
 80071f8:	180d883a 	mov	r6,r3
 80071fc:	e17ffe17 	ldw	r5,-8(fp)
 8007200:	1009883a 	mov	r4,r2
 8007204:	8006f680 	call	8006f68 <_ZN9EtherCard10udpPrepareEtPKht>
  if (datalen > 220)
 8007208:	e0bffc03 	ldbu	r2,-16(fp)
 800720c:	10803770 	cmpltui	r2,r2,221
 8007210:	1000021e 	bne	r2,zero,800721c <_ZN9EtherCard7sendUdpEPKchtPKht+0x5c>
    datalen = 220;
 8007214:	00bff704 	movi	r2,-36
 8007218:	e0bffc05 	stb	r2,-16(fp)
  memcpy(gPB + UDP_DATA_P, data, datalen);
 800721c:	008200b4 	movhi	r2,2050
 8007220:	10b9a184 	addi	r2,r2,-6522
 8007224:	e0fffc03 	ldbu	r3,-16(fp)
 8007228:	180d883a 	mov	r6,r3
 800722c:	e17ffb17 	ldw	r5,-20(fp)
 8007230:	1009883a 	mov	r4,r2
 8007234:	800ab080 	call	800ab08 <memcpy>
  udpTransmit(datalen);
 8007238:	e0bffc03 	ldbu	r2,-16(fp)
 800723c:	1009883a 	mov	r4,r2
 8007240:	80070f00 	call	80070f0 <_ZN9EtherCard11udpTransmitEt>
}
 8007244:	0001883a 	nop
 8007248:	e037883a 	mov	sp,fp
 800724c:	dfc00117 	ldw	ra,4(sp)
 8007250:	df000017 	ldw	fp,0(sp)
 8007254:	dec00204 	addi	sp,sp,8
 8007258:	f800283a 	ret

0800725c <_ZN9EtherCard7sendWolEPh>:

void EtherCard::sendWol(uint8_t *wolmac) {
 800725c:	defffc04 	addi	sp,sp,-16
 8007260:	dfc00315 	stw	ra,12(sp)
 8007264:	df000215 	stw	fp,8(sp)
 8007268:	df000204 	addi	fp,sp,8
 800726c:	e13fff15 	stw	r4,-4(fp)
  setMACandIPs(allOnes, allOnes);
 8007270:	d16008c4 	addi	r5,gp,-32733
 8007274:	d12008c4 	addi	r4,gp,-32733
 8007278:	8005d2c0 	call	8005d2c <_ZL12setMACandIPsPKhS0_>
  gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 800727c:	008200b4 	movhi	r2,2050
 8007280:	10b99704 	addi	r2,r2,-6564
 8007284:	00c00204 	movi	r3,8
 8007288:	10c00305 	stb	r3,12(r2)
  gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 800728c:	008200b4 	movhi	r2,2050
 8007290:	10b99704 	addi	r2,r2,-6564
 8007294:	10000345 	stb	zero,13(r2)
  memcpy_P(gPB + IP_P, iphdr, 9);
 8007298:	008200b4 	movhi	r2,2050
 800729c:	10b99a84 	addi	r2,r2,-6550
 80072a0:	01800244 	movi	r6,9
 80072a4:	014200b4 	movhi	r5,2050
 80072a8:	2969b704 	addi	r5,r5,-22820
 80072ac:	1009883a 	mov	r4,r2
 80072b0:	8005b180 	call	8005b18 <_Z8memcpy_PPvPKvj>
  gPB[IP_TOTLEN_L_P] = 0x82;
 80072b4:	008200b4 	movhi	r2,2050
 80072b8:	10b99704 	addi	r2,r2,-6564
 80072bc:	00ffe084 	movi	r3,-126
 80072c0:	10c00445 	stb	r3,17(r2)
  gPB[IP_PROTO_P] = IP_PROTO_UDP_V;
 80072c4:	008200b4 	movhi	r2,2050
 80072c8:	10b99704 	addi	r2,r2,-6564
 80072cc:	00c00444 	movi	r3,17
 80072d0:	10c005c5 	stb	r3,23(r2)
  fill_ip_hdr_checksum();
 80072d4:	8005ff80 	call	8005ff8 <_ZL20fill_ip_hdr_checksumv>
  gPB[UDP_DST_PORT_H_P] = 0;
 80072d8:	008200b4 	movhi	r2,2050
 80072dc:	10b99704 	addi	r2,r2,-6564
 80072e0:	10000905 	stb	zero,36(r2)
  gPB[UDP_DST_PORT_L_P] = 0x9; // wol = normally 9
 80072e4:	008200b4 	movhi	r2,2050
 80072e8:	10b99704 	addi	r2,r2,-6564
 80072ec:	00c00244 	movi	r3,9
 80072f0:	10c00945 	stb	r3,37(r2)
  gPB[UDP_SRC_PORT_H_P] = 10;
 80072f4:	008200b4 	movhi	r2,2050
 80072f8:	10b99704 	addi	r2,r2,-6564
 80072fc:	00c00284 	movi	r3,10
 8007300:	10c00885 	stb	r3,34(r2)
  gPB[UDP_SRC_PORT_L_P] = 0x42; // source port does not matter
 8007304:	008200b4 	movhi	r2,2050
 8007308:	10b99704 	addi	r2,r2,-6564
 800730c:	00c01084 	movi	r3,66
 8007310:	10c008c5 	stb	r3,35(r2)
  gPB[UDP_LEN_H_P] = 0;
 8007314:	008200b4 	movhi	r2,2050
 8007318:	10b99704 	addi	r2,r2,-6564
 800731c:	10000985 	stb	zero,38(r2)
  gPB[UDP_LEN_L_P] = 110; // fixed len
 8007320:	008200b4 	movhi	r2,2050
 8007324:	10b99704 	addi	r2,r2,-6564
 8007328:	00c01b84 	movi	r3,110
 800732c:	10c009c5 	stb	r3,39(r2)
  gPB[UDP_CHECKSUM_H_P] = 0;
 8007330:	008200b4 	movhi	r2,2050
 8007334:	10b99704 	addi	r2,r2,-6564
 8007338:	10000a05 	stb	zero,40(r2)
  gPB[UDP_CHECKSUM_L_P] = 0;
 800733c:	008200b4 	movhi	r2,2050
 8007340:	10b99704 	addi	r2,r2,-6564
 8007344:	10000a45 	stb	zero,41(r2)
  copyMac(gPB + UDP_DATA_P, allOnes);
 8007348:	008200b4 	movhi	r2,2050
 800734c:	10b9a184 	addi	r2,r2,-6522
 8007350:	d16008c4 	addi	r5,gp,-32733
 8007354:	1009883a 	mov	r4,r2
 8007358:	8008d700 	call	8008d70 <_ZN9EtherCard7copyMacEPhPKh>
  uint8_t pos = UDP_DATA_P;
 800735c:	00800a84 	movi	r2,42
 8007360:	e0bffe05 	stb	r2,-8(fp)
  for (uint8_t m = 0; m < 16; ++m) {
 8007364:	e03ffe45 	stb	zero,-7(fp)
 8007368:	e0bffe43 	ldbu	r2,-7(fp)
 800736c:	10800428 	cmpgeui	r2,r2,16
 8007370:	10000e1e 	bne	r2,zero,80073ac <_ZN9EtherCard7sendWolEPh+0x150>
    pos += 6;
 8007374:	e0bffe03 	ldbu	r2,-8(fp)
 8007378:	10800184 	addi	r2,r2,6
 800737c:	e0bffe05 	stb	r2,-8(fp)
    copyMac(gPB + pos, wolmac);
 8007380:	e0fffe03 	ldbu	r3,-8(fp)
 8007384:	008200b4 	movhi	r2,2050
 8007388:	10b99704 	addi	r2,r2,-6564
 800738c:	1885883a 	add	r2,r3,r2
 8007390:	e17fff17 	ldw	r5,-4(fp)
 8007394:	1009883a 	mov	r4,r2
 8007398:	8008d700 	call	8008d70 <_ZN9EtherCard7copyMacEPhPKh>
  gPB[UDP_LEN_L_P] = 110; // fixed len
  gPB[UDP_CHECKSUM_H_P] = 0;
  gPB[UDP_CHECKSUM_L_P] = 0;
  copyMac(gPB + UDP_DATA_P, allOnes);
  uint8_t pos = UDP_DATA_P;
  for (uint8_t m = 0; m < 16; ++m) {
 800739c:	e0bffe43 	ldbu	r2,-7(fp)
 80073a0:	10800044 	addi	r2,r2,1
 80073a4:	e0bffe45 	stb	r2,-7(fp)
 80073a8:	003fef06 	br	8007368 <_ZN9EtherCard7sendWolEPh+0x10c>
    pos += 6;
    copyMac(gPB + pos, wolmac);
  }
  fill_checksum(UDP_CHECKSUM_H_P, IP_SRC_P, 16 + 102, 1);
 80073ac:	01c00044 	movi	r7,1
 80073b0:	01801d84 	movi	r6,118
 80073b4:	01400684 	movi	r5,26
 80073b8:	01000a04 	movi	r4,40
 80073bc:	8005b580 	call	8005b58 <_ZL13fill_checksumhhth>
  packetSend(pos + 6);
 80073c0:	e0bffe03 	ldbu	r2,-8(fp)
 80073c4:	10800184 	addi	r2,r2,6
 80073c8:	10bfffcc 	andi	r2,r2,65535
 80073cc:	1009883a 	mov	r4,r2
 80073d0:	80044bc0 	call	80044bc <_ZN8ENC28J6010packetSendEt>
}
 80073d4:	0001883a 	nop
 80073d8:	e037883a 	mov	sp,fp
 80073dc:	dfc00117 	ldw	ra,4(sp)
 80073e0:	df000017 	ldw	fp,0(sp)
 80073e4:	dec00204 	addi	sp,sp,8
 80073e8:	f800283a 	ret

080073ec <_ZL17client_arp_whohasPh>:

// make a arp request
static void client_arp_whohas(uint8_t *ip_we_search) {
 80073ec:	defffd04 	addi	sp,sp,-12
 80073f0:	dfc00215 	stw	ra,8(sp)
 80073f4:	df000115 	stw	fp,4(sp)
 80073f8:	df000104 	addi	fp,sp,4
 80073fc:	e13fff15 	stw	r4,-4(fp)
  printf("In client arp whohas\n");
 8007400:	010200b4 	movhi	r4,2050
 8007404:	2129c404 	addi	r4,r4,-22768
 8007408:	800aec40 	call	800aec4 <puts>
  setMACs(allOnes);
 800740c:	d12008c4 	addi	r4,gp,-32733
 8007410:	8005cdc0 	call	8005cdc <_ZL7setMACsPKh>
  gPB[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
 8007414:	008200b4 	movhi	r2,2050
 8007418:	10b99704 	addi	r2,r2,-6564
 800741c:	00c00204 	movi	r3,8
 8007420:	10c00305 	stb	r3,12(r2)
  gPB[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
 8007424:	008200b4 	movhi	r2,2050
 8007428:	10b99704 	addi	r2,r2,-6564
 800742c:	00c00184 	movi	r3,6
 8007430:	10c00345 	stb	r3,13(r2)
  memcpy_P(gPB + ETH_ARP_P, arpreqhdr, sizeof arpreqhdr);
 8007434:	008200b4 	movhi	r2,2050
 8007438:	10b99a84 	addi	r2,r2,-6550
 800743c:	01800204 	movi	r6,8
 8007440:	d1600a44 	addi	r5,gp,-32727
 8007444:	1009883a 	mov	r4,r2
 8007448:	8005b180 	call	8005b18 <_Z8memcpy_PPvPKvj>
  memset(gPB + ETH_ARP_DST_MAC_P, 0, ETH_LEN);
 800744c:	008200b4 	movhi	r2,2050
 8007450:	10b99f04 	addi	r2,r2,-6532
 8007454:	01800184 	movi	r6,6
 8007458:	000b883a 	mov	r5,zero
 800745c:	1009883a 	mov	r4,r2
 8007460:	800ac500 	call	800ac50 <memset>
  EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
 8007464:	008200b4 	movhi	r2,2050
 8007468:	10b99c84 	addi	r2,r2,-6542
 800746c:	d1670cc4 	addi	r5,gp,-25549
 8007470:	1009883a 	mov	r4,r2
 8007474:	8008d700 	call	8008d70 <_ZN9EtherCard7copyMacEPhPKh>
  EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, ip_we_search);
 8007478:	008200b4 	movhi	r2,2050
 800747c:	10b9a084 	addi	r2,r2,-6526
 8007480:	e17fff17 	ldw	r5,-4(fp)
 8007484:	1009883a 	mov	r4,r2
 8007488:	8008db00 	call	8008db0 <_ZN9EtherCard6copyIpEPhPKh>
  EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
 800748c:	008200b4 	movhi	r2,2050
 8007490:	10b99e04 	addi	r2,r2,-6536
 8007494:	d1670e44 	addi	r5,gp,-25543
 8007498:	1009883a 	mov	r4,r2
 800749c:	8008db00 	call	8008db0 <_ZN9EtherCard6copyIpEPhPKh>
  EtherCard::packetSend(42);
 80074a0:	01000a84 	movi	r4,42
 80074a4:	80044bc0 	call	80044bc <_ZN8ENC28J6010packetSendEt>
}
 80074a8:	0001883a 	nop
 80074ac:	e037883a 	mov	sp,fp
 80074b0:	dfc00117 	ldw	ra,4(sp)
 80074b4:	df000017 	ldw	fp,0(sp)
 80074b8:	dec00204 	addi	sp,sp,8
 80074bc:	f800283a 	ret

080074c0 <_ZN9EtherCard15clientWaitingGwEv>:

uint8_t EtherCard::clientWaitingGw() { return !(waitgwmac & WGW_HAVE_GW_MAC); }
 80074c0:	deffff04 	addi	sp,sp,-4
 80074c4:	df000015 	stw	fp,0(sp)
 80074c8:	d839883a 	mov	fp,sp
 80074cc:	d0a73403 	ldbu	r2,-25392(gp)
 80074d0:	10803fcc 	andi	r2,r2,255
 80074d4:	1080008c 	andi	r2,r2,2
 80074d8:	1005003a 	cmpeq	r2,r2,zero
 80074dc:	e037883a 	mov	sp,fp
 80074e0:	df000017 	ldw	fp,0(sp)
 80074e4:	dec00104 	addi	sp,sp,4
 80074e8:	f800283a 	ret

080074ec <_ZN9EtherCard16clientWaitingDnsEv>:

uint8_t EtherCard::clientWaitingDns() {
 80074ec:	defffe04 	addi	sp,sp,-8
 80074f0:	dfc00115 	stw	ra,4(sp)
 80074f4:	df000015 	stw	fp,0(sp)
 80074f8:	d839883a 	mov	fp,sp
  if (is_lan(myip, dnsip))
 80074fc:	d1671344 	addi	r5,gp,-25523
 8007500:	d1270e44 	addi	r4,gp,-25543
 8007504:	8005dd00 	call	8005dd0 <_ZL6is_lanPKhS0_>
 8007508:	10803fcc 	andi	r2,r2,255
 800750c:	10000326 	beq	r2,zero,800751c <_ZN9EtherCard16clientWaitingDnsEv+0x30>
    return !has_dns_mac;
 8007510:	d0a731c3 	ldbu	r2,-25401(gp)
 8007514:	1080005c 	xori	r2,r2,1
 8007518:	00000406 	br	800752c <_ZN9EtherCard16clientWaitingDnsEv+0x40>
  return !(waitgwmac & WGW_HAVE_GW_MAC);
 800751c:	d0a73403 	ldbu	r2,-25392(gp)
 8007520:	10803fcc 	andi	r2,r2,255
 8007524:	1080008c 	andi	r2,r2,2
 8007528:	1005003a 	cmpeq	r2,r2,zero
}
 800752c:	e037883a 	mov	sp,fp
 8007530:	dfc00117 	ldw	ra,4(sp)
 8007534:	df000017 	ldw	fp,0(sp)
 8007538:	dec00204 	addi	sp,sp,8
 800753c:	f800283a 	ret

08007540 <_ZL16client_store_macPhS_>:

static uint8_t client_store_mac(uint8_t *source_ip, uint8_t *mac) {
 8007540:	defffc04 	addi	sp,sp,-16
 8007544:	dfc00315 	stw	ra,12(sp)
 8007548:	df000215 	stw	fp,8(sp)
 800754c:	df000204 	addi	fp,sp,8
 8007550:	e13ffe15 	stw	r4,-8(fp)
 8007554:	e17fff15 	stw	r5,-4(fp)
  if (memcmp(gPB + ETH_ARP_SRC_IP_P, source_ip, IP_LEN) != 0)
 8007558:	008200b4 	movhi	r2,2050
 800755c:	10b99e04 	addi	r2,r2,-6536
 8007560:	01800104 	movi	r6,4
 8007564:	e17ffe17 	ldw	r5,-8(fp)
 8007568:	1009883a 	mov	r4,r2
 800756c:	800aa8c0 	call	800aa8c <memcmp>
 8007570:	10000226 	beq	r2,zero,800757c <_ZL16client_store_macPhS_+0x3c>
    return 0;
 8007574:	0005883a 	mov	r2,zero
 8007578:	00000606 	br	8007594 <_ZL16client_store_macPhS_+0x54>
  EtherCard::copyMac(mac, gPB + ETH_ARP_SRC_MAC_P);
 800757c:	008200b4 	movhi	r2,2050
 8007580:	10b99c84 	addi	r2,r2,-6542
 8007584:	100b883a 	mov	r5,r2
 8007588:	e13fff17 	ldw	r4,-4(fp)
 800758c:	8008d700 	call	8008d70 <_ZN9EtherCard7copyMacEPhPKh>
  return 1;
 8007590:	00800044 	movi	r2,1
}
 8007594:	e037883a 	mov	sp,fp
 8007598:	dfc00117 	ldw	ra,4(sp)
 800759c:	df000017 	ldw	fp,0(sp)
 80075a0:	dec00204 	addi	sp,sp,8
 80075a4:	f800283a 	ret

080075a8 <_ZL21client_gw_arp_refreshv>:

 static void client_gw_arp_refresh() {
 80075a8:	deffff04 	addi	sp,sp,-4
 80075ac:	df000015 	stw	fp,0(sp)
 80075b0:	d839883a 	mov	fp,sp
   if (waitgwmac & WGW_HAVE_GW_MAC)
 80075b4:	d0a73403 	ldbu	r2,-25392(gp)
 80075b8:	10803fcc 	andi	r2,r2,255
 80075bc:	1080008c 	andi	r2,r2,2
 80075c0:	10000326 	beq	r2,zero,80075d0 <_ZL21client_gw_arp_refreshv+0x28>
     waitgwmac |= WGW_REFRESHING;
 80075c4:	d0a73403 	ldbu	r2,-25392(gp)
 80075c8:	10800114 	ori	r2,r2,4
 80075cc:	d0a73405 	stb	r2,-25392(gp)
 }
 80075d0:	0001883a 	nop
 80075d4:	e037883a 	mov	sp,fp
 80075d8:	df000017 	ldw	fp,0(sp)
 80075dc:	dec00104 	addi	sp,sp,4
 80075e0:	f800283a 	ret

080075e4 <_ZN9EtherCard7setGwIpEPKh>:

void EtherCard::setGwIp(const uint8_t *gwipaddr) {
 80075e4:	defffd04 	addi	sp,sp,-12
 80075e8:	dfc00215 	stw	ra,8(sp)
 80075ec:	df000115 	stw	fp,4(sp)
 80075f0:	df000104 	addi	fp,sp,4
 80075f4:	e13fff15 	stw	r4,-4(fp)
  delaycnt = 0;                // request gateway ARP lookup
 80075f8:	d027160d 	sth	zero,-25512(gp)
  waitgwmac = WGW_INITIAL_ARP; // causes an arp request in the packet loop
 80075fc:	00800044 	movi	r2,1
 8007600:	d0a73405 	stb	r2,-25392(gp)
  copyIp(gwip, gwipaddr);
 8007604:	e17fff17 	ldw	r5,-4(fp)
 8007608:	d1271144 	addi	r4,gp,-25531
 800760c:	8008db00 	call	8008db0 <_ZN9EtherCard6copyIpEPhPKh>
}
 8007610:	0001883a 	nop
 8007614:	e037883a 	mov	sp,fp
 8007618:	dfc00117 	ldw	ra,4(sp)
 800761c:	df000017 	ldw	fp,0(sp)
 8007620:	dec00204 	addi	sp,sp,8
 8007624:	f800283a 	ret

08007628 <_ZN9EtherCard22updateBroadcastAddressEv>:

void EtherCard::updateBroadcastAddress() {
 8007628:	defffe04 	addi	sp,sp,-8
 800762c:	df000115 	stw	fp,4(sp)
 8007630:	df000104 	addi	fp,sp,4
  for (uint8_t i = 0; i < IP_LEN; i++)
 8007634:	e03fff05 	stb	zero,-4(fp)
 8007638:	e0bfff03 	ldbu	r2,-4(fp)
 800763c:	10800128 	cmpgeui	r2,r2,4
 8007640:	1000141e 	bne	r2,zero,8007694 <_ZN9EtherCard22updateBroadcastAddressEv+0x6c>
    broadcastip[i] = myip[i] | ~netmask[i];
 8007644:	e0ffff03 	ldbu	r3,-4(fp)
 8007648:	e13fff03 	ldbu	r4,-4(fp)
 800764c:	d0a70e44 	addi	r2,gp,-25543
 8007650:	2085883a 	add	r2,r4,r2
 8007654:	10800003 	ldbu	r2,0(r2)
 8007658:	100b883a 	mov	r5,r2
 800765c:	e13fff03 	ldbu	r4,-4(fp)
 8007660:	d0a70f44 	addi	r2,gp,-25539
 8007664:	2085883a 	add	r2,r4,r2
 8007668:	10800003 	ldbu	r2,0(r2)
 800766c:	0084303a 	nor	r2,zero,r2
 8007670:	2884b03a 	or	r2,r5,r2
 8007674:	1009883a 	mov	r4,r2
 8007678:	d0a71044 	addi	r2,gp,-25535
 800767c:	1885883a 	add	r2,r3,r2
 8007680:	11000005 	stb	r4,0(r2)
  waitgwmac = WGW_INITIAL_ARP; // causes an arp request in the packet loop
  copyIp(gwip, gwipaddr);
}

void EtherCard::updateBroadcastAddress() {
  for (uint8_t i = 0; i < IP_LEN; i++)
 8007684:	e0bfff03 	ldbu	r2,-4(fp)
 8007688:	10800044 	addi	r2,r2,1
 800768c:	e0bfff05 	stb	r2,-4(fp)
 8007690:	003fe906 	br	8007638 <_ZN9EtherCard22updateBroadcastAddressEv+0x10>
    broadcastip[i] = myip[i] | ~netmask[i];
}
 8007694:	0001883a 	nop
 8007698:	e037883a 	mov	sp,fp
 800769c:	df000017 	ldw	fp,0(sp)
 80076a0:	dec00104 	addi	sp,sp,4
 80076a4:	f800283a 	ret

080076a8 <_ZL10client_synhhh>:

static void client_syn(uint8_t srcport, uint8_t dstport_h, uint8_t dstport_l) {
 80076a8:	defffb04 	addi	sp,sp,-20
 80076ac:	dfc00415 	stw	ra,16(sp)
 80076b0:	df000315 	stw	fp,12(sp)
 80076b4:	df000304 	addi	fp,sp,12
 80076b8:	2807883a 	mov	r3,r5
 80076bc:	3005883a 	mov	r2,r6
 80076c0:	e13ffd05 	stb	r4,-12(fp)
 80076c4:	e0fffe05 	stb	r3,-8(fp)
 80076c8:	e0bfff05 	stb	r2,-4(fp)
  if (is_lan(EtherCard::myip, EtherCard::hisip)) {
 80076cc:	d1671444 	addi	r5,gp,-25519
 80076d0:	d1270e44 	addi	r4,gp,-25543
 80076d4:	8005dd00 	call	8005dd0 <_ZL6is_lanPKhS0_>
 80076d8:	10803fcc 	andi	r2,r2,255
 80076dc:	10000426 	beq	r2,zero,80076f0 <_ZL10client_synhhh+0x48>
    setMACandIPs(destmacaddr, EtherCard::hisip);
 80076e0:	d1671444 	addi	r5,gp,-25519
 80076e4:	d1273004 	addi	r4,gp,-25408
 80076e8:	8005d2c0 	call	8005d2c <_ZL12setMACandIPsPKhS0_>
 80076ec:	00000306 	br	80076fc <_ZL10client_synhhh+0x54>
  } else {
    setMACandIPs(gwmacaddr, EtherCard::hisip);
 80076f0:	d1671444 	addi	r5,gp,-25519
 80076f4:	d1273284 	addi	r4,gp,-25398
 80076f8:	8005d2c0 	call	8005d2c <_ZL12setMACandIPsPKhS0_>
  }
  gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 80076fc:	008200b4 	movhi	r2,2050
 8007700:	10b99704 	addi	r2,r2,-6564
 8007704:	00c00204 	movi	r3,8
 8007708:	10c00305 	stb	r3,12(r2)
  gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 800770c:	008200b4 	movhi	r2,2050
 8007710:	10b99704 	addi	r2,r2,-6564
 8007714:	10000345 	stb	zero,13(r2)
  memcpy_P(gPB + IP_P, iphdr, sizeof iphdr);
 8007718:	008200b4 	movhi	r2,2050
 800771c:	10b99a84 	addi	r2,r2,-6550
 8007720:	01800244 	movi	r6,9
 8007724:	014200b4 	movhi	r5,2050
 8007728:	2969b704 	addi	r5,r5,-22820
 800772c:	1009883a 	mov	r4,r2
 8007730:	8005b180 	call	8005b18 <_Z8memcpy_PPvPKvj>
  gPB[IP_TOTLEN_L_P] = 44; // good for syn
 8007734:	008200b4 	movhi	r2,2050
 8007738:	10b99704 	addi	r2,r2,-6564
 800773c:	00c00b04 	movi	r3,44
 8007740:	10c00445 	stb	r3,17(r2)
  gPB[IP_PROTO_P] = IP_PROTO_TCP_V;
 8007744:	008200b4 	movhi	r2,2050
 8007748:	10b99704 	addi	r2,r2,-6564
 800774c:	00c00184 	movi	r3,6
 8007750:	10c005c5 	stb	r3,23(r2)
  fill_ip_hdr_checksum();
 8007754:	8005ff80 	call	8005ff8 <_ZL20fill_ip_hdr_checksumv>
  gPB[TCP_DST_PORT_H_P] = dstport_h;
 8007758:	008200b4 	movhi	r2,2050
 800775c:	10b99704 	addi	r2,r2,-6564
 8007760:	e0fffe03 	ldbu	r3,-8(fp)
 8007764:	10c00905 	stb	r3,36(r2)
  gPB[TCP_DST_PORT_L_P] = dstport_l;
 8007768:	008200b4 	movhi	r2,2050
 800776c:	10b99704 	addi	r2,r2,-6564
 8007770:	e0ffff03 	ldbu	r3,-4(fp)
 8007774:	10c00945 	stb	r3,37(r2)
  gPB[TCP_SRC_PORT_H_P] = TCPCLIENT_SRC_PORT_H;
 8007778:	008200b4 	movhi	r2,2050
 800777c:	10b99704 	addi	r2,r2,-6564
 8007780:	00c002c4 	movi	r3,11
 8007784:	10c00885 	stb	r3,34(r2)
  gPB[TCP_SRC_PORT_L_P] = srcport; // lower 8 bit of src port
 8007788:	008200b4 	movhi	r2,2050
 800778c:	10b99704 	addi	r2,r2,-6564
 8007790:	e0fffd03 	ldbu	r3,-12(fp)
 8007794:	10c008c5 	stb	r3,35(r2)
  memset(gPB + TCP_SEQ_H_P, 0, 8);
 8007798:	008200b4 	movhi	r2,2050
 800779c:	10b9a084 	addi	r2,r2,-6526
 80077a0:	01800204 	movi	r6,8
 80077a4:	000b883a 	mov	r5,zero
 80077a8:	1009883a 	mov	r4,r2
 80077ac:	800ac500 	call	800ac50 <memset>
  gPB[TCP_SEQ_H_P + 2] = seqnum;
 80077b0:	d0e00843 	ldbu	r3,-32735(gp)
 80077b4:	008200b4 	movhi	r2,2050
 80077b8:	10b99704 	addi	r2,r2,-6564
 80077bc:	10c00a05 	stb	r3,40(r2)
  seqnum += 3;
 80077c0:	d0a00843 	ldbu	r2,-32735(gp)
 80077c4:	108000c4 	addi	r2,r2,3
 80077c8:	d0a00845 	stb	r2,-32735(gp)
  gPB[TCP_HEADER_LEN_P] = 0x60; // 0x60=24 len: (0x60>>4) * 4
 80077cc:	008200b4 	movhi	r2,2050
 80077d0:	10b99704 	addi	r2,r2,-6564
 80077d4:	00c01804 	movi	r3,96
 80077d8:	10c00b85 	stb	r3,46(r2)
  gPB[TCP_FLAGS_P] = TCP_FLAGS_SYN_V;
 80077dc:	008200b4 	movhi	r2,2050
 80077e0:	10b99704 	addi	r2,r2,-6564
 80077e4:	00c00084 	movi	r3,2
 80077e8:	10c00bc5 	stb	r3,47(r2)
  gPB[TCP_WIN_SIZE] = 0x3; // 1024 = 0x400 768 = 0x300, initial window
 80077ec:	008200b4 	movhi	r2,2050
 80077f0:	10b99704 	addi	r2,r2,-6564
 80077f4:	00c000c4 	movi	r3,3
 80077f8:	10c00c05 	stb	r3,48(r2)
  gPB[TCP_WIN_SIZE + 1] = 0x0;
 80077fc:	008200b4 	movhi	r2,2050
 8007800:	10b99704 	addi	r2,r2,-6564
 8007804:	10000c45 	stb	zero,49(r2)
  gPB[TCP_CHECKSUM_H_P] = 0;
 8007808:	008200b4 	movhi	r2,2050
 800780c:	10b99704 	addi	r2,r2,-6564
 8007810:	10000c85 	stb	zero,50(r2)
  gPB[TCP_CHECKSUM_L_P] = 0;
 8007814:	008200b4 	movhi	r2,2050
 8007818:	10b99704 	addi	r2,r2,-6564
 800781c:	10000cc5 	stb	zero,51(r2)
  gPB[TCP_CHECKSUM_L_P + 1] = 0;
 8007820:	008200b4 	movhi	r2,2050
 8007824:	10b99704 	addi	r2,r2,-6564
 8007828:	10000d05 	stb	zero,52(r2)
  gPB[TCP_CHECKSUM_L_P + 2] = 0;
 800782c:	008200b4 	movhi	r2,2050
 8007830:	10b99704 	addi	r2,r2,-6564
 8007834:	10000d45 	stb	zero,53(r2)
  gPB[TCP_OPTIONS_P] = 2;
 8007838:	008200b4 	movhi	r2,2050
 800783c:	10b99704 	addi	r2,r2,-6564
 8007840:	00c00084 	movi	r3,2
 8007844:	10c00d85 	stb	r3,54(r2)
  gPB[TCP_OPTIONS_P + 1] = 4;
 8007848:	008200b4 	movhi	r2,2050
 800784c:	10b99704 	addi	r2,r2,-6564
 8007850:	00c00104 	movi	r3,4
 8007854:	10c00dc5 	stb	r3,55(r2)
  gPB[TCP_OPTIONS_P + 2] = (CLIENTMSS >> 8);
 8007858:	008200b4 	movhi	r2,2050
 800785c:	10b99704 	addi	r2,r2,-6564
 8007860:	00c00084 	movi	r3,2
 8007864:	10c00e05 	stb	r3,56(r2)
  gPB[TCP_OPTIONS_P + 3] = (uint8_t)CLIENTMSS;
 8007868:	008200b4 	movhi	r2,2050
 800786c:	10b99704 	addi	r2,r2,-6564
 8007870:	00c00984 	movi	r3,38
 8007874:	10c00e45 	stb	r3,57(r2)
  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8 + TCP_HEADER_LEN_PLAIN + 4, 2);
 8007878:	01c00084 	movi	r7,2
 800787c:	01800804 	movi	r6,32
 8007880:	01400684 	movi	r5,26
 8007884:	01000c84 	movi	r4,50
 8007888:	8005b580 	call	8005b58 <_ZL13fill_checksumhhth>
  // 4 is the tcp mss option:
  EtherCard::packetSend(IP_HEADER_LEN + TCP_HEADER_LEN_PLAIN + ETH_HEADER_LEN +
                        4);
 800788c:	01000e84 	movi	r4,58
 8007890:	80044bc0 	call	80044bc <_ZN8ENC28J6010packetSendEt>
}
 8007894:	0001883a 	nop
 8007898:	e037883a 	mov	sp,fp
 800789c:	dfc00117 	ldw	ra,4(sp)
 80078a0:	df000017 	ldw	fp,0(sp)
 80078a4:	dec00204 	addi	sp,sp,8
 80078a8:	f800283a 	ret

080078ac <_ZN9EtherCard12clientTcpReqEPFhhhttEPFthEt>:

uint8_t EtherCard::clientTcpReq(uint8_t (*result_cb)(uint8_t, uint8_t, uint16_t,
                                                     uint16_t),
                                uint16_t (*datafill_cb)(uint8_t),
                                uint16_t port) {
 80078ac:	defffc04 	addi	sp,sp,-16
 80078b0:	df000315 	stw	fp,12(sp)
 80078b4:	df000304 	addi	fp,sp,12
 80078b8:	e13ffd15 	stw	r4,-12(fp)
 80078bc:	e17ffe15 	stw	r5,-8(fp)
 80078c0:	3005883a 	mov	r2,r6
 80078c4:	e0bfff0d 	sth	r2,-4(fp)
  client_tcp_result_cb = result_cb;
 80078c8:	e0bffd17 	ldw	r2,-12(fp)
 80078cc:	d0a72615 	stw	r2,-25448(gp)
  client_tcp_datafill_cb = datafill_cb;
 80078d0:	e0bffe17 	ldw	r2,-8(fp)
 80078d4:	d0a72715 	stw	r2,-25444(gp)
  tcp_client_port_h = port >> 8;
 80078d8:	e0bfff0b 	ldhu	r2,-4(fp)
 80078dc:	1005d23a 	srai	r2,r2,8
 80078e0:	d0a72585 	stb	r2,-25450(gp)
  tcp_client_port_l = port;
 80078e4:	e0bfff0b 	ldhu	r2,-4(fp)
 80078e8:	d0a725c5 	stb	r2,-25449(gp)
  tcp_client_state = TCP_STATE_SENDSYN; // Flag to packetloop to initiate a
 80078ec:	00800044 	movi	r2,1
 80078f0:	d0a72545 	stb	r2,-25451(gp)
                                        // TCP/IP session by send a syn
  tcp_fd = (tcp_fd + 1) & 7;
 80078f4:	d0a72503 	ldbu	r2,-25452(gp)
 80078f8:	10800044 	addi	r2,r2,1
 80078fc:	108001cc 	andi	r2,r2,7
 8007900:	d0a72505 	stb	r2,-25452(gp)
  return tcp_fd;
 8007904:	d0a72503 	ldbu	r2,-25452(gp)
}
 8007908:	e037883a 	mov	sp,fp
 800790c:	df000017 	ldw	fp,0(sp)
 8007910:	dec00104 	addi	sp,sp,4
 8007914:	f800283a 	ret

08007918 <_ZL31www_client_internal_datafill_cbh>:

static uint16_t www_client_internal_datafill_cb(uint8_t fd) {
 8007918:	defff104 	addi	sp,sp,-60
 800791c:	dfc00e15 	stw	ra,56(sp)
 8007920:	df000d15 	stw	fp,52(sp)
 8007924:	dd000c15 	stw	r20,48(sp)
 8007928:	dcc00b15 	stw	r19,44(sp)
 800792c:	dc800a15 	stw	r18,40(sp)
 8007930:	dc400915 	stw	r17,36(sp)
 8007934:	dc000815 	stw	r16,32(sp)
 8007938:	df000d04 	addi	fp,sp,52
 800793c:	2005883a 	mov	r2,r4
 8007940:	e0bffa05 	stb	r2,-24(fp)
       BufferFiller bfill = EtherCard::tcpOffset();
 8007944:	80087d40 	call	80087d4 <_ZN8ENC28J609tcpOffsetEv>
 8007948:	1007883a 	mov	r3,r2
 800794c:	e0bff804 	addi	r2,fp,-32
 8007950:	180b883a 	mov	r5,r3
 8007954:	1009883a 	mov	r4,r2
 8007958:	80087f80 	call	80087f8 <_ZN12BufferFillerC1EPh>
       if (fd==www_fd) {
 800795c:	d0a72803 	ldbu	r2,-25440(gp)
 8007960:	e0fffa03 	ldbu	r3,-24(fp)
 8007964:	10803fcc 	andi	r2,r2,255
 8007968:	18803b1e 	bne	r3,r2,8007a58 <_ZL31www_client_internal_datafill_cbh+0x140>
           if (client_postval == 0) {
 800796c:	d0a72b17 	ldw	r2,-25428(gp)
 8007970:	1000101e 	bne	r2,zero,80079b4 <_ZL31www_client_internal_datafill_cbh+0x9c>
               bfill.emit_p(PSTR("GET $F$S HTTP/1.0\r\n"
 8007974:	010200b4 	movhi	r4,2050
 8007978:	2129ca04 	addi	r4,r4,-22744
 800797c:	8005af40 	call	8005af4 <_Z4PSTRPc>
 8007980:	1011883a 	mov	r8,r2
 8007984:	d1672c17 	ldw	r5,-25424(gp)
                                 "Host: $F\r\n"
                                 "$F\r\n"
                                 "\r\n"), (char*)client_urlbuf,
                            client_urlbuf_var,
                            client_hoststr, client_additionalheaderline);
 8007988:	d1a72d17 	ldw	r6,-25420(gp)
 800798c:	d0a72e17 	ldw	r2,-25416(gp)
 8007990:	d0e72a17 	ldw	r3,-25432(gp)
 8007994:	e13ff804 	addi	r4,fp,-32
 8007998:	d8c00115 	stw	r3,4(sp)
 800799c:	d8800015 	stw	r2,0(sp)
 80079a0:	300f883a 	mov	r7,r6
 80079a4:	280d883a 	mov	r6,r5
 80079a8:	400b883a 	mov	r5,r8
 80079ac:	80024980 	call	8002498 <_ZN12BufferFiller6emit_pEPKcz>
 80079b0:	00002906 	br	8007a58 <_ZL31www_client_internal_datafill_cbh+0x140>
           } else {
        	   printf("posting...\n");
 80079b4:	010200b4 	movhi	r4,2050
 80079b8:	2129d304 	addi	r4,r4,-22708
 80079bc:	800aec40 	call	800aec4 <puts>
               const char* ahl = client_additionalheaderline;
 80079c0:	d0a72a17 	ldw	r2,-25432(gp)
 80079c4:	e0bff715 	stw	r2,-36(fp)
               bfill.emit_p(PSTR("POST $F HTTP/1.0\r\n"
 80079c8:	010200b4 	movhi	r4,2050
 80079cc:	2129d604 	addi	r4,r4,-22696
 80079d0:	8005af40 	call	8005af4 <_Z4PSTRPc>
 80079d4:	1029883a 	mov	r20,r2
                                 "$S"), client_urlbuf,
                            client_hoststr,
                            ahl != 0 ? ahl : PSTR(""),
                            ahl != 0 ? "\r\n" : "",
                            strlen(client_postval),
                            client_postval);
 80079d8:	d4a72c17 	ldw	r18,-25424(gp)
 80079dc:	d4e72e17 	ldw	r19,-25416(gp)
                            client_urlbuf_var,
                            client_hoststr, client_additionalheaderline);
           } else {
        	   printf("posting...\n");
               const char* ahl = client_additionalheaderline;
               bfill.emit_p(PSTR("POST $F HTTP/1.0\r\n"
 80079e0:	e0bff717 	ldw	r2,-36(fp)
 80079e4:	1000051e 	bne	r2,zero,80079fc <_ZL31www_client_internal_datafill_cbh+0xe4>
 80079e8:	010200b4 	movhi	r4,2050
 80079ec:	2129f404 	addi	r4,r4,-22576
 80079f0:	8005af40 	call	8005af4 <_Z4PSTRPc>
 80079f4:	1023883a 	mov	r17,r2
 80079f8:	00000106 	br	8007a00 <_ZL31www_client_internal_datafill_cbh+0xe8>
 80079fc:	e47ff717 	ldw	r17,-36(fp)
 8007a00:	e0bff717 	ldw	r2,-36(fp)
 8007a04:	10000326 	beq	r2,zero,8007a14 <_ZL31www_client_internal_datafill_cbh+0xfc>
 8007a08:	040200b4 	movhi	r16,2050
 8007a0c:	8429f504 	addi	r16,r16,-22572
 8007a10:	00000206 	br	8007a1c <_ZL31www_client_internal_datafill_cbh+0x104>
 8007a14:	040200b4 	movhi	r16,2050
 8007a18:	8429f404 	addi	r16,r16,-22576
 8007a1c:	d0a72b17 	ldw	r2,-25428(gp)
 8007a20:	1009883a 	mov	r4,r2
 8007a24:	800b0980 	call	800b098 <strlen>
 8007a28:	1009883a 	mov	r4,r2
                                 "$S"), client_urlbuf,
                            client_hoststr,
                            ahl != 0 ? ahl : PSTR(""),
                            ahl != 0 ? "\r\n" : "",
                            strlen(client_postval),
                            client_postval);
 8007a2c:	d0a72b17 	ldw	r2,-25428(gp)
 8007a30:	e0fff804 	addi	r3,fp,-32
 8007a34:	d8800315 	stw	r2,12(sp)
 8007a38:	d9000215 	stw	r4,8(sp)
 8007a3c:	dc000115 	stw	r16,4(sp)
 8007a40:	dc400015 	stw	r17,0(sp)
 8007a44:	980f883a 	mov	r7,r19
 8007a48:	900d883a 	mov	r6,r18
 8007a4c:	a00b883a 	mov	r5,r20
 8007a50:	1809883a 	mov	r4,r3
 8007a54:	80024980 	call	8002498 <_ZN12BufferFiller6emit_pEPKcz>
           }
       }
       return bfill.position();
 8007a58:	e0bff804 	addi	r2,fp,-32
 8007a5c:	1009883a 	mov	r4,r2
 8007a60:	80088380 	call	8008838 <_ZNK12BufferFiller8positionEv>
}
 8007a64:	e6fffb04 	addi	sp,fp,-20
 8007a68:	dfc00617 	ldw	ra,24(sp)
 8007a6c:	df000517 	ldw	fp,20(sp)
 8007a70:	dd000417 	ldw	r20,16(sp)
 8007a74:	dcc00317 	ldw	r19,12(sp)
 8007a78:	dc800217 	ldw	r18,8(sp)
 8007a7c:	dc400117 	ldw	r17,4(sp)
 8007a80:	dc000017 	ldw	r16,0(sp)
 8007a84:	dec00704 	addi	sp,sp,28
 8007a88:	f800283a 	ret

08007a8c <_ZL29www_client_internal_result_cbhhtt>:

static uint8_t www_client_internal_result_cb(uint8_t fd, uint8_t statuscode,
                                             uint16_t datapos,
                                             uint16_t len_of_data) {
 8007a8c:	defff904 	addi	sp,sp,-28
 8007a90:	dfc00615 	stw	ra,24(sp)
 8007a94:	df000515 	stw	fp,20(sp)
 8007a98:	df000504 	addi	fp,sp,20
 8007a9c:	2011883a 	mov	r8,r4
 8007aa0:	2809883a 	mov	r4,r5
 8007aa4:	3007883a 	mov	r3,r6
 8007aa8:	3805883a 	mov	r2,r7
 8007aac:	e23ffc05 	stb	r8,-16(fp)
 8007ab0:	e13ffd05 	stb	r4,-12(fp)
 8007ab4:	e0fffe0d 	sth	r3,-8(fp)
 8007ab8:	e0bfff0d 	sth	r2,-4(fp)
  if (fd != www_fd)
 8007abc:	d0a72803 	ldbu	r2,-25440(gp)
 8007ac0:	e0fffc03 	ldbu	r3,-16(fp)
 8007ac4:	10803fcc 	andi	r2,r2,255
 8007ac8:	18800626 	beq	r3,r2,8007ae4 <_ZL29www_client_internal_result_cbhhtt+0x58>
    (*client_browser_cb)(4, 0, 0);
 8007acc:	d0a72917 	ldw	r2,-25436(gp)
 8007ad0:	000d883a 	mov	r6,zero
 8007ad4:	000b883a 	mov	r5,zero
 8007ad8:	01000104 	movi	r4,4
 8007adc:	103ee83a 	callr	r2
 8007ae0:	00002206 	br	8007b6c <_ZL29www_client_internal_result_cbhhtt+0xe0>
  else if (statuscode == 0 && len_of_data > 12 && client_browser_cb) {
 8007ae4:	e0bffd03 	ldbu	r2,-12(fp)
 8007ae8:	1000201e 	bne	r2,zero,8007b6c <_ZL29www_client_internal_result_cbhhtt+0xe0>
 8007aec:	e0bfff0b 	ldhu	r2,-4(fp)
 8007af0:	10800370 	cmpltui	r2,r2,13
 8007af4:	10001d1e 	bne	r2,zero,8007b6c <_ZL29www_client_internal_result_cbhhtt+0xe0>
 8007af8:	d0a72917 	ldw	r2,-25436(gp)
 8007afc:	10001b26 	beq	r2,zero,8007b6c <_ZL29www_client_internal_result_cbhhtt+0xe0>
    uint8_t f = strncmp("200", (char *)&(gPB[datapos + 9]), 3) != 0;
 8007b00:	e0bffe0b 	ldhu	r2,-8(fp)
 8007b04:	10c00244 	addi	r3,r2,9
 8007b08:	008200b4 	movhi	r2,2050
 8007b0c:	10b99704 	addi	r2,r2,-6564
 8007b10:	1885883a 	add	r2,r3,r2
 8007b14:	018000c4 	movi	r6,3
 8007b18:	100b883a 	mov	r5,r2
 8007b1c:	010200b4 	movhi	r4,2050
 8007b20:	2129f604 	addi	r4,r4,-22568
 8007b24:	800b1300 	call	800b130 <strncmp>
 8007b28:	1004c03a 	cmpne	r2,r2,zero
 8007b2c:	e0bffb05 	stb	r2,-20(fp)
    (*client_browser_cb)(
        f, ((uint16_t)TCP_SRC_PORT_H_P + (gPB[TCP_HEADER_LEN_P] >> 4) * 4),
        len_of_data);
 8007b30:	d0e72917 	ldw	r3,-25436(gp)
                                             uint16_t len_of_data) {
  if (fd != www_fd)
    (*client_browser_cb)(4, 0, 0);
  else if (statuscode == 0 && len_of_data > 12 && client_browser_cb) {
    uint8_t f = strncmp("200", (char *)&(gPB[datapos + 9]), 3) != 0;
    (*client_browser_cb)(
 8007b34:	e13ffb03 	ldbu	r4,-20(fp)
        f, ((uint16_t)TCP_SRC_PORT_H_P + (gPB[TCP_HEADER_LEN_P] >> 4) * 4),
 8007b38:	008200b4 	movhi	r2,2050
 8007b3c:	10b99704 	addi	r2,r2,-6564
 8007b40:	10800b83 	ldbu	r2,46(r2)
 8007b44:	10803fcc 	andi	r2,r2,255
 8007b48:	1005d13a 	srai	r2,r2,4
                                             uint16_t len_of_data) {
  if (fd != www_fd)
    (*client_browser_cb)(4, 0, 0);
  else if (statuscode == 0 && len_of_data > 12 && client_browser_cb) {
    uint8_t f = strncmp("200", (char *)&(gPB[datapos + 9]), 3) != 0;
    (*client_browser_cb)(
 8007b4c:	1085883a 	add	r2,r2,r2
 8007b50:	1085883a 	add	r2,r2,r2
 8007b54:	10800884 	addi	r2,r2,34
 8007b58:	10bfffcc 	andi	r2,r2,65535
 8007b5c:	e17fff0b 	ldhu	r5,-4(fp)
        f, ((uint16_t)TCP_SRC_PORT_H_P + (gPB[TCP_HEADER_LEN_P] >> 4) * 4),
        len_of_data);
 8007b60:	280d883a 	mov	r6,r5
 8007b64:	100b883a 	mov	r5,r2
 8007b68:	183ee83a 	callr	r3
  }
  return 0;
 8007b6c:	0005883a 	mov	r2,zero
}
 8007b70:	e037883a 	mov	sp,fp
 8007b74:	dfc00117 	ldw	ra,4(sp)
 8007b78:	df000017 	ldw	fp,0(sp)
 8007b7c:	dec00204 	addi	sp,sp,8
 8007b80:	f800283a 	ret

08007b84 <_ZN9EtherCard9browseUrlEPKcS1_S1_PFvhttE>:

void EtherCard::browseUrl(const char *urlbuf, const char *urlbuf_varpart,
                          const char *hoststr,
                          void (*callback)(uint8_t, uint16_t, uint16_t)) {
 8007b84:	defff904 	addi	sp,sp,-28
 8007b88:	dfc00615 	stw	ra,24(sp)
 8007b8c:	df000515 	stw	fp,20(sp)
 8007b90:	df000504 	addi	fp,sp,20
 8007b94:	e13ffc15 	stw	r4,-16(fp)
 8007b98:	e17ffd15 	stw	r5,-12(fp)
 8007b9c:	e1bffe15 	stw	r6,-8(fp)
 8007ba0:	e1ffff15 	stw	r7,-4(fp)
  browseUrl(urlbuf, urlbuf_varpart, hoststr, PSTR("Accept: text/html"),
 8007ba4:	010200b4 	movhi	r4,2050
 8007ba8:	2129f704 	addi	r4,r4,-22564
 8007bac:	8005af40 	call	8005af4 <_Z4PSTRPc>
 8007bb0:	1007883a 	mov	r3,r2
            callback);
 8007bb4:	e0bfff17 	ldw	r2,-4(fp)
 8007bb8:	d8800015 	stw	r2,0(sp)
 8007bbc:	180f883a 	mov	r7,r3
 8007bc0:	e1bffe17 	ldw	r6,-8(fp)
 8007bc4:	e17ffd17 	ldw	r5,-12(fp)
 8007bc8:	e13ffc17 	ldw	r4,-16(fp)
 8007bcc:	8007be80 	call	8007be8 <_ZN9EtherCard9browseUrlEPKcS1_S1_S1_PFvhttE>
}
 8007bd0:	0001883a 	nop
 8007bd4:	e037883a 	mov	sp,fp
 8007bd8:	dfc00117 	ldw	ra,4(sp)
 8007bdc:	df000017 	ldw	fp,0(sp)
 8007be0:	dec00204 	addi	sp,sp,8
 8007be4:	f800283a 	ret

08007be8 <_ZN9EtherCard9browseUrlEPKcS1_S1_S1_PFvhttE>:

void EtherCard::browseUrl(const char *urlbuf, const char *urlbuf_varpart,
                          const char *hoststr, const char *additionalheaderline,
                          void (*callback)(uint8_t, uint16_t, uint16_t)) {
 8007be8:	defffa04 	addi	sp,sp,-24
 8007bec:	dfc00515 	stw	ra,20(sp)
 8007bf0:	df000415 	stw	fp,16(sp)
 8007bf4:	df000404 	addi	fp,sp,16
 8007bf8:	e13ffc15 	stw	r4,-16(fp)
 8007bfc:	e17ffd15 	stw	r5,-12(fp)
 8007c00:	e1bffe15 	stw	r6,-8(fp)
 8007c04:	e1ffff15 	stw	r7,-4(fp)
  client_urlbuf = urlbuf;
 8007c08:	e0bffc17 	ldw	r2,-16(fp)
 8007c0c:	d0a72c15 	stw	r2,-25424(gp)
  client_urlbuf_var = urlbuf_varpart;
 8007c10:	e0bffd17 	ldw	r2,-12(fp)
 8007c14:	d0a72d15 	stw	r2,-25420(gp)
  client_hoststr = hoststr;
 8007c18:	e0bffe17 	ldw	r2,-8(fp)
 8007c1c:	d0a72e15 	stw	r2,-25416(gp)
  client_additionalheaderline = additionalheaderline;
 8007c20:	e0bfff17 	ldw	r2,-4(fp)
 8007c24:	d0a72a15 	stw	r2,-25432(gp)
  client_postval = 0;
 8007c28:	d0272b15 	stw	zero,-25428(gp)
  client_browser_cb = callback;
 8007c2c:	e0800217 	ldw	r2,8(fp)
 8007c30:	d0a72915 	stw	r2,-25436(gp)
  www_fd = clientTcpReq(&www_client_internal_result_cb,
 8007c34:	d0a0028b 	ldhu	r2,-32758(gp)
 8007c38:	10bfffcc 	andi	r2,r2,65535
 8007c3c:	100d883a 	mov	r6,r2
 8007c40:	01420034 	movhi	r5,2048
 8007c44:	295e4604 	addi	r5,r5,31000
 8007c48:	01020034 	movhi	r4,2048
 8007c4c:	211ea304 	addi	r4,r4,31372
 8007c50:	80078ac0 	call	80078ac <_ZN9EtherCard12clientTcpReqEPFhhhttEPFthEt>
                        &www_client_internal_datafill_cb, hisport);
 8007c54:	d0a72805 	stb	r2,-25440(gp)
}
 8007c58:	0001883a 	nop
 8007c5c:	e037883a 	mov	sp,fp
 8007c60:	dfc00117 	ldw	ra,4(sp)
 8007c64:	df000017 	ldw	fp,0(sp)
 8007c68:	dec00204 	addi	sp,sp,8
 8007c6c:	f800283a 	ret

08007c70 <_ZN9EtherCard8httpPostEPKcS1_S1_S1_PFvhttE>:

void EtherCard::httpPost(const char *urlbuf, const char *hoststr,
                         const char *additionalheaderline, const char *postval,
                         void (*callback)(uint8_t, uint16_t, uint16_t)) {
 8007c70:	defffa04 	addi	sp,sp,-24
 8007c74:	dfc00515 	stw	ra,20(sp)
 8007c78:	df000415 	stw	fp,16(sp)
 8007c7c:	df000404 	addi	fp,sp,16
 8007c80:	e13ffc15 	stw	r4,-16(fp)
 8007c84:	e17ffd15 	stw	r5,-12(fp)
 8007c88:	e1bffe15 	stw	r6,-8(fp)
 8007c8c:	e1ffff15 	stw	r7,-4(fp)
  client_urlbuf = urlbuf;
 8007c90:	e0bffc17 	ldw	r2,-16(fp)
 8007c94:	d0a72c15 	stw	r2,-25424(gp)
  client_hoststr = hoststr;
 8007c98:	e0bffd17 	ldw	r2,-12(fp)
 8007c9c:	d0a72e15 	stw	r2,-25416(gp)
  client_additionalheaderline = additionalheaderline;
 8007ca0:	e0bffe17 	ldw	r2,-8(fp)
 8007ca4:	d0a72a15 	stw	r2,-25432(gp)
  client_postval = postval;
 8007ca8:	e0bfff17 	ldw	r2,-4(fp)
 8007cac:	d0a72b15 	stw	r2,-25428(gp)
  client_browser_cb = callback;
 8007cb0:	e0800217 	ldw	r2,8(fp)
 8007cb4:	d0a72915 	stw	r2,-25436(gp)
  www_fd = clientTcpReq(&www_client_internal_result_cb,
 8007cb8:	d0a0028b 	ldhu	r2,-32758(gp)
 8007cbc:	10bfffcc 	andi	r2,r2,65535
 8007cc0:	100d883a 	mov	r6,r2
 8007cc4:	01420034 	movhi	r5,2048
 8007cc8:	295e4604 	addi	r5,r5,31000
 8007ccc:	01020034 	movhi	r4,2048
 8007cd0:	211ea304 	addi	r4,r4,31372
 8007cd4:	80078ac0 	call	80078ac <_ZN9EtherCard12clientTcpReqEPFhhhttEPFthEt>
                        &www_client_internal_datafill_cb, hisport);
 8007cd8:	d0a72805 	stb	r2,-25440(gp)
}
 8007cdc:	0001883a 	nop
 8007ce0:	e037883a 	mov	sp,fp
 8007ce4:	dfc00117 	ldw	ra,4(sp)
 8007ce8:	df000017 	ldw	fp,0(sp)
 8007cec:	dec00204 	addi	sp,sp,8
 8007cf0:	f800283a 	ret

08007cf4 <_ZL15tcp_datafill_cbh>:

static uint16_t tcp_datafill_cb(uint8_t fd) {
 8007cf4:	defffb04 	addi	sp,sp,-20
 8007cf8:	dfc00415 	stw	ra,16(sp)
 8007cfc:	df000315 	stw	fp,12(sp)
 8007d00:	dc000215 	stw	r16,8(sp)
 8007d04:	df000304 	addi	fp,sp,12
 8007d08:	2005883a 	mov	r2,r4
 8007d0c:	e0bffe05 	stb	r2,-8(fp)
       uint16_t len = Stash::length();
 8007d10:	80055180 	call	8005518 <_ZN5Stash6lengthEv>
 8007d14:	e0bffd0d 	sth	r2,-12(fp)
       Stash::extract(0, len, EtherCard::tcpOffset());
 8007d18:	e43ffd0b 	ldhu	r16,-12(fp)
 8007d1c:	80087d40 	call	80087d4 <_ZN8ENC28J609tcpOffsetEv>
 8007d20:	100d883a 	mov	r6,r2
 8007d24:	800b883a 	mov	r5,r16
 8007d28:	0009883a 	mov	r4,zero
 8007d2c:	80055540 	call	8005554 <_ZN5Stash7extractEttPv>
       Stash::cleanup();
 8007d30:	80058840 	call	8005884 <_ZN5Stash7cleanupEv>
       EtherCard::tcpOffset()[len] = 0;
 8007d34:	80087d40 	call	80087d4 <_ZN8ENC28J609tcpOffsetEv>
 8007d38:	1007883a 	mov	r3,r2
 8007d3c:	e0bffd0b 	ldhu	r2,-12(fp)
 8007d40:	1885883a 	add	r2,r3,r2
 8007d44:	10000005 	stb	zero,0(r2)
   #if SERIAL_PRINT
       Serial.print("REQUEST: ");
       Serial.println(len);
       Serial.println((char*) EtherCard::tcpOffset());
   #endif
       result_fd = 123; // bogus value
 8007d48:	00801ec4 	movi	r2,123
 8007d4c:	d0a00885 	stb	r2,-32734(gp)
       return len;
 8007d50:	e0bffd0b 	ldhu	r2,-12(fp)
}
 8007d54:	e6ffff04 	addi	sp,fp,-4
 8007d58:	dfc00217 	ldw	ra,8(sp)
 8007d5c:	df000117 	ldw	fp,4(sp)
 8007d60:	dc000017 	ldw	r16,0(sp)
 8007d64:	dec00304 	addi	sp,sp,12
 8007d68:	f800283a 	ret

08007d6c <_ZL13tcp_result_cbhhtt>:

static uint8_t tcp_result_cb(uint8_t fd, uint8_t status, uint16_t datapos,
                             uint16_t datalen) {
 8007d6c:	defffb04 	addi	sp,sp,-20
 8007d70:	df000415 	stw	fp,16(sp)
 8007d74:	df000404 	addi	fp,sp,16
 8007d78:	2011883a 	mov	r8,r4
 8007d7c:	2809883a 	mov	r4,r5
 8007d80:	3007883a 	mov	r3,r6
 8007d84:	3805883a 	mov	r2,r7
 8007d88:	e23ffc05 	stb	r8,-16(fp)
 8007d8c:	e13ffd05 	stb	r4,-12(fp)
 8007d90:	e0fffe0d 	sth	r3,-8(fp)
 8007d94:	e0bfff0d 	sth	r2,-4(fp)
  if (status == 0) {
 8007d98:	e0bffd03 	ldbu	r2,-12(fp)
 8007d9c:	1000071e 	bne	r2,zero,8007dbc <_ZL13tcp_result_cbhhtt+0x50>
    result_fd = fd; // a valid result has been received, remember its session id
 8007da0:	e0bffc03 	ldbu	r2,-16(fp)
 8007da4:	d0a00885 	stb	r2,-32734(gp)
    result_ptr = (char *)ether.buffer + datapos;
 8007da8:	e0fffe0b 	ldhu	r3,-8(fp)
 8007dac:	008200b4 	movhi	r2,2050
 8007db0:	10b99704 	addi	r2,r2,-6564
 8007db4:	1885883a 	add	r2,r3,r2
 8007db8:	d0a73515 	stw	r2,-25388(gp)
    // result_ptr[datalen] = 0;
  }
  return 1;
 8007dbc:	00800044 	movi	r2,1
}
 8007dc0:	e037883a 	mov	sp,fp
 8007dc4:	df000017 	ldw	fp,0(sp)
 8007dc8:	dec00104 	addi	sp,sp,4
 8007dcc:	f800283a 	ret

08007dd0 <_ZN9EtherCard7tcpSendEv>:

uint8_t EtherCard::tcpSend() {
 8007dd0:	defffe04 	addi	sp,sp,-8
 8007dd4:	dfc00115 	stw	ra,4(sp)
 8007dd8:	df000015 	stw	fp,0(sp)
 8007ddc:	d839883a 	mov	fp,sp
  www_fd = clientTcpReq(&tcp_result_cb, &tcp_datafill_cb, hisport);
 8007de0:	d0a0028b 	ldhu	r2,-32758(gp)
 8007de4:	10bfffcc 	andi	r2,r2,65535
 8007de8:	100d883a 	mov	r6,r2
 8007dec:	01420034 	movhi	r5,2048
 8007df0:	295f3d04 	addi	r5,r5,31988
 8007df4:	01020034 	movhi	r4,2048
 8007df8:	211f5b04 	addi	r4,r4,32108
 8007dfc:	80078ac0 	call	80078ac <_ZN9EtherCard12clientTcpReqEPFhhhttEPFthEt>
 8007e00:	d0a72805 	stb	r2,-25440(gp)
  return www_fd;
 8007e04:	d0a72803 	ldbu	r2,-25440(gp)
}
 8007e08:	e037883a 	mov	sp,fp
 8007e0c:	dfc00117 	ldw	ra,4(sp)
 8007e10:	df000017 	ldw	fp,0(sp)
 8007e14:	dec00204 	addi	sp,sp,8
 8007e18:	f800283a 	ret

08007e1c <_ZN9EtherCard8tcpReplyEh>:

const char *EtherCard::tcpReply(uint8_t fd) {
 8007e1c:	defffe04 	addi	sp,sp,-8
 8007e20:	df000115 	stw	fp,4(sp)
 8007e24:	df000104 	addi	fp,sp,4
 8007e28:	2005883a 	mov	r2,r4
 8007e2c:	e0bfff05 	stb	r2,-4(fp)
  if (result_fd != fd)
 8007e30:	d0a00883 	ldbu	r2,-32734(gp)
 8007e34:	10c03fcc 	andi	r3,r2,255
 8007e38:	e0bfff03 	ldbu	r2,-4(fp)
 8007e3c:	18800226 	beq	r3,r2,8007e48 <_ZN9EtherCard8tcpReplyEh+0x2c>
    return 0;
 8007e40:	0005883a 	mov	r2,zero
 8007e44:	00000306 	br	8007e54 <_ZN9EtherCard8tcpReplyEh+0x38>
  result_fd = 123; // set to a bogus value to prevent future match
 8007e48:	00801ec4 	movi	r2,123
 8007e4c:	d0a00885 	stb	r2,-32734(gp)
  return result_ptr;
 8007e50:	d0a73517 	ldw	r2,-25388(gp)
}
 8007e54:	e037883a 	mov	sp,fp
 8007e58:	df000017 	ldw	fp,0(sp)
 8007e5c:	dec00104 	addi	sp,sp,4
 8007e60:	f800283a 	ret

08007e64 <_ZN9EtherCard20registerPingCallbackEPFvPhE>:

void EtherCard::registerPingCallback(void (*callback)(uint8_t *srcip)) {
 8007e64:	defffe04 	addi	sp,sp,-8
 8007e68:	df000115 	stw	fp,4(sp)
 8007e6c:	df000104 	addi	fp,sp,4
 8007e70:	e13fff15 	stw	r4,-4(fp)
  icmp_cb = callback;
 8007e74:	e0bfff17 	ldw	r2,-4(fp)
 8007e78:	d0a72f15 	stw	r2,-25412(gp)
}
 8007e7c:	0001883a 	nop
 8007e80:	e037883a 	mov	sp,fp
 8007e84:	df000017 	ldw	fp,0(sp)
 8007e88:	dec00104 	addi	sp,sp,4
 8007e8c:	f800283a 	ret

08007e90 <_ZN9EtherCard24packetLoopIcmpCheckReplyEPKh>:

uint8_t EtherCard::packetLoopIcmpCheckReply(const uint8_t *ip_monitoredhost) {
 8007e90:	defffd04 	addi	sp,sp,-12
 8007e94:	dfc00215 	stw	ra,8(sp)
 8007e98:	df000115 	stw	fp,4(sp)
 8007e9c:	df000104 	addi	fp,sp,4
 8007ea0:	e13fff15 	stw	r4,-4(fp)
  return gPB[IP_PROTO_P] == IP_PROTO_ICMP_V &&
 8007ea4:	008200b4 	movhi	r2,2050
 8007ea8:	10b99704 	addi	r2,r2,-6564
 8007eac:	108005c3 	ldbu	r2,23(r2)
         gPB[ICMP_TYPE_P] == ICMP_TYPE_ECHOREPLY_V &&
         gPB[ICMP_DATA_P] == PINGPATTERN &&
 8007eb0:	10803fcc 	andi	r2,r2,255
 8007eb4:	10800058 	cmpnei	r2,r2,1
 8007eb8:	1000111e 	bne	r2,zero,8007f00 <_ZN9EtherCard24packetLoopIcmpCheckReplyEPKh+0x70>
  icmp_cb = callback;
}

uint8_t EtherCard::packetLoopIcmpCheckReply(const uint8_t *ip_monitoredhost) {
  return gPB[IP_PROTO_P] == IP_PROTO_ICMP_V &&
         gPB[ICMP_TYPE_P] == ICMP_TYPE_ECHOREPLY_V &&
 8007ebc:	008200b4 	movhi	r2,2050
 8007ec0:	10b99704 	addi	r2,r2,-6564
 8007ec4:	10800883 	ldbu	r2,34(r2)
void EtherCard::registerPingCallback(void (*callback)(uint8_t *srcip)) {
  icmp_cb = callback;
}

uint8_t EtherCard::packetLoopIcmpCheckReply(const uint8_t *ip_monitoredhost) {
  return gPB[IP_PROTO_P] == IP_PROTO_ICMP_V &&
 8007ec8:	10803fcc 	andi	r2,r2,255
 8007ecc:	10000c1e 	bne	r2,zero,8007f00 <_ZN9EtherCard24packetLoopIcmpCheckReplyEPKh+0x70>
         gPB[ICMP_TYPE_P] == ICMP_TYPE_ECHOREPLY_V &&
         gPB[ICMP_DATA_P] == PINGPATTERN &&
 8007ed0:	008200b4 	movhi	r2,2050
 8007ed4:	10b99704 	addi	r2,r2,-6564
 8007ed8:	10800a83 	ldbu	r2,42(r2)
  icmp_cb = callback;
}

uint8_t EtherCard::packetLoopIcmpCheckReply(const uint8_t *ip_monitoredhost) {
  return gPB[IP_PROTO_P] == IP_PROTO_ICMP_V &&
         gPB[ICMP_TYPE_P] == ICMP_TYPE_ECHOREPLY_V &&
 8007edc:	10803fcc 	andi	r2,r2,255
 8007ee0:	10801098 	cmpnei	r2,r2,66
 8007ee4:	1000061e 	bne	r2,zero,8007f00 <_ZN9EtherCard24packetLoopIcmpCheckReplyEPKh+0x70>
         gPB[ICMP_DATA_P] == PINGPATTERN &&
         check_ip_message_is_from(ip_monitoredhost);
 8007ee8:	e13fff17 	ldw	r4,-4(fp)
 8007eec:	8005d8c0 	call	8005d8c <_ZL24check_ip_message_is_fromPKh>
}

uint8_t EtherCard::packetLoopIcmpCheckReply(const uint8_t *ip_monitoredhost) {
  return gPB[IP_PROTO_P] == IP_PROTO_ICMP_V &&
         gPB[ICMP_TYPE_P] == ICMP_TYPE_ECHOREPLY_V &&
         gPB[ICMP_DATA_P] == PINGPATTERN &&
 8007ef0:	10803fcc 	andi	r2,r2,255
 8007ef4:	10000226 	beq	r2,zero,8007f00 <_ZN9EtherCard24packetLoopIcmpCheckReplyEPKh+0x70>
 8007ef8:	00800044 	movi	r2,1
 8007efc:	00000106 	br	8007f04 <_ZN9EtherCard24packetLoopIcmpCheckReplyEPKh+0x74>
 8007f00:	0005883a 	mov	r2,zero
         check_ip_message_is_from(ip_monitoredhost);
}
 8007f04:	e037883a 	mov	sp,fp
 8007f08:	dfc00117 	ldw	ra,4(sp)
 8007f0c:	df000017 	ldw	fp,0(sp)
 8007f10:	dec00204 	addi	sp,sp,8
 8007f14:	f800283a 	ret

08007f18 <_ZN9EtherCard6acceptEtt>:

uint16_t EtherCard::accept(const uint16_t port, uint16_t plen) {
 8007f18:	defffb04 	addi	sp,sp,-20
 8007f1c:	dfc00415 	stw	ra,16(sp)
 8007f20:	df000315 	stw	fp,12(sp)
 8007f24:	df000304 	addi	fp,sp,12
 8007f28:	2007883a 	mov	r3,r4
 8007f2c:	2805883a 	mov	r2,r5
 8007f30:	e0fffe0d 	sth	r3,-8(fp)
 8007f34:	e0bfff0d 	sth	r2,-4(fp)
  uint16_t pos;

  if (gPB[TCP_DST_PORT_H_P] == (port >> 8) &&
 8007f38:	008200b4 	movhi	r2,2050
 8007f3c:	10b99704 	addi	r2,r2,-6564
 8007f40:	10800903 	ldbu	r2,36(r2)
 8007f44:	10c03fcc 	andi	r3,r2,255
 8007f48:	e0bffe0b 	ldhu	r2,-8(fp)
 8007f4c:	1005d23a 	srai	r2,r2,8
 8007f50:	1880321e 	bne	r3,r2,800801c <_ZN9EtherCard6acceptEtt+0x104>
      gPB[TCP_DST_PORT_L_P] ==
 8007f54:	008200b4 	movhi	r2,2050
 8007f58:	10b99704 	addi	r2,r2,-6564
 8007f5c:	10800943 	ldbu	r2,37(r2)
 8007f60:	e0fffe0b 	ldhu	r3,-8(fp)
 8007f64:	1809883a 	mov	r4,r3
}

uint16_t EtherCard::accept(const uint16_t port, uint16_t plen) {
  uint16_t pos;

  if (gPB[TCP_DST_PORT_H_P] == (port >> 8) &&
 8007f68:	10c03fcc 	andi	r3,r2,255
 8007f6c:	20803fcc 	andi	r2,r4,255
 8007f70:	18802a1e 	bne	r3,r2,800801c <_ZN9EtherCard6acceptEtt+0x104>
      gPB[TCP_DST_PORT_L_P] ==
          ((uint8_t)port)) { // Packet targeted at specified port
    if (gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V)
 8007f74:	008200b4 	movhi	r2,2050
 8007f78:	10b99704 	addi	r2,r2,-6564
 8007f7c:	10800bc3 	ldbu	r2,47(r2)
 8007f80:	10803fcc 	andi	r2,r2,255
 8007f84:	1080008c 	andi	r2,r2,2
 8007f88:	10000226 	beq	r2,zero,8007f94 <_ZN9EtherCard6acceptEtt+0x7c>
      make_tcp_synack_from_syn(); // send SYN+ACK
 8007f8c:	80065b40 	call	80065b4 <_ZL24make_tcp_synack_from_synv>
 8007f90:	00002206 	br	800801c <_ZN9EtherCard6acceptEtt+0x104>
    else if (gPB[TCP_FLAGS_P] &
 8007f94:	008200b4 	movhi	r2,2050
 8007f98:	10b99704 	addi	r2,r2,-6564
 8007f9c:	10800bc3 	ldbu	r2,47(r2)
 8007fa0:	10803fcc 	andi	r2,r2,255
 8007fa4:	1080040c 	andi	r2,r2,16
 8007fa8:	10001c26 	beq	r2,zero,800801c <_ZN9EtherCard6acceptEtt+0x104>
             TCP_FLAGS_ACK_V) { // This is an acknowledgement to our SYN+ACK so
                                // let's start processing that payload
      info_data_len = getTcpPayloadLength();
 8007fac:	80066e00 	call	80066e0 <_ZN9EtherCard19getTcpPayloadLengthEv>
 8007fb0:	d0a7348d 	sth	r2,-25390(gp)
      if (info_data_len > 0) { // Got some data
 8007fb4:	d0a7348b 	ldhu	r2,-25390(gp)
 8007fb8:	10bfffcc 	andi	r2,r2,65535
 8007fbc:	10000e26 	beq	r2,zero,8007ff8 <_ZN9EtherCard6acceptEtt+0xe0>
        pos = TCP_DATA_START;  // TCP_DATA_START is a formula
 8007fc0:	008200b4 	movhi	r2,2050
 8007fc4:	10b99704 	addi	r2,r2,-6564
 8007fc8:	10800b83 	ldbu	r2,46(r2)
 8007fcc:	10803fcc 	andi	r2,r2,255
 8007fd0:	1005d13a 	srai	r2,r2,4
 8007fd4:	1085883a 	add	r2,r2,r2
 8007fd8:	1085883a 	add	r2,r2,r2
 8007fdc:	10800884 	addi	r2,r2,34
 8007fe0:	e0bffd0d 	sth	r2,-12(fp)
        //!@todo no idea what this check pos<=plen-8 does; changed this to
        //!pos<=plen as otw. perfectly valid tcp packets are ignored; still if
        //!anybody has any idea please leave a comment
        if (pos <= plen)
 8007fe4:	e0bffd0b 	ldhu	r2,-12(fp)
 8007fe8:	e0ffff0b 	ldhu	r3,-4(fp)
 8007fec:	18800b36 	bltu	r3,r2,800801c <_ZN9EtherCard6acceptEtt+0x104>
          return pos;
 8007ff0:	e0bffd0b 	ldhu	r2,-12(fp)
 8007ff4:	00000a06 	br	8008020 <_ZN9EtherCard6acceptEtt+0x108>
      } else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V)
 8007ff8:	008200b4 	movhi	r2,2050
 8007ffc:	10b99704 	addi	r2,r2,-6564
 8008000:	10800bc3 	ldbu	r2,47(r2)
 8008004:	10803fcc 	andi	r2,r2,255
 8008008:	1080004c 	andi	r2,r2,1
 800800c:	10000326 	beq	r2,zero,800801c <_ZN9EtherCard6acceptEtt+0x104>
        make_tcp_ack_from_any(0, 0); // No data so close connection
 8008010:	000b883a 	mov	r5,zero
 8008014:	0009883a 	mov	r4,zero
 8008018:	80067700 	call	8006770 <_ZL21make_tcp_ack_from_anysh>
    }
  }
  return 0;
 800801c:	0005883a 	mov	r2,zero
}
 8008020:	e037883a 	mov	sp,fp
 8008024:	dfc00117 	ldw	ra,4(sp)
 8008028:	df000017 	ldw	fp,0(sp)
 800802c:	dec00204 	addi	sp,sp,8
 8008030:	f800283a 	ret

08008034 <_ZN9EtherCard10packetLoopEt>:

uint16_t EtherCard::packetLoop(uint16_t plen) {
 8008034:	defffb04 	addi	sp,sp,-20
 8008038:	dfc00415 	stw	ra,16(sp)
 800803c:	df000315 	stw	fp,12(sp)
 8008040:	df000304 	addi	fp,sp,12
 8008044:	2005883a 	mov	r2,r4
 8008048:	e0bfff0d 	sth	r2,-4(fp)
  if (using_dhcp) {
    ether.DhcpStateMachine(plen);
  }
#endif

  if (plen == 0) {
 800804c:	e0bfff0b 	ldhu	r2,-4(fp)
 8008050:	1000661e 	bne	r2,zero,80081ec <_ZN9EtherCard10packetLoopEt+0x1b8>
    // Check every 65536 (no-packet) cycles whether we need to retry ARP request
    // for gateway
    if (((waitgwmac & WGW_INITIAL_ARP) || (waitgwmac & WGW_REFRESHING)) &&
 8008054:	d0a73403 	ldbu	r2,-25392(gp)
 8008058:	10803fcc 	andi	r2,r2,255
 800805c:	1080004c 	andi	r2,r2,1
        delaycnt == 0 && isLinkUp()) {
 8008060:	1000041e 	bne	r2,zero,8008074 <_ZN9EtherCard10packetLoopEt+0x40>
#endif

  if (plen == 0) {
    // Check every 65536 (no-packet) cycles whether we need to retry ARP request
    // for gateway
    if (((waitgwmac & WGW_INITIAL_ARP) || (waitgwmac & WGW_REFRESHING)) &&
 8008064:	d0a73403 	ldbu	r2,-25392(gp)
 8008068:	10803fcc 	andi	r2,r2,255
 800806c:	1080010c 	andi	r2,r2,4
 8008070:	10000826 	beq	r2,zero,8008094 <_ZN9EtherCard10packetLoopEt+0x60>
        delaycnt == 0 && isLinkUp()) {
 8008074:	d0a7160b 	ldhu	r2,-25512(gp)
#endif

  if (plen == 0) {
    // Check every 65536 (no-packet) cycles whether we need to retry ARP request
    // for gateway
    if (((waitgwmac & WGW_INITIAL_ARP) || (waitgwmac & WGW_REFRESHING)) &&
 8008078:	10bfffcc 	andi	r2,r2,65535
 800807c:	1000051e 	bne	r2,zero,8008094 <_ZN9EtherCard10packetLoopEt+0x60>
        delaycnt == 0 && isLinkUp()) {
 8008080:	80041140 	call	8004114 <_ZN8ENC28J608isLinkUpEv>
 8008084:	10803fcc 	andi	r2,r2,255
 8008088:	10000226 	beq	r2,zero,8008094 <_ZN9EtherCard10packetLoopEt+0x60>
 800808c:	00800044 	movi	r2,1
 8008090:	00000106 	br	8008098 <_ZN9EtherCard10packetLoopEt+0x64>
 8008094:	0005883a 	mov	r2,zero
#endif

  if (plen == 0) {
    // Check every 65536 (no-packet) cycles whether we need to retry ARP request
    // for gateway
    if (((waitgwmac & WGW_INITIAL_ARP) || (waitgwmac & WGW_REFRESHING)) &&
 8008098:	10803fcc 	andi	r2,r2,255
 800809c:	10000526 	beq	r2,zero,80080b4 <_ZN9EtherCard10packetLoopEt+0x80>
        delaycnt == 0 && isLinkUp()) {
      client_arp_whohas(gwip);
 80080a0:	d1271144 	addi	r4,gp,-25531
 80080a4:	80073ec0 	call	80073ec <_ZL17client_arp_whohasPh>
      waitgwmac |= WGW_ACCEPT_ARP_REPLY;
 80080a8:	d0a73403 	ldbu	r2,-25392(gp)
 80080ac:	10800214 	ori	r2,r2,8
 80080b0:	d0a73405 	stb	r2,-25392(gp)
    }
    delaycnt++;
 80080b4:	d0a7160b 	ldhu	r2,-25512(gp)
 80080b8:	10800044 	addi	r2,r2,1
 80080bc:	d0a7160d 	sth	r2,-25512(gp)

#if ETHERCARD_TCPCLIENT
    // Initiate TCP/IP session if pending
    if (tcp_client_state == TCP_STATE_SENDSYN &&
 80080c0:	d0a72543 	ldbu	r2,-25451(gp)
 80080c4:	10803fcc 	andi	r2,r2,255
 80080c8:	10800058 	cmpnei	r2,r2,1
 80080cc:	1000191e 	bne	r2,zero,8008134 <_ZN9EtherCard10packetLoopEt+0x100>
        (waitgwmac & WGW_HAVE_GW_MAC)) { // send a syn
 80080d0:	d0a73403 	ldbu	r2,-25392(gp)
 80080d4:	10803fcc 	andi	r2,r2,255
 80080d8:	1080008c 	andi	r2,r2,2
    }
    delaycnt++;

#if ETHERCARD_TCPCLIENT
    // Initiate TCP/IP session if pending
    if (tcp_client_state == TCP_STATE_SENDSYN &&
 80080dc:	10001526 	beq	r2,zero,8008134 <_ZN9EtherCard10packetLoopEt+0x100>
        (waitgwmac & WGW_HAVE_GW_MAC)) { // send a syn
      tcp_client_state = TCP_STATE_SYNSENT;
 80080e0:	00800084 	movi	r2,2
 80080e4:	d0a72545 	stb	r2,-25451(gp)
      tcpclient_src_port_l++; // allocate a new port
 80080e8:	d0a00803 	ldbu	r2,-32736(gp)
 80080ec:	10800044 	addi	r2,r2,1
 80080f0:	d0a00805 	stb	r2,-32736(gp)
      client_syn(((tcp_fd << 5) | (0x1f & tcpclient_src_port_l)),
 80080f4:	d0a72503 	ldbu	r2,-25452(gp)
 80080f8:	10803fcc 	andi	r2,r2,255
 80080fc:	1004917a 	slli	r2,r2,5
 8008100:	1007883a 	mov	r3,r2
 8008104:	d0a00803 	ldbu	r2,-32736(gp)
 8008108:	108007cc 	andi	r2,r2,31
 800810c:	1884b03a 	or	r2,r3,r2
 8008110:	10803fcc 	andi	r2,r2,255
 8008114:	d0e72583 	ldbu	r3,-25450(gp)
 8008118:	18c03fcc 	andi	r3,r3,255
 800811c:	d12725c3 	ldbu	r4,-25449(gp)
 8008120:	21003fcc 	andi	r4,r4,255
                 tcp_client_port_h, tcp_client_port_l);
 8008124:	200d883a 	mov	r6,r4
 8008128:	180b883a 	mov	r5,r3
 800812c:	1009883a 	mov	r4,r2
 8008130:	80076a80 	call	80076a8 <_ZL10client_synhhh>
    }
#endif

    //!@todo this is trying to find mac only once. Need some timeout to make
    //!another call if first one doesn't succeed.
    if (is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
 8008134:	d1671344 	addi	r5,gp,-25523
 8008138:	d1270e44 	addi	r4,gp,-25543
 800813c:	8005dd00 	call	8005dd0 <_ZL6is_lanPKhS0_>
 8008140:	10803fcc 	andi	r2,r2,255
 8008144:	10000a26 	beq	r2,zero,8008170 <_ZN9EtherCard10packetLoopEt+0x13c>
 8008148:	d0a731c3 	ldbu	r2,-25401(gp)
 800814c:	1080005c 	xori	r2,r2,1
 8008150:	10803fcc 	andi	r2,r2,255
 8008154:	10000626 	beq	r2,zero,8008170 <_ZN9EtherCard10packetLoopEt+0x13c>
 8008158:	d0a73183 	ldbu	r2,-25402(gp)
 800815c:	1080005c 	xori	r2,r2,1
 8008160:	10803fcc 	andi	r2,r2,255
 8008164:	10000226 	beq	r2,zero,8008170 <_ZN9EtherCard10packetLoopEt+0x13c>
 8008168:	00800044 	movi	r2,1
 800816c:	00000106 	br	8008174 <_ZN9EtherCard10packetLoopEt+0x140>
 8008170:	0005883a 	mov	r2,zero
 8008174:	10803fcc 	andi	r2,r2,255
 8008178:	10000426 	beq	r2,zero,800818c <_ZN9EtherCard10packetLoopEt+0x158>
      client_arp_whohas(dnsip);
 800817c:	d1271344 	addi	r4,gp,-25523
 8008180:	80073ec0 	call	80073ec <_ZL17client_arp_whohasPh>
      waiting_for_dns_mac = true;
 8008184:	00800044 	movi	r2,1
 8008188:	d0a73185 	stb	r2,-25402(gp)
    }

    //!@todo this is trying to find mac only once. Need some timeout to make
    //!another call if first one doesn't succeed.
    if (is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
 800818c:	d1671444 	addi	r5,gp,-25519
 8008190:	d1270e44 	addi	r4,gp,-25543
 8008194:	8005dd00 	call	8005dd0 <_ZL6is_lanPKhS0_>
 8008198:	10803fcc 	andi	r2,r2,255
 800819c:	10000a26 	beq	r2,zero,80081c8 <_ZN9EtherCard10packetLoopEt+0x194>
 80081a0:	d0a73243 	ldbu	r2,-25399(gp)
 80081a4:	1080005c 	xori	r2,r2,1
 80081a8:	10803fcc 	andi	r2,r2,255
 80081ac:	10000626 	beq	r2,zero,80081c8 <_ZN9EtherCard10packetLoopEt+0x194>
 80081b0:	d0a73203 	ldbu	r2,-25400(gp)
 80081b4:	1080005c 	xori	r2,r2,1
 80081b8:	10803fcc 	andi	r2,r2,255
 80081bc:	10000226 	beq	r2,zero,80081c8 <_ZN9EtherCard10packetLoopEt+0x194>
 80081c0:	00800044 	movi	r2,1
 80081c4:	00000106 	br	80081cc <_ZN9EtherCard10packetLoopEt+0x198>
 80081c8:	0005883a 	mov	r2,zero
 80081cc:	10803fcc 	andi	r2,r2,255
 80081d0:	10000426 	beq	r2,zero,80081e4 <_ZN9EtherCard10packetLoopEt+0x1b0>
      client_arp_whohas(hisip);
 80081d4:	d1271444 	addi	r4,gp,-25519
 80081d8:	80073ec0 	call	80073ec <_ZL17client_arp_whohasPh>
      waiting_for_dest_mac = true;
 80081dc:	00800044 	movi	r2,1
 80081e0:	d0a73205 	stb	r2,-25400(gp)
    }

    return 0;
 80081e4:	0005883a 	mov	r2,zero
 80081e8:	00016906 	br	8008790 <_ZN9EtherCard10packetLoopEt+0x75c>
  }

  if (eth_type_is_arp_and_my_ip(plen)) { // Service ARP request
 80081ec:	e0bfff0b 	ldhu	r2,-4(fp)
 80081f0:	1009883a 	mov	r4,r2
 80081f4:	8005e8c0 	call	8005e8c <_ZL25eth_type_is_arp_and_my_ipt>
 80081f8:	10803fcc 	andi	r2,r2,255
 80081fc:	1004c03a 	cmpne	r2,r2,zero
 8008200:	10803fcc 	andi	r2,r2,255
 8008204:	10004726 	beq	r2,zero,8008324 <_ZN9EtherCard10packetLoopEt+0x2f0>
    if (gPB[ETH_ARP_OPCODE_L_P] == ETH_ARP_OPCODE_REQ_L_V)
 8008208:	008200b4 	movhi	r2,2050
 800820c:	10b99704 	addi	r2,r2,-6564
 8008210:	10800543 	ldbu	r2,21(r2)
 8008214:	10803fcc 	andi	r2,r2,255
 8008218:	10800058 	cmpnei	r2,r2,1
 800821c:	1000011e 	bne	r2,zero,8008224 <_ZN9EtherCard10packetLoopEt+0x1f0>
      make_arp_answer_from_request();
 8008220:	80062c80 	call	80062c8 <_ZL28make_arp_answer_from_requestv>
    if ((waitgwmac & WGW_ACCEPT_ARP_REPLY) &&
 8008224:	d0a73403 	ldbu	r2,-25392(gp)
 8008228:	10803fcc 	andi	r2,r2,255
 800822c:	1080020c 	andi	r2,r2,8
        (gPB[ETH_ARP_OPCODE_L_P] == ETH_ARP_OPCODE_REPLY_L_V) &&
 8008230:	10000d26 	beq	r2,zero,8008268 <_ZN9EtherCard10packetLoopEt+0x234>
 8008234:	008200b4 	movhi	r2,2050
 8008238:	10b99704 	addi	r2,r2,-6564
 800823c:	10800543 	ldbu	r2,21(r2)
  }

  if (eth_type_is_arp_and_my_ip(plen)) { // Service ARP request
    if (gPB[ETH_ARP_OPCODE_L_P] == ETH_ARP_OPCODE_REQ_L_V)
      make_arp_answer_from_request();
    if ((waitgwmac & WGW_ACCEPT_ARP_REPLY) &&
 8008240:	10803fcc 	andi	r2,r2,255
 8008244:	10800098 	cmpnei	r2,r2,2
 8008248:	1000071e 	bne	r2,zero,8008268 <_ZN9EtherCard10packetLoopEt+0x234>
        (gPB[ETH_ARP_OPCODE_L_P] == ETH_ARP_OPCODE_REPLY_L_V) &&
        client_store_mac(gwip, gwmacaddr))
 800824c:	d1673284 	addi	r5,gp,-25398
 8008250:	d1271144 	addi	r4,gp,-25531
 8008254:	80075400 	call	8007540 <_ZL16client_store_macPhS_>

  if (eth_type_is_arp_and_my_ip(plen)) { // Service ARP request
    if (gPB[ETH_ARP_OPCODE_L_P] == ETH_ARP_OPCODE_REQ_L_V)
      make_arp_answer_from_request();
    if ((waitgwmac & WGW_ACCEPT_ARP_REPLY) &&
        (gPB[ETH_ARP_OPCODE_L_P] == ETH_ARP_OPCODE_REPLY_L_V) &&
 8008258:	10803fcc 	andi	r2,r2,255
 800825c:	10000226 	beq	r2,zero,8008268 <_ZN9EtherCard10packetLoopEt+0x234>
 8008260:	00800044 	movi	r2,1
 8008264:	00000106 	br	800826c <_ZN9EtherCard10packetLoopEt+0x238>
 8008268:	0005883a 	mov	r2,zero
  }

  if (eth_type_is_arp_and_my_ip(plen)) { // Service ARP request
    if (gPB[ETH_ARP_OPCODE_L_P] == ETH_ARP_OPCODE_REQ_L_V)
      make_arp_answer_from_request();
    if ((waitgwmac & WGW_ACCEPT_ARP_REPLY) &&
 800826c:	10803fcc 	andi	r2,r2,255
 8008270:	10000226 	beq	r2,zero,800827c <_ZN9EtherCard10packetLoopEt+0x248>
        (gPB[ETH_ARP_OPCODE_L_P] == ETH_ARP_OPCODE_REPLY_L_V) &&
        client_store_mac(gwip, gwmacaddr))
      waitgwmac = WGW_HAVE_GW_MAC;
 8008274:	00800084 	movi	r2,2
 8008278:	d0a73405 	stb	r2,-25392(gp)
    if (!has_dns_mac && waiting_for_dns_mac &&
 800827c:	d0a731c3 	ldbu	r2,-25401(gp)
 8008280:	1080005c 	xori	r2,r2,1
 8008284:	10803fcc 	andi	r2,r2,255
 8008288:	10000a26 	beq	r2,zero,80082b4 <_ZN9EtherCard10packetLoopEt+0x280>
 800828c:	d0a73183 	ldbu	r2,-25402(gp)
 8008290:	10803fcc 	andi	r2,r2,255
 8008294:	10000726 	beq	r2,zero,80082b4 <_ZN9EtherCard10packetLoopEt+0x280>
        client_store_mac(dnsip, destmacaddr)) {
 8008298:	d1673004 	addi	r5,gp,-25408
 800829c:	d1271344 	addi	r4,gp,-25523
 80082a0:	80075400 	call	8007540 <_ZL16client_store_macPhS_>
      make_arp_answer_from_request();
    if ((waitgwmac & WGW_ACCEPT_ARP_REPLY) &&
        (gPB[ETH_ARP_OPCODE_L_P] == ETH_ARP_OPCODE_REPLY_L_V) &&
        client_store_mac(gwip, gwmacaddr))
      waitgwmac = WGW_HAVE_GW_MAC;
    if (!has_dns_mac && waiting_for_dns_mac &&
 80082a4:	10803fcc 	andi	r2,r2,255
 80082a8:	10000226 	beq	r2,zero,80082b4 <_ZN9EtherCard10packetLoopEt+0x280>
 80082ac:	00800044 	movi	r2,1
 80082b0:	00000106 	br	80082b8 <_ZN9EtherCard10packetLoopEt+0x284>
 80082b4:	0005883a 	mov	r2,zero
 80082b8:	10803fcc 	andi	r2,r2,255
 80082bc:	10000326 	beq	r2,zero,80082cc <_ZN9EtherCard10packetLoopEt+0x298>
        client_store_mac(dnsip, destmacaddr)) {
      has_dns_mac = true;
 80082c0:	00800044 	movi	r2,1
 80082c4:	d0a731c5 	stb	r2,-25401(gp)
      waiting_for_dns_mac = false;
 80082c8:	d0273185 	stb	zero,-25402(gp)
    }
    if (!has_dest_mac && waiting_for_dest_mac &&
 80082cc:	d0a73243 	ldbu	r2,-25399(gp)
 80082d0:	1080005c 	xori	r2,r2,1
 80082d4:	10803fcc 	andi	r2,r2,255
 80082d8:	10000a26 	beq	r2,zero,8008304 <_ZN9EtherCard10packetLoopEt+0x2d0>
 80082dc:	d0a73203 	ldbu	r2,-25400(gp)
 80082e0:	10803fcc 	andi	r2,r2,255
 80082e4:	10000726 	beq	r2,zero,8008304 <_ZN9EtherCard10packetLoopEt+0x2d0>
        client_store_mac(hisip, destmacaddr)) {
 80082e8:	d1673004 	addi	r5,gp,-25408
 80082ec:	d1271444 	addi	r4,gp,-25519
 80082f0:	80075400 	call	8007540 <_ZL16client_store_macPhS_>
    if (!has_dns_mac && waiting_for_dns_mac &&
        client_store_mac(dnsip, destmacaddr)) {
      has_dns_mac = true;
      waiting_for_dns_mac = false;
    }
    if (!has_dest_mac && waiting_for_dest_mac &&
 80082f4:	10803fcc 	andi	r2,r2,255
 80082f8:	10000226 	beq	r2,zero,8008304 <_ZN9EtherCard10packetLoopEt+0x2d0>
 80082fc:	00800044 	movi	r2,1
 8008300:	00000106 	br	8008308 <_ZN9EtherCard10packetLoopEt+0x2d4>
 8008304:	0005883a 	mov	r2,zero
 8008308:	10803fcc 	andi	r2,r2,255
 800830c:	10000326 	beq	r2,zero,800831c <_ZN9EtherCard10packetLoopEt+0x2e8>
        client_store_mac(hisip, destmacaddr)) {
      has_dest_mac = true;
 8008310:	00800044 	movi	r2,1
 8008314:	d0a73245 	stb	r2,-25399(gp)
      waiting_for_dest_mac = false;
 8008318:	d0273205 	stb	zero,-25400(gp)
    }
    return 0;
 800831c:	0005883a 	mov	r2,zero
 8008320:	00011b06 	br	8008790 <_ZN9EtherCard10packetLoopEt+0x75c>
  }

  if (eth_type_is_ip_and_my_ip(plen) == 0) { // Not IP so ignoring
 8008324:	e0bfff0b 	ldhu	r2,-4(fp)
 8008328:	1009883a 	mov	r4,r2
 800832c:	8005f1c0 	call	8005f1c <_ZL24eth_type_is_ip_and_my_ipt>
 8008330:	10803fcc 	andi	r2,r2,255
 8008334:	1005003a 	cmpeq	r2,r2,zero
 8008338:	10803fcc 	andi	r2,r2,255
 800833c:	10000226 	beq	r2,zero,8008348 <_ZN9EtherCard10packetLoopEt+0x314>
    //!@todo Add other protocols (and make each optional at compile time)
    return 0;
 8008340:	0005883a 	mov	r2,zero
 8008344:	00011206 	br	8008790 <_ZN9EtherCard10packetLoopEt+0x75c>
  }

#if ETHERCARD_ICMP
  if (gPB[IP_PROTO_P] == IP_PROTO_ICMP_V &&
 8008348:	008200b4 	movhi	r2,2050
 800834c:	10b99704 	addi	r2,r2,-6564
 8008350:	108005c3 	ldbu	r2,23(r2)
 8008354:	10803fcc 	andi	r2,r2,255
 8008358:	10800058 	cmpnei	r2,r2,1
 800835c:	1000111e 	bne	r2,zero,80083a4 <_ZN9EtherCard10packetLoopEt+0x370>
      gPB[ICMP_TYPE_P] ==
 8008360:	008200b4 	movhi	r2,2050
 8008364:	10b99704 	addi	r2,r2,-6564
 8008368:	10800883 	ldbu	r2,34(r2)
    //!@todo Add other protocols (and make each optional at compile time)
    return 0;
  }

#if ETHERCARD_ICMP
  if (gPB[IP_PROTO_P] == IP_PROTO_ICMP_V &&
 800836c:	10803fcc 	andi	r2,r2,255
 8008370:	10800218 	cmpnei	r2,r2,8
 8008374:	10000b1e 	bne	r2,zero,80083a4 <_ZN9EtherCard10packetLoopEt+0x370>
      gPB[ICMP_TYPE_P] ==
          ICMP_TYPE_ECHOREQUEST_V) { // Service ICMP echo request (ping)
    if (icmp_cb)
 8008378:	d0a72f17 	ldw	r2,-25412(gp)
 800837c:	10000426 	beq	r2,zero,8008390 <_ZN9EtherCard10packetLoopEt+0x35c>
      (*icmp_cb)(&(gPB[IP_SRC_P]));
 8008380:	d0a72f17 	ldw	r2,-25412(gp)
 8008384:	010200b4 	movhi	r4,2050
 8008388:	21399d84 	addi	r4,r4,-6538
 800838c:	103ee83a 	callr	r2
    make_echo_reply_from_request(plen);
 8008390:	e0bfff0b 	ldhu	r2,-4(fp)
 8008394:	1009883a 	mov	r4,r2
 8008398:	80063900 	call	8006390 <_ZL28make_echo_reply_from_requestt>
    return 0;
 800839c:	0005883a 	mov	r2,zero
 80083a0:	0000fb06 	br	8008790 <_ZN9EtherCard10packetLoopEt+0x75c>
  }
#endif
#if ETHERCARD_UDPSERVER
  if (ether.udpServerListening() &&
 80083a4:	8008abc0 	call	8008abc <_ZN9EtherCard18udpServerListeningEv>
 80083a8:	10803fcc 	andi	r2,r2,255
 80083ac:	10000826 	beq	r2,zero,80083d0 <_ZN9EtherCard10packetLoopEt+0x39c>
      gPB[IP_PROTO_P] == IP_PROTO_UDP_V) { // Call UDP server handler (callback)
 80083b0:	008200b4 	movhi	r2,2050
 80083b4:	10b99704 	addi	r2,r2,-6564
 80083b8:	108005c3 	ldbu	r2,23(r2)
    make_echo_reply_from_request(plen);
    return 0;
  }
#endif
#if ETHERCARD_UDPSERVER
  if (ether.udpServerListening() &&
 80083bc:	10803fcc 	andi	r2,r2,255
 80083c0:	10800458 	cmpnei	r2,r2,17
 80083c4:	1000021e 	bne	r2,zero,80083d0 <_ZN9EtherCard10packetLoopEt+0x39c>
 80083c8:	00800044 	movi	r2,1
 80083cc:	00000106 	br	80083d4 <_ZN9EtherCard10packetLoopEt+0x3a0>
 80083d0:	0005883a 	mov	r2,zero
 80083d4:	10803fcc 	andi	r2,r2,255
 80083d8:	10000726 	beq	r2,zero,80083f8 <_ZN9EtherCard10packetLoopEt+0x3c4>
      gPB[IP_PROTO_P] == IP_PROTO_UDP_V) { // Call UDP server handler (callback)
                                           // if one is defined for this packet
    if (ether.udpServerHasProcessedPacket(plen))
 80083dc:	e0bfff0b 	ldhu	r2,-4(fp)
 80083e0:	1009883a 	mov	r4,r2
 80083e4:	8008ae40 	call	8008ae4 <_ZN9EtherCard27udpServerHasProcessedPacketEt>
 80083e8:	10803fcc 	andi	r2,r2,255
 80083ec:	10000226 	beq	r2,zero,80083f8 <_ZN9EtherCard10packetLoopEt+0x3c4>
      return 0; // An UDP server handler (callback) has processed this packet
 80083f0:	0005883a 	mov	r2,zero
 80083f4:	0000e606 	br	8008790 <_ZN9EtherCard10packetLoopEt+0x75c>
  }
#endif

  if (plen < 54 || gPB[IP_PROTO_P] != IP_PROTO_TCP_V)
 80083f8:	e0bfff0b 	ldhu	r2,-4(fp)
 80083fc:	10800db0 	cmpltui	r2,r2,54
 8008400:	1000061e 	bne	r2,zero,800841c <_ZN9EtherCard10packetLoopEt+0x3e8>
 8008404:	008200b4 	movhi	r2,2050
 8008408:	10b99704 	addi	r2,r2,-6564
 800840c:	108005c3 	ldbu	r2,23(r2)
 8008410:	10803fcc 	andi	r2,r2,255
 8008414:	108001a0 	cmpeqi	r2,r2,6
 8008418:	1000021e 	bne	r2,zero,8008424 <_ZN9EtherCard10packetLoopEt+0x3f0>
    return 0; // from here on we are only interested in TCP-packets; these are
 800841c:	0005883a 	mov	r2,zero
 8008420:	0000db06 	br	8008790 <_ZN9EtherCard10packetLoopEt+0x75c>
              // longer than 54 bytes

#if ETHERCARD_TCPCLIENT
  if (gPB[TCP_DST_PORT_H_P] ==
 8008424:	008200b4 	movhi	r2,2050
 8008428:	10b99704 	addi	r2,r2,-6564
 800842c:	10800903 	ldbu	r2,36(r2)
 8008430:	10803fcc 	andi	r2,r2,255
 8008434:	108002d8 	cmpnei	r2,r2,11
 8008438:	1000cf1e 	bne	r2,zero,8008778 <_ZN9EtherCard10packetLoopEt+0x744>
      TCPCLIENT_SRC_PORT_H) { // Source port is in range reserved (by EtherCard)
                              // for client TCP/IP connections
    if (check_ip_message_is_from(hisip) == 0)
 800843c:	d1271444 	addi	r4,gp,-25519
 8008440:	8005d8c0 	call	8005d8c <_ZL24check_ip_message_is_fromPKh>
 8008444:	10803fcc 	andi	r2,r2,255
 8008448:	1005003a 	cmpeq	r2,r2,zero
 800844c:	10803fcc 	andi	r2,r2,255
 8008450:	10000226 	beq	r2,zero,800845c <_ZN9EtherCard10packetLoopEt+0x428>
      return 0; // Not current TCP/IP connection (only handle one at a time)
 8008454:	0005883a 	mov	r2,zero
 8008458:	0000cd06 	br	8008790 <_ZN9EtherCard10packetLoopEt+0x75c>
    if (gPB[TCP_FLAGS_P] & TCP_FLAGS_RST_V) { // TCP reset flagged
 800845c:	008200b4 	movhi	r2,2050
 8008460:	10b99704 	addi	r2,r2,-6564
 8008464:	10800bc3 	ldbu	r2,47(r2)
 8008468:	10803fcc 	andi	r2,r2,255
 800846c:	1080010c 	andi	r2,r2,4
 8008470:	10001226 	beq	r2,zero,80084bc <_ZN9EtherCard10packetLoopEt+0x488>
      if (client_tcp_result_cb)
 8008474:	d0a72617 	ldw	r2,-25448(gp)
 8008478:	10000c26 	beq	r2,zero,80084ac <_ZN9EtherCard10packetLoopEt+0x478>
        (*client_tcp_result_cb)((gPB[TCP_DST_PORT_L_P] >> 5) & 0x7, 3, 0, 0);
 800847c:	d0e72617 	ldw	r3,-25448(gp)
 8008480:	008200b4 	movhi	r2,2050
 8008484:	10b99704 	addi	r2,r2,-6564
 8008488:	10800943 	ldbu	r2,37(r2)
 800848c:	10803fcc 	andi	r2,r2,255
 8008490:	1004d17a 	srli	r2,r2,5
 8008494:	10803fcc 	andi	r2,r2,255
 8008498:	000f883a 	mov	r7,zero
 800849c:	000d883a 	mov	r6,zero
 80084a0:	014000c4 	movi	r5,3
 80084a4:	1009883a 	mov	r4,r2
 80084a8:	183ee83a 	callr	r3
      tcp_client_state = TCP_STATE_CLOSING;
 80084ac:	00800144 	movi	r2,5
 80084b0:	d0a72545 	stb	r2,-25451(gp)
      return 0;
 80084b4:	0005883a 	mov	r2,zero
 80084b8:	0000b506 	br	8008790 <_ZN9EtherCard10packetLoopEt+0x75c>
    }
    len = getTcpPayloadLength();
 80084bc:	80066e00 	call	80066e0 <_ZN9EtherCard19getTcpPayloadLengthEv>
 80084c0:	e0bffd0d 	sth	r2,-12(fp)
    if (tcp_client_state == TCP_STATE_SYNSENT) { // Waiting for SYN-ACK
 80084c4:	d0a72543 	ldbu	r2,-25451(gp)
 80084c8:	10803fcc 	andi	r2,r2,255
 80084cc:	10800098 	cmpnei	r2,r2,2
 80084d0:	10003c1e 	bne	r2,zero,80085c4 <_ZN9EtherCard10packetLoopEt+0x590>
      if ((gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) &&
 80084d4:	008200b4 	movhi	r2,2050
 80084d8:	10b99704 	addi	r2,r2,-6564
 80084dc:	10800bc3 	ldbu	r2,47(r2)
 80084e0:	10803fcc 	andi	r2,r2,255
 80084e4:	1080008c 	andi	r2,r2,2
 80084e8:	10002126 	beq	r2,zero,8008570 <_ZN9EtherCard10packetLoopEt+0x53c>
          (gPB[TCP_FLAGS_P] &
 80084ec:	008200b4 	movhi	r2,2050
 80084f0:	10b99704 	addi	r2,r2,-6564
 80084f4:	10800bc3 	ldbu	r2,47(r2)
 80084f8:	10803fcc 	andi	r2,r2,255
 80084fc:	1080040c 	andi	r2,r2,16
      tcp_client_state = TCP_STATE_CLOSING;
      return 0;
    }
    len = getTcpPayloadLength();
    if (tcp_client_state == TCP_STATE_SYNSENT) { // Waiting for SYN-ACK
      if ((gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) &&
 8008500:	10001b26 	beq	r2,zero,8008570 <_ZN9EtherCard10packetLoopEt+0x53c>
          (gPB[TCP_FLAGS_P] &
           TCP_FLAGS_ACK_V)) { // SYN and ACK flags set so this is an
                               // acknowledgement to our SYN
        make_tcp_ack_from_any(0, 0);
 8008504:	000b883a 	mov	r5,zero
 8008508:	0009883a 	mov	r4,zero
 800850c:	80067700 	call	8006770 <_ZL21make_tcp_ack_from_anysh>
        gPB[TCP_FLAGS_P] = TCP_FLAGS_ACK_V | TCP_FLAGS_PUSH_V;
 8008510:	008200b4 	movhi	r2,2050
 8008514:	10b99704 	addi	r2,r2,-6564
 8008518:	00c00604 	movi	r3,24
 800851c:	10c00bc5 	stb	r3,47(r2)
        if (client_tcp_datafill_cb)
 8008520:	d0a72717 	ldw	r2,-25444(gp)
 8008524:	10000b26 	beq	r2,zero,8008554 <_ZN9EtherCard10packetLoopEt+0x520>
          len = (*client_tcp_datafill_cb)((gPB[TCP_SRC_PORT_L_P] >> 5) & 0x7);
 8008528:	d0e72717 	ldw	r3,-25444(gp)
 800852c:	008200b4 	movhi	r2,2050
 8008530:	10b99704 	addi	r2,r2,-6564
 8008534:	108008c3 	ldbu	r2,35(r2)
 8008538:	10803fcc 	andi	r2,r2,255
 800853c:	1004d17a 	srli	r2,r2,5
 8008540:	10803fcc 	andi	r2,r2,255
 8008544:	1009883a 	mov	r4,r2
 8008548:	183ee83a 	callr	r3
 800854c:	e0bffd0d 	sth	r2,-12(fp)
 8008550:	00000106 	br	8008558 <_ZN9EtherCard10packetLoopEt+0x524>
        else
          len = 0;
 8008554:	e03ffd0d 	sth	zero,-12(fp)
        tcp_client_state = TCP_STATE_ESTABLISHED;
 8008558:	008000c4 	movi	r2,3
 800855c:	d0a72545 	stb	r2,-25451(gp)
        make_tcp_ack_with_data_noflags(len);
 8008560:	e0bffd0b 	ldhu	r2,-12(fp)
 8008564:	1009883a 	mov	r4,r2
 8008568:	80068600 	call	8006860 <_ZL30make_tcp_ack_with_data_noflagst>
 800856c:	00001306 	br	80085bc <_ZN9EtherCard10packetLoopEt+0x588>
      } else { // Expecting SYN+ACK so reset and resend SYN
        tcp_client_state = TCP_STATE_SENDSYN; // retry
 8008570:	00800044 	movi	r2,1
 8008574:	d0a72545 	stb	r2,-25451(gp)
        len++;
 8008578:	e0bffd0b 	ldhu	r2,-12(fp)
 800857c:	10800044 	addi	r2,r2,1
 8008580:	e0bffd0d 	sth	r2,-12(fp)
        if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
 8008584:	008200b4 	movhi	r2,2050
 8008588:	10b99704 	addi	r2,r2,-6564
 800858c:	10800bc3 	ldbu	r2,47(r2)
 8008590:	10803fcc 	andi	r2,r2,255
 8008594:	1080040c 	andi	r2,r2,16
 8008598:	10000126 	beq	r2,zero,80085a0 <_ZN9EtherCard10packetLoopEt+0x56c>
          len = 0;
 800859c:	e03ffd0d 	sth	zero,-12(fp)
        make_tcp_ack_from_any(len, TCP_FLAGS_RST_V);
 80085a0:	e0bffd0b 	ldhu	r2,-12(fp)
 80085a4:	10bfffcc 	andi	r2,r2,65535
 80085a8:	10a0001c 	xori	r2,r2,32768
 80085ac:	10a00004 	addi	r2,r2,-32768
 80085b0:	01400104 	movi	r5,4
 80085b4:	1009883a 	mov	r4,r2
 80085b8:	80067700 	call	8006770 <_ZL21make_tcp_ack_from_anysh>
      }
      return 0;
 80085bc:	0005883a 	mov	r2,zero
 80085c0:	00007306 	br	8008790 <_ZN9EtherCard10packetLoopEt+0x75c>
    }
    if (tcp_client_state == TCP_STATE_ESTABLISHED &&
 80085c4:	d0a72543 	ldbu	r2,-25451(gp)
 80085c8:	10803fcc 	andi	r2,r2,255
 80085cc:	108000d8 	cmpnei	r2,r2,3
 80085d0:	1000431e 	bne	r2,zero,80086e0 <_ZN9EtherCard10packetLoopEt+0x6ac>
 80085d4:	e0bffd0b 	ldhu	r2,-12(fp)
 80085d8:	10004126 	beq	r2,zero,80086e0 <_ZN9EtherCard10packetLoopEt+0x6ac>
        len > 0) { // TCP connection established so read data
      if (client_tcp_result_cb) {
 80085dc:	d0a72617 	ldw	r2,-25448(gp)
 80085e0:	10003f26 	beq	r2,zero,80086e0 <_ZN9EtherCard10packetLoopEt+0x6ac>
        uint16_t tcpstart = TCP_DATA_START; // TCP_DATA_START is a formula
 80085e4:	008200b4 	movhi	r2,2050
 80085e8:	10b99704 	addi	r2,r2,-6564
 80085ec:	10800b83 	ldbu	r2,46(r2)
 80085f0:	10803fcc 	andi	r2,r2,255
 80085f4:	1005d13a 	srai	r2,r2,4
 80085f8:	1085883a 	add	r2,r2,r2
 80085fc:	1085883a 	add	r2,r2,r2
 8008600:	10800884 	addi	r2,r2,34
 8008604:	e0bffd8d 	sth	r2,-10(fp)
        if (tcpstart > plen - 8)
 8008608:	e0bffd8b 	ldhu	r2,-10(fp)
 800860c:	e0ffff0b 	ldhu	r3,-4(fp)
 8008610:	18fffe04 	addi	r3,r3,-8
 8008614:	1880030e 	bge	r3,r2,8008624 <_ZN9EtherCard10packetLoopEt+0x5f0>
          tcpstart = plen - 8; // dummy but save
 8008618:	e0bfff0b 	ldhu	r2,-4(fp)
 800861c:	10bffe04 	addi	r2,r2,-8
 8008620:	e0bffd8d 	sth	r2,-10(fp)
        uint16_t save_len = len;
 8008624:	e0bffd0b 	ldhu	r2,-12(fp)
 8008628:	e0bffe0d 	sth	r2,-8(fp)
        if (tcpstart + len > plen)
 800862c:	e0fffd8b 	ldhu	r3,-10(fp)
 8008630:	e0bffd0b 	ldhu	r2,-12(fp)
 8008634:	1885883a 	add	r2,r3,r2
 8008638:	e0ffff0b 	ldhu	r3,-4(fp)
 800863c:	1880040e 	bge	r3,r2,8008650 <_ZN9EtherCard10packetLoopEt+0x61c>
          save_len = plen - tcpstart;
 8008640:	e0ffff0b 	ldhu	r3,-4(fp)
 8008644:	e0bffd8b 	ldhu	r2,-10(fp)
 8008648:	1885c83a 	sub	r2,r3,r2
 800864c:	e0bffe0d 	sth	r2,-8(fp)
        (*client_tcp_result_cb)(
            (gPB[TCP_DST_PORT_L_P] >> 5) & 0x7, 0, tcpstart,
            save_len); // Call TCP handler (callback) function
 8008650:	d0e72617 	ldw	r3,-25448(gp)
          tcpstart = plen - 8; // dummy but save
        uint16_t save_len = len;
        if (tcpstart + len > plen)
          save_len = plen - tcpstart;
        (*client_tcp_result_cb)(
            (gPB[TCP_DST_PORT_L_P] >> 5) & 0x7, 0, tcpstart,
 8008654:	008200b4 	movhi	r2,2050
 8008658:	10b99704 	addi	r2,r2,-6564
 800865c:	10800943 	ldbu	r2,37(r2)
        if (tcpstart > plen - 8)
          tcpstart = plen - 8; // dummy but save
        uint16_t save_len = len;
        if (tcpstart + len > plen)
          save_len = plen - tcpstart;
        (*client_tcp_result_cb)(
 8008660:	10803fcc 	andi	r2,r2,255
 8008664:	1004d17a 	srli	r2,r2,5
 8008668:	10803fcc 	andi	r2,r2,255
 800866c:	e13ffd8b 	ldhu	r4,-10(fp)
 8008670:	e17ffe0b 	ldhu	r5,-8(fp)
            (gPB[TCP_DST_PORT_L_P] >> 5) & 0x7, 0, tcpstart,
            save_len); // Call TCP handler (callback) function
 8008674:	280f883a 	mov	r7,r5
 8008678:	200d883a 	mov	r6,r4
 800867c:	000b883a 	mov	r5,zero
 8008680:	1009883a 	mov	r4,r2
 8008684:	183ee83a 	callr	r3

        if (persist_tcp_connection) { // Keep connection alive by sending ACK
 8008688:	d0a71583 	ldbu	r2,-25514(gp)
 800868c:	10803fcc 	andi	r2,r2,255
 8008690:	10000826 	beq	r2,zero,80086b4 <_ZN9EtherCard10packetLoopEt+0x680>
          make_tcp_ack_from_any(len, TCP_FLAGS_PUSH_V);
 8008694:	e0bffd0b 	ldhu	r2,-12(fp)
 8008698:	10bfffcc 	andi	r2,r2,65535
 800869c:	10a0001c 	xori	r2,r2,32768
 80086a0:	10a00004 	addi	r2,r2,-32768
 80086a4:	01400204 	movi	r5,8
 80086a8:	1009883a 	mov	r4,r2
 80086ac:	80067700 	call	8006770 <_ZL21make_tcp_ack_from_anysh>
 80086b0:	00000906 	br	80086d8 <_ZN9EtherCard10packetLoopEt+0x6a4>
        } else { // Close connection
          make_tcp_ack_from_any(len, TCP_FLAGS_PUSH_V | TCP_FLAGS_FIN_V);
 80086b4:	e0bffd0b 	ldhu	r2,-12(fp)
 80086b8:	10bfffcc 	andi	r2,r2,65535
 80086bc:	10a0001c 	xori	r2,r2,32768
 80086c0:	10a00004 	addi	r2,r2,-32768
 80086c4:	01400244 	movi	r5,9
 80086c8:	1009883a 	mov	r4,r2
 80086cc:	80067700 	call	8006770 <_ZL21make_tcp_ack_from_anysh>
          tcp_client_state = TCP_STATE_CLOSED;
 80086d0:	00800184 	movi	r2,6
 80086d4:	d0a72545 	stb	r2,-25451(gp)
        }
        return 0;
 80086d8:	0005883a 	mov	r2,zero
 80086dc:	00002c06 	br	8008790 <_ZN9EtherCard10packetLoopEt+0x75c>
      }
    }
    if (tcp_client_state != TCP_STATE_CLOSING) { //
 80086e0:	d0a72543 	ldbu	r2,-25451(gp)
 80086e4:	10803fcc 	andi	r2,r2,255
 80086e8:	10800160 	cmpeqi	r2,r2,5
 80086ec:	1000201e 	bne	r2,zero,8008770 <_ZN9EtherCard10packetLoopEt+0x73c>
      if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V) {
 80086f0:	008200b4 	movhi	r2,2050
 80086f4:	10b99704 	addi	r2,r2,-6564
 80086f8:	10800bc3 	ldbu	r2,47(r2)
 80086fc:	10803fcc 	andi	r2,r2,255
 8008700:	1080004c 	andi	r2,r2,1
 8008704:	10001126 	beq	r2,zero,800874c <_ZN9EtherCard10packetLoopEt+0x718>
        if (tcp_client_state == TCP_STATE_ESTABLISHED) {
 8008708:	d0a72543 	ldbu	r2,-25451(gp)
 800870c:	10803fcc 	andi	r2,r2,255
 8008710:	108000d8 	cmpnei	r2,r2,3
 8008714:	1000021e 	bne	r2,zero,8008720 <_ZN9EtherCard10packetLoopEt+0x6ec>
          return 0; // In some instances FIN is received *before* DATA.  If that
 8008718:	0005883a 	mov	r2,zero
 800871c:	00001c06 	br	8008790 <_ZN9EtherCard10packetLoopEt+0x75c>
                    // is the case, we just return here and keep looking for the
                    // data packet
        }
        make_tcp_ack_from_any(len + 1, TCP_FLAGS_PUSH_V | TCP_FLAGS_FIN_V);
 8008720:	e0bffd0b 	ldhu	r2,-12(fp)
 8008724:	10800044 	addi	r2,r2,1
 8008728:	10bfffcc 	andi	r2,r2,65535
 800872c:	10a0001c 	xori	r2,r2,32768
 8008730:	10a00004 	addi	r2,r2,-32768
 8008734:	01400244 	movi	r5,9
 8008738:	1009883a 	mov	r4,r2
 800873c:	80067700 	call	8006770 <_ZL21make_tcp_ack_from_anysh>
        tcp_client_state = TCP_STATE_CLOSED; // connection terminated
 8008740:	00800184 	movi	r2,6
 8008744:	d0a72545 	stb	r2,-25451(gp)
 8008748:	00000906 	br	8008770 <_ZN9EtherCard10packetLoopEt+0x73c>
      } else if (len > 0) {
 800874c:	e0bffd0b 	ldhu	r2,-12(fp)
 8008750:	10000726 	beq	r2,zero,8008770 <_ZN9EtherCard10packetLoopEt+0x73c>
        make_tcp_ack_from_any(len, 0);
 8008754:	e0bffd0b 	ldhu	r2,-12(fp)
 8008758:	10bfffcc 	andi	r2,r2,65535
 800875c:	10a0001c 	xori	r2,r2,32768
 8008760:	10a00004 	addi	r2,r2,-32768
 8008764:	000b883a 	mov	r5,zero
 8008768:	1009883a 	mov	r4,r2
 800876c:	80067700 	call	8006770 <_ZL21make_tcp_ack_from_anysh>
      }
    }
    return 0;
 8008770:	0005883a 	mov	r2,zero
 8008774:	00000606 	br	8008790 <_ZN9EtherCard10packetLoopEt+0x75c>
#endif

#if ETHERCARD_TCPSERVER
  // If we are here then this is a TCP/IP packet targeted at us and not related
  // to our client connection so accept
  return accept(hisport, plen);
 8008778:	d0a0028b 	ldhu	r2,-32758(gp)
 800877c:	10bfffcc 	andi	r2,r2,65535
 8008780:	e0ffff0b 	ldhu	r3,-4(fp)
 8008784:	180b883a 	mov	r5,r3
 8008788:	1009883a 	mov	r4,r2
 800878c:	8007f180 	call	8007f18 <_ZN9EtherCard6acceptEtt>
#endif
}
 8008790:	e037883a 	mov	sp,fp
 8008794:	dfc00117 	ldw	ra,4(sp)
 8008798:	df000017 	ldw	fp,0(sp)
 800879c:	dec00204 	addi	sp,sp,8
 80087a0:	f800283a 	ret

080087a4 <_ZN9EtherCard20persistTcpConnectionEb>:

void EtherCard::persistTcpConnection(bool persist) {
 80087a4:	defffe04 	addi	sp,sp,-8
 80087a8:	df000115 	stw	fp,4(sp)
 80087ac:	df000104 	addi	fp,sp,4
 80087b0:	2005883a 	mov	r2,r4
 80087b4:	e0bfff05 	stb	r2,-4(fp)
  persist_tcp_connection = persist;
 80087b8:	e0bfff03 	ldbu	r2,-4(fp)
 80087bc:	d0a71585 	stb	r2,-25514(gp)
}
 80087c0:	0001883a 	nop
 80087c4:	e037883a 	mov	sp,fp
 80087c8:	df000017 	ldw	fp,0(sp)
 80087cc:	dec00104 	addi	sp,sp,4
 80087d0:	f800283a 	ret

080087d4 <_ZN8ENC28J609tcpOffsetEv>:
                                 //!< other internal functions)
  static bool
      promiscuous_enabled; //!< True if promiscuous mode enabled (used to allow
                           //!< temporary disable of promiscuous mode)

  static uint8_t *tcpOffset() {
 80087d4:	deffff04 	addi	sp,sp,-4
 80087d8:	df000015 	stw	fp,0(sp)
 80087dc:	d839883a 	mov	fp,sp
    return buffer + 0x36;
 80087e0:	008200b4 	movhi	r2,2050
 80087e4:	10b9a484 	addi	r2,r2,-6510
  } //!< Pointer to the start of TCP payload
 80087e8:	e037883a 	mov	sp,fp
 80087ec:	df000017 	ldw	fp,0(sp)
 80087f0:	dec00104 	addi	sp,sp,4
 80087f4:	f800283a 	ret

080087f8 <_ZN12BufferFillerC1EPh>:
  BufferFiller() : start(NULL), ptr(NULL) {}

  /** @brief  Constructor
   *   @param  buf Pointer to the ethernet data buffer
   */
  BufferFiller(uint8_t *buf) : start(buf), ptr(buf) {}
 80087f8:	defffd04 	addi	sp,sp,-12
 80087fc:	df000215 	stw	fp,8(sp)
 8008800:	df000204 	addi	fp,sp,8
 8008804:	e13ffe15 	stw	r4,-8(fp)
 8008808:	e17fff15 	stw	r5,-4(fp)
 800880c:	e0bffe17 	ldw	r2,-8(fp)
 8008810:	e0ffff17 	ldw	r3,-4(fp)
 8008814:	10c00015 	stw	r3,0(r2)
 8008818:	e0bffe17 	ldw	r2,-8(fp)
 800881c:	e0ffff17 	ldw	r3,-4(fp)
 8008820:	10c00115 	stw	r3,4(r2)
 8008824:	0001883a 	nop
 8008828:	e037883a 	mov	sp,fp
 800882c:	df000017 	ldw	fp,0(sp)
 8008830:	dec00104 	addi	sp,sp,4
 8008834:	f800283a 	ret

08008838 <_ZNK12BufferFiller8positionEv>:
  uint8_t *buffer() const { return start; }

  /** @brief  Get cursor position
   *   @return <i>uint16_t</i> Cursor position
   */
  uint16_t position() const { return ptr - start; }
 8008838:	defffe04 	addi	sp,sp,-8
 800883c:	df000115 	stw	fp,4(sp)
 8008840:	df000104 	addi	fp,sp,4
 8008844:	e13fff15 	stw	r4,-4(fp)
 8008848:	e0bfff17 	ldw	r2,-4(fp)
 800884c:	10800117 	ldw	r2,4(r2)
 8008850:	1007883a 	mov	r3,r2
 8008854:	e0bfff17 	ldw	r2,-4(fp)
 8008858:	10800017 	ldw	r2,0(r2)
 800885c:	1885c83a 	sub	r2,r3,r2
 8008860:	e037883a 	mov	sp,fp
 8008864:	df000017 	ldw	fp,0(sp)
 8008868:	dec00104 	addi	sp,sp,4
 800886c:	f800283a 	ret

08008870 <_ZN9EtherCard21udpServerListenOnPortEPFvtPhtPKctEt>:

UdpServerListener listeners[UDPSERVER_MAXLISTENERS];
byte numListeners = 0;

void EtherCard::udpServerListenOnPort(UdpServerCallback callback,
                                      uint16_t port) {
 8008870:	defffd04 	addi	sp,sp,-12
 8008874:	df000215 	stw	fp,8(sp)
 8008878:	df000204 	addi	fp,sp,8
 800887c:	e13ffe15 	stw	r4,-8(fp)
 8008880:	2805883a 	mov	r2,r5
 8008884:	e0bfff0d 	sth	r2,-4(fp)
  if (numListeners < UDPSERVER_MAXLISTENERS) {
 8008888:	d0a73703 	ldbu	r2,-25380(gp)
 800888c:	10803fcc 	andi	r2,r2,255
 8008890:	10800228 	cmpgeui	r2,r2,8
 8008894:	1000191e 	bne	r2,zero,80088fc <_ZN9EtherCard21udpServerListenOnPortEPFvtPhtPKctEt+0x8c>
    listeners[numListeners] = (UdpServerListener){callback, port, true};
 8008898:	d0a73703 	ldbu	r2,-25380(gp)
 800889c:	10c03fcc 	andi	r3,r2,255
 80088a0:	008200b4 	movhi	r2,2050
 80088a4:	10b98704 	addi	r2,r2,-6628
 80088a8:	180890fa 	slli	r4,r3,3
 80088ac:	1105883a 	add	r2,r2,r4
 80088b0:	e13ffe17 	ldw	r4,-8(fp)
 80088b4:	11000015 	stw	r4,0(r2)
 80088b8:	008200b4 	movhi	r2,2050
 80088bc:	10b98704 	addi	r2,r2,-6628
 80088c0:	180890fa 	slli	r4,r3,3
 80088c4:	1105883a 	add	r2,r2,r4
 80088c8:	10800104 	addi	r2,r2,4
 80088cc:	e13fff0b 	ldhu	r4,-4(fp)
 80088d0:	1100000d 	sth	r4,0(r2)
 80088d4:	008200b4 	movhi	r2,2050
 80088d8:	10b98704 	addi	r2,r2,-6628
 80088dc:	180690fa 	slli	r3,r3,3
 80088e0:	10c5883a 	add	r2,r2,r3
 80088e4:	10800184 	addi	r2,r2,6
 80088e8:	00c00044 	movi	r3,1
 80088ec:	10c00005 	stb	r3,0(r2)
    numListeners++;
 80088f0:	d0a73703 	ldbu	r2,-25380(gp)
 80088f4:	10800044 	addi	r2,r2,1
 80088f8:	d0a73705 	stb	r2,-25380(gp)
  }
}
 80088fc:	0001883a 	nop
 8008900:	e037883a 	mov	sp,fp
 8008904:	df000017 	ldw	fp,0(sp)
 8008908:	dec00104 	addi	sp,sp,4
 800890c:	f800283a 	ret

08008910 <_ZN9EtherCard26udpServerPauseListenOnPortEt>:

void EtherCard::udpServerPauseListenOnPort(uint16_t port) {
 8008910:	defffd04 	addi	sp,sp,-12
 8008914:	df000215 	stw	fp,8(sp)
 8008918:	df000204 	addi	fp,sp,8
 800891c:	2005883a 	mov	r2,r4
 8008920:	e0bfff0d 	sth	r2,-4(fp)
  for (int i = 0; i < numListeners; i++) {
 8008924:	e03ffe15 	stw	zero,-8(fp)
 8008928:	d0a73703 	ldbu	r2,-25380(gp)
 800892c:	10803fcc 	andi	r2,r2,255
 8008930:	e0fffe17 	ldw	r3,-8(fp)
 8008934:	1880260e 	bge	r3,r2,80089d0 <_ZN9EtherCard26udpServerPauseListenOnPortEt+0xc0>
    if (gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) &&
 8008938:	008200b4 	movhi	r2,2050
 800893c:	10b99704 	addi	r2,r2,-6564
 8008940:	10800903 	ldbu	r2,36(r2)
 8008944:	10c03fcc 	andi	r3,r2,255
 8008948:	008200b4 	movhi	r2,2050
 800894c:	10b98704 	addi	r2,r2,-6628
 8008950:	e13ffe17 	ldw	r4,-8(fp)
 8008954:	200890fa 	slli	r4,r4,3
 8008958:	1105883a 	add	r2,r2,r4
 800895c:	10800104 	addi	r2,r2,4
 8008960:	1080000b 	ldhu	r2,0(r2)
 8008964:	10bfffcc 	andi	r2,r2,65535
 8008968:	1005d23a 	srai	r2,r2,8
 800896c:	1880141e 	bne	r3,r2,80089c0 <_ZN9EtherCard26udpServerPauseListenOnPortEt+0xb0>
        gPB[UDP_DST_PORT_L_P] == ((byte)listeners[i].port)) {
 8008970:	008200b4 	movhi	r2,2050
 8008974:	10b99704 	addi	r2,r2,-6564
 8008978:	11000943 	ldbu	r4,37(r2)
 800897c:	008200b4 	movhi	r2,2050
 8008980:	10b98704 	addi	r2,r2,-6628
 8008984:	e0fffe17 	ldw	r3,-8(fp)
 8008988:	180690fa 	slli	r3,r3,3
 800898c:	10c5883a 	add	r2,r2,r3
 8008990:	10800104 	addi	r2,r2,4
 8008994:	1080000b 	ldhu	r2,0(r2)
  }
}

void EtherCard::udpServerPauseListenOnPort(uint16_t port) {
  for (int i = 0; i < numListeners; i++) {
    if (gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) &&
 8008998:	20c03fcc 	andi	r3,r4,255
 800899c:	10803fcc 	andi	r2,r2,255
 80089a0:	1880071e 	bne	r3,r2,80089c0 <_ZN9EtherCard26udpServerPauseListenOnPortEt+0xb0>
        gPB[UDP_DST_PORT_L_P] == ((byte)listeners[i].port)) {
      listeners[i].listening = false;
 80089a4:	008200b4 	movhi	r2,2050
 80089a8:	10b98704 	addi	r2,r2,-6628
 80089ac:	e0fffe17 	ldw	r3,-8(fp)
 80089b0:	180690fa 	slli	r3,r3,3
 80089b4:	10c5883a 	add	r2,r2,r3
 80089b8:	10800184 	addi	r2,r2,6
 80089bc:	10000005 	stb	zero,0(r2)
    numListeners++;
  }
}

void EtherCard::udpServerPauseListenOnPort(uint16_t port) {
  for (int i = 0; i < numListeners; i++) {
 80089c0:	e0bffe17 	ldw	r2,-8(fp)
 80089c4:	10800044 	addi	r2,r2,1
 80089c8:	e0bffe15 	stw	r2,-8(fp)
 80089cc:	003fd606 	br	8008928 <_ZN9EtherCard26udpServerPauseListenOnPortEt+0x18>
    if (gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) &&
        gPB[UDP_DST_PORT_L_P] == ((byte)listeners[i].port)) {
      listeners[i].listening = false;
    }
  }
}
 80089d0:	0001883a 	nop
 80089d4:	e037883a 	mov	sp,fp
 80089d8:	df000017 	ldw	fp,0(sp)
 80089dc:	dec00104 	addi	sp,sp,4
 80089e0:	f800283a 	ret

080089e4 <_ZN9EtherCard27udpServerResumeListenOnPortEt>:

void EtherCard::udpServerResumeListenOnPort(uint16_t port) {
 80089e4:	defffd04 	addi	sp,sp,-12
 80089e8:	df000215 	stw	fp,8(sp)
 80089ec:	df000204 	addi	fp,sp,8
 80089f0:	2005883a 	mov	r2,r4
 80089f4:	e0bfff0d 	sth	r2,-4(fp)
  for (int i = 0; i < numListeners; i++) {
 80089f8:	e03ffe15 	stw	zero,-8(fp)
 80089fc:	d0a73703 	ldbu	r2,-25380(gp)
 8008a00:	10803fcc 	andi	r2,r2,255
 8008a04:	e0fffe17 	ldw	r3,-8(fp)
 8008a08:	1880270e 	bge	r3,r2,8008aa8 <_ZN9EtherCard27udpServerResumeListenOnPortEt+0xc4>
    if (gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) &&
 8008a0c:	008200b4 	movhi	r2,2050
 8008a10:	10b99704 	addi	r2,r2,-6564
 8008a14:	10800903 	ldbu	r2,36(r2)
 8008a18:	10c03fcc 	andi	r3,r2,255
 8008a1c:	008200b4 	movhi	r2,2050
 8008a20:	10b98704 	addi	r2,r2,-6628
 8008a24:	e13ffe17 	ldw	r4,-8(fp)
 8008a28:	200890fa 	slli	r4,r4,3
 8008a2c:	1105883a 	add	r2,r2,r4
 8008a30:	10800104 	addi	r2,r2,4
 8008a34:	1080000b 	ldhu	r2,0(r2)
 8008a38:	10bfffcc 	andi	r2,r2,65535
 8008a3c:	1005d23a 	srai	r2,r2,8
 8008a40:	1880151e 	bne	r3,r2,8008a98 <_ZN9EtherCard27udpServerResumeListenOnPortEt+0xb4>
        gPB[UDP_DST_PORT_L_P] == ((byte)listeners[i].port)) {
 8008a44:	008200b4 	movhi	r2,2050
 8008a48:	10b99704 	addi	r2,r2,-6564
 8008a4c:	11000943 	ldbu	r4,37(r2)
 8008a50:	008200b4 	movhi	r2,2050
 8008a54:	10b98704 	addi	r2,r2,-6628
 8008a58:	e0fffe17 	ldw	r3,-8(fp)
 8008a5c:	180690fa 	slli	r3,r3,3
 8008a60:	10c5883a 	add	r2,r2,r3
 8008a64:	10800104 	addi	r2,r2,4
 8008a68:	1080000b 	ldhu	r2,0(r2)
  }
}

void EtherCard::udpServerResumeListenOnPort(uint16_t port) {
  for (int i = 0; i < numListeners; i++) {
    if (gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) &&
 8008a6c:	20c03fcc 	andi	r3,r4,255
 8008a70:	10803fcc 	andi	r2,r2,255
 8008a74:	1880081e 	bne	r3,r2,8008a98 <_ZN9EtherCard27udpServerResumeListenOnPortEt+0xb4>
        gPB[UDP_DST_PORT_L_P] == ((byte)listeners[i].port)) {
      listeners[i].listening = true;
 8008a78:	008200b4 	movhi	r2,2050
 8008a7c:	10b98704 	addi	r2,r2,-6628
 8008a80:	e0fffe17 	ldw	r3,-8(fp)
 8008a84:	180690fa 	slli	r3,r3,3
 8008a88:	10c5883a 	add	r2,r2,r3
 8008a8c:	10800184 	addi	r2,r2,6
 8008a90:	00c00044 	movi	r3,1
 8008a94:	10c00005 	stb	r3,0(r2)
    }
  }
}

void EtherCard::udpServerResumeListenOnPort(uint16_t port) {
  for (int i = 0; i < numListeners; i++) {
 8008a98:	e0bffe17 	ldw	r2,-8(fp)
 8008a9c:	10800044 	addi	r2,r2,1
 8008aa0:	e0bffe15 	stw	r2,-8(fp)
 8008aa4:	003fd506 	br	80089fc <_ZN9EtherCard27udpServerResumeListenOnPortEt+0x18>
    if (gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) &&
        gPB[UDP_DST_PORT_L_P] == ((byte)listeners[i].port)) {
      listeners[i].listening = true;
    }
  }
}
 8008aa8:	0001883a 	nop
 8008aac:	e037883a 	mov	sp,fp
 8008ab0:	df000017 	ldw	fp,0(sp)
 8008ab4:	dec00104 	addi	sp,sp,4
 8008ab8:	f800283a 	ret

08008abc <_ZN9EtherCard18udpServerListeningEv>:

bool EtherCard::udpServerListening() { return numListeners > 0; }
 8008abc:	deffff04 	addi	sp,sp,-4
 8008ac0:	df000015 	stw	fp,0(sp)
 8008ac4:	d839883a 	mov	fp,sp
 8008ac8:	d0a73703 	ldbu	r2,-25380(gp)
 8008acc:	10803fcc 	andi	r2,r2,255
 8008ad0:	1004c03a 	cmpne	r2,r2,zero
 8008ad4:	e037883a 	mov	sp,fp
 8008ad8:	df000017 	ldw	fp,0(sp)
 8008adc:	dec00104 	addi	sp,sp,4
 8008ae0:	f800283a 	ret

08008ae4 <_ZN9EtherCard27udpServerHasProcessedPacketEt>:

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
 8008ae4:	defff904 	addi	sp,sp,-28
 8008ae8:	dfc00615 	stw	ra,24(sp)
 8008aec:	df000515 	stw	fp,20(sp)
 8008af0:	df000504 	addi	fp,sp,20
 8008af4:	2005883a 	mov	r2,r4
 8008af8:	e0bfff0d 	sth	r2,-4(fp)
  bool packetProcessed = false;
 8008afc:	e03ffc05 	stb	zero,-16(fp)
  for (int i = 0; i < numListeners; i++) {
 8008b00:	e03ffd15 	stw	zero,-12(fp)
 8008b04:	d0a73703 	ldbu	r2,-25380(gp)
 8008b08:	10803fcc 	andi	r2,r2,255
 8008b0c:	e0fffd17 	ldw	r3,-12(fp)
 8008b10:	18805c0e 	bge	r3,r2,8008c84 <_ZN9EtherCard27udpServerHasProcessedPacketEt+0x1a0>
    if (gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) &&
 8008b14:	008200b4 	movhi	r2,2050
 8008b18:	10b99704 	addi	r2,r2,-6564
 8008b1c:	10800903 	ldbu	r2,36(r2)
 8008b20:	10c03fcc 	andi	r3,r2,255
 8008b24:	008200b4 	movhi	r2,2050
 8008b28:	10b98704 	addi	r2,r2,-6628
 8008b2c:	e13ffd17 	ldw	r4,-12(fp)
 8008b30:	200890fa 	slli	r4,r4,3
 8008b34:	1105883a 	add	r2,r2,r4
 8008b38:	10800104 	addi	r2,r2,4
 8008b3c:	1080000b 	ldhu	r2,0(r2)
 8008b40:	10bfffcc 	andi	r2,r2,65535
 8008b44:	1005d23a 	srai	r2,r2,8
 8008b48:	18804a1e 	bne	r3,r2,8008c74 <_ZN9EtherCard27udpServerHasProcessedPacketEt+0x190>
        gPB[UDP_DST_PORT_L_P] == ((byte)listeners[i].port) &&
 8008b4c:	008200b4 	movhi	r2,2050
 8008b50:	10b99704 	addi	r2,r2,-6564
 8008b54:	11000943 	ldbu	r4,37(r2)
 8008b58:	008200b4 	movhi	r2,2050
 8008b5c:	10b98704 	addi	r2,r2,-6628
 8008b60:	e0fffd17 	ldw	r3,-12(fp)
 8008b64:	180690fa 	slli	r3,r3,3
 8008b68:	10c5883a 	add	r2,r2,r3
 8008b6c:	10800104 	addi	r2,r2,4
 8008b70:	1080000b 	ldhu	r2,0(r2)
bool EtherCard::udpServerListening() { return numListeners > 0; }

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
  bool packetProcessed = false;
  for (int i = 0; i < numListeners; i++) {
    if (gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) &&
 8008b74:	20c03fcc 	andi	r3,r4,255
 8008b78:	10803fcc 	andi	r2,r2,255
 8008b7c:	18803d1e 	bne	r3,r2,8008c74 <_ZN9EtherCard27udpServerHasProcessedPacketEt+0x190>
        gPB[UDP_DST_PORT_L_P] == ((byte)listeners[i].port) &&
        listeners[i].listening) {
 8008b80:	008200b4 	movhi	r2,2050
 8008b84:	10b98704 	addi	r2,r2,-6628
 8008b88:	e0fffd17 	ldw	r3,-12(fp)
 8008b8c:	180690fa 	slli	r3,r3,3
 8008b90:	10c5883a 	add	r2,r2,r3
 8008b94:	10800184 	addi	r2,r2,6
 8008b98:	10800003 	ldbu	r2,0(r2)

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
  bool packetProcessed = false;
  for (int i = 0; i < numListeners; i++) {
    if (gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) &&
        gPB[UDP_DST_PORT_L_P] == ((byte)listeners[i].port) &&
 8008b9c:	10803fcc 	andi	r2,r2,255
 8008ba0:	10003426 	beq	r2,zero,8008c74 <_ZN9EtherCard27udpServerHasProcessedPacketEt+0x190>
        listeners[i].listening) {
      uint16_t datalen =
          (uint16_t)(gPB[UDP_LEN_H_P] << 8) + gPB[UDP_LEN_L_P] - UDP_HEADER_LEN;
 8008ba4:	008200b4 	movhi	r2,2050
 8008ba8:	10b99704 	addi	r2,r2,-6564
 8008bac:	10800983 	ldbu	r2,38(r2)
 8008bb0:	10803fcc 	andi	r2,r2,255
 8008bb4:	1004923a 	slli	r2,r2,8
 8008bb8:	1007883a 	mov	r3,r2
 8008bbc:	008200b4 	movhi	r2,2050
 8008bc0:	10b99704 	addi	r2,r2,-6564
 8008bc4:	108009c3 	ldbu	r2,39(r2)
 8008bc8:	10803fcc 	andi	r2,r2,255
 8008bcc:	1885883a 	add	r2,r3,r2
 8008bd0:	10bffe04 	addi	r2,r2,-8
 8008bd4:	e0bffe0d 	sth	r2,-8(fp)
      listeners[i].callback(listeners[i].port, gPB + IP_SRC_P,
 8008bd8:	008200b4 	movhi	r2,2050
 8008bdc:	10b98704 	addi	r2,r2,-6628
 8008be0:	e0fffd17 	ldw	r3,-12(fp)
 8008be4:	180690fa 	slli	r3,r3,3
 8008be8:	10c5883a 	add	r2,r2,r3
 8008bec:	12000017 	ldw	r8,0(r2)
 8008bf0:	008200b4 	movhi	r2,2050
 8008bf4:	10b98704 	addi	r2,r2,-6628
 8008bf8:	e0fffd17 	ldw	r3,-12(fp)
 8008bfc:	180690fa 	slli	r3,r3,3
 8008c00:	10c5883a 	add	r2,r2,r3
 8008c04:	10800104 	addi	r2,r2,4
 8008c08:	1080000b 	ldhu	r2,0(r2)
 8008c0c:	127fffcc 	andi	r9,r2,65535
 8008c10:	00c200b4 	movhi	r3,2050
 8008c14:	18f99d84 	addi	r3,r3,-6538
                            (gPB[UDP_SRC_PORT_H_P] << 8) |
 8008c18:	008200b4 	movhi	r2,2050
 8008c1c:	10b99704 	addi	r2,r2,-6564
 8008c20:	10800883 	ldbu	r2,34(r2)
 8008c24:	10803fcc 	andi	r2,r2,255
 8008c28:	1004923a 	slli	r2,r2,8
    if (gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) &&
        gPB[UDP_DST_PORT_L_P] == ((byte)listeners[i].port) &&
        listeners[i].listening) {
      uint16_t datalen =
          (uint16_t)(gPB[UDP_LEN_H_P] << 8) + gPB[UDP_LEN_L_P] - UDP_HEADER_LEN;
      listeners[i].callback(listeners[i].port, gPB + IP_SRC_P,
 8008c2c:	1009883a 	mov	r4,r2
                            (gPB[UDP_SRC_PORT_H_P] << 8) |
                                gPB[UDP_SRC_PORT_L_P],
 8008c30:	008200b4 	movhi	r2,2050
 8008c34:	10b99704 	addi	r2,r2,-6564
 8008c38:	108008c3 	ldbu	r2,35(r2)
    if (gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) &&
        gPB[UDP_DST_PORT_L_P] == ((byte)listeners[i].port) &&
        listeners[i].listening) {
      uint16_t datalen =
          (uint16_t)(gPB[UDP_LEN_H_P] << 8) + gPB[UDP_LEN_L_P] - UDP_HEADER_LEN;
      listeners[i].callback(listeners[i].port, gPB + IP_SRC_P,
 8008c3c:	10803fcc 	andi	r2,r2,255
 8008c40:	2084b03a 	or	r2,r4,r2
 8008c44:	117fffcc 	andi	r5,r2,65535
 8008c48:	008200b4 	movhi	r2,2050
 8008c4c:	10b9a184 	addi	r2,r2,-6522
 8008c50:	e13ffe0b 	ldhu	r4,-8(fp)
                            (gPB[UDP_SRC_PORT_H_P] << 8) |
                                gPB[UDP_SRC_PORT_L_P],
                            (const char *)(gPB + UDP_DATA_P), datalen);
 8008c54:	d9000015 	stw	r4,0(sp)
 8008c58:	100f883a 	mov	r7,r2
 8008c5c:	280d883a 	mov	r6,r5
 8008c60:	180b883a 	mov	r5,r3
 8008c64:	4809883a 	mov	r4,r9
 8008c68:	403ee83a 	callr	r8
      packetProcessed = true;
 8008c6c:	00800044 	movi	r2,1
 8008c70:	e0bffc05 	stb	r2,-16(fp)

bool EtherCard::udpServerListening() { return numListeners > 0; }

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
  bool packetProcessed = false;
  for (int i = 0; i < numListeners; i++) {
 8008c74:	e0bffd17 	ldw	r2,-12(fp)
 8008c78:	10800044 	addi	r2,r2,1
 8008c7c:	e0bffd15 	stw	r2,-12(fp)
 8008c80:	003fa006 	br	8008b04 <_ZN9EtherCard27udpServerHasProcessedPacketEt+0x20>
                                gPB[UDP_SRC_PORT_L_P],
                            (const char *)(gPB + UDP_DATA_P), datalen);
      packetProcessed = true;
    }
  }
  return packetProcessed;
 8008c84:	e0bffc03 	ldbu	r2,-16(fp)
}
 8008c88:	e037883a 	mov	sp,fp
 8008c8c:	dfc00117 	ldw	ra,4(sp)
 8008c90:	df000017 	ldw	fp,0(sp)
 8008c94:	dec00204 	addi	sp,sp,8
 8008c98:	f800283a 	ret

08008c9c <_ZN9EtherCard7printIpEPKcPKh>:
#include "EtherCard.h"
#include <stdio.h>
#include <string.h>

void EtherCard::printIp(const char *msg, const uint8_t *buf) {
 8008c9c:	defffc04 	addi	sp,sp,-16
 8008ca0:	dfc00315 	stw	ra,12(sp)
 8008ca4:	df000215 	stw	fp,8(sp)
 8008ca8:	df000204 	addi	fp,sp,8
 8008cac:	e13ffe15 	stw	r4,-8(fp)
 8008cb0:	e17fff15 	stw	r5,-4(fp)
  printf("%s", msg);
 8008cb4:	e17ffe17 	ldw	r5,-8(fp)
 8008cb8:	010200b4 	movhi	r4,2050
 8008cbc:	2129fc04 	addi	r4,r4,-22544
 8008cc0:	800ada80 	call	800ada8 <printf>
  EtherCard::printIp(buf);
 8008cc4:	e13fff17 	ldw	r4,-4(fp)
 8008cc8:	8008cec0 	call	8008cec <_ZN9EtherCard7printIpEPKh>
  printf("\n");
 8008ccc:	01000284 	movi	r4,10
 8008cd0:	800adec0 	call	800adec <putchar>
}
 8008cd4:	0001883a 	nop
 8008cd8:	e037883a 	mov	sp,fp
 8008cdc:	dfc00117 	ldw	ra,4(sp)
 8008ce0:	df000017 	ldw	fp,0(sp)
 8008ce4:	dec00204 	addi	sp,sp,8
 8008ce8:	f800283a 	ret

08008cec <_ZN9EtherCard7printIpEPKh>:

void EtherCard::printIp(const uint8_t *buf) {
 8008cec:	defffc04 	addi	sp,sp,-16
 8008cf0:	dfc00315 	stw	ra,12(sp)
 8008cf4:	df000215 	stw	fp,8(sp)
 8008cf8:	df000204 	addi	fp,sp,8
 8008cfc:	e13fff15 	stw	r4,-4(fp)
  for (uint8_t i = 0; i < IP_LEN; ++i) {
 8008d00:	e03ffe05 	stb	zero,-8(fp)
 8008d04:	e0bffe03 	ldbu	r2,-8(fp)
 8008d08:	10800128 	cmpgeui	r2,r2,4
 8008d0c:	1000121e 	bne	r2,zero,8008d58 <_ZN9EtherCard7printIpEPKh+0x6c>
    printf("%d", buf[i]);
 8008d10:	e0bffe03 	ldbu	r2,-8(fp)
 8008d14:	e0ffff17 	ldw	r3,-4(fp)
 8008d18:	1885883a 	add	r2,r3,r2
 8008d1c:	10800003 	ldbu	r2,0(r2)
 8008d20:	10803fcc 	andi	r2,r2,255
 8008d24:	100b883a 	mov	r5,r2
 8008d28:	010200b4 	movhi	r4,2050
 8008d2c:	2129fd04 	addi	r4,r4,-22540
 8008d30:	800ada80 	call	800ada8 <printf>
    if (i < 3)
 8008d34:	e0bffe03 	ldbu	r2,-8(fp)
 8008d38:	108000e8 	cmpgeui	r2,r2,3
 8008d3c:	1000021e 	bne	r2,zero,8008d48 <_ZN9EtherCard7printIpEPKh+0x5c>
      printf(".");
 8008d40:	01000b84 	movi	r4,46
 8008d44:	800adec0 	call	800adec <putchar>
  EtherCard::printIp(buf);
  printf("\n");
}

void EtherCard::printIp(const uint8_t *buf) {
  for (uint8_t i = 0; i < IP_LEN; ++i) {
 8008d48:	e0bffe03 	ldbu	r2,-8(fp)
 8008d4c:	10800044 	addi	r2,r2,1
 8008d50:	e0bffe05 	stb	r2,-8(fp)
 8008d54:	003feb06 	br	8008d04 <_ZN9EtherCard7printIpEPKh+0x18>
    printf("%d", buf[i]);
    if (i < 3)
      printf(".");
  }
}
 8008d58:	0001883a 	nop
 8008d5c:	e037883a 	mov	sp,fp
 8008d60:	dfc00117 	ldw	ra,4(sp)
 8008d64:	df000017 	ldw	fp,0(sp)
 8008d68:	dec00204 	addi	sp,sp,8
 8008d6c:	f800283a 	ret

08008d70 <_ZN9EtherCard7copyMacEPhPKh>:

void EtherCard::copyMac(uint8_t *dst, const uint8_t *src) {
 8008d70:	defffc04 	addi	sp,sp,-16
 8008d74:	dfc00315 	stw	ra,12(sp)
 8008d78:	df000215 	stw	fp,8(sp)
 8008d7c:	df000204 	addi	fp,sp,8
 8008d80:	e13ffe15 	stw	r4,-8(fp)
 8008d84:	e17fff15 	stw	r5,-4(fp)
  memcpy(dst, src, ETH_LEN);
 8008d88:	01800184 	movi	r6,6
 8008d8c:	e17fff17 	ldw	r5,-4(fp)
 8008d90:	e13ffe17 	ldw	r4,-8(fp)
 8008d94:	800ab080 	call	800ab08 <memcpy>
}
 8008d98:	0001883a 	nop
 8008d9c:	e037883a 	mov	sp,fp
 8008da0:	dfc00117 	ldw	ra,4(sp)
 8008da4:	df000017 	ldw	fp,0(sp)
 8008da8:	dec00204 	addi	sp,sp,8
 8008dac:	f800283a 	ret

08008db0 <_ZN9EtherCard6copyIpEPhPKh>:

void EtherCard::copyIp(uint8_t *dst, const uint8_t *src) {
 8008db0:	defffc04 	addi	sp,sp,-16
 8008db4:	dfc00315 	stw	ra,12(sp)
 8008db8:	df000215 	stw	fp,8(sp)
 8008dbc:	df000204 	addi	fp,sp,8
 8008dc0:	e13ffe15 	stw	r4,-8(fp)
 8008dc4:	e17fff15 	stw	r5,-4(fp)
  memcpy(dst, src, IP_LEN);
 8008dc8:	01800104 	movi	r6,4
 8008dcc:	e17fff17 	ldw	r5,-4(fp)
 8008dd0:	e13ffe17 	ldw	r4,-8(fp)
 8008dd4:	800ab080 	call	800ab08 <memcpy>
}
 8008dd8:	0001883a 	nop
 8008ddc:	e037883a 	mov	sp,fp
 8008de0:	dfc00117 	ldw	ra,4(sp)
 8008de4:	df000017 	ldw	fp,0(sp)
 8008de8:	dec00204 	addi	sp,sp,8
 8008dec:	f800283a 	ret

08008df0 <_ZL12my_result_cbhtt>:

byte Ethernet::buffer[500];
static long timer;

// called when the client request is complete
static void my_result_cb(byte status, uint16_t off, uint16_t len) {
 8008df0:	defffb04 	addi	sp,sp,-20
 8008df4:	dfc00415 	stw	ra,16(sp)
 8008df8:	df000315 	stw	fp,12(sp)
 8008dfc:	df000304 	addi	fp,sp,12
 8008e00:	2807883a 	mov	r3,r5
 8008e04:	3005883a 	mov	r2,r6
 8008e08:	e13ffd05 	stb	r4,-12(fp)
 8008e0c:	e0fffe0d 	sth	r3,-8(fp)
 8008e10:	e0bfff0d 	sth	r2,-4(fp)
  printf("%d ms\n", (clock() - timer));
 8008e14:	800a1a00 	call	800a1a0 <clock>
 8008e18:	1007883a 	mov	r3,r2
 8008e1c:	d0a73817 	ldw	r2,-25376(gp)
 8008e20:	1885c83a 	sub	r2,r3,r2
 8008e24:	100b883a 	mov	r5,r2
 8008e28:	010200b4 	movhi	r4,2050
 8008e2c:	212a0204 	addi	r4,r4,-22520
 8008e30:	800ada80 	call	800ada8 <printf>
  printf("%s\n", (const char *)Ethernet::buffer + off);
 8008e34:	e0fffe0b 	ldhu	r3,-8(fp)
 8008e38:	008200b4 	movhi	r2,2050
 8008e3c:	10b99704 	addi	r2,r2,-6564
 8008e40:	1885883a 	add	r2,r3,r2
 8008e44:	1009883a 	mov	r4,r2
 8008e48:	800aec40 	call	800aec4 <puts>
}
 8008e4c:	0001883a 	nop
 8008e50:	e037883a 	mov	sp,fp
 8008e54:	dfc00117 	ldw	ra,4(sp)
 8008e58:	df000017 	ldw	fp,0(sp)
 8008e5c:	dec00204 	addi	sp,sp,8
 8008e60:	f800283a 	ret

08008e64 <main>:

int main() {
 8008e64:	defffc04 	addi	sp,sp,-16
 8008e68:	dfc00315 	stw	ra,12(sp)
 8008e6c:	df000215 	stw	fp,8(sp)
 8008e70:	df000204 	addi	fp,sp,8
  printf("\n[getStaticIP]\n");
 8008e74:	010200b4 	movhi	r4,2050
 8008e78:	212a0404 	addi	r4,r4,-22512
 8008e7c:	800aec40 	call	800aec4 <puts>

  uint16_t sz = sizeof ether.buffer;
 8008e80:	00807d04 	movi	r2,500
 8008e84:	e0bfff0d 	sth	r2,-4(fp)
  printf("Size: %x\n", sz);
 8008e88:	e0bfff0b 	ldhu	r2,-4(fp)
 8008e8c:	100b883a 	mov	r5,r2
 8008e90:	010200b4 	movhi	r4,2050
 8008e94:	212a0804 	addi	r4,r4,-22496
 8008e98:	800ada80 	call	800ada8 <printf>
  if (ether.begin(sz, (const uint8_t *)mymac, SS) == 0)
 8008e9c:	e0bfff0b 	ldhu	r2,-4(fp)
 8008ea0:	000d883a 	mov	r6,zero
 8008ea4:	d1600c44 	addi	r5,gp,-32719
 8008ea8:	1009883a 	mov	r4,r2
 8008eac:	80022940 	call	8002294 <_ZN9EtherCard5beginEtPKhh>
 8008eb0:	10803fcc 	andi	r2,r2,255
 8008eb4:	1005003a 	cmpeq	r2,r2,zero
 8008eb8:	10803fcc 	andi	r2,r2,255
 8008ebc:	10000326 	beq	r2,zero,8008ecc <main+0x68>
    printf("Failed to access Ethernet controller");
 8008ec0:	010200b4 	movhi	r4,2050
 8008ec4:	212a0b04 	addi	r4,r4,-22484
 8008ec8:	800ada80 	call	800ada8 <printf>
  const static uint8_t ip[] = {192, 168, 0, 220};
  const static uint8_t gw[] = {192, 168, 0, 1};
  const static uint8_t dns[] = {192, 168, 0, 1};
  const static uint8_t mask[] = {255, 255, 255, 0};

  if (!ether.staticSetup(ip, gw, dns, mask)) {
 8008ecc:	d1e010c4 	addi	r7,gp,-32701
 8008ed0:	d1a00fc4 	addi	r6,gp,-32705
 8008ed4:	d1600ec4 	addi	r5,gp,-32709
 8008ed8:	d1200dc4 	addi	r4,gp,-32713
 8008edc:	80023640 	call	8002364 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>
 8008ee0:	1080005c 	xori	r2,r2,1
 8008ee4:	10803fcc 	andi	r2,r2,255
 8008ee8:	10000326 	beq	r2,zero,8008ef8 <main+0x94>
    // handle failure to configure static IP address (current implementation
    // always returns true!)
    printf("pain and suffering");
 8008eec:	010200b4 	movhi	r4,2050
 8008ef0:	212a1504 	addi	r4,r4,-22444
 8008ef4:	800ada80 	call	800ada8 <printf>
  }

  ether.hisip[0] = 192;
 8008ef8:	00bff004 	movi	r2,-64
 8008efc:	d0a71445 	stb	r2,-25519(gp)
  ether.hisip[1] = 168;
 8008f00:	00bfea04 	movi	r2,-88
 8008f04:	d0a71485 	stb	r2,-25518(gp)
  ether.hisip[2] = 0;
 8008f08:	d02714c5 	stb	zero,-25517(gp)
  ether.hisip[3] = 124;
 8008f0c:	00801f04 	movi	r2,124
 8008f10:	d0a71505 	stb	r2,-25516(gp)

  ether.printIp("My IP: ", ether.myip);
 8008f14:	d1670e44 	addi	r5,gp,-25543
 8008f18:	010200b4 	movhi	r4,2050
 8008f1c:	212a1a04 	addi	r4,r4,-22424
 8008f20:	8008c9c0 	call	8008c9c <_ZN9EtherCard7printIpEPKcPKh>
  ether.printIp("Netmask: ", ether.netmask);
 8008f24:	d1670f44 	addi	r5,gp,-25539
 8008f28:	010200b4 	movhi	r4,2050
 8008f2c:	212a1c04 	addi	r4,r4,-22416
 8008f30:	8008c9c0 	call	8008c9c <_ZN9EtherCard7printIpEPKcPKh>
  ether.printIp("GW IP: ", ether.gwip);
 8008f34:	d1671144 	addi	r5,gp,-25531
 8008f38:	010200b4 	movhi	r4,2050
 8008f3c:	212a1f04 	addi	r4,r4,-22404
 8008f40:	8008c9c0 	call	8008c9c <_ZN9EtherCard7printIpEPKcPKh>
  ether.printIp("DNS IP: ", ether.dnsip);
 8008f44:	d1671344 	addi	r5,gp,-25523
 8008f48:	010200b4 	movhi	r4,2050
 8008f4c:	212a2104 	addi	r4,r4,-22396
 8008f50:	8008c9c0 	call	8008c9c <_ZN9EtherCard7printIpEPKcPKh>
  ether.printIp("SRV: ", ether.hisip);
 8008f54:	d1671444 	addi	r5,gp,-25519
 8008f58:	010200b4 	movhi	r4,2050
 8008f5c:	212a2404 	addi	r4,r4,-22384
 8008f60:	8008c9c0 	call	8008c9c <_ZN9EtherCard7printIpEPKcPKh>

  ether.hisport = API_PORT;
 8008f64:	00830204 	movi	r2,3080
 8008f68:	d0a0028d 	sth	r2,-32758(gp)

  timer = -REQUEST_RATE; // start timing out right away
 8008f6c:	00bb1e04 	movi	r2,-5000
 8008f70:	d0a73815 	stw	r2,-25376(gp)

  while (1) {
    ether.packetLoop(ether.packetReceive());
 8008f74:	800437c0 	call	800437c <_ZN8ENC28J6013packetReceiveEv>
 8008f78:	10bfffcc 	andi	r2,r2,65535
 8008f7c:	1009883a 	mov	r4,r2
 8008f80:	80080340 	call	8008034 <_ZN9EtherCard10packetLoopEt>

    if (clock() > timer + REQUEST_RATE) {
 8008f84:	800a1a00 	call	800a1a0 <clock>
 8008f88:	1007883a 	mov	r3,r2
 8008f8c:	d0a73817 	ldw	r2,-25376(gp)
 8008f90:	1084e204 	addi	r2,r2,5000
 8008f94:	10c5803a 	cmpltu	r2,r2,r3
 8008f98:	10803fcc 	andi	r2,r2,255
 8008f9c:	103ff526 	beq	r2,zero,8008f74 <main+0x110>
      timer = clock();
 8008fa0:	800a1a00 	call	800a1a0 <clock>
 8008fa4:	d0a73815 	stw	r2,-25376(gp)
      printf("\n>>> REQ SENDING \n");
 8008fa8:	010200b4 	movhi	r4,2050
 8008fac:	212a2604 	addi	r4,r4,-22376
 8008fb0:	800aec40 	call	800aec4 <puts>

      ether.httpPost("/sendCommand", website, "Content-Type: application/json",
                     "{\"test\": \"from FPGA\"}", my_result_cb);
 8008fb4:	00820074 	movhi	r2,2049
 8008fb8:	10a37c04 	addi	r2,r2,-29200
 8008fbc:	d8800015 	stw	r2,0(sp)
 8008fc0:	01c200b4 	movhi	r7,2050
 8008fc4:	39ea2b04 	addi	r7,r7,-22356
 8008fc8:	018200b4 	movhi	r6,2050
 8008fcc:	31aa3104 	addi	r6,r6,-22332
 8008fd0:	014200b4 	movhi	r5,2050
 8008fd4:	2969fe04 	addi	r5,r5,-22536
 8008fd8:	010200b4 	movhi	r4,2050
 8008fdc:	212a3904 	addi	r4,r4,-22300
 8008fe0:	8007c700 	call	8007c70 <_ZN9EtherCard8httpPostEPKcS1_S1_S1_PFvhttE>
      printf("done\n");
 8008fe4:	010200b4 	movhi	r4,2050
 8008fe8:	212a3d04 	addi	r4,r4,-22284
 8008fec:	800aec40 	call	800aec4 <puts>

  ether.hisport = API_PORT;

  timer = -REQUEST_RATE; // start timing out right away

  while (1) {
 8008ff0:	003fe006 	br	8008f74 <main+0x110>

08008ff4 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 8008ff4:	008200b4 	movhi	r2,2050
 8008ff8:	10aa4e04 	addi	r2,r2,-22216
 8008ffc:	20800015 	stw	r2,0(r4)
 8009000:	8009ac81 	jmpi	8009ac8 <_ZN10__cxxabiv117__class_type_infoD1Ev>

08009004 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 8009004:	defffe04 	addi	sp,sp,-8
 8009008:	008200b4 	movhi	r2,2050
 800900c:	dc000015 	stw	r16,0(sp)
 8009010:	dfc00115 	stw	ra,4(sp)
 8009014:	10aa4e04 	addi	r2,r2,-22216
 8009018:	20800015 	stw	r2,0(r4)
 800901c:	2021883a 	mov	r16,r4
 8009020:	8009ac80 	call	8009ac8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8009024:	8009883a 	mov	r4,r16
 8009028:	dfc00117 	ldw	ra,4(sp)
 800902c:	dc000017 	ldw	r16,0(sp)
 8009030:	dec00204 	addi	sp,sp,8
 8009034:	8009a341 	jmpi	8009a34 <_ZdlPv>

08009038 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8009038:	defff504 	addi	sp,sp,-44
 800903c:	dc400215 	stw	r17,8(sp)
 8009040:	dc400b17 	ldw	r17,44(sp)
 8009044:	df000915 	stw	fp,36(sp)
 8009048:	ddc00815 	stw	r23,32(sp)
 800904c:	dd800715 	stw	r22,28(sp)
 8009050:	dc000115 	stw	r16,4(sp)
 8009054:	dfc00a15 	stw	ra,40(sp)
 8009058:	dd400615 	stw	r21,24(sp)
 800905c:	dd000515 	stw	r20,20(sp)
 8009060:	dcc00415 	stw	r19,16(sp)
 8009064:	dc800315 	stw	r18,12(sp)
 8009068:	3039883a 	mov	fp,r6
 800906c:	2021883a 	mov	r16,r4
 8009070:	282d883a 	mov	r22,r5
 8009074:	382f883a 	mov	r23,r7
 8009078:	34402c26 	beq	r6,r17,800912c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xf4>
 800907c:	85000317 	ldw	r20,12(r16)
 8009080:	048000c4 	movi	r18,3
 8009084:	04ffff44 	movi	r19,-3
 8009088:	a484983a 	sll	r2,r20,r18
 800908c:	b80f883a 	mov	r7,r23
 8009090:	b00b883a 	mov	r5,r22
 8009094:	10800304 	addi	r2,r2,12
 8009098:	80a1883a 	add	r16,r16,r2
 800909c:	a0001626 	beq	r20,zero,80090f8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xc0>
 80090a0:	81800017 	ldw	r6,0(r16)
 80090a4:	a53fffc4 	addi	r20,r20,-1
 80090a8:	3080008c 	andi	r2,r6,2
 80090ac:	3540004c 	andi	r21,r6,1
 80090b0:	10000d26 	beq	r2,zero,80090e8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
 80090b4:	300dd23a 	srai	r6,r6,8
 80090b8:	a8000426 	beq	r21,zero,80090cc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x94>
 80090bc:	b4c00a26 	beq	r22,r19,80090e8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
 80090c0:	e0800017 	ldw	r2,0(fp)
 80090c4:	118d883a 	add	r6,r2,r6
 80090c8:	31800017 	ldw	r6,0(r6)
 80090cc:	813fff17 	ldw	r4,-4(r16)
 80090d0:	e18d883a 	add	r6,fp,r6
 80090d4:	20800017 	ldw	r2,0(r4)
 80090d8:	dc400015 	stw	r17,0(sp)
 80090dc:	10800817 	ldw	r2,32(r2)
 80090e0:	103ee83a 	callr	r2
 80090e4:	90801b16 	blt	r18,r2,8009154 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x11c>
 80090e8:	843ffe04 	addi	r16,r16,-8
 80090ec:	b80f883a 	mov	r7,r23
 80090f0:	b00b883a 	mov	r5,r22
 80090f4:	a03fea1e 	bne	r20,zero,80090a0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x68>
 80090f8:	00800044 	movi	r2,1
 80090fc:	dfc00a17 	ldw	ra,40(sp)
 8009100:	df000917 	ldw	fp,36(sp)
 8009104:	ddc00817 	ldw	r23,32(sp)
 8009108:	dd800717 	ldw	r22,28(sp)
 800910c:	dd400617 	ldw	r21,24(sp)
 8009110:	dd000517 	ldw	r20,20(sp)
 8009114:	dcc00417 	ldw	r19,16(sp)
 8009118:	dc800317 	ldw	r18,12(sp)
 800911c:	dc400217 	ldw	r17,8(sp)
 8009120:	dc000117 	ldw	r16,4(sp)
 8009124:	dec00b04 	addi	sp,sp,44
 8009128:	f800283a 	ret
 800912c:	21000117 	ldw	r4,4(r4)
 8009130:	39400117 	ldw	r5,4(r7)
 8009134:	21400526 	beq	r4,r5,800914c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x114>
 8009138:	20c00007 	ldb	r3,0(r4)
 800913c:	00800a84 	movi	r2,42
 8009140:	18bfce26 	beq	r3,r2,800907c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x44>
 8009144:	800af2c0 	call	800af2c <strcmp>
 8009148:	103fcc1e 	bne	r2,zero,800907c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x44>
 800914c:	00800184 	movi	r2,6
 8009150:	003fea06 	br	80090fc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xc4>
 8009154:	a83fe926 	beq	r21,zero,80090fc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xc4>
 8009158:	10800054 	ori	r2,r2,1
 800915c:	003fe706 	br	80090fc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xc4>

08009160 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8009160:	deffe804 	addi	sp,sp,-96
 8009164:	df001615 	stw	fp,88(sp)
 8009168:	df001b17 	ldw	fp,108(sp)
 800916c:	ddc01515 	stw	r23,84(sp)
 8009170:	dd001215 	stw	r20,72(sp)
 8009174:	e0800417 	ldw	r2,16(fp)
 8009178:	dcc01115 	stw	r19,68(sp)
 800917c:	dfc01715 	stw	ra,92(sp)
 8009180:	dd801415 	stw	r22,80(sp)
 8009184:	dd401315 	stw	r21,76(sp)
 8009188:	dc801015 	stw	r18,64(sp)
 800918c:	dc400f15 	stw	r17,60(sp)
 8009190:	dc000e15 	stw	r16,56(sp)
 8009194:	d9000b15 	stw	r4,44(sp)
 8009198:	d9c00915 	stw	r7,36(sp)
 800919c:	1080040c 	andi	r2,r2,16
 80091a0:	282f883a 	mov	r23,r5
 80091a4:	3027883a 	mov	r19,r6
 80091a8:	dd001817 	ldw	r20,96(sp)
 80091ac:	10000226 	beq	r2,zero,80091b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
 80091b0:	20800217 	ldw	r2,8(r4)
 80091b4:	e0800415 	stw	r2,16(fp)
 80091b8:	d8c01a17 	ldw	r3,104(sp)
 80091bc:	a0c0cb26 	beq	r20,r3,80094ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38c>
 80091c0:	d8c00b17 	ldw	r3,44(sp)
 80091c4:	1c000117 	ldw	r16,4(r3)
 80091c8:	d8c00917 	ldw	r3,36(sp)
 80091cc:	19400117 	ldw	r5,4(r3)
 80091d0:	2c000626 	beq	r5,r16,80091ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
 80091d4:	80c00007 	ldb	r3,0(r16)
 80091d8:	00800a84 	movi	r2,42
 80091dc:	18801b26 	beq	r3,r2,800924c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
 80091e0:	8009883a 	mov	r4,r16
 80091e4:	800af2c0 	call	800af2c <strcmp>
 80091e8:	1000181e 	bne	r2,zero,800924c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
 80091ec:	e5000015 	stw	r20,0(fp)
 80091f0:	e4c00115 	stw	r19,4(fp)
 80091f4:	b8010916 	blt	r23,zero,800961c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4bc>
 80091f8:	d8c01a17 	ldw	r3,104(sp)
 80091fc:	a5d9883a 	add	r12,r20,r23
 8009200:	1b014126 	beq	r3,r12,8009708 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a8>
 8009204:	00800044 	movi	r2,1
 8009208:	e0800315 	stw	r2,12(fp)
 800920c:	0005883a 	mov	r2,zero
 8009210:	dfc01717 	ldw	ra,92(sp)
 8009214:	df001617 	ldw	fp,88(sp)
 8009218:	ddc01517 	ldw	r23,84(sp)
 800921c:	dd801417 	ldw	r22,80(sp)
 8009220:	dd401317 	ldw	r21,76(sp)
 8009224:	dd001217 	ldw	r20,72(sp)
 8009228:	dcc01117 	ldw	r19,68(sp)
 800922c:	dc801017 	ldw	r18,64(sp)
 8009230:	dc400f17 	ldw	r17,60(sp)
 8009234:	dc000e17 	ldw	r16,56(sp)
 8009238:	dec01804 	addi	sp,sp,96
 800923c:	f800283a 	ret
 8009240:	d8c00917 	ldw	r3,36(sp)
 8009244:	18800117 	ldw	r2,4(r3)
 8009248:	80bfe826 	beq	r16,r2,80091ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
 800924c:	b800ef16 	blt	r23,zero,800960c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4ac>
 8009250:	d8c01a17 	ldw	r3,104(sp)
 8009254:	1dedc83a 	sub	r22,r3,r23
 8009258:	e005883a 	mov	r2,fp
 800925c:	00c00044 	movi	r3,1
 8009260:	b039883a 	mov	fp,r22
 8009264:	0021883a 	mov	r16,zero
 8009268:	a02d883a 	mov	r22,r20
 800926c:	d8000a45 	stb	zero,41(sp)
 8009270:	d8c00a05 	stb	r3,40(sp)
 8009274:	048000c4 	movi	r18,3
 8009278:	1029883a 	mov	r20,r2
 800927c:	d8c00b17 	ldw	r3,44(sp)
 8009280:	b805883a 	mov	r2,r23
 8009284:	1ac00317 	ldw	r11,12(r3)
 8009288:	581490fa 	slli	r10,r11,3
 800928c:	52800304 	addi	r10,r10,12
 8009290:	1aab883a 	add	r21,r3,r10
 8009294:	b007883a 	mov	r3,r22
 8009298:	582d883a 	mov	r22,r11
 800929c:	a82f883a 	mov	r23,r21
 80092a0:	1823883a 	mov	r17,r3
 80092a4:	102b883a 	mov	r21,r2
 80092a8:	b0005526 	beq	r22,zero,8009400 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2a0>
 80092ac:	b8800017 	ldw	r2,0(r23)
 80092b0:	a1400417 	ldw	r5,16(r20)
 80092b4:	d8000415 	stw	zero,16(sp)
 80092b8:	d8000515 	stw	zero,20(sp)
 80092bc:	d8000615 	stw	zero,24(sp)
 80092c0:	d8000715 	stw	zero,28(sp)
 80092c4:	d9400815 	stw	r5,32(sp)
 80092c8:	1100004c 	andi	r4,r2,1
 80092cc:	1007d23a 	srai	r3,r2,8
 80092d0:	20007526 	beq	r4,zero,80094a8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x348>
 80092d4:	89000017 	ldw	r4,0(r17)
 80092d8:	99800054 	ori	r6,r19,1
 80092dc:	20c7883a 	add	r3,r4,r3
 80092e0:	18c00017 	ldw	r3,0(r3)
 80092e4:	88c7883a 	add	r3,r17,r3
 80092e8:	e0000326 	beq	fp,zero,80092f8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x198>
 80092ec:	d9c00a03 	ldbu	r7,40(sp)
 80092f0:	e0c9803a 	cmpltu	r4,fp,r3
 80092f4:	21c07226 	beq	r4,r7,80094c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x360>
 80092f8:	1080008c 	andi	r2,r2,2
 80092fc:	1000041e 	bne	r2,zero,8009310 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b0>
 8009300:	013fff84 	movi	r4,-2
 8009304:	a9007126 	beq	r21,r4,80094cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x36c>
 8009308:	00bfff44 	movi	r2,-3
 800930c:	308c703a 	and	r6,r6,r2
 8009310:	b93fff17 	ldw	r4,-4(r23)
 8009314:	d9400404 	addi	r5,sp,16
 8009318:	d9c00917 	ldw	r7,36(sp)
 800931c:	20800017 	ldw	r2,0(r4)
 8009320:	d9400315 	stw	r5,12(sp)
 8009324:	d9401a17 	ldw	r5,104(sp)
 8009328:	d8c00015 	stw	r3,0(sp)
 800932c:	d9400215 	stw	r5,8(sp)
 8009330:	d9401917 	ldw	r5,100(sp)
 8009334:	d9400115 	stw	r5,4(sp)
 8009338:	10800717 	ldw	r2,28(r2)
 800933c:	a80b883a 	mov	r5,r21
 8009340:	103ee83a 	callr	r2
 8009344:	a1400217 	ldw	r5,8(r20)
 8009348:	d9000617 	ldw	r4,24(sp)
 800934c:	d8c00717 	ldw	r3,28(sp)
 8009350:	2908b03a 	or	r4,r5,r4
 8009354:	a1000215 	stw	r4,8(r20)
 8009358:	01400184 	movi	r5,6
 800935c:	1940a426 	beq	r3,r5,80095f0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
 8009360:	01400084 	movi	r5,2
 8009364:	1940a226 	beq	r3,r5,80095f0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
 8009368:	81403fcc 	andi	r5,r16,255
 800936c:	a1800017 	ldw	r6,0(r20)
 8009370:	28004f1e 	bne	r5,zero,80094b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x350>
 8009374:	30007926 	beq	r6,zero,800955c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3fc>
 8009378:	d9400417 	ldw	r5,16(sp)
 800937c:	29806926 	beq	r5,r6,8009524 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c4>
 8009380:	28006d26 	beq	r5,zero,8009538 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3d8>
 8009384:	a2800317 	ldw	r10,12(r20)
 8009388:	9100250e 	bge	r18,r4,8009420 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
 800938c:	2100004c 	andi	r4,r4,1
 8009390:	20000326 	beq	r4,zero,80093a0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x240>
 8009394:	a0800417 	ldw	r2,16(r20)
 8009398:	1080008c 	andi	r2,r2,2
 800939c:	1000201e 	bne	r2,zero,8009420 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
 80093a0:	50004d1e 	bne	r10,zero,80094d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x378>
 80093a4:	18002626 	beq	r3,zero,8009440 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e0>
 80093a8:	02800044 	movi	r10,1
 80093ac:	181b883a 	mov	r13,r3
 80093b0:	1a84f03a 	xor	r2,r3,r10
 80093b4:	501f883a 	mov	r15,r10
 80093b8:	90801f0e 	bge	r18,r2,8009438 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2d8>
 80093bc:	90c0880e 	bge	r18,r3,80095e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x480>
 80093c0:	d9400417 	ldw	r5,16(sp)
 80093c4:	1880008c 	andi	r2,r3,2
 80093c8:	d9000517 	ldw	r4,20(sp)
 80093cc:	a1400015 	stw	r5,0(r20)
 80093d0:	0021883a 	mov	r16,zero
 80093d4:	a1000115 	stw	r4,4(r20)
 80093d8:	a0c00315 	stw	r3,12(r20)
 80093dc:	10004f1e 	bne	r2,zero,800951c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
 80093e0:	6b40004c 	andi	r13,r13,1
 80093e4:	68004d26 	beq	r13,zero,800951c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
 80093e8:	a1000217 	ldw	r4,8(r20)
 80093ec:	01400104 	movi	r5,4
 80093f0:	21408826 	beq	r4,r5,8009614 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
 80093f4:	b5bfffc4 	addi	r22,r22,-1
 80093f8:	bdfffe04 	addi	r23,r23,-8
 80093fc:	b03fab1e 	bne	r22,zero,80092ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x14c>
 8009400:	d8800a43 	ldbu	r2,41(sp)
 8009404:	a82f883a 	mov	r23,r21
 8009408:	882d883a 	mov	r22,r17
 800940c:	10008126 	beq	r2,zero,8009614 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
 8009410:	dd400a03 	ldbu	r21,40(sp)
 8009414:	a8007f26 	beq	r21,zero,8009614 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
 8009418:	d8000a05 	stb	zero,40(sp)
 800941c:	003f9706 	br	800927c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x11c>
 8009420:	501f883a 	mov	r15,r10
 8009424:	181b883a 	mov	r13,r3
 8009428:	02800b0e 	bge	zero,r10,8009458 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f8>
 800942c:	00c0570e 	bge	zero,r3,800958c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42c>
 8009430:	1a84f03a 	xor	r2,r3,r10
 8009434:	90bfe116 	blt	r18,r2,80093bc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x25c>
 8009438:	1bc6703a 	and	r3,r3,r15
 800943c:	90c09916 	blt	r18,r3,80096a4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x544>
 8009440:	01000044 	movi	r4,1
 8009444:	a1000315 	stw	r4,12(r20)
 8009448:	a0000015 	stw	zero,0(r20)
 800944c:	a1000217 	ldw	r4,8(r20)
 8009450:	04000044 	movi	r16,1
 8009454:	003fe506 	br	80093ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x28c>
 8009458:	90c00a0e 	bge	r18,r3,8009484 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
 800945c:	1880004c 	andi	r2,r3,1
 8009460:	10000426 	beq	r2,zero,8009474 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x314>
 8009464:	d9000b17 	ldw	r4,44(sp)
 8009468:	20800217 	ldw	r2,8(r4)
 800946c:	1080008c 	andi	r2,r2,2
 8009470:	1000041e 	bne	r2,zero,8009484 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
 8009474:	1880005c 	xori	r2,r3,1
 8009478:	90bfd216 	blt	r18,r2,80093c4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x264>
 800947c:	03c00044 	movi	r15,1
 8009480:	003fed06 	br	8009438 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2d8>
 8009484:	a8006e16 	blt	r21,zero,8009640 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4e0>
 8009488:	d8801a17 	ldw	r2,104(sp)
 800948c:	354d883a 	add	r6,r6,r21
 8009490:	11805026 	beq	r2,r6,80095d4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x474>
 8009494:	00c0a50e 	bge	zero,r3,800972c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5cc>
 8009498:	03c00044 	movi	r15,1
 800949c:	1bc4f03a 	xor	r2,r3,r15
 80094a0:	7815883a 	mov	r10,r15
 80094a4:	003fc406 	br	80093b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x258>
 80094a8:	980d883a 	mov	r6,r19
 80094ac:	003f8d06 	br	80092e4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x184>
 80094b0:	303fb11e 	bne	r6,zero,8009378 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x218>
 80094b4:	d9400417 	ldw	r5,16(sp)
 80094b8:	283fb21e 	bne	r5,zero,8009384 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x224>
 80094bc:	003fcb06 	br	80093ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x28c>
 80094c0:	00c00044 	movi	r3,1
 80094c4:	d8c00a45 	stb	r3,41(sp)
 80094c8:	003fca06 	br	80093f4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x294>
 80094cc:	294000cc 	andi	r5,r5,3
 80094d0:	283fc826 	beq	r5,zero,80093f4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x294>
 80094d4:	003f8c06 	br	8009308 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1a8>
 80094d8:	18001a26 	beq	r3,zero,8009544 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e4>
 80094dc:	181b883a 	mov	r13,r3
 80094e0:	501f883a 	mov	r15,r10
 80094e4:	50c4f03a 	xor	r2,r10,r3
 80094e8:	003fb306 	br	80093b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x258>
 80094ec:	d8c00b17 	ldw	r3,44(sp)
 80094f0:	1c000117 	ldw	r16,4(r3)
 80094f4:	d8c01917 	ldw	r3,100(sp)
 80094f8:	19400117 	ldw	r5,4(r3)
 80094fc:	81400626 	beq	r16,r5,8009518 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3b8>
 8009500:	80c00007 	ldb	r3,0(r16)
 8009504:	00800a84 	movi	r2,42
 8009508:	18bf4d26 	beq	r3,r2,8009240 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xe0>
 800950c:	8009883a 	mov	r4,r16
 8009510:	800af2c0 	call	800af2c <strcmp>
 8009514:	10005c1e 	bne	r2,zero,8009688 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x528>
 8009518:	e4c00215 	stw	r19,8(fp)
 800951c:	0005883a 	mov	r2,zero
 8009520:	003f3b06 	br	8009210 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>
 8009524:	a0c00117 	ldw	r3,4(r20)
 8009528:	d8800517 	ldw	r2,20(sp)
 800952c:	1884b03a 	or	r2,r3,r2
 8009530:	a0800115 	stw	r2,4(r20)
 8009534:	003fad06 	br	80093ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x28c>
 8009538:	10803fcc 	andi	r2,r2,255
 800953c:	103f911e 	bne	r2,zero,8009384 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x224>
 8009540:	003faa06 	br	80093ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x28c>
 8009544:	501b883a 	mov	r13,r10
 8009548:	5080005c 	xori	r2,r10,1
 800954c:	5007883a 	mov	r3,r10
 8009550:	90bfbb0e 	bge	r18,r2,8009440 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e0>
 8009554:	6880008c 	andi	r2,r13,2
 8009558:	003f9f06 	br	80093d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x278>
 800955c:	d8c00417 	ldw	r3,16(sp)
 8009560:	d9400517 	ldw	r5,20(sp)
 8009564:	a0c00015 	stw	r3,0(r20)
 8009568:	a1400115 	stw	r5,4(r20)
 800956c:	18000526 	beq	r3,zero,8009584 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x424>
 8009570:	20001626 	beq	r4,zero,80095cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46c>
 8009574:	d9400b17 	ldw	r5,44(sp)
 8009578:	28c00217 	ldw	r3,8(r5)
 800957c:	18c0004c 	andi	r3,r3,1
 8009580:	183f2326 	beq	r3,zero,8009210 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>
 8009584:	1021883a 	mov	r16,r2
 8009588:	003f9806 	br	80093ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x28c>
 800958c:	9280060e 	bge	r18,r10,80095a8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x448>
 8009590:	5080004c 	andi	r2,r10,1
 8009594:	10002426 	beq	r2,zero,8009628 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c8>
 8009598:	d8c00b17 	ldw	r3,44(sp)
 800959c:	18800217 	ldw	r2,8(r3)
 80095a0:	1080008c 	andi	r2,r2,2
 80095a4:	10003c26 	beq	r2,zero,8009698 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x538>
 80095a8:	d9400417 	ldw	r5,16(sp)
 80095ac:	a8004216 	blt	r21,zero,80096b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x558>
 80095b0:	d8c01a17 	ldw	r3,104(sp)
 80095b4:	2d45883a 	add	r2,r5,r21
 80095b8:	18805726 	beq	r3,r2,8009718 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b8>
 80095bc:	7880005c 	xori	r2,r15,1
 80095c0:	781b883a 	mov	r13,r15
 80095c4:	5007883a 	mov	r3,r10
 80095c8:	003fe106 	br	8009550 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3f0>
 80095cc:	1021883a 	mov	r16,r2
 80095d0:	003f8806 	br	80093f4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x294>
 80095d4:	03c00184 	movi	r15,6
 80095d8:	00ffb016 	blt	zero,r3,800949c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x33c>
 80095dc:	7815883a 	mov	r10,r15
 80095e0:	7880008c 	andi	r2,r15,2
 80095e4:	781b883a 	mov	r13,r15
 80095e8:	5007883a 	mov	r3,r10
 80095ec:	003f7a06 	br	80093d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x278>
 80095f0:	a039883a 	mov	fp,r20
 80095f4:	e0c00315 	stw	r3,12(fp)
 80095f8:	d8c00417 	ldw	r3,16(sp)
 80095fc:	a0c00015 	stw	r3,0(r20)
 8009600:	d8c00517 	ldw	r3,20(sp)
 8009604:	a0c00115 	stw	r3,4(r20)
 8009608:	003f0106 	br	8009210 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>
 800960c:	002d883a 	mov	r22,zero
 8009610:	003f1106 	br	8009258 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf8>
 8009614:	8005883a 	mov	r2,r16
 8009618:	003efd06 	br	8009210 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>
 800961c:	00bfff84 	movi	r2,-2
 8009620:	b8bfbe1e 	bne	r23,r2,800951c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
 8009624:	003ef706 	br	8009204 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa4>
 8009628:	5080005c 	xori	r2,r10,1
 800962c:	90bf840e 	bge	r18,r2,8009440 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e0>
 8009630:	501b883a 	mov	r13,r10
 8009634:	5080008c 	andi	r2,r10,2
 8009638:	5007883a 	mov	r3,r10
 800963c:	003f6606 	br	80093d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x278>
 8009640:	013fff84 	movi	r4,-2
 8009644:	a9003226 	beq	r21,r4,8009710 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b0>
 8009648:	d9400917 	ldw	r5,36(sp)
 800964c:	d9001a17 	ldw	r4,104(sp)
 8009650:	d9c01917 	ldw	r7,100(sp)
 8009654:	28800017 	ldw	r2,0(r5)
 8009658:	d9000015 	stw	r4,0(sp)
 800965c:	d9000917 	ldw	r4,36(sp)
 8009660:	10800817 	ldw	r2,32(r2)
 8009664:	a80b883a 	mov	r5,r21
 8009668:	d8c00d15 	stw	r3,52(sp)
 800966c:	db400c15 	stw	r13,48(sp)
 8009670:	103ee83a 	callr	r2
 8009674:	1015883a 	mov	r10,r2
 8009678:	101f883a 	mov	r15,r2
 800967c:	db400c17 	ldw	r13,48(sp)
 8009680:	d8c00d17 	ldw	r3,52(sp)
 8009684:	003f6906 	br	800942c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2cc>
 8009688:	d8c00917 	ldw	r3,36(sp)
 800968c:	19400117 	ldw	r5,4(r3)
 8009690:	817ed31e 	bne	r16,r5,80091e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x80>
 8009694:	003ed506 	br	80091ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
 8009698:	5080005c 	xori	r2,r10,1
 800969c:	90bfe416 	blt	r18,r2,8009630 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4d0>
 80096a0:	003f6706 	br	8009440 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e0>
 80096a4:	00800084 	movi	r2,2
 80096a8:	a0800315 	stw	r2,12(r20)
 80096ac:	a0000015 	stw	zero,0(r20)
 80096b0:	00800044 	movi	r2,1
 80096b4:	003ed606 	br	8009210 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>
 80096b8:	013fff84 	movi	r4,-2
 80096bc:	a9002526 	beq	r21,r4,8009754 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5f4>
 80096c0:	d8c00917 	ldw	r3,36(sp)
 80096c4:	d9c01917 	ldw	r7,100(sp)
 80096c8:	d9000917 	ldw	r4,36(sp)
 80096cc:	18800017 	ldw	r2,0(r3)
 80096d0:	d8c01a17 	ldw	r3,104(sp)
 80096d4:	280d883a 	mov	r6,r5
 80096d8:	a80b883a 	mov	r5,r21
 80096dc:	d8c00015 	stw	r3,0(sp)
 80096e0:	10800817 	ldw	r2,32(r2)
 80096e4:	da800c15 	stw	r10,48(sp)
 80096e8:	dbc00d15 	stw	r15,52(sp)
 80096ec:	103ee83a 	callr	r2
 80096f0:	da800c17 	ldw	r10,48(sp)
 80096f4:	1007883a 	mov	r3,r2
 80096f8:	101b883a 	mov	r13,r2
 80096fc:	dbc00d17 	ldw	r15,52(sp)
 8009700:	1284f03a 	xor	r2,r2,r10
 8009704:	003f2c06 	br	80093b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x258>
 8009708:	00800184 	movi	r2,6
 800970c:	003ebe06 	br	8009208 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa8>
 8009710:	00ff4b0e 	bge	zero,r3,8009440 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e0>
 8009714:	003f6006 	br	8009498 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x338>
 8009718:	5080019c 	xori	r2,r10,6
 800971c:	90800916 	blt	r18,r2,8009744 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
 8009720:	50c0018c 	andi	r3,r10,6
 8009724:	90ff460e 	bge	r18,r3,8009440 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e0>
 8009728:	003fde06 	br	80096a4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x544>
 800972c:	d8c01a17 	ldw	r3,104(sp)
 8009730:	2d45883a 	add	r2,r5,r21
 8009734:	18800326 	beq	r3,r2,8009744 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
 8009738:	02800044 	movi	r10,1
 800973c:	501f883a 	mov	r15,r10
 8009740:	003f9e06 	br	80095bc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x45c>
 8009744:	03400184 	movi	r13,6
 8009748:	00800084 	movi	r2,2
 800974c:	6807883a 	mov	r3,r13
 8009750:	003f1d06 	br	80093c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x268>
 8009754:	501b883a 	mov	r13,r10
 8009758:	5080005c 	xori	r2,r10,1
 800975c:	5007883a 	mov	r3,r10
 8009760:	003f7b06 	br	8009550 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3f0>

08009764 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8009764:	deffef04 	addi	sp,sp,-68
 8009768:	ddc00e15 	stw	r23,56(sp)
 800976c:	dd000b15 	stw	r20,44(sp)
 8009770:	dc400815 	stw	r17,32(sp)
 8009774:	3029883a 	mov	r20,r6
 8009778:	dfc01015 	stw	ra,64(sp)
 800977c:	df000f15 	stw	fp,60(sp)
 8009780:	dd800d15 	stw	r22,52(sp)
 8009784:	dd400c15 	stw	r21,48(sp)
 8009788:	dcc00a15 	stw	r19,40(sp)
 800978c:	dc800915 	stw	r18,36(sp)
 8009790:	dc000715 	stw	r16,28(sp)
 8009794:	d9000515 	stw	r4,20(sp)
 8009798:	2823883a 	mov	r17,r5
 800979c:	382f883a 	mov	r23,r7
 80097a0:	8009b0c0 	call	8009b0c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80097a4:	100d883a 	mov	r6,r2
 80097a8:	10803fcc 	andi	r2,r2,255
 80097ac:	1000441e 	bne	r2,zero,80098c0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x15c>
 80097b0:	bc000217 	ldw	r16,8(r23)
 80097b4:	8080040c 	andi	r2,r16,16
 80097b8:	10000226 	beq	r2,zero,80097c4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x60>
 80097bc:	d8c00517 	ldw	r3,20(sp)
 80097c0:	1c000217 	ldw	r16,8(r3)
 80097c4:	d8c00517 	ldw	r3,20(sp)
 80097c8:	d8800517 	ldw	r2,20(sp)
 80097cc:	1f000317 	ldw	fp,12(r3)
 80097d0:	e01090fa 	slli	r8,fp,3
 80097d4:	40c00304 	addi	r3,r8,12
 80097d8:	10ed883a 	add	r22,r2,r3
 80097dc:	80c0004c 	andi	r3,r16,1
 80097e0:	42000204 	addi	r8,r8,8
 80097e4:	d8c00415 	stw	r3,16(sp)
 80097e8:	122b883a 	add	r21,r2,r8
 80097ec:	e0003226 	beq	fp,zero,80098b8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x154>
 80097f0:	b1800017 	ldw	r6,0(r22)
 80097f4:	d8000015 	stw	zero,0(sp)
 80097f8:	d8000115 	stw	zero,4(sp)
 80097fc:	dc000215 	stw	r16,8(sp)
 8009800:	d8000315 	stw	zero,12(sp)
 8009804:	34c0008c 	andi	r19,r6,2
 8009808:	3480004c 	andi	r18,r6,1
 800980c:	9800021e 	bne	r19,zero,8009818 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xb4>
 8009810:	d8c00417 	ldw	r3,16(sp)
 8009814:	18002426 	beq	r3,zero,80098a8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
 8009818:	a0003626 	beq	r20,zero,80098f4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x190>
 800981c:	300dd23a 	srai	r6,r6,8
 8009820:	90000326 	beq	r18,zero,8009830 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 8009824:	a0800017 	ldw	r2,0(r20)
 8009828:	118d883a 	add	r6,r2,r6
 800982c:	31800017 	ldw	r6,0(r6)
 8009830:	a18d883a 	add	r6,r20,r6
 8009834:	a9000017 	ldw	r4,0(r21)
 8009838:	d80f883a 	mov	r7,sp
 800983c:	880b883a 	mov	r5,r17
 8009840:	20800017 	ldw	r2,0(r4)
 8009844:	10800617 	ldw	r2,24(r2)
 8009848:	103ee83a 	callr	r2
 800984c:	100d883a 	mov	r6,r2
 8009850:	10803fcc 	andi	r2,r2,255
 8009854:	10001426 	beq	r2,zero,80098a8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
 8009858:	d8800317 	ldw	r2,12(sp)
 800985c:	00c00204 	movi	r3,8
 8009860:	10c02626 	beq	r2,r3,80098fc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x198>
 8009864:	d8800117 	ldw	r2,4(sp)
 8009868:	00c000c4 	movi	r3,3
 800986c:	1880040e 	bge	r3,r2,8009880 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
 8009870:	9800031e 	bne	r19,zero,8009880 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
 8009874:	00ffff44 	movi	r3,-3
 8009878:	10c4703a 	and	r2,r2,r3
 800987c:	d8800115 	stw	r2,4(sp)
 8009880:	b9400317 	ldw	r5,12(r23)
 8009884:	28002126 	beq	r5,zero,800990c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a8>
 8009888:	b8800017 	ldw	r2,0(r23)
 800988c:	d9000017 	ldw	r4,0(sp)
 8009890:	11004d1e 	bne	r2,r4,80099c8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x264>
 8009894:	10003126 	beq	r2,zero,800995c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1f8>
 8009898:	b9000117 	ldw	r4,4(r23)
 800989c:	d8800117 	ldw	r2,4(sp)
 80098a0:	2084b03a 	or	r2,r4,r2
 80098a4:	b8800115 	stw	r2,4(r23)
 80098a8:	e73fffc4 	addi	fp,fp,-1
 80098ac:	b5bffe04 	addi	r22,r22,-8
 80098b0:	ad7ffe04 	addi	r21,r21,-8
 80098b4:	e03fce1e 	bne	fp,zero,80097f0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x8c>
 80098b8:	b9800117 	ldw	r6,4(r23)
 80098bc:	300cc03a 	cmpne	r6,r6,zero
 80098c0:	3005883a 	mov	r2,r6
 80098c4:	dfc01017 	ldw	ra,64(sp)
 80098c8:	df000f17 	ldw	fp,60(sp)
 80098cc:	ddc00e17 	ldw	r23,56(sp)
 80098d0:	dd800d17 	ldw	r22,52(sp)
 80098d4:	dd400c17 	ldw	r21,48(sp)
 80098d8:	dd000b17 	ldw	r20,44(sp)
 80098dc:	dcc00a17 	ldw	r19,40(sp)
 80098e0:	dc800917 	ldw	r18,36(sp)
 80098e4:	dc400817 	ldw	r17,32(sp)
 80098e8:	dc000717 	ldw	r16,28(sp)
 80098ec:	dec01104 	addi	sp,sp,68
 80098f0:	f800283a 	ret
 80098f4:	000d883a 	mov	r6,zero
 80098f8:	003fce06 	br	8009834 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd0>
 80098fc:	903fd926 	beq	r18,zero,8009864 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x100>
 8009900:	a8800017 	ldw	r2,0(r21)
 8009904:	d8800315 	stw	r2,12(sp)
 8009908:	003fd606 	br	8009864 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x100>
 800990c:	d9000017 	ldw	r4,0(sp)
 8009910:	d8800117 	ldw	r2,4(sp)
 8009914:	00c000c4 	movi	r3,3
 8009918:	b9000015 	stw	r4,0(r23)
 800991c:	d9000217 	ldw	r4,8(sp)
 8009920:	b8800115 	stw	r2,4(r23)
 8009924:	b9000215 	stw	r4,8(r23)
 8009928:	d9000317 	ldw	r4,12(sp)
 800992c:	b9000315 	stw	r4,12(r23)
 8009930:	18bfe30e 	bge	r3,r2,80098c0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x15c>
 8009934:	1100008c 	andi	r4,r2,2
 8009938:	20001926 	beq	r4,zero,80099a0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x23c>
 800993c:	d8c00517 	ldw	r3,20(sp)
 8009940:	18800217 	ldw	r2,8(r3)
 8009944:	1080004c 	andi	r2,r2,1
 8009948:	103fdd26 	beq	r2,zero,80098c0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x15c>
 800994c:	e73fffc4 	addi	fp,fp,-1
 8009950:	b5bffe04 	addi	r22,r22,-8
 8009954:	ad7ffe04 	addi	r21,r21,-8
 8009958:	003fd606 	br	80098b4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x150>
 800995c:	d8800317 	ldw	r2,12(sp)
 8009960:	00c00204 	movi	r3,8
 8009964:	10c00b26 	beq	r2,r3,8009994 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
 8009968:	28c00a26 	beq	r5,r3,8009994 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
 800996c:	11000117 	ldw	r4,4(r2)
 8009970:	29400117 	ldw	r5,4(r5)
 8009974:	217fc826 	beq	r4,r5,8009898 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x134>
 8009978:	20800007 	ldb	r2,0(r4)
 800997c:	00c00a84 	movi	r3,42
 8009980:	10c00426 	beq	r2,r3,8009994 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
 8009984:	d9800615 	stw	r6,24(sp)
 8009988:	800af2c0 	call	800af2c <strcmp>
 800998c:	d9800617 	ldw	r6,24(sp)
 8009990:	103fc126 	beq	r2,zero,8009898 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x134>
 8009994:	00800084 	movi	r2,2
 8009998:	b8800115 	stw	r2,4(r23)
 800999c:	003fc806 	br	80098c0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x15c>
 80099a0:	1080004c 	andi	r2,r2,1
 80099a4:	103fc626 	beq	r2,zero,80098c0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x15c>
 80099a8:	d8c00517 	ldw	r3,20(sp)
 80099ac:	18800217 	ldw	r2,8(r3)
 80099b0:	1080008c 	andi	r2,r2,2
 80099b4:	103fc226 	beq	r2,zero,80098c0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x15c>
 80099b8:	e73fffc4 	addi	fp,fp,-1
 80099bc:	b5bffe04 	addi	r22,r22,-8
 80099c0:	ad7ffe04 	addi	r21,r21,-8
 80099c4:	003fbb06 	br	80098b4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x150>
 80099c8:	00800084 	movi	r2,2
 80099cc:	b8000015 	stw	zero,0(r23)
 80099d0:	b8800115 	stw	r2,4(r23)
 80099d4:	003fba06 	br	80098c0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x15c>

080099d8 <_ZNSt9type_infoD1Ev>:
 80099d8:	f800283a 	ret

080099dc <_ZNKSt9type_info14__is_pointer_pEv>:
 80099dc:	0005883a 	mov	r2,zero
 80099e0:	f800283a 	ret

080099e4 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 80099e4:	0005883a 	mov	r2,zero
 80099e8:	f800283a 	ret

080099ec <_ZNSt9type_infoD0Ev>:
 80099ec:	8009a341 	jmpi	8009a34 <_ZdlPv>

080099f0 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 80099f0:	21000117 	ldw	r4,4(r4)
 80099f4:	29400117 	ldw	r5,4(r5)
 80099f8:	21400c26 	beq	r4,r5,8009a2c <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
 80099fc:	20c00007 	ldb	r3,0(r4)
 8009a00:	00800a84 	movi	r2,42
 8009a04:	18800726 	beq	r3,r2,8009a24 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
 8009a08:	deffff04 	addi	sp,sp,-4
 8009a0c:	dfc00015 	stw	ra,0(sp)
 8009a10:	800af2c0 	call	800af2c <strcmp>
 8009a14:	1005003a 	cmpeq	r2,r2,zero
 8009a18:	dfc00017 	ldw	ra,0(sp)
 8009a1c:	dec00104 	addi	sp,sp,4
 8009a20:	f800283a 	ret
 8009a24:	0005883a 	mov	r2,zero
 8009a28:	f800283a 	ret
 8009a2c:	00800044 	movi	r2,1
 8009a30:	f800283a 	ret

08009a34 <_ZdlPv>:
 8009a34:	800a26c1 	jmpi	800a26c <free>

08009a38 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8009a38:	20800017 	ldw	r2,0(r4)
 8009a3c:	defffa04 	addi	sp,sp,-24
 8009a40:	dc000415 	stw	r16,16(sp)
 8009a44:	10800617 	ldw	r2,24(r2)
 8009a48:	3021883a 	mov	r16,r6
 8009a4c:	31800017 	ldw	r6,0(r6)
 8009a50:	00c00404 	movi	r3,16
 8009a54:	d8c00215 	stw	r3,8(sp)
 8009a58:	dfc00515 	stw	ra,20(sp)
 8009a5c:	d8000015 	stw	zero,0(sp)
 8009a60:	d8000115 	stw	zero,4(sp)
 8009a64:	d8000315 	stw	zero,12(sp)
 8009a68:	d80f883a 	mov	r7,sp
 8009a6c:	103ee83a 	callr	r2
 8009a70:	d8800117 	ldw	r2,4(sp)
 8009a74:	00c00184 	movi	r3,6
 8009a78:	1080018c 	andi	r2,r2,6
 8009a7c:	10c00526 	beq	r2,r3,8009a94 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
 8009a80:	0005883a 	mov	r2,zero
 8009a84:	dfc00517 	ldw	ra,20(sp)
 8009a88:	dc000417 	ldw	r16,16(sp)
 8009a8c:	dec00604 	addi	sp,sp,24
 8009a90:	f800283a 	ret
 8009a94:	d8c00017 	ldw	r3,0(sp)
 8009a98:	00800044 	movi	r2,1
 8009a9c:	80c00015 	stw	r3,0(r16)
 8009aa0:	dfc00517 	ldw	ra,20(sp)
 8009aa4:	dc000417 	ldw	r16,16(sp)
 8009aa8:	dec00604 	addi	sp,sp,24
 8009aac:	f800283a 	ret

08009ab0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8009ab0:	d8800017 	ldw	r2,0(sp)
 8009ab4:	11800226 	beq	r2,r6,8009ac0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
 8009ab8:	00800044 	movi	r2,1
 8009abc:	f800283a 	ret
 8009ac0:	00800184 	movi	r2,6
 8009ac4:	f800283a 	ret

08009ac8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8009ac8:	008200b4 	movhi	r2,2050
 8009acc:	10aa7104 	addi	r2,r2,-22076
 8009ad0:	20800015 	stw	r2,0(r4)
 8009ad4:	80099d81 	jmpi	80099d8 <_ZNSt9type_infoD1Ev>

08009ad8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8009ad8:	defffe04 	addi	sp,sp,-8
 8009adc:	008200b4 	movhi	r2,2050
 8009ae0:	dc000015 	stw	r16,0(sp)
 8009ae4:	dfc00115 	stw	ra,4(sp)
 8009ae8:	10aa7104 	addi	r2,r2,-22076
 8009aec:	20800015 	stw	r2,0(r4)
 8009af0:	2021883a 	mov	r16,r4
 8009af4:	80099d80 	call	80099d8 <_ZNSt9type_infoD1Ev>
 8009af8:	8009883a 	mov	r4,r16
 8009afc:	dfc00117 	ldw	ra,4(sp)
 8009b00:	dc000017 	ldw	r16,0(sp)
 8009b04:	dec00204 	addi	sp,sp,8
 8009b08:	8009a341 	jmpi	8009a34 <_ZdlPv>

08009b0c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8009b0c:	21000117 	ldw	r4,4(r4)
 8009b10:	29400117 	ldw	r5,4(r5)
 8009b14:	defffd04 	addi	sp,sp,-12
 8009b18:	dc400115 	stw	r17,4(sp)
 8009b1c:	dc000015 	stw	r16,0(sp)
 8009b20:	dfc00215 	stw	ra,8(sp)
 8009b24:	3023883a 	mov	r17,r6
 8009b28:	3821883a 	mov	r16,r7
 8009b2c:	21400526 	beq	r4,r5,8009b44 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
 8009b30:	20c00007 	ldb	r3,0(r4)
 8009b34:	00800a84 	movi	r2,42
 8009b38:	18800d26 	beq	r3,r2,8009b70 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
 8009b3c:	800af2c0 	call	800af2c <strcmp>
 8009b40:	10000b1e 	bne	r2,zero,8009b70 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
 8009b44:	00800204 	movi	r2,8
 8009b48:	80800315 	stw	r2,12(r16)
 8009b4c:	00800184 	movi	r2,6
 8009b50:	80800115 	stw	r2,4(r16)
 8009b54:	84400015 	stw	r17,0(r16)
 8009b58:	00800044 	movi	r2,1
 8009b5c:	dfc00217 	ldw	ra,8(sp)
 8009b60:	dc400117 	ldw	r17,4(sp)
 8009b64:	dc000017 	ldw	r16,0(sp)
 8009b68:	dec00304 	addi	sp,sp,12
 8009b6c:	f800283a 	ret
 8009b70:	0005883a 	mov	r2,zero
 8009b74:	003ff906 	br	8009b5c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x50>

08009b78 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8009b78:	defffa04 	addi	sp,sp,-24
 8009b7c:	dc800415 	stw	r18,16(sp)
 8009b80:	d8800817 	ldw	r2,32(sp)
 8009b84:	dc800617 	ldw	r18,24(sp)
 8009b88:	dc400315 	stw	r17,12(sp)
 8009b8c:	dc000215 	stw	r16,8(sp)
 8009b90:	dfc00515 	stw	ra,20(sp)
 8009b94:	dc400917 	ldw	r17,36(sp)
 8009b98:	24000117 	ldw	r16,4(r4)
 8009b9c:	90801526 	beq	r18,r2,8009bf4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
 8009ba0:	39400117 	ldw	r5,4(r7)
 8009ba4:	2c000826 	beq	r5,r16,8009bc8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
 8009ba8:	80c00007 	ldb	r3,0(r16)
 8009bac:	00800a84 	movi	r2,42
 8009bb0:	18800926 	beq	r3,r2,8009bd8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 8009bb4:	8009883a 	mov	r4,r16
 8009bb8:	d9800115 	stw	r6,4(sp)
 8009bbc:	800af2c0 	call	800af2c <strcmp>
 8009bc0:	d9800117 	ldw	r6,4(sp)
 8009bc4:	1000041e 	bne	r2,zero,8009bd8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 8009bc8:	00800044 	movi	r2,1
 8009bcc:	8c800015 	stw	r18,0(r17)
 8009bd0:	89800115 	stw	r6,4(r17)
 8009bd4:	88800315 	stw	r2,12(r17)
 8009bd8:	0005883a 	mov	r2,zero
 8009bdc:	dfc00517 	ldw	ra,20(sp)
 8009be0:	dc800417 	ldw	r18,16(sp)
 8009be4:	dc400317 	ldw	r17,12(sp)
 8009be8:	dc000217 	ldw	r16,8(sp)
 8009bec:	dec00604 	addi	sp,sp,24
 8009bf0:	f800283a 	ret
 8009bf4:	d8800717 	ldw	r2,28(sp)
 8009bf8:	11400117 	ldw	r5,4(r2)
 8009bfc:	81400a26 	beq	r16,r5,8009c28 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
 8009c00:	80c00007 	ldb	r3,0(r16)
 8009c04:	00800a84 	movi	r2,42
 8009c08:	18800c26 	beq	r3,r2,8009c3c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
 8009c0c:	8009883a 	mov	r4,r16
 8009c10:	d9800115 	stw	r6,4(sp)
 8009c14:	d9c00015 	stw	r7,0(sp)
 8009c18:	800af2c0 	call	800af2c <strcmp>
 8009c1c:	d9800117 	ldw	r6,4(sp)
 8009c20:	d9c00017 	ldw	r7,0(sp)
 8009c24:	1000021e 	bne	r2,zero,8009c30 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
 8009c28:	89800215 	stw	r6,8(r17)
 8009c2c:	003fea06 	br	8009bd8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 8009c30:	39400117 	ldw	r5,4(r7)
 8009c34:	817fdf1e 	bne	r16,r5,8009bb4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
 8009c38:	003fe306 	br	8009bc8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
 8009c3c:	38800117 	ldw	r2,4(r7)
 8009c40:	80bfe51e 	bne	r16,r2,8009bd8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 8009c44:	003fe006 	br	8009bc8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>

08009c48 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8009c48:	20800117 	ldw	r2,4(r4)
 8009c4c:	28c00117 	ldw	r3,4(r5)
 8009c50:	10c02926 	beq	r2,r3,8009cf8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
 8009c54:	defffb04 	addi	sp,sp,-20
 8009c58:	dcc00315 	stw	r19,12(sp)
 8009c5c:	dc800215 	stw	r18,8(sp)
 8009c60:	dc400115 	stw	r17,4(sp)
 8009c64:	dc000015 	stw	r16,0(sp)
 8009c68:	dfc00415 	stw	ra,16(sp)
 8009c6c:	2821883a 	mov	r16,r5
 8009c70:	11400007 	ldb	r5,0(r2)
 8009c74:	2025883a 	mov	r18,r4
 8009c78:	01000a84 	movi	r4,42
 8009c7c:	3823883a 	mov	r17,r7
 8009c80:	3027883a 	mov	r19,r6
 8009c84:	29000626 	beq	r5,r4,8009ca0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 8009c88:	180b883a 	mov	r5,r3
 8009c8c:	1009883a 	mov	r4,r2
 8009c90:	800af2c0 	call	800af2c <strcmp>
 8009c94:	1000021e 	bne	r2,zero,8009ca0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 8009c98:	00800044 	movi	r2,1
 8009c9c:	00000306 	br	8009cac <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
 8009ca0:	008000c4 	movi	r2,3
 8009ca4:	1440082e 	bgeu	r2,r17,8009cc8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
 8009ca8:	0005883a 	mov	r2,zero
 8009cac:	dfc00417 	ldw	ra,16(sp)
 8009cb0:	dcc00317 	ldw	r19,12(sp)
 8009cb4:	dc800217 	ldw	r18,8(sp)
 8009cb8:	dc400117 	ldw	r17,4(sp)
 8009cbc:	dc000017 	ldw	r16,0(sp)
 8009cc0:	dec00504 	addi	sp,sp,20
 8009cc4:	f800283a 	ret
 8009cc8:	80800017 	ldw	r2,0(r16)
 8009ccc:	980d883a 	mov	r6,r19
 8009cd0:	900b883a 	mov	r5,r18
 8009cd4:	10800517 	ldw	r2,20(r2)
 8009cd8:	8009883a 	mov	r4,r16
 8009cdc:	dfc00417 	ldw	ra,16(sp)
 8009ce0:	dcc00317 	ldw	r19,12(sp)
 8009ce4:	dc800217 	ldw	r18,8(sp)
 8009ce8:	dc400117 	ldw	r17,4(sp)
 8009cec:	dc000017 	ldw	r16,0(sp)
 8009cf0:	dec00504 	addi	sp,sp,20
 8009cf4:	1000683a 	jmp	r2
 8009cf8:	00800044 	movi	r2,1
 8009cfc:	f800283a 	ret

08009d00 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8009d00:	008200b4 	movhi	r2,2050
 8009d04:	10aa8904 	addi	r2,r2,-21980
 8009d08:	20800015 	stw	r2,0(r4)
 8009d0c:	8009ac81 	jmpi	8009ac8 <_ZN10__cxxabiv117__class_type_infoD1Ev>

08009d10 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8009d10:	defffe04 	addi	sp,sp,-8
 8009d14:	008200b4 	movhi	r2,2050
 8009d18:	dc000015 	stw	r16,0(sp)
 8009d1c:	dfc00115 	stw	ra,4(sp)
 8009d20:	10aa8904 	addi	r2,r2,-21980
 8009d24:	20800015 	stw	r2,0(r4)
 8009d28:	2021883a 	mov	r16,r4
 8009d2c:	8009ac80 	call	8009ac8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8009d30:	8009883a 	mov	r4,r16
 8009d34:	dfc00117 	ldw	ra,4(sp)
 8009d38:	dc000017 	ldw	r16,0(sp)
 8009d3c:	dec00204 	addi	sp,sp,8
 8009d40:	8009a341 	jmpi	8009a34 <_ZdlPv>

08009d44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8009d44:	defff504 	addi	sp,sp,-44
 8009d48:	dc000115 	stw	r16,4(sp)
 8009d4c:	38800117 	ldw	r2,4(r7)
 8009d50:	24000117 	ldw	r16,4(r4)
 8009d54:	df000915 	stw	fp,36(sp)
 8009d58:	ddc00815 	stw	r23,32(sp)
 8009d5c:	dd800715 	stw	r22,28(sp)
 8009d60:	dcc00415 	stw	r19,16(sp)
 8009d64:	dc800315 	stw	r18,12(sp)
 8009d68:	dc400215 	stw	r17,8(sp)
 8009d6c:	dfc00a15 	stw	ra,40(sp)
 8009d70:	dd400615 	stw	r21,24(sp)
 8009d74:	dd000515 	stw	r20,20(sp)
 8009d78:	2823883a 	mov	r17,r5
 8009d7c:	3039883a 	mov	fp,r6
 8009d80:	dcc00b17 	ldw	r19,44(sp)
 8009d84:	ddc00c17 	ldw	r23,48(sp)
 8009d88:	dd800d17 	ldw	r22,52(sp)
 8009d8c:	dc800e17 	ldw	r18,56(sp)
 8009d90:	80800b26 	beq	r16,r2,8009dc0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
 8009d94:	80c00007 	ldb	r3,0(r16)
 8009d98:	2029883a 	mov	r20,r4
 8009d9c:	01000a84 	movi	r4,42
 8009da0:	382b883a 	mov	r21,r7
 8009da4:	19001a26 	beq	r3,r4,8009e10 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
 8009da8:	100b883a 	mov	r5,r2
 8009dac:	8009883a 	mov	r4,r16
 8009db0:	d8c00015 	stw	r3,0(sp)
 8009db4:	800af2c0 	call	800af2c <strcmp>
 8009db8:	d8c00017 	ldw	r3,0(sp)
 8009dbc:	1000141e 	bne	r2,zero,8009e10 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
 8009dc0:	94c00015 	stw	r19,0(r18)
 8009dc4:	97000115 	stw	fp,4(r18)
 8009dc8:	88002816 	blt	r17,zero,8009e6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
 8009dcc:	9c63883a 	add	r17,r19,r17
 8009dd0:	b4403226 	beq	r22,r17,8009e9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
 8009dd4:	00800044 	movi	r2,1
 8009dd8:	90800315 	stw	r2,12(r18)
 8009ddc:	0005883a 	mov	r2,zero
 8009de0:	dfc00a17 	ldw	ra,40(sp)
 8009de4:	df000917 	ldw	fp,36(sp)
 8009de8:	ddc00817 	ldw	r23,32(sp)
 8009dec:	dd800717 	ldw	r22,28(sp)
 8009df0:	dd400617 	ldw	r21,24(sp)
 8009df4:	dd000517 	ldw	r20,20(sp)
 8009df8:	dcc00417 	ldw	r19,16(sp)
 8009dfc:	dc800317 	ldw	r18,12(sp)
 8009e00:	dc400217 	ldw	r17,8(sp)
 8009e04:	dc000117 	ldw	r16,4(sp)
 8009e08:	dec00b04 	addi	sp,sp,44
 8009e0c:	f800283a 	ret
 8009e10:	9d801926 	beq	r19,r22,8009e78 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
 8009e14:	a1000217 	ldw	r4,8(r20)
 8009e18:	a80f883a 	mov	r7,r21
 8009e1c:	e00d883a 	mov	r6,fp
 8009e20:	20800017 	ldw	r2,0(r4)
 8009e24:	dc800e15 	stw	r18,56(sp)
 8009e28:	dd800d15 	stw	r22,52(sp)
 8009e2c:	ddc00c15 	stw	r23,48(sp)
 8009e30:	dcc00b15 	stw	r19,44(sp)
 8009e34:	10800717 	ldw	r2,28(r2)
 8009e38:	880b883a 	mov	r5,r17
 8009e3c:	dfc00a17 	ldw	ra,40(sp)
 8009e40:	df000917 	ldw	fp,36(sp)
 8009e44:	ddc00817 	ldw	r23,32(sp)
 8009e48:	dd800717 	ldw	r22,28(sp)
 8009e4c:	dd400617 	ldw	r21,24(sp)
 8009e50:	dd000517 	ldw	r20,20(sp)
 8009e54:	dcc00417 	ldw	r19,16(sp)
 8009e58:	dc800317 	ldw	r18,12(sp)
 8009e5c:	dc400217 	ldw	r17,8(sp)
 8009e60:	dc000117 	ldw	r16,4(sp)
 8009e64:	dec00b04 	addi	sp,sp,44
 8009e68:	1000683a 	jmp	r2
 8009e6c:	00bfff84 	movi	r2,-2
 8009e70:	88bfda1e 	bne	r17,r2,8009ddc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x98>
 8009e74:	003fd706 	br	8009dd4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x90>
 8009e78:	b9400117 	ldw	r5,4(r23)
 8009e7c:	81400526 	beq	r16,r5,8009e94 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
 8009e80:	00800a84 	movi	r2,42
 8009e84:	18bfe326 	beq	r3,r2,8009e14 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xd0>
 8009e88:	8009883a 	mov	r4,r16
 8009e8c:	800af2c0 	call	800af2c <strcmp>
 8009e90:	103fe01e 	bne	r2,zero,8009e14 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xd0>
 8009e94:	97000215 	stw	fp,8(r18)
 8009e98:	003fd006 	br	8009ddc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x98>
 8009e9c:	00800184 	movi	r2,6
 8009ea0:	003fcd06 	br	8009dd8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x94>

08009ea4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8009ea4:	defffa04 	addi	sp,sp,-24
 8009ea8:	dc000215 	stw	r16,8(sp)
 8009eac:	dc000617 	ldw	r16,24(sp)
 8009eb0:	dc800415 	stw	r18,16(sp)
 8009eb4:	dc400315 	stw	r17,12(sp)
 8009eb8:	dfc00515 	stw	ra,20(sp)
 8009ebc:	2023883a 	mov	r17,r4
 8009ec0:	2825883a 	mov	r18,r5
 8009ec4:	81800b26 	beq	r16,r6,8009ef4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
 8009ec8:	89000217 	ldw	r4,8(r17)
 8009ecc:	900b883a 	mov	r5,r18
 8009ed0:	20800017 	ldw	r2,0(r4)
 8009ed4:	dc000615 	stw	r16,24(sp)
 8009ed8:	10800817 	ldw	r2,32(r2)
 8009edc:	dfc00517 	ldw	ra,20(sp)
 8009ee0:	dc800417 	ldw	r18,16(sp)
 8009ee4:	dc400317 	ldw	r17,12(sp)
 8009ee8:	dc000217 	ldw	r16,8(sp)
 8009eec:	dec00604 	addi	sp,sp,24
 8009ef0:	1000683a 	jmp	r2
 8009ef4:	21000117 	ldw	r4,4(r4)
 8009ef8:	39400117 	ldw	r5,4(r7)
 8009efc:	21400926 	beq	r4,r5,8009f24 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
 8009f00:	20c00007 	ldb	r3,0(r4)
 8009f04:	00800a84 	movi	r2,42
 8009f08:	18bfef26 	beq	r3,r2,8009ec8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 8009f0c:	d9800015 	stw	r6,0(sp)
 8009f10:	d9c00115 	stw	r7,4(sp)
 8009f14:	800af2c0 	call	800af2c <strcmp>
 8009f18:	d9800017 	ldw	r6,0(sp)
 8009f1c:	d9c00117 	ldw	r7,4(sp)
 8009f20:	103fe91e 	bne	r2,zero,8009ec8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 8009f24:	00800184 	movi	r2,6
 8009f28:	dfc00517 	ldw	ra,20(sp)
 8009f2c:	dc800417 	ldw	r18,16(sp)
 8009f30:	dc400317 	ldw	r17,12(sp)
 8009f34:	dc000217 	ldw	r16,8(sp)
 8009f38:	dec00604 	addi	sp,sp,24
 8009f3c:	f800283a 	ret

08009f40 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8009f40:	defffb04 	addi	sp,sp,-20
 8009f44:	dcc00315 	stw	r19,12(sp)
 8009f48:	dc800215 	stw	r18,8(sp)
 8009f4c:	dc400115 	stw	r17,4(sp)
 8009f50:	dc000015 	stw	r16,0(sp)
 8009f54:	dfc00415 	stw	ra,16(sp)
 8009f58:	2027883a 	mov	r19,r4
 8009f5c:	2821883a 	mov	r16,r5
 8009f60:	3023883a 	mov	r17,r6
 8009f64:	3825883a 	mov	r18,r7
 8009f68:	8009b0c0 	call	8009b0c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8009f6c:	10c03fcc 	andi	r3,r2,255
 8009f70:	18000726 	beq	r3,zero,8009f90 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
 8009f74:	dfc00417 	ldw	ra,16(sp)
 8009f78:	dcc00317 	ldw	r19,12(sp)
 8009f7c:	dc800217 	ldw	r18,8(sp)
 8009f80:	dc400117 	ldw	r17,4(sp)
 8009f84:	dc000017 	ldw	r16,0(sp)
 8009f88:	dec00504 	addi	sp,sp,20
 8009f8c:	f800283a 	ret
 8009f90:	99000217 	ldw	r4,8(r19)
 8009f94:	900f883a 	mov	r7,r18
 8009f98:	880d883a 	mov	r6,r17
 8009f9c:	20800017 	ldw	r2,0(r4)
 8009fa0:	800b883a 	mov	r5,r16
 8009fa4:	10800617 	ldw	r2,24(r2)
 8009fa8:	dfc00417 	ldw	ra,16(sp)
 8009fac:	dcc00317 	ldw	r19,12(sp)
 8009fb0:	dc800217 	ldw	r18,8(sp)
 8009fb4:	dc400117 	ldw	r17,4(sp)
 8009fb8:	dc000017 	ldw	r16,0(sp)
 8009fbc:	dec00504 	addi	sp,sp,20
 8009fc0:	1000683a 	jmp	r2

08009fc4 <__divsi3>:
 8009fc4:	20001b16 	blt	r4,zero,800a034 <__divsi3+0x70>
 8009fc8:	000f883a 	mov	r7,zero
 8009fcc:	28001616 	blt	r5,zero,800a028 <__divsi3+0x64>
 8009fd0:	200d883a 	mov	r6,r4
 8009fd4:	29001a2e 	bgeu	r5,r4,800a040 <__divsi3+0x7c>
 8009fd8:	00800804 	movi	r2,32
 8009fdc:	00c00044 	movi	r3,1
 8009fe0:	00000106 	br	8009fe8 <__divsi3+0x24>
 8009fe4:	10000d26 	beq	r2,zero,800a01c <__divsi3+0x58>
 8009fe8:	294b883a 	add	r5,r5,r5
 8009fec:	10bfffc4 	addi	r2,r2,-1
 8009ff0:	18c7883a 	add	r3,r3,r3
 8009ff4:	293ffb36 	bltu	r5,r4,8009fe4 <__divsi3+0x20>
 8009ff8:	0005883a 	mov	r2,zero
 8009ffc:	18000726 	beq	r3,zero,800a01c <__divsi3+0x58>
 800a000:	0005883a 	mov	r2,zero
 800a004:	31400236 	bltu	r6,r5,800a010 <__divsi3+0x4c>
 800a008:	314dc83a 	sub	r6,r6,r5
 800a00c:	10c4b03a 	or	r2,r2,r3
 800a010:	1806d07a 	srli	r3,r3,1
 800a014:	280ad07a 	srli	r5,r5,1
 800a018:	183ffa1e 	bne	r3,zero,800a004 <__divsi3+0x40>
 800a01c:	38000126 	beq	r7,zero,800a024 <__divsi3+0x60>
 800a020:	0085c83a 	sub	r2,zero,r2
 800a024:	f800283a 	ret
 800a028:	014bc83a 	sub	r5,zero,r5
 800a02c:	39c0005c 	xori	r7,r7,1
 800a030:	003fe706 	br	8009fd0 <__divsi3+0xc>
 800a034:	0109c83a 	sub	r4,zero,r4
 800a038:	01c00044 	movi	r7,1
 800a03c:	003fe306 	br	8009fcc <__divsi3+0x8>
 800a040:	00c00044 	movi	r3,1
 800a044:	003fee06 	br	800a000 <__divsi3+0x3c>

0800a048 <__modsi3>:
 800a048:	20001716 	blt	r4,zero,800a0a8 <__modsi3+0x60>
 800a04c:	000f883a 	mov	r7,zero
 800a050:	2005883a 	mov	r2,r4
 800a054:	28001216 	blt	r5,zero,800a0a0 <__modsi3+0x58>
 800a058:	2900162e 	bgeu	r5,r4,800a0b4 <__modsi3+0x6c>
 800a05c:	01800804 	movi	r6,32
 800a060:	00c00044 	movi	r3,1
 800a064:	00000106 	br	800a06c <__modsi3+0x24>
 800a068:	30000a26 	beq	r6,zero,800a094 <__modsi3+0x4c>
 800a06c:	294b883a 	add	r5,r5,r5
 800a070:	31bfffc4 	addi	r6,r6,-1
 800a074:	18c7883a 	add	r3,r3,r3
 800a078:	293ffb36 	bltu	r5,r4,800a068 <__modsi3+0x20>
 800a07c:	18000526 	beq	r3,zero,800a094 <__modsi3+0x4c>
 800a080:	1806d07a 	srli	r3,r3,1
 800a084:	11400136 	bltu	r2,r5,800a08c <__modsi3+0x44>
 800a088:	1145c83a 	sub	r2,r2,r5
 800a08c:	280ad07a 	srli	r5,r5,1
 800a090:	183ffb1e 	bne	r3,zero,800a080 <__modsi3+0x38>
 800a094:	38000126 	beq	r7,zero,800a09c <__modsi3+0x54>
 800a098:	0085c83a 	sub	r2,zero,r2
 800a09c:	f800283a 	ret
 800a0a0:	014bc83a 	sub	r5,zero,r5
 800a0a4:	003fec06 	br	800a058 <__modsi3+0x10>
 800a0a8:	0109c83a 	sub	r4,zero,r4
 800a0ac:	01c00044 	movi	r7,1
 800a0b0:	003fe706 	br	800a050 <__modsi3+0x8>
 800a0b4:	00c00044 	movi	r3,1
 800a0b8:	003ff106 	br	800a080 <__modsi3+0x38>

0800a0bc <__udivsi3>:
 800a0bc:	200d883a 	mov	r6,r4
 800a0c0:	2900152e 	bgeu	r5,r4,800a118 <__udivsi3+0x5c>
 800a0c4:	28001416 	blt	r5,zero,800a118 <__udivsi3+0x5c>
 800a0c8:	00800804 	movi	r2,32
 800a0cc:	00c00044 	movi	r3,1
 800a0d0:	00000206 	br	800a0dc <__udivsi3+0x20>
 800a0d4:	10000e26 	beq	r2,zero,800a110 <__udivsi3+0x54>
 800a0d8:	28000516 	blt	r5,zero,800a0f0 <__udivsi3+0x34>
 800a0dc:	294b883a 	add	r5,r5,r5
 800a0e0:	10bfffc4 	addi	r2,r2,-1
 800a0e4:	18c7883a 	add	r3,r3,r3
 800a0e8:	293ffa36 	bltu	r5,r4,800a0d4 <__udivsi3+0x18>
 800a0ec:	18000826 	beq	r3,zero,800a110 <__udivsi3+0x54>
 800a0f0:	0005883a 	mov	r2,zero
 800a0f4:	31400236 	bltu	r6,r5,800a100 <__udivsi3+0x44>
 800a0f8:	314dc83a 	sub	r6,r6,r5
 800a0fc:	10c4b03a 	or	r2,r2,r3
 800a100:	1806d07a 	srli	r3,r3,1
 800a104:	280ad07a 	srli	r5,r5,1
 800a108:	183ffa1e 	bne	r3,zero,800a0f4 <__udivsi3+0x38>
 800a10c:	f800283a 	ret
 800a110:	0005883a 	mov	r2,zero
 800a114:	f800283a 	ret
 800a118:	00c00044 	movi	r3,1
 800a11c:	003ff406 	br	800a0f0 <__udivsi3+0x34>

0800a120 <__umodsi3>:
 800a120:	2005883a 	mov	r2,r4
 800a124:	2900122e 	bgeu	r5,r4,800a170 <__umodsi3+0x50>
 800a128:	28001116 	blt	r5,zero,800a170 <__umodsi3+0x50>
 800a12c:	01800804 	movi	r6,32
 800a130:	00c00044 	movi	r3,1
 800a134:	00000206 	br	800a140 <__umodsi3+0x20>
 800a138:	30000c26 	beq	r6,zero,800a16c <__umodsi3+0x4c>
 800a13c:	28000516 	blt	r5,zero,800a154 <__umodsi3+0x34>
 800a140:	294b883a 	add	r5,r5,r5
 800a144:	31bfffc4 	addi	r6,r6,-1
 800a148:	18c7883a 	add	r3,r3,r3
 800a14c:	293ffa36 	bltu	r5,r4,800a138 <__umodsi3+0x18>
 800a150:	18000626 	beq	r3,zero,800a16c <__umodsi3+0x4c>
 800a154:	1806d07a 	srli	r3,r3,1
 800a158:	11400136 	bltu	r2,r5,800a160 <__umodsi3+0x40>
 800a15c:	1145c83a 	sub	r2,r2,r5
 800a160:	280ad07a 	srli	r5,r5,1
 800a164:	183ffb1e 	bne	r3,zero,800a154 <__umodsi3+0x34>
 800a168:	f800283a 	ret
 800a16c:	f800283a 	ret
 800a170:	00c00044 	movi	r3,1
 800a174:	003ff706 	br	800a154 <__umodsi3+0x34>

0800a178 <__mulsi3>:
 800a178:	0005883a 	mov	r2,zero
 800a17c:	20000726 	beq	r4,zero,800a19c <__mulsi3+0x24>
 800a180:	20c0004c 	andi	r3,r4,1
 800a184:	2008d07a 	srli	r4,r4,1
 800a188:	18000126 	beq	r3,zero,800a190 <__mulsi3+0x18>
 800a18c:	1145883a 	add	r2,r2,r5
 800a190:	294b883a 	add	r5,r5,r5
 800a194:	203ffa1e 	bne	r4,zero,800a180 <__mulsi3+0x8>
 800a198:	f800283a 	ret
 800a19c:	f800283a 	ret

0800a1a0 <clock>:
 800a1a0:	008200b4 	movhi	r2,2050
 800a1a4:	10b22604 	addi	r2,r2,-14184
 800a1a8:	11000017 	ldw	r4,0(r2)
 800a1ac:	defffb04 	addi	sp,sp,-20
 800a1b0:	d80b883a 	mov	r5,sp
 800a1b4:	dfc00415 	stw	ra,16(sp)
 800a1b8:	800b33c0 	call	800b33c <_times_r>
 800a1bc:	00ffffc4 	movi	r3,-1
 800a1c0:	10c00726 	beq	r2,r3,800a1e0 <clock+0x40>
 800a1c4:	d8c00017 	ldw	r3,0(sp)
 800a1c8:	d8800117 	ldw	r2,4(sp)
 800a1cc:	1885883a 	add	r2,r3,r2
 800a1d0:	d8c00217 	ldw	r3,8(sp)
 800a1d4:	10c7883a 	add	r3,r2,r3
 800a1d8:	d8800317 	ldw	r2,12(sp)
 800a1dc:	1885883a 	add	r2,r3,r2
 800a1e0:	dfc00417 	ldw	ra,16(sp)
 800a1e4:	dec00504 	addi	sp,sp,20
 800a1e8:	f800283a 	ret

0800a1ec <__itoa>:
 800a1ec:	30bfff84 	addi	r2,r6,-2
 800a1f0:	00c00884 	movi	r3,34
 800a1f4:	18801436 	bltu	r3,r2,800a248 <__itoa+0x5c>
 800a1f8:	defffe04 	addi	sp,sp,-8
 800a1fc:	dfc00115 	stw	ra,4(sp)
 800a200:	dc000015 	stw	r16,0(sp)
 800a204:	00800284 	movi	r2,10
 800a208:	30800926 	beq	r6,r2,800a230 <__itoa+0x44>
 800a20c:	0005883a 	mov	r2,zero
 800a210:	2821883a 	mov	r16,r5
 800a214:	288b883a 	add	r5,r5,r2
 800a218:	800b3440 	call	800b344 <__utoa>
 800a21c:	8005883a 	mov	r2,r16
 800a220:	dfc00117 	ldw	ra,4(sp)
 800a224:	dc000017 	ldw	r16,0(sp)
 800a228:	dec00204 	addi	sp,sp,8
 800a22c:	f800283a 	ret
 800a230:	203ff60e 	bge	r4,zero,800a20c <__itoa+0x20>
 800a234:	00800b44 	movi	r2,45
 800a238:	28800005 	stb	r2,0(r5)
 800a23c:	0109c83a 	sub	r4,zero,r4
 800a240:	00800044 	movi	r2,1
 800a244:	003ff206 	br	800a210 <__itoa+0x24>
 800a248:	28000005 	stb	zero,0(r5)
 800a24c:	0005883a 	mov	r2,zero
 800a250:	f800283a 	ret

0800a254 <itoa>:
 800a254:	800a1ec1 	jmpi	800a1ec <__itoa>

0800a258 <malloc>:
 800a258:	008200b4 	movhi	r2,2050
 800a25c:	10b22604 	addi	r2,r2,-14184
 800a260:	200b883a 	mov	r5,r4
 800a264:	11000017 	ldw	r4,0(r2)
 800a268:	800a2801 	jmpi	800a280 <_malloc_r>

0800a26c <free>:
 800a26c:	008200b4 	movhi	r2,2050
 800a270:	10b22604 	addi	r2,r2,-14184
 800a274:	200b883a 	mov	r5,r4
 800a278:	11000017 	ldw	r4,0(r2)
 800a27c:	800f9d41 	jmpi	800f9d4 <_free_r>

0800a280 <_malloc_r>:
 800a280:	defff504 	addi	sp,sp,-44
 800a284:	dc800315 	stw	r18,12(sp)
 800a288:	dfc00a15 	stw	ra,40(sp)
 800a28c:	df000915 	stw	fp,36(sp)
 800a290:	ddc00815 	stw	r23,32(sp)
 800a294:	dd800715 	stw	r22,28(sp)
 800a298:	dd400615 	stw	r21,24(sp)
 800a29c:	dd000515 	stw	r20,20(sp)
 800a2a0:	dcc00415 	stw	r19,16(sp)
 800a2a4:	dc400215 	stw	r17,8(sp)
 800a2a8:	dc000115 	stw	r16,4(sp)
 800a2ac:	288002c4 	addi	r2,r5,11
 800a2b0:	00c00584 	movi	r3,22
 800a2b4:	2025883a 	mov	r18,r4
 800a2b8:	18807f2e 	bgeu	r3,r2,800a4b8 <_malloc_r+0x238>
 800a2bc:	047ffe04 	movi	r17,-8
 800a2c0:	1462703a 	and	r17,r2,r17
 800a2c4:	8800a316 	blt	r17,zero,800a554 <_malloc_r+0x2d4>
 800a2c8:	8940a236 	bltu	r17,r5,800a554 <_malloc_r+0x2d4>
 800a2cc:	8017dd40 	call	8017dd4 <__malloc_lock>
 800a2d0:	00807dc4 	movi	r2,503
 800a2d4:	1441e92e 	bgeu	r2,r17,800aa7c <_malloc_r+0x7fc>
 800a2d8:	8804d27a 	srli	r2,r17,9
 800a2dc:	1000a126 	beq	r2,zero,800a564 <_malloc_r+0x2e4>
 800a2e0:	00c00104 	movi	r3,4
 800a2e4:	18811e36 	bltu	r3,r2,800a760 <_malloc_r+0x4e0>
 800a2e8:	8804d1ba 	srli	r2,r17,6
 800a2ec:	12000e44 	addi	r8,r2,57
 800a2f0:	11c00e04 	addi	r7,r2,56
 800a2f4:	4209883a 	add	r4,r8,r8
 800a2f8:	04c200b4 	movhi	r19,2050
 800a2fc:	2109883a 	add	r4,r4,r4
 800a300:	9cec6f04 	addi	r19,r19,-20036
 800a304:	2109883a 	add	r4,r4,r4
 800a308:	9909883a 	add	r4,r19,r4
 800a30c:	24000117 	ldw	r16,4(r4)
 800a310:	213ffe04 	addi	r4,r4,-8
 800a314:	24009726 	beq	r4,r16,800a574 <_malloc_r+0x2f4>
 800a318:	80800117 	ldw	r2,4(r16)
 800a31c:	01bfff04 	movi	r6,-4
 800a320:	014003c4 	movi	r5,15
 800a324:	1184703a 	and	r2,r2,r6
 800a328:	1447c83a 	sub	r3,r2,r17
 800a32c:	28c00716 	blt	r5,r3,800a34c <_malloc_r+0xcc>
 800a330:	1800920e 	bge	r3,zero,800a57c <_malloc_r+0x2fc>
 800a334:	84000317 	ldw	r16,12(r16)
 800a338:	24008e26 	beq	r4,r16,800a574 <_malloc_r+0x2f4>
 800a33c:	80800117 	ldw	r2,4(r16)
 800a340:	1184703a 	and	r2,r2,r6
 800a344:	1447c83a 	sub	r3,r2,r17
 800a348:	28fff90e 	bge	r5,r3,800a330 <_malloc_r+0xb0>
 800a34c:	3809883a 	mov	r4,r7
 800a350:	018200b4 	movhi	r6,2050
 800a354:	9c000417 	ldw	r16,16(r19)
 800a358:	31ac6f04 	addi	r6,r6,-20036
 800a35c:	32000204 	addi	r8,r6,8
 800a360:	82013426 	beq	r16,r8,800a834 <_malloc_r+0x5b4>
 800a364:	80c00117 	ldw	r3,4(r16)
 800a368:	00bfff04 	movi	r2,-4
 800a36c:	188e703a 	and	r7,r3,r2
 800a370:	3c45c83a 	sub	r2,r7,r17
 800a374:	00c003c4 	movi	r3,15
 800a378:	18811f16 	blt	r3,r2,800a7f8 <_malloc_r+0x578>
 800a37c:	32000515 	stw	r8,20(r6)
 800a380:	32000415 	stw	r8,16(r6)
 800a384:	10007f0e 	bge	r2,zero,800a584 <_malloc_r+0x304>
 800a388:	00807fc4 	movi	r2,511
 800a38c:	11c0fd36 	bltu	r2,r7,800a784 <_malloc_r+0x504>
 800a390:	3806d0fa 	srli	r3,r7,3
 800a394:	01c00044 	movi	r7,1
 800a398:	30800117 	ldw	r2,4(r6)
 800a39c:	19400044 	addi	r5,r3,1
 800a3a0:	294b883a 	add	r5,r5,r5
 800a3a4:	1807d0ba 	srai	r3,r3,2
 800a3a8:	294b883a 	add	r5,r5,r5
 800a3ac:	294b883a 	add	r5,r5,r5
 800a3b0:	298b883a 	add	r5,r5,r6
 800a3b4:	38c6983a 	sll	r3,r7,r3
 800a3b8:	29c00017 	ldw	r7,0(r5)
 800a3bc:	2a7ffe04 	addi	r9,r5,-8
 800a3c0:	1886b03a 	or	r3,r3,r2
 800a3c4:	82400315 	stw	r9,12(r16)
 800a3c8:	81c00215 	stw	r7,8(r16)
 800a3cc:	30c00115 	stw	r3,4(r6)
 800a3d0:	2c000015 	stw	r16,0(r5)
 800a3d4:	3c000315 	stw	r16,12(r7)
 800a3d8:	2005d0ba 	srai	r2,r4,2
 800a3dc:	01400044 	movi	r5,1
 800a3e0:	288a983a 	sll	r5,r5,r2
 800a3e4:	19406f36 	bltu	r3,r5,800a5a4 <_malloc_r+0x324>
 800a3e8:	28c4703a 	and	r2,r5,r3
 800a3ec:	10000a1e 	bne	r2,zero,800a418 <_malloc_r+0x198>
 800a3f0:	00bfff04 	movi	r2,-4
 800a3f4:	294b883a 	add	r5,r5,r5
 800a3f8:	2088703a 	and	r4,r4,r2
 800a3fc:	28c4703a 	and	r2,r5,r3
 800a400:	21000104 	addi	r4,r4,4
 800a404:	1000041e 	bne	r2,zero,800a418 <_malloc_r+0x198>
 800a408:	294b883a 	add	r5,r5,r5
 800a40c:	28c4703a 	and	r2,r5,r3
 800a410:	21000104 	addi	r4,r4,4
 800a414:	103ffc26 	beq	r2,zero,800a408 <_malloc_r+0x188>
 800a418:	02bfff04 	movi	r10,-4
 800a41c:	024003c4 	movi	r9,15
 800a420:	21800044 	addi	r6,r4,1
 800a424:	318d883a 	add	r6,r6,r6
 800a428:	318d883a 	add	r6,r6,r6
 800a42c:	318d883a 	add	r6,r6,r6
 800a430:	998d883a 	add	r6,r19,r6
 800a434:	333ffe04 	addi	r12,r6,-8
 800a438:	2017883a 	mov	r11,r4
 800a43c:	31800104 	addi	r6,r6,4
 800a440:	34000017 	ldw	r16,0(r6)
 800a444:	31fffd04 	addi	r7,r6,-12
 800a448:	81c0041e 	bne	r16,r7,800a45c <_malloc_r+0x1dc>
 800a44c:	0000fb06 	br	800a83c <_malloc_r+0x5bc>
 800a450:	1801030e 	bge	r3,zero,800a860 <_malloc_r+0x5e0>
 800a454:	84000317 	ldw	r16,12(r16)
 800a458:	81c0f826 	beq	r16,r7,800a83c <_malloc_r+0x5bc>
 800a45c:	80800117 	ldw	r2,4(r16)
 800a460:	1284703a 	and	r2,r2,r10
 800a464:	1447c83a 	sub	r3,r2,r17
 800a468:	48fff90e 	bge	r9,r3,800a450 <_malloc_r+0x1d0>
 800a46c:	80800317 	ldw	r2,12(r16)
 800a470:	81000217 	ldw	r4,8(r16)
 800a474:	89400054 	ori	r5,r17,1
 800a478:	81400115 	stw	r5,4(r16)
 800a47c:	20800315 	stw	r2,12(r4)
 800a480:	11000215 	stw	r4,8(r2)
 800a484:	8463883a 	add	r17,r16,r17
 800a488:	9c400515 	stw	r17,20(r19)
 800a48c:	9c400415 	stw	r17,16(r19)
 800a490:	18800054 	ori	r2,r3,1
 800a494:	88800115 	stw	r2,4(r17)
 800a498:	8a000315 	stw	r8,12(r17)
 800a49c:	8a000215 	stw	r8,8(r17)
 800a4a0:	88e3883a 	add	r17,r17,r3
 800a4a4:	88c00015 	stw	r3,0(r17)
 800a4a8:	9009883a 	mov	r4,r18
 800a4ac:	8017df80 	call	8017df8 <__malloc_unlock>
 800a4b0:	80800204 	addi	r2,r16,8
 800a4b4:	00001b06 	br	800a524 <_malloc_r+0x2a4>
 800a4b8:	04400404 	movi	r17,16
 800a4bc:	89402536 	bltu	r17,r5,800a554 <_malloc_r+0x2d4>
 800a4c0:	8017dd40 	call	8017dd4 <__malloc_lock>
 800a4c4:	00800184 	movi	r2,6
 800a4c8:	01000084 	movi	r4,2
 800a4cc:	04c200b4 	movhi	r19,2050
 800a4d0:	1085883a 	add	r2,r2,r2
 800a4d4:	9cec6f04 	addi	r19,r19,-20036
 800a4d8:	1085883a 	add	r2,r2,r2
 800a4dc:	9885883a 	add	r2,r19,r2
 800a4e0:	14000117 	ldw	r16,4(r2)
 800a4e4:	10fffe04 	addi	r3,r2,-8
 800a4e8:	80c0d926 	beq	r16,r3,800a850 <_malloc_r+0x5d0>
 800a4ec:	80c00117 	ldw	r3,4(r16)
 800a4f0:	81000317 	ldw	r4,12(r16)
 800a4f4:	00bfff04 	movi	r2,-4
 800a4f8:	1884703a 	and	r2,r3,r2
 800a4fc:	81400217 	ldw	r5,8(r16)
 800a500:	8085883a 	add	r2,r16,r2
 800a504:	10c00117 	ldw	r3,4(r2)
 800a508:	29000315 	stw	r4,12(r5)
 800a50c:	21400215 	stw	r5,8(r4)
 800a510:	18c00054 	ori	r3,r3,1
 800a514:	10c00115 	stw	r3,4(r2)
 800a518:	9009883a 	mov	r4,r18
 800a51c:	8017df80 	call	8017df8 <__malloc_unlock>
 800a520:	80800204 	addi	r2,r16,8
 800a524:	dfc00a17 	ldw	ra,40(sp)
 800a528:	df000917 	ldw	fp,36(sp)
 800a52c:	ddc00817 	ldw	r23,32(sp)
 800a530:	dd800717 	ldw	r22,28(sp)
 800a534:	dd400617 	ldw	r21,24(sp)
 800a538:	dd000517 	ldw	r20,20(sp)
 800a53c:	dcc00417 	ldw	r19,16(sp)
 800a540:	dc800317 	ldw	r18,12(sp)
 800a544:	dc400217 	ldw	r17,8(sp)
 800a548:	dc000117 	ldw	r16,4(sp)
 800a54c:	dec00b04 	addi	sp,sp,44
 800a550:	f800283a 	ret
 800a554:	00800304 	movi	r2,12
 800a558:	90800015 	stw	r2,0(r18)
 800a55c:	0005883a 	mov	r2,zero
 800a560:	003ff006 	br	800a524 <_malloc_r+0x2a4>
 800a564:	01002004 	movi	r4,128
 800a568:	02001004 	movi	r8,64
 800a56c:	01c00fc4 	movi	r7,63
 800a570:	003f6106 	br	800a2f8 <_malloc_r+0x78>
 800a574:	4009883a 	mov	r4,r8
 800a578:	003f7506 	br	800a350 <_malloc_r+0xd0>
 800a57c:	81000317 	ldw	r4,12(r16)
 800a580:	003fde06 	br	800a4fc <_malloc_r+0x27c>
 800a584:	81c5883a 	add	r2,r16,r7
 800a588:	11400117 	ldw	r5,4(r2)
 800a58c:	9009883a 	mov	r4,r18
 800a590:	29400054 	ori	r5,r5,1
 800a594:	11400115 	stw	r5,4(r2)
 800a598:	8017df80 	call	8017df8 <__malloc_unlock>
 800a59c:	80800204 	addi	r2,r16,8
 800a5a0:	003fe006 	br	800a524 <_malloc_r+0x2a4>
 800a5a4:	9c000217 	ldw	r16,8(r19)
 800a5a8:	00bfff04 	movi	r2,-4
 800a5ac:	85800117 	ldw	r22,4(r16)
 800a5b0:	b0ac703a 	and	r22,r22,r2
 800a5b4:	b4400336 	bltu	r22,r17,800a5c4 <_malloc_r+0x344>
 800a5b8:	b445c83a 	sub	r2,r22,r17
 800a5bc:	00c003c4 	movi	r3,15
 800a5c0:	18805d16 	blt	r3,r2,800a738 <_malloc_r+0x4b8>
 800a5c4:	05c200b4 	movhi	r23,2050
 800a5c8:	008200b4 	movhi	r2,2050
 800a5cc:	10b94c04 	addi	r2,r2,-6864
 800a5d0:	bdf22704 	addi	r23,r23,-14180
 800a5d4:	15400017 	ldw	r21,0(r2)
 800a5d8:	b8c00017 	ldw	r3,0(r23)
 800a5dc:	00bfffc4 	movi	r2,-1
 800a5e0:	858d883a 	add	r6,r16,r22
 800a5e4:	8d6b883a 	add	r21,r17,r21
 800a5e8:	1880ea26 	beq	r3,r2,800a994 <_malloc_r+0x714>
 800a5ec:	ad4403c4 	addi	r21,r21,4111
 800a5f0:	00bc0004 	movi	r2,-4096
 800a5f4:	a8aa703a 	and	r21,r21,r2
 800a5f8:	a80b883a 	mov	r5,r21
 800a5fc:	9009883a 	mov	r4,r18
 800a600:	d9800015 	stw	r6,0(sp)
 800a604:	800aed80 	call	800aed8 <_sbrk_r>
 800a608:	1029883a 	mov	r20,r2
 800a60c:	00bfffc4 	movi	r2,-1
 800a610:	d9800017 	ldw	r6,0(sp)
 800a614:	a080e826 	beq	r20,r2,800a9b8 <_malloc_r+0x738>
 800a618:	a180a636 	bltu	r20,r6,800a8b4 <_malloc_r+0x634>
 800a61c:	070200b4 	movhi	fp,2050
 800a620:	e73a1404 	addi	fp,fp,-6064
 800a624:	e0800017 	ldw	r2,0(fp)
 800a628:	a887883a 	add	r3,r21,r2
 800a62c:	e0c00015 	stw	r3,0(fp)
 800a630:	3500e626 	beq	r6,r20,800a9cc <_malloc_r+0x74c>
 800a634:	b9000017 	ldw	r4,0(r23)
 800a638:	00bfffc4 	movi	r2,-1
 800a63c:	2080ee26 	beq	r4,r2,800a9f8 <_malloc_r+0x778>
 800a640:	a185c83a 	sub	r2,r20,r6
 800a644:	10c5883a 	add	r2,r2,r3
 800a648:	e0800015 	stw	r2,0(fp)
 800a64c:	a0c001cc 	andi	r3,r20,7
 800a650:	1800bc26 	beq	r3,zero,800a944 <_malloc_r+0x6c4>
 800a654:	a0e9c83a 	sub	r20,r20,r3
 800a658:	00840204 	movi	r2,4104
 800a65c:	a5000204 	addi	r20,r20,8
 800a660:	10c7c83a 	sub	r3,r2,r3
 800a664:	a545883a 	add	r2,r20,r21
 800a668:	1083ffcc 	andi	r2,r2,4095
 800a66c:	18abc83a 	sub	r21,r3,r2
 800a670:	a80b883a 	mov	r5,r21
 800a674:	9009883a 	mov	r4,r18
 800a678:	800aed80 	call	800aed8 <_sbrk_r>
 800a67c:	00ffffc4 	movi	r3,-1
 800a680:	10c0e126 	beq	r2,r3,800aa08 <_malloc_r+0x788>
 800a684:	1505c83a 	sub	r2,r2,r20
 800a688:	1545883a 	add	r2,r2,r21
 800a68c:	10800054 	ori	r2,r2,1
 800a690:	e0c00017 	ldw	r3,0(fp)
 800a694:	9d000215 	stw	r20,8(r19)
 800a698:	a0800115 	stw	r2,4(r20)
 800a69c:	a8c7883a 	add	r3,r21,r3
 800a6a0:	e0c00015 	stw	r3,0(fp)
 800a6a4:	84c00e26 	beq	r16,r19,800a6e0 <_malloc_r+0x460>
 800a6a8:	018003c4 	movi	r6,15
 800a6ac:	3580a72e 	bgeu	r6,r22,800a94c <_malloc_r+0x6cc>
 800a6b0:	81400117 	ldw	r5,4(r16)
 800a6b4:	013ffe04 	movi	r4,-8
 800a6b8:	b0bffd04 	addi	r2,r22,-12
 800a6bc:	1104703a 	and	r2,r2,r4
 800a6c0:	2900004c 	andi	r4,r5,1
 800a6c4:	2088b03a 	or	r4,r4,r2
 800a6c8:	81000115 	stw	r4,4(r16)
 800a6cc:	01400144 	movi	r5,5
 800a6d0:	8089883a 	add	r4,r16,r2
 800a6d4:	21400115 	stw	r5,4(r4)
 800a6d8:	21400215 	stw	r5,8(r4)
 800a6dc:	3080cd36 	bltu	r6,r2,800aa14 <_malloc_r+0x794>
 800a6e0:	008200b4 	movhi	r2,2050
 800a6e4:	10b94b04 	addi	r2,r2,-6868
 800a6e8:	11000017 	ldw	r4,0(r2)
 800a6ec:	20c0012e 	bgeu	r4,r3,800a6f4 <_malloc_r+0x474>
 800a6f0:	10c00015 	stw	r3,0(r2)
 800a6f4:	008200b4 	movhi	r2,2050
 800a6f8:	10b94a04 	addi	r2,r2,-6872
 800a6fc:	11000017 	ldw	r4,0(r2)
 800a700:	9c000217 	ldw	r16,8(r19)
 800a704:	20c0012e 	bgeu	r4,r3,800a70c <_malloc_r+0x48c>
 800a708:	10c00015 	stw	r3,0(r2)
 800a70c:	80c00117 	ldw	r3,4(r16)
 800a710:	00bfff04 	movi	r2,-4
 800a714:	1886703a 	and	r3,r3,r2
 800a718:	1c45c83a 	sub	r2,r3,r17
 800a71c:	1c400236 	bltu	r3,r17,800a728 <_malloc_r+0x4a8>
 800a720:	00c003c4 	movi	r3,15
 800a724:	18800416 	blt	r3,r2,800a738 <_malloc_r+0x4b8>
 800a728:	9009883a 	mov	r4,r18
 800a72c:	8017df80 	call	8017df8 <__malloc_unlock>
 800a730:	0005883a 	mov	r2,zero
 800a734:	003f7b06 	br	800a524 <_malloc_r+0x2a4>
 800a738:	88c00054 	ori	r3,r17,1
 800a73c:	80c00115 	stw	r3,4(r16)
 800a740:	8463883a 	add	r17,r16,r17
 800a744:	10800054 	ori	r2,r2,1
 800a748:	9c400215 	stw	r17,8(r19)
 800a74c:	88800115 	stw	r2,4(r17)
 800a750:	9009883a 	mov	r4,r18
 800a754:	8017df80 	call	8017df8 <__malloc_unlock>
 800a758:	80800204 	addi	r2,r16,8
 800a75c:	003f7106 	br	800a524 <_malloc_r+0x2a4>
 800a760:	00c00504 	movi	r3,20
 800a764:	18804a2e 	bgeu	r3,r2,800a890 <_malloc_r+0x610>
 800a768:	00c01504 	movi	r3,84
 800a76c:	18806e36 	bltu	r3,r2,800a928 <_malloc_r+0x6a8>
 800a770:	8804d33a 	srli	r2,r17,12
 800a774:	12001bc4 	addi	r8,r2,111
 800a778:	11c01b84 	addi	r7,r2,110
 800a77c:	4209883a 	add	r4,r8,r8
 800a780:	003edd06 	br	800a2f8 <_malloc_r+0x78>
 800a784:	3804d27a 	srli	r2,r7,9
 800a788:	00c00104 	movi	r3,4
 800a78c:	1880442e 	bgeu	r3,r2,800a8a0 <_malloc_r+0x620>
 800a790:	00c00504 	movi	r3,20
 800a794:	18808136 	bltu	r3,r2,800a99c <_malloc_r+0x71c>
 800a798:	11401704 	addi	r5,r2,92
 800a79c:	10c016c4 	addi	r3,r2,91
 800a7a0:	294b883a 	add	r5,r5,r5
 800a7a4:	294b883a 	add	r5,r5,r5
 800a7a8:	294b883a 	add	r5,r5,r5
 800a7ac:	994b883a 	add	r5,r19,r5
 800a7b0:	28800017 	ldw	r2,0(r5)
 800a7b4:	018200b4 	movhi	r6,2050
 800a7b8:	297ffe04 	addi	r5,r5,-8
 800a7bc:	31ac6f04 	addi	r6,r6,-20036
 800a7c0:	28806526 	beq	r5,r2,800a958 <_malloc_r+0x6d8>
 800a7c4:	01bfff04 	movi	r6,-4
 800a7c8:	10c00117 	ldw	r3,4(r2)
 800a7cc:	1986703a 	and	r3,r3,r6
 800a7d0:	38c0022e 	bgeu	r7,r3,800a7dc <_malloc_r+0x55c>
 800a7d4:	10800217 	ldw	r2,8(r2)
 800a7d8:	28bffb1e 	bne	r5,r2,800a7c8 <_malloc_r+0x548>
 800a7dc:	11400317 	ldw	r5,12(r2)
 800a7e0:	98c00117 	ldw	r3,4(r19)
 800a7e4:	81400315 	stw	r5,12(r16)
 800a7e8:	80800215 	stw	r2,8(r16)
 800a7ec:	2c000215 	stw	r16,8(r5)
 800a7f0:	14000315 	stw	r16,12(r2)
 800a7f4:	003ef806 	br	800a3d8 <_malloc_r+0x158>
 800a7f8:	88c00054 	ori	r3,r17,1
 800a7fc:	80c00115 	stw	r3,4(r16)
 800a800:	8463883a 	add	r17,r16,r17
 800a804:	34400515 	stw	r17,20(r6)
 800a808:	34400415 	stw	r17,16(r6)
 800a80c:	10c00054 	ori	r3,r2,1
 800a810:	8a000315 	stw	r8,12(r17)
 800a814:	8a000215 	stw	r8,8(r17)
 800a818:	88c00115 	stw	r3,4(r17)
 800a81c:	88a3883a 	add	r17,r17,r2
 800a820:	88800015 	stw	r2,0(r17)
 800a824:	9009883a 	mov	r4,r18
 800a828:	8017df80 	call	8017df8 <__malloc_unlock>
 800a82c:	80800204 	addi	r2,r16,8
 800a830:	003f3c06 	br	800a524 <_malloc_r+0x2a4>
 800a834:	30c00117 	ldw	r3,4(r6)
 800a838:	003ee706 	br	800a3d8 <_malloc_r+0x158>
 800a83c:	5ac00044 	addi	r11,r11,1
 800a840:	588000cc 	andi	r2,r11,3
 800a844:	31800204 	addi	r6,r6,8
 800a848:	103efd1e 	bne	r2,zero,800a440 <_malloc_r+0x1c0>
 800a84c:	00002406 	br	800a8e0 <_malloc_r+0x660>
 800a850:	14000317 	ldw	r16,12(r2)
 800a854:	143f251e 	bne	r2,r16,800a4ec <_malloc_r+0x26c>
 800a858:	21000084 	addi	r4,r4,2
 800a85c:	003ebc06 	br	800a350 <_malloc_r+0xd0>
 800a860:	8085883a 	add	r2,r16,r2
 800a864:	10c00117 	ldw	r3,4(r2)
 800a868:	81000317 	ldw	r4,12(r16)
 800a86c:	81400217 	ldw	r5,8(r16)
 800a870:	18c00054 	ori	r3,r3,1
 800a874:	10c00115 	stw	r3,4(r2)
 800a878:	29000315 	stw	r4,12(r5)
 800a87c:	21400215 	stw	r5,8(r4)
 800a880:	9009883a 	mov	r4,r18
 800a884:	8017df80 	call	8017df8 <__malloc_unlock>
 800a888:	80800204 	addi	r2,r16,8
 800a88c:	003f2506 	br	800a524 <_malloc_r+0x2a4>
 800a890:	12001704 	addi	r8,r2,92
 800a894:	11c016c4 	addi	r7,r2,91
 800a898:	4209883a 	add	r4,r8,r8
 800a89c:	003e9606 	br	800a2f8 <_malloc_r+0x78>
 800a8a0:	3804d1ba 	srli	r2,r7,6
 800a8a4:	11400e44 	addi	r5,r2,57
 800a8a8:	10c00e04 	addi	r3,r2,56
 800a8ac:	294b883a 	add	r5,r5,r5
 800a8b0:	003fbc06 	br	800a7a4 <_malloc_r+0x524>
 800a8b4:	84ff5926 	beq	r16,r19,800a61c <_malloc_r+0x39c>
 800a8b8:	008200b4 	movhi	r2,2050
 800a8bc:	10ac6f04 	addi	r2,r2,-20036
 800a8c0:	14000217 	ldw	r16,8(r2)
 800a8c4:	00bfff04 	movi	r2,-4
 800a8c8:	80c00117 	ldw	r3,4(r16)
 800a8cc:	1886703a 	and	r3,r3,r2
 800a8d0:	003f9106 	br	800a718 <_malloc_r+0x498>
 800a8d4:	60800217 	ldw	r2,8(r12)
 800a8d8:	213fffc4 	addi	r4,r4,-1
 800a8dc:	1300651e 	bne	r2,r12,800aa74 <_malloc_r+0x7f4>
 800a8e0:	208000cc 	andi	r2,r4,3
 800a8e4:	633ffe04 	addi	r12,r12,-8
 800a8e8:	103ffa1e 	bne	r2,zero,800a8d4 <_malloc_r+0x654>
 800a8ec:	98800117 	ldw	r2,4(r19)
 800a8f0:	0146303a 	nor	r3,zero,r5
 800a8f4:	1884703a 	and	r2,r3,r2
 800a8f8:	98800115 	stw	r2,4(r19)
 800a8fc:	294b883a 	add	r5,r5,r5
 800a900:	117f2836 	bltu	r2,r5,800a5a4 <_malloc_r+0x324>
 800a904:	283f2726 	beq	r5,zero,800a5a4 <_malloc_r+0x324>
 800a908:	2886703a 	and	r3,r5,r2
 800a90c:	5809883a 	mov	r4,r11
 800a910:	183ec31e 	bne	r3,zero,800a420 <_malloc_r+0x1a0>
 800a914:	294b883a 	add	r5,r5,r5
 800a918:	2886703a 	and	r3,r5,r2
 800a91c:	21000104 	addi	r4,r4,4
 800a920:	183ffc26 	beq	r3,zero,800a914 <_malloc_r+0x694>
 800a924:	003ebe06 	br	800a420 <_malloc_r+0x1a0>
 800a928:	00c05504 	movi	r3,340
 800a92c:	18801236 	bltu	r3,r2,800a978 <_malloc_r+0x6f8>
 800a930:	8804d3fa 	srli	r2,r17,15
 800a934:	12001e04 	addi	r8,r2,120
 800a938:	11c01dc4 	addi	r7,r2,119
 800a93c:	4209883a 	add	r4,r8,r8
 800a940:	003e6d06 	br	800a2f8 <_malloc_r+0x78>
 800a944:	00c40004 	movi	r3,4096
 800a948:	003f4606 	br	800a664 <_malloc_r+0x3e4>
 800a94c:	00800044 	movi	r2,1
 800a950:	a0800115 	stw	r2,4(r20)
 800a954:	003f7406 	br	800a728 <_malloc_r+0x4a8>
 800a958:	1805d0ba 	srai	r2,r3,2
 800a95c:	01c00044 	movi	r7,1
 800a960:	30c00117 	ldw	r3,4(r6)
 800a964:	388e983a 	sll	r7,r7,r2
 800a968:	2805883a 	mov	r2,r5
 800a96c:	38c6b03a 	or	r3,r7,r3
 800a970:	30c00115 	stw	r3,4(r6)
 800a974:	003f9b06 	br	800a7e4 <_malloc_r+0x564>
 800a978:	00c15504 	movi	r3,1364
 800a97c:	18801a36 	bltu	r3,r2,800a9e8 <_malloc_r+0x768>
 800a980:	8804d4ba 	srli	r2,r17,18
 800a984:	12001f44 	addi	r8,r2,125
 800a988:	11c01f04 	addi	r7,r2,124
 800a98c:	4209883a 	add	r4,r8,r8
 800a990:	003e5906 	br	800a2f8 <_malloc_r+0x78>
 800a994:	ad400404 	addi	r21,r21,16
 800a998:	003f1706 	br	800a5f8 <_malloc_r+0x378>
 800a99c:	00c01504 	movi	r3,84
 800a9a0:	18802336 	bltu	r3,r2,800aa30 <_malloc_r+0x7b0>
 800a9a4:	3804d33a 	srli	r2,r7,12
 800a9a8:	11401bc4 	addi	r5,r2,111
 800a9ac:	10c01b84 	addi	r3,r2,110
 800a9b0:	294b883a 	add	r5,r5,r5
 800a9b4:	003f7b06 	br	800a7a4 <_malloc_r+0x524>
 800a9b8:	9c000217 	ldw	r16,8(r19)
 800a9bc:	00bfff04 	movi	r2,-4
 800a9c0:	80c00117 	ldw	r3,4(r16)
 800a9c4:	1886703a 	and	r3,r3,r2
 800a9c8:	003f5306 	br	800a718 <_malloc_r+0x498>
 800a9cc:	3083ffcc 	andi	r2,r6,4095
 800a9d0:	103f181e 	bne	r2,zero,800a634 <_malloc_r+0x3b4>
 800a9d4:	99000217 	ldw	r4,8(r19)
 800a9d8:	b545883a 	add	r2,r22,r21
 800a9dc:	10800054 	ori	r2,r2,1
 800a9e0:	20800115 	stw	r2,4(r4)
 800a9e4:	003f3e06 	br	800a6e0 <_malloc_r+0x460>
 800a9e8:	01003f84 	movi	r4,254
 800a9ec:	02001fc4 	movi	r8,127
 800a9f0:	01c01f84 	movi	r7,126
 800a9f4:	003e4006 	br	800a2f8 <_malloc_r+0x78>
 800a9f8:	008200b4 	movhi	r2,2050
 800a9fc:	10b22704 	addi	r2,r2,-14180
 800aa00:	15000015 	stw	r20,0(r2)
 800aa04:	003f1106 	br	800a64c <_malloc_r+0x3cc>
 800aa08:	00800044 	movi	r2,1
 800aa0c:	002b883a 	mov	r21,zero
 800aa10:	003f1f06 	br	800a690 <_malloc_r+0x410>
 800aa14:	81400204 	addi	r5,r16,8
 800aa18:	9009883a 	mov	r4,r18
 800aa1c:	800f9d40 	call	800f9d4 <_free_r>
 800aa20:	008200b4 	movhi	r2,2050
 800aa24:	10ba1404 	addi	r2,r2,-6064
 800aa28:	10c00017 	ldw	r3,0(r2)
 800aa2c:	003f2c06 	br	800a6e0 <_malloc_r+0x460>
 800aa30:	00c05504 	movi	r3,340
 800aa34:	18800536 	bltu	r3,r2,800aa4c <_malloc_r+0x7cc>
 800aa38:	3804d3fa 	srli	r2,r7,15
 800aa3c:	11401e04 	addi	r5,r2,120
 800aa40:	10c01dc4 	addi	r3,r2,119
 800aa44:	294b883a 	add	r5,r5,r5
 800aa48:	003f5606 	br	800a7a4 <_malloc_r+0x524>
 800aa4c:	00c15504 	movi	r3,1364
 800aa50:	18800536 	bltu	r3,r2,800aa68 <_malloc_r+0x7e8>
 800aa54:	3804d4ba 	srli	r2,r7,18
 800aa58:	11401f44 	addi	r5,r2,125
 800aa5c:	10c01f04 	addi	r3,r2,124
 800aa60:	294b883a 	add	r5,r5,r5
 800aa64:	003f4f06 	br	800a7a4 <_malloc_r+0x524>
 800aa68:	01403f84 	movi	r5,254
 800aa6c:	00c01f84 	movi	r3,126
 800aa70:	003f4c06 	br	800a7a4 <_malloc_r+0x524>
 800aa74:	98800117 	ldw	r2,4(r19)
 800aa78:	003fa006 	br	800a8fc <_malloc_r+0x67c>
 800aa7c:	8808d0fa 	srli	r4,r17,3
 800aa80:	20800044 	addi	r2,r4,1
 800aa84:	1085883a 	add	r2,r2,r2
 800aa88:	003e9006 	br	800a4cc <_malloc_r+0x24c>

0800aa8c <memcmp>:
 800aa8c:	01c000c4 	movi	r7,3
 800aa90:	3980192e 	bgeu	r7,r6,800aaf8 <memcmp+0x6c>
 800aa94:	2144b03a 	or	r2,r4,r5
 800aa98:	11c4703a 	and	r2,r2,r7
 800aa9c:	10000f26 	beq	r2,zero,800aadc <memcmp+0x50>
 800aaa0:	20800003 	ldbu	r2,0(r4)
 800aaa4:	28c00003 	ldbu	r3,0(r5)
 800aaa8:	10c0151e 	bne	r2,r3,800ab00 <memcmp+0x74>
 800aaac:	31bfff84 	addi	r6,r6,-2
 800aab0:	01ffffc4 	movi	r7,-1
 800aab4:	00000406 	br	800aac8 <memcmp+0x3c>
 800aab8:	20800003 	ldbu	r2,0(r4)
 800aabc:	28c00003 	ldbu	r3,0(r5)
 800aac0:	31bfffc4 	addi	r6,r6,-1
 800aac4:	10c00e1e 	bne	r2,r3,800ab00 <memcmp+0x74>
 800aac8:	21000044 	addi	r4,r4,1
 800aacc:	29400044 	addi	r5,r5,1
 800aad0:	31fff91e 	bne	r6,r7,800aab8 <memcmp+0x2c>
 800aad4:	0005883a 	mov	r2,zero
 800aad8:	f800283a 	ret
 800aadc:	20c00017 	ldw	r3,0(r4)
 800aae0:	28800017 	ldw	r2,0(r5)
 800aae4:	18bfee1e 	bne	r3,r2,800aaa0 <memcmp+0x14>
 800aae8:	31bfff04 	addi	r6,r6,-4
 800aaec:	21000104 	addi	r4,r4,4
 800aaf0:	29400104 	addi	r5,r5,4
 800aaf4:	39bff936 	bltu	r7,r6,800aadc <memcmp+0x50>
 800aaf8:	303fe91e 	bne	r6,zero,800aaa0 <memcmp+0x14>
 800aafc:	003ff506 	br	800aad4 <memcmp+0x48>
 800ab00:	10c5c83a 	sub	r2,r2,r3
 800ab04:	f800283a 	ret

0800ab08 <memcpy>:
 800ab08:	defffd04 	addi	sp,sp,-12
 800ab0c:	dfc00215 	stw	ra,8(sp)
 800ab10:	dc400115 	stw	r17,4(sp)
 800ab14:	dc000015 	stw	r16,0(sp)
 800ab18:	00c003c4 	movi	r3,15
 800ab1c:	2005883a 	mov	r2,r4
 800ab20:	1980452e 	bgeu	r3,r6,800ac38 <memcpy+0x130>
 800ab24:	2906b03a 	or	r3,r5,r4
 800ab28:	18c000cc 	andi	r3,r3,3
 800ab2c:	1800441e 	bne	r3,zero,800ac40 <memcpy+0x138>
 800ab30:	347ffc04 	addi	r17,r6,-16
 800ab34:	8822d13a 	srli	r17,r17,4
 800ab38:	28c00104 	addi	r3,r5,4
 800ab3c:	23400104 	addi	r13,r4,4
 800ab40:	8820913a 	slli	r16,r17,4
 800ab44:	2b000204 	addi	r12,r5,8
 800ab48:	22c00204 	addi	r11,r4,8
 800ab4c:	84000504 	addi	r16,r16,20
 800ab50:	2a800304 	addi	r10,r5,12
 800ab54:	22400304 	addi	r9,r4,12
 800ab58:	2c21883a 	add	r16,r5,r16
 800ab5c:	2811883a 	mov	r8,r5
 800ab60:	200f883a 	mov	r7,r4
 800ab64:	41000017 	ldw	r4,0(r8)
 800ab68:	1fc00017 	ldw	ra,0(r3)
 800ab6c:	63c00017 	ldw	r15,0(r12)
 800ab70:	39000015 	stw	r4,0(r7)
 800ab74:	53800017 	ldw	r14,0(r10)
 800ab78:	6fc00015 	stw	ra,0(r13)
 800ab7c:	5bc00015 	stw	r15,0(r11)
 800ab80:	4b800015 	stw	r14,0(r9)
 800ab84:	18c00404 	addi	r3,r3,16
 800ab88:	39c00404 	addi	r7,r7,16
 800ab8c:	42000404 	addi	r8,r8,16
 800ab90:	6b400404 	addi	r13,r13,16
 800ab94:	63000404 	addi	r12,r12,16
 800ab98:	5ac00404 	addi	r11,r11,16
 800ab9c:	52800404 	addi	r10,r10,16
 800aba0:	4a400404 	addi	r9,r9,16
 800aba4:	1c3fef1e 	bne	r3,r16,800ab64 <memcpy+0x5c>
 800aba8:	89c00044 	addi	r7,r17,1
 800abac:	380e913a 	slli	r7,r7,4
 800abb0:	310003cc 	andi	r4,r6,15
 800abb4:	02c000c4 	movi	r11,3
 800abb8:	11c7883a 	add	r3,r2,r7
 800abbc:	29cb883a 	add	r5,r5,r7
 800abc0:	5900212e 	bgeu	r11,r4,800ac48 <memcpy+0x140>
 800abc4:	1813883a 	mov	r9,r3
 800abc8:	2811883a 	mov	r8,r5
 800abcc:	200f883a 	mov	r7,r4
 800abd0:	42800017 	ldw	r10,0(r8)
 800abd4:	4a400104 	addi	r9,r9,4
 800abd8:	39ffff04 	addi	r7,r7,-4
 800abdc:	4abfff15 	stw	r10,-4(r9)
 800abe0:	42000104 	addi	r8,r8,4
 800abe4:	59fffa36 	bltu	r11,r7,800abd0 <memcpy+0xc8>
 800abe8:	213fff04 	addi	r4,r4,-4
 800abec:	2008d0ba 	srli	r4,r4,2
 800abf0:	318000cc 	andi	r6,r6,3
 800abf4:	21000044 	addi	r4,r4,1
 800abf8:	2109883a 	add	r4,r4,r4
 800abfc:	2109883a 	add	r4,r4,r4
 800ac00:	1907883a 	add	r3,r3,r4
 800ac04:	290b883a 	add	r5,r5,r4
 800ac08:	30000626 	beq	r6,zero,800ac24 <memcpy+0x11c>
 800ac0c:	198d883a 	add	r6,r3,r6
 800ac10:	29c00003 	ldbu	r7,0(r5)
 800ac14:	18c00044 	addi	r3,r3,1
 800ac18:	29400044 	addi	r5,r5,1
 800ac1c:	19ffffc5 	stb	r7,-1(r3)
 800ac20:	19bffb1e 	bne	r3,r6,800ac10 <memcpy+0x108>
 800ac24:	dfc00217 	ldw	ra,8(sp)
 800ac28:	dc400117 	ldw	r17,4(sp)
 800ac2c:	dc000017 	ldw	r16,0(sp)
 800ac30:	dec00304 	addi	sp,sp,12
 800ac34:	f800283a 	ret
 800ac38:	2007883a 	mov	r3,r4
 800ac3c:	003ff206 	br	800ac08 <memcpy+0x100>
 800ac40:	2007883a 	mov	r3,r4
 800ac44:	003ff106 	br	800ac0c <memcpy+0x104>
 800ac48:	200d883a 	mov	r6,r4
 800ac4c:	003fee06 	br	800ac08 <memcpy+0x100>

0800ac50 <memset>:
 800ac50:	20c000cc 	andi	r3,r4,3
 800ac54:	2005883a 	mov	r2,r4
 800ac58:	18004426 	beq	r3,zero,800ad6c <memset+0x11c>
 800ac5c:	31ffffc4 	addi	r7,r6,-1
 800ac60:	30004026 	beq	r6,zero,800ad64 <memset+0x114>
 800ac64:	2813883a 	mov	r9,r5
 800ac68:	200d883a 	mov	r6,r4
 800ac6c:	2007883a 	mov	r3,r4
 800ac70:	00000406 	br	800ac84 <memset+0x34>
 800ac74:	3a3fffc4 	addi	r8,r7,-1
 800ac78:	31800044 	addi	r6,r6,1
 800ac7c:	38003926 	beq	r7,zero,800ad64 <memset+0x114>
 800ac80:	400f883a 	mov	r7,r8
 800ac84:	18c00044 	addi	r3,r3,1
 800ac88:	32400005 	stb	r9,0(r6)
 800ac8c:	1a0000cc 	andi	r8,r3,3
 800ac90:	403ff81e 	bne	r8,zero,800ac74 <memset+0x24>
 800ac94:	010000c4 	movi	r4,3
 800ac98:	21c02d2e 	bgeu	r4,r7,800ad50 <memset+0x100>
 800ac9c:	29003fcc 	andi	r4,r5,255
 800aca0:	200c923a 	slli	r6,r4,8
 800aca4:	3108b03a 	or	r4,r6,r4
 800aca8:	200c943a 	slli	r6,r4,16
 800acac:	218cb03a 	or	r6,r4,r6
 800acb0:	010003c4 	movi	r4,15
 800acb4:	21c0182e 	bgeu	r4,r7,800ad18 <memset+0xc8>
 800acb8:	3b3ffc04 	addi	r12,r7,-16
 800acbc:	6018d13a 	srli	r12,r12,4
 800acc0:	1a000104 	addi	r8,r3,4
 800acc4:	1ac00204 	addi	r11,r3,8
 800acc8:	6008913a 	slli	r4,r12,4
 800accc:	1a800304 	addi	r10,r3,12
 800acd0:	1813883a 	mov	r9,r3
 800acd4:	21000504 	addi	r4,r4,20
 800acd8:	1909883a 	add	r4,r3,r4
 800acdc:	49800015 	stw	r6,0(r9)
 800ace0:	41800015 	stw	r6,0(r8)
 800ace4:	59800015 	stw	r6,0(r11)
 800ace8:	51800015 	stw	r6,0(r10)
 800acec:	42000404 	addi	r8,r8,16
 800acf0:	4a400404 	addi	r9,r9,16
 800acf4:	5ac00404 	addi	r11,r11,16
 800acf8:	52800404 	addi	r10,r10,16
 800acfc:	413ff71e 	bne	r8,r4,800acdc <memset+0x8c>
 800ad00:	63000044 	addi	r12,r12,1
 800ad04:	6018913a 	slli	r12,r12,4
 800ad08:	39c003cc 	andi	r7,r7,15
 800ad0c:	010000c4 	movi	r4,3
 800ad10:	1b07883a 	add	r3,r3,r12
 800ad14:	21c00e2e 	bgeu	r4,r7,800ad50 <memset+0x100>
 800ad18:	1813883a 	mov	r9,r3
 800ad1c:	3811883a 	mov	r8,r7
 800ad20:	010000c4 	movi	r4,3
 800ad24:	49800015 	stw	r6,0(r9)
 800ad28:	423fff04 	addi	r8,r8,-4
 800ad2c:	4a400104 	addi	r9,r9,4
 800ad30:	223ffc36 	bltu	r4,r8,800ad24 <memset+0xd4>
 800ad34:	393fff04 	addi	r4,r7,-4
 800ad38:	2008d0ba 	srli	r4,r4,2
 800ad3c:	39c000cc 	andi	r7,r7,3
 800ad40:	21000044 	addi	r4,r4,1
 800ad44:	2109883a 	add	r4,r4,r4
 800ad48:	2109883a 	add	r4,r4,r4
 800ad4c:	1907883a 	add	r3,r3,r4
 800ad50:	38000526 	beq	r7,zero,800ad68 <memset+0x118>
 800ad54:	19cf883a 	add	r7,r3,r7
 800ad58:	19400005 	stb	r5,0(r3)
 800ad5c:	18c00044 	addi	r3,r3,1
 800ad60:	38fffd1e 	bne	r7,r3,800ad58 <memset+0x108>
 800ad64:	f800283a 	ret
 800ad68:	f800283a 	ret
 800ad6c:	2007883a 	mov	r3,r4
 800ad70:	300f883a 	mov	r7,r6
 800ad74:	003fc706 	br	800ac94 <memset+0x44>

0800ad78 <_printf_r>:
 800ad78:	defffd04 	addi	sp,sp,-12
 800ad7c:	2805883a 	mov	r2,r5
 800ad80:	dfc00015 	stw	ra,0(sp)
 800ad84:	d9800115 	stw	r6,4(sp)
 800ad88:	d9c00215 	stw	r7,8(sp)
 800ad8c:	21400217 	ldw	r5,8(r4)
 800ad90:	d9c00104 	addi	r7,sp,4
 800ad94:	100d883a 	mov	r6,r2
 800ad98:	800b4a00 	call	800b4a0 <___vfprintf_internal_r>
 800ad9c:	dfc00017 	ldw	ra,0(sp)
 800ada0:	dec00304 	addi	sp,sp,12
 800ada4:	f800283a 	ret

0800ada8 <printf>:
 800ada8:	defffc04 	addi	sp,sp,-16
 800adac:	dfc00015 	stw	ra,0(sp)
 800adb0:	d9400115 	stw	r5,4(sp)
 800adb4:	d9800215 	stw	r6,8(sp)
 800adb8:	d9c00315 	stw	r7,12(sp)
 800adbc:	008200b4 	movhi	r2,2050
 800adc0:	10b22604 	addi	r2,r2,-14184
 800adc4:	10800017 	ldw	r2,0(r2)
 800adc8:	200b883a 	mov	r5,r4
 800adcc:	d9800104 	addi	r6,sp,4
 800add0:	11000217 	ldw	r4,8(r2)
 800add4:	800d77c0 	call	800d77c <__vfprintf_internal>
 800add8:	dfc00017 	ldw	ra,0(sp)
 800addc:	dec00404 	addi	sp,sp,16
 800ade0:	f800283a 	ret

0800ade4 <_putchar_r>:
 800ade4:	21800217 	ldw	r6,8(r4)
 800ade8:	80119201 	jmpi	8011920 <_putc_r>

0800adec <putchar>:
 800adec:	008200b4 	movhi	r2,2050
 800adf0:	10b22604 	addi	r2,r2,-14184
 800adf4:	200b883a 	mov	r5,r4
 800adf8:	11000017 	ldw	r4,0(r2)
 800adfc:	21800217 	ldw	r6,8(r4)
 800ae00:	80119201 	jmpi	8011920 <_putc_r>

0800ae04 <_puts_r>:
 800ae04:	defff604 	addi	sp,sp,-40
 800ae08:	dc000715 	stw	r16,28(sp)
 800ae0c:	2021883a 	mov	r16,r4
 800ae10:	2809883a 	mov	r4,r5
 800ae14:	dc400815 	stw	r17,32(sp)
 800ae18:	dfc00915 	stw	ra,36(sp)
 800ae1c:	2823883a 	mov	r17,r5
 800ae20:	800b0980 	call	800b098 <strlen>
 800ae24:	10c00044 	addi	r3,r2,1
 800ae28:	d8800115 	stw	r2,4(sp)
 800ae2c:	008200b4 	movhi	r2,2050
 800ae30:	10aa9304 	addi	r2,r2,-21940
 800ae34:	d8800215 	stw	r2,8(sp)
 800ae38:	00800044 	movi	r2,1
 800ae3c:	d8800315 	stw	r2,12(sp)
 800ae40:	00800084 	movi	r2,2
 800ae44:	dc400015 	stw	r17,0(sp)
 800ae48:	d8c00615 	stw	r3,24(sp)
 800ae4c:	dec00415 	stw	sp,16(sp)
 800ae50:	d8800515 	stw	r2,20(sp)
 800ae54:	80000226 	beq	r16,zero,800ae60 <_puts_r+0x5c>
 800ae58:	80800e17 	ldw	r2,56(r16)
 800ae5c:	10001426 	beq	r2,zero,800aeb0 <_puts_r+0xac>
 800ae60:	81400217 	ldw	r5,8(r16)
 800ae64:	2880030b 	ldhu	r2,12(r5)
 800ae68:	10c8000c 	andi	r3,r2,8192
 800ae6c:	1800061e 	bne	r3,zero,800ae88 <_puts_r+0x84>
 800ae70:	29001917 	ldw	r4,100(r5)
 800ae74:	00f7ffc4 	movi	r3,-8193
 800ae78:	10880014 	ori	r2,r2,8192
 800ae7c:	20c6703a 	and	r3,r4,r3
 800ae80:	2880030d 	sth	r2,12(r5)
 800ae84:	28c01915 	stw	r3,100(r5)
 800ae88:	d9800404 	addi	r6,sp,16
 800ae8c:	8009883a 	mov	r4,r16
 800ae90:	800fce40 	call	800fce4 <__sfvwrite_r>
 800ae94:	1000091e 	bne	r2,zero,800aebc <_puts_r+0xb8>
 800ae98:	00800284 	movi	r2,10
 800ae9c:	dfc00917 	ldw	ra,36(sp)
 800aea0:	dc400817 	ldw	r17,32(sp)
 800aea4:	dc000717 	ldw	r16,28(sp)
 800aea8:	dec00a04 	addi	sp,sp,40
 800aeac:	f800283a 	ret
 800aeb0:	8009883a 	mov	r4,r16
 800aeb4:	800f8600 	call	800f860 <__sinit>
 800aeb8:	003fe906 	br	800ae60 <_puts_r+0x5c>
 800aebc:	00bfffc4 	movi	r2,-1
 800aec0:	003ff606 	br	800ae9c <_puts_r+0x98>

0800aec4 <puts>:
 800aec4:	008200b4 	movhi	r2,2050
 800aec8:	10b22604 	addi	r2,r2,-14184
 800aecc:	200b883a 	mov	r5,r4
 800aed0:	11000017 	ldw	r4,0(r2)
 800aed4:	800ae041 	jmpi	800ae04 <_puts_r>

0800aed8 <_sbrk_r>:
 800aed8:	defffd04 	addi	sp,sp,-12
 800aedc:	dc000015 	stw	r16,0(sp)
 800aee0:	040200b4 	movhi	r16,2050
 800aee4:	dc400115 	stw	r17,4(sp)
 800aee8:	84394d04 	addi	r16,r16,-6860
 800aeec:	2023883a 	mov	r17,r4
 800aef0:	2809883a 	mov	r4,r5
 800aef4:	dfc00215 	stw	ra,8(sp)
 800aef8:	80000015 	stw	zero,0(r16)
 800aefc:	8017fe00 	call	8017fe0 <sbrk>
 800af00:	00ffffc4 	movi	r3,-1
 800af04:	10c00526 	beq	r2,r3,800af1c <_sbrk_r+0x44>
 800af08:	dfc00217 	ldw	ra,8(sp)
 800af0c:	dc400117 	ldw	r17,4(sp)
 800af10:	dc000017 	ldw	r16,0(sp)
 800af14:	dec00304 	addi	sp,sp,12
 800af18:	f800283a 	ret
 800af1c:	80c00017 	ldw	r3,0(r16)
 800af20:	183ff926 	beq	r3,zero,800af08 <_sbrk_r+0x30>
 800af24:	88c00015 	stw	r3,0(r17)
 800af28:	003ff706 	br	800af08 <_sbrk_r+0x30>

0800af2c <strcmp>:
 800af2c:	2144b03a 	or	r2,r4,r5
 800af30:	108000cc 	andi	r2,r2,3
 800af34:	1000171e 	bne	r2,zero,800af94 <strcmp+0x68>
 800af38:	20800017 	ldw	r2,0(r4)
 800af3c:	28c00017 	ldw	r3,0(r5)
 800af40:	10c0141e 	bne	r2,r3,800af94 <strcmp+0x68>
 800af44:	027fbff4 	movhi	r9,65279
 800af48:	4a7fbfc4 	addi	r9,r9,-257
 800af4c:	0086303a 	nor	r3,zero,r2
 800af50:	02202074 	movhi	r8,32897
 800af54:	1245883a 	add	r2,r2,r9
 800af58:	42202004 	addi	r8,r8,-32640
 800af5c:	10c4703a 	and	r2,r2,r3
 800af60:	1204703a 	and	r2,r2,r8
 800af64:	10000226 	beq	r2,zero,800af70 <strcmp+0x44>
 800af68:	00002306 	br	800aff8 <strcmp+0xcc>
 800af6c:	1000221e 	bne	r2,zero,800aff8 <strcmp+0xcc>
 800af70:	21000104 	addi	r4,r4,4
 800af74:	20c00017 	ldw	r3,0(r4)
 800af78:	29400104 	addi	r5,r5,4
 800af7c:	29800017 	ldw	r6,0(r5)
 800af80:	1a4f883a 	add	r7,r3,r9
 800af84:	00c4303a 	nor	r2,zero,r3
 800af88:	3884703a 	and	r2,r7,r2
 800af8c:	1204703a 	and	r2,r2,r8
 800af90:	19bff626 	beq	r3,r6,800af6c <strcmp+0x40>
 800af94:	20800003 	ldbu	r2,0(r4)
 800af98:	10c03fcc 	andi	r3,r2,255
 800af9c:	18c0201c 	xori	r3,r3,128
 800afa0:	18ffe004 	addi	r3,r3,-128
 800afa4:	18000c26 	beq	r3,zero,800afd8 <strcmp+0xac>
 800afa8:	29800007 	ldb	r6,0(r5)
 800afac:	19800326 	beq	r3,r6,800afbc <strcmp+0x90>
 800afb0:	00001306 	br	800b000 <strcmp+0xd4>
 800afb4:	29800007 	ldb	r6,0(r5)
 800afb8:	11800b1e 	bne	r2,r6,800afe8 <strcmp+0xbc>
 800afbc:	21000044 	addi	r4,r4,1
 800afc0:	20c00003 	ldbu	r3,0(r4)
 800afc4:	29400044 	addi	r5,r5,1
 800afc8:	18803fcc 	andi	r2,r3,255
 800afcc:	1080201c 	xori	r2,r2,128
 800afd0:	10bfe004 	addi	r2,r2,-128
 800afd4:	103ff71e 	bne	r2,zero,800afb4 <strcmp+0x88>
 800afd8:	0007883a 	mov	r3,zero
 800afdc:	28800003 	ldbu	r2,0(r5)
 800afe0:	1885c83a 	sub	r2,r3,r2
 800afe4:	f800283a 	ret
 800afe8:	28800003 	ldbu	r2,0(r5)
 800afec:	18c03fcc 	andi	r3,r3,255
 800aff0:	1885c83a 	sub	r2,r3,r2
 800aff4:	f800283a 	ret
 800aff8:	0005883a 	mov	r2,zero
 800affc:	f800283a 	ret
 800b000:	10c03fcc 	andi	r3,r2,255
 800b004:	003ff506 	br	800afdc <strcmp+0xb0>

0800b008 <strcpy>:
 800b008:	2906b03a 	or	r3,r5,r4
 800b00c:	18c000cc 	andi	r3,r3,3
 800b010:	2005883a 	mov	r2,r4
 800b014:	1800161e 	bne	r3,zero,800b070 <strcpy+0x68>
 800b018:	29c00017 	ldw	r7,0(r5)
 800b01c:	02ffbff4 	movhi	r11,65279
 800b020:	5affbfc4 	addi	r11,r11,-257
 800b024:	02a02074 	movhi	r10,32897
 800b028:	01c6303a 	nor	r3,zero,r7
 800b02c:	3ac9883a 	add	r4,r7,r11
 800b030:	52a02004 	addi	r10,r10,-32640
 800b034:	20c6703a 	and	r3,r4,r3
 800b038:	1a86703a 	and	r3,r3,r10
 800b03c:	18000c1e 	bne	r3,zero,800b070 <strcpy+0x68>
 800b040:	1011883a 	mov	r8,r2
 800b044:	41c00015 	stw	r7,0(r8)
 800b048:	29400104 	addi	r5,r5,4
 800b04c:	29c00017 	ldw	r7,0(r5)
 800b050:	41800104 	addi	r6,r8,4
 800b054:	3011883a 	mov	r8,r6
 800b058:	3ad3883a 	add	r9,r7,r11
 800b05c:	01c6303a 	nor	r3,zero,r7
 800b060:	48c6703a 	and	r3,r9,r3
 800b064:	1a86703a 	and	r3,r3,r10
 800b068:	183ff626 	beq	r3,zero,800b044 <strcpy+0x3c>
 800b06c:	00000106 	br	800b074 <strcpy+0x6c>
 800b070:	100d883a 	mov	r6,r2
 800b074:	28c00003 	ldbu	r3,0(r5)
 800b078:	31800044 	addi	r6,r6,1
 800b07c:	29400044 	addi	r5,r5,1
 800b080:	30ffffc5 	stb	r3,-1(r6)
 800b084:	18c03fcc 	andi	r3,r3,255
 800b088:	18c0201c 	xori	r3,r3,128
 800b08c:	18ffe004 	addi	r3,r3,-128
 800b090:	183ff81e 	bne	r3,zero,800b074 <strcpy+0x6c>
 800b094:	f800283a 	ret

0800b098 <strlen>:
 800b098:	208000cc 	andi	r2,r4,3
 800b09c:	10002026 	beq	r2,zero,800b120 <strlen+0x88>
 800b0a0:	20800007 	ldb	r2,0(r4)
 800b0a4:	10002026 	beq	r2,zero,800b128 <strlen+0x90>
 800b0a8:	2005883a 	mov	r2,r4
 800b0ac:	00000206 	br	800b0b8 <strlen+0x20>
 800b0b0:	10c00007 	ldb	r3,0(r2)
 800b0b4:	18001826 	beq	r3,zero,800b118 <strlen+0x80>
 800b0b8:	10800044 	addi	r2,r2,1
 800b0bc:	10c000cc 	andi	r3,r2,3
 800b0c0:	183ffb1e 	bne	r3,zero,800b0b0 <strlen+0x18>
 800b0c4:	10c00017 	ldw	r3,0(r2)
 800b0c8:	01ffbff4 	movhi	r7,65279
 800b0cc:	39ffbfc4 	addi	r7,r7,-257
 800b0d0:	00ca303a 	nor	r5,zero,r3
 800b0d4:	01a02074 	movhi	r6,32897
 800b0d8:	19c7883a 	add	r3,r3,r7
 800b0dc:	31a02004 	addi	r6,r6,-32640
 800b0e0:	1946703a 	and	r3,r3,r5
 800b0e4:	1986703a 	and	r3,r3,r6
 800b0e8:	1800091e 	bne	r3,zero,800b110 <strlen+0x78>
 800b0ec:	10800104 	addi	r2,r2,4
 800b0f0:	10c00017 	ldw	r3,0(r2)
 800b0f4:	19cb883a 	add	r5,r3,r7
 800b0f8:	00c6303a 	nor	r3,zero,r3
 800b0fc:	28c6703a 	and	r3,r5,r3
 800b100:	1986703a 	and	r3,r3,r6
 800b104:	183ff926 	beq	r3,zero,800b0ec <strlen+0x54>
 800b108:	00000106 	br	800b110 <strlen+0x78>
 800b10c:	10800044 	addi	r2,r2,1
 800b110:	10c00007 	ldb	r3,0(r2)
 800b114:	183ffd1e 	bne	r3,zero,800b10c <strlen+0x74>
 800b118:	1105c83a 	sub	r2,r2,r4
 800b11c:	f800283a 	ret
 800b120:	2005883a 	mov	r2,r4
 800b124:	003fe706 	br	800b0c4 <strlen+0x2c>
 800b128:	0005883a 	mov	r2,zero
 800b12c:	f800283a 	ret

0800b130 <strncmp>:
 800b130:	30003126 	beq	r6,zero,800b1f8 <strncmp+0xc8>
 800b134:	2144b03a 	or	r2,r4,r5
 800b138:	108000cc 	andi	r2,r2,3
 800b13c:	10001e1e 	bne	r2,zero,800b1b8 <strncmp+0x88>
 800b140:	024000c4 	movi	r9,3
 800b144:	49801c2e 	bgeu	r9,r6,800b1b8 <strncmp+0x88>
 800b148:	20800017 	ldw	r2,0(r4)
 800b14c:	28c00017 	ldw	r3,0(r5)
 800b150:	10c0191e 	bne	r2,r3,800b1b8 <strncmp+0x88>
 800b154:	31bfff04 	addi	r6,r6,-4
 800b158:	30002726 	beq	r6,zero,800b1f8 <strncmp+0xc8>
 800b15c:	02ffbff4 	movhi	r11,65279
 800b160:	5affbfc4 	addi	r11,r11,-257
 800b164:	0086303a 	nor	r3,zero,r2
 800b168:	02a02074 	movhi	r10,32897
 800b16c:	12c5883a 	add	r2,r2,r11
 800b170:	52a02004 	addi	r10,r10,-32640
 800b174:	10c4703a 	and	r2,r2,r3
 800b178:	1284703a 	and	r2,r2,r10
 800b17c:	10000b26 	beq	r2,zero,800b1ac <strncmp+0x7c>
 800b180:	00001d06 	br	800b1f8 <strncmp+0xc8>
 800b184:	20c00017 	ldw	r3,0(r4)
 800b188:	29c00017 	ldw	r7,0(r5)
 800b18c:	1ad1883a 	add	r8,r3,r11
 800b190:	00c4303a 	nor	r2,zero,r3
 800b194:	4084703a 	and	r2,r8,r2
 800b198:	1284703a 	and	r2,r2,r10
 800b19c:	19c0061e 	bne	r3,r7,800b1b8 <strncmp+0x88>
 800b1a0:	31bfff04 	addi	r6,r6,-4
 800b1a4:	30001426 	beq	r6,zero,800b1f8 <strncmp+0xc8>
 800b1a8:	1000131e 	bne	r2,zero,800b1f8 <strncmp+0xc8>
 800b1ac:	21000104 	addi	r4,r4,4
 800b1b0:	29400104 	addi	r5,r5,4
 800b1b4:	49bff336 	bltu	r9,r6,800b184 <strncmp+0x54>
 800b1b8:	28800007 	ldb	r2,0(r5)
 800b1bc:	20c00007 	ldb	r3,0(r4)
 800b1c0:	31bfffc4 	addi	r6,r6,-1
 800b1c4:	10c0081e 	bne	r2,r3,800b1e8 <strncmp+0xb8>
 800b1c8:	30000b26 	beq	r6,zero,800b1f8 <strncmp+0xc8>
 800b1cc:	10000a26 	beq	r2,zero,800b1f8 <strncmp+0xc8>
 800b1d0:	21000044 	addi	r4,r4,1
 800b1d4:	29400044 	addi	r5,r5,1
 800b1d8:	20800007 	ldb	r2,0(r4)
 800b1dc:	28c00007 	ldb	r3,0(r5)
 800b1e0:	31bfffc4 	addi	r6,r6,-1
 800b1e4:	10fff826 	beq	r2,r3,800b1c8 <strncmp+0x98>
 800b1e8:	20800003 	ldbu	r2,0(r4)
 800b1ec:	28c00003 	ldbu	r3,0(r5)
 800b1f0:	10c5c83a 	sub	r2,r2,r3
 800b1f4:	f800283a 	ret
 800b1f8:	0005883a 	mov	r2,zero
 800b1fc:	f800283a 	ret

0800b200 <strncpy>:
 800b200:	2906b03a 	or	r3,r5,r4
 800b204:	18c000cc 	andi	r3,r3,3
 800b208:	2005883a 	mov	r2,r4
 800b20c:	18002c1e 	bne	r3,zero,800b2c0 <strncpy+0xc0>
 800b210:	010000c4 	movi	r4,3
 800b214:	21802a2e 	bgeu	r4,r6,800b2c0 <strncpy+0xc0>
 800b218:	033fbff4 	movhi	r12,65279
 800b21c:	02e02074 	movhi	r11,32897
 800b220:	633fbfc4 	addi	r12,r12,-257
 800b224:	5ae02004 	addi	r11,r11,-32640
 800b228:	100f883a 	mov	r7,r2
 800b22c:	2a000017 	ldw	r8,0(r5)
 800b230:	3815883a 	mov	r10,r7
 800b234:	4313883a 	add	r9,r8,r12
 800b238:	0206303a 	nor	r3,zero,r8
 800b23c:	48c6703a 	and	r3,r9,r3
 800b240:	1ac6703a 	and	r3,r3,r11
 800b244:	1800261e 	bne	r3,zero,800b2e0 <strncpy+0xe0>
 800b248:	39c00104 	addi	r7,r7,4
 800b24c:	52000015 	stw	r8,0(r10)
 800b250:	31bfff04 	addi	r6,r6,-4
 800b254:	3811883a 	mov	r8,r7
 800b258:	29400104 	addi	r5,r5,4
 800b25c:	21bff336 	bltu	r4,r6,800b22c <strncpy+0x2c>
 800b260:	30001e26 	beq	r6,zero,800b2dc <strncpy+0xdc>
 800b264:	29c00003 	ldbu	r7,0(r5)
 800b268:	31bfffc4 	addi	r6,r6,-1
 800b26c:	40c00044 	addi	r3,r8,1
 800b270:	41c00005 	stb	r7,0(r8)
 800b274:	39c03fcc 	andi	r7,r7,255
 800b278:	39c0201c 	xori	r7,r7,128
 800b27c:	39ffe004 	addi	r7,r7,-128
 800b280:	29400044 	addi	r5,r5,1
 800b284:	38001026 	beq	r7,zero,800b2c8 <strncpy+0xc8>
 800b288:	1811883a 	mov	r8,r3
 800b28c:	00000906 	br	800b2b4 <strncpy+0xb4>
 800b290:	29c00003 	ldbu	r7,0(r5)
 800b294:	31bfffc4 	addi	r6,r6,-1
 800b298:	29400044 	addi	r5,r5,1
 800b29c:	41c00005 	stb	r7,0(r8)
 800b2a0:	39c03fcc 	andi	r7,r7,255
 800b2a4:	39c0201c 	xori	r7,r7,128
 800b2a8:	39ffe004 	addi	r7,r7,-128
 800b2ac:	1811883a 	mov	r8,r3
 800b2b0:	38000526 	beq	r7,zero,800b2c8 <strncpy+0xc8>
 800b2b4:	18c00044 	addi	r3,r3,1
 800b2b8:	303ff51e 	bne	r6,zero,800b290 <strncpy+0x90>
 800b2bc:	f800283a 	ret
 800b2c0:	1011883a 	mov	r8,r2
 800b2c4:	003fe606 	br	800b260 <strncpy+0x60>
 800b2c8:	30000726 	beq	r6,zero,800b2e8 <strncpy+0xe8>
 800b2cc:	198d883a 	add	r6,r3,r6
 800b2d0:	18000005 	stb	zero,0(r3)
 800b2d4:	18c00044 	addi	r3,r3,1
 800b2d8:	19bffd1e 	bne	r3,r6,800b2d0 <strncpy+0xd0>
 800b2dc:	f800283a 	ret
 800b2e0:	3811883a 	mov	r8,r7
 800b2e4:	003fdf06 	br	800b264 <strncpy+0x64>
 800b2e8:	f800283a 	ret

0800b2ec <time>:
 800b2ec:	008200b4 	movhi	r2,2050
 800b2f0:	defffc04 	addi	sp,sp,-16
 800b2f4:	10b22604 	addi	r2,r2,-14184
 800b2f8:	dc000215 	stw	r16,8(sp)
 800b2fc:	2021883a 	mov	r16,r4
 800b300:	11000017 	ldw	r4,0(r2)
 800b304:	000d883a 	mov	r6,zero
 800b308:	d80b883a 	mov	r5,sp
 800b30c:	dfc00315 	stw	ra,12(sp)
 800b310:	80103340 	call	8010334 <_gettimeofday_r>
 800b314:	10000716 	blt	r2,zero,800b334 <time+0x48>
 800b318:	d8800017 	ldw	r2,0(sp)
 800b31c:	80000126 	beq	r16,zero,800b324 <time+0x38>
 800b320:	80800015 	stw	r2,0(r16)
 800b324:	dfc00317 	ldw	ra,12(sp)
 800b328:	dc000217 	ldw	r16,8(sp)
 800b32c:	dec00404 	addi	sp,sp,16
 800b330:	f800283a 	ret
 800b334:	00bfffc4 	movi	r2,-1
 800b338:	003ffa06 	br	800b324 <time+0x38>

0800b33c <_times_r>:
 800b33c:	2809883a 	mov	r4,r5
 800b340:	80182701 	jmpi	8018270 <times>

0800b344 <__utoa>:
 800b344:	008cccb4 	movhi	r2,13106
 800b348:	defff004 	addi	sp,sp,-64
 800b34c:	108c4c04 	addi	r2,r2,12592
 800b350:	d8800015 	stw	r2,0(sp)
 800b354:	008dcdb4 	movhi	r2,14134
 800b358:	108d4d04 	addi	r2,r2,13620
 800b35c:	d8800115 	stw	r2,4(sp)
 800b360:	00989874 	movhi	r2,25185
 800b364:	108e4e04 	addi	r2,r2,14648
 800b368:	d8800215 	stw	r2,8(sp)
 800b36c:	00999974 	movhi	r2,26213
 800b370:	109918c4 	addi	r2,r2,25699
 800b374:	d8800315 	stw	r2,12(sp)
 800b378:	009a9a74 	movhi	r2,27241
 800b37c:	109a19c4 	addi	r2,r2,26727
 800b380:	d8800415 	stw	r2,16(sp)
 800b384:	009b9b74 	movhi	r2,28269
 800b388:	109b1ac4 	addi	r2,r2,27755
 800b38c:	d8800515 	stw	r2,20(sp)
 800b390:	009c9c74 	movhi	r2,29297
 800b394:	109c1bc4 	addi	r2,r2,28783
 800b398:	d8800615 	stw	r2,24(sp)
 800b39c:	009d9d74 	movhi	r2,30325
 800b3a0:	109d1cc4 	addi	r2,r2,29811
 800b3a4:	d8800715 	stw	r2,28(sp)
 800b3a8:	009e9e74 	movhi	r2,31353
 800b3ac:	109e1dc4 	addi	r2,r2,30839
 800b3b0:	dd000e15 	stw	r20,56(sp)
 800b3b4:	d8800815 	stw	r2,32(sp)
 800b3b8:	dfc00f15 	stw	ra,60(sp)
 800b3bc:	dcc00d15 	stw	r19,52(sp)
 800b3c0:	dc800c15 	stw	r18,48(sp)
 800b3c4:	dc400b15 	stw	r17,44(sp)
 800b3c8:	dc000a15 	stw	r16,40(sp)
 800b3cc:	d8000905 	stb	zero,36(sp)
 800b3d0:	30bfff84 	addi	r2,r6,-2
 800b3d4:	00c00884 	movi	r3,34
 800b3d8:	2829883a 	mov	r20,r5
 800b3dc:	18802c36 	bltu	r3,r2,800b490 <__utoa+0x14c>
 800b3e0:	3027883a 	mov	r19,r6
 800b3e4:	2023883a 	mov	r17,r4
 800b3e8:	2825883a 	mov	r18,r5
 800b3ec:	0021883a 	mov	r16,zero
 800b3f0:	00000106 	br	800b3f8 <__utoa+0xb4>
 800b3f4:	1821883a 	mov	r16,r3
 800b3f8:	8809883a 	mov	r4,r17
 800b3fc:	980b883a 	mov	r5,r19
 800b400:	800a1200 	call	800a120 <__umodsi3>
 800b404:	d885883a 	add	r2,sp,r2
 800b408:	10800003 	ldbu	r2,0(r2)
 800b40c:	8809883a 	mov	r4,r17
 800b410:	980b883a 	mov	r5,r19
 800b414:	90800005 	stb	r2,0(r18)
 800b418:	800a0bc0 	call	800a0bc <__udivsi3>
 800b41c:	1023883a 	mov	r17,r2
 800b420:	80c00044 	addi	r3,r16,1
 800b424:	94800044 	addi	r18,r18,1
 800b428:	103ff21e 	bne	r2,zero,800b3f4 <__utoa+0xb0>
 800b42c:	a0c7883a 	add	r3,r20,r3
 800b430:	18000005 	stb	zero,0(r3)
 800b434:	80000d26 	beq	r16,zero,800b46c <__utoa+0x128>
 800b438:	01c00044 	movi	r7,1
 800b43c:	a409883a 	add	r4,r20,r16
 800b440:	a007883a 	mov	r3,r20
 800b444:	3d0fc83a 	sub	r7,r7,r20
 800b448:	21800003 	ldbu	r6,0(r4)
 800b44c:	19400003 	ldbu	r5,0(r3)
 800b450:	38c5883a 	add	r2,r7,r3
 800b454:	19800005 	stb	r6,0(r3)
 800b458:	21400005 	stb	r5,0(r4)
 800b45c:	843fffc4 	addi	r16,r16,-1
 800b460:	18c00044 	addi	r3,r3,1
 800b464:	213fffc4 	addi	r4,r4,-1
 800b468:	143ff716 	blt	r2,r16,800b448 <__utoa+0x104>
 800b46c:	a005883a 	mov	r2,r20
 800b470:	dfc00f17 	ldw	ra,60(sp)
 800b474:	dd000e17 	ldw	r20,56(sp)
 800b478:	dcc00d17 	ldw	r19,52(sp)
 800b47c:	dc800c17 	ldw	r18,48(sp)
 800b480:	dc400b17 	ldw	r17,44(sp)
 800b484:	dc000a17 	ldw	r16,40(sp)
 800b488:	dec01004 	addi	sp,sp,64
 800b48c:	f800283a 	ret
 800b490:	28000005 	stb	zero,0(r5)
 800b494:	0005883a 	mov	r2,zero
 800b498:	003ff506 	br	800b470 <__utoa+0x12c>

0800b49c <utoa>:
 800b49c:	800b3441 	jmpi	800b344 <__utoa>

0800b4a0 <___vfprintf_internal_r>:
 800b4a0:	deffb804 	addi	sp,sp,-288
 800b4a4:	dfc04715 	stw	ra,284(sp)
 800b4a8:	ddc04515 	stw	r23,276(sp)
 800b4ac:	dd404315 	stw	r21,268(sp)
 800b4b0:	d9002d15 	stw	r4,180(sp)
 800b4b4:	282f883a 	mov	r23,r5
 800b4b8:	302b883a 	mov	r21,r6
 800b4bc:	d9c02e15 	stw	r7,184(sp)
 800b4c0:	df004615 	stw	fp,280(sp)
 800b4c4:	dd804415 	stw	r22,272(sp)
 800b4c8:	dd004215 	stw	r20,264(sp)
 800b4cc:	dcc04115 	stw	r19,260(sp)
 800b4d0:	dc804015 	stw	r18,256(sp)
 800b4d4:	dc403f15 	stw	r17,252(sp)
 800b4d8:	dc003e15 	stw	r16,248(sp)
 800b4dc:	801043c0 	call	801043c <_localeconv_r>
 800b4e0:	10800017 	ldw	r2,0(r2)
 800b4e4:	1009883a 	mov	r4,r2
 800b4e8:	d8803415 	stw	r2,208(sp)
 800b4ec:	800b0980 	call	800b098 <strlen>
 800b4f0:	d8803715 	stw	r2,220(sp)
 800b4f4:	d8802d17 	ldw	r2,180(sp)
 800b4f8:	10000226 	beq	r2,zero,800b504 <___vfprintf_internal_r+0x64>
 800b4fc:	10800e17 	ldw	r2,56(r2)
 800b500:	1000fb26 	beq	r2,zero,800b8f0 <___vfprintf_internal_r+0x450>
 800b504:	b880030b 	ldhu	r2,12(r23)
 800b508:	10c8000c 	andi	r3,r2,8192
 800b50c:	1800061e 	bne	r3,zero,800b528 <___vfprintf_internal_r+0x88>
 800b510:	b9001917 	ldw	r4,100(r23)
 800b514:	00f7ffc4 	movi	r3,-8193
 800b518:	10880014 	ori	r2,r2,8192
 800b51c:	20c6703a 	and	r3,r4,r3
 800b520:	b880030d 	sth	r2,12(r23)
 800b524:	b8c01915 	stw	r3,100(r23)
 800b528:	10c0020c 	andi	r3,r2,8
 800b52c:	1800c326 	beq	r3,zero,800b83c <___vfprintf_internal_r+0x39c>
 800b530:	b8c00417 	ldw	r3,16(r23)
 800b534:	1800c126 	beq	r3,zero,800b83c <___vfprintf_internal_r+0x39c>
 800b538:	1080068c 	andi	r2,r2,26
 800b53c:	00c00284 	movi	r3,10
 800b540:	10c0c626 	beq	r2,r3,800b85c <___vfprintf_internal_r+0x3bc>
 800b544:	d8c00404 	addi	r3,sp,16
 800b548:	050200b4 	movhi	r20,2050
 800b54c:	d9001e04 	addi	r4,sp,120
 800b550:	a52aa484 	addi	r20,r20,-21870
 800b554:	d8c01e15 	stw	r3,120(sp)
 800b558:	d8002015 	stw	zero,128(sp)
 800b55c:	d8001f15 	stw	zero,124(sp)
 800b560:	d8003315 	stw	zero,204(sp)
 800b564:	d8003615 	stw	zero,216(sp)
 800b568:	d8003815 	stw	zero,224(sp)
 800b56c:	1811883a 	mov	r8,r3
 800b570:	d8003915 	stw	zero,228(sp)
 800b574:	d8003a15 	stw	zero,232(sp)
 800b578:	d8002f15 	stw	zero,188(sp)
 800b57c:	d9002815 	stw	r4,160(sp)
 800b580:	a8800007 	ldb	r2,0(r21)
 800b584:	10028b26 	beq	r2,zero,800bfb4 <___vfprintf_internal_r+0xb14>
 800b588:	00c00944 	movi	r3,37
 800b58c:	a823883a 	mov	r17,r21
 800b590:	10c0021e 	bne	r2,r3,800b59c <___vfprintf_internal_r+0xfc>
 800b594:	00001406 	br	800b5e8 <___vfprintf_internal_r+0x148>
 800b598:	10c00326 	beq	r2,r3,800b5a8 <___vfprintf_internal_r+0x108>
 800b59c:	8c400044 	addi	r17,r17,1
 800b5a0:	88800007 	ldb	r2,0(r17)
 800b5a4:	103ffc1e 	bne	r2,zero,800b598 <___vfprintf_internal_r+0xf8>
 800b5a8:	8d61c83a 	sub	r16,r17,r21
 800b5ac:	80000e26 	beq	r16,zero,800b5e8 <___vfprintf_internal_r+0x148>
 800b5b0:	d8c02017 	ldw	r3,128(sp)
 800b5b4:	d8801f17 	ldw	r2,124(sp)
 800b5b8:	45400015 	stw	r21,0(r8)
 800b5bc:	1c07883a 	add	r3,r3,r16
 800b5c0:	10800044 	addi	r2,r2,1
 800b5c4:	d8c02015 	stw	r3,128(sp)
 800b5c8:	44000115 	stw	r16,4(r8)
 800b5cc:	d8801f15 	stw	r2,124(sp)
 800b5d0:	00c001c4 	movi	r3,7
 800b5d4:	1880a916 	blt	r3,r2,800b87c <___vfprintf_internal_r+0x3dc>
 800b5d8:	42000204 	addi	r8,r8,8
 800b5dc:	d9402f17 	ldw	r5,188(sp)
 800b5e0:	2c0b883a 	add	r5,r5,r16
 800b5e4:	d9402f15 	stw	r5,188(sp)
 800b5e8:	88800007 	ldb	r2,0(r17)
 800b5ec:	1000aa26 	beq	r2,zero,800b898 <___vfprintf_internal_r+0x3f8>
 800b5f0:	8d400044 	addi	r21,r17,1
 800b5f4:	8c400047 	ldb	r17,1(r17)
 800b5f8:	0021883a 	mov	r16,zero
 800b5fc:	00bfffc4 	movi	r2,-1
 800b600:	0025883a 	mov	r18,zero
 800b604:	dc002905 	stb	r16,164(sp)
 800b608:	d8002785 	stb	zero,158(sp)
 800b60c:	d8002b05 	stb	zero,172(sp)
 800b610:	d8802a15 	stw	r2,168(sp)
 800b614:	d8003115 	stw	zero,196(sp)
 800b618:	04c01604 	movi	r19,88
 800b61c:	05800244 	movi	r22,9
 800b620:	9021883a 	mov	r16,r18
 800b624:	4039883a 	mov	fp,r8
 800b628:	ad400044 	addi	r21,r21,1
 800b62c:	88bff804 	addi	r2,r17,-32
 800b630:	98833236 	bltu	r19,r2,800c2fc <___vfprintf_internal_r+0xe5c>
 800b634:	100490ba 	slli	r2,r2,2
 800b638:	00c20074 	movhi	r3,2049
 800b63c:	18ed9304 	addi	r3,r3,-18868
 800b640:	10c5883a 	add	r2,r2,r3
 800b644:	10800017 	ldw	r2,0(r2)
 800b648:	1000683a 	jmp	r2
 800b64c:	0800c1f4 	orhi	zero,at,775
 800b650:	0800c2fc 	xorhi	zero,at,779
 800b654:	0800c2fc 	xorhi	zero,at,779
 800b658:	0800c214 	ori	zero,at,776
 800b65c:	0800c2fc 	xorhi	zero,at,779
 800b660:	0800c2fc 	xorhi	zero,at,779
 800b664:	0800c2fc 	xorhi	zero,at,779
 800b668:	0800c2fc 	xorhi	zero,at,779
 800b66c:	0800c2fc 	xorhi	zero,at,779
 800b670:	0800c2fc 	xorhi	zero,at,779
 800b674:	0800b8fc 	xorhi	zero,at,739
 800b678:	0800c104 	addi	zero,at,772
 800b67c:	0800c2fc 	xorhi	zero,at,779
 800b680:	0800b7c0 	call	800b7c <__alt_mem_onchip_memory2_0+0x800b7c>
 800b684:	0800b920 	cmpeqi	zero,at,740
 800b688:	0800c2fc 	xorhi	zero,at,779
 800b68c:	0800b970 	cmpltui	zero,at,741
 800b690:	0800b97c 	xorhi	zero,at,741
 800b694:	0800b97c 	xorhi	zero,at,741
 800b698:	0800b97c 	xorhi	zero,at,741
 800b69c:	0800b97c 	xorhi	zero,at,741
 800b6a0:	0800b97c 	xorhi	zero,at,741
 800b6a4:	0800b97c 	xorhi	zero,at,741
 800b6a8:	0800b97c 	xorhi	zero,at,741
 800b6ac:	0800b97c 	xorhi	zero,at,741
 800b6b0:	0800b97c 	xorhi	zero,at,741
 800b6b4:	0800c2fc 	xorhi	zero,at,779
 800b6b8:	0800c2fc 	xorhi	zero,at,779
 800b6bc:	0800c2fc 	xorhi	zero,at,779
 800b6c0:	0800c2fc 	xorhi	zero,at,779
 800b6c4:	0800c2fc 	xorhi	zero,at,779
 800b6c8:	0800c2fc 	xorhi	zero,at,779
 800b6cc:	0800c2fc 	xorhi	zero,at,779
 800b6d0:	0800c2fc 	xorhi	zero,at,779
 800b6d4:	0800c2fc 	xorhi	zero,at,779
 800b6d8:	0800c2fc 	xorhi	zero,at,779
 800b6dc:	0800b9b8 	rdprs	zero,at,742
 800b6e0:	0800ba80 	call	800ba8 <__alt_mem_onchip_memory2_0+0x800ba8>
 800b6e4:	0800c2fc 	xorhi	zero,at,779
 800b6e8:	0800ba80 	call	800ba8 <__alt_mem_onchip_memory2_0+0x800ba8>
 800b6ec:	0800c2fc 	xorhi	zero,at,779
 800b6f0:	0800c2fc 	xorhi	zero,at,779
 800b6f4:	0800c2fc 	xorhi	zero,at,779
 800b6f8:	0800c2fc 	xorhi	zero,at,779
 800b6fc:	0800bb2c 	andhi	zero,at,748
 800b700:	0800c2fc 	xorhi	zero,at,779
 800b704:	0800c2fc 	xorhi	zero,at,779
 800b708:	0800bb38 	rdprs	zero,at,748
 800b70c:	0800c2fc 	xorhi	zero,at,779
 800b710:	0800c2fc 	xorhi	zero,at,779
 800b714:	0800c2fc 	xorhi	zero,at,779
 800b718:	0800c2fc 	xorhi	zero,at,779
 800b71c:	0800c2fc 	xorhi	zero,at,779
 800b720:	0800bfbc 	xorhi	zero,at,766
 800b724:	0800c2fc 	xorhi	zero,at,779
 800b728:	0800c2fc 	xorhi	zero,at,779
 800b72c:	0800c028 	cmpgeui	zero,at,768
 800b730:	0800c2fc 	xorhi	zero,at,779
 800b734:	0800c2fc 	xorhi	zero,at,779
 800b738:	0800c2fc 	xorhi	zero,at,779
 800b73c:	0800c2fc 	xorhi	zero,at,779
 800b740:	0800c2fc 	xorhi	zero,at,779
 800b744:	0800c2fc 	xorhi	zero,at,779
 800b748:	0800c2fc 	xorhi	zero,at,779
 800b74c:	0800c2fc 	xorhi	zero,at,779
 800b750:	0800c2fc 	xorhi	zero,at,779
 800b754:	0800c2fc 	xorhi	zero,at,779
 800b758:	0800c2a0 	cmpeqi	zero,at,778
 800b75c:	0800c220 	cmpeqi	zero,at,776
 800b760:	0800ba80 	call	800ba8 <__alt_mem_onchip_memory2_0+0x800ba8>
 800b764:	0800ba80 	call	800ba8 <__alt_mem_onchip_memory2_0+0x800ba8>
 800b768:	0800ba80 	call	800ba8 <__alt_mem_onchip_memory2_0+0x800ba8>
 800b76c:	0800c240 	call	800c24 <__alt_mem_onchip_memory2_0+0x800c24>
 800b770:	0800c220 	cmpeqi	zero,at,776
 800b774:	0800c2fc 	xorhi	zero,at,779
 800b778:	0800c2fc 	xorhi	zero,at,779
 800b77c:	0800c24c 	andi	zero,at,777
 800b780:	0800c2fc 	xorhi	zero,at,779
 800b784:	0800c260 	cmpeqi	zero,at,777
 800b788:	0800c0e4 	muli	zero,at,771
 800b78c:	0800b7cc 	andi	zero,at,735
 800b790:	0800c11c 	xori	zero,at,772
 800b794:	0800c2fc 	xorhi	zero,at,779
 800b798:	0800c128 	cmpgeui	zero,at,772
 800b79c:	0800c2fc 	xorhi	zero,at,779
 800b7a0:	0800c18c 	andi	zero,at,774
 800b7a4:	0800c2fc 	xorhi	zero,at,779
 800b7a8:	0800c2fc 	xorhi	zero,at,779
 800b7ac:	0800c1ac 	andhi	zero,at,774
 800b7b0:	d8c03117 	ldw	r3,196(sp)
 800b7b4:	d8802e15 	stw	r2,184(sp)
 800b7b8:	00c7c83a 	sub	r3,zero,r3
 800b7bc:	d8c03115 	stw	r3,196(sp)
 800b7c0:	84000114 	ori	r16,r16,4
 800b7c4:	ac400007 	ldb	r17,0(r21)
 800b7c8:	003f9706 	br	800b628 <___vfprintf_internal_r+0x188>
 800b7cc:	00800c04 	movi	r2,48
 800b7d0:	d8802705 	stb	r2,156(sp)
 800b7d4:	00801e04 	movi	r2,120
 800b7d8:	d8802745 	stb	r2,157(sp)
 800b7dc:	d9002a17 	ldw	r4,168(sp)
 800b7e0:	d8802e17 	ldw	r2,184(sp)
 800b7e4:	d8002785 	stb	zero,158(sp)
 800b7e8:	e011883a 	mov	r8,fp
 800b7ec:	10c00104 	addi	r3,r2,4
 800b7f0:	14c00017 	ldw	r19,0(r2)
 800b7f4:	002d883a 	mov	r22,zero
 800b7f8:	80800094 	ori	r2,r16,2
 800b7fc:	2002ca16 	blt	r4,zero,800c328 <___vfprintf_internal_r+0xe88>
 800b800:	00bfdfc4 	movi	r2,-129
 800b804:	80a4703a 	and	r18,r16,r2
 800b808:	d8c02e15 	stw	r3,184(sp)
 800b80c:	94800094 	ori	r18,r18,2
 800b810:	9802b41e 	bne	r19,zero,800c2e4 <___vfprintf_internal_r+0xe44>
 800b814:	014200b4 	movhi	r5,2050
 800b818:	296a9d04 	addi	r5,r5,-21900
 800b81c:	d9403915 	stw	r5,228(sp)
 800b820:	04401e04 	movi	r17,120
 800b824:	d8802a17 	ldw	r2,168(sp)
 800b828:	0039883a 	mov	fp,zero
 800b82c:	1001fa26 	beq	r2,zero,800c018 <___vfprintf_internal_r+0xb78>
 800b830:	0027883a 	mov	r19,zero
 800b834:	002d883a 	mov	r22,zero
 800b838:	00021906 	br	800c0a0 <___vfprintf_internal_r+0xc00>
 800b83c:	d9002d17 	ldw	r4,180(sp)
 800b840:	b80b883a 	mov	r5,r23
 800b844:	800d8540 	call	800d854 <__swsetup_r>
 800b848:	1005dc1e 	bne	r2,zero,800cfbc <___vfprintf_internal_r+0x1b1c>
 800b84c:	b880030b 	ldhu	r2,12(r23)
 800b850:	00c00284 	movi	r3,10
 800b854:	1080068c 	andi	r2,r2,26
 800b858:	10ff3a1e 	bne	r2,r3,800b544 <___vfprintf_internal_r+0xa4>
 800b85c:	b880038f 	ldh	r2,14(r23)
 800b860:	103f3816 	blt	r2,zero,800b544 <___vfprintf_internal_r+0xa4>
 800b864:	d9c02e17 	ldw	r7,184(sp)
 800b868:	d9002d17 	ldw	r4,180(sp)
 800b86c:	a80d883a 	mov	r6,r21
 800b870:	b80b883a 	mov	r5,r23
 800b874:	800d7980 	call	800d798 <__sbprintf>
 800b878:	00001106 	br	800b8c0 <___vfprintf_internal_r+0x420>
 800b87c:	d9002d17 	ldw	r4,180(sp)
 800b880:	d9801e04 	addi	r6,sp,120
 800b884:	b80b883a 	mov	r5,r23
 800b888:	80122980 	call	8012298 <__sprint_r>
 800b88c:	1000081e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800b890:	da000404 	addi	r8,sp,16
 800b894:	003f5106 	br	800b5dc <___vfprintf_internal_r+0x13c>
 800b898:	d8802017 	ldw	r2,128(sp)
 800b89c:	10000426 	beq	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800b8a0:	d9002d17 	ldw	r4,180(sp)
 800b8a4:	d9801e04 	addi	r6,sp,120
 800b8a8:	b80b883a 	mov	r5,r23
 800b8ac:	80122980 	call	8012298 <__sprint_r>
 800b8b0:	b880030b 	ldhu	r2,12(r23)
 800b8b4:	1080100c 	andi	r2,r2,64
 800b8b8:	1005c01e 	bne	r2,zero,800cfbc <___vfprintf_internal_r+0x1b1c>
 800b8bc:	d8802f17 	ldw	r2,188(sp)
 800b8c0:	dfc04717 	ldw	ra,284(sp)
 800b8c4:	df004617 	ldw	fp,280(sp)
 800b8c8:	ddc04517 	ldw	r23,276(sp)
 800b8cc:	dd804417 	ldw	r22,272(sp)
 800b8d0:	dd404317 	ldw	r21,268(sp)
 800b8d4:	dd004217 	ldw	r20,264(sp)
 800b8d8:	dcc04117 	ldw	r19,260(sp)
 800b8dc:	dc804017 	ldw	r18,256(sp)
 800b8e0:	dc403f17 	ldw	r17,252(sp)
 800b8e4:	dc003e17 	ldw	r16,248(sp)
 800b8e8:	dec04804 	addi	sp,sp,288
 800b8ec:	f800283a 	ret
 800b8f0:	d9002d17 	ldw	r4,180(sp)
 800b8f4:	800f8600 	call	800f860 <__sinit>
 800b8f8:	003f0206 	br	800b504 <___vfprintf_internal_r+0x64>
 800b8fc:	d9002e17 	ldw	r4,184(sp)
 800b900:	d9402e17 	ldw	r5,184(sp)
 800b904:	21000017 	ldw	r4,0(r4)
 800b908:	28800104 	addi	r2,r5,4
 800b90c:	d9003115 	stw	r4,196(sp)
 800b910:	203fa716 	blt	r4,zero,800b7b0 <___vfprintf_internal_r+0x310>
 800b914:	d8802e15 	stw	r2,184(sp)
 800b918:	ac400007 	ldb	r17,0(r21)
 800b91c:	003f4206 	br	800b628 <___vfprintf_internal_r+0x188>
 800b920:	ac400007 	ldb	r17,0(r21)
 800b924:	01000a84 	movi	r4,42
 800b928:	a8c00044 	addi	r3,r21,1
 800b92c:	89075826 	beq	r17,r4,800d690 <___vfprintf_internal_r+0x21f0>
 800b930:	8cbff404 	addi	r18,r17,-48
 800b934:	b486ae36 	bltu	r22,r18,800d3f0 <___vfprintf_internal_r+0x1f50>
 800b938:	0009883a 	mov	r4,zero
 800b93c:	1823883a 	mov	r17,r3
 800b940:	01400284 	movi	r5,10
 800b944:	800a1780 	call	800a178 <__mulsi3>
 800b948:	88c00007 	ldb	r3,0(r17)
 800b94c:	1489883a 	add	r4,r2,r18
 800b950:	8d400044 	addi	r21,r17,1
 800b954:	1cbff404 	addi	r18,r3,-48
 800b958:	a823883a 	mov	r17,r21
 800b95c:	b4bff82e 	bgeu	r22,r18,800b940 <___vfprintf_internal_r+0x4a0>
 800b960:	1823883a 	mov	r17,r3
 800b964:	2005f616 	blt	r4,zero,800d140 <___vfprintf_internal_r+0x1ca0>
 800b968:	d9002a15 	stw	r4,168(sp)
 800b96c:	003f2f06 	br	800b62c <___vfprintf_internal_r+0x18c>
 800b970:	84002014 	ori	r16,r16,128
 800b974:	ac400007 	ldb	r17,0(r21)
 800b978:	003f2b06 	br	800b628 <___vfprintf_internal_r+0x188>
 800b97c:	8cbff404 	addi	r18,r17,-48
 800b980:	d8003115 	stw	zero,196(sp)
 800b984:	0009883a 	mov	r4,zero
 800b988:	a823883a 	mov	r17,r21
 800b98c:	01400284 	movi	r5,10
 800b990:	800a1780 	call	800a178 <__mulsi3>
 800b994:	88c00007 	ldb	r3,0(r17)
 800b998:	9089883a 	add	r4,r18,r2
 800b99c:	ad400044 	addi	r21,r21,1
 800b9a0:	1cbff404 	addi	r18,r3,-48
 800b9a4:	a823883a 	mov	r17,r21
 800b9a8:	b4bff82e 	bgeu	r22,r18,800b98c <___vfprintf_internal_r+0x4ec>
 800b9ac:	1823883a 	mov	r17,r3
 800b9b0:	d9003115 	stw	r4,196(sp)
 800b9b4:	003f1d06 	br	800b62c <___vfprintf_internal_r+0x18c>
 800b9b8:	8025883a 	mov	r18,r16
 800b9bc:	dc002903 	ldbu	r16,164(sp)
 800b9c0:	e011883a 	mov	r8,fp
 800b9c4:	84003fcc 	andi	r16,r16,255
 800b9c8:	8007531e 	bne	r16,zero,800d718 <___vfprintf_internal_r+0x2278>
 800b9cc:	94800414 	ori	r18,r18,16
 800b9d0:	9080080c 	andi	r2,r18,32
 800b9d4:	1003a326 	beq	r2,zero,800c864 <___vfprintf_internal_r+0x13c4>
 800b9d8:	d9002e17 	ldw	r4,184(sp)
 800b9dc:	20800117 	ldw	r2,4(r4)
 800b9e0:	24c00017 	ldw	r19,0(r4)
 800b9e4:	21000204 	addi	r4,r4,8
 800b9e8:	d9002e15 	stw	r4,184(sp)
 800b9ec:	102d883a 	mov	r22,r2
 800b9f0:	10047316 	blt	r2,zero,800cbc0 <___vfprintf_internal_r+0x1720>
 800b9f4:	d9002a17 	ldw	r4,168(sp)
 800b9f8:	df002783 	ldbu	fp,158(sp)
 800b9fc:	2003e416 	blt	r4,zero,800c990 <___vfprintf_internal_r+0x14f0>
 800ba00:	00ffdfc4 	movi	r3,-129
 800ba04:	9d84b03a 	or	r2,r19,r22
 800ba08:	90e4703a 	and	r18,r18,r3
 800ba0c:	10018026 	beq	r2,zero,800c010 <___vfprintf_internal_r+0xb70>
 800ba10:	b003ab26 	beq	r22,zero,800c8c0 <___vfprintf_internal_r+0x1420>
 800ba14:	dc402915 	stw	r17,164(sp)
 800ba18:	dc001e04 	addi	r16,sp,120
 800ba1c:	b023883a 	mov	r17,r22
 800ba20:	402d883a 	mov	r22,r8
 800ba24:	9809883a 	mov	r4,r19
 800ba28:	880b883a 	mov	r5,r17
 800ba2c:	01800284 	movi	r6,10
 800ba30:	000f883a 	mov	r7,zero
 800ba34:	80147dc0 	call	80147dc <__umoddi3>
 800ba38:	10800c04 	addi	r2,r2,48
 800ba3c:	843fffc4 	addi	r16,r16,-1
 800ba40:	9809883a 	mov	r4,r19
 800ba44:	880b883a 	mov	r5,r17
 800ba48:	80800005 	stb	r2,0(r16)
 800ba4c:	01800284 	movi	r6,10
 800ba50:	000f883a 	mov	r7,zero
 800ba54:	80141e00 	call	80141e0 <__udivdi3>
 800ba58:	1027883a 	mov	r19,r2
 800ba5c:	10c4b03a 	or	r2,r2,r3
 800ba60:	1823883a 	mov	r17,r3
 800ba64:	103fef1e 	bne	r2,zero,800ba24 <___vfprintf_internal_r+0x584>
 800ba68:	d8c02817 	ldw	r3,160(sp)
 800ba6c:	dc402917 	ldw	r17,164(sp)
 800ba70:	b011883a 	mov	r8,r22
 800ba74:	1c07c83a 	sub	r3,r3,r16
 800ba78:	d8c02b15 	stw	r3,172(sp)
 800ba7c:	00005f06 	br	800bbfc <___vfprintf_internal_r+0x75c>
 800ba80:	8025883a 	mov	r18,r16
 800ba84:	dc002903 	ldbu	r16,164(sp)
 800ba88:	e011883a 	mov	r8,fp
 800ba8c:	84003fcc 	andi	r16,r16,255
 800ba90:	80071e1e 	bne	r16,zero,800d70c <___vfprintf_internal_r+0x226c>
 800ba94:	9080020c 	andi	r2,r18,8
 800ba98:	1004af26 	beq	r2,zero,800cd58 <___vfprintf_internal_r+0x18b8>
 800ba9c:	d9002e17 	ldw	r4,184(sp)
 800baa0:	d9402e17 	ldw	r5,184(sp)
 800baa4:	d8802e17 	ldw	r2,184(sp)
 800baa8:	21000017 	ldw	r4,0(r4)
 800baac:	29400117 	ldw	r5,4(r5)
 800bab0:	10800204 	addi	r2,r2,8
 800bab4:	d9003615 	stw	r4,216(sp)
 800bab8:	d9403815 	stw	r5,224(sp)
 800babc:	d8802e15 	stw	r2,184(sp)
 800bac0:	d9003617 	ldw	r4,216(sp)
 800bac4:	d9403817 	ldw	r5,224(sp)
 800bac8:	da003d15 	stw	r8,244(sp)
 800bacc:	04000044 	movi	r16,1
 800bad0:	8011fec0 	call	8011fec <__fpclassifyd>
 800bad4:	da003d17 	ldw	r8,244(sp)
 800bad8:	1404441e 	bne	r2,r16,800cbec <___vfprintf_internal_r+0x174c>
 800badc:	d9003617 	ldw	r4,216(sp)
 800bae0:	d9403817 	ldw	r5,224(sp)
 800bae4:	000d883a 	mov	r6,zero
 800bae8:	000f883a 	mov	r7,zero
 800baec:	80161800 	call	8016180 <__ledf2>
 800baf0:	da003d17 	ldw	r8,244(sp)
 800baf4:	1005e316 	blt	r2,zero,800d284 <___vfprintf_internal_r+0x1de4>
 800baf8:	df002783 	ldbu	fp,158(sp)
 800bafc:	008011c4 	movi	r2,71
 800bb00:	1445580e 	bge	r2,r17,800d064 <___vfprintf_internal_r+0x1bc4>
 800bb04:	040200b4 	movhi	r16,2050
 800bb08:	842a9504 	addi	r16,r16,-21932
 800bb0c:	00c000c4 	movi	r3,3
 800bb10:	00bfdfc4 	movi	r2,-129
 800bb14:	d8c02915 	stw	r3,164(sp)
 800bb18:	90a4703a 	and	r18,r18,r2
 800bb1c:	d8c02b15 	stw	r3,172(sp)
 800bb20:	d8002a15 	stw	zero,168(sp)
 800bb24:	d8003215 	stw	zero,200(sp)
 800bb28:	00003a06 	br	800bc14 <___vfprintf_internal_r+0x774>
 800bb2c:	84000214 	ori	r16,r16,8
 800bb30:	ac400007 	ldb	r17,0(r21)
 800bb34:	003ebc06 	br	800b628 <___vfprintf_internal_r+0x188>
 800bb38:	8025883a 	mov	r18,r16
 800bb3c:	dc002903 	ldbu	r16,164(sp)
 800bb40:	e011883a 	mov	r8,fp
 800bb44:	84003fcc 	andi	r16,r16,255
 800bb48:	8007001e 	bne	r16,zero,800d74c <___vfprintf_internal_r+0x22ac>
 800bb4c:	94800414 	ori	r18,r18,16
 800bb50:	9080080c 	andi	r2,r18,32
 800bb54:	1002fa26 	beq	r2,zero,800c740 <___vfprintf_internal_r+0x12a0>
 800bb58:	d9002e17 	ldw	r4,184(sp)
 800bb5c:	d9402a17 	ldw	r5,168(sp)
 800bb60:	d8002785 	stb	zero,158(sp)
 800bb64:	20800204 	addi	r2,r4,8
 800bb68:	24c00017 	ldw	r19,0(r4)
 800bb6c:	25800117 	ldw	r22,4(r4)
 800bb70:	2804b116 	blt	r5,zero,800ce38 <___vfprintf_internal_r+0x1998>
 800bb74:	013fdfc4 	movi	r4,-129
 800bb78:	9d86b03a 	or	r3,r19,r22
 800bb7c:	d8802e15 	stw	r2,184(sp)
 800bb80:	9124703a 	and	r18,r18,r4
 800bb84:	1802fb1e 	bne	r3,zero,800c774 <___vfprintf_internal_r+0x12d4>
 800bb88:	d8c02a17 	ldw	r3,168(sp)
 800bb8c:	0039883a 	mov	fp,zero
 800bb90:	1805e526 	beq	r3,zero,800d328 <___vfprintf_internal_r+0x1e88>
 800bb94:	0027883a 	mov	r19,zero
 800bb98:	002d883a 	mov	r22,zero
 800bb9c:	dc001e04 	addi	r16,sp,120
 800bba0:	9806d0fa 	srli	r3,r19,3
 800bba4:	b008977a 	slli	r4,r22,29
 800bba8:	b02cd0fa 	srli	r22,r22,3
 800bbac:	9cc001cc 	andi	r19,r19,7
 800bbb0:	98800c04 	addi	r2,r19,48
 800bbb4:	843fffc4 	addi	r16,r16,-1
 800bbb8:	20e6b03a 	or	r19,r4,r3
 800bbbc:	80800005 	stb	r2,0(r16)
 800bbc0:	9d86b03a 	or	r3,r19,r22
 800bbc4:	183ff61e 	bne	r3,zero,800bba0 <___vfprintf_internal_r+0x700>
 800bbc8:	90c0004c 	andi	r3,r18,1
 800bbcc:	18014126 	beq	r3,zero,800c0d4 <___vfprintf_internal_r+0xc34>
 800bbd0:	10803fcc 	andi	r2,r2,255
 800bbd4:	1080201c 	xori	r2,r2,128
 800bbd8:	10bfe004 	addi	r2,r2,-128
 800bbdc:	00c00c04 	movi	r3,48
 800bbe0:	10c13c26 	beq	r2,r3,800c0d4 <___vfprintf_internal_r+0xc34>
 800bbe4:	80ffffc5 	stb	r3,-1(r16)
 800bbe8:	d8c02817 	ldw	r3,160(sp)
 800bbec:	80bfffc4 	addi	r2,r16,-1
 800bbf0:	1021883a 	mov	r16,r2
 800bbf4:	1887c83a 	sub	r3,r3,r2
 800bbf8:	d8c02b15 	stw	r3,172(sp)
 800bbfc:	d8802b17 	ldw	r2,172(sp)
 800bc00:	d9002a17 	ldw	r4,168(sp)
 800bc04:	1100010e 	bge	r2,r4,800bc0c <___vfprintf_internal_r+0x76c>
 800bc08:	2005883a 	mov	r2,r4
 800bc0c:	d8802915 	stw	r2,164(sp)
 800bc10:	d8003215 	stw	zero,200(sp)
 800bc14:	e7003fcc 	andi	fp,fp,255
 800bc18:	e700201c 	xori	fp,fp,128
 800bc1c:	e73fe004 	addi	fp,fp,-128
 800bc20:	e0000326 	beq	fp,zero,800bc30 <___vfprintf_internal_r+0x790>
 800bc24:	d8c02917 	ldw	r3,164(sp)
 800bc28:	18c00044 	addi	r3,r3,1
 800bc2c:	d8c02915 	stw	r3,164(sp)
 800bc30:	90c0008c 	andi	r3,r18,2
 800bc34:	d8c02c15 	stw	r3,176(sp)
 800bc38:	18000326 	beq	r3,zero,800bc48 <___vfprintf_internal_r+0x7a8>
 800bc3c:	d8c02917 	ldw	r3,164(sp)
 800bc40:	18c00084 	addi	r3,r3,2
 800bc44:	d8c02915 	stw	r3,164(sp)
 800bc48:	90c0210c 	andi	r3,r18,132
 800bc4c:	d8c03015 	stw	r3,192(sp)
 800bc50:	1801c51e 	bne	r3,zero,800c368 <___vfprintf_internal_r+0xec8>
 800bc54:	d9003117 	ldw	r4,196(sp)
 800bc58:	d8c02917 	ldw	r3,164(sp)
 800bc5c:	20e7c83a 	sub	r19,r4,r3
 800bc60:	04c1c10e 	bge	zero,r19,800c368 <___vfprintf_internal_r+0xec8>
 800bc64:	02400404 	movi	r9,16
 800bc68:	d8c02017 	ldw	r3,128(sp)
 800bc6c:	d8801f17 	ldw	r2,124(sp)
 800bc70:	4cc52f0e 	bge	r9,r19,800d130 <___vfprintf_internal_r+0x1c90>
 800bc74:	014200b4 	movhi	r5,2050
 800bc78:	296aa884 	addi	r5,r5,-21854
 800bc7c:	dc403b15 	stw	r17,236(sp)
 800bc80:	d9403515 	stw	r5,212(sp)
 800bc84:	9823883a 	mov	r17,r19
 800bc88:	482d883a 	mov	r22,r9
 800bc8c:	9027883a 	mov	r19,r18
 800bc90:	070001c4 	movi	fp,7
 800bc94:	8025883a 	mov	r18,r16
 800bc98:	dc002d17 	ldw	r16,180(sp)
 800bc9c:	00000306 	br	800bcac <___vfprintf_internal_r+0x80c>
 800bca0:	8c7ffc04 	addi	r17,r17,-16
 800bca4:	42000204 	addi	r8,r8,8
 800bca8:	b440130e 	bge	r22,r17,800bcf8 <___vfprintf_internal_r+0x858>
 800bcac:	010200b4 	movhi	r4,2050
 800bcb0:	18c00404 	addi	r3,r3,16
 800bcb4:	10800044 	addi	r2,r2,1
 800bcb8:	212aa884 	addi	r4,r4,-21854
 800bcbc:	41000015 	stw	r4,0(r8)
 800bcc0:	45800115 	stw	r22,4(r8)
 800bcc4:	d8c02015 	stw	r3,128(sp)
 800bcc8:	d8801f15 	stw	r2,124(sp)
 800bccc:	e0bff40e 	bge	fp,r2,800bca0 <___vfprintf_internal_r+0x800>
 800bcd0:	d9801e04 	addi	r6,sp,120
 800bcd4:	b80b883a 	mov	r5,r23
 800bcd8:	8009883a 	mov	r4,r16
 800bcdc:	80122980 	call	8012298 <__sprint_r>
 800bce0:	103ef31e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800bce4:	8c7ffc04 	addi	r17,r17,-16
 800bce8:	d8c02017 	ldw	r3,128(sp)
 800bcec:	d8801f17 	ldw	r2,124(sp)
 800bcf0:	da000404 	addi	r8,sp,16
 800bcf4:	b47fed16 	blt	r22,r17,800bcac <___vfprintf_internal_r+0x80c>
 800bcf8:	9021883a 	mov	r16,r18
 800bcfc:	9825883a 	mov	r18,r19
 800bd00:	8827883a 	mov	r19,r17
 800bd04:	dc403b17 	ldw	r17,236(sp)
 800bd08:	d9403517 	ldw	r5,212(sp)
 800bd0c:	98c7883a 	add	r3,r19,r3
 800bd10:	10800044 	addi	r2,r2,1
 800bd14:	41400015 	stw	r5,0(r8)
 800bd18:	44c00115 	stw	r19,4(r8)
 800bd1c:	d8c02015 	stw	r3,128(sp)
 800bd20:	d8801f15 	stw	r2,124(sp)
 800bd24:	010001c4 	movi	r4,7
 800bd28:	2082c516 	blt	r4,r2,800c840 <___vfprintf_internal_r+0x13a0>
 800bd2c:	df002787 	ldb	fp,158(sp)
 800bd30:	42000204 	addi	r8,r8,8
 800bd34:	e0000c26 	beq	fp,zero,800bd68 <___vfprintf_internal_r+0x8c8>
 800bd38:	d8801f17 	ldw	r2,124(sp)
 800bd3c:	d9002784 	addi	r4,sp,158
 800bd40:	18c00044 	addi	r3,r3,1
 800bd44:	10800044 	addi	r2,r2,1
 800bd48:	41000015 	stw	r4,0(r8)
 800bd4c:	01000044 	movi	r4,1
 800bd50:	41000115 	stw	r4,4(r8)
 800bd54:	d8c02015 	stw	r3,128(sp)
 800bd58:	d8801f15 	stw	r2,124(sp)
 800bd5c:	010001c4 	movi	r4,7
 800bd60:	20825e16 	blt	r4,r2,800c6dc <___vfprintf_internal_r+0x123c>
 800bd64:	42000204 	addi	r8,r8,8
 800bd68:	d8802c17 	ldw	r2,176(sp)
 800bd6c:	10000c26 	beq	r2,zero,800bda0 <___vfprintf_internal_r+0x900>
 800bd70:	d8801f17 	ldw	r2,124(sp)
 800bd74:	d9002704 	addi	r4,sp,156
 800bd78:	18c00084 	addi	r3,r3,2
 800bd7c:	10800044 	addi	r2,r2,1
 800bd80:	41000015 	stw	r4,0(r8)
 800bd84:	01000084 	movi	r4,2
 800bd88:	41000115 	stw	r4,4(r8)
 800bd8c:	d8c02015 	stw	r3,128(sp)
 800bd90:	d8801f15 	stw	r2,124(sp)
 800bd94:	010001c4 	movi	r4,7
 800bd98:	20825816 	blt	r4,r2,800c6fc <___vfprintf_internal_r+0x125c>
 800bd9c:	42000204 	addi	r8,r8,8
 800bda0:	d9003017 	ldw	r4,192(sp)
 800bda4:	00802004 	movi	r2,128
 800bda8:	2081bb26 	beq	r4,r2,800c498 <___vfprintf_internal_r+0xff8>
 800bdac:	d9402a17 	ldw	r5,168(sp)
 800bdb0:	d8802b17 	ldw	r2,172(sp)
 800bdb4:	28adc83a 	sub	r22,r5,r2
 800bdb8:	0580310e 	bge	zero,r22,800be80 <___vfprintf_internal_r+0x9e0>
 800bdbc:	07000404 	movi	fp,16
 800bdc0:	d8801f17 	ldw	r2,124(sp)
 800bdc4:	e584360e 	bge	fp,r22,800cea0 <___vfprintf_internal_r+0x1a00>
 800bdc8:	014200b4 	movhi	r5,2050
 800bdcc:	296aa484 	addi	r5,r5,-21870
 800bdd0:	dc402a15 	stw	r17,168(sp)
 800bdd4:	d9402c15 	stw	r5,176(sp)
 800bdd8:	b023883a 	mov	r17,r22
 800bddc:	04c001c4 	movi	r19,7
 800bde0:	a82d883a 	mov	r22,r21
 800bde4:	902b883a 	mov	r21,r18
 800bde8:	8025883a 	mov	r18,r16
 800bdec:	dc002d17 	ldw	r16,180(sp)
 800bdf0:	00000306 	br	800be00 <___vfprintf_internal_r+0x960>
 800bdf4:	8c7ffc04 	addi	r17,r17,-16
 800bdf8:	42000204 	addi	r8,r8,8
 800bdfc:	e440110e 	bge	fp,r17,800be44 <___vfprintf_internal_r+0x9a4>
 800be00:	18c00404 	addi	r3,r3,16
 800be04:	10800044 	addi	r2,r2,1
 800be08:	45000015 	stw	r20,0(r8)
 800be0c:	47000115 	stw	fp,4(r8)
 800be10:	d8c02015 	stw	r3,128(sp)
 800be14:	d8801f15 	stw	r2,124(sp)
 800be18:	98bff60e 	bge	r19,r2,800bdf4 <___vfprintf_internal_r+0x954>
 800be1c:	d9801e04 	addi	r6,sp,120
 800be20:	b80b883a 	mov	r5,r23
 800be24:	8009883a 	mov	r4,r16
 800be28:	80122980 	call	8012298 <__sprint_r>
 800be2c:	103ea01e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800be30:	8c7ffc04 	addi	r17,r17,-16
 800be34:	d8c02017 	ldw	r3,128(sp)
 800be38:	d8801f17 	ldw	r2,124(sp)
 800be3c:	da000404 	addi	r8,sp,16
 800be40:	e47fef16 	blt	fp,r17,800be00 <___vfprintf_internal_r+0x960>
 800be44:	9021883a 	mov	r16,r18
 800be48:	a825883a 	mov	r18,r21
 800be4c:	b02b883a 	mov	r21,r22
 800be50:	882d883a 	mov	r22,r17
 800be54:	dc402a17 	ldw	r17,168(sp)
 800be58:	d9002c17 	ldw	r4,176(sp)
 800be5c:	1d87883a 	add	r3,r3,r22
 800be60:	10800044 	addi	r2,r2,1
 800be64:	41000015 	stw	r4,0(r8)
 800be68:	45800115 	stw	r22,4(r8)
 800be6c:	d8c02015 	stw	r3,128(sp)
 800be70:	d8801f15 	stw	r2,124(sp)
 800be74:	010001c4 	movi	r4,7
 800be78:	20821016 	blt	r4,r2,800c6bc <___vfprintf_internal_r+0x121c>
 800be7c:	42000204 	addi	r8,r8,8
 800be80:	9080400c 	andi	r2,r18,256
 800be84:	10013a1e 	bne	r2,zero,800c370 <___vfprintf_internal_r+0xed0>
 800be88:	d9402b17 	ldw	r5,172(sp)
 800be8c:	d8801f17 	ldw	r2,124(sp)
 800be90:	44000015 	stw	r16,0(r8)
 800be94:	1947883a 	add	r3,r3,r5
 800be98:	10800044 	addi	r2,r2,1
 800be9c:	41400115 	stw	r5,4(r8)
 800bea0:	d8c02015 	stw	r3,128(sp)
 800bea4:	d8801f15 	stw	r2,124(sp)
 800bea8:	010001c4 	movi	r4,7
 800beac:	2081f516 	blt	r4,r2,800c684 <___vfprintf_internal_r+0x11e4>
 800beb0:	42000204 	addi	r8,r8,8
 800beb4:	9480010c 	andi	r18,r18,4
 800beb8:	90003226 	beq	r18,zero,800bf84 <___vfprintf_internal_r+0xae4>
 800bebc:	d9403117 	ldw	r5,196(sp)
 800bec0:	d8802917 	ldw	r2,164(sp)
 800bec4:	28a1c83a 	sub	r16,r5,r2
 800bec8:	04002e0e 	bge	zero,r16,800bf84 <___vfprintf_internal_r+0xae4>
 800becc:	04400404 	movi	r17,16
 800bed0:	d8801f17 	ldw	r2,124(sp)
 800bed4:	8c04c40e 	bge	r17,r16,800d1e8 <___vfprintf_internal_r+0x1d48>
 800bed8:	014200b4 	movhi	r5,2050
 800bedc:	296aa884 	addi	r5,r5,-21854
 800bee0:	d9403515 	stw	r5,212(sp)
 800bee4:	048001c4 	movi	r18,7
 800bee8:	dcc02d17 	ldw	r19,180(sp)
 800beec:	00000306 	br	800befc <___vfprintf_internal_r+0xa5c>
 800bef0:	843ffc04 	addi	r16,r16,-16
 800bef4:	42000204 	addi	r8,r8,8
 800bef8:	8c00130e 	bge	r17,r16,800bf48 <___vfprintf_internal_r+0xaa8>
 800befc:	010200b4 	movhi	r4,2050
 800bf00:	18c00404 	addi	r3,r3,16
 800bf04:	10800044 	addi	r2,r2,1
 800bf08:	212aa884 	addi	r4,r4,-21854
 800bf0c:	41000015 	stw	r4,0(r8)
 800bf10:	44400115 	stw	r17,4(r8)
 800bf14:	d8c02015 	stw	r3,128(sp)
 800bf18:	d8801f15 	stw	r2,124(sp)
 800bf1c:	90bff40e 	bge	r18,r2,800bef0 <___vfprintf_internal_r+0xa50>
 800bf20:	d9801e04 	addi	r6,sp,120
 800bf24:	b80b883a 	mov	r5,r23
 800bf28:	9809883a 	mov	r4,r19
 800bf2c:	80122980 	call	8012298 <__sprint_r>
 800bf30:	103e5f1e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800bf34:	843ffc04 	addi	r16,r16,-16
 800bf38:	d8c02017 	ldw	r3,128(sp)
 800bf3c:	d8801f17 	ldw	r2,124(sp)
 800bf40:	da000404 	addi	r8,sp,16
 800bf44:	8c3fed16 	blt	r17,r16,800befc <___vfprintf_internal_r+0xa5c>
 800bf48:	d9403517 	ldw	r5,212(sp)
 800bf4c:	1c07883a 	add	r3,r3,r16
 800bf50:	10800044 	addi	r2,r2,1
 800bf54:	41400015 	stw	r5,0(r8)
 800bf58:	44000115 	stw	r16,4(r8)
 800bf5c:	d8c02015 	stw	r3,128(sp)
 800bf60:	d8801f15 	stw	r2,124(sp)
 800bf64:	010001c4 	movi	r4,7
 800bf68:	2080060e 	bge	r4,r2,800bf84 <___vfprintf_internal_r+0xae4>
 800bf6c:	d9002d17 	ldw	r4,180(sp)
 800bf70:	d9801e04 	addi	r6,sp,120
 800bf74:	b80b883a 	mov	r5,r23
 800bf78:	80122980 	call	8012298 <__sprint_r>
 800bf7c:	103e4c1e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800bf80:	d8c02017 	ldw	r3,128(sp)
 800bf84:	d8803117 	ldw	r2,196(sp)
 800bf88:	d9002917 	ldw	r4,164(sp)
 800bf8c:	1100010e 	bge	r2,r4,800bf94 <___vfprintf_internal_r+0xaf4>
 800bf90:	2005883a 	mov	r2,r4
 800bf94:	d9402f17 	ldw	r5,188(sp)
 800bf98:	288b883a 	add	r5,r5,r2
 800bf9c:	d9402f15 	stw	r5,188(sp)
 800bfa0:	1801c01e 	bne	r3,zero,800c6a4 <___vfprintf_internal_r+0x1204>
 800bfa4:	a8800007 	ldb	r2,0(r21)
 800bfa8:	d8001f15 	stw	zero,124(sp)
 800bfac:	da000404 	addi	r8,sp,16
 800bfb0:	103d751e 	bne	r2,zero,800b588 <___vfprintf_internal_r+0xe8>
 800bfb4:	a823883a 	mov	r17,r21
 800bfb8:	003d8b06 	br	800b5e8 <___vfprintf_internal_r+0x148>
 800bfbc:	8025883a 	mov	r18,r16
 800bfc0:	dc002903 	ldbu	r16,164(sp)
 800bfc4:	e011883a 	mov	r8,fp
 800bfc8:	84003fcc 	andi	r16,r16,255
 800bfcc:	8005e51e 	bne	r16,zero,800d764 <___vfprintf_internal_r+0x22c4>
 800bfd0:	94800414 	ori	r18,r18,16
 800bfd4:	9080080c 	andi	r2,r18,32
 800bfd8:	10022b26 	beq	r2,zero,800c888 <___vfprintf_internal_r+0x13e8>
 800bfdc:	d9002e17 	ldw	r4,184(sp)
 800bfe0:	d9402a17 	ldw	r5,168(sp)
 800bfe4:	d8002785 	stb	zero,158(sp)
 800bfe8:	20c00204 	addi	r3,r4,8
 800bfec:	24c00017 	ldw	r19,0(r4)
 800bff0:	25800117 	ldw	r22,4(r4)
 800bff4:	28042e16 	blt	r5,zero,800d0b0 <___vfprintf_internal_r+0x1c10>
 800bff8:	013fdfc4 	movi	r4,-129
 800bffc:	9d84b03a 	or	r2,r19,r22
 800c000:	d8c02e15 	stw	r3,184(sp)
 800c004:	9124703a 	and	r18,r18,r4
 800c008:	0039883a 	mov	fp,zero
 800c00c:	103e801e 	bne	r2,zero,800ba10 <___vfprintf_internal_r+0x570>
 800c010:	d9002a17 	ldw	r4,168(sp)
 800c014:	2002e01e 	bne	r4,zero,800cb98 <___vfprintf_internal_r+0x16f8>
 800c018:	d8002a15 	stw	zero,168(sp)
 800c01c:	d8002b15 	stw	zero,172(sp)
 800c020:	dc001e04 	addi	r16,sp,120
 800c024:	003ef506 	br	800bbfc <___vfprintf_internal_r+0x75c>
 800c028:	8025883a 	mov	r18,r16
 800c02c:	dc002903 	ldbu	r16,164(sp)
 800c030:	e011883a 	mov	r8,fp
 800c034:	84003fcc 	andi	r16,r16,255
 800c038:	8005ba1e 	bne	r16,zero,800d724 <___vfprintf_internal_r+0x2284>
 800c03c:	010200b4 	movhi	r4,2050
 800c040:	212a9804 	addi	r4,r4,-21920
 800c044:	d9003915 	stw	r4,228(sp)
 800c048:	9080080c 	andi	r2,r18,32
 800c04c:	10006126 	beq	r2,zero,800c1d4 <___vfprintf_internal_r+0xd34>
 800c050:	d9402e17 	ldw	r5,184(sp)
 800c054:	2cc00017 	ldw	r19,0(r5)
 800c058:	2d800117 	ldw	r22,4(r5)
 800c05c:	29400204 	addi	r5,r5,8
 800c060:	d9402e15 	stw	r5,184(sp)
 800c064:	9080004c 	andi	r2,r18,1
 800c068:	1001ac26 	beq	r2,zero,800c71c <___vfprintf_internal_r+0x127c>
 800c06c:	9d84b03a 	or	r2,r19,r22
 800c070:	10038526 	beq	r2,zero,800ce88 <___vfprintf_internal_r+0x19e8>
 800c074:	d8c02a17 	ldw	r3,168(sp)
 800c078:	00800c04 	movi	r2,48
 800c07c:	d8802705 	stb	r2,156(sp)
 800c080:	dc402745 	stb	r17,157(sp)
 800c084:	d8002785 	stb	zero,158(sp)
 800c088:	90800094 	ori	r2,r18,2
 800c08c:	18047916 	blt	r3,zero,800d274 <___vfprintf_internal_r+0x1dd4>
 800c090:	00bfdfc4 	movi	r2,-129
 800c094:	90a4703a 	and	r18,r18,r2
 800c098:	94800094 	ori	r18,r18,2
 800c09c:	0039883a 	mov	fp,zero
 800c0a0:	d9003917 	ldw	r4,228(sp)
 800c0a4:	dc001e04 	addi	r16,sp,120
 800c0a8:	988003cc 	andi	r2,r19,15
 800c0ac:	b006973a 	slli	r3,r22,28
 800c0b0:	2085883a 	add	r2,r4,r2
 800c0b4:	9826d13a 	srli	r19,r19,4
 800c0b8:	10800003 	ldbu	r2,0(r2)
 800c0bc:	b02cd13a 	srli	r22,r22,4
 800c0c0:	843fffc4 	addi	r16,r16,-1
 800c0c4:	1ce6b03a 	or	r19,r3,r19
 800c0c8:	80800005 	stb	r2,0(r16)
 800c0cc:	9d84b03a 	or	r2,r19,r22
 800c0d0:	103ff51e 	bne	r2,zero,800c0a8 <___vfprintf_internal_r+0xc08>
 800c0d4:	d8c02817 	ldw	r3,160(sp)
 800c0d8:	1c07c83a 	sub	r3,r3,r16
 800c0dc:	d8c02b15 	stw	r3,172(sp)
 800c0e0:	003ec606 	br	800bbfc <___vfprintf_internal_r+0x75c>
 800c0e4:	8025883a 	mov	r18,r16
 800c0e8:	dc002903 	ldbu	r16,164(sp)
 800c0ec:	e011883a 	mov	r8,fp
 800c0f0:	84003fcc 	andi	r16,r16,255
 800c0f4:	803e9626 	beq	r16,zero,800bb50 <___vfprintf_internal_r+0x6b0>
 800c0f8:	d8c02b03 	ldbu	r3,172(sp)
 800c0fc:	d8c02785 	stb	r3,158(sp)
 800c100:	003e9306 	br	800bb50 <___vfprintf_internal_r+0x6b0>
 800c104:	00c00044 	movi	r3,1
 800c108:	d8c02905 	stb	r3,164(sp)
 800c10c:	00c00ac4 	movi	r3,43
 800c110:	d8c02b05 	stb	r3,172(sp)
 800c114:	ac400007 	ldb	r17,0(r21)
 800c118:	003d4306 	br	800b628 <___vfprintf_internal_r+0x188>
 800c11c:	84000814 	ori	r16,r16,32
 800c120:	ac400007 	ldb	r17,0(r21)
 800c124:	003d4006 	br	800b628 <___vfprintf_internal_r+0x188>
 800c128:	d8802e17 	ldw	r2,184(sp)
 800c12c:	8025883a 	mov	r18,r16
 800c130:	d8002785 	stb	zero,158(sp)
 800c134:	14000017 	ldw	r16,0(r2)
 800c138:	e011883a 	mov	r8,fp
 800c13c:	14c00104 	addi	r19,r2,4
 800c140:	80042d26 	beq	r16,zero,800d1f8 <___vfprintf_internal_r+0x1d58>
 800c144:	d8c02a17 	ldw	r3,168(sp)
 800c148:	1803e416 	blt	r3,zero,800d0dc <___vfprintf_internal_r+0x1c3c>
 800c14c:	180d883a 	mov	r6,r3
 800c150:	000b883a 	mov	r5,zero
 800c154:	8009883a 	mov	r4,r16
 800c158:	df003d15 	stw	fp,244(sp)
 800c15c:	80106280 	call	8010628 <memchr>
 800c160:	da003d17 	ldw	r8,244(sp)
 800c164:	10046826 	beq	r2,zero,800d308 <___vfprintf_internal_r+0x1e68>
 800c168:	1405c83a 	sub	r2,r2,r16
 800c16c:	d8802b15 	stw	r2,172(sp)
 800c170:	1003e016 	blt	r2,zero,800d0f4 <___vfprintf_internal_r+0x1c54>
 800c174:	df002783 	ldbu	fp,158(sp)
 800c178:	d8802915 	stw	r2,164(sp)
 800c17c:	dcc02e15 	stw	r19,184(sp)
 800c180:	d8002a15 	stw	zero,168(sp)
 800c184:	d8003215 	stw	zero,200(sp)
 800c188:	003ea206 	br	800bc14 <___vfprintf_internal_r+0x774>
 800c18c:	8025883a 	mov	r18,r16
 800c190:	dc002903 	ldbu	r16,164(sp)
 800c194:	e011883a 	mov	r8,fp
 800c198:	84003fcc 	andi	r16,r16,255
 800c19c:	803f8d26 	beq	r16,zero,800bfd4 <___vfprintf_internal_r+0xb34>
 800c1a0:	d8c02b03 	ldbu	r3,172(sp)
 800c1a4:	d8c02785 	stb	r3,158(sp)
 800c1a8:	003f8a06 	br	800bfd4 <___vfprintf_internal_r+0xb34>
 800c1ac:	8025883a 	mov	r18,r16
 800c1b0:	dc002903 	ldbu	r16,164(sp)
 800c1b4:	e011883a 	mov	r8,fp
 800c1b8:	84003fcc 	andi	r16,r16,255
 800c1bc:	8005661e 	bne	r16,zero,800d758 <___vfprintf_internal_r+0x22b8>
 800c1c0:	010200b4 	movhi	r4,2050
 800c1c4:	212a9d04 	addi	r4,r4,-21900
 800c1c8:	d9003915 	stw	r4,228(sp)
 800c1cc:	9080080c 	andi	r2,r18,32
 800c1d0:	103f9f1e 	bne	r2,zero,800c050 <___vfprintf_internal_r+0xbb0>
 800c1d4:	9080040c 	andi	r2,r18,16
 800c1d8:	1002eb26 	beq	r2,zero,800cd88 <___vfprintf_internal_r+0x18e8>
 800c1dc:	d8802e17 	ldw	r2,184(sp)
 800c1e0:	002d883a 	mov	r22,zero
 800c1e4:	14c00017 	ldw	r19,0(r2)
 800c1e8:	10800104 	addi	r2,r2,4
 800c1ec:	d8802e15 	stw	r2,184(sp)
 800c1f0:	003f9c06 	br	800c064 <___vfprintf_internal_r+0xbc4>
 800c1f4:	d8802b07 	ldb	r2,172(sp)
 800c1f8:	1002e11e 	bne	r2,zero,800cd80 <___vfprintf_internal_r+0x18e0>
 800c1fc:	00c00044 	movi	r3,1
 800c200:	d8c02905 	stb	r3,164(sp)
 800c204:	00c00804 	movi	r3,32
 800c208:	d8c02b05 	stb	r3,172(sp)
 800c20c:	ac400007 	ldb	r17,0(r21)
 800c210:	003d0506 	br	800b628 <___vfprintf_internal_r+0x188>
 800c214:	84000054 	ori	r16,r16,1
 800c218:	ac400007 	ldb	r17,0(r21)
 800c21c:	003d0206 	br	800b628 <___vfprintf_internal_r+0x188>
 800c220:	8025883a 	mov	r18,r16
 800c224:	dc002903 	ldbu	r16,164(sp)
 800c228:	e011883a 	mov	r8,fp
 800c22c:	84003fcc 	andi	r16,r16,255
 800c230:	803de726 	beq	r16,zero,800b9d0 <___vfprintf_internal_r+0x530>
 800c234:	d8c02b03 	ldbu	r3,172(sp)
 800c238:	d8c02785 	stb	r3,158(sp)
 800c23c:	003de406 	br	800b9d0 <___vfprintf_internal_r+0x530>
 800c240:	84001014 	ori	r16,r16,64
 800c244:	ac400007 	ldb	r17,0(r21)
 800c248:	003cf706 	br	800b628 <___vfprintf_internal_r+0x188>
 800c24c:	ac400007 	ldb	r17,0(r21)
 800c250:	00801b04 	movi	r2,108
 800c254:	88838f26 	beq	r17,r2,800d094 <___vfprintf_internal_r+0x1bf4>
 800c258:	84000414 	ori	r16,r16,16
 800c25c:	003cf206 	br	800b628 <___vfprintf_internal_r+0x188>
 800c260:	8025883a 	mov	r18,r16
 800c264:	dc002903 	ldbu	r16,164(sp)
 800c268:	e011883a 	mov	r8,fp
 800c26c:	84003fcc 	andi	r16,r16,255
 800c270:	80053f1e 	bne	r16,zero,800d770 <___vfprintf_internal_r+0x22d0>
 800c274:	9080080c 	andi	r2,r18,32
 800c278:	1002d226 	beq	r2,zero,800cdc4 <___vfprintf_internal_r+0x1924>
 800c27c:	d9002e17 	ldw	r4,184(sp)
 800c280:	d9402f17 	ldw	r5,188(sp)
 800c284:	20800017 	ldw	r2,0(r4)
 800c288:	2807d7fa 	srai	r3,r5,31
 800c28c:	21000104 	addi	r4,r4,4
 800c290:	d9002e15 	stw	r4,184(sp)
 800c294:	11400015 	stw	r5,0(r2)
 800c298:	10c00115 	stw	r3,4(r2)
 800c29c:	003cb806 	br	800b580 <___vfprintf_internal_r+0xe0>
 800c2a0:	d8c02e17 	ldw	r3,184(sp)
 800c2a4:	d9002e17 	ldw	r4,184(sp)
 800c2a8:	8025883a 	mov	r18,r16
 800c2ac:	18800017 	ldw	r2,0(r3)
 800c2b0:	21000104 	addi	r4,r4,4
 800c2b4:	00c00044 	movi	r3,1
 800c2b8:	e011883a 	mov	r8,fp
 800c2bc:	d8c02915 	stw	r3,164(sp)
 800c2c0:	d8002785 	stb	zero,158(sp)
 800c2c4:	d8801405 	stb	r2,80(sp)
 800c2c8:	d9002e15 	stw	r4,184(sp)
 800c2cc:	d8c02b15 	stw	r3,172(sp)
 800c2d0:	d8002a15 	stw	zero,168(sp)
 800c2d4:	d8003215 	stw	zero,200(sp)
 800c2d8:	dc001404 	addi	r16,sp,80
 800c2dc:	0039883a 	mov	fp,zero
 800c2e0:	003e5306 	br	800bc30 <___vfprintf_internal_r+0x790>
 800c2e4:	010200b4 	movhi	r4,2050
 800c2e8:	212a9d04 	addi	r4,r4,-21900
 800c2ec:	0039883a 	mov	fp,zero
 800c2f0:	d9003915 	stw	r4,228(sp)
 800c2f4:	04401e04 	movi	r17,120
 800c2f8:	003f6906 	br	800c0a0 <___vfprintf_internal_r+0xc00>
 800c2fc:	8025883a 	mov	r18,r16
 800c300:	dc002903 	ldbu	r16,164(sp)
 800c304:	e011883a 	mov	r8,fp
 800c308:	84003fcc 	andi	r16,r16,255
 800c30c:	8005081e 	bne	r16,zero,800d730 <___vfprintf_internal_r+0x2290>
 800c310:	883d6126 	beq	r17,zero,800b898 <___vfprintf_internal_r+0x3f8>
 800c314:	00c00044 	movi	r3,1
 800c318:	d8c02915 	stw	r3,164(sp)
 800c31c:	dc401405 	stb	r17,80(sp)
 800c320:	d8002785 	stb	zero,158(sp)
 800c324:	003fe906 	br	800c2cc <___vfprintf_internal_r+0xe2c>
 800c328:	014200b4 	movhi	r5,2050
 800c32c:	296a9d04 	addi	r5,r5,-21900
 800c330:	d9403915 	stw	r5,228(sp)
 800c334:	d8c02e15 	stw	r3,184(sp)
 800c338:	1025883a 	mov	r18,r2
 800c33c:	04401e04 	movi	r17,120
 800c340:	9d84b03a 	or	r2,r19,r22
 800c344:	1000fc1e 	bne	r2,zero,800c738 <___vfprintf_internal_r+0x1298>
 800c348:	0039883a 	mov	fp,zero
 800c34c:	00800084 	movi	r2,2
 800c350:	10803fcc 	andi	r2,r2,255
 800c354:	00c00044 	movi	r3,1
 800c358:	10c20f26 	beq	r2,r3,800cb98 <___vfprintf_internal_r+0x16f8>
 800c35c:	00c00084 	movi	r3,2
 800c360:	10fd3326 	beq	r2,r3,800b830 <___vfprintf_internal_r+0x390>
 800c364:	003e0b06 	br	800bb94 <___vfprintf_internal_r+0x6f4>
 800c368:	d8c02017 	ldw	r3,128(sp)
 800c36c:	003e7106 	br	800bd34 <___vfprintf_internal_r+0x894>
 800c370:	00801944 	movi	r2,101
 800c374:	14407e0e 	bge	r2,r17,800c570 <___vfprintf_internal_r+0x10d0>
 800c378:	d9003617 	ldw	r4,216(sp)
 800c37c:	d9403817 	ldw	r5,224(sp)
 800c380:	000d883a 	mov	r6,zero
 800c384:	000f883a 	mov	r7,zero
 800c388:	d8c03c15 	stw	r3,240(sp)
 800c38c:	da003d15 	stw	r8,244(sp)
 800c390:	801601c0 	call	801601c <__eqdf2>
 800c394:	d8c03c17 	ldw	r3,240(sp)
 800c398:	da003d17 	ldw	r8,244(sp)
 800c39c:	1000f71e 	bne	r2,zero,800c77c <___vfprintf_internal_r+0x12dc>
 800c3a0:	d8801f17 	ldw	r2,124(sp)
 800c3a4:	010200b4 	movhi	r4,2050
 800c3a8:	212aa404 	addi	r4,r4,-21872
 800c3ac:	18c00044 	addi	r3,r3,1
 800c3b0:	10800044 	addi	r2,r2,1
 800c3b4:	41000015 	stw	r4,0(r8)
 800c3b8:	01000044 	movi	r4,1
 800c3bc:	41000115 	stw	r4,4(r8)
 800c3c0:	d8c02015 	stw	r3,128(sp)
 800c3c4:	d8801f15 	stw	r2,124(sp)
 800c3c8:	010001c4 	movi	r4,7
 800c3cc:	2082b816 	blt	r4,r2,800ceb0 <___vfprintf_internal_r+0x1a10>
 800c3d0:	42000204 	addi	r8,r8,8
 800c3d4:	d8802617 	ldw	r2,152(sp)
 800c3d8:	d9403317 	ldw	r5,204(sp)
 800c3dc:	11400216 	blt	r2,r5,800c3e8 <___vfprintf_internal_r+0xf48>
 800c3e0:	9080004c 	andi	r2,r18,1
 800c3e4:	103eb326 	beq	r2,zero,800beb4 <___vfprintf_internal_r+0xa14>
 800c3e8:	d8803717 	ldw	r2,220(sp)
 800c3ec:	d9003417 	ldw	r4,208(sp)
 800c3f0:	d9403717 	ldw	r5,220(sp)
 800c3f4:	1887883a 	add	r3,r3,r2
 800c3f8:	d8801f17 	ldw	r2,124(sp)
 800c3fc:	41000015 	stw	r4,0(r8)
 800c400:	41400115 	stw	r5,4(r8)
 800c404:	10800044 	addi	r2,r2,1
 800c408:	d8c02015 	stw	r3,128(sp)
 800c40c:	d8801f15 	stw	r2,124(sp)
 800c410:	010001c4 	movi	r4,7
 800c414:	20832916 	blt	r4,r2,800d0bc <___vfprintf_internal_r+0x1c1c>
 800c418:	42000204 	addi	r8,r8,8
 800c41c:	d8803317 	ldw	r2,204(sp)
 800c420:	143fffc4 	addi	r16,r2,-1
 800c424:	043ea30e 	bge	zero,r16,800beb4 <___vfprintf_internal_r+0xa14>
 800c428:	04400404 	movi	r17,16
 800c42c:	d8801f17 	ldw	r2,124(sp)
 800c430:	8c00880e 	bge	r17,r16,800c654 <___vfprintf_internal_r+0x11b4>
 800c434:	014200b4 	movhi	r5,2050
 800c438:	296aa484 	addi	r5,r5,-21870
 800c43c:	d9402c15 	stw	r5,176(sp)
 800c440:	058001c4 	movi	r22,7
 800c444:	dcc02d17 	ldw	r19,180(sp)
 800c448:	00000306 	br	800c458 <___vfprintf_internal_r+0xfb8>
 800c44c:	42000204 	addi	r8,r8,8
 800c450:	843ffc04 	addi	r16,r16,-16
 800c454:	8c00820e 	bge	r17,r16,800c660 <___vfprintf_internal_r+0x11c0>
 800c458:	18c00404 	addi	r3,r3,16
 800c45c:	10800044 	addi	r2,r2,1
 800c460:	45000015 	stw	r20,0(r8)
 800c464:	44400115 	stw	r17,4(r8)
 800c468:	d8c02015 	stw	r3,128(sp)
 800c46c:	d8801f15 	stw	r2,124(sp)
 800c470:	b0bff60e 	bge	r22,r2,800c44c <___vfprintf_internal_r+0xfac>
 800c474:	d9801e04 	addi	r6,sp,120
 800c478:	b80b883a 	mov	r5,r23
 800c47c:	9809883a 	mov	r4,r19
 800c480:	80122980 	call	8012298 <__sprint_r>
 800c484:	103d0a1e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800c488:	d8c02017 	ldw	r3,128(sp)
 800c48c:	d8801f17 	ldw	r2,124(sp)
 800c490:	da000404 	addi	r8,sp,16
 800c494:	003fee06 	br	800c450 <___vfprintf_internal_r+0xfb0>
 800c498:	d9403117 	ldw	r5,196(sp)
 800c49c:	d8802917 	ldw	r2,164(sp)
 800c4a0:	28adc83a 	sub	r22,r5,r2
 800c4a4:	05be410e 	bge	zero,r22,800bdac <___vfprintf_internal_r+0x90c>
 800c4a8:	07000404 	movi	fp,16
 800c4ac:	d8801f17 	ldw	r2,124(sp)
 800c4b0:	e5838f0e 	bge	fp,r22,800d2f0 <___vfprintf_internal_r+0x1e50>
 800c4b4:	014200b4 	movhi	r5,2050
 800c4b8:	296aa484 	addi	r5,r5,-21870
 800c4bc:	dc403015 	stw	r17,192(sp)
 800c4c0:	d9402c15 	stw	r5,176(sp)
 800c4c4:	b023883a 	mov	r17,r22
 800c4c8:	04c001c4 	movi	r19,7
 800c4cc:	a82d883a 	mov	r22,r21
 800c4d0:	902b883a 	mov	r21,r18
 800c4d4:	8025883a 	mov	r18,r16
 800c4d8:	dc002d17 	ldw	r16,180(sp)
 800c4dc:	00000306 	br	800c4ec <___vfprintf_internal_r+0x104c>
 800c4e0:	8c7ffc04 	addi	r17,r17,-16
 800c4e4:	42000204 	addi	r8,r8,8
 800c4e8:	e440110e 	bge	fp,r17,800c530 <___vfprintf_internal_r+0x1090>
 800c4ec:	18c00404 	addi	r3,r3,16
 800c4f0:	10800044 	addi	r2,r2,1
 800c4f4:	45000015 	stw	r20,0(r8)
 800c4f8:	47000115 	stw	fp,4(r8)
 800c4fc:	d8c02015 	stw	r3,128(sp)
 800c500:	d8801f15 	stw	r2,124(sp)
 800c504:	98bff60e 	bge	r19,r2,800c4e0 <___vfprintf_internal_r+0x1040>
 800c508:	d9801e04 	addi	r6,sp,120
 800c50c:	b80b883a 	mov	r5,r23
 800c510:	8009883a 	mov	r4,r16
 800c514:	80122980 	call	8012298 <__sprint_r>
 800c518:	103ce51e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800c51c:	8c7ffc04 	addi	r17,r17,-16
 800c520:	d8c02017 	ldw	r3,128(sp)
 800c524:	d8801f17 	ldw	r2,124(sp)
 800c528:	da000404 	addi	r8,sp,16
 800c52c:	e47fef16 	blt	fp,r17,800c4ec <___vfprintf_internal_r+0x104c>
 800c530:	9021883a 	mov	r16,r18
 800c534:	a825883a 	mov	r18,r21
 800c538:	b02b883a 	mov	r21,r22
 800c53c:	882d883a 	mov	r22,r17
 800c540:	dc403017 	ldw	r17,192(sp)
 800c544:	d9002c17 	ldw	r4,176(sp)
 800c548:	1d87883a 	add	r3,r3,r22
 800c54c:	10800044 	addi	r2,r2,1
 800c550:	41000015 	stw	r4,0(r8)
 800c554:	45800115 	stw	r22,4(r8)
 800c558:	d8c02015 	stw	r3,128(sp)
 800c55c:	d8801f15 	stw	r2,124(sp)
 800c560:	010001c4 	movi	r4,7
 800c564:	20818e16 	blt	r4,r2,800cba0 <___vfprintf_internal_r+0x1700>
 800c568:	42000204 	addi	r8,r8,8
 800c56c:	003e0f06 	br	800bdac <___vfprintf_internal_r+0x90c>
 800c570:	d9403317 	ldw	r5,204(sp)
 800c574:	00800044 	movi	r2,1
 800c578:	18c00044 	addi	r3,r3,1
 800c57c:	1141530e 	bge	r2,r5,800cacc <___vfprintf_internal_r+0x162c>
 800c580:	dc401f17 	ldw	r17,124(sp)
 800c584:	00800044 	movi	r2,1
 800c588:	40800115 	stw	r2,4(r8)
 800c58c:	8c400044 	addi	r17,r17,1
 800c590:	44000015 	stw	r16,0(r8)
 800c594:	d8c02015 	stw	r3,128(sp)
 800c598:	dc401f15 	stw	r17,124(sp)
 800c59c:	008001c4 	movi	r2,7
 800c5a0:	14416b16 	blt	r2,r17,800cb50 <___vfprintf_internal_r+0x16b0>
 800c5a4:	42000204 	addi	r8,r8,8
 800c5a8:	d8803717 	ldw	r2,220(sp)
 800c5ac:	d9003417 	ldw	r4,208(sp)
 800c5b0:	8c400044 	addi	r17,r17,1
 800c5b4:	10c7883a 	add	r3,r2,r3
 800c5b8:	40800115 	stw	r2,4(r8)
 800c5bc:	41000015 	stw	r4,0(r8)
 800c5c0:	d8c02015 	stw	r3,128(sp)
 800c5c4:	dc401f15 	stw	r17,124(sp)
 800c5c8:	008001c4 	movi	r2,7
 800c5cc:	14416916 	blt	r2,r17,800cb74 <___vfprintf_internal_r+0x16d4>
 800c5d0:	45800204 	addi	r22,r8,8
 800c5d4:	d9003617 	ldw	r4,216(sp)
 800c5d8:	d9403817 	ldw	r5,224(sp)
 800c5dc:	000d883a 	mov	r6,zero
 800c5e0:	000f883a 	mov	r7,zero
 800c5e4:	d8c03c15 	stw	r3,240(sp)
 800c5e8:	801601c0 	call	801601c <__eqdf2>
 800c5ec:	d8c03c17 	ldw	r3,240(sp)
 800c5f0:	1000bc26 	beq	r2,zero,800c8e4 <___vfprintf_internal_r+0x1444>
 800c5f4:	d9403317 	ldw	r5,204(sp)
 800c5f8:	84000044 	addi	r16,r16,1
 800c5fc:	8c400044 	addi	r17,r17,1
 800c600:	28bfffc4 	addi	r2,r5,-1
 800c604:	1887883a 	add	r3,r3,r2
 800c608:	b0800115 	stw	r2,4(r22)
 800c60c:	b4000015 	stw	r16,0(r22)
 800c610:	d8c02015 	stw	r3,128(sp)
 800c614:	dc401f15 	stw	r17,124(sp)
 800c618:	008001c4 	movi	r2,7
 800c61c:	14414316 	blt	r2,r17,800cb2c <___vfprintf_internal_r+0x168c>
 800c620:	b5800204 	addi	r22,r22,8
 800c624:	d9003a17 	ldw	r4,232(sp)
 800c628:	df0022c4 	addi	fp,sp,139
 800c62c:	8c400044 	addi	r17,r17,1
 800c630:	20c7883a 	add	r3,r4,r3
 800c634:	b7000015 	stw	fp,0(r22)
 800c638:	b1000115 	stw	r4,4(r22)
 800c63c:	d8c02015 	stw	r3,128(sp)
 800c640:	dc401f15 	stw	r17,124(sp)
 800c644:	008001c4 	movi	r2,7
 800c648:	14400e16 	blt	r2,r17,800c684 <___vfprintf_internal_r+0x11e4>
 800c64c:	b2000204 	addi	r8,r22,8
 800c650:	003e1806 	br	800beb4 <___vfprintf_internal_r+0xa14>
 800c654:	010200b4 	movhi	r4,2050
 800c658:	212aa484 	addi	r4,r4,-21870
 800c65c:	d9002c15 	stw	r4,176(sp)
 800c660:	d9002c17 	ldw	r4,176(sp)
 800c664:	1c07883a 	add	r3,r3,r16
 800c668:	44000115 	stw	r16,4(r8)
 800c66c:	41000015 	stw	r4,0(r8)
 800c670:	10800044 	addi	r2,r2,1
 800c674:	d8c02015 	stw	r3,128(sp)
 800c678:	d8801f15 	stw	r2,124(sp)
 800c67c:	010001c4 	movi	r4,7
 800c680:	20be0b0e 	bge	r4,r2,800beb0 <___vfprintf_internal_r+0xa10>
 800c684:	d9002d17 	ldw	r4,180(sp)
 800c688:	d9801e04 	addi	r6,sp,120
 800c68c:	b80b883a 	mov	r5,r23
 800c690:	80122980 	call	8012298 <__sprint_r>
 800c694:	103c861e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800c698:	d8c02017 	ldw	r3,128(sp)
 800c69c:	da000404 	addi	r8,sp,16
 800c6a0:	003e0406 	br	800beb4 <___vfprintf_internal_r+0xa14>
 800c6a4:	d9002d17 	ldw	r4,180(sp)
 800c6a8:	d9801e04 	addi	r6,sp,120
 800c6ac:	b80b883a 	mov	r5,r23
 800c6b0:	80122980 	call	8012298 <__sprint_r>
 800c6b4:	103e3b26 	beq	r2,zero,800bfa4 <___vfprintf_internal_r+0xb04>
 800c6b8:	003c7d06 	br	800b8b0 <___vfprintf_internal_r+0x410>
 800c6bc:	d9002d17 	ldw	r4,180(sp)
 800c6c0:	d9801e04 	addi	r6,sp,120
 800c6c4:	b80b883a 	mov	r5,r23
 800c6c8:	80122980 	call	8012298 <__sprint_r>
 800c6cc:	103c781e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800c6d0:	d8c02017 	ldw	r3,128(sp)
 800c6d4:	da000404 	addi	r8,sp,16
 800c6d8:	003de906 	br	800be80 <___vfprintf_internal_r+0x9e0>
 800c6dc:	d9002d17 	ldw	r4,180(sp)
 800c6e0:	d9801e04 	addi	r6,sp,120
 800c6e4:	b80b883a 	mov	r5,r23
 800c6e8:	80122980 	call	8012298 <__sprint_r>
 800c6ec:	103c701e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800c6f0:	d8c02017 	ldw	r3,128(sp)
 800c6f4:	da000404 	addi	r8,sp,16
 800c6f8:	003d9b06 	br	800bd68 <___vfprintf_internal_r+0x8c8>
 800c6fc:	d9002d17 	ldw	r4,180(sp)
 800c700:	d9801e04 	addi	r6,sp,120
 800c704:	b80b883a 	mov	r5,r23
 800c708:	80122980 	call	8012298 <__sprint_r>
 800c70c:	103c681e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800c710:	d8c02017 	ldw	r3,128(sp)
 800c714:	da000404 	addi	r8,sp,16
 800c718:	003da106 	br	800bda0 <___vfprintf_internal_r+0x900>
 800c71c:	d9402a17 	ldw	r5,168(sp)
 800c720:	d8002785 	stb	zero,158(sp)
 800c724:	283f0616 	blt	r5,zero,800c340 <___vfprintf_internal_r+0xea0>
 800c728:	00ffdfc4 	movi	r3,-129
 800c72c:	9d84b03a 	or	r2,r19,r22
 800c730:	90e4703a 	and	r18,r18,r3
 800c734:	103c3b26 	beq	r2,zero,800b824 <___vfprintf_internal_r+0x384>
 800c738:	0039883a 	mov	fp,zero
 800c73c:	003e5806 	br	800c0a0 <___vfprintf_internal_r+0xc00>
 800c740:	9080040c 	andi	r2,r18,16
 800c744:	1001b326 	beq	r2,zero,800ce14 <___vfprintf_internal_r+0x1974>
 800c748:	d8c02e17 	ldw	r3,184(sp)
 800c74c:	d9002a17 	ldw	r4,168(sp)
 800c750:	d8002785 	stb	zero,158(sp)
 800c754:	18800104 	addi	r2,r3,4
 800c758:	1cc00017 	ldw	r19,0(r3)
 800c75c:	002d883a 	mov	r22,zero
 800c760:	2001b516 	blt	r4,zero,800ce38 <___vfprintf_internal_r+0x1998>
 800c764:	00ffdfc4 	movi	r3,-129
 800c768:	d8802e15 	stw	r2,184(sp)
 800c76c:	90e4703a 	and	r18,r18,r3
 800c770:	983d0526 	beq	r19,zero,800bb88 <___vfprintf_internal_r+0x6e8>
 800c774:	0039883a 	mov	fp,zero
 800c778:	003d0806 	br	800bb9c <___vfprintf_internal_r+0x6fc>
 800c77c:	dc402617 	ldw	r17,152(sp)
 800c780:	0441d30e 	bge	zero,r17,800ced0 <___vfprintf_internal_r+0x1a30>
 800c784:	dc403217 	ldw	r17,200(sp)
 800c788:	d8803317 	ldw	r2,204(sp)
 800c78c:	1440010e 	bge	r2,r17,800c794 <___vfprintf_internal_r+0x12f4>
 800c790:	1023883a 	mov	r17,r2
 800c794:	04400a0e 	bge	zero,r17,800c7c0 <___vfprintf_internal_r+0x1320>
 800c798:	d8801f17 	ldw	r2,124(sp)
 800c79c:	1c47883a 	add	r3,r3,r17
 800c7a0:	44000015 	stw	r16,0(r8)
 800c7a4:	10800044 	addi	r2,r2,1
 800c7a8:	44400115 	stw	r17,4(r8)
 800c7ac:	d8c02015 	stw	r3,128(sp)
 800c7b0:	d8801f15 	stw	r2,124(sp)
 800c7b4:	010001c4 	movi	r4,7
 800c7b8:	20826516 	blt	r4,r2,800d150 <___vfprintf_internal_r+0x1cb0>
 800c7bc:	42000204 	addi	r8,r8,8
 800c7c0:	88026116 	blt	r17,zero,800d148 <___vfprintf_internal_r+0x1ca8>
 800c7c4:	d9003217 	ldw	r4,200(sp)
 800c7c8:	2463c83a 	sub	r17,r4,r17
 800c7cc:	04407b0e 	bge	zero,r17,800c9bc <___vfprintf_internal_r+0x151c>
 800c7d0:	05800404 	movi	r22,16
 800c7d4:	d8801f17 	ldw	r2,124(sp)
 800c7d8:	b4419d0e 	bge	r22,r17,800ce50 <___vfprintf_internal_r+0x19b0>
 800c7dc:	010200b4 	movhi	r4,2050
 800c7e0:	212aa484 	addi	r4,r4,-21870
 800c7e4:	d9002c15 	stw	r4,176(sp)
 800c7e8:	070001c4 	movi	fp,7
 800c7ec:	dcc02d17 	ldw	r19,180(sp)
 800c7f0:	00000306 	br	800c800 <___vfprintf_internal_r+0x1360>
 800c7f4:	42000204 	addi	r8,r8,8
 800c7f8:	8c7ffc04 	addi	r17,r17,-16
 800c7fc:	b441970e 	bge	r22,r17,800ce5c <___vfprintf_internal_r+0x19bc>
 800c800:	18c00404 	addi	r3,r3,16
 800c804:	10800044 	addi	r2,r2,1
 800c808:	45000015 	stw	r20,0(r8)
 800c80c:	45800115 	stw	r22,4(r8)
 800c810:	d8c02015 	stw	r3,128(sp)
 800c814:	d8801f15 	stw	r2,124(sp)
 800c818:	e0bff60e 	bge	fp,r2,800c7f4 <___vfprintf_internal_r+0x1354>
 800c81c:	d9801e04 	addi	r6,sp,120
 800c820:	b80b883a 	mov	r5,r23
 800c824:	9809883a 	mov	r4,r19
 800c828:	80122980 	call	8012298 <__sprint_r>
 800c82c:	103c201e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800c830:	d8c02017 	ldw	r3,128(sp)
 800c834:	d8801f17 	ldw	r2,124(sp)
 800c838:	da000404 	addi	r8,sp,16
 800c83c:	003fee06 	br	800c7f8 <___vfprintf_internal_r+0x1358>
 800c840:	d9002d17 	ldw	r4,180(sp)
 800c844:	d9801e04 	addi	r6,sp,120
 800c848:	b80b883a 	mov	r5,r23
 800c84c:	80122980 	call	8012298 <__sprint_r>
 800c850:	103c171e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800c854:	d8c02017 	ldw	r3,128(sp)
 800c858:	df002787 	ldb	fp,158(sp)
 800c85c:	da000404 	addi	r8,sp,16
 800c860:	003d3406 	br	800bd34 <___vfprintf_internal_r+0x894>
 800c864:	9080040c 	andi	r2,r18,16
 800c868:	10016126 	beq	r2,zero,800cdf0 <___vfprintf_internal_r+0x1950>
 800c86c:	d9402e17 	ldw	r5,184(sp)
 800c870:	2cc00017 	ldw	r19,0(r5)
 800c874:	29400104 	addi	r5,r5,4
 800c878:	d9402e15 	stw	r5,184(sp)
 800c87c:	982dd7fa 	srai	r22,r19,31
 800c880:	b005883a 	mov	r2,r22
 800c884:	003c5a06 	br	800b9f0 <___vfprintf_internal_r+0x550>
 800c888:	9080040c 	andi	r2,r18,16
 800c88c:	10003526 	beq	r2,zero,800c964 <___vfprintf_internal_r+0x14c4>
 800c890:	d8c02e17 	ldw	r3,184(sp)
 800c894:	d9002a17 	ldw	r4,168(sp)
 800c898:	d8002785 	stb	zero,158(sp)
 800c89c:	18800104 	addi	r2,r3,4
 800c8a0:	1cc00017 	ldw	r19,0(r3)
 800c8a4:	002d883a 	mov	r22,zero
 800c8a8:	20003716 	blt	r4,zero,800c988 <___vfprintf_internal_r+0x14e8>
 800c8ac:	00ffdfc4 	movi	r3,-129
 800c8b0:	d8802e15 	stw	r2,184(sp)
 800c8b4:	90e4703a 	and	r18,r18,r3
 800c8b8:	0039883a 	mov	fp,zero
 800c8bc:	983dd426 	beq	r19,zero,800c010 <___vfprintf_internal_r+0xb70>
 800c8c0:	00800244 	movi	r2,9
 800c8c4:	14fc5336 	bltu	r2,r19,800ba14 <___vfprintf_internal_r+0x574>
 800c8c8:	d8c02817 	ldw	r3,160(sp)
 800c8cc:	dc001dc4 	addi	r16,sp,119
 800c8d0:	9cc00c04 	addi	r19,r19,48
 800c8d4:	1c07c83a 	sub	r3,r3,r16
 800c8d8:	dcc01dc5 	stb	r19,119(sp)
 800c8dc:	d8c02b15 	stw	r3,172(sp)
 800c8e0:	003cc606 	br	800bbfc <___vfprintf_internal_r+0x75c>
 800c8e4:	d8803317 	ldw	r2,204(sp)
 800c8e8:	143fffc4 	addi	r16,r2,-1
 800c8ec:	043f4d0e 	bge	zero,r16,800c624 <___vfprintf_internal_r+0x1184>
 800c8f0:	07000404 	movi	fp,16
 800c8f4:	e400810e 	bge	fp,r16,800cafc <___vfprintf_internal_r+0x165c>
 800c8f8:	014200b4 	movhi	r5,2050
 800c8fc:	296aa484 	addi	r5,r5,-21870
 800c900:	d9402c15 	stw	r5,176(sp)
 800c904:	01c001c4 	movi	r7,7
 800c908:	dcc02d17 	ldw	r19,180(sp)
 800c90c:	00000306 	br	800c91c <___vfprintf_internal_r+0x147c>
 800c910:	b5800204 	addi	r22,r22,8
 800c914:	843ffc04 	addi	r16,r16,-16
 800c918:	e4007b0e 	bge	fp,r16,800cb08 <___vfprintf_internal_r+0x1668>
 800c91c:	18c00404 	addi	r3,r3,16
 800c920:	8c400044 	addi	r17,r17,1
 800c924:	b5000015 	stw	r20,0(r22)
 800c928:	b7000115 	stw	fp,4(r22)
 800c92c:	d8c02015 	stw	r3,128(sp)
 800c930:	dc401f15 	stw	r17,124(sp)
 800c934:	3c7ff60e 	bge	r7,r17,800c910 <___vfprintf_internal_r+0x1470>
 800c938:	d9801e04 	addi	r6,sp,120
 800c93c:	b80b883a 	mov	r5,r23
 800c940:	9809883a 	mov	r4,r19
 800c944:	d9c03c15 	stw	r7,240(sp)
 800c948:	80122980 	call	8012298 <__sprint_r>
 800c94c:	d9c03c17 	ldw	r7,240(sp)
 800c950:	103bd71e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800c954:	d8c02017 	ldw	r3,128(sp)
 800c958:	dc401f17 	ldw	r17,124(sp)
 800c95c:	dd800404 	addi	r22,sp,16
 800c960:	003fec06 	br	800c914 <___vfprintf_internal_r+0x1474>
 800c964:	9080100c 	andi	r2,r18,64
 800c968:	d8002785 	stb	zero,158(sp)
 800c96c:	10010e26 	beq	r2,zero,800cda8 <___vfprintf_internal_r+0x1908>
 800c970:	d9402e17 	ldw	r5,184(sp)
 800c974:	d8c02a17 	ldw	r3,168(sp)
 800c978:	002d883a 	mov	r22,zero
 800c97c:	28800104 	addi	r2,r5,4
 800c980:	2cc0000b 	ldhu	r19,0(r5)
 800c984:	183fc90e 	bge	r3,zero,800c8ac <___vfprintf_internal_r+0x140c>
 800c988:	d8802e15 	stw	r2,184(sp)
 800c98c:	0039883a 	mov	fp,zero
 800c990:	9d84b03a 	or	r2,r19,r22
 800c994:	103c1e1e 	bne	r2,zero,800ba10 <___vfprintf_internal_r+0x570>
 800c998:	00800044 	movi	r2,1
 800c99c:	003e6c06 	br	800c350 <___vfprintf_internal_r+0xeb0>
 800c9a0:	d9002d17 	ldw	r4,180(sp)
 800c9a4:	d9801e04 	addi	r6,sp,120
 800c9a8:	b80b883a 	mov	r5,r23
 800c9ac:	80122980 	call	8012298 <__sprint_r>
 800c9b0:	103bbf1e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800c9b4:	d8c02017 	ldw	r3,128(sp)
 800c9b8:	da000404 	addi	r8,sp,16
 800c9bc:	d9003217 	ldw	r4,200(sp)
 800c9c0:	d8802617 	ldw	r2,152(sp)
 800c9c4:	d9403317 	ldw	r5,204(sp)
 800c9c8:	8123883a 	add	r17,r16,r4
 800c9cc:	11400216 	blt	r2,r5,800c9d8 <___vfprintf_internal_r+0x1538>
 800c9d0:	9100004c 	andi	r4,r18,1
 800c9d4:	20000d26 	beq	r4,zero,800ca0c <___vfprintf_internal_r+0x156c>
 800c9d8:	d9003717 	ldw	r4,220(sp)
 800c9dc:	d9403417 	ldw	r5,208(sp)
 800c9e0:	1907883a 	add	r3,r3,r4
 800c9e4:	d9001f17 	ldw	r4,124(sp)
 800c9e8:	41400015 	stw	r5,0(r8)
 800c9ec:	d9403717 	ldw	r5,220(sp)
 800c9f0:	21000044 	addi	r4,r4,1
 800c9f4:	d8c02015 	stw	r3,128(sp)
 800c9f8:	41400115 	stw	r5,4(r8)
 800c9fc:	d9001f15 	stw	r4,124(sp)
 800ca00:	014001c4 	movi	r5,7
 800ca04:	2901e816 	blt	r5,r4,800d1a8 <___vfprintf_internal_r+0x1d08>
 800ca08:	42000204 	addi	r8,r8,8
 800ca0c:	d9003317 	ldw	r4,204(sp)
 800ca10:	8121883a 	add	r16,r16,r4
 800ca14:	2085c83a 	sub	r2,r4,r2
 800ca18:	8461c83a 	sub	r16,r16,r17
 800ca1c:	1400010e 	bge	r2,r16,800ca24 <___vfprintf_internal_r+0x1584>
 800ca20:	1021883a 	mov	r16,r2
 800ca24:	04000a0e 	bge	zero,r16,800ca50 <___vfprintf_internal_r+0x15b0>
 800ca28:	d9001f17 	ldw	r4,124(sp)
 800ca2c:	1c07883a 	add	r3,r3,r16
 800ca30:	44400015 	stw	r17,0(r8)
 800ca34:	21000044 	addi	r4,r4,1
 800ca38:	44000115 	stw	r16,4(r8)
 800ca3c:	d8c02015 	stw	r3,128(sp)
 800ca40:	d9001f15 	stw	r4,124(sp)
 800ca44:	014001c4 	movi	r5,7
 800ca48:	2901fb16 	blt	r5,r4,800d238 <___vfprintf_internal_r+0x1d98>
 800ca4c:	42000204 	addi	r8,r8,8
 800ca50:	8001f716 	blt	r16,zero,800d230 <___vfprintf_internal_r+0x1d90>
 800ca54:	1421c83a 	sub	r16,r2,r16
 800ca58:	043d160e 	bge	zero,r16,800beb4 <___vfprintf_internal_r+0xa14>
 800ca5c:	04400404 	movi	r17,16
 800ca60:	d8801f17 	ldw	r2,124(sp)
 800ca64:	8c3efb0e 	bge	r17,r16,800c654 <___vfprintf_internal_r+0x11b4>
 800ca68:	014200b4 	movhi	r5,2050
 800ca6c:	296aa484 	addi	r5,r5,-21870
 800ca70:	d9402c15 	stw	r5,176(sp)
 800ca74:	058001c4 	movi	r22,7
 800ca78:	dcc02d17 	ldw	r19,180(sp)
 800ca7c:	00000306 	br	800ca8c <___vfprintf_internal_r+0x15ec>
 800ca80:	42000204 	addi	r8,r8,8
 800ca84:	843ffc04 	addi	r16,r16,-16
 800ca88:	8c3ef50e 	bge	r17,r16,800c660 <___vfprintf_internal_r+0x11c0>
 800ca8c:	18c00404 	addi	r3,r3,16
 800ca90:	10800044 	addi	r2,r2,1
 800ca94:	45000015 	stw	r20,0(r8)
 800ca98:	44400115 	stw	r17,4(r8)
 800ca9c:	d8c02015 	stw	r3,128(sp)
 800caa0:	d8801f15 	stw	r2,124(sp)
 800caa4:	b0bff60e 	bge	r22,r2,800ca80 <___vfprintf_internal_r+0x15e0>
 800caa8:	d9801e04 	addi	r6,sp,120
 800caac:	b80b883a 	mov	r5,r23
 800cab0:	9809883a 	mov	r4,r19
 800cab4:	80122980 	call	8012298 <__sprint_r>
 800cab8:	103b7d1e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800cabc:	d8c02017 	ldw	r3,128(sp)
 800cac0:	d8801f17 	ldw	r2,124(sp)
 800cac4:	da000404 	addi	r8,sp,16
 800cac8:	003fee06 	br	800ca84 <___vfprintf_internal_r+0x15e4>
 800cacc:	9088703a 	and	r4,r18,r2
 800cad0:	203eab1e 	bne	r4,zero,800c580 <___vfprintf_internal_r+0x10e0>
 800cad4:	dc401f17 	ldw	r17,124(sp)
 800cad8:	40800115 	stw	r2,4(r8)
 800cadc:	44000015 	stw	r16,0(r8)
 800cae0:	8c400044 	addi	r17,r17,1
 800cae4:	d8c02015 	stw	r3,128(sp)
 800cae8:	dc401f15 	stw	r17,124(sp)
 800caec:	008001c4 	movi	r2,7
 800caf0:	14400e16 	blt	r2,r17,800cb2c <___vfprintf_internal_r+0x168c>
 800caf4:	45800204 	addi	r22,r8,8
 800caf8:	003eca06 	br	800c624 <___vfprintf_internal_r+0x1184>
 800cafc:	010200b4 	movhi	r4,2050
 800cb00:	212aa484 	addi	r4,r4,-21870
 800cb04:	d9002c15 	stw	r4,176(sp)
 800cb08:	d8802c17 	ldw	r2,176(sp)
 800cb0c:	1c07883a 	add	r3,r3,r16
 800cb10:	8c400044 	addi	r17,r17,1
 800cb14:	b0800015 	stw	r2,0(r22)
 800cb18:	b4000115 	stw	r16,4(r22)
 800cb1c:	d8c02015 	stw	r3,128(sp)
 800cb20:	dc401f15 	stw	r17,124(sp)
 800cb24:	008001c4 	movi	r2,7
 800cb28:	147ebd0e 	bge	r2,r17,800c620 <___vfprintf_internal_r+0x1180>
 800cb2c:	d9002d17 	ldw	r4,180(sp)
 800cb30:	d9801e04 	addi	r6,sp,120
 800cb34:	b80b883a 	mov	r5,r23
 800cb38:	80122980 	call	8012298 <__sprint_r>
 800cb3c:	103b5c1e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800cb40:	d8c02017 	ldw	r3,128(sp)
 800cb44:	dc401f17 	ldw	r17,124(sp)
 800cb48:	dd800404 	addi	r22,sp,16
 800cb4c:	003eb506 	br	800c624 <___vfprintf_internal_r+0x1184>
 800cb50:	d9002d17 	ldw	r4,180(sp)
 800cb54:	d9801e04 	addi	r6,sp,120
 800cb58:	b80b883a 	mov	r5,r23
 800cb5c:	80122980 	call	8012298 <__sprint_r>
 800cb60:	103b531e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800cb64:	d8c02017 	ldw	r3,128(sp)
 800cb68:	dc401f17 	ldw	r17,124(sp)
 800cb6c:	da000404 	addi	r8,sp,16
 800cb70:	003e8d06 	br	800c5a8 <___vfprintf_internal_r+0x1108>
 800cb74:	d9002d17 	ldw	r4,180(sp)
 800cb78:	d9801e04 	addi	r6,sp,120
 800cb7c:	b80b883a 	mov	r5,r23
 800cb80:	80122980 	call	8012298 <__sprint_r>
 800cb84:	103b4a1e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800cb88:	d8c02017 	ldw	r3,128(sp)
 800cb8c:	dc401f17 	ldw	r17,124(sp)
 800cb90:	dd800404 	addi	r22,sp,16
 800cb94:	003e8f06 	br	800c5d4 <___vfprintf_internal_r+0x1134>
 800cb98:	0027883a 	mov	r19,zero
 800cb9c:	003f4a06 	br	800c8c8 <___vfprintf_internal_r+0x1428>
 800cba0:	d9002d17 	ldw	r4,180(sp)
 800cba4:	d9801e04 	addi	r6,sp,120
 800cba8:	b80b883a 	mov	r5,r23
 800cbac:	80122980 	call	8012298 <__sprint_r>
 800cbb0:	103b3f1e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800cbb4:	d8c02017 	ldw	r3,128(sp)
 800cbb8:	da000404 	addi	r8,sp,16
 800cbbc:	003c7b06 	br	800bdac <___vfprintf_internal_r+0x90c>
 800cbc0:	d9402a17 	ldw	r5,168(sp)
 800cbc4:	04e7c83a 	sub	r19,zero,r19
 800cbc8:	07000b44 	movi	fp,45
 800cbcc:	9804c03a 	cmpne	r2,r19,zero
 800cbd0:	05adc83a 	sub	r22,zero,r22
 800cbd4:	df002785 	stb	fp,158(sp)
 800cbd8:	b0adc83a 	sub	r22,r22,r2
 800cbdc:	28017b16 	blt	r5,zero,800d1cc <___vfprintf_internal_r+0x1d2c>
 800cbe0:	00bfdfc4 	movi	r2,-129
 800cbe4:	90a4703a 	and	r18,r18,r2
 800cbe8:	003b8906 	br	800ba10 <___vfprintf_internal_r+0x570>
 800cbec:	d9003617 	ldw	r4,216(sp)
 800cbf0:	d9403817 	ldw	r5,224(sp)
 800cbf4:	da003d15 	stw	r8,244(sp)
 800cbf8:	8011fec0 	call	8011fec <__fpclassifyd>
 800cbfc:	da003d17 	ldw	r8,244(sp)
 800cc00:	1000f026 	beq	r2,zero,800cfc4 <___vfprintf_internal_r+0x1b24>
 800cc04:	d9002a17 	ldw	r4,168(sp)
 800cc08:	05bff7c4 	movi	r22,-33
 800cc0c:	00bfffc4 	movi	r2,-1
 800cc10:	8dac703a 	and	r22,r17,r22
 800cc14:	20820026 	beq	r4,r2,800d418 <___vfprintf_internal_r+0x1f78>
 800cc18:	008011c4 	movi	r2,71
 800cc1c:	b081f726 	beq	r22,r2,800d3fc <___vfprintf_internal_r+0x1f5c>
 800cc20:	d9003817 	ldw	r4,224(sp)
 800cc24:	90c04014 	ori	r3,r18,256
 800cc28:	d8c02c15 	stw	r3,176(sp)
 800cc2c:	20021516 	blt	r4,zero,800d484 <___vfprintf_internal_r+0x1fe4>
 800cc30:	dcc03817 	ldw	r19,224(sp)
 800cc34:	d8002905 	stb	zero,164(sp)
 800cc38:	00801984 	movi	r2,102
 800cc3c:	8881f926 	beq	r17,r2,800d424 <___vfprintf_internal_r+0x1f84>
 800cc40:	00801184 	movi	r2,70
 800cc44:	88821c26 	beq	r17,r2,800d4b8 <___vfprintf_internal_r+0x2018>
 800cc48:	00801144 	movi	r2,69
 800cc4c:	b081ef26 	beq	r22,r2,800d40c <___vfprintf_internal_r+0x1f6c>
 800cc50:	d8c02a17 	ldw	r3,168(sp)
 800cc54:	d8802104 	addi	r2,sp,132
 800cc58:	d8800315 	stw	r2,12(sp)
 800cc5c:	d9403617 	ldw	r5,216(sp)
 800cc60:	d8802504 	addi	r2,sp,148
 800cc64:	d9002d17 	ldw	r4,180(sp)
 800cc68:	d8800215 	stw	r2,8(sp)
 800cc6c:	d8802604 	addi	r2,sp,152
 800cc70:	d8c00015 	stw	r3,0(sp)
 800cc74:	d8800115 	stw	r2,4(sp)
 800cc78:	01c00084 	movi	r7,2
 800cc7c:	980d883a 	mov	r6,r19
 800cc80:	d8c03c15 	stw	r3,240(sp)
 800cc84:	da003d15 	stw	r8,244(sp)
 800cc88:	800dbd00 	call	800dbd0 <_dtoa_r>
 800cc8c:	1021883a 	mov	r16,r2
 800cc90:	008019c4 	movi	r2,103
 800cc94:	d8c03c17 	ldw	r3,240(sp)
 800cc98:	da003d17 	ldw	r8,244(sp)
 800cc9c:	88817126 	beq	r17,r2,800d264 <___vfprintf_internal_r+0x1dc4>
 800cca0:	008011c4 	movi	r2,71
 800cca4:	88829126 	beq	r17,r2,800d6ec <___vfprintf_internal_r+0x224c>
 800cca8:	80f9883a 	add	fp,r16,r3
 800ccac:	d9003617 	ldw	r4,216(sp)
 800ccb0:	000d883a 	mov	r6,zero
 800ccb4:	000f883a 	mov	r7,zero
 800ccb8:	980b883a 	mov	r5,r19
 800ccbc:	da003d15 	stw	r8,244(sp)
 800ccc0:	801601c0 	call	801601c <__eqdf2>
 800ccc4:	da003d17 	ldw	r8,244(sp)
 800ccc8:	10018d26 	beq	r2,zero,800d300 <___vfprintf_internal_r+0x1e60>
 800cccc:	d8802117 	ldw	r2,132(sp)
 800ccd0:	1700062e 	bgeu	r2,fp,800ccec <___vfprintf_internal_r+0x184c>
 800ccd4:	01000c04 	movi	r4,48
 800ccd8:	10c00044 	addi	r3,r2,1
 800ccdc:	d8c02115 	stw	r3,132(sp)
 800cce0:	11000005 	stb	r4,0(r2)
 800cce4:	d8802117 	ldw	r2,132(sp)
 800cce8:	173ffb36 	bltu	r2,fp,800ccd8 <___vfprintf_internal_r+0x1838>
 800ccec:	1405c83a 	sub	r2,r2,r16
 800ccf0:	d8803315 	stw	r2,204(sp)
 800ccf4:	008011c4 	movi	r2,71
 800ccf8:	b0817626 	beq	r22,r2,800d2d4 <___vfprintf_internal_r+0x1e34>
 800ccfc:	00801944 	movi	r2,101
 800cd00:	1442800e 	bge	r2,r17,800d704 <___vfprintf_internal_r+0x2264>
 800cd04:	d8c02617 	ldw	r3,152(sp)
 800cd08:	00801984 	movi	r2,102
 800cd0c:	d8c03215 	stw	r3,200(sp)
 800cd10:	8881fe26 	beq	r17,r2,800d50c <___vfprintf_internal_r+0x206c>
 800cd14:	d8c03217 	ldw	r3,200(sp)
 800cd18:	d9003317 	ldw	r4,204(sp)
 800cd1c:	1901dd16 	blt	r3,r4,800d494 <___vfprintf_internal_r+0x1ff4>
 800cd20:	9480004c 	andi	r18,r18,1
 800cd24:	90022b1e 	bne	r18,zero,800d5d4 <___vfprintf_internal_r+0x2134>
 800cd28:	1805883a 	mov	r2,r3
 800cd2c:	18028316 	blt	r3,zero,800d73c <___vfprintf_internal_r+0x229c>
 800cd30:	d8c03217 	ldw	r3,200(sp)
 800cd34:	044019c4 	movi	r17,103
 800cd38:	d8c02b15 	stw	r3,172(sp)
 800cd3c:	df002907 	ldb	fp,164(sp)
 800cd40:	e001531e 	bne	fp,zero,800d290 <___vfprintf_internal_r+0x1df0>
 800cd44:	df002783 	ldbu	fp,158(sp)
 800cd48:	d8802915 	stw	r2,164(sp)
 800cd4c:	dc802c17 	ldw	r18,176(sp)
 800cd50:	d8002a15 	stw	zero,168(sp)
 800cd54:	003baf06 	br	800bc14 <___vfprintf_internal_r+0x774>
 800cd58:	d8c02e17 	ldw	r3,184(sp)
 800cd5c:	d9002e17 	ldw	r4,184(sp)
 800cd60:	d9402e17 	ldw	r5,184(sp)
 800cd64:	18c00017 	ldw	r3,0(r3)
 800cd68:	21000117 	ldw	r4,4(r4)
 800cd6c:	29400204 	addi	r5,r5,8
 800cd70:	d8c03615 	stw	r3,216(sp)
 800cd74:	d9003815 	stw	r4,224(sp)
 800cd78:	d9402e15 	stw	r5,184(sp)
 800cd7c:	003b5006 	br	800bac0 <___vfprintf_internal_r+0x620>
 800cd80:	ac400007 	ldb	r17,0(r21)
 800cd84:	003a2806 	br	800b628 <___vfprintf_internal_r+0x188>
 800cd88:	9080100c 	andi	r2,r18,64
 800cd8c:	1000a826 	beq	r2,zero,800d030 <___vfprintf_internal_r+0x1b90>
 800cd90:	d8c02e17 	ldw	r3,184(sp)
 800cd94:	002d883a 	mov	r22,zero
 800cd98:	1cc0000b 	ldhu	r19,0(r3)
 800cd9c:	18c00104 	addi	r3,r3,4
 800cda0:	d8c02e15 	stw	r3,184(sp)
 800cda4:	003caf06 	br	800c064 <___vfprintf_internal_r+0xbc4>
 800cda8:	d9002e17 	ldw	r4,184(sp)
 800cdac:	d9402a17 	ldw	r5,168(sp)
 800cdb0:	002d883a 	mov	r22,zero
 800cdb4:	20800104 	addi	r2,r4,4
 800cdb8:	24c00017 	ldw	r19,0(r4)
 800cdbc:	283ebb0e 	bge	r5,zero,800c8ac <___vfprintf_internal_r+0x140c>
 800cdc0:	003ef106 	br	800c988 <___vfprintf_internal_r+0x14e8>
 800cdc4:	9080040c 	andi	r2,r18,16
 800cdc8:	1000921e 	bne	r2,zero,800d014 <___vfprintf_internal_r+0x1b74>
 800cdcc:	9480100c 	andi	r18,r18,64
 800cdd0:	90013926 	beq	r18,zero,800d2b8 <___vfprintf_internal_r+0x1e18>
 800cdd4:	d9402e17 	ldw	r5,184(sp)
 800cdd8:	d8c02f17 	ldw	r3,188(sp)
 800cddc:	28800017 	ldw	r2,0(r5)
 800cde0:	29400104 	addi	r5,r5,4
 800cde4:	d9402e15 	stw	r5,184(sp)
 800cde8:	10c0000d 	sth	r3,0(r2)
 800cdec:	0039e406 	br	800b580 <___vfprintf_internal_r+0xe0>
 800cdf0:	9080100c 	andi	r2,r18,64
 800cdf4:	10008026 	beq	r2,zero,800cff8 <___vfprintf_internal_r+0x1b58>
 800cdf8:	d8802e17 	ldw	r2,184(sp)
 800cdfc:	14c0000f 	ldh	r19,0(r2)
 800ce00:	10800104 	addi	r2,r2,4
 800ce04:	d8802e15 	stw	r2,184(sp)
 800ce08:	982dd7fa 	srai	r22,r19,31
 800ce0c:	b005883a 	mov	r2,r22
 800ce10:	003af706 	br	800b9f0 <___vfprintf_internal_r+0x550>
 800ce14:	9080100c 	andi	r2,r18,64
 800ce18:	d8002785 	stb	zero,158(sp)
 800ce1c:	10008a1e 	bne	r2,zero,800d048 <___vfprintf_internal_r+0x1ba8>
 800ce20:	d9002e17 	ldw	r4,184(sp)
 800ce24:	d9402a17 	ldw	r5,168(sp)
 800ce28:	002d883a 	mov	r22,zero
 800ce2c:	20800104 	addi	r2,r4,4
 800ce30:	24c00017 	ldw	r19,0(r4)
 800ce34:	283e4b0e 	bge	r5,zero,800c764 <___vfprintf_internal_r+0x12c4>
 800ce38:	9d86b03a 	or	r3,r19,r22
 800ce3c:	d8802e15 	stw	r2,184(sp)
 800ce40:	183e4c1e 	bne	r3,zero,800c774 <___vfprintf_internal_r+0x12d4>
 800ce44:	0039883a 	mov	fp,zero
 800ce48:	0005883a 	mov	r2,zero
 800ce4c:	003d4006 	br	800c350 <___vfprintf_internal_r+0xeb0>
 800ce50:	014200b4 	movhi	r5,2050
 800ce54:	296aa484 	addi	r5,r5,-21870
 800ce58:	d9402c15 	stw	r5,176(sp)
 800ce5c:	d9402c17 	ldw	r5,176(sp)
 800ce60:	1c47883a 	add	r3,r3,r17
 800ce64:	10800044 	addi	r2,r2,1
 800ce68:	41400015 	stw	r5,0(r8)
 800ce6c:	44400115 	stw	r17,4(r8)
 800ce70:	d8c02015 	stw	r3,128(sp)
 800ce74:	d8801f15 	stw	r2,124(sp)
 800ce78:	010001c4 	movi	r4,7
 800ce7c:	20bec816 	blt	r4,r2,800c9a0 <___vfprintf_internal_r+0x1500>
 800ce80:	42000204 	addi	r8,r8,8
 800ce84:	003ecd06 	br	800c9bc <___vfprintf_internal_r+0x151c>
 800ce88:	d9002a17 	ldw	r4,168(sp)
 800ce8c:	d8002785 	stb	zero,158(sp)
 800ce90:	203d2d16 	blt	r4,zero,800c348 <___vfprintf_internal_r+0xea8>
 800ce94:	00bfdfc4 	movi	r2,-129
 800ce98:	90a4703a 	and	r18,r18,r2
 800ce9c:	003a6106 	br	800b824 <___vfprintf_internal_r+0x384>
 800cea0:	010200b4 	movhi	r4,2050
 800cea4:	212aa484 	addi	r4,r4,-21870
 800cea8:	d9002c15 	stw	r4,176(sp)
 800ceac:	003bea06 	br	800be58 <___vfprintf_internal_r+0x9b8>
 800ceb0:	d9002d17 	ldw	r4,180(sp)
 800ceb4:	d9801e04 	addi	r6,sp,120
 800ceb8:	b80b883a 	mov	r5,r23
 800cebc:	80122980 	call	8012298 <__sprint_r>
 800cec0:	103a7b1e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800cec4:	d8c02017 	ldw	r3,128(sp)
 800cec8:	da000404 	addi	r8,sp,16
 800cecc:	003d4106 	br	800c3d4 <___vfprintf_internal_r+0xf34>
 800ced0:	d8801f17 	ldw	r2,124(sp)
 800ced4:	014200b4 	movhi	r5,2050
 800ced8:	01000044 	movi	r4,1
 800cedc:	18c00044 	addi	r3,r3,1
 800cee0:	10800044 	addi	r2,r2,1
 800cee4:	296aa404 	addi	r5,r5,-21872
 800cee8:	41000115 	stw	r4,4(r8)
 800ceec:	41400015 	stw	r5,0(r8)
 800cef0:	d8c02015 	stw	r3,128(sp)
 800cef4:	d8801f15 	stw	r2,124(sp)
 800cef8:	010001c4 	movi	r4,7
 800cefc:	20805c16 	blt	r4,r2,800d070 <___vfprintf_internal_r+0x1bd0>
 800cf00:	42000204 	addi	r8,r8,8
 800cf04:	8800041e 	bne	r17,zero,800cf18 <___vfprintf_internal_r+0x1a78>
 800cf08:	d8803317 	ldw	r2,204(sp)
 800cf0c:	1000021e 	bne	r2,zero,800cf18 <___vfprintf_internal_r+0x1a78>
 800cf10:	9080004c 	andi	r2,r18,1
 800cf14:	103be726 	beq	r2,zero,800beb4 <___vfprintf_internal_r+0xa14>
 800cf18:	d9003717 	ldw	r4,220(sp)
 800cf1c:	d8801f17 	ldw	r2,124(sp)
 800cf20:	d9403417 	ldw	r5,208(sp)
 800cf24:	20c7883a 	add	r3,r4,r3
 800cf28:	10800044 	addi	r2,r2,1
 800cf2c:	41000115 	stw	r4,4(r8)
 800cf30:	41400015 	stw	r5,0(r8)
 800cf34:	d8c02015 	stw	r3,128(sp)
 800cf38:	d8801f15 	stw	r2,124(sp)
 800cf3c:	010001c4 	movi	r4,7
 800cf40:	20812116 	blt	r4,r2,800d3c8 <___vfprintf_internal_r+0x1f28>
 800cf44:	42000204 	addi	r8,r8,8
 800cf48:	0463c83a 	sub	r17,zero,r17
 800cf4c:	0440730e 	bge	zero,r17,800d11c <___vfprintf_internal_r+0x1c7c>
 800cf50:	05800404 	movi	r22,16
 800cf54:	b440860e 	bge	r22,r17,800d170 <___vfprintf_internal_r+0x1cd0>
 800cf58:	014200b4 	movhi	r5,2050
 800cf5c:	296aa484 	addi	r5,r5,-21870
 800cf60:	d9402c15 	stw	r5,176(sp)
 800cf64:	070001c4 	movi	fp,7
 800cf68:	dcc02d17 	ldw	r19,180(sp)
 800cf6c:	00000306 	br	800cf7c <___vfprintf_internal_r+0x1adc>
 800cf70:	42000204 	addi	r8,r8,8
 800cf74:	8c7ffc04 	addi	r17,r17,-16
 800cf78:	b440800e 	bge	r22,r17,800d17c <___vfprintf_internal_r+0x1cdc>
 800cf7c:	18c00404 	addi	r3,r3,16
 800cf80:	10800044 	addi	r2,r2,1
 800cf84:	45000015 	stw	r20,0(r8)
 800cf88:	45800115 	stw	r22,4(r8)
 800cf8c:	d8c02015 	stw	r3,128(sp)
 800cf90:	d8801f15 	stw	r2,124(sp)
 800cf94:	e0bff60e 	bge	fp,r2,800cf70 <___vfprintf_internal_r+0x1ad0>
 800cf98:	d9801e04 	addi	r6,sp,120
 800cf9c:	b80b883a 	mov	r5,r23
 800cfa0:	9809883a 	mov	r4,r19
 800cfa4:	80122980 	call	8012298 <__sprint_r>
 800cfa8:	103a411e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800cfac:	d8c02017 	ldw	r3,128(sp)
 800cfb0:	d8801f17 	ldw	r2,124(sp)
 800cfb4:	da000404 	addi	r8,sp,16
 800cfb8:	003fee06 	br	800cf74 <___vfprintf_internal_r+0x1ad4>
 800cfbc:	00bfffc4 	movi	r2,-1
 800cfc0:	003a3f06 	br	800b8c0 <___vfprintf_internal_r+0x420>
 800cfc4:	008011c4 	movi	r2,71
 800cfc8:	1440b816 	blt	r2,r17,800d2ac <___vfprintf_internal_r+0x1e0c>
 800cfcc:	040200b4 	movhi	r16,2050
 800cfd0:	842a9604 	addi	r16,r16,-21928
 800cfd4:	00c000c4 	movi	r3,3
 800cfd8:	00bfdfc4 	movi	r2,-129
 800cfdc:	d8c02915 	stw	r3,164(sp)
 800cfe0:	90a4703a 	and	r18,r18,r2
 800cfe4:	df002783 	ldbu	fp,158(sp)
 800cfe8:	d8c02b15 	stw	r3,172(sp)
 800cfec:	d8002a15 	stw	zero,168(sp)
 800cff0:	d8003215 	stw	zero,200(sp)
 800cff4:	003b0706 	br	800bc14 <___vfprintf_internal_r+0x774>
 800cff8:	d8c02e17 	ldw	r3,184(sp)
 800cffc:	1cc00017 	ldw	r19,0(r3)
 800d000:	18c00104 	addi	r3,r3,4
 800d004:	d8c02e15 	stw	r3,184(sp)
 800d008:	982dd7fa 	srai	r22,r19,31
 800d00c:	b005883a 	mov	r2,r22
 800d010:	003a7706 	br	800b9f0 <___vfprintf_internal_r+0x550>
 800d014:	d8c02e17 	ldw	r3,184(sp)
 800d018:	d9002f17 	ldw	r4,188(sp)
 800d01c:	18800017 	ldw	r2,0(r3)
 800d020:	18c00104 	addi	r3,r3,4
 800d024:	d8c02e15 	stw	r3,184(sp)
 800d028:	11000015 	stw	r4,0(r2)
 800d02c:	00395406 	br	800b580 <___vfprintf_internal_r+0xe0>
 800d030:	d9002e17 	ldw	r4,184(sp)
 800d034:	002d883a 	mov	r22,zero
 800d038:	24c00017 	ldw	r19,0(r4)
 800d03c:	21000104 	addi	r4,r4,4
 800d040:	d9002e15 	stw	r4,184(sp)
 800d044:	003c0706 	br	800c064 <___vfprintf_internal_r+0xbc4>
 800d048:	d9402e17 	ldw	r5,184(sp)
 800d04c:	d8c02a17 	ldw	r3,168(sp)
 800d050:	002d883a 	mov	r22,zero
 800d054:	28800104 	addi	r2,r5,4
 800d058:	2cc0000b 	ldhu	r19,0(r5)
 800d05c:	183dc10e 	bge	r3,zero,800c764 <___vfprintf_internal_r+0x12c4>
 800d060:	003f7506 	br	800ce38 <___vfprintf_internal_r+0x1998>
 800d064:	040200b4 	movhi	r16,2050
 800d068:	842a9404 	addi	r16,r16,-21936
 800d06c:	003aa706 	br	800bb0c <___vfprintf_internal_r+0x66c>
 800d070:	d9002d17 	ldw	r4,180(sp)
 800d074:	d9801e04 	addi	r6,sp,120
 800d078:	b80b883a 	mov	r5,r23
 800d07c:	80122980 	call	8012298 <__sprint_r>
 800d080:	103a0b1e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800d084:	dc402617 	ldw	r17,152(sp)
 800d088:	d8c02017 	ldw	r3,128(sp)
 800d08c:	da000404 	addi	r8,sp,16
 800d090:	003f9c06 	br	800cf04 <___vfprintf_internal_r+0x1a64>
 800d094:	ac400043 	ldbu	r17,1(r21)
 800d098:	84000814 	ori	r16,r16,32
 800d09c:	ad400044 	addi	r21,r21,1
 800d0a0:	8c403fcc 	andi	r17,r17,255
 800d0a4:	8c40201c 	xori	r17,r17,128
 800d0a8:	8c7fe004 	addi	r17,r17,-128
 800d0ac:	00395e06 	br	800b628 <___vfprintf_internal_r+0x188>
 800d0b0:	d8c02e15 	stw	r3,184(sp)
 800d0b4:	0039883a 	mov	fp,zero
 800d0b8:	003e3506 	br	800c990 <___vfprintf_internal_r+0x14f0>
 800d0bc:	d9002d17 	ldw	r4,180(sp)
 800d0c0:	d9801e04 	addi	r6,sp,120
 800d0c4:	b80b883a 	mov	r5,r23
 800d0c8:	80122980 	call	8012298 <__sprint_r>
 800d0cc:	1039f81e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800d0d0:	d8c02017 	ldw	r3,128(sp)
 800d0d4:	da000404 	addi	r8,sp,16
 800d0d8:	003cd006 	br	800c41c <___vfprintf_internal_r+0xf7c>
 800d0dc:	8009883a 	mov	r4,r16
 800d0e0:	df003d15 	stw	fp,244(sp)
 800d0e4:	800b0980 	call	800b098 <strlen>
 800d0e8:	d8802b15 	stw	r2,172(sp)
 800d0ec:	da003d17 	ldw	r8,244(sp)
 800d0f0:	103c200e 	bge	r2,zero,800c174 <___vfprintf_internal_r+0xcd4>
 800d0f4:	0005883a 	mov	r2,zero
 800d0f8:	003c1e06 	br	800c174 <___vfprintf_internal_r+0xcd4>
 800d0fc:	d9002d17 	ldw	r4,180(sp)
 800d100:	d9801e04 	addi	r6,sp,120
 800d104:	b80b883a 	mov	r5,r23
 800d108:	80122980 	call	8012298 <__sprint_r>
 800d10c:	1039e81e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800d110:	d8c02017 	ldw	r3,128(sp)
 800d114:	d8801f17 	ldw	r2,124(sp)
 800d118:	da000404 	addi	r8,sp,16
 800d11c:	d9403317 	ldw	r5,204(sp)
 800d120:	10800044 	addi	r2,r2,1
 800d124:	44000015 	stw	r16,0(r8)
 800d128:	28c7883a 	add	r3,r5,r3
 800d12c:	003b5b06 	br	800be9c <___vfprintf_internal_r+0x9fc>
 800d130:	010200b4 	movhi	r4,2050
 800d134:	212aa884 	addi	r4,r4,-21854
 800d138:	d9003515 	stw	r4,212(sp)
 800d13c:	003af206 	br	800bd08 <___vfprintf_internal_r+0x868>
 800d140:	013fffc4 	movi	r4,-1
 800d144:	003a0806 	br	800b968 <___vfprintf_internal_r+0x4c8>
 800d148:	0023883a 	mov	r17,zero
 800d14c:	003d9d06 	br	800c7c4 <___vfprintf_internal_r+0x1324>
 800d150:	d9002d17 	ldw	r4,180(sp)
 800d154:	d9801e04 	addi	r6,sp,120
 800d158:	b80b883a 	mov	r5,r23
 800d15c:	80122980 	call	8012298 <__sprint_r>
 800d160:	1039d31e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800d164:	d8c02017 	ldw	r3,128(sp)
 800d168:	da000404 	addi	r8,sp,16
 800d16c:	003d9406 	br	800c7c0 <___vfprintf_internal_r+0x1320>
 800d170:	010200b4 	movhi	r4,2050
 800d174:	212aa484 	addi	r4,r4,-21870
 800d178:	d9002c15 	stw	r4,176(sp)
 800d17c:	d9002c17 	ldw	r4,176(sp)
 800d180:	1c47883a 	add	r3,r3,r17
 800d184:	10800044 	addi	r2,r2,1
 800d188:	41000015 	stw	r4,0(r8)
 800d18c:	44400115 	stw	r17,4(r8)
 800d190:	d8c02015 	stw	r3,128(sp)
 800d194:	d8801f15 	stw	r2,124(sp)
 800d198:	010001c4 	movi	r4,7
 800d19c:	20bfd716 	blt	r4,r2,800d0fc <___vfprintf_internal_r+0x1c5c>
 800d1a0:	42000204 	addi	r8,r8,8
 800d1a4:	003fdd06 	br	800d11c <___vfprintf_internal_r+0x1c7c>
 800d1a8:	d9002d17 	ldw	r4,180(sp)
 800d1ac:	d9801e04 	addi	r6,sp,120
 800d1b0:	b80b883a 	mov	r5,r23
 800d1b4:	80122980 	call	8012298 <__sprint_r>
 800d1b8:	1039bd1e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800d1bc:	d8802617 	ldw	r2,152(sp)
 800d1c0:	d8c02017 	ldw	r3,128(sp)
 800d1c4:	da000404 	addi	r8,sp,16
 800d1c8:	003e1006 	br	800ca0c <___vfprintf_internal_r+0x156c>
 800d1cc:	00800044 	movi	r2,1
 800d1d0:	10803fcc 	andi	r2,r2,255
 800d1d4:	00c00044 	movi	r3,1
 800d1d8:	10fa0d26 	beq	r2,r3,800ba10 <___vfprintf_internal_r+0x570>
 800d1dc:	00c00084 	movi	r3,2
 800d1e0:	10fbaf26 	beq	r2,r3,800c0a0 <___vfprintf_internal_r+0xc00>
 800d1e4:	003a6d06 	br	800bb9c <___vfprintf_internal_r+0x6fc>
 800d1e8:	010200b4 	movhi	r4,2050
 800d1ec:	212aa884 	addi	r4,r4,-21854
 800d1f0:	d9003515 	stw	r4,212(sp)
 800d1f4:	003b5406 	br	800bf48 <___vfprintf_internal_r+0xaa8>
 800d1f8:	d8802a17 	ldw	r2,168(sp)
 800d1fc:	00c00184 	movi	r3,6
 800d200:	1880012e 	bgeu	r3,r2,800d208 <___vfprintf_internal_r+0x1d68>
 800d204:	1805883a 	mov	r2,r3
 800d208:	d8802b15 	stw	r2,172(sp)
 800d20c:	1000ef16 	blt	r2,zero,800d5cc <___vfprintf_internal_r+0x212c>
 800d210:	040200b4 	movhi	r16,2050
 800d214:	d8802915 	stw	r2,164(sp)
 800d218:	dcc02e15 	stw	r19,184(sp)
 800d21c:	d8002a15 	stw	zero,168(sp)
 800d220:	d8003215 	stw	zero,200(sp)
 800d224:	842aa204 	addi	r16,r16,-21880
 800d228:	0039883a 	mov	fp,zero
 800d22c:	003a8006 	br	800bc30 <___vfprintf_internal_r+0x790>
 800d230:	0021883a 	mov	r16,zero
 800d234:	003e0706 	br	800ca54 <___vfprintf_internal_r+0x15b4>
 800d238:	d9002d17 	ldw	r4,180(sp)
 800d23c:	d9801e04 	addi	r6,sp,120
 800d240:	b80b883a 	mov	r5,r23
 800d244:	80122980 	call	8012298 <__sprint_r>
 800d248:	1039991e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800d24c:	d8802617 	ldw	r2,152(sp)
 800d250:	d9403317 	ldw	r5,204(sp)
 800d254:	d8c02017 	ldw	r3,128(sp)
 800d258:	da000404 	addi	r8,sp,16
 800d25c:	2885c83a 	sub	r2,r5,r2
 800d260:	003dfb06 	br	800ca50 <___vfprintf_internal_r+0x15b0>
 800d264:	9080004c 	andi	r2,r18,1
 800d268:	103e8f1e 	bne	r2,zero,800cca8 <___vfprintf_internal_r+0x1808>
 800d26c:	d8802117 	ldw	r2,132(sp)
 800d270:	003e9e06 	br	800ccec <___vfprintf_internal_r+0x184c>
 800d274:	1025883a 	mov	r18,r2
 800d278:	0039883a 	mov	fp,zero
 800d27c:	00800084 	movi	r2,2
 800d280:	003fd306 	br	800d1d0 <___vfprintf_internal_r+0x1d30>
 800d284:	07000b44 	movi	fp,45
 800d288:	df002785 	stb	fp,158(sp)
 800d28c:	003a1b06 	br	800bafc <___vfprintf_internal_r+0x65c>
 800d290:	00c00b44 	movi	r3,45
 800d294:	d8c02785 	stb	r3,158(sp)
 800d298:	d8802915 	stw	r2,164(sp)
 800d29c:	dc802c17 	ldw	r18,176(sp)
 800d2a0:	d8002a15 	stw	zero,168(sp)
 800d2a4:	07000b44 	movi	fp,45
 800d2a8:	003a5e06 	br	800bc24 <___vfprintf_internal_r+0x784>
 800d2ac:	040200b4 	movhi	r16,2050
 800d2b0:	842a9704 	addi	r16,r16,-21924
 800d2b4:	003f4706 	br	800cfd4 <___vfprintf_internal_r+0x1b34>
 800d2b8:	d9002e17 	ldw	r4,184(sp)
 800d2bc:	d9402f17 	ldw	r5,188(sp)
 800d2c0:	20800017 	ldw	r2,0(r4)
 800d2c4:	21000104 	addi	r4,r4,4
 800d2c8:	d9002e15 	stw	r4,184(sp)
 800d2cc:	11400015 	stw	r5,0(r2)
 800d2d0:	0038ab06 	br	800b580 <___vfprintf_internal_r+0xe0>
 800d2d4:	dd802617 	ldw	r22,152(sp)
 800d2d8:	00bfff44 	movi	r2,-3
 800d2dc:	b0801c16 	blt	r22,r2,800d350 <___vfprintf_internal_r+0x1eb0>
 800d2e0:	d9402a17 	ldw	r5,168(sp)
 800d2e4:	2d801a16 	blt	r5,r22,800d350 <___vfprintf_internal_r+0x1eb0>
 800d2e8:	dd803215 	stw	r22,200(sp)
 800d2ec:	003e8906 	br	800cd14 <___vfprintf_internal_r+0x1874>
 800d2f0:	010200b4 	movhi	r4,2050
 800d2f4:	212aa484 	addi	r4,r4,-21870
 800d2f8:	d9002c15 	stw	r4,176(sp)
 800d2fc:	003c9106 	br	800c544 <___vfprintf_internal_r+0x10a4>
 800d300:	e005883a 	mov	r2,fp
 800d304:	003e7906 	br	800ccec <___vfprintf_internal_r+0x184c>
 800d308:	d9002a17 	ldw	r4,168(sp)
 800d30c:	df002783 	ldbu	fp,158(sp)
 800d310:	dcc02e15 	stw	r19,184(sp)
 800d314:	d9002915 	stw	r4,164(sp)
 800d318:	d9002b15 	stw	r4,172(sp)
 800d31c:	d8002a15 	stw	zero,168(sp)
 800d320:	d8003215 	stw	zero,200(sp)
 800d324:	003a3b06 	br	800bc14 <___vfprintf_internal_r+0x774>
 800d328:	9080004c 	andi	r2,r18,1
 800d32c:	0039883a 	mov	fp,zero
 800d330:	10000426 	beq	r2,zero,800d344 <___vfprintf_internal_r+0x1ea4>
 800d334:	00800c04 	movi	r2,48
 800d338:	dc001dc4 	addi	r16,sp,119
 800d33c:	d8801dc5 	stb	r2,119(sp)
 800d340:	003b6406 	br	800c0d4 <___vfprintf_internal_r+0xc34>
 800d344:	d8002b15 	stw	zero,172(sp)
 800d348:	dc001e04 	addi	r16,sp,120
 800d34c:	003a2b06 	br	800bbfc <___vfprintf_internal_r+0x75c>
 800d350:	8c7fff84 	addi	r17,r17,-2
 800d354:	b5bfffc4 	addi	r22,r22,-1
 800d358:	dd802615 	stw	r22,152(sp)
 800d35c:	dc4022c5 	stb	r17,139(sp)
 800d360:	b000bf16 	blt	r22,zero,800d660 <___vfprintf_internal_r+0x21c0>
 800d364:	00800ac4 	movi	r2,43
 800d368:	d8802305 	stb	r2,140(sp)
 800d36c:	00800244 	movi	r2,9
 800d370:	15807016 	blt	r2,r22,800d534 <___vfprintf_internal_r+0x2094>
 800d374:	00800c04 	movi	r2,48
 800d378:	b5800c04 	addi	r22,r22,48
 800d37c:	d8802345 	stb	r2,141(sp)
 800d380:	dd802385 	stb	r22,142(sp)
 800d384:	d88023c4 	addi	r2,sp,143
 800d388:	df0022c4 	addi	fp,sp,139
 800d38c:	d8c03317 	ldw	r3,204(sp)
 800d390:	1739c83a 	sub	fp,r2,fp
 800d394:	d9003317 	ldw	r4,204(sp)
 800d398:	e0c7883a 	add	r3,fp,r3
 800d39c:	df003a15 	stw	fp,232(sp)
 800d3a0:	d8c02b15 	stw	r3,172(sp)
 800d3a4:	00800044 	movi	r2,1
 800d3a8:	1100b30e 	bge	r2,r4,800d678 <___vfprintf_internal_r+0x21d8>
 800d3ac:	d8c02b17 	ldw	r3,172(sp)
 800d3b0:	18c00044 	addi	r3,r3,1
 800d3b4:	d8c02b15 	stw	r3,172(sp)
 800d3b8:	1805883a 	mov	r2,r3
 800d3bc:	1800ac16 	blt	r3,zero,800d670 <___vfprintf_internal_r+0x21d0>
 800d3c0:	d8003215 	stw	zero,200(sp)
 800d3c4:	003e5d06 	br	800cd3c <___vfprintf_internal_r+0x189c>
 800d3c8:	d9002d17 	ldw	r4,180(sp)
 800d3cc:	d9801e04 	addi	r6,sp,120
 800d3d0:	b80b883a 	mov	r5,r23
 800d3d4:	80122980 	call	8012298 <__sprint_r>
 800d3d8:	1039351e 	bne	r2,zero,800b8b0 <___vfprintf_internal_r+0x410>
 800d3dc:	dc402617 	ldw	r17,152(sp)
 800d3e0:	d8c02017 	ldw	r3,128(sp)
 800d3e4:	d8801f17 	ldw	r2,124(sp)
 800d3e8:	da000404 	addi	r8,sp,16
 800d3ec:	003ed606 	br	800cf48 <___vfprintf_internal_r+0x1aa8>
 800d3f0:	182b883a 	mov	r21,r3
 800d3f4:	d8002a15 	stw	zero,168(sp)
 800d3f8:	00388c06 	br	800b62c <___vfprintf_internal_r+0x18c>
 800d3fc:	d8802a17 	ldw	r2,168(sp)
 800d400:	103e071e 	bne	r2,zero,800cc20 <___vfprintf_internal_r+0x1780>
 800d404:	dc002a15 	stw	r16,168(sp)
 800d408:	003e0506 	br	800cc20 <___vfprintf_internal_r+0x1780>
 800d40c:	d9002a17 	ldw	r4,168(sp)
 800d410:	20c00044 	addi	r3,r4,1
 800d414:	003e0f06 	br	800cc54 <___vfprintf_internal_r+0x17b4>
 800d418:	01400184 	movi	r5,6
 800d41c:	d9402a15 	stw	r5,168(sp)
 800d420:	003dff06 	br	800cc20 <___vfprintf_internal_r+0x1780>
 800d424:	d8802104 	addi	r2,sp,132
 800d428:	d8800315 	stw	r2,12(sp)
 800d42c:	d8802504 	addi	r2,sp,148
 800d430:	d8800215 	stw	r2,8(sp)
 800d434:	d8802604 	addi	r2,sp,152
 800d438:	d8800115 	stw	r2,4(sp)
 800d43c:	d8802a17 	ldw	r2,168(sp)
 800d440:	d9403617 	ldw	r5,216(sp)
 800d444:	d9002d17 	ldw	r4,180(sp)
 800d448:	d8800015 	stw	r2,0(sp)
 800d44c:	01c000c4 	movi	r7,3
 800d450:	980d883a 	mov	r6,r19
 800d454:	da003d15 	stw	r8,244(sp)
 800d458:	800dbd00 	call	800dbd0 <_dtoa_r>
 800d45c:	d8c02a17 	ldw	r3,168(sp)
 800d460:	da003d17 	ldw	r8,244(sp)
 800d464:	1021883a 	mov	r16,r2
 800d468:	10f9883a 	add	fp,r2,r3
 800d46c:	81000007 	ldb	r4,0(r16)
 800d470:	00800c04 	movi	r2,48
 800d474:	20805e26 	beq	r4,r2,800d5f0 <___vfprintf_internal_r+0x2150>
 800d478:	d8c02617 	ldw	r3,152(sp)
 800d47c:	e0f9883a 	add	fp,fp,r3
 800d480:	003e0a06 	br	800ccac <___vfprintf_internal_r+0x180c>
 800d484:	00c00b44 	movi	r3,45
 800d488:	24e0003c 	xorhi	r19,r4,32768
 800d48c:	d8c02905 	stb	r3,164(sp)
 800d490:	003de906 	br	800cc38 <___vfprintf_internal_r+0x1798>
 800d494:	d8c03217 	ldw	r3,200(sp)
 800d498:	00c07a0e 	bge	zero,r3,800d684 <___vfprintf_internal_r+0x21e4>
 800d49c:	00800044 	movi	r2,1
 800d4a0:	d9003317 	ldw	r4,204(sp)
 800d4a4:	1105883a 	add	r2,r2,r4
 800d4a8:	d8802b15 	stw	r2,172(sp)
 800d4ac:	10004e16 	blt	r2,zero,800d5e8 <___vfprintf_internal_r+0x2148>
 800d4b0:	044019c4 	movi	r17,103
 800d4b4:	003e2106 	br	800cd3c <___vfprintf_internal_r+0x189c>
 800d4b8:	d9002a17 	ldw	r4,168(sp)
 800d4bc:	d8802104 	addi	r2,sp,132
 800d4c0:	d8800315 	stw	r2,12(sp)
 800d4c4:	d9000015 	stw	r4,0(sp)
 800d4c8:	d8802504 	addi	r2,sp,148
 800d4cc:	d9403617 	ldw	r5,216(sp)
 800d4d0:	d9002d17 	ldw	r4,180(sp)
 800d4d4:	d8800215 	stw	r2,8(sp)
 800d4d8:	d8802604 	addi	r2,sp,152
 800d4dc:	d8800115 	stw	r2,4(sp)
 800d4e0:	01c000c4 	movi	r7,3
 800d4e4:	980d883a 	mov	r6,r19
 800d4e8:	da003d15 	stw	r8,244(sp)
 800d4ec:	800dbd00 	call	800dbd0 <_dtoa_r>
 800d4f0:	d8c02a17 	ldw	r3,168(sp)
 800d4f4:	da003d17 	ldw	r8,244(sp)
 800d4f8:	1021883a 	mov	r16,r2
 800d4fc:	00801184 	movi	r2,70
 800d500:	80f9883a 	add	fp,r16,r3
 800d504:	88bfd926 	beq	r17,r2,800d46c <___vfprintf_internal_r+0x1fcc>
 800d508:	003de806 	br	800ccac <___vfprintf_internal_r+0x180c>
 800d50c:	d9002a17 	ldw	r4,168(sp)
 800d510:	00c04d0e 	bge	zero,r3,800d648 <___vfprintf_internal_r+0x21a8>
 800d514:	2000441e 	bne	r4,zero,800d628 <___vfprintf_internal_r+0x2188>
 800d518:	9480004c 	andi	r18,r18,1
 800d51c:	9000421e 	bne	r18,zero,800d628 <___vfprintf_internal_r+0x2188>
 800d520:	1805883a 	mov	r2,r3
 800d524:	18006f16 	blt	r3,zero,800d6e4 <___vfprintf_internal_r+0x2244>
 800d528:	d8c03217 	ldw	r3,200(sp)
 800d52c:	d8c02b15 	stw	r3,172(sp)
 800d530:	003e0206 	br	800cd3c <___vfprintf_internal_r+0x189c>
 800d534:	df0022c4 	addi	fp,sp,139
 800d538:	dc002a15 	stw	r16,168(sp)
 800d53c:	4027883a 	mov	r19,r8
 800d540:	e021883a 	mov	r16,fp
 800d544:	b009883a 	mov	r4,r22
 800d548:	01400284 	movi	r5,10
 800d54c:	800a0480 	call	800a048 <__modsi3>
 800d550:	10800c04 	addi	r2,r2,48
 800d554:	843fffc4 	addi	r16,r16,-1
 800d558:	b009883a 	mov	r4,r22
 800d55c:	01400284 	movi	r5,10
 800d560:	80800005 	stb	r2,0(r16)
 800d564:	8009fc40 	call	8009fc4 <__divsi3>
 800d568:	102d883a 	mov	r22,r2
 800d56c:	00800244 	movi	r2,9
 800d570:	15bff416 	blt	r2,r22,800d544 <___vfprintf_internal_r+0x20a4>
 800d574:	9811883a 	mov	r8,r19
 800d578:	b0800c04 	addi	r2,r22,48
 800d57c:	8027883a 	mov	r19,r16
 800d580:	997fffc4 	addi	r5,r19,-1
 800d584:	98bfffc5 	stb	r2,-1(r19)
 800d588:	dc002a17 	ldw	r16,168(sp)
 800d58c:	2f006d2e 	bgeu	r5,fp,800d744 <___vfprintf_internal_r+0x22a4>
 800d590:	d9c02384 	addi	r7,sp,142
 800d594:	3ccfc83a 	sub	r7,r7,r19
 800d598:	d9002344 	addi	r4,sp,141
 800d59c:	e1cf883a 	add	r7,fp,r7
 800d5a0:	00000106 	br	800d5a8 <___vfprintf_internal_r+0x2108>
 800d5a4:	28800003 	ldbu	r2,0(r5)
 800d5a8:	20800005 	stb	r2,0(r4)
 800d5ac:	21000044 	addi	r4,r4,1
 800d5b0:	29400044 	addi	r5,r5,1
 800d5b4:	393ffb1e 	bne	r7,r4,800d5a4 <___vfprintf_internal_r+0x2104>
 800d5b8:	d8802304 	addi	r2,sp,140
 800d5bc:	14c5c83a 	sub	r2,r2,r19
 800d5c0:	d8c02344 	addi	r3,sp,141
 800d5c4:	1885883a 	add	r2,r3,r2
 800d5c8:	003f7006 	br	800d38c <___vfprintf_internal_r+0x1eec>
 800d5cc:	0005883a 	mov	r2,zero
 800d5d0:	003f0f06 	br	800d210 <___vfprintf_internal_r+0x1d70>
 800d5d4:	d8c03217 	ldw	r3,200(sp)
 800d5d8:	18c00044 	addi	r3,r3,1
 800d5dc:	d8c02b15 	stw	r3,172(sp)
 800d5e0:	1805883a 	mov	r2,r3
 800d5e4:	183fb20e 	bge	r3,zero,800d4b0 <___vfprintf_internal_r+0x2010>
 800d5e8:	0005883a 	mov	r2,zero
 800d5ec:	003fb006 	br	800d4b0 <___vfprintf_internal_r+0x2010>
 800d5f0:	d9003617 	ldw	r4,216(sp)
 800d5f4:	000d883a 	mov	r6,zero
 800d5f8:	000f883a 	mov	r7,zero
 800d5fc:	980b883a 	mov	r5,r19
 800d600:	d8c03c15 	stw	r3,240(sp)
 800d604:	da003d15 	stw	r8,244(sp)
 800d608:	801601c0 	call	801601c <__eqdf2>
 800d60c:	d8c03c17 	ldw	r3,240(sp)
 800d610:	da003d17 	ldw	r8,244(sp)
 800d614:	103f9826 	beq	r2,zero,800d478 <___vfprintf_internal_r+0x1fd8>
 800d618:	00800044 	movi	r2,1
 800d61c:	10c7c83a 	sub	r3,r2,r3
 800d620:	d8c02615 	stw	r3,152(sp)
 800d624:	003f9506 	br	800d47c <___vfprintf_internal_r+0x1fdc>
 800d628:	d9002a17 	ldw	r4,168(sp)
 800d62c:	d8c03217 	ldw	r3,200(sp)
 800d630:	20800044 	addi	r2,r4,1
 800d634:	1885883a 	add	r2,r3,r2
 800d638:	d8802b15 	stw	r2,172(sp)
 800d63c:	103dbf0e 	bge	r2,zero,800cd3c <___vfprintf_internal_r+0x189c>
 800d640:	0005883a 	mov	r2,zero
 800d644:	003dbd06 	br	800cd3c <___vfprintf_internal_r+0x189c>
 800d648:	2000201e 	bne	r4,zero,800d6cc <___vfprintf_internal_r+0x222c>
 800d64c:	9480004c 	andi	r18,r18,1
 800d650:	90001e1e 	bne	r18,zero,800d6cc <___vfprintf_internal_r+0x222c>
 800d654:	00800044 	movi	r2,1
 800d658:	d8802b15 	stw	r2,172(sp)
 800d65c:	003db706 	br	800cd3c <___vfprintf_internal_r+0x189c>
 800d660:	00800b44 	movi	r2,45
 800d664:	05adc83a 	sub	r22,zero,r22
 800d668:	d8802305 	stb	r2,140(sp)
 800d66c:	003f3f06 	br	800d36c <___vfprintf_internal_r+0x1ecc>
 800d670:	0005883a 	mov	r2,zero
 800d674:	003f5206 	br	800d3c0 <___vfprintf_internal_r+0x1f20>
 800d678:	90a4703a 	and	r18,r18,r2
 800d67c:	903f4e26 	beq	r18,zero,800d3b8 <___vfprintf_internal_r+0x1f18>
 800d680:	003f4a06 	br	800d3ac <___vfprintf_internal_r+0x1f0c>
 800d684:	00800084 	movi	r2,2
 800d688:	10c5c83a 	sub	r2,r2,r3
 800d68c:	003f8406 	br	800d4a0 <___vfprintf_internal_r+0x2000>
 800d690:	d9402e17 	ldw	r5,184(sp)
 800d694:	d9002e17 	ldw	r4,184(sp)
 800d698:	ac400043 	ldbu	r17,1(r21)
 800d69c:	29400017 	ldw	r5,0(r5)
 800d6a0:	20800104 	addi	r2,r4,4
 800d6a4:	d8802e15 	stw	r2,184(sp)
 800d6a8:	d9402a15 	stw	r5,168(sp)
 800d6ac:	182b883a 	mov	r21,r3
 800d6b0:	283e7b0e 	bge	r5,zero,800d0a0 <___vfprintf_internal_r+0x1c00>
 800d6b4:	8c403fcc 	andi	r17,r17,255
 800d6b8:	017fffc4 	movi	r5,-1
 800d6bc:	8c40201c 	xori	r17,r17,128
 800d6c0:	d9402a15 	stw	r5,168(sp)
 800d6c4:	8c7fe004 	addi	r17,r17,-128
 800d6c8:	0037d706 	br	800b628 <___vfprintf_internal_r+0x188>
 800d6cc:	d8c02a17 	ldw	r3,168(sp)
 800d6d0:	18c00084 	addi	r3,r3,2
 800d6d4:	d8c02b15 	stw	r3,172(sp)
 800d6d8:	1805883a 	mov	r2,r3
 800d6dc:	183d970e 	bge	r3,zero,800cd3c <___vfprintf_internal_r+0x189c>
 800d6e0:	003fd706 	br	800d640 <___vfprintf_internal_r+0x21a0>
 800d6e4:	0005883a 	mov	r2,zero
 800d6e8:	003f8f06 	br	800d528 <___vfprintf_internal_r+0x2088>
 800d6ec:	9080004c 	andi	r2,r18,1
 800d6f0:	103f821e 	bne	r2,zero,800d4fc <___vfprintf_internal_r+0x205c>
 800d6f4:	d8802117 	ldw	r2,132(sp)
 800d6f8:	1405c83a 	sub	r2,r2,r16
 800d6fc:	d8803315 	stw	r2,204(sp)
 800d700:	b47ef426 	beq	r22,r17,800d2d4 <___vfprintf_internal_r+0x1e34>
 800d704:	dd802617 	ldw	r22,152(sp)
 800d708:	003f1206 	br	800d354 <___vfprintf_internal_r+0x1eb4>
 800d70c:	d8c02b03 	ldbu	r3,172(sp)
 800d710:	d8c02785 	stb	r3,158(sp)
 800d714:	0038df06 	br	800ba94 <___vfprintf_internal_r+0x5f4>
 800d718:	d8c02b03 	ldbu	r3,172(sp)
 800d71c:	d8c02785 	stb	r3,158(sp)
 800d720:	0038aa06 	br	800b9cc <___vfprintf_internal_r+0x52c>
 800d724:	d8c02b03 	ldbu	r3,172(sp)
 800d728:	d8c02785 	stb	r3,158(sp)
 800d72c:	003a4306 	br	800c03c <___vfprintf_internal_r+0xb9c>
 800d730:	d8c02b03 	ldbu	r3,172(sp)
 800d734:	d8c02785 	stb	r3,158(sp)
 800d738:	003af506 	br	800c310 <___vfprintf_internal_r+0xe70>
 800d73c:	0005883a 	mov	r2,zero
 800d740:	003d7b06 	br	800cd30 <___vfprintf_internal_r+0x1890>
 800d744:	d8802344 	addi	r2,sp,141
 800d748:	003f1006 	br	800d38c <___vfprintf_internal_r+0x1eec>
 800d74c:	d8c02b03 	ldbu	r3,172(sp)
 800d750:	d8c02785 	stb	r3,158(sp)
 800d754:	0038fd06 	br	800bb4c <___vfprintf_internal_r+0x6ac>
 800d758:	d8c02b03 	ldbu	r3,172(sp)
 800d75c:	d8c02785 	stb	r3,158(sp)
 800d760:	003a9706 	br	800c1c0 <___vfprintf_internal_r+0xd20>
 800d764:	d8c02b03 	ldbu	r3,172(sp)
 800d768:	d8c02785 	stb	r3,158(sp)
 800d76c:	003a1806 	br	800bfd0 <___vfprintf_internal_r+0xb30>
 800d770:	d8c02b03 	ldbu	r3,172(sp)
 800d774:	d8c02785 	stb	r3,158(sp)
 800d778:	003abe06 	br	800c274 <___vfprintf_internal_r+0xdd4>

0800d77c <__vfprintf_internal>:
 800d77c:	008200b4 	movhi	r2,2050
 800d780:	10b22604 	addi	r2,r2,-14184
 800d784:	300f883a 	mov	r7,r6
 800d788:	280d883a 	mov	r6,r5
 800d78c:	200b883a 	mov	r5,r4
 800d790:	11000017 	ldw	r4,0(r2)
 800d794:	800b4a01 	jmpi	800b4a0 <___vfprintf_internal_r>

0800d798 <__sbprintf>:
 800d798:	2880030b 	ldhu	r2,12(r5)
 800d79c:	2ac01917 	ldw	r11,100(r5)
 800d7a0:	2a80038b 	ldhu	r10,14(r5)
 800d7a4:	2a400717 	ldw	r9,28(r5)
 800d7a8:	2a000917 	ldw	r8,36(r5)
 800d7ac:	defee204 	addi	sp,sp,-1144
 800d7b0:	00c10004 	movi	r3,1024
 800d7b4:	dc011a15 	stw	r16,1128(sp)
 800d7b8:	10bfff4c 	andi	r2,r2,65533
 800d7bc:	2821883a 	mov	r16,r5
 800d7c0:	d8cb883a 	add	r5,sp,r3
 800d7c4:	dc811c15 	stw	r18,1136(sp)
 800d7c8:	dc411b15 	stw	r17,1132(sp)
 800d7cc:	dfc11d15 	stw	ra,1140(sp)
 800d7d0:	2025883a 	mov	r18,r4
 800d7d4:	d881030d 	sth	r2,1036(sp)
 800d7d8:	dac11915 	stw	r11,1124(sp)
 800d7dc:	da81038d 	sth	r10,1038(sp)
 800d7e0:	da410715 	stw	r9,1052(sp)
 800d7e4:	da010915 	stw	r8,1060(sp)
 800d7e8:	dec10015 	stw	sp,1024(sp)
 800d7ec:	dec10415 	stw	sp,1040(sp)
 800d7f0:	d8c10215 	stw	r3,1032(sp)
 800d7f4:	d8c10515 	stw	r3,1044(sp)
 800d7f8:	d8010615 	stw	zero,1048(sp)
 800d7fc:	800b4a00 	call	800b4a0 <___vfprintf_internal_r>
 800d800:	1023883a 	mov	r17,r2
 800d804:	10000416 	blt	r2,zero,800d818 <__sbprintf+0x80>
 800d808:	d9410004 	addi	r5,sp,1024
 800d80c:	9009883a 	mov	r4,r18
 800d810:	800f4740 	call	800f474 <_fflush_r>
 800d814:	10000d1e 	bne	r2,zero,800d84c <__sbprintf+0xb4>
 800d818:	d881030b 	ldhu	r2,1036(sp)
 800d81c:	1080100c 	andi	r2,r2,64
 800d820:	10000326 	beq	r2,zero,800d830 <__sbprintf+0x98>
 800d824:	8080030b 	ldhu	r2,12(r16)
 800d828:	10801014 	ori	r2,r2,64
 800d82c:	8080030d 	sth	r2,12(r16)
 800d830:	8805883a 	mov	r2,r17
 800d834:	dfc11d17 	ldw	ra,1140(sp)
 800d838:	dc811c17 	ldw	r18,1136(sp)
 800d83c:	dc411b17 	ldw	r17,1132(sp)
 800d840:	dc011a17 	ldw	r16,1128(sp)
 800d844:	dec11e04 	addi	sp,sp,1144
 800d848:	f800283a 	ret
 800d84c:	047fffc4 	movi	r17,-1
 800d850:	003ff106 	br	800d818 <__sbprintf+0x80>

0800d854 <__swsetup_r>:
 800d854:	008200b4 	movhi	r2,2050
 800d858:	defffd04 	addi	sp,sp,-12
 800d85c:	10b22604 	addi	r2,r2,-14184
 800d860:	dc400115 	stw	r17,4(sp)
 800d864:	2023883a 	mov	r17,r4
 800d868:	11000017 	ldw	r4,0(r2)
 800d86c:	dc000015 	stw	r16,0(sp)
 800d870:	dfc00215 	stw	ra,8(sp)
 800d874:	2821883a 	mov	r16,r5
 800d878:	20000226 	beq	r4,zero,800d884 <__swsetup_r+0x30>
 800d87c:	20800e17 	ldw	r2,56(r4)
 800d880:	10003126 	beq	r2,zero,800d948 <__swsetup_r+0xf4>
 800d884:	8080030b 	ldhu	r2,12(r16)
 800d888:	10c0020c 	andi	r3,r2,8
 800d88c:	1009883a 	mov	r4,r2
 800d890:	18000f26 	beq	r3,zero,800d8d0 <__swsetup_r+0x7c>
 800d894:	80c00417 	ldw	r3,16(r16)
 800d898:	18001526 	beq	r3,zero,800d8f0 <__swsetup_r+0x9c>
 800d89c:	1100004c 	andi	r4,r2,1
 800d8a0:	20001c1e 	bne	r4,zero,800d914 <__swsetup_r+0xc0>
 800d8a4:	1080008c 	andi	r2,r2,2
 800d8a8:	1000291e 	bne	r2,zero,800d950 <__swsetup_r+0xfc>
 800d8ac:	80800517 	ldw	r2,20(r16)
 800d8b0:	80800215 	stw	r2,8(r16)
 800d8b4:	18001c26 	beq	r3,zero,800d928 <__swsetup_r+0xd4>
 800d8b8:	0005883a 	mov	r2,zero
 800d8bc:	dfc00217 	ldw	ra,8(sp)
 800d8c0:	dc400117 	ldw	r17,4(sp)
 800d8c4:	dc000017 	ldw	r16,0(sp)
 800d8c8:	dec00304 	addi	sp,sp,12
 800d8cc:	f800283a 	ret
 800d8d0:	2080040c 	andi	r2,r4,16
 800d8d4:	10002e26 	beq	r2,zero,800d990 <__swsetup_r+0x13c>
 800d8d8:	2080010c 	andi	r2,r4,4
 800d8dc:	10001e1e 	bne	r2,zero,800d958 <__swsetup_r+0x104>
 800d8e0:	80c00417 	ldw	r3,16(r16)
 800d8e4:	20800214 	ori	r2,r4,8
 800d8e8:	8080030d 	sth	r2,12(r16)
 800d8ec:	183feb1e 	bne	r3,zero,800d89c <__swsetup_r+0x48>
 800d8f0:	1100a00c 	andi	r4,r2,640
 800d8f4:	01408004 	movi	r5,512
 800d8f8:	217fe826 	beq	r4,r5,800d89c <__swsetup_r+0x48>
 800d8fc:	800b883a 	mov	r5,r16
 800d900:	8809883a 	mov	r4,r17
 800d904:	801046c0 	call	801046c <__smakebuf_r>
 800d908:	8080030b 	ldhu	r2,12(r16)
 800d90c:	80c00417 	ldw	r3,16(r16)
 800d910:	003fe206 	br	800d89c <__swsetup_r+0x48>
 800d914:	80800517 	ldw	r2,20(r16)
 800d918:	80000215 	stw	zero,8(r16)
 800d91c:	0085c83a 	sub	r2,zero,r2
 800d920:	80800615 	stw	r2,24(r16)
 800d924:	183fe41e 	bne	r3,zero,800d8b8 <__swsetup_r+0x64>
 800d928:	80c0030b 	ldhu	r3,12(r16)
 800d92c:	0005883a 	mov	r2,zero
 800d930:	1900200c 	andi	r4,r3,128
 800d934:	203fe126 	beq	r4,zero,800d8bc <__swsetup_r+0x68>
 800d938:	18c01014 	ori	r3,r3,64
 800d93c:	80c0030d 	sth	r3,12(r16)
 800d940:	00bfffc4 	movi	r2,-1
 800d944:	003fdd06 	br	800d8bc <__swsetup_r+0x68>
 800d948:	800f8600 	call	800f860 <__sinit>
 800d94c:	003fcd06 	br	800d884 <__swsetup_r+0x30>
 800d950:	0005883a 	mov	r2,zero
 800d954:	003fd606 	br	800d8b0 <__swsetup_r+0x5c>
 800d958:	81400c17 	ldw	r5,48(r16)
 800d95c:	28000626 	beq	r5,zero,800d978 <__swsetup_r+0x124>
 800d960:	80801004 	addi	r2,r16,64
 800d964:	28800326 	beq	r5,r2,800d974 <__swsetup_r+0x120>
 800d968:	8809883a 	mov	r4,r17
 800d96c:	800f9d40 	call	800f9d4 <_free_r>
 800d970:	8100030b 	ldhu	r4,12(r16)
 800d974:	80000c15 	stw	zero,48(r16)
 800d978:	80c00417 	ldw	r3,16(r16)
 800d97c:	00bff6c4 	movi	r2,-37
 800d980:	1108703a 	and	r4,r2,r4
 800d984:	80000115 	stw	zero,4(r16)
 800d988:	80c00015 	stw	r3,0(r16)
 800d98c:	003fd506 	br	800d8e4 <__swsetup_r+0x90>
 800d990:	00800244 	movi	r2,9
 800d994:	88800015 	stw	r2,0(r17)
 800d998:	20801014 	ori	r2,r4,64
 800d99c:	8080030d 	sth	r2,12(r16)
 800d9a0:	00bfffc4 	movi	r2,-1
 800d9a4:	003fc506 	br	800d8bc <__swsetup_r+0x68>

0800d9a8 <quorem>:
 800d9a8:	defff204 	addi	sp,sp,-56
 800d9ac:	ddc00b15 	stw	r23,44(sp)
 800d9b0:	20800417 	ldw	r2,16(r4)
 800d9b4:	2dc00417 	ldw	r23,16(r5)
 800d9b8:	dfc00d15 	stw	ra,52(sp)
 800d9bc:	df000c15 	stw	fp,48(sp)
 800d9c0:	dd800a15 	stw	r22,40(sp)
 800d9c4:	dd400915 	stw	r21,36(sp)
 800d9c8:	dd000815 	stw	r20,32(sp)
 800d9cc:	dcc00715 	stw	r19,28(sp)
 800d9d0:	dc800615 	stw	r18,24(sp)
 800d9d4:	dc400515 	stw	r17,20(sp)
 800d9d8:	dc000415 	stw	r16,16(sp)
 800d9dc:	15c07a16 	blt	r2,r23,800dbc8 <quorem+0x220>
 800d9e0:	bdffffc4 	addi	r23,r23,-1
 800d9e4:	bde9883a 	add	r20,r23,r23
 800d9e8:	28c00504 	addi	r3,r5,20
 800d9ec:	a529883a 	add	r20,r20,r20
 800d9f0:	1d39883a 	add	fp,r3,r20
 800d9f4:	24c00504 	addi	r19,r4,20
 800d9f8:	d9400215 	stw	r5,8(sp)
 800d9fc:	9d29883a 	add	r20,r19,r20
 800da00:	e1400017 	ldw	r5,0(fp)
 800da04:	d9000015 	stw	r4,0(sp)
 800da08:	a1000017 	ldw	r4,0(r20)
 800da0c:	29400044 	addi	r5,r5,1
 800da10:	d8c00115 	stw	r3,4(sp)
 800da14:	dd000315 	stw	r20,12(sp)
 800da18:	800a0bc0 	call	800a0bc <__udivsi3>
 800da1c:	1025883a 	mov	r18,r2
 800da20:	10003026 	beq	r2,zero,800dae4 <quorem+0x13c>
 800da24:	dc400117 	ldw	r17,4(sp)
 800da28:	9829883a 	mov	r20,r19
 800da2c:	002d883a 	mov	r22,zero
 800da30:	0021883a 	mov	r16,zero
 800da34:	8d400017 	ldw	r21,0(r17)
 800da38:	900b883a 	mov	r5,r18
 800da3c:	8c400104 	addi	r17,r17,4
 800da40:	a93fffcc 	andi	r4,r21,65535
 800da44:	800a1780 	call	800a178 <__mulsi3>
 800da48:	a808d43a 	srli	r4,r21,16
 800da4c:	900b883a 	mov	r5,r18
 800da50:	15ad883a 	add	r22,r2,r22
 800da54:	800a1780 	call	800a178 <__mulsi3>
 800da58:	a1000017 	ldw	r4,0(r20)
 800da5c:	b00cd43a 	srli	r6,r22,16
 800da60:	b0ffffcc 	andi	r3,r22,65535
 800da64:	217fffcc 	andi	r5,r4,65535
 800da68:	2c21883a 	add	r16,r5,r16
 800da6c:	80c7c83a 	sub	r3,r16,r3
 800da70:	2008d43a 	srli	r4,r4,16
 800da74:	1185883a 	add	r2,r2,r6
 800da78:	1821d43a 	srai	r16,r3,16
 800da7c:	117fffcc 	andi	r5,r2,65535
 800da80:	2149c83a 	sub	r4,r4,r5
 800da84:	2421883a 	add	r16,r4,r16
 800da88:	8008943a 	slli	r4,r16,16
 800da8c:	18ffffcc 	andi	r3,r3,65535
 800da90:	102cd43a 	srli	r22,r2,16
 800da94:	20c8b03a 	or	r4,r4,r3
 800da98:	a1000015 	stw	r4,0(r20)
 800da9c:	8021d43a 	srai	r16,r16,16
 800daa0:	a5000104 	addi	r20,r20,4
 800daa4:	e47fe32e 	bgeu	fp,r17,800da34 <quorem+0x8c>
 800daa8:	d8c00317 	ldw	r3,12(sp)
 800daac:	18800017 	ldw	r2,0(r3)
 800dab0:	10000c1e 	bne	r2,zero,800dae4 <quorem+0x13c>
 800dab4:	18bfff04 	addi	r2,r3,-4
 800dab8:	9880082e 	bgeu	r19,r2,800dadc <quorem+0x134>
 800dabc:	18ffff17 	ldw	r3,-4(r3)
 800dac0:	18000326 	beq	r3,zero,800dad0 <quorem+0x128>
 800dac4:	00000506 	br	800dadc <quorem+0x134>
 800dac8:	10c00017 	ldw	r3,0(r2)
 800dacc:	1800031e 	bne	r3,zero,800dadc <quorem+0x134>
 800dad0:	10bfff04 	addi	r2,r2,-4
 800dad4:	bdffffc4 	addi	r23,r23,-1
 800dad8:	98bffb36 	bltu	r19,r2,800dac8 <quorem+0x120>
 800dadc:	d8c00017 	ldw	r3,0(sp)
 800dae0:	1dc00415 	stw	r23,16(r3)
 800dae4:	d9400217 	ldw	r5,8(sp)
 800dae8:	d9000017 	ldw	r4,0(sp)
 800daec:	80111ec0 	call	80111ec <__mcmp>
 800daf0:	10002816 	blt	r2,zero,800db94 <quorem+0x1ec>
 800daf4:	dc400117 	ldw	r17,4(sp)
 800daf8:	94800044 	addi	r18,r18,1
 800dafc:	980d883a 	mov	r6,r19
 800db00:	0007883a 	mov	r3,zero
 800db04:	31000017 	ldw	r4,0(r6)
 800db08:	89400017 	ldw	r5,0(r17)
 800db0c:	31800104 	addi	r6,r6,4
 800db10:	20bfffcc 	andi	r2,r4,65535
 800db14:	10c7883a 	add	r3,r2,r3
 800db18:	28bfffcc 	andi	r2,r5,65535
 800db1c:	1885c83a 	sub	r2,r3,r2
 800db20:	280ad43a 	srli	r5,r5,16
 800db24:	2008d43a 	srli	r4,r4,16
 800db28:	1007d43a 	srai	r3,r2,16
 800db2c:	10bfffcc 	andi	r2,r2,65535
 800db30:	2149c83a 	sub	r4,r4,r5
 800db34:	20c9883a 	add	r4,r4,r3
 800db38:	200a943a 	slli	r5,r4,16
 800db3c:	8c400104 	addi	r17,r17,4
 800db40:	2007d43a 	srai	r3,r4,16
 800db44:	2884b03a 	or	r2,r5,r2
 800db48:	30bfff15 	stw	r2,-4(r6)
 800db4c:	e47fed2e 	bgeu	fp,r17,800db04 <quorem+0x15c>
 800db50:	bdc5883a 	add	r2,r23,r23
 800db54:	1085883a 	add	r2,r2,r2
 800db58:	9887883a 	add	r3,r19,r2
 800db5c:	18800017 	ldw	r2,0(r3)
 800db60:	10000c1e 	bne	r2,zero,800db94 <quorem+0x1ec>
 800db64:	18bfff04 	addi	r2,r3,-4
 800db68:	9880082e 	bgeu	r19,r2,800db8c <quorem+0x1e4>
 800db6c:	18ffff17 	ldw	r3,-4(r3)
 800db70:	18000326 	beq	r3,zero,800db80 <quorem+0x1d8>
 800db74:	00000506 	br	800db8c <quorem+0x1e4>
 800db78:	10c00017 	ldw	r3,0(r2)
 800db7c:	1800031e 	bne	r3,zero,800db8c <quorem+0x1e4>
 800db80:	10bfff04 	addi	r2,r2,-4
 800db84:	bdffffc4 	addi	r23,r23,-1
 800db88:	98bffb36 	bltu	r19,r2,800db78 <quorem+0x1d0>
 800db8c:	d8c00017 	ldw	r3,0(sp)
 800db90:	1dc00415 	stw	r23,16(r3)
 800db94:	9005883a 	mov	r2,r18
 800db98:	dfc00d17 	ldw	ra,52(sp)
 800db9c:	df000c17 	ldw	fp,48(sp)
 800dba0:	ddc00b17 	ldw	r23,44(sp)
 800dba4:	dd800a17 	ldw	r22,40(sp)
 800dba8:	dd400917 	ldw	r21,36(sp)
 800dbac:	dd000817 	ldw	r20,32(sp)
 800dbb0:	dcc00717 	ldw	r19,28(sp)
 800dbb4:	dc800617 	ldw	r18,24(sp)
 800dbb8:	dc400517 	ldw	r17,20(sp)
 800dbbc:	dc000417 	ldw	r16,16(sp)
 800dbc0:	dec00e04 	addi	sp,sp,56
 800dbc4:	f800283a 	ret
 800dbc8:	0005883a 	mov	r2,zero
 800dbcc:	003ff206 	br	800db98 <quorem+0x1f0>

0800dbd0 <_dtoa_r>:
 800dbd0:	20801017 	ldw	r2,64(r4)
 800dbd4:	deffde04 	addi	sp,sp,-136
 800dbd8:	df002015 	stw	fp,128(sp)
 800dbdc:	dcc01b15 	stw	r19,108(sp)
 800dbe0:	dc801a15 	stw	r18,104(sp)
 800dbe4:	dc401915 	stw	r17,100(sp)
 800dbe8:	dc001815 	stw	r16,96(sp)
 800dbec:	dfc02115 	stw	ra,132(sp)
 800dbf0:	ddc01f15 	stw	r23,124(sp)
 800dbf4:	dd801e15 	stw	r22,120(sp)
 800dbf8:	dd401d15 	stw	r21,116(sp)
 800dbfc:	dd001c15 	stw	r20,112(sp)
 800dc00:	d9c00315 	stw	r7,12(sp)
 800dc04:	2039883a 	mov	fp,r4
 800dc08:	3023883a 	mov	r17,r6
 800dc0c:	2825883a 	mov	r18,r5
 800dc10:	dc002417 	ldw	r16,144(sp)
 800dc14:	3027883a 	mov	r19,r6
 800dc18:	10000826 	beq	r2,zero,800dc3c <_dtoa_r+0x6c>
 800dc1c:	21801117 	ldw	r6,68(r4)
 800dc20:	00c00044 	movi	r3,1
 800dc24:	100b883a 	mov	r5,r2
 800dc28:	1986983a 	sll	r3,r3,r6
 800dc2c:	11800115 	stw	r6,4(r2)
 800dc30:	10c00215 	stw	r3,8(r2)
 800dc34:	80109100 	call	8010910 <_Bfree>
 800dc38:	e0001015 	stw	zero,64(fp)
 800dc3c:	88002e16 	blt	r17,zero,800dcf8 <_dtoa_r+0x128>
 800dc40:	80000015 	stw	zero,0(r16)
 800dc44:	889ffc2c 	andhi	r2,r17,32752
 800dc48:	00dffc34 	movhi	r3,32752
 800dc4c:	10c01c26 	beq	r2,r3,800dcc0 <_dtoa_r+0xf0>
 800dc50:	000d883a 	mov	r6,zero
 800dc54:	000f883a 	mov	r7,zero
 800dc58:	9009883a 	mov	r4,r18
 800dc5c:	980b883a 	mov	r5,r19
 800dc60:	801601c0 	call	801601c <__eqdf2>
 800dc64:	10002b1e 	bne	r2,zero,800dd14 <_dtoa_r+0x144>
 800dc68:	d9c02317 	ldw	r7,140(sp)
 800dc6c:	00800044 	movi	r2,1
 800dc70:	38800015 	stw	r2,0(r7)
 800dc74:	d8802517 	ldw	r2,148(sp)
 800dc78:	10019e26 	beq	r2,zero,800e2f4 <_dtoa_r+0x724>
 800dc7c:	d8c02517 	ldw	r3,148(sp)
 800dc80:	008200b4 	movhi	r2,2050
 800dc84:	10aaa444 	addi	r2,r2,-21871
 800dc88:	18800015 	stw	r2,0(r3)
 800dc8c:	10bfffc4 	addi	r2,r2,-1
 800dc90:	dfc02117 	ldw	ra,132(sp)
 800dc94:	df002017 	ldw	fp,128(sp)
 800dc98:	ddc01f17 	ldw	r23,124(sp)
 800dc9c:	dd801e17 	ldw	r22,120(sp)
 800dca0:	dd401d17 	ldw	r21,116(sp)
 800dca4:	dd001c17 	ldw	r20,112(sp)
 800dca8:	dcc01b17 	ldw	r19,108(sp)
 800dcac:	dc801a17 	ldw	r18,104(sp)
 800dcb0:	dc401917 	ldw	r17,100(sp)
 800dcb4:	dc001817 	ldw	r16,96(sp)
 800dcb8:	dec02204 	addi	sp,sp,136
 800dcbc:	f800283a 	ret
 800dcc0:	d8c02317 	ldw	r3,140(sp)
 800dcc4:	0089c3c4 	movi	r2,9999
 800dcc8:	18800015 	stw	r2,0(r3)
 800dccc:	90017726 	beq	r18,zero,800e2ac <_dtoa_r+0x6dc>
 800dcd0:	008200b4 	movhi	r2,2050
 800dcd4:	10aab004 	addi	r2,r2,-21824
 800dcd8:	d9002517 	ldw	r4,148(sp)
 800dcdc:	203fec26 	beq	r4,zero,800dc90 <_dtoa_r+0xc0>
 800dce0:	10c000c7 	ldb	r3,3(r2)
 800dce4:	1801781e 	bne	r3,zero,800e2c8 <_dtoa_r+0x6f8>
 800dce8:	10c000c4 	addi	r3,r2,3
 800dcec:	d9802517 	ldw	r6,148(sp)
 800dcf0:	30c00015 	stw	r3,0(r6)
 800dcf4:	003fe606 	br	800dc90 <_dtoa_r+0xc0>
 800dcf8:	04e00034 	movhi	r19,32768
 800dcfc:	9cffffc4 	addi	r19,r19,-1
 800dd00:	00800044 	movi	r2,1
 800dd04:	8ce6703a 	and	r19,r17,r19
 800dd08:	80800015 	stw	r2,0(r16)
 800dd0c:	9823883a 	mov	r17,r19
 800dd10:	003fcc06 	br	800dc44 <_dtoa_r+0x74>
 800dd14:	d8800204 	addi	r2,sp,8
 800dd18:	d8800015 	stw	r2,0(sp)
 800dd1c:	d9c00104 	addi	r7,sp,4
 800dd20:	900b883a 	mov	r5,r18
 800dd24:	980d883a 	mov	r6,r19
 800dd28:	e009883a 	mov	r4,fp
 800dd2c:	8820d53a 	srli	r16,r17,20
 800dd30:	80115b80 	call	80115b8 <__d2b>
 800dd34:	d8800915 	stw	r2,36(sp)
 800dd38:	8001651e 	bne	r16,zero,800e2d0 <_dtoa_r+0x700>
 800dd3c:	dd800217 	ldw	r22,8(sp)
 800dd40:	dc000117 	ldw	r16,4(sp)
 800dd44:	00800804 	movi	r2,32
 800dd48:	b421883a 	add	r16,r22,r16
 800dd4c:	80c10c84 	addi	r3,r16,1074
 800dd50:	10c2d10e 	bge	r2,r3,800e898 <_dtoa_r+0xcc8>
 800dd54:	00801004 	movi	r2,64
 800dd58:	81010484 	addi	r4,r16,1042
 800dd5c:	10c7c83a 	sub	r3,r2,r3
 800dd60:	9108d83a 	srl	r4,r18,r4
 800dd64:	88e2983a 	sll	r17,r17,r3
 800dd68:	2448b03a 	or	r4,r4,r17
 800dd6c:	80175380 	call	8017538 <__floatunsidf>
 800dd70:	017f8434 	movhi	r5,65040
 800dd74:	01800044 	movi	r6,1
 800dd78:	1009883a 	mov	r4,r2
 800dd7c:	194b883a 	add	r5,r3,r5
 800dd80:	843fffc4 	addi	r16,r16,-1
 800dd84:	d9801115 	stw	r6,68(sp)
 800dd88:	000d883a 	mov	r6,zero
 800dd8c:	01cffe34 	movhi	r7,16376
 800dd90:	8016ae00 	call	8016ae0 <__subdf3>
 800dd94:	0198dbf4 	movhi	r6,25455
 800dd98:	01cff4f4 	movhi	r7,16339
 800dd9c:	3190d844 	addi	r6,r6,17249
 800dda0:	39e1e9c4 	addi	r7,r7,-30809
 800dda4:	1009883a 	mov	r4,r2
 800dda8:	180b883a 	mov	r5,r3
 800ddac:	80162740 	call	8016274 <__muldf3>
 800ddb0:	01a2d874 	movhi	r6,35681
 800ddb4:	01cff1f4 	movhi	r7,16327
 800ddb8:	31b22cc4 	addi	r6,r6,-14157
 800ddbc:	39e28a04 	addi	r7,r7,-30168
 800ddc0:	180b883a 	mov	r5,r3
 800ddc4:	1009883a 	mov	r4,r2
 800ddc8:	8014da00 	call	8014da0 <__adddf3>
 800ddcc:	8009883a 	mov	r4,r16
 800ddd0:	1029883a 	mov	r20,r2
 800ddd4:	1823883a 	mov	r17,r3
 800ddd8:	801745c0 	call	801745c <__floatsidf>
 800dddc:	019427f4 	movhi	r6,20639
 800dde0:	01cff4f4 	movhi	r7,16339
 800dde4:	319e7ec4 	addi	r6,r6,31227
 800dde8:	39d104c4 	addi	r7,r7,17427
 800ddec:	1009883a 	mov	r4,r2
 800ddf0:	180b883a 	mov	r5,r3
 800ddf4:	80162740 	call	8016274 <__muldf3>
 800ddf8:	100d883a 	mov	r6,r2
 800ddfc:	180f883a 	mov	r7,r3
 800de00:	a009883a 	mov	r4,r20
 800de04:	880b883a 	mov	r5,r17
 800de08:	8014da00 	call	8014da0 <__adddf3>
 800de0c:	1009883a 	mov	r4,r2
 800de10:	180b883a 	mov	r5,r3
 800de14:	1029883a 	mov	r20,r2
 800de18:	1823883a 	mov	r17,r3
 800de1c:	80173dc0 	call	80173dc <__fixdfsi>
 800de20:	000d883a 	mov	r6,zero
 800de24:	000f883a 	mov	r7,zero
 800de28:	a009883a 	mov	r4,r20
 800de2c:	880b883a 	mov	r5,r17
 800de30:	d8800515 	stw	r2,20(sp)
 800de34:	80161800 	call	8016180 <__ledf2>
 800de38:	10028716 	blt	r2,zero,800e858 <_dtoa_r+0xc88>
 800de3c:	d8c00517 	ldw	r3,20(sp)
 800de40:	00800584 	movi	r2,22
 800de44:	10c27536 	bltu	r2,r3,800e81c <_dtoa_r+0xc4c>
 800de48:	180490fa 	slli	r2,r3,3
 800de4c:	00c200b4 	movhi	r3,2050
 800de50:	18eacb04 	addi	r3,r3,-21716
 800de54:	1885883a 	add	r2,r3,r2
 800de58:	11000017 	ldw	r4,0(r2)
 800de5c:	11400117 	ldw	r5,4(r2)
 800de60:	900d883a 	mov	r6,r18
 800de64:	980f883a 	mov	r7,r19
 800de68:	80160a40 	call	80160a4 <__gedf2>
 800de6c:	00828d0e 	bge	zero,r2,800e8a4 <_dtoa_r+0xcd4>
 800de70:	d9000517 	ldw	r4,20(sp)
 800de74:	d8000e15 	stw	zero,56(sp)
 800de78:	213fffc4 	addi	r4,r4,-1
 800de7c:	d9000515 	stw	r4,20(sp)
 800de80:	b42dc83a 	sub	r22,r22,r16
 800de84:	b5bfffc4 	addi	r22,r22,-1
 800de88:	b0026f16 	blt	r22,zero,800e848 <_dtoa_r+0xc78>
 800de8c:	d8000815 	stw	zero,32(sp)
 800de90:	d9c00517 	ldw	r7,20(sp)
 800de94:	38026416 	blt	r7,zero,800e828 <_dtoa_r+0xc58>
 800de98:	b1ed883a 	add	r22,r22,r7
 800de9c:	d9c00d15 	stw	r7,52(sp)
 800dea0:	d8000a15 	stw	zero,40(sp)
 800dea4:	d9800317 	ldw	r6,12(sp)
 800dea8:	00800244 	movi	r2,9
 800deac:	11811436 	bltu	r2,r6,800e300 <_dtoa_r+0x730>
 800deb0:	00800144 	movi	r2,5
 800deb4:	1184e10e 	bge	r2,r6,800f23c <_dtoa_r+0x166c>
 800deb8:	31bfff04 	addi	r6,r6,-4
 800debc:	d9800315 	stw	r6,12(sp)
 800dec0:	0023883a 	mov	r17,zero
 800dec4:	d9800317 	ldw	r6,12(sp)
 800dec8:	008000c4 	movi	r2,3
 800decc:	30836726 	beq	r6,r2,800ec6c <_dtoa_r+0x109c>
 800ded0:	1183410e 	bge	r2,r6,800ebd8 <_dtoa_r+0x1008>
 800ded4:	d9c00317 	ldw	r7,12(sp)
 800ded8:	00800104 	movi	r2,4
 800dedc:	38827c26 	beq	r7,r2,800e8d0 <_dtoa_r+0xd00>
 800dee0:	00800144 	movi	r2,5
 800dee4:	3884c41e 	bne	r7,r2,800f1f8 <_dtoa_r+0x1628>
 800dee8:	00800044 	movi	r2,1
 800deec:	d8800b15 	stw	r2,44(sp)
 800def0:	d8c00517 	ldw	r3,20(sp)
 800def4:	d9002217 	ldw	r4,136(sp)
 800def8:	1907883a 	add	r3,r3,r4
 800defc:	19800044 	addi	r6,r3,1
 800df00:	d8c00c15 	stw	r3,48(sp)
 800df04:	d9800615 	stw	r6,24(sp)
 800df08:	0183a40e 	bge	zero,r6,800ed9c <_dtoa_r+0x11cc>
 800df0c:	d9800617 	ldw	r6,24(sp)
 800df10:	3021883a 	mov	r16,r6
 800df14:	e0001115 	stw	zero,68(fp)
 800df18:	008005c4 	movi	r2,23
 800df1c:	1184c92e 	bgeu	r2,r6,800f244 <_dtoa_r+0x1674>
 800df20:	00c00044 	movi	r3,1
 800df24:	00800104 	movi	r2,4
 800df28:	1085883a 	add	r2,r2,r2
 800df2c:	11000504 	addi	r4,r2,20
 800df30:	180b883a 	mov	r5,r3
 800df34:	18c00044 	addi	r3,r3,1
 800df38:	313ffb2e 	bgeu	r6,r4,800df28 <_dtoa_r+0x358>
 800df3c:	e1401115 	stw	r5,68(fp)
 800df40:	e009883a 	mov	r4,fp
 800df44:	80108680 	call	8010868 <_Balloc>
 800df48:	d8800715 	stw	r2,28(sp)
 800df4c:	e0801015 	stw	r2,64(fp)
 800df50:	00800384 	movi	r2,14
 800df54:	1400f736 	bltu	r2,r16,800e334 <_dtoa_r+0x764>
 800df58:	8800f626 	beq	r17,zero,800e334 <_dtoa_r+0x764>
 800df5c:	d9c00517 	ldw	r7,20(sp)
 800df60:	01c39a0e 	bge	zero,r7,800edcc <_dtoa_r+0x11fc>
 800df64:	388003cc 	andi	r2,r7,15
 800df68:	100490fa 	slli	r2,r2,3
 800df6c:	382bd13a 	srai	r21,r7,4
 800df70:	00c200b4 	movhi	r3,2050
 800df74:	18eacb04 	addi	r3,r3,-21716
 800df78:	1885883a 	add	r2,r3,r2
 800df7c:	a8c0040c 	andi	r3,r21,16
 800df80:	12400017 	ldw	r9,0(r2)
 800df84:	12000117 	ldw	r8,4(r2)
 800df88:	18037926 	beq	r3,zero,800ed70 <_dtoa_r+0x11a0>
 800df8c:	008200b4 	movhi	r2,2050
 800df90:	10aac104 	addi	r2,r2,-21756
 800df94:	11800817 	ldw	r6,32(r2)
 800df98:	11c00917 	ldw	r7,36(r2)
 800df9c:	9009883a 	mov	r4,r18
 800dfa0:	980b883a 	mov	r5,r19
 800dfa4:	da001715 	stw	r8,92(sp)
 800dfa8:	da401615 	stw	r9,88(sp)
 800dfac:	801564c0 	call	801564c <__divdf3>
 800dfb0:	da001717 	ldw	r8,92(sp)
 800dfb4:	da401617 	ldw	r9,88(sp)
 800dfb8:	ad4003cc 	andi	r21,r21,15
 800dfbc:	040000c4 	movi	r16,3
 800dfc0:	1023883a 	mov	r17,r2
 800dfc4:	1829883a 	mov	r20,r3
 800dfc8:	a8001126 	beq	r21,zero,800e010 <_dtoa_r+0x440>
 800dfcc:	05c200b4 	movhi	r23,2050
 800dfd0:	bdeac104 	addi	r23,r23,-21756
 800dfd4:	4805883a 	mov	r2,r9
 800dfd8:	4007883a 	mov	r3,r8
 800dfdc:	a980004c 	andi	r6,r21,1
 800dfe0:	1009883a 	mov	r4,r2
 800dfe4:	a82bd07a 	srai	r21,r21,1
 800dfe8:	180b883a 	mov	r5,r3
 800dfec:	30000426 	beq	r6,zero,800e000 <_dtoa_r+0x430>
 800dff0:	b9800017 	ldw	r6,0(r23)
 800dff4:	b9c00117 	ldw	r7,4(r23)
 800dff8:	84000044 	addi	r16,r16,1
 800dffc:	80162740 	call	8016274 <__muldf3>
 800e000:	bdc00204 	addi	r23,r23,8
 800e004:	a83ff51e 	bne	r21,zero,800dfdc <_dtoa_r+0x40c>
 800e008:	1013883a 	mov	r9,r2
 800e00c:	1811883a 	mov	r8,r3
 800e010:	480d883a 	mov	r6,r9
 800e014:	400f883a 	mov	r7,r8
 800e018:	8809883a 	mov	r4,r17
 800e01c:	a00b883a 	mov	r5,r20
 800e020:	801564c0 	call	801564c <__divdf3>
 800e024:	d8800f15 	stw	r2,60(sp)
 800e028:	d8c01015 	stw	r3,64(sp)
 800e02c:	d8c00e17 	ldw	r3,56(sp)
 800e030:	18000626 	beq	r3,zero,800e04c <_dtoa_r+0x47c>
 800e034:	d9000f17 	ldw	r4,60(sp)
 800e038:	d9401017 	ldw	r5,64(sp)
 800e03c:	000d883a 	mov	r6,zero
 800e040:	01cffc34 	movhi	r7,16368
 800e044:	80161800 	call	8016180 <__ledf2>
 800e048:	10040b16 	blt	r2,zero,800f078 <_dtoa_r+0x14a8>
 800e04c:	8009883a 	mov	r4,r16
 800e050:	801745c0 	call	801745c <__floatsidf>
 800e054:	d9800f17 	ldw	r6,60(sp)
 800e058:	d9c01017 	ldw	r7,64(sp)
 800e05c:	1009883a 	mov	r4,r2
 800e060:	180b883a 	mov	r5,r3
 800e064:	80162740 	call	8016274 <__muldf3>
 800e068:	000d883a 	mov	r6,zero
 800e06c:	01d00734 	movhi	r7,16412
 800e070:	1009883a 	mov	r4,r2
 800e074:	180b883a 	mov	r5,r3
 800e078:	8014da00 	call	8014da0 <__adddf3>
 800e07c:	1021883a 	mov	r16,r2
 800e080:	d8800617 	ldw	r2,24(sp)
 800e084:	047f3034 	movhi	r17,64704
 800e088:	1c63883a 	add	r17,r3,r17
 800e08c:	10031826 	beq	r2,zero,800ecf0 <_dtoa_r+0x1120>
 800e090:	d8c00517 	ldw	r3,20(sp)
 800e094:	db000617 	ldw	r12,24(sp)
 800e098:	d8c01315 	stw	r3,76(sp)
 800e09c:	d9000b17 	ldw	r4,44(sp)
 800e0a0:	20038f26 	beq	r4,zero,800eee0 <_dtoa_r+0x1310>
 800e0a4:	60bfffc4 	addi	r2,r12,-1
 800e0a8:	100490fa 	slli	r2,r2,3
 800e0ac:	00c200b4 	movhi	r3,2050
 800e0b0:	18eacb04 	addi	r3,r3,-21716
 800e0b4:	1885883a 	add	r2,r3,r2
 800e0b8:	11800017 	ldw	r6,0(r2)
 800e0bc:	11c00117 	ldw	r7,4(r2)
 800e0c0:	d8800717 	ldw	r2,28(sp)
 800e0c4:	0009883a 	mov	r4,zero
 800e0c8:	014ff834 	movhi	r5,16352
 800e0cc:	db001615 	stw	r12,88(sp)
 800e0d0:	15c00044 	addi	r23,r2,1
 800e0d4:	801564c0 	call	801564c <__divdf3>
 800e0d8:	800d883a 	mov	r6,r16
 800e0dc:	880f883a 	mov	r7,r17
 800e0e0:	1009883a 	mov	r4,r2
 800e0e4:	180b883a 	mov	r5,r3
 800e0e8:	8016ae00 	call	8016ae0 <__subdf3>
 800e0ec:	d9401017 	ldw	r5,64(sp)
 800e0f0:	d9000f17 	ldw	r4,60(sp)
 800e0f4:	102b883a 	mov	r21,r2
 800e0f8:	d8c01215 	stw	r3,72(sp)
 800e0fc:	80173dc0 	call	80173dc <__fixdfsi>
 800e100:	1009883a 	mov	r4,r2
 800e104:	1029883a 	mov	r20,r2
 800e108:	801745c0 	call	801745c <__floatsidf>
 800e10c:	d9000f17 	ldw	r4,60(sp)
 800e110:	d9401017 	ldw	r5,64(sp)
 800e114:	100d883a 	mov	r6,r2
 800e118:	180f883a 	mov	r7,r3
 800e11c:	8016ae00 	call	8016ae0 <__subdf3>
 800e120:	1823883a 	mov	r17,r3
 800e124:	d8c00717 	ldw	r3,28(sp)
 800e128:	d9401217 	ldw	r5,72(sp)
 800e12c:	a2000c04 	addi	r8,r20,48
 800e130:	1021883a 	mov	r16,r2
 800e134:	1a000005 	stb	r8,0(r3)
 800e138:	800d883a 	mov	r6,r16
 800e13c:	880f883a 	mov	r7,r17
 800e140:	a809883a 	mov	r4,r21
 800e144:	4029883a 	mov	r20,r8
 800e148:	80160a40 	call	80160a4 <__gedf2>
 800e14c:	00841d16 	blt	zero,r2,800f1c4 <_dtoa_r+0x15f4>
 800e150:	800d883a 	mov	r6,r16
 800e154:	880f883a 	mov	r7,r17
 800e158:	0009883a 	mov	r4,zero
 800e15c:	014ffc34 	movhi	r5,16368
 800e160:	8016ae00 	call	8016ae0 <__subdf3>
 800e164:	d9401217 	ldw	r5,72(sp)
 800e168:	100d883a 	mov	r6,r2
 800e16c:	180f883a 	mov	r7,r3
 800e170:	a809883a 	mov	r4,r21
 800e174:	80160a40 	call	80160a4 <__gedf2>
 800e178:	db001617 	ldw	r12,88(sp)
 800e17c:	00840e16 	blt	zero,r2,800f1b8 <_dtoa_r+0x15e8>
 800e180:	00800044 	movi	r2,1
 800e184:	13006b0e 	bge	r2,r12,800e334 <_dtoa_r+0x764>
 800e188:	d9000717 	ldw	r4,28(sp)
 800e18c:	dd800f15 	stw	r22,60(sp)
 800e190:	dcc01015 	stw	r19,64(sp)
 800e194:	2319883a 	add	r12,r4,r12
 800e198:	dcc01217 	ldw	r19,72(sp)
 800e19c:	602d883a 	mov	r22,r12
 800e1a0:	dc801215 	stw	r18,72(sp)
 800e1a4:	b825883a 	mov	r18,r23
 800e1a8:	00000906 	br	800e1d0 <_dtoa_r+0x600>
 800e1ac:	8016ae00 	call	8016ae0 <__subdf3>
 800e1b0:	a80d883a 	mov	r6,r21
 800e1b4:	980f883a 	mov	r7,r19
 800e1b8:	1009883a 	mov	r4,r2
 800e1bc:	180b883a 	mov	r5,r3
 800e1c0:	80161800 	call	8016180 <__ledf2>
 800e1c4:	1003e816 	blt	r2,zero,800f168 <_dtoa_r+0x1598>
 800e1c8:	b825883a 	mov	r18,r23
 800e1cc:	bd83e926 	beq	r23,r22,800f174 <_dtoa_r+0x15a4>
 800e1d0:	a809883a 	mov	r4,r21
 800e1d4:	980b883a 	mov	r5,r19
 800e1d8:	000d883a 	mov	r6,zero
 800e1dc:	01d00934 	movhi	r7,16420
 800e1e0:	80162740 	call	8016274 <__muldf3>
 800e1e4:	000d883a 	mov	r6,zero
 800e1e8:	01d00934 	movhi	r7,16420
 800e1ec:	8009883a 	mov	r4,r16
 800e1f0:	880b883a 	mov	r5,r17
 800e1f4:	102b883a 	mov	r21,r2
 800e1f8:	1827883a 	mov	r19,r3
 800e1fc:	80162740 	call	8016274 <__muldf3>
 800e200:	180b883a 	mov	r5,r3
 800e204:	1009883a 	mov	r4,r2
 800e208:	1821883a 	mov	r16,r3
 800e20c:	1023883a 	mov	r17,r2
 800e210:	80173dc0 	call	80173dc <__fixdfsi>
 800e214:	1009883a 	mov	r4,r2
 800e218:	1029883a 	mov	r20,r2
 800e21c:	801745c0 	call	801745c <__floatsidf>
 800e220:	8809883a 	mov	r4,r17
 800e224:	800b883a 	mov	r5,r16
 800e228:	100d883a 	mov	r6,r2
 800e22c:	180f883a 	mov	r7,r3
 800e230:	8016ae00 	call	8016ae0 <__subdf3>
 800e234:	a5000c04 	addi	r20,r20,48
 800e238:	a80d883a 	mov	r6,r21
 800e23c:	980f883a 	mov	r7,r19
 800e240:	1009883a 	mov	r4,r2
 800e244:	180b883a 	mov	r5,r3
 800e248:	95000005 	stb	r20,0(r18)
 800e24c:	1021883a 	mov	r16,r2
 800e250:	1823883a 	mov	r17,r3
 800e254:	80161800 	call	8016180 <__ledf2>
 800e258:	bdc00044 	addi	r23,r23,1
 800e25c:	800d883a 	mov	r6,r16
 800e260:	880f883a 	mov	r7,r17
 800e264:	0009883a 	mov	r4,zero
 800e268:	014ffc34 	movhi	r5,16368
 800e26c:	103fcf0e 	bge	r2,zero,800e1ac <_dtoa_r+0x5dc>
 800e270:	d8c01317 	ldw	r3,76(sp)
 800e274:	d8c00515 	stw	r3,20(sp)
 800e278:	d9400917 	ldw	r5,36(sp)
 800e27c:	e009883a 	mov	r4,fp
 800e280:	80109100 	call	8010910 <_Bfree>
 800e284:	d9000517 	ldw	r4,20(sp)
 800e288:	d9802317 	ldw	r6,140(sp)
 800e28c:	d9c02517 	ldw	r7,148(sp)
 800e290:	b8000005 	stb	zero,0(r23)
 800e294:	20800044 	addi	r2,r4,1
 800e298:	30800015 	stw	r2,0(r6)
 800e29c:	3802aa26 	beq	r7,zero,800ed48 <_dtoa_r+0x1178>
 800e2a0:	3dc00015 	stw	r23,0(r7)
 800e2a4:	d8800717 	ldw	r2,28(sp)
 800e2a8:	003e7906 	br	800dc90 <_dtoa_r+0xc0>
 800e2ac:	00800434 	movhi	r2,16
 800e2b0:	10bfffc4 	addi	r2,r2,-1
 800e2b4:	88a2703a 	and	r17,r17,r2
 800e2b8:	883e851e 	bne	r17,zero,800dcd0 <_dtoa_r+0x100>
 800e2bc:	008200b4 	movhi	r2,2050
 800e2c0:	10aaad04 	addi	r2,r2,-21836
 800e2c4:	003e8406 	br	800dcd8 <_dtoa_r+0x108>
 800e2c8:	10c00204 	addi	r3,r2,8
 800e2cc:	003e8706 	br	800dcec <_dtoa_r+0x11c>
 800e2d0:	01400434 	movhi	r5,16
 800e2d4:	297fffc4 	addi	r5,r5,-1
 800e2d8:	994a703a 	and	r5,r19,r5
 800e2dc:	9009883a 	mov	r4,r18
 800e2e0:	843f0044 	addi	r16,r16,-1023
 800e2e4:	294ffc34 	orhi	r5,r5,16368
 800e2e8:	dd800217 	ldw	r22,8(sp)
 800e2ec:	d8001115 	stw	zero,68(sp)
 800e2f0:	003ea506 	br	800dd88 <_dtoa_r+0x1b8>
 800e2f4:	008200b4 	movhi	r2,2050
 800e2f8:	10aaa404 	addi	r2,r2,-21872
 800e2fc:	003e6406 	br	800dc90 <_dtoa_r+0xc0>
 800e300:	e0001115 	stw	zero,68(fp)
 800e304:	000b883a 	mov	r5,zero
 800e308:	e009883a 	mov	r4,fp
 800e30c:	80108680 	call	8010868 <_Balloc>
 800e310:	01bfffc4 	movi	r6,-1
 800e314:	01c00044 	movi	r7,1
 800e318:	d8800715 	stw	r2,28(sp)
 800e31c:	d9800c15 	stw	r6,48(sp)
 800e320:	e0801015 	stw	r2,64(fp)
 800e324:	d8000315 	stw	zero,12(sp)
 800e328:	d9c00b15 	stw	r7,44(sp)
 800e32c:	d9800615 	stw	r6,24(sp)
 800e330:	d8002215 	stw	zero,136(sp)
 800e334:	d8800117 	ldw	r2,4(sp)
 800e338:	10008916 	blt	r2,zero,800e560 <_dtoa_r+0x990>
 800e33c:	d9000517 	ldw	r4,20(sp)
 800e340:	00c00384 	movi	r3,14
 800e344:	19008616 	blt	r3,r4,800e560 <_dtoa_r+0x990>
 800e348:	200490fa 	slli	r2,r4,3
 800e34c:	00c200b4 	movhi	r3,2050
 800e350:	d9802217 	ldw	r6,136(sp)
 800e354:	18eacb04 	addi	r3,r3,-21716
 800e358:	1885883a 	add	r2,r3,r2
 800e35c:	14000017 	ldw	r16,0(r2)
 800e360:	14400117 	ldw	r17,4(r2)
 800e364:	30016316 	blt	r6,zero,800e8f4 <_dtoa_r+0xd24>
 800e368:	800d883a 	mov	r6,r16
 800e36c:	880f883a 	mov	r7,r17
 800e370:	9009883a 	mov	r4,r18
 800e374:	980b883a 	mov	r5,r19
 800e378:	801564c0 	call	801564c <__divdf3>
 800e37c:	180b883a 	mov	r5,r3
 800e380:	1009883a 	mov	r4,r2
 800e384:	80173dc0 	call	80173dc <__fixdfsi>
 800e388:	1009883a 	mov	r4,r2
 800e38c:	102b883a 	mov	r21,r2
 800e390:	801745c0 	call	801745c <__floatsidf>
 800e394:	800d883a 	mov	r6,r16
 800e398:	880f883a 	mov	r7,r17
 800e39c:	1009883a 	mov	r4,r2
 800e3a0:	180b883a 	mov	r5,r3
 800e3a4:	80162740 	call	8016274 <__muldf3>
 800e3a8:	100d883a 	mov	r6,r2
 800e3ac:	180f883a 	mov	r7,r3
 800e3b0:	9009883a 	mov	r4,r18
 800e3b4:	980b883a 	mov	r5,r19
 800e3b8:	8016ae00 	call	8016ae0 <__subdf3>
 800e3bc:	d9c00717 	ldw	r7,28(sp)
 800e3c0:	1009883a 	mov	r4,r2
 800e3c4:	a8800c04 	addi	r2,r21,48
 800e3c8:	38800005 	stb	r2,0(r7)
 800e3cc:	3dc00044 	addi	r23,r7,1
 800e3d0:	d9c00617 	ldw	r7,24(sp)
 800e3d4:	01800044 	movi	r6,1
 800e3d8:	180b883a 	mov	r5,r3
 800e3dc:	2005883a 	mov	r2,r4
 800e3e0:	39803826 	beq	r7,r6,800e4c4 <_dtoa_r+0x8f4>
 800e3e4:	000d883a 	mov	r6,zero
 800e3e8:	01d00934 	movhi	r7,16420
 800e3ec:	80162740 	call	8016274 <__muldf3>
 800e3f0:	000d883a 	mov	r6,zero
 800e3f4:	000f883a 	mov	r7,zero
 800e3f8:	1009883a 	mov	r4,r2
 800e3fc:	180b883a 	mov	r5,r3
 800e400:	1025883a 	mov	r18,r2
 800e404:	1827883a 	mov	r19,r3
 800e408:	801601c0 	call	801601c <__eqdf2>
 800e40c:	103f9a26 	beq	r2,zero,800e278 <_dtoa_r+0x6a8>
 800e410:	d9c00617 	ldw	r7,24(sp)
 800e414:	d8c00717 	ldw	r3,28(sp)
 800e418:	b829883a 	mov	r20,r23
 800e41c:	38bfffc4 	addi	r2,r7,-1
 800e420:	18ad883a 	add	r22,r3,r2
 800e424:	00000a06 	br	800e450 <_dtoa_r+0x880>
 800e428:	80162740 	call	8016274 <__muldf3>
 800e42c:	000d883a 	mov	r6,zero
 800e430:	000f883a 	mov	r7,zero
 800e434:	1009883a 	mov	r4,r2
 800e438:	180b883a 	mov	r5,r3
 800e43c:	1025883a 	mov	r18,r2
 800e440:	1827883a 	mov	r19,r3
 800e444:	b829883a 	mov	r20,r23
 800e448:	801601c0 	call	801601c <__eqdf2>
 800e44c:	103f8a26 	beq	r2,zero,800e278 <_dtoa_r+0x6a8>
 800e450:	800d883a 	mov	r6,r16
 800e454:	880f883a 	mov	r7,r17
 800e458:	9009883a 	mov	r4,r18
 800e45c:	980b883a 	mov	r5,r19
 800e460:	801564c0 	call	801564c <__divdf3>
 800e464:	180b883a 	mov	r5,r3
 800e468:	1009883a 	mov	r4,r2
 800e46c:	80173dc0 	call	80173dc <__fixdfsi>
 800e470:	1009883a 	mov	r4,r2
 800e474:	102b883a 	mov	r21,r2
 800e478:	801745c0 	call	801745c <__floatsidf>
 800e47c:	800d883a 	mov	r6,r16
 800e480:	880f883a 	mov	r7,r17
 800e484:	1009883a 	mov	r4,r2
 800e488:	180b883a 	mov	r5,r3
 800e48c:	80162740 	call	8016274 <__muldf3>
 800e490:	100d883a 	mov	r6,r2
 800e494:	180f883a 	mov	r7,r3
 800e498:	9009883a 	mov	r4,r18
 800e49c:	980b883a 	mov	r5,r19
 800e4a0:	8016ae00 	call	8016ae0 <__subdf3>
 800e4a4:	aa000c04 	addi	r8,r21,48
 800e4a8:	a2000005 	stb	r8,0(r20)
 800e4ac:	000d883a 	mov	r6,zero
 800e4b0:	01d00934 	movhi	r7,16420
 800e4b4:	1009883a 	mov	r4,r2
 800e4b8:	180b883a 	mov	r5,r3
 800e4bc:	a5c00044 	addi	r23,r20,1
 800e4c0:	b53fd91e 	bne	r22,r20,800e428 <_dtoa_r+0x858>
 800e4c4:	100d883a 	mov	r6,r2
 800e4c8:	180f883a 	mov	r7,r3
 800e4cc:	1009883a 	mov	r4,r2
 800e4d0:	180b883a 	mov	r5,r3
 800e4d4:	8014da00 	call	8014da0 <__adddf3>
 800e4d8:	100d883a 	mov	r6,r2
 800e4dc:	180f883a 	mov	r7,r3
 800e4e0:	8009883a 	mov	r4,r16
 800e4e4:	880b883a 	mov	r5,r17
 800e4e8:	1027883a 	mov	r19,r2
 800e4ec:	1825883a 	mov	r18,r3
 800e4f0:	80161800 	call	8016180 <__ledf2>
 800e4f4:	10000816 	blt	r2,zero,800e518 <_dtoa_r+0x948>
 800e4f8:	980d883a 	mov	r6,r19
 800e4fc:	900f883a 	mov	r7,r18
 800e500:	8009883a 	mov	r4,r16
 800e504:	880b883a 	mov	r5,r17
 800e508:	801601c0 	call	801601c <__eqdf2>
 800e50c:	103f5a1e 	bne	r2,zero,800e278 <_dtoa_r+0x6a8>
 800e510:	ad40004c 	andi	r21,r21,1
 800e514:	a83f5826 	beq	r21,zero,800e278 <_dtoa_r+0x6a8>
 800e518:	bd3fffc3 	ldbu	r20,-1(r23)
 800e51c:	b8bfffc4 	addi	r2,r23,-1
 800e520:	1007883a 	mov	r3,r2
 800e524:	01400e44 	movi	r5,57
 800e528:	d9800717 	ldw	r6,28(sp)
 800e52c:	00000506 	br	800e544 <_dtoa_r+0x974>
 800e530:	18ffffc4 	addi	r3,r3,-1
 800e534:	11824726 	beq	r2,r6,800ee54 <_dtoa_r+0x1284>
 800e538:	1d000003 	ldbu	r20,0(r3)
 800e53c:	102f883a 	mov	r23,r2
 800e540:	10bfffc4 	addi	r2,r2,-1
 800e544:	a1003fcc 	andi	r4,r20,255
 800e548:	2100201c 	xori	r4,r4,128
 800e54c:	213fe004 	addi	r4,r4,-128
 800e550:	217ff726 	beq	r4,r5,800e530 <_dtoa_r+0x960>
 800e554:	a2000044 	addi	r8,r20,1
 800e558:	12000005 	stb	r8,0(r2)
 800e55c:	003f4606 	br	800e278 <_dtoa_r+0x6a8>
 800e560:	d9000b17 	ldw	r4,44(sp)
 800e564:	2000c826 	beq	r4,zero,800e888 <_dtoa_r+0xcb8>
 800e568:	d9800317 	ldw	r6,12(sp)
 800e56c:	00c00044 	movi	r3,1
 800e570:	1980f90e 	bge	r3,r6,800e958 <_dtoa_r+0xd88>
 800e574:	d8800617 	ldw	r2,24(sp)
 800e578:	d8c00a17 	ldw	r3,40(sp)
 800e57c:	157fffc4 	addi	r21,r2,-1
 800e580:	1d41f316 	blt	r3,r21,800ed50 <_dtoa_r+0x1180>
 800e584:	1d6bc83a 	sub	r21,r3,r21
 800e588:	d9c00617 	ldw	r7,24(sp)
 800e58c:	3802aa16 	blt	r7,zero,800f038 <_dtoa_r+0x1468>
 800e590:	dd000817 	ldw	r20,32(sp)
 800e594:	d8800617 	ldw	r2,24(sp)
 800e598:	d8c00817 	ldw	r3,32(sp)
 800e59c:	01400044 	movi	r5,1
 800e5a0:	e009883a 	mov	r4,fp
 800e5a4:	1887883a 	add	r3,r3,r2
 800e5a8:	d8c00815 	stw	r3,32(sp)
 800e5ac:	b0ad883a 	add	r22,r22,r2
 800e5b0:	8010c9c0 	call	8010c9c <__i2b>
 800e5b4:	1023883a 	mov	r17,r2
 800e5b8:	a0000826 	beq	r20,zero,800e5dc <_dtoa_r+0xa0c>
 800e5bc:	0580070e 	bge	zero,r22,800e5dc <_dtoa_r+0xa0c>
 800e5c0:	a005883a 	mov	r2,r20
 800e5c4:	b500b916 	blt	r22,r20,800e8ac <_dtoa_r+0xcdc>
 800e5c8:	d9000817 	ldw	r4,32(sp)
 800e5cc:	a0a9c83a 	sub	r20,r20,r2
 800e5d0:	b0adc83a 	sub	r22,r22,r2
 800e5d4:	2089c83a 	sub	r4,r4,r2
 800e5d8:	d9000815 	stw	r4,32(sp)
 800e5dc:	d9800a17 	ldw	r6,40(sp)
 800e5e0:	0181810e 	bge	zero,r6,800ebe8 <_dtoa_r+0x1018>
 800e5e4:	d9c00b17 	ldw	r7,44(sp)
 800e5e8:	3800b326 	beq	r7,zero,800e8b8 <_dtoa_r+0xce8>
 800e5ec:	a800b226 	beq	r21,zero,800e8b8 <_dtoa_r+0xce8>
 800e5f0:	880b883a 	mov	r5,r17
 800e5f4:	a80d883a 	mov	r6,r21
 800e5f8:	e009883a 	mov	r4,fp
 800e5fc:	8010f640 	call	8010f64 <__pow5mult>
 800e600:	d9800917 	ldw	r6,36(sp)
 800e604:	100b883a 	mov	r5,r2
 800e608:	e009883a 	mov	r4,fp
 800e60c:	1023883a 	mov	r17,r2
 800e610:	8010cd80 	call	8010cd8 <__multiply>
 800e614:	1021883a 	mov	r16,r2
 800e618:	d8800a17 	ldw	r2,40(sp)
 800e61c:	d9400917 	ldw	r5,36(sp)
 800e620:	e009883a 	mov	r4,fp
 800e624:	1545c83a 	sub	r2,r2,r21
 800e628:	d8800a15 	stw	r2,40(sp)
 800e62c:	80109100 	call	8010910 <_Bfree>
 800e630:	d8c00a17 	ldw	r3,40(sp)
 800e634:	18009f1e 	bne	r3,zero,800e8b4 <_dtoa_r+0xce4>
 800e638:	05c00044 	movi	r23,1
 800e63c:	e009883a 	mov	r4,fp
 800e640:	b80b883a 	mov	r5,r23
 800e644:	8010c9c0 	call	8010c9c <__i2b>
 800e648:	d9000d17 	ldw	r4,52(sp)
 800e64c:	102b883a 	mov	r21,r2
 800e650:	2000ce26 	beq	r4,zero,800e98c <_dtoa_r+0xdbc>
 800e654:	200d883a 	mov	r6,r4
 800e658:	100b883a 	mov	r5,r2
 800e65c:	e009883a 	mov	r4,fp
 800e660:	8010f640 	call	8010f64 <__pow5mult>
 800e664:	d9800317 	ldw	r6,12(sp)
 800e668:	102b883a 	mov	r21,r2
 800e66c:	b981810e 	bge	r23,r6,800ec74 <_dtoa_r+0x10a4>
 800e670:	0027883a 	mov	r19,zero
 800e674:	a8800417 	ldw	r2,16(r21)
 800e678:	05c00804 	movi	r23,32
 800e67c:	10800104 	addi	r2,r2,4
 800e680:	1085883a 	add	r2,r2,r2
 800e684:	1085883a 	add	r2,r2,r2
 800e688:	a885883a 	add	r2,r21,r2
 800e68c:	11000017 	ldw	r4,0(r2)
 800e690:	8010b840 	call	8010b84 <__hi0bits>
 800e694:	b885c83a 	sub	r2,r23,r2
 800e698:	1585883a 	add	r2,r2,r22
 800e69c:	108007cc 	andi	r2,r2,31
 800e6a0:	1000b326 	beq	r2,zero,800e970 <_dtoa_r+0xda0>
 800e6a4:	00c00804 	movi	r3,32
 800e6a8:	1887c83a 	sub	r3,r3,r2
 800e6ac:	01000104 	movi	r4,4
 800e6b0:	20c2cd0e 	bge	r4,r3,800f1e8 <_dtoa_r+0x1618>
 800e6b4:	00c00704 	movi	r3,28
 800e6b8:	1885c83a 	sub	r2,r3,r2
 800e6bc:	d8c00817 	ldw	r3,32(sp)
 800e6c0:	a0a9883a 	add	r20,r20,r2
 800e6c4:	b0ad883a 	add	r22,r22,r2
 800e6c8:	1887883a 	add	r3,r3,r2
 800e6cc:	d8c00815 	stw	r3,32(sp)
 800e6d0:	d9800817 	ldw	r6,32(sp)
 800e6d4:	0180040e 	bge	zero,r6,800e6e8 <_dtoa_r+0xb18>
 800e6d8:	800b883a 	mov	r5,r16
 800e6dc:	e009883a 	mov	r4,fp
 800e6e0:	80110a40 	call	80110a4 <__lshift>
 800e6e4:	1021883a 	mov	r16,r2
 800e6e8:	0580050e 	bge	zero,r22,800e700 <_dtoa_r+0xb30>
 800e6ec:	a80b883a 	mov	r5,r21
 800e6f0:	b00d883a 	mov	r6,r22
 800e6f4:	e009883a 	mov	r4,fp
 800e6f8:	80110a40 	call	80110a4 <__lshift>
 800e6fc:	102b883a 	mov	r21,r2
 800e700:	d9c00e17 	ldw	r7,56(sp)
 800e704:	3801211e 	bne	r7,zero,800eb8c <_dtoa_r+0xfbc>
 800e708:	d9800617 	ldw	r6,24(sp)
 800e70c:	0181380e 	bge	zero,r6,800ebf0 <_dtoa_r+0x1020>
 800e710:	d8c00b17 	ldw	r3,44(sp)
 800e714:	1800ab1e 	bne	r3,zero,800e9c4 <_dtoa_r+0xdf4>
 800e718:	dc800717 	ldw	r18,28(sp)
 800e71c:	dcc00617 	ldw	r19,24(sp)
 800e720:	9029883a 	mov	r20,r18
 800e724:	00000206 	br	800e730 <_dtoa_r+0xb60>
 800e728:	80109380 	call	8010938 <__multadd>
 800e72c:	1021883a 	mov	r16,r2
 800e730:	a80b883a 	mov	r5,r21
 800e734:	8009883a 	mov	r4,r16
 800e738:	800d9a80 	call	800d9a8 <quorem>
 800e73c:	10800c04 	addi	r2,r2,48
 800e740:	90800005 	stb	r2,0(r18)
 800e744:	94800044 	addi	r18,r18,1
 800e748:	9507c83a 	sub	r3,r18,r20
 800e74c:	000f883a 	mov	r7,zero
 800e750:	01800284 	movi	r6,10
 800e754:	800b883a 	mov	r5,r16
 800e758:	e009883a 	mov	r4,fp
 800e75c:	1cfff216 	blt	r3,r19,800e728 <_dtoa_r+0xb58>
 800e760:	1011883a 	mov	r8,r2
 800e764:	d8800617 	ldw	r2,24(sp)
 800e768:	0082370e 	bge	zero,r2,800f048 <_dtoa_r+0x1478>
 800e76c:	d9000717 	ldw	r4,28(sp)
 800e770:	0025883a 	mov	r18,zero
 800e774:	20af883a 	add	r23,r4,r2
 800e778:	01800044 	movi	r6,1
 800e77c:	800b883a 	mov	r5,r16
 800e780:	e009883a 	mov	r4,fp
 800e784:	da001715 	stw	r8,92(sp)
 800e788:	80110a40 	call	80110a4 <__lshift>
 800e78c:	a80b883a 	mov	r5,r21
 800e790:	1009883a 	mov	r4,r2
 800e794:	d8800915 	stw	r2,36(sp)
 800e798:	80111ec0 	call	80111ec <__mcmp>
 800e79c:	da001717 	ldw	r8,92(sp)
 800e7a0:	0081800e 	bge	zero,r2,800eda4 <_dtoa_r+0x11d4>
 800e7a4:	b93fffc3 	ldbu	r4,-1(r23)
 800e7a8:	b8bfffc4 	addi	r2,r23,-1
 800e7ac:	1007883a 	mov	r3,r2
 800e7b0:	01800e44 	movi	r6,57
 800e7b4:	d9c00717 	ldw	r7,28(sp)
 800e7b8:	00000506 	br	800e7d0 <_dtoa_r+0xc00>
 800e7bc:	18ffffc4 	addi	r3,r3,-1
 800e7c0:	11c12326 	beq	r2,r7,800ec50 <_dtoa_r+0x1080>
 800e7c4:	19000003 	ldbu	r4,0(r3)
 800e7c8:	102f883a 	mov	r23,r2
 800e7cc:	10bfffc4 	addi	r2,r2,-1
 800e7d0:	21403fcc 	andi	r5,r4,255
 800e7d4:	2940201c 	xori	r5,r5,128
 800e7d8:	297fe004 	addi	r5,r5,-128
 800e7dc:	29bff726 	beq	r5,r6,800e7bc <_dtoa_r+0xbec>
 800e7e0:	21000044 	addi	r4,r4,1
 800e7e4:	11000005 	stb	r4,0(r2)
 800e7e8:	a80b883a 	mov	r5,r21
 800e7ec:	e009883a 	mov	r4,fp
 800e7f0:	80109100 	call	8010910 <_Bfree>
 800e7f4:	883ea026 	beq	r17,zero,800e278 <_dtoa_r+0x6a8>
 800e7f8:	90000426 	beq	r18,zero,800e80c <_dtoa_r+0xc3c>
 800e7fc:	94400326 	beq	r18,r17,800e80c <_dtoa_r+0xc3c>
 800e800:	900b883a 	mov	r5,r18
 800e804:	e009883a 	mov	r4,fp
 800e808:	80109100 	call	8010910 <_Bfree>
 800e80c:	880b883a 	mov	r5,r17
 800e810:	e009883a 	mov	r4,fp
 800e814:	80109100 	call	8010910 <_Bfree>
 800e818:	003e9706 	br	800e278 <_dtoa_r+0x6a8>
 800e81c:	01800044 	movi	r6,1
 800e820:	d9800e15 	stw	r6,56(sp)
 800e824:	003d9606 	br	800de80 <_dtoa_r+0x2b0>
 800e828:	d8800817 	ldw	r2,32(sp)
 800e82c:	d8c00517 	ldw	r3,20(sp)
 800e830:	d8000d15 	stw	zero,52(sp)
 800e834:	10c5c83a 	sub	r2,r2,r3
 800e838:	00c9c83a 	sub	r4,zero,r3
 800e83c:	d8800815 	stw	r2,32(sp)
 800e840:	d9000a15 	stw	r4,40(sp)
 800e844:	003d9706 	br	800dea4 <_dtoa_r+0x2d4>
 800e848:	05adc83a 	sub	r22,zero,r22
 800e84c:	dd800815 	stw	r22,32(sp)
 800e850:	002d883a 	mov	r22,zero
 800e854:	003d8e06 	br	800de90 <_dtoa_r+0x2c0>
 800e858:	d9000517 	ldw	r4,20(sp)
 800e85c:	801745c0 	call	801745c <__floatsidf>
 800e860:	100d883a 	mov	r6,r2
 800e864:	180f883a 	mov	r7,r3
 800e868:	a009883a 	mov	r4,r20
 800e86c:	880b883a 	mov	r5,r17
 800e870:	801601c0 	call	801601c <__eqdf2>
 800e874:	103d7126 	beq	r2,zero,800de3c <_dtoa_r+0x26c>
 800e878:	d9c00517 	ldw	r7,20(sp)
 800e87c:	39ffffc4 	addi	r7,r7,-1
 800e880:	d9c00515 	stw	r7,20(sp)
 800e884:	003d6d06 	br	800de3c <_dtoa_r+0x26c>
 800e888:	dd400a17 	ldw	r21,40(sp)
 800e88c:	dd000817 	ldw	r20,32(sp)
 800e890:	0023883a 	mov	r17,zero
 800e894:	003f4806 	br	800e5b8 <_dtoa_r+0x9e8>
 800e898:	10e3c83a 	sub	r17,r2,r3
 800e89c:	9448983a 	sll	r4,r18,r17
 800e8a0:	003d3206 	br	800dd6c <_dtoa_r+0x19c>
 800e8a4:	d8000e15 	stw	zero,56(sp)
 800e8a8:	003d7506 	br	800de80 <_dtoa_r+0x2b0>
 800e8ac:	b005883a 	mov	r2,r22
 800e8b0:	003f4506 	br	800e5c8 <_dtoa_r+0x9f8>
 800e8b4:	dc000915 	stw	r16,36(sp)
 800e8b8:	d9800a17 	ldw	r6,40(sp)
 800e8bc:	d9400917 	ldw	r5,36(sp)
 800e8c0:	e009883a 	mov	r4,fp
 800e8c4:	8010f640 	call	8010f64 <__pow5mult>
 800e8c8:	1021883a 	mov	r16,r2
 800e8cc:	003f5a06 	br	800e638 <_dtoa_r+0xa68>
 800e8d0:	01c00044 	movi	r7,1
 800e8d4:	d9c00b15 	stw	r7,44(sp)
 800e8d8:	d8802217 	ldw	r2,136(sp)
 800e8dc:	0081280e 	bge	zero,r2,800ed80 <_dtoa_r+0x11b0>
 800e8e0:	100d883a 	mov	r6,r2
 800e8e4:	1021883a 	mov	r16,r2
 800e8e8:	d8800c15 	stw	r2,48(sp)
 800e8ec:	d8800615 	stw	r2,24(sp)
 800e8f0:	003d8806 	br	800df14 <_dtoa_r+0x344>
 800e8f4:	d8800617 	ldw	r2,24(sp)
 800e8f8:	00be9b16 	blt	zero,r2,800e368 <_dtoa_r+0x798>
 800e8fc:	10010f1e 	bne	r2,zero,800ed3c <_dtoa_r+0x116c>
 800e900:	880b883a 	mov	r5,r17
 800e904:	000d883a 	mov	r6,zero
 800e908:	01d00534 	movhi	r7,16404
 800e90c:	8009883a 	mov	r4,r16
 800e910:	80162740 	call	8016274 <__muldf3>
 800e914:	900d883a 	mov	r6,r18
 800e918:	980f883a 	mov	r7,r19
 800e91c:	1009883a 	mov	r4,r2
 800e920:	180b883a 	mov	r5,r3
 800e924:	80160a40 	call	80160a4 <__gedf2>
 800e928:	002b883a 	mov	r21,zero
 800e92c:	0023883a 	mov	r17,zero
 800e930:	1000bf16 	blt	r2,zero,800ec30 <_dtoa_r+0x1060>
 800e934:	d9802217 	ldw	r6,136(sp)
 800e938:	ddc00717 	ldw	r23,28(sp)
 800e93c:	018c303a 	nor	r6,zero,r6
 800e940:	d9800515 	stw	r6,20(sp)
 800e944:	a80b883a 	mov	r5,r21
 800e948:	e009883a 	mov	r4,fp
 800e94c:	80109100 	call	8010910 <_Bfree>
 800e950:	883e4926 	beq	r17,zero,800e278 <_dtoa_r+0x6a8>
 800e954:	003fad06 	br	800e80c <_dtoa_r+0xc3c>
 800e958:	d9c01117 	ldw	r7,68(sp)
 800e95c:	3801bc26 	beq	r7,zero,800f050 <_dtoa_r+0x1480>
 800e960:	10810cc4 	addi	r2,r2,1075
 800e964:	dd400a17 	ldw	r21,40(sp)
 800e968:	dd000817 	ldw	r20,32(sp)
 800e96c:	003f0a06 	br	800e598 <_dtoa_r+0x9c8>
 800e970:	00800704 	movi	r2,28
 800e974:	d9000817 	ldw	r4,32(sp)
 800e978:	a0a9883a 	add	r20,r20,r2
 800e97c:	b0ad883a 	add	r22,r22,r2
 800e980:	2089883a 	add	r4,r4,r2
 800e984:	d9000815 	stw	r4,32(sp)
 800e988:	003f5106 	br	800e6d0 <_dtoa_r+0xb00>
 800e98c:	d8c00317 	ldw	r3,12(sp)
 800e990:	b8c1fc0e 	bge	r23,r3,800f184 <_dtoa_r+0x15b4>
 800e994:	0027883a 	mov	r19,zero
 800e998:	b805883a 	mov	r2,r23
 800e99c:	003f3e06 	br	800e698 <_dtoa_r+0xac8>
 800e9a0:	880b883a 	mov	r5,r17
 800e9a4:	e009883a 	mov	r4,fp
 800e9a8:	000f883a 	mov	r7,zero
 800e9ac:	01800284 	movi	r6,10
 800e9b0:	80109380 	call	8010938 <__multadd>
 800e9b4:	d9000c17 	ldw	r4,48(sp)
 800e9b8:	1023883a 	mov	r17,r2
 800e9bc:	0102040e 	bge	zero,r4,800f1d0 <_dtoa_r+0x1600>
 800e9c0:	d9000615 	stw	r4,24(sp)
 800e9c4:	0500050e 	bge	zero,r20,800e9dc <_dtoa_r+0xe0c>
 800e9c8:	880b883a 	mov	r5,r17
 800e9cc:	a00d883a 	mov	r6,r20
 800e9d0:	e009883a 	mov	r4,fp
 800e9d4:	80110a40 	call	80110a4 <__lshift>
 800e9d8:	1023883a 	mov	r17,r2
 800e9dc:	9801241e 	bne	r19,zero,800ee70 <_dtoa_r+0x12a0>
 800e9e0:	8829883a 	mov	r20,r17
 800e9e4:	d9000617 	ldw	r4,24(sp)
 800e9e8:	dcc00717 	ldw	r19,28(sp)
 800e9ec:	9480004c 	andi	r18,r18,1
 800e9f0:	20bfffc4 	addi	r2,r4,-1
 800e9f4:	9885883a 	add	r2,r19,r2
 800e9f8:	d8800415 	stw	r2,16(sp)
 800e9fc:	dc800615 	stw	r18,24(sp)
 800ea00:	a80b883a 	mov	r5,r21
 800ea04:	8009883a 	mov	r4,r16
 800ea08:	800d9a80 	call	800d9a8 <quorem>
 800ea0c:	880b883a 	mov	r5,r17
 800ea10:	8009883a 	mov	r4,r16
 800ea14:	102f883a 	mov	r23,r2
 800ea18:	80111ec0 	call	80111ec <__mcmp>
 800ea1c:	a80b883a 	mov	r5,r21
 800ea20:	a00d883a 	mov	r6,r20
 800ea24:	e009883a 	mov	r4,fp
 800ea28:	102d883a 	mov	r22,r2
 800ea2c:	801124c0 	call	801124c <__mdiff>
 800ea30:	1007883a 	mov	r3,r2
 800ea34:	10800317 	ldw	r2,12(r2)
 800ea38:	bc800c04 	addi	r18,r23,48
 800ea3c:	180b883a 	mov	r5,r3
 800ea40:	10004e1e 	bne	r2,zero,800eb7c <_dtoa_r+0xfac>
 800ea44:	8009883a 	mov	r4,r16
 800ea48:	d8c01615 	stw	r3,88(sp)
 800ea4c:	80111ec0 	call	80111ec <__mcmp>
 800ea50:	d8c01617 	ldw	r3,88(sp)
 800ea54:	e009883a 	mov	r4,fp
 800ea58:	d8801615 	stw	r2,88(sp)
 800ea5c:	180b883a 	mov	r5,r3
 800ea60:	80109100 	call	8010910 <_Bfree>
 800ea64:	d8801617 	ldw	r2,88(sp)
 800ea68:	1000041e 	bne	r2,zero,800ea7c <_dtoa_r+0xeac>
 800ea6c:	d9800317 	ldw	r6,12(sp)
 800ea70:	3000021e 	bne	r6,zero,800ea7c <_dtoa_r+0xeac>
 800ea74:	d8c00617 	ldw	r3,24(sp)
 800ea78:	18003726 	beq	r3,zero,800eb58 <_dtoa_r+0xf88>
 800ea7c:	b0002016 	blt	r22,zero,800eb00 <_dtoa_r+0xf30>
 800ea80:	b000041e 	bne	r22,zero,800ea94 <_dtoa_r+0xec4>
 800ea84:	d9000317 	ldw	r4,12(sp)
 800ea88:	2000021e 	bne	r4,zero,800ea94 <_dtoa_r+0xec4>
 800ea8c:	d8c00617 	ldw	r3,24(sp)
 800ea90:	18001b26 	beq	r3,zero,800eb00 <_dtoa_r+0xf30>
 800ea94:	00810716 	blt	zero,r2,800eeb4 <_dtoa_r+0x12e4>
 800ea98:	d8c00417 	ldw	r3,16(sp)
 800ea9c:	9d800044 	addi	r22,r19,1
 800eaa0:	9c800005 	stb	r18,0(r19)
 800eaa4:	b02f883a 	mov	r23,r22
 800eaa8:	98c10626 	beq	r19,r3,800eec4 <_dtoa_r+0x12f4>
 800eaac:	800b883a 	mov	r5,r16
 800eab0:	000f883a 	mov	r7,zero
 800eab4:	01800284 	movi	r6,10
 800eab8:	e009883a 	mov	r4,fp
 800eabc:	80109380 	call	8010938 <__multadd>
 800eac0:	1021883a 	mov	r16,r2
 800eac4:	000f883a 	mov	r7,zero
 800eac8:	01800284 	movi	r6,10
 800eacc:	880b883a 	mov	r5,r17
 800ead0:	e009883a 	mov	r4,fp
 800ead4:	8d002526 	beq	r17,r20,800eb6c <_dtoa_r+0xf9c>
 800ead8:	80109380 	call	8010938 <__multadd>
 800eadc:	a00b883a 	mov	r5,r20
 800eae0:	000f883a 	mov	r7,zero
 800eae4:	01800284 	movi	r6,10
 800eae8:	e009883a 	mov	r4,fp
 800eaec:	1023883a 	mov	r17,r2
 800eaf0:	80109380 	call	8010938 <__multadd>
 800eaf4:	1029883a 	mov	r20,r2
 800eaf8:	b027883a 	mov	r19,r22
 800eafc:	003fc006 	br	800ea00 <_dtoa_r+0xe30>
 800eb00:	9011883a 	mov	r8,r18
 800eb04:	00800e0e 	bge	zero,r2,800eb40 <_dtoa_r+0xf70>
 800eb08:	800b883a 	mov	r5,r16
 800eb0c:	01800044 	movi	r6,1
 800eb10:	e009883a 	mov	r4,fp
 800eb14:	da001715 	stw	r8,92(sp)
 800eb18:	80110a40 	call	80110a4 <__lshift>
 800eb1c:	a80b883a 	mov	r5,r21
 800eb20:	1009883a 	mov	r4,r2
 800eb24:	1021883a 	mov	r16,r2
 800eb28:	80111ec0 	call	80111ec <__mcmp>
 800eb2c:	da001717 	ldw	r8,92(sp)
 800eb30:	0081960e 	bge	zero,r2,800f18c <_dtoa_r+0x15bc>
 800eb34:	00800e44 	movi	r2,57
 800eb38:	40817026 	beq	r8,r2,800f0fc <_dtoa_r+0x152c>
 800eb3c:	ba000c44 	addi	r8,r23,49
 800eb40:	8825883a 	mov	r18,r17
 800eb44:	9dc00044 	addi	r23,r19,1
 800eb48:	9a000005 	stb	r8,0(r19)
 800eb4c:	a023883a 	mov	r17,r20
 800eb50:	dc000915 	stw	r16,36(sp)
 800eb54:	003f2406 	br	800e7e8 <_dtoa_r+0xc18>
 800eb58:	00800e44 	movi	r2,57
 800eb5c:	9011883a 	mov	r8,r18
 800eb60:	90816626 	beq	r18,r2,800f0fc <_dtoa_r+0x152c>
 800eb64:	05bff516 	blt	zero,r22,800eb3c <_dtoa_r+0xf6c>
 800eb68:	003ff506 	br	800eb40 <_dtoa_r+0xf70>
 800eb6c:	80109380 	call	8010938 <__multadd>
 800eb70:	1023883a 	mov	r17,r2
 800eb74:	1029883a 	mov	r20,r2
 800eb78:	003fdf06 	br	800eaf8 <_dtoa_r+0xf28>
 800eb7c:	e009883a 	mov	r4,fp
 800eb80:	80109100 	call	8010910 <_Bfree>
 800eb84:	00800044 	movi	r2,1
 800eb88:	003fbc06 	br	800ea7c <_dtoa_r+0xeac>
 800eb8c:	a80b883a 	mov	r5,r21
 800eb90:	8009883a 	mov	r4,r16
 800eb94:	80111ec0 	call	80111ec <__mcmp>
 800eb98:	103edb0e 	bge	r2,zero,800e708 <_dtoa_r+0xb38>
 800eb9c:	800b883a 	mov	r5,r16
 800eba0:	000f883a 	mov	r7,zero
 800eba4:	01800284 	movi	r6,10
 800eba8:	e009883a 	mov	r4,fp
 800ebac:	80109380 	call	8010938 <__multadd>
 800ebb0:	1021883a 	mov	r16,r2
 800ebb4:	d8800517 	ldw	r2,20(sp)
 800ebb8:	d8c00b17 	ldw	r3,44(sp)
 800ebbc:	10bfffc4 	addi	r2,r2,-1
 800ebc0:	d8800515 	stw	r2,20(sp)
 800ebc4:	183f761e 	bne	r3,zero,800e9a0 <_dtoa_r+0xdd0>
 800ebc8:	d9000c17 	ldw	r4,48(sp)
 800ebcc:	0101730e 	bge	zero,r4,800f19c <_dtoa_r+0x15cc>
 800ebd0:	d9000615 	stw	r4,24(sp)
 800ebd4:	003ed006 	br	800e718 <_dtoa_r+0xb48>
 800ebd8:	00800084 	movi	r2,2
 800ebdc:	3081861e 	bne	r6,r2,800f1f8 <_dtoa_r+0x1628>
 800ebe0:	d8000b15 	stw	zero,44(sp)
 800ebe4:	003f3c06 	br	800e8d8 <_dtoa_r+0xd08>
 800ebe8:	dc000917 	ldw	r16,36(sp)
 800ebec:	003e9206 	br	800e638 <_dtoa_r+0xa68>
 800ebf0:	d9c00317 	ldw	r7,12(sp)
 800ebf4:	00800084 	movi	r2,2
 800ebf8:	11fec50e 	bge	r2,r7,800e710 <_dtoa_r+0xb40>
 800ebfc:	d9000617 	ldw	r4,24(sp)
 800ec00:	20013c1e 	bne	r4,zero,800f0f4 <_dtoa_r+0x1524>
 800ec04:	a80b883a 	mov	r5,r21
 800ec08:	000f883a 	mov	r7,zero
 800ec0c:	01800144 	movi	r6,5
 800ec10:	e009883a 	mov	r4,fp
 800ec14:	80109380 	call	8010938 <__multadd>
 800ec18:	100b883a 	mov	r5,r2
 800ec1c:	8009883a 	mov	r4,r16
 800ec20:	102b883a 	mov	r21,r2
 800ec24:	80111ec0 	call	80111ec <__mcmp>
 800ec28:	dc000915 	stw	r16,36(sp)
 800ec2c:	00bf410e 	bge	zero,r2,800e934 <_dtoa_r+0xd64>
 800ec30:	d9c00717 	ldw	r7,28(sp)
 800ec34:	00800c44 	movi	r2,49
 800ec38:	38800005 	stb	r2,0(r7)
 800ec3c:	d8800517 	ldw	r2,20(sp)
 800ec40:	3dc00044 	addi	r23,r7,1
 800ec44:	10800044 	addi	r2,r2,1
 800ec48:	d8800515 	stw	r2,20(sp)
 800ec4c:	003f3d06 	br	800e944 <_dtoa_r+0xd74>
 800ec50:	d9800517 	ldw	r6,20(sp)
 800ec54:	d9c00717 	ldw	r7,28(sp)
 800ec58:	00800c44 	movi	r2,49
 800ec5c:	31800044 	addi	r6,r6,1
 800ec60:	d9800515 	stw	r6,20(sp)
 800ec64:	38800005 	stb	r2,0(r7)
 800ec68:	003edf06 	br	800e7e8 <_dtoa_r+0xc18>
 800ec6c:	d8000b15 	stw	zero,44(sp)
 800ec70:	003c9f06 	br	800def0 <_dtoa_r+0x320>
 800ec74:	903e7e1e 	bne	r18,zero,800e670 <_dtoa_r+0xaa0>
 800ec78:	00800434 	movhi	r2,16
 800ec7c:	10bfffc4 	addi	r2,r2,-1
 800ec80:	9884703a 	and	r2,r19,r2
 800ec84:	1000ea1e 	bne	r2,zero,800f030 <_dtoa_r+0x1460>
 800ec88:	9cdffc2c 	andhi	r19,r19,32752
 800ec8c:	9800e826 	beq	r19,zero,800f030 <_dtoa_r+0x1460>
 800ec90:	d9c00817 	ldw	r7,32(sp)
 800ec94:	b5800044 	addi	r22,r22,1
 800ec98:	04c00044 	movi	r19,1
 800ec9c:	39c00044 	addi	r7,r7,1
 800eca0:	d9c00815 	stw	r7,32(sp)
 800eca4:	d8800d17 	ldw	r2,52(sp)
 800eca8:	103e721e 	bne	r2,zero,800e674 <_dtoa_r+0xaa4>
 800ecac:	00800044 	movi	r2,1
 800ecb0:	003e7906 	br	800e698 <_dtoa_r+0xac8>
 800ecb4:	8009883a 	mov	r4,r16
 800ecb8:	801745c0 	call	801745c <__floatsidf>
 800ecbc:	d9800f17 	ldw	r6,60(sp)
 800ecc0:	d9c01017 	ldw	r7,64(sp)
 800ecc4:	1009883a 	mov	r4,r2
 800ecc8:	180b883a 	mov	r5,r3
 800eccc:	80162740 	call	8016274 <__muldf3>
 800ecd0:	000d883a 	mov	r6,zero
 800ecd4:	01d00734 	movhi	r7,16412
 800ecd8:	1009883a 	mov	r4,r2
 800ecdc:	180b883a 	mov	r5,r3
 800ece0:	8014da00 	call	8014da0 <__adddf3>
 800ece4:	047f3034 	movhi	r17,64704
 800ece8:	1021883a 	mov	r16,r2
 800ecec:	1c63883a 	add	r17,r3,r17
 800ecf0:	d9000f17 	ldw	r4,60(sp)
 800ecf4:	d9401017 	ldw	r5,64(sp)
 800ecf8:	000d883a 	mov	r6,zero
 800ecfc:	01d00534 	movhi	r7,16404
 800ed00:	8016ae00 	call	8016ae0 <__subdf3>
 800ed04:	800d883a 	mov	r6,r16
 800ed08:	880f883a 	mov	r7,r17
 800ed0c:	1009883a 	mov	r4,r2
 800ed10:	180b883a 	mov	r5,r3
 800ed14:	102b883a 	mov	r21,r2
 800ed18:	1829883a 	mov	r20,r3
 800ed1c:	80160a40 	call	80160a4 <__gedf2>
 800ed20:	00806c16 	blt	zero,r2,800eed4 <_dtoa_r+0x1304>
 800ed24:	89e0003c 	xorhi	r7,r17,32768
 800ed28:	800d883a 	mov	r6,r16
 800ed2c:	a809883a 	mov	r4,r21
 800ed30:	a00b883a 	mov	r5,r20
 800ed34:	80161800 	call	8016180 <__ledf2>
 800ed38:	103d7e0e 	bge	r2,zero,800e334 <_dtoa_r+0x764>
 800ed3c:	002b883a 	mov	r21,zero
 800ed40:	0023883a 	mov	r17,zero
 800ed44:	003efb06 	br	800e934 <_dtoa_r+0xd64>
 800ed48:	d8800717 	ldw	r2,28(sp)
 800ed4c:	003bd006 	br	800dc90 <_dtoa_r+0xc0>
 800ed50:	d9000a17 	ldw	r4,40(sp)
 800ed54:	d9800d17 	ldw	r6,52(sp)
 800ed58:	dd400a15 	stw	r21,40(sp)
 800ed5c:	a905c83a 	sub	r2,r21,r4
 800ed60:	308d883a 	add	r6,r6,r2
 800ed64:	d9800d15 	stw	r6,52(sp)
 800ed68:	002b883a 	mov	r21,zero
 800ed6c:	003e0606 	br	800e588 <_dtoa_r+0x9b8>
 800ed70:	9023883a 	mov	r17,r18
 800ed74:	9829883a 	mov	r20,r19
 800ed78:	04000084 	movi	r16,2
 800ed7c:	003c9206 	br	800dfc8 <_dtoa_r+0x3f8>
 800ed80:	04000044 	movi	r16,1
 800ed84:	dc000c15 	stw	r16,48(sp)
 800ed88:	dc000615 	stw	r16,24(sp)
 800ed8c:	dc002215 	stw	r16,136(sp)
 800ed90:	e0001115 	stw	zero,68(fp)
 800ed94:	000b883a 	mov	r5,zero
 800ed98:	003c6906 	br	800df40 <_dtoa_r+0x370>
 800ed9c:	3021883a 	mov	r16,r6
 800eda0:	003ffb06 	br	800ed90 <_dtoa_r+0x11c0>
 800eda4:	1000021e 	bne	r2,zero,800edb0 <_dtoa_r+0x11e0>
 800eda8:	4200004c 	andi	r8,r8,1
 800edac:	403e7d1e 	bne	r8,zero,800e7a4 <_dtoa_r+0xbd4>
 800edb0:	01000c04 	movi	r4,48
 800edb4:	00000106 	br	800edbc <_dtoa_r+0x11ec>
 800edb8:	102f883a 	mov	r23,r2
 800edbc:	b8bfffc4 	addi	r2,r23,-1
 800edc0:	10c00007 	ldb	r3,0(r2)
 800edc4:	193ffc26 	beq	r3,r4,800edb8 <_dtoa_r+0x11e8>
 800edc8:	003e8706 	br	800e7e8 <_dtoa_r+0xc18>
 800edcc:	d8800517 	ldw	r2,20(sp)
 800edd0:	00a3c83a 	sub	r17,zero,r2
 800edd4:	8800a426 	beq	r17,zero,800f068 <_dtoa_r+0x1498>
 800edd8:	888003cc 	andi	r2,r17,15
 800eddc:	100490fa 	slli	r2,r2,3
 800ede0:	00c200b4 	movhi	r3,2050
 800ede4:	18eacb04 	addi	r3,r3,-21716
 800ede8:	1885883a 	add	r2,r3,r2
 800edec:	11800017 	ldw	r6,0(r2)
 800edf0:	11c00117 	ldw	r7,4(r2)
 800edf4:	9009883a 	mov	r4,r18
 800edf8:	980b883a 	mov	r5,r19
 800edfc:	8823d13a 	srai	r17,r17,4
 800ee00:	80162740 	call	8016274 <__muldf3>
 800ee04:	d8800f15 	stw	r2,60(sp)
 800ee08:	d8c01015 	stw	r3,64(sp)
 800ee0c:	8800e826 	beq	r17,zero,800f1b0 <_dtoa_r+0x15e0>
 800ee10:	050200b4 	movhi	r20,2050
 800ee14:	a52ac104 	addi	r20,r20,-21756
 800ee18:	04000084 	movi	r16,2
 800ee1c:	8980004c 	andi	r6,r17,1
 800ee20:	1009883a 	mov	r4,r2
 800ee24:	8823d07a 	srai	r17,r17,1
 800ee28:	180b883a 	mov	r5,r3
 800ee2c:	30000426 	beq	r6,zero,800ee40 <_dtoa_r+0x1270>
 800ee30:	a1800017 	ldw	r6,0(r20)
 800ee34:	a1c00117 	ldw	r7,4(r20)
 800ee38:	84000044 	addi	r16,r16,1
 800ee3c:	80162740 	call	8016274 <__muldf3>
 800ee40:	a5000204 	addi	r20,r20,8
 800ee44:	883ff51e 	bne	r17,zero,800ee1c <_dtoa_r+0x124c>
 800ee48:	d8800f15 	stw	r2,60(sp)
 800ee4c:	d8c01015 	stw	r3,64(sp)
 800ee50:	003c7606 	br	800e02c <_dtoa_r+0x45c>
 800ee54:	00c00c04 	movi	r3,48
 800ee58:	10c00005 	stb	r3,0(r2)
 800ee5c:	d8c00517 	ldw	r3,20(sp)
 800ee60:	bd3fffc3 	ldbu	r20,-1(r23)
 800ee64:	18c00044 	addi	r3,r3,1
 800ee68:	d8c00515 	stw	r3,20(sp)
 800ee6c:	003db906 	br	800e554 <_dtoa_r+0x984>
 800ee70:	89400117 	ldw	r5,4(r17)
 800ee74:	e009883a 	mov	r4,fp
 800ee78:	80108680 	call	8010868 <_Balloc>
 800ee7c:	89800417 	ldw	r6,16(r17)
 800ee80:	89400304 	addi	r5,r17,12
 800ee84:	11000304 	addi	r4,r2,12
 800ee88:	31800084 	addi	r6,r6,2
 800ee8c:	318d883a 	add	r6,r6,r6
 800ee90:	318d883a 	add	r6,r6,r6
 800ee94:	1027883a 	mov	r19,r2
 800ee98:	800ab080 	call	800ab08 <memcpy>
 800ee9c:	01800044 	movi	r6,1
 800eea0:	980b883a 	mov	r5,r19
 800eea4:	e009883a 	mov	r4,fp
 800eea8:	80110a40 	call	80110a4 <__lshift>
 800eeac:	1029883a 	mov	r20,r2
 800eeb0:	003ecc06 	br	800e9e4 <_dtoa_r+0xe14>
 800eeb4:	00800e44 	movi	r2,57
 800eeb8:	90809026 	beq	r18,r2,800f0fc <_dtoa_r+0x152c>
 800eebc:	92000044 	addi	r8,r18,1
 800eec0:	003f1f06 	br	800eb40 <_dtoa_r+0xf70>
 800eec4:	9011883a 	mov	r8,r18
 800eec8:	8825883a 	mov	r18,r17
 800eecc:	a023883a 	mov	r17,r20
 800eed0:	003e2906 	br	800e778 <_dtoa_r+0xba8>
 800eed4:	002b883a 	mov	r21,zero
 800eed8:	0023883a 	mov	r17,zero
 800eedc:	003f5406 	br	800ec30 <_dtoa_r+0x1060>
 800eee0:	61bfffc4 	addi	r6,r12,-1
 800eee4:	300490fa 	slli	r2,r6,3
 800eee8:	00c200b4 	movhi	r3,2050
 800eeec:	18eacb04 	addi	r3,r3,-21716
 800eef0:	1885883a 	add	r2,r3,r2
 800eef4:	11000017 	ldw	r4,0(r2)
 800eef8:	11400117 	ldw	r5,4(r2)
 800eefc:	d8800717 	ldw	r2,28(sp)
 800ef00:	880f883a 	mov	r7,r17
 800ef04:	d9801215 	stw	r6,72(sp)
 800ef08:	800d883a 	mov	r6,r16
 800ef0c:	db001615 	stw	r12,88(sp)
 800ef10:	15c00044 	addi	r23,r2,1
 800ef14:	80162740 	call	8016274 <__muldf3>
 800ef18:	d9401017 	ldw	r5,64(sp)
 800ef1c:	d9000f17 	ldw	r4,60(sp)
 800ef20:	d8c01515 	stw	r3,84(sp)
 800ef24:	d8801415 	stw	r2,80(sp)
 800ef28:	80173dc0 	call	80173dc <__fixdfsi>
 800ef2c:	1009883a 	mov	r4,r2
 800ef30:	1021883a 	mov	r16,r2
 800ef34:	801745c0 	call	801745c <__floatsidf>
 800ef38:	d9000f17 	ldw	r4,60(sp)
 800ef3c:	d9401017 	ldw	r5,64(sp)
 800ef40:	100d883a 	mov	r6,r2
 800ef44:	180f883a 	mov	r7,r3
 800ef48:	8016ae00 	call	8016ae0 <__subdf3>
 800ef4c:	1829883a 	mov	r20,r3
 800ef50:	d8c00717 	ldw	r3,28(sp)
 800ef54:	84000c04 	addi	r16,r16,48
 800ef58:	1023883a 	mov	r17,r2
 800ef5c:	1c000005 	stb	r16,0(r3)
 800ef60:	db001617 	ldw	r12,88(sp)
 800ef64:	00800044 	movi	r2,1
 800ef68:	60802226 	beq	r12,r2,800eff4 <_dtoa_r+0x1424>
 800ef6c:	d9c00717 	ldw	r7,28(sp)
 800ef70:	8805883a 	mov	r2,r17
 800ef74:	b82b883a 	mov	r21,r23
 800ef78:	3b19883a 	add	r12,r7,r12
 800ef7c:	6023883a 	mov	r17,r12
 800ef80:	a007883a 	mov	r3,r20
 800ef84:	dc800f15 	stw	r18,60(sp)
 800ef88:	000d883a 	mov	r6,zero
 800ef8c:	01d00934 	movhi	r7,16420
 800ef90:	1009883a 	mov	r4,r2
 800ef94:	180b883a 	mov	r5,r3
 800ef98:	80162740 	call	8016274 <__muldf3>
 800ef9c:	180b883a 	mov	r5,r3
 800efa0:	1009883a 	mov	r4,r2
 800efa4:	1829883a 	mov	r20,r3
 800efa8:	1025883a 	mov	r18,r2
 800efac:	80173dc0 	call	80173dc <__fixdfsi>
 800efb0:	1009883a 	mov	r4,r2
 800efb4:	1021883a 	mov	r16,r2
 800efb8:	801745c0 	call	801745c <__floatsidf>
 800efbc:	100d883a 	mov	r6,r2
 800efc0:	180f883a 	mov	r7,r3
 800efc4:	9009883a 	mov	r4,r18
 800efc8:	a00b883a 	mov	r5,r20
 800efcc:	84000c04 	addi	r16,r16,48
 800efd0:	8016ae00 	call	8016ae0 <__subdf3>
 800efd4:	ad400044 	addi	r21,r21,1
 800efd8:	ac3fffc5 	stb	r16,-1(r21)
 800efdc:	ac7fea1e 	bne	r21,r17,800ef88 <_dtoa_r+0x13b8>
 800efe0:	1023883a 	mov	r17,r2
 800efe4:	d8801217 	ldw	r2,72(sp)
 800efe8:	dc800f17 	ldw	r18,60(sp)
 800efec:	1829883a 	mov	r20,r3
 800eff0:	b8af883a 	add	r23,r23,r2
 800eff4:	d9001417 	ldw	r4,80(sp)
 800eff8:	d9401517 	ldw	r5,84(sp)
 800effc:	000d883a 	mov	r6,zero
 800f000:	01cff834 	movhi	r7,16352
 800f004:	8014da00 	call	8014da0 <__adddf3>
 800f008:	880d883a 	mov	r6,r17
 800f00c:	a00f883a 	mov	r7,r20
 800f010:	1009883a 	mov	r4,r2
 800f014:	180b883a 	mov	r5,r3
 800f018:	80161800 	call	8016180 <__ledf2>
 800f01c:	10003e0e 	bge	r2,zero,800f118 <_dtoa_r+0x1548>
 800f020:	d9001317 	ldw	r4,76(sp)
 800f024:	bd3fffc3 	ldbu	r20,-1(r23)
 800f028:	d9000515 	stw	r4,20(sp)
 800f02c:	003d3b06 	br	800e51c <_dtoa_r+0x94c>
 800f030:	0027883a 	mov	r19,zero
 800f034:	003f1b06 	br	800eca4 <_dtoa_r+0x10d4>
 800f038:	d8800817 	ldw	r2,32(sp)
 800f03c:	11e9c83a 	sub	r20,r2,r7
 800f040:	0005883a 	mov	r2,zero
 800f044:	003d5406 	br	800e598 <_dtoa_r+0x9c8>
 800f048:	00800044 	movi	r2,1
 800f04c:	003dc706 	br	800e76c <_dtoa_r+0xb9c>
 800f050:	d8c00217 	ldw	r3,8(sp)
 800f054:	00800d84 	movi	r2,54
 800f058:	dd400a17 	ldw	r21,40(sp)
 800f05c:	10c5c83a 	sub	r2,r2,r3
 800f060:	dd000817 	ldw	r20,32(sp)
 800f064:	003d4c06 	br	800e598 <_dtoa_r+0x9c8>
 800f068:	dc800f15 	stw	r18,60(sp)
 800f06c:	dcc01015 	stw	r19,64(sp)
 800f070:	04000084 	movi	r16,2
 800f074:	003bed06 	br	800e02c <_dtoa_r+0x45c>
 800f078:	d9000617 	ldw	r4,24(sp)
 800f07c:	203f0d26 	beq	r4,zero,800ecb4 <_dtoa_r+0x10e4>
 800f080:	d9800c17 	ldw	r6,48(sp)
 800f084:	01bcab0e 	bge	zero,r6,800e334 <_dtoa_r+0x764>
 800f088:	d9401017 	ldw	r5,64(sp)
 800f08c:	d9000f17 	ldw	r4,60(sp)
 800f090:	000d883a 	mov	r6,zero
 800f094:	01d00934 	movhi	r7,16420
 800f098:	80162740 	call	8016274 <__muldf3>
 800f09c:	81000044 	addi	r4,r16,1
 800f0a0:	d8800f15 	stw	r2,60(sp)
 800f0a4:	d8c01015 	stw	r3,64(sp)
 800f0a8:	801745c0 	call	801745c <__floatsidf>
 800f0ac:	d9800f17 	ldw	r6,60(sp)
 800f0b0:	d9c01017 	ldw	r7,64(sp)
 800f0b4:	1009883a 	mov	r4,r2
 800f0b8:	180b883a 	mov	r5,r3
 800f0bc:	80162740 	call	8016274 <__muldf3>
 800f0c0:	01d00734 	movhi	r7,16412
 800f0c4:	000d883a 	mov	r6,zero
 800f0c8:	1009883a 	mov	r4,r2
 800f0cc:	180b883a 	mov	r5,r3
 800f0d0:	8014da00 	call	8014da0 <__adddf3>
 800f0d4:	d9c00517 	ldw	r7,20(sp)
 800f0d8:	047f3034 	movhi	r17,64704
 800f0dc:	1021883a 	mov	r16,r2
 800f0e0:	39ffffc4 	addi	r7,r7,-1
 800f0e4:	d9c01315 	stw	r7,76(sp)
 800f0e8:	1c63883a 	add	r17,r3,r17
 800f0ec:	db000c17 	ldw	r12,48(sp)
 800f0f0:	003bea06 	br	800e09c <_dtoa_r+0x4cc>
 800f0f4:	dc000915 	stw	r16,36(sp)
 800f0f8:	003e0e06 	br	800e934 <_dtoa_r+0xd64>
 800f0fc:	01000e44 	movi	r4,57
 800f100:	8825883a 	mov	r18,r17
 800f104:	9dc00044 	addi	r23,r19,1
 800f108:	99000005 	stb	r4,0(r19)
 800f10c:	a023883a 	mov	r17,r20
 800f110:	dc000915 	stw	r16,36(sp)
 800f114:	003da406 	br	800e7a8 <_dtoa_r+0xbd8>
 800f118:	d9801417 	ldw	r6,80(sp)
 800f11c:	d9c01517 	ldw	r7,84(sp)
 800f120:	0009883a 	mov	r4,zero
 800f124:	014ff834 	movhi	r5,16352
 800f128:	8016ae00 	call	8016ae0 <__subdf3>
 800f12c:	880d883a 	mov	r6,r17
 800f130:	a00f883a 	mov	r7,r20
 800f134:	1009883a 	mov	r4,r2
 800f138:	180b883a 	mov	r5,r3
 800f13c:	80160a40 	call	80160a4 <__gedf2>
 800f140:	00bc7c0e 	bge	zero,r2,800e334 <_dtoa_r+0x764>
 800f144:	01000c04 	movi	r4,48
 800f148:	00000106 	br	800f150 <_dtoa_r+0x1580>
 800f14c:	102f883a 	mov	r23,r2
 800f150:	b8bfffc4 	addi	r2,r23,-1
 800f154:	10c00007 	ldb	r3,0(r2)
 800f158:	193ffc26 	beq	r3,r4,800f14c <_dtoa_r+0x157c>
 800f15c:	d9801317 	ldw	r6,76(sp)
 800f160:	d9800515 	stw	r6,20(sp)
 800f164:	003c4406 	br	800e278 <_dtoa_r+0x6a8>
 800f168:	d9801317 	ldw	r6,76(sp)
 800f16c:	d9800515 	stw	r6,20(sp)
 800f170:	003cea06 	br	800e51c <_dtoa_r+0x94c>
 800f174:	dd800f17 	ldw	r22,60(sp)
 800f178:	dcc01017 	ldw	r19,64(sp)
 800f17c:	dc801217 	ldw	r18,72(sp)
 800f180:	003c6c06 	br	800e334 <_dtoa_r+0x764>
 800f184:	903e031e 	bne	r18,zero,800e994 <_dtoa_r+0xdc4>
 800f188:	003ebb06 	br	800ec78 <_dtoa_r+0x10a8>
 800f18c:	103e6c1e 	bne	r2,zero,800eb40 <_dtoa_r+0xf70>
 800f190:	4080004c 	andi	r2,r8,1
 800f194:	103e6a26 	beq	r2,zero,800eb40 <_dtoa_r+0xf70>
 800f198:	003e6606 	br	800eb34 <_dtoa_r+0xf64>
 800f19c:	d8c00317 	ldw	r3,12(sp)
 800f1a0:	00800084 	movi	r2,2
 800f1a4:	10c02916 	blt	r2,r3,800f24c <_dtoa_r+0x167c>
 800f1a8:	d9000c17 	ldw	r4,48(sp)
 800f1ac:	003e8806 	br	800ebd0 <_dtoa_r+0x1000>
 800f1b0:	04000084 	movi	r16,2
 800f1b4:	003b9d06 	br	800e02c <_dtoa_r+0x45c>
 800f1b8:	d9001317 	ldw	r4,76(sp)
 800f1bc:	d9000515 	stw	r4,20(sp)
 800f1c0:	003cd606 	br	800e51c <_dtoa_r+0x94c>
 800f1c4:	d8801317 	ldw	r2,76(sp)
 800f1c8:	d8800515 	stw	r2,20(sp)
 800f1cc:	003c2a06 	br	800e278 <_dtoa_r+0x6a8>
 800f1d0:	d9800317 	ldw	r6,12(sp)
 800f1d4:	00800084 	movi	r2,2
 800f1d8:	11801516 	blt	r2,r6,800f230 <_dtoa_r+0x1660>
 800f1dc:	d9c00c17 	ldw	r7,48(sp)
 800f1e0:	d9c00615 	stw	r7,24(sp)
 800f1e4:	003df706 	br	800e9c4 <_dtoa_r+0xdf4>
 800f1e8:	193d3926 	beq	r3,r4,800e6d0 <_dtoa_r+0xb00>
 800f1ec:	00c00f04 	movi	r3,60
 800f1f0:	1885c83a 	sub	r2,r3,r2
 800f1f4:	003ddf06 	br	800e974 <_dtoa_r+0xda4>
 800f1f8:	e009883a 	mov	r4,fp
 800f1fc:	e0001115 	stw	zero,68(fp)
 800f200:	000b883a 	mov	r5,zero
 800f204:	80108680 	call	8010868 <_Balloc>
 800f208:	d8800715 	stw	r2,28(sp)
 800f20c:	d8c00717 	ldw	r3,28(sp)
 800f210:	00bfffc4 	movi	r2,-1
 800f214:	01000044 	movi	r4,1
 800f218:	d8800c15 	stw	r2,48(sp)
 800f21c:	e0c01015 	stw	r3,64(fp)
 800f220:	d9000b15 	stw	r4,44(sp)
 800f224:	d8800615 	stw	r2,24(sp)
 800f228:	d8002215 	stw	zero,136(sp)
 800f22c:	003c4106 	br	800e334 <_dtoa_r+0x764>
 800f230:	d8c00c17 	ldw	r3,48(sp)
 800f234:	d8c00615 	stw	r3,24(sp)
 800f238:	003e7006 	br	800ebfc <_dtoa_r+0x102c>
 800f23c:	04400044 	movi	r17,1
 800f240:	003b2006 	br	800dec4 <_dtoa_r+0x2f4>
 800f244:	000b883a 	mov	r5,zero
 800f248:	003b3d06 	br	800df40 <_dtoa_r+0x370>
 800f24c:	d8800c17 	ldw	r2,48(sp)
 800f250:	d8800615 	stw	r2,24(sp)
 800f254:	003e6906 	br	800ebfc <_dtoa_r+0x102c>

0800f258 <__sflush_r>:
 800f258:	2880030b 	ldhu	r2,12(r5)
 800f25c:	defffb04 	addi	sp,sp,-20
 800f260:	dcc00315 	stw	r19,12(sp)
 800f264:	dc400115 	stw	r17,4(sp)
 800f268:	dfc00415 	stw	ra,16(sp)
 800f26c:	dc800215 	stw	r18,8(sp)
 800f270:	dc000015 	stw	r16,0(sp)
 800f274:	10c0020c 	andi	r3,r2,8
 800f278:	2823883a 	mov	r17,r5
 800f27c:	2027883a 	mov	r19,r4
 800f280:	1800311e 	bne	r3,zero,800f348 <__sflush_r+0xf0>
 800f284:	28c00117 	ldw	r3,4(r5)
 800f288:	10820014 	ori	r2,r2,2048
 800f28c:	2880030d 	sth	r2,12(r5)
 800f290:	00c04b0e 	bge	zero,r3,800f3c0 <__sflush_r+0x168>
 800f294:	8a000a17 	ldw	r8,40(r17)
 800f298:	40002326 	beq	r8,zero,800f328 <__sflush_r+0xd0>
 800f29c:	9c000017 	ldw	r16,0(r19)
 800f2a0:	10c4000c 	andi	r3,r2,4096
 800f2a4:	98000015 	stw	zero,0(r19)
 800f2a8:	18004826 	beq	r3,zero,800f3cc <__sflush_r+0x174>
 800f2ac:	89801417 	ldw	r6,80(r17)
 800f2b0:	10c0010c 	andi	r3,r2,4
 800f2b4:	18000626 	beq	r3,zero,800f2d0 <__sflush_r+0x78>
 800f2b8:	88c00117 	ldw	r3,4(r17)
 800f2bc:	88800c17 	ldw	r2,48(r17)
 800f2c0:	30cdc83a 	sub	r6,r6,r3
 800f2c4:	10000226 	beq	r2,zero,800f2d0 <__sflush_r+0x78>
 800f2c8:	88800f17 	ldw	r2,60(r17)
 800f2cc:	308dc83a 	sub	r6,r6,r2
 800f2d0:	89400717 	ldw	r5,28(r17)
 800f2d4:	000f883a 	mov	r7,zero
 800f2d8:	9809883a 	mov	r4,r19
 800f2dc:	403ee83a 	callr	r8
 800f2e0:	00ffffc4 	movi	r3,-1
 800f2e4:	10c04426 	beq	r2,r3,800f3f8 <__sflush_r+0x1a0>
 800f2e8:	88c0030b 	ldhu	r3,12(r17)
 800f2ec:	89000417 	ldw	r4,16(r17)
 800f2f0:	88000115 	stw	zero,4(r17)
 800f2f4:	197dffcc 	andi	r5,r3,63487
 800f2f8:	8940030d 	sth	r5,12(r17)
 800f2fc:	89000015 	stw	r4,0(r17)
 800f300:	18c4000c 	andi	r3,r3,4096
 800f304:	18002c1e 	bne	r3,zero,800f3b8 <__sflush_r+0x160>
 800f308:	89400c17 	ldw	r5,48(r17)
 800f30c:	9c000015 	stw	r16,0(r19)
 800f310:	28000526 	beq	r5,zero,800f328 <__sflush_r+0xd0>
 800f314:	88801004 	addi	r2,r17,64
 800f318:	28800226 	beq	r5,r2,800f324 <__sflush_r+0xcc>
 800f31c:	9809883a 	mov	r4,r19
 800f320:	800f9d40 	call	800f9d4 <_free_r>
 800f324:	88000c15 	stw	zero,48(r17)
 800f328:	0005883a 	mov	r2,zero
 800f32c:	dfc00417 	ldw	ra,16(sp)
 800f330:	dcc00317 	ldw	r19,12(sp)
 800f334:	dc800217 	ldw	r18,8(sp)
 800f338:	dc400117 	ldw	r17,4(sp)
 800f33c:	dc000017 	ldw	r16,0(sp)
 800f340:	dec00504 	addi	sp,sp,20
 800f344:	f800283a 	ret
 800f348:	2c800417 	ldw	r18,16(r5)
 800f34c:	903ff626 	beq	r18,zero,800f328 <__sflush_r+0xd0>
 800f350:	2c000017 	ldw	r16,0(r5)
 800f354:	108000cc 	andi	r2,r2,3
 800f358:	2c800015 	stw	r18,0(r5)
 800f35c:	84a1c83a 	sub	r16,r16,r18
 800f360:	1000131e 	bne	r2,zero,800f3b0 <__sflush_r+0x158>
 800f364:	28800517 	ldw	r2,20(r5)
 800f368:	88800215 	stw	r2,8(r17)
 800f36c:	04000316 	blt	zero,r16,800f37c <__sflush_r+0x124>
 800f370:	003fed06 	br	800f328 <__sflush_r+0xd0>
 800f374:	90a5883a 	add	r18,r18,r2
 800f378:	043feb0e 	bge	zero,r16,800f328 <__sflush_r+0xd0>
 800f37c:	88800917 	ldw	r2,36(r17)
 800f380:	89400717 	ldw	r5,28(r17)
 800f384:	800f883a 	mov	r7,r16
 800f388:	900d883a 	mov	r6,r18
 800f38c:	9809883a 	mov	r4,r19
 800f390:	103ee83a 	callr	r2
 800f394:	80a1c83a 	sub	r16,r16,r2
 800f398:	00bff616 	blt	zero,r2,800f374 <__sflush_r+0x11c>
 800f39c:	88c0030b 	ldhu	r3,12(r17)
 800f3a0:	00bfffc4 	movi	r2,-1
 800f3a4:	18c01014 	ori	r3,r3,64
 800f3a8:	88c0030d 	sth	r3,12(r17)
 800f3ac:	003fdf06 	br	800f32c <__sflush_r+0xd4>
 800f3b0:	0005883a 	mov	r2,zero
 800f3b4:	003fec06 	br	800f368 <__sflush_r+0x110>
 800f3b8:	88801415 	stw	r2,80(r17)
 800f3bc:	003fd206 	br	800f308 <__sflush_r+0xb0>
 800f3c0:	28c00f17 	ldw	r3,60(r5)
 800f3c4:	00ffb316 	blt	zero,r3,800f294 <__sflush_r+0x3c>
 800f3c8:	003fd706 	br	800f328 <__sflush_r+0xd0>
 800f3cc:	89400717 	ldw	r5,28(r17)
 800f3d0:	000d883a 	mov	r6,zero
 800f3d4:	01c00044 	movi	r7,1
 800f3d8:	9809883a 	mov	r4,r19
 800f3dc:	403ee83a 	callr	r8
 800f3e0:	100d883a 	mov	r6,r2
 800f3e4:	00bfffc4 	movi	r2,-1
 800f3e8:	30801426 	beq	r6,r2,800f43c <__sflush_r+0x1e4>
 800f3ec:	8880030b 	ldhu	r2,12(r17)
 800f3f0:	8a000a17 	ldw	r8,40(r17)
 800f3f4:	003fae06 	br	800f2b0 <__sflush_r+0x58>
 800f3f8:	98c00017 	ldw	r3,0(r19)
 800f3fc:	183fba26 	beq	r3,zero,800f2e8 <__sflush_r+0x90>
 800f400:	01000744 	movi	r4,29
 800f404:	19000626 	beq	r3,r4,800f420 <__sflush_r+0x1c8>
 800f408:	01000584 	movi	r4,22
 800f40c:	19000426 	beq	r3,r4,800f420 <__sflush_r+0x1c8>
 800f410:	88c0030b 	ldhu	r3,12(r17)
 800f414:	18c01014 	ori	r3,r3,64
 800f418:	88c0030d 	sth	r3,12(r17)
 800f41c:	003fc306 	br	800f32c <__sflush_r+0xd4>
 800f420:	8880030b 	ldhu	r2,12(r17)
 800f424:	88c00417 	ldw	r3,16(r17)
 800f428:	88000115 	stw	zero,4(r17)
 800f42c:	10bdffcc 	andi	r2,r2,63487
 800f430:	8880030d 	sth	r2,12(r17)
 800f434:	88c00015 	stw	r3,0(r17)
 800f438:	003fb306 	br	800f308 <__sflush_r+0xb0>
 800f43c:	98800017 	ldw	r2,0(r19)
 800f440:	103fea26 	beq	r2,zero,800f3ec <__sflush_r+0x194>
 800f444:	00c00744 	movi	r3,29
 800f448:	10c00226 	beq	r2,r3,800f454 <__sflush_r+0x1fc>
 800f44c:	00c00584 	movi	r3,22
 800f450:	10c0031e 	bne	r2,r3,800f460 <__sflush_r+0x208>
 800f454:	9c000015 	stw	r16,0(r19)
 800f458:	0005883a 	mov	r2,zero
 800f45c:	003fb306 	br	800f32c <__sflush_r+0xd4>
 800f460:	88c0030b 	ldhu	r3,12(r17)
 800f464:	3005883a 	mov	r2,r6
 800f468:	18c01014 	ori	r3,r3,64
 800f46c:	88c0030d 	sth	r3,12(r17)
 800f470:	003fae06 	br	800f32c <__sflush_r+0xd4>

0800f474 <_fflush_r>:
 800f474:	defffd04 	addi	sp,sp,-12
 800f478:	dc000115 	stw	r16,4(sp)
 800f47c:	dfc00215 	stw	ra,8(sp)
 800f480:	2021883a 	mov	r16,r4
 800f484:	20000226 	beq	r4,zero,800f490 <_fflush_r+0x1c>
 800f488:	20800e17 	ldw	r2,56(r4)
 800f48c:	10000c26 	beq	r2,zero,800f4c0 <_fflush_r+0x4c>
 800f490:	2880030f 	ldh	r2,12(r5)
 800f494:	1000051e 	bne	r2,zero,800f4ac <_fflush_r+0x38>
 800f498:	0005883a 	mov	r2,zero
 800f49c:	dfc00217 	ldw	ra,8(sp)
 800f4a0:	dc000117 	ldw	r16,4(sp)
 800f4a4:	dec00304 	addi	sp,sp,12
 800f4a8:	f800283a 	ret
 800f4ac:	8009883a 	mov	r4,r16
 800f4b0:	dfc00217 	ldw	ra,8(sp)
 800f4b4:	dc000117 	ldw	r16,4(sp)
 800f4b8:	dec00304 	addi	sp,sp,12
 800f4bc:	800f2581 	jmpi	800f258 <__sflush_r>
 800f4c0:	d9400015 	stw	r5,0(sp)
 800f4c4:	800f8600 	call	800f860 <__sinit>
 800f4c8:	d9400017 	ldw	r5,0(sp)
 800f4cc:	003ff006 	br	800f490 <_fflush_r+0x1c>

0800f4d0 <fflush>:
 800f4d0:	20000526 	beq	r4,zero,800f4e8 <fflush+0x18>
 800f4d4:	008200b4 	movhi	r2,2050
 800f4d8:	10b22604 	addi	r2,r2,-14184
 800f4dc:	200b883a 	mov	r5,r4
 800f4e0:	11000017 	ldw	r4,0(r2)
 800f4e4:	800f4741 	jmpi	800f474 <_fflush_r>
 800f4e8:	008200b4 	movhi	r2,2050
 800f4ec:	10b22504 	addi	r2,r2,-14188
 800f4f0:	11000017 	ldw	r4,0(r2)
 800f4f4:	01420074 	movhi	r5,2049
 800f4f8:	297d1d04 	addi	r5,r5,-2956
 800f4fc:	80102701 	jmpi	8010270 <_fwalk_reent>

0800f500 <__fp_unlock>:
 800f500:	0005883a 	mov	r2,zero
 800f504:	f800283a 	ret

0800f508 <_cleanup_r>:
 800f508:	01420074 	movhi	r5,2049
 800f50c:	294edf04 	addi	r5,r5,15228
 800f510:	80102701 	jmpi	8010270 <_fwalk_reent>

0800f514 <__sinit.part.1>:
 800f514:	defff704 	addi	sp,sp,-36
 800f518:	00c20074 	movhi	r3,2049
 800f51c:	dfc00815 	stw	ra,32(sp)
 800f520:	ddc00715 	stw	r23,28(sp)
 800f524:	dd800615 	stw	r22,24(sp)
 800f528:	dd400515 	stw	r21,20(sp)
 800f52c:	dd000415 	stw	r20,16(sp)
 800f530:	dcc00315 	stw	r19,12(sp)
 800f534:	dc800215 	stw	r18,8(sp)
 800f538:	dc400115 	stw	r17,4(sp)
 800f53c:	dc000015 	stw	r16,0(sp)
 800f540:	18fd4204 	addi	r3,r3,-2808
 800f544:	24000117 	ldw	r16,4(r4)
 800f548:	20c00f15 	stw	r3,60(r4)
 800f54c:	2080bb04 	addi	r2,r4,748
 800f550:	00c000c4 	movi	r3,3
 800f554:	20c0b915 	stw	r3,740(r4)
 800f558:	2080ba15 	stw	r2,744(r4)
 800f55c:	2000b815 	stw	zero,736(r4)
 800f560:	05c00204 	movi	r23,8
 800f564:	00800104 	movi	r2,4
 800f568:	2025883a 	mov	r18,r4
 800f56c:	b80d883a 	mov	r6,r23
 800f570:	81001704 	addi	r4,r16,92
 800f574:	000b883a 	mov	r5,zero
 800f578:	80000015 	stw	zero,0(r16)
 800f57c:	80000115 	stw	zero,4(r16)
 800f580:	80000215 	stw	zero,8(r16)
 800f584:	8080030d 	sth	r2,12(r16)
 800f588:	80001915 	stw	zero,100(r16)
 800f58c:	8000038d 	sth	zero,14(r16)
 800f590:	80000415 	stw	zero,16(r16)
 800f594:	80000515 	stw	zero,20(r16)
 800f598:	80000615 	stw	zero,24(r16)
 800f59c:	800ac500 	call	800ac50 <memset>
 800f5a0:	05820074 	movhi	r22,2049
 800f5a4:	94400217 	ldw	r17,8(r18)
 800f5a8:	05420074 	movhi	r21,2049
 800f5ac:	05020074 	movhi	r20,2049
 800f5b0:	04c20074 	movhi	r19,2049
 800f5b4:	b5881804 	addi	r22,r22,8288
 800f5b8:	ad482f04 	addi	r21,r21,8380
 800f5bc:	a5084e04 	addi	r20,r20,8504
 800f5c0:	9cc86504 	addi	r19,r19,8596
 800f5c4:	85800815 	stw	r22,32(r16)
 800f5c8:	85400915 	stw	r21,36(r16)
 800f5cc:	85000a15 	stw	r20,40(r16)
 800f5d0:	84c00b15 	stw	r19,44(r16)
 800f5d4:	84000715 	stw	r16,28(r16)
 800f5d8:	00800284 	movi	r2,10
 800f5dc:	8880030d 	sth	r2,12(r17)
 800f5e0:	00800044 	movi	r2,1
 800f5e4:	b80d883a 	mov	r6,r23
 800f5e8:	89001704 	addi	r4,r17,92
 800f5ec:	000b883a 	mov	r5,zero
 800f5f0:	88000015 	stw	zero,0(r17)
 800f5f4:	88000115 	stw	zero,4(r17)
 800f5f8:	88000215 	stw	zero,8(r17)
 800f5fc:	88001915 	stw	zero,100(r17)
 800f600:	8880038d 	sth	r2,14(r17)
 800f604:	88000415 	stw	zero,16(r17)
 800f608:	88000515 	stw	zero,20(r17)
 800f60c:	88000615 	stw	zero,24(r17)
 800f610:	800ac500 	call	800ac50 <memset>
 800f614:	94000317 	ldw	r16,12(r18)
 800f618:	00800484 	movi	r2,18
 800f61c:	8c400715 	stw	r17,28(r17)
 800f620:	8d800815 	stw	r22,32(r17)
 800f624:	8d400915 	stw	r21,36(r17)
 800f628:	8d000a15 	stw	r20,40(r17)
 800f62c:	8cc00b15 	stw	r19,44(r17)
 800f630:	8080030d 	sth	r2,12(r16)
 800f634:	00800084 	movi	r2,2
 800f638:	80000015 	stw	zero,0(r16)
 800f63c:	80000115 	stw	zero,4(r16)
 800f640:	80000215 	stw	zero,8(r16)
 800f644:	80001915 	stw	zero,100(r16)
 800f648:	8080038d 	sth	r2,14(r16)
 800f64c:	80000415 	stw	zero,16(r16)
 800f650:	80000515 	stw	zero,20(r16)
 800f654:	80000615 	stw	zero,24(r16)
 800f658:	b80d883a 	mov	r6,r23
 800f65c:	000b883a 	mov	r5,zero
 800f660:	81001704 	addi	r4,r16,92
 800f664:	800ac500 	call	800ac50 <memset>
 800f668:	00800044 	movi	r2,1
 800f66c:	84000715 	stw	r16,28(r16)
 800f670:	85800815 	stw	r22,32(r16)
 800f674:	85400915 	stw	r21,36(r16)
 800f678:	85000a15 	stw	r20,40(r16)
 800f67c:	84c00b15 	stw	r19,44(r16)
 800f680:	90800e15 	stw	r2,56(r18)
 800f684:	dfc00817 	ldw	ra,32(sp)
 800f688:	ddc00717 	ldw	r23,28(sp)
 800f68c:	dd800617 	ldw	r22,24(sp)
 800f690:	dd400517 	ldw	r21,20(sp)
 800f694:	dd000417 	ldw	r20,16(sp)
 800f698:	dcc00317 	ldw	r19,12(sp)
 800f69c:	dc800217 	ldw	r18,8(sp)
 800f6a0:	dc400117 	ldw	r17,4(sp)
 800f6a4:	dc000017 	ldw	r16,0(sp)
 800f6a8:	dec00904 	addi	sp,sp,36
 800f6ac:	f800283a 	ret

0800f6b0 <__fp_lock>:
 800f6b0:	0005883a 	mov	r2,zero
 800f6b4:	f800283a 	ret

0800f6b8 <__sfmoreglue>:
 800f6b8:	defffc04 	addi	sp,sp,-16
 800f6bc:	dc800215 	stw	r18,8(sp)
 800f6c0:	2825883a 	mov	r18,r5
 800f6c4:	dc000015 	stw	r16,0(sp)
 800f6c8:	01401a04 	movi	r5,104
 800f6cc:	2021883a 	mov	r16,r4
 800f6d0:	913fffc4 	addi	r4,r18,-1
 800f6d4:	dfc00315 	stw	ra,12(sp)
 800f6d8:	dc400115 	stw	r17,4(sp)
 800f6dc:	800a1780 	call	800a178 <__mulsi3>
 800f6e0:	8009883a 	mov	r4,r16
 800f6e4:	11401d04 	addi	r5,r2,116
 800f6e8:	1023883a 	mov	r17,r2
 800f6ec:	800a2800 	call	800a280 <_malloc_r>
 800f6f0:	1021883a 	mov	r16,r2
 800f6f4:	10000726 	beq	r2,zero,800f714 <__sfmoreglue+0x5c>
 800f6f8:	11000304 	addi	r4,r2,12
 800f6fc:	10000015 	stw	zero,0(r2)
 800f700:	14800115 	stw	r18,4(r2)
 800f704:	11000215 	stw	r4,8(r2)
 800f708:	89801a04 	addi	r6,r17,104
 800f70c:	000b883a 	mov	r5,zero
 800f710:	800ac500 	call	800ac50 <memset>
 800f714:	8005883a 	mov	r2,r16
 800f718:	dfc00317 	ldw	ra,12(sp)
 800f71c:	dc800217 	ldw	r18,8(sp)
 800f720:	dc400117 	ldw	r17,4(sp)
 800f724:	dc000017 	ldw	r16,0(sp)
 800f728:	dec00404 	addi	sp,sp,16
 800f72c:	f800283a 	ret

0800f730 <__sfp>:
 800f730:	defffb04 	addi	sp,sp,-20
 800f734:	dc000015 	stw	r16,0(sp)
 800f738:	040200b4 	movhi	r16,2050
 800f73c:	84322504 	addi	r16,r16,-14188
 800f740:	dcc00315 	stw	r19,12(sp)
 800f744:	2027883a 	mov	r19,r4
 800f748:	81000017 	ldw	r4,0(r16)
 800f74c:	dfc00415 	stw	ra,16(sp)
 800f750:	dc800215 	stw	r18,8(sp)
 800f754:	20800e17 	ldw	r2,56(r4)
 800f758:	dc400115 	stw	r17,4(sp)
 800f75c:	1000021e 	bne	r2,zero,800f768 <__sfp+0x38>
 800f760:	800f5140 	call	800f514 <__sinit.part.1>
 800f764:	81000017 	ldw	r4,0(r16)
 800f768:	2480b804 	addi	r18,r4,736
 800f76c:	047fffc4 	movi	r17,-1
 800f770:	91000117 	ldw	r4,4(r18)
 800f774:	94000217 	ldw	r16,8(r18)
 800f778:	213fffc4 	addi	r4,r4,-1
 800f77c:	20000a16 	blt	r4,zero,800f7a8 <__sfp+0x78>
 800f780:	8080030f 	ldh	r2,12(r16)
 800f784:	10000c26 	beq	r2,zero,800f7b8 <__sfp+0x88>
 800f788:	80c01d04 	addi	r3,r16,116
 800f78c:	00000206 	br	800f798 <__sfp+0x68>
 800f790:	18bfe60f 	ldh	r2,-104(r3)
 800f794:	10000826 	beq	r2,zero,800f7b8 <__sfp+0x88>
 800f798:	213fffc4 	addi	r4,r4,-1
 800f79c:	1c3ffd04 	addi	r16,r3,-12
 800f7a0:	18c01a04 	addi	r3,r3,104
 800f7a4:	247ffa1e 	bne	r4,r17,800f790 <__sfp+0x60>
 800f7a8:	90800017 	ldw	r2,0(r18)
 800f7ac:	10001d26 	beq	r2,zero,800f824 <__sfp+0xf4>
 800f7b0:	1025883a 	mov	r18,r2
 800f7b4:	003fee06 	br	800f770 <__sfp+0x40>
 800f7b8:	00bfffc4 	movi	r2,-1
 800f7bc:	8080038d 	sth	r2,14(r16)
 800f7c0:	00800044 	movi	r2,1
 800f7c4:	8080030d 	sth	r2,12(r16)
 800f7c8:	80001915 	stw	zero,100(r16)
 800f7cc:	80000015 	stw	zero,0(r16)
 800f7d0:	80000215 	stw	zero,8(r16)
 800f7d4:	80000115 	stw	zero,4(r16)
 800f7d8:	80000415 	stw	zero,16(r16)
 800f7dc:	80000515 	stw	zero,20(r16)
 800f7e0:	80000615 	stw	zero,24(r16)
 800f7e4:	01800204 	movi	r6,8
 800f7e8:	000b883a 	mov	r5,zero
 800f7ec:	81001704 	addi	r4,r16,92
 800f7f0:	800ac500 	call	800ac50 <memset>
 800f7f4:	8005883a 	mov	r2,r16
 800f7f8:	80000c15 	stw	zero,48(r16)
 800f7fc:	80000d15 	stw	zero,52(r16)
 800f800:	80001115 	stw	zero,68(r16)
 800f804:	80001215 	stw	zero,72(r16)
 800f808:	dfc00417 	ldw	ra,16(sp)
 800f80c:	dcc00317 	ldw	r19,12(sp)
 800f810:	dc800217 	ldw	r18,8(sp)
 800f814:	dc400117 	ldw	r17,4(sp)
 800f818:	dc000017 	ldw	r16,0(sp)
 800f81c:	dec00504 	addi	sp,sp,20
 800f820:	f800283a 	ret
 800f824:	01400104 	movi	r5,4
 800f828:	9809883a 	mov	r4,r19
 800f82c:	800f6b80 	call	800f6b8 <__sfmoreglue>
 800f830:	90800015 	stw	r2,0(r18)
 800f834:	103fde1e 	bne	r2,zero,800f7b0 <__sfp+0x80>
 800f838:	00800304 	movi	r2,12
 800f83c:	98800015 	stw	r2,0(r19)
 800f840:	0005883a 	mov	r2,zero
 800f844:	003ff006 	br	800f808 <__sfp+0xd8>

0800f848 <_cleanup>:
 800f848:	008200b4 	movhi	r2,2050
 800f84c:	10b22504 	addi	r2,r2,-14188
 800f850:	11000017 	ldw	r4,0(r2)
 800f854:	01420074 	movhi	r5,2049
 800f858:	294edf04 	addi	r5,r5,15228
 800f85c:	80102701 	jmpi	8010270 <_fwalk_reent>

0800f860 <__sinit>:
 800f860:	20800e17 	ldw	r2,56(r4)
 800f864:	10000126 	beq	r2,zero,800f86c <__sinit+0xc>
 800f868:	f800283a 	ret
 800f86c:	800f5141 	jmpi	800f514 <__sinit.part.1>

0800f870 <__sfp_lock_acquire>:
 800f870:	f800283a 	ret

0800f874 <__sfp_lock_release>:
 800f874:	f800283a 	ret

0800f878 <__sinit_lock_acquire>:
 800f878:	f800283a 	ret

0800f87c <__sinit_lock_release>:
 800f87c:	f800283a 	ret

0800f880 <__fp_lock_all>:
 800f880:	008200b4 	movhi	r2,2050
 800f884:	10b22604 	addi	r2,r2,-14184
 800f888:	11000017 	ldw	r4,0(r2)
 800f88c:	01420074 	movhi	r5,2049
 800f890:	297dac04 	addi	r5,r5,-2384
 800f894:	80101ac1 	jmpi	80101ac <_fwalk>

0800f898 <__fp_unlock_all>:
 800f898:	008200b4 	movhi	r2,2050
 800f89c:	10b22604 	addi	r2,r2,-14184
 800f8a0:	11000017 	ldw	r4,0(r2)
 800f8a4:	01420074 	movhi	r5,2049
 800f8a8:	297d4004 	addi	r5,r5,-2816
 800f8ac:	80101ac1 	jmpi	80101ac <_fwalk>

0800f8b0 <_malloc_trim_r>:
 800f8b0:	defffb04 	addi	sp,sp,-20
 800f8b4:	dcc00315 	stw	r19,12(sp)
 800f8b8:	04c200b4 	movhi	r19,2050
 800f8bc:	dc800215 	stw	r18,8(sp)
 800f8c0:	dc400115 	stw	r17,4(sp)
 800f8c4:	dc000015 	stw	r16,0(sp)
 800f8c8:	dfc00415 	stw	ra,16(sp)
 800f8cc:	2821883a 	mov	r16,r5
 800f8d0:	9cec6f04 	addi	r19,r19,-20036
 800f8d4:	2025883a 	mov	r18,r4
 800f8d8:	8017dd40 	call	8017dd4 <__malloc_lock>
 800f8dc:	98800217 	ldw	r2,8(r19)
 800f8e0:	14400117 	ldw	r17,4(r2)
 800f8e4:	00bfff04 	movi	r2,-4
 800f8e8:	88a2703a 	and	r17,r17,r2
 800f8ec:	8c21c83a 	sub	r16,r17,r16
 800f8f0:	8403fbc4 	addi	r16,r16,4079
 800f8f4:	8020d33a 	srli	r16,r16,12
 800f8f8:	0083ffc4 	movi	r2,4095
 800f8fc:	843fffc4 	addi	r16,r16,-1
 800f900:	8020933a 	slli	r16,r16,12
 800f904:	1400060e 	bge	r2,r16,800f920 <_malloc_trim_r+0x70>
 800f908:	000b883a 	mov	r5,zero
 800f90c:	9009883a 	mov	r4,r18
 800f910:	800aed80 	call	800aed8 <_sbrk_r>
 800f914:	98c00217 	ldw	r3,8(r19)
 800f918:	1c47883a 	add	r3,r3,r17
 800f91c:	10c00a26 	beq	r2,r3,800f948 <_malloc_trim_r+0x98>
 800f920:	9009883a 	mov	r4,r18
 800f924:	8017df80 	call	8017df8 <__malloc_unlock>
 800f928:	0005883a 	mov	r2,zero
 800f92c:	dfc00417 	ldw	ra,16(sp)
 800f930:	dcc00317 	ldw	r19,12(sp)
 800f934:	dc800217 	ldw	r18,8(sp)
 800f938:	dc400117 	ldw	r17,4(sp)
 800f93c:	dc000017 	ldw	r16,0(sp)
 800f940:	dec00504 	addi	sp,sp,20
 800f944:	f800283a 	ret
 800f948:	040bc83a 	sub	r5,zero,r16
 800f94c:	9009883a 	mov	r4,r18
 800f950:	800aed80 	call	800aed8 <_sbrk_r>
 800f954:	00ffffc4 	movi	r3,-1
 800f958:	10c00d26 	beq	r2,r3,800f990 <_malloc_trim_r+0xe0>
 800f95c:	00c200b4 	movhi	r3,2050
 800f960:	18fa1404 	addi	r3,r3,-6064
 800f964:	18800017 	ldw	r2,0(r3)
 800f968:	99000217 	ldw	r4,8(r19)
 800f96c:	8c23c83a 	sub	r17,r17,r16
 800f970:	8c400054 	ori	r17,r17,1
 800f974:	1421c83a 	sub	r16,r2,r16
 800f978:	24400115 	stw	r17,4(r4)
 800f97c:	9009883a 	mov	r4,r18
 800f980:	1c000015 	stw	r16,0(r3)
 800f984:	8017df80 	call	8017df8 <__malloc_unlock>
 800f988:	00800044 	movi	r2,1
 800f98c:	003fe706 	br	800f92c <_malloc_trim_r+0x7c>
 800f990:	000b883a 	mov	r5,zero
 800f994:	9009883a 	mov	r4,r18
 800f998:	800aed80 	call	800aed8 <_sbrk_r>
 800f99c:	99000217 	ldw	r4,8(r19)
 800f9a0:	014003c4 	movi	r5,15
 800f9a4:	1107c83a 	sub	r3,r2,r4
 800f9a8:	28ffdd0e 	bge	r5,r3,800f920 <_malloc_trim_r+0x70>
 800f9ac:	014200b4 	movhi	r5,2050
 800f9b0:	29722704 	addi	r5,r5,-14180
 800f9b4:	29400017 	ldw	r5,0(r5)
 800f9b8:	18c00054 	ori	r3,r3,1
 800f9bc:	20c00115 	stw	r3,4(r4)
 800f9c0:	00c200b4 	movhi	r3,2050
 800f9c4:	1145c83a 	sub	r2,r2,r5
 800f9c8:	18fa1404 	addi	r3,r3,-6064
 800f9cc:	18800015 	stw	r2,0(r3)
 800f9d0:	003fd306 	br	800f920 <_malloc_trim_r+0x70>

0800f9d4 <_free_r>:
 800f9d4:	28004126 	beq	r5,zero,800fadc <_free_r+0x108>
 800f9d8:	defffd04 	addi	sp,sp,-12
 800f9dc:	dc400115 	stw	r17,4(sp)
 800f9e0:	dc000015 	stw	r16,0(sp)
 800f9e4:	2023883a 	mov	r17,r4
 800f9e8:	2821883a 	mov	r16,r5
 800f9ec:	dfc00215 	stw	ra,8(sp)
 800f9f0:	8017dd40 	call	8017dd4 <__malloc_lock>
 800f9f4:	81ffff17 	ldw	r7,-4(r16)
 800f9f8:	00bfff84 	movi	r2,-2
 800f9fc:	010200b4 	movhi	r4,2050
 800fa00:	81bffe04 	addi	r6,r16,-8
 800fa04:	3884703a 	and	r2,r7,r2
 800fa08:	212c6f04 	addi	r4,r4,-20036
 800fa0c:	308b883a 	add	r5,r6,r2
 800fa10:	2a400117 	ldw	r9,4(r5)
 800fa14:	22000217 	ldw	r8,8(r4)
 800fa18:	00ffff04 	movi	r3,-4
 800fa1c:	48c6703a 	and	r3,r9,r3
 800fa20:	2a005726 	beq	r5,r8,800fb80 <_free_r+0x1ac>
 800fa24:	28c00115 	stw	r3,4(r5)
 800fa28:	39c0004c 	andi	r7,r7,1
 800fa2c:	3800091e 	bne	r7,zero,800fa54 <_free_r+0x80>
 800fa30:	823ffe17 	ldw	r8,-8(r16)
 800fa34:	22400204 	addi	r9,r4,8
 800fa38:	320dc83a 	sub	r6,r6,r8
 800fa3c:	31c00217 	ldw	r7,8(r6)
 800fa40:	1205883a 	add	r2,r2,r8
 800fa44:	3a406526 	beq	r7,r9,800fbdc <_free_r+0x208>
 800fa48:	32000317 	ldw	r8,12(r6)
 800fa4c:	3a000315 	stw	r8,12(r7)
 800fa50:	41c00215 	stw	r7,8(r8)
 800fa54:	28cf883a 	add	r7,r5,r3
 800fa58:	39c00117 	ldw	r7,4(r7)
 800fa5c:	39c0004c 	andi	r7,r7,1
 800fa60:	38003a26 	beq	r7,zero,800fb4c <_free_r+0x178>
 800fa64:	10c00054 	ori	r3,r2,1
 800fa68:	30c00115 	stw	r3,4(r6)
 800fa6c:	3087883a 	add	r3,r6,r2
 800fa70:	18800015 	stw	r2,0(r3)
 800fa74:	00c07fc4 	movi	r3,511
 800fa78:	18801936 	bltu	r3,r2,800fae0 <_free_r+0x10c>
 800fa7c:	1004d0fa 	srli	r2,r2,3
 800fa80:	01c00044 	movi	r7,1
 800fa84:	21400117 	ldw	r5,4(r4)
 800fa88:	10c00044 	addi	r3,r2,1
 800fa8c:	18c7883a 	add	r3,r3,r3
 800fa90:	1005d0ba 	srai	r2,r2,2
 800fa94:	18c7883a 	add	r3,r3,r3
 800fa98:	18c7883a 	add	r3,r3,r3
 800fa9c:	1907883a 	add	r3,r3,r4
 800faa0:	3884983a 	sll	r2,r7,r2
 800faa4:	19c00017 	ldw	r7,0(r3)
 800faa8:	1a3ffe04 	addi	r8,r3,-8
 800faac:	1144b03a 	or	r2,r2,r5
 800fab0:	32000315 	stw	r8,12(r6)
 800fab4:	31c00215 	stw	r7,8(r6)
 800fab8:	20800115 	stw	r2,4(r4)
 800fabc:	19800015 	stw	r6,0(r3)
 800fac0:	39800315 	stw	r6,12(r7)
 800fac4:	8809883a 	mov	r4,r17
 800fac8:	dfc00217 	ldw	ra,8(sp)
 800facc:	dc400117 	ldw	r17,4(sp)
 800fad0:	dc000017 	ldw	r16,0(sp)
 800fad4:	dec00304 	addi	sp,sp,12
 800fad8:	8017df81 	jmpi	8017df8 <__malloc_unlock>
 800fadc:	f800283a 	ret
 800fae0:	100ad27a 	srli	r5,r2,9
 800fae4:	00c00104 	movi	r3,4
 800fae8:	19404a36 	bltu	r3,r5,800fc14 <_free_r+0x240>
 800faec:	100ad1ba 	srli	r5,r2,6
 800faf0:	28c00e44 	addi	r3,r5,57
 800faf4:	18c7883a 	add	r3,r3,r3
 800faf8:	29400e04 	addi	r5,r5,56
 800fafc:	18c7883a 	add	r3,r3,r3
 800fb00:	18c7883a 	add	r3,r3,r3
 800fb04:	1909883a 	add	r4,r3,r4
 800fb08:	20c00017 	ldw	r3,0(r4)
 800fb0c:	01c200b4 	movhi	r7,2050
 800fb10:	213ffe04 	addi	r4,r4,-8
 800fb14:	39ec6f04 	addi	r7,r7,-20036
 800fb18:	20c04426 	beq	r4,r3,800fc2c <_free_r+0x258>
 800fb1c:	01ffff04 	movi	r7,-4
 800fb20:	19400117 	ldw	r5,4(r3)
 800fb24:	29ca703a 	and	r5,r5,r7
 800fb28:	1140022e 	bgeu	r2,r5,800fb34 <_free_r+0x160>
 800fb2c:	18c00217 	ldw	r3,8(r3)
 800fb30:	20fffb1e 	bne	r4,r3,800fb20 <_free_r+0x14c>
 800fb34:	19000317 	ldw	r4,12(r3)
 800fb38:	31000315 	stw	r4,12(r6)
 800fb3c:	30c00215 	stw	r3,8(r6)
 800fb40:	21800215 	stw	r6,8(r4)
 800fb44:	19800315 	stw	r6,12(r3)
 800fb48:	003fde06 	br	800fac4 <_free_r+0xf0>
 800fb4c:	29c00217 	ldw	r7,8(r5)
 800fb50:	10c5883a 	add	r2,r2,r3
 800fb54:	00c200b4 	movhi	r3,2050
 800fb58:	18ec7104 	addi	r3,r3,-20028
 800fb5c:	38c03b26 	beq	r7,r3,800fc4c <_free_r+0x278>
 800fb60:	2a000317 	ldw	r8,12(r5)
 800fb64:	11400054 	ori	r5,r2,1
 800fb68:	3087883a 	add	r3,r6,r2
 800fb6c:	3a000315 	stw	r8,12(r7)
 800fb70:	41c00215 	stw	r7,8(r8)
 800fb74:	31400115 	stw	r5,4(r6)
 800fb78:	18800015 	stw	r2,0(r3)
 800fb7c:	003fbd06 	br	800fa74 <_free_r+0xa0>
 800fb80:	39c0004c 	andi	r7,r7,1
 800fb84:	10c5883a 	add	r2,r2,r3
 800fb88:	3800071e 	bne	r7,zero,800fba8 <_free_r+0x1d4>
 800fb8c:	81fffe17 	ldw	r7,-8(r16)
 800fb90:	31cdc83a 	sub	r6,r6,r7
 800fb94:	30c00317 	ldw	r3,12(r6)
 800fb98:	31400217 	ldw	r5,8(r6)
 800fb9c:	11c5883a 	add	r2,r2,r7
 800fba0:	28c00315 	stw	r3,12(r5)
 800fba4:	19400215 	stw	r5,8(r3)
 800fba8:	10c00054 	ori	r3,r2,1
 800fbac:	30c00115 	stw	r3,4(r6)
 800fbb0:	00c200b4 	movhi	r3,2050
 800fbb4:	18f22804 	addi	r3,r3,-14176
 800fbb8:	18c00017 	ldw	r3,0(r3)
 800fbbc:	21800215 	stw	r6,8(r4)
 800fbc0:	10ffc036 	bltu	r2,r3,800fac4 <_free_r+0xf0>
 800fbc4:	008200b4 	movhi	r2,2050
 800fbc8:	10b94c04 	addi	r2,r2,-6864
 800fbcc:	11400017 	ldw	r5,0(r2)
 800fbd0:	8809883a 	mov	r4,r17
 800fbd4:	800f8b00 	call	800f8b0 <_malloc_trim_r>
 800fbd8:	003fba06 	br	800fac4 <_free_r+0xf0>
 800fbdc:	28c9883a 	add	r4,r5,r3
 800fbe0:	21000117 	ldw	r4,4(r4)
 800fbe4:	2100004c 	andi	r4,r4,1
 800fbe8:	2000391e 	bne	r4,zero,800fcd0 <_free_r+0x2fc>
 800fbec:	29c00217 	ldw	r7,8(r5)
 800fbf0:	29000317 	ldw	r4,12(r5)
 800fbf4:	1885883a 	add	r2,r3,r2
 800fbf8:	10c00054 	ori	r3,r2,1
 800fbfc:	39000315 	stw	r4,12(r7)
 800fc00:	21c00215 	stw	r7,8(r4)
 800fc04:	30c00115 	stw	r3,4(r6)
 800fc08:	308d883a 	add	r6,r6,r2
 800fc0c:	30800015 	stw	r2,0(r6)
 800fc10:	003fac06 	br	800fac4 <_free_r+0xf0>
 800fc14:	00c00504 	movi	r3,20
 800fc18:	19401536 	bltu	r3,r5,800fc70 <_free_r+0x29c>
 800fc1c:	28c01704 	addi	r3,r5,92
 800fc20:	18c7883a 	add	r3,r3,r3
 800fc24:	294016c4 	addi	r5,r5,91
 800fc28:	003fb406 	br	800fafc <_free_r+0x128>
 800fc2c:	280bd0ba 	srai	r5,r5,2
 800fc30:	00c00044 	movi	r3,1
 800fc34:	38800117 	ldw	r2,4(r7)
 800fc38:	194a983a 	sll	r5,r3,r5
 800fc3c:	2007883a 	mov	r3,r4
 800fc40:	2884b03a 	or	r2,r5,r2
 800fc44:	38800115 	stw	r2,4(r7)
 800fc48:	003fbb06 	br	800fb38 <_free_r+0x164>
 800fc4c:	21800515 	stw	r6,20(r4)
 800fc50:	21800415 	stw	r6,16(r4)
 800fc54:	10c00054 	ori	r3,r2,1
 800fc58:	31c00315 	stw	r7,12(r6)
 800fc5c:	31c00215 	stw	r7,8(r6)
 800fc60:	30c00115 	stw	r3,4(r6)
 800fc64:	308d883a 	add	r6,r6,r2
 800fc68:	30800015 	stw	r2,0(r6)
 800fc6c:	003f9506 	br	800fac4 <_free_r+0xf0>
 800fc70:	00c01504 	movi	r3,84
 800fc74:	19400536 	bltu	r3,r5,800fc8c <_free_r+0x2b8>
 800fc78:	100ad33a 	srli	r5,r2,12
 800fc7c:	28c01bc4 	addi	r3,r5,111
 800fc80:	18c7883a 	add	r3,r3,r3
 800fc84:	29401b84 	addi	r5,r5,110
 800fc88:	003f9c06 	br	800fafc <_free_r+0x128>
 800fc8c:	00c05504 	movi	r3,340
 800fc90:	19400536 	bltu	r3,r5,800fca8 <_free_r+0x2d4>
 800fc94:	100ad3fa 	srli	r5,r2,15
 800fc98:	28c01e04 	addi	r3,r5,120
 800fc9c:	18c7883a 	add	r3,r3,r3
 800fca0:	29401dc4 	addi	r5,r5,119
 800fca4:	003f9506 	br	800fafc <_free_r+0x128>
 800fca8:	00c15504 	movi	r3,1364
 800fcac:	19400536 	bltu	r3,r5,800fcc4 <_free_r+0x2f0>
 800fcb0:	100ad4ba 	srli	r5,r2,18
 800fcb4:	28c01f44 	addi	r3,r5,125
 800fcb8:	18c7883a 	add	r3,r3,r3
 800fcbc:	29401f04 	addi	r5,r5,124
 800fcc0:	003f8e06 	br	800fafc <_free_r+0x128>
 800fcc4:	00c03f84 	movi	r3,254
 800fcc8:	01401f84 	movi	r5,126
 800fccc:	003f8b06 	br	800fafc <_free_r+0x128>
 800fcd0:	10c00054 	ori	r3,r2,1
 800fcd4:	30c00115 	stw	r3,4(r6)
 800fcd8:	308d883a 	add	r6,r6,r2
 800fcdc:	30800015 	stw	r2,0(r6)
 800fce0:	003f7806 	br	800fac4 <_free_r+0xf0>

0800fce4 <__sfvwrite_r>:
 800fce4:	30800217 	ldw	r2,8(r6)
 800fce8:	10006726 	beq	r2,zero,800fe88 <__sfvwrite_r+0x1a4>
 800fcec:	28c0030b 	ldhu	r3,12(r5)
 800fcf0:	defff404 	addi	sp,sp,-48
 800fcf4:	dd400715 	stw	r21,28(sp)
 800fcf8:	dd000615 	stw	r20,24(sp)
 800fcfc:	dc000215 	stw	r16,8(sp)
 800fd00:	dfc00b15 	stw	ra,44(sp)
 800fd04:	df000a15 	stw	fp,40(sp)
 800fd08:	ddc00915 	stw	r23,36(sp)
 800fd0c:	dd800815 	stw	r22,32(sp)
 800fd10:	dcc00515 	stw	r19,20(sp)
 800fd14:	dc800415 	stw	r18,16(sp)
 800fd18:	dc400315 	stw	r17,12(sp)
 800fd1c:	1880020c 	andi	r2,r3,8
 800fd20:	2821883a 	mov	r16,r5
 800fd24:	202b883a 	mov	r21,r4
 800fd28:	3029883a 	mov	r20,r6
 800fd2c:	10002726 	beq	r2,zero,800fdcc <__sfvwrite_r+0xe8>
 800fd30:	28800417 	ldw	r2,16(r5)
 800fd34:	10002526 	beq	r2,zero,800fdcc <__sfvwrite_r+0xe8>
 800fd38:	1880008c 	andi	r2,r3,2
 800fd3c:	a4400017 	ldw	r17,0(r20)
 800fd40:	10002a26 	beq	r2,zero,800fdec <__sfvwrite_r+0x108>
 800fd44:	05a00034 	movhi	r22,32768
 800fd48:	0027883a 	mov	r19,zero
 800fd4c:	0025883a 	mov	r18,zero
 800fd50:	b5bf0004 	addi	r22,r22,-1024
 800fd54:	980d883a 	mov	r6,r19
 800fd58:	a809883a 	mov	r4,r21
 800fd5c:	90004626 	beq	r18,zero,800fe78 <__sfvwrite_r+0x194>
 800fd60:	900f883a 	mov	r7,r18
 800fd64:	b480022e 	bgeu	r22,r18,800fd70 <__sfvwrite_r+0x8c>
 800fd68:	01e00034 	movhi	r7,32768
 800fd6c:	39ff0004 	addi	r7,r7,-1024
 800fd70:	80800917 	ldw	r2,36(r16)
 800fd74:	81400717 	ldw	r5,28(r16)
 800fd78:	103ee83a 	callr	r2
 800fd7c:	00805a0e 	bge	zero,r2,800fee8 <__sfvwrite_r+0x204>
 800fd80:	a0c00217 	ldw	r3,8(r20)
 800fd84:	98a7883a 	add	r19,r19,r2
 800fd88:	90a5c83a 	sub	r18,r18,r2
 800fd8c:	1885c83a 	sub	r2,r3,r2
 800fd90:	a0800215 	stw	r2,8(r20)
 800fd94:	103fef1e 	bne	r2,zero,800fd54 <__sfvwrite_r+0x70>
 800fd98:	0005883a 	mov	r2,zero
 800fd9c:	dfc00b17 	ldw	ra,44(sp)
 800fda0:	df000a17 	ldw	fp,40(sp)
 800fda4:	ddc00917 	ldw	r23,36(sp)
 800fda8:	dd800817 	ldw	r22,32(sp)
 800fdac:	dd400717 	ldw	r21,28(sp)
 800fdb0:	dd000617 	ldw	r20,24(sp)
 800fdb4:	dcc00517 	ldw	r19,20(sp)
 800fdb8:	dc800417 	ldw	r18,16(sp)
 800fdbc:	dc400317 	ldw	r17,12(sp)
 800fdc0:	dc000217 	ldw	r16,8(sp)
 800fdc4:	dec00c04 	addi	sp,sp,48
 800fdc8:	f800283a 	ret
 800fdcc:	800b883a 	mov	r5,r16
 800fdd0:	a809883a 	mov	r4,r21
 800fdd4:	800d8540 	call	800d854 <__swsetup_r>
 800fdd8:	1000ee1e 	bne	r2,zero,8010194 <__sfvwrite_r+0x4b0>
 800fddc:	80c0030b 	ldhu	r3,12(r16)
 800fde0:	a4400017 	ldw	r17,0(r20)
 800fde4:	1880008c 	andi	r2,r3,2
 800fde8:	103fd61e 	bne	r2,zero,800fd44 <__sfvwrite_r+0x60>
 800fdec:	1880004c 	andi	r2,r3,1
 800fdf0:	1000421e 	bne	r2,zero,800fefc <__sfvwrite_r+0x218>
 800fdf4:	0039883a 	mov	fp,zero
 800fdf8:	0025883a 	mov	r18,zero
 800fdfc:	90001a26 	beq	r18,zero,800fe68 <__sfvwrite_r+0x184>
 800fe00:	1880800c 	andi	r2,r3,512
 800fe04:	84c00217 	ldw	r19,8(r16)
 800fe08:	10002126 	beq	r2,zero,800fe90 <__sfvwrite_r+0x1ac>
 800fe0c:	982f883a 	mov	r23,r19
 800fe10:	94c09636 	bltu	r18,r19,801006c <__sfvwrite_r+0x388>
 800fe14:	1881200c 	andi	r2,r3,1152
 800fe18:	1000a11e 	bne	r2,zero,80100a0 <__sfvwrite_r+0x3bc>
 800fe1c:	81000017 	ldw	r4,0(r16)
 800fe20:	b80d883a 	mov	r6,r23
 800fe24:	e00b883a 	mov	r5,fp
 800fe28:	801070c0 	call	801070c <memmove>
 800fe2c:	80c00217 	ldw	r3,8(r16)
 800fe30:	81000017 	ldw	r4,0(r16)
 800fe34:	9005883a 	mov	r2,r18
 800fe38:	1ce7c83a 	sub	r19,r3,r19
 800fe3c:	25cf883a 	add	r7,r4,r23
 800fe40:	84c00215 	stw	r19,8(r16)
 800fe44:	81c00015 	stw	r7,0(r16)
 800fe48:	a0c00217 	ldw	r3,8(r20)
 800fe4c:	e0b9883a 	add	fp,fp,r2
 800fe50:	90a5c83a 	sub	r18,r18,r2
 800fe54:	18a7c83a 	sub	r19,r3,r2
 800fe58:	a4c00215 	stw	r19,8(r20)
 800fe5c:	983fce26 	beq	r19,zero,800fd98 <__sfvwrite_r+0xb4>
 800fe60:	80c0030b 	ldhu	r3,12(r16)
 800fe64:	903fe61e 	bne	r18,zero,800fe00 <__sfvwrite_r+0x11c>
 800fe68:	8f000017 	ldw	fp,0(r17)
 800fe6c:	8c800117 	ldw	r18,4(r17)
 800fe70:	8c400204 	addi	r17,r17,8
 800fe74:	003fe106 	br	800fdfc <__sfvwrite_r+0x118>
 800fe78:	8cc00017 	ldw	r19,0(r17)
 800fe7c:	8c800117 	ldw	r18,4(r17)
 800fe80:	8c400204 	addi	r17,r17,8
 800fe84:	003fb306 	br	800fd54 <__sfvwrite_r+0x70>
 800fe88:	0005883a 	mov	r2,zero
 800fe8c:	f800283a 	ret
 800fe90:	81000017 	ldw	r4,0(r16)
 800fe94:	80800417 	ldw	r2,16(r16)
 800fe98:	11005a36 	bltu	r2,r4,8010004 <__sfvwrite_r+0x320>
 800fe9c:	85c00517 	ldw	r23,20(r16)
 800fea0:	95c05836 	bltu	r18,r23,8010004 <__sfvwrite_r+0x320>
 800fea4:	00a00034 	movhi	r2,32768
 800fea8:	10bfffc4 	addi	r2,r2,-1
 800feac:	9009883a 	mov	r4,r18
 800feb0:	1480012e 	bgeu	r2,r18,800feb8 <__sfvwrite_r+0x1d4>
 800feb4:	1009883a 	mov	r4,r2
 800feb8:	b80b883a 	mov	r5,r23
 800febc:	8009fc40 	call	8009fc4 <__divsi3>
 800fec0:	b80b883a 	mov	r5,r23
 800fec4:	1009883a 	mov	r4,r2
 800fec8:	800a1780 	call	800a178 <__mulsi3>
 800fecc:	81400717 	ldw	r5,28(r16)
 800fed0:	80c00917 	ldw	r3,36(r16)
 800fed4:	100f883a 	mov	r7,r2
 800fed8:	e00d883a 	mov	r6,fp
 800fedc:	a809883a 	mov	r4,r21
 800fee0:	183ee83a 	callr	r3
 800fee4:	00bfd816 	blt	zero,r2,800fe48 <__sfvwrite_r+0x164>
 800fee8:	8080030b 	ldhu	r2,12(r16)
 800feec:	10801014 	ori	r2,r2,64
 800fef0:	8080030d 	sth	r2,12(r16)
 800fef4:	00bfffc4 	movi	r2,-1
 800fef8:	003fa806 	br	800fd9c <__sfvwrite_r+0xb8>
 800fefc:	0027883a 	mov	r19,zero
 800ff00:	0011883a 	mov	r8,zero
 800ff04:	0039883a 	mov	fp,zero
 800ff08:	0025883a 	mov	r18,zero
 800ff0c:	90001f26 	beq	r18,zero,800ff8c <__sfvwrite_r+0x2a8>
 800ff10:	40005a26 	beq	r8,zero,801007c <__sfvwrite_r+0x398>
 800ff14:	982d883a 	mov	r22,r19
 800ff18:	94c0012e 	bgeu	r18,r19,800ff20 <__sfvwrite_r+0x23c>
 800ff1c:	902d883a 	mov	r22,r18
 800ff20:	81000017 	ldw	r4,0(r16)
 800ff24:	80800417 	ldw	r2,16(r16)
 800ff28:	b02f883a 	mov	r23,r22
 800ff2c:	81c00517 	ldw	r7,20(r16)
 800ff30:	1100032e 	bgeu	r2,r4,800ff40 <__sfvwrite_r+0x25c>
 800ff34:	80c00217 	ldw	r3,8(r16)
 800ff38:	38c7883a 	add	r3,r7,r3
 800ff3c:	1d801816 	blt	r3,r22,800ffa0 <__sfvwrite_r+0x2bc>
 800ff40:	b1c03e16 	blt	r22,r7,801003c <__sfvwrite_r+0x358>
 800ff44:	80800917 	ldw	r2,36(r16)
 800ff48:	81400717 	ldw	r5,28(r16)
 800ff4c:	e00d883a 	mov	r6,fp
 800ff50:	da000115 	stw	r8,4(sp)
 800ff54:	a809883a 	mov	r4,r21
 800ff58:	103ee83a 	callr	r2
 800ff5c:	102f883a 	mov	r23,r2
 800ff60:	da000117 	ldw	r8,4(sp)
 800ff64:	00bfe00e 	bge	zero,r2,800fee8 <__sfvwrite_r+0x204>
 800ff68:	9de7c83a 	sub	r19,r19,r23
 800ff6c:	98001f26 	beq	r19,zero,800ffec <__sfvwrite_r+0x308>
 800ff70:	a0800217 	ldw	r2,8(r20)
 800ff74:	e5f9883a 	add	fp,fp,r23
 800ff78:	95e5c83a 	sub	r18,r18,r23
 800ff7c:	15efc83a 	sub	r23,r2,r23
 800ff80:	a5c00215 	stw	r23,8(r20)
 800ff84:	b83f8426 	beq	r23,zero,800fd98 <__sfvwrite_r+0xb4>
 800ff88:	903fe11e 	bne	r18,zero,800ff10 <__sfvwrite_r+0x22c>
 800ff8c:	8f000017 	ldw	fp,0(r17)
 800ff90:	8c800117 	ldw	r18,4(r17)
 800ff94:	0011883a 	mov	r8,zero
 800ff98:	8c400204 	addi	r17,r17,8
 800ff9c:	003fdb06 	br	800ff0c <__sfvwrite_r+0x228>
 800ffa0:	180d883a 	mov	r6,r3
 800ffa4:	e00b883a 	mov	r5,fp
 800ffa8:	da000115 	stw	r8,4(sp)
 800ffac:	d8c00015 	stw	r3,0(sp)
 800ffb0:	801070c0 	call	801070c <memmove>
 800ffb4:	d8c00017 	ldw	r3,0(sp)
 800ffb8:	80800017 	ldw	r2,0(r16)
 800ffbc:	800b883a 	mov	r5,r16
 800ffc0:	a809883a 	mov	r4,r21
 800ffc4:	10c5883a 	add	r2,r2,r3
 800ffc8:	80800015 	stw	r2,0(r16)
 800ffcc:	d8c00015 	stw	r3,0(sp)
 800ffd0:	800f4740 	call	800f474 <_fflush_r>
 800ffd4:	d8c00017 	ldw	r3,0(sp)
 800ffd8:	da000117 	ldw	r8,4(sp)
 800ffdc:	103fc21e 	bne	r2,zero,800fee8 <__sfvwrite_r+0x204>
 800ffe0:	182f883a 	mov	r23,r3
 800ffe4:	9de7c83a 	sub	r19,r19,r23
 800ffe8:	983fe11e 	bne	r19,zero,800ff70 <__sfvwrite_r+0x28c>
 800ffec:	800b883a 	mov	r5,r16
 800fff0:	a809883a 	mov	r4,r21
 800fff4:	800f4740 	call	800f474 <_fflush_r>
 800fff8:	103fbb1e 	bne	r2,zero,800fee8 <__sfvwrite_r+0x204>
 800fffc:	0011883a 	mov	r8,zero
 8010000:	003fdb06 	br	800ff70 <__sfvwrite_r+0x28c>
 8010004:	94c0012e 	bgeu	r18,r19,801000c <__sfvwrite_r+0x328>
 8010008:	9027883a 	mov	r19,r18
 801000c:	980d883a 	mov	r6,r19
 8010010:	e00b883a 	mov	r5,fp
 8010014:	801070c0 	call	801070c <memmove>
 8010018:	80800217 	ldw	r2,8(r16)
 801001c:	80c00017 	ldw	r3,0(r16)
 8010020:	14c5c83a 	sub	r2,r2,r19
 8010024:	1cc7883a 	add	r3,r3,r19
 8010028:	80800215 	stw	r2,8(r16)
 801002c:	80c00015 	stw	r3,0(r16)
 8010030:	10004326 	beq	r2,zero,8010140 <__sfvwrite_r+0x45c>
 8010034:	9805883a 	mov	r2,r19
 8010038:	003f8306 	br	800fe48 <__sfvwrite_r+0x164>
 801003c:	b00d883a 	mov	r6,r22
 8010040:	e00b883a 	mov	r5,fp
 8010044:	da000115 	stw	r8,4(sp)
 8010048:	801070c0 	call	801070c <memmove>
 801004c:	80800217 	ldw	r2,8(r16)
 8010050:	80c00017 	ldw	r3,0(r16)
 8010054:	da000117 	ldw	r8,4(sp)
 8010058:	1585c83a 	sub	r2,r2,r22
 801005c:	1dad883a 	add	r22,r3,r22
 8010060:	80800215 	stw	r2,8(r16)
 8010064:	85800015 	stw	r22,0(r16)
 8010068:	003fbf06 	br	800ff68 <__sfvwrite_r+0x284>
 801006c:	81000017 	ldw	r4,0(r16)
 8010070:	9027883a 	mov	r19,r18
 8010074:	902f883a 	mov	r23,r18
 8010078:	003f6906 	br	800fe20 <__sfvwrite_r+0x13c>
 801007c:	900d883a 	mov	r6,r18
 8010080:	01400284 	movi	r5,10
 8010084:	e009883a 	mov	r4,fp
 8010088:	80106280 	call	8010628 <memchr>
 801008c:	10003e26 	beq	r2,zero,8010188 <__sfvwrite_r+0x4a4>
 8010090:	10800044 	addi	r2,r2,1
 8010094:	1727c83a 	sub	r19,r2,fp
 8010098:	02000044 	movi	r8,1
 801009c:	003f9d06 	br	800ff14 <__sfvwrite_r+0x230>
 80100a0:	80800517 	ldw	r2,20(r16)
 80100a4:	81400417 	ldw	r5,16(r16)
 80100a8:	81c00017 	ldw	r7,0(r16)
 80100ac:	10a7883a 	add	r19,r2,r2
 80100b0:	9885883a 	add	r2,r19,r2
 80100b4:	1026d7fa 	srli	r19,r2,31
 80100b8:	396dc83a 	sub	r22,r7,r5
 80100bc:	b1000044 	addi	r4,r22,1
 80100c0:	9885883a 	add	r2,r19,r2
 80100c4:	1027d07a 	srai	r19,r2,1
 80100c8:	2485883a 	add	r2,r4,r18
 80100cc:	980d883a 	mov	r6,r19
 80100d0:	9880022e 	bgeu	r19,r2,80100dc <__sfvwrite_r+0x3f8>
 80100d4:	1027883a 	mov	r19,r2
 80100d8:	100d883a 	mov	r6,r2
 80100dc:	18c1000c 	andi	r3,r3,1024
 80100e0:	18001c26 	beq	r3,zero,8010154 <__sfvwrite_r+0x470>
 80100e4:	300b883a 	mov	r5,r6
 80100e8:	a809883a 	mov	r4,r21
 80100ec:	800a2800 	call	800a280 <_malloc_r>
 80100f0:	102f883a 	mov	r23,r2
 80100f4:	10002926 	beq	r2,zero,801019c <__sfvwrite_r+0x4b8>
 80100f8:	81400417 	ldw	r5,16(r16)
 80100fc:	b00d883a 	mov	r6,r22
 8010100:	1009883a 	mov	r4,r2
 8010104:	800ab080 	call	800ab08 <memcpy>
 8010108:	8080030b 	ldhu	r2,12(r16)
 801010c:	00fedfc4 	movi	r3,-1153
 8010110:	10c4703a 	and	r2,r2,r3
 8010114:	10802014 	ori	r2,r2,128
 8010118:	8080030d 	sth	r2,12(r16)
 801011c:	bd89883a 	add	r4,r23,r22
 8010120:	9d8fc83a 	sub	r7,r19,r22
 8010124:	85c00415 	stw	r23,16(r16)
 8010128:	84c00515 	stw	r19,20(r16)
 801012c:	81000015 	stw	r4,0(r16)
 8010130:	9027883a 	mov	r19,r18
 8010134:	81c00215 	stw	r7,8(r16)
 8010138:	902f883a 	mov	r23,r18
 801013c:	003f3806 	br	800fe20 <__sfvwrite_r+0x13c>
 8010140:	800b883a 	mov	r5,r16
 8010144:	a809883a 	mov	r4,r21
 8010148:	800f4740 	call	800f474 <_fflush_r>
 801014c:	103fb926 	beq	r2,zero,8010034 <__sfvwrite_r+0x350>
 8010150:	003f6506 	br	800fee8 <__sfvwrite_r+0x204>
 8010154:	a809883a 	mov	r4,r21
 8010158:	8011a880 	call	8011a88 <_realloc_r>
 801015c:	102f883a 	mov	r23,r2
 8010160:	103fee1e 	bne	r2,zero,801011c <__sfvwrite_r+0x438>
 8010164:	81400417 	ldw	r5,16(r16)
 8010168:	a809883a 	mov	r4,r21
 801016c:	800f9d40 	call	800f9d4 <_free_r>
 8010170:	8080030b 	ldhu	r2,12(r16)
 8010174:	00ffdfc4 	movi	r3,-129
 8010178:	1884703a 	and	r2,r3,r2
 801017c:	00c00304 	movi	r3,12
 8010180:	a8c00015 	stw	r3,0(r21)
 8010184:	003f5906 	br	800feec <__sfvwrite_r+0x208>
 8010188:	94c00044 	addi	r19,r18,1
 801018c:	02000044 	movi	r8,1
 8010190:	003f6006 	br	800ff14 <__sfvwrite_r+0x230>
 8010194:	00bfffc4 	movi	r2,-1
 8010198:	003f0006 	br	800fd9c <__sfvwrite_r+0xb8>
 801019c:	00800304 	movi	r2,12
 80101a0:	a8800015 	stw	r2,0(r21)
 80101a4:	8080030b 	ldhu	r2,12(r16)
 80101a8:	003f5006 	br	800feec <__sfvwrite_r+0x208>

080101ac <_fwalk>:
 80101ac:	defff704 	addi	sp,sp,-36
 80101b0:	dd000415 	stw	r20,16(sp)
 80101b4:	dfc00815 	stw	ra,32(sp)
 80101b8:	ddc00715 	stw	r23,28(sp)
 80101bc:	dd800615 	stw	r22,24(sp)
 80101c0:	dd400515 	stw	r21,20(sp)
 80101c4:	dcc00315 	stw	r19,12(sp)
 80101c8:	dc800215 	stw	r18,8(sp)
 80101cc:	dc400115 	stw	r17,4(sp)
 80101d0:	dc000015 	stw	r16,0(sp)
 80101d4:	2500b804 	addi	r20,r4,736
 80101d8:	a0002326 	beq	r20,zero,8010268 <_fwalk+0xbc>
 80101dc:	282b883a 	mov	r21,r5
 80101e0:	002f883a 	mov	r23,zero
 80101e4:	05800044 	movi	r22,1
 80101e8:	04ffffc4 	movi	r19,-1
 80101ec:	a4400117 	ldw	r17,4(r20)
 80101f0:	a4800217 	ldw	r18,8(r20)
 80101f4:	8c7fffc4 	addi	r17,r17,-1
 80101f8:	88000d16 	blt	r17,zero,8010230 <_fwalk+0x84>
 80101fc:	94000304 	addi	r16,r18,12
 8010200:	94800384 	addi	r18,r18,14
 8010204:	8080000b 	ldhu	r2,0(r16)
 8010208:	8c7fffc4 	addi	r17,r17,-1
 801020c:	813ffd04 	addi	r4,r16,-12
 8010210:	b080042e 	bgeu	r22,r2,8010224 <_fwalk+0x78>
 8010214:	9080000f 	ldh	r2,0(r18)
 8010218:	14c00226 	beq	r2,r19,8010224 <_fwalk+0x78>
 801021c:	a83ee83a 	callr	r21
 8010220:	b8aeb03a 	or	r23,r23,r2
 8010224:	84001a04 	addi	r16,r16,104
 8010228:	94801a04 	addi	r18,r18,104
 801022c:	8cfff51e 	bne	r17,r19,8010204 <_fwalk+0x58>
 8010230:	a5000017 	ldw	r20,0(r20)
 8010234:	a03fed1e 	bne	r20,zero,80101ec <_fwalk+0x40>
 8010238:	b805883a 	mov	r2,r23
 801023c:	dfc00817 	ldw	ra,32(sp)
 8010240:	ddc00717 	ldw	r23,28(sp)
 8010244:	dd800617 	ldw	r22,24(sp)
 8010248:	dd400517 	ldw	r21,20(sp)
 801024c:	dd000417 	ldw	r20,16(sp)
 8010250:	dcc00317 	ldw	r19,12(sp)
 8010254:	dc800217 	ldw	r18,8(sp)
 8010258:	dc400117 	ldw	r17,4(sp)
 801025c:	dc000017 	ldw	r16,0(sp)
 8010260:	dec00904 	addi	sp,sp,36
 8010264:	f800283a 	ret
 8010268:	002f883a 	mov	r23,zero
 801026c:	003ff206 	br	8010238 <_fwalk+0x8c>

08010270 <_fwalk_reent>:
 8010270:	defff704 	addi	sp,sp,-36
 8010274:	dd000415 	stw	r20,16(sp)
 8010278:	dfc00815 	stw	ra,32(sp)
 801027c:	ddc00715 	stw	r23,28(sp)
 8010280:	dd800615 	stw	r22,24(sp)
 8010284:	dd400515 	stw	r21,20(sp)
 8010288:	dcc00315 	stw	r19,12(sp)
 801028c:	dc800215 	stw	r18,8(sp)
 8010290:	dc400115 	stw	r17,4(sp)
 8010294:	dc000015 	stw	r16,0(sp)
 8010298:	2500b804 	addi	r20,r4,736
 801029c:	a0002326 	beq	r20,zero,801032c <_fwalk_reent+0xbc>
 80102a0:	282b883a 	mov	r21,r5
 80102a4:	2027883a 	mov	r19,r4
 80102a8:	002f883a 	mov	r23,zero
 80102ac:	05800044 	movi	r22,1
 80102b0:	04bfffc4 	movi	r18,-1
 80102b4:	a4400117 	ldw	r17,4(r20)
 80102b8:	a4000217 	ldw	r16,8(r20)
 80102bc:	8c7fffc4 	addi	r17,r17,-1
 80102c0:	88000c16 	blt	r17,zero,80102f4 <_fwalk_reent+0x84>
 80102c4:	84000304 	addi	r16,r16,12
 80102c8:	8080000b 	ldhu	r2,0(r16)
 80102cc:	8c7fffc4 	addi	r17,r17,-1
 80102d0:	817ffd04 	addi	r5,r16,-12
 80102d4:	b080052e 	bgeu	r22,r2,80102ec <_fwalk_reent+0x7c>
 80102d8:	8080008f 	ldh	r2,2(r16)
 80102dc:	9809883a 	mov	r4,r19
 80102e0:	14800226 	beq	r2,r18,80102ec <_fwalk_reent+0x7c>
 80102e4:	a83ee83a 	callr	r21
 80102e8:	b8aeb03a 	or	r23,r23,r2
 80102ec:	84001a04 	addi	r16,r16,104
 80102f0:	8cbff51e 	bne	r17,r18,80102c8 <_fwalk_reent+0x58>
 80102f4:	a5000017 	ldw	r20,0(r20)
 80102f8:	a03fee1e 	bne	r20,zero,80102b4 <_fwalk_reent+0x44>
 80102fc:	b805883a 	mov	r2,r23
 8010300:	dfc00817 	ldw	ra,32(sp)
 8010304:	ddc00717 	ldw	r23,28(sp)
 8010308:	dd800617 	ldw	r22,24(sp)
 801030c:	dd400517 	ldw	r21,20(sp)
 8010310:	dd000417 	ldw	r20,16(sp)
 8010314:	dcc00317 	ldw	r19,12(sp)
 8010318:	dc800217 	ldw	r18,8(sp)
 801031c:	dc400117 	ldw	r17,4(sp)
 8010320:	dc000017 	ldw	r16,0(sp)
 8010324:	dec00904 	addi	sp,sp,36
 8010328:	f800283a 	ret
 801032c:	002f883a 	mov	r23,zero
 8010330:	003ff206 	br	80102fc <_fwalk_reent+0x8c>

08010334 <_gettimeofday_r>:
 8010334:	defffd04 	addi	sp,sp,-12
 8010338:	2805883a 	mov	r2,r5
 801033c:	dc000015 	stw	r16,0(sp)
 8010340:	040200b4 	movhi	r16,2050
 8010344:	dc400115 	stw	r17,4(sp)
 8010348:	84394d04 	addi	r16,r16,-6860
 801034c:	2023883a 	mov	r17,r4
 8010350:	300b883a 	mov	r5,r6
 8010354:	1009883a 	mov	r4,r2
 8010358:	dfc00215 	stw	ra,8(sp)
 801035c:	80000015 	stw	zero,0(r16)
 8010360:	80178780 	call	8017878 <gettimeofday>
 8010364:	00ffffc4 	movi	r3,-1
 8010368:	10c00526 	beq	r2,r3,8010380 <_gettimeofday_r+0x4c>
 801036c:	dfc00217 	ldw	ra,8(sp)
 8010370:	dc400117 	ldw	r17,4(sp)
 8010374:	dc000017 	ldw	r16,0(sp)
 8010378:	dec00304 	addi	sp,sp,12
 801037c:	f800283a 	ret
 8010380:	80c00017 	ldw	r3,0(r16)
 8010384:	183ff926 	beq	r3,zero,801036c <_gettimeofday_r+0x38>
 8010388:	88c00015 	stw	r3,0(r17)
 801038c:	003ff706 	br	801036c <_gettimeofday_r+0x38>

08010390 <_setlocale_r>:
 8010390:	30001b26 	beq	r6,zero,8010400 <_setlocale_r+0x70>
 8010394:	014200b4 	movhi	r5,2050
 8010398:	defffe04 	addi	sp,sp,-8
 801039c:	296ab104 	addi	r5,r5,-21820
 80103a0:	3009883a 	mov	r4,r6
 80103a4:	dc000015 	stw	r16,0(sp)
 80103a8:	dfc00115 	stw	ra,4(sp)
 80103ac:	3021883a 	mov	r16,r6
 80103b0:	800af2c0 	call	800af2c <strcmp>
 80103b4:	1000061e 	bne	r2,zero,80103d0 <_setlocale_r+0x40>
 80103b8:	008200b4 	movhi	r2,2050
 80103bc:	10aa9204 	addi	r2,r2,-21944
 80103c0:	dfc00117 	ldw	ra,4(sp)
 80103c4:	dc000017 	ldw	r16,0(sp)
 80103c8:	dec00204 	addi	sp,sp,8
 80103cc:	f800283a 	ret
 80103d0:	014200b4 	movhi	r5,2050
 80103d4:	296a9204 	addi	r5,r5,-21944
 80103d8:	8009883a 	mov	r4,r16
 80103dc:	800af2c0 	call	800af2c <strcmp>
 80103e0:	103ff526 	beq	r2,zero,80103b8 <_setlocale_r+0x28>
 80103e4:	014200b4 	movhi	r5,2050
 80103e8:	296a9c04 	addi	r5,r5,-21904
 80103ec:	8009883a 	mov	r4,r16
 80103f0:	800af2c0 	call	800af2c <strcmp>
 80103f4:	103ff026 	beq	r2,zero,80103b8 <_setlocale_r+0x28>
 80103f8:	0005883a 	mov	r2,zero
 80103fc:	003ff006 	br	80103c0 <_setlocale_r+0x30>
 8010400:	008200b4 	movhi	r2,2050
 8010404:	10aa9204 	addi	r2,r2,-21944
 8010408:	f800283a 	ret

0801040c <__locale_charset>:
 801040c:	008200b4 	movhi	r2,2050
 8010410:	10ad7904 	addi	r2,r2,-18972
 8010414:	f800283a 	ret

08010418 <__locale_mb_cur_max>:
 8010418:	008200b4 	movhi	r2,2050
 801041c:	10b22904 	addi	r2,r2,-14172
 8010420:	10800017 	ldw	r2,0(r2)
 8010424:	f800283a 	ret

08010428 <__locale_msgcharset>:
 8010428:	008200b4 	movhi	r2,2050
 801042c:	10ad7104 	addi	r2,r2,-19004
 8010430:	f800283a 	ret

08010434 <__locale_cjk_lang>:
 8010434:	0005883a 	mov	r2,zero
 8010438:	f800283a 	ret

0801043c <_localeconv_r>:
 801043c:	008200b4 	movhi	r2,2050
 8010440:	10ad8104 	addi	r2,r2,-18940
 8010444:	f800283a 	ret

08010448 <setlocale>:
 8010448:	008200b4 	movhi	r2,2050
 801044c:	10b22604 	addi	r2,r2,-14184
 8010450:	280d883a 	mov	r6,r5
 8010454:	200b883a 	mov	r5,r4
 8010458:	11000017 	ldw	r4,0(r2)
 801045c:	80103901 	jmpi	8010390 <_setlocale_r>

08010460 <localeconv>:
 8010460:	008200b4 	movhi	r2,2050
 8010464:	10ad8104 	addi	r2,r2,-18940
 8010468:	f800283a 	ret

0801046c <__smakebuf_r>:
 801046c:	2880030b 	ldhu	r2,12(r5)
 8010470:	10c0008c 	andi	r3,r2,2
 8010474:	1800411e 	bne	r3,zero,801057c <__smakebuf_r+0x110>
 8010478:	deffec04 	addi	sp,sp,-80
 801047c:	dc000f15 	stw	r16,60(sp)
 8010480:	2821883a 	mov	r16,r5
 8010484:	2940038f 	ldh	r5,14(r5)
 8010488:	dc401015 	stw	r17,64(sp)
 801048c:	dfc01315 	stw	ra,76(sp)
 8010490:	dcc01215 	stw	r19,72(sp)
 8010494:	dc801115 	stw	r18,68(sp)
 8010498:	2023883a 	mov	r17,r4
 801049c:	28001c16 	blt	r5,zero,8010510 <__smakebuf_r+0xa4>
 80104a0:	d80d883a 	mov	r6,sp
 80104a4:	8013e880 	call	8013e88 <_fstat_r>
 80104a8:	10001816 	blt	r2,zero,801050c <__smakebuf_r+0xa0>
 80104ac:	d8800117 	ldw	r2,4(sp)
 80104b0:	00e00014 	movui	r3,32768
 80104b4:	10bc000c 	andi	r2,r2,61440
 80104b8:	14c80020 	cmpeqi	r19,r2,8192
 80104bc:	10c03726 	beq	r2,r3,801059c <__smakebuf_r+0x130>
 80104c0:	80c0030b 	ldhu	r3,12(r16)
 80104c4:	18c20014 	ori	r3,r3,2048
 80104c8:	80c0030d 	sth	r3,12(r16)
 80104cc:	00c80004 	movi	r3,8192
 80104d0:	10c0521e 	bne	r2,r3,801061c <__smakebuf_r+0x1b0>
 80104d4:	8140038f 	ldh	r5,14(r16)
 80104d8:	8809883a 	mov	r4,r17
 80104dc:	8013ee40 	call	8013ee4 <_isatty_r>
 80104e0:	10004c26 	beq	r2,zero,8010614 <__smakebuf_r+0x1a8>
 80104e4:	8080030b 	ldhu	r2,12(r16)
 80104e8:	80c010c4 	addi	r3,r16,67
 80104ec:	80c00015 	stw	r3,0(r16)
 80104f0:	10800054 	ori	r2,r2,1
 80104f4:	8080030d 	sth	r2,12(r16)
 80104f8:	00800044 	movi	r2,1
 80104fc:	80c00415 	stw	r3,16(r16)
 8010500:	80800515 	stw	r2,20(r16)
 8010504:	04810004 	movi	r18,1024
 8010508:	00000706 	br	8010528 <__smakebuf_r+0xbc>
 801050c:	8080030b 	ldhu	r2,12(r16)
 8010510:	10c0200c 	andi	r3,r2,128
 8010514:	18001f1e 	bne	r3,zero,8010594 <__smakebuf_r+0x128>
 8010518:	04810004 	movi	r18,1024
 801051c:	10820014 	ori	r2,r2,2048
 8010520:	8080030d 	sth	r2,12(r16)
 8010524:	0027883a 	mov	r19,zero
 8010528:	900b883a 	mov	r5,r18
 801052c:	8809883a 	mov	r4,r17
 8010530:	800a2800 	call	800a280 <_malloc_r>
 8010534:	10002c26 	beq	r2,zero,80105e8 <__smakebuf_r+0x17c>
 8010538:	80c0030b 	ldhu	r3,12(r16)
 801053c:	01020074 	movhi	r4,2049
 8010540:	213d4204 	addi	r4,r4,-2808
 8010544:	89000f15 	stw	r4,60(r17)
 8010548:	18c02014 	ori	r3,r3,128
 801054c:	80c0030d 	sth	r3,12(r16)
 8010550:	80800015 	stw	r2,0(r16)
 8010554:	80800415 	stw	r2,16(r16)
 8010558:	84800515 	stw	r18,20(r16)
 801055c:	98001a1e 	bne	r19,zero,80105c8 <__smakebuf_r+0x15c>
 8010560:	dfc01317 	ldw	ra,76(sp)
 8010564:	dcc01217 	ldw	r19,72(sp)
 8010568:	dc801117 	ldw	r18,68(sp)
 801056c:	dc401017 	ldw	r17,64(sp)
 8010570:	dc000f17 	ldw	r16,60(sp)
 8010574:	dec01404 	addi	sp,sp,80
 8010578:	f800283a 	ret
 801057c:	288010c4 	addi	r2,r5,67
 8010580:	28800015 	stw	r2,0(r5)
 8010584:	28800415 	stw	r2,16(r5)
 8010588:	00800044 	movi	r2,1
 801058c:	28800515 	stw	r2,20(r5)
 8010590:	f800283a 	ret
 8010594:	04801004 	movi	r18,64
 8010598:	003fe006 	br	801051c <__smakebuf_r+0xb0>
 801059c:	81000a17 	ldw	r4,40(r16)
 80105a0:	00c20074 	movhi	r3,2049
 80105a4:	18c84e04 	addi	r3,r3,8504
 80105a8:	20ffc51e 	bne	r4,r3,80104c0 <__smakebuf_r+0x54>
 80105ac:	8080030b 	ldhu	r2,12(r16)
 80105b0:	04810004 	movi	r18,1024
 80105b4:	84801315 	stw	r18,76(r16)
 80105b8:	1484b03a 	or	r2,r2,r18
 80105bc:	8080030d 	sth	r2,12(r16)
 80105c0:	0027883a 	mov	r19,zero
 80105c4:	003fd806 	br	8010528 <__smakebuf_r+0xbc>
 80105c8:	8140038f 	ldh	r5,14(r16)
 80105cc:	8809883a 	mov	r4,r17
 80105d0:	8013ee40 	call	8013ee4 <_isatty_r>
 80105d4:	103fe226 	beq	r2,zero,8010560 <__smakebuf_r+0xf4>
 80105d8:	8080030b 	ldhu	r2,12(r16)
 80105dc:	10800054 	ori	r2,r2,1
 80105e0:	8080030d 	sth	r2,12(r16)
 80105e4:	003fde06 	br	8010560 <__smakebuf_r+0xf4>
 80105e8:	8080030b 	ldhu	r2,12(r16)
 80105ec:	10c0800c 	andi	r3,r2,512
 80105f0:	183fdb1e 	bne	r3,zero,8010560 <__smakebuf_r+0xf4>
 80105f4:	10800094 	ori	r2,r2,2
 80105f8:	80c010c4 	addi	r3,r16,67
 80105fc:	8080030d 	sth	r2,12(r16)
 8010600:	00800044 	movi	r2,1
 8010604:	80c00015 	stw	r3,0(r16)
 8010608:	80c00415 	stw	r3,16(r16)
 801060c:	80800515 	stw	r2,20(r16)
 8010610:	003fd306 	br	8010560 <__smakebuf_r+0xf4>
 8010614:	04810004 	movi	r18,1024
 8010618:	003fc306 	br	8010528 <__smakebuf_r+0xbc>
 801061c:	0027883a 	mov	r19,zero
 8010620:	04810004 	movi	r18,1024
 8010624:	003fc006 	br	8010528 <__smakebuf_r+0xbc>

08010628 <memchr>:
 8010628:	208000cc 	andi	r2,r4,3
 801062c:	280f883a 	mov	r7,r5
 8010630:	10003426 	beq	r2,zero,8010704 <memchr+0xdc>
 8010634:	30bfffc4 	addi	r2,r6,-1
 8010638:	30001a26 	beq	r6,zero,80106a4 <memchr+0x7c>
 801063c:	20c00003 	ldbu	r3,0(r4)
 8010640:	29803fcc 	andi	r6,r5,255
 8010644:	30c0051e 	bne	r6,r3,801065c <memchr+0x34>
 8010648:	00001806 	br	80106ac <memchr+0x84>
 801064c:	10001526 	beq	r2,zero,80106a4 <memchr+0x7c>
 8010650:	20c00003 	ldbu	r3,0(r4)
 8010654:	10bfffc4 	addi	r2,r2,-1
 8010658:	30c01426 	beq	r6,r3,80106ac <memchr+0x84>
 801065c:	21000044 	addi	r4,r4,1
 8010660:	20c000cc 	andi	r3,r4,3
 8010664:	183ff91e 	bne	r3,zero,801064c <memchr+0x24>
 8010668:	020000c4 	movi	r8,3
 801066c:	40801136 	bltu	r8,r2,80106b4 <memchr+0x8c>
 8010670:	10000c26 	beq	r2,zero,80106a4 <memchr+0x7c>
 8010674:	20c00003 	ldbu	r3,0(r4)
 8010678:	29403fcc 	andi	r5,r5,255
 801067c:	28c00b26 	beq	r5,r3,80106ac <memchr+0x84>
 8010680:	20c00044 	addi	r3,r4,1
 8010684:	39803fcc 	andi	r6,r7,255
 8010688:	2089883a 	add	r4,r4,r2
 801068c:	00000306 	br	801069c <memchr+0x74>
 8010690:	18c00044 	addi	r3,r3,1
 8010694:	197fffc3 	ldbu	r5,-1(r3)
 8010698:	31400526 	beq	r6,r5,80106b0 <memchr+0x88>
 801069c:	1805883a 	mov	r2,r3
 80106a0:	20fffb1e 	bne	r4,r3,8010690 <memchr+0x68>
 80106a4:	0005883a 	mov	r2,zero
 80106a8:	f800283a 	ret
 80106ac:	2005883a 	mov	r2,r4
 80106b0:	f800283a 	ret
 80106b4:	28c03fcc 	andi	r3,r5,255
 80106b8:	1812923a 	slli	r9,r3,8
 80106bc:	02ffbff4 	movhi	r11,65279
 80106c0:	02a02074 	movhi	r10,32897
 80106c4:	48d2b03a 	or	r9,r9,r3
 80106c8:	4806943a 	slli	r3,r9,16
 80106cc:	5affbfc4 	addi	r11,r11,-257
 80106d0:	52a02004 	addi	r10,r10,-32640
 80106d4:	48d2b03a 	or	r9,r9,r3
 80106d8:	20c00017 	ldw	r3,0(r4)
 80106dc:	48c6f03a 	xor	r3,r9,r3
 80106e0:	1acd883a 	add	r6,r3,r11
 80106e4:	00c6303a 	nor	r3,zero,r3
 80106e8:	30c6703a 	and	r3,r6,r3
 80106ec:	1a86703a 	and	r3,r3,r10
 80106f0:	183fe01e 	bne	r3,zero,8010674 <memchr+0x4c>
 80106f4:	10bfff04 	addi	r2,r2,-4
 80106f8:	21000104 	addi	r4,r4,4
 80106fc:	40bff636 	bltu	r8,r2,80106d8 <memchr+0xb0>
 8010700:	003fdb06 	br	8010670 <memchr+0x48>
 8010704:	3005883a 	mov	r2,r6
 8010708:	003fd706 	br	8010668 <memchr+0x40>

0801070c <memmove>:
 801070c:	2005883a 	mov	r2,r4
 8010710:	29000b2e 	bgeu	r5,r4,8010740 <memmove+0x34>
 8010714:	298f883a 	add	r7,r5,r6
 8010718:	21c0092e 	bgeu	r4,r7,8010740 <memmove+0x34>
 801071c:	2187883a 	add	r3,r4,r6
 8010720:	198bc83a 	sub	r5,r3,r6
 8010724:	30004826 	beq	r6,zero,8010848 <memmove+0x13c>
 8010728:	39ffffc4 	addi	r7,r7,-1
 801072c:	39000003 	ldbu	r4,0(r7)
 8010730:	18ffffc4 	addi	r3,r3,-1
 8010734:	19000005 	stb	r4,0(r3)
 8010738:	28fffb1e 	bne	r5,r3,8010728 <memmove+0x1c>
 801073c:	f800283a 	ret
 8010740:	00c003c4 	movi	r3,15
 8010744:	1980412e 	bgeu	r3,r6,801084c <memmove+0x140>
 8010748:	2886b03a 	or	r3,r5,r2
 801074c:	18c000cc 	andi	r3,r3,3
 8010750:	1800401e 	bne	r3,zero,8010854 <memmove+0x148>
 8010754:	33fffc04 	addi	r15,r6,-16
 8010758:	781ed13a 	srli	r15,r15,4
 801075c:	28c00104 	addi	r3,r5,4
 8010760:	13400104 	addi	r13,r2,4
 8010764:	781c913a 	slli	r14,r15,4
 8010768:	2b000204 	addi	r12,r5,8
 801076c:	12c00204 	addi	r11,r2,8
 8010770:	73800504 	addi	r14,r14,20
 8010774:	2a800304 	addi	r10,r5,12
 8010778:	12400304 	addi	r9,r2,12
 801077c:	2b9d883a 	add	r14,r5,r14
 8010780:	2811883a 	mov	r8,r5
 8010784:	100f883a 	mov	r7,r2
 8010788:	41000017 	ldw	r4,0(r8)
 801078c:	39c00404 	addi	r7,r7,16
 8010790:	18c00404 	addi	r3,r3,16
 8010794:	393ffc15 	stw	r4,-16(r7)
 8010798:	193ffc17 	ldw	r4,-16(r3)
 801079c:	6b400404 	addi	r13,r13,16
 80107a0:	5ac00404 	addi	r11,r11,16
 80107a4:	693ffc15 	stw	r4,-16(r13)
 80107a8:	61000017 	ldw	r4,0(r12)
 80107ac:	4a400404 	addi	r9,r9,16
 80107b0:	42000404 	addi	r8,r8,16
 80107b4:	593ffc15 	stw	r4,-16(r11)
 80107b8:	51000017 	ldw	r4,0(r10)
 80107bc:	63000404 	addi	r12,r12,16
 80107c0:	52800404 	addi	r10,r10,16
 80107c4:	493ffc15 	stw	r4,-16(r9)
 80107c8:	1bbfef1e 	bne	r3,r14,8010788 <memmove+0x7c>
 80107cc:	79000044 	addi	r4,r15,1
 80107d0:	2008913a 	slli	r4,r4,4
 80107d4:	328003cc 	andi	r10,r6,15
 80107d8:	02c000c4 	movi	r11,3
 80107dc:	1107883a 	add	r3,r2,r4
 80107e0:	290b883a 	add	r5,r5,r4
 80107e4:	5a801e2e 	bgeu	r11,r10,8010860 <memmove+0x154>
 80107e8:	1813883a 	mov	r9,r3
 80107ec:	2811883a 	mov	r8,r5
 80107f0:	500f883a 	mov	r7,r10
 80107f4:	41000017 	ldw	r4,0(r8)
 80107f8:	4a400104 	addi	r9,r9,4
 80107fc:	39ffff04 	addi	r7,r7,-4
 8010800:	493fff15 	stw	r4,-4(r9)
 8010804:	42000104 	addi	r8,r8,4
 8010808:	59fffa36 	bltu	r11,r7,80107f4 <memmove+0xe8>
 801080c:	513fff04 	addi	r4,r10,-4
 8010810:	2008d0ba 	srli	r4,r4,2
 8010814:	318000cc 	andi	r6,r6,3
 8010818:	21000044 	addi	r4,r4,1
 801081c:	2109883a 	add	r4,r4,r4
 8010820:	2109883a 	add	r4,r4,r4
 8010824:	1907883a 	add	r3,r3,r4
 8010828:	290b883a 	add	r5,r5,r4
 801082c:	30000b26 	beq	r6,zero,801085c <memmove+0x150>
 8010830:	198d883a 	add	r6,r3,r6
 8010834:	29c00003 	ldbu	r7,0(r5)
 8010838:	18c00044 	addi	r3,r3,1
 801083c:	29400044 	addi	r5,r5,1
 8010840:	19ffffc5 	stb	r7,-1(r3)
 8010844:	19bffb1e 	bne	r3,r6,8010834 <memmove+0x128>
 8010848:	f800283a 	ret
 801084c:	1007883a 	mov	r3,r2
 8010850:	003ff606 	br	801082c <memmove+0x120>
 8010854:	1007883a 	mov	r3,r2
 8010858:	003ff506 	br	8010830 <memmove+0x124>
 801085c:	f800283a 	ret
 8010860:	500d883a 	mov	r6,r10
 8010864:	003ff106 	br	801082c <memmove+0x120>

08010868 <_Balloc>:
 8010868:	20801317 	ldw	r2,76(r4)
 801086c:	defffc04 	addi	sp,sp,-16
 8010870:	dc400115 	stw	r17,4(sp)
 8010874:	dc000015 	stw	r16,0(sp)
 8010878:	dfc00315 	stw	ra,12(sp)
 801087c:	dc800215 	stw	r18,8(sp)
 8010880:	2023883a 	mov	r17,r4
 8010884:	2821883a 	mov	r16,r5
 8010888:	10000f26 	beq	r2,zero,80108c8 <_Balloc+0x60>
 801088c:	8407883a 	add	r3,r16,r16
 8010890:	18c7883a 	add	r3,r3,r3
 8010894:	10c7883a 	add	r3,r2,r3
 8010898:	18800017 	ldw	r2,0(r3)
 801089c:	10001126 	beq	r2,zero,80108e4 <_Balloc+0x7c>
 80108a0:	11000017 	ldw	r4,0(r2)
 80108a4:	19000015 	stw	r4,0(r3)
 80108a8:	10000415 	stw	zero,16(r2)
 80108ac:	10000315 	stw	zero,12(r2)
 80108b0:	dfc00317 	ldw	ra,12(sp)
 80108b4:	dc800217 	ldw	r18,8(sp)
 80108b8:	dc400117 	ldw	r17,4(sp)
 80108bc:	dc000017 	ldw	r16,0(sp)
 80108c0:	dec00404 	addi	sp,sp,16
 80108c4:	f800283a 	ret
 80108c8:	01800844 	movi	r6,33
 80108cc:	01400104 	movi	r5,4
 80108d0:	8013aa00 	call	8013aa0 <_calloc_r>
 80108d4:	88801315 	stw	r2,76(r17)
 80108d8:	103fec1e 	bne	r2,zero,801088c <_Balloc+0x24>
 80108dc:	0005883a 	mov	r2,zero
 80108e0:	003ff306 	br	80108b0 <_Balloc+0x48>
 80108e4:	01400044 	movi	r5,1
 80108e8:	2c24983a 	sll	r18,r5,r16
 80108ec:	8809883a 	mov	r4,r17
 80108f0:	91800144 	addi	r6,r18,5
 80108f4:	318d883a 	add	r6,r6,r6
 80108f8:	318d883a 	add	r6,r6,r6
 80108fc:	8013aa00 	call	8013aa0 <_calloc_r>
 8010900:	103ff626 	beq	r2,zero,80108dc <_Balloc+0x74>
 8010904:	14000115 	stw	r16,4(r2)
 8010908:	14800215 	stw	r18,8(r2)
 801090c:	003fe606 	br	80108a8 <_Balloc+0x40>

08010910 <_Bfree>:
 8010910:	28000826 	beq	r5,zero,8010934 <_Bfree+0x24>
 8010914:	28c00117 	ldw	r3,4(r5)
 8010918:	20801317 	ldw	r2,76(r4)
 801091c:	18c7883a 	add	r3,r3,r3
 8010920:	18c7883a 	add	r3,r3,r3
 8010924:	10c5883a 	add	r2,r2,r3
 8010928:	10c00017 	ldw	r3,0(r2)
 801092c:	28c00015 	stw	r3,0(r5)
 8010930:	11400015 	stw	r5,0(r2)
 8010934:	f800283a 	ret

08010938 <__multadd>:
 8010938:	defff704 	addi	sp,sp,-36
 801093c:	dc800215 	stw	r18,8(sp)
 8010940:	2c800417 	ldw	r18,16(r5)
 8010944:	dd800615 	stw	r22,24(sp)
 8010948:	dd400515 	stw	r21,20(sp)
 801094c:	dd000415 	stw	r20,16(sp)
 8010950:	dcc00315 	stw	r19,12(sp)
 8010954:	dc400115 	stw	r17,4(sp)
 8010958:	dc000015 	stw	r16,0(sp)
 801095c:	dfc00815 	stw	ra,32(sp)
 8010960:	ddc00715 	stw	r23,28(sp)
 8010964:	2827883a 	mov	r19,r5
 8010968:	2029883a 	mov	r20,r4
 801096c:	3023883a 	mov	r17,r6
 8010970:	3821883a 	mov	r16,r7
 8010974:	2d400504 	addi	r21,r5,20
 8010978:	002d883a 	mov	r22,zero
 801097c:	adc00017 	ldw	r23,0(r21)
 8010980:	880b883a 	mov	r5,r17
 8010984:	ad400104 	addi	r21,r21,4
 8010988:	b93fffcc 	andi	r4,r23,65535
 801098c:	800a1780 	call	800a178 <__mulsi3>
 8010990:	b808d43a 	srli	r4,r23,16
 8010994:	880b883a 	mov	r5,r17
 8010998:	1421883a 	add	r16,r2,r16
 801099c:	800a1780 	call	800a178 <__mulsi3>
 80109a0:	800ed43a 	srli	r7,r16,16
 80109a4:	80ffffcc 	andi	r3,r16,65535
 80109a8:	b5800044 	addi	r22,r22,1
 80109ac:	11c5883a 	add	r2,r2,r7
 80109b0:	100e943a 	slli	r7,r2,16
 80109b4:	1020d43a 	srli	r16,r2,16
 80109b8:	38c7883a 	add	r3,r7,r3
 80109bc:	a8ffff15 	stw	r3,-4(r21)
 80109c0:	b4bfee16 	blt	r22,r18,801097c <__multadd+0x44>
 80109c4:	80000926 	beq	r16,zero,80109ec <__multadd+0xb4>
 80109c8:	98800217 	ldw	r2,8(r19)
 80109cc:	9080130e 	bge	r18,r2,8010a1c <__multadd+0xe4>
 80109d0:	90800144 	addi	r2,r18,5
 80109d4:	1085883a 	add	r2,r2,r2
 80109d8:	1085883a 	add	r2,r2,r2
 80109dc:	9885883a 	add	r2,r19,r2
 80109e0:	14000015 	stw	r16,0(r2)
 80109e4:	94800044 	addi	r18,r18,1
 80109e8:	9c800415 	stw	r18,16(r19)
 80109ec:	9805883a 	mov	r2,r19
 80109f0:	dfc00817 	ldw	ra,32(sp)
 80109f4:	ddc00717 	ldw	r23,28(sp)
 80109f8:	dd800617 	ldw	r22,24(sp)
 80109fc:	dd400517 	ldw	r21,20(sp)
 8010a00:	dd000417 	ldw	r20,16(sp)
 8010a04:	dcc00317 	ldw	r19,12(sp)
 8010a08:	dc800217 	ldw	r18,8(sp)
 8010a0c:	dc400117 	ldw	r17,4(sp)
 8010a10:	dc000017 	ldw	r16,0(sp)
 8010a14:	dec00904 	addi	sp,sp,36
 8010a18:	f800283a 	ret
 8010a1c:	99400117 	ldw	r5,4(r19)
 8010a20:	a009883a 	mov	r4,r20
 8010a24:	29400044 	addi	r5,r5,1
 8010a28:	80108680 	call	8010868 <_Balloc>
 8010a2c:	99800417 	ldw	r6,16(r19)
 8010a30:	99400304 	addi	r5,r19,12
 8010a34:	11000304 	addi	r4,r2,12
 8010a38:	31800084 	addi	r6,r6,2
 8010a3c:	318d883a 	add	r6,r6,r6
 8010a40:	318d883a 	add	r6,r6,r6
 8010a44:	1023883a 	mov	r17,r2
 8010a48:	800ab080 	call	800ab08 <memcpy>
 8010a4c:	98000a26 	beq	r19,zero,8010a78 <__multadd+0x140>
 8010a50:	98c00117 	ldw	r3,4(r19)
 8010a54:	a0801317 	ldw	r2,76(r20)
 8010a58:	18c7883a 	add	r3,r3,r3
 8010a5c:	18c7883a 	add	r3,r3,r3
 8010a60:	10c5883a 	add	r2,r2,r3
 8010a64:	10c00017 	ldw	r3,0(r2)
 8010a68:	98c00015 	stw	r3,0(r19)
 8010a6c:	14c00015 	stw	r19,0(r2)
 8010a70:	8827883a 	mov	r19,r17
 8010a74:	003fd606 	br	80109d0 <__multadd+0x98>
 8010a78:	8827883a 	mov	r19,r17
 8010a7c:	003fd406 	br	80109d0 <__multadd+0x98>

08010a80 <__s2b>:
 8010a80:	defff904 	addi	sp,sp,-28
 8010a84:	dc400115 	stw	r17,4(sp)
 8010a88:	dc000015 	stw	r16,0(sp)
 8010a8c:	2023883a 	mov	r17,r4
 8010a90:	2821883a 	mov	r16,r5
 8010a94:	39000204 	addi	r4,r7,8
 8010a98:	01400244 	movi	r5,9
 8010a9c:	dcc00315 	stw	r19,12(sp)
 8010aa0:	dc800215 	stw	r18,8(sp)
 8010aa4:	dfc00615 	stw	ra,24(sp)
 8010aa8:	dd400515 	stw	r21,20(sp)
 8010aac:	dd000415 	stw	r20,16(sp)
 8010ab0:	3825883a 	mov	r18,r7
 8010ab4:	3027883a 	mov	r19,r6
 8010ab8:	8009fc40 	call	8009fc4 <__divsi3>
 8010abc:	00c00044 	movi	r3,1
 8010ac0:	000b883a 	mov	r5,zero
 8010ac4:	1880030e 	bge	r3,r2,8010ad4 <__s2b+0x54>
 8010ac8:	18c7883a 	add	r3,r3,r3
 8010acc:	29400044 	addi	r5,r5,1
 8010ad0:	18bffd16 	blt	r3,r2,8010ac8 <__s2b+0x48>
 8010ad4:	8809883a 	mov	r4,r17
 8010ad8:	80108680 	call	8010868 <_Balloc>
 8010adc:	d8c00717 	ldw	r3,28(sp)
 8010ae0:	10c00515 	stw	r3,20(r2)
 8010ae4:	00c00044 	movi	r3,1
 8010ae8:	10c00415 	stw	r3,16(r2)
 8010aec:	00c00244 	movi	r3,9
 8010af0:	1cc0210e 	bge	r3,r19,8010b78 <__s2b+0xf8>
 8010af4:	80eb883a 	add	r21,r16,r3
 8010af8:	a829883a 	mov	r20,r21
 8010afc:	84e1883a 	add	r16,r16,r19
 8010b00:	a1c00007 	ldb	r7,0(r20)
 8010b04:	01800284 	movi	r6,10
 8010b08:	a5000044 	addi	r20,r20,1
 8010b0c:	100b883a 	mov	r5,r2
 8010b10:	39fff404 	addi	r7,r7,-48
 8010b14:	8809883a 	mov	r4,r17
 8010b18:	80109380 	call	8010938 <__multadd>
 8010b1c:	a43ff81e 	bne	r20,r16,8010b00 <__s2b+0x80>
 8010b20:	ace1883a 	add	r16,r21,r19
 8010b24:	843ffe04 	addi	r16,r16,-8
 8010b28:	9c800a0e 	bge	r19,r18,8010b54 <__s2b+0xd4>
 8010b2c:	94e5c83a 	sub	r18,r18,r19
 8010b30:	84a5883a 	add	r18,r16,r18
 8010b34:	81c00007 	ldb	r7,0(r16)
 8010b38:	01800284 	movi	r6,10
 8010b3c:	84000044 	addi	r16,r16,1
 8010b40:	100b883a 	mov	r5,r2
 8010b44:	39fff404 	addi	r7,r7,-48
 8010b48:	8809883a 	mov	r4,r17
 8010b4c:	80109380 	call	8010938 <__multadd>
 8010b50:	84bff81e 	bne	r16,r18,8010b34 <__s2b+0xb4>
 8010b54:	dfc00617 	ldw	ra,24(sp)
 8010b58:	dd400517 	ldw	r21,20(sp)
 8010b5c:	dd000417 	ldw	r20,16(sp)
 8010b60:	dcc00317 	ldw	r19,12(sp)
 8010b64:	dc800217 	ldw	r18,8(sp)
 8010b68:	dc400117 	ldw	r17,4(sp)
 8010b6c:	dc000017 	ldw	r16,0(sp)
 8010b70:	dec00704 	addi	sp,sp,28
 8010b74:	f800283a 	ret
 8010b78:	84000284 	addi	r16,r16,10
 8010b7c:	1827883a 	mov	r19,r3
 8010b80:	003fe906 	br	8010b28 <__s2b+0xa8>

08010b84 <__hi0bits>:
 8010b84:	20bfffec 	andhi	r2,r4,65535
 8010b88:	1000141e 	bne	r2,zero,8010bdc <__hi0bits+0x58>
 8010b8c:	2008943a 	slli	r4,r4,16
 8010b90:	00800404 	movi	r2,16
 8010b94:	20ffc02c 	andhi	r3,r4,65280
 8010b98:	1800021e 	bne	r3,zero,8010ba4 <__hi0bits+0x20>
 8010b9c:	2008923a 	slli	r4,r4,8
 8010ba0:	10800204 	addi	r2,r2,8
 8010ba4:	20fc002c 	andhi	r3,r4,61440
 8010ba8:	1800021e 	bne	r3,zero,8010bb4 <__hi0bits+0x30>
 8010bac:	2008913a 	slli	r4,r4,4
 8010bb0:	10800104 	addi	r2,r2,4
 8010bb4:	20f0002c 	andhi	r3,r4,49152
 8010bb8:	1800031e 	bne	r3,zero,8010bc8 <__hi0bits+0x44>
 8010bbc:	2109883a 	add	r4,r4,r4
 8010bc0:	10800084 	addi	r2,r2,2
 8010bc4:	2109883a 	add	r4,r4,r4
 8010bc8:	20000316 	blt	r4,zero,8010bd8 <__hi0bits+0x54>
 8010bcc:	2110002c 	andhi	r4,r4,16384
 8010bd0:	2000041e 	bne	r4,zero,8010be4 <__hi0bits+0x60>
 8010bd4:	00800804 	movi	r2,32
 8010bd8:	f800283a 	ret
 8010bdc:	0005883a 	mov	r2,zero
 8010be0:	003fec06 	br	8010b94 <__hi0bits+0x10>
 8010be4:	10800044 	addi	r2,r2,1
 8010be8:	f800283a 	ret

08010bec <__lo0bits>:
 8010bec:	20c00017 	ldw	r3,0(r4)
 8010bf0:	188001cc 	andi	r2,r3,7
 8010bf4:	10000826 	beq	r2,zero,8010c18 <__lo0bits+0x2c>
 8010bf8:	1880004c 	andi	r2,r3,1
 8010bfc:	1000211e 	bne	r2,zero,8010c84 <__lo0bits+0x98>
 8010c00:	1880008c 	andi	r2,r3,2
 8010c04:	1000211e 	bne	r2,zero,8010c8c <__lo0bits+0xa0>
 8010c08:	1806d0ba 	srli	r3,r3,2
 8010c0c:	00800084 	movi	r2,2
 8010c10:	20c00015 	stw	r3,0(r4)
 8010c14:	f800283a 	ret
 8010c18:	18bfffcc 	andi	r2,r3,65535
 8010c1c:	10001326 	beq	r2,zero,8010c6c <__lo0bits+0x80>
 8010c20:	0005883a 	mov	r2,zero
 8010c24:	19403fcc 	andi	r5,r3,255
 8010c28:	2800021e 	bne	r5,zero,8010c34 <__lo0bits+0x48>
 8010c2c:	1806d23a 	srli	r3,r3,8
 8010c30:	10800204 	addi	r2,r2,8
 8010c34:	194003cc 	andi	r5,r3,15
 8010c38:	2800021e 	bne	r5,zero,8010c44 <__lo0bits+0x58>
 8010c3c:	1806d13a 	srli	r3,r3,4
 8010c40:	10800104 	addi	r2,r2,4
 8010c44:	194000cc 	andi	r5,r3,3
 8010c48:	2800021e 	bne	r5,zero,8010c54 <__lo0bits+0x68>
 8010c4c:	1806d0ba 	srli	r3,r3,2
 8010c50:	10800084 	addi	r2,r2,2
 8010c54:	1940004c 	andi	r5,r3,1
 8010c58:	2800081e 	bne	r5,zero,8010c7c <__lo0bits+0x90>
 8010c5c:	1806d07a 	srli	r3,r3,1
 8010c60:	1800051e 	bne	r3,zero,8010c78 <__lo0bits+0x8c>
 8010c64:	00800804 	movi	r2,32
 8010c68:	f800283a 	ret
 8010c6c:	1806d43a 	srli	r3,r3,16
 8010c70:	00800404 	movi	r2,16
 8010c74:	003feb06 	br	8010c24 <__lo0bits+0x38>
 8010c78:	10800044 	addi	r2,r2,1
 8010c7c:	20c00015 	stw	r3,0(r4)
 8010c80:	f800283a 	ret
 8010c84:	0005883a 	mov	r2,zero
 8010c88:	f800283a 	ret
 8010c8c:	1806d07a 	srli	r3,r3,1
 8010c90:	00800044 	movi	r2,1
 8010c94:	20c00015 	stw	r3,0(r4)
 8010c98:	f800283a 	ret

08010c9c <__i2b>:
 8010c9c:	defffd04 	addi	sp,sp,-12
 8010ca0:	dc000015 	stw	r16,0(sp)
 8010ca4:	04000044 	movi	r16,1
 8010ca8:	dc400115 	stw	r17,4(sp)
 8010cac:	2823883a 	mov	r17,r5
 8010cb0:	800b883a 	mov	r5,r16
 8010cb4:	dfc00215 	stw	ra,8(sp)
 8010cb8:	80108680 	call	8010868 <_Balloc>
 8010cbc:	14400515 	stw	r17,20(r2)
 8010cc0:	14000415 	stw	r16,16(r2)
 8010cc4:	dfc00217 	ldw	ra,8(sp)
 8010cc8:	dc400117 	ldw	r17,4(sp)
 8010ccc:	dc000017 	ldw	r16,0(sp)
 8010cd0:	dec00304 	addi	sp,sp,12
 8010cd4:	f800283a 	ret

08010cd8 <__multiply>:
 8010cd8:	deffef04 	addi	sp,sp,-68
 8010cdc:	dc400815 	stw	r17,32(sp)
 8010ce0:	dc000715 	stw	r16,28(sp)
 8010ce4:	34400417 	ldw	r17,16(r6)
 8010ce8:	2c000417 	ldw	r16,16(r5)
 8010cec:	dd800d15 	stw	r22,52(sp)
 8010cf0:	dc800915 	stw	r18,36(sp)
 8010cf4:	dfc01015 	stw	ra,64(sp)
 8010cf8:	df000f15 	stw	fp,60(sp)
 8010cfc:	ddc00e15 	stw	r23,56(sp)
 8010d00:	dd400c15 	stw	r21,48(sp)
 8010d04:	dd000b15 	stw	r20,44(sp)
 8010d08:	dcc00a15 	stw	r19,40(sp)
 8010d0c:	2825883a 	mov	r18,r5
 8010d10:	302d883a 	mov	r22,r6
 8010d14:	8440050e 	bge	r16,r17,8010d2c <__multiply+0x54>
 8010d18:	8007883a 	mov	r3,r16
 8010d1c:	3025883a 	mov	r18,r6
 8010d20:	8821883a 	mov	r16,r17
 8010d24:	282d883a 	mov	r22,r5
 8010d28:	1823883a 	mov	r17,r3
 8010d2c:	90800217 	ldw	r2,8(r18)
 8010d30:	8447883a 	add	r3,r16,r17
 8010d34:	d8c00215 	stw	r3,8(sp)
 8010d38:	91400117 	ldw	r5,4(r18)
 8010d3c:	10c0010e 	bge	r2,r3,8010d44 <__multiply+0x6c>
 8010d40:	29400044 	addi	r5,r5,1
 8010d44:	80108680 	call	8010868 <_Balloc>
 8010d48:	d8c00217 	ldw	r3,8(sp)
 8010d4c:	d8800615 	stw	r2,24(sp)
 8010d50:	18eb883a 	add	r21,r3,r3
 8010d54:	ad6b883a 	add	r21,r21,r21
 8010d58:	10c00504 	addi	r3,r2,20
 8010d5c:	1d6b883a 	add	r21,r3,r21
 8010d60:	d8c00115 	stw	r3,4(sp)
 8010d64:	dd400315 	stw	r21,12(sp)
 8010d68:	1805883a 	mov	r2,r3
 8010d6c:	1d40042e 	bgeu	r3,r21,8010d80 <__multiply+0xa8>
 8010d70:	d8c00317 	ldw	r3,12(sp)
 8010d74:	10000015 	stw	zero,0(r2)
 8010d78:	10800104 	addi	r2,r2,4
 8010d7c:	10fffc36 	bltu	r2,r3,8010d70 <__multiply+0x98>
 8010d80:	8c63883a 	add	r17,r17,r17
 8010d84:	b5800504 	addi	r22,r22,20
 8010d88:	8c63883a 	add	r17,r17,r17
 8010d8c:	94800504 	addi	r18,r18,20
 8010d90:	8421883a 	add	r16,r16,r16
 8010d94:	b463883a 	add	r17,r22,r17
 8010d98:	8421883a 	add	r16,r16,r16
 8010d9c:	dd800015 	stw	r22,0(sp)
 8010da0:	dc800415 	stw	r18,16(sp)
 8010da4:	dc400515 	stw	r17,20(sp)
 8010da8:	9429883a 	add	r20,r18,r16
 8010dac:	b4404f2e 	bgeu	r22,r17,8010eec <__multiply+0x214>
 8010db0:	d8c00017 	ldw	r3,0(sp)
 8010db4:	1c800017 	ldw	r18,0(r3)
 8010db8:	947fffcc 	andi	r17,r18,65535
 8010dbc:	88001e26 	beq	r17,zero,8010e38 <__multiply+0x160>
 8010dc0:	dd800117 	ldw	r22,4(sp)
 8010dc4:	dd400417 	ldw	r21,16(sp)
 8010dc8:	0027883a 	mov	r19,zero
 8010dcc:	ac800017 	ldw	r18,0(r21)
 8010dd0:	b4000017 	ldw	r16,0(r22)
 8010dd4:	880b883a 	mov	r5,r17
 8010dd8:	913fffcc 	andi	r4,r18,65535
 8010ddc:	800a1780 	call	800a178 <__mulsi3>
 8010de0:	9008d43a 	srli	r4,r18,16
 8010de4:	84bfffcc 	andi	r18,r16,65535
 8010de8:	1485883a 	add	r2,r2,r18
 8010dec:	14e5883a 	add	r18,r2,r19
 8010df0:	8020d43a 	srli	r16,r16,16
 8010df4:	9026d43a 	srli	r19,r18,16
 8010df8:	880b883a 	mov	r5,r17
 8010dfc:	800a1780 	call	800a178 <__mulsi3>
 8010e00:	1405883a 	add	r2,r2,r16
 8010e04:	14e1883a 	add	r16,r2,r19
 8010e08:	90ffffcc 	andi	r3,r18,65535
 8010e0c:	8024943a 	slli	r18,r16,16
 8010e10:	ad400104 	addi	r21,r21,4
 8010e14:	b005883a 	mov	r2,r22
 8010e18:	90c6b03a 	or	r3,r18,r3
 8010e1c:	b0c00015 	stw	r3,0(r22)
 8010e20:	8026d43a 	srli	r19,r16,16
 8010e24:	b5800104 	addi	r22,r22,4
 8010e28:	ad3fe836 	bltu	r21,r20,8010dcc <__multiply+0xf4>
 8010e2c:	d8c00017 	ldw	r3,0(sp)
 8010e30:	14c00115 	stw	r19,4(r2)
 8010e34:	1c800017 	ldw	r18,0(r3)
 8010e38:	9024d43a 	srli	r18,r18,16
 8010e3c:	90002226 	beq	r18,zero,8010ec8 <__multiply+0x1f0>
 8010e40:	d8c00117 	ldw	r3,4(sp)
 8010e44:	dd800417 	ldw	r22,16(sp)
 8010e48:	002f883a 	mov	r23,zero
 8010e4c:	1f000017 	ldw	fp,0(r3)
 8010e50:	1823883a 	mov	r17,r3
 8010e54:	182b883a 	mov	r21,r3
 8010e58:	e021883a 	mov	r16,fp
 8010e5c:	00000106 	br	8010e64 <__multiply+0x18c>
 8010e60:	982b883a 	mov	r21,r19
 8010e64:	b100000b 	ldhu	r4,0(r22)
 8010e68:	8020d43a 	srli	r16,r16,16
 8010e6c:	900b883a 	mov	r5,r18
 8010e70:	800a1780 	call	800a178 <__mulsi3>
 8010e74:	1405883a 	add	r2,r2,r16
 8010e78:	15ef883a 	add	r23,r2,r23
 8010e7c:	b804943a 	slli	r2,r23,16
 8010e80:	e0ffffcc 	andi	r3,fp,65535
 8010e84:	8c400104 	addi	r17,r17,4
 8010e88:	10c6b03a 	or	r3,r2,r3
 8010e8c:	88ffff15 	stw	r3,-4(r17)
 8010e90:	b5800104 	addi	r22,r22,4
 8010e94:	b13fff17 	ldw	r4,-4(r22)
 8010e98:	acc00104 	addi	r19,r21,4
 8010e9c:	900b883a 	mov	r5,r18
 8010ea0:	2008d43a 	srli	r4,r4,16
 8010ea4:	9c000017 	ldw	r16,0(r19)
 8010ea8:	800a1780 	call	800a178 <__mulsi3>
 8010eac:	b806d43a 	srli	r3,r23,16
 8010eb0:	813fffcc 	andi	r4,r16,65535
 8010eb4:	1105883a 	add	r2,r2,r4
 8010eb8:	10f9883a 	add	fp,r2,r3
 8010ebc:	e02ed43a 	srli	r23,fp,16
 8010ec0:	b53fe736 	bltu	r22,r20,8010e60 <__multiply+0x188>
 8010ec4:	af000115 	stw	fp,4(r21)
 8010ec8:	d8c00017 	ldw	r3,0(sp)
 8010ecc:	d9000517 	ldw	r4,20(sp)
 8010ed0:	18c00104 	addi	r3,r3,4
 8010ed4:	d8c00015 	stw	r3,0(sp)
 8010ed8:	d8c00117 	ldw	r3,4(sp)
 8010edc:	18c00104 	addi	r3,r3,4
 8010ee0:	d8c00115 	stw	r3,4(sp)
 8010ee4:	d8c00017 	ldw	r3,0(sp)
 8010ee8:	193fb136 	bltu	r3,r4,8010db0 <__multiply+0xd8>
 8010eec:	d8c00217 	ldw	r3,8(sp)
 8010ef0:	00c00c0e 	bge	zero,r3,8010f24 <__multiply+0x24c>
 8010ef4:	d8c00317 	ldw	r3,12(sp)
 8010ef8:	18bfff17 	ldw	r2,-4(r3)
 8010efc:	1d7fff04 	addi	r21,r3,-4
 8010f00:	10000326 	beq	r2,zero,8010f10 <__multiply+0x238>
 8010f04:	00000706 	br	8010f24 <__multiply+0x24c>
 8010f08:	a8800017 	ldw	r2,0(r21)
 8010f0c:	1000051e 	bne	r2,zero,8010f24 <__multiply+0x24c>
 8010f10:	d8c00217 	ldw	r3,8(sp)
 8010f14:	ad7fff04 	addi	r21,r21,-4
 8010f18:	18ffffc4 	addi	r3,r3,-1
 8010f1c:	d8c00215 	stw	r3,8(sp)
 8010f20:	183ff91e 	bne	r3,zero,8010f08 <__multiply+0x230>
 8010f24:	d8c00617 	ldw	r3,24(sp)
 8010f28:	d9000217 	ldw	r4,8(sp)
 8010f2c:	1805883a 	mov	r2,r3
 8010f30:	19000415 	stw	r4,16(r3)
 8010f34:	dfc01017 	ldw	ra,64(sp)
 8010f38:	df000f17 	ldw	fp,60(sp)
 8010f3c:	ddc00e17 	ldw	r23,56(sp)
 8010f40:	dd800d17 	ldw	r22,52(sp)
 8010f44:	dd400c17 	ldw	r21,48(sp)
 8010f48:	dd000b17 	ldw	r20,44(sp)
 8010f4c:	dcc00a17 	ldw	r19,40(sp)
 8010f50:	dc800917 	ldw	r18,36(sp)
 8010f54:	dc400817 	ldw	r17,32(sp)
 8010f58:	dc000717 	ldw	r16,28(sp)
 8010f5c:	dec01104 	addi	sp,sp,68
 8010f60:	f800283a 	ret

08010f64 <__pow5mult>:
 8010f64:	defffa04 	addi	sp,sp,-24
 8010f68:	dcc00315 	stw	r19,12(sp)
 8010f6c:	dc000015 	stw	r16,0(sp)
 8010f70:	dfc00515 	stw	ra,20(sp)
 8010f74:	dd000415 	stw	r20,16(sp)
 8010f78:	dc800215 	stw	r18,8(sp)
 8010f7c:	dc400115 	stw	r17,4(sp)
 8010f80:	308000cc 	andi	r2,r6,3
 8010f84:	3021883a 	mov	r16,r6
 8010f88:	2027883a 	mov	r19,r4
 8010f8c:	10002f1e 	bne	r2,zero,801104c <__pow5mult+0xe8>
 8010f90:	2825883a 	mov	r18,r5
 8010f94:	8021d0ba 	srai	r16,r16,2
 8010f98:	80001a26 	beq	r16,zero,8011004 <__pow5mult+0xa0>
 8010f9c:	9c401217 	ldw	r17,72(r19)
 8010fa0:	8800061e 	bne	r17,zero,8010fbc <__pow5mult+0x58>
 8010fa4:	00003406 	br	8011078 <__pow5mult+0x114>
 8010fa8:	8021d07a 	srai	r16,r16,1
 8010fac:	80001526 	beq	r16,zero,8011004 <__pow5mult+0xa0>
 8010fb0:	88800017 	ldw	r2,0(r17)
 8010fb4:	10001c26 	beq	r2,zero,8011028 <__pow5mult+0xc4>
 8010fb8:	1023883a 	mov	r17,r2
 8010fbc:	8080004c 	andi	r2,r16,1
 8010fc0:	103ff926 	beq	r2,zero,8010fa8 <__pow5mult+0x44>
 8010fc4:	880d883a 	mov	r6,r17
 8010fc8:	900b883a 	mov	r5,r18
 8010fcc:	9809883a 	mov	r4,r19
 8010fd0:	8010cd80 	call	8010cd8 <__multiply>
 8010fd4:	90001b26 	beq	r18,zero,8011044 <__pow5mult+0xe0>
 8010fd8:	91000117 	ldw	r4,4(r18)
 8010fdc:	98c01317 	ldw	r3,76(r19)
 8010fe0:	8021d07a 	srai	r16,r16,1
 8010fe4:	2109883a 	add	r4,r4,r4
 8010fe8:	2109883a 	add	r4,r4,r4
 8010fec:	1907883a 	add	r3,r3,r4
 8010ff0:	19000017 	ldw	r4,0(r3)
 8010ff4:	91000015 	stw	r4,0(r18)
 8010ff8:	1c800015 	stw	r18,0(r3)
 8010ffc:	1025883a 	mov	r18,r2
 8011000:	803feb1e 	bne	r16,zero,8010fb0 <__pow5mult+0x4c>
 8011004:	9005883a 	mov	r2,r18
 8011008:	dfc00517 	ldw	ra,20(sp)
 801100c:	dd000417 	ldw	r20,16(sp)
 8011010:	dcc00317 	ldw	r19,12(sp)
 8011014:	dc800217 	ldw	r18,8(sp)
 8011018:	dc400117 	ldw	r17,4(sp)
 801101c:	dc000017 	ldw	r16,0(sp)
 8011020:	dec00604 	addi	sp,sp,24
 8011024:	f800283a 	ret
 8011028:	880d883a 	mov	r6,r17
 801102c:	880b883a 	mov	r5,r17
 8011030:	9809883a 	mov	r4,r19
 8011034:	8010cd80 	call	8010cd8 <__multiply>
 8011038:	88800015 	stw	r2,0(r17)
 801103c:	10000015 	stw	zero,0(r2)
 8011040:	003fdd06 	br	8010fb8 <__pow5mult+0x54>
 8011044:	1025883a 	mov	r18,r2
 8011048:	003fd706 	br	8010fa8 <__pow5mult+0x44>
 801104c:	10bfffc4 	addi	r2,r2,-1
 8011050:	1085883a 	add	r2,r2,r2
 8011054:	00c200b4 	movhi	r3,2050
 8011058:	18eab404 	addi	r3,r3,-21808
 801105c:	1085883a 	add	r2,r2,r2
 8011060:	1885883a 	add	r2,r3,r2
 8011064:	11800017 	ldw	r6,0(r2)
 8011068:	000f883a 	mov	r7,zero
 801106c:	80109380 	call	8010938 <__multadd>
 8011070:	1025883a 	mov	r18,r2
 8011074:	003fc706 	br	8010f94 <__pow5mult+0x30>
 8011078:	05000044 	movi	r20,1
 801107c:	a00b883a 	mov	r5,r20
 8011080:	9809883a 	mov	r4,r19
 8011084:	80108680 	call	8010868 <_Balloc>
 8011088:	1023883a 	mov	r17,r2
 801108c:	00809c44 	movi	r2,625
 8011090:	88800515 	stw	r2,20(r17)
 8011094:	8d000415 	stw	r20,16(r17)
 8011098:	9c401215 	stw	r17,72(r19)
 801109c:	88000015 	stw	zero,0(r17)
 80110a0:	003fc606 	br	8010fbc <__pow5mult+0x58>

080110a4 <__lshift>:
 80110a4:	defff904 	addi	sp,sp,-28
 80110a8:	dd400515 	stw	r21,20(sp)
 80110ac:	dcc00315 	stw	r19,12(sp)
 80110b0:	302bd17a 	srai	r21,r6,5
 80110b4:	2cc00417 	ldw	r19,16(r5)
 80110b8:	28800217 	ldw	r2,8(r5)
 80110bc:	dd000415 	stw	r20,16(sp)
 80110c0:	ace7883a 	add	r19,r21,r19
 80110c4:	dc800215 	stw	r18,8(sp)
 80110c8:	dc400115 	stw	r17,4(sp)
 80110cc:	dc000015 	stw	r16,0(sp)
 80110d0:	dfc00615 	stw	ra,24(sp)
 80110d4:	9c000044 	addi	r16,r19,1
 80110d8:	2823883a 	mov	r17,r5
 80110dc:	3029883a 	mov	r20,r6
 80110e0:	2025883a 	mov	r18,r4
 80110e4:	29400117 	ldw	r5,4(r5)
 80110e8:	1400030e 	bge	r2,r16,80110f8 <__lshift+0x54>
 80110ec:	1085883a 	add	r2,r2,r2
 80110f0:	29400044 	addi	r5,r5,1
 80110f4:	143ffd16 	blt	r2,r16,80110ec <__lshift+0x48>
 80110f8:	9009883a 	mov	r4,r18
 80110fc:	80108680 	call	8010868 <_Balloc>
 8011100:	10c00504 	addi	r3,r2,20
 8011104:	0540070e 	bge	zero,r21,8011124 <__lshift+0x80>
 8011108:	ad6b883a 	add	r21,r21,r21
 801110c:	ad6b883a 	add	r21,r21,r21
 8011110:	1809883a 	mov	r4,r3
 8011114:	1d47883a 	add	r3,r3,r21
 8011118:	20000015 	stw	zero,0(r4)
 801111c:	21000104 	addi	r4,r4,4
 8011120:	193ffd1e 	bne	r3,r4,8011118 <__lshift+0x74>
 8011124:	8a000417 	ldw	r8,16(r17)
 8011128:	89000504 	addi	r4,r17,20
 801112c:	a18007cc 	andi	r6,r20,31
 8011130:	4211883a 	add	r8,r8,r8
 8011134:	4211883a 	add	r8,r8,r8
 8011138:	2211883a 	add	r8,r4,r8
 801113c:	30002326 	beq	r6,zero,80111cc <__lshift+0x128>
 8011140:	02400804 	movi	r9,32
 8011144:	4993c83a 	sub	r9,r9,r6
 8011148:	000b883a 	mov	r5,zero
 801114c:	21c00017 	ldw	r7,0(r4)
 8011150:	1815883a 	mov	r10,r3
 8011154:	18c00104 	addi	r3,r3,4
 8011158:	398e983a 	sll	r7,r7,r6
 801115c:	21000104 	addi	r4,r4,4
 8011160:	394ab03a 	or	r5,r7,r5
 8011164:	197fff15 	stw	r5,-4(r3)
 8011168:	217fff17 	ldw	r5,-4(r4)
 801116c:	2a4ad83a 	srl	r5,r5,r9
 8011170:	223ff636 	bltu	r4,r8,801114c <__lshift+0xa8>
 8011174:	51400115 	stw	r5,4(r10)
 8011178:	28001a1e 	bne	r5,zero,80111e4 <__lshift+0x140>
 801117c:	843fffc4 	addi	r16,r16,-1
 8011180:	14000415 	stw	r16,16(r2)
 8011184:	88000826 	beq	r17,zero,80111a8 <__lshift+0x104>
 8011188:	89000117 	ldw	r4,4(r17)
 801118c:	90c01317 	ldw	r3,76(r18)
 8011190:	2109883a 	add	r4,r4,r4
 8011194:	2109883a 	add	r4,r4,r4
 8011198:	1907883a 	add	r3,r3,r4
 801119c:	19000017 	ldw	r4,0(r3)
 80111a0:	89000015 	stw	r4,0(r17)
 80111a4:	1c400015 	stw	r17,0(r3)
 80111a8:	dfc00617 	ldw	ra,24(sp)
 80111ac:	dd400517 	ldw	r21,20(sp)
 80111b0:	dd000417 	ldw	r20,16(sp)
 80111b4:	dcc00317 	ldw	r19,12(sp)
 80111b8:	dc800217 	ldw	r18,8(sp)
 80111bc:	dc400117 	ldw	r17,4(sp)
 80111c0:	dc000017 	ldw	r16,0(sp)
 80111c4:	dec00704 	addi	sp,sp,28
 80111c8:	f800283a 	ret
 80111cc:	21400017 	ldw	r5,0(r4)
 80111d0:	18c00104 	addi	r3,r3,4
 80111d4:	21000104 	addi	r4,r4,4
 80111d8:	197fff15 	stw	r5,-4(r3)
 80111dc:	223ffb36 	bltu	r4,r8,80111cc <__lshift+0x128>
 80111e0:	003fe606 	br	801117c <__lshift+0xd8>
 80111e4:	9c000084 	addi	r16,r19,2
 80111e8:	003fe406 	br	801117c <__lshift+0xd8>

080111ec <__mcmp>:
 80111ec:	20800417 	ldw	r2,16(r4)
 80111f0:	28c00417 	ldw	r3,16(r5)
 80111f4:	10c5c83a 	sub	r2,r2,r3
 80111f8:	1000111e 	bne	r2,zero,8011240 <__mcmp+0x54>
 80111fc:	18c7883a 	add	r3,r3,r3
 8011200:	18c7883a 	add	r3,r3,r3
 8011204:	21000504 	addi	r4,r4,20
 8011208:	29400504 	addi	r5,r5,20
 801120c:	20c5883a 	add	r2,r4,r3
 8011210:	28cb883a 	add	r5,r5,r3
 8011214:	00000106 	br	801121c <__mcmp+0x30>
 8011218:	20800a2e 	bgeu	r4,r2,8011244 <__mcmp+0x58>
 801121c:	10bfff04 	addi	r2,r2,-4
 8011220:	297fff04 	addi	r5,r5,-4
 8011224:	11800017 	ldw	r6,0(r2)
 8011228:	28c00017 	ldw	r3,0(r5)
 801122c:	30fffa26 	beq	r6,r3,8011218 <__mcmp+0x2c>
 8011230:	30c00236 	bltu	r6,r3,801123c <__mcmp+0x50>
 8011234:	00800044 	movi	r2,1
 8011238:	f800283a 	ret
 801123c:	00bfffc4 	movi	r2,-1
 8011240:	f800283a 	ret
 8011244:	0005883a 	mov	r2,zero
 8011248:	f800283a 	ret

0801124c <__mdiff>:
 801124c:	28c00417 	ldw	r3,16(r5)
 8011250:	30800417 	ldw	r2,16(r6)
 8011254:	defffa04 	addi	sp,sp,-24
 8011258:	dcc00315 	stw	r19,12(sp)
 801125c:	dc800215 	stw	r18,8(sp)
 8011260:	dfc00515 	stw	ra,20(sp)
 8011264:	dd000415 	stw	r20,16(sp)
 8011268:	dc400115 	stw	r17,4(sp)
 801126c:	dc000015 	stw	r16,0(sp)
 8011270:	1887c83a 	sub	r3,r3,r2
 8011274:	2825883a 	mov	r18,r5
 8011278:	3027883a 	mov	r19,r6
 801127c:	1800141e 	bne	r3,zero,80112d0 <__mdiff+0x84>
 8011280:	1085883a 	add	r2,r2,r2
 8011284:	1085883a 	add	r2,r2,r2
 8011288:	2a000504 	addi	r8,r5,20
 801128c:	34000504 	addi	r16,r6,20
 8011290:	4087883a 	add	r3,r8,r2
 8011294:	8085883a 	add	r2,r16,r2
 8011298:	00000106 	br	80112a0 <__mdiff+0x54>
 801129c:	40c0592e 	bgeu	r8,r3,8011404 <__mdiff+0x1b8>
 80112a0:	18ffff04 	addi	r3,r3,-4
 80112a4:	10bfff04 	addi	r2,r2,-4
 80112a8:	19c00017 	ldw	r7,0(r3)
 80112ac:	11400017 	ldw	r5,0(r2)
 80112b0:	397ffa26 	beq	r7,r5,801129c <__mdiff+0x50>
 80112b4:	3940592e 	bgeu	r7,r5,801141c <__mdiff+0x1d0>
 80112b8:	9005883a 	mov	r2,r18
 80112bc:	4023883a 	mov	r17,r8
 80112c0:	9825883a 	mov	r18,r19
 80112c4:	05000044 	movi	r20,1
 80112c8:	1027883a 	mov	r19,r2
 80112cc:	00000406 	br	80112e0 <__mdiff+0x94>
 80112d0:	18005616 	blt	r3,zero,801142c <__mdiff+0x1e0>
 80112d4:	34400504 	addi	r17,r6,20
 80112d8:	2c000504 	addi	r16,r5,20
 80112dc:	0029883a 	mov	r20,zero
 80112e0:	91400117 	ldw	r5,4(r18)
 80112e4:	80108680 	call	8010868 <_Balloc>
 80112e8:	92400417 	ldw	r9,16(r18)
 80112ec:	9b000417 	ldw	r12,16(r19)
 80112f0:	12c00504 	addi	r11,r2,20
 80112f4:	4a51883a 	add	r8,r9,r9
 80112f8:	6319883a 	add	r12,r12,r12
 80112fc:	4211883a 	add	r8,r8,r8
 8011300:	6319883a 	add	r12,r12,r12
 8011304:	15000315 	stw	r20,12(r2)
 8011308:	8211883a 	add	r8,r16,r8
 801130c:	8b19883a 	add	r12,r17,r12
 8011310:	0007883a 	mov	r3,zero
 8011314:	81400017 	ldw	r5,0(r16)
 8011318:	89c00017 	ldw	r7,0(r17)
 801131c:	59800104 	addi	r6,r11,4
 8011320:	293fffcc 	andi	r4,r5,65535
 8011324:	20c7883a 	add	r3,r4,r3
 8011328:	393fffcc 	andi	r4,r7,65535
 801132c:	1909c83a 	sub	r4,r3,r4
 8011330:	280ad43a 	srli	r5,r5,16
 8011334:	380ed43a 	srli	r7,r7,16
 8011338:	2007d43a 	srai	r3,r4,16
 801133c:	213fffcc 	andi	r4,r4,65535
 8011340:	29cbc83a 	sub	r5,r5,r7
 8011344:	28c7883a 	add	r3,r5,r3
 8011348:	180a943a 	slli	r5,r3,16
 801134c:	8c400104 	addi	r17,r17,4
 8011350:	84000104 	addi	r16,r16,4
 8011354:	2908b03a 	or	r4,r5,r4
 8011358:	59000015 	stw	r4,0(r11)
 801135c:	1807d43a 	srai	r3,r3,16
 8011360:	3015883a 	mov	r10,r6
 8011364:	3017883a 	mov	r11,r6
 8011368:	8b3fea36 	bltu	r17,r12,8011314 <__mdiff+0xc8>
 801136c:	8200162e 	bgeu	r16,r8,80113c8 <__mdiff+0x17c>
 8011370:	8017883a 	mov	r11,r16
 8011374:	59400017 	ldw	r5,0(r11)
 8011378:	31800104 	addi	r6,r6,4
 801137c:	5ac00104 	addi	r11,r11,4
 8011380:	293fffcc 	andi	r4,r5,65535
 8011384:	20c7883a 	add	r3,r4,r3
 8011388:	280ed43a 	srli	r7,r5,16
 801138c:	180bd43a 	srai	r5,r3,16
 8011390:	193fffcc 	andi	r4,r3,65535
 8011394:	3947883a 	add	r3,r7,r5
 8011398:	180a943a 	slli	r5,r3,16
 801139c:	1807d43a 	srai	r3,r3,16
 80113a0:	2908b03a 	or	r4,r5,r4
 80113a4:	313fff15 	stw	r4,-4(r6)
 80113a8:	5a3ff236 	bltu	r11,r8,8011374 <__mdiff+0x128>
 80113ac:	0406303a 	nor	r3,zero,r16
 80113b0:	1a07883a 	add	r3,r3,r8
 80113b4:	1806d0ba 	srli	r3,r3,2
 80113b8:	18c00044 	addi	r3,r3,1
 80113bc:	18c7883a 	add	r3,r3,r3
 80113c0:	18c7883a 	add	r3,r3,r3
 80113c4:	50d5883a 	add	r10,r10,r3
 80113c8:	50ffff04 	addi	r3,r10,-4
 80113cc:	2000041e 	bne	r4,zero,80113e0 <__mdiff+0x194>
 80113d0:	18ffff04 	addi	r3,r3,-4
 80113d4:	19000017 	ldw	r4,0(r3)
 80113d8:	4a7fffc4 	addi	r9,r9,-1
 80113dc:	203ffc26 	beq	r4,zero,80113d0 <__mdiff+0x184>
 80113e0:	12400415 	stw	r9,16(r2)
 80113e4:	dfc00517 	ldw	ra,20(sp)
 80113e8:	dd000417 	ldw	r20,16(sp)
 80113ec:	dcc00317 	ldw	r19,12(sp)
 80113f0:	dc800217 	ldw	r18,8(sp)
 80113f4:	dc400117 	ldw	r17,4(sp)
 80113f8:	dc000017 	ldw	r16,0(sp)
 80113fc:	dec00604 	addi	sp,sp,24
 8011400:	f800283a 	ret
 8011404:	000b883a 	mov	r5,zero
 8011408:	80108680 	call	8010868 <_Balloc>
 801140c:	00c00044 	movi	r3,1
 8011410:	10c00415 	stw	r3,16(r2)
 8011414:	10000515 	stw	zero,20(r2)
 8011418:	003ff206 	br	80113e4 <__mdiff+0x198>
 801141c:	8023883a 	mov	r17,r16
 8011420:	0029883a 	mov	r20,zero
 8011424:	4021883a 	mov	r16,r8
 8011428:	003fad06 	br	80112e0 <__mdiff+0x94>
 801142c:	9005883a 	mov	r2,r18
 8011430:	94400504 	addi	r17,r18,20
 8011434:	9c000504 	addi	r16,r19,20
 8011438:	9825883a 	mov	r18,r19
 801143c:	05000044 	movi	r20,1
 8011440:	1027883a 	mov	r19,r2
 8011444:	003fa606 	br	80112e0 <__mdiff+0x94>

08011448 <__ulp>:
 8011448:	295ffc2c 	andhi	r5,r5,32752
 801144c:	00bf3034 	movhi	r2,64704
 8011450:	2887883a 	add	r3,r5,r2
 8011454:	00c0020e 	bge	zero,r3,8011460 <__ulp+0x18>
 8011458:	0005883a 	mov	r2,zero
 801145c:	f800283a 	ret
 8011460:	00c7c83a 	sub	r3,zero,r3
 8011464:	1807d53a 	srai	r3,r3,20
 8011468:	008004c4 	movi	r2,19
 801146c:	10c00b0e 	bge	r2,r3,801149c <__ulp+0x54>
 8011470:	18bffb04 	addi	r2,r3,-20
 8011474:	01000784 	movi	r4,30
 8011478:	0007883a 	mov	r3,zero
 801147c:	20800516 	blt	r4,r2,8011494 <__ulp+0x4c>
 8011480:	010007c4 	movi	r4,31
 8011484:	2089c83a 	sub	r4,r4,r2
 8011488:	00800044 	movi	r2,1
 801148c:	1104983a 	sll	r2,r2,r4
 8011490:	f800283a 	ret
 8011494:	00800044 	movi	r2,1
 8011498:	f800283a 	ret
 801149c:	01400234 	movhi	r5,8
 80114a0:	28c7d83a 	sra	r3,r5,r3
 80114a4:	0005883a 	mov	r2,zero
 80114a8:	f800283a 	ret

080114ac <__b2d>:
 80114ac:	defffa04 	addi	sp,sp,-24
 80114b0:	dc000015 	stw	r16,0(sp)
 80114b4:	24000417 	ldw	r16,16(r4)
 80114b8:	dc400115 	stw	r17,4(sp)
 80114bc:	24400504 	addi	r17,r4,20
 80114c0:	8421883a 	add	r16,r16,r16
 80114c4:	8421883a 	add	r16,r16,r16
 80114c8:	8c21883a 	add	r16,r17,r16
 80114cc:	dc800215 	stw	r18,8(sp)
 80114d0:	84bfff17 	ldw	r18,-4(r16)
 80114d4:	dd000415 	stw	r20,16(sp)
 80114d8:	dcc00315 	stw	r19,12(sp)
 80114dc:	9009883a 	mov	r4,r18
 80114e0:	2829883a 	mov	r20,r5
 80114e4:	dfc00515 	stw	ra,20(sp)
 80114e8:	8010b840 	call	8010b84 <__hi0bits>
 80114ec:	00c00804 	movi	r3,32
 80114f0:	1889c83a 	sub	r4,r3,r2
 80114f4:	a1000015 	stw	r4,0(r20)
 80114f8:	01000284 	movi	r4,10
 80114fc:	84ffff04 	addi	r19,r16,-4
 8011500:	20801216 	blt	r4,r2,801154c <__b2d+0xa0>
 8011504:	018002c4 	movi	r6,11
 8011508:	308dc83a 	sub	r6,r6,r2
 801150c:	9186d83a 	srl	r3,r18,r6
 8011510:	18cffc34 	orhi	r3,r3,16368
 8011514:	8cc0212e 	bgeu	r17,r19,801159c <__b2d+0xf0>
 8011518:	813ffe17 	ldw	r4,-8(r16)
 801151c:	218cd83a 	srl	r6,r4,r6
 8011520:	10800544 	addi	r2,r2,21
 8011524:	9084983a 	sll	r2,r18,r2
 8011528:	1184b03a 	or	r2,r2,r6
 801152c:	dfc00517 	ldw	ra,20(sp)
 8011530:	dd000417 	ldw	r20,16(sp)
 8011534:	dcc00317 	ldw	r19,12(sp)
 8011538:	dc800217 	ldw	r18,8(sp)
 801153c:	dc400117 	ldw	r17,4(sp)
 8011540:	dc000017 	ldw	r16,0(sp)
 8011544:	dec00604 	addi	sp,sp,24
 8011548:	f800283a 	ret
 801154c:	8cc00f2e 	bgeu	r17,r19,801158c <__b2d+0xe0>
 8011550:	117ffd44 	addi	r5,r2,-11
 8011554:	80bffe17 	ldw	r2,-8(r16)
 8011558:	28000e26 	beq	r5,zero,8011594 <__b2d+0xe8>
 801155c:	1949c83a 	sub	r4,r3,r5
 8011560:	9164983a 	sll	r18,r18,r5
 8011564:	1106d83a 	srl	r3,r2,r4
 8011568:	81bffe04 	addi	r6,r16,-8
 801156c:	948ffc34 	orhi	r18,r18,16368
 8011570:	90c6b03a 	or	r3,r18,r3
 8011574:	89800e2e 	bgeu	r17,r6,80115b0 <__b2d+0x104>
 8011578:	81bffd17 	ldw	r6,-12(r16)
 801157c:	1144983a 	sll	r2,r2,r5
 8011580:	310ad83a 	srl	r5,r6,r4
 8011584:	2884b03a 	or	r2,r5,r2
 8011588:	003fe806 	br	801152c <__b2d+0x80>
 801158c:	10bffd44 	addi	r2,r2,-11
 8011590:	1000041e 	bne	r2,zero,80115a4 <__b2d+0xf8>
 8011594:	90cffc34 	orhi	r3,r18,16368
 8011598:	003fe406 	br	801152c <__b2d+0x80>
 801159c:	000d883a 	mov	r6,zero
 80115a0:	003fdf06 	br	8011520 <__b2d+0x74>
 80115a4:	90a4983a 	sll	r18,r18,r2
 80115a8:	0005883a 	mov	r2,zero
 80115ac:	003ff906 	br	8011594 <__b2d+0xe8>
 80115b0:	1144983a 	sll	r2,r2,r5
 80115b4:	003fdd06 	br	801152c <__b2d+0x80>

080115b8 <__d2b>:
 80115b8:	defff804 	addi	sp,sp,-32
 80115bc:	dc000215 	stw	r16,8(sp)
 80115c0:	3021883a 	mov	r16,r6
 80115c4:	dc400315 	stw	r17,12(sp)
 80115c8:	8022907a 	slli	r17,r16,1
 80115cc:	dd000615 	stw	r20,24(sp)
 80115d0:	2829883a 	mov	r20,r5
 80115d4:	01400044 	movi	r5,1
 80115d8:	dcc00515 	stw	r19,20(sp)
 80115dc:	dc800415 	stw	r18,16(sp)
 80115e0:	dfc00715 	stw	ra,28(sp)
 80115e4:	3825883a 	mov	r18,r7
 80115e8:	8822d57a 	srli	r17,r17,21
 80115ec:	80108680 	call	8010868 <_Balloc>
 80115f0:	1027883a 	mov	r19,r2
 80115f4:	00800434 	movhi	r2,16
 80115f8:	10bfffc4 	addi	r2,r2,-1
 80115fc:	808c703a 	and	r6,r16,r2
 8011600:	88000126 	beq	r17,zero,8011608 <__d2b+0x50>
 8011604:	31800434 	orhi	r6,r6,16
 8011608:	d9800015 	stw	r6,0(sp)
 801160c:	a0002426 	beq	r20,zero,80116a0 <__d2b+0xe8>
 8011610:	d9000104 	addi	r4,sp,4
 8011614:	dd000115 	stw	r20,4(sp)
 8011618:	8010bec0 	call	8010bec <__lo0bits>
 801161c:	d8c00017 	ldw	r3,0(sp)
 8011620:	10002f1e 	bne	r2,zero,80116e0 <__d2b+0x128>
 8011624:	d9000117 	ldw	r4,4(sp)
 8011628:	99000515 	stw	r4,20(r19)
 801162c:	1821003a 	cmpeq	r16,r3,zero
 8011630:	01000084 	movi	r4,2
 8011634:	2421c83a 	sub	r16,r4,r16
 8011638:	98c00615 	stw	r3,24(r19)
 801163c:	9c000415 	stw	r16,16(r19)
 8011640:	88001f1e 	bne	r17,zero,80116c0 <__d2b+0x108>
 8011644:	10bef384 	addi	r2,r2,-1074
 8011648:	90800015 	stw	r2,0(r18)
 801164c:	00900034 	movhi	r2,16384
 8011650:	10bfffc4 	addi	r2,r2,-1
 8011654:	8085883a 	add	r2,r16,r2
 8011658:	1085883a 	add	r2,r2,r2
 801165c:	1085883a 	add	r2,r2,r2
 8011660:	9885883a 	add	r2,r19,r2
 8011664:	11000517 	ldw	r4,20(r2)
 8011668:	8020917a 	slli	r16,r16,5
 801166c:	8010b840 	call	8010b84 <__hi0bits>
 8011670:	d8c00817 	ldw	r3,32(sp)
 8011674:	8085c83a 	sub	r2,r16,r2
 8011678:	18800015 	stw	r2,0(r3)
 801167c:	9805883a 	mov	r2,r19
 8011680:	dfc00717 	ldw	ra,28(sp)
 8011684:	dd000617 	ldw	r20,24(sp)
 8011688:	dcc00517 	ldw	r19,20(sp)
 801168c:	dc800417 	ldw	r18,16(sp)
 8011690:	dc400317 	ldw	r17,12(sp)
 8011694:	dc000217 	ldw	r16,8(sp)
 8011698:	dec00804 	addi	sp,sp,32
 801169c:	f800283a 	ret
 80116a0:	d809883a 	mov	r4,sp
 80116a4:	8010bec0 	call	8010bec <__lo0bits>
 80116a8:	d8c00017 	ldw	r3,0(sp)
 80116ac:	04000044 	movi	r16,1
 80116b0:	9c000415 	stw	r16,16(r19)
 80116b4:	98c00515 	stw	r3,20(r19)
 80116b8:	10800804 	addi	r2,r2,32
 80116bc:	883fe126 	beq	r17,zero,8011644 <__d2b+0x8c>
 80116c0:	00c00d44 	movi	r3,53
 80116c4:	8c7ef344 	addi	r17,r17,-1075
 80116c8:	88a3883a 	add	r17,r17,r2
 80116cc:	1885c83a 	sub	r2,r3,r2
 80116d0:	d8c00817 	ldw	r3,32(sp)
 80116d4:	94400015 	stw	r17,0(r18)
 80116d8:	18800015 	stw	r2,0(r3)
 80116dc:	003fe706 	br	801167c <__d2b+0xc4>
 80116e0:	01000804 	movi	r4,32
 80116e4:	2089c83a 	sub	r4,r4,r2
 80116e8:	1908983a 	sll	r4,r3,r4
 80116ec:	d9400117 	ldw	r5,4(sp)
 80116f0:	1886d83a 	srl	r3,r3,r2
 80116f4:	2148b03a 	or	r4,r4,r5
 80116f8:	99000515 	stw	r4,20(r19)
 80116fc:	d8c00015 	stw	r3,0(sp)
 8011700:	003fca06 	br	801162c <__d2b+0x74>

08011704 <__ratio>:
 8011704:	defff904 	addi	sp,sp,-28
 8011708:	dc400315 	stw	r17,12(sp)
 801170c:	2823883a 	mov	r17,r5
 8011710:	d9400104 	addi	r5,sp,4
 8011714:	dfc00615 	stw	ra,24(sp)
 8011718:	dcc00515 	stw	r19,20(sp)
 801171c:	dc800415 	stw	r18,16(sp)
 8011720:	2027883a 	mov	r19,r4
 8011724:	dc000215 	stw	r16,8(sp)
 8011728:	80114ac0 	call	80114ac <__b2d>
 801172c:	d80b883a 	mov	r5,sp
 8011730:	8809883a 	mov	r4,r17
 8011734:	1025883a 	mov	r18,r2
 8011738:	1821883a 	mov	r16,r3
 801173c:	80114ac0 	call	80114ac <__b2d>
 8011740:	8a000417 	ldw	r8,16(r17)
 8011744:	99000417 	ldw	r4,16(r19)
 8011748:	d9400117 	ldw	r5,4(sp)
 801174c:	2209c83a 	sub	r4,r4,r8
 8011750:	2010917a 	slli	r8,r4,5
 8011754:	d9000017 	ldw	r4,0(sp)
 8011758:	2909c83a 	sub	r4,r5,r4
 801175c:	4109883a 	add	r4,r8,r4
 8011760:	01000e0e 	bge	zero,r4,801179c <__ratio+0x98>
 8011764:	2008953a 	slli	r4,r4,20
 8011768:	2421883a 	add	r16,r4,r16
 801176c:	100d883a 	mov	r6,r2
 8011770:	180f883a 	mov	r7,r3
 8011774:	9009883a 	mov	r4,r18
 8011778:	800b883a 	mov	r5,r16
 801177c:	801564c0 	call	801564c <__divdf3>
 8011780:	dfc00617 	ldw	ra,24(sp)
 8011784:	dcc00517 	ldw	r19,20(sp)
 8011788:	dc800417 	ldw	r18,16(sp)
 801178c:	dc400317 	ldw	r17,12(sp)
 8011790:	dc000217 	ldw	r16,8(sp)
 8011794:	dec00704 	addi	sp,sp,28
 8011798:	f800283a 	ret
 801179c:	2008953a 	slli	r4,r4,20
 80117a0:	1907c83a 	sub	r3,r3,r4
 80117a4:	003ff106 	br	801176c <__ratio+0x68>

080117a8 <_mprec_log10>:
 80117a8:	defffe04 	addi	sp,sp,-8
 80117ac:	dc000015 	stw	r16,0(sp)
 80117b0:	dfc00115 	stw	ra,4(sp)
 80117b4:	008005c4 	movi	r2,23
 80117b8:	2021883a 	mov	r16,r4
 80117bc:	11000d0e 	bge	r2,r4,80117f4 <_mprec_log10+0x4c>
 80117c0:	0005883a 	mov	r2,zero
 80117c4:	00cffc34 	movhi	r3,16368
 80117c8:	843fffc4 	addi	r16,r16,-1
 80117cc:	000d883a 	mov	r6,zero
 80117d0:	01d00934 	movhi	r7,16420
 80117d4:	1009883a 	mov	r4,r2
 80117d8:	180b883a 	mov	r5,r3
 80117dc:	80162740 	call	8016274 <__muldf3>
 80117e0:	803ff91e 	bne	r16,zero,80117c8 <_mprec_log10+0x20>
 80117e4:	dfc00117 	ldw	ra,4(sp)
 80117e8:	dc000017 	ldw	r16,0(sp)
 80117ec:	dec00204 	addi	sp,sp,8
 80117f0:	f800283a 	ret
 80117f4:	202090fa 	slli	r16,r4,3
 80117f8:	008200b4 	movhi	r2,2050
 80117fc:	10aacb04 	addi	r2,r2,-21716
 8011800:	1421883a 	add	r16,r2,r16
 8011804:	80800017 	ldw	r2,0(r16)
 8011808:	80c00117 	ldw	r3,4(r16)
 801180c:	dfc00117 	ldw	ra,4(sp)
 8011810:	dc000017 	ldw	r16,0(sp)
 8011814:	dec00204 	addi	sp,sp,8
 8011818:	f800283a 	ret

0801181c <__copybits>:
 801181c:	297fffc4 	addi	r5,r5,-1
 8011820:	280fd17a 	srai	r7,r5,5
 8011824:	30c00417 	ldw	r3,16(r6)
 8011828:	30800504 	addi	r2,r6,20
 801182c:	39c00044 	addi	r7,r7,1
 8011830:	18c7883a 	add	r3,r3,r3
 8011834:	39cf883a 	add	r7,r7,r7
 8011838:	18c7883a 	add	r3,r3,r3
 801183c:	39cf883a 	add	r7,r7,r7
 8011840:	10c7883a 	add	r3,r2,r3
 8011844:	21cf883a 	add	r7,r4,r7
 8011848:	10c00d2e 	bgeu	r2,r3,8011880 <__copybits+0x64>
 801184c:	200b883a 	mov	r5,r4
 8011850:	12000017 	ldw	r8,0(r2)
 8011854:	29400104 	addi	r5,r5,4
 8011858:	10800104 	addi	r2,r2,4
 801185c:	2a3fff15 	stw	r8,-4(r5)
 8011860:	10fffb36 	bltu	r2,r3,8011850 <__copybits+0x34>
 8011864:	1985c83a 	sub	r2,r3,r6
 8011868:	10bffac4 	addi	r2,r2,-21
 801186c:	1004d0ba 	srli	r2,r2,2
 8011870:	10800044 	addi	r2,r2,1
 8011874:	1085883a 	add	r2,r2,r2
 8011878:	1085883a 	add	r2,r2,r2
 801187c:	2089883a 	add	r4,r4,r2
 8011880:	21c0032e 	bgeu	r4,r7,8011890 <__copybits+0x74>
 8011884:	20000015 	stw	zero,0(r4)
 8011888:	21000104 	addi	r4,r4,4
 801188c:	21fffd36 	bltu	r4,r7,8011884 <__copybits+0x68>
 8011890:	f800283a 	ret

08011894 <__any_on>:
 8011894:	20c00417 	ldw	r3,16(r4)
 8011898:	2805d17a 	srai	r2,r5,5
 801189c:	21000504 	addi	r4,r4,20
 80118a0:	18800d0e 	bge	r3,r2,80118d8 <__any_on+0x44>
 80118a4:	18c7883a 	add	r3,r3,r3
 80118a8:	18c7883a 	add	r3,r3,r3
 80118ac:	20c7883a 	add	r3,r4,r3
 80118b0:	20c0192e 	bgeu	r4,r3,8011918 <__any_on+0x84>
 80118b4:	18bfff17 	ldw	r2,-4(r3)
 80118b8:	18ffff04 	addi	r3,r3,-4
 80118bc:	1000041e 	bne	r2,zero,80118d0 <__any_on+0x3c>
 80118c0:	20c0142e 	bgeu	r4,r3,8011914 <__any_on+0x80>
 80118c4:	18ffff04 	addi	r3,r3,-4
 80118c8:	19400017 	ldw	r5,0(r3)
 80118cc:	283ffc26 	beq	r5,zero,80118c0 <__any_on+0x2c>
 80118d0:	00800044 	movi	r2,1
 80118d4:	f800283a 	ret
 80118d8:	10c00a0e 	bge	r2,r3,8011904 <__any_on+0x70>
 80118dc:	1085883a 	add	r2,r2,r2
 80118e0:	1085883a 	add	r2,r2,r2
 80118e4:	294007cc 	andi	r5,r5,31
 80118e8:	2087883a 	add	r3,r4,r2
 80118ec:	283ff026 	beq	r5,zero,80118b0 <__any_on+0x1c>
 80118f0:	19800017 	ldw	r6,0(r3)
 80118f4:	3144d83a 	srl	r2,r6,r5
 80118f8:	114a983a 	sll	r5,r2,r5
 80118fc:	317ff41e 	bne	r6,r5,80118d0 <__any_on+0x3c>
 8011900:	003feb06 	br	80118b0 <__any_on+0x1c>
 8011904:	1085883a 	add	r2,r2,r2
 8011908:	1085883a 	add	r2,r2,r2
 801190c:	2087883a 	add	r3,r4,r2
 8011910:	003fe706 	br	80118b0 <__any_on+0x1c>
 8011914:	f800283a 	ret
 8011918:	0005883a 	mov	r2,zero
 801191c:	f800283a 	ret

08011920 <_putc_r>:
 8011920:	defffc04 	addi	sp,sp,-16
 8011924:	dc000215 	stw	r16,8(sp)
 8011928:	dfc00315 	stw	ra,12(sp)
 801192c:	2021883a 	mov	r16,r4
 8011930:	20000226 	beq	r4,zero,801193c <_putc_r+0x1c>
 8011934:	20800e17 	ldw	r2,56(r4)
 8011938:	10001b26 	beq	r2,zero,80119a8 <_putc_r+0x88>
 801193c:	30800217 	ldw	r2,8(r6)
 8011940:	10bfffc4 	addi	r2,r2,-1
 8011944:	30800215 	stw	r2,8(r6)
 8011948:	10000a16 	blt	r2,zero,8011974 <_putc_r+0x54>
 801194c:	30800017 	ldw	r2,0(r6)
 8011950:	11400005 	stb	r5,0(r2)
 8011954:	30800017 	ldw	r2,0(r6)
 8011958:	10c00044 	addi	r3,r2,1
 801195c:	30c00015 	stw	r3,0(r6)
 8011960:	10800003 	ldbu	r2,0(r2)
 8011964:	dfc00317 	ldw	ra,12(sp)
 8011968:	dc000217 	ldw	r16,8(sp)
 801196c:	dec00404 	addi	sp,sp,16
 8011970:	f800283a 	ret
 8011974:	30c00617 	ldw	r3,24(r6)
 8011978:	10c00616 	blt	r2,r3,8011994 <_putc_r+0x74>
 801197c:	30800017 	ldw	r2,0(r6)
 8011980:	00c00284 	movi	r3,10
 8011984:	11400005 	stb	r5,0(r2)
 8011988:	30800017 	ldw	r2,0(r6)
 801198c:	11400003 	ldbu	r5,0(r2)
 8011990:	28fff11e 	bne	r5,r3,8011958 <_putc_r+0x38>
 8011994:	8009883a 	mov	r4,r16
 8011998:	dfc00317 	ldw	ra,12(sp)
 801199c:	dc000217 	ldw	r16,8(sp)
 80119a0:	dec00404 	addi	sp,sp,16
 80119a4:	80138941 	jmpi	8013894 <__swbuf_r>
 80119a8:	d9400015 	stw	r5,0(sp)
 80119ac:	d9800115 	stw	r6,4(sp)
 80119b0:	800f8600 	call	800f860 <__sinit>
 80119b4:	d9800117 	ldw	r6,4(sp)
 80119b8:	d9400017 	ldw	r5,0(sp)
 80119bc:	003fdf06 	br	801193c <_putc_r+0x1c>

080119c0 <putc>:
 80119c0:	008200b4 	movhi	r2,2050
 80119c4:	defffc04 	addi	sp,sp,-16
 80119c8:	10b22604 	addi	r2,r2,-14184
 80119cc:	dc000115 	stw	r16,4(sp)
 80119d0:	14000017 	ldw	r16,0(r2)
 80119d4:	dc400215 	stw	r17,8(sp)
 80119d8:	dfc00315 	stw	ra,12(sp)
 80119dc:	2023883a 	mov	r17,r4
 80119e0:	80000226 	beq	r16,zero,80119ec <putc+0x2c>
 80119e4:	80800e17 	ldw	r2,56(r16)
 80119e8:	10001a26 	beq	r2,zero,8011a54 <putc+0x94>
 80119ec:	28800217 	ldw	r2,8(r5)
 80119f0:	10bfffc4 	addi	r2,r2,-1
 80119f4:	28800215 	stw	r2,8(r5)
 80119f8:	10000b16 	blt	r2,zero,8011a28 <putc+0x68>
 80119fc:	28800017 	ldw	r2,0(r5)
 8011a00:	14400005 	stb	r17,0(r2)
 8011a04:	28800017 	ldw	r2,0(r5)
 8011a08:	10c00044 	addi	r3,r2,1
 8011a0c:	28c00015 	stw	r3,0(r5)
 8011a10:	10800003 	ldbu	r2,0(r2)
 8011a14:	dfc00317 	ldw	ra,12(sp)
 8011a18:	dc400217 	ldw	r17,8(sp)
 8011a1c:	dc000117 	ldw	r16,4(sp)
 8011a20:	dec00404 	addi	sp,sp,16
 8011a24:	f800283a 	ret
 8011a28:	28c00617 	ldw	r3,24(r5)
 8011a2c:	10c00e16 	blt	r2,r3,8011a68 <putc+0xa8>
 8011a30:	28800017 	ldw	r2,0(r5)
 8011a34:	01000284 	movi	r4,10
 8011a38:	14400005 	stb	r17,0(r2)
 8011a3c:	28800017 	ldw	r2,0(r5)
 8011a40:	10c00003 	ldbu	r3,0(r2)
 8011a44:	193ff01e 	bne	r3,r4,8011a08 <putc+0x48>
 8011a48:	280d883a 	mov	r6,r5
 8011a4c:	180b883a 	mov	r5,r3
 8011a50:	00000706 	br	8011a70 <putc+0xb0>
 8011a54:	8009883a 	mov	r4,r16
 8011a58:	d9400015 	stw	r5,0(sp)
 8011a5c:	800f8600 	call	800f860 <__sinit>
 8011a60:	d9400017 	ldw	r5,0(sp)
 8011a64:	003fe106 	br	80119ec <putc+0x2c>
 8011a68:	280d883a 	mov	r6,r5
 8011a6c:	880b883a 	mov	r5,r17
 8011a70:	8009883a 	mov	r4,r16
 8011a74:	dfc00317 	ldw	ra,12(sp)
 8011a78:	dc400217 	ldw	r17,8(sp)
 8011a7c:	dc000117 	ldw	r16,4(sp)
 8011a80:	dec00404 	addi	sp,sp,16
 8011a84:	80138941 	jmpi	8013894 <__swbuf_r>

08011a88 <_realloc_r>:
 8011a88:	defff604 	addi	sp,sp,-40
 8011a8c:	dc800215 	stw	r18,8(sp)
 8011a90:	dfc00915 	stw	ra,36(sp)
 8011a94:	df000815 	stw	fp,32(sp)
 8011a98:	ddc00715 	stw	r23,28(sp)
 8011a9c:	dd800615 	stw	r22,24(sp)
 8011aa0:	dd400515 	stw	r21,20(sp)
 8011aa4:	dd000415 	stw	r20,16(sp)
 8011aa8:	dcc00315 	stw	r19,12(sp)
 8011aac:	dc400115 	stw	r17,4(sp)
 8011ab0:	dc000015 	stw	r16,0(sp)
 8011ab4:	3025883a 	mov	r18,r6
 8011ab8:	2800b726 	beq	r5,zero,8011d98 <_realloc_r+0x310>
 8011abc:	282b883a 	mov	r21,r5
 8011ac0:	2029883a 	mov	r20,r4
 8011ac4:	8017dd40 	call	8017dd4 <__malloc_lock>
 8011ac8:	a8bfff17 	ldw	r2,-4(r21)
 8011acc:	043fff04 	movi	r16,-4
 8011ad0:	90c002c4 	addi	r3,r18,11
 8011ad4:	01000584 	movi	r4,22
 8011ad8:	acfffe04 	addi	r19,r21,-8
 8011adc:	1420703a 	and	r16,r2,r16
 8011ae0:	20c0332e 	bgeu	r4,r3,8011bb0 <_realloc_r+0x128>
 8011ae4:	047ffe04 	movi	r17,-8
 8011ae8:	1c62703a 	and	r17,r3,r17
 8011aec:	8807883a 	mov	r3,r17
 8011af0:	88005816 	blt	r17,zero,8011c54 <_realloc_r+0x1cc>
 8011af4:	8c805736 	bltu	r17,r18,8011c54 <_realloc_r+0x1cc>
 8011af8:	80c0300e 	bge	r16,r3,8011bbc <_realloc_r+0x134>
 8011afc:	070200b4 	movhi	fp,2050
 8011b00:	e72c6f04 	addi	fp,fp,-20036
 8011b04:	e1c00217 	ldw	r7,8(fp)
 8011b08:	9c09883a 	add	r4,r19,r16
 8011b0c:	22000117 	ldw	r8,4(r4)
 8011b10:	21c06326 	beq	r4,r7,8011ca0 <_realloc_r+0x218>
 8011b14:	017fff84 	movi	r5,-2
 8011b18:	414a703a 	and	r5,r8,r5
 8011b1c:	214b883a 	add	r5,r4,r5
 8011b20:	29800117 	ldw	r6,4(r5)
 8011b24:	3180004c 	andi	r6,r6,1
 8011b28:	30003f26 	beq	r6,zero,8011c28 <_realloc_r+0x1a0>
 8011b2c:	1080004c 	andi	r2,r2,1
 8011b30:	10008326 	beq	r2,zero,8011d40 <_realloc_r+0x2b8>
 8011b34:	900b883a 	mov	r5,r18
 8011b38:	a009883a 	mov	r4,r20
 8011b3c:	800a2800 	call	800a280 <_malloc_r>
 8011b40:	1025883a 	mov	r18,r2
 8011b44:	10011e26 	beq	r2,zero,8011fc0 <_realloc_r+0x538>
 8011b48:	a93fff17 	ldw	r4,-4(r21)
 8011b4c:	10fffe04 	addi	r3,r2,-8
 8011b50:	00bfff84 	movi	r2,-2
 8011b54:	2084703a 	and	r2,r4,r2
 8011b58:	9885883a 	add	r2,r19,r2
 8011b5c:	1880ee26 	beq	r3,r2,8011f18 <_realloc_r+0x490>
 8011b60:	81bfff04 	addi	r6,r16,-4
 8011b64:	00800904 	movi	r2,36
 8011b68:	1180b836 	bltu	r2,r6,8011e4c <_realloc_r+0x3c4>
 8011b6c:	00c004c4 	movi	r3,19
 8011b70:	19809636 	bltu	r3,r6,8011dcc <_realloc_r+0x344>
 8011b74:	9005883a 	mov	r2,r18
 8011b78:	a807883a 	mov	r3,r21
 8011b7c:	19000017 	ldw	r4,0(r3)
 8011b80:	11000015 	stw	r4,0(r2)
 8011b84:	19000117 	ldw	r4,4(r3)
 8011b88:	11000115 	stw	r4,4(r2)
 8011b8c:	18c00217 	ldw	r3,8(r3)
 8011b90:	10c00215 	stw	r3,8(r2)
 8011b94:	a80b883a 	mov	r5,r21
 8011b98:	a009883a 	mov	r4,r20
 8011b9c:	800f9d40 	call	800f9d4 <_free_r>
 8011ba0:	a009883a 	mov	r4,r20
 8011ba4:	8017df80 	call	8017df8 <__malloc_unlock>
 8011ba8:	9005883a 	mov	r2,r18
 8011bac:	00001206 	br	8011bf8 <_realloc_r+0x170>
 8011bb0:	00c00404 	movi	r3,16
 8011bb4:	1823883a 	mov	r17,r3
 8011bb8:	003fce06 	br	8011af4 <_realloc_r+0x6c>
 8011bbc:	a825883a 	mov	r18,r21
 8011bc0:	8445c83a 	sub	r2,r16,r17
 8011bc4:	00c003c4 	movi	r3,15
 8011bc8:	18802636 	bltu	r3,r2,8011c64 <_realloc_r+0x1dc>
 8011bcc:	99800117 	ldw	r6,4(r19)
 8011bd0:	9c07883a 	add	r3,r19,r16
 8011bd4:	3180004c 	andi	r6,r6,1
 8011bd8:	3420b03a 	or	r16,r6,r16
 8011bdc:	9c000115 	stw	r16,4(r19)
 8011be0:	18800117 	ldw	r2,4(r3)
 8011be4:	10800054 	ori	r2,r2,1
 8011be8:	18800115 	stw	r2,4(r3)
 8011bec:	a009883a 	mov	r4,r20
 8011bf0:	8017df80 	call	8017df8 <__malloc_unlock>
 8011bf4:	9005883a 	mov	r2,r18
 8011bf8:	dfc00917 	ldw	ra,36(sp)
 8011bfc:	df000817 	ldw	fp,32(sp)
 8011c00:	ddc00717 	ldw	r23,28(sp)
 8011c04:	dd800617 	ldw	r22,24(sp)
 8011c08:	dd400517 	ldw	r21,20(sp)
 8011c0c:	dd000417 	ldw	r20,16(sp)
 8011c10:	dcc00317 	ldw	r19,12(sp)
 8011c14:	dc800217 	ldw	r18,8(sp)
 8011c18:	dc400117 	ldw	r17,4(sp)
 8011c1c:	dc000017 	ldw	r16,0(sp)
 8011c20:	dec00a04 	addi	sp,sp,40
 8011c24:	f800283a 	ret
 8011c28:	017fff04 	movi	r5,-4
 8011c2c:	414a703a 	and	r5,r8,r5
 8011c30:	814d883a 	add	r6,r16,r5
 8011c34:	30c01f16 	blt	r6,r3,8011cb4 <_realloc_r+0x22c>
 8011c38:	20800317 	ldw	r2,12(r4)
 8011c3c:	20c00217 	ldw	r3,8(r4)
 8011c40:	a825883a 	mov	r18,r21
 8011c44:	3021883a 	mov	r16,r6
 8011c48:	18800315 	stw	r2,12(r3)
 8011c4c:	10c00215 	stw	r3,8(r2)
 8011c50:	003fdb06 	br	8011bc0 <_realloc_r+0x138>
 8011c54:	00800304 	movi	r2,12
 8011c58:	a0800015 	stw	r2,0(r20)
 8011c5c:	0005883a 	mov	r2,zero
 8011c60:	003fe506 	br	8011bf8 <_realloc_r+0x170>
 8011c64:	98c00117 	ldw	r3,4(r19)
 8011c68:	9c4b883a 	add	r5,r19,r17
 8011c6c:	11000054 	ori	r4,r2,1
 8011c70:	18c0004c 	andi	r3,r3,1
 8011c74:	1c62b03a 	or	r17,r3,r17
 8011c78:	9c400115 	stw	r17,4(r19)
 8011c7c:	29000115 	stw	r4,4(r5)
 8011c80:	2885883a 	add	r2,r5,r2
 8011c84:	10c00117 	ldw	r3,4(r2)
 8011c88:	29400204 	addi	r5,r5,8
 8011c8c:	a009883a 	mov	r4,r20
 8011c90:	18c00054 	ori	r3,r3,1
 8011c94:	10c00115 	stw	r3,4(r2)
 8011c98:	800f9d40 	call	800f9d4 <_free_r>
 8011c9c:	003fd306 	br	8011bec <_realloc_r+0x164>
 8011ca0:	017fff04 	movi	r5,-4
 8011ca4:	414a703a 	and	r5,r8,r5
 8011ca8:	89800404 	addi	r6,r17,16
 8011cac:	8151883a 	add	r8,r16,r5
 8011cb0:	4180590e 	bge	r8,r6,8011e18 <_realloc_r+0x390>
 8011cb4:	1080004c 	andi	r2,r2,1
 8011cb8:	103f9e1e 	bne	r2,zero,8011b34 <_realloc_r+0xac>
 8011cbc:	adbffe17 	ldw	r22,-8(r21)
 8011cc0:	00bfff04 	movi	r2,-4
 8011cc4:	9dadc83a 	sub	r22,r19,r22
 8011cc8:	b1800117 	ldw	r6,4(r22)
 8011ccc:	3084703a 	and	r2,r6,r2
 8011cd0:	20002026 	beq	r4,zero,8011d54 <_realloc_r+0x2cc>
 8011cd4:	80af883a 	add	r23,r16,r2
 8011cd8:	b96f883a 	add	r23,r23,r5
 8011cdc:	21c05f26 	beq	r4,r7,8011e5c <_realloc_r+0x3d4>
 8011ce0:	b8c01c16 	blt	r23,r3,8011d54 <_realloc_r+0x2cc>
 8011ce4:	20800317 	ldw	r2,12(r4)
 8011ce8:	20c00217 	ldw	r3,8(r4)
 8011cec:	81bfff04 	addi	r6,r16,-4
 8011cf0:	01000904 	movi	r4,36
 8011cf4:	18800315 	stw	r2,12(r3)
 8011cf8:	10c00215 	stw	r3,8(r2)
 8011cfc:	b0c00217 	ldw	r3,8(r22)
 8011d00:	b0800317 	ldw	r2,12(r22)
 8011d04:	b4800204 	addi	r18,r22,8
 8011d08:	18800315 	stw	r2,12(r3)
 8011d0c:	10c00215 	stw	r3,8(r2)
 8011d10:	21801b36 	bltu	r4,r6,8011d80 <_realloc_r+0x2f8>
 8011d14:	008004c4 	movi	r2,19
 8011d18:	1180352e 	bgeu	r2,r6,8011df0 <_realloc_r+0x368>
 8011d1c:	a8800017 	ldw	r2,0(r21)
 8011d20:	b0800215 	stw	r2,8(r22)
 8011d24:	a8800117 	ldw	r2,4(r21)
 8011d28:	b0800315 	stw	r2,12(r22)
 8011d2c:	008006c4 	movi	r2,27
 8011d30:	11807f36 	bltu	r2,r6,8011f30 <_realloc_r+0x4a8>
 8011d34:	b0800404 	addi	r2,r22,16
 8011d38:	ad400204 	addi	r21,r21,8
 8011d3c:	00002d06 	br	8011df4 <_realloc_r+0x36c>
 8011d40:	adbffe17 	ldw	r22,-8(r21)
 8011d44:	00bfff04 	movi	r2,-4
 8011d48:	9dadc83a 	sub	r22,r19,r22
 8011d4c:	b1000117 	ldw	r4,4(r22)
 8011d50:	2084703a 	and	r2,r4,r2
 8011d54:	b03f7726 	beq	r22,zero,8011b34 <_realloc_r+0xac>
 8011d58:	80af883a 	add	r23,r16,r2
 8011d5c:	b8ff7516 	blt	r23,r3,8011b34 <_realloc_r+0xac>
 8011d60:	b0800317 	ldw	r2,12(r22)
 8011d64:	b0c00217 	ldw	r3,8(r22)
 8011d68:	81bfff04 	addi	r6,r16,-4
 8011d6c:	01000904 	movi	r4,36
 8011d70:	18800315 	stw	r2,12(r3)
 8011d74:	10c00215 	stw	r3,8(r2)
 8011d78:	b4800204 	addi	r18,r22,8
 8011d7c:	21bfe52e 	bgeu	r4,r6,8011d14 <_realloc_r+0x28c>
 8011d80:	a80b883a 	mov	r5,r21
 8011d84:	9009883a 	mov	r4,r18
 8011d88:	801070c0 	call	801070c <memmove>
 8011d8c:	b821883a 	mov	r16,r23
 8011d90:	b027883a 	mov	r19,r22
 8011d94:	003f8a06 	br	8011bc0 <_realloc_r+0x138>
 8011d98:	300b883a 	mov	r5,r6
 8011d9c:	dfc00917 	ldw	ra,36(sp)
 8011da0:	df000817 	ldw	fp,32(sp)
 8011da4:	ddc00717 	ldw	r23,28(sp)
 8011da8:	dd800617 	ldw	r22,24(sp)
 8011dac:	dd400517 	ldw	r21,20(sp)
 8011db0:	dd000417 	ldw	r20,16(sp)
 8011db4:	dcc00317 	ldw	r19,12(sp)
 8011db8:	dc800217 	ldw	r18,8(sp)
 8011dbc:	dc400117 	ldw	r17,4(sp)
 8011dc0:	dc000017 	ldw	r16,0(sp)
 8011dc4:	dec00a04 	addi	sp,sp,40
 8011dc8:	800a2801 	jmpi	800a280 <_malloc_r>
 8011dcc:	a8c00017 	ldw	r3,0(r21)
 8011dd0:	90c00015 	stw	r3,0(r18)
 8011dd4:	a8c00117 	ldw	r3,4(r21)
 8011dd8:	90c00115 	stw	r3,4(r18)
 8011ddc:	00c006c4 	movi	r3,27
 8011de0:	19804536 	bltu	r3,r6,8011ef8 <_realloc_r+0x470>
 8011de4:	90800204 	addi	r2,r18,8
 8011de8:	a8c00204 	addi	r3,r21,8
 8011dec:	003f6306 	br	8011b7c <_realloc_r+0xf4>
 8011df0:	9005883a 	mov	r2,r18
 8011df4:	a8c00017 	ldw	r3,0(r21)
 8011df8:	b821883a 	mov	r16,r23
 8011dfc:	b027883a 	mov	r19,r22
 8011e00:	10c00015 	stw	r3,0(r2)
 8011e04:	a8c00117 	ldw	r3,4(r21)
 8011e08:	10c00115 	stw	r3,4(r2)
 8011e0c:	a8c00217 	ldw	r3,8(r21)
 8011e10:	10c00215 	stw	r3,8(r2)
 8011e14:	003f6a06 	br	8011bc0 <_realloc_r+0x138>
 8011e18:	9c67883a 	add	r19,r19,r17
 8011e1c:	4445c83a 	sub	r2,r8,r17
 8011e20:	e4c00215 	stw	r19,8(fp)
 8011e24:	10800054 	ori	r2,r2,1
 8011e28:	98800115 	stw	r2,4(r19)
 8011e2c:	a8bfff17 	ldw	r2,-4(r21)
 8011e30:	a009883a 	mov	r4,r20
 8011e34:	1080004c 	andi	r2,r2,1
 8011e38:	1462b03a 	or	r17,r2,r17
 8011e3c:	ac7fff15 	stw	r17,-4(r21)
 8011e40:	8017df80 	call	8017df8 <__malloc_unlock>
 8011e44:	a805883a 	mov	r2,r21
 8011e48:	003f6b06 	br	8011bf8 <_realloc_r+0x170>
 8011e4c:	a80b883a 	mov	r5,r21
 8011e50:	9009883a 	mov	r4,r18
 8011e54:	801070c0 	call	801070c <memmove>
 8011e58:	003f4e06 	br	8011b94 <_realloc_r+0x10c>
 8011e5c:	89000404 	addi	r4,r17,16
 8011e60:	b93fbc16 	blt	r23,r4,8011d54 <_realloc_r+0x2cc>
 8011e64:	b0800317 	ldw	r2,12(r22)
 8011e68:	b0c00217 	ldw	r3,8(r22)
 8011e6c:	81bfff04 	addi	r6,r16,-4
 8011e70:	01000904 	movi	r4,36
 8011e74:	18800315 	stw	r2,12(r3)
 8011e78:	10c00215 	stw	r3,8(r2)
 8011e7c:	b4800204 	addi	r18,r22,8
 8011e80:	21804336 	bltu	r4,r6,8011f90 <_realloc_r+0x508>
 8011e84:	008004c4 	movi	r2,19
 8011e88:	11803f2e 	bgeu	r2,r6,8011f88 <_realloc_r+0x500>
 8011e8c:	a8800017 	ldw	r2,0(r21)
 8011e90:	b0800215 	stw	r2,8(r22)
 8011e94:	a8800117 	ldw	r2,4(r21)
 8011e98:	b0800315 	stw	r2,12(r22)
 8011e9c:	008006c4 	movi	r2,27
 8011ea0:	11803f36 	bltu	r2,r6,8011fa0 <_realloc_r+0x518>
 8011ea4:	b0800404 	addi	r2,r22,16
 8011ea8:	ad400204 	addi	r21,r21,8
 8011eac:	a8c00017 	ldw	r3,0(r21)
 8011eb0:	10c00015 	stw	r3,0(r2)
 8011eb4:	a8c00117 	ldw	r3,4(r21)
 8011eb8:	10c00115 	stw	r3,4(r2)
 8011ebc:	a8c00217 	ldw	r3,8(r21)
 8011ec0:	10c00215 	stw	r3,8(r2)
 8011ec4:	b447883a 	add	r3,r22,r17
 8011ec8:	bc45c83a 	sub	r2,r23,r17
 8011ecc:	e0c00215 	stw	r3,8(fp)
 8011ed0:	10800054 	ori	r2,r2,1
 8011ed4:	18800115 	stw	r2,4(r3)
 8011ed8:	b0800117 	ldw	r2,4(r22)
 8011edc:	a009883a 	mov	r4,r20
 8011ee0:	1080004c 	andi	r2,r2,1
 8011ee4:	1462b03a 	or	r17,r2,r17
 8011ee8:	b4400115 	stw	r17,4(r22)
 8011eec:	8017df80 	call	8017df8 <__malloc_unlock>
 8011ef0:	9005883a 	mov	r2,r18
 8011ef4:	003f4006 	br	8011bf8 <_realloc_r+0x170>
 8011ef8:	a8c00217 	ldw	r3,8(r21)
 8011efc:	90c00215 	stw	r3,8(r18)
 8011f00:	a8c00317 	ldw	r3,12(r21)
 8011f04:	90c00315 	stw	r3,12(r18)
 8011f08:	30801126 	beq	r6,r2,8011f50 <_realloc_r+0x4c8>
 8011f0c:	90800404 	addi	r2,r18,16
 8011f10:	a8c00404 	addi	r3,r21,16
 8011f14:	003f1906 	br	8011b7c <_realloc_r+0xf4>
 8011f18:	90ffff17 	ldw	r3,-4(r18)
 8011f1c:	00bfff04 	movi	r2,-4
 8011f20:	a825883a 	mov	r18,r21
 8011f24:	1884703a 	and	r2,r3,r2
 8011f28:	80a1883a 	add	r16,r16,r2
 8011f2c:	003f2406 	br	8011bc0 <_realloc_r+0x138>
 8011f30:	a8800217 	ldw	r2,8(r21)
 8011f34:	b0800415 	stw	r2,16(r22)
 8011f38:	a8800317 	ldw	r2,12(r21)
 8011f3c:	b0800515 	stw	r2,20(r22)
 8011f40:	31000a26 	beq	r6,r4,8011f6c <_realloc_r+0x4e4>
 8011f44:	b0800604 	addi	r2,r22,24
 8011f48:	ad400404 	addi	r21,r21,16
 8011f4c:	003fa906 	br	8011df4 <_realloc_r+0x36c>
 8011f50:	a9000417 	ldw	r4,16(r21)
 8011f54:	90800604 	addi	r2,r18,24
 8011f58:	a8c00604 	addi	r3,r21,24
 8011f5c:	91000415 	stw	r4,16(r18)
 8011f60:	a9000517 	ldw	r4,20(r21)
 8011f64:	91000515 	stw	r4,20(r18)
 8011f68:	003f0406 	br	8011b7c <_realloc_r+0xf4>
 8011f6c:	a8c00417 	ldw	r3,16(r21)
 8011f70:	ad400604 	addi	r21,r21,24
 8011f74:	b0800804 	addi	r2,r22,32
 8011f78:	b0c00615 	stw	r3,24(r22)
 8011f7c:	a8ffff17 	ldw	r3,-4(r21)
 8011f80:	b0c00715 	stw	r3,28(r22)
 8011f84:	003f9b06 	br	8011df4 <_realloc_r+0x36c>
 8011f88:	9005883a 	mov	r2,r18
 8011f8c:	003fc706 	br	8011eac <_realloc_r+0x424>
 8011f90:	a80b883a 	mov	r5,r21
 8011f94:	9009883a 	mov	r4,r18
 8011f98:	801070c0 	call	801070c <memmove>
 8011f9c:	003fc906 	br	8011ec4 <_realloc_r+0x43c>
 8011fa0:	a8800217 	ldw	r2,8(r21)
 8011fa4:	b0800415 	stw	r2,16(r22)
 8011fa8:	a8800317 	ldw	r2,12(r21)
 8011fac:	b0800515 	stw	r2,20(r22)
 8011fb0:	31000726 	beq	r6,r4,8011fd0 <_realloc_r+0x548>
 8011fb4:	b0800604 	addi	r2,r22,24
 8011fb8:	ad400404 	addi	r21,r21,16
 8011fbc:	003fbb06 	br	8011eac <_realloc_r+0x424>
 8011fc0:	a009883a 	mov	r4,r20
 8011fc4:	8017df80 	call	8017df8 <__malloc_unlock>
 8011fc8:	0005883a 	mov	r2,zero
 8011fcc:	003f0a06 	br	8011bf8 <_realloc_r+0x170>
 8011fd0:	a8c00417 	ldw	r3,16(r21)
 8011fd4:	ad400604 	addi	r21,r21,24
 8011fd8:	b0800804 	addi	r2,r22,32
 8011fdc:	b0c00615 	stw	r3,24(r22)
 8011fe0:	a8ffff17 	ldw	r3,-4(r21)
 8011fe4:	b0c00715 	stw	r3,28(r22)
 8011fe8:	003fb006 	br	8011eac <_realloc_r+0x424>

08011fec <__fpclassifyd>:
 8011fec:	00a00034 	movhi	r2,32768
 8011ff0:	10bfffc4 	addi	r2,r2,-1
 8011ff4:	2884703a 	and	r2,r5,r2
 8011ff8:	10000726 	beq	r2,zero,8012018 <__fpclassifyd+0x2c>
 8011ffc:	00fffc34 	movhi	r3,65520
 8012000:	019ff834 	movhi	r6,32736
 8012004:	28c7883a 	add	r3,r5,r3
 8012008:	31bfffc4 	addi	r6,r6,-1
 801200c:	30c00536 	bltu	r6,r3,8012024 <__fpclassifyd+0x38>
 8012010:	00800104 	movi	r2,4
 8012014:	f800283a 	ret
 8012018:	2000021e 	bne	r4,zero,8012024 <__fpclassifyd+0x38>
 801201c:	00800084 	movi	r2,2
 8012020:	f800283a 	ret
 8012024:	00dffc34 	movhi	r3,32752
 8012028:	019ff834 	movhi	r6,32736
 801202c:	28cb883a 	add	r5,r5,r3
 8012030:	31bfffc4 	addi	r6,r6,-1
 8012034:	317ff62e 	bgeu	r6,r5,8012010 <__fpclassifyd+0x24>
 8012038:	01400434 	movhi	r5,16
 801203c:	297fffc4 	addi	r5,r5,-1
 8012040:	28800236 	bltu	r5,r2,801204c <__fpclassifyd+0x60>
 8012044:	008000c4 	movi	r2,3
 8012048:	f800283a 	ret
 801204c:	10c00226 	beq	r2,r3,8012058 <__fpclassifyd+0x6c>
 8012050:	0005883a 	mov	r2,zero
 8012054:	f800283a 	ret
 8012058:	2005003a 	cmpeq	r2,r4,zero
 801205c:	f800283a 	ret

08012060 <__sread>:
 8012060:	defffe04 	addi	sp,sp,-8
 8012064:	dc000015 	stw	r16,0(sp)
 8012068:	2821883a 	mov	r16,r5
 801206c:	2940038f 	ldh	r5,14(r5)
 8012070:	dfc00115 	stw	ra,4(sp)
 8012074:	8013f980 	call	8013f98 <_read_r>
 8012078:	10000716 	blt	r2,zero,8012098 <__sread+0x38>
 801207c:	80c01417 	ldw	r3,80(r16)
 8012080:	1887883a 	add	r3,r3,r2
 8012084:	80c01415 	stw	r3,80(r16)
 8012088:	dfc00117 	ldw	ra,4(sp)
 801208c:	dc000017 	ldw	r16,0(sp)
 8012090:	dec00204 	addi	sp,sp,8
 8012094:	f800283a 	ret
 8012098:	80c0030b 	ldhu	r3,12(r16)
 801209c:	18fbffcc 	andi	r3,r3,61439
 80120a0:	80c0030d 	sth	r3,12(r16)
 80120a4:	dfc00117 	ldw	ra,4(sp)
 80120a8:	dc000017 	ldw	r16,0(sp)
 80120ac:	dec00204 	addi	sp,sp,8
 80120b0:	f800283a 	ret

080120b4 <__seofread>:
 80120b4:	0005883a 	mov	r2,zero
 80120b8:	f800283a 	ret

080120bc <__swrite>:
 80120bc:	2880030b 	ldhu	r2,12(r5)
 80120c0:	defffb04 	addi	sp,sp,-20
 80120c4:	dcc00315 	stw	r19,12(sp)
 80120c8:	dc800215 	stw	r18,8(sp)
 80120cc:	dc400115 	stw	r17,4(sp)
 80120d0:	dc000015 	stw	r16,0(sp)
 80120d4:	dfc00415 	stw	ra,16(sp)
 80120d8:	10c0400c 	andi	r3,r2,256
 80120dc:	2821883a 	mov	r16,r5
 80120e0:	2023883a 	mov	r17,r4
 80120e4:	3025883a 	mov	r18,r6
 80120e8:	3827883a 	mov	r19,r7
 80120ec:	18000526 	beq	r3,zero,8012104 <__swrite+0x48>
 80120f0:	2940038f 	ldh	r5,14(r5)
 80120f4:	01c00084 	movi	r7,2
 80120f8:	000d883a 	mov	r6,zero
 80120fc:	8013f380 	call	8013f38 <_lseek_r>
 8012100:	8080030b 	ldhu	r2,12(r16)
 8012104:	8140038f 	ldh	r5,14(r16)
 8012108:	10bbffcc 	andi	r2,r2,61439
 801210c:	980f883a 	mov	r7,r19
 8012110:	900d883a 	mov	r6,r18
 8012114:	8809883a 	mov	r4,r17
 8012118:	8080030d 	sth	r2,12(r16)
 801211c:	dfc00417 	ldw	ra,16(sp)
 8012120:	dcc00317 	ldw	r19,12(sp)
 8012124:	dc800217 	ldw	r18,8(sp)
 8012128:	dc400117 	ldw	r17,4(sp)
 801212c:	dc000017 	ldw	r16,0(sp)
 8012130:	dec00504 	addi	sp,sp,20
 8012134:	80139ec1 	jmpi	80139ec <_write_r>

08012138 <__sseek>:
 8012138:	defffe04 	addi	sp,sp,-8
 801213c:	dc000015 	stw	r16,0(sp)
 8012140:	2821883a 	mov	r16,r5
 8012144:	2940038f 	ldh	r5,14(r5)
 8012148:	dfc00115 	stw	ra,4(sp)
 801214c:	8013f380 	call	8013f38 <_lseek_r>
 8012150:	00ffffc4 	movi	r3,-1
 8012154:	10c00826 	beq	r2,r3,8012178 <__sseek+0x40>
 8012158:	80c0030b 	ldhu	r3,12(r16)
 801215c:	80801415 	stw	r2,80(r16)
 8012160:	18c40014 	ori	r3,r3,4096
 8012164:	80c0030d 	sth	r3,12(r16)
 8012168:	dfc00117 	ldw	ra,4(sp)
 801216c:	dc000017 	ldw	r16,0(sp)
 8012170:	dec00204 	addi	sp,sp,8
 8012174:	f800283a 	ret
 8012178:	80c0030b 	ldhu	r3,12(r16)
 801217c:	18fbffcc 	andi	r3,r3,61439
 8012180:	80c0030d 	sth	r3,12(r16)
 8012184:	dfc00117 	ldw	ra,4(sp)
 8012188:	dc000017 	ldw	r16,0(sp)
 801218c:	dec00204 	addi	sp,sp,8
 8012190:	f800283a 	ret

08012194 <__sclose>:
 8012194:	2940038f 	ldh	r5,14(r5)
 8012198:	8013a4c1 	jmpi	8013a4c <_close_r>

0801219c <__sprint_r.part.0>:
 801219c:	28801917 	ldw	r2,100(r5)
 80121a0:	defff604 	addi	sp,sp,-40
 80121a4:	dd400515 	stw	r21,20(sp)
 80121a8:	dfc00915 	stw	ra,36(sp)
 80121ac:	df000815 	stw	fp,32(sp)
 80121b0:	ddc00715 	stw	r23,28(sp)
 80121b4:	dd800615 	stw	r22,24(sp)
 80121b8:	dd000415 	stw	r20,16(sp)
 80121bc:	dcc00315 	stw	r19,12(sp)
 80121c0:	dc800215 	stw	r18,8(sp)
 80121c4:	dc400115 	stw	r17,4(sp)
 80121c8:	dc000015 	stw	r16,0(sp)
 80121cc:	1088000c 	andi	r2,r2,8192
 80121d0:	302b883a 	mov	r21,r6
 80121d4:	10002e26 	beq	r2,zero,8012290 <__sprint_r.part.0+0xf4>
 80121d8:	30800217 	ldw	r2,8(r6)
 80121dc:	35800017 	ldw	r22,0(r6)
 80121e0:	10002926 	beq	r2,zero,8012288 <__sprint_r.part.0+0xec>
 80121e4:	2827883a 	mov	r19,r5
 80121e8:	2029883a 	mov	r20,r4
 80121ec:	b5c00104 	addi	r23,r22,4
 80121f0:	04bfffc4 	movi	r18,-1
 80121f4:	bc400017 	ldw	r17,0(r23)
 80121f8:	b4000017 	ldw	r16,0(r22)
 80121fc:	0039883a 	mov	fp,zero
 8012200:	8822d0ba 	srli	r17,r17,2
 8012204:	8800031e 	bne	r17,zero,8012214 <__sprint_r.part.0+0x78>
 8012208:	00001806 	br	801226c <__sprint_r.part.0+0xd0>
 801220c:	84000104 	addi	r16,r16,4
 8012210:	8f001526 	beq	r17,fp,8012268 <__sprint_r.part.0+0xcc>
 8012214:	81400017 	ldw	r5,0(r16)
 8012218:	980d883a 	mov	r6,r19
 801221c:	a009883a 	mov	r4,r20
 8012220:	8013de40 	call	8013de4 <_fputwc_r>
 8012224:	e7000044 	addi	fp,fp,1
 8012228:	14bff81e 	bne	r2,r18,801220c <__sprint_r.part.0+0x70>
 801222c:	9005883a 	mov	r2,r18
 8012230:	a8000215 	stw	zero,8(r21)
 8012234:	a8000115 	stw	zero,4(r21)
 8012238:	dfc00917 	ldw	ra,36(sp)
 801223c:	df000817 	ldw	fp,32(sp)
 8012240:	ddc00717 	ldw	r23,28(sp)
 8012244:	dd800617 	ldw	r22,24(sp)
 8012248:	dd400517 	ldw	r21,20(sp)
 801224c:	dd000417 	ldw	r20,16(sp)
 8012250:	dcc00317 	ldw	r19,12(sp)
 8012254:	dc800217 	ldw	r18,8(sp)
 8012258:	dc400117 	ldw	r17,4(sp)
 801225c:	dc000017 	ldw	r16,0(sp)
 8012260:	dec00a04 	addi	sp,sp,40
 8012264:	f800283a 	ret
 8012268:	a8800217 	ldw	r2,8(r21)
 801226c:	8c63883a 	add	r17,r17,r17
 8012270:	8c63883a 	add	r17,r17,r17
 8012274:	1445c83a 	sub	r2,r2,r17
 8012278:	a8800215 	stw	r2,8(r21)
 801227c:	b5800204 	addi	r22,r22,8
 8012280:	bdc00204 	addi	r23,r23,8
 8012284:	103fdb1e 	bne	r2,zero,80121f4 <__sprint_r.part.0+0x58>
 8012288:	0005883a 	mov	r2,zero
 801228c:	003fe806 	br	8012230 <__sprint_r.part.0+0x94>
 8012290:	800fce40 	call	800fce4 <__sfvwrite_r>
 8012294:	003fe606 	br	8012230 <__sprint_r.part.0+0x94>

08012298 <__sprint_r>:
 8012298:	30c00217 	ldw	r3,8(r6)
 801229c:	18000126 	beq	r3,zero,80122a4 <__sprint_r+0xc>
 80122a0:	801219c1 	jmpi	801219c <__sprint_r.part.0>
 80122a4:	30000115 	stw	zero,4(r6)
 80122a8:	0005883a 	mov	r2,zero
 80122ac:	f800283a 	ret

080122b0 <___vfiprintf_internal_r>:
 80122b0:	deffca04 	addi	sp,sp,-216
 80122b4:	dd403115 	stw	r21,196(sp)
 80122b8:	dfc03515 	stw	ra,212(sp)
 80122bc:	df003415 	stw	fp,208(sp)
 80122c0:	ddc03315 	stw	r23,204(sp)
 80122c4:	dd803215 	stw	r22,200(sp)
 80122c8:	dd003015 	stw	r20,192(sp)
 80122cc:	dcc02f15 	stw	r19,188(sp)
 80122d0:	dc802e15 	stw	r18,184(sp)
 80122d4:	dc402d15 	stw	r17,180(sp)
 80122d8:	dc002c15 	stw	r16,176(sp)
 80122dc:	d9002115 	stw	r4,132(sp)
 80122e0:	d9402015 	stw	r5,128(sp)
 80122e4:	d9c02215 	stw	r7,136(sp)
 80122e8:	302b883a 	mov	r21,r6
 80122ec:	20000226 	beq	r4,zero,80122f8 <___vfiprintf_internal_r+0x48>
 80122f0:	20800e17 	ldw	r2,56(r4)
 80122f4:	1000cf26 	beq	r2,zero,8012634 <___vfiprintf_internal_r+0x384>
 80122f8:	d8c02017 	ldw	r3,128(sp)
 80122fc:	1880030b 	ldhu	r2,12(r3)
 8012300:	10c8000c 	andi	r3,r2,8192
 8012304:	1800071e 	bne	r3,zero,8012324 <___vfiprintf_internal_r+0x74>
 8012308:	d9402017 	ldw	r5,128(sp)
 801230c:	00f7ffc4 	movi	r3,-8193
 8012310:	10880014 	ori	r2,r2,8192
 8012314:	29001917 	ldw	r4,100(r5)
 8012318:	2880030d 	sth	r2,12(r5)
 801231c:	20c6703a 	and	r3,r4,r3
 8012320:	28c01915 	stw	r3,100(r5)
 8012324:	10c0020c 	andi	r3,r2,8
 8012328:	1800a526 	beq	r3,zero,80125c0 <___vfiprintf_internal_r+0x310>
 801232c:	d9002017 	ldw	r4,128(sp)
 8012330:	20c00417 	ldw	r3,16(r4)
 8012334:	1800a226 	beq	r3,zero,80125c0 <___vfiprintf_internal_r+0x310>
 8012338:	1080068c 	andi	r2,r2,26
 801233c:	00c00284 	movi	r3,10
 8012340:	10c0a826 	beq	r2,r3,80125e4 <___vfiprintf_internal_r+0x334>
 8012344:	d9001a04 	addi	r4,sp,104
 8012348:	d94019c4 	addi	r5,sp,103
 801234c:	048200b4 	movhi	r18,2050
 8012350:	2145c83a 	sub	r2,r4,r5
 8012354:	94aafd04 	addi	r18,r18,-21516
 8012358:	d9001e15 	stw	r4,120(sp)
 801235c:	d9401f15 	stw	r5,124(sp)
 8012360:	dec01a15 	stw	sp,104(sp)
 8012364:	d8001c15 	stw	zero,112(sp)
 8012368:	d8001b15 	stw	zero,108(sp)
 801236c:	d811883a 	mov	r8,sp
 8012370:	d8002615 	stw	zero,152(sp)
 8012374:	d8002415 	stw	zero,144(sp)
 8012378:	d8802815 	stw	r2,160(sp)
 801237c:	a82d883a 	mov	r22,r21
 8012380:	b0800007 	ldb	r2,0(r22)
 8012384:	10040d26 	beq	r2,zero,80133bc <___vfiprintf_internal_r+0x110c>
 8012388:	00c00944 	movi	r3,37
 801238c:	b029883a 	mov	r20,r22
 8012390:	10c0021e 	bne	r2,r3,801239c <___vfiprintf_internal_r+0xec>
 8012394:	00001606 	br	80123f0 <___vfiprintf_internal_r+0x140>
 8012398:	10c00326 	beq	r2,r3,80123a8 <___vfiprintf_internal_r+0xf8>
 801239c:	a5000044 	addi	r20,r20,1
 80123a0:	a0800007 	ldb	r2,0(r20)
 80123a4:	103ffc1e 	bne	r2,zero,8012398 <___vfiprintf_internal_r+0xe8>
 80123a8:	a5a1c83a 	sub	r16,r20,r22
 80123ac:	80001026 	beq	r16,zero,80123f0 <___vfiprintf_internal_r+0x140>
 80123b0:	d8c01c17 	ldw	r3,112(sp)
 80123b4:	d8801b17 	ldw	r2,108(sp)
 80123b8:	45800015 	stw	r22,0(r8)
 80123bc:	80c7883a 	add	r3,r16,r3
 80123c0:	10800044 	addi	r2,r2,1
 80123c4:	44000115 	stw	r16,4(r8)
 80123c8:	d8c01c15 	stw	r3,112(sp)
 80123cc:	d8801b15 	stw	r2,108(sp)
 80123d0:	010001c4 	movi	r4,7
 80123d4:	2080750e 	bge	r4,r2,80125ac <___vfiprintf_internal_r+0x2fc>
 80123d8:	1803951e 	bne	r3,zero,8013230 <___vfiprintf_internal_r+0xf80>
 80123dc:	d8c02417 	ldw	r3,144(sp)
 80123e0:	d8001b15 	stw	zero,108(sp)
 80123e4:	d811883a 	mov	r8,sp
 80123e8:	1c07883a 	add	r3,r3,r16
 80123ec:	d8c02415 	stw	r3,144(sp)
 80123f0:	a0800007 	ldb	r2,0(r20)
 80123f4:	1002e026 	beq	r2,zero,8012f78 <___vfiprintf_internal_r+0xcc8>
 80123f8:	a5800044 	addi	r22,r20,1
 80123fc:	a0c00047 	ldb	r3,1(r20)
 8012400:	d8001d85 	stb	zero,118(sp)
 8012404:	0027883a 	mov	r19,zero
 8012408:	d8002305 	stb	zero,140(sp)
 801240c:	043fffc4 	movi	r16,-1
 8012410:	d8002515 	stw	zero,148(sp)
 8012414:	0023883a 	mov	r17,zero
 8012418:	05001604 	movi	r20,88
 801241c:	05400244 	movi	r21,9
 8012420:	402f883a 	mov	r23,r8
 8012424:	b5800044 	addi	r22,r22,1
 8012428:	18bff804 	addi	r2,r3,-32
 801242c:	a0827736 	bltu	r20,r2,8012e0c <___vfiprintf_internal_r+0xb5c>
 8012430:	100490ba 	slli	r2,r2,2
 8012434:	01020074 	movhi	r4,2049
 8012438:	21091204 	addi	r4,r4,9288
 801243c:	1105883a 	add	r2,r2,r4
 8012440:	10800017 	ldw	r2,0(r2)
 8012444:	1000683a 	jmp	r2
 8012448:	08012b0c 	andi	zero,at,1196
 801244c:	08012e0c 	andi	zero,at,1208
 8012450:	08012e0c 	andi	zero,at,1208
 8012454:	08012b28 	cmpgeui	zero,at,1196
 8012458:	08012e0c 	andi	zero,at,1208
 801245c:	08012e0c 	andi	zero,at,1208
 8012460:	08012e0c 	andi	zero,at,1208
 8012464:	08012e0c 	andi	zero,at,1208
 8012468:	08012e0c 	andi	zero,at,1208
 801246c:	08012e0c 	andi	zero,at,1208
 8012470:	08012d30 	cmpltui	zero,at,1204
 8012474:	08012d54 	ori	zero,at,1205
 8012478:	08012e0c 	andi	zero,at,1208
 801247c:	0801264c 	andi	zero,at,1177
 8012480:	08012d68 	cmpgeui	zero,at,1205
 8012484:	08012e0c 	andi	zero,at,1208
 8012488:	08012b34 	orhi	zero,at,1196
 801248c:	08012b40 	call	8012b4 <__alt_mem_onchip_memory2_0+0x8012b4>
 8012490:	08012b40 	call	8012b4 <__alt_mem_onchip_memory2_0+0x8012b4>
 8012494:	08012b40 	call	8012b4 <__alt_mem_onchip_memory2_0+0x8012b4>
 8012498:	08012b40 	call	8012b4 <__alt_mem_onchip_memory2_0+0x8012b4>
 801249c:	08012b40 	call	8012b4 <__alt_mem_onchip_memory2_0+0x8012b4>
 80124a0:	08012b40 	call	8012b4 <__alt_mem_onchip_memory2_0+0x8012b4>
 80124a4:	08012b40 	call	8012b4 <__alt_mem_onchip_memory2_0+0x8012b4>
 80124a8:	08012b40 	call	8012b4 <__alt_mem_onchip_memory2_0+0x8012b4>
 80124ac:	08012b40 	call	8012b4 <__alt_mem_onchip_memory2_0+0x8012b4>
 80124b0:	08012e0c 	andi	zero,at,1208
 80124b4:	08012e0c 	andi	zero,at,1208
 80124b8:	08012e0c 	andi	zero,at,1208
 80124bc:	08012e0c 	andi	zero,at,1208
 80124c0:	08012e0c 	andi	zero,at,1208
 80124c4:	08012e0c 	andi	zero,at,1208
 80124c8:	08012e0c 	andi	zero,at,1208
 80124cc:	08012e0c 	andi	zero,at,1208
 80124d0:	08012e0c 	andi	zero,at,1208
 80124d4:	08012e0c 	andi	zero,at,1208
 80124d8:	08012b80 	call	8012b8 <__alt_mem_onchip_memory2_0+0x8012b8>
 80124dc:	08012e0c 	andi	zero,at,1208
 80124e0:	08012e0c 	andi	zero,at,1208
 80124e4:	08012e0c 	andi	zero,at,1208
 80124e8:	08012e0c 	andi	zero,at,1208
 80124ec:	08012e0c 	andi	zero,at,1208
 80124f0:	08012e0c 	andi	zero,at,1208
 80124f4:	08012e0c 	andi	zero,at,1208
 80124f8:	08012e0c 	andi	zero,at,1208
 80124fc:	08012e0c 	andi	zero,at,1208
 8012500:	08012e0c 	andi	zero,at,1208
 8012504:	08012bbc 	xorhi	zero,at,1198
 8012508:	08012e0c 	andi	zero,at,1208
 801250c:	08012e0c 	andi	zero,at,1208
 8012510:	08012e0c 	andi	zero,at,1208
 8012514:	08012e0c 	andi	zero,at,1208
 8012518:	08012e0c 	andi	zero,at,1208
 801251c:	08012c18 	cmpnei	zero,at,1200
 8012520:	08012e0c 	andi	zero,at,1208
 8012524:	08012e0c 	andi	zero,at,1208
 8012528:	08012c8c 	andi	zero,at,1202
 801252c:	08012e0c 	andi	zero,at,1208
 8012530:	08012e0c 	andi	zero,at,1208
 8012534:	08012e0c 	andi	zero,at,1208
 8012538:	08012e0c 	andi	zero,at,1208
 801253c:	08012e0c 	andi	zero,at,1208
 8012540:	08012e0c 	andi	zero,at,1208
 8012544:	08012e0c 	andi	zero,at,1208
 8012548:	08012e0c 	andi	zero,at,1208
 801254c:	08012e0c 	andi	zero,at,1208
 8012550:	08012e0c 	andi	zero,at,1208
 8012554:	08012a34 	orhi	zero,at,1192
 8012558:	08012a64 	muli	zero,at,1193
 801255c:	08012e0c 	andi	zero,at,1208
 8012560:	08012e0c 	andi	zero,at,1208
 8012564:	08012e0c 	andi	zero,at,1208
 8012568:	08012db4 	orhi	zero,at,1206
 801256c:	08012a64 	muli	zero,at,1193
 8012570:	08012e0c 	andi	zero,at,1208
 8012574:	08012e0c 	andi	zero,at,1208
 8012578:	0801290c 	andi	zero,at,1188
 801257c:	08012e0c 	andi	zero,at,1208
 8012580:	08012920 	cmpeqi	zero,at,1188
 8012584:	08012958 	cmpnei	zero,at,1189
 8012588:	08012658 	cmpnei	zero,at,1177
 801258c:	08012900 	call	801290 <__alt_mem_onchip_memory2_0+0x801290>
 8012590:	08012e0c 	andi	zero,at,1208
 8012594:	08012ccc 	andi	zero,at,1203
 8012598:	08012e0c 	andi	zero,at,1208
 801259c:	08012d18 	cmpnei	zero,at,1204
 80125a0:	08012e0c 	andi	zero,at,1208
 80125a4:	08012e0c 	andi	zero,at,1208
 80125a8:	080129dc 	xori	zero,at,1191
 80125ac:	42000204 	addi	r8,r8,8
 80125b0:	d8c02417 	ldw	r3,144(sp)
 80125b4:	1c07883a 	add	r3,r3,r16
 80125b8:	d8c02415 	stw	r3,144(sp)
 80125bc:	003f8c06 	br	80123f0 <___vfiprintf_internal_r+0x140>
 80125c0:	d9402017 	ldw	r5,128(sp)
 80125c4:	d9002117 	ldw	r4,132(sp)
 80125c8:	800d8540 	call	800d854 <__swsetup_r>
 80125cc:	1003c11e 	bne	r2,zero,80134d4 <___vfiprintf_internal_r+0x1224>
 80125d0:	d9402017 	ldw	r5,128(sp)
 80125d4:	00c00284 	movi	r3,10
 80125d8:	2880030b 	ldhu	r2,12(r5)
 80125dc:	1080068c 	andi	r2,r2,26
 80125e0:	10ff581e 	bne	r2,r3,8012344 <___vfiprintf_internal_r+0x94>
 80125e4:	d8c02017 	ldw	r3,128(sp)
 80125e8:	1880038f 	ldh	r2,14(r3)
 80125ec:	103f5516 	blt	r2,zero,8012344 <___vfiprintf_internal_r+0x94>
 80125f0:	d9c02217 	ldw	r7,136(sp)
 80125f4:	d9002117 	ldw	r4,132(sp)
 80125f8:	a80d883a 	mov	r6,r21
 80125fc:	180b883a 	mov	r5,r3
 8012600:	80137d80 	call	80137d8 <__sbprintf>
 8012604:	dfc03517 	ldw	ra,212(sp)
 8012608:	df003417 	ldw	fp,208(sp)
 801260c:	ddc03317 	ldw	r23,204(sp)
 8012610:	dd803217 	ldw	r22,200(sp)
 8012614:	dd403117 	ldw	r21,196(sp)
 8012618:	dd003017 	ldw	r20,192(sp)
 801261c:	dcc02f17 	ldw	r19,188(sp)
 8012620:	dc802e17 	ldw	r18,184(sp)
 8012624:	dc402d17 	ldw	r17,180(sp)
 8012628:	dc002c17 	ldw	r16,176(sp)
 801262c:	dec03604 	addi	sp,sp,216
 8012630:	f800283a 	ret
 8012634:	800f8600 	call	800f860 <__sinit>
 8012638:	003f2f06 	br	80122f8 <___vfiprintf_internal_r+0x48>
 801263c:	d8c02517 	ldw	r3,148(sp)
 8012640:	d8802215 	stw	r2,136(sp)
 8012644:	00c7c83a 	sub	r3,zero,r3
 8012648:	d8c02515 	stw	r3,148(sp)
 801264c:	8c400114 	ori	r17,r17,4
 8012650:	b0c00007 	ldb	r3,0(r22)
 8012654:	003f7306 	br	8012424 <___vfiprintf_internal_r+0x174>
 8012658:	00800c04 	movi	r2,48
 801265c:	d9402217 	ldw	r5,136(sp)
 8012660:	d8801d05 	stb	r2,116(sp)
 8012664:	00801e04 	movi	r2,120
 8012668:	d8801d45 	stb	r2,117(sp)
 801266c:	d8001d85 	stb	zero,118(sp)
 8012670:	b811883a 	mov	r8,r23
 8012674:	28c00104 	addi	r3,r5,4
 8012678:	2cc00017 	ldw	r19,0(r5)
 801267c:	0029883a 	mov	r20,zero
 8012680:	88800094 	ori	r2,r17,2
 8012684:	80032516 	blt	r16,zero,801331c <___vfiprintf_internal_r+0x106c>
 8012688:	00bfdfc4 	movi	r2,-129
 801268c:	88a2703a 	and	r17,r17,r2
 8012690:	d8c02215 	stw	r3,136(sp)
 8012694:	8c400094 	ori	r17,r17,2
 8012698:	98032a1e 	bne	r19,zero,8013344 <___vfiprintf_internal_r+0x1094>
 801269c:	008200b4 	movhi	r2,2050
 80126a0:	10aa9d04 	addi	r2,r2,-21900
 80126a4:	d8802615 	stw	r2,152(sp)
 80126a8:	002b883a 	mov	r21,zero
 80126ac:	8001741e 	bne	r16,zero,8012c80 <___vfiprintf_internal_r+0x9d0>
 80126b0:	0021883a 	mov	r16,zero
 80126b4:	0029883a 	mov	r20,zero
 80126b8:	ddc01a04 	addi	r23,sp,104
 80126bc:	8027883a 	mov	r19,r16
 80126c0:	8500010e 	bge	r16,r20,80126c8 <___vfiprintf_internal_r+0x418>
 80126c4:	a027883a 	mov	r19,r20
 80126c8:	ad403fcc 	andi	r21,r21,255
 80126cc:	ad40201c 	xori	r21,r21,128
 80126d0:	ad7fe004 	addi	r21,r21,-128
 80126d4:	a8000126 	beq	r21,zero,80126dc <___vfiprintf_internal_r+0x42c>
 80126d8:	9cc00044 	addi	r19,r19,1
 80126dc:	89c0008c 	andi	r7,r17,2
 80126e0:	38000126 	beq	r7,zero,80126e8 <___vfiprintf_internal_r+0x438>
 80126e4:	9cc00084 	addi	r19,r19,2
 80126e8:	88c0210c 	andi	r3,r17,132
 80126ec:	1801dd1e 	bne	r3,zero,8012e64 <___vfiprintf_internal_r+0xbb4>
 80126f0:	d9402517 	ldw	r5,148(sp)
 80126f4:	2cebc83a 	sub	r21,r5,r19
 80126f8:	0541da0e 	bge	zero,r21,8012e64 <___vfiprintf_internal_r+0xbb4>
 80126fc:	07000404 	movi	fp,16
 8012700:	d8801c17 	ldw	r2,112(sp)
 8012704:	e543be0e 	bge	fp,r21,8013600 <___vfiprintf_internal_r+0x1350>
 8012708:	014200b4 	movhi	r5,2050
 801270c:	296b0104 	addi	r5,r5,-21500
 8012710:	dc002715 	stw	r16,156(sp)
 8012714:	d9801b17 	ldw	r6,108(sp)
 8012718:	a821883a 	mov	r16,r21
 801271c:	d9402315 	stw	r5,140(sp)
 8012720:	028001c4 	movi	r10,7
 8012724:	d9c02915 	stw	r7,164(sp)
 8012728:	182b883a 	mov	r21,r3
 801272c:	00000506 	br	8012744 <___vfiprintf_internal_r+0x494>
 8012730:	31000084 	addi	r4,r6,2
 8012734:	42000204 	addi	r8,r8,8
 8012738:	180d883a 	mov	r6,r3
 801273c:	843ffc04 	addi	r16,r16,-16
 8012740:	e4000f0e 	bge	fp,r16,8012780 <___vfiprintf_internal_r+0x4d0>
 8012744:	010200b4 	movhi	r4,2050
 8012748:	10800404 	addi	r2,r2,16
 801274c:	30c00044 	addi	r3,r6,1
 8012750:	212b0104 	addi	r4,r4,-21500
 8012754:	41000015 	stw	r4,0(r8)
 8012758:	47000115 	stw	fp,4(r8)
 801275c:	d8801c15 	stw	r2,112(sp)
 8012760:	d8c01b15 	stw	r3,108(sp)
 8012764:	50fff20e 	bge	r10,r3,8012730 <___vfiprintf_internal_r+0x480>
 8012768:	1001b21e 	bne	r2,zero,8012e34 <___vfiprintf_internal_r+0xb84>
 801276c:	843ffc04 	addi	r16,r16,-16
 8012770:	000d883a 	mov	r6,zero
 8012774:	01000044 	movi	r4,1
 8012778:	d811883a 	mov	r8,sp
 801277c:	e43ff116 	blt	fp,r16,8012744 <___vfiprintf_internal_r+0x494>
 8012780:	a807883a 	mov	r3,r21
 8012784:	d9c02917 	ldw	r7,164(sp)
 8012788:	802b883a 	mov	r21,r16
 801278c:	dc002717 	ldw	r16,156(sp)
 8012790:	d9402317 	ldw	r5,140(sp)
 8012794:	a885883a 	add	r2,r21,r2
 8012798:	45400115 	stw	r21,4(r8)
 801279c:	41400015 	stw	r5,0(r8)
 80127a0:	d8801c15 	stw	r2,112(sp)
 80127a4:	d9001b15 	stw	r4,108(sp)
 80127a8:	014001c4 	movi	r5,7
 80127ac:	29026216 	blt	r5,r4,8013138 <___vfiprintf_internal_r+0xe88>
 80127b0:	d9801d87 	ldb	r6,118(sp)
 80127b4:	42000204 	addi	r8,r8,8
 80127b8:	21400044 	addi	r5,r4,1
 80127bc:	3001ae1e 	bne	r6,zero,8012e78 <___vfiprintf_internal_r+0xbc8>
 80127c0:	3801bb26 	beq	r7,zero,8012eb0 <___vfiprintf_internal_r+0xc00>
 80127c4:	d9001d04 	addi	r4,sp,116
 80127c8:	10800084 	addi	r2,r2,2
 80127cc:	41000015 	stw	r4,0(r8)
 80127d0:	01000084 	movi	r4,2
 80127d4:	41000115 	stw	r4,4(r8)
 80127d8:	d8801c15 	stw	r2,112(sp)
 80127dc:	d9401b15 	stw	r5,108(sp)
 80127e0:	010001c4 	movi	r4,7
 80127e4:	2142680e 	bge	r4,r5,8013188 <___vfiprintf_internal_r+0xed8>
 80127e8:	1002b11e 	bne	r2,zero,80132b0 <___vfiprintf_internal_r+0x1000>
 80127ec:	01802004 	movi	r6,128
 80127f0:	01400044 	movi	r5,1
 80127f4:	0009883a 	mov	r4,zero
 80127f8:	d811883a 	mov	r8,sp
 80127fc:	1981ae1e 	bne	r3,r6,8012eb8 <___vfiprintf_internal_r+0xc08>
 8012800:	d8c02517 	ldw	r3,148(sp)
 8012804:	1cf9c83a 	sub	fp,r3,r19
 8012808:	0701ab0e 	bge	zero,fp,8012eb8 <___vfiprintf_internal_r+0xc08>
 801280c:	05400404 	movi	r21,16
 8012810:	af03a90e 	bge	r21,fp,80136b8 <___vfiprintf_internal_r+0x1408>
 8012814:	014200b4 	movhi	r5,2050
 8012818:	296afd04 	addi	r5,r5,-21516
 801281c:	d9402315 	stw	r5,140(sp)
 8012820:	01c001c4 	movi	r7,7
 8012824:	00000506 	br	801283c <___vfiprintf_internal_r+0x58c>
 8012828:	21800084 	addi	r6,r4,2
 801282c:	42000204 	addi	r8,r8,8
 8012830:	1809883a 	mov	r4,r3
 8012834:	e73ffc04 	addi	fp,fp,-16
 8012838:	af000d0e 	bge	r21,fp,8012870 <___vfiprintf_internal_r+0x5c0>
 801283c:	10800404 	addi	r2,r2,16
 8012840:	20c00044 	addi	r3,r4,1
 8012844:	44800015 	stw	r18,0(r8)
 8012848:	45400115 	stw	r21,4(r8)
 801284c:	d8801c15 	stw	r2,112(sp)
 8012850:	d8c01b15 	stw	r3,108(sp)
 8012854:	38fff40e 	bge	r7,r3,8012828 <___vfiprintf_internal_r+0x578>
 8012858:	10022b1e 	bne	r2,zero,8013108 <___vfiprintf_internal_r+0xe58>
 801285c:	e73ffc04 	addi	fp,fp,-16
 8012860:	01800044 	movi	r6,1
 8012864:	0009883a 	mov	r4,zero
 8012868:	d811883a 	mov	r8,sp
 801286c:	af3ff316 	blt	r21,fp,801283c <___vfiprintf_internal_r+0x58c>
 8012870:	d8c02317 	ldw	r3,140(sp)
 8012874:	1705883a 	add	r2,r2,fp
 8012878:	47000115 	stw	fp,4(r8)
 801287c:	40c00015 	stw	r3,0(r8)
 8012880:	d8801c15 	stw	r2,112(sp)
 8012884:	d9801b15 	stw	r6,108(sp)
 8012888:	00c001c4 	movi	r3,7
 801288c:	19829416 	blt	r3,r6,80132e0 <___vfiprintf_internal_r+0x1030>
 8012890:	8521c83a 	sub	r16,r16,r20
 8012894:	42000204 	addi	r8,r8,8
 8012898:	31400044 	addi	r5,r6,1
 801289c:	3009883a 	mov	r4,r6
 80128a0:	04018716 	blt	zero,r16,8012ec0 <___vfiprintf_internal_r+0xc10>
 80128a4:	a085883a 	add	r2,r20,r2
 80128a8:	45c00015 	stw	r23,0(r8)
 80128ac:	45000115 	stw	r20,4(r8)
 80128b0:	d8801c15 	stw	r2,112(sp)
 80128b4:	d9401b15 	stw	r5,108(sp)
 80128b8:	00c001c4 	movi	r3,7
 80128bc:	1941c20e 	bge	r3,r5,8012fc8 <___vfiprintf_internal_r+0xd18>
 80128c0:	1002531e 	bne	r2,zero,8013210 <___vfiprintf_internal_r+0xf60>
 80128c4:	d8001b15 	stw	zero,108(sp)
 80128c8:	8c40010c 	andi	r17,r17,4
 80128cc:	88023226 	beq	r17,zero,8013198 <___vfiprintf_internal_r+0xee8>
 80128d0:	d9002517 	ldw	r4,148(sp)
 80128d4:	24e3c83a 	sub	r17,r4,r19
 80128d8:	04432916 	blt	zero,r17,8013580 <___vfiprintf_internal_r+0x12d0>
 80128dc:	d8802517 	ldw	r2,148(sp)
 80128e0:	14c0010e 	bge	r2,r19,80128e8 <___vfiprintf_internal_r+0x638>
 80128e4:	9805883a 	mov	r2,r19
 80128e8:	d8c02417 	ldw	r3,144(sp)
 80128ec:	1887883a 	add	r3,r3,r2
 80128f0:	d8c02415 	stw	r3,144(sp)
 80128f4:	d8001b15 	stw	zero,108(sp)
 80128f8:	d811883a 	mov	r8,sp
 80128fc:	003ea006 	br	8012380 <___vfiprintf_internal_r+0xd0>
 8012900:	8c400814 	ori	r17,r17,32
 8012904:	b0c00007 	ldb	r3,0(r22)
 8012908:	003ec606 	br	8012424 <___vfiprintf_internal_r+0x174>
 801290c:	b0c00007 	ldb	r3,0(r22)
 8012910:	00801b04 	movi	r2,108
 8012914:	18832026 	beq	r3,r2,8013598 <___vfiprintf_internal_r+0x12e8>
 8012918:	8c400414 	ori	r17,r17,16
 801291c:	003ec106 	br	8012424 <___vfiprintf_internal_r+0x174>
 8012920:	9cc03fcc 	andi	r19,r19,255
 8012924:	b811883a 	mov	r8,r23
 8012928:	9803981e 	bne	r19,zero,801378c <___vfiprintf_internal_r+0x14dc>
 801292c:	8880080c 	andi	r2,r17,32
 8012930:	1002be26 	beq	r2,zero,801342c <___vfiprintf_internal_r+0x117c>
 8012934:	d9002217 	ldw	r4,136(sp)
 8012938:	d9402417 	ldw	r5,144(sp)
 801293c:	20800017 	ldw	r2,0(r4)
 8012940:	2807d7fa 	srai	r3,r5,31
 8012944:	21000104 	addi	r4,r4,4
 8012948:	d9002215 	stw	r4,136(sp)
 801294c:	11400015 	stw	r5,0(r2)
 8012950:	10c00115 	stw	r3,4(r2)
 8012954:	003e8a06 	br	8012380 <___vfiprintf_internal_r+0xd0>
 8012958:	9cc03fcc 	andi	r19,r19,255
 801295c:	b811883a 	mov	r8,r23
 8012960:	9803871e 	bne	r19,zero,8013780 <___vfiprintf_internal_r+0x14d0>
 8012964:	8880080c 	andi	r2,r17,32
 8012968:	10009a26 	beq	r2,zero,8012bd4 <___vfiprintf_internal_r+0x924>
 801296c:	d9002217 	ldw	r4,136(sp)
 8012970:	d8001d85 	stb	zero,118(sp)
 8012974:	20800204 	addi	r2,r4,8
 8012978:	24c00017 	ldw	r19,0(r4)
 801297c:	25000117 	ldw	r20,4(r4)
 8012980:	8002a416 	blt	r16,zero,8013414 <___vfiprintf_internal_r+0x1164>
 8012984:	013fdfc4 	movi	r4,-129
 8012988:	9d06b03a 	or	r3,r19,r20
 801298c:	d8802215 	stw	r2,136(sp)
 8012990:	8922703a 	and	r17,r17,r4
 8012994:	18009b26 	beq	r3,zero,8012c04 <___vfiprintf_internal_r+0x954>
 8012998:	002b883a 	mov	r21,zero
 801299c:	ddc01a04 	addi	r23,sp,104
 80129a0:	9806d0fa 	srli	r3,r19,3
 80129a4:	a008977a 	slli	r4,r20,29
 80129a8:	a028d0fa 	srli	r20,r20,3
 80129ac:	9cc001cc 	andi	r19,r19,7
 80129b0:	98800c04 	addi	r2,r19,48
 80129b4:	bdffffc4 	addi	r23,r23,-1
 80129b8:	20e6b03a 	or	r19,r4,r3
 80129bc:	b8800005 	stb	r2,0(r23)
 80129c0:	9d06b03a 	or	r3,r19,r20
 80129c4:	183ff61e 	bne	r3,zero,80129a0 <___vfiprintf_internal_r+0x6f0>
 80129c8:	88c0004c 	andi	r3,r17,1
 80129cc:	18021f1e 	bne	r3,zero,801324c <___vfiprintf_internal_r+0xf9c>
 80129d0:	d9401e17 	ldw	r5,120(sp)
 80129d4:	2de9c83a 	sub	r20,r5,r23
 80129d8:	003f3806 	br	80126bc <___vfiprintf_internal_r+0x40c>
 80129dc:	9cc03fcc 	andi	r19,r19,255
 80129e0:	b811883a 	mov	r8,r23
 80129e4:	98034f1e 	bne	r19,zero,8013724 <___vfiprintf_internal_r+0x1474>
 80129e8:	008200b4 	movhi	r2,2050
 80129ec:	10aa9d04 	addi	r2,r2,-21900
 80129f0:	d8802615 	stw	r2,152(sp)
 80129f4:	8880080c 	andi	r2,r17,32
 80129f8:	1000ac26 	beq	r2,zero,8012cac <___vfiprintf_internal_r+0x9fc>
 80129fc:	d9002217 	ldw	r4,136(sp)
 8012a00:	24c00017 	ldw	r19,0(r4)
 8012a04:	25000117 	ldw	r20,4(r4)
 8012a08:	21000204 	addi	r4,r4,8
 8012a0c:	d9002215 	stw	r4,136(sp)
 8012a10:	8880004c 	andi	r2,r17,1
 8012a14:	1001e726 	beq	r2,zero,80131b4 <___vfiprintf_internal_r+0xf04>
 8012a18:	9d04b03a 	or	r2,r19,r20
 8012a1c:	10025c1e 	bne	r2,zero,8013390 <___vfiprintf_internal_r+0x10e0>
 8012a20:	d8001d85 	stb	zero,118(sp)
 8012a24:	80024416 	blt	r16,zero,8013338 <___vfiprintf_internal_r+0x1088>
 8012a28:	00bfdfc4 	movi	r2,-129
 8012a2c:	88a2703a 	and	r17,r17,r2
 8012a30:	003f1d06 	br	80126a8 <___vfiprintf_internal_r+0x3f8>
 8012a34:	d8c02217 	ldw	r3,136(sp)
 8012a38:	04c00044 	movi	r19,1
 8012a3c:	b811883a 	mov	r8,r23
 8012a40:	18800017 	ldw	r2,0(r3)
 8012a44:	18c00104 	addi	r3,r3,4
 8012a48:	d8001d85 	stb	zero,118(sp)
 8012a4c:	d8801005 	stb	r2,64(sp)
 8012a50:	d8c02215 	stw	r3,136(sp)
 8012a54:	9829883a 	mov	r20,r19
 8012a58:	ddc01004 	addi	r23,sp,64
 8012a5c:	0021883a 	mov	r16,zero
 8012a60:	003f1e06 	br	80126dc <___vfiprintf_internal_r+0x42c>
 8012a64:	9cc03fcc 	andi	r19,r19,255
 8012a68:	b811883a 	mov	r8,r23
 8012a6c:	9803331e 	bne	r19,zero,801373c <___vfiprintf_internal_r+0x148c>
 8012a70:	8880080c 	andi	r2,r17,32
 8012a74:	10004826 	beq	r2,zero,8012b98 <___vfiprintf_internal_r+0x8e8>
 8012a78:	d9002217 	ldw	r4,136(sp)
 8012a7c:	20800117 	ldw	r2,4(r4)
 8012a80:	24c00017 	ldw	r19,0(r4)
 8012a84:	21000204 	addi	r4,r4,8
 8012a88:	d9002215 	stw	r4,136(sp)
 8012a8c:	1029883a 	mov	r20,r2
 8012a90:	10024c16 	blt	r2,zero,80133c4 <___vfiprintf_internal_r+0x1114>
 8012a94:	dd401d83 	ldbu	r21,118(sp)
 8012a98:	80007116 	blt	r16,zero,8012c60 <___vfiprintf_internal_r+0x9b0>
 8012a9c:	00ffdfc4 	movi	r3,-129
 8012aa0:	9d04b03a 	or	r2,r19,r20
 8012aa4:	88e2703a 	and	r17,r17,r3
 8012aa8:	1000d126 	beq	r2,zero,8012df0 <___vfiprintf_internal_r+0xb40>
 8012aac:	a0023526 	beq	r20,zero,8013384 <___vfiprintf_internal_r+0x10d4>
 8012ab0:	ddc01a04 	addi	r23,sp,104
 8012ab4:	4039883a 	mov	fp,r8
 8012ab8:	9809883a 	mov	r4,r19
 8012abc:	a00b883a 	mov	r5,r20
 8012ac0:	01800284 	movi	r6,10
 8012ac4:	000f883a 	mov	r7,zero
 8012ac8:	80147dc0 	call	80147dc <__umoddi3>
 8012acc:	10800c04 	addi	r2,r2,48
 8012ad0:	bdffffc4 	addi	r23,r23,-1
 8012ad4:	9809883a 	mov	r4,r19
 8012ad8:	a00b883a 	mov	r5,r20
 8012adc:	b8800005 	stb	r2,0(r23)
 8012ae0:	01800284 	movi	r6,10
 8012ae4:	000f883a 	mov	r7,zero
 8012ae8:	80141e00 	call	80141e0 <__udivdi3>
 8012aec:	1027883a 	mov	r19,r2
 8012af0:	10c4b03a 	or	r2,r2,r3
 8012af4:	1829883a 	mov	r20,r3
 8012af8:	103fef1e 	bne	r2,zero,8012ab8 <___vfiprintf_internal_r+0x808>
 8012afc:	d9001e17 	ldw	r4,120(sp)
 8012b00:	e011883a 	mov	r8,fp
 8012b04:	25e9c83a 	sub	r20,r4,r23
 8012b08:	003eec06 	br	80126bc <___vfiprintf_internal_r+0x40c>
 8012b0c:	d8802307 	ldb	r2,140(sp)
 8012b10:	1002361e 	bne	r2,zero,80133ec <___vfiprintf_internal_r+0x113c>
 8012b14:	00c00804 	movi	r3,32
 8012b18:	d8c02305 	stb	r3,140(sp)
 8012b1c:	04c00044 	movi	r19,1
 8012b20:	b0c00007 	ldb	r3,0(r22)
 8012b24:	003e3f06 	br	8012424 <___vfiprintf_internal_r+0x174>
 8012b28:	8c400054 	ori	r17,r17,1
 8012b2c:	b0c00007 	ldb	r3,0(r22)
 8012b30:	003e3c06 	br	8012424 <___vfiprintf_internal_r+0x174>
 8012b34:	8c402014 	ori	r17,r17,128
 8012b38:	b0c00007 	ldb	r3,0(r22)
 8012b3c:	003e3906 	br	8012424 <___vfiprintf_internal_r+0x174>
 8012b40:	dc002715 	stw	r16,156(sp)
 8012b44:	d8002515 	stw	zero,148(sp)
 8012b48:	1f3ff404 	addi	fp,r3,-48
 8012b4c:	0009883a 	mov	r4,zero
 8012b50:	b021883a 	mov	r16,r22
 8012b54:	01400284 	movi	r5,10
 8012b58:	800a1780 	call	800a178 <__mulsi3>
 8012b5c:	80c00007 	ldb	r3,0(r16)
 8012b60:	e089883a 	add	r4,fp,r2
 8012b64:	b5800044 	addi	r22,r22,1
 8012b68:	1f3ff404 	addi	fp,r3,-48
 8012b6c:	b021883a 	mov	r16,r22
 8012b70:	af3ff82e 	bgeu	r21,fp,8012b54 <___vfiprintf_internal_r+0x8a4>
 8012b74:	d9002515 	stw	r4,148(sp)
 8012b78:	dc002717 	ldw	r16,156(sp)
 8012b7c:	003e2a06 	br	8012428 <___vfiprintf_internal_r+0x178>
 8012b80:	9cc03fcc 	andi	r19,r19,255
 8012b84:	b811883a 	mov	r8,r23
 8012b88:	9802e91e 	bne	r19,zero,8013730 <___vfiprintf_internal_r+0x1480>
 8012b8c:	8c400414 	ori	r17,r17,16
 8012b90:	8880080c 	andi	r2,r17,32
 8012b94:	103fb81e 	bne	r2,zero,8012a78 <___vfiprintf_internal_r+0x7c8>
 8012b98:	8880040c 	andi	r2,r17,16
 8012b9c:	10022e26 	beq	r2,zero,8013458 <___vfiprintf_internal_r+0x11a8>
 8012ba0:	d9402217 	ldw	r5,136(sp)
 8012ba4:	2cc00017 	ldw	r19,0(r5)
 8012ba8:	29400104 	addi	r5,r5,4
 8012bac:	d9402215 	stw	r5,136(sp)
 8012bb0:	9829d7fa 	srai	r20,r19,31
 8012bb4:	a005883a 	mov	r2,r20
 8012bb8:	003fb506 	br	8012a90 <___vfiprintf_internal_r+0x7e0>
 8012bbc:	9cc03fcc 	andi	r19,r19,255
 8012bc0:	b811883a 	mov	r8,r23
 8012bc4:	9802fa1e 	bne	r19,zero,80137b0 <___vfiprintf_internal_r+0x1500>
 8012bc8:	8c400414 	ori	r17,r17,16
 8012bcc:	8880080c 	andi	r2,r17,32
 8012bd0:	103f661e 	bne	r2,zero,801296c <___vfiprintf_internal_r+0x6bc>
 8012bd4:	8880040c 	andi	r2,r17,16
 8012bd8:	10020626 	beq	r2,zero,80133f4 <___vfiprintf_internal_r+0x1144>
 8012bdc:	d9402217 	ldw	r5,136(sp)
 8012be0:	d8001d85 	stb	zero,118(sp)
 8012be4:	0029883a 	mov	r20,zero
 8012be8:	28800104 	addi	r2,r5,4
 8012bec:	2cc00017 	ldw	r19,0(r5)
 8012bf0:	80020816 	blt	r16,zero,8013414 <___vfiprintf_internal_r+0x1164>
 8012bf4:	00ffdfc4 	movi	r3,-129
 8012bf8:	d8802215 	stw	r2,136(sp)
 8012bfc:	88e2703a 	and	r17,r17,r3
 8012c00:	983f651e 	bne	r19,zero,8012998 <___vfiprintf_internal_r+0x6e8>
 8012c04:	002b883a 	mov	r21,zero
 8012c08:	8002cf26 	beq	r16,zero,8013748 <___vfiprintf_internal_r+0x1498>
 8012c0c:	0027883a 	mov	r19,zero
 8012c10:	0029883a 	mov	r20,zero
 8012c14:	003f6106 	br	801299c <___vfiprintf_internal_r+0x6ec>
 8012c18:	9cc03fcc 	andi	r19,r19,255
 8012c1c:	b811883a 	mov	r8,r23
 8012c20:	9802e01e 	bne	r19,zero,80137a4 <___vfiprintf_internal_r+0x14f4>
 8012c24:	8c400414 	ori	r17,r17,16
 8012c28:	8880080c 	andi	r2,r17,32
 8012c2c:	1000641e 	bne	r2,zero,8012dc0 <___vfiprintf_internal_r+0xb10>
 8012c30:	8880040c 	andi	r2,r17,16
 8012c34:	1001c81e 	bne	r2,zero,8013358 <___vfiprintf_internal_r+0x10a8>
 8012c38:	8880100c 	andi	r2,r17,64
 8012c3c:	d8001d85 	stb	zero,118(sp)
 8012c40:	1002281e 	bne	r2,zero,80134e4 <___vfiprintf_internal_r+0x1234>
 8012c44:	d9002217 	ldw	r4,136(sp)
 8012c48:	0029883a 	mov	r20,zero
 8012c4c:	20800104 	addi	r2,r4,4
 8012c50:	24c00017 	ldw	r19,0(r4)
 8012c54:	8001c60e 	bge	r16,zero,8013370 <___vfiprintf_internal_r+0x10c0>
 8012c58:	d8802215 	stw	r2,136(sp)
 8012c5c:	002b883a 	mov	r21,zero
 8012c60:	9d04b03a 	or	r2,r19,r20
 8012c64:	103f911e 	bne	r2,zero,8012aac <___vfiprintf_internal_r+0x7fc>
 8012c68:	00800044 	movi	r2,1
 8012c6c:	10803fcc 	andi	r2,r2,255
 8012c70:	00c00044 	movi	r3,1
 8012c74:	10c05f26 	beq	r2,r3,8012df4 <___vfiprintf_internal_r+0xb44>
 8012c78:	00c00084 	movi	r3,2
 8012c7c:	10ffe31e 	bne	r2,r3,8012c0c <___vfiprintf_internal_r+0x95c>
 8012c80:	0027883a 	mov	r19,zero
 8012c84:	0029883a 	mov	r20,zero
 8012c88:	00015106 	br	80131d0 <___vfiprintf_internal_r+0xf20>
 8012c8c:	9cc03fcc 	andi	r19,r19,255
 8012c90:	b811883a 	mov	r8,r23
 8012c94:	9802c01e 	bne	r19,zero,8013798 <___vfiprintf_internal_r+0x14e8>
 8012c98:	014200b4 	movhi	r5,2050
 8012c9c:	296a9804 	addi	r5,r5,-21920
 8012ca0:	d9402615 	stw	r5,152(sp)
 8012ca4:	8880080c 	andi	r2,r17,32
 8012ca8:	103f541e 	bne	r2,zero,80129fc <___vfiprintf_internal_r+0x74c>
 8012cac:	8880040c 	andi	r2,r17,16
 8012cb0:	1001f226 	beq	r2,zero,801347c <___vfiprintf_internal_r+0x11cc>
 8012cb4:	d9402217 	ldw	r5,136(sp)
 8012cb8:	0029883a 	mov	r20,zero
 8012cbc:	2cc00017 	ldw	r19,0(r5)
 8012cc0:	29400104 	addi	r5,r5,4
 8012cc4:	d9402215 	stw	r5,136(sp)
 8012cc8:	003f5106 	br	8012a10 <___vfiprintf_internal_r+0x760>
 8012ccc:	d8c02217 	ldw	r3,136(sp)
 8012cd0:	b811883a 	mov	r8,r23
 8012cd4:	d8001d85 	stb	zero,118(sp)
 8012cd8:	1dc00017 	ldw	r23,0(r3)
 8012cdc:	1f000104 	addi	fp,r3,4
 8012ce0:	b8025926 	beq	r23,zero,8013648 <___vfiprintf_internal_r+0x1398>
 8012ce4:	80023316 	blt	r16,zero,80135b4 <___vfiprintf_internal_r+0x1304>
 8012ce8:	800d883a 	mov	r6,r16
 8012cec:	000b883a 	mov	r5,zero
 8012cf0:	b809883a 	mov	r4,r23
 8012cf4:	da002a15 	stw	r8,168(sp)
 8012cf8:	80106280 	call	8010628 <memchr>
 8012cfc:	da002a17 	ldw	r8,168(sp)
 8012d00:	10026826 	beq	r2,zero,80136a4 <___vfiprintf_internal_r+0x13f4>
 8012d04:	15e9c83a 	sub	r20,r2,r23
 8012d08:	dd401d83 	ldbu	r21,118(sp)
 8012d0c:	df002215 	stw	fp,136(sp)
 8012d10:	0021883a 	mov	r16,zero
 8012d14:	003e6906 	br	80126bc <___vfiprintf_internal_r+0x40c>
 8012d18:	9cc03fcc 	andi	r19,r19,255
 8012d1c:	b811883a 	mov	r8,r23
 8012d20:	983fc126 	beq	r19,zero,8012c28 <___vfiprintf_internal_r+0x978>
 8012d24:	d8c02303 	ldbu	r3,140(sp)
 8012d28:	d8c01d85 	stb	r3,118(sp)
 8012d2c:	003fbe06 	br	8012c28 <___vfiprintf_internal_r+0x978>
 8012d30:	d9002217 	ldw	r4,136(sp)
 8012d34:	d9402217 	ldw	r5,136(sp)
 8012d38:	21000017 	ldw	r4,0(r4)
 8012d3c:	28800104 	addi	r2,r5,4
 8012d40:	d9002515 	stw	r4,148(sp)
 8012d44:	203e3d16 	blt	r4,zero,801263c <___vfiprintf_internal_r+0x38c>
 8012d48:	d8802215 	stw	r2,136(sp)
 8012d4c:	b0c00007 	ldb	r3,0(r22)
 8012d50:	003db406 	br	8012424 <___vfiprintf_internal_r+0x174>
 8012d54:	00c00ac4 	movi	r3,43
 8012d58:	d8c02305 	stb	r3,140(sp)
 8012d5c:	04c00044 	movi	r19,1
 8012d60:	b0c00007 	ldb	r3,0(r22)
 8012d64:	003daf06 	br	8012424 <___vfiprintf_internal_r+0x174>
 8012d68:	b0c00007 	ldb	r3,0(r22)
 8012d6c:	01000a84 	movi	r4,42
 8012d70:	b4000044 	addi	r16,r22,1
 8012d74:	19025e26 	beq	r3,r4,80136f0 <___vfiprintf_internal_r+0x1440>
 8012d78:	1f3ff404 	addi	fp,r3,-48
 8012d7c:	0009883a 	mov	r4,zero
 8012d80:	af025236 	bltu	r21,fp,80136cc <___vfiprintf_internal_r+0x141c>
 8012d84:	01400284 	movi	r5,10
 8012d88:	800a1780 	call	800a178 <__mulsi3>
 8012d8c:	80c00007 	ldb	r3,0(r16)
 8012d90:	1709883a 	add	r4,r2,fp
 8012d94:	85800044 	addi	r22,r16,1
 8012d98:	1f3ff404 	addi	fp,r3,-48
 8012d9c:	b021883a 	mov	r16,r22
 8012da0:	af3ff82e 	bgeu	r21,fp,8012d84 <___vfiprintf_internal_r+0xad4>
 8012da4:	2021883a 	mov	r16,r4
 8012da8:	203d9f0e 	bge	r4,zero,8012428 <___vfiprintf_internal_r+0x178>
 8012dac:	043fffc4 	movi	r16,-1
 8012db0:	003d9d06 	br	8012428 <___vfiprintf_internal_r+0x178>
 8012db4:	8c401014 	ori	r17,r17,64
 8012db8:	b0c00007 	ldb	r3,0(r22)
 8012dbc:	003d9906 	br	8012424 <___vfiprintf_internal_r+0x174>
 8012dc0:	d9002217 	ldw	r4,136(sp)
 8012dc4:	d8001d85 	stb	zero,118(sp)
 8012dc8:	20c00204 	addi	r3,r4,8
 8012dcc:	24c00017 	ldw	r19,0(r4)
 8012dd0:	25000117 	ldw	r20,4(r4)
 8012dd4:	8001e716 	blt	r16,zero,8013574 <___vfiprintf_internal_r+0x12c4>
 8012dd8:	013fdfc4 	movi	r4,-129
 8012ddc:	9d04b03a 	or	r2,r19,r20
 8012de0:	d8c02215 	stw	r3,136(sp)
 8012de4:	8922703a 	and	r17,r17,r4
 8012de8:	002b883a 	mov	r21,zero
 8012dec:	103f2f1e 	bne	r2,zero,8012aac <___vfiprintf_internal_r+0x7fc>
 8012df0:	803e2f26 	beq	r16,zero,80126b0 <___vfiprintf_internal_r+0x400>
 8012df4:	0027883a 	mov	r19,zero
 8012df8:	9cc00c04 	addi	r19,r19,48
 8012dfc:	dcc019c5 	stb	r19,103(sp)
 8012e00:	dd002817 	ldw	r20,160(sp)
 8012e04:	ddc019c4 	addi	r23,sp,103
 8012e08:	003e2c06 	br	80126bc <___vfiprintf_internal_r+0x40c>
 8012e0c:	9cc03fcc 	andi	r19,r19,255
 8012e10:	b811883a 	mov	r8,r23
 8012e14:	9802571e 	bne	r19,zero,8013774 <___vfiprintf_internal_r+0x14c4>
 8012e18:	18005726 	beq	r3,zero,8012f78 <___vfiprintf_internal_r+0xcc8>
 8012e1c:	04c00044 	movi	r19,1
 8012e20:	d8c01005 	stb	r3,64(sp)
 8012e24:	d8001d85 	stb	zero,118(sp)
 8012e28:	9829883a 	mov	r20,r19
 8012e2c:	ddc01004 	addi	r23,sp,64
 8012e30:	003f0a06 	br	8012a5c <___vfiprintf_internal_r+0x7ac>
 8012e34:	d9402017 	ldw	r5,128(sp)
 8012e38:	d9002117 	ldw	r4,132(sp)
 8012e3c:	d9801a04 	addi	r6,sp,104
 8012e40:	da802a15 	stw	r10,168(sp)
 8012e44:	801219c0 	call	801219c <__sprint_r.part.0>
 8012e48:	da802a17 	ldw	r10,168(sp)
 8012e4c:	1000501e 	bne	r2,zero,8012f90 <___vfiprintf_internal_r+0xce0>
 8012e50:	d9801b17 	ldw	r6,108(sp)
 8012e54:	d8801c17 	ldw	r2,112(sp)
 8012e58:	d811883a 	mov	r8,sp
 8012e5c:	31000044 	addi	r4,r6,1
 8012e60:	003e3606 	br	801273c <___vfiprintf_internal_r+0x48c>
 8012e64:	d9001b17 	ldw	r4,108(sp)
 8012e68:	d8801c17 	ldw	r2,112(sp)
 8012e6c:	21400044 	addi	r5,r4,1
 8012e70:	d9801d87 	ldb	r6,118(sp)
 8012e74:	303e5226 	beq	r6,zero,80127c0 <___vfiprintf_internal_r+0x510>
 8012e78:	01800044 	movi	r6,1
 8012e7c:	d9001d84 	addi	r4,sp,118
 8012e80:	1185883a 	add	r2,r2,r6
 8012e84:	41000015 	stw	r4,0(r8)
 8012e88:	41800115 	stw	r6,4(r8)
 8012e8c:	d8801c15 	stw	r2,112(sp)
 8012e90:	d9401b15 	stw	r5,108(sp)
 8012e94:	010001c4 	movi	r4,7
 8012e98:	2140b00e 	bge	r4,r5,801315c <___vfiprintf_internal_r+0xeac>
 8012e9c:	1000f61e 	bne	r2,zero,8013278 <___vfiprintf_internal_r+0xfc8>
 8012ea0:	3800b31e 	bne	r7,zero,8013170 <___vfiprintf_internal_r+0xec0>
 8012ea4:	0009883a 	mov	r4,zero
 8012ea8:	300b883a 	mov	r5,r6
 8012eac:	d811883a 	mov	r8,sp
 8012eb0:	01802004 	movi	r6,128
 8012eb4:	19be5226 	beq	r3,r6,8012800 <___vfiprintf_internal_r+0x550>
 8012eb8:	8521c83a 	sub	r16,r16,r20
 8012ebc:	043e790e 	bge	zero,r16,80128a4 <___vfiprintf_internal_r+0x5f4>
 8012ec0:	05400404 	movi	r21,16
 8012ec4:	ac01b00e 	bge	r21,r16,8013588 <___vfiprintf_internal_r+0x12d8>
 8012ec8:	014200b4 	movhi	r5,2050
 8012ecc:	296afd04 	addi	r5,r5,-21516
 8012ed0:	d9402315 	stw	r5,140(sp)
 8012ed4:	070001c4 	movi	fp,7
 8012ed8:	00000506 	br	8012ef0 <___vfiprintf_internal_r+0xc40>
 8012edc:	21400084 	addi	r5,r4,2
 8012ee0:	42000204 	addi	r8,r8,8
 8012ee4:	1809883a 	mov	r4,r3
 8012ee8:	843ffc04 	addi	r16,r16,-16
 8012eec:	ac000d0e 	bge	r21,r16,8012f24 <___vfiprintf_internal_r+0xc74>
 8012ef0:	10800404 	addi	r2,r2,16
 8012ef4:	20c00044 	addi	r3,r4,1
 8012ef8:	44800015 	stw	r18,0(r8)
 8012efc:	45400115 	stw	r21,4(r8)
 8012f00:	d8801c15 	stw	r2,112(sp)
 8012f04:	d8c01b15 	stw	r3,108(sp)
 8012f08:	e0fff40e 	bge	fp,r3,8012edc <___vfiprintf_internal_r+0xc2c>
 8012f0c:	1000101e 	bne	r2,zero,8012f50 <___vfiprintf_internal_r+0xca0>
 8012f10:	843ffc04 	addi	r16,r16,-16
 8012f14:	01400044 	movi	r5,1
 8012f18:	0009883a 	mov	r4,zero
 8012f1c:	d811883a 	mov	r8,sp
 8012f20:	ac3ff316 	blt	r21,r16,8012ef0 <___vfiprintf_internal_r+0xc40>
 8012f24:	d8c02317 	ldw	r3,140(sp)
 8012f28:	1405883a 	add	r2,r2,r16
 8012f2c:	44000115 	stw	r16,4(r8)
 8012f30:	40c00015 	stw	r3,0(r8)
 8012f34:	d8801c15 	stw	r2,112(sp)
 8012f38:	d9401b15 	stw	r5,108(sp)
 8012f3c:	00c001c4 	movi	r3,7
 8012f40:	19401916 	blt	r3,r5,8012fa8 <___vfiprintf_internal_r+0xcf8>
 8012f44:	42000204 	addi	r8,r8,8
 8012f48:	29400044 	addi	r5,r5,1
 8012f4c:	003e5506 	br	80128a4 <___vfiprintf_internal_r+0x5f4>
 8012f50:	d9402017 	ldw	r5,128(sp)
 8012f54:	d9002117 	ldw	r4,132(sp)
 8012f58:	d9801a04 	addi	r6,sp,104
 8012f5c:	801219c0 	call	801219c <__sprint_r.part.0>
 8012f60:	10000b1e 	bne	r2,zero,8012f90 <___vfiprintf_internal_r+0xce0>
 8012f64:	d9001b17 	ldw	r4,108(sp)
 8012f68:	d8801c17 	ldw	r2,112(sp)
 8012f6c:	d811883a 	mov	r8,sp
 8012f70:	21400044 	addi	r5,r4,1
 8012f74:	003fdc06 	br	8012ee8 <___vfiprintf_internal_r+0xc38>
 8012f78:	d8801c17 	ldw	r2,112(sp)
 8012f7c:	10000426 	beq	r2,zero,8012f90 <___vfiprintf_internal_r+0xce0>
 8012f80:	d9402017 	ldw	r5,128(sp)
 8012f84:	d9002117 	ldw	r4,132(sp)
 8012f88:	d9801a04 	addi	r6,sp,104
 8012f8c:	801219c0 	call	801219c <__sprint_r.part.0>
 8012f90:	d9402017 	ldw	r5,128(sp)
 8012f94:	2880030b 	ldhu	r2,12(r5)
 8012f98:	1080100c 	andi	r2,r2,64
 8012f9c:	10014d1e 	bne	r2,zero,80134d4 <___vfiprintf_internal_r+0x1224>
 8012fa0:	d8802417 	ldw	r2,144(sp)
 8012fa4:	003d9706 	br	8012604 <___vfiprintf_internal_r+0x354>
 8012fa8:	1000d21e 	bne	r2,zero,80132f4 <___vfiprintf_internal_r+0x1044>
 8012fac:	00c00044 	movi	r3,1
 8012fb0:	a005883a 	mov	r2,r20
 8012fb4:	ddc00015 	stw	r23,0(sp)
 8012fb8:	dd000115 	stw	r20,4(sp)
 8012fbc:	dd001c15 	stw	r20,112(sp)
 8012fc0:	d8c01b15 	stw	r3,108(sp)
 8012fc4:	d811883a 	mov	r8,sp
 8012fc8:	42000204 	addi	r8,r8,8
 8012fcc:	8c40010c 	andi	r17,r17,4
 8012fd0:	88004026 	beq	r17,zero,80130d4 <___vfiprintf_internal_r+0xe24>
 8012fd4:	d9002517 	ldw	r4,148(sp)
 8012fd8:	24e3c83a 	sub	r17,r4,r19
 8012fdc:	04403d0e 	bge	zero,r17,80130d4 <___vfiprintf_internal_r+0xe24>
 8012fe0:	04000404 	movi	r16,16
 8012fe4:	8441a90e 	bge	r16,r17,801368c <___vfiprintf_internal_r+0x13dc>
 8012fe8:	00c200b4 	movhi	r3,2050
 8012fec:	18eb0104 	addi	r3,r3,-21500
 8012ff0:	d9001b17 	ldw	r4,108(sp)
 8012ff4:	d8c02315 	stw	r3,140(sp)
 8012ff8:	050001c4 	movi	r20,7
 8012ffc:	dd402117 	ldw	r21,132(sp)
 8013000:	ddc02017 	ldw	r23,128(sp)
 8013004:	00000506 	br	801301c <___vfiprintf_internal_r+0xd6c>
 8013008:	21400084 	addi	r5,r4,2
 801300c:	42000204 	addi	r8,r8,8
 8013010:	1809883a 	mov	r4,r3
 8013014:	8c7ffc04 	addi	r17,r17,-16
 8013018:	84400f0e 	bge	r16,r17,8013058 <___vfiprintf_internal_r+0xda8>
 801301c:	014200b4 	movhi	r5,2050
 8013020:	10800404 	addi	r2,r2,16
 8013024:	20c00044 	addi	r3,r4,1
 8013028:	296b0104 	addi	r5,r5,-21500
 801302c:	41400015 	stw	r5,0(r8)
 8013030:	44000115 	stw	r16,4(r8)
 8013034:	d8801c15 	stw	r2,112(sp)
 8013038:	d8c01b15 	stw	r3,108(sp)
 801303c:	a0fff20e 	bge	r20,r3,8013008 <___vfiprintf_internal_r+0xd58>
 8013040:	1000141e 	bne	r2,zero,8013094 <___vfiprintf_internal_r+0xde4>
 8013044:	8c7ffc04 	addi	r17,r17,-16
 8013048:	01400044 	movi	r5,1
 801304c:	0009883a 	mov	r4,zero
 8013050:	d811883a 	mov	r8,sp
 8013054:	847ff116 	blt	r16,r17,801301c <___vfiprintf_internal_r+0xd6c>
 8013058:	d8c02317 	ldw	r3,140(sp)
 801305c:	1445883a 	add	r2,r2,r17
 8013060:	44400115 	stw	r17,4(r8)
 8013064:	40c00015 	stw	r3,0(r8)
 8013068:	d8801c15 	stw	r2,112(sp)
 801306c:	d9401b15 	stw	r5,108(sp)
 8013070:	00c001c4 	movi	r3,7
 8013074:	1940170e 	bge	r3,r5,80130d4 <___vfiprintf_internal_r+0xe24>
 8013078:	1000101e 	bne	r2,zero,80130bc <___vfiprintf_internal_r+0xe0c>
 801307c:	d8802517 	ldw	r2,148(sp)
 8013080:	14c11616 	blt	r2,r19,80134dc <___vfiprintf_internal_r+0x122c>
 8013084:	d9002417 	ldw	r4,144(sp)
 8013088:	2089883a 	add	r4,r4,r2
 801308c:	d9002415 	stw	r4,144(sp)
 8013090:	003e1806 	br	80128f4 <___vfiprintf_internal_r+0x644>
 8013094:	d9801a04 	addi	r6,sp,104
 8013098:	b80b883a 	mov	r5,r23
 801309c:	a809883a 	mov	r4,r21
 80130a0:	801219c0 	call	801219c <__sprint_r.part.0>
 80130a4:	103fba1e 	bne	r2,zero,8012f90 <___vfiprintf_internal_r+0xce0>
 80130a8:	d9001b17 	ldw	r4,108(sp)
 80130ac:	d8801c17 	ldw	r2,112(sp)
 80130b0:	d811883a 	mov	r8,sp
 80130b4:	21400044 	addi	r5,r4,1
 80130b8:	003fd606 	br	8013014 <___vfiprintf_internal_r+0xd64>
 80130bc:	d9402017 	ldw	r5,128(sp)
 80130c0:	d9002117 	ldw	r4,132(sp)
 80130c4:	d9801a04 	addi	r6,sp,104
 80130c8:	801219c0 	call	801219c <__sprint_r.part.0>
 80130cc:	103fb01e 	bne	r2,zero,8012f90 <___vfiprintf_internal_r+0xce0>
 80130d0:	d8801c17 	ldw	r2,112(sp)
 80130d4:	d8c02517 	ldw	r3,148(sp)
 80130d8:	1cc0010e 	bge	r3,r19,80130e0 <___vfiprintf_internal_r+0xe30>
 80130dc:	9807883a 	mov	r3,r19
 80130e0:	d9002417 	ldw	r4,144(sp)
 80130e4:	20c9883a 	add	r4,r4,r3
 80130e8:	d9002415 	stw	r4,144(sp)
 80130ec:	103e0126 	beq	r2,zero,80128f4 <___vfiprintf_internal_r+0x644>
 80130f0:	d9402017 	ldw	r5,128(sp)
 80130f4:	d9002117 	ldw	r4,132(sp)
 80130f8:	d9801a04 	addi	r6,sp,104
 80130fc:	801219c0 	call	801219c <__sprint_r.part.0>
 8013100:	103dfc26 	beq	r2,zero,80128f4 <___vfiprintf_internal_r+0x644>
 8013104:	003fa206 	br	8012f90 <___vfiprintf_internal_r+0xce0>
 8013108:	d9402017 	ldw	r5,128(sp)
 801310c:	d9002117 	ldw	r4,132(sp)
 8013110:	d9801a04 	addi	r6,sp,104
 8013114:	d9c02b15 	stw	r7,172(sp)
 8013118:	801219c0 	call	801219c <__sprint_r.part.0>
 801311c:	d9c02b17 	ldw	r7,172(sp)
 8013120:	103f9b1e 	bne	r2,zero,8012f90 <___vfiprintf_internal_r+0xce0>
 8013124:	d9001b17 	ldw	r4,108(sp)
 8013128:	d8801c17 	ldw	r2,112(sp)
 801312c:	d811883a 	mov	r8,sp
 8013130:	21800044 	addi	r6,r4,1
 8013134:	003dbf06 	br	8012834 <___vfiprintf_internal_r+0x584>
 8013138:	1000d81e 	bne	r2,zero,801349c <___vfiprintf_internal_r+0x11ec>
 801313c:	d9001d87 	ldb	r4,118(sp)
 8013140:	20000a26 	beq	r4,zero,801316c <___vfiprintf_internal_r+0xebc>
 8013144:	00800044 	movi	r2,1
 8013148:	d9001d84 	addi	r4,sp,118
 801314c:	100b883a 	mov	r5,r2
 8013150:	d9000015 	stw	r4,0(sp)
 8013154:	d8800115 	stw	r2,4(sp)
 8013158:	d811883a 	mov	r8,sp
 801315c:	2809883a 	mov	r4,r5
 8013160:	42000204 	addi	r8,r8,8
 8013164:	29400044 	addi	r5,r5,1
 8013168:	003d9506 	br	80127c0 <___vfiprintf_internal_r+0x510>
 801316c:	3800fd26 	beq	r7,zero,8013564 <___vfiprintf_internal_r+0x12b4>
 8013170:	00800084 	movi	r2,2
 8013174:	d9001d04 	addi	r4,sp,116
 8013178:	d9000015 	stw	r4,0(sp)
 801317c:	d8800115 	stw	r2,4(sp)
 8013180:	01400044 	movi	r5,1
 8013184:	d811883a 	mov	r8,sp
 8013188:	2809883a 	mov	r4,r5
 801318c:	42000204 	addi	r8,r8,8
 8013190:	29400044 	addi	r5,r5,1
 8013194:	003f4606 	br	8012eb0 <___vfiprintf_internal_r+0xc00>
 8013198:	d8802517 	ldw	r2,148(sp)
 801319c:	14c0010e 	bge	r2,r19,80131a4 <___vfiprintf_internal_r+0xef4>
 80131a0:	9805883a 	mov	r2,r19
 80131a4:	d9402417 	ldw	r5,144(sp)
 80131a8:	288b883a 	add	r5,r5,r2
 80131ac:	d9402415 	stw	r5,144(sp)
 80131b0:	003dd006 	br	80128f4 <___vfiprintf_internal_r+0x644>
 80131b4:	d8001d85 	stb	zero,118(sp)
 80131b8:	80005d16 	blt	r16,zero,8013330 <___vfiprintf_internal_r+0x1080>
 80131bc:	00ffdfc4 	movi	r3,-129
 80131c0:	9d04b03a 	or	r2,r19,r20
 80131c4:	88e2703a 	and	r17,r17,r3
 80131c8:	103d3726 	beq	r2,zero,80126a8 <___vfiprintf_internal_r+0x3f8>
 80131cc:	002b883a 	mov	r21,zero
 80131d0:	d9002617 	ldw	r4,152(sp)
 80131d4:	ddc01a04 	addi	r23,sp,104
 80131d8:	988003cc 	andi	r2,r19,15
 80131dc:	a006973a 	slli	r3,r20,28
 80131e0:	2085883a 	add	r2,r4,r2
 80131e4:	9826d13a 	srli	r19,r19,4
 80131e8:	10800003 	ldbu	r2,0(r2)
 80131ec:	a028d13a 	srli	r20,r20,4
 80131f0:	bdffffc4 	addi	r23,r23,-1
 80131f4:	1ce6b03a 	or	r19,r3,r19
 80131f8:	b8800005 	stb	r2,0(r23)
 80131fc:	9d04b03a 	or	r2,r19,r20
 8013200:	103ff51e 	bne	r2,zero,80131d8 <___vfiprintf_internal_r+0xf28>
 8013204:	d8801e17 	ldw	r2,120(sp)
 8013208:	15e9c83a 	sub	r20,r2,r23
 801320c:	003d2b06 	br	80126bc <___vfiprintf_internal_r+0x40c>
 8013210:	d9402017 	ldw	r5,128(sp)
 8013214:	d9002117 	ldw	r4,132(sp)
 8013218:	d9801a04 	addi	r6,sp,104
 801321c:	801219c0 	call	801219c <__sprint_r.part.0>
 8013220:	103f5b1e 	bne	r2,zero,8012f90 <___vfiprintf_internal_r+0xce0>
 8013224:	d8801c17 	ldw	r2,112(sp)
 8013228:	d811883a 	mov	r8,sp
 801322c:	003f6706 	br	8012fcc <___vfiprintf_internal_r+0xd1c>
 8013230:	d9402017 	ldw	r5,128(sp)
 8013234:	d9002117 	ldw	r4,132(sp)
 8013238:	d9801a04 	addi	r6,sp,104
 801323c:	801219c0 	call	801219c <__sprint_r.part.0>
 8013240:	103f531e 	bne	r2,zero,8012f90 <___vfiprintf_internal_r+0xce0>
 8013244:	d811883a 	mov	r8,sp
 8013248:	003cd906 	br	80125b0 <___vfiprintf_internal_r+0x300>
 801324c:	10803fcc 	andi	r2,r2,255
 8013250:	1080201c 	xori	r2,r2,128
 8013254:	10bfe004 	addi	r2,r2,-128
 8013258:	00c00c04 	movi	r3,48
 801325c:	10ffe926 	beq	r2,r3,8013204 <___vfiprintf_internal_r+0xf54>
 8013260:	b8ffffc5 	stb	r3,-1(r23)
 8013264:	d8c01e17 	ldw	r3,120(sp)
 8013268:	b8bfffc4 	addi	r2,r23,-1
 801326c:	102f883a 	mov	r23,r2
 8013270:	18a9c83a 	sub	r20,r3,r2
 8013274:	003d1106 	br	80126bc <___vfiprintf_internal_r+0x40c>
 8013278:	d9402017 	ldw	r5,128(sp)
 801327c:	d9002117 	ldw	r4,132(sp)
 8013280:	d9801a04 	addi	r6,sp,104
 8013284:	d8c02a15 	stw	r3,168(sp)
 8013288:	d9c02b15 	stw	r7,172(sp)
 801328c:	801219c0 	call	801219c <__sprint_r.part.0>
 8013290:	d8c02a17 	ldw	r3,168(sp)
 8013294:	d9c02b17 	ldw	r7,172(sp)
 8013298:	103f3d1e 	bne	r2,zero,8012f90 <___vfiprintf_internal_r+0xce0>
 801329c:	d9001b17 	ldw	r4,108(sp)
 80132a0:	d8801c17 	ldw	r2,112(sp)
 80132a4:	d811883a 	mov	r8,sp
 80132a8:	21400044 	addi	r5,r4,1
 80132ac:	003d4406 	br	80127c0 <___vfiprintf_internal_r+0x510>
 80132b0:	d9402017 	ldw	r5,128(sp)
 80132b4:	d9002117 	ldw	r4,132(sp)
 80132b8:	d9801a04 	addi	r6,sp,104
 80132bc:	d8c02a15 	stw	r3,168(sp)
 80132c0:	801219c0 	call	801219c <__sprint_r.part.0>
 80132c4:	d8c02a17 	ldw	r3,168(sp)
 80132c8:	103f311e 	bne	r2,zero,8012f90 <___vfiprintf_internal_r+0xce0>
 80132cc:	d9001b17 	ldw	r4,108(sp)
 80132d0:	d8801c17 	ldw	r2,112(sp)
 80132d4:	d811883a 	mov	r8,sp
 80132d8:	21400044 	addi	r5,r4,1
 80132dc:	003ef406 	br	8012eb0 <___vfiprintf_internal_r+0xc00>
 80132e0:	1000bd1e 	bne	r2,zero,80135d8 <___vfiprintf_internal_r+0x1328>
 80132e4:	01400044 	movi	r5,1
 80132e8:	0009883a 	mov	r4,zero
 80132ec:	d811883a 	mov	r8,sp
 80132f0:	003ef106 	br	8012eb8 <___vfiprintf_internal_r+0xc08>
 80132f4:	d9402017 	ldw	r5,128(sp)
 80132f8:	d9002117 	ldw	r4,132(sp)
 80132fc:	d9801a04 	addi	r6,sp,104
 8013300:	801219c0 	call	801219c <__sprint_r.part.0>
 8013304:	103f221e 	bne	r2,zero,8012f90 <___vfiprintf_internal_r+0xce0>
 8013308:	d9401b17 	ldw	r5,108(sp)
 801330c:	d8801c17 	ldw	r2,112(sp)
 8013310:	d811883a 	mov	r8,sp
 8013314:	29400044 	addi	r5,r5,1
 8013318:	003d6206 	br	80128a4 <___vfiprintf_internal_r+0x5f4>
 801331c:	014200b4 	movhi	r5,2050
 8013320:	296a9d04 	addi	r5,r5,-21900
 8013324:	d9402615 	stw	r5,152(sp)
 8013328:	d8c02215 	stw	r3,136(sp)
 801332c:	1023883a 	mov	r17,r2
 8013330:	9d04b03a 	or	r2,r19,r20
 8013334:	103fa51e 	bne	r2,zero,80131cc <___vfiprintf_internal_r+0xf1c>
 8013338:	002b883a 	mov	r21,zero
 801333c:	00800084 	movi	r2,2
 8013340:	003e4a06 	br	8012c6c <___vfiprintf_internal_r+0x9bc>
 8013344:	014200b4 	movhi	r5,2050
 8013348:	296a9d04 	addi	r5,r5,-21900
 801334c:	002b883a 	mov	r21,zero
 8013350:	d9402615 	stw	r5,152(sp)
 8013354:	003f9e06 	br	80131d0 <___vfiprintf_internal_r+0xf20>
 8013358:	d9402217 	ldw	r5,136(sp)
 801335c:	d8001d85 	stb	zero,118(sp)
 8013360:	0029883a 	mov	r20,zero
 8013364:	28800104 	addi	r2,r5,4
 8013368:	2cc00017 	ldw	r19,0(r5)
 801336c:	803e3a16 	blt	r16,zero,8012c58 <___vfiprintf_internal_r+0x9a8>
 8013370:	00ffdfc4 	movi	r3,-129
 8013374:	d8802215 	stw	r2,136(sp)
 8013378:	88e2703a 	and	r17,r17,r3
 801337c:	002b883a 	mov	r21,zero
 8013380:	983e9b26 	beq	r19,zero,8012df0 <___vfiprintf_internal_r+0xb40>
 8013384:	00800244 	movi	r2,9
 8013388:	14fdc936 	bltu	r2,r19,8012ab0 <___vfiprintf_internal_r+0x800>
 801338c:	003e9a06 	br	8012df8 <___vfiprintf_internal_r+0xb48>
 8013390:	00800c04 	movi	r2,48
 8013394:	d8c01d45 	stb	r3,117(sp)
 8013398:	d8801d05 	stb	r2,116(sp)
 801339c:	d8001d85 	stb	zero,118(sp)
 80133a0:	88c00094 	ori	r3,r17,2
 80133a4:	80009c16 	blt	r16,zero,8013618 <___vfiprintf_internal_r+0x1368>
 80133a8:	00bfdfc4 	movi	r2,-129
 80133ac:	88a2703a 	and	r17,r17,r2
 80133b0:	8c400094 	ori	r17,r17,2
 80133b4:	002b883a 	mov	r21,zero
 80133b8:	003f8506 	br	80131d0 <___vfiprintf_internal_r+0xf20>
 80133bc:	b029883a 	mov	r20,r22
 80133c0:	003c0b06 	br	80123f0 <___vfiprintf_internal_r+0x140>
 80133c4:	04e7c83a 	sub	r19,zero,r19
 80133c8:	05400b44 	movi	r21,45
 80133cc:	9804c03a 	cmpne	r2,r19,zero
 80133d0:	0529c83a 	sub	r20,zero,r20
 80133d4:	dd401d85 	stb	r21,118(sp)
 80133d8:	a0a9c83a 	sub	r20,r20,r2
 80133dc:	80009716 	blt	r16,zero,801363c <___vfiprintf_internal_r+0x138c>
 80133e0:	00bfdfc4 	movi	r2,-129
 80133e4:	88a2703a 	and	r17,r17,r2
 80133e8:	003db006 	br	8012aac <___vfiprintf_internal_r+0x7fc>
 80133ec:	b0c00007 	ldb	r3,0(r22)
 80133f0:	003c0c06 	br	8012424 <___vfiprintf_internal_r+0x174>
 80133f4:	8880100c 	andi	r2,r17,64
 80133f8:	d8001d85 	stb	zero,118(sp)
 80133fc:	1000461e 	bne	r2,zero,8013518 <___vfiprintf_internal_r+0x1268>
 8013400:	d9002217 	ldw	r4,136(sp)
 8013404:	0029883a 	mov	r20,zero
 8013408:	20800104 	addi	r2,r4,4
 801340c:	24c00017 	ldw	r19,0(r4)
 8013410:	803df80e 	bge	r16,zero,8012bf4 <___vfiprintf_internal_r+0x944>
 8013414:	9d06b03a 	or	r3,r19,r20
 8013418:	d8802215 	stw	r2,136(sp)
 801341c:	183d5e1e 	bne	r3,zero,8012998 <___vfiprintf_internal_r+0x6e8>
 8013420:	002b883a 	mov	r21,zero
 8013424:	0005883a 	mov	r2,zero
 8013428:	003e1006 	br	8012c6c <___vfiprintf_internal_r+0x9bc>
 801342c:	8880040c 	andi	r2,r17,16
 8013430:	1000321e 	bne	r2,zero,80134fc <___vfiprintf_internal_r+0x124c>
 8013434:	8c40100c 	andi	r17,r17,64
 8013438:	88008d26 	beq	r17,zero,8013670 <___vfiprintf_internal_r+0x13c0>
 801343c:	d9402217 	ldw	r5,136(sp)
 8013440:	d8c02417 	ldw	r3,144(sp)
 8013444:	28800017 	ldw	r2,0(r5)
 8013448:	29400104 	addi	r5,r5,4
 801344c:	d9402215 	stw	r5,136(sp)
 8013450:	10c0000d 	sth	r3,0(r2)
 8013454:	003bca06 	br	8012380 <___vfiprintf_internal_r+0xd0>
 8013458:	8880100c 	andi	r2,r17,64
 801345c:	10003a26 	beq	r2,zero,8013548 <___vfiprintf_internal_r+0x1298>
 8013460:	d8802217 	ldw	r2,136(sp)
 8013464:	14c0000f 	ldh	r19,0(r2)
 8013468:	10800104 	addi	r2,r2,4
 801346c:	d8802215 	stw	r2,136(sp)
 8013470:	9829d7fa 	srai	r20,r19,31
 8013474:	a005883a 	mov	r2,r20
 8013478:	003d8506 	br	8012a90 <___vfiprintf_internal_r+0x7e0>
 801347c:	8880100c 	andi	r2,r17,64
 8013480:	10002b26 	beq	r2,zero,8013530 <___vfiprintf_internal_r+0x1280>
 8013484:	d8802217 	ldw	r2,136(sp)
 8013488:	0029883a 	mov	r20,zero
 801348c:	14c0000b 	ldhu	r19,0(r2)
 8013490:	10800104 	addi	r2,r2,4
 8013494:	d8802215 	stw	r2,136(sp)
 8013498:	003d5d06 	br	8012a10 <___vfiprintf_internal_r+0x760>
 801349c:	d9402017 	ldw	r5,128(sp)
 80134a0:	d9002117 	ldw	r4,132(sp)
 80134a4:	d9801a04 	addi	r6,sp,104
 80134a8:	d8c02a15 	stw	r3,168(sp)
 80134ac:	d9c02b15 	stw	r7,172(sp)
 80134b0:	801219c0 	call	801219c <__sprint_r.part.0>
 80134b4:	d8c02a17 	ldw	r3,168(sp)
 80134b8:	d9c02b17 	ldw	r7,172(sp)
 80134bc:	103eb41e 	bne	r2,zero,8012f90 <___vfiprintf_internal_r+0xce0>
 80134c0:	d9001b17 	ldw	r4,108(sp)
 80134c4:	d8801c17 	ldw	r2,112(sp)
 80134c8:	d811883a 	mov	r8,sp
 80134cc:	21400044 	addi	r5,r4,1
 80134d0:	003e6706 	br	8012e70 <___vfiprintf_internal_r+0xbc0>
 80134d4:	00bfffc4 	movi	r2,-1
 80134d8:	003c4a06 	br	8012604 <___vfiprintf_internal_r+0x354>
 80134dc:	9805883a 	mov	r2,r19
 80134e0:	003ee806 	br	8013084 <___vfiprintf_internal_r+0xdd4>
 80134e4:	d8c02217 	ldw	r3,136(sp)
 80134e8:	0029883a 	mov	r20,zero
 80134ec:	18800104 	addi	r2,r3,4
 80134f0:	1cc0000b 	ldhu	r19,0(r3)
 80134f4:	803f9e0e 	bge	r16,zero,8013370 <___vfiprintf_internal_r+0x10c0>
 80134f8:	003dd706 	br	8012c58 <___vfiprintf_internal_r+0x9a8>
 80134fc:	d8c02217 	ldw	r3,136(sp)
 8013500:	d9002417 	ldw	r4,144(sp)
 8013504:	18800017 	ldw	r2,0(r3)
 8013508:	18c00104 	addi	r3,r3,4
 801350c:	d8c02215 	stw	r3,136(sp)
 8013510:	11000015 	stw	r4,0(r2)
 8013514:	003b9a06 	br	8012380 <___vfiprintf_internal_r+0xd0>
 8013518:	d8c02217 	ldw	r3,136(sp)
 801351c:	0029883a 	mov	r20,zero
 8013520:	18800104 	addi	r2,r3,4
 8013524:	1cc0000b 	ldhu	r19,0(r3)
 8013528:	803db20e 	bge	r16,zero,8012bf4 <___vfiprintf_internal_r+0x944>
 801352c:	003fb906 	br	8013414 <___vfiprintf_internal_r+0x1164>
 8013530:	d9002217 	ldw	r4,136(sp)
 8013534:	0029883a 	mov	r20,zero
 8013538:	24c00017 	ldw	r19,0(r4)
 801353c:	21000104 	addi	r4,r4,4
 8013540:	d9002215 	stw	r4,136(sp)
 8013544:	003d3206 	br	8012a10 <___vfiprintf_internal_r+0x760>
 8013548:	d8c02217 	ldw	r3,136(sp)
 801354c:	1cc00017 	ldw	r19,0(r3)
 8013550:	18c00104 	addi	r3,r3,4
 8013554:	d8c02215 	stw	r3,136(sp)
 8013558:	9829d7fa 	srai	r20,r19,31
 801355c:	a005883a 	mov	r2,r20
 8013560:	003d4b06 	br	8012a90 <___vfiprintf_internal_r+0x7e0>
 8013564:	0009883a 	mov	r4,zero
 8013568:	01400044 	movi	r5,1
 801356c:	d811883a 	mov	r8,sp
 8013570:	003e4f06 	br	8012eb0 <___vfiprintf_internal_r+0xc00>
 8013574:	d8c02215 	stw	r3,136(sp)
 8013578:	002b883a 	mov	r21,zero
 801357c:	003db806 	br	8012c60 <___vfiprintf_internal_r+0x9b0>
 8013580:	d811883a 	mov	r8,sp
 8013584:	003e9606 	br	8012fe0 <___vfiprintf_internal_r+0xd30>
 8013588:	010200b4 	movhi	r4,2050
 801358c:	212afd04 	addi	r4,r4,-21516
 8013590:	d9002315 	stw	r4,140(sp)
 8013594:	003e6306 	br	8012f24 <___vfiprintf_internal_r+0xc74>
 8013598:	b0c00043 	ldbu	r3,1(r22)
 801359c:	8c400814 	ori	r17,r17,32
 80135a0:	b5800044 	addi	r22,r22,1
 80135a4:	18c03fcc 	andi	r3,r3,255
 80135a8:	18c0201c 	xori	r3,r3,128
 80135ac:	18ffe004 	addi	r3,r3,-128
 80135b0:	003b9c06 	br	8012424 <___vfiprintf_internal_r+0x174>
 80135b4:	b809883a 	mov	r4,r23
 80135b8:	da002a15 	stw	r8,168(sp)
 80135bc:	800b0980 	call	800b098 <strlen>
 80135c0:	1029883a 	mov	r20,r2
 80135c4:	dd401d83 	ldbu	r21,118(sp)
 80135c8:	df002215 	stw	fp,136(sp)
 80135cc:	0021883a 	mov	r16,zero
 80135d0:	da002a17 	ldw	r8,168(sp)
 80135d4:	003c3906 	br	80126bc <___vfiprintf_internal_r+0x40c>
 80135d8:	d9402017 	ldw	r5,128(sp)
 80135dc:	d9002117 	ldw	r4,132(sp)
 80135e0:	d9801a04 	addi	r6,sp,104
 80135e4:	801219c0 	call	801219c <__sprint_r.part.0>
 80135e8:	103e691e 	bne	r2,zero,8012f90 <___vfiprintf_internal_r+0xce0>
 80135ec:	d9001b17 	ldw	r4,108(sp)
 80135f0:	d8801c17 	ldw	r2,112(sp)
 80135f4:	d811883a 	mov	r8,sp
 80135f8:	21400044 	addi	r5,r4,1
 80135fc:	003e2e06 	br	8012eb8 <___vfiprintf_internal_r+0xc08>
 8013600:	010200b4 	movhi	r4,2050
 8013604:	212b0104 	addi	r4,r4,-21500
 8013608:	d9002315 	stw	r4,140(sp)
 801360c:	d9001b17 	ldw	r4,108(sp)
 8013610:	21000044 	addi	r4,r4,1
 8013614:	003c5e06 	br	8012790 <___vfiprintf_internal_r+0x4e0>
 8013618:	002b883a 	mov	r21,zero
 801361c:	00800084 	movi	r2,2
 8013620:	10803fcc 	andi	r2,r2,255
 8013624:	01000044 	movi	r4,1
 8013628:	11002b26 	beq	r2,r4,80136d8 <___vfiprintf_internal_r+0x1428>
 801362c:	01000084 	movi	r4,2
 8013630:	11002b1e 	bne	r2,r4,80136e0 <___vfiprintf_internal_r+0x1430>
 8013634:	1823883a 	mov	r17,r3
 8013638:	003ee506 	br	80131d0 <___vfiprintf_internal_r+0xf20>
 801363c:	8807883a 	mov	r3,r17
 8013640:	00800044 	movi	r2,1
 8013644:	003ff606 	br	8013620 <___vfiprintf_internal_r+0x1370>
 8013648:	00800184 	movi	r2,6
 801364c:	1400012e 	bgeu	r2,r16,8013654 <___vfiprintf_internal_r+0x13a4>
 8013650:	1021883a 	mov	r16,r2
 8013654:	8029883a 	mov	r20,r16
 8013658:	8027883a 	mov	r19,r16
 801365c:	80002216 	blt	r16,zero,80136e8 <___vfiprintf_internal_r+0x1438>
 8013660:	05c200b4 	movhi	r23,2050
 8013664:	df002215 	stw	fp,136(sp)
 8013668:	bdeaa204 	addi	r23,r23,-21880
 801366c:	003cfb06 	br	8012a5c <___vfiprintf_internal_r+0x7ac>
 8013670:	d9002217 	ldw	r4,136(sp)
 8013674:	d9402417 	ldw	r5,144(sp)
 8013678:	20800017 	ldw	r2,0(r4)
 801367c:	21000104 	addi	r4,r4,4
 8013680:	d9002215 	stw	r4,136(sp)
 8013684:	11400015 	stw	r5,0(r2)
 8013688:	003b3d06 	br	8012380 <___vfiprintf_internal_r+0xd0>
 801368c:	014200b4 	movhi	r5,2050
 8013690:	296b0104 	addi	r5,r5,-21500
 8013694:	d9402315 	stw	r5,140(sp)
 8013698:	d9401b17 	ldw	r5,108(sp)
 801369c:	29400044 	addi	r5,r5,1
 80136a0:	003e6d06 	br	8013058 <___vfiprintf_internal_r+0xda8>
 80136a4:	8029883a 	mov	r20,r16
 80136a8:	dd401d83 	ldbu	r21,118(sp)
 80136ac:	df002215 	stw	fp,136(sp)
 80136b0:	0021883a 	mov	r16,zero
 80136b4:	003c0106 	br	80126bc <___vfiprintf_internal_r+0x40c>
 80136b8:	00c200b4 	movhi	r3,2050
 80136bc:	18eafd04 	addi	r3,r3,-21516
 80136c0:	d8c02315 	stw	r3,140(sp)
 80136c4:	280d883a 	mov	r6,r5
 80136c8:	003c6906 	br	8012870 <___vfiprintf_internal_r+0x5c0>
 80136cc:	802d883a 	mov	r22,r16
 80136d0:	0021883a 	mov	r16,zero
 80136d4:	003b5406 	br	8012428 <___vfiprintf_internal_r+0x178>
 80136d8:	1823883a 	mov	r17,r3
 80136dc:	003cf306 	br	8012aac <___vfiprintf_internal_r+0x7fc>
 80136e0:	1823883a 	mov	r17,r3
 80136e4:	003cad06 	br	801299c <___vfiprintf_internal_r+0x6ec>
 80136e8:	0027883a 	mov	r19,zero
 80136ec:	003fdc06 	br	8013660 <___vfiprintf_internal_r+0x13b0>
 80136f0:	d9402217 	ldw	r5,136(sp)
 80136f4:	8005883a 	mov	r2,r16
 80136f8:	b0c00043 	ldbu	r3,1(r22)
 80136fc:	2c000017 	ldw	r16,0(r5)
 8013700:	29000104 	addi	r4,r5,4
 8013704:	d9002215 	stw	r4,136(sp)
 8013708:	102d883a 	mov	r22,r2
 801370c:	803fa50e 	bge	r16,zero,80135a4 <___vfiprintf_internal_r+0x12f4>
 8013710:	18c03fcc 	andi	r3,r3,255
 8013714:	18c0201c 	xori	r3,r3,128
 8013718:	043fffc4 	movi	r16,-1
 801371c:	18ffe004 	addi	r3,r3,-128
 8013720:	003b4006 	br	8012424 <___vfiprintf_internal_r+0x174>
 8013724:	d9402303 	ldbu	r5,140(sp)
 8013728:	d9401d85 	stb	r5,118(sp)
 801372c:	003cae06 	br	80129e8 <___vfiprintf_internal_r+0x738>
 8013730:	d8c02303 	ldbu	r3,140(sp)
 8013734:	d8c01d85 	stb	r3,118(sp)
 8013738:	003d1406 	br	8012b8c <___vfiprintf_internal_r+0x8dc>
 801373c:	d8c02303 	ldbu	r3,140(sp)
 8013740:	d8c01d85 	stb	r3,118(sp)
 8013744:	003cca06 	br	8012a70 <___vfiprintf_internal_r+0x7c0>
 8013748:	8880004c 	andi	r2,r17,1
 801374c:	002b883a 	mov	r21,zero
 8013750:	10000526 	beq	r2,zero,8013768 <___vfiprintf_internal_r+0x14b8>
 8013754:	00800c04 	movi	r2,48
 8013758:	d88019c5 	stb	r2,103(sp)
 801375c:	dd002817 	ldw	r20,160(sp)
 8013760:	ddc019c4 	addi	r23,sp,103
 8013764:	003bd506 	br	80126bc <___vfiprintf_internal_r+0x40c>
 8013768:	0029883a 	mov	r20,zero
 801376c:	ddc01a04 	addi	r23,sp,104
 8013770:	003bd206 	br	80126bc <___vfiprintf_internal_r+0x40c>
 8013774:	d9002303 	ldbu	r4,140(sp)
 8013778:	d9001d85 	stb	r4,118(sp)
 801377c:	003da606 	br	8012e18 <___vfiprintf_internal_r+0xb68>
 8013780:	d8c02303 	ldbu	r3,140(sp)
 8013784:	d8c01d85 	stb	r3,118(sp)
 8013788:	003c7606 	br	8012964 <___vfiprintf_internal_r+0x6b4>
 801378c:	d8c02303 	ldbu	r3,140(sp)
 8013790:	d8c01d85 	stb	r3,118(sp)
 8013794:	003c6506 	br	801292c <___vfiprintf_internal_r+0x67c>
 8013798:	d9002303 	ldbu	r4,140(sp)
 801379c:	d9001d85 	stb	r4,118(sp)
 80137a0:	003d3d06 	br	8012c98 <___vfiprintf_internal_r+0x9e8>
 80137a4:	d8c02303 	ldbu	r3,140(sp)
 80137a8:	d8c01d85 	stb	r3,118(sp)
 80137ac:	003d1d06 	br	8012c24 <___vfiprintf_internal_r+0x974>
 80137b0:	d8c02303 	ldbu	r3,140(sp)
 80137b4:	d8c01d85 	stb	r3,118(sp)
 80137b8:	003d0306 	br	8012bc8 <___vfiprintf_internal_r+0x918>

080137bc <__vfiprintf_internal>:
 80137bc:	008200b4 	movhi	r2,2050
 80137c0:	10b22604 	addi	r2,r2,-14184
 80137c4:	300f883a 	mov	r7,r6
 80137c8:	280d883a 	mov	r6,r5
 80137cc:	200b883a 	mov	r5,r4
 80137d0:	11000017 	ldw	r4,0(r2)
 80137d4:	80122b01 	jmpi	80122b0 <___vfiprintf_internal_r>

080137d8 <__sbprintf>:
 80137d8:	2880030b 	ldhu	r2,12(r5)
 80137dc:	2ac01917 	ldw	r11,100(r5)
 80137e0:	2a80038b 	ldhu	r10,14(r5)
 80137e4:	2a400717 	ldw	r9,28(r5)
 80137e8:	2a000917 	ldw	r8,36(r5)
 80137ec:	defee204 	addi	sp,sp,-1144
 80137f0:	00c10004 	movi	r3,1024
 80137f4:	dc011a15 	stw	r16,1128(sp)
 80137f8:	10bfff4c 	andi	r2,r2,65533
 80137fc:	2821883a 	mov	r16,r5
 8013800:	d8cb883a 	add	r5,sp,r3
 8013804:	dc811c15 	stw	r18,1136(sp)
 8013808:	dc411b15 	stw	r17,1132(sp)
 801380c:	dfc11d15 	stw	ra,1140(sp)
 8013810:	2025883a 	mov	r18,r4
 8013814:	d881030d 	sth	r2,1036(sp)
 8013818:	dac11915 	stw	r11,1124(sp)
 801381c:	da81038d 	sth	r10,1038(sp)
 8013820:	da410715 	stw	r9,1052(sp)
 8013824:	da010915 	stw	r8,1060(sp)
 8013828:	dec10015 	stw	sp,1024(sp)
 801382c:	dec10415 	stw	sp,1040(sp)
 8013830:	d8c10215 	stw	r3,1032(sp)
 8013834:	d8c10515 	stw	r3,1044(sp)
 8013838:	d8010615 	stw	zero,1048(sp)
 801383c:	80122b00 	call	80122b0 <___vfiprintf_internal_r>
 8013840:	1023883a 	mov	r17,r2
 8013844:	10000416 	blt	r2,zero,8013858 <__sbprintf+0x80>
 8013848:	d9410004 	addi	r5,sp,1024
 801384c:	9009883a 	mov	r4,r18
 8013850:	800f4740 	call	800f474 <_fflush_r>
 8013854:	10000d1e 	bne	r2,zero,801388c <__sbprintf+0xb4>
 8013858:	d881030b 	ldhu	r2,1036(sp)
 801385c:	1080100c 	andi	r2,r2,64
 8013860:	10000326 	beq	r2,zero,8013870 <__sbprintf+0x98>
 8013864:	8080030b 	ldhu	r2,12(r16)
 8013868:	10801014 	ori	r2,r2,64
 801386c:	8080030d 	sth	r2,12(r16)
 8013870:	8805883a 	mov	r2,r17
 8013874:	dfc11d17 	ldw	ra,1140(sp)
 8013878:	dc811c17 	ldw	r18,1136(sp)
 801387c:	dc411b17 	ldw	r17,1132(sp)
 8013880:	dc011a17 	ldw	r16,1128(sp)
 8013884:	dec11e04 	addi	sp,sp,1144
 8013888:	f800283a 	ret
 801388c:	047fffc4 	movi	r17,-1
 8013890:	003ff106 	br	8013858 <__sbprintf+0x80>

08013894 <__swbuf_r>:
 8013894:	defffb04 	addi	sp,sp,-20
 8013898:	dcc00315 	stw	r19,12(sp)
 801389c:	dc800215 	stw	r18,8(sp)
 80138a0:	dc000015 	stw	r16,0(sp)
 80138a4:	dfc00415 	stw	ra,16(sp)
 80138a8:	dc400115 	stw	r17,4(sp)
 80138ac:	2025883a 	mov	r18,r4
 80138b0:	2827883a 	mov	r19,r5
 80138b4:	3021883a 	mov	r16,r6
 80138b8:	20000226 	beq	r4,zero,80138c4 <__swbuf_r+0x30>
 80138bc:	20800e17 	ldw	r2,56(r4)
 80138c0:	10004226 	beq	r2,zero,80139cc <__swbuf_r+0x138>
 80138c4:	80800617 	ldw	r2,24(r16)
 80138c8:	8100030b 	ldhu	r4,12(r16)
 80138cc:	80800215 	stw	r2,8(r16)
 80138d0:	2080020c 	andi	r2,r4,8
 80138d4:	10003626 	beq	r2,zero,80139b0 <__swbuf_r+0x11c>
 80138d8:	80c00417 	ldw	r3,16(r16)
 80138dc:	18003426 	beq	r3,zero,80139b0 <__swbuf_r+0x11c>
 80138e0:	2088000c 	andi	r2,r4,8192
 80138e4:	9c403fcc 	andi	r17,r19,255
 80138e8:	10001a26 	beq	r2,zero,8013954 <__swbuf_r+0xc0>
 80138ec:	80800017 	ldw	r2,0(r16)
 80138f0:	81000517 	ldw	r4,20(r16)
 80138f4:	10c7c83a 	sub	r3,r2,r3
 80138f8:	1900200e 	bge	r3,r4,801397c <__swbuf_r+0xe8>
 80138fc:	18c00044 	addi	r3,r3,1
 8013900:	81000217 	ldw	r4,8(r16)
 8013904:	11400044 	addi	r5,r2,1
 8013908:	81400015 	stw	r5,0(r16)
 801390c:	213fffc4 	addi	r4,r4,-1
 8013910:	81000215 	stw	r4,8(r16)
 8013914:	14c00005 	stb	r19,0(r2)
 8013918:	80800517 	ldw	r2,20(r16)
 801391c:	10c01e26 	beq	r2,r3,8013998 <__swbuf_r+0x104>
 8013920:	8080030b 	ldhu	r2,12(r16)
 8013924:	1080004c 	andi	r2,r2,1
 8013928:	10000226 	beq	r2,zero,8013934 <__swbuf_r+0xa0>
 801392c:	00800284 	movi	r2,10
 8013930:	88801926 	beq	r17,r2,8013998 <__swbuf_r+0x104>
 8013934:	8805883a 	mov	r2,r17
 8013938:	dfc00417 	ldw	ra,16(sp)
 801393c:	dcc00317 	ldw	r19,12(sp)
 8013940:	dc800217 	ldw	r18,8(sp)
 8013944:	dc400117 	ldw	r17,4(sp)
 8013948:	dc000017 	ldw	r16,0(sp)
 801394c:	dec00504 	addi	sp,sp,20
 8013950:	f800283a 	ret
 8013954:	81401917 	ldw	r5,100(r16)
 8013958:	00b7ffc4 	movi	r2,-8193
 801395c:	21080014 	ori	r4,r4,8192
 8013960:	2884703a 	and	r2,r5,r2
 8013964:	80801915 	stw	r2,100(r16)
 8013968:	80800017 	ldw	r2,0(r16)
 801396c:	8100030d 	sth	r4,12(r16)
 8013970:	81000517 	ldw	r4,20(r16)
 8013974:	10c7c83a 	sub	r3,r2,r3
 8013978:	193fe016 	blt	r3,r4,80138fc <__swbuf_r+0x68>
 801397c:	800b883a 	mov	r5,r16
 8013980:	9009883a 	mov	r4,r18
 8013984:	800f4740 	call	800f474 <_fflush_r>
 8013988:	1000071e 	bne	r2,zero,80139a8 <__swbuf_r+0x114>
 801398c:	80800017 	ldw	r2,0(r16)
 8013990:	00c00044 	movi	r3,1
 8013994:	003fda06 	br	8013900 <__swbuf_r+0x6c>
 8013998:	800b883a 	mov	r5,r16
 801399c:	9009883a 	mov	r4,r18
 80139a0:	800f4740 	call	800f474 <_fflush_r>
 80139a4:	103fe326 	beq	r2,zero,8013934 <__swbuf_r+0xa0>
 80139a8:	00bfffc4 	movi	r2,-1
 80139ac:	003fe206 	br	8013938 <__swbuf_r+0xa4>
 80139b0:	800b883a 	mov	r5,r16
 80139b4:	9009883a 	mov	r4,r18
 80139b8:	800d8540 	call	800d854 <__swsetup_r>
 80139bc:	103ffa1e 	bne	r2,zero,80139a8 <__swbuf_r+0x114>
 80139c0:	8100030b 	ldhu	r4,12(r16)
 80139c4:	80c00417 	ldw	r3,16(r16)
 80139c8:	003fc506 	br	80138e0 <__swbuf_r+0x4c>
 80139cc:	800f8600 	call	800f860 <__sinit>
 80139d0:	003fbc06 	br	80138c4 <__swbuf_r+0x30>

080139d4 <__swbuf>:
 80139d4:	008200b4 	movhi	r2,2050
 80139d8:	10b22604 	addi	r2,r2,-14184
 80139dc:	280d883a 	mov	r6,r5
 80139e0:	200b883a 	mov	r5,r4
 80139e4:	11000017 	ldw	r4,0(r2)
 80139e8:	80138941 	jmpi	8013894 <__swbuf_r>

080139ec <_write_r>:
 80139ec:	defffd04 	addi	sp,sp,-12
 80139f0:	2805883a 	mov	r2,r5
 80139f4:	dc000015 	stw	r16,0(sp)
 80139f8:	040200b4 	movhi	r16,2050
 80139fc:	dc400115 	stw	r17,4(sp)
 8013a00:	300b883a 	mov	r5,r6
 8013a04:	84394d04 	addi	r16,r16,-6860
 8013a08:	2023883a 	mov	r17,r4
 8013a0c:	380d883a 	mov	r6,r7
 8013a10:	1009883a 	mov	r4,r2
 8013a14:	dfc00215 	stw	ra,8(sp)
 8013a18:	80000015 	stw	zero,0(r16)
 8013a1c:	80183540 	call	8018354 <write>
 8013a20:	00ffffc4 	movi	r3,-1
 8013a24:	10c00526 	beq	r2,r3,8013a3c <_write_r+0x50>
 8013a28:	dfc00217 	ldw	ra,8(sp)
 8013a2c:	dc400117 	ldw	r17,4(sp)
 8013a30:	dc000017 	ldw	r16,0(sp)
 8013a34:	dec00304 	addi	sp,sp,12
 8013a38:	f800283a 	ret
 8013a3c:	80c00017 	ldw	r3,0(r16)
 8013a40:	183ff926 	beq	r3,zero,8013a28 <_write_r+0x3c>
 8013a44:	88c00015 	stw	r3,0(r17)
 8013a48:	003ff706 	br	8013a28 <_write_r+0x3c>

08013a4c <_close_r>:
 8013a4c:	defffd04 	addi	sp,sp,-12
 8013a50:	dc000015 	stw	r16,0(sp)
 8013a54:	040200b4 	movhi	r16,2050
 8013a58:	dc400115 	stw	r17,4(sp)
 8013a5c:	84394d04 	addi	r16,r16,-6860
 8013a60:	2023883a 	mov	r17,r4
 8013a64:	2809883a 	mov	r4,r5
 8013a68:	dfc00215 	stw	ra,8(sp)
 8013a6c:	80000015 	stw	zero,0(r16)
 8013a70:	80176800 	call	8017680 <close>
 8013a74:	00ffffc4 	movi	r3,-1
 8013a78:	10c00526 	beq	r2,r3,8013a90 <_close_r+0x44>
 8013a7c:	dfc00217 	ldw	ra,8(sp)
 8013a80:	dc400117 	ldw	r17,4(sp)
 8013a84:	dc000017 	ldw	r16,0(sp)
 8013a88:	dec00304 	addi	sp,sp,12
 8013a8c:	f800283a 	ret
 8013a90:	80c00017 	ldw	r3,0(r16)
 8013a94:	183ff926 	beq	r3,zero,8013a7c <_close_r+0x30>
 8013a98:	88c00015 	stw	r3,0(r17)
 8013a9c:	003ff706 	br	8013a7c <_close_r+0x30>

08013aa0 <_calloc_r>:
 8013aa0:	defffe04 	addi	sp,sp,-8
 8013aa4:	2805883a 	mov	r2,r5
 8013aa8:	dc000015 	stw	r16,0(sp)
 8013aac:	300b883a 	mov	r5,r6
 8013ab0:	2021883a 	mov	r16,r4
 8013ab4:	1009883a 	mov	r4,r2
 8013ab8:	dfc00115 	stw	ra,4(sp)
 8013abc:	800a1780 	call	800a178 <__mulsi3>
 8013ac0:	100b883a 	mov	r5,r2
 8013ac4:	8009883a 	mov	r4,r16
 8013ac8:	800a2800 	call	800a280 <_malloc_r>
 8013acc:	10002926 	beq	r2,zero,8013b74 <_calloc_r+0xd4>
 8013ad0:	11bfff17 	ldw	r6,-4(r2)
 8013ad4:	1021883a 	mov	r16,r2
 8013ad8:	00bfff04 	movi	r2,-4
 8013adc:	308c703a 	and	r6,r6,r2
 8013ae0:	00c00904 	movi	r3,36
 8013ae4:	308d883a 	add	r6,r6,r2
 8013ae8:	19801636 	bltu	r3,r6,8013b44 <_calloc_r+0xa4>
 8013aec:	008004c4 	movi	r2,19
 8013af0:	11800b2e 	bgeu	r2,r6,8013b20 <_calloc_r+0x80>
 8013af4:	80000015 	stw	zero,0(r16)
 8013af8:	80000115 	stw	zero,4(r16)
 8013afc:	008006c4 	movi	r2,27
 8013b00:	11801a2e 	bgeu	r2,r6,8013b6c <_calloc_r+0xcc>
 8013b04:	80000215 	stw	zero,8(r16)
 8013b08:	80000315 	stw	zero,12(r16)
 8013b0c:	30c0151e 	bne	r6,r3,8013b64 <_calloc_r+0xc4>
 8013b10:	80000415 	stw	zero,16(r16)
 8013b14:	80800604 	addi	r2,r16,24
 8013b18:	80000515 	stw	zero,20(r16)
 8013b1c:	00000106 	br	8013b24 <_calloc_r+0x84>
 8013b20:	8005883a 	mov	r2,r16
 8013b24:	10000015 	stw	zero,0(r2)
 8013b28:	10000115 	stw	zero,4(r2)
 8013b2c:	10000215 	stw	zero,8(r2)
 8013b30:	8005883a 	mov	r2,r16
 8013b34:	dfc00117 	ldw	ra,4(sp)
 8013b38:	dc000017 	ldw	r16,0(sp)
 8013b3c:	dec00204 	addi	sp,sp,8
 8013b40:	f800283a 	ret
 8013b44:	000b883a 	mov	r5,zero
 8013b48:	8009883a 	mov	r4,r16
 8013b4c:	800ac500 	call	800ac50 <memset>
 8013b50:	8005883a 	mov	r2,r16
 8013b54:	dfc00117 	ldw	ra,4(sp)
 8013b58:	dc000017 	ldw	r16,0(sp)
 8013b5c:	dec00204 	addi	sp,sp,8
 8013b60:	f800283a 	ret
 8013b64:	80800404 	addi	r2,r16,16
 8013b68:	003fee06 	br	8013b24 <_calloc_r+0x84>
 8013b6c:	80800204 	addi	r2,r16,8
 8013b70:	003fec06 	br	8013b24 <_calloc_r+0x84>
 8013b74:	0005883a 	mov	r2,zero
 8013b78:	003fee06 	br	8013b34 <_calloc_r+0x94>

08013b7c <_fclose_r>:
 8013b7c:	28003926 	beq	r5,zero,8013c64 <_fclose_r+0xe8>
 8013b80:	defffc04 	addi	sp,sp,-16
 8013b84:	dc400115 	stw	r17,4(sp)
 8013b88:	dc000015 	stw	r16,0(sp)
 8013b8c:	dfc00315 	stw	ra,12(sp)
 8013b90:	dc800215 	stw	r18,8(sp)
 8013b94:	2023883a 	mov	r17,r4
 8013b98:	2821883a 	mov	r16,r5
 8013b9c:	20000226 	beq	r4,zero,8013ba8 <_fclose_r+0x2c>
 8013ba0:	20800e17 	ldw	r2,56(r4)
 8013ba4:	10002726 	beq	r2,zero,8013c44 <_fclose_r+0xc8>
 8013ba8:	8080030f 	ldh	r2,12(r16)
 8013bac:	1000071e 	bne	r2,zero,8013bcc <_fclose_r+0x50>
 8013bb0:	0005883a 	mov	r2,zero
 8013bb4:	dfc00317 	ldw	ra,12(sp)
 8013bb8:	dc800217 	ldw	r18,8(sp)
 8013bbc:	dc400117 	ldw	r17,4(sp)
 8013bc0:	dc000017 	ldw	r16,0(sp)
 8013bc4:	dec00404 	addi	sp,sp,16
 8013bc8:	f800283a 	ret
 8013bcc:	800b883a 	mov	r5,r16
 8013bd0:	8809883a 	mov	r4,r17
 8013bd4:	800f2580 	call	800f258 <__sflush_r>
 8013bd8:	1025883a 	mov	r18,r2
 8013bdc:	80800b17 	ldw	r2,44(r16)
 8013be0:	10000426 	beq	r2,zero,8013bf4 <_fclose_r+0x78>
 8013be4:	81400717 	ldw	r5,28(r16)
 8013be8:	8809883a 	mov	r4,r17
 8013bec:	103ee83a 	callr	r2
 8013bf0:	10001616 	blt	r2,zero,8013c4c <_fclose_r+0xd0>
 8013bf4:	8080030b 	ldhu	r2,12(r16)
 8013bf8:	1080200c 	andi	r2,r2,128
 8013bfc:	1000151e 	bne	r2,zero,8013c54 <_fclose_r+0xd8>
 8013c00:	81400c17 	ldw	r5,48(r16)
 8013c04:	28000526 	beq	r5,zero,8013c1c <_fclose_r+0xa0>
 8013c08:	80801004 	addi	r2,r16,64
 8013c0c:	28800226 	beq	r5,r2,8013c18 <_fclose_r+0x9c>
 8013c10:	8809883a 	mov	r4,r17
 8013c14:	800f9d40 	call	800f9d4 <_free_r>
 8013c18:	80000c15 	stw	zero,48(r16)
 8013c1c:	81401117 	ldw	r5,68(r16)
 8013c20:	28000326 	beq	r5,zero,8013c30 <_fclose_r+0xb4>
 8013c24:	8809883a 	mov	r4,r17
 8013c28:	800f9d40 	call	800f9d4 <_free_r>
 8013c2c:	80001115 	stw	zero,68(r16)
 8013c30:	800f8700 	call	800f870 <__sfp_lock_acquire>
 8013c34:	8000030d 	sth	zero,12(r16)
 8013c38:	800f8740 	call	800f874 <__sfp_lock_release>
 8013c3c:	9005883a 	mov	r2,r18
 8013c40:	003fdc06 	br	8013bb4 <_fclose_r+0x38>
 8013c44:	800f8600 	call	800f860 <__sinit>
 8013c48:	003fd706 	br	8013ba8 <_fclose_r+0x2c>
 8013c4c:	04bfffc4 	movi	r18,-1
 8013c50:	003fe806 	br	8013bf4 <_fclose_r+0x78>
 8013c54:	81400417 	ldw	r5,16(r16)
 8013c58:	8809883a 	mov	r4,r17
 8013c5c:	800f9d40 	call	800f9d4 <_free_r>
 8013c60:	003fe706 	br	8013c00 <_fclose_r+0x84>
 8013c64:	0005883a 	mov	r2,zero
 8013c68:	f800283a 	ret

08013c6c <fclose>:
 8013c6c:	008200b4 	movhi	r2,2050
 8013c70:	10b22604 	addi	r2,r2,-14184
 8013c74:	200b883a 	mov	r5,r4
 8013c78:	11000017 	ldw	r4,0(r2)
 8013c7c:	8013b7c1 	jmpi	8013b7c <_fclose_r>

08013c80 <__fputwc>:
 8013c80:	defff804 	addi	sp,sp,-32
 8013c84:	dcc00415 	stw	r19,16(sp)
 8013c88:	dc800315 	stw	r18,12(sp)
 8013c8c:	dc000115 	stw	r16,4(sp)
 8013c90:	dfc00715 	stw	ra,28(sp)
 8013c94:	dd400615 	stw	r21,24(sp)
 8013c98:	dd000515 	stw	r20,20(sp)
 8013c9c:	dc400215 	stw	r17,8(sp)
 8013ca0:	2027883a 	mov	r19,r4
 8013ca4:	2825883a 	mov	r18,r5
 8013ca8:	3021883a 	mov	r16,r6
 8013cac:	80104180 	call	8010418 <__locale_mb_cur_max>
 8013cb0:	00c00044 	movi	r3,1
 8013cb4:	10c03e26 	beq	r2,r3,8013db0 <__fputwc+0x130>
 8013cb8:	81c01704 	addi	r7,r16,92
 8013cbc:	900d883a 	mov	r6,r18
 8013cc0:	d80b883a 	mov	r5,sp
 8013cc4:	9809883a 	mov	r4,r19
 8013cc8:	8013ff80 	call	8013ff8 <_wcrtomb_r>
 8013ccc:	1029883a 	mov	r20,r2
 8013cd0:	00bfffc4 	movi	r2,-1
 8013cd4:	a0802026 	beq	r20,r2,8013d58 <__fputwc+0xd8>
 8013cd8:	d9400003 	ldbu	r5,0(sp)
 8013cdc:	a0001c26 	beq	r20,zero,8013d50 <__fputwc+0xd0>
 8013ce0:	0023883a 	mov	r17,zero
 8013ce4:	05400284 	movi	r21,10
 8013ce8:	00000906 	br	8013d10 <__fputwc+0x90>
 8013cec:	80800017 	ldw	r2,0(r16)
 8013cf0:	11400005 	stb	r5,0(r2)
 8013cf4:	80c00017 	ldw	r3,0(r16)
 8013cf8:	18c00044 	addi	r3,r3,1
 8013cfc:	80c00015 	stw	r3,0(r16)
 8013d00:	8c400044 	addi	r17,r17,1
 8013d04:	dc45883a 	add	r2,sp,r17
 8013d08:	8d00112e 	bgeu	r17,r20,8013d50 <__fputwc+0xd0>
 8013d0c:	11400003 	ldbu	r5,0(r2)
 8013d10:	80c00217 	ldw	r3,8(r16)
 8013d14:	18ffffc4 	addi	r3,r3,-1
 8013d18:	80c00215 	stw	r3,8(r16)
 8013d1c:	183ff30e 	bge	r3,zero,8013cec <__fputwc+0x6c>
 8013d20:	80800617 	ldw	r2,24(r16)
 8013d24:	18801916 	blt	r3,r2,8013d8c <__fputwc+0x10c>
 8013d28:	80800017 	ldw	r2,0(r16)
 8013d2c:	11400005 	stb	r5,0(r2)
 8013d30:	80800017 	ldw	r2,0(r16)
 8013d34:	10c00003 	ldbu	r3,0(r2)
 8013d38:	10800044 	addi	r2,r2,1
 8013d3c:	1d402326 	beq	r3,r21,8013dcc <__fputwc+0x14c>
 8013d40:	80800015 	stw	r2,0(r16)
 8013d44:	8c400044 	addi	r17,r17,1
 8013d48:	dc45883a 	add	r2,sp,r17
 8013d4c:	8d3fef36 	bltu	r17,r20,8013d0c <__fputwc+0x8c>
 8013d50:	9005883a 	mov	r2,r18
 8013d54:	00000406 	br	8013d68 <__fputwc+0xe8>
 8013d58:	80c0030b 	ldhu	r3,12(r16)
 8013d5c:	a005883a 	mov	r2,r20
 8013d60:	18c01014 	ori	r3,r3,64
 8013d64:	80c0030d 	sth	r3,12(r16)
 8013d68:	dfc00717 	ldw	ra,28(sp)
 8013d6c:	dd400617 	ldw	r21,24(sp)
 8013d70:	dd000517 	ldw	r20,20(sp)
 8013d74:	dcc00417 	ldw	r19,16(sp)
 8013d78:	dc800317 	ldw	r18,12(sp)
 8013d7c:	dc400217 	ldw	r17,8(sp)
 8013d80:	dc000117 	ldw	r16,4(sp)
 8013d84:	dec00804 	addi	sp,sp,32
 8013d88:	f800283a 	ret
 8013d8c:	800d883a 	mov	r6,r16
 8013d90:	29403fcc 	andi	r5,r5,255
 8013d94:	9809883a 	mov	r4,r19
 8013d98:	80138940 	call	8013894 <__swbuf_r>
 8013d9c:	10bfffe0 	cmpeqi	r2,r2,-1
 8013da0:	10803fcc 	andi	r2,r2,255
 8013da4:	103fd626 	beq	r2,zero,8013d00 <__fputwc+0x80>
 8013da8:	00bfffc4 	movi	r2,-1
 8013dac:	003fee06 	br	8013d68 <__fputwc+0xe8>
 8013db0:	90ffffc4 	addi	r3,r18,-1
 8013db4:	01003f84 	movi	r4,254
 8013db8:	20ffbf36 	bltu	r4,r3,8013cb8 <__fputwc+0x38>
 8013dbc:	900b883a 	mov	r5,r18
 8013dc0:	dc800005 	stb	r18,0(sp)
 8013dc4:	1029883a 	mov	r20,r2
 8013dc8:	003fc506 	br	8013ce0 <__fputwc+0x60>
 8013dcc:	800d883a 	mov	r6,r16
 8013dd0:	a80b883a 	mov	r5,r21
 8013dd4:	9809883a 	mov	r4,r19
 8013dd8:	80138940 	call	8013894 <__swbuf_r>
 8013ddc:	10bfffe0 	cmpeqi	r2,r2,-1
 8013de0:	003fef06 	br	8013da0 <__fputwc+0x120>

08013de4 <_fputwc_r>:
 8013de4:	3080030b 	ldhu	r2,12(r6)
 8013de8:	10c8000c 	andi	r3,r2,8192
 8013dec:	1800051e 	bne	r3,zero,8013e04 <_fputwc_r+0x20>
 8013df0:	30c01917 	ldw	r3,100(r6)
 8013df4:	10880014 	ori	r2,r2,8192
 8013df8:	3080030d 	sth	r2,12(r6)
 8013dfc:	18880014 	ori	r2,r3,8192
 8013e00:	30801915 	stw	r2,100(r6)
 8013e04:	8013c801 	jmpi	8013c80 <__fputwc>

08013e08 <fputwc>:
 8013e08:	008200b4 	movhi	r2,2050
 8013e0c:	defffc04 	addi	sp,sp,-16
 8013e10:	10b22604 	addi	r2,r2,-14184
 8013e14:	dc000115 	stw	r16,4(sp)
 8013e18:	14000017 	ldw	r16,0(r2)
 8013e1c:	dc400215 	stw	r17,8(sp)
 8013e20:	dfc00315 	stw	ra,12(sp)
 8013e24:	2023883a 	mov	r17,r4
 8013e28:	80000226 	beq	r16,zero,8013e34 <fputwc+0x2c>
 8013e2c:	80800e17 	ldw	r2,56(r16)
 8013e30:	10001026 	beq	r2,zero,8013e74 <fputwc+0x6c>
 8013e34:	2880030b 	ldhu	r2,12(r5)
 8013e38:	10c8000c 	andi	r3,r2,8192
 8013e3c:	1800051e 	bne	r3,zero,8013e54 <fputwc+0x4c>
 8013e40:	28c01917 	ldw	r3,100(r5)
 8013e44:	10880014 	ori	r2,r2,8192
 8013e48:	2880030d 	sth	r2,12(r5)
 8013e4c:	18880014 	ori	r2,r3,8192
 8013e50:	28801915 	stw	r2,100(r5)
 8013e54:	280d883a 	mov	r6,r5
 8013e58:	8009883a 	mov	r4,r16
 8013e5c:	880b883a 	mov	r5,r17
 8013e60:	dfc00317 	ldw	ra,12(sp)
 8013e64:	dc400217 	ldw	r17,8(sp)
 8013e68:	dc000117 	ldw	r16,4(sp)
 8013e6c:	dec00404 	addi	sp,sp,16
 8013e70:	8013c801 	jmpi	8013c80 <__fputwc>
 8013e74:	8009883a 	mov	r4,r16
 8013e78:	d9400015 	stw	r5,0(sp)
 8013e7c:	800f8600 	call	800f860 <__sinit>
 8013e80:	d9400017 	ldw	r5,0(sp)
 8013e84:	003feb06 	br	8013e34 <fputwc+0x2c>

08013e88 <_fstat_r>:
 8013e88:	defffd04 	addi	sp,sp,-12
 8013e8c:	2805883a 	mov	r2,r5
 8013e90:	dc000015 	stw	r16,0(sp)
 8013e94:	040200b4 	movhi	r16,2050
 8013e98:	dc400115 	stw	r17,4(sp)
 8013e9c:	84394d04 	addi	r16,r16,-6860
 8013ea0:	2023883a 	mov	r17,r4
 8013ea4:	300b883a 	mov	r5,r6
 8013ea8:	1009883a 	mov	r4,r2
 8013eac:	dfc00215 	stw	ra,8(sp)
 8013eb0:	80000015 	stw	zero,0(r16)
 8013eb4:	80177c00 	call	80177c0 <fstat>
 8013eb8:	00ffffc4 	movi	r3,-1
 8013ebc:	10c00526 	beq	r2,r3,8013ed4 <_fstat_r+0x4c>
 8013ec0:	dfc00217 	ldw	ra,8(sp)
 8013ec4:	dc400117 	ldw	r17,4(sp)
 8013ec8:	dc000017 	ldw	r16,0(sp)
 8013ecc:	dec00304 	addi	sp,sp,12
 8013ed0:	f800283a 	ret
 8013ed4:	80c00017 	ldw	r3,0(r16)
 8013ed8:	183ff926 	beq	r3,zero,8013ec0 <_fstat_r+0x38>
 8013edc:	88c00015 	stw	r3,0(r17)
 8013ee0:	003ff706 	br	8013ec0 <_fstat_r+0x38>

08013ee4 <_isatty_r>:
 8013ee4:	defffd04 	addi	sp,sp,-12
 8013ee8:	dc000015 	stw	r16,0(sp)
 8013eec:	040200b4 	movhi	r16,2050
 8013ef0:	dc400115 	stw	r17,4(sp)
 8013ef4:	84394d04 	addi	r16,r16,-6860
 8013ef8:	2023883a 	mov	r17,r4
 8013efc:	2809883a 	mov	r4,r5
 8013f00:	dfc00215 	stw	ra,8(sp)
 8013f04:	80000015 	stw	zero,0(r16)
 8013f08:	8017aa80 	call	8017aa8 <isatty>
 8013f0c:	00ffffc4 	movi	r3,-1
 8013f10:	10c00526 	beq	r2,r3,8013f28 <_isatty_r+0x44>
 8013f14:	dfc00217 	ldw	ra,8(sp)
 8013f18:	dc400117 	ldw	r17,4(sp)
 8013f1c:	dc000017 	ldw	r16,0(sp)
 8013f20:	dec00304 	addi	sp,sp,12
 8013f24:	f800283a 	ret
 8013f28:	80c00017 	ldw	r3,0(r16)
 8013f2c:	183ff926 	beq	r3,zero,8013f14 <_isatty_r+0x30>
 8013f30:	88c00015 	stw	r3,0(r17)
 8013f34:	003ff706 	br	8013f14 <_isatty_r+0x30>

08013f38 <_lseek_r>:
 8013f38:	defffd04 	addi	sp,sp,-12
 8013f3c:	2805883a 	mov	r2,r5
 8013f40:	dc000015 	stw	r16,0(sp)
 8013f44:	040200b4 	movhi	r16,2050
 8013f48:	dc400115 	stw	r17,4(sp)
 8013f4c:	300b883a 	mov	r5,r6
 8013f50:	84394d04 	addi	r16,r16,-6860
 8013f54:	2023883a 	mov	r17,r4
 8013f58:	380d883a 	mov	r6,r7
 8013f5c:	1009883a 	mov	r4,r2
 8013f60:	dfc00215 	stw	ra,8(sp)
 8013f64:	80000015 	stw	zero,0(r16)
 8013f68:	8017c7c0 	call	8017c7c <lseek>
 8013f6c:	00ffffc4 	movi	r3,-1
 8013f70:	10c00526 	beq	r2,r3,8013f88 <_lseek_r+0x50>
 8013f74:	dfc00217 	ldw	ra,8(sp)
 8013f78:	dc400117 	ldw	r17,4(sp)
 8013f7c:	dc000017 	ldw	r16,0(sp)
 8013f80:	dec00304 	addi	sp,sp,12
 8013f84:	f800283a 	ret
 8013f88:	80c00017 	ldw	r3,0(r16)
 8013f8c:	183ff926 	beq	r3,zero,8013f74 <_lseek_r+0x3c>
 8013f90:	88c00015 	stw	r3,0(r17)
 8013f94:	003ff706 	br	8013f74 <_lseek_r+0x3c>

08013f98 <_read_r>:
 8013f98:	defffd04 	addi	sp,sp,-12
 8013f9c:	2805883a 	mov	r2,r5
 8013fa0:	dc000015 	stw	r16,0(sp)
 8013fa4:	040200b4 	movhi	r16,2050
 8013fa8:	dc400115 	stw	r17,4(sp)
 8013fac:	300b883a 	mov	r5,r6
 8013fb0:	84394d04 	addi	r16,r16,-6860
 8013fb4:	2023883a 	mov	r17,r4
 8013fb8:	380d883a 	mov	r6,r7
 8013fbc:	1009883a 	mov	r4,r2
 8013fc0:	dfc00215 	stw	ra,8(sp)
 8013fc4:	80000015 	stw	zero,0(r16)
 8013fc8:	8017e580 	call	8017e58 <read>
 8013fcc:	00ffffc4 	movi	r3,-1
 8013fd0:	10c00526 	beq	r2,r3,8013fe8 <_read_r+0x50>
 8013fd4:	dfc00217 	ldw	ra,8(sp)
 8013fd8:	dc400117 	ldw	r17,4(sp)
 8013fdc:	dc000017 	ldw	r16,0(sp)
 8013fe0:	dec00304 	addi	sp,sp,12
 8013fe4:	f800283a 	ret
 8013fe8:	80c00017 	ldw	r3,0(r16)
 8013fec:	183ff926 	beq	r3,zero,8013fd4 <_read_r+0x3c>
 8013ff0:	88c00015 	stw	r3,0(r17)
 8013ff4:	003ff706 	br	8013fd4 <_read_r+0x3c>

08013ff8 <_wcrtomb_r>:
 8013ff8:	defff604 	addi	sp,sp,-40
 8013ffc:	008200b4 	movhi	r2,2050
 8014000:	dc800815 	stw	r18,32(sp)
 8014004:	dc400715 	stw	r17,28(sp)
 8014008:	dc000615 	stw	r16,24(sp)
 801400c:	10b22a04 	addi	r2,r2,-14168
 8014010:	dfc00915 	stw	ra,36(sp)
 8014014:	2021883a 	mov	r16,r4
 8014018:	3823883a 	mov	r17,r7
 801401c:	14800017 	ldw	r18,0(r2)
 8014020:	28001426 	beq	r5,zero,8014074 <_wcrtomb_r+0x7c>
 8014024:	d9400415 	stw	r5,16(sp)
 8014028:	d9800515 	stw	r6,20(sp)
 801402c:	801040c0 	call	801040c <__locale_charset>
 8014030:	d9800517 	ldw	r6,20(sp)
 8014034:	d9400417 	ldw	r5,16(sp)
 8014038:	100f883a 	mov	r7,r2
 801403c:	dc400015 	stw	r17,0(sp)
 8014040:	8009883a 	mov	r4,r16
 8014044:	903ee83a 	callr	r18
 8014048:	00ffffc4 	movi	r3,-1
 801404c:	10c0031e 	bne	r2,r3,801405c <_wcrtomb_r+0x64>
 8014050:	88000015 	stw	zero,0(r17)
 8014054:	00c02284 	movi	r3,138
 8014058:	80c00015 	stw	r3,0(r16)
 801405c:	dfc00917 	ldw	ra,36(sp)
 8014060:	dc800817 	ldw	r18,32(sp)
 8014064:	dc400717 	ldw	r17,28(sp)
 8014068:	dc000617 	ldw	r16,24(sp)
 801406c:	dec00a04 	addi	sp,sp,40
 8014070:	f800283a 	ret
 8014074:	801040c0 	call	801040c <__locale_charset>
 8014078:	100f883a 	mov	r7,r2
 801407c:	dc400015 	stw	r17,0(sp)
 8014080:	000d883a 	mov	r6,zero
 8014084:	d9400104 	addi	r5,sp,4
 8014088:	8009883a 	mov	r4,r16
 801408c:	903ee83a 	callr	r18
 8014090:	003fed06 	br	8014048 <_wcrtomb_r+0x50>

08014094 <wcrtomb>:
 8014094:	defff604 	addi	sp,sp,-40
 8014098:	008200b4 	movhi	r2,2050
 801409c:	dc800615 	stw	r18,24(sp)
 80140a0:	dc400515 	stw	r17,20(sp)
 80140a4:	10b22604 	addi	r2,r2,-14184
 80140a8:	dfc00915 	stw	ra,36(sp)
 80140ac:	dd000815 	stw	r20,32(sp)
 80140b0:	dcc00715 	stw	r19,28(sp)
 80140b4:	dc000415 	stw	r16,16(sp)
 80140b8:	3025883a 	mov	r18,r6
 80140bc:	14400017 	ldw	r17,0(r2)
 80140c0:	20001926 	beq	r4,zero,8014128 <wcrtomb+0x94>
 80140c4:	008200b4 	movhi	r2,2050
 80140c8:	10b22a04 	addi	r2,r2,-14168
 80140cc:	15000017 	ldw	r20,0(r2)
 80140d0:	2021883a 	mov	r16,r4
 80140d4:	2827883a 	mov	r19,r5
 80140d8:	801040c0 	call	801040c <__locale_charset>
 80140dc:	100f883a 	mov	r7,r2
 80140e0:	dc800015 	stw	r18,0(sp)
 80140e4:	980d883a 	mov	r6,r19
 80140e8:	800b883a 	mov	r5,r16
 80140ec:	8809883a 	mov	r4,r17
 80140f0:	a03ee83a 	callr	r20
 80140f4:	00ffffc4 	movi	r3,-1
 80140f8:	10c0031e 	bne	r2,r3,8014108 <wcrtomb+0x74>
 80140fc:	90000015 	stw	zero,0(r18)
 8014100:	00c02284 	movi	r3,138
 8014104:	88c00015 	stw	r3,0(r17)
 8014108:	dfc00917 	ldw	ra,36(sp)
 801410c:	dd000817 	ldw	r20,32(sp)
 8014110:	dcc00717 	ldw	r19,28(sp)
 8014114:	dc800617 	ldw	r18,24(sp)
 8014118:	dc400517 	ldw	r17,20(sp)
 801411c:	dc000417 	ldw	r16,16(sp)
 8014120:	dec00a04 	addi	sp,sp,40
 8014124:	f800283a 	ret
 8014128:	008200b4 	movhi	r2,2050
 801412c:	10b22a04 	addi	r2,r2,-14168
 8014130:	14000017 	ldw	r16,0(r2)
 8014134:	801040c0 	call	801040c <__locale_charset>
 8014138:	100f883a 	mov	r7,r2
 801413c:	dc800015 	stw	r18,0(sp)
 8014140:	000d883a 	mov	r6,zero
 8014144:	d9400104 	addi	r5,sp,4
 8014148:	8809883a 	mov	r4,r17
 801414c:	803ee83a 	callr	r16
 8014150:	003fe806 	br	80140f4 <wcrtomb+0x60>

08014154 <__ascii_wctomb>:
 8014154:	28000526 	beq	r5,zero,801416c <__ascii_wctomb+0x18>
 8014158:	00803fc4 	movi	r2,255
 801415c:	11800536 	bltu	r2,r6,8014174 <__ascii_wctomb+0x20>
 8014160:	29800005 	stb	r6,0(r5)
 8014164:	00800044 	movi	r2,1
 8014168:	f800283a 	ret
 801416c:	0005883a 	mov	r2,zero
 8014170:	f800283a 	ret
 8014174:	00802284 	movi	r2,138
 8014178:	20800015 	stw	r2,0(r4)
 801417c:	00bfffc4 	movi	r2,-1
 8014180:	f800283a 	ret

08014184 <_wctomb_r>:
 8014184:	008200b4 	movhi	r2,2050
 8014188:	defff904 	addi	sp,sp,-28
 801418c:	10b22a04 	addi	r2,r2,-14168
 8014190:	dfc00615 	stw	ra,24(sp)
 8014194:	dc400515 	stw	r17,20(sp)
 8014198:	dc000415 	stw	r16,16(sp)
 801419c:	3823883a 	mov	r17,r7
 80141a0:	14000017 	ldw	r16,0(r2)
 80141a4:	d9000115 	stw	r4,4(sp)
 80141a8:	d9400215 	stw	r5,8(sp)
 80141ac:	d9800315 	stw	r6,12(sp)
 80141b0:	801040c0 	call	801040c <__locale_charset>
 80141b4:	d9800317 	ldw	r6,12(sp)
 80141b8:	d9400217 	ldw	r5,8(sp)
 80141bc:	d9000117 	ldw	r4,4(sp)
 80141c0:	100f883a 	mov	r7,r2
 80141c4:	dc400015 	stw	r17,0(sp)
 80141c8:	803ee83a 	callr	r16
 80141cc:	dfc00617 	ldw	ra,24(sp)
 80141d0:	dc400517 	ldw	r17,20(sp)
 80141d4:	dc000417 	ldw	r16,16(sp)
 80141d8:	dec00704 	addi	sp,sp,28
 80141dc:	f800283a 	ret

080141e0 <__udivdi3>:
 80141e0:	defff404 	addi	sp,sp,-48
 80141e4:	dcc00515 	stw	r19,20(sp)
 80141e8:	dc000215 	stw	r16,8(sp)
 80141ec:	dfc00b15 	stw	ra,44(sp)
 80141f0:	df000a15 	stw	fp,40(sp)
 80141f4:	ddc00915 	stw	r23,36(sp)
 80141f8:	dd800815 	stw	r22,32(sp)
 80141fc:	dd400715 	stw	r21,28(sp)
 8014200:	dd000615 	stw	r20,24(sp)
 8014204:	dc800415 	stw	r18,16(sp)
 8014208:	dc400315 	stw	r17,12(sp)
 801420c:	2027883a 	mov	r19,r4
 8014210:	2821883a 	mov	r16,r5
 8014214:	3800461e 	bne	r7,zero,8014330 <__udivdi3+0x150>
 8014218:	3023883a 	mov	r17,r6
 801421c:	2025883a 	mov	r18,r4
 8014220:	2980572e 	bgeu	r5,r6,8014380 <__udivdi3+0x1a0>
 8014224:	00bfffd4 	movui	r2,65535
 8014228:	282d883a 	mov	r22,r5
 801422c:	1180b236 	bltu	r2,r6,80144f8 <__udivdi3+0x318>
 8014230:	00803fc4 	movi	r2,255
 8014234:	1185803a 	cmpltu	r2,r2,r6
 8014238:	100490fa 	slli	r2,r2,3
 801423c:	3086d83a 	srl	r3,r6,r2
 8014240:	010200b4 	movhi	r4,2050
 8014244:	212b0504 	addi	r4,r4,-21484
 8014248:	20c7883a 	add	r3,r4,r3
 801424c:	18c00003 	ldbu	r3,0(r3)
 8014250:	1885883a 	add	r2,r3,r2
 8014254:	00c00804 	movi	r3,32
 8014258:	1887c83a 	sub	r3,r3,r2
 801425c:	18000526 	beq	r3,zero,8014274 <__udivdi3+0x94>
 8014260:	80e0983a 	sll	r16,r16,r3
 8014264:	9884d83a 	srl	r2,r19,r2
 8014268:	30e2983a 	sll	r17,r6,r3
 801426c:	98e4983a 	sll	r18,r19,r3
 8014270:	142cb03a 	or	r22,r2,r16
 8014274:	882ad43a 	srli	r21,r17,16
 8014278:	b009883a 	mov	r4,r22
 801427c:	8d3fffcc 	andi	r20,r17,65535
 8014280:	a80b883a 	mov	r5,r21
 8014284:	800a1200 	call	800a120 <__umodsi3>
 8014288:	b009883a 	mov	r4,r22
 801428c:	a80b883a 	mov	r5,r21
 8014290:	1027883a 	mov	r19,r2
 8014294:	800a0bc0 	call	800a0bc <__udivsi3>
 8014298:	100b883a 	mov	r5,r2
 801429c:	a009883a 	mov	r4,r20
 80142a0:	102d883a 	mov	r22,r2
 80142a4:	800a1780 	call	800a178 <__mulsi3>
 80142a8:	9826943a 	slli	r19,r19,16
 80142ac:	9006d43a 	srli	r3,r18,16
 80142b0:	1cc6b03a 	or	r3,r3,r19
 80142b4:	1880052e 	bgeu	r3,r2,80142cc <__udivdi3+0xec>
 80142b8:	1c47883a 	add	r3,r3,r17
 80142bc:	b13fffc4 	addi	r4,r22,-1
 80142c0:	1c400136 	bltu	r3,r17,80142c8 <__udivdi3+0xe8>
 80142c4:	18814236 	bltu	r3,r2,80147d0 <__udivdi3+0x5f0>
 80142c8:	202d883a 	mov	r22,r4
 80142cc:	18a1c83a 	sub	r16,r3,r2
 80142d0:	8009883a 	mov	r4,r16
 80142d4:	a80b883a 	mov	r5,r21
 80142d8:	800a1200 	call	800a120 <__umodsi3>
 80142dc:	1027883a 	mov	r19,r2
 80142e0:	8009883a 	mov	r4,r16
 80142e4:	a80b883a 	mov	r5,r21
 80142e8:	9826943a 	slli	r19,r19,16
 80142ec:	800a0bc0 	call	800a0bc <__udivsi3>
 80142f0:	100b883a 	mov	r5,r2
 80142f4:	a009883a 	mov	r4,r20
 80142f8:	94bfffcc 	andi	r18,r18,65535
 80142fc:	1021883a 	mov	r16,r2
 8014300:	94e4b03a 	or	r18,r18,r19
 8014304:	800a1780 	call	800a178 <__mulsi3>
 8014308:	9080052e 	bgeu	r18,r2,8014320 <__udivdi3+0x140>
 801430c:	8ca5883a 	add	r18,r17,r18
 8014310:	80ffffc4 	addi	r3,r16,-1
 8014314:	94410c36 	bltu	r18,r17,8014748 <__udivdi3+0x568>
 8014318:	90810b2e 	bgeu	r18,r2,8014748 <__udivdi3+0x568>
 801431c:	843fff84 	addi	r16,r16,-2
 8014320:	b004943a 	slli	r2,r22,16
 8014324:	0007883a 	mov	r3,zero
 8014328:	1404b03a 	or	r2,r2,r16
 801432c:	00005e06 	br	80144a8 <__udivdi3+0x2c8>
 8014330:	29c05b36 	bltu	r5,r7,80144a0 <__udivdi3+0x2c0>
 8014334:	00bfffd4 	movui	r2,65535
 8014338:	11c0672e 	bgeu	r2,r7,80144d8 <__udivdi3+0x2f8>
 801433c:	00804034 	movhi	r2,256
 8014340:	10bfffc4 	addi	r2,r2,-1
 8014344:	11c10a36 	bltu	r2,r7,8014770 <__udivdi3+0x590>
 8014348:	00800404 	movi	r2,16
 801434c:	3886d83a 	srl	r3,r7,r2
 8014350:	010200b4 	movhi	r4,2050
 8014354:	212b0504 	addi	r4,r4,-21484
 8014358:	20c7883a 	add	r3,r4,r3
 801435c:	18c00003 	ldbu	r3,0(r3)
 8014360:	05c00804 	movi	r23,32
 8014364:	1885883a 	add	r2,r3,r2
 8014368:	b8afc83a 	sub	r23,r23,r2
 801436c:	b800671e 	bne	r23,zero,801450c <__udivdi3+0x32c>
 8014370:	3c010536 	bltu	r7,r16,8014788 <__udivdi3+0x5a8>
 8014374:	9985403a 	cmpgeu	r2,r19,r6
 8014378:	0007883a 	mov	r3,zero
 801437c:	00004a06 	br	80144a8 <__udivdi3+0x2c8>
 8014380:	3000041e 	bne	r6,zero,8014394 <__udivdi3+0x1b4>
 8014384:	000b883a 	mov	r5,zero
 8014388:	01000044 	movi	r4,1
 801438c:	800a0bc0 	call	800a0bc <__udivsi3>
 8014390:	1023883a 	mov	r17,r2
 8014394:	00bfffd4 	movui	r2,65535
 8014398:	1440532e 	bgeu	r2,r17,80144e8 <__udivdi3+0x308>
 801439c:	00804034 	movhi	r2,256
 80143a0:	10bfffc4 	addi	r2,r2,-1
 80143a4:	1440f436 	bltu	r2,r17,8014778 <__udivdi3+0x598>
 80143a8:	00800404 	movi	r2,16
 80143ac:	8886d83a 	srl	r3,r17,r2
 80143b0:	010200b4 	movhi	r4,2050
 80143b4:	212b0504 	addi	r4,r4,-21484
 80143b8:	20c7883a 	add	r3,r4,r3
 80143bc:	18c00003 	ldbu	r3,0(r3)
 80143c0:	1885883a 	add	r2,r3,r2
 80143c4:	00c00804 	movi	r3,32
 80143c8:	1887c83a 	sub	r3,r3,r2
 80143cc:	1800a51e 	bne	r3,zero,8014664 <__udivdi3+0x484>
 80143d0:	882ad43a 	srli	r21,r17,16
 80143d4:	8461c83a 	sub	r16,r16,r17
 80143d8:	8d3fffcc 	andi	r20,r17,65535
 80143dc:	00c00044 	movi	r3,1
 80143e0:	a80b883a 	mov	r5,r21
 80143e4:	8009883a 	mov	r4,r16
 80143e8:	d8c00115 	stw	r3,4(sp)
 80143ec:	800a1200 	call	800a120 <__umodsi3>
 80143f0:	a80b883a 	mov	r5,r21
 80143f4:	8009883a 	mov	r4,r16
 80143f8:	1027883a 	mov	r19,r2
 80143fc:	800a0bc0 	call	800a0bc <__udivsi3>
 8014400:	a00b883a 	mov	r5,r20
 8014404:	1009883a 	mov	r4,r2
 8014408:	102d883a 	mov	r22,r2
 801440c:	800a1780 	call	800a178 <__mulsi3>
 8014410:	9826943a 	slli	r19,r19,16
 8014414:	900ed43a 	srli	r7,r18,16
 8014418:	d8c00117 	ldw	r3,4(sp)
 801441c:	3cceb03a 	or	r7,r7,r19
 8014420:	3880052e 	bgeu	r7,r2,8014438 <__udivdi3+0x258>
 8014424:	3c4f883a 	add	r7,r7,r17
 8014428:	b13fffc4 	addi	r4,r22,-1
 801442c:	3c400136 	bltu	r7,r17,8014434 <__udivdi3+0x254>
 8014430:	3880e436 	bltu	r7,r2,80147c4 <__udivdi3+0x5e4>
 8014434:	202d883a 	mov	r22,r4
 8014438:	38a1c83a 	sub	r16,r7,r2
 801443c:	8009883a 	mov	r4,r16
 8014440:	a80b883a 	mov	r5,r21
 8014444:	d8c00115 	stw	r3,4(sp)
 8014448:	800a1200 	call	800a120 <__umodsi3>
 801444c:	1027883a 	mov	r19,r2
 8014450:	8009883a 	mov	r4,r16
 8014454:	a80b883a 	mov	r5,r21
 8014458:	9826943a 	slli	r19,r19,16
 801445c:	800a0bc0 	call	800a0bc <__udivsi3>
 8014460:	a00b883a 	mov	r5,r20
 8014464:	1009883a 	mov	r4,r2
 8014468:	94bfffcc 	andi	r18,r18,65535
 801446c:	1021883a 	mov	r16,r2
 8014470:	94e4b03a 	or	r18,r18,r19
 8014474:	800a1780 	call	800a178 <__mulsi3>
 8014478:	d8c00117 	ldw	r3,4(sp)
 801447c:	9080052e 	bgeu	r18,r2,8014494 <__udivdi3+0x2b4>
 8014480:	8ca5883a 	add	r18,r17,r18
 8014484:	813fffc4 	addi	r4,r16,-1
 8014488:	9440ad36 	bltu	r18,r17,8014740 <__udivdi3+0x560>
 801448c:	9080ac2e 	bgeu	r18,r2,8014740 <__udivdi3+0x560>
 8014490:	843fff84 	addi	r16,r16,-2
 8014494:	b004943a 	slli	r2,r22,16
 8014498:	1404b03a 	or	r2,r2,r16
 801449c:	00000206 	br	80144a8 <__udivdi3+0x2c8>
 80144a0:	0007883a 	mov	r3,zero
 80144a4:	0005883a 	mov	r2,zero
 80144a8:	dfc00b17 	ldw	ra,44(sp)
 80144ac:	df000a17 	ldw	fp,40(sp)
 80144b0:	ddc00917 	ldw	r23,36(sp)
 80144b4:	dd800817 	ldw	r22,32(sp)
 80144b8:	dd400717 	ldw	r21,28(sp)
 80144bc:	dd000617 	ldw	r20,24(sp)
 80144c0:	dcc00517 	ldw	r19,20(sp)
 80144c4:	dc800417 	ldw	r18,16(sp)
 80144c8:	dc400317 	ldw	r17,12(sp)
 80144cc:	dc000217 	ldw	r16,8(sp)
 80144d0:	dec00c04 	addi	sp,sp,48
 80144d4:	f800283a 	ret
 80144d8:	00803fc4 	movi	r2,255
 80144dc:	11c5803a 	cmpltu	r2,r2,r7
 80144e0:	100490fa 	slli	r2,r2,3
 80144e4:	003f9906 	br	801434c <__udivdi3+0x16c>
 80144e8:	00803fc4 	movi	r2,255
 80144ec:	1445803a 	cmpltu	r2,r2,r17
 80144f0:	100490fa 	slli	r2,r2,3
 80144f4:	003fad06 	br	80143ac <__udivdi3+0x1cc>
 80144f8:	00804034 	movhi	r2,256
 80144fc:	10bfffc4 	addi	r2,r2,-1
 8014500:	11809f36 	bltu	r2,r6,8014780 <__udivdi3+0x5a0>
 8014504:	00800404 	movi	r2,16
 8014508:	003f4c06 	br	801423c <__udivdi3+0x5c>
 801450c:	3dce983a 	sll	r7,r7,r23
 8014510:	30b8d83a 	srl	fp,r6,r2
 8014514:	80a2d83a 	srl	r17,r16,r2
 8014518:	35cc983a 	sll	r6,r6,r23
 801451c:	3f38b03a 	or	fp,r7,fp
 8014520:	e024d43a 	srli	r18,fp,16
 8014524:	9884d83a 	srl	r2,r19,r2
 8014528:	85e0983a 	sll	r16,r16,r23
 801452c:	8809883a 	mov	r4,r17
 8014530:	900b883a 	mov	r5,r18
 8014534:	d9800015 	stw	r6,0(sp)
 8014538:	1420b03a 	or	r16,r2,r16
 801453c:	800a1200 	call	800a120 <__umodsi3>
 8014540:	900b883a 	mov	r5,r18
 8014544:	8809883a 	mov	r4,r17
 8014548:	1029883a 	mov	r20,r2
 801454c:	e5bfffcc 	andi	r22,fp,65535
 8014550:	800a0bc0 	call	800a0bc <__udivsi3>
 8014554:	100b883a 	mov	r5,r2
 8014558:	b009883a 	mov	r4,r22
 801455c:	102b883a 	mov	r21,r2
 8014560:	800a1780 	call	800a178 <__mulsi3>
 8014564:	a028943a 	slli	r20,r20,16
 8014568:	8006d43a 	srli	r3,r16,16
 801456c:	1d06b03a 	or	r3,r3,r20
 8014570:	1880042e 	bgeu	r3,r2,8014584 <__udivdi3+0x3a4>
 8014574:	1f07883a 	add	r3,r3,fp
 8014578:	a93fffc4 	addi	r4,r21,-1
 801457c:	1f00892e 	bgeu	r3,fp,80147a4 <__udivdi3+0x5c4>
 8014580:	202b883a 	mov	r21,r4
 8014584:	18a3c83a 	sub	r17,r3,r2
 8014588:	8809883a 	mov	r4,r17
 801458c:	900b883a 	mov	r5,r18
 8014590:	800a1200 	call	800a120 <__umodsi3>
 8014594:	1029883a 	mov	r20,r2
 8014598:	8809883a 	mov	r4,r17
 801459c:	900b883a 	mov	r5,r18
 80145a0:	a028943a 	slli	r20,r20,16
 80145a4:	800a0bc0 	call	800a0bc <__udivsi3>
 80145a8:	100b883a 	mov	r5,r2
 80145ac:	b009883a 	mov	r4,r22
 80145b0:	843fffcc 	andi	r16,r16,65535
 80145b4:	1023883a 	mov	r17,r2
 80145b8:	8520b03a 	or	r16,r16,r20
 80145bc:	800a1780 	call	800a178 <__mulsi3>
 80145c0:	8080042e 	bgeu	r16,r2,80145d4 <__udivdi3+0x3f4>
 80145c4:	8721883a 	add	r16,r16,fp
 80145c8:	88ffffc4 	addi	r3,r17,-1
 80145cc:	8700712e 	bgeu	r16,fp,8014794 <__udivdi3+0x5b4>
 80145d0:	1823883a 	mov	r17,r3
 80145d4:	a80e943a 	slli	r7,r21,16
 80145d8:	d8c00017 	ldw	r3,0(sp)
 80145dc:	80a1c83a 	sub	r16,r16,r2
 80145e0:	3c64b03a 	or	r18,r7,r17
 80145e4:	1d3fffcc 	andi	r20,r3,65535
 80145e8:	9022d43a 	srli	r17,r18,16
 80145ec:	95bfffcc 	andi	r22,r18,65535
 80145f0:	a00b883a 	mov	r5,r20
 80145f4:	b009883a 	mov	r4,r22
 80145f8:	182ad43a 	srli	r21,r3,16
 80145fc:	800a1780 	call	800a178 <__mulsi3>
 8014600:	a00b883a 	mov	r5,r20
 8014604:	8809883a 	mov	r4,r17
 8014608:	1039883a 	mov	fp,r2
 801460c:	800a1780 	call	800a178 <__mulsi3>
 8014610:	8809883a 	mov	r4,r17
 8014614:	a80b883a 	mov	r5,r21
 8014618:	1029883a 	mov	r20,r2
 801461c:	800a1780 	call	800a178 <__mulsi3>
 8014620:	a80b883a 	mov	r5,r21
 8014624:	b009883a 	mov	r4,r22
 8014628:	1023883a 	mov	r17,r2
 801462c:	800a1780 	call	800a178 <__mulsi3>
 8014630:	e006d43a 	srli	r3,fp,16
 8014634:	1505883a 	add	r2,r2,r20
 8014638:	1887883a 	add	r3,r3,r2
 801463c:	1d00022e 	bgeu	r3,r20,8014648 <__udivdi3+0x468>
 8014640:	00800074 	movhi	r2,1
 8014644:	88a3883a 	add	r17,r17,r2
 8014648:	1804d43a 	srli	r2,r3,16
 801464c:	1463883a 	add	r17,r2,r17
 8014650:	84404436 	bltu	r16,r17,8014764 <__udivdi3+0x584>
 8014654:	84403e26 	beq	r16,r17,8014750 <__udivdi3+0x570>
 8014658:	9005883a 	mov	r2,r18
 801465c:	0007883a 	mov	r3,zero
 8014660:	003f9106 	br	80144a8 <__udivdi3+0x2c8>
 8014664:	88e2983a 	sll	r17,r17,r3
 8014668:	80aed83a 	srl	r23,r16,r2
 801466c:	80e0983a 	sll	r16,r16,r3
 8014670:	882ad43a 	srli	r21,r17,16
 8014674:	9884d83a 	srl	r2,r19,r2
 8014678:	b809883a 	mov	r4,r23
 801467c:	a80b883a 	mov	r5,r21
 8014680:	98e4983a 	sll	r18,r19,r3
 8014684:	142cb03a 	or	r22,r2,r16
 8014688:	800a1200 	call	800a120 <__umodsi3>
 801468c:	b809883a 	mov	r4,r23
 8014690:	a80b883a 	mov	r5,r21
 8014694:	1027883a 	mov	r19,r2
 8014698:	8d3fffcc 	andi	r20,r17,65535
 801469c:	800a0bc0 	call	800a0bc <__udivsi3>
 80146a0:	a009883a 	mov	r4,r20
 80146a4:	100b883a 	mov	r5,r2
 80146a8:	102f883a 	mov	r23,r2
 80146ac:	800a1780 	call	800a178 <__mulsi3>
 80146b0:	9826943a 	slli	r19,r19,16
 80146b4:	b008d43a 	srli	r4,r22,16
 80146b8:	24c8b03a 	or	r4,r4,r19
 80146bc:	2080062e 	bgeu	r4,r2,80146d8 <__udivdi3+0x4f8>
 80146c0:	2449883a 	add	r4,r4,r17
 80146c4:	b8ffffc4 	addi	r3,r23,-1
 80146c8:	24403c36 	bltu	r4,r17,80147bc <__udivdi3+0x5dc>
 80146cc:	20803b2e 	bgeu	r4,r2,80147bc <__udivdi3+0x5dc>
 80146d0:	bdffff84 	addi	r23,r23,-2
 80146d4:	2449883a 	add	r4,r4,r17
 80146d8:	20a1c83a 	sub	r16,r4,r2
 80146dc:	a80b883a 	mov	r5,r21
 80146e0:	8009883a 	mov	r4,r16
 80146e4:	800a1200 	call	800a120 <__umodsi3>
 80146e8:	a80b883a 	mov	r5,r21
 80146ec:	8009883a 	mov	r4,r16
 80146f0:	1027883a 	mov	r19,r2
 80146f4:	800a0bc0 	call	800a0bc <__udivsi3>
 80146f8:	a009883a 	mov	r4,r20
 80146fc:	100b883a 	mov	r5,r2
 8014700:	9826943a 	slli	r19,r19,16
 8014704:	1039883a 	mov	fp,r2
 8014708:	800a1780 	call	800a178 <__mulsi3>
 801470c:	b13fffcc 	andi	r4,r22,65535
 8014710:	24c8b03a 	or	r4,r4,r19
 8014714:	2080062e 	bgeu	r4,r2,8014730 <__udivdi3+0x550>
 8014718:	2449883a 	add	r4,r4,r17
 801471c:	e0ffffc4 	addi	r3,fp,-1
 8014720:	24402436 	bltu	r4,r17,80147b4 <__udivdi3+0x5d4>
 8014724:	2080232e 	bgeu	r4,r2,80147b4 <__udivdi3+0x5d4>
 8014728:	e73fff84 	addi	fp,fp,-2
 801472c:	2449883a 	add	r4,r4,r17
 8014730:	b82e943a 	slli	r23,r23,16
 8014734:	20a1c83a 	sub	r16,r4,r2
 8014738:	bf06b03a 	or	r3,r23,fp
 801473c:	003f2806 	br	80143e0 <__udivdi3+0x200>
 8014740:	2021883a 	mov	r16,r4
 8014744:	003f5306 	br	8014494 <__udivdi3+0x2b4>
 8014748:	1821883a 	mov	r16,r3
 801474c:	003ef406 	br	8014320 <__udivdi3+0x140>
 8014750:	1806943a 	slli	r3,r3,16
 8014754:	9de6983a 	sll	r19,r19,r23
 8014758:	e73fffcc 	andi	fp,fp,65535
 801475c:	1f07883a 	add	r3,r3,fp
 8014760:	98ffbd2e 	bgeu	r19,r3,8014658 <__udivdi3+0x478>
 8014764:	90bfffc4 	addi	r2,r18,-1
 8014768:	0007883a 	mov	r3,zero
 801476c:	003f4e06 	br	80144a8 <__udivdi3+0x2c8>
 8014770:	00800604 	movi	r2,24
 8014774:	003ef506 	br	801434c <__udivdi3+0x16c>
 8014778:	00800604 	movi	r2,24
 801477c:	003f0b06 	br	80143ac <__udivdi3+0x1cc>
 8014780:	00800604 	movi	r2,24
 8014784:	003ead06 	br	801423c <__udivdi3+0x5c>
 8014788:	0007883a 	mov	r3,zero
 801478c:	00800044 	movi	r2,1
 8014790:	003f4506 	br	80144a8 <__udivdi3+0x2c8>
 8014794:	80bf8e2e 	bgeu	r16,r2,80145d0 <__udivdi3+0x3f0>
 8014798:	8c7fff84 	addi	r17,r17,-2
 801479c:	8721883a 	add	r16,r16,fp
 80147a0:	003f8c06 	br	80145d4 <__udivdi3+0x3f4>
 80147a4:	18bf762e 	bgeu	r3,r2,8014580 <__udivdi3+0x3a0>
 80147a8:	ad7fff84 	addi	r21,r21,-2
 80147ac:	1f07883a 	add	r3,r3,fp
 80147b0:	003f7406 	br	8014584 <__udivdi3+0x3a4>
 80147b4:	1839883a 	mov	fp,r3
 80147b8:	003fdd06 	br	8014730 <__udivdi3+0x550>
 80147bc:	182f883a 	mov	r23,r3
 80147c0:	003fc506 	br	80146d8 <__udivdi3+0x4f8>
 80147c4:	b5bfff84 	addi	r22,r22,-2
 80147c8:	3c4f883a 	add	r7,r7,r17
 80147cc:	003f1a06 	br	8014438 <__udivdi3+0x258>
 80147d0:	b5bfff84 	addi	r22,r22,-2
 80147d4:	1c47883a 	add	r3,r3,r17
 80147d8:	003ebc06 	br	80142cc <__udivdi3+0xec>

080147dc <__umoddi3>:
 80147dc:	defff304 	addi	sp,sp,-52
 80147e0:	df000b15 	stw	fp,44(sp)
 80147e4:	dc400415 	stw	r17,16(sp)
 80147e8:	dc000315 	stw	r16,12(sp)
 80147ec:	dfc00c15 	stw	ra,48(sp)
 80147f0:	ddc00a15 	stw	r23,40(sp)
 80147f4:	dd800915 	stw	r22,36(sp)
 80147f8:	dd400815 	stw	r21,32(sp)
 80147fc:	dd000715 	stw	r20,28(sp)
 8014800:	dcc00615 	stw	r19,24(sp)
 8014804:	dc800515 	stw	r18,20(sp)
 8014808:	2021883a 	mov	r16,r4
 801480c:	2823883a 	mov	r17,r5
 8014810:	2839883a 	mov	fp,r5
 8014814:	3800401e 	bne	r7,zero,8014918 <__umoddi3+0x13c>
 8014818:	3027883a 	mov	r19,r6
 801481c:	2029883a 	mov	r20,r4
 8014820:	2980552e 	bgeu	r5,r6,8014978 <__umoddi3+0x19c>
 8014824:	00bfffd4 	movui	r2,65535
 8014828:	1180a236 	bltu	r2,r6,8014ab4 <__umoddi3+0x2d8>
 801482c:	01003fc4 	movi	r4,255
 8014830:	2189803a 	cmpltu	r4,r4,r6
 8014834:	200890fa 	slli	r4,r4,3
 8014838:	3104d83a 	srl	r2,r6,r4
 801483c:	00c200b4 	movhi	r3,2050
 8014840:	18eb0504 	addi	r3,r3,-21484
 8014844:	1885883a 	add	r2,r3,r2
 8014848:	10c00003 	ldbu	r3,0(r2)
 801484c:	00800804 	movi	r2,32
 8014850:	1909883a 	add	r4,r3,r4
 8014854:	1125c83a 	sub	r18,r2,r4
 8014858:	90000526 	beq	r18,zero,8014870 <__umoddi3+0x94>
 801485c:	8ca2983a 	sll	r17,r17,r18
 8014860:	8108d83a 	srl	r4,r16,r4
 8014864:	34a6983a 	sll	r19,r6,r18
 8014868:	84a8983a 	sll	r20,r16,r18
 801486c:	2478b03a 	or	fp,r4,r17
 8014870:	982cd43a 	srli	r22,r19,16
 8014874:	e009883a 	mov	r4,fp
 8014878:	9dffffcc 	andi	r23,r19,65535
 801487c:	b00b883a 	mov	r5,r22
 8014880:	800a1200 	call	800a120 <__umodsi3>
 8014884:	b00b883a 	mov	r5,r22
 8014888:	e009883a 	mov	r4,fp
 801488c:	102b883a 	mov	r21,r2
 8014890:	800a0bc0 	call	800a0bc <__udivsi3>
 8014894:	100b883a 	mov	r5,r2
 8014898:	b809883a 	mov	r4,r23
 801489c:	800a1780 	call	800a178 <__mulsi3>
 80148a0:	a82a943a 	slli	r21,r21,16
 80148a4:	a006d43a 	srli	r3,r20,16
 80148a8:	1d46b03a 	or	r3,r3,r21
 80148ac:	1880032e 	bgeu	r3,r2,80148bc <__umoddi3+0xe0>
 80148b0:	1cc7883a 	add	r3,r3,r19
 80148b4:	1cc00136 	bltu	r3,r19,80148bc <__umoddi3+0xe0>
 80148b8:	18813136 	bltu	r3,r2,8014d80 <__umoddi3+0x5a4>
 80148bc:	18a1c83a 	sub	r16,r3,r2
 80148c0:	b00b883a 	mov	r5,r22
 80148c4:	8009883a 	mov	r4,r16
 80148c8:	800a1200 	call	800a120 <__umodsi3>
 80148cc:	b00b883a 	mov	r5,r22
 80148d0:	8009883a 	mov	r4,r16
 80148d4:	1023883a 	mov	r17,r2
 80148d8:	800a0bc0 	call	800a0bc <__udivsi3>
 80148dc:	100b883a 	mov	r5,r2
 80148e0:	b809883a 	mov	r4,r23
 80148e4:	8822943a 	slli	r17,r17,16
 80148e8:	800a1780 	call	800a178 <__mulsi3>
 80148ec:	a0ffffcc 	andi	r3,r20,65535
 80148f0:	1c46b03a 	or	r3,r3,r17
 80148f4:	1880042e 	bgeu	r3,r2,8014908 <__umoddi3+0x12c>
 80148f8:	1cc7883a 	add	r3,r3,r19
 80148fc:	1cc00236 	bltu	r3,r19,8014908 <__umoddi3+0x12c>
 8014900:	1880012e 	bgeu	r3,r2,8014908 <__umoddi3+0x12c>
 8014904:	1cc7883a 	add	r3,r3,r19
 8014908:	1885c83a 	sub	r2,r3,r2
 801490c:	1484d83a 	srl	r2,r2,r18
 8014910:	0007883a 	mov	r3,zero
 8014914:	00005306 	br	8014a64 <__umoddi3+0x288>
 8014918:	29c05036 	bltu	r5,r7,8014a5c <__umoddi3+0x280>
 801491c:	00bfffd4 	movui	r2,65535
 8014920:	11c05c2e 	bgeu	r2,r7,8014a94 <__umoddi3+0x2b8>
 8014924:	00804034 	movhi	r2,256
 8014928:	10bfffc4 	addi	r2,r2,-1
 801492c:	11c10636 	bltu	r2,r7,8014d48 <__umoddi3+0x56c>
 8014930:	01000404 	movi	r4,16
 8014934:	3904d83a 	srl	r2,r7,r4
 8014938:	00c200b4 	movhi	r3,2050
 801493c:	18eb0504 	addi	r3,r3,-21484
 8014940:	1885883a 	add	r2,r3,r2
 8014944:	14c00003 	ldbu	r19,0(r2)
 8014948:	00c00804 	movi	r3,32
 801494c:	9927883a 	add	r19,r19,r4
 8014950:	1ce9c83a 	sub	r20,r3,r19
 8014954:	a0005c1e 	bne	r20,zero,8014ac8 <__umoddi3+0x2ec>
 8014958:	3c400136 	bltu	r7,r17,8014960 <__umoddi3+0x184>
 801495c:	81810a36 	bltu	r16,r6,8014d88 <__umoddi3+0x5ac>
 8014960:	8185c83a 	sub	r2,r16,r6
 8014964:	89e3c83a 	sub	r17,r17,r7
 8014968:	8089803a 	cmpltu	r4,r16,r2
 801496c:	8939c83a 	sub	fp,r17,r4
 8014970:	e007883a 	mov	r3,fp
 8014974:	00003b06 	br	8014a64 <__umoddi3+0x288>
 8014978:	3000041e 	bne	r6,zero,801498c <__umoddi3+0x1b0>
 801497c:	000b883a 	mov	r5,zero
 8014980:	01000044 	movi	r4,1
 8014984:	800a0bc0 	call	800a0bc <__udivsi3>
 8014988:	1027883a 	mov	r19,r2
 801498c:	00bfffd4 	movui	r2,65535
 8014990:	14c0442e 	bgeu	r2,r19,8014aa4 <__umoddi3+0x2c8>
 8014994:	00804034 	movhi	r2,256
 8014998:	10bfffc4 	addi	r2,r2,-1
 801499c:	14c0ec36 	bltu	r2,r19,8014d50 <__umoddi3+0x574>
 80149a0:	00800404 	movi	r2,16
 80149a4:	9886d83a 	srl	r3,r19,r2
 80149a8:	010200b4 	movhi	r4,2050
 80149ac:	212b0504 	addi	r4,r4,-21484
 80149b0:	20c7883a 	add	r3,r4,r3
 80149b4:	18c00003 	ldbu	r3,0(r3)
 80149b8:	1887883a 	add	r3,r3,r2
 80149bc:	00800804 	movi	r2,32
 80149c0:	10e5c83a 	sub	r18,r2,r3
 80149c4:	9000ab1e 	bne	r18,zero,8014c74 <__umoddi3+0x498>
 80149c8:	982cd43a 	srli	r22,r19,16
 80149cc:	8ce3c83a 	sub	r17,r17,r19
 80149d0:	9dffffcc 	andi	r23,r19,65535
 80149d4:	b00b883a 	mov	r5,r22
 80149d8:	8809883a 	mov	r4,r17
 80149dc:	800a1200 	call	800a120 <__umodsi3>
 80149e0:	b00b883a 	mov	r5,r22
 80149e4:	8809883a 	mov	r4,r17
 80149e8:	102b883a 	mov	r21,r2
 80149ec:	800a0bc0 	call	800a0bc <__udivsi3>
 80149f0:	b80b883a 	mov	r5,r23
 80149f4:	1009883a 	mov	r4,r2
 80149f8:	800a1780 	call	800a178 <__mulsi3>
 80149fc:	a82a943a 	slli	r21,r21,16
 8014a00:	a006d43a 	srli	r3,r20,16
 8014a04:	1d46b03a 	or	r3,r3,r21
 8014a08:	1880042e 	bgeu	r3,r2,8014a1c <__umoddi3+0x240>
 8014a0c:	1cc7883a 	add	r3,r3,r19
 8014a10:	1cc00236 	bltu	r3,r19,8014a1c <__umoddi3+0x240>
 8014a14:	1880012e 	bgeu	r3,r2,8014a1c <__umoddi3+0x240>
 8014a18:	1cc7883a 	add	r3,r3,r19
 8014a1c:	18a1c83a 	sub	r16,r3,r2
 8014a20:	b00b883a 	mov	r5,r22
 8014a24:	8009883a 	mov	r4,r16
 8014a28:	800a1200 	call	800a120 <__umodsi3>
 8014a2c:	1023883a 	mov	r17,r2
 8014a30:	b00b883a 	mov	r5,r22
 8014a34:	8009883a 	mov	r4,r16
 8014a38:	800a0bc0 	call	800a0bc <__udivsi3>
 8014a3c:	8822943a 	slli	r17,r17,16
 8014a40:	b80b883a 	mov	r5,r23
 8014a44:	1009883a 	mov	r4,r2
 8014a48:	800a1780 	call	800a178 <__mulsi3>
 8014a4c:	a53fffcc 	andi	r20,r20,65535
 8014a50:	a446b03a 	or	r3,r20,r17
 8014a54:	18bfac2e 	bgeu	r3,r2,8014908 <__umoddi3+0x12c>
 8014a58:	003fa706 	br	80148f8 <__umoddi3+0x11c>
 8014a5c:	2005883a 	mov	r2,r4
 8014a60:	2807883a 	mov	r3,r5
 8014a64:	dfc00c17 	ldw	ra,48(sp)
 8014a68:	df000b17 	ldw	fp,44(sp)
 8014a6c:	ddc00a17 	ldw	r23,40(sp)
 8014a70:	dd800917 	ldw	r22,36(sp)
 8014a74:	dd400817 	ldw	r21,32(sp)
 8014a78:	dd000717 	ldw	r20,28(sp)
 8014a7c:	dcc00617 	ldw	r19,24(sp)
 8014a80:	dc800517 	ldw	r18,20(sp)
 8014a84:	dc400417 	ldw	r17,16(sp)
 8014a88:	dc000317 	ldw	r16,12(sp)
 8014a8c:	dec00d04 	addi	sp,sp,52
 8014a90:	f800283a 	ret
 8014a94:	04c03fc4 	movi	r19,255
 8014a98:	99c9803a 	cmpltu	r4,r19,r7
 8014a9c:	200890fa 	slli	r4,r4,3
 8014aa0:	003fa406 	br	8014934 <__umoddi3+0x158>
 8014aa4:	00803fc4 	movi	r2,255
 8014aa8:	14c5803a 	cmpltu	r2,r2,r19
 8014aac:	100490fa 	slli	r2,r2,3
 8014ab0:	003fbc06 	br	80149a4 <__umoddi3+0x1c8>
 8014ab4:	00804034 	movhi	r2,256
 8014ab8:	10bfffc4 	addi	r2,r2,-1
 8014abc:	1180a636 	bltu	r2,r6,8014d58 <__umoddi3+0x57c>
 8014ac0:	01000404 	movi	r4,16
 8014ac4:	003f5c06 	br	8014838 <__umoddi3+0x5c>
 8014ac8:	3d0e983a 	sll	r7,r7,r20
 8014acc:	34ead83a 	srl	r21,r6,r19
 8014ad0:	8cc6d83a 	srl	r3,r17,r19
 8014ad4:	8d10983a 	sll	r8,r17,r20
 8014ad8:	3d6ab03a 	or	r21,r7,r21
 8014adc:	a82cd43a 	srli	r22,r21,16
 8014ae0:	84e2d83a 	srl	r17,r16,r19
 8014ae4:	1809883a 	mov	r4,r3
 8014ae8:	b00b883a 	mov	r5,r22
 8014aec:	8a22b03a 	or	r17,r17,r8
 8014af0:	3524983a 	sll	r18,r6,r20
 8014af4:	dc400015 	stw	r17,0(sp)
 8014af8:	d8c00115 	stw	r3,4(sp)
 8014afc:	800a1200 	call	800a120 <__umodsi3>
 8014b00:	d8c00117 	ldw	r3,4(sp)
 8014b04:	b00b883a 	mov	r5,r22
 8014b08:	1039883a 	mov	fp,r2
 8014b0c:	1809883a 	mov	r4,r3
 8014b10:	800a0bc0 	call	800a0bc <__udivsi3>
 8014b14:	adffffcc 	andi	r23,r21,65535
 8014b18:	100b883a 	mov	r5,r2
 8014b1c:	b809883a 	mov	r4,r23
 8014b20:	1023883a 	mov	r17,r2
 8014b24:	800a1780 	call	800a178 <__mulsi3>
 8014b28:	d9400017 	ldw	r5,0(sp)
 8014b2c:	e008943a 	slli	r4,fp,16
 8014b30:	8520983a 	sll	r16,r16,r20
 8014b34:	2806d43a 	srli	r3,r5,16
 8014b38:	1906b03a 	or	r3,r3,r4
 8014b3c:	1880042e 	bgeu	r3,r2,8014b50 <__umoddi3+0x374>
 8014b40:	1d47883a 	add	r3,r3,r21
 8014b44:	893fffc4 	addi	r4,r17,-1
 8014b48:	1d40892e 	bgeu	r3,r21,8014d70 <__umoddi3+0x594>
 8014b4c:	2023883a 	mov	r17,r4
 8014b50:	18b9c83a 	sub	fp,r3,r2
 8014b54:	b00b883a 	mov	r5,r22
 8014b58:	e009883a 	mov	r4,fp
 8014b5c:	800a1200 	call	800a120 <__umodsi3>
 8014b60:	b00b883a 	mov	r5,r22
 8014b64:	e009883a 	mov	r4,fp
 8014b68:	d8800215 	stw	r2,8(sp)
 8014b6c:	800a0bc0 	call	800a0bc <__udivsi3>
 8014b70:	100b883a 	mov	r5,r2
 8014b74:	b809883a 	mov	r4,r23
 8014b78:	102d883a 	mov	r22,r2
 8014b7c:	800a1780 	call	800a178 <__mulsi3>
 8014b80:	d9800217 	ldw	r6,8(sp)
 8014b84:	d8c00017 	ldw	r3,0(sp)
 8014b88:	300c943a 	slli	r6,r6,16
 8014b8c:	1a3fffcc 	andi	r8,r3,65535
 8014b90:	4190b03a 	or	r8,r8,r6
 8014b94:	4080042e 	bgeu	r8,r2,8014ba8 <__umoddi3+0x3cc>
 8014b98:	4551883a 	add	r8,r8,r21
 8014b9c:	b0ffffc4 	addi	r3,r22,-1
 8014ba0:	45406f2e 	bgeu	r8,r21,8014d60 <__umoddi3+0x584>
 8014ba4:	182d883a 	mov	r22,r3
 8014ba8:	880e943a 	slli	r7,r17,16
 8014bac:	9006d43a 	srli	r3,r18,16
 8014bb0:	91bfffcc 	andi	r6,r18,65535
 8014bb4:	3dacb03a 	or	r22,r7,r22
 8014bb8:	b02ed43a 	srli	r23,r22,16
 8014bbc:	b5bfffcc 	andi	r22,r22,65535
 8014bc0:	300b883a 	mov	r5,r6
 8014bc4:	b009883a 	mov	r4,r22
 8014bc8:	40a3c83a 	sub	r17,r8,r2
 8014bcc:	d8c00115 	stw	r3,4(sp)
 8014bd0:	d9800215 	stw	r6,8(sp)
 8014bd4:	800a1780 	call	800a178 <__mulsi3>
 8014bd8:	d9800217 	ldw	r6,8(sp)
 8014bdc:	b809883a 	mov	r4,r23
 8014be0:	1039883a 	mov	fp,r2
 8014be4:	300b883a 	mov	r5,r6
 8014be8:	800a1780 	call	800a178 <__mulsi3>
 8014bec:	d8c00117 	ldw	r3,4(sp)
 8014bf0:	b809883a 	mov	r4,r23
 8014bf4:	d8800215 	stw	r2,8(sp)
 8014bf8:	180b883a 	mov	r5,r3
 8014bfc:	800a1780 	call	800a178 <__mulsi3>
 8014c00:	d8c00117 	ldw	r3,4(sp)
 8014c04:	b009883a 	mov	r4,r22
 8014c08:	102f883a 	mov	r23,r2
 8014c0c:	180b883a 	mov	r5,r3
 8014c10:	800a1780 	call	800a178 <__mulsi3>
 8014c14:	d9800217 	ldw	r6,8(sp)
 8014c18:	e006d43a 	srli	r3,fp,16
 8014c1c:	1185883a 	add	r2,r2,r6
 8014c20:	1885883a 	add	r2,r3,r2
 8014c24:	1180022e 	bgeu	r2,r6,8014c30 <__umoddi3+0x454>
 8014c28:	00c00074 	movhi	r3,1
 8014c2c:	b8ef883a 	add	r23,r23,r3
 8014c30:	1006d43a 	srli	r3,r2,16
 8014c34:	1004943a 	slli	r2,r2,16
 8014c38:	e73fffcc 	andi	fp,fp,65535
 8014c3c:	1dc7883a 	add	r3,r3,r23
 8014c40:	1739883a 	add	fp,r2,fp
 8014c44:	88c03a36 	bltu	r17,r3,8014d30 <__umoddi3+0x554>
 8014c48:	88c05126 	beq	r17,r3,8014d90 <__umoddi3+0x5b4>
 8014c4c:	88c9c83a 	sub	r4,r17,r3
 8014c50:	e00f883a 	mov	r7,fp
 8014c54:	81cfc83a 	sub	r7,r16,r7
 8014c58:	81c7803a 	cmpltu	r3,r16,r7
 8014c5c:	20c7c83a 	sub	r3,r4,r3
 8014c60:	1cc4983a 	sll	r2,r3,r19
 8014c64:	3d0ed83a 	srl	r7,r7,r20
 8014c68:	1d06d83a 	srl	r3,r3,r20
 8014c6c:	11c4b03a 	or	r2,r2,r7
 8014c70:	003f7c06 	br	8014a64 <__umoddi3+0x288>
 8014c74:	9ca6983a 	sll	r19,r19,r18
 8014c78:	88f8d83a 	srl	fp,r17,r3
 8014c7c:	80c4d83a 	srl	r2,r16,r3
 8014c80:	982cd43a 	srli	r22,r19,16
 8014c84:	8ca2983a 	sll	r17,r17,r18
 8014c88:	e009883a 	mov	r4,fp
 8014c8c:	b00b883a 	mov	r5,r22
 8014c90:	146ab03a 	or	r21,r2,r17
 8014c94:	800a1200 	call	800a120 <__umodsi3>
 8014c98:	b00b883a 	mov	r5,r22
 8014c9c:	e009883a 	mov	r4,fp
 8014ca0:	1029883a 	mov	r20,r2
 8014ca4:	9dffffcc 	andi	r23,r19,65535
 8014ca8:	800a0bc0 	call	800a0bc <__udivsi3>
 8014cac:	b809883a 	mov	r4,r23
 8014cb0:	100b883a 	mov	r5,r2
 8014cb4:	800a1780 	call	800a178 <__mulsi3>
 8014cb8:	a008943a 	slli	r4,r20,16
 8014cbc:	a806d43a 	srli	r3,r21,16
 8014cc0:	84a8983a 	sll	r20,r16,r18
 8014cc4:	1906b03a 	or	r3,r3,r4
 8014cc8:	1880042e 	bgeu	r3,r2,8014cdc <__umoddi3+0x500>
 8014ccc:	1cc7883a 	add	r3,r3,r19
 8014cd0:	1cc00236 	bltu	r3,r19,8014cdc <__umoddi3+0x500>
 8014cd4:	1880012e 	bgeu	r3,r2,8014cdc <__umoddi3+0x500>
 8014cd8:	1cc7883a 	add	r3,r3,r19
 8014cdc:	18a3c83a 	sub	r17,r3,r2
 8014ce0:	b00b883a 	mov	r5,r22
 8014ce4:	8809883a 	mov	r4,r17
 8014ce8:	800a1200 	call	800a120 <__umodsi3>
 8014cec:	b00b883a 	mov	r5,r22
 8014cf0:	8809883a 	mov	r4,r17
 8014cf4:	1021883a 	mov	r16,r2
 8014cf8:	800a0bc0 	call	800a0bc <__udivsi3>
 8014cfc:	100b883a 	mov	r5,r2
 8014d00:	b809883a 	mov	r4,r23
 8014d04:	8020943a 	slli	r16,r16,16
 8014d08:	800a1780 	call	800a178 <__mulsi3>
 8014d0c:	a8ffffcc 	andi	r3,r21,65535
 8014d10:	1c06b03a 	or	r3,r3,r16
 8014d14:	1880042e 	bgeu	r3,r2,8014d28 <__umoddi3+0x54c>
 8014d18:	1cc7883a 	add	r3,r3,r19
 8014d1c:	1cc00236 	bltu	r3,r19,8014d28 <__umoddi3+0x54c>
 8014d20:	1880012e 	bgeu	r3,r2,8014d28 <__umoddi3+0x54c>
 8014d24:	1cc7883a 	add	r3,r3,r19
 8014d28:	18a3c83a 	sub	r17,r3,r2
 8014d2c:	003f2906 	br	80149d4 <__umoddi3+0x1f8>
 8014d30:	e48fc83a 	sub	r7,fp,r18
 8014d34:	1d49c83a 	sub	r4,r3,r21
 8014d38:	e1f9803a 	cmpltu	fp,fp,r7
 8014d3c:	2739c83a 	sub	fp,r4,fp
 8014d40:	8f09c83a 	sub	r4,r17,fp
 8014d44:	003fc306 	br	8014c54 <__umoddi3+0x478>
 8014d48:	01000604 	movi	r4,24
 8014d4c:	003ef906 	br	8014934 <__umoddi3+0x158>
 8014d50:	00800604 	movi	r2,24
 8014d54:	003f1306 	br	80149a4 <__umoddi3+0x1c8>
 8014d58:	01000604 	movi	r4,24
 8014d5c:	003eb606 	br	8014838 <__umoddi3+0x5c>
 8014d60:	40bf902e 	bgeu	r8,r2,8014ba4 <__umoddi3+0x3c8>
 8014d64:	b5bfff84 	addi	r22,r22,-2
 8014d68:	4551883a 	add	r8,r8,r21
 8014d6c:	003f8e06 	br	8014ba8 <__umoddi3+0x3cc>
 8014d70:	18bf762e 	bgeu	r3,r2,8014b4c <__umoddi3+0x370>
 8014d74:	8c7fff84 	addi	r17,r17,-2
 8014d78:	1d47883a 	add	r3,r3,r21
 8014d7c:	003f7406 	br	8014b50 <__umoddi3+0x374>
 8014d80:	1cc7883a 	add	r3,r3,r19
 8014d84:	003ecd06 	br	80148bc <__umoddi3+0xe0>
 8014d88:	8005883a 	mov	r2,r16
 8014d8c:	003ef806 	br	8014970 <__umoddi3+0x194>
 8014d90:	873fe736 	bltu	r16,fp,8014d30 <__umoddi3+0x554>
 8014d94:	e00f883a 	mov	r7,fp
 8014d98:	0009883a 	mov	r4,zero
 8014d9c:	003fad06 	br	8014c54 <__umoddi3+0x478>

08014da0 <__adddf3>:
 8014da0:	02c00434 	movhi	r11,16
 8014da4:	5affffc4 	addi	r11,r11,-1
 8014da8:	2806d7fa 	srli	r3,r5,31
 8014dac:	2ad4703a 	and	r10,r5,r11
 8014db0:	3ad2703a 	and	r9,r7,r11
 8014db4:	3804d53a 	srli	r2,r7,20
 8014db8:	3018d77a 	srli	r12,r6,29
 8014dbc:	280ad53a 	srli	r5,r5,20
 8014dc0:	501490fa 	slli	r10,r10,3
 8014dc4:	2010d77a 	srli	r8,r4,29
 8014dc8:	481290fa 	slli	r9,r9,3
 8014dcc:	380ed7fa 	srli	r7,r7,31
 8014dd0:	defffb04 	addi	sp,sp,-20
 8014dd4:	dc800215 	stw	r18,8(sp)
 8014dd8:	dc400115 	stw	r17,4(sp)
 8014ddc:	dc000015 	stw	r16,0(sp)
 8014de0:	dfc00415 	stw	ra,16(sp)
 8014de4:	dcc00315 	stw	r19,12(sp)
 8014de8:	1c803fcc 	andi	r18,r3,255
 8014dec:	2c01ffcc 	andi	r16,r5,2047
 8014df0:	5210b03a 	or	r8,r10,r8
 8014df4:	202290fa 	slli	r17,r4,3
 8014df8:	1081ffcc 	andi	r2,r2,2047
 8014dfc:	4b12b03a 	or	r9,r9,r12
 8014e00:	300c90fa 	slli	r6,r6,3
 8014e04:	91c07526 	beq	r18,r7,8014fdc <__adddf3+0x23c>
 8014e08:	8087c83a 	sub	r3,r16,r2
 8014e0c:	00c0ab0e 	bge	zero,r3,80150bc <__adddf3+0x31c>
 8014e10:	10002a1e 	bne	r2,zero,8014ebc <__adddf3+0x11c>
 8014e14:	4984b03a 	or	r2,r9,r6
 8014e18:	1000961e 	bne	r2,zero,8015074 <__adddf3+0x2d4>
 8014e1c:	888001cc 	andi	r2,r17,7
 8014e20:	10000726 	beq	r2,zero,8014e40 <__adddf3+0xa0>
 8014e24:	888003cc 	andi	r2,r17,15
 8014e28:	00c00104 	movi	r3,4
 8014e2c:	10c00426 	beq	r2,r3,8014e40 <__adddf3+0xa0>
 8014e30:	88c7883a 	add	r3,r17,r3
 8014e34:	1c63803a 	cmpltu	r17,r3,r17
 8014e38:	4451883a 	add	r8,r8,r17
 8014e3c:	1823883a 	mov	r17,r3
 8014e40:	4080202c 	andhi	r2,r8,128
 8014e44:	10005926 	beq	r2,zero,8014fac <__adddf3+0x20c>
 8014e48:	84000044 	addi	r16,r16,1
 8014e4c:	0081ffc4 	movi	r2,2047
 8014e50:	8080ba26 	beq	r16,r2,801513c <__adddf3+0x39c>
 8014e54:	00bfe034 	movhi	r2,65408
 8014e58:	10bfffc4 	addi	r2,r2,-1
 8014e5c:	4090703a 	and	r8,r8,r2
 8014e60:	4004977a 	slli	r2,r8,29
 8014e64:	4010927a 	slli	r8,r8,9
 8014e68:	8822d0fa 	srli	r17,r17,3
 8014e6c:	8401ffcc 	andi	r16,r16,2047
 8014e70:	4010d33a 	srli	r8,r8,12
 8014e74:	9007883a 	mov	r3,r18
 8014e78:	1444b03a 	or	r2,r2,r17
 8014e7c:	8401ffcc 	andi	r16,r16,2047
 8014e80:	8020953a 	slli	r16,r16,20
 8014e84:	18c03fcc 	andi	r3,r3,255
 8014e88:	01000434 	movhi	r4,16
 8014e8c:	213fffc4 	addi	r4,r4,-1
 8014e90:	180697fa 	slli	r3,r3,31
 8014e94:	4110703a 	and	r8,r8,r4
 8014e98:	4410b03a 	or	r8,r8,r16
 8014e9c:	40c6b03a 	or	r3,r8,r3
 8014ea0:	dfc00417 	ldw	ra,16(sp)
 8014ea4:	dcc00317 	ldw	r19,12(sp)
 8014ea8:	dc800217 	ldw	r18,8(sp)
 8014eac:	dc400117 	ldw	r17,4(sp)
 8014eb0:	dc000017 	ldw	r16,0(sp)
 8014eb4:	dec00504 	addi	sp,sp,20
 8014eb8:	f800283a 	ret
 8014ebc:	0081ffc4 	movi	r2,2047
 8014ec0:	80bfd626 	beq	r16,r2,8014e1c <__adddf3+0x7c>
 8014ec4:	4a402034 	orhi	r9,r9,128
 8014ec8:	00800e04 	movi	r2,56
 8014ecc:	10c09f16 	blt	r2,r3,801514c <__adddf3+0x3ac>
 8014ed0:	008007c4 	movi	r2,31
 8014ed4:	10c0c216 	blt	r2,r3,80151e0 <__adddf3+0x440>
 8014ed8:	00800804 	movi	r2,32
 8014edc:	10c5c83a 	sub	r2,r2,r3
 8014ee0:	488a983a 	sll	r5,r9,r2
 8014ee4:	30c8d83a 	srl	r4,r6,r3
 8014ee8:	3084983a 	sll	r2,r6,r2
 8014eec:	48c6d83a 	srl	r3,r9,r3
 8014ef0:	290cb03a 	or	r6,r5,r4
 8014ef4:	1004c03a 	cmpne	r2,r2,zero
 8014ef8:	308cb03a 	or	r6,r6,r2
 8014efc:	898dc83a 	sub	r6,r17,r6
 8014f00:	89a3803a 	cmpltu	r17,r17,r6
 8014f04:	40d1c83a 	sub	r8,r8,r3
 8014f08:	4451c83a 	sub	r8,r8,r17
 8014f0c:	3023883a 	mov	r17,r6
 8014f10:	4080202c 	andhi	r2,r8,128
 8014f14:	10002326 	beq	r2,zero,8014fa4 <__adddf3+0x204>
 8014f18:	04c02034 	movhi	r19,128
 8014f1c:	9cffffc4 	addi	r19,r19,-1
 8014f20:	44e6703a 	and	r19,r8,r19
 8014f24:	98007626 	beq	r19,zero,8015100 <__adddf3+0x360>
 8014f28:	9809883a 	mov	r4,r19
 8014f2c:	80175e00 	call	80175e0 <__clzsi2>
 8014f30:	10fffe04 	addi	r3,r2,-8
 8014f34:	010007c4 	movi	r4,31
 8014f38:	20c07716 	blt	r4,r3,8015118 <__adddf3+0x378>
 8014f3c:	00800804 	movi	r2,32
 8014f40:	10c5c83a 	sub	r2,r2,r3
 8014f44:	8884d83a 	srl	r2,r17,r2
 8014f48:	98d0983a 	sll	r8,r19,r3
 8014f4c:	88e2983a 	sll	r17,r17,r3
 8014f50:	1204b03a 	or	r2,r2,r8
 8014f54:	1c007416 	blt	r3,r16,8015128 <__adddf3+0x388>
 8014f58:	1c21c83a 	sub	r16,r3,r16
 8014f5c:	82000044 	addi	r8,r16,1
 8014f60:	00c007c4 	movi	r3,31
 8014f64:	1a009116 	blt	r3,r8,80151ac <__adddf3+0x40c>
 8014f68:	00c00804 	movi	r3,32
 8014f6c:	1a07c83a 	sub	r3,r3,r8
 8014f70:	8a08d83a 	srl	r4,r17,r8
 8014f74:	88e2983a 	sll	r17,r17,r3
 8014f78:	10c6983a 	sll	r3,r2,r3
 8014f7c:	1210d83a 	srl	r8,r2,r8
 8014f80:	8804c03a 	cmpne	r2,r17,zero
 8014f84:	1906b03a 	or	r3,r3,r4
 8014f88:	18a2b03a 	or	r17,r3,r2
 8014f8c:	0021883a 	mov	r16,zero
 8014f90:	003fa206 	br	8014e1c <__adddf3+0x7c>
 8014f94:	1890b03a 	or	r8,r3,r2
 8014f98:	40017d26 	beq	r8,zero,8015590 <__adddf3+0x7f0>
 8014f9c:	1011883a 	mov	r8,r2
 8014fa0:	1823883a 	mov	r17,r3
 8014fa4:	888001cc 	andi	r2,r17,7
 8014fa8:	103f9e1e 	bne	r2,zero,8014e24 <__adddf3+0x84>
 8014fac:	4004977a 	slli	r2,r8,29
 8014fb0:	8822d0fa 	srli	r17,r17,3
 8014fb4:	4010d0fa 	srli	r8,r8,3
 8014fb8:	9007883a 	mov	r3,r18
 8014fbc:	1444b03a 	or	r2,r2,r17
 8014fc0:	0101ffc4 	movi	r4,2047
 8014fc4:	81002426 	beq	r16,r4,8015058 <__adddf3+0x2b8>
 8014fc8:	8120703a 	and	r16,r16,r4
 8014fcc:	01000434 	movhi	r4,16
 8014fd0:	213fffc4 	addi	r4,r4,-1
 8014fd4:	4110703a 	and	r8,r8,r4
 8014fd8:	003fa806 	br	8014e7c <__adddf3+0xdc>
 8014fdc:	8089c83a 	sub	r4,r16,r2
 8014fe0:	01005e0e 	bge	zero,r4,801515c <__adddf3+0x3bc>
 8014fe4:	10002b26 	beq	r2,zero,8015094 <__adddf3+0x2f4>
 8014fe8:	0081ffc4 	movi	r2,2047
 8014fec:	80bf8b26 	beq	r16,r2,8014e1c <__adddf3+0x7c>
 8014ff0:	4a402034 	orhi	r9,r9,128
 8014ff4:	00800e04 	movi	r2,56
 8014ff8:	1100a40e 	bge	r2,r4,801528c <__adddf3+0x4ec>
 8014ffc:	498cb03a 	or	r6,r9,r6
 8015000:	300ac03a 	cmpne	r5,r6,zero
 8015004:	0013883a 	mov	r9,zero
 8015008:	2c4b883a 	add	r5,r5,r17
 801500c:	2c63803a 	cmpltu	r17,r5,r17
 8015010:	4a11883a 	add	r8,r9,r8
 8015014:	8a11883a 	add	r8,r17,r8
 8015018:	2823883a 	mov	r17,r5
 801501c:	4080202c 	andhi	r2,r8,128
 8015020:	103fe026 	beq	r2,zero,8014fa4 <__adddf3+0x204>
 8015024:	84000044 	addi	r16,r16,1
 8015028:	0081ffc4 	movi	r2,2047
 801502c:	8080d226 	beq	r16,r2,8015378 <__adddf3+0x5d8>
 8015030:	00bfe034 	movhi	r2,65408
 8015034:	10bfffc4 	addi	r2,r2,-1
 8015038:	4090703a 	and	r8,r8,r2
 801503c:	880ad07a 	srli	r5,r17,1
 8015040:	400897fa 	slli	r4,r8,31
 8015044:	88c0004c 	andi	r3,r17,1
 8015048:	28e2b03a 	or	r17,r5,r3
 801504c:	4010d07a 	srli	r8,r8,1
 8015050:	2462b03a 	or	r17,r4,r17
 8015054:	003f7106 	br	8014e1c <__adddf3+0x7c>
 8015058:	4088b03a 	or	r4,r8,r2
 801505c:	20014526 	beq	r4,zero,8015574 <__adddf3+0x7d4>
 8015060:	01000434 	movhi	r4,16
 8015064:	42000234 	orhi	r8,r8,8
 8015068:	213fffc4 	addi	r4,r4,-1
 801506c:	4110703a 	and	r8,r8,r4
 8015070:	003f8206 	br	8014e7c <__adddf3+0xdc>
 8015074:	18ffffc4 	addi	r3,r3,-1
 8015078:	1800491e 	bne	r3,zero,80151a0 <__adddf3+0x400>
 801507c:	898bc83a 	sub	r5,r17,r6
 8015080:	8963803a 	cmpltu	r17,r17,r5
 8015084:	4251c83a 	sub	r8,r8,r9
 8015088:	4451c83a 	sub	r8,r8,r17
 801508c:	2823883a 	mov	r17,r5
 8015090:	003f9f06 	br	8014f10 <__adddf3+0x170>
 8015094:	4984b03a 	or	r2,r9,r6
 8015098:	103f6026 	beq	r2,zero,8014e1c <__adddf3+0x7c>
 801509c:	213fffc4 	addi	r4,r4,-1
 80150a0:	2000931e 	bne	r4,zero,80152f0 <__adddf3+0x550>
 80150a4:	898d883a 	add	r6,r17,r6
 80150a8:	3463803a 	cmpltu	r17,r6,r17
 80150ac:	4251883a 	add	r8,r8,r9
 80150b0:	8a11883a 	add	r8,r17,r8
 80150b4:	3023883a 	mov	r17,r6
 80150b8:	003fd806 	br	801501c <__adddf3+0x27c>
 80150bc:	1800541e 	bne	r3,zero,8015210 <__adddf3+0x470>
 80150c0:	80800044 	addi	r2,r16,1
 80150c4:	1081ffcc 	andi	r2,r2,2047
 80150c8:	00c00044 	movi	r3,1
 80150cc:	1880a00e 	bge	r3,r2,8015350 <__adddf3+0x5b0>
 80150d0:	8989c83a 	sub	r4,r17,r6
 80150d4:	8905803a 	cmpltu	r2,r17,r4
 80150d8:	4267c83a 	sub	r19,r8,r9
 80150dc:	98a7c83a 	sub	r19,r19,r2
 80150e0:	9880202c 	andhi	r2,r19,128
 80150e4:	10006326 	beq	r2,zero,8015274 <__adddf3+0x4d4>
 80150e8:	3463c83a 	sub	r17,r6,r17
 80150ec:	4a07c83a 	sub	r3,r9,r8
 80150f0:	344d803a 	cmpltu	r6,r6,r17
 80150f4:	19a7c83a 	sub	r19,r3,r6
 80150f8:	3825883a 	mov	r18,r7
 80150fc:	983f8a1e 	bne	r19,zero,8014f28 <__adddf3+0x188>
 8015100:	8809883a 	mov	r4,r17
 8015104:	80175e00 	call	80175e0 <__clzsi2>
 8015108:	10800804 	addi	r2,r2,32
 801510c:	10fffe04 	addi	r3,r2,-8
 8015110:	010007c4 	movi	r4,31
 8015114:	20ff890e 	bge	r4,r3,8014f3c <__adddf3+0x19c>
 8015118:	10bff604 	addi	r2,r2,-40
 801511c:	8884983a 	sll	r2,r17,r2
 8015120:	0023883a 	mov	r17,zero
 8015124:	1c3f8c0e 	bge	r3,r16,8014f58 <__adddf3+0x1b8>
 8015128:	023fe034 	movhi	r8,65408
 801512c:	423fffc4 	addi	r8,r8,-1
 8015130:	80e1c83a 	sub	r16,r16,r3
 8015134:	1210703a 	and	r8,r2,r8
 8015138:	003f3806 	br	8014e1c <__adddf3+0x7c>
 801513c:	9007883a 	mov	r3,r18
 8015140:	0011883a 	mov	r8,zero
 8015144:	0005883a 	mov	r2,zero
 8015148:	003f4c06 	br	8014e7c <__adddf3+0xdc>
 801514c:	498cb03a 	or	r6,r9,r6
 8015150:	300cc03a 	cmpne	r6,r6,zero
 8015154:	0007883a 	mov	r3,zero
 8015158:	003f6806 	br	8014efc <__adddf3+0x15c>
 801515c:	20009c1e 	bne	r4,zero,80153d0 <__adddf3+0x630>
 8015160:	80800044 	addi	r2,r16,1
 8015164:	1141ffcc 	andi	r5,r2,2047
 8015168:	01000044 	movi	r4,1
 801516c:	2140670e 	bge	r4,r5,801530c <__adddf3+0x56c>
 8015170:	0101ffc4 	movi	r4,2047
 8015174:	11007f26 	beq	r2,r4,8015374 <__adddf3+0x5d4>
 8015178:	898d883a 	add	r6,r17,r6
 801517c:	4247883a 	add	r3,r8,r9
 8015180:	3451803a 	cmpltu	r8,r6,r17
 8015184:	40d1883a 	add	r8,r8,r3
 8015188:	402297fa 	slli	r17,r8,31
 801518c:	300cd07a 	srli	r6,r6,1
 8015190:	4010d07a 	srli	r8,r8,1
 8015194:	1021883a 	mov	r16,r2
 8015198:	89a2b03a 	or	r17,r17,r6
 801519c:	003f1f06 	br	8014e1c <__adddf3+0x7c>
 80151a0:	0081ffc4 	movi	r2,2047
 80151a4:	80bf481e 	bne	r16,r2,8014ec8 <__adddf3+0x128>
 80151a8:	003f1c06 	br	8014e1c <__adddf3+0x7c>
 80151ac:	843ff844 	addi	r16,r16,-31
 80151b0:	01000804 	movi	r4,32
 80151b4:	1406d83a 	srl	r3,r2,r16
 80151b8:	41005026 	beq	r8,r4,80152fc <__adddf3+0x55c>
 80151bc:	01001004 	movi	r4,64
 80151c0:	2211c83a 	sub	r8,r4,r8
 80151c4:	1204983a 	sll	r2,r2,r8
 80151c8:	88a2b03a 	or	r17,r17,r2
 80151cc:	8822c03a 	cmpne	r17,r17,zero
 80151d0:	1c62b03a 	or	r17,r3,r17
 80151d4:	0011883a 	mov	r8,zero
 80151d8:	0021883a 	mov	r16,zero
 80151dc:	003f7106 	br	8014fa4 <__adddf3+0x204>
 80151e0:	193ff804 	addi	r4,r3,-32
 80151e4:	00800804 	movi	r2,32
 80151e8:	4908d83a 	srl	r4,r9,r4
 80151ec:	18804526 	beq	r3,r2,8015304 <__adddf3+0x564>
 80151f0:	00801004 	movi	r2,64
 80151f4:	10c5c83a 	sub	r2,r2,r3
 80151f8:	4886983a 	sll	r3,r9,r2
 80151fc:	198cb03a 	or	r6,r3,r6
 8015200:	300cc03a 	cmpne	r6,r6,zero
 8015204:	218cb03a 	or	r6,r4,r6
 8015208:	0007883a 	mov	r3,zero
 801520c:	003f3b06 	br	8014efc <__adddf3+0x15c>
 8015210:	80002a26 	beq	r16,zero,80152bc <__adddf3+0x51c>
 8015214:	0101ffc4 	movi	r4,2047
 8015218:	11006826 	beq	r2,r4,80153bc <__adddf3+0x61c>
 801521c:	00c7c83a 	sub	r3,zero,r3
 8015220:	42002034 	orhi	r8,r8,128
 8015224:	01000e04 	movi	r4,56
 8015228:	20c07c16 	blt	r4,r3,801541c <__adddf3+0x67c>
 801522c:	010007c4 	movi	r4,31
 8015230:	20c0da16 	blt	r4,r3,801559c <__adddf3+0x7fc>
 8015234:	01000804 	movi	r4,32
 8015238:	20c9c83a 	sub	r4,r4,r3
 801523c:	4114983a 	sll	r10,r8,r4
 8015240:	88cad83a 	srl	r5,r17,r3
 8015244:	8908983a 	sll	r4,r17,r4
 8015248:	40c6d83a 	srl	r3,r8,r3
 801524c:	5162b03a 	or	r17,r10,r5
 8015250:	2008c03a 	cmpne	r4,r4,zero
 8015254:	8922b03a 	or	r17,r17,r4
 8015258:	3463c83a 	sub	r17,r6,r17
 801525c:	48c7c83a 	sub	r3,r9,r3
 8015260:	344d803a 	cmpltu	r6,r6,r17
 8015264:	1991c83a 	sub	r8,r3,r6
 8015268:	1021883a 	mov	r16,r2
 801526c:	3825883a 	mov	r18,r7
 8015270:	003f2706 	br	8014f10 <__adddf3+0x170>
 8015274:	24d0b03a 	or	r8,r4,r19
 8015278:	40001b1e 	bne	r8,zero,80152e8 <__adddf3+0x548>
 801527c:	0005883a 	mov	r2,zero
 8015280:	0007883a 	mov	r3,zero
 8015284:	0021883a 	mov	r16,zero
 8015288:	003f4d06 	br	8014fc0 <__adddf3+0x220>
 801528c:	008007c4 	movi	r2,31
 8015290:	11003c16 	blt	r2,r4,8015384 <__adddf3+0x5e4>
 8015294:	00800804 	movi	r2,32
 8015298:	1105c83a 	sub	r2,r2,r4
 801529c:	488e983a 	sll	r7,r9,r2
 80152a0:	310ad83a 	srl	r5,r6,r4
 80152a4:	3084983a 	sll	r2,r6,r2
 80152a8:	4912d83a 	srl	r9,r9,r4
 80152ac:	394ab03a 	or	r5,r7,r5
 80152b0:	1004c03a 	cmpne	r2,r2,zero
 80152b4:	288ab03a 	or	r5,r5,r2
 80152b8:	003f5306 	br	8015008 <__adddf3+0x268>
 80152bc:	4448b03a 	or	r4,r8,r17
 80152c0:	20003e26 	beq	r4,zero,80153bc <__adddf3+0x61c>
 80152c4:	00c6303a 	nor	r3,zero,r3
 80152c8:	18003a1e 	bne	r3,zero,80153b4 <__adddf3+0x614>
 80152cc:	3463c83a 	sub	r17,r6,r17
 80152d0:	4a07c83a 	sub	r3,r9,r8
 80152d4:	344d803a 	cmpltu	r6,r6,r17
 80152d8:	1991c83a 	sub	r8,r3,r6
 80152dc:	1021883a 	mov	r16,r2
 80152e0:	3825883a 	mov	r18,r7
 80152e4:	003f0a06 	br	8014f10 <__adddf3+0x170>
 80152e8:	2023883a 	mov	r17,r4
 80152ec:	003f0d06 	br	8014f24 <__adddf3+0x184>
 80152f0:	0081ffc4 	movi	r2,2047
 80152f4:	80bf3f1e 	bne	r16,r2,8014ff4 <__adddf3+0x254>
 80152f8:	003ec806 	br	8014e1c <__adddf3+0x7c>
 80152fc:	0005883a 	mov	r2,zero
 8015300:	003fb106 	br	80151c8 <__adddf3+0x428>
 8015304:	0007883a 	mov	r3,zero
 8015308:	003fbc06 	br	80151fc <__adddf3+0x45c>
 801530c:	4444b03a 	or	r2,r8,r17
 8015310:	8000871e 	bne	r16,zero,8015530 <__adddf3+0x790>
 8015314:	1000ba26 	beq	r2,zero,8015600 <__adddf3+0x860>
 8015318:	4984b03a 	or	r2,r9,r6
 801531c:	103ebf26 	beq	r2,zero,8014e1c <__adddf3+0x7c>
 8015320:	8985883a 	add	r2,r17,r6
 8015324:	4247883a 	add	r3,r8,r9
 8015328:	1451803a 	cmpltu	r8,r2,r17
 801532c:	40d1883a 	add	r8,r8,r3
 8015330:	40c0202c 	andhi	r3,r8,128
 8015334:	1023883a 	mov	r17,r2
 8015338:	183f1a26 	beq	r3,zero,8014fa4 <__adddf3+0x204>
 801533c:	00bfe034 	movhi	r2,65408
 8015340:	10bfffc4 	addi	r2,r2,-1
 8015344:	2021883a 	mov	r16,r4
 8015348:	4090703a 	and	r8,r8,r2
 801534c:	003eb306 	br	8014e1c <__adddf3+0x7c>
 8015350:	4444b03a 	or	r2,r8,r17
 8015354:	8000291e 	bne	r16,zero,80153fc <__adddf3+0x65c>
 8015358:	10004b1e 	bne	r2,zero,8015488 <__adddf3+0x6e8>
 801535c:	4990b03a 	or	r8,r9,r6
 8015360:	40008b26 	beq	r8,zero,8015590 <__adddf3+0x7f0>
 8015364:	4811883a 	mov	r8,r9
 8015368:	3023883a 	mov	r17,r6
 801536c:	3825883a 	mov	r18,r7
 8015370:	003eaa06 	br	8014e1c <__adddf3+0x7c>
 8015374:	1021883a 	mov	r16,r2
 8015378:	0011883a 	mov	r8,zero
 801537c:	0005883a 	mov	r2,zero
 8015380:	003f0f06 	br	8014fc0 <__adddf3+0x220>
 8015384:	217ff804 	addi	r5,r4,-32
 8015388:	00800804 	movi	r2,32
 801538c:	494ad83a 	srl	r5,r9,r5
 8015390:	20807d26 	beq	r4,r2,8015588 <__adddf3+0x7e8>
 8015394:	00801004 	movi	r2,64
 8015398:	1109c83a 	sub	r4,r2,r4
 801539c:	4912983a 	sll	r9,r9,r4
 80153a0:	498cb03a 	or	r6,r9,r6
 80153a4:	300cc03a 	cmpne	r6,r6,zero
 80153a8:	298ab03a 	or	r5,r5,r6
 80153ac:	0013883a 	mov	r9,zero
 80153b0:	003f1506 	br	8015008 <__adddf3+0x268>
 80153b4:	0101ffc4 	movi	r4,2047
 80153b8:	113f9a1e 	bne	r2,r4,8015224 <__adddf3+0x484>
 80153bc:	4811883a 	mov	r8,r9
 80153c0:	3023883a 	mov	r17,r6
 80153c4:	1021883a 	mov	r16,r2
 80153c8:	3825883a 	mov	r18,r7
 80153cc:	003e9306 	br	8014e1c <__adddf3+0x7c>
 80153d0:	8000161e 	bne	r16,zero,801542c <__adddf3+0x68c>
 80153d4:	444ab03a 	or	r5,r8,r17
 80153d8:	28005126 	beq	r5,zero,8015520 <__adddf3+0x780>
 80153dc:	0108303a 	nor	r4,zero,r4
 80153e0:	20004d1e 	bne	r4,zero,8015518 <__adddf3+0x778>
 80153e4:	89a3883a 	add	r17,r17,r6
 80153e8:	4253883a 	add	r9,r8,r9
 80153ec:	898d803a 	cmpltu	r6,r17,r6
 80153f0:	3251883a 	add	r8,r6,r9
 80153f4:	1021883a 	mov	r16,r2
 80153f8:	003f0806 	br	801501c <__adddf3+0x27c>
 80153fc:	1000301e 	bne	r2,zero,80154c0 <__adddf3+0x720>
 8015400:	4984b03a 	or	r2,r9,r6
 8015404:	10007126 	beq	r2,zero,80155cc <__adddf3+0x82c>
 8015408:	4811883a 	mov	r8,r9
 801540c:	3023883a 	mov	r17,r6
 8015410:	3825883a 	mov	r18,r7
 8015414:	0401ffc4 	movi	r16,2047
 8015418:	003e8006 	br	8014e1c <__adddf3+0x7c>
 801541c:	4462b03a 	or	r17,r8,r17
 8015420:	8822c03a 	cmpne	r17,r17,zero
 8015424:	0007883a 	mov	r3,zero
 8015428:	003f8b06 	br	8015258 <__adddf3+0x4b8>
 801542c:	0141ffc4 	movi	r5,2047
 8015430:	11403b26 	beq	r2,r5,8015520 <__adddf3+0x780>
 8015434:	0109c83a 	sub	r4,zero,r4
 8015438:	42002034 	orhi	r8,r8,128
 801543c:	01400e04 	movi	r5,56
 8015440:	29006716 	blt	r5,r4,80155e0 <__adddf3+0x840>
 8015444:	014007c4 	movi	r5,31
 8015448:	29007016 	blt	r5,r4,801560c <__adddf3+0x86c>
 801544c:	01400804 	movi	r5,32
 8015450:	290bc83a 	sub	r5,r5,r4
 8015454:	4154983a 	sll	r10,r8,r5
 8015458:	890ed83a 	srl	r7,r17,r4
 801545c:	894a983a 	sll	r5,r17,r5
 8015460:	4108d83a 	srl	r4,r8,r4
 8015464:	51e2b03a 	or	r17,r10,r7
 8015468:	280ac03a 	cmpne	r5,r5,zero
 801546c:	8962b03a 	or	r17,r17,r5
 8015470:	89a3883a 	add	r17,r17,r6
 8015474:	2253883a 	add	r9,r4,r9
 8015478:	898d803a 	cmpltu	r6,r17,r6
 801547c:	3251883a 	add	r8,r6,r9
 8015480:	1021883a 	mov	r16,r2
 8015484:	003ee506 	br	801501c <__adddf3+0x27c>
 8015488:	4984b03a 	or	r2,r9,r6
 801548c:	103e6326 	beq	r2,zero,8014e1c <__adddf3+0x7c>
 8015490:	8987c83a 	sub	r3,r17,r6
 8015494:	88c9803a 	cmpltu	r4,r17,r3
 8015498:	4245c83a 	sub	r2,r8,r9
 801549c:	1105c83a 	sub	r2,r2,r4
 80154a0:	1100202c 	andhi	r4,r2,128
 80154a4:	203ebb26 	beq	r4,zero,8014f94 <__adddf3+0x1f4>
 80154a8:	3463c83a 	sub	r17,r6,r17
 80154ac:	4a07c83a 	sub	r3,r9,r8
 80154b0:	344d803a 	cmpltu	r6,r6,r17
 80154b4:	1991c83a 	sub	r8,r3,r6
 80154b8:	3825883a 	mov	r18,r7
 80154bc:	003e5706 	br	8014e1c <__adddf3+0x7c>
 80154c0:	4984b03a 	or	r2,r9,r6
 80154c4:	10002e26 	beq	r2,zero,8015580 <__adddf3+0x7e0>
 80154c8:	4004d0fa 	srli	r2,r8,3
 80154cc:	8822d0fa 	srli	r17,r17,3
 80154d0:	4010977a 	slli	r8,r8,29
 80154d4:	10c0022c 	andhi	r3,r2,8
 80154d8:	4462b03a 	or	r17,r8,r17
 80154dc:	18000826 	beq	r3,zero,8015500 <__adddf3+0x760>
 80154e0:	4808d0fa 	srli	r4,r9,3
 80154e4:	20c0022c 	andhi	r3,r4,8
 80154e8:	1800051e 	bne	r3,zero,8015500 <__adddf3+0x760>
 80154ec:	300cd0fa 	srli	r6,r6,3
 80154f0:	4806977a 	slli	r3,r9,29
 80154f4:	2005883a 	mov	r2,r4
 80154f8:	3825883a 	mov	r18,r7
 80154fc:	19a2b03a 	or	r17,r3,r6
 8015500:	8810d77a 	srli	r8,r17,29
 8015504:	100490fa 	slli	r2,r2,3
 8015508:	882290fa 	slli	r17,r17,3
 801550c:	0401ffc4 	movi	r16,2047
 8015510:	4090b03a 	or	r8,r8,r2
 8015514:	003e4106 	br	8014e1c <__adddf3+0x7c>
 8015518:	0141ffc4 	movi	r5,2047
 801551c:	117fc71e 	bne	r2,r5,801543c <__adddf3+0x69c>
 8015520:	4811883a 	mov	r8,r9
 8015524:	3023883a 	mov	r17,r6
 8015528:	1021883a 	mov	r16,r2
 801552c:	003e3b06 	br	8014e1c <__adddf3+0x7c>
 8015530:	10002f26 	beq	r2,zero,80155f0 <__adddf3+0x850>
 8015534:	4984b03a 	or	r2,r9,r6
 8015538:	10001126 	beq	r2,zero,8015580 <__adddf3+0x7e0>
 801553c:	4004d0fa 	srli	r2,r8,3
 8015540:	8822d0fa 	srli	r17,r17,3
 8015544:	4010977a 	slli	r8,r8,29
 8015548:	10c0022c 	andhi	r3,r2,8
 801554c:	4462b03a 	or	r17,r8,r17
 8015550:	183feb26 	beq	r3,zero,8015500 <__adddf3+0x760>
 8015554:	4808d0fa 	srli	r4,r9,3
 8015558:	20c0022c 	andhi	r3,r4,8
 801555c:	183fe81e 	bne	r3,zero,8015500 <__adddf3+0x760>
 8015560:	300cd0fa 	srli	r6,r6,3
 8015564:	4806977a 	slli	r3,r9,29
 8015568:	2005883a 	mov	r2,r4
 801556c:	19a2b03a 	or	r17,r3,r6
 8015570:	003fe306 	br	8015500 <__adddf3+0x760>
 8015574:	0011883a 	mov	r8,zero
 8015578:	0005883a 	mov	r2,zero
 801557c:	003e3f06 	br	8014e7c <__adddf3+0xdc>
 8015580:	0401ffc4 	movi	r16,2047
 8015584:	003e2506 	br	8014e1c <__adddf3+0x7c>
 8015588:	0013883a 	mov	r9,zero
 801558c:	003f8406 	br	80153a0 <__adddf3+0x600>
 8015590:	0005883a 	mov	r2,zero
 8015594:	0007883a 	mov	r3,zero
 8015598:	003e8906 	br	8014fc0 <__adddf3+0x220>
 801559c:	197ff804 	addi	r5,r3,-32
 80155a0:	01000804 	movi	r4,32
 80155a4:	414ad83a 	srl	r5,r8,r5
 80155a8:	19002426 	beq	r3,r4,801563c <__adddf3+0x89c>
 80155ac:	01001004 	movi	r4,64
 80155b0:	20c7c83a 	sub	r3,r4,r3
 80155b4:	40c6983a 	sll	r3,r8,r3
 80155b8:	1c46b03a 	or	r3,r3,r17
 80155bc:	1806c03a 	cmpne	r3,r3,zero
 80155c0:	28e2b03a 	or	r17,r5,r3
 80155c4:	0007883a 	mov	r3,zero
 80155c8:	003f2306 	br	8015258 <__adddf3+0x4b8>
 80155cc:	0007883a 	mov	r3,zero
 80155d0:	5811883a 	mov	r8,r11
 80155d4:	00bfffc4 	movi	r2,-1
 80155d8:	0401ffc4 	movi	r16,2047
 80155dc:	003e7806 	br	8014fc0 <__adddf3+0x220>
 80155e0:	4462b03a 	or	r17,r8,r17
 80155e4:	8822c03a 	cmpne	r17,r17,zero
 80155e8:	0009883a 	mov	r4,zero
 80155ec:	003fa006 	br	8015470 <__adddf3+0x6d0>
 80155f0:	4811883a 	mov	r8,r9
 80155f4:	3023883a 	mov	r17,r6
 80155f8:	0401ffc4 	movi	r16,2047
 80155fc:	003e0706 	br	8014e1c <__adddf3+0x7c>
 8015600:	4811883a 	mov	r8,r9
 8015604:	3023883a 	mov	r17,r6
 8015608:	003e0406 	br	8014e1c <__adddf3+0x7c>
 801560c:	21fff804 	addi	r7,r4,-32
 8015610:	01400804 	movi	r5,32
 8015614:	41ced83a 	srl	r7,r8,r7
 8015618:	21400a26 	beq	r4,r5,8015644 <__adddf3+0x8a4>
 801561c:	01401004 	movi	r5,64
 8015620:	2909c83a 	sub	r4,r5,r4
 8015624:	4108983a 	sll	r4,r8,r4
 8015628:	2448b03a 	or	r4,r4,r17
 801562c:	2008c03a 	cmpne	r4,r4,zero
 8015630:	3922b03a 	or	r17,r7,r4
 8015634:	0009883a 	mov	r4,zero
 8015638:	003f8d06 	br	8015470 <__adddf3+0x6d0>
 801563c:	0007883a 	mov	r3,zero
 8015640:	003fdd06 	br	80155b8 <__adddf3+0x818>
 8015644:	0009883a 	mov	r4,zero
 8015648:	003ff706 	br	8015628 <__adddf3+0x888>

0801564c <__divdf3>:
 801564c:	defff004 	addi	sp,sp,-64
 8015650:	dc800815 	stw	r18,32(sp)
 8015654:	2824d53a 	srli	r18,r5,20
 8015658:	dd800c15 	stw	r22,48(sp)
 801565c:	282cd7fa 	srli	r22,r5,31
 8015660:	dc000615 	stw	r16,24(sp)
 8015664:	04000434 	movhi	r16,16
 8015668:	843fffc4 	addi	r16,r16,-1
 801566c:	dfc00f15 	stw	ra,60(sp)
 8015670:	df000e15 	stw	fp,56(sp)
 8015674:	ddc00d15 	stw	r23,52(sp)
 8015678:	dd400b15 	stw	r21,44(sp)
 801567c:	dd000a15 	stw	r20,40(sp)
 8015680:	dcc00915 	stw	r19,36(sp)
 8015684:	dc400715 	stw	r17,28(sp)
 8015688:	9481ffcc 	andi	r18,r18,2047
 801568c:	2c20703a 	and	r16,r5,r16
 8015690:	b2003fcc 	andi	r8,r22,255
 8015694:	90006126 	beq	r18,zero,801581c <__divdf3+0x1d0>
 8015698:	0081ffc4 	movi	r2,2047
 801569c:	202b883a 	mov	r21,r4
 80156a0:	90803726 	beq	r18,r2,8015780 <__divdf3+0x134>
 80156a4:	80800434 	orhi	r2,r16,16
 80156a8:	100490fa 	slli	r2,r2,3
 80156ac:	2020d77a 	srli	r16,r4,29
 80156b0:	202a90fa 	slli	r21,r4,3
 80156b4:	94bf0044 	addi	r18,r18,-1023
 80156b8:	80a0b03a 	or	r16,r16,r2
 80156bc:	0013883a 	mov	r9,zero
 80156c0:	000b883a 	mov	r5,zero
 80156c4:	3806d53a 	srli	r3,r7,20
 80156c8:	382ed7fa 	srli	r23,r7,31
 80156cc:	04400434 	movhi	r17,16
 80156d0:	8c7fffc4 	addi	r17,r17,-1
 80156d4:	18c1ffcc 	andi	r3,r3,2047
 80156d8:	3029883a 	mov	r20,r6
 80156dc:	3c62703a 	and	r17,r7,r17
 80156e0:	bf003fcc 	andi	fp,r23,255
 80156e4:	18006e26 	beq	r3,zero,80158a0 <__divdf3+0x254>
 80156e8:	0081ffc4 	movi	r2,2047
 80156ec:	18806626 	beq	r3,r2,8015888 <__divdf3+0x23c>
 80156f0:	88800434 	orhi	r2,r17,16
 80156f4:	100490fa 	slli	r2,r2,3
 80156f8:	3022d77a 	srli	r17,r6,29
 80156fc:	302890fa 	slli	r20,r6,3
 8015700:	18ff0044 	addi	r3,r3,-1023
 8015704:	88a2b03a 	or	r17,r17,r2
 8015708:	000f883a 	mov	r7,zero
 801570c:	b5e6f03a 	xor	r19,r22,r23
 8015710:	3a4cb03a 	or	r6,r7,r9
 8015714:	008003c4 	movi	r2,15
 8015718:	9809883a 	mov	r4,r19
 801571c:	90c7c83a 	sub	r3,r18,r3
 8015720:	9cc03fcc 	andi	r19,r19,255
 8015724:	11809636 	bltu	r2,r6,8015980 <__divdf3+0x334>
 8015728:	300c90ba 	slli	r6,r6,2
 801572c:	00820074 	movhi	r2,2049
 8015730:	1095d004 	addi	r2,r2,22336
 8015734:	308d883a 	add	r6,r6,r2
 8015738:	30800017 	ldw	r2,0(r6)
 801573c:	1000683a 	jmp	r2
 8015740:	08015980 	call	801598 <__alt_mem_onchip_memory2_0+0x801598>
 8015744:	080157b8 	rdprs	zero,at,1374
 8015748:	08015970 	cmpltui	zero,at,1381
 801574c:	080157ac 	andhi	zero,at,1374
 8015750:	08015970 	cmpltui	zero,at,1381
 8015754:	08015944 	addi	zero,at,1381
 8015758:	08015970 	cmpltui	zero,at,1381
 801575c:	080157ac 	andhi	zero,at,1374
 8015760:	080157b8 	rdprs	zero,at,1374
 8015764:	080157b8 	rdprs	zero,at,1374
 8015768:	08015944 	addi	zero,at,1381
 801576c:	080157ac 	andhi	zero,at,1374
 8015770:	0801579c 	xori	zero,at,1374
 8015774:	0801579c 	xori	zero,at,1374
 8015778:	0801579c 	xori	zero,at,1374
 801577c:	08015d08 	cmpgei	zero,at,1396
 8015780:	2404b03a 	or	r2,r4,r16
 8015784:	10006c1e 	bne	r2,zero,8015938 <__divdf3+0x2ec>
 8015788:	02400204 	movi	r9,8
 801578c:	0021883a 	mov	r16,zero
 8015790:	002b883a 	mov	r21,zero
 8015794:	01400084 	movi	r5,2
 8015798:	003fca06 	br	80156c4 <__divdf3+0x78>
 801579c:	8023883a 	mov	r17,r16
 80157a0:	a829883a 	mov	r20,r21
 80157a4:	4039883a 	mov	fp,r8
 80157a8:	280f883a 	mov	r7,r5
 80157ac:	00800084 	movi	r2,2
 80157b0:	3881601e 	bne	r7,r2,8015d34 <__divdf3+0x6e8>
 80157b4:	e027883a 	mov	r19,fp
 80157b8:	9900004c 	andi	r4,r19,1
 80157bc:	0081ffc4 	movi	r2,2047
 80157c0:	0021883a 	mov	r16,zero
 80157c4:	002b883a 	mov	r21,zero
 80157c8:	1004953a 	slli	r2,r2,20
 80157cc:	20c03fcc 	andi	r3,r4,255
 80157d0:	01400434 	movhi	r5,16
 80157d4:	297fffc4 	addi	r5,r5,-1
 80157d8:	180697fa 	slli	r3,r3,31
 80157dc:	8160703a 	and	r16,r16,r5
 80157e0:	80a0b03a 	or	r16,r16,r2
 80157e4:	80c6b03a 	or	r3,r16,r3
 80157e8:	a805883a 	mov	r2,r21
 80157ec:	dfc00f17 	ldw	ra,60(sp)
 80157f0:	df000e17 	ldw	fp,56(sp)
 80157f4:	ddc00d17 	ldw	r23,52(sp)
 80157f8:	dd800c17 	ldw	r22,48(sp)
 80157fc:	dd400b17 	ldw	r21,44(sp)
 8015800:	dd000a17 	ldw	r20,40(sp)
 8015804:	dcc00917 	ldw	r19,36(sp)
 8015808:	dc800817 	ldw	r18,32(sp)
 801580c:	dc400717 	ldw	r17,28(sp)
 8015810:	dc000617 	ldw	r16,24(sp)
 8015814:	dec01004 	addi	sp,sp,64
 8015818:	f800283a 	ret
 801581c:	2404b03a 	or	r2,r4,r16
 8015820:	2023883a 	mov	r17,r4
 8015824:	10003f26 	beq	r2,zero,8015924 <__divdf3+0x2d8>
 8015828:	80015e26 	beq	r16,zero,8015da4 <__divdf3+0x758>
 801582c:	8009883a 	mov	r4,r16
 8015830:	d9800215 	stw	r6,8(sp)
 8015834:	d9c00515 	stw	r7,20(sp)
 8015838:	da000415 	stw	r8,16(sp)
 801583c:	80175e00 	call	80175e0 <__clzsi2>
 8015840:	d9800217 	ldw	r6,8(sp)
 8015844:	d9c00517 	ldw	r7,20(sp)
 8015848:	da000417 	ldw	r8,16(sp)
 801584c:	113ffd44 	addi	r4,r2,-11
 8015850:	00c00704 	movi	r3,28
 8015854:	19014f16 	blt	r3,r4,8015d94 <__divdf3+0x748>
 8015858:	00c00744 	movi	r3,29
 801585c:	157ffe04 	addi	r21,r2,-8
 8015860:	1907c83a 	sub	r3,r3,r4
 8015864:	8560983a 	sll	r16,r16,r21
 8015868:	88c6d83a 	srl	r3,r17,r3
 801586c:	8d6a983a 	sll	r21,r17,r21
 8015870:	1c20b03a 	or	r16,r3,r16
 8015874:	1080fcc4 	addi	r2,r2,1011
 8015878:	00a5c83a 	sub	r18,zero,r2
 801587c:	0013883a 	mov	r9,zero
 8015880:	000b883a 	mov	r5,zero
 8015884:	003f8f06 	br	80156c4 <__divdf3+0x78>
 8015888:	3444b03a 	or	r2,r6,r17
 801588c:	1000231e 	bne	r2,zero,801591c <__divdf3+0x2d0>
 8015890:	0023883a 	mov	r17,zero
 8015894:	0029883a 	mov	r20,zero
 8015898:	01c00084 	movi	r7,2
 801589c:	003f9b06 	br	801570c <__divdf3+0xc0>
 80158a0:	3444b03a 	or	r2,r6,r17
 80158a4:	10001926 	beq	r2,zero,801590c <__divdf3+0x2c0>
 80158a8:	88014b26 	beq	r17,zero,8015dd8 <__divdf3+0x78c>
 80158ac:	8809883a 	mov	r4,r17
 80158b0:	d9400115 	stw	r5,4(sp)
 80158b4:	d9800215 	stw	r6,8(sp)
 80158b8:	da000415 	stw	r8,16(sp)
 80158bc:	da400315 	stw	r9,12(sp)
 80158c0:	80175e00 	call	80175e0 <__clzsi2>
 80158c4:	d9400117 	ldw	r5,4(sp)
 80158c8:	d9800217 	ldw	r6,8(sp)
 80158cc:	da000417 	ldw	r8,16(sp)
 80158d0:	da400317 	ldw	r9,12(sp)
 80158d4:	113ffd44 	addi	r4,r2,-11
 80158d8:	00c00704 	movi	r3,28
 80158dc:	19013a16 	blt	r3,r4,8015dc8 <__divdf3+0x77c>
 80158e0:	00c00744 	movi	r3,29
 80158e4:	153ffe04 	addi	r20,r2,-8
 80158e8:	1907c83a 	sub	r3,r3,r4
 80158ec:	8d22983a 	sll	r17,r17,r20
 80158f0:	30c6d83a 	srl	r3,r6,r3
 80158f4:	3528983a 	sll	r20,r6,r20
 80158f8:	1c62b03a 	or	r17,r3,r17
 80158fc:	1080fcc4 	addi	r2,r2,1011
 8015900:	0087c83a 	sub	r3,zero,r2
 8015904:	000f883a 	mov	r7,zero
 8015908:	003f8006 	br	801570c <__divdf3+0xc0>
 801590c:	0023883a 	mov	r17,zero
 8015910:	0029883a 	mov	r20,zero
 8015914:	01c00044 	movi	r7,1
 8015918:	003f7c06 	br	801570c <__divdf3+0xc0>
 801591c:	01c000c4 	movi	r7,3
 8015920:	003f7a06 	br	801570c <__divdf3+0xc0>
 8015924:	02400104 	movi	r9,4
 8015928:	0021883a 	mov	r16,zero
 801592c:	002b883a 	mov	r21,zero
 8015930:	01400044 	movi	r5,1
 8015934:	003f6306 	br	80156c4 <__divdf3+0x78>
 8015938:	02400304 	movi	r9,12
 801593c:	014000c4 	movi	r5,3
 8015940:	003f6006 	br	80156c4 <__divdf3+0x78>
 8015944:	04000434 	movhi	r16,16
 8015948:	0009883a 	mov	r4,zero
 801594c:	843fffc4 	addi	r16,r16,-1
 8015950:	057fffc4 	movi	r21,-1
 8015954:	0081ffc4 	movi	r2,2047
 8015958:	003f9b06 	br	80157c8 <__divdf3+0x17c>
 801595c:	00c00044 	movi	r3,1
 8015960:	1887c83a 	sub	r3,r3,r2
 8015964:	01000e04 	movi	r4,56
 8015968:	20c1530e 	bge	r4,r3,8015eb8 <__divdf3+0x86c>
 801596c:	9900004c 	andi	r4,r19,1
 8015970:	0005883a 	mov	r2,zero
 8015974:	0021883a 	mov	r16,zero
 8015978:	002b883a 	mov	r21,zero
 801597c:	003f9206 	br	80157c8 <__divdf3+0x17c>
 8015980:	8c012e36 	bltu	r17,r16,8015e3c <__divdf3+0x7f0>
 8015984:	84412c26 	beq	r16,r17,8015e38 <__divdf3+0x7ec>
 8015988:	a82f883a 	mov	r23,r21
 801598c:	18ffffc4 	addi	r3,r3,-1
 8015990:	002b883a 	mov	r21,zero
 8015994:	a004d63a 	srli	r2,r20,24
 8015998:	8822923a 	slli	r17,r17,8
 801599c:	a028923a 	slli	r20,r20,8
 80159a0:	8009883a 	mov	r4,r16
 80159a4:	88acb03a 	or	r22,r17,r2
 80159a8:	dd000015 	stw	r20,0(sp)
 80159ac:	b028d43a 	srli	r20,r22,16
 80159b0:	d8c00215 	stw	r3,8(sp)
 80159b4:	b4bfffcc 	andi	r18,r22,65535
 80159b8:	a00b883a 	mov	r5,r20
 80159bc:	800a0bc0 	call	800a0bc <__udivsi3>
 80159c0:	100b883a 	mov	r5,r2
 80159c4:	9009883a 	mov	r4,r18
 80159c8:	1023883a 	mov	r17,r2
 80159cc:	800a1780 	call	800a178 <__mulsi3>
 80159d0:	8009883a 	mov	r4,r16
 80159d4:	a00b883a 	mov	r5,r20
 80159d8:	1039883a 	mov	fp,r2
 80159dc:	800a1200 	call	800a120 <__umodsi3>
 80159e0:	1004943a 	slli	r2,r2,16
 80159e4:	b808d43a 	srli	r4,r23,16
 80159e8:	d8c00217 	ldw	r3,8(sp)
 80159ec:	2084b03a 	or	r2,r4,r2
 80159f0:	1700062e 	bgeu	r2,fp,8015a0c <__divdf3+0x3c0>
 80159f4:	1585883a 	add	r2,r2,r22
 80159f8:	893fffc4 	addi	r4,r17,-1
 80159fc:	15811d36 	bltu	r2,r22,8015e74 <__divdf3+0x828>
 8015a00:	17011c2e 	bgeu	r2,fp,8015e74 <__divdf3+0x828>
 8015a04:	8c7fff84 	addi	r17,r17,-2
 8015a08:	1585883a 	add	r2,r2,r22
 8015a0c:	1739c83a 	sub	fp,r2,fp
 8015a10:	a00b883a 	mov	r5,r20
 8015a14:	e009883a 	mov	r4,fp
 8015a18:	d8c00215 	stw	r3,8(sp)
 8015a1c:	800a0bc0 	call	800a0bc <__udivsi3>
 8015a20:	100b883a 	mov	r5,r2
 8015a24:	9009883a 	mov	r4,r18
 8015a28:	1021883a 	mov	r16,r2
 8015a2c:	800a1780 	call	800a178 <__mulsi3>
 8015a30:	a00b883a 	mov	r5,r20
 8015a34:	e009883a 	mov	r4,fp
 8015a38:	d8800415 	stw	r2,16(sp)
 8015a3c:	800a1200 	call	800a120 <__umodsi3>
 8015a40:	1004943a 	slli	r2,r2,16
 8015a44:	da000417 	ldw	r8,16(sp)
 8015a48:	bdffffcc 	andi	r23,r23,65535
 8015a4c:	b884b03a 	or	r2,r23,r2
 8015a50:	d8c00217 	ldw	r3,8(sp)
 8015a54:	1200062e 	bgeu	r2,r8,8015a70 <__divdf3+0x424>
 8015a58:	1585883a 	add	r2,r2,r22
 8015a5c:	813fffc4 	addi	r4,r16,-1
 8015a60:	15810236 	bltu	r2,r22,8015e6c <__divdf3+0x820>
 8015a64:	1201012e 	bgeu	r2,r8,8015e6c <__divdf3+0x820>
 8015a68:	843fff84 	addi	r16,r16,-2
 8015a6c:	1585883a 	add	r2,r2,r22
 8015a70:	8822943a 	slli	r17,r17,16
 8015a74:	d9800017 	ldw	r6,0(sp)
 8015a78:	1211c83a 	sub	r8,r2,r8
 8015a7c:	8c22b03a 	or	r17,r17,r16
 8015a80:	373fffcc 	andi	fp,r6,65535
 8015a84:	8abfffcc 	andi	r10,r17,65535
 8015a88:	8820d43a 	srli	r16,r17,16
 8015a8c:	5009883a 	mov	r4,r10
 8015a90:	e00b883a 	mov	r5,fp
 8015a94:	302ed43a 	srli	r23,r6,16
 8015a98:	d8c00215 	stw	r3,8(sp)
 8015a9c:	da000415 	stw	r8,16(sp)
 8015aa0:	da800115 	stw	r10,4(sp)
 8015aa4:	800a1780 	call	800a178 <__mulsi3>
 8015aa8:	800b883a 	mov	r5,r16
 8015aac:	e009883a 	mov	r4,fp
 8015ab0:	d8800515 	stw	r2,20(sp)
 8015ab4:	800a1780 	call	800a178 <__mulsi3>
 8015ab8:	8009883a 	mov	r4,r16
 8015abc:	b80b883a 	mov	r5,r23
 8015ac0:	d8800315 	stw	r2,12(sp)
 8015ac4:	800a1780 	call	800a178 <__mulsi3>
 8015ac8:	da800117 	ldw	r10,4(sp)
 8015acc:	b80b883a 	mov	r5,r23
 8015ad0:	1021883a 	mov	r16,r2
 8015ad4:	5009883a 	mov	r4,r10
 8015ad8:	800a1780 	call	800a178 <__mulsi3>
 8015adc:	d9c00517 	ldw	r7,20(sp)
 8015ae0:	da400317 	ldw	r9,12(sp)
 8015ae4:	d8c00217 	ldw	r3,8(sp)
 8015ae8:	3808d43a 	srli	r4,r7,16
 8015aec:	1245883a 	add	r2,r2,r9
 8015af0:	da000417 	ldw	r8,16(sp)
 8015af4:	2085883a 	add	r2,r4,r2
 8015af8:	1240022e 	bgeu	r2,r9,8015b04 <__divdf3+0x4b8>
 8015afc:	01000074 	movhi	r4,1
 8015b00:	8121883a 	add	r16,r16,r4
 8015b04:	1008d43a 	srli	r4,r2,16
 8015b08:	1004943a 	slli	r2,r2,16
 8015b0c:	39ffffcc 	andi	r7,r7,65535
 8015b10:	2409883a 	add	r4,r4,r16
 8015b14:	11c5883a 	add	r2,r2,r7
 8015b18:	4100bb36 	bltu	r8,r4,8015e08 <__divdf3+0x7bc>
 8015b1c:	4100d726 	beq	r8,r4,8015e7c <__divdf3+0x830>
 8015b20:	4109c83a 	sub	r4,r8,r4
 8015b24:	a8a1c83a 	sub	r16,r21,r2
 8015b28:	ac2b803a 	cmpltu	r21,r21,r16
 8015b2c:	256bc83a 	sub	r21,r4,r21
 8015b30:	b540d926 	beq	r22,r21,8015e98 <__divdf3+0x84c>
 8015b34:	a00b883a 	mov	r5,r20
 8015b38:	a809883a 	mov	r4,r21
 8015b3c:	d8c00215 	stw	r3,8(sp)
 8015b40:	800a0bc0 	call	800a0bc <__udivsi3>
 8015b44:	100b883a 	mov	r5,r2
 8015b48:	9009883a 	mov	r4,r18
 8015b4c:	d8800515 	stw	r2,20(sp)
 8015b50:	800a1780 	call	800a178 <__mulsi3>
 8015b54:	a809883a 	mov	r4,r21
 8015b58:	a00b883a 	mov	r5,r20
 8015b5c:	d8800415 	stw	r2,16(sp)
 8015b60:	800a1200 	call	800a120 <__umodsi3>
 8015b64:	1004943a 	slli	r2,r2,16
 8015b68:	8008d43a 	srli	r4,r16,16
 8015b6c:	da000417 	ldw	r8,16(sp)
 8015b70:	d8c00217 	ldw	r3,8(sp)
 8015b74:	2084b03a 	or	r2,r4,r2
 8015b78:	d9c00517 	ldw	r7,20(sp)
 8015b7c:	1200062e 	bgeu	r2,r8,8015b98 <__divdf3+0x54c>
 8015b80:	1585883a 	add	r2,r2,r22
 8015b84:	393fffc4 	addi	r4,r7,-1
 8015b88:	1580c536 	bltu	r2,r22,8015ea0 <__divdf3+0x854>
 8015b8c:	1200c42e 	bgeu	r2,r8,8015ea0 <__divdf3+0x854>
 8015b90:	39ffff84 	addi	r7,r7,-2
 8015b94:	1585883a 	add	r2,r2,r22
 8015b98:	122bc83a 	sub	r21,r2,r8
 8015b9c:	a00b883a 	mov	r5,r20
 8015ba0:	a809883a 	mov	r4,r21
 8015ba4:	d8c00215 	stw	r3,8(sp)
 8015ba8:	d9c00515 	stw	r7,20(sp)
 8015bac:	800a0bc0 	call	800a0bc <__udivsi3>
 8015bb0:	9009883a 	mov	r4,r18
 8015bb4:	100b883a 	mov	r5,r2
 8015bb8:	d8800415 	stw	r2,16(sp)
 8015bbc:	800a1780 	call	800a178 <__mulsi3>
 8015bc0:	a809883a 	mov	r4,r21
 8015bc4:	a00b883a 	mov	r5,r20
 8015bc8:	1025883a 	mov	r18,r2
 8015bcc:	800a1200 	call	800a120 <__umodsi3>
 8015bd0:	1004943a 	slli	r2,r2,16
 8015bd4:	813fffcc 	andi	r4,r16,65535
 8015bd8:	d8c00217 	ldw	r3,8(sp)
 8015bdc:	20a0b03a 	or	r16,r4,r2
 8015be0:	d9c00517 	ldw	r7,20(sp)
 8015be4:	da000417 	ldw	r8,16(sp)
 8015be8:	8480062e 	bgeu	r16,r18,8015c04 <__divdf3+0x5b8>
 8015bec:	85a1883a 	add	r16,r16,r22
 8015bf0:	40bfffc4 	addi	r2,r8,-1
 8015bf4:	8580ac36 	bltu	r16,r22,8015ea8 <__divdf3+0x85c>
 8015bf8:	8480ab2e 	bgeu	r16,r18,8015ea8 <__divdf3+0x85c>
 8015bfc:	423fff84 	addi	r8,r8,-2
 8015c00:	85a1883a 	add	r16,r16,r22
 8015c04:	3804943a 	slli	r2,r7,16
 8015c08:	84a1c83a 	sub	r16,r16,r18
 8015c0c:	e009883a 	mov	r4,fp
 8015c10:	1228b03a 	or	r20,r2,r8
 8015c14:	a1ffffcc 	andi	r7,r20,65535
 8015c18:	a024d43a 	srli	r18,r20,16
 8015c1c:	380b883a 	mov	r5,r7
 8015c20:	d8c00215 	stw	r3,8(sp)
 8015c24:	d9c00515 	stw	r7,20(sp)
 8015c28:	800a1780 	call	800a178 <__mulsi3>
 8015c2c:	900b883a 	mov	r5,r18
 8015c30:	e009883a 	mov	r4,fp
 8015c34:	102b883a 	mov	r21,r2
 8015c38:	800a1780 	call	800a178 <__mulsi3>
 8015c3c:	900b883a 	mov	r5,r18
 8015c40:	b809883a 	mov	r4,r23
 8015c44:	1039883a 	mov	fp,r2
 8015c48:	800a1780 	call	800a178 <__mulsi3>
 8015c4c:	d9c00517 	ldw	r7,20(sp)
 8015c50:	b80b883a 	mov	r5,r23
 8015c54:	1025883a 	mov	r18,r2
 8015c58:	3809883a 	mov	r4,r7
 8015c5c:	800a1780 	call	800a178 <__mulsi3>
 8015c60:	a808d43a 	srli	r4,r21,16
 8015c64:	1705883a 	add	r2,r2,fp
 8015c68:	d8c00217 	ldw	r3,8(sp)
 8015c6c:	2085883a 	add	r2,r4,r2
 8015c70:	1700022e 	bgeu	r2,fp,8015c7c <__divdf3+0x630>
 8015c74:	01000074 	movhi	r4,1
 8015c78:	9125883a 	add	r18,r18,r4
 8015c7c:	1008d43a 	srli	r4,r2,16
 8015c80:	1004943a 	slli	r2,r2,16
 8015c84:	ad7fffcc 	andi	r21,r21,65535
 8015c88:	2489883a 	add	r4,r4,r18
 8015c8c:	1545883a 	add	r2,r2,r21
 8015c90:	81003836 	bltu	r16,r4,8015d74 <__divdf3+0x728>
 8015c94:	81003626 	beq	r16,r4,8015d70 <__divdf3+0x724>
 8015c98:	a5000054 	ori	r20,r20,1
 8015c9c:	1880ffc4 	addi	r2,r3,1023
 8015ca0:	00bf2e0e 	bge	zero,r2,801595c <__divdf3+0x310>
 8015ca4:	a10001cc 	andi	r4,r20,7
 8015ca8:	20000726 	beq	r4,zero,8015cc8 <__divdf3+0x67c>
 8015cac:	a10003cc 	andi	r4,r20,15
 8015cb0:	01400104 	movi	r5,4
 8015cb4:	21400426 	beq	r4,r5,8015cc8 <__divdf3+0x67c>
 8015cb8:	a149883a 	add	r4,r20,r5
 8015cbc:	2529803a 	cmpltu	r20,r4,r20
 8015cc0:	8d23883a 	add	r17,r17,r20
 8015cc4:	2029883a 	mov	r20,r4
 8015cc8:	8900402c 	andhi	r4,r17,256
 8015ccc:	20000426 	beq	r4,zero,8015ce0 <__divdf3+0x694>
 8015cd0:	18810004 	addi	r2,r3,1024
 8015cd4:	00ffc034 	movhi	r3,65280
 8015cd8:	18ffffc4 	addi	r3,r3,-1
 8015cdc:	88e2703a 	and	r17,r17,r3
 8015ce0:	00c1ff84 	movi	r3,2046
 8015ce4:	18beb416 	blt	r3,r2,80157b8 <__divdf3+0x16c>
 8015ce8:	a028d0fa 	srli	r20,r20,3
 8015cec:	882a977a 	slli	r21,r17,29
 8015cf0:	8820927a 	slli	r16,r17,9
 8015cf4:	1081ffcc 	andi	r2,r2,2047
 8015cf8:	ad2ab03a 	or	r21,r21,r20
 8015cfc:	8020d33a 	srli	r16,r16,12
 8015d00:	9900004c 	andi	r4,r19,1
 8015d04:	003eb006 	br	80157c8 <__divdf3+0x17c>
 8015d08:	8080022c 	andhi	r2,r16,8
 8015d0c:	10001226 	beq	r2,zero,8015d58 <__divdf3+0x70c>
 8015d10:	8880022c 	andhi	r2,r17,8
 8015d14:	1000101e 	bne	r2,zero,8015d58 <__divdf3+0x70c>
 8015d18:	00800434 	movhi	r2,16
 8015d1c:	8c000234 	orhi	r16,r17,8
 8015d20:	10bfffc4 	addi	r2,r2,-1
 8015d24:	b809883a 	mov	r4,r23
 8015d28:	80a0703a 	and	r16,r16,r2
 8015d2c:	a02b883a 	mov	r21,r20
 8015d30:	003f0806 	br	8015954 <__divdf3+0x308>
 8015d34:	008000c4 	movi	r2,3
 8015d38:	3880b126 	beq	r7,r2,8016000 <__divdf3+0x9b4>
 8015d3c:	00800044 	movi	r2,1
 8015d40:	38805b1e 	bne	r7,r2,8015eb0 <__divdf3+0x864>
 8015d44:	e009883a 	mov	r4,fp
 8015d48:	0005883a 	mov	r2,zero
 8015d4c:	0021883a 	mov	r16,zero
 8015d50:	002b883a 	mov	r21,zero
 8015d54:	003e9c06 	br	80157c8 <__divdf3+0x17c>
 8015d58:	00800434 	movhi	r2,16
 8015d5c:	84000234 	orhi	r16,r16,8
 8015d60:	10bfffc4 	addi	r2,r2,-1
 8015d64:	b009883a 	mov	r4,r22
 8015d68:	80a0703a 	and	r16,r16,r2
 8015d6c:	003ef906 	br	8015954 <__divdf3+0x308>
 8015d70:	103fca26 	beq	r2,zero,8015c9c <__divdf3+0x650>
 8015d74:	b421883a 	add	r16,r22,r16
 8015d78:	a17fffc4 	addi	r5,r20,-1
 8015d7c:	8580422e 	bgeu	r16,r22,8015e88 <__divdf3+0x83c>
 8015d80:	2829883a 	mov	r20,r5
 8015d84:	813fc41e 	bne	r16,r4,8015c98 <__divdf3+0x64c>
 8015d88:	d9800017 	ldw	r6,0(sp)
 8015d8c:	30bfc21e 	bne	r6,r2,8015c98 <__divdf3+0x64c>
 8015d90:	003fc206 	br	8015c9c <__divdf3+0x650>
 8015d94:	143ff604 	addi	r16,r2,-40
 8015d98:	8c20983a 	sll	r16,r17,r16
 8015d9c:	002b883a 	mov	r21,zero
 8015da0:	003eb406 	br	8015874 <__divdf3+0x228>
 8015da4:	d9800215 	stw	r6,8(sp)
 8015da8:	d9c00515 	stw	r7,20(sp)
 8015dac:	da000415 	stw	r8,16(sp)
 8015db0:	80175e00 	call	80175e0 <__clzsi2>
 8015db4:	10800804 	addi	r2,r2,32
 8015db8:	da000417 	ldw	r8,16(sp)
 8015dbc:	d9c00517 	ldw	r7,20(sp)
 8015dc0:	d9800217 	ldw	r6,8(sp)
 8015dc4:	003ea106 	br	801584c <__divdf3+0x200>
 8015dc8:	147ff604 	addi	r17,r2,-40
 8015dcc:	3462983a 	sll	r17,r6,r17
 8015dd0:	0029883a 	mov	r20,zero
 8015dd4:	003ec906 	br	80158fc <__divdf3+0x2b0>
 8015dd8:	3009883a 	mov	r4,r6
 8015ddc:	d9400115 	stw	r5,4(sp)
 8015de0:	d9800215 	stw	r6,8(sp)
 8015de4:	da000415 	stw	r8,16(sp)
 8015de8:	da400315 	stw	r9,12(sp)
 8015dec:	80175e00 	call	80175e0 <__clzsi2>
 8015df0:	10800804 	addi	r2,r2,32
 8015df4:	da400317 	ldw	r9,12(sp)
 8015df8:	da000417 	ldw	r8,16(sp)
 8015dfc:	d9800217 	ldw	r6,8(sp)
 8015e00:	d9400117 	ldw	r5,4(sp)
 8015e04:	003eb306 	br	80158d4 <__divdf3+0x288>
 8015e08:	d9800017 	ldw	r6,0(sp)
 8015e0c:	a9ab883a 	add	r21,r21,r6
 8015e10:	a98b803a 	cmpltu	r5,r21,r6
 8015e14:	2d8b883a 	add	r5,r5,r22
 8015e18:	2a11883a 	add	r8,r5,r8
 8015e1c:	897fffc4 	addi	r5,r17,-1
 8015e20:	b2000c2e 	bgeu	r22,r8,8015e54 <__divdf3+0x808>
 8015e24:	41003f36 	bltu	r8,r4,8015f24 <__divdf3+0x8d8>
 8015e28:	22006c26 	beq	r4,r8,8015fdc <__divdf3+0x990>
 8015e2c:	4109c83a 	sub	r4,r8,r4
 8015e30:	2823883a 	mov	r17,r5
 8015e34:	003f3b06 	br	8015b24 <__divdf3+0x4d8>
 8015e38:	ad3ed336 	bltu	r21,r20,8015988 <__divdf3+0x33c>
 8015e3c:	a804d07a 	srli	r2,r21,1
 8015e40:	802e97fa 	slli	r23,r16,31
 8015e44:	a82a97fa 	slli	r21,r21,31
 8015e48:	8020d07a 	srli	r16,r16,1
 8015e4c:	b8aeb03a 	or	r23,r23,r2
 8015e50:	003ed006 	br	8015994 <__divdf3+0x348>
 8015e54:	b23ff51e 	bne	r22,r8,8015e2c <__divdf3+0x7e0>
 8015e58:	d9800017 	ldw	r6,0(sp)
 8015e5c:	a9bff12e 	bgeu	r21,r6,8015e24 <__divdf3+0x7d8>
 8015e60:	b109c83a 	sub	r4,r22,r4
 8015e64:	2823883a 	mov	r17,r5
 8015e68:	003f2e06 	br	8015b24 <__divdf3+0x4d8>
 8015e6c:	2021883a 	mov	r16,r4
 8015e70:	003eff06 	br	8015a70 <__divdf3+0x424>
 8015e74:	2023883a 	mov	r17,r4
 8015e78:	003ee406 	br	8015a0c <__divdf3+0x3c0>
 8015e7c:	a8bfe236 	bltu	r21,r2,8015e08 <__divdf3+0x7bc>
 8015e80:	0009883a 	mov	r4,zero
 8015e84:	003f2706 	br	8015b24 <__divdf3+0x4d8>
 8015e88:	81002d36 	bltu	r16,r4,8015f40 <__divdf3+0x8f4>
 8015e8c:	24005626 	beq	r4,r16,8015fe8 <__divdf3+0x99c>
 8015e90:	2829883a 	mov	r20,r5
 8015e94:	003f8006 	br	8015c98 <__divdf3+0x64c>
 8015e98:	053fffc4 	movi	r20,-1
 8015e9c:	003f7f06 	br	8015c9c <__divdf3+0x650>
 8015ea0:	200f883a 	mov	r7,r4
 8015ea4:	003f3c06 	br	8015b98 <__divdf3+0x54c>
 8015ea8:	1011883a 	mov	r8,r2
 8015eac:	003f5506 	br	8015c04 <__divdf3+0x5b8>
 8015eb0:	e027883a 	mov	r19,fp
 8015eb4:	003f7906 	br	8015c9c <__divdf3+0x650>
 8015eb8:	010007c4 	movi	r4,31
 8015ebc:	20c02816 	blt	r4,r3,8015f60 <__divdf3+0x914>
 8015ec0:	00800804 	movi	r2,32
 8015ec4:	10c5c83a 	sub	r2,r2,r3
 8015ec8:	888a983a 	sll	r5,r17,r2
 8015ecc:	a0c8d83a 	srl	r4,r20,r3
 8015ed0:	a084983a 	sll	r2,r20,r2
 8015ed4:	88e2d83a 	srl	r17,r17,r3
 8015ed8:	2906b03a 	or	r3,r5,r4
 8015edc:	1004c03a 	cmpne	r2,r2,zero
 8015ee0:	1886b03a 	or	r3,r3,r2
 8015ee4:	188001cc 	andi	r2,r3,7
 8015ee8:	10000726 	beq	r2,zero,8015f08 <__divdf3+0x8bc>
 8015eec:	188003cc 	andi	r2,r3,15
 8015ef0:	01000104 	movi	r4,4
 8015ef4:	11000426 	beq	r2,r4,8015f08 <__divdf3+0x8bc>
 8015ef8:	1805883a 	mov	r2,r3
 8015efc:	10c00104 	addi	r3,r2,4
 8015f00:	1885803a 	cmpltu	r2,r3,r2
 8015f04:	88a3883a 	add	r17,r17,r2
 8015f08:	8880202c 	andhi	r2,r17,128
 8015f0c:	10002926 	beq	r2,zero,8015fb4 <__divdf3+0x968>
 8015f10:	9900004c 	andi	r4,r19,1
 8015f14:	00800044 	movi	r2,1
 8015f18:	0021883a 	mov	r16,zero
 8015f1c:	002b883a 	mov	r21,zero
 8015f20:	003e2906 	br	80157c8 <__divdf3+0x17c>
 8015f24:	d9800017 	ldw	r6,0(sp)
 8015f28:	8c7fff84 	addi	r17,r17,-2
 8015f2c:	a9ab883a 	add	r21,r21,r6
 8015f30:	a98b803a 	cmpltu	r5,r21,r6
 8015f34:	2d8b883a 	add	r5,r5,r22
 8015f38:	2a11883a 	add	r8,r5,r8
 8015f3c:	003ef806 	br	8015b20 <__divdf3+0x4d4>
 8015f40:	d9800017 	ldw	r6,0(sp)
 8015f44:	318f883a 	add	r7,r6,r6
 8015f48:	398b803a 	cmpltu	r5,r7,r6
 8015f4c:	2d8d883a 	add	r6,r5,r22
 8015f50:	81a1883a 	add	r16,r16,r6
 8015f54:	a17fff84 	addi	r5,r20,-2
 8015f58:	d9c00015 	stw	r7,0(sp)
 8015f5c:	003f8806 	br	8015d80 <__divdf3+0x734>
 8015f60:	013ff844 	movi	r4,-31
 8015f64:	2085c83a 	sub	r2,r4,r2
 8015f68:	8888d83a 	srl	r4,r17,r2
 8015f6c:	00800804 	movi	r2,32
 8015f70:	18802126 	beq	r3,r2,8015ff8 <__divdf3+0x9ac>
 8015f74:	04001004 	movi	r16,64
 8015f78:	80c7c83a 	sub	r3,r16,r3
 8015f7c:	88e0983a 	sll	r16,r17,r3
 8015f80:	8504b03a 	or	r2,r16,r20
 8015f84:	1004c03a 	cmpne	r2,r2,zero
 8015f88:	2084b03a 	or	r2,r4,r2
 8015f8c:	144001cc 	andi	r17,r2,7
 8015f90:	88000d1e 	bne	r17,zero,8015fc8 <__divdf3+0x97c>
 8015f94:	0021883a 	mov	r16,zero
 8015f98:	102ad0fa 	srli	r21,r2,3
 8015f9c:	9900004c 	andi	r4,r19,1
 8015fa0:	0005883a 	mov	r2,zero
 8015fa4:	ac6ab03a 	or	r21,r21,r17
 8015fa8:	003e0706 	br	80157c8 <__divdf3+0x17c>
 8015fac:	1007883a 	mov	r3,r2
 8015fb0:	0023883a 	mov	r17,zero
 8015fb4:	8820927a 	slli	r16,r17,9
 8015fb8:	1805883a 	mov	r2,r3
 8015fbc:	8822977a 	slli	r17,r17,29
 8015fc0:	8020d33a 	srli	r16,r16,12
 8015fc4:	003ff406 	br	8015f98 <__divdf3+0x94c>
 8015fc8:	10c003cc 	andi	r3,r2,15
 8015fcc:	01000104 	movi	r4,4
 8015fd0:	193ff626 	beq	r3,r4,8015fac <__divdf3+0x960>
 8015fd4:	0023883a 	mov	r17,zero
 8015fd8:	003fc806 	br	8015efc <__divdf3+0x8b0>
 8015fdc:	a8bfd136 	bltu	r21,r2,8015f24 <__divdf3+0x8d8>
 8015fe0:	2823883a 	mov	r17,r5
 8015fe4:	003fa606 	br	8015e80 <__divdf3+0x834>
 8015fe8:	d9800017 	ldw	r6,0(sp)
 8015fec:	30bfd436 	bltu	r6,r2,8015f40 <__divdf3+0x8f4>
 8015ff0:	2829883a 	mov	r20,r5
 8015ff4:	003f6406 	br	8015d88 <__divdf3+0x73c>
 8015ff8:	0021883a 	mov	r16,zero
 8015ffc:	003fe006 	br	8015f80 <__divdf3+0x934>
 8016000:	00800434 	movhi	r2,16
 8016004:	8c000234 	orhi	r16,r17,8
 8016008:	10bfffc4 	addi	r2,r2,-1
 801600c:	e009883a 	mov	r4,fp
 8016010:	80a0703a 	and	r16,r16,r2
 8016014:	a02b883a 	mov	r21,r20
 8016018:	003e4e06 	br	8015954 <__divdf3+0x308>

0801601c <__eqdf2>:
 801601c:	2804d53a 	srli	r2,r5,20
 8016020:	3806d53a 	srli	r3,r7,20
 8016024:	02000434 	movhi	r8,16
 8016028:	423fffc4 	addi	r8,r8,-1
 801602c:	1081ffcc 	andi	r2,r2,2047
 8016030:	0281ffc4 	movi	r10,2047
 8016034:	2a12703a 	and	r9,r5,r8
 8016038:	18c1ffcc 	andi	r3,r3,2047
 801603c:	3a10703a 	and	r8,r7,r8
 8016040:	280ad7fa 	srli	r5,r5,31
 8016044:	380ed7fa 	srli	r7,r7,31
 8016048:	12801026 	beq	r2,r10,801608c <__eqdf2+0x70>
 801604c:	0281ffc4 	movi	r10,2047
 8016050:	1a800a26 	beq	r3,r10,801607c <__eqdf2+0x60>
 8016054:	10c00226 	beq	r2,r3,8016060 <__eqdf2+0x44>
 8016058:	00800044 	movi	r2,1
 801605c:	f800283a 	ret
 8016060:	4a3ffd1e 	bne	r9,r8,8016058 <__eqdf2+0x3c>
 8016064:	21bffc1e 	bne	r4,r6,8016058 <__eqdf2+0x3c>
 8016068:	29c00c26 	beq	r5,r7,801609c <__eqdf2+0x80>
 801606c:	103ffa1e 	bne	r2,zero,8016058 <__eqdf2+0x3c>
 8016070:	2244b03a 	or	r2,r4,r9
 8016074:	1004c03a 	cmpne	r2,r2,zero
 8016078:	f800283a 	ret
 801607c:	3214b03a 	or	r10,r6,r8
 8016080:	503ff426 	beq	r10,zero,8016054 <__eqdf2+0x38>
 8016084:	00800044 	movi	r2,1
 8016088:	f800283a 	ret
 801608c:	2254b03a 	or	r10,r4,r9
 8016090:	503fee26 	beq	r10,zero,801604c <__eqdf2+0x30>
 8016094:	00800044 	movi	r2,1
 8016098:	f800283a 	ret
 801609c:	0005883a 	mov	r2,zero
 80160a0:	f800283a 	ret

080160a4 <__gedf2>:
 80160a4:	2804d53a 	srli	r2,r5,20
 80160a8:	3806d53a 	srli	r3,r7,20
 80160ac:	02000434 	movhi	r8,16
 80160b0:	423fffc4 	addi	r8,r8,-1
 80160b4:	1081ffcc 	andi	r2,r2,2047
 80160b8:	0241ffc4 	movi	r9,2047
 80160bc:	2a14703a 	and	r10,r5,r8
 80160c0:	18c1ffcc 	andi	r3,r3,2047
 80160c4:	3a10703a 	and	r8,r7,r8
 80160c8:	280ad7fa 	srli	r5,r5,31
 80160cc:	380ed7fa 	srli	r7,r7,31
 80160d0:	12401d26 	beq	r2,r9,8016148 <__gedf2+0xa4>
 80160d4:	0241ffc4 	movi	r9,2047
 80160d8:	1a401226 	beq	r3,r9,8016124 <__gedf2+0x80>
 80160dc:	1000081e 	bne	r2,zero,8016100 <__gedf2+0x5c>
 80160e0:	2296b03a 	or	r11,r4,r10
 80160e4:	5813003a 	cmpeq	r9,r11,zero
 80160e8:	1800091e 	bne	r3,zero,8016110 <__gedf2+0x6c>
 80160ec:	3218b03a 	or	r12,r6,r8
 80160f0:	6000071e 	bne	r12,zero,8016110 <__gedf2+0x6c>
 80160f4:	0005883a 	mov	r2,zero
 80160f8:	5800101e 	bne	r11,zero,801613c <__gedf2+0x98>
 80160fc:	f800283a 	ret
 8016100:	18000c1e 	bne	r3,zero,8016134 <__gedf2+0x90>
 8016104:	3212b03a 	or	r9,r6,r8
 8016108:	48000c26 	beq	r9,zero,801613c <__gedf2+0x98>
 801610c:	0013883a 	mov	r9,zero
 8016110:	39c03fcc 	andi	r7,r7,255
 8016114:	48000826 	beq	r9,zero,8016138 <__gedf2+0x94>
 8016118:	38000926 	beq	r7,zero,8016140 <__gedf2+0x9c>
 801611c:	00800044 	movi	r2,1
 8016120:	f800283a 	ret
 8016124:	3212b03a 	or	r9,r6,r8
 8016128:	483fec26 	beq	r9,zero,80160dc <__gedf2+0x38>
 801612c:	00bfff84 	movi	r2,-2
 8016130:	f800283a 	ret
 8016134:	39c03fcc 	andi	r7,r7,255
 8016138:	29c00626 	beq	r5,r7,8016154 <__gedf2+0xb0>
 801613c:	283ff726 	beq	r5,zero,801611c <__gedf2+0x78>
 8016140:	00bfffc4 	movi	r2,-1
 8016144:	f800283a 	ret
 8016148:	2292b03a 	or	r9,r4,r10
 801614c:	483fe126 	beq	r9,zero,80160d4 <__gedf2+0x30>
 8016150:	003ff606 	br	801612c <__gedf2+0x88>
 8016154:	18bff916 	blt	r3,r2,801613c <__gedf2+0x98>
 8016158:	10c00316 	blt	r2,r3,8016168 <__gedf2+0xc4>
 801615c:	42bff736 	bltu	r8,r10,801613c <__gedf2+0x98>
 8016160:	52000326 	beq	r10,r8,8016170 <__gedf2+0xcc>
 8016164:	5200042e 	bgeu	r10,r8,8016178 <__gedf2+0xd4>
 8016168:	283fec1e 	bne	r5,zero,801611c <__gedf2+0x78>
 801616c:	003ff406 	br	8016140 <__gedf2+0x9c>
 8016170:	313ff236 	bltu	r6,r4,801613c <__gedf2+0x98>
 8016174:	21bffc36 	bltu	r4,r6,8016168 <__gedf2+0xc4>
 8016178:	0005883a 	mov	r2,zero
 801617c:	f800283a 	ret

08016180 <__ledf2>:
 8016180:	2804d53a 	srli	r2,r5,20
 8016184:	3810d53a 	srli	r8,r7,20
 8016188:	00c00434 	movhi	r3,16
 801618c:	18ffffc4 	addi	r3,r3,-1
 8016190:	1081ffcc 	andi	r2,r2,2047
 8016194:	0241ffc4 	movi	r9,2047
 8016198:	28d4703a 	and	r10,r5,r3
 801619c:	4201ffcc 	andi	r8,r8,2047
 80161a0:	38c6703a 	and	r3,r7,r3
 80161a4:	280ad7fa 	srli	r5,r5,31
 80161a8:	380ed7fa 	srli	r7,r7,31
 80161ac:	12401f26 	beq	r2,r9,801622c <__ledf2+0xac>
 80161b0:	0241ffc4 	movi	r9,2047
 80161b4:	42401426 	beq	r8,r9,8016208 <__ledf2+0x88>
 80161b8:	1000091e 	bne	r2,zero,80161e0 <__ledf2+0x60>
 80161bc:	2296b03a 	or	r11,r4,r10
 80161c0:	5813003a 	cmpeq	r9,r11,zero
 80161c4:	29403fcc 	andi	r5,r5,255
 80161c8:	40000a1e 	bne	r8,zero,80161f4 <__ledf2+0x74>
 80161cc:	30d8b03a 	or	r12,r6,r3
 80161d0:	6000081e 	bne	r12,zero,80161f4 <__ledf2+0x74>
 80161d4:	0005883a 	mov	r2,zero
 80161d8:	5800111e 	bne	r11,zero,8016220 <__ledf2+0xa0>
 80161dc:	f800283a 	ret
 80161e0:	29403fcc 	andi	r5,r5,255
 80161e4:	40000c1e 	bne	r8,zero,8016218 <__ledf2+0x98>
 80161e8:	30d2b03a 	or	r9,r6,r3
 80161ec:	48000c26 	beq	r9,zero,8016220 <__ledf2+0xa0>
 80161f0:	0013883a 	mov	r9,zero
 80161f4:	39c03fcc 	andi	r7,r7,255
 80161f8:	48000826 	beq	r9,zero,801621c <__ledf2+0x9c>
 80161fc:	38001126 	beq	r7,zero,8016244 <__ledf2+0xc4>
 8016200:	00800044 	movi	r2,1
 8016204:	f800283a 	ret
 8016208:	30d2b03a 	or	r9,r6,r3
 801620c:	483fea26 	beq	r9,zero,80161b8 <__ledf2+0x38>
 8016210:	00800084 	movi	r2,2
 8016214:	f800283a 	ret
 8016218:	39c03fcc 	andi	r7,r7,255
 801621c:	39400726 	beq	r7,r5,801623c <__ledf2+0xbc>
 8016220:	2800081e 	bne	r5,zero,8016244 <__ledf2+0xc4>
 8016224:	00800044 	movi	r2,1
 8016228:	f800283a 	ret
 801622c:	2292b03a 	or	r9,r4,r10
 8016230:	483fdf26 	beq	r9,zero,80161b0 <__ledf2+0x30>
 8016234:	00800084 	movi	r2,2
 8016238:	f800283a 	ret
 801623c:	4080030e 	bge	r8,r2,801624c <__ledf2+0xcc>
 8016240:	383fef26 	beq	r7,zero,8016200 <__ledf2+0x80>
 8016244:	00bfffc4 	movi	r2,-1
 8016248:	f800283a 	ret
 801624c:	123feb16 	blt	r2,r8,80161fc <__ledf2+0x7c>
 8016250:	1abff336 	bltu	r3,r10,8016220 <__ledf2+0xa0>
 8016254:	50c00326 	beq	r10,r3,8016264 <__ledf2+0xe4>
 8016258:	50c0042e 	bgeu	r10,r3,801626c <__ledf2+0xec>
 801625c:	283fe81e 	bne	r5,zero,8016200 <__ledf2+0x80>
 8016260:	003ff806 	br	8016244 <__ledf2+0xc4>
 8016264:	313fee36 	bltu	r6,r4,8016220 <__ledf2+0xa0>
 8016268:	21bffc36 	bltu	r4,r6,801625c <__ledf2+0xdc>
 801626c:	0005883a 	mov	r2,zero
 8016270:	f800283a 	ret

08016274 <__muldf3>:
 8016274:	deffee04 	addi	sp,sp,-72
 8016278:	dd000c15 	stw	r20,48(sp)
 801627c:	2828d53a 	srli	r20,r5,20
 8016280:	ddc00f15 	stw	r23,60(sp)
 8016284:	282ed7fa 	srli	r23,r5,31
 8016288:	dc000815 	stw	r16,32(sp)
 801628c:	04000434 	movhi	r16,16
 8016290:	dcc00b15 	stw	r19,44(sp)
 8016294:	843fffc4 	addi	r16,r16,-1
 8016298:	dfc01115 	stw	ra,68(sp)
 801629c:	df001015 	stw	fp,64(sp)
 80162a0:	dd800e15 	stw	r22,56(sp)
 80162a4:	dd400d15 	stw	r21,52(sp)
 80162a8:	dc800a15 	stw	r18,40(sp)
 80162ac:	dc400915 	stw	r17,36(sp)
 80162b0:	a501ffcc 	andi	r20,r20,2047
 80162b4:	2c20703a 	and	r16,r5,r16
 80162b8:	b827883a 	mov	r19,r23
 80162bc:	ba403fcc 	andi	r9,r23,255
 80162c0:	a0006026 	beq	r20,zero,8016444 <__muldf3+0x1d0>
 80162c4:	0081ffc4 	movi	r2,2047
 80162c8:	202d883a 	mov	r22,r4
 80162cc:	a0803626 	beq	r20,r2,80163a8 <__muldf3+0x134>
 80162d0:	84000434 	orhi	r16,r16,16
 80162d4:	200ad77a 	srli	r5,r4,29
 80162d8:	800490fa 	slli	r2,r16,3
 80162dc:	202c90fa 	slli	r22,r4,3
 80162e0:	a53f0044 	addi	r20,r20,-1023
 80162e4:	28a0b03a 	or	r16,r5,r2
 80162e8:	002b883a 	mov	r21,zero
 80162ec:	000b883a 	mov	r5,zero
 80162f0:	3804d53a 	srli	r2,r7,20
 80162f4:	3838d7fa 	srli	fp,r7,31
 80162f8:	04400434 	movhi	r17,16
 80162fc:	8c7fffc4 	addi	r17,r17,-1
 8016300:	1081ffcc 	andi	r2,r2,2047
 8016304:	3025883a 	mov	r18,r6
 8016308:	3c62703a 	and	r17,r7,r17
 801630c:	e2803fcc 	andi	r10,fp,255
 8016310:	10006d26 	beq	r2,zero,80164c8 <__muldf3+0x254>
 8016314:	00c1ffc4 	movi	r3,2047
 8016318:	10c06526 	beq	r2,r3,80164b0 <__muldf3+0x23c>
 801631c:	8c400434 	orhi	r17,r17,16
 8016320:	300ed77a 	srli	r7,r6,29
 8016324:	880690fa 	slli	r3,r17,3
 8016328:	302490fa 	slli	r18,r6,3
 801632c:	10bf0044 	addi	r2,r2,-1023
 8016330:	38e2b03a 	or	r17,r7,r3
 8016334:	000f883a 	mov	r7,zero
 8016338:	a087883a 	add	r3,r20,r2
 801633c:	010003c4 	movi	r4,15
 8016340:	3d44b03a 	or	r2,r7,r21
 8016344:	e5ccf03a 	xor	r6,fp,r23
 8016348:	1a000044 	addi	r8,r3,1
 801634c:	20809b36 	bltu	r4,r2,80165bc <__muldf3+0x348>
 8016350:	100490ba 	slli	r2,r2,2
 8016354:	01020074 	movhi	r4,2049
 8016358:	2118da04 	addi	r4,r4,25448
 801635c:	1105883a 	add	r2,r2,r4
 8016360:	10800017 	ldw	r2,0(r2)
 8016364:	1000683a 	jmp	r2
 8016368:	080165bc 	xorhi	zero,at,1430
 801636c:	080163c8 	cmpgei	zero,at,1423
 8016370:	080163c8 	cmpgei	zero,at,1423
 8016374:	080163c4 	addi	zero,at,1423
 8016378:	08016598 	cmpnei	zero,at,1430
 801637c:	08016598 	cmpnei	zero,at,1430
 8016380:	08016580 	call	801658 <__alt_mem_onchip_memory2_0+0x801658>
 8016384:	080163c4 	addi	zero,at,1423
 8016388:	08016598 	cmpnei	zero,at,1430
 801638c:	08016580 	call	801658 <__alt_mem_onchip_memory2_0+0x801658>
 8016390:	08016598 	cmpnei	zero,at,1430
 8016394:	080163c4 	addi	zero,at,1423
 8016398:	080165a8 	cmpgeui	zero,at,1430
 801639c:	080165a8 	cmpgeui	zero,at,1430
 80163a0:	080165a8 	cmpgeui	zero,at,1430
 80163a4:	08016908 	cmpgei	zero,at,1444
 80163a8:	2404b03a 	or	r2,r4,r16
 80163ac:	1000711e 	bne	r2,zero,8016574 <__muldf3+0x300>
 80163b0:	05400204 	movi	r21,8
 80163b4:	0021883a 	mov	r16,zero
 80163b8:	002d883a 	mov	r22,zero
 80163bc:	01400084 	movi	r5,2
 80163c0:	003fcb06 	br	80162f0 <__muldf3+0x7c>
 80163c4:	500d883a 	mov	r6,r10
 80163c8:	00800084 	movi	r2,2
 80163cc:	38805926 	beq	r7,r2,8016534 <__muldf3+0x2c0>
 80163d0:	008000c4 	movi	r2,3
 80163d4:	3881bb26 	beq	r7,r2,8016ac4 <__muldf3+0x850>
 80163d8:	00800044 	movi	r2,1
 80163dc:	3881961e 	bne	r7,r2,8016a38 <__muldf3+0x7c4>
 80163e0:	3027883a 	mov	r19,r6
 80163e4:	0005883a 	mov	r2,zero
 80163e8:	0021883a 	mov	r16,zero
 80163ec:	002d883a 	mov	r22,zero
 80163f0:	1004953a 	slli	r2,r2,20
 80163f4:	98c03fcc 	andi	r3,r19,255
 80163f8:	04400434 	movhi	r17,16
 80163fc:	8c7fffc4 	addi	r17,r17,-1
 8016400:	180697fa 	slli	r3,r3,31
 8016404:	8460703a 	and	r16,r16,r17
 8016408:	80a0b03a 	or	r16,r16,r2
 801640c:	80c6b03a 	or	r3,r16,r3
 8016410:	b005883a 	mov	r2,r22
 8016414:	dfc01117 	ldw	ra,68(sp)
 8016418:	df001017 	ldw	fp,64(sp)
 801641c:	ddc00f17 	ldw	r23,60(sp)
 8016420:	dd800e17 	ldw	r22,56(sp)
 8016424:	dd400d17 	ldw	r21,52(sp)
 8016428:	dd000c17 	ldw	r20,48(sp)
 801642c:	dcc00b17 	ldw	r19,44(sp)
 8016430:	dc800a17 	ldw	r18,40(sp)
 8016434:	dc400917 	ldw	r17,36(sp)
 8016438:	dc000817 	ldw	r16,32(sp)
 801643c:	dec01204 	addi	sp,sp,72
 8016440:	f800283a 	ret
 8016444:	2404b03a 	or	r2,r4,r16
 8016448:	202b883a 	mov	r21,r4
 801644c:	10004426 	beq	r2,zero,8016560 <__muldf3+0x2ec>
 8016450:	80015126 	beq	r16,zero,8016998 <__muldf3+0x724>
 8016454:	8009883a 	mov	r4,r16
 8016458:	d9800715 	stw	r6,28(sp)
 801645c:	d9c00215 	stw	r7,8(sp)
 8016460:	da400415 	stw	r9,16(sp)
 8016464:	80175e00 	call	80175e0 <__clzsi2>
 8016468:	d9800717 	ldw	r6,28(sp)
 801646c:	d9c00217 	ldw	r7,8(sp)
 8016470:	da400417 	ldw	r9,16(sp)
 8016474:	113ffd44 	addi	r4,r2,-11
 8016478:	00c00704 	movi	r3,28
 801647c:	19014216 	blt	r3,r4,8016988 <__muldf3+0x714>
 8016480:	00c00744 	movi	r3,29
 8016484:	15bffe04 	addi	r22,r2,-8
 8016488:	1907c83a 	sub	r3,r3,r4
 801648c:	85a0983a 	sll	r16,r16,r22
 8016490:	a8c6d83a 	srl	r3,r21,r3
 8016494:	adac983a 	sll	r22,r21,r22
 8016498:	1c20b03a 	or	r16,r3,r16
 801649c:	1080fcc4 	addi	r2,r2,1011
 80164a0:	00a9c83a 	sub	r20,zero,r2
 80164a4:	002b883a 	mov	r21,zero
 80164a8:	000b883a 	mov	r5,zero
 80164ac:	003f9006 	br	80162f0 <__muldf3+0x7c>
 80164b0:	3446b03a 	or	r3,r6,r17
 80164b4:	1800281e 	bne	r3,zero,8016558 <__muldf3+0x2e4>
 80164b8:	0023883a 	mov	r17,zero
 80164bc:	0025883a 	mov	r18,zero
 80164c0:	01c00084 	movi	r7,2
 80164c4:	003f9c06 	br	8016338 <__muldf3+0xc4>
 80164c8:	3446b03a 	or	r3,r6,r17
 80164cc:	18001e26 	beq	r3,zero,8016548 <__muldf3+0x2d4>
 80164d0:	88012126 	beq	r17,zero,8016958 <__muldf3+0x6e4>
 80164d4:	8809883a 	mov	r4,r17
 80164d8:	d9400215 	stw	r5,8(sp)
 80164dc:	d9800715 	stw	r6,28(sp)
 80164e0:	da400415 	stw	r9,16(sp)
 80164e4:	da800315 	stw	r10,12(sp)
 80164e8:	80175e00 	call	80175e0 <__clzsi2>
 80164ec:	d9400217 	ldw	r5,8(sp)
 80164f0:	d9800717 	ldw	r6,28(sp)
 80164f4:	da400417 	ldw	r9,16(sp)
 80164f8:	da800317 	ldw	r10,12(sp)
 80164fc:	113ffd44 	addi	r4,r2,-11
 8016500:	00c00704 	movi	r3,28
 8016504:	19011016 	blt	r3,r4,8016948 <__muldf3+0x6d4>
 8016508:	00c00744 	movi	r3,29
 801650c:	14bffe04 	addi	r18,r2,-8
 8016510:	1907c83a 	sub	r3,r3,r4
 8016514:	8ca2983a 	sll	r17,r17,r18
 8016518:	30c6d83a 	srl	r3,r6,r3
 801651c:	34a4983a 	sll	r18,r6,r18
 8016520:	1c62b03a 	or	r17,r3,r17
 8016524:	1080fcc4 	addi	r2,r2,1011
 8016528:	0085c83a 	sub	r2,zero,r2
 801652c:	000f883a 	mov	r7,zero
 8016530:	003f8106 	br	8016338 <__muldf3+0xc4>
 8016534:	3027883a 	mov	r19,r6
 8016538:	0081ffc4 	movi	r2,2047
 801653c:	0021883a 	mov	r16,zero
 8016540:	002d883a 	mov	r22,zero
 8016544:	003faa06 	br	80163f0 <__muldf3+0x17c>
 8016548:	0023883a 	mov	r17,zero
 801654c:	0025883a 	mov	r18,zero
 8016550:	01c00044 	movi	r7,1
 8016554:	003f7806 	br	8016338 <__muldf3+0xc4>
 8016558:	01c000c4 	movi	r7,3
 801655c:	003f7606 	br	8016338 <__muldf3+0xc4>
 8016560:	05400104 	movi	r21,4
 8016564:	0021883a 	mov	r16,zero
 8016568:	002d883a 	mov	r22,zero
 801656c:	01400044 	movi	r5,1
 8016570:	003f5f06 	br	80162f0 <__muldf3+0x7c>
 8016574:	05400304 	movi	r21,12
 8016578:	014000c4 	movi	r5,3
 801657c:	003f5c06 	br	80162f0 <__muldf3+0x7c>
 8016580:	04000434 	movhi	r16,16
 8016584:	0027883a 	mov	r19,zero
 8016588:	843fffc4 	addi	r16,r16,-1
 801658c:	05bfffc4 	movi	r22,-1
 8016590:	0081ffc4 	movi	r2,2047
 8016594:	003f9606 	br	80163f0 <__muldf3+0x17c>
 8016598:	8023883a 	mov	r17,r16
 801659c:	b025883a 	mov	r18,r22
 80165a0:	280f883a 	mov	r7,r5
 80165a4:	003f8806 	br	80163c8 <__muldf3+0x154>
 80165a8:	8023883a 	mov	r17,r16
 80165ac:	b025883a 	mov	r18,r22
 80165b0:	480d883a 	mov	r6,r9
 80165b4:	280f883a 	mov	r7,r5
 80165b8:	003f8306 	br	80163c8 <__muldf3+0x154>
 80165bc:	b026d43a 	srli	r19,r22,16
 80165c0:	902ed43a 	srli	r23,r18,16
 80165c4:	b5bfffcc 	andi	r22,r22,65535
 80165c8:	94bfffcc 	andi	r18,r18,65535
 80165cc:	b00b883a 	mov	r5,r22
 80165d0:	9009883a 	mov	r4,r18
 80165d4:	d8c00515 	stw	r3,20(sp)
 80165d8:	d9800715 	stw	r6,28(sp)
 80165dc:	da000615 	stw	r8,24(sp)
 80165e0:	800a1780 	call	800a178 <__mulsi3>
 80165e4:	980b883a 	mov	r5,r19
 80165e8:	9009883a 	mov	r4,r18
 80165ec:	1029883a 	mov	r20,r2
 80165f0:	800a1780 	call	800a178 <__mulsi3>
 80165f4:	b80b883a 	mov	r5,r23
 80165f8:	9809883a 	mov	r4,r19
 80165fc:	102b883a 	mov	r21,r2
 8016600:	800a1780 	call	800a178 <__mulsi3>
 8016604:	b809883a 	mov	r4,r23
 8016608:	b00b883a 	mov	r5,r22
 801660c:	1039883a 	mov	fp,r2
 8016610:	800a1780 	call	800a178 <__mulsi3>
 8016614:	a008d43a 	srli	r4,r20,16
 8016618:	1545883a 	add	r2,r2,r21
 801661c:	d8c00517 	ldw	r3,20(sp)
 8016620:	2085883a 	add	r2,r4,r2
 8016624:	d9800717 	ldw	r6,28(sp)
 8016628:	da000617 	ldw	r8,24(sp)
 801662c:	1540022e 	bgeu	r2,r21,8016638 <__muldf3+0x3c4>
 8016630:	01000074 	movhi	r4,1
 8016634:	e139883a 	add	fp,fp,r4
 8016638:	100e943a 	slli	r7,r2,16
 801663c:	1004d43a 	srli	r2,r2,16
 8016640:	882ad43a 	srli	r21,r17,16
 8016644:	a53fffcc 	andi	r20,r20,65535
 8016648:	8c7fffcc 	andi	r17,r17,65535
 801664c:	3d29883a 	add	r20,r7,r20
 8016650:	b00b883a 	mov	r5,r22
 8016654:	8809883a 	mov	r4,r17
 8016658:	d8c00515 	stw	r3,20(sp)
 801665c:	d9800715 	stw	r6,28(sp)
 8016660:	da000615 	stw	r8,24(sp)
 8016664:	dd000115 	stw	r20,4(sp)
 8016668:	d8800015 	stw	r2,0(sp)
 801666c:	800a1780 	call	800a178 <__mulsi3>
 8016670:	980b883a 	mov	r5,r19
 8016674:	8809883a 	mov	r4,r17
 8016678:	d8800215 	stw	r2,8(sp)
 801667c:	800a1780 	call	800a178 <__mulsi3>
 8016680:	9809883a 	mov	r4,r19
 8016684:	a80b883a 	mov	r5,r21
 8016688:	1029883a 	mov	r20,r2
 801668c:	800a1780 	call	800a178 <__mulsi3>
 8016690:	b00b883a 	mov	r5,r22
 8016694:	a809883a 	mov	r4,r21
 8016698:	d8800415 	stw	r2,16(sp)
 801669c:	800a1780 	call	800a178 <__mulsi3>
 80166a0:	d9c00217 	ldw	r7,8(sp)
 80166a4:	1505883a 	add	r2,r2,r20
 80166a8:	d8c00517 	ldw	r3,20(sp)
 80166ac:	3826d43a 	srli	r19,r7,16
 80166b0:	d9800717 	ldw	r6,28(sp)
 80166b4:	da000617 	ldw	r8,24(sp)
 80166b8:	9885883a 	add	r2,r19,r2
 80166bc:	da400417 	ldw	r9,16(sp)
 80166c0:	1500022e 	bgeu	r2,r20,80166cc <__muldf3+0x458>
 80166c4:	01000074 	movhi	r4,1
 80166c8:	4913883a 	add	r9,r9,r4
 80166cc:	1028d43a 	srli	r20,r2,16
 80166d0:	1004943a 	slli	r2,r2,16
 80166d4:	802cd43a 	srli	r22,r16,16
 80166d8:	843fffcc 	andi	r16,r16,65535
 80166dc:	3cffffcc 	andi	r19,r7,65535
 80166e0:	9009883a 	mov	r4,r18
 80166e4:	800b883a 	mov	r5,r16
 80166e8:	a269883a 	add	r20,r20,r9
 80166ec:	d8c00515 	stw	r3,20(sp)
 80166f0:	d9800715 	stw	r6,28(sp)
 80166f4:	da000615 	stw	r8,24(sp)
 80166f8:	14e7883a 	add	r19,r2,r19
 80166fc:	800a1780 	call	800a178 <__mulsi3>
 8016700:	9009883a 	mov	r4,r18
 8016704:	b00b883a 	mov	r5,r22
 8016708:	d8800315 	stw	r2,12(sp)
 801670c:	800a1780 	call	800a178 <__mulsi3>
 8016710:	b809883a 	mov	r4,r23
 8016714:	b00b883a 	mov	r5,r22
 8016718:	d8800215 	stw	r2,8(sp)
 801671c:	800a1780 	call	800a178 <__mulsi3>
 8016720:	b80b883a 	mov	r5,r23
 8016724:	8009883a 	mov	r4,r16
 8016728:	d8800415 	stw	r2,16(sp)
 801672c:	800a1780 	call	800a178 <__mulsi3>
 8016730:	da800317 	ldw	r10,12(sp)
 8016734:	d9c00217 	ldw	r7,8(sp)
 8016738:	d9000017 	ldw	r4,0(sp)
 801673c:	502ed43a 	srli	r23,r10,16
 8016740:	11c5883a 	add	r2,r2,r7
 8016744:	24e5883a 	add	r18,r4,r19
 8016748:	b885883a 	add	r2,r23,r2
 801674c:	d8c00517 	ldw	r3,20(sp)
 8016750:	d9800717 	ldw	r6,28(sp)
 8016754:	da000617 	ldw	r8,24(sp)
 8016758:	da400417 	ldw	r9,16(sp)
 801675c:	11c0022e 	bgeu	r2,r7,8016768 <__muldf3+0x4f4>
 8016760:	01000074 	movhi	r4,1
 8016764:	4913883a 	add	r9,r9,r4
 8016768:	100ed43a 	srli	r7,r2,16
 801676c:	1004943a 	slli	r2,r2,16
 8016770:	55ffffcc 	andi	r23,r10,65535
 8016774:	3a53883a 	add	r9,r7,r9
 8016778:	8809883a 	mov	r4,r17
 801677c:	800b883a 	mov	r5,r16
 8016780:	d8c00515 	stw	r3,20(sp)
 8016784:	d9800715 	stw	r6,28(sp)
 8016788:	da000615 	stw	r8,24(sp)
 801678c:	da400415 	stw	r9,16(sp)
 8016790:	15ef883a 	add	r23,r2,r23
 8016794:	800a1780 	call	800a178 <__mulsi3>
 8016798:	8809883a 	mov	r4,r17
 801679c:	b00b883a 	mov	r5,r22
 80167a0:	d8800215 	stw	r2,8(sp)
 80167a4:	800a1780 	call	800a178 <__mulsi3>
 80167a8:	b00b883a 	mov	r5,r22
 80167ac:	a809883a 	mov	r4,r21
 80167b0:	d8800315 	stw	r2,12(sp)
 80167b4:	800a1780 	call	800a178 <__mulsi3>
 80167b8:	8009883a 	mov	r4,r16
 80167bc:	a80b883a 	mov	r5,r21
 80167c0:	1023883a 	mov	r17,r2
 80167c4:	800a1780 	call	800a178 <__mulsi3>
 80167c8:	d9c00217 	ldw	r7,8(sp)
 80167cc:	da800317 	ldw	r10,12(sp)
 80167d0:	d8c00517 	ldw	r3,20(sp)
 80167d4:	3808d43a 	srli	r4,r7,16
 80167d8:	1285883a 	add	r2,r2,r10
 80167dc:	d9800717 	ldw	r6,28(sp)
 80167e0:	2085883a 	add	r2,r4,r2
 80167e4:	da000617 	ldw	r8,24(sp)
 80167e8:	da400417 	ldw	r9,16(sp)
 80167ec:	1280022e 	bgeu	r2,r10,80167f8 <__muldf3+0x584>
 80167f0:	01000074 	movhi	r4,1
 80167f4:	8923883a 	add	r17,r17,r4
 80167f8:	1008943a 	slli	r4,r2,16
 80167fc:	39ffffcc 	andi	r7,r7,65535
 8016800:	e4b9883a 	add	fp,fp,r18
 8016804:	21cf883a 	add	r7,r4,r7
 8016808:	e4e7803a 	cmpltu	r19,fp,r19
 801680c:	3d0f883a 	add	r7,r7,r20
 8016810:	bf39883a 	add	fp,r23,fp
 8016814:	99c9883a 	add	r4,r19,r7
 8016818:	e5ef803a 	cmpltu	r23,fp,r23
 801681c:	490b883a 	add	r5,r9,r4
 8016820:	1004d43a 	srli	r2,r2,16
 8016824:	b965883a 	add	r18,r23,r5
 8016828:	24c9803a 	cmpltu	r4,r4,r19
 801682c:	3d29803a 	cmpltu	r20,r7,r20
 8016830:	a128b03a 	or	r20,r20,r4
 8016834:	95ef803a 	cmpltu	r23,r18,r23
 8016838:	2a53803a 	cmpltu	r9,r5,r9
 801683c:	a0a9883a 	add	r20,r20,r2
 8016840:	4deeb03a 	or	r23,r9,r23
 8016844:	a5ef883a 	add	r23,r20,r23
 8016848:	bc63883a 	add	r17,r23,r17
 801684c:	e004927a 	slli	r2,fp,9
 8016850:	d9000117 	ldw	r4,4(sp)
 8016854:	882e927a 	slli	r23,r17,9
 8016858:	9022d5fa 	srli	r17,r18,23
 801685c:	e038d5fa 	srli	fp,fp,23
 8016860:	1104b03a 	or	r2,r2,r4
 8016864:	9024927a 	slli	r18,r18,9
 8016868:	1004c03a 	cmpne	r2,r2,zero
 801686c:	bc62b03a 	or	r17,r23,r17
 8016870:	1738b03a 	or	fp,r2,fp
 8016874:	8880402c 	andhi	r2,r17,256
 8016878:	e4a4b03a 	or	r18,fp,r18
 801687c:	10000726 	beq	r2,zero,801689c <__muldf3+0x628>
 8016880:	9006d07a 	srli	r3,r18,1
 8016884:	880497fa 	slli	r2,r17,31
 8016888:	9480004c 	andi	r18,r18,1
 801688c:	8822d07a 	srli	r17,r17,1
 8016890:	1ca4b03a 	or	r18,r3,r18
 8016894:	14a4b03a 	or	r18,r2,r18
 8016898:	4007883a 	mov	r3,r8
 801689c:	1880ffc4 	addi	r2,r3,1023
 80168a0:	0080460e 	bge	zero,r2,80169bc <__muldf3+0x748>
 80168a4:	910001cc 	andi	r4,r18,7
 80168a8:	20000726 	beq	r4,zero,80168c8 <__muldf3+0x654>
 80168ac:	910003cc 	andi	r4,r18,15
 80168b0:	01400104 	movi	r5,4
 80168b4:	21400426 	beq	r4,r5,80168c8 <__muldf3+0x654>
 80168b8:	9149883a 	add	r4,r18,r5
 80168bc:	24a5803a 	cmpltu	r18,r4,r18
 80168c0:	8ca3883a 	add	r17,r17,r18
 80168c4:	2025883a 	mov	r18,r4
 80168c8:	8900402c 	andhi	r4,r17,256
 80168cc:	20000426 	beq	r4,zero,80168e0 <__muldf3+0x66c>
 80168d0:	18810004 	addi	r2,r3,1024
 80168d4:	00ffc034 	movhi	r3,65280
 80168d8:	18ffffc4 	addi	r3,r3,-1
 80168dc:	88e2703a 	and	r17,r17,r3
 80168e0:	00c1ff84 	movi	r3,2046
 80168e4:	18bf1316 	blt	r3,r2,8016534 <__muldf3+0x2c0>
 80168e8:	882c977a 	slli	r22,r17,29
 80168ec:	9024d0fa 	srli	r18,r18,3
 80168f0:	8822927a 	slli	r17,r17,9
 80168f4:	1081ffcc 	andi	r2,r2,2047
 80168f8:	b4acb03a 	or	r22,r22,r18
 80168fc:	8820d33a 	srli	r16,r17,12
 8016900:	3027883a 	mov	r19,r6
 8016904:	003eba06 	br	80163f0 <__muldf3+0x17c>
 8016908:	8080022c 	andhi	r2,r16,8
 801690c:	10000926 	beq	r2,zero,8016934 <__muldf3+0x6c0>
 8016910:	8880022c 	andhi	r2,r17,8
 8016914:	1000071e 	bne	r2,zero,8016934 <__muldf3+0x6c0>
 8016918:	00800434 	movhi	r2,16
 801691c:	8c000234 	orhi	r16,r17,8
 8016920:	10bfffc4 	addi	r2,r2,-1
 8016924:	e027883a 	mov	r19,fp
 8016928:	80a0703a 	and	r16,r16,r2
 801692c:	902d883a 	mov	r22,r18
 8016930:	003f1706 	br	8016590 <__muldf3+0x31c>
 8016934:	00800434 	movhi	r2,16
 8016938:	84000234 	orhi	r16,r16,8
 801693c:	10bfffc4 	addi	r2,r2,-1
 8016940:	80a0703a 	and	r16,r16,r2
 8016944:	003f1206 	br	8016590 <__muldf3+0x31c>
 8016948:	147ff604 	addi	r17,r2,-40
 801694c:	3462983a 	sll	r17,r6,r17
 8016950:	0025883a 	mov	r18,zero
 8016954:	003ef306 	br	8016524 <__muldf3+0x2b0>
 8016958:	3009883a 	mov	r4,r6
 801695c:	d9400215 	stw	r5,8(sp)
 8016960:	d9800715 	stw	r6,28(sp)
 8016964:	da400415 	stw	r9,16(sp)
 8016968:	da800315 	stw	r10,12(sp)
 801696c:	80175e00 	call	80175e0 <__clzsi2>
 8016970:	10800804 	addi	r2,r2,32
 8016974:	da800317 	ldw	r10,12(sp)
 8016978:	da400417 	ldw	r9,16(sp)
 801697c:	d9800717 	ldw	r6,28(sp)
 8016980:	d9400217 	ldw	r5,8(sp)
 8016984:	003edd06 	br	80164fc <__muldf3+0x288>
 8016988:	143ff604 	addi	r16,r2,-40
 801698c:	ac20983a 	sll	r16,r21,r16
 8016990:	002d883a 	mov	r22,zero
 8016994:	003ec106 	br	801649c <__muldf3+0x228>
 8016998:	d9800715 	stw	r6,28(sp)
 801699c:	d9c00215 	stw	r7,8(sp)
 80169a0:	da400415 	stw	r9,16(sp)
 80169a4:	80175e00 	call	80175e0 <__clzsi2>
 80169a8:	10800804 	addi	r2,r2,32
 80169ac:	da400417 	ldw	r9,16(sp)
 80169b0:	d9c00217 	ldw	r7,8(sp)
 80169b4:	d9800717 	ldw	r6,28(sp)
 80169b8:	003eae06 	br	8016474 <__muldf3+0x200>
 80169bc:	00c00044 	movi	r3,1
 80169c0:	1887c83a 	sub	r3,r3,r2
 80169c4:	01000e04 	movi	r4,56
 80169c8:	20fe8516 	blt	r4,r3,80163e0 <__muldf3+0x16c>
 80169cc:	010007c4 	movi	r4,31
 80169d0:	20c01b16 	blt	r4,r3,8016a40 <__muldf3+0x7cc>
 80169d4:	00800804 	movi	r2,32
 80169d8:	10c5c83a 	sub	r2,r2,r3
 80169dc:	888a983a 	sll	r5,r17,r2
 80169e0:	90c8d83a 	srl	r4,r18,r3
 80169e4:	9084983a 	sll	r2,r18,r2
 80169e8:	88e2d83a 	srl	r17,r17,r3
 80169ec:	2906b03a 	or	r3,r5,r4
 80169f0:	1004c03a 	cmpne	r2,r2,zero
 80169f4:	1886b03a 	or	r3,r3,r2
 80169f8:	188001cc 	andi	r2,r3,7
 80169fc:	10000726 	beq	r2,zero,8016a1c <__muldf3+0x7a8>
 8016a00:	188003cc 	andi	r2,r3,15
 8016a04:	01000104 	movi	r4,4
 8016a08:	11000426 	beq	r2,r4,8016a1c <__muldf3+0x7a8>
 8016a0c:	1805883a 	mov	r2,r3
 8016a10:	10c00104 	addi	r3,r2,4
 8016a14:	1885803a 	cmpltu	r2,r3,r2
 8016a18:	88a3883a 	add	r17,r17,r2
 8016a1c:	8880202c 	andhi	r2,r17,128
 8016a20:	10001c26 	beq	r2,zero,8016a94 <__muldf3+0x820>
 8016a24:	3027883a 	mov	r19,r6
 8016a28:	00800044 	movi	r2,1
 8016a2c:	0021883a 	mov	r16,zero
 8016a30:	002d883a 	mov	r22,zero
 8016a34:	003e6e06 	br	80163f0 <__muldf3+0x17c>
 8016a38:	4007883a 	mov	r3,r8
 8016a3c:	003f9706 	br	801689c <__muldf3+0x628>
 8016a40:	017ff844 	movi	r5,-31
 8016a44:	2885c83a 	sub	r2,r5,r2
 8016a48:	888ad83a 	srl	r5,r17,r2
 8016a4c:	00800804 	movi	r2,32
 8016a50:	18801a26 	beq	r3,r2,8016abc <__muldf3+0x848>
 8016a54:	01001004 	movi	r4,64
 8016a58:	20c7c83a 	sub	r3,r4,r3
 8016a5c:	88e2983a 	sll	r17,r17,r3
 8016a60:	8ca4b03a 	or	r18,r17,r18
 8016a64:	9004c03a 	cmpne	r2,r18,zero
 8016a68:	2884b03a 	or	r2,r5,r2
 8016a6c:	144001cc 	andi	r17,r2,7
 8016a70:	88000d1e 	bne	r17,zero,8016aa8 <__muldf3+0x834>
 8016a74:	0021883a 	mov	r16,zero
 8016a78:	102cd0fa 	srli	r22,r2,3
 8016a7c:	3027883a 	mov	r19,r6
 8016a80:	0005883a 	mov	r2,zero
 8016a84:	b46cb03a 	or	r22,r22,r17
 8016a88:	003e5906 	br	80163f0 <__muldf3+0x17c>
 8016a8c:	1007883a 	mov	r3,r2
 8016a90:	0023883a 	mov	r17,zero
 8016a94:	8820927a 	slli	r16,r17,9
 8016a98:	1805883a 	mov	r2,r3
 8016a9c:	8822977a 	slli	r17,r17,29
 8016aa0:	8020d33a 	srli	r16,r16,12
 8016aa4:	003ff406 	br	8016a78 <__muldf3+0x804>
 8016aa8:	10c003cc 	andi	r3,r2,15
 8016aac:	01000104 	movi	r4,4
 8016ab0:	193ff626 	beq	r3,r4,8016a8c <__muldf3+0x818>
 8016ab4:	0023883a 	mov	r17,zero
 8016ab8:	003fd506 	br	8016a10 <__muldf3+0x79c>
 8016abc:	0023883a 	mov	r17,zero
 8016ac0:	003fe706 	br	8016a60 <__muldf3+0x7ec>
 8016ac4:	00800434 	movhi	r2,16
 8016ac8:	8c000234 	orhi	r16,r17,8
 8016acc:	10bfffc4 	addi	r2,r2,-1
 8016ad0:	3027883a 	mov	r19,r6
 8016ad4:	80a0703a 	and	r16,r16,r2
 8016ad8:	902d883a 	mov	r22,r18
 8016adc:	003eac06 	br	8016590 <__muldf3+0x31c>

08016ae0 <__subdf3>:
 8016ae0:	02000434 	movhi	r8,16
 8016ae4:	423fffc4 	addi	r8,r8,-1
 8016ae8:	defffb04 	addi	sp,sp,-20
 8016aec:	2a14703a 	and	r10,r5,r8
 8016af0:	3812d53a 	srli	r9,r7,20
 8016af4:	3a10703a 	and	r8,r7,r8
 8016af8:	2006d77a 	srli	r3,r4,29
 8016afc:	3004d77a 	srli	r2,r6,29
 8016b00:	dc000015 	stw	r16,0(sp)
 8016b04:	501490fa 	slli	r10,r10,3
 8016b08:	2820d53a 	srli	r16,r5,20
 8016b0c:	401090fa 	slli	r8,r8,3
 8016b10:	dc800215 	stw	r18,8(sp)
 8016b14:	dc400115 	stw	r17,4(sp)
 8016b18:	dfc00415 	stw	ra,16(sp)
 8016b1c:	202290fa 	slli	r17,r4,3
 8016b20:	dcc00315 	stw	r19,12(sp)
 8016b24:	4a41ffcc 	andi	r9,r9,2047
 8016b28:	0101ffc4 	movi	r4,2047
 8016b2c:	2824d7fa 	srli	r18,r5,31
 8016b30:	8401ffcc 	andi	r16,r16,2047
 8016b34:	50c6b03a 	or	r3,r10,r3
 8016b38:	380ed7fa 	srli	r7,r7,31
 8016b3c:	408ab03a 	or	r5,r8,r2
 8016b40:	300c90fa 	slli	r6,r6,3
 8016b44:	49009626 	beq	r9,r4,8016da0 <__subdf3+0x2c0>
 8016b48:	39c0005c 	xori	r7,r7,1
 8016b4c:	8245c83a 	sub	r2,r16,r9
 8016b50:	3c807426 	beq	r7,r18,8016d24 <__subdf3+0x244>
 8016b54:	0080af0e 	bge	zero,r2,8016e14 <__subdf3+0x334>
 8016b58:	48002a1e 	bne	r9,zero,8016c04 <__subdf3+0x124>
 8016b5c:	2988b03a 	or	r4,r5,r6
 8016b60:	20009a1e 	bne	r4,zero,8016dcc <__subdf3+0x2ec>
 8016b64:	888001cc 	andi	r2,r17,7
 8016b68:	10000726 	beq	r2,zero,8016b88 <__subdf3+0xa8>
 8016b6c:	888003cc 	andi	r2,r17,15
 8016b70:	01000104 	movi	r4,4
 8016b74:	11000426 	beq	r2,r4,8016b88 <__subdf3+0xa8>
 8016b78:	890b883a 	add	r5,r17,r4
 8016b7c:	2c63803a 	cmpltu	r17,r5,r17
 8016b80:	1c47883a 	add	r3,r3,r17
 8016b84:	2823883a 	mov	r17,r5
 8016b88:	1880202c 	andhi	r2,r3,128
 8016b8c:	10005926 	beq	r2,zero,8016cf4 <__subdf3+0x214>
 8016b90:	84000044 	addi	r16,r16,1
 8016b94:	0081ffc4 	movi	r2,2047
 8016b98:	8080be26 	beq	r16,r2,8016e94 <__subdf3+0x3b4>
 8016b9c:	017fe034 	movhi	r5,65408
 8016ba0:	297fffc4 	addi	r5,r5,-1
 8016ba4:	1946703a 	and	r3,r3,r5
 8016ba8:	1804977a 	slli	r2,r3,29
 8016bac:	1806927a 	slli	r3,r3,9
 8016bb0:	8822d0fa 	srli	r17,r17,3
 8016bb4:	8401ffcc 	andi	r16,r16,2047
 8016bb8:	180ad33a 	srli	r5,r3,12
 8016bbc:	9100004c 	andi	r4,r18,1
 8016bc0:	1444b03a 	or	r2,r2,r17
 8016bc4:	80c1ffcc 	andi	r3,r16,2047
 8016bc8:	1820953a 	slli	r16,r3,20
 8016bcc:	20c03fcc 	andi	r3,r4,255
 8016bd0:	180897fa 	slli	r4,r3,31
 8016bd4:	00c00434 	movhi	r3,16
 8016bd8:	18ffffc4 	addi	r3,r3,-1
 8016bdc:	28c6703a 	and	r3,r5,r3
 8016be0:	1c06b03a 	or	r3,r3,r16
 8016be4:	1906b03a 	or	r3,r3,r4
 8016be8:	dfc00417 	ldw	ra,16(sp)
 8016bec:	dcc00317 	ldw	r19,12(sp)
 8016bf0:	dc800217 	ldw	r18,8(sp)
 8016bf4:	dc400117 	ldw	r17,4(sp)
 8016bf8:	dc000017 	ldw	r16,0(sp)
 8016bfc:	dec00504 	addi	sp,sp,20
 8016c00:	f800283a 	ret
 8016c04:	0101ffc4 	movi	r4,2047
 8016c08:	813fd626 	beq	r16,r4,8016b64 <__subdf3+0x84>
 8016c0c:	29402034 	orhi	r5,r5,128
 8016c10:	01000e04 	movi	r4,56
 8016c14:	2080a316 	blt	r4,r2,8016ea4 <__subdf3+0x3c4>
 8016c18:	010007c4 	movi	r4,31
 8016c1c:	2080c616 	blt	r4,r2,8016f38 <__subdf3+0x458>
 8016c20:	01000804 	movi	r4,32
 8016c24:	2089c83a 	sub	r4,r4,r2
 8016c28:	2910983a 	sll	r8,r5,r4
 8016c2c:	308ed83a 	srl	r7,r6,r2
 8016c30:	3108983a 	sll	r4,r6,r4
 8016c34:	2884d83a 	srl	r2,r5,r2
 8016c38:	41ccb03a 	or	r6,r8,r7
 8016c3c:	2008c03a 	cmpne	r4,r4,zero
 8016c40:	310cb03a 	or	r6,r6,r4
 8016c44:	898dc83a 	sub	r6,r17,r6
 8016c48:	89a3803a 	cmpltu	r17,r17,r6
 8016c4c:	1887c83a 	sub	r3,r3,r2
 8016c50:	1c47c83a 	sub	r3,r3,r17
 8016c54:	3023883a 	mov	r17,r6
 8016c58:	1880202c 	andhi	r2,r3,128
 8016c5c:	10002326 	beq	r2,zero,8016cec <__subdf3+0x20c>
 8016c60:	04c02034 	movhi	r19,128
 8016c64:	9cffffc4 	addi	r19,r19,-1
 8016c68:	1ce6703a 	and	r19,r3,r19
 8016c6c:	98007a26 	beq	r19,zero,8016e58 <__subdf3+0x378>
 8016c70:	9809883a 	mov	r4,r19
 8016c74:	80175e00 	call	80175e0 <__clzsi2>
 8016c78:	113ffe04 	addi	r4,r2,-8
 8016c7c:	00c007c4 	movi	r3,31
 8016c80:	19007b16 	blt	r3,r4,8016e70 <__subdf3+0x390>
 8016c84:	00800804 	movi	r2,32
 8016c88:	1105c83a 	sub	r2,r2,r4
 8016c8c:	8884d83a 	srl	r2,r17,r2
 8016c90:	9906983a 	sll	r3,r19,r4
 8016c94:	8922983a 	sll	r17,r17,r4
 8016c98:	10c4b03a 	or	r2,r2,r3
 8016c9c:	24007816 	blt	r4,r16,8016e80 <__subdf3+0x3a0>
 8016ca0:	2421c83a 	sub	r16,r4,r16
 8016ca4:	80c00044 	addi	r3,r16,1
 8016ca8:	010007c4 	movi	r4,31
 8016cac:	20c09516 	blt	r4,r3,8016f04 <__subdf3+0x424>
 8016cb0:	01400804 	movi	r5,32
 8016cb4:	28cbc83a 	sub	r5,r5,r3
 8016cb8:	88c8d83a 	srl	r4,r17,r3
 8016cbc:	8962983a 	sll	r17,r17,r5
 8016cc0:	114a983a 	sll	r5,r2,r5
 8016cc4:	10c6d83a 	srl	r3,r2,r3
 8016cc8:	8804c03a 	cmpne	r2,r17,zero
 8016ccc:	290ab03a 	or	r5,r5,r4
 8016cd0:	28a2b03a 	or	r17,r5,r2
 8016cd4:	0021883a 	mov	r16,zero
 8016cd8:	003fa206 	br	8016b64 <__subdf3+0x84>
 8016cdc:	2090b03a 	or	r8,r4,r2
 8016ce0:	40018e26 	beq	r8,zero,801731c <__subdf3+0x83c>
 8016ce4:	1007883a 	mov	r3,r2
 8016ce8:	2023883a 	mov	r17,r4
 8016cec:	888001cc 	andi	r2,r17,7
 8016cf0:	103f9e1e 	bne	r2,zero,8016b6c <__subdf3+0x8c>
 8016cf4:	1804977a 	slli	r2,r3,29
 8016cf8:	8822d0fa 	srli	r17,r17,3
 8016cfc:	1810d0fa 	srli	r8,r3,3
 8016d00:	9100004c 	andi	r4,r18,1
 8016d04:	1444b03a 	or	r2,r2,r17
 8016d08:	00c1ffc4 	movi	r3,2047
 8016d0c:	80c02826 	beq	r16,r3,8016db0 <__subdf3+0x2d0>
 8016d10:	01400434 	movhi	r5,16
 8016d14:	297fffc4 	addi	r5,r5,-1
 8016d18:	80e0703a 	and	r16,r16,r3
 8016d1c:	414a703a 	and	r5,r8,r5
 8016d20:	003fa806 	br	8016bc4 <__subdf3+0xe4>
 8016d24:	0080630e 	bge	zero,r2,8016eb4 <__subdf3+0x3d4>
 8016d28:	48003026 	beq	r9,zero,8016dec <__subdf3+0x30c>
 8016d2c:	0101ffc4 	movi	r4,2047
 8016d30:	813f8c26 	beq	r16,r4,8016b64 <__subdf3+0x84>
 8016d34:	29402034 	orhi	r5,r5,128
 8016d38:	01000e04 	movi	r4,56
 8016d3c:	2080a90e 	bge	r4,r2,8016fe4 <__subdf3+0x504>
 8016d40:	298cb03a 	or	r6,r5,r6
 8016d44:	3012c03a 	cmpne	r9,r6,zero
 8016d48:	0005883a 	mov	r2,zero
 8016d4c:	4c53883a 	add	r9,r9,r17
 8016d50:	4c63803a 	cmpltu	r17,r9,r17
 8016d54:	10c7883a 	add	r3,r2,r3
 8016d58:	88c7883a 	add	r3,r17,r3
 8016d5c:	4823883a 	mov	r17,r9
 8016d60:	1880202c 	andhi	r2,r3,128
 8016d64:	1000d026 	beq	r2,zero,80170a8 <__subdf3+0x5c8>
 8016d68:	84000044 	addi	r16,r16,1
 8016d6c:	0081ffc4 	movi	r2,2047
 8016d70:	8080fe26 	beq	r16,r2,801716c <__subdf3+0x68c>
 8016d74:	00bfe034 	movhi	r2,65408
 8016d78:	10bfffc4 	addi	r2,r2,-1
 8016d7c:	1886703a 	and	r3,r3,r2
 8016d80:	880ad07a 	srli	r5,r17,1
 8016d84:	180497fa 	slli	r2,r3,31
 8016d88:	8900004c 	andi	r4,r17,1
 8016d8c:	2922b03a 	or	r17,r5,r4
 8016d90:	1806d07a 	srli	r3,r3,1
 8016d94:	1462b03a 	or	r17,r2,r17
 8016d98:	3825883a 	mov	r18,r7
 8016d9c:	003f7106 	br	8016b64 <__subdf3+0x84>
 8016da0:	2984b03a 	or	r2,r5,r6
 8016da4:	103f6826 	beq	r2,zero,8016b48 <__subdf3+0x68>
 8016da8:	39c03fcc 	andi	r7,r7,255
 8016dac:	003f6706 	br	8016b4c <__subdf3+0x6c>
 8016db0:	4086b03a 	or	r3,r8,r2
 8016db4:	18015226 	beq	r3,zero,8017300 <__subdf3+0x820>
 8016db8:	00c00434 	movhi	r3,16
 8016dbc:	41400234 	orhi	r5,r8,8
 8016dc0:	18ffffc4 	addi	r3,r3,-1
 8016dc4:	28ca703a 	and	r5,r5,r3
 8016dc8:	003f7e06 	br	8016bc4 <__subdf3+0xe4>
 8016dcc:	10bfffc4 	addi	r2,r2,-1
 8016dd0:	1000491e 	bne	r2,zero,8016ef8 <__subdf3+0x418>
 8016dd4:	898fc83a 	sub	r7,r17,r6
 8016dd8:	89e3803a 	cmpltu	r17,r17,r7
 8016ddc:	1947c83a 	sub	r3,r3,r5
 8016de0:	1c47c83a 	sub	r3,r3,r17
 8016de4:	3823883a 	mov	r17,r7
 8016de8:	003f9b06 	br	8016c58 <__subdf3+0x178>
 8016dec:	2988b03a 	or	r4,r5,r6
 8016df0:	203f5c26 	beq	r4,zero,8016b64 <__subdf3+0x84>
 8016df4:	10bfffc4 	addi	r2,r2,-1
 8016df8:	1000931e 	bne	r2,zero,8017048 <__subdf3+0x568>
 8016dfc:	898d883a 	add	r6,r17,r6
 8016e00:	3463803a 	cmpltu	r17,r6,r17
 8016e04:	1947883a 	add	r3,r3,r5
 8016e08:	88c7883a 	add	r3,r17,r3
 8016e0c:	3023883a 	mov	r17,r6
 8016e10:	003fd306 	br	8016d60 <__subdf3+0x280>
 8016e14:	1000541e 	bne	r2,zero,8016f68 <__subdf3+0x488>
 8016e18:	80800044 	addi	r2,r16,1
 8016e1c:	1081ffcc 	andi	r2,r2,2047
 8016e20:	01000044 	movi	r4,1
 8016e24:	2080a20e 	bge	r4,r2,80170b0 <__subdf3+0x5d0>
 8016e28:	8989c83a 	sub	r4,r17,r6
 8016e2c:	8905803a 	cmpltu	r2,r17,r4
 8016e30:	1967c83a 	sub	r19,r3,r5
 8016e34:	98a7c83a 	sub	r19,r19,r2
 8016e38:	9880202c 	andhi	r2,r19,128
 8016e3c:	10006326 	beq	r2,zero,8016fcc <__subdf3+0x4ec>
 8016e40:	3463c83a 	sub	r17,r6,r17
 8016e44:	28c7c83a 	sub	r3,r5,r3
 8016e48:	344d803a 	cmpltu	r6,r6,r17
 8016e4c:	19a7c83a 	sub	r19,r3,r6
 8016e50:	3825883a 	mov	r18,r7
 8016e54:	983f861e 	bne	r19,zero,8016c70 <__subdf3+0x190>
 8016e58:	8809883a 	mov	r4,r17
 8016e5c:	80175e00 	call	80175e0 <__clzsi2>
 8016e60:	10800804 	addi	r2,r2,32
 8016e64:	113ffe04 	addi	r4,r2,-8
 8016e68:	00c007c4 	movi	r3,31
 8016e6c:	193f850e 	bge	r3,r4,8016c84 <__subdf3+0x1a4>
 8016e70:	10bff604 	addi	r2,r2,-40
 8016e74:	8884983a 	sll	r2,r17,r2
 8016e78:	0023883a 	mov	r17,zero
 8016e7c:	243f880e 	bge	r4,r16,8016ca0 <__subdf3+0x1c0>
 8016e80:	00ffe034 	movhi	r3,65408
 8016e84:	18ffffc4 	addi	r3,r3,-1
 8016e88:	8121c83a 	sub	r16,r16,r4
 8016e8c:	10c6703a 	and	r3,r2,r3
 8016e90:	003f3406 	br	8016b64 <__subdf3+0x84>
 8016e94:	9100004c 	andi	r4,r18,1
 8016e98:	000b883a 	mov	r5,zero
 8016e9c:	0005883a 	mov	r2,zero
 8016ea0:	003f4806 	br	8016bc4 <__subdf3+0xe4>
 8016ea4:	298cb03a 	or	r6,r5,r6
 8016ea8:	300cc03a 	cmpne	r6,r6,zero
 8016eac:	0005883a 	mov	r2,zero
 8016eb0:	003f6406 	br	8016c44 <__subdf3+0x164>
 8016eb4:	10009a1e 	bne	r2,zero,8017120 <__subdf3+0x640>
 8016eb8:	82400044 	addi	r9,r16,1
 8016ebc:	4881ffcc 	andi	r2,r9,2047
 8016ec0:	02800044 	movi	r10,1
 8016ec4:	5080670e 	bge	r10,r2,8017064 <__subdf3+0x584>
 8016ec8:	0081ffc4 	movi	r2,2047
 8016ecc:	4880af26 	beq	r9,r2,801718c <__subdf3+0x6ac>
 8016ed0:	898d883a 	add	r6,r17,r6
 8016ed4:	1945883a 	add	r2,r3,r5
 8016ed8:	3447803a 	cmpltu	r3,r6,r17
 8016edc:	1887883a 	add	r3,r3,r2
 8016ee0:	182297fa 	slli	r17,r3,31
 8016ee4:	300cd07a 	srli	r6,r6,1
 8016ee8:	1806d07a 	srli	r3,r3,1
 8016eec:	4821883a 	mov	r16,r9
 8016ef0:	89a2b03a 	or	r17,r17,r6
 8016ef4:	003f1b06 	br	8016b64 <__subdf3+0x84>
 8016ef8:	0101ffc4 	movi	r4,2047
 8016efc:	813f441e 	bne	r16,r4,8016c10 <__subdf3+0x130>
 8016f00:	003f1806 	br	8016b64 <__subdf3+0x84>
 8016f04:	843ff844 	addi	r16,r16,-31
 8016f08:	01400804 	movi	r5,32
 8016f0c:	1408d83a 	srl	r4,r2,r16
 8016f10:	19405026 	beq	r3,r5,8017054 <__subdf3+0x574>
 8016f14:	01401004 	movi	r5,64
 8016f18:	28c7c83a 	sub	r3,r5,r3
 8016f1c:	10c4983a 	sll	r2,r2,r3
 8016f20:	88a2b03a 	or	r17,r17,r2
 8016f24:	8822c03a 	cmpne	r17,r17,zero
 8016f28:	2462b03a 	or	r17,r4,r17
 8016f2c:	0007883a 	mov	r3,zero
 8016f30:	0021883a 	mov	r16,zero
 8016f34:	003f6d06 	br	8016cec <__subdf3+0x20c>
 8016f38:	11fff804 	addi	r7,r2,-32
 8016f3c:	01000804 	movi	r4,32
 8016f40:	29ced83a 	srl	r7,r5,r7
 8016f44:	11004526 	beq	r2,r4,801705c <__subdf3+0x57c>
 8016f48:	01001004 	movi	r4,64
 8016f4c:	2089c83a 	sub	r4,r4,r2
 8016f50:	2904983a 	sll	r2,r5,r4
 8016f54:	118cb03a 	or	r6,r2,r6
 8016f58:	300cc03a 	cmpne	r6,r6,zero
 8016f5c:	398cb03a 	or	r6,r7,r6
 8016f60:	0005883a 	mov	r2,zero
 8016f64:	003f3706 	br	8016c44 <__subdf3+0x164>
 8016f68:	80002a26 	beq	r16,zero,8017014 <__subdf3+0x534>
 8016f6c:	0101ffc4 	movi	r4,2047
 8016f70:	49006626 	beq	r9,r4,801710c <__subdf3+0x62c>
 8016f74:	0085c83a 	sub	r2,zero,r2
 8016f78:	18c02034 	orhi	r3,r3,128
 8016f7c:	01000e04 	movi	r4,56
 8016f80:	20807e16 	blt	r4,r2,801717c <__subdf3+0x69c>
 8016f84:	010007c4 	movi	r4,31
 8016f88:	2080e716 	blt	r4,r2,8017328 <__subdf3+0x848>
 8016f8c:	01000804 	movi	r4,32
 8016f90:	2089c83a 	sub	r4,r4,r2
 8016f94:	1914983a 	sll	r10,r3,r4
 8016f98:	8890d83a 	srl	r8,r17,r2
 8016f9c:	8908983a 	sll	r4,r17,r4
 8016fa0:	1884d83a 	srl	r2,r3,r2
 8016fa4:	5222b03a 	or	r17,r10,r8
 8016fa8:	2006c03a 	cmpne	r3,r4,zero
 8016fac:	88e2b03a 	or	r17,r17,r3
 8016fb0:	3463c83a 	sub	r17,r6,r17
 8016fb4:	2885c83a 	sub	r2,r5,r2
 8016fb8:	344d803a 	cmpltu	r6,r6,r17
 8016fbc:	1187c83a 	sub	r3,r2,r6
 8016fc0:	4821883a 	mov	r16,r9
 8016fc4:	3825883a 	mov	r18,r7
 8016fc8:	003f2306 	br	8016c58 <__subdf3+0x178>
 8016fcc:	24d0b03a 	or	r8,r4,r19
 8016fd0:	40001b1e 	bne	r8,zero,8017040 <__subdf3+0x560>
 8016fd4:	0005883a 	mov	r2,zero
 8016fd8:	0009883a 	mov	r4,zero
 8016fdc:	0021883a 	mov	r16,zero
 8016fe0:	003f4906 	br	8016d08 <__subdf3+0x228>
 8016fe4:	010007c4 	movi	r4,31
 8016fe8:	20803a16 	blt	r4,r2,80170d4 <__subdf3+0x5f4>
 8016fec:	01000804 	movi	r4,32
 8016ff0:	2089c83a 	sub	r4,r4,r2
 8016ff4:	2912983a 	sll	r9,r5,r4
 8016ff8:	3090d83a 	srl	r8,r6,r2
 8016ffc:	3108983a 	sll	r4,r6,r4
 8017000:	2884d83a 	srl	r2,r5,r2
 8017004:	4a12b03a 	or	r9,r9,r8
 8017008:	2008c03a 	cmpne	r4,r4,zero
 801700c:	4912b03a 	or	r9,r9,r4
 8017010:	003f4e06 	br	8016d4c <__subdf3+0x26c>
 8017014:	1c48b03a 	or	r4,r3,r17
 8017018:	20003c26 	beq	r4,zero,801710c <__subdf3+0x62c>
 801701c:	0084303a 	nor	r2,zero,r2
 8017020:	1000381e 	bne	r2,zero,8017104 <__subdf3+0x624>
 8017024:	3463c83a 	sub	r17,r6,r17
 8017028:	28c5c83a 	sub	r2,r5,r3
 801702c:	344d803a 	cmpltu	r6,r6,r17
 8017030:	1187c83a 	sub	r3,r2,r6
 8017034:	4821883a 	mov	r16,r9
 8017038:	3825883a 	mov	r18,r7
 801703c:	003f0606 	br	8016c58 <__subdf3+0x178>
 8017040:	2023883a 	mov	r17,r4
 8017044:	003f0906 	br	8016c6c <__subdf3+0x18c>
 8017048:	0101ffc4 	movi	r4,2047
 801704c:	813f3a1e 	bne	r16,r4,8016d38 <__subdf3+0x258>
 8017050:	003ec406 	br	8016b64 <__subdf3+0x84>
 8017054:	0005883a 	mov	r2,zero
 8017058:	003fb106 	br	8016f20 <__subdf3+0x440>
 801705c:	0005883a 	mov	r2,zero
 8017060:	003fbc06 	br	8016f54 <__subdf3+0x474>
 8017064:	1c44b03a 	or	r2,r3,r17
 8017068:	80008e1e 	bne	r16,zero,80172a4 <__subdf3+0x7c4>
 801706c:	1000c826 	beq	r2,zero,8017390 <__subdf3+0x8b0>
 8017070:	2984b03a 	or	r2,r5,r6
 8017074:	103ebb26 	beq	r2,zero,8016b64 <__subdf3+0x84>
 8017078:	8989883a 	add	r4,r17,r6
 801707c:	1945883a 	add	r2,r3,r5
 8017080:	2447803a 	cmpltu	r3,r4,r17
 8017084:	1887883a 	add	r3,r3,r2
 8017088:	1880202c 	andhi	r2,r3,128
 801708c:	2023883a 	mov	r17,r4
 8017090:	103f1626 	beq	r2,zero,8016cec <__subdf3+0x20c>
 8017094:	00bfe034 	movhi	r2,65408
 8017098:	10bfffc4 	addi	r2,r2,-1
 801709c:	5021883a 	mov	r16,r10
 80170a0:	1886703a 	and	r3,r3,r2
 80170a4:	003eaf06 	br	8016b64 <__subdf3+0x84>
 80170a8:	3825883a 	mov	r18,r7
 80170ac:	003f0f06 	br	8016cec <__subdf3+0x20c>
 80170b0:	1c44b03a 	or	r2,r3,r17
 80170b4:	8000251e 	bne	r16,zero,801714c <__subdf3+0x66c>
 80170b8:	1000661e 	bne	r2,zero,8017254 <__subdf3+0x774>
 80170bc:	2990b03a 	or	r8,r5,r6
 80170c0:	40009626 	beq	r8,zero,801731c <__subdf3+0x83c>
 80170c4:	2807883a 	mov	r3,r5
 80170c8:	3023883a 	mov	r17,r6
 80170cc:	3825883a 	mov	r18,r7
 80170d0:	003ea406 	br	8016b64 <__subdf3+0x84>
 80170d4:	127ff804 	addi	r9,r2,-32
 80170d8:	01000804 	movi	r4,32
 80170dc:	2a52d83a 	srl	r9,r5,r9
 80170e0:	11008c26 	beq	r2,r4,8017314 <__subdf3+0x834>
 80170e4:	01001004 	movi	r4,64
 80170e8:	2085c83a 	sub	r2,r4,r2
 80170ec:	2884983a 	sll	r2,r5,r2
 80170f0:	118cb03a 	or	r6,r2,r6
 80170f4:	300cc03a 	cmpne	r6,r6,zero
 80170f8:	4992b03a 	or	r9,r9,r6
 80170fc:	0005883a 	mov	r2,zero
 8017100:	003f1206 	br	8016d4c <__subdf3+0x26c>
 8017104:	0101ffc4 	movi	r4,2047
 8017108:	493f9c1e 	bne	r9,r4,8016f7c <__subdf3+0x49c>
 801710c:	2807883a 	mov	r3,r5
 8017110:	3023883a 	mov	r17,r6
 8017114:	4821883a 	mov	r16,r9
 8017118:	3825883a 	mov	r18,r7
 801711c:	003e9106 	br	8016b64 <__subdf3+0x84>
 8017120:	80001f1e 	bne	r16,zero,80171a0 <__subdf3+0x6c0>
 8017124:	1c48b03a 	or	r4,r3,r17
 8017128:	20005a26 	beq	r4,zero,8017294 <__subdf3+0x7b4>
 801712c:	0084303a 	nor	r2,zero,r2
 8017130:	1000561e 	bne	r2,zero,801728c <__subdf3+0x7ac>
 8017134:	89a3883a 	add	r17,r17,r6
 8017138:	1945883a 	add	r2,r3,r5
 801713c:	898d803a 	cmpltu	r6,r17,r6
 8017140:	3087883a 	add	r3,r6,r2
 8017144:	4821883a 	mov	r16,r9
 8017148:	003f0506 	br	8016d60 <__subdf3+0x280>
 801714c:	10002b1e 	bne	r2,zero,80171fc <__subdf3+0x71c>
 8017150:	2984b03a 	or	r2,r5,r6
 8017154:	10008026 	beq	r2,zero,8017358 <__subdf3+0x878>
 8017158:	2807883a 	mov	r3,r5
 801715c:	3023883a 	mov	r17,r6
 8017160:	3825883a 	mov	r18,r7
 8017164:	0401ffc4 	movi	r16,2047
 8017168:	003e7e06 	br	8016b64 <__subdf3+0x84>
 801716c:	3809883a 	mov	r4,r7
 8017170:	0011883a 	mov	r8,zero
 8017174:	0005883a 	mov	r2,zero
 8017178:	003ee306 	br	8016d08 <__subdf3+0x228>
 801717c:	1c62b03a 	or	r17,r3,r17
 8017180:	8822c03a 	cmpne	r17,r17,zero
 8017184:	0005883a 	mov	r2,zero
 8017188:	003f8906 	br	8016fb0 <__subdf3+0x4d0>
 801718c:	3809883a 	mov	r4,r7
 8017190:	4821883a 	mov	r16,r9
 8017194:	0011883a 	mov	r8,zero
 8017198:	0005883a 	mov	r2,zero
 801719c:	003eda06 	br	8016d08 <__subdf3+0x228>
 80171a0:	0101ffc4 	movi	r4,2047
 80171a4:	49003b26 	beq	r9,r4,8017294 <__subdf3+0x7b4>
 80171a8:	0085c83a 	sub	r2,zero,r2
 80171ac:	18c02034 	orhi	r3,r3,128
 80171b0:	01000e04 	movi	r4,56
 80171b4:	20806e16 	blt	r4,r2,8017370 <__subdf3+0x890>
 80171b8:	010007c4 	movi	r4,31
 80171bc:	20807716 	blt	r4,r2,801739c <__subdf3+0x8bc>
 80171c0:	01000804 	movi	r4,32
 80171c4:	2089c83a 	sub	r4,r4,r2
 80171c8:	1914983a 	sll	r10,r3,r4
 80171cc:	8890d83a 	srl	r8,r17,r2
 80171d0:	8908983a 	sll	r4,r17,r4
 80171d4:	1884d83a 	srl	r2,r3,r2
 80171d8:	5222b03a 	or	r17,r10,r8
 80171dc:	2006c03a 	cmpne	r3,r4,zero
 80171e0:	88e2b03a 	or	r17,r17,r3
 80171e4:	89a3883a 	add	r17,r17,r6
 80171e8:	1145883a 	add	r2,r2,r5
 80171ec:	898d803a 	cmpltu	r6,r17,r6
 80171f0:	3087883a 	add	r3,r6,r2
 80171f4:	4821883a 	mov	r16,r9
 80171f8:	003ed906 	br	8016d60 <__subdf3+0x280>
 80171fc:	2984b03a 	or	r2,r5,r6
 8017200:	10004226 	beq	r2,zero,801730c <__subdf3+0x82c>
 8017204:	1808d0fa 	srli	r4,r3,3
 8017208:	8822d0fa 	srli	r17,r17,3
 801720c:	1806977a 	slli	r3,r3,29
 8017210:	2080022c 	andhi	r2,r4,8
 8017214:	1c62b03a 	or	r17,r3,r17
 8017218:	10000826 	beq	r2,zero,801723c <__subdf3+0x75c>
 801721c:	2812d0fa 	srli	r9,r5,3
 8017220:	4880022c 	andhi	r2,r9,8
 8017224:	1000051e 	bne	r2,zero,801723c <__subdf3+0x75c>
 8017228:	300cd0fa 	srli	r6,r6,3
 801722c:	2804977a 	slli	r2,r5,29
 8017230:	4809883a 	mov	r4,r9
 8017234:	3825883a 	mov	r18,r7
 8017238:	11a2b03a 	or	r17,r2,r6
 801723c:	8806d77a 	srli	r3,r17,29
 8017240:	200890fa 	slli	r4,r4,3
 8017244:	882290fa 	slli	r17,r17,3
 8017248:	0401ffc4 	movi	r16,2047
 801724c:	1906b03a 	or	r3,r3,r4
 8017250:	003e4406 	br	8016b64 <__subdf3+0x84>
 8017254:	2984b03a 	or	r2,r5,r6
 8017258:	103e4226 	beq	r2,zero,8016b64 <__subdf3+0x84>
 801725c:	8989c83a 	sub	r4,r17,r6
 8017260:	8911803a 	cmpltu	r8,r17,r4
 8017264:	1945c83a 	sub	r2,r3,r5
 8017268:	1205c83a 	sub	r2,r2,r8
 801726c:	1200202c 	andhi	r8,r2,128
 8017270:	403e9a26 	beq	r8,zero,8016cdc <__subdf3+0x1fc>
 8017274:	3463c83a 	sub	r17,r6,r17
 8017278:	28c5c83a 	sub	r2,r5,r3
 801727c:	344d803a 	cmpltu	r6,r6,r17
 8017280:	1187c83a 	sub	r3,r2,r6
 8017284:	3825883a 	mov	r18,r7
 8017288:	003e3606 	br	8016b64 <__subdf3+0x84>
 801728c:	0101ffc4 	movi	r4,2047
 8017290:	493fc71e 	bne	r9,r4,80171b0 <__subdf3+0x6d0>
 8017294:	2807883a 	mov	r3,r5
 8017298:	3023883a 	mov	r17,r6
 801729c:	4821883a 	mov	r16,r9
 80172a0:	003e3006 	br	8016b64 <__subdf3+0x84>
 80172a4:	10003626 	beq	r2,zero,8017380 <__subdf3+0x8a0>
 80172a8:	2984b03a 	or	r2,r5,r6
 80172ac:	10001726 	beq	r2,zero,801730c <__subdf3+0x82c>
 80172b0:	1808d0fa 	srli	r4,r3,3
 80172b4:	8822d0fa 	srli	r17,r17,3
 80172b8:	1806977a 	slli	r3,r3,29
 80172bc:	2080022c 	andhi	r2,r4,8
 80172c0:	1c62b03a 	or	r17,r3,r17
 80172c4:	10000726 	beq	r2,zero,80172e4 <__subdf3+0x804>
 80172c8:	2812d0fa 	srli	r9,r5,3
 80172cc:	4880022c 	andhi	r2,r9,8
 80172d0:	1000041e 	bne	r2,zero,80172e4 <__subdf3+0x804>
 80172d4:	300cd0fa 	srli	r6,r6,3
 80172d8:	2804977a 	slli	r2,r5,29
 80172dc:	4809883a 	mov	r4,r9
 80172e0:	11a2b03a 	or	r17,r2,r6
 80172e4:	8806d77a 	srli	r3,r17,29
 80172e8:	200890fa 	slli	r4,r4,3
 80172ec:	882290fa 	slli	r17,r17,3
 80172f0:	3825883a 	mov	r18,r7
 80172f4:	1906b03a 	or	r3,r3,r4
 80172f8:	0401ffc4 	movi	r16,2047
 80172fc:	003e1906 	br	8016b64 <__subdf3+0x84>
 8017300:	000b883a 	mov	r5,zero
 8017304:	0005883a 	mov	r2,zero
 8017308:	003e2e06 	br	8016bc4 <__subdf3+0xe4>
 801730c:	0401ffc4 	movi	r16,2047
 8017310:	003e1406 	br	8016b64 <__subdf3+0x84>
 8017314:	0005883a 	mov	r2,zero
 8017318:	003f7506 	br	80170f0 <__subdf3+0x610>
 801731c:	0005883a 	mov	r2,zero
 8017320:	0009883a 	mov	r4,zero
 8017324:	003e7806 	br	8016d08 <__subdf3+0x228>
 8017328:	123ff804 	addi	r8,r2,-32
 801732c:	01000804 	movi	r4,32
 8017330:	1a10d83a 	srl	r8,r3,r8
 8017334:	11002526 	beq	r2,r4,80173cc <__subdf3+0x8ec>
 8017338:	01001004 	movi	r4,64
 801733c:	2085c83a 	sub	r2,r4,r2
 8017340:	1884983a 	sll	r2,r3,r2
 8017344:	1444b03a 	or	r2,r2,r17
 8017348:	1004c03a 	cmpne	r2,r2,zero
 801734c:	40a2b03a 	or	r17,r8,r2
 8017350:	0005883a 	mov	r2,zero
 8017354:	003f1606 	br	8016fb0 <__subdf3+0x4d0>
 8017358:	02000434 	movhi	r8,16
 801735c:	0009883a 	mov	r4,zero
 8017360:	423fffc4 	addi	r8,r8,-1
 8017364:	00bfffc4 	movi	r2,-1
 8017368:	0401ffc4 	movi	r16,2047
 801736c:	003e6606 	br	8016d08 <__subdf3+0x228>
 8017370:	1c62b03a 	or	r17,r3,r17
 8017374:	8822c03a 	cmpne	r17,r17,zero
 8017378:	0005883a 	mov	r2,zero
 801737c:	003f9906 	br	80171e4 <__subdf3+0x704>
 8017380:	2807883a 	mov	r3,r5
 8017384:	3023883a 	mov	r17,r6
 8017388:	0401ffc4 	movi	r16,2047
 801738c:	003df506 	br	8016b64 <__subdf3+0x84>
 8017390:	2807883a 	mov	r3,r5
 8017394:	3023883a 	mov	r17,r6
 8017398:	003df206 	br	8016b64 <__subdf3+0x84>
 801739c:	123ff804 	addi	r8,r2,-32
 80173a0:	01000804 	movi	r4,32
 80173a4:	1a10d83a 	srl	r8,r3,r8
 80173a8:	11000a26 	beq	r2,r4,80173d4 <__subdf3+0x8f4>
 80173ac:	01001004 	movi	r4,64
 80173b0:	2085c83a 	sub	r2,r4,r2
 80173b4:	1884983a 	sll	r2,r3,r2
 80173b8:	1444b03a 	or	r2,r2,r17
 80173bc:	1004c03a 	cmpne	r2,r2,zero
 80173c0:	40a2b03a 	or	r17,r8,r2
 80173c4:	0005883a 	mov	r2,zero
 80173c8:	003f8606 	br	80171e4 <__subdf3+0x704>
 80173cc:	0005883a 	mov	r2,zero
 80173d0:	003fdc06 	br	8017344 <__subdf3+0x864>
 80173d4:	0005883a 	mov	r2,zero
 80173d8:	003ff706 	br	80173b8 <__subdf3+0x8d8>

080173dc <__fixdfsi>:
 80173dc:	280cd53a 	srli	r6,r5,20
 80173e0:	00c00434 	movhi	r3,16
 80173e4:	18ffffc4 	addi	r3,r3,-1
 80173e8:	3181ffcc 	andi	r6,r6,2047
 80173ec:	01c0ff84 	movi	r7,1022
 80173f0:	28c6703a 	and	r3,r5,r3
 80173f4:	280ad7fa 	srli	r5,r5,31
 80173f8:	3980120e 	bge	r7,r6,8017444 <__fixdfsi+0x68>
 80173fc:	00810744 	movi	r2,1053
 8017400:	11800c16 	blt	r2,r6,8017434 <__fixdfsi+0x58>
 8017404:	00810cc4 	movi	r2,1075
 8017408:	1185c83a 	sub	r2,r2,r6
 801740c:	01c007c4 	movi	r7,31
 8017410:	18c00434 	orhi	r3,r3,16
 8017414:	38800d16 	blt	r7,r2,801744c <__fixdfsi+0x70>
 8017418:	31befb44 	addi	r6,r6,-1043
 801741c:	2084d83a 	srl	r2,r4,r2
 8017420:	1986983a 	sll	r3,r3,r6
 8017424:	1884b03a 	or	r2,r3,r2
 8017428:	28000726 	beq	r5,zero,8017448 <__fixdfsi+0x6c>
 801742c:	0085c83a 	sub	r2,zero,r2
 8017430:	f800283a 	ret
 8017434:	00a00034 	movhi	r2,32768
 8017438:	10bfffc4 	addi	r2,r2,-1
 801743c:	2885883a 	add	r2,r5,r2
 8017440:	f800283a 	ret
 8017444:	0005883a 	mov	r2,zero
 8017448:	f800283a 	ret
 801744c:	008104c4 	movi	r2,1043
 8017450:	1185c83a 	sub	r2,r2,r6
 8017454:	1884d83a 	srl	r2,r3,r2
 8017458:	003ff306 	br	8017428 <__fixdfsi+0x4c>

0801745c <__floatsidf>:
 801745c:	defffd04 	addi	sp,sp,-12
 8017460:	dfc00215 	stw	ra,8(sp)
 8017464:	dc400115 	stw	r17,4(sp)
 8017468:	dc000015 	stw	r16,0(sp)
 801746c:	20002b26 	beq	r4,zero,801751c <__floatsidf+0xc0>
 8017470:	2023883a 	mov	r17,r4
 8017474:	2020d7fa 	srli	r16,r4,31
 8017478:	20002d16 	blt	r4,zero,8017530 <__floatsidf+0xd4>
 801747c:	8809883a 	mov	r4,r17
 8017480:	80175e00 	call	80175e0 <__clzsi2>
 8017484:	01410784 	movi	r5,1054
 8017488:	288bc83a 	sub	r5,r5,r2
 801748c:	01010cc4 	movi	r4,1075
 8017490:	2149c83a 	sub	r4,r4,r5
 8017494:	00c007c4 	movi	r3,31
 8017498:	1900160e 	bge	r3,r4,80174f4 <__floatsidf+0x98>
 801749c:	00c104c4 	movi	r3,1043
 80174a0:	1947c83a 	sub	r3,r3,r5
 80174a4:	88c6983a 	sll	r3,r17,r3
 80174a8:	00800434 	movhi	r2,16
 80174ac:	10bfffc4 	addi	r2,r2,-1
 80174b0:	1886703a 	and	r3,r3,r2
 80174b4:	2941ffcc 	andi	r5,r5,2047
 80174b8:	800d883a 	mov	r6,r16
 80174bc:	0005883a 	mov	r2,zero
 80174c0:	280a953a 	slli	r5,r5,20
 80174c4:	31803fcc 	andi	r6,r6,255
 80174c8:	01000434 	movhi	r4,16
 80174cc:	300c97fa 	slli	r6,r6,31
 80174d0:	213fffc4 	addi	r4,r4,-1
 80174d4:	1906703a 	and	r3,r3,r4
 80174d8:	1946b03a 	or	r3,r3,r5
 80174dc:	1986b03a 	or	r3,r3,r6
 80174e0:	dfc00217 	ldw	ra,8(sp)
 80174e4:	dc400117 	ldw	r17,4(sp)
 80174e8:	dc000017 	ldw	r16,0(sp)
 80174ec:	dec00304 	addi	sp,sp,12
 80174f0:	f800283a 	ret
 80174f4:	00c002c4 	movi	r3,11
 80174f8:	1887c83a 	sub	r3,r3,r2
 80174fc:	88c6d83a 	srl	r3,r17,r3
 8017500:	8904983a 	sll	r2,r17,r4
 8017504:	01000434 	movhi	r4,16
 8017508:	213fffc4 	addi	r4,r4,-1
 801750c:	2941ffcc 	andi	r5,r5,2047
 8017510:	1906703a 	and	r3,r3,r4
 8017514:	800d883a 	mov	r6,r16
 8017518:	003fe906 	br	80174c0 <__floatsidf+0x64>
 801751c:	000d883a 	mov	r6,zero
 8017520:	000b883a 	mov	r5,zero
 8017524:	0007883a 	mov	r3,zero
 8017528:	0005883a 	mov	r2,zero
 801752c:	003fe406 	br	80174c0 <__floatsidf+0x64>
 8017530:	0123c83a 	sub	r17,zero,r4
 8017534:	003fd106 	br	801747c <__floatsidf+0x20>

08017538 <__floatunsidf>:
 8017538:	defffe04 	addi	sp,sp,-8
 801753c:	dc000015 	stw	r16,0(sp)
 8017540:	dfc00115 	stw	ra,4(sp)
 8017544:	2021883a 	mov	r16,r4
 8017548:	20002226 	beq	r4,zero,80175d4 <__floatunsidf+0x9c>
 801754c:	80175e00 	call	80175e0 <__clzsi2>
 8017550:	01010784 	movi	r4,1054
 8017554:	2089c83a 	sub	r4,r4,r2
 8017558:	01810cc4 	movi	r6,1075
 801755c:	310dc83a 	sub	r6,r6,r4
 8017560:	00c007c4 	movi	r3,31
 8017564:	1980120e 	bge	r3,r6,80175b0 <__floatunsidf+0x78>
 8017568:	00c104c4 	movi	r3,1043
 801756c:	1907c83a 	sub	r3,r3,r4
 8017570:	80ca983a 	sll	r5,r16,r3
 8017574:	00800434 	movhi	r2,16
 8017578:	10bfffc4 	addi	r2,r2,-1
 801757c:	2101ffcc 	andi	r4,r4,2047
 8017580:	0021883a 	mov	r16,zero
 8017584:	288a703a 	and	r5,r5,r2
 8017588:	2008953a 	slli	r4,r4,20
 801758c:	00c00434 	movhi	r3,16
 8017590:	18ffffc4 	addi	r3,r3,-1
 8017594:	28c6703a 	and	r3,r5,r3
 8017598:	8005883a 	mov	r2,r16
 801759c:	1906b03a 	or	r3,r3,r4
 80175a0:	dfc00117 	ldw	ra,4(sp)
 80175a4:	dc000017 	ldw	r16,0(sp)
 80175a8:	dec00204 	addi	sp,sp,8
 80175ac:	f800283a 	ret
 80175b0:	00c002c4 	movi	r3,11
 80175b4:	188bc83a 	sub	r5,r3,r2
 80175b8:	814ad83a 	srl	r5,r16,r5
 80175bc:	00c00434 	movhi	r3,16
 80175c0:	18ffffc4 	addi	r3,r3,-1
 80175c4:	81a0983a 	sll	r16,r16,r6
 80175c8:	2101ffcc 	andi	r4,r4,2047
 80175cc:	28ca703a 	and	r5,r5,r3
 80175d0:	003fed06 	br	8017588 <__floatunsidf+0x50>
 80175d4:	0009883a 	mov	r4,zero
 80175d8:	000b883a 	mov	r5,zero
 80175dc:	003fea06 	br	8017588 <__floatunsidf+0x50>

080175e0 <__clzsi2>:
 80175e0:	00bfffd4 	movui	r2,65535
 80175e4:	11000536 	bltu	r2,r4,80175fc <__clzsi2+0x1c>
 80175e8:	00803fc4 	movi	r2,255
 80175ec:	11000f36 	bltu	r2,r4,801762c <__clzsi2+0x4c>
 80175f0:	00800804 	movi	r2,32
 80175f4:	0007883a 	mov	r3,zero
 80175f8:	00000506 	br	8017610 <__clzsi2+0x30>
 80175fc:	00804034 	movhi	r2,256
 8017600:	10bfffc4 	addi	r2,r2,-1
 8017604:	11000c2e 	bgeu	r2,r4,8017638 <__clzsi2+0x58>
 8017608:	00800204 	movi	r2,8
 801760c:	00c00604 	movi	r3,24
 8017610:	20c8d83a 	srl	r4,r4,r3
 8017614:	00c200b4 	movhi	r3,2050
 8017618:	18eb0504 	addi	r3,r3,-21484
 801761c:	1909883a 	add	r4,r3,r4
 8017620:	20c00003 	ldbu	r3,0(r4)
 8017624:	10c5c83a 	sub	r2,r2,r3
 8017628:	f800283a 	ret
 801762c:	00800604 	movi	r2,24
 8017630:	00c00204 	movi	r3,8
 8017634:	003ff606 	br	8017610 <__clzsi2+0x30>
 8017638:	00800404 	movi	r2,16
 801763c:	1007883a 	mov	r3,r2
 8017640:	003ff306 	br	8017610 <__clzsi2+0x30>

08017644 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8017644:	defffe04 	addi	sp,sp,-8
 8017648:	dfc00115 	stw	ra,4(sp)
 801764c:	df000015 	stw	fp,0(sp)
 8017650:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8017654:	d0a01f17 	ldw	r2,-32644(gp)
 8017658:	10000326 	beq	r2,zero,8017668 <alt_get_errno+0x24>
 801765c:	d0a01f17 	ldw	r2,-32644(gp)
 8017660:	103ee83a 	callr	r2
 8017664:	00000106 	br	801766c <alt_get_errno+0x28>
 8017668:	d0a73c04 	addi	r2,gp,-25360
}
 801766c:	e037883a 	mov	sp,fp
 8017670:	dfc00117 	ldw	ra,4(sp)
 8017674:	df000017 	ldw	fp,0(sp)
 8017678:	dec00204 	addi	sp,sp,8
 801767c:	f800283a 	ret

08017680 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8017680:	defffb04 	addi	sp,sp,-20
 8017684:	dfc00415 	stw	ra,16(sp)
 8017688:	df000315 	stw	fp,12(sp)
 801768c:	df000304 	addi	fp,sp,12
 8017690:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8017694:	e0bfff17 	ldw	r2,-4(fp)
 8017698:	10000816 	blt	r2,zero,80176bc <close+0x3c>
 801769c:	01400304 	movi	r5,12
 80176a0:	e13fff17 	ldw	r4,-4(fp)
 80176a4:	800a1780 	call	800a178 <__mulsi3>
 80176a8:	1007883a 	mov	r3,r2
 80176ac:	008200b4 	movhi	r2,2050
 80176b0:	10ad9904 	addi	r2,r2,-18844
 80176b4:	1885883a 	add	r2,r3,r2
 80176b8:	00000106 	br	80176c0 <close+0x40>
 80176bc:	0005883a 	mov	r2,zero
 80176c0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 80176c4:	e0bffd17 	ldw	r2,-12(fp)
 80176c8:	10001926 	beq	r2,zero,8017730 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 80176cc:	e0bffd17 	ldw	r2,-12(fp)
 80176d0:	10800017 	ldw	r2,0(r2)
 80176d4:	10800417 	ldw	r2,16(r2)
 80176d8:	10000626 	beq	r2,zero,80176f4 <close+0x74>
 80176dc:	e0bffd17 	ldw	r2,-12(fp)
 80176e0:	10800017 	ldw	r2,0(r2)
 80176e4:	10800417 	ldw	r2,16(r2)
 80176e8:	e13ffd17 	ldw	r4,-12(fp)
 80176ec:	103ee83a 	callr	r2
 80176f0:	00000106 	br	80176f8 <close+0x78>
 80176f4:	0005883a 	mov	r2,zero
 80176f8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 80176fc:	e13fff17 	ldw	r4,-4(fp)
 8017700:	8017f5c0 	call	8017f5c <alt_release_fd>
    if (rval < 0)
 8017704:	e0bffe17 	ldw	r2,-8(fp)
 8017708:	1000070e 	bge	r2,zero,8017728 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 801770c:	80176440 	call	8017644 <alt_get_errno>
 8017710:	1007883a 	mov	r3,r2
 8017714:	e0bffe17 	ldw	r2,-8(fp)
 8017718:	0085c83a 	sub	r2,zero,r2
 801771c:	18800015 	stw	r2,0(r3)
      return -1;
 8017720:	00bfffc4 	movi	r2,-1
 8017724:	00000706 	br	8017744 <close+0xc4>
    }
    return 0;
 8017728:	0005883a 	mov	r2,zero
 801772c:	00000506 	br	8017744 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8017730:	80176440 	call	8017644 <alt_get_errno>
 8017734:	1007883a 	mov	r3,r2
 8017738:	00801444 	movi	r2,81
 801773c:	18800015 	stw	r2,0(r3)
    return -1;
 8017740:	00bfffc4 	movi	r2,-1
  }
}
 8017744:	e037883a 	mov	sp,fp
 8017748:	dfc00117 	ldw	ra,4(sp)
 801774c:	df000017 	ldw	fp,0(sp)
 8017750:	dec00204 	addi	sp,sp,8
 8017754:	f800283a 	ret

08017758 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8017758:	defffc04 	addi	sp,sp,-16
 801775c:	df000315 	stw	fp,12(sp)
 8017760:	df000304 	addi	fp,sp,12
 8017764:	e13ffd15 	stw	r4,-12(fp)
 8017768:	e17ffe15 	stw	r5,-8(fp)
 801776c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8017770:	e0bfff17 	ldw	r2,-4(fp)
}
 8017774:	e037883a 	mov	sp,fp
 8017778:	df000017 	ldw	fp,0(sp)
 801777c:	dec00104 	addi	sp,sp,4
 8017780:	f800283a 	ret

08017784 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8017784:	defffe04 	addi	sp,sp,-8
 8017788:	dfc00115 	stw	ra,4(sp)
 801778c:	df000015 	stw	fp,0(sp)
 8017790:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8017794:	d0a01f17 	ldw	r2,-32644(gp)
 8017798:	10000326 	beq	r2,zero,80177a8 <alt_get_errno+0x24>
 801779c:	d0a01f17 	ldw	r2,-32644(gp)
 80177a0:	103ee83a 	callr	r2
 80177a4:	00000106 	br	80177ac <alt_get_errno+0x28>
 80177a8:	d0a73c04 	addi	r2,gp,-25360
}
 80177ac:	e037883a 	mov	sp,fp
 80177b0:	dfc00117 	ldw	ra,4(sp)
 80177b4:	df000017 	ldw	fp,0(sp)
 80177b8:	dec00204 	addi	sp,sp,8
 80177bc:	f800283a 	ret

080177c0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 80177c0:	defffb04 	addi	sp,sp,-20
 80177c4:	dfc00415 	stw	ra,16(sp)
 80177c8:	df000315 	stw	fp,12(sp)
 80177cc:	df000304 	addi	fp,sp,12
 80177d0:	e13ffe15 	stw	r4,-8(fp)
 80177d4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80177d8:	e0bffe17 	ldw	r2,-8(fp)
 80177dc:	10000816 	blt	r2,zero,8017800 <fstat+0x40>
 80177e0:	01400304 	movi	r5,12
 80177e4:	e13ffe17 	ldw	r4,-8(fp)
 80177e8:	800a1780 	call	800a178 <__mulsi3>
 80177ec:	1007883a 	mov	r3,r2
 80177f0:	008200b4 	movhi	r2,2050
 80177f4:	10ad9904 	addi	r2,r2,-18844
 80177f8:	1885883a 	add	r2,r3,r2
 80177fc:	00000106 	br	8017804 <fstat+0x44>
 8017800:	0005883a 	mov	r2,zero
 8017804:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8017808:	e0bffd17 	ldw	r2,-12(fp)
 801780c:	10001026 	beq	r2,zero,8017850 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8017810:	e0bffd17 	ldw	r2,-12(fp)
 8017814:	10800017 	ldw	r2,0(r2)
 8017818:	10800817 	ldw	r2,32(r2)
 801781c:	10000726 	beq	r2,zero,801783c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 8017820:	e0bffd17 	ldw	r2,-12(fp)
 8017824:	10800017 	ldw	r2,0(r2)
 8017828:	10800817 	ldw	r2,32(r2)
 801782c:	e17fff17 	ldw	r5,-4(fp)
 8017830:	e13ffd17 	ldw	r4,-12(fp)
 8017834:	103ee83a 	callr	r2
 8017838:	00000a06 	br	8017864 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 801783c:	e0bfff17 	ldw	r2,-4(fp)
 8017840:	00c80004 	movi	r3,8192
 8017844:	10c00115 	stw	r3,4(r2)
      return 0;
 8017848:	0005883a 	mov	r2,zero
 801784c:	00000506 	br	8017864 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8017850:	80177840 	call	8017784 <alt_get_errno>
 8017854:	1007883a 	mov	r3,r2
 8017858:	00801444 	movi	r2,81
 801785c:	18800015 	stw	r2,0(r3)
    return -1;
 8017860:	00bfffc4 	movi	r2,-1
  }
}
 8017864:	e037883a 	mov	sp,fp
 8017868:	dfc00117 	ldw	ra,4(sp)
 801786c:	df000017 	ldw	fp,0(sp)
 8017870:	dec00204 	addi	sp,sp,8
 8017874:	f800283a 	ret

08017878 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
 8017878:	defff404 	addi	sp,sp,-48
 801787c:	dfc00b15 	stw	ra,44(sp)
 8017880:	df000a15 	stw	fp,40(sp)
 8017884:	dd000915 	stw	r20,36(sp)
 8017888:	dcc00815 	stw	r19,32(sp)
 801788c:	dc800715 	stw	r18,28(sp)
 8017890:	dc400615 	stw	r17,24(sp)
 8017894:	dc000515 	stw	r16,20(sp)
 8017898:	df000a04 	addi	fp,sp,40
 801789c:	e13ff915 	stw	r4,-28(fp)
 80178a0:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
 80178a4:	e0bffa17 	ldw	r2,-24(fp)
 80178a8:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80178ac:	d0a74817 	ldw	r2,-25312(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
 80178b0:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80178b4:	d0a74717 	ldw	r2,-25316(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
 80178b8:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
 80178bc:	e0bff817 	ldw	r2,-32(fp)
 80178c0:	10005f26 	beq	r2,zero,8017a40 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 80178c4:	d0a74217 	ldw	r2,-25336(gp)
 80178c8:	1029883a 	mov	r20,r2
 80178cc:	e17ff817 	ldw	r5,-32(fp)
 80178d0:	e13ff717 	ldw	r4,-36(fp)
 80178d4:	800a0bc0 	call	800a0bc <__udivsi3>
 80178d8:	a085883a 	add	r2,r20,r2
 80178dc:	1007883a 	mov	r3,r2
 80178e0:	e0bff917 	ldw	r2,-28(fp)
 80178e4:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
 80178e8:	d0a74317 	ldw	r2,-25332(gp)
 80178ec:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
 80178f0:	e0bff717 	ldw	r2,-36(fp)
 80178f4:	1021883a 	mov	r16,r2
 80178f8:	0023883a 	mov	r17,zero
 80178fc:	e17ff817 	ldw	r5,-32(fp)
 8017900:	010003f4 	movhi	r4,15
 8017904:	21109004 	addi	r4,r4,16960
 8017908:	800a0bc0 	call	800a0bc <__udivsi3>
 801790c:	1025883a 	mov	r18,r2
 8017910:	0027883a 	mov	r19,zero
 8017914:	900d883a 	mov	r6,r18
 8017918:	980f883a 	mov	r7,r19
 801791c:	8009883a 	mov	r4,r16
 8017920:	880b883a 	mov	r5,r17
 8017924:	801a3680 	call	801a368 <__muldi3>
 8017928:	1009883a 	mov	r4,r2
 801792c:	180b883a 	mov	r5,r3
 8017930:	2005883a 	mov	r2,r4
 8017934:	2807883a 	mov	r3,r5
 8017938:	018003f4 	movhi	r6,15
 801793c:	31909004 	addi	r6,r6,16960
 8017940:	000f883a 	mov	r7,zero
 8017944:	1009883a 	mov	r4,r2
 8017948:	180b883a 	mov	r5,r3
 801794c:	80147dc0 	call	80147dc <__umoddi3>
 8017950:	1009883a 	mov	r4,r2
 8017954:	180b883a 	mov	r5,r3
 8017958:	2005883a 	mov	r2,r4
 801795c:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
 8017960:	a085883a 	add	r2,r20,r2
 8017964:	1007883a 	mov	r3,r2
 8017968:	e0bff917 	ldw	r2,-28(fp)
 801796c:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 8017970:	00001406 	br	80179c4 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
 8017974:	e0bff917 	ldw	r2,-28(fp)
 8017978:	10800017 	ldw	r2,0(r2)
 801797c:	00800516 	blt	zero,r2,8017994 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
 8017980:	e0bff917 	ldw	r2,-28(fp)
 8017984:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
 8017988:	e0bff917 	ldw	r2,-28(fp)
 801798c:	10000115 	stw	zero,4(r2)
          break;
 8017990:	00000f06 	br	80179d0 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
 8017994:	e0bff917 	ldw	r2,-28(fp)
 8017998:	10800017 	ldw	r2,0(r2)
 801799c:	10ffffc4 	addi	r3,r2,-1
 80179a0:	e0bff917 	ldw	r2,-28(fp)
 80179a4:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
 80179a8:	e0bff917 	ldw	r2,-28(fp)
 80179ac:	10c00117 	ldw	r3,4(r2)
 80179b0:	008003f4 	movhi	r2,15
 80179b4:	10909004 	addi	r2,r2,16960
 80179b8:	1887883a 	add	r3,r3,r2
 80179bc:	e0bff917 	ldw	r2,-28(fp)
 80179c0:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 80179c4:	e0bff917 	ldw	r2,-28(fp)
 80179c8:	10800117 	ldw	r2,4(r2)
 80179cc:	103fe916 	blt	r2,zero,8017974 <gettimeofday+0xfc>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 80179d0:	00000c06 	br	8017a04 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
 80179d4:	e0bff917 	ldw	r2,-28(fp)
 80179d8:	10800017 	ldw	r2,0(r2)
 80179dc:	10c00044 	addi	r3,r2,1
 80179e0:	e0bff917 	ldw	r2,-28(fp)
 80179e4:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
 80179e8:	e0bff917 	ldw	r2,-28(fp)
 80179ec:	10c00117 	ldw	r3,4(r2)
 80179f0:	00bffc74 	movhi	r2,65521
 80179f4:	10af7004 	addi	r2,r2,-16960
 80179f8:	1887883a 	add	r3,r3,r2
 80179fc:	e0bff917 	ldw	r2,-28(fp)
 8017a00:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 8017a04:	e0bff917 	ldw	r2,-28(fp)
 8017a08:	10c00117 	ldw	r3,4(r2)
 8017a0c:	008003f4 	movhi	r2,15
 8017a10:	10908fc4 	addi	r2,r2,16959
 8017a14:	10ffef16 	blt	r2,r3,80179d4 <gettimeofday+0x15c>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
 8017a18:	e0bff617 	ldw	r2,-40(fp)
 8017a1c:	10000626 	beq	r2,zero,8017a38 <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
 8017a20:	d0e74017 	ldw	r3,-25344(gp)
 8017a24:	e0bff617 	ldw	r2,-40(fp)
 8017a28:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
 8017a2c:	d0e74117 	ldw	r3,-25340(gp)
 8017a30:	e0bff617 	ldw	r2,-40(fp)
 8017a34:	10c00115 	stw	r3,4(r2)
    }

    return 0;
 8017a38:	0005883a 	mov	r2,zero
 8017a3c:	00000106 	br	8017a44 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
 8017a40:	00bfde84 	movi	r2,-134
}
 8017a44:	e6fffb04 	addi	sp,fp,-20
 8017a48:	dfc00617 	ldw	ra,24(sp)
 8017a4c:	df000517 	ldw	fp,20(sp)
 8017a50:	dd000417 	ldw	r20,16(sp)
 8017a54:	dcc00317 	ldw	r19,12(sp)
 8017a58:	dc800217 	ldw	r18,8(sp)
 8017a5c:	dc400117 	ldw	r17,4(sp)
 8017a60:	dc000017 	ldw	r16,0(sp)
 8017a64:	dec00704 	addi	sp,sp,28
 8017a68:	f800283a 	ret

08017a6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8017a6c:	defffe04 	addi	sp,sp,-8
 8017a70:	dfc00115 	stw	ra,4(sp)
 8017a74:	df000015 	stw	fp,0(sp)
 8017a78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8017a7c:	d0a01f17 	ldw	r2,-32644(gp)
 8017a80:	10000326 	beq	r2,zero,8017a90 <alt_get_errno+0x24>
 8017a84:	d0a01f17 	ldw	r2,-32644(gp)
 8017a88:	103ee83a 	callr	r2
 8017a8c:	00000106 	br	8017a94 <alt_get_errno+0x28>
 8017a90:	d0a73c04 	addi	r2,gp,-25360
}
 8017a94:	e037883a 	mov	sp,fp
 8017a98:	dfc00117 	ldw	ra,4(sp)
 8017a9c:	df000017 	ldw	fp,0(sp)
 8017aa0:	dec00204 	addi	sp,sp,8
 8017aa4:	f800283a 	ret

08017aa8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8017aa8:	deffed04 	addi	sp,sp,-76
 8017aac:	dfc01215 	stw	ra,72(sp)
 8017ab0:	df001115 	stw	fp,68(sp)
 8017ab4:	df001104 	addi	fp,sp,68
 8017ab8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8017abc:	e0bfff17 	ldw	r2,-4(fp)
 8017ac0:	10000816 	blt	r2,zero,8017ae4 <isatty+0x3c>
 8017ac4:	01400304 	movi	r5,12
 8017ac8:	e13fff17 	ldw	r4,-4(fp)
 8017acc:	800a1780 	call	800a178 <__mulsi3>
 8017ad0:	1007883a 	mov	r3,r2
 8017ad4:	008200b4 	movhi	r2,2050
 8017ad8:	10ad9904 	addi	r2,r2,-18844
 8017adc:	1885883a 	add	r2,r3,r2
 8017ae0:	00000106 	br	8017ae8 <isatty+0x40>
 8017ae4:	0005883a 	mov	r2,zero
 8017ae8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8017aec:	e0bfef17 	ldw	r2,-68(fp)
 8017af0:	10000e26 	beq	r2,zero,8017b2c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8017af4:	e0bfef17 	ldw	r2,-68(fp)
 8017af8:	10800017 	ldw	r2,0(r2)
 8017afc:	10800817 	ldw	r2,32(r2)
 8017b00:	1000021e 	bne	r2,zero,8017b0c <isatty+0x64>
    {
      return 1;
 8017b04:	00800044 	movi	r2,1
 8017b08:	00000d06 	br	8017b40 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8017b0c:	e0bff004 	addi	r2,fp,-64
 8017b10:	100b883a 	mov	r5,r2
 8017b14:	e13fff17 	ldw	r4,-4(fp)
 8017b18:	80177c00 	call	80177c0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8017b1c:	e0bff117 	ldw	r2,-60(fp)
 8017b20:	10880020 	cmpeqi	r2,r2,8192
 8017b24:	10803fcc 	andi	r2,r2,255
 8017b28:	00000506 	br	8017b40 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8017b2c:	8017a6c0 	call	8017a6c <alt_get_errno>
 8017b30:	1007883a 	mov	r3,r2
 8017b34:	00801444 	movi	r2,81
 8017b38:	18800015 	stw	r2,0(r3)
    return 0;
 8017b3c:	0005883a 	mov	r2,zero
  }
}
 8017b40:	e037883a 	mov	sp,fp
 8017b44:	dfc00117 	ldw	ra,4(sp)
 8017b48:	df000017 	ldw	fp,0(sp)
 8017b4c:	dec00204 	addi	sp,sp,8
 8017b50:	f800283a 	ret

08017b54 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8017b54:	defffc04 	addi	sp,sp,-16
 8017b58:	df000315 	stw	fp,12(sp)
 8017b5c:	df000304 	addi	fp,sp,12
 8017b60:	e13ffd15 	stw	r4,-12(fp)
 8017b64:	e17ffe15 	stw	r5,-8(fp)
 8017b68:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8017b6c:	e0fffe17 	ldw	r3,-8(fp)
 8017b70:	e0bffd17 	ldw	r2,-12(fp)
 8017b74:	18800c26 	beq	r3,r2,8017ba8 <alt_load_section+0x54>
  {
    while( to != end )
 8017b78:	00000806 	br	8017b9c <alt_load_section+0x48>
    {
      *to++ = *from++;
 8017b7c:	e0bffe17 	ldw	r2,-8(fp)
 8017b80:	10c00104 	addi	r3,r2,4
 8017b84:	e0fffe15 	stw	r3,-8(fp)
 8017b88:	e0fffd17 	ldw	r3,-12(fp)
 8017b8c:	19000104 	addi	r4,r3,4
 8017b90:	e13ffd15 	stw	r4,-12(fp)
 8017b94:	18c00017 	ldw	r3,0(r3)
 8017b98:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8017b9c:	e0fffe17 	ldw	r3,-8(fp)
 8017ba0:	e0bfff17 	ldw	r2,-4(fp)
 8017ba4:	18bff51e 	bne	r3,r2,8017b7c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 8017ba8:	0001883a 	nop
 8017bac:	e037883a 	mov	sp,fp
 8017bb0:	df000017 	ldw	fp,0(sp)
 8017bb4:	dec00104 	addi	sp,sp,4
 8017bb8:	f800283a 	ret

08017bbc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8017bbc:	defffe04 	addi	sp,sp,-8
 8017bc0:	dfc00115 	stw	ra,4(sp)
 8017bc4:	df000015 	stw	fp,0(sp)
 8017bc8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8017bcc:	018200b4 	movhi	r6,2050
 8017bd0:	31b23504 	addi	r6,r6,-14124
 8017bd4:	014200b4 	movhi	r5,2050
 8017bd8:	296b5204 	addi	r5,r5,-21176
 8017bdc:	010200b4 	movhi	r4,2050
 8017be0:	21323504 	addi	r4,r4,-14124
 8017be4:	8017b540 	call	8017b54 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8017be8:	01820034 	movhi	r6,2048
 8017bec:	31808c04 	addi	r6,r6,560
 8017bf0:	01420034 	movhi	r5,2048
 8017bf4:	29400804 	addi	r5,r5,32
 8017bf8:	01020034 	movhi	r4,2048
 8017bfc:	21000804 	addi	r4,r4,32
 8017c00:	8017b540 	call	8017b54 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8017c04:	018200b4 	movhi	r6,2050
 8017c08:	31ab5204 	addi	r6,r6,-21176
 8017c0c:	014200b4 	movhi	r5,2050
 8017c10:	29692a04 	addi	r5,r5,-23384
 8017c14:	010200b4 	movhi	r4,2050
 8017c18:	21292a04 	addi	r4,r4,-23384
 8017c1c:	8017b540 	call	8017b54 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8017c20:	80195040 	call	8019504 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8017c24:	80196c40 	call	80196c4 <alt_icache_flush_all>
}
 8017c28:	0001883a 	nop
 8017c2c:	e037883a 	mov	sp,fp
 8017c30:	dfc00117 	ldw	ra,4(sp)
 8017c34:	df000017 	ldw	fp,0(sp)
 8017c38:	dec00204 	addi	sp,sp,8
 8017c3c:	f800283a 	ret

08017c40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8017c40:	defffe04 	addi	sp,sp,-8
 8017c44:	dfc00115 	stw	ra,4(sp)
 8017c48:	df000015 	stw	fp,0(sp)
 8017c4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8017c50:	d0a01f17 	ldw	r2,-32644(gp)
 8017c54:	10000326 	beq	r2,zero,8017c64 <alt_get_errno+0x24>
 8017c58:	d0a01f17 	ldw	r2,-32644(gp)
 8017c5c:	103ee83a 	callr	r2
 8017c60:	00000106 	br	8017c68 <alt_get_errno+0x28>
 8017c64:	d0a73c04 	addi	r2,gp,-25360
}
 8017c68:	e037883a 	mov	sp,fp
 8017c6c:	dfc00117 	ldw	ra,4(sp)
 8017c70:	df000017 	ldw	fp,0(sp)
 8017c74:	dec00204 	addi	sp,sp,8
 8017c78:	f800283a 	ret

08017c7c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8017c7c:	defff904 	addi	sp,sp,-28
 8017c80:	dfc00615 	stw	ra,24(sp)
 8017c84:	df000515 	stw	fp,20(sp)
 8017c88:	df000504 	addi	fp,sp,20
 8017c8c:	e13ffd15 	stw	r4,-12(fp)
 8017c90:	e17ffe15 	stw	r5,-8(fp)
 8017c94:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8017c98:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8017c9c:	e0bffd17 	ldw	r2,-12(fp)
 8017ca0:	10000816 	blt	r2,zero,8017cc4 <lseek+0x48>
 8017ca4:	01400304 	movi	r5,12
 8017ca8:	e13ffd17 	ldw	r4,-12(fp)
 8017cac:	800a1780 	call	800a178 <__mulsi3>
 8017cb0:	1007883a 	mov	r3,r2
 8017cb4:	008200b4 	movhi	r2,2050
 8017cb8:	10ad9904 	addi	r2,r2,-18844
 8017cbc:	1885883a 	add	r2,r3,r2
 8017cc0:	00000106 	br	8017cc8 <lseek+0x4c>
 8017cc4:	0005883a 	mov	r2,zero
 8017cc8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8017ccc:	e0bffc17 	ldw	r2,-16(fp)
 8017cd0:	10001026 	beq	r2,zero,8017d14 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8017cd4:	e0bffc17 	ldw	r2,-16(fp)
 8017cd8:	10800017 	ldw	r2,0(r2)
 8017cdc:	10800717 	ldw	r2,28(r2)
 8017ce0:	10000926 	beq	r2,zero,8017d08 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8017ce4:	e0bffc17 	ldw	r2,-16(fp)
 8017ce8:	10800017 	ldw	r2,0(r2)
 8017cec:	10800717 	ldw	r2,28(r2)
 8017cf0:	e1bfff17 	ldw	r6,-4(fp)
 8017cf4:	e17ffe17 	ldw	r5,-8(fp)
 8017cf8:	e13ffc17 	ldw	r4,-16(fp)
 8017cfc:	103ee83a 	callr	r2
 8017d00:	e0bffb15 	stw	r2,-20(fp)
 8017d04:	00000506 	br	8017d1c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8017d08:	00bfde84 	movi	r2,-134
 8017d0c:	e0bffb15 	stw	r2,-20(fp)
 8017d10:	00000206 	br	8017d1c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 8017d14:	00bfebc4 	movi	r2,-81
 8017d18:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8017d1c:	e0bffb17 	ldw	r2,-20(fp)
 8017d20:	1000070e 	bge	r2,zero,8017d40 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 8017d24:	8017c400 	call	8017c40 <alt_get_errno>
 8017d28:	1007883a 	mov	r3,r2
 8017d2c:	e0bffb17 	ldw	r2,-20(fp)
 8017d30:	0085c83a 	sub	r2,zero,r2
 8017d34:	18800015 	stw	r2,0(r3)
    rc = -1;
 8017d38:	00bfffc4 	movi	r2,-1
 8017d3c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 8017d40:	e0bffb17 	ldw	r2,-20(fp)
}
 8017d44:	e037883a 	mov	sp,fp
 8017d48:	dfc00117 	ldw	ra,4(sp)
 8017d4c:	df000017 	ldw	fp,0(sp)
 8017d50:	dec00204 	addi	sp,sp,8
 8017d54:	f800283a 	ret

08017d58 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8017d58:	defffd04 	addi	sp,sp,-12
 8017d5c:	dfc00215 	stw	ra,8(sp)
 8017d60:	df000115 	stw	fp,4(sp)
 8017d64:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8017d68:	0009883a 	mov	r4,zero
 8017d6c:	80184880 	call	8018488 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8017d70:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8017d74:	80184c00 	call	80184c0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8017d78:	018200b4 	movhi	r6,2050
 8017d7c:	31ab4804 	addi	r6,r6,-21216
 8017d80:	014200b4 	movhi	r5,2050
 8017d84:	296b4804 	addi	r5,r5,-21216
 8017d88:	010200b4 	movhi	r4,2050
 8017d8c:	212b4804 	addi	r4,r4,-21216
 8017d90:	8019a680 	call	8019a68 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8017d94:	80196040 	call	8019604 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8017d98:	010200b4 	movhi	r4,2050
 8017d9c:	21259904 	addi	r4,r4,-27036
 8017da0:	801a0840 	call	801a084 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8017da4:	d0a74417 	ldw	r2,-25328(gp)
 8017da8:	d0e74517 	ldw	r3,-25324(gp)
 8017dac:	d1274617 	ldw	r4,-25320(gp)
 8017db0:	200d883a 	mov	r6,r4
 8017db4:	180b883a 	mov	r5,r3
 8017db8:	1009883a 	mov	r4,r2
 8017dbc:	8008e640 	call	8008e64 <main>
 8017dc0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8017dc4:	01000044 	movi	r4,1
 8017dc8:	80176800 	call	8017680 <close>
  exit (result);
 8017dcc:	e13fff17 	ldw	r4,-4(fp)
 8017dd0:	801a0980 	call	801a098 <exit>

08017dd4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8017dd4:	defffe04 	addi	sp,sp,-8
 8017dd8:	df000115 	stw	fp,4(sp)
 8017ddc:	df000104 	addi	fp,sp,4
 8017de0:	e13fff15 	stw	r4,-4(fp)
}
 8017de4:	0001883a 	nop
 8017de8:	e037883a 	mov	sp,fp
 8017dec:	df000017 	ldw	fp,0(sp)
 8017df0:	dec00104 	addi	sp,sp,4
 8017df4:	f800283a 	ret

08017df8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8017df8:	defffe04 	addi	sp,sp,-8
 8017dfc:	df000115 	stw	fp,4(sp)
 8017e00:	df000104 	addi	fp,sp,4
 8017e04:	e13fff15 	stw	r4,-4(fp)
}
 8017e08:	0001883a 	nop
 8017e0c:	e037883a 	mov	sp,fp
 8017e10:	df000017 	ldw	fp,0(sp)
 8017e14:	dec00104 	addi	sp,sp,4
 8017e18:	f800283a 	ret

08017e1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8017e1c:	defffe04 	addi	sp,sp,-8
 8017e20:	dfc00115 	stw	ra,4(sp)
 8017e24:	df000015 	stw	fp,0(sp)
 8017e28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8017e2c:	d0a01f17 	ldw	r2,-32644(gp)
 8017e30:	10000326 	beq	r2,zero,8017e40 <alt_get_errno+0x24>
 8017e34:	d0a01f17 	ldw	r2,-32644(gp)
 8017e38:	103ee83a 	callr	r2
 8017e3c:	00000106 	br	8017e44 <alt_get_errno+0x28>
 8017e40:	d0a73c04 	addi	r2,gp,-25360
}
 8017e44:	e037883a 	mov	sp,fp
 8017e48:	dfc00117 	ldw	ra,4(sp)
 8017e4c:	df000017 	ldw	fp,0(sp)
 8017e50:	dec00204 	addi	sp,sp,8
 8017e54:	f800283a 	ret

08017e58 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8017e58:	defff904 	addi	sp,sp,-28
 8017e5c:	dfc00615 	stw	ra,24(sp)
 8017e60:	df000515 	stw	fp,20(sp)
 8017e64:	df000504 	addi	fp,sp,20
 8017e68:	e13ffd15 	stw	r4,-12(fp)
 8017e6c:	e17ffe15 	stw	r5,-8(fp)
 8017e70:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8017e74:	e0bffd17 	ldw	r2,-12(fp)
 8017e78:	10000816 	blt	r2,zero,8017e9c <read+0x44>
 8017e7c:	01400304 	movi	r5,12
 8017e80:	e13ffd17 	ldw	r4,-12(fp)
 8017e84:	800a1780 	call	800a178 <__mulsi3>
 8017e88:	1007883a 	mov	r3,r2
 8017e8c:	008200b4 	movhi	r2,2050
 8017e90:	10ad9904 	addi	r2,r2,-18844
 8017e94:	1885883a 	add	r2,r3,r2
 8017e98:	00000106 	br	8017ea0 <read+0x48>
 8017e9c:	0005883a 	mov	r2,zero
 8017ea0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8017ea4:	e0bffb17 	ldw	r2,-20(fp)
 8017ea8:	10002226 	beq	r2,zero,8017f34 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8017eac:	e0bffb17 	ldw	r2,-20(fp)
 8017eb0:	10800217 	ldw	r2,8(r2)
 8017eb4:	108000cc 	andi	r2,r2,3
 8017eb8:	10800060 	cmpeqi	r2,r2,1
 8017ebc:	1000181e 	bne	r2,zero,8017f20 <read+0xc8>
        (fd->dev->read))
 8017ec0:	e0bffb17 	ldw	r2,-20(fp)
 8017ec4:	10800017 	ldw	r2,0(r2)
 8017ec8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8017ecc:	10001426 	beq	r2,zero,8017f20 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8017ed0:	e0bffb17 	ldw	r2,-20(fp)
 8017ed4:	10800017 	ldw	r2,0(r2)
 8017ed8:	10800517 	ldw	r2,20(r2)
 8017edc:	e0ffff17 	ldw	r3,-4(fp)
 8017ee0:	180d883a 	mov	r6,r3
 8017ee4:	e17ffe17 	ldw	r5,-8(fp)
 8017ee8:	e13ffb17 	ldw	r4,-20(fp)
 8017eec:	103ee83a 	callr	r2
 8017ef0:	e0bffc15 	stw	r2,-16(fp)
 8017ef4:	e0bffc17 	ldw	r2,-16(fp)
 8017ef8:	1000070e 	bge	r2,zero,8017f18 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 8017efc:	8017e1c0 	call	8017e1c <alt_get_errno>
 8017f00:	1007883a 	mov	r3,r2
 8017f04:	e0bffc17 	ldw	r2,-16(fp)
 8017f08:	0085c83a 	sub	r2,zero,r2
 8017f0c:	18800015 	stw	r2,0(r3)
          return -1;
 8017f10:	00bfffc4 	movi	r2,-1
 8017f14:	00000c06 	br	8017f48 <read+0xf0>
        }
        return rval;
 8017f18:	e0bffc17 	ldw	r2,-16(fp)
 8017f1c:	00000a06 	br	8017f48 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8017f20:	8017e1c0 	call	8017e1c <alt_get_errno>
 8017f24:	1007883a 	mov	r3,r2
 8017f28:	00800344 	movi	r2,13
 8017f2c:	18800015 	stw	r2,0(r3)
 8017f30:	00000406 	br	8017f44 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8017f34:	8017e1c0 	call	8017e1c <alt_get_errno>
 8017f38:	1007883a 	mov	r3,r2
 8017f3c:	00801444 	movi	r2,81
 8017f40:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8017f44:	00bfffc4 	movi	r2,-1
}
 8017f48:	e037883a 	mov	sp,fp
 8017f4c:	dfc00117 	ldw	ra,4(sp)
 8017f50:	df000017 	ldw	fp,0(sp)
 8017f54:	dec00204 	addi	sp,sp,8
 8017f58:	f800283a 	ret

08017f5c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8017f5c:	defffc04 	addi	sp,sp,-16
 8017f60:	dfc00315 	stw	ra,12(sp)
 8017f64:	df000215 	stw	fp,8(sp)
 8017f68:	dc000115 	stw	r16,4(sp)
 8017f6c:	df000204 	addi	fp,sp,8
 8017f70:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 8017f74:	e0bffe17 	ldw	r2,-8(fp)
 8017f78:	108000d0 	cmplti	r2,r2,3
 8017f7c:	1000111e 	bne	r2,zero,8017fc4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 8017f80:	040200b4 	movhi	r16,2050
 8017f84:	842d9904 	addi	r16,r16,-18844
 8017f88:	e0bffe17 	ldw	r2,-8(fp)
 8017f8c:	01400304 	movi	r5,12
 8017f90:	1009883a 	mov	r4,r2
 8017f94:	800a1780 	call	800a178 <__mulsi3>
 8017f98:	8085883a 	add	r2,r16,r2
 8017f9c:	10800204 	addi	r2,r2,8
 8017fa0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8017fa4:	040200b4 	movhi	r16,2050
 8017fa8:	842d9904 	addi	r16,r16,-18844
 8017fac:	e0bffe17 	ldw	r2,-8(fp)
 8017fb0:	01400304 	movi	r5,12
 8017fb4:	1009883a 	mov	r4,r2
 8017fb8:	800a1780 	call	800a178 <__mulsi3>
 8017fbc:	8085883a 	add	r2,r16,r2
 8017fc0:	10000015 	stw	zero,0(r2)
  }
}
 8017fc4:	0001883a 	nop
 8017fc8:	e6ffff04 	addi	sp,fp,-4
 8017fcc:	dfc00217 	ldw	ra,8(sp)
 8017fd0:	df000117 	ldw	fp,4(sp)
 8017fd4:	dc000017 	ldw	r16,0(sp)
 8017fd8:	dec00304 	addi	sp,sp,12
 8017fdc:	f800283a 	ret

08017fe0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8017fe0:	defff904 	addi	sp,sp,-28
 8017fe4:	df000615 	stw	fp,24(sp)
 8017fe8:	df000604 	addi	fp,sp,24
 8017fec:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8017ff0:	0005303a 	rdctl	r2,status
 8017ff4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017ff8:	e0fffe17 	ldw	r3,-8(fp)
 8017ffc:	00bfff84 	movi	r2,-2
 8018000:	1884703a 	and	r2,r3,r2
 8018004:	1001703a 	wrctl	status,r2
  
  return context;
 8018008:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 801800c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8018010:	d0a02017 	ldw	r2,-32640(gp)
 8018014:	10c000c4 	addi	r3,r2,3
 8018018:	00bfff04 	movi	r2,-4
 801801c:	1884703a 	and	r2,r3,r2
 8018020:	d0a02015 	stw	r2,-32640(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8018024:	d0e02017 	ldw	r3,-32640(gp)
 8018028:	e0bfff17 	ldw	r2,-4(fp)
 801802c:	1887883a 	add	r3,r3,r2
 8018030:	00830034 	movhi	r2,3072
 8018034:	10800004 	addi	r2,r2,0
 8018038:	10c0062e 	bgeu	r2,r3,8018054 <sbrk+0x74>
 801803c:	e0bffb17 	ldw	r2,-20(fp)
 8018040:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8018044:	e0bffa17 	ldw	r2,-24(fp)
 8018048:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 801804c:	00bfffc4 	movi	r2,-1
 8018050:	00000b06 	br	8018080 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8018054:	d0a02017 	ldw	r2,-32640(gp)
 8018058:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 801805c:	d0e02017 	ldw	r3,-32640(gp)
 8018060:	e0bfff17 	ldw	r2,-4(fp)
 8018064:	1885883a 	add	r2,r3,r2
 8018068:	d0a02015 	stw	r2,-32640(gp)
 801806c:	e0bffb17 	ldw	r2,-20(fp)
 8018070:	e0bffc15 	stw	r2,-16(fp)
 8018074:	e0bffc17 	ldw	r2,-16(fp)
 8018078:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 801807c:	e0bffd17 	ldw	r2,-12(fp)
} 
 8018080:	e037883a 	mov	sp,fp
 8018084:	df000017 	ldw	fp,0(sp)
 8018088:	dec00104 	addi	sp,sp,4
 801808c:	f800283a 	ret

08018090 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8018090:	defffa04 	addi	sp,sp,-24
 8018094:	df000515 	stw	fp,20(sp)
 8018098:	df000504 	addi	fp,sp,20
 801809c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80180a0:	0005303a 	rdctl	r2,status
 80180a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80180a8:	e0fffc17 	ldw	r3,-16(fp)
 80180ac:	00bfff84 	movi	r2,-2
 80180b0:	1884703a 	and	r2,r3,r2
 80180b4:	1001703a 	wrctl	status,r2
  
  return context;
 80180b8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 80180bc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 80180c0:	e0bfff17 	ldw	r2,-4(fp)
 80180c4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 80180c8:	e0bffd17 	ldw	r2,-12(fp)
 80180cc:	10800017 	ldw	r2,0(r2)
 80180d0:	e0fffd17 	ldw	r3,-12(fp)
 80180d4:	18c00117 	ldw	r3,4(r3)
 80180d8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 80180dc:	e0bffd17 	ldw	r2,-12(fp)
 80180e0:	10800117 	ldw	r2,4(r2)
 80180e4:	e0fffd17 	ldw	r3,-12(fp)
 80180e8:	18c00017 	ldw	r3,0(r3)
 80180ec:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 80180f0:	e0bffd17 	ldw	r2,-12(fp)
 80180f4:	e0fffd17 	ldw	r3,-12(fp)
 80180f8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 80180fc:	e0bffd17 	ldw	r2,-12(fp)
 8018100:	e0fffd17 	ldw	r3,-12(fp)
 8018104:	10c00015 	stw	r3,0(r2)
 8018108:	e0bffb17 	ldw	r2,-20(fp)
 801810c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8018110:	e0bffe17 	ldw	r2,-8(fp)
 8018114:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8018118:	0001883a 	nop
 801811c:	e037883a 	mov	sp,fp
 8018120:	df000017 	ldw	fp,0(sp)
 8018124:	dec00104 	addi	sp,sp,4
 8018128:	f800283a 	ret

0801812c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 801812c:	defffb04 	addi	sp,sp,-20
 8018130:	dfc00415 	stw	ra,16(sp)
 8018134:	df000315 	stw	fp,12(sp)
 8018138:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 801813c:	d0a02117 	ldw	r2,-32636(gp)
 8018140:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8018144:	d0a74817 	ldw	r2,-25312(gp)
 8018148:	10800044 	addi	r2,r2,1
 801814c:	d0a74815 	stw	r2,-25312(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8018150:	00002e06 	br	801820c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8018154:	e0bffd17 	ldw	r2,-12(fp)
 8018158:	10800017 	ldw	r2,0(r2)
 801815c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8018160:	e0bffd17 	ldw	r2,-12(fp)
 8018164:	10800403 	ldbu	r2,16(r2)
 8018168:	10803fcc 	andi	r2,r2,255
 801816c:	10000426 	beq	r2,zero,8018180 <alt_tick+0x54>
 8018170:	d0a74817 	ldw	r2,-25312(gp)
 8018174:	1000021e 	bne	r2,zero,8018180 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8018178:	e0bffd17 	ldw	r2,-12(fp)
 801817c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8018180:	e0bffd17 	ldw	r2,-12(fp)
 8018184:	10800217 	ldw	r2,8(r2)
 8018188:	d0e74817 	ldw	r3,-25312(gp)
 801818c:	18801d36 	bltu	r3,r2,8018204 <alt_tick+0xd8>
 8018190:	e0bffd17 	ldw	r2,-12(fp)
 8018194:	10800403 	ldbu	r2,16(r2)
 8018198:	10803fcc 	andi	r2,r2,255
 801819c:	1000191e 	bne	r2,zero,8018204 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 80181a0:	e0bffd17 	ldw	r2,-12(fp)
 80181a4:	10800317 	ldw	r2,12(r2)
 80181a8:	e0fffd17 	ldw	r3,-12(fp)
 80181ac:	18c00517 	ldw	r3,20(r3)
 80181b0:	1809883a 	mov	r4,r3
 80181b4:	103ee83a 	callr	r2
 80181b8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 80181bc:	e0bfff17 	ldw	r2,-4(fp)
 80181c0:	1000031e 	bne	r2,zero,80181d0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 80181c4:	e13ffd17 	ldw	r4,-12(fp)
 80181c8:	80180900 	call	8018090 <alt_alarm_stop>
 80181cc:	00000d06 	br	8018204 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 80181d0:	e0bffd17 	ldw	r2,-12(fp)
 80181d4:	10c00217 	ldw	r3,8(r2)
 80181d8:	e0bfff17 	ldw	r2,-4(fp)
 80181dc:	1887883a 	add	r3,r3,r2
 80181e0:	e0bffd17 	ldw	r2,-12(fp)
 80181e4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 80181e8:	e0bffd17 	ldw	r2,-12(fp)
 80181ec:	10c00217 	ldw	r3,8(r2)
 80181f0:	d0a74817 	ldw	r2,-25312(gp)
 80181f4:	1880032e 	bgeu	r3,r2,8018204 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 80181f8:	e0bffd17 	ldw	r2,-12(fp)
 80181fc:	00c00044 	movi	r3,1
 8018200:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8018204:	e0bffe17 	ldw	r2,-8(fp)
 8018208:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 801820c:	e0fffd17 	ldw	r3,-12(fp)
 8018210:	d0a02104 	addi	r2,gp,-32636
 8018214:	18bfcf1e 	bne	r3,r2,8018154 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8018218:	0001883a 	nop
}
 801821c:	0001883a 	nop
 8018220:	e037883a 	mov	sp,fp
 8018224:	dfc00117 	ldw	ra,4(sp)
 8018228:	df000017 	ldw	fp,0(sp)
 801822c:	dec00204 	addi	sp,sp,8
 8018230:	f800283a 	ret

08018234 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8018234:	defffe04 	addi	sp,sp,-8
 8018238:	dfc00115 	stw	ra,4(sp)
 801823c:	df000015 	stw	fp,0(sp)
 8018240:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8018244:	d0a01f17 	ldw	r2,-32644(gp)
 8018248:	10000326 	beq	r2,zero,8018258 <alt_get_errno+0x24>
 801824c:	d0a01f17 	ldw	r2,-32644(gp)
 8018250:	103ee83a 	callr	r2
 8018254:	00000106 	br	801825c <alt_get_errno+0x28>
 8018258:	d0a73c04 	addi	r2,gp,-25360
}
 801825c:	e037883a 	mov	sp,fp
 8018260:	dfc00117 	ldw	ra,4(sp)
 8018264:	df000017 	ldw	fp,0(sp)
 8018268:	dec00204 	addi	sp,sp,8
 801826c:	f800283a 	ret

08018270 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
 8018270:	defffc04 	addi	sp,sp,-16
 8018274:	dfc00315 	stw	ra,12(sp)
 8018278:	df000215 	stw	fp,8(sp)
 801827c:	df000204 	addi	fp,sp,8
 8018280:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8018284:	d0a74817 	ldw	r2,-25312(gp)
  clock_t ticks = alt_nticks(); 
 8018288:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 801828c:	d0a74717 	ldw	r2,-25316(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
 8018290:	1000061e 	bne	r2,zero,80182ac <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
 8018294:	80182340 	call	8018234 <alt_get_errno>
 8018298:	1007883a 	mov	r3,r2
 801829c:	00801604 	movi	r2,88
 80182a0:	18800015 	stw	r2,0(r3)
    return 0;
 80182a4:	0005883a 	mov	r2,zero
 80182a8:	00000a06 	br	80182d4 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
 80182ac:	e0bfff17 	ldw	r2,-4(fp)
 80182b0:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
 80182b4:	e0bfff17 	ldw	r2,-4(fp)
 80182b8:	e0fffe17 	ldw	r3,-8(fp)
 80182bc:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
 80182c0:	e0bfff17 	ldw	r2,-4(fp)
 80182c4:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
 80182c8:	e0bfff17 	ldw	r2,-4(fp)
 80182cc:	10000315 	stw	zero,12(r2)

  return ticks;
 80182d0:	e0bffe17 	ldw	r2,-8(fp)
}
 80182d4:	e037883a 	mov	sp,fp
 80182d8:	dfc00117 	ldw	ra,4(sp)
 80182dc:	df000017 	ldw	fp,0(sp)
 80182e0:	dec00204 	addi	sp,sp,8
 80182e4:	f800283a 	ret

080182e8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 80182e8:	defffd04 	addi	sp,sp,-12
 80182ec:	dfc00215 	stw	ra,8(sp)
 80182f0:	df000115 	stw	fp,4(sp)
 80182f4:	df000104 	addi	fp,sp,4
 80182f8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 80182fc:	e13fff17 	ldw	r4,-4(fp)
 8018300:	80193ac0 	call	80193ac <alt_busy_sleep>
}
 8018304:	e037883a 	mov	sp,fp
 8018308:	dfc00117 	ldw	ra,4(sp)
 801830c:	df000017 	ldw	fp,0(sp)
 8018310:	dec00204 	addi	sp,sp,8
 8018314:	f800283a 	ret

08018318 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8018318:	defffe04 	addi	sp,sp,-8
 801831c:	dfc00115 	stw	ra,4(sp)
 8018320:	df000015 	stw	fp,0(sp)
 8018324:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8018328:	d0a01f17 	ldw	r2,-32644(gp)
 801832c:	10000326 	beq	r2,zero,801833c <alt_get_errno+0x24>
 8018330:	d0a01f17 	ldw	r2,-32644(gp)
 8018334:	103ee83a 	callr	r2
 8018338:	00000106 	br	8018340 <alt_get_errno+0x28>
 801833c:	d0a73c04 	addi	r2,gp,-25360
}
 8018340:	e037883a 	mov	sp,fp
 8018344:	dfc00117 	ldw	ra,4(sp)
 8018348:	df000017 	ldw	fp,0(sp)
 801834c:	dec00204 	addi	sp,sp,8
 8018350:	f800283a 	ret

08018354 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8018354:	defff904 	addi	sp,sp,-28
 8018358:	dfc00615 	stw	ra,24(sp)
 801835c:	df000515 	stw	fp,20(sp)
 8018360:	df000504 	addi	fp,sp,20
 8018364:	e13ffd15 	stw	r4,-12(fp)
 8018368:	e17ffe15 	stw	r5,-8(fp)
 801836c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8018370:	e0bffd17 	ldw	r2,-12(fp)
 8018374:	10000816 	blt	r2,zero,8018398 <write+0x44>
 8018378:	01400304 	movi	r5,12
 801837c:	e13ffd17 	ldw	r4,-12(fp)
 8018380:	800a1780 	call	800a178 <__mulsi3>
 8018384:	1007883a 	mov	r3,r2
 8018388:	008200b4 	movhi	r2,2050
 801838c:	10ad9904 	addi	r2,r2,-18844
 8018390:	1885883a 	add	r2,r3,r2
 8018394:	00000106 	br	801839c <write+0x48>
 8018398:	0005883a 	mov	r2,zero
 801839c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 80183a0:	e0bffb17 	ldw	r2,-20(fp)
 80183a4:	10002126 	beq	r2,zero,801842c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 80183a8:	e0bffb17 	ldw	r2,-20(fp)
 80183ac:	10800217 	ldw	r2,8(r2)
 80183b0:	108000cc 	andi	r2,r2,3
 80183b4:	10001826 	beq	r2,zero,8018418 <write+0xc4>
 80183b8:	e0bffb17 	ldw	r2,-20(fp)
 80183bc:	10800017 	ldw	r2,0(r2)
 80183c0:	10800617 	ldw	r2,24(r2)
 80183c4:	10001426 	beq	r2,zero,8018418 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 80183c8:	e0bffb17 	ldw	r2,-20(fp)
 80183cc:	10800017 	ldw	r2,0(r2)
 80183d0:	10800617 	ldw	r2,24(r2)
 80183d4:	e0ffff17 	ldw	r3,-4(fp)
 80183d8:	180d883a 	mov	r6,r3
 80183dc:	e17ffe17 	ldw	r5,-8(fp)
 80183e0:	e13ffb17 	ldw	r4,-20(fp)
 80183e4:	103ee83a 	callr	r2
 80183e8:	e0bffc15 	stw	r2,-16(fp)
 80183ec:	e0bffc17 	ldw	r2,-16(fp)
 80183f0:	1000070e 	bge	r2,zero,8018410 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 80183f4:	80183180 	call	8018318 <alt_get_errno>
 80183f8:	1007883a 	mov	r3,r2
 80183fc:	e0bffc17 	ldw	r2,-16(fp)
 8018400:	0085c83a 	sub	r2,zero,r2
 8018404:	18800015 	stw	r2,0(r3)
        return -1;
 8018408:	00bfffc4 	movi	r2,-1
 801840c:	00000c06 	br	8018440 <write+0xec>
      }
      return rval;
 8018410:	e0bffc17 	ldw	r2,-16(fp)
 8018414:	00000a06 	br	8018440 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8018418:	80183180 	call	8018318 <alt_get_errno>
 801841c:	1007883a 	mov	r3,r2
 8018420:	00800344 	movi	r2,13
 8018424:	18800015 	stw	r2,0(r3)
 8018428:	00000406 	br	801843c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 801842c:	80183180 	call	8018318 <alt_get_errno>
 8018430:	1007883a 	mov	r3,r2
 8018434:	00801444 	movi	r2,81
 8018438:	18800015 	stw	r2,0(r3)
  }
  return -1;
 801843c:	00bfffc4 	movi	r2,-1
}
 8018440:	e037883a 	mov	sp,fp
 8018444:	dfc00117 	ldw	ra,4(sp)
 8018448:	df000017 	ldw	fp,0(sp)
 801844c:	dec00204 	addi	sp,sp,8
 8018450:	f800283a 	ret

08018454 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8018454:	defffd04 	addi	sp,sp,-12
 8018458:	dfc00215 	stw	ra,8(sp)
 801845c:	df000115 	stw	fp,4(sp)
 8018460:	df000104 	addi	fp,sp,4
 8018464:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8018468:	d1601c04 	addi	r5,gp,-32656
 801846c:	e13fff17 	ldw	r4,-4(fp)
 8018470:	80195600 	call	8019560 <alt_dev_llist_insert>
}
 8018474:	e037883a 	mov	sp,fp
 8018478:	dfc00117 	ldw	ra,4(sp)
 801847c:	df000017 	ldw	fp,0(sp)
 8018480:	dec00204 	addi	sp,sp,8
 8018484:	f800283a 	ret

08018488 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8018488:	defffd04 	addi	sp,sp,-12
 801848c:	dfc00215 	stw	ra,8(sp)
 8018490:	df000115 	stw	fp,4(sp)
 8018494:	df000104 	addi	fp,sp,4
 8018498:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 801849c:	8019d680 	call	8019d68 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 80184a0:	00800044 	movi	r2,1
 80184a4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 80184a8:	0001883a 	nop
 80184ac:	e037883a 	mov	sp,fp
 80184b0:	dfc00117 	ldw	ra,4(sp)
 80184b4:	df000017 	ldw	fp,0(sp)
 80184b8:	dec00204 	addi	sp,sp,8
 80184bc:	f800283a 	ret

080184c0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 80184c0:	defffe04 	addi	sp,sp,-8
 80184c4:	dfc00115 	stw	ra,4(sp)
 80184c8:	df000015 	stw	fp,0(sp)
 80184cc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 80184d0:	01c0fa04 	movi	r7,1000
 80184d4:	018000c4 	movi	r6,3
 80184d8:	000b883a 	mov	r5,zero
 80184dc:	01000074 	movhi	r4,1
 80184e0:	21041004 	addi	r4,r4,4160
 80184e4:	80192040 	call	8019204 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 80184e8:	01800084 	movi	r6,2
 80184ec:	000b883a 	mov	r5,zero
 80184f0:	010200b4 	movhi	r4,2050
 80184f4:	212e0304 	addi	r4,r4,-18420
 80184f8:	801868c0 	call	801868c <altera_avalon_jtag_uart_init>
 80184fc:	010200b4 	movhi	r4,2050
 8018500:	212df904 	addi	r4,r4,-18460
 8018504:	80184540 	call	8018454 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 8018508:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 801850c:	0001883a 	nop
}
 8018510:	0001883a 	nop
 8018514:	e037883a 	mov	sp,fp
 8018518:	dfc00117 	ldw	ra,4(sp)
 801851c:	df000017 	ldw	fp,0(sp)
 8018520:	dec00204 	addi	sp,sp,8
 8018524:	f800283a 	ret

08018528 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8018528:	defffa04 	addi	sp,sp,-24
 801852c:	dfc00515 	stw	ra,20(sp)
 8018530:	df000415 	stw	fp,16(sp)
 8018534:	df000404 	addi	fp,sp,16
 8018538:	e13ffd15 	stw	r4,-12(fp)
 801853c:	e17ffe15 	stw	r5,-8(fp)
 8018540:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8018544:	e0bffd17 	ldw	r2,-12(fp)
 8018548:	10800017 	ldw	r2,0(r2)
 801854c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8018550:	e0bffc17 	ldw	r2,-16(fp)
 8018554:	10c00a04 	addi	r3,r2,40
 8018558:	e0bffd17 	ldw	r2,-12(fp)
 801855c:	10800217 	ldw	r2,8(r2)
 8018560:	100f883a 	mov	r7,r2
 8018564:	e1bfff17 	ldw	r6,-4(fp)
 8018568:	e17ffe17 	ldw	r5,-8(fp)
 801856c:	1809883a 	mov	r4,r3
 8018570:	8018b500 	call	8018b50 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8018574:	e037883a 	mov	sp,fp
 8018578:	dfc00117 	ldw	ra,4(sp)
 801857c:	df000017 	ldw	fp,0(sp)
 8018580:	dec00204 	addi	sp,sp,8
 8018584:	f800283a 	ret

08018588 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8018588:	defffa04 	addi	sp,sp,-24
 801858c:	dfc00515 	stw	ra,20(sp)
 8018590:	df000415 	stw	fp,16(sp)
 8018594:	df000404 	addi	fp,sp,16
 8018598:	e13ffd15 	stw	r4,-12(fp)
 801859c:	e17ffe15 	stw	r5,-8(fp)
 80185a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80185a4:	e0bffd17 	ldw	r2,-12(fp)
 80185a8:	10800017 	ldw	r2,0(r2)
 80185ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 80185b0:	e0bffc17 	ldw	r2,-16(fp)
 80185b4:	10c00a04 	addi	r3,r2,40
 80185b8:	e0bffd17 	ldw	r2,-12(fp)
 80185bc:	10800217 	ldw	r2,8(r2)
 80185c0:	100f883a 	mov	r7,r2
 80185c4:	e1bfff17 	ldw	r6,-4(fp)
 80185c8:	e17ffe17 	ldw	r5,-8(fp)
 80185cc:	1809883a 	mov	r4,r3
 80185d0:	8018d6c0 	call	8018d6c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 80185d4:	e037883a 	mov	sp,fp
 80185d8:	dfc00117 	ldw	ra,4(sp)
 80185dc:	df000017 	ldw	fp,0(sp)
 80185e0:	dec00204 	addi	sp,sp,8
 80185e4:	f800283a 	ret

080185e8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 80185e8:	defffc04 	addi	sp,sp,-16
 80185ec:	dfc00315 	stw	ra,12(sp)
 80185f0:	df000215 	stw	fp,8(sp)
 80185f4:	df000204 	addi	fp,sp,8
 80185f8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80185fc:	e0bfff17 	ldw	r2,-4(fp)
 8018600:	10800017 	ldw	r2,0(r2)
 8018604:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8018608:	e0bffe17 	ldw	r2,-8(fp)
 801860c:	10c00a04 	addi	r3,r2,40
 8018610:	e0bfff17 	ldw	r2,-4(fp)
 8018614:	10800217 	ldw	r2,8(r2)
 8018618:	100b883a 	mov	r5,r2
 801861c:	1809883a 	mov	r4,r3
 8018620:	80189f80 	call	80189f8 <altera_avalon_jtag_uart_close>
}
 8018624:	e037883a 	mov	sp,fp
 8018628:	dfc00117 	ldw	ra,4(sp)
 801862c:	df000017 	ldw	fp,0(sp)
 8018630:	dec00204 	addi	sp,sp,8
 8018634:	f800283a 	ret

08018638 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8018638:	defffa04 	addi	sp,sp,-24
 801863c:	dfc00515 	stw	ra,20(sp)
 8018640:	df000415 	stw	fp,16(sp)
 8018644:	df000404 	addi	fp,sp,16
 8018648:	e13ffd15 	stw	r4,-12(fp)
 801864c:	e17ffe15 	stw	r5,-8(fp)
 8018650:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8018654:	e0bffd17 	ldw	r2,-12(fp)
 8018658:	10800017 	ldw	r2,0(r2)
 801865c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8018660:	e0bffc17 	ldw	r2,-16(fp)
 8018664:	10800a04 	addi	r2,r2,40
 8018668:	e1bfff17 	ldw	r6,-4(fp)
 801866c:	e17ffe17 	ldw	r5,-8(fp)
 8018670:	1009883a 	mov	r4,r2
 8018674:	8018a600 	call	8018a60 <altera_avalon_jtag_uart_ioctl>
}
 8018678:	e037883a 	mov	sp,fp
 801867c:	dfc00117 	ldw	ra,4(sp)
 8018680:	df000017 	ldw	fp,0(sp)
 8018684:	dec00204 	addi	sp,sp,8
 8018688:	f800283a 	ret

0801868c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 801868c:	defffa04 	addi	sp,sp,-24
 8018690:	dfc00515 	stw	ra,20(sp)
 8018694:	df000415 	stw	fp,16(sp)
 8018698:	df000404 	addi	fp,sp,16
 801869c:	e13ffd15 	stw	r4,-12(fp)
 80186a0:	e17ffe15 	stw	r5,-8(fp)
 80186a4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80186a8:	e0bffd17 	ldw	r2,-12(fp)
 80186ac:	00c00044 	movi	r3,1
 80186b0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 80186b4:	e0bffd17 	ldw	r2,-12(fp)
 80186b8:	10800017 	ldw	r2,0(r2)
 80186bc:	10800104 	addi	r2,r2,4
 80186c0:	1007883a 	mov	r3,r2
 80186c4:	e0bffd17 	ldw	r2,-12(fp)
 80186c8:	10800817 	ldw	r2,32(r2)
 80186cc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 80186d0:	e0bffe17 	ldw	r2,-8(fp)
 80186d4:	e0ffff17 	ldw	r3,-4(fp)
 80186d8:	d8000015 	stw	zero,0(sp)
 80186dc:	e1fffd17 	ldw	r7,-12(fp)
 80186e0:	018200b4 	movhi	r6,2050
 80186e4:	31a1d304 	addi	r6,r6,-30900
 80186e8:	180b883a 	mov	r5,r3
 80186ec:	1009883a 	mov	r4,r2
 80186f0:	80196e40 	call	80196e4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 80186f4:	e0bffd17 	ldw	r2,-12(fp)
 80186f8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 80186fc:	e0bffd17 	ldw	r2,-12(fp)
 8018700:	10800204 	addi	r2,r2,8
 8018704:	d0e74717 	ldw	r3,-25316(gp)
 8018708:	e1fffd17 	ldw	r7,-12(fp)
 801870c:	018200b4 	movhi	r6,2050
 8018710:	31a25604 	addi	r6,r6,-30376
 8018714:	180b883a 	mov	r5,r3
 8018718:	1009883a 	mov	r4,r2
 801871c:	80192800 	call	8019280 <alt_alarm_start>
 8018720:	1000040e 	bge	r2,zero,8018734 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8018724:	e0fffd17 	ldw	r3,-12(fp)
 8018728:	00a00034 	movhi	r2,32768
 801872c:	10bfffc4 	addi	r2,r2,-1
 8018730:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8018734:	0001883a 	nop
 8018738:	e037883a 	mov	sp,fp
 801873c:	dfc00117 	ldw	ra,4(sp)
 8018740:	df000017 	ldw	fp,0(sp)
 8018744:	dec00204 	addi	sp,sp,8
 8018748:	f800283a 	ret

0801874c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 801874c:	defff804 	addi	sp,sp,-32
 8018750:	df000715 	stw	fp,28(sp)
 8018754:	df000704 	addi	fp,sp,28
 8018758:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 801875c:	e0bfff17 	ldw	r2,-4(fp)
 8018760:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8018764:	e0bffb17 	ldw	r2,-20(fp)
 8018768:	10800017 	ldw	r2,0(r2)
 801876c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8018770:	e0bffc17 	ldw	r2,-16(fp)
 8018774:	10800104 	addi	r2,r2,4
 8018778:	10800037 	ldwio	r2,0(r2)
 801877c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8018780:	e0bffd17 	ldw	r2,-12(fp)
 8018784:	1080c00c 	andi	r2,r2,768
 8018788:	10006d26 	beq	r2,zero,8018940 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 801878c:	e0bffd17 	ldw	r2,-12(fp)
 8018790:	1080400c 	andi	r2,r2,256
 8018794:	10003526 	beq	r2,zero,801886c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8018798:	00800074 	movhi	r2,1
 801879c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80187a0:	e0bffb17 	ldw	r2,-20(fp)
 80187a4:	10800a17 	ldw	r2,40(r2)
 80187a8:	10800044 	addi	r2,r2,1
 80187ac:	1081ffcc 	andi	r2,r2,2047
 80187b0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 80187b4:	e0bffb17 	ldw	r2,-20(fp)
 80187b8:	10c00b17 	ldw	r3,44(r2)
 80187bc:	e0bffe17 	ldw	r2,-8(fp)
 80187c0:	18801526 	beq	r3,r2,8018818 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 80187c4:	e0bffc17 	ldw	r2,-16(fp)
 80187c8:	10800037 	ldwio	r2,0(r2)
 80187cc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 80187d0:	e0bff917 	ldw	r2,-28(fp)
 80187d4:	10a0000c 	andi	r2,r2,32768
 80187d8:	10001126 	beq	r2,zero,8018820 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 80187dc:	e0bffb17 	ldw	r2,-20(fp)
 80187e0:	10800a17 	ldw	r2,40(r2)
 80187e4:	e0fff917 	ldw	r3,-28(fp)
 80187e8:	1809883a 	mov	r4,r3
 80187ec:	e0fffb17 	ldw	r3,-20(fp)
 80187f0:	1885883a 	add	r2,r3,r2
 80187f4:	10800e04 	addi	r2,r2,56
 80187f8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80187fc:	e0bffb17 	ldw	r2,-20(fp)
 8018800:	10800a17 	ldw	r2,40(r2)
 8018804:	10800044 	addi	r2,r2,1
 8018808:	10c1ffcc 	andi	r3,r2,2047
 801880c:	e0bffb17 	ldw	r2,-20(fp)
 8018810:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8018814:	003fe206 	br	80187a0 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8018818:	0001883a 	nop
 801881c:	00000106 	br	8018824 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8018820:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8018824:	e0bff917 	ldw	r2,-28(fp)
 8018828:	10bfffec 	andhi	r2,r2,65535
 801882c:	10000f26 	beq	r2,zero,801886c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8018830:	e0bffb17 	ldw	r2,-20(fp)
 8018834:	10c00817 	ldw	r3,32(r2)
 8018838:	00bfff84 	movi	r2,-2
 801883c:	1886703a 	and	r3,r3,r2
 8018840:	e0bffb17 	ldw	r2,-20(fp)
 8018844:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8018848:	e0bffc17 	ldw	r2,-16(fp)
 801884c:	10800104 	addi	r2,r2,4
 8018850:	1007883a 	mov	r3,r2
 8018854:	e0bffb17 	ldw	r2,-20(fp)
 8018858:	10800817 	ldw	r2,32(r2)
 801885c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8018860:	e0bffc17 	ldw	r2,-16(fp)
 8018864:	10800104 	addi	r2,r2,4
 8018868:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 801886c:	e0bffd17 	ldw	r2,-12(fp)
 8018870:	1080800c 	andi	r2,r2,512
 8018874:	103fbe26 	beq	r2,zero,8018770 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8018878:	e0bffd17 	ldw	r2,-12(fp)
 801887c:	1004d43a 	srli	r2,r2,16
 8018880:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8018884:	00001406 	br	80188d8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8018888:	e0bffc17 	ldw	r2,-16(fp)
 801888c:	e0fffb17 	ldw	r3,-20(fp)
 8018890:	18c00d17 	ldw	r3,52(r3)
 8018894:	e13ffb17 	ldw	r4,-20(fp)
 8018898:	20c7883a 	add	r3,r4,r3
 801889c:	18c20e04 	addi	r3,r3,2104
 80188a0:	18c00003 	ldbu	r3,0(r3)
 80188a4:	18c03fcc 	andi	r3,r3,255
 80188a8:	18c0201c 	xori	r3,r3,128
 80188ac:	18ffe004 	addi	r3,r3,-128
 80188b0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80188b4:	e0bffb17 	ldw	r2,-20(fp)
 80188b8:	10800d17 	ldw	r2,52(r2)
 80188bc:	10800044 	addi	r2,r2,1
 80188c0:	10c1ffcc 	andi	r3,r2,2047
 80188c4:	e0bffb17 	ldw	r2,-20(fp)
 80188c8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 80188cc:	e0bffa17 	ldw	r2,-24(fp)
 80188d0:	10bfffc4 	addi	r2,r2,-1
 80188d4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 80188d8:	e0bffa17 	ldw	r2,-24(fp)
 80188dc:	10000526 	beq	r2,zero,80188f4 <altera_avalon_jtag_uart_irq+0x1a8>
 80188e0:	e0bffb17 	ldw	r2,-20(fp)
 80188e4:	10c00d17 	ldw	r3,52(r2)
 80188e8:	e0bffb17 	ldw	r2,-20(fp)
 80188ec:	10800c17 	ldw	r2,48(r2)
 80188f0:	18bfe51e 	bne	r3,r2,8018888 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 80188f4:	e0bffa17 	ldw	r2,-24(fp)
 80188f8:	103f9d26 	beq	r2,zero,8018770 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80188fc:	e0bffb17 	ldw	r2,-20(fp)
 8018900:	10c00817 	ldw	r3,32(r2)
 8018904:	00bfff44 	movi	r2,-3
 8018908:	1886703a 	and	r3,r3,r2
 801890c:	e0bffb17 	ldw	r2,-20(fp)
 8018910:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8018914:	e0bffb17 	ldw	r2,-20(fp)
 8018918:	10800017 	ldw	r2,0(r2)
 801891c:	10800104 	addi	r2,r2,4
 8018920:	1007883a 	mov	r3,r2
 8018924:	e0bffb17 	ldw	r2,-20(fp)
 8018928:	10800817 	ldw	r2,32(r2)
 801892c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8018930:	e0bffc17 	ldw	r2,-16(fp)
 8018934:	10800104 	addi	r2,r2,4
 8018938:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 801893c:	003f8c06 	br	8018770 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 8018940:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8018944:	0001883a 	nop
 8018948:	e037883a 	mov	sp,fp
 801894c:	df000017 	ldw	fp,0(sp)
 8018950:	dec00104 	addi	sp,sp,4
 8018954:	f800283a 	ret

08018958 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8018958:	defff804 	addi	sp,sp,-32
 801895c:	df000715 	stw	fp,28(sp)
 8018960:	df000704 	addi	fp,sp,28
 8018964:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8018968:	e0bffb17 	ldw	r2,-20(fp)
 801896c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8018970:	e0bff917 	ldw	r2,-28(fp)
 8018974:	10800017 	ldw	r2,0(r2)
 8018978:	10800104 	addi	r2,r2,4
 801897c:	10800037 	ldwio	r2,0(r2)
 8018980:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8018984:	e0bffa17 	ldw	r2,-24(fp)
 8018988:	1081000c 	andi	r2,r2,1024
 801898c:	10000b26 	beq	r2,zero,80189bc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8018990:	e0bff917 	ldw	r2,-28(fp)
 8018994:	10800017 	ldw	r2,0(r2)
 8018998:	10800104 	addi	r2,r2,4
 801899c:	1007883a 	mov	r3,r2
 80189a0:	e0bff917 	ldw	r2,-28(fp)
 80189a4:	10800817 	ldw	r2,32(r2)
 80189a8:	10810014 	ori	r2,r2,1024
 80189ac:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 80189b0:	e0bff917 	ldw	r2,-28(fp)
 80189b4:	10000915 	stw	zero,36(r2)
 80189b8:	00000a06 	br	80189e4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 80189bc:	e0bff917 	ldw	r2,-28(fp)
 80189c0:	10c00917 	ldw	r3,36(r2)
 80189c4:	00a00034 	movhi	r2,32768
 80189c8:	10bfff04 	addi	r2,r2,-4
 80189cc:	10c00536 	bltu	r2,r3,80189e4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 80189d0:	e0bff917 	ldw	r2,-28(fp)
 80189d4:	10800917 	ldw	r2,36(r2)
 80189d8:	10c00044 	addi	r3,r2,1
 80189dc:	e0bff917 	ldw	r2,-28(fp)
 80189e0:	10c00915 	stw	r3,36(r2)
 80189e4:	d0a74717 	ldw	r2,-25316(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 80189e8:	e037883a 	mov	sp,fp
 80189ec:	df000017 	ldw	fp,0(sp)
 80189f0:	dec00104 	addi	sp,sp,4
 80189f4:	f800283a 	ret

080189f8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 80189f8:	defffd04 	addi	sp,sp,-12
 80189fc:	df000215 	stw	fp,8(sp)
 8018a00:	df000204 	addi	fp,sp,8
 8018a04:	e13ffe15 	stw	r4,-8(fp)
 8018a08:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8018a0c:	00000506 	br	8018a24 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8018a10:	e0bfff17 	ldw	r2,-4(fp)
 8018a14:	1090000c 	andi	r2,r2,16384
 8018a18:	10000226 	beq	r2,zero,8018a24 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8018a1c:	00bffd44 	movi	r2,-11
 8018a20:	00000b06 	br	8018a50 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8018a24:	e0bffe17 	ldw	r2,-8(fp)
 8018a28:	10c00d17 	ldw	r3,52(r2)
 8018a2c:	e0bffe17 	ldw	r2,-8(fp)
 8018a30:	10800c17 	ldw	r2,48(r2)
 8018a34:	18800526 	beq	r3,r2,8018a4c <altera_avalon_jtag_uart_close+0x54>
 8018a38:	e0bffe17 	ldw	r2,-8(fp)
 8018a3c:	10c00917 	ldw	r3,36(r2)
 8018a40:	e0bffe17 	ldw	r2,-8(fp)
 8018a44:	10800117 	ldw	r2,4(r2)
 8018a48:	18bff136 	bltu	r3,r2,8018a10 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8018a4c:	0005883a 	mov	r2,zero
}
 8018a50:	e037883a 	mov	sp,fp
 8018a54:	df000017 	ldw	fp,0(sp)
 8018a58:	dec00104 	addi	sp,sp,4
 8018a5c:	f800283a 	ret

08018a60 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8018a60:	defffa04 	addi	sp,sp,-24
 8018a64:	df000515 	stw	fp,20(sp)
 8018a68:	df000504 	addi	fp,sp,20
 8018a6c:	e13ffd15 	stw	r4,-12(fp)
 8018a70:	e17ffe15 	stw	r5,-8(fp)
 8018a74:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8018a78:	00bff9c4 	movi	r2,-25
 8018a7c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8018a80:	e0bffe17 	ldw	r2,-8(fp)
 8018a84:	10da8060 	cmpeqi	r3,r2,27137
 8018a88:	1800031e 	bne	r3,zero,8018a98 <altera_avalon_jtag_uart_ioctl+0x38>
 8018a8c:	109a80a0 	cmpeqi	r2,r2,27138
 8018a90:	1000181e 	bne	r2,zero,8018af4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8018a94:	00002906 	br	8018b3c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8018a98:	e0bffd17 	ldw	r2,-12(fp)
 8018a9c:	10c00117 	ldw	r3,4(r2)
 8018aa0:	00a00034 	movhi	r2,32768
 8018aa4:	10bfffc4 	addi	r2,r2,-1
 8018aa8:	18802126 	beq	r3,r2,8018b30 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 8018aac:	e0bfff17 	ldw	r2,-4(fp)
 8018ab0:	10800017 	ldw	r2,0(r2)
 8018ab4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8018ab8:	e0bffc17 	ldw	r2,-16(fp)
 8018abc:	10800090 	cmplti	r2,r2,2
 8018ac0:	1000061e 	bne	r2,zero,8018adc <altera_avalon_jtag_uart_ioctl+0x7c>
 8018ac4:	e0fffc17 	ldw	r3,-16(fp)
 8018ac8:	00a00034 	movhi	r2,32768
 8018acc:	10bfffc4 	addi	r2,r2,-1
 8018ad0:	18800226 	beq	r3,r2,8018adc <altera_avalon_jtag_uart_ioctl+0x7c>
 8018ad4:	e0bffc17 	ldw	r2,-16(fp)
 8018ad8:	00000206 	br	8018ae4 <altera_avalon_jtag_uart_ioctl+0x84>
 8018adc:	00a00034 	movhi	r2,32768
 8018ae0:	10bfff84 	addi	r2,r2,-2
 8018ae4:	e0fffd17 	ldw	r3,-12(fp)
 8018ae8:	18800115 	stw	r2,4(r3)
      rc = 0;
 8018aec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8018af0:	00000f06 	br	8018b30 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8018af4:	e0bffd17 	ldw	r2,-12(fp)
 8018af8:	10c00117 	ldw	r3,4(r2)
 8018afc:	00a00034 	movhi	r2,32768
 8018b00:	10bfffc4 	addi	r2,r2,-1
 8018b04:	18800c26 	beq	r3,r2,8018b38 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8018b08:	e0bffd17 	ldw	r2,-12(fp)
 8018b0c:	10c00917 	ldw	r3,36(r2)
 8018b10:	e0bffd17 	ldw	r2,-12(fp)
 8018b14:	10800117 	ldw	r2,4(r2)
 8018b18:	1885803a 	cmpltu	r2,r3,r2
 8018b1c:	10c03fcc 	andi	r3,r2,255
 8018b20:	e0bfff17 	ldw	r2,-4(fp)
 8018b24:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8018b28:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8018b2c:	00000206 	br	8018b38 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 8018b30:	0001883a 	nop
 8018b34:	00000106 	br	8018b3c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 8018b38:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8018b3c:	e0bffb17 	ldw	r2,-20(fp)
}
 8018b40:	e037883a 	mov	sp,fp
 8018b44:	df000017 	ldw	fp,0(sp)
 8018b48:	dec00104 	addi	sp,sp,4
 8018b4c:	f800283a 	ret

08018b50 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8018b50:	defff304 	addi	sp,sp,-52
 8018b54:	dfc00c15 	stw	ra,48(sp)
 8018b58:	df000b15 	stw	fp,44(sp)
 8018b5c:	df000b04 	addi	fp,sp,44
 8018b60:	e13ffc15 	stw	r4,-16(fp)
 8018b64:	e17ffd15 	stw	r5,-12(fp)
 8018b68:	e1bffe15 	stw	r6,-8(fp)
 8018b6c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8018b70:	e0bffd17 	ldw	r2,-12(fp)
 8018b74:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8018b78:	00004706 	br	8018c98 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8018b7c:	e0bffc17 	ldw	r2,-16(fp)
 8018b80:	10800a17 	ldw	r2,40(r2)
 8018b84:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8018b88:	e0bffc17 	ldw	r2,-16(fp)
 8018b8c:	10800b17 	ldw	r2,44(r2)
 8018b90:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8018b94:	e0fff717 	ldw	r3,-36(fp)
 8018b98:	e0bff817 	ldw	r2,-32(fp)
 8018b9c:	18800536 	bltu	r3,r2,8018bb4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8018ba0:	e0fff717 	ldw	r3,-36(fp)
 8018ba4:	e0bff817 	ldw	r2,-32(fp)
 8018ba8:	1885c83a 	sub	r2,r3,r2
 8018bac:	e0bff615 	stw	r2,-40(fp)
 8018bb0:	00000406 	br	8018bc4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8018bb4:	00c20004 	movi	r3,2048
 8018bb8:	e0bff817 	ldw	r2,-32(fp)
 8018bbc:	1885c83a 	sub	r2,r3,r2
 8018bc0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8018bc4:	e0bff617 	ldw	r2,-40(fp)
 8018bc8:	10001e26 	beq	r2,zero,8018c44 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8018bcc:	e0fffe17 	ldw	r3,-8(fp)
 8018bd0:	e0bff617 	ldw	r2,-40(fp)
 8018bd4:	1880022e 	bgeu	r3,r2,8018be0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8018bd8:	e0bffe17 	ldw	r2,-8(fp)
 8018bdc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8018be0:	e0bffc17 	ldw	r2,-16(fp)
 8018be4:	10c00e04 	addi	r3,r2,56
 8018be8:	e0bff817 	ldw	r2,-32(fp)
 8018bec:	1885883a 	add	r2,r3,r2
 8018bf0:	e1bff617 	ldw	r6,-40(fp)
 8018bf4:	100b883a 	mov	r5,r2
 8018bf8:	e13ff517 	ldw	r4,-44(fp)
 8018bfc:	800ab080 	call	800ab08 <memcpy>
      ptr   += n;
 8018c00:	e0fff517 	ldw	r3,-44(fp)
 8018c04:	e0bff617 	ldw	r2,-40(fp)
 8018c08:	1885883a 	add	r2,r3,r2
 8018c0c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8018c10:	e0fffe17 	ldw	r3,-8(fp)
 8018c14:	e0bff617 	ldw	r2,-40(fp)
 8018c18:	1885c83a 	sub	r2,r3,r2
 8018c1c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8018c20:	e0fff817 	ldw	r3,-32(fp)
 8018c24:	e0bff617 	ldw	r2,-40(fp)
 8018c28:	1885883a 	add	r2,r3,r2
 8018c2c:	10c1ffcc 	andi	r3,r2,2047
 8018c30:	e0bffc17 	ldw	r2,-16(fp)
 8018c34:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8018c38:	e0bffe17 	ldw	r2,-8(fp)
 8018c3c:	00bfcf16 	blt	zero,r2,8018b7c <altera_avalon_jtag_uart_read+0x2c>
 8018c40:	00000106 	br	8018c48 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 8018c44:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 8018c48:	e0fff517 	ldw	r3,-44(fp)
 8018c4c:	e0bffd17 	ldw	r2,-12(fp)
 8018c50:	1880141e 	bne	r3,r2,8018ca4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8018c54:	e0bfff17 	ldw	r2,-4(fp)
 8018c58:	1090000c 	andi	r2,r2,16384
 8018c5c:	1000131e 	bne	r2,zero,8018cac <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8018c60:	0001883a 	nop
 8018c64:	e0bffc17 	ldw	r2,-16(fp)
 8018c68:	10c00a17 	ldw	r3,40(r2)
 8018c6c:	e0bff717 	ldw	r2,-36(fp)
 8018c70:	1880051e 	bne	r3,r2,8018c88 <altera_avalon_jtag_uart_read+0x138>
 8018c74:	e0bffc17 	ldw	r2,-16(fp)
 8018c78:	10c00917 	ldw	r3,36(r2)
 8018c7c:	e0bffc17 	ldw	r2,-16(fp)
 8018c80:	10800117 	ldw	r2,4(r2)
 8018c84:	18bff736 	bltu	r3,r2,8018c64 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8018c88:	e0bffc17 	ldw	r2,-16(fp)
 8018c8c:	10c00a17 	ldw	r3,40(r2)
 8018c90:	e0bff717 	ldw	r2,-36(fp)
 8018c94:	18800726 	beq	r3,r2,8018cb4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8018c98:	e0bffe17 	ldw	r2,-8(fp)
 8018c9c:	00bfb716 	blt	zero,r2,8018b7c <altera_avalon_jtag_uart_read+0x2c>
 8018ca0:	00000506 	br	8018cb8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8018ca4:	0001883a 	nop
 8018ca8:	00000306 	br	8018cb8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 8018cac:	0001883a 	nop
 8018cb0:	00000106 	br	8018cb8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8018cb4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8018cb8:	e0fff517 	ldw	r3,-44(fp)
 8018cbc:	e0bffd17 	ldw	r2,-12(fp)
 8018cc0:	18801826 	beq	r3,r2,8018d24 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8018cc4:	0005303a 	rdctl	r2,status
 8018cc8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8018ccc:	e0fffb17 	ldw	r3,-20(fp)
 8018cd0:	00bfff84 	movi	r2,-2
 8018cd4:	1884703a 	and	r2,r3,r2
 8018cd8:	1001703a 	wrctl	status,r2
  
  return context;
 8018cdc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8018ce0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8018ce4:	e0bffc17 	ldw	r2,-16(fp)
 8018ce8:	10800817 	ldw	r2,32(r2)
 8018cec:	10c00054 	ori	r3,r2,1
 8018cf0:	e0bffc17 	ldw	r2,-16(fp)
 8018cf4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8018cf8:	e0bffc17 	ldw	r2,-16(fp)
 8018cfc:	10800017 	ldw	r2,0(r2)
 8018d00:	10800104 	addi	r2,r2,4
 8018d04:	1007883a 	mov	r3,r2
 8018d08:	e0bffc17 	ldw	r2,-16(fp)
 8018d0c:	10800817 	ldw	r2,32(r2)
 8018d10:	18800035 	stwio	r2,0(r3)
 8018d14:	e0bffa17 	ldw	r2,-24(fp)
 8018d18:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8018d1c:	e0bff917 	ldw	r2,-28(fp)
 8018d20:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8018d24:	e0fff517 	ldw	r3,-44(fp)
 8018d28:	e0bffd17 	ldw	r2,-12(fp)
 8018d2c:	18800426 	beq	r3,r2,8018d40 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 8018d30:	e0fff517 	ldw	r3,-44(fp)
 8018d34:	e0bffd17 	ldw	r2,-12(fp)
 8018d38:	1885c83a 	sub	r2,r3,r2
 8018d3c:	00000606 	br	8018d58 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 8018d40:	e0bfff17 	ldw	r2,-4(fp)
 8018d44:	1090000c 	andi	r2,r2,16384
 8018d48:	10000226 	beq	r2,zero,8018d54 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8018d4c:	00bffd44 	movi	r2,-11
 8018d50:	00000106 	br	8018d58 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 8018d54:	00bffec4 	movi	r2,-5
}
 8018d58:	e037883a 	mov	sp,fp
 8018d5c:	dfc00117 	ldw	ra,4(sp)
 8018d60:	df000017 	ldw	fp,0(sp)
 8018d64:	dec00204 	addi	sp,sp,8
 8018d68:	f800283a 	ret

08018d6c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8018d6c:	defff304 	addi	sp,sp,-52
 8018d70:	dfc00c15 	stw	ra,48(sp)
 8018d74:	df000b15 	stw	fp,44(sp)
 8018d78:	df000b04 	addi	fp,sp,44
 8018d7c:	e13ffc15 	stw	r4,-16(fp)
 8018d80:	e17ffd15 	stw	r5,-12(fp)
 8018d84:	e1bffe15 	stw	r6,-8(fp)
 8018d88:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8018d8c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8018d90:	e0bffd17 	ldw	r2,-12(fp)
 8018d94:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8018d98:	00003706 	br	8018e78 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8018d9c:	e0bffc17 	ldw	r2,-16(fp)
 8018da0:	10800c17 	ldw	r2,48(r2)
 8018da4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 8018da8:	e0bffc17 	ldw	r2,-16(fp)
 8018dac:	10800d17 	ldw	r2,52(r2)
 8018db0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8018db4:	e0fff917 	ldw	r3,-28(fp)
 8018db8:	e0bff517 	ldw	r2,-44(fp)
 8018dbc:	1880062e 	bgeu	r3,r2,8018dd8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8018dc0:	e0fff517 	ldw	r3,-44(fp)
 8018dc4:	e0bff917 	ldw	r2,-28(fp)
 8018dc8:	1885c83a 	sub	r2,r3,r2
 8018dcc:	10bfffc4 	addi	r2,r2,-1
 8018dd0:	e0bff615 	stw	r2,-40(fp)
 8018dd4:	00000b06 	br	8018e04 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8018dd8:	e0bff517 	ldw	r2,-44(fp)
 8018ddc:	10000526 	beq	r2,zero,8018df4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8018de0:	00c20004 	movi	r3,2048
 8018de4:	e0bff917 	ldw	r2,-28(fp)
 8018de8:	1885c83a 	sub	r2,r3,r2
 8018dec:	e0bff615 	stw	r2,-40(fp)
 8018df0:	00000406 	br	8018e04 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8018df4:	00c1ffc4 	movi	r3,2047
 8018df8:	e0bff917 	ldw	r2,-28(fp)
 8018dfc:	1885c83a 	sub	r2,r3,r2
 8018e00:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8018e04:	e0bff617 	ldw	r2,-40(fp)
 8018e08:	10001e26 	beq	r2,zero,8018e84 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8018e0c:	e0fffe17 	ldw	r3,-8(fp)
 8018e10:	e0bff617 	ldw	r2,-40(fp)
 8018e14:	1880022e 	bgeu	r3,r2,8018e20 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8018e18:	e0bffe17 	ldw	r2,-8(fp)
 8018e1c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8018e20:	e0bffc17 	ldw	r2,-16(fp)
 8018e24:	10c20e04 	addi	r3,r2,2104
 8018e28:	e0bff917 	ldw	r2,-28(fp)
 8018e2c:	1885883a 	add	r2,r3,r2
 8018e30:	e1bff617 	ldw	r6,-40(fp)
 8018e34:	e17ffd17 	ldw	r5,-12(fp)
 8018e38:	1009883a 	mov	r4,r2
 8018e3c:	800ab080 	call	800ab08 <memcpy>
      ptr   += n;
 8018e40:	e0fffd17 	ldw	r3,-12(fp)
 8018e44:	e0bff617 	ldw	r2,-40(fp)
 8018e48:	1885883a 	add	r2,r3,r2
 8018e4c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8018e50:	e0fffe17 	ldw	r3,-8(fp)
 8018e54:	e0bff617 	ldw	r2,-40(fp)
 8018e58:	1885c83a 	sub	r2,r3,r2
 8018e5c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8018e60:	e0fff917 	ldw	r3,-28(fp)
 8018e64:	e0bff617 	ldw	r2,-40(fp)
 8018e68:	1885883a 	add	r2,r3,r2
 8018e6c:	10c1ffcc 	andi	r3,r2,2047
 8018e70:	e0bffc17 	ldw	r2,-16(fp)
 8018e74:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8018e78:	e0bffe17 	ldw	r2,-8(fp)
 8018e7c:	00bfc716 	blt	zero,r2,8018d9c <altera_avalon_jtag_uart_write+0x30>
 8018e80:	00000106 	br	8018e88 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8018e84:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8018e88:	0005303a 	rdctl	r2,status
 8018e8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8018e90:	e0fffb17 	ldw	r3,-20(fp)
 8018e94:	00bfff84 	movi	r2,-2
 8018e98:	1884703a 	and	r2,r3,r2
 8018e9c:	1001703a 	wrctl	status,r2
  
  return context;
 8018ea0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8018ea4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8018ea8:	e0bffc17 	ldw	r2,-16(fp)
 8018eac:	10800817 	ldw	r2,32(r2)
 8018eb0:	10c00094 	ori	r3,r2,2
 8018eb4:	e0bffc17 	ldw	r2,-16(fp)
 8018eb8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8018ebc:	e0bffc17 	ldw	r2,-16(fp)
 8018ec0:	10800017 	ldw	r2,0(r2)
 8018ec4:	10800104 	addi	r2,r2,4
 8018ec8:	1007883a 	mov	r3,r2
 8018ecc:	e0bffc17 	ldw	r2,-16(fp)
 8018ed0:	10800817 	ldw	r2,32(r2)
 8018ed4:	18800035 	stwio	r2,0(r3)
 8018ed8:	e0bffa17 	ldw	r2,-24(fp)
 8018edc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8018ee0:	e0bff817 	ldw	r2,-32(fp)
 8018ee4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8018ee8:	e0bffe17 	ldw	r2,-8(fp)
 8018eec:	0080100e 	bge	zero,r2,8018f30 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8018ef0:	e0bfff17 	ldw	r2,-4(fp)
 8018ef4:	1090000c 	andi	r2,r2,16384
 8018ef8:	1000101e 	bne	r2,zero,8018f3c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8018efc:	0001883a 	nop
 8018f00:	e0bffc17 	ldw	r2,-16(fp)
 8018f04:	10c00d17 	ldw	r3,52(r2)
 8018f08:	e0bff517 	ldw	r2,-44(fp)
 8018f0c:	1880051e 	bne	r3,r2,8018f24 <altera_avalon_jtag_uart_write+0x1b8>
 8018f10:	e0bffc17 	ldw	r2,-16(fp)
 8018f14:	10c00917 	ldw	r3,36(r2)
 8018f18:	e0bffc17 	ldw	r2,-16(fp)
 8018f1c:	10800117 	ldw	r2,4(r2)
 8018f20:	18bff736 	bltu	r3,r2,8018f00 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8018f24:	e0bffc17 	ldw	r2,-16(fp)
 8018f28:	10800917 	ldw	r2,36(r2)
 8018f2c:	1000051e 	bne	r2,zero,8018f44 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8018f30:	e0bffe17 	ldw	r2,-8(fp)
 8018f34:	00bfd016 	blt	zero,r2,8018e78 <altera_avalon_jtag_uart_write+0x10c>
 8018f38:	00000306 	br	8018f48 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8018f3c:	0001883a 	nop
 8018f40:	00000106 	br	8018f48 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8018f44:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8018f48:	e0fffd17 	ldw	r3,-12(fp)
 8018f4c:	e0bff717 	ldw	r2,-36(fp)
 8018f50:	18800426 	beq	r3,r2,8018f64 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8018f54:	e0fffd17 	ldw	r3,-12(fp)
 8018f58:	e0bff717 	ldw	r2,-36(fp)
 8018f5c:	1885c83a 	sub	r2,r3,r2
 8018f60:	00000606 	br	8018f7c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8018f64:	e0bfff17 	ldw	r2,-4(fp)
 8018f68:	1090000c 	andi	r2,r2,16384
 8018f6c:	10000226 	beq	r2,zero,8018f78 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8018f70:	00bffd44 	movi	r2,-11
 8018f74:	00000106 	br	8018f7c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8018f78:	00bffec4 	movi	r2,-5
}
 8018f7c:	e037883a 	mov	sp,fp
 8018f80:	dfc00117 	ldw	ra,4(sp)
 8018f84:	df000017 	ldw	fp,0(sp)
 8018f88:	dec00204 	addi	sp,sp,8
 8018f8c:	f800283a 	ret

08018f90 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 8018f90:	defff404 	addi	sp,sp,-48
 8018f94:	df000b15 	stw	fp,44(sp)
 8018f98:	df000b04 	addi	fp,sp,44
 8018f9c:	e13ffc15 	stw	r4,-16(fp)
 8018fa0:	e17ffd15 	stw	r5,-12(fp)
 8018fa4:	e1bffe15 	stw	r6,-8(fp)
 8018fa8:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 8018fac:	e0ffff17 	ldw	r3,-4(fp)
 8018fb0:	e0bffe17 	ldw	r2,-8(fp)
 8018fb4:	1885883a 	add	r2,r3,r2
 8018fb8:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 8018fbc:	e0c00217 	ldw	r3,8(fp)
 8018fc0:	e0800117 	ldw	r2,4(fp)
 8018fc4:	1885883a 	add	r2,r3,r2
 8018fc8:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 8018fcc:	e0800117 	ldw	r2,4(fp)
 8018fd0:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 8018fd4:	e0bffe17 	ldw	r2,-8(fp)
 8018fd8:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 8018fdc:	00800044 	movi	r2,1
 8018fe0:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 8018fe4:	e0bffc17 	ldw	r2,-16(fp)
 8018fe8:	10800504 	addi	r2,r2,20
 8018fec:	1009883a 	mov	r4,r2
 8018ff0:	00c00044 	movi	r3,1
 8018ff4:	e0bffd17 	ldw	r2,-12(fp)
 8018ff8:	1884983a 	sll	r2,r3,r2
 8018ffc:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 8019000:	e0800317 	ldw	r2,12(fp)
 8019004:	1080008c 	andi	r2,r2,2
 8019008:	1000051e 	bne	r2,zero,8019020 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 801900c:	e0bffc17 	ldw	r2,-16(fp)
 8019010:	10800304 	addi	r2,r2,12
 8019014:	1007883a 	mov	r3,r2
 8019018:	00810004 	movi	r2,1024
 801901c:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 8019020:	e0bffc17 	ldw	r2,-16(fp)
 8019024:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 8019028:	e0bffc17 	ldw	r2,-16(fp)
 801902c:	10800204 	addi	r2,r2,8
 8019030:	10800037 	ldwio	r2,0(r2)
 8019034:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 8019038:	e0bffa17 	ldw	r2,-24(fp)
 801903c:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 8019040:	10000226 	beq	r2,zero,801904c <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 8019044:	e0bff717 	ldw	r2,-36(fp)
 8019048:	1000031e 	bne	r2,zero,8019058 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 801904c:	e0bffa17 	ldw	r2,-24(fp)
 8019050:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 8019054:	103ff426 	beq	r2,zero,8019028 <alt_avalon_spi_command+0x98>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 8019058:	e0bffa17 	ldw	r2,-24(fp)
 801905c:	1080100c 	andi	r2,r2,64
 8019060:	10001e26 	beq	r2,zero,80190dc <alt_avalon_spi_command+0x14c>
 8019064:	e0bff717 	ldw	r2,-36(fp)
 8019068:	00801c0e 	bge	zero,r2,80190dc <alt_avalon_spi_command+0x14c>
    {
      credits--;
 801906c:	e0bff717 	ldw	r2,-36(fp)
 8019070:	10bfffc4 	addi	r2,r2,-1
 8019074:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 8019078:	e0ffff17 	ldw	r3,-4(fp)
 801907c:	e0bff817 	ldw	r2,-32(fp)
 8019080:	18800a2e 	bgeu	r3,r2,80190ac <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 8019084:	e0bffc17 	ldw	r2,-16(fp)
 8019088:	10800104 	addi	r2,r2,4
 801908c:	1009883a 	mov	r4,r2
 8019090:	e0bfff17 	ldw	r2,-4(fp)
 8019094:	10c00044 	addi	r3,r2,1
 8019098:	e0ffff15 	stw	r3,-4(fp)
 801909c:	10800003 	ldbu	r2,0(r2)
 80190a0:	10803fcc 	andi	r2,r2,255
 80190a4:	20800035 	stwio	r2,0(r4)
 80190a8:	00000c06 	br	80190dc <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 80190ac:	e0bff517 	ldw	r2,-44(fp)
 80190b0:	10000826 	beq	r2,zero,80190d4 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 80190b4:	e0bff517 	ldw	r2,-44(fp)
 80190b8:	10bfffc4 	addi	r2,r2,-1
 80190bc:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 80190c0:	e0bffc17 	ldw	r2,-16(fp)
 80190c4:	10800104 	addi	r2,r2,4
 80190c8:	0007883a 	mov	r3,zero
 80190cc:	10c00035 	stwio	r3,0(r2)
 80190d0:	00000206 	br	80190dc <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 80190d4:	00bf0004 	movi	r2,-1024
 80190d8:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 80190dc:	e0bffa17 	ldw	r2,-24(fp)
 80190e0:	1080200c 	andi	r2,r2,128
 80190e4:	103fd026 	beq	r2,zero,8019028 <alt_avalon_spi_command+0x98>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 80190e8:	e0bffc17 	ldw	r2,-16(fp)
 80190ec:	10800037 	ldwio	r2,0(r2)
 80190f0:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 80190f4:	e0bff617 	ldw	r2,-40(fp)
 80190f8:	10000426 	beq	r2,zero,801910c <alt_avalon_spi_command+0x17c>
        read_ignore--;
 80190fc:	e0bff617 	ldw	r2,-40(fp)
 8019100:	10bfffc4 	addi	r2,r2,-1
 8019104:	e0bff615 	stw	r2,-40(fp)
 8019108:	00000506 	br	8019120 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 801910c:	e0800217 	ldw	r2,8(fp)
 8019110:	10c00044 	addi	r3,r2,1
 8019114:	e0c00215 	stw	r3,8(fp)
 8019118:	e0fffb17 	ldw	r3,-20(fp)
 801911c:	10c00005 	stb	r3,0(r2)
      credits++;
 8019120:	e0bff717 	ldw	r2,-36(fp)
 8019124:	10800044 	addi	r2,r2,1
 8019128:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 801912c:	e0bff617 	ldw	r2,-40(fp)
 8019130:	103fbd1e 	bne	r2,zero,8019028 <alt_avalon_spi_command+0x98>
 8019134:	e0c00217 	ldw	r3,8(fp)
 8019138:	e0bff917 	ldw	r2,-28(fp)
 801913c:	18bfba1e 	bne	r3,r2,8019028 <alt_avalon_spi_command+0x98>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 8019140:	e0bffc17 	ldw	r2,-16(fp)
 8019144:	10800204 	addi	r2,r2,8
 8019148:	10800037 	ldwio	r2,0(r2)
 801914c:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 8019150:	e0bffa17 	ldw	r2,-24(fp)
 8019154:	1080080c 	andi	r2,r2,32
 8019158:	103ff926 	beq	r2,zero,8019140 <alt_avalon_spi_command+0x1b0>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 801915c:	e0800317 	ldw	r2,12(fp)
 8019160:	1080004c 	andi	r2,r2,1
 8019164:	1000041e 	bne	r2,zero,8019178 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 8019168:	e0bffc17 	ldw	r2,-16(fp)
 801916c:	10800304 	addi	r2,r2,12
 8019170:	0007883a 	mov	r3,zero
 8019174:	10c00035 	stwio	r3,0(r2)

  return read_length;
 8019178:	e0800117 	ldw	r2,4(fp)
}
 801917c:	e037883a 	mov	sp,fp
 8019180:	df000017 	ldw	fp,0(sp)
 8019184:	dec00104 	addi	sp,sp,4
 8019188:	f800283a 	ret

0801918c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 801918c:	defffa04 	addi	sp,sp,-24
 8019190:	dfc00515 	stw	ra,20(sp)
 8019194:	df000415 	stw	fp,16(sp)
 8019198:	df000404 	addi	fp,sp,16
 801919c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 80191a0:	0007883a 	mov	r3,zero
 80191a4:	e0bfff17 	ldw	r2,-4(fp)
 80191a8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 80191ac:	e0bfff17 	ldw	r2,-4(fp)
 80191b0:	10800104 	addi	r2,r2,4
 80191b4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80191b8:	0005303a 	rdctl	r2,status
 80191bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80191c0:	e0fffd17 	ldw	r3,-12(fp)
 80191c4:	00bfff84 	movi	r2,-2
 80191c8:	1884703a 	and	r2,r3,r2
 80191cc:	1001703a 	wrctl	status,r2
  
  return context;
 80191d0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 80191d4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 80191d8:	801812c0 	call	801812c <alt_tick>
 80191dc:	e0bffc17 	ldw	r2,-16(fp)
 80191e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80191e4:	e0bffe17 	ldw	r2,-8(fp)
 80191e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 80191ec:	0001883a 	nop
 80191f0:	e037883a 	mov	sp,fp
 80191f4:	dfc00117 	ldw	ra,4(sp)
 80191f8:	df000017 	ldw	fp,0(sp)
 80191fc:	dec00204 	addi	sp,sp,8
 8019200:	f800283a 	ret

08019204 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8019204:	defff804 	addi	sp,sp,-32
 8019208:	dfc00715 	stw	ra,28(sp)
 801920c:	df000615 	stw	fp,24(sp)
 8019210:	df000604 	addi	fp,sp,24
 8019214:	e13ffc15 	stw	r4,-16(fp)
 8019218:	e17ffd15 	stw	r5,-12(fp)
 801921c:	e1bffe15 	stw	r6,-8(fp)
 8019220:	e1ffff15 	stw	r7,-4(fp)
 8019224:	e0bfff17 	ldw	r2,-4(fp)
 8019228:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 801922c:	d0a74717 	ldw	r2,-25316(gp)
 8019230:	1000021e 	bne	r2,zero,801923c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 8019234:	e0bffb17 	ldw	r2,-20(fp)
 8019238:	d0a74715 	stw	r2,-25316(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 801923c:	e0bffc17 	ldw	r2,-16(fp)
 8019240:	10800104 	addi	r2,r2,4
 8019244:	00c001c4 	movi	r3,7
 8019248:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 801924c:	d8000015 	stw	zero,0(sp)
 8019250:	e1fffc17 	ldw	r7,-16(fp)
 8019254:	018200b4 	movhi	r6,2050
 8019258:	31a46304 	addi	r6,r6,-28276
 801925c:	e17ffe17 	ldw	r5,-8(fp)
 8019260:	e13ffd17 	ldw	r4,-12(fp)
 8019264:	80196e40 	call	80196e4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8019268:	0001883a 	nop
 801926c:	e037883a 	mov	sp,fp
 8019270:	dfc00117 	ldw	ra,4(sp)
 8019274:	df000017 	ldw	fp,0(sp)
 8019278:	dec00204 	addi	sp,sp,8
 801927c:	f800283a 	ret

08019280 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8019280:	defff504 	addi	sp,sp,-44
 8019284:	df000a15 	stw	fp,40(sp)
 8019288:	df000a04 	addi	fp,sp,40
 801928c:	e13ffc15 	stw	r4,-16(fp)
 8019290:	e17ffd15 	stw	r5,-12(fp)
 8019294:	e1bffe15 	stw	r6,-8(fp)
 8019298:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 801929c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80192a0:	d0a74717 	ldw	r2,-25316(gp)
  
  if (alt_ticks_per_second ())
 80192a4:	10003c26 	beq	r2,zero,8019398 <alt_alarm_start+0x118>
  {
    if (alarm)
 80192a8:	e0bffc17 	ldw	r2,-16(fp)
 80192ac:	10003826 	beq	r2,zero,8019390 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 80192b0:	e0bffc17 	ldw	r2,-16(fp)
 80192b4:	e0fffe17 	ldw	r3,-8(fp)
 80192b8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 80192bc:	e0bffc17 	ldw	r2,-16(fp)
 80192c0:	e0ffff17 	ldw	r3,-4(fp)
 80192c4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80192c8:	0005303a 	rdctl	r2,status
 80192cc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80192d0:	e0fff917 	ldw	r3,-28(fp)
 80192d4:	00bfff84 	movi	r2,-2
 80192d8:	1884703a 	and	r2,r3,r2
 80192dc:	1001703a 	wrctl	status,r2
  
  return context;
 80192e0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 80192e4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80192e8:	d0a74817 	ldw	r2,-25312(gp)
      
      current_nticks = alt_nticks();
 80192ec:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 80192f0:	e0fffd17 	ldw	r3,-12(fp)
 80192f4:	e0bff617 	ldw	r2,-40(fp)
 80192f8:	1885883a 	add	r2,r3,r2
 80192fc:	10c00044 	addi	r3,r2,1
 8019300:	e0bffc17 	ldw	r2,-16(fp)
 8019304:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8019308:	e0bffc17 	ldw	r2,-16(fp)
 801930c:	10c00217 	ldw	r3,8(r2)
 8019310:	e0bff617 	ldw	r2,-40(fp)
 8019314:	1880042e 	bgeu	r3,r2,8019328 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8019318:	e0bffc17 	ldw	r2,-16(fp)
 801931c:	00c00044 	movi	r3,1
 8019320:	10c00405 	stb	r3,16(r2)
 8019324:	00000206 	br	8019330 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8019328:	e0bffc17 	ldw	r2,-16(fp)
 801932c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8019330:	e0bffc17 	ldw	r2,-16(fp)
 8019334:	d0e02104 	addi	r3,gp,-32636
 8019338:	e0fffa15 	stw	r3,-24(fp)
 801933c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8019340:	e0bffb17 	ldw	r2,-20(fp)
 8019344:	e0fffa17 	ldw	r3,-24(fp)
 8019348:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 801934c:	e0bffa17 	ldw	r2,-24(fp)
 8019350:	10c00017 	ldw	r3,0(r2)
 8019354:	e0bffb17 	ldw	r2,-20(fp)
 8019358:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 801935c:	e0bffa17 	ldw	r2,-24(fp)
 8019360:	10800017 	ldw	r2,0(r2)
 8019364:	e0fffb17 	ldw	r3,-20(fp)
 8019368:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 801936c:	e0bffa17 	ldw	r2,-24(fp)
 8019370:	e0fffb17 	ldw	r3,-20(fp)
 8019374:	10c00015 	stw	r3,0(r2)
 8019378:	e0bff817 	ldw	r2,-32(fp)
 801937c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8019380:	e0bff717 	ldw	r2,-36(fp)
 8019384:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8019388:	0005883a 	mov	r2,zero
 801938c:	00000306 	br	801939c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8019390:	00bffa84 	movi	r2,-22
 8019394:	00000106 	br	801939c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8019398:	00bfde84 	movi	r2,-134
  }
}
 801939c:	e037883a 	mov	sp,fp
 80193a0:	df000017 	ldw	fp,0(sp)
 80193a4:	dec00104 	addi	sp,sp,4
 80193a8:	f800283a 	ret

080193ac <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 80193ac:	defffa04 	addi	sp,sp,-24
 80193b0:	dfc00515 	stw	ra,20(sp)
 80193b4:	df000415 	stw	fp,16(sp)
 80193b8:	df000404 	addi	fp,sp,16
 80193bc:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 80193c0:	00800244 	movi	r2,9
 80193c4:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 80193c8:	014003f4 	movhi	r5,15
 80193cc:	29509004 	addi	r5,r5,16960
 80193d0:	e13ffd17 	ldw	r4,-12(fp)
 80193d4:	800a1780 	call	800a178 <__mulsi3>
 80193d8:	100b883a 	mov	r5,r2
 80193dc:	0100bef4 	movhi	r4,763
 80193e0:	213c2004 	addi	r4,r4,-3968
 80193e4:	800a0bc0 	call	800a0bc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 80193e8:	100b883a 	mov	r5,r2
 80193ec:	01200034 	movhi	r4,32768
 80193f0:	213fffc4 	addi	r4,r4,-1
 80193f4:	800a0bc0 	call	800a0bc <__udivsi3>
 80193f8:	100b883a 	mov	r5,r2
 80193fc:	e13fff17 	ldw	r4,-4(fp)
 8019400:	800a0bc0 	call	800a0bc <__udivsi3>
 8019404:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8019408:	e0bffe17 	ldw	r2,-8(fp)
 801940c:	10002a26 	beq	r2,zero,80194b8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8019410:	e03ffc15 	stw	zero,-16(fp)
 8019414:	00001706 	br	8019474 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8019418:	00a00034 	movhi	r2,32768
 801941c:	10bfffc4 	addi	r2,r2,-1
 8019420:	10bfffc4 	addi	r2,r2,-1
 8019424:	103ffe1e 	bne	r2,zero,8019420 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8019428:	014003f4 	movhi	r5,15
 801942c:	29509004 	addi	r5,r5,16960
 8019430:	e13ffd17 	ldw	r4,-12(fp)
 8019434:	800a1780 	call	800a178 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8019438:	100b883a 	mov	r5,r2
 801943c:	0100bef4 	movhi	r4,763
 8019440:	213c2004 	addi	r4,r4,-3968
 8019444:	800a0bc0 	call	800a0bc <__udivsi3>
 8019448:	100b883a 	mov	r5,r2
 801944c:	01200034 	movhi	r4,32768
 8019450:	213fffc4 	addi	r4,r4,-1
 8019454:	800a0bc0 	call	800a0bc <__udivsi3>
 8019458:	1007883a 	mov	r3,r2
 801945c:	e0bfff17 	ldw	r2,-4(fp)
 8019460:	10c5c83a 	sub	r2,r2,r3
 8019464:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8019468:	e0bffc17 	ldw	r2,-16(fp)
 801946c:	10800044 	addi	r2,r2,1
 8019470:	e0bffc15 	stw	r2,-16(fp)
 8019474:	e0fffc17 	ldw	r3,-16(fp)
 8019478:	e0bffe17 	ldw	r2,-8(fp)
 801947c:	18bfe616 	blt	r3,r2,8019418 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8019480:	014003f4 	movhi	r5,15
 8019484:	29509004 	addi	r5,r5,16960
 8019488:	e13ffd17 	ldw	r4,-12(fp)
 801948c:	800a1780 	call	800a178 <__mulsi3>
 8019490:	100b883a 	mov	r5,r2
 8019494:	0100bef4 	movhi	r4,763
 8019498:	213c2004 	addi	r4,r4,-3968
 801949c:	800a0bc0 	call	800a0bc <__udivsi3>
 80194a0:	e17fff17 	ldw	r5,-4(fp)
 80194a4:	1009883a 	mov	r4,r2
 80194a8:	800a1780 	call	800a178 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 80194ac:	10bfffc4 	addi	r2,r2,-1
 80194b0:	103ffe1e 	bne	r2,zero,80194ac <alt_busy_sleep+0x100>
 80194b4:	00000d06 	br	80194ec <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 80194b8:	014003f4 	movhi	r5,15
 80194bc:	29509004 	addi	r5,r5,16960
 80194c0:	e13ffd17 	ldw	r4,-12(fp)
 80194c4:	800a1780 	call	800a178 <__mulsi3>
 80194c8:	100b883a 	mov	r5,r2
 80194cc:	0100bef4 	movhi	r4,763
 80194d0:	213c2004 	addi	r4,r4,-3968
 80194d4:	800a0bc0 	call	800a0bc <__udivsi3>
 80194d8:	e17fff17 	ldw	r5,-4(fp)
 80194dc:	1009883a 	mov	r4,r2
 80194e0:	800a1780 	call	800a178 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 80194e4:	10bfffc4 	addi	r2,r2,-1
 80194e8:	00bffe16 	blt	zero,r2,80194e4 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 80194ec:	0005883a 	mov	r2,zero
}
 80194f0:	e037883a 	mov	sp,fp
 80194f4:	dfc00117 	ldw	ra,4(sp)
 80194f8:	df000017 	ldw	fp,0(sp)
 80194fc:	dec00204 	addi	sp,sp,8
 8019500:	f800283a 	ret

08019504 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8019504:	deffff04 	addi	sp,sp,-4
 8019508:	df000015 	stw	fp,0(sp)
 801950c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8019510:	0001883a 	nop
 8019514:	e037883a 	mov	sp,fp
 8019518:	df000017 	ldw	fp,0(sp)
 801951c:	dec00104 	addi	sp,sp,4
 8019520:	f800283a 	ret

08019524 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8019524:	defffe04 	addi	sp,sp,-8
 8019528:	dfc00115 	stw	ra,4(sp)
 801952c:	df000015 	stw	fp,0(sp)
 8019530:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8019534:	d0a01f17 	ldw	r2,-32644(gp)
 8019538:	10000326 	beq	r2,zero,8019548 <alt_get_errno+0x24>
 801953c:	d0a01f17 	ldw	r2,-32644(gp)
 8019540:	103ee83a 	callr	r2
 8019544:	00000106 	br	801954c <alt_get_errno+0x28>
 8019548:	d0a73c04 	addi	r2,gp,-25360
}
 801954c:	e037883a 	mov	sp,fp
 8019550:	dfc00117 	ldw	ra,4(sp)
 8019554:	df000017 	ldw	fp,0(sp)
 8019558:	dec00204 	addi	sp,sp,8
 801955c:	f800283a 	ret

08019560 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8019560:	defffa04 	addi	sp,sp,-24
 8019564:	dfc00515 	stw	ra,20(sp)
 8019568:	df000415 	stw	fp,16(sp)
 801956c:	df000404 	addi	fp,sp,16
 8019570:	e13ffe15 	stw	r4,-8(fp)
 8019574:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8019578:	e0bffe17 	ldw	r2,-8(fp)
 801957c:	10000326 	beq	r2,zero,801958c <alt_dev_llist_insert+0x2c>
 8019580:	e0bffe17 	ldw	r2,-8(fp)
 8019584:	10800217 	ldw	r2,8(r2)
 8019588:	1000061e 	bne	r2,zero,80195a4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 801958c:	80195240 	call	8019524 <alt_get_errno>
 8019590:	1007883a 	mov	r3,r2
 8019594:	00800584 	movi	r2,22
 8019598:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 801959c:	00bffa84 	movi	r2,-22
 80195a0:	00001306 	br	80195f0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 80195a4:	e0bffe17 	ldw	r2,-8(fp)
 80195a8:	e0ffff17 	ldw	r3,-4(fp)
 80195ac:	e0fffc15 	stw	r3,-16(fp)
 80195b0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80195b4:	e0bffd17 	ldw	r2,-12(fp)
 80195b8:	e0fffc17 	ldw	r3,-16(fp)
 80195bc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80195c0:	e0bffc17 	ldw	r2,-16(fp)
 80195c4:	10c00017 	ldw	r3,0(r2)
 80195c8:	e0bffd17 	ldw	r2,-12(fp)
 80195cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80195d0:	e0bffc17 	ldw	r2,-16(fp)
 80195d4:	10800017 	ldw	r2,0(r2)
 80195d8:	e0fffd17 	ldw	r3,-12(fp)
 80195dc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80195e0:	e0bffc17 	ldw	r2,-16(fp)
 80195e4:	e0fffd17 	ldw	r3,-12(fp)
 80195e8:	10c00015 	stw	r3,0(r2)

  return 0;  
 80195ec:	0005883a 	mov	r2,zero
}
 80195f0:	e037883a 	mov	sp,fp
 80195f4:	dfc00117 	ldw	ra,4(sp)
 80195f8:	df000017 	ldw	fp,0(sp)
 80195fc:	dec00204 	addi	sp,sp,8
 8019600:	f800283a 	ret

08019604 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8019604:	defffd04 	addi	sp,sp,-12
 8019608:	dfc00215 	stw	ra,8(sp)
 801960c:	df000115 	stw	fp,4(sp)
 8019610:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8019614:	008200b4 	movhi	r2,2050
 8019618:	10a92904 	addi	r2,r2,-23388
 801961c:	e0bfff15 	stw	r2,-4(fp)
 8019620:	00000606 	br	801963c <_do_ctors+0x38>
        (*ctor) (); 
 8019624:	e0bfff17 	ldw	r2,-4(fp)
 8019628:	10800017 	ldw	r2,0(r2)
 801962c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8019630:	e0bfff17 	ldw	r2,-4(fp)
 8019634:	10bfff04 	addi	r2,r2,-4
 8019638:	e0bfff15 	stw	r2,-4(fp)
 801963c:	e0ffff17 	ldw	r3,-4(fp)
 8019640:	008200b4 	movhi	r2,2050
 8019644:	10a92a04 	addi	r2,r2,-23384
 8019648:	18bff62e 	bgeu	r3,r2,8019624 <_do_ctors+0x20>
        (*ctor) (); 
}
 801964c:	0001883a 	nop
 8019650:	e037883a 	mov	sp,fp
 8019654:	dfc00117 	ldw	ra,4(sp)
 8019658:	df000017 	ldw	fp,0(sp)
 801965c:	dec00204 	addi	sp,sp,8
 8019660:	f800283a 	ret

08019664 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8019664:	defffd04 	addi	sp,sp,-12
 8019668:	dfc00215 	stw	ra,8(sp)
 801966c:	df000115 	stw	fp,4(sp)
 8019670:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8019674:	008200b4 	movhi	r2,2050
 8019678:	10a92904 	addi	r2,r2,-23388
 801967c:	e0bfff15 	stw	r2,-4(fp)
 8019680:	00000606 	br	801969c <_do_dtors+0x38>
        (*dtor) (); 
 8019684:	e0bfff17 	ldw	r2,-4(fp)
 8019688:	10800017 	ldw	r2,0(r2)
 801968c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8019690:	e0bfff17 	ldw	r2,-4(fp)
 8019694:	10bfff04 	addi	r2,r2,-4
 8019698:	e0bfff15 	stw	r2,-4(fp)
 801969c:	e0ffff17 	ldw	r3,-4(fp)
 80196a0:	008200b4 	movhi	r2,2050
 80196a4:	10a92a04 	addi	r2,r2,-23384
 80196a8:	18bff62e 	bgeu	r3,r2,8019684 <_do_dtors+0x20>
        (*dtor) (); 
}
 80196ac:	0001883a 	nop
 80196b0:	e037883a 	mov	sp,fp
 80196b4:	dfc00117 	ldw	ra,4(sp)
 80196b8:	df000017 	ldw	fp,0(sp)
 80196bc:	dec00204 	addi	sp,sp,8
 80196c0:	f800283a 	ret

080196c4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80196c4:	deffff04 	addi	sp,sp,-4
 80196c8:	df000015 	stw	fp,0(sp)
 80196cc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 80196d0:	0001883a 	nop
 80196d4:	e037883a 	mov	sp,fp
 80196d8:	df000017 	ldw	fp,0(sp)
 80196dc:	dec00104 	addi	sp,sp,4
 80196e0:	f800283a 	ret

080196e4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80196e4:	defff904 	addi	sp,sp,-28
 80196e8:	dfc00615 	stw	ra,24(sp)
 80196ec:	df000515 	stw	fp,20(sp)
 80196f0:	df000504 	addi	fp,sp,20
 80196f4:	e13ffc15 	stw	r4,-16(fp)
 80196f8:	e17ffd15 	stw	r5,-12(fp)
 80196fc:	e1bffe15 	stw	r6,-8(fp)
 8019700:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8019704:	e0800217 	ldw	r2,8(fp)
 8019708:	d8800015 	stw	r2,0(sp)
 801970c:	e1ffff17 	ldw	r7,-4(fp)
 8019710:	e1bffe17 	ldw	r6,-8(fp)
 8019714:	e17ffd17 	ldw	r5,-12(fp)
 8019718:	e13ffc17 	ldw	r4,-16(fp)
 801971c:	80198940 	call	8019894 <alt_iic_isr_register>
}  
 8019720:	e037883a 	mov	sp,fp
 8019724:	dfc00117 	ldw	ra,4(sp)
 8019728:	df000017 	ldw	fp,0(sp)
 801972c:	dec00204 	addi	sp,sp,8
 8019730:	f800283a 	ret

08019734 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8019734:	defff904 	addi	sp,sp,-28
 8019738:	df000615 	stw	fp,24(sp)
 801973c:	df000604 	addi	fp,sp,24
 8019740:	e13ffe15 	stw	r4,-8(fp)
 8019744:	e17fff15 	stw	r5,-4(fp)
 8019748:	e0bfff17 	ldw	r2,-4(fp)
 801974c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8019750:	0005303a 	rdctl	r2,status
 8019754:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8019758:	e0fffb17 	ldw	r3,-20(fp)
 801975c:	00bfff84 	movi	r2,-2
 8019760:	1884703a 	and	r2,r3,r2
 8019764:	1001703a 	wrctl	status,r2
  
  return context;
 8019768:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 801976c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8019770:	00c00044 	movi	r3,1
 8019774:	e0bffa17 	ldw	r2,-24(fp)
 8019778:	1884983a 	sll	r2,r3,r2
 801977c:	1007883a 	mov	r3,r2
 8019780:	d0a74917 	ldw	r2,-25308(gp)
 8019784:	1884b03a 	or	r2,r3,r2
 8019788:	d0a74915 	stw	r2,-25308(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 801978c:	d0a74917 	ldw	r2,-25308(gp)
 8019790:	100170fa 	wrctl	ienable,r2
 8019794:	e0bffc17 	ldw	r2,-16(fp)
 8019798:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801979c:	e0bffd17 	ldw	r2,-12(fp)
 80197a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80197a4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 80197a8:	0001883a 	nop
}
 80197ac:	e037883a 	mov	sp,fp
 80197b0:	df000017 	ldw	fp,0(sp)
 80197b4:	dec00104 	addi	sp,sp,4
 80197b8:	f800283a 	ret

080197bc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 80197bc:	defff904 	addi	sp,sp,-28
 80197c0:	df000615 	stw	fp,24(sp)
 80197c4:	df000604 	addi	fp,sp,24
 80197c8:	e13ffe15 	stw	r4,-8(fp)
 80197cc:	e17fff15 	stw	r5,-4(fp)
 80197d0:	e0bfff17 	ldw	r2,-4(fp)
 80197d4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80197d8:	0005303a 	rdctl	r2,status
 80197dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80197e0:	e0fffb17 	ldw	r3,-20(fp)
 80197e4:	00bfff84 	movi	r2,-2
 80197e8:	1884703a 	and	r2,r3,r2
 80197ec:	1001703a 	wrctl	status,r2
  
  return context;
 80197f0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80197f4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 80197f8:	00c00044 	movi	r3,1
 80197fc:	e0bffa17 	ldw	r2,-24(fp)
 8019800:	1884983a 	sll	r2,r3,r2
 8019804:	0084303a 	nor	r2,zero,r2
 8019808:	1007883a 	mov	r3,r2
 801980c:	d0a74917 	ldw	r2,-25308(gp)
 8019810:	1884703a 	and	r2,r3,r2
 8019814:	d0a74915 	stw	r2,-25308(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8019818:	d0a74917 	ldw	r2,-25308(gp)
 801981c:	100170fa 	wrctl	ienable,r2
 8019820:	e0bffc17 	ldw	r2,-16(fp)
 8019824:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8019828:	e0bffd17 	ldw	r2,-12(fp)
 801982c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8019830:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8019834:	0001883a 	nop
}
 8019838:	e037883a 	mov	sp,fp
 801983c:	df000017 	ldw	fp,0(sp)
 8019840:	dec00104 	addi	sp,sp,4
 8019844:	f800283a 	ret

08019848 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8019848:	defffc04 	addi	sp,sp,-16
 801984c:	df000315 	stw	fp,12(sp)
 8019850:	df000304 	addi	fp,sp,12
 8019854:	e13ffe15 	stw	r4,-8(fp)
 8019858:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 801985c:	000530fa 	rdctl	r2,ienable
 8019860:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8019864:	00c00044 	movi	r3,1
 8019868:	e0bfff17 	ldw	r2,-4(fp)
 801986c:	1884983a 	sll	r2,r3,r2
 8019870:	1007883a 	mov	r3,r2
 8019874:	e0bffd17 	ldw	r2,-12(fp)
 8019878:	1884703a 	and	r2,r3,r2
 801987c:	1004c03a 	cmpne	r2,r2,zero
 8019880:	10803fcc 	andi	r2,r2,255
}
 8019884:	e037883a 	mov	sp,fp
 8019888:	df000017 	ldw	fp,0(sp)
 801988c:	dec00104 	addi	sp,sp,4
 8019890:	f800283a 	ret

08019894 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8019894:	defff504 	addi	sp,sp,-44
 8019898:	dfc00a15 	stw	ra,40(sp)
 801989c:	df000915 	stw	fp,36(sp)
 80198a0:	df000904 	addi	fp,sp,36
 80198a4:	e13ffc15 	stw	r4,-16(fp)
 80198a8:	e17ffd15 	stw	r5,-12(fp)
 80198ac:	e1bffe15 	stw	r6,-8(fp)
 80198b0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 80198b4:	00bffa84 	movi	r2,-22
 80198b8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 80198bc:	e0bffd17 	ldw	r2,-12(fp)
 80198c0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 80198c4:	e0bff817 	ldw	r2,-32(fp)
 80198c8:	10800808 	cmpgei	r2,r2,32
 80198cc:	1000271e 	bne	r2,zero,801996c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80198d0:	0005303a 	rdctl	r2,status
 80198d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80198d8:	e0fffb17 	ldw	r3,-20(fp)
 80198dc:	00bfff84 	movi	r2,-2
 80198e0:	1884703a 	and	r2,r3,r2
 80198e4:	1001703a 	wrctl	status,r2
  
  return context;
 80198e8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 80198ec:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 80198f0:	008200b4 	movhi	r2,2050
 80198f4:	10ba7004 	addi	r2,r2,-5696
 80198f8:	e0fff817 	ldw	r3,-32(fp)
 80198fc:	180690fa 	slli	r3,r3,3
 8019900:	10c5883a 	add	r2,r2,r3
 8019904:	e0fffe17 	ldw	r3,-8(fp)
 8019908:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 801990c:	008200b4 	movhi	r2,2050
 8019910:	10ba7004 	addi	r2,r2,-5696
 8019914:	e0fff817 	ldw	r3,-32(fp)
 8019918:	180690fa 	slli	r3,r3,3
 801991c:	10c5883a 	add	r2,r2,r3
 8019920:	10800104 	addi	r2,r2,4
 8019924:	e0ffff17 	ldw	r3,-4(fp)
 8019928:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 801992c:	e0bffe17 	ldw	r2,-8(fp)
 8019930:	10000526 	beq	r2,zero,8019948 <alt_iic_isr_register+0xb4>
 8019934:	e0bff817 	ldw	r2,-32(fp)
 8019938:	100b883a 	mov	r5,r2
 801993c:	e13ffc17 	ldw	r4,-16(fp)
 8019940:	80197340 	call	8019734 <alt_ic_irq_enable>
 8019944:	00000406 	br	8019958 <alt_iic_isr_register+0xc4>
 8019948:	e0bff817 	ldw	r2,-32(fp)
 801994c:	100b883a 	mov	r5,r2
 8019950:	e13ffc17 	ldw	r4,-16(fp)
 8019954:	80197bc0 	call	80197bc <alt_ic_irq_disable>
 8019958:	e0bff715 	stw	r2,-36(fp)
 801995c:	e0bffa17 	ldw	r2,-24(fp)
 8019960:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8019964:	e0bff917 	ldw	r2,-28(fp)
 8019968:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 801996c:	e0bff717 	ldw	r2,-36(fp)
}
 8019970:	e037883a 	mov	sp,fp
 8019974:	dfc00117 	ldw	ra,4(sp)
 8019978:	df000017 	ldw	fp,0(sp)
 801997c:	dec00204 	addi	sp,sp,8
 8019980:	f800283a 	ret

08019984 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8019984:	defff804 	addi	sp,sp,-32
 8019988:	dfc00715 	stw	ra,28(sp)
 801998c:	df000615 	stw	fp,24(sp)
 8019990:	dc000515 	stw	r16,20(sp)
 8019994:	df000604 	addi	fp,sp,24
 8019998:	e13ffb15 	stw	r4,-20(fp)
 801999c:	e17ffc15 	stw	r5,-16(fp)
 80199a0:	e1bffd15 	stw	r6,-12(fp)
 80199a4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 80199a8:	e1bffe17 	ldw	r6,-8(fp)
 80199ac:	e17ffd17 	ldw	r5,-12(fp)
 80199b0:	e13ffc17 	ldw	r4,-16(fp)
 80199b4:	8019c0c0 	call	8019c0c <open>
 80199b8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 80199bc:	e0bffa17 	ldw	r2,-24(fp)
 80199c0:	10002216 	blt	r2,zero,8019a4c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 80199c4:	040200b4 	movhi	r16,2050
 80199c8:	842d9904 	addi	r16,r16,-18844
 80199cc:	e0bffa17 	ldw	r2,-24(fp)
 80199d0:	01400304 	movi	r5,12
 80199d4:	1009883a 	mov	r4,r2
 80199d8:	800a1780 	call	800a178 <__mulsi3>
 80199dc:	8085883a 	add	r2,r16,r2
 80199e0:	10c00017 	ldw	r3,0(r2)
 80199e4:	e0bffb17 	ldw	r2,-20(fp)
 80199e8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 80199ec:	040200b4 	movhi	r16,2050
 80199f0:	842d9904 	addi	r16,r16,-18844
 80199f4:	e0bffa17 	ldw	r2,-24(fp)
 80199f8:	01400304 	movi	r5,12
 80199fc:	1009883a 	mov	r4,r2
 8019a00:	800a1780 	call	800a178 <__mulsi3>
 8019a04:	8085883a 	add	r2,r16,r2
 8019a08:	10800104 	addi	r2,r2,4
 8019a0c:	10c00017 	ldw	r3,0(r2)
 8019a10:	e0bffb17 	ldw	r2,-20(fp)
 8019a14:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8019a18:	040200b4 	movhi	r16,2050
 8019a1c:	842d9904 	addi	r16,r16,-18844
 8019a20:	e0bffa17 	ldw	r2,-24(fp)
 8019a24:	01400304 	movi	r5,12
 8019a28:	1009883a 	mov	r4,r2
 8019a2c:	800a1780 	call	800a178 <__mulsi3>
 8019a30:	8085883a 	add	r2,r16,r2
 8019a34:	10800204 	addi	r2,r2,8
 8019a38:	10c00017 	ldw	r3,0(r2)
 8019a3c:	e0bffb17 	ldw	r2,-20(fp)
 8019a40:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8019a44:	e13ffa17 	ldw	r4,-24(fp)
 8019a48:	8017f5c0 	call	8017f5c <alt_release_fd>
  }
} 
 8019a4c:	0001883a 	nop
 8019a50:	e6ffff04 	addi	sp,fp,-4
 8019a54:	dfc00217 	ldw	ra,8(sp)
 8019a58:	df000117 	ldw	fp,4(sp)
 8019a5c:	dc000017 	ldw	r16,0(sp)
 8019a60:	dec00304 	addi	sp,sp,12
 8019a64:	f800283a 	ret

08019a68 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8019a68:	defffb04 	addi	sp,sp,-20
 8019a6c:	dfc00415 	stw	ra,16(sp)
 8019a70:	df000315 	stw	fp,12(sp)
 8019a74:	df000304 	addi	fp,sp,12
 8019a78:	e13ffd15 	stw	r4,-12(fp)
 8019a7c:	e17ffe15 	stw	r5,-8(fp)
 8019a80:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8019a84:	01c07fc4 	movi	r7,511
 8019a88:	01800044 	movi	r6,1
 8019a8c:	e17ffd17 	ldw	r5,-12(fp)
 8019a90:	010200b4 	movhi	r4,2050
 8019a94:	212d9c04 	addi	r4,r4,-18832
 8019a98:	80199840 	call	8019984 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8019a9c:	01c07fc4 	movi	r7,511
 8019aa0:	000d883a 	mov	r6,zero
 8019aa4:	e17ffe17 	ldw	r5,-8(fp)
 8019aa8:	010200b4 	movhi	r4,2050
 8019aac:	212d9904 	addi	r4,r4,-18844
 8019ab0:	80199840 	call	8019984 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8019ab4:	01c07fc4 	movi	r7,511
 8019ab8:	01800044 	movi	r6,1
 8019abc:	e17fff17 	ldw	r5,-4(fp)
 8019ac0:	010200b4 	movhi	r4,2050
 8019ac4:	212d9f04 	addi	r4,r4,-18820
 8019ac8:	80199840 	call	8019984 <alt_open_fd>
}  
 8019acc:	0001883a 	nop
 8019ad0:	e037883a 	mov	sp,fp
 8019ad4:	dfc00117 	ldw	ra,4(sp)
 8019ad8:	df000017 	ldw	fp,0(sp)
 8019adc:	dec00204 	addi	sp,sp,8
 8019ae0:	f800283a 	ret

08019ae4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8019ae4:	defffe04 	addi	sp,sp,-8
 8019ae8:	dfc00115 	stw	ra,4(sp)
 8019aec:	df000015 	stw	fp,0(sp)
 8019af0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8019af4:	d0a01f17 	ldw	r2,-32644(gp)
 8019af8:	10000326 	beq	r2,zero,8019b08 <alt_get_errno+0x24>
 8019afc:	d0a01f17 	ldw	r2,-32644(gp)
 8019b00:	103ee83a 	callr	r2
 8019b04:	00000106 	br	8019b0c <alt_get_errno+0x28>
 8019b08:	d0a73c04 	addi	r2,gp,-25360
}
 8019b0c:	e037883a 	mov	sp,fp
 8019b10:	dfc00117 	ldw	ra,4(sp)
 8019b14:	df000017 	ldw	fp,0(sp)
 8019b18:	dec00204 	addi	sp,sp,8
 8019b1c:	f800283a 	ret

08019b20 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8019b20:	defffb04 	addi	sp,sp,-20
 8019b24:	dfc00415 	stw	ra,16(sp)
 8019b28:	df000315 	stw	fp,12(sp)
 8019b2c:	dc000215 	stw	r16,8(sp)
 8019b30:	df000304 	addi	fp,sp,12
 8019b34:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8019b38:	e0bffe17 	ldw	r2,-8(fp)
 8019b3c:	10800217 	ldw	r2,8(r2)
 8019b40:	10d00034 	orhi	r3,r2,16384
 8019b44:	e0bffe17 	ldw	r2,-8(fp)
 8019b48:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8019b4c:	e03ffd15 	stw	zero,-12(fp)
 8019b50:	00002306 	br	8019be0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8019b54:	040200b4 	movhi	r16,2050
 8019b58:	842d9904 	addi	r16,r16,-18844
 8019b5c:	e0bffd17 	ldw	r2,-12(fp)
 8019b60:	01400304 	movi	r5,12
 8019b64:	1009883a 	mov	r4,r2
 8019b68:	800a1780 	call	800a178 <__mulsi3>
 8019b6c:	8085883a 	add	r2,r16,r2
 8019b70:	10c00017 	ldw	r3,0(r2)
 8019b74:	e0bffe17 	ldw	r2,-8(fp)
 8019b78:	10800017 	ldw	r2,0(r2)
 8019b7c:	1880151e 	bne	r3,r2,8019bd4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8019b80:	040200b4 	movhi	r16,2050
 8019b84:	842d9904 	addi	r16,r16,-18844
 8019b88:	e0bffd17 	ldw	r2,-12(fp)
 8019b8c:	01400304 	movi	r5,12
 8019b90:	1009883a 	mov	r4,r2
 8019b94:	800a1780 	call	800a178 <__mulsi3>
 8019b98:	8085883a 	add	r2,r16,r2
 8019b9c:	10800204 	addi	r2,r2,8
 8019ba0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8019ba4:	10000b0e 	bge	r2,zero,8019bd4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8019ba8:	01400304 	movi	r5,12
 8019bac:	e13ffd17 	ldw	r4,-12(fp)
 8019bb0:	800a1780 	call	800a178 <__mulsi3>
 8019bb4:	1007883a 	mov	r3,r2
 8019bb8:	008200b4 	movhi	r2,2050
 8019bbc:	10ad9904 	addi	r2,r2,-18844
 8019bc0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8019bc4:	e0bffe17 	ldw	r2,-8(fp)
 8019bc8:	18800226 	beq	r3,r2,8019bd4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8019bcc:	00bffcc4 	movi	r2,-13
 8019bd0:	00000806 	br	8019bf4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8019bd4:	e0bffd17 	ldw	r2,-12(fp)
 8019bd8:	10800044 	addi	r2,r2,1
 8019bdc:	e0bffd15 	stw	r2,-12(fp)
 8019be0:	d0a01e17 	ldw	r2,-32648(gp)
 8019be4:	1007883a 	mov	r3,r2
 8019be8:	e0bffd17 	ldw	r2,-12(fp)
 8019bec:	18bfd92e 	bgeu	r3,r2,8019b54 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8019bf0:	0005883a 	mov	r2,zero
}
 8019bf4:	e6ffff04 	addi	sp,fp,-4
 8019bf8:	dfc00217 	ldw	ra,8(sp)
 8019bfc:	df000117 	ldw	fp,4(sp)
 8019c00:	dc000017 	ldw	r16,0(sp)
 8019c04:	dec00304 	addi	sp,sp,12
 8019c08:	f800283a 	ret

08019c0c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8019c0c:	defff604 	addi	sp,sp,-40
 8019c10:	dfc00915 	stw	ra,36(sp)
 8019c14:	df000815 	stw	fp,32(sp)
 8019c18:	df000804 	addi	fp,sp,32
 8019c1c:	e13ffd15 	stw	r4,-12(fp)
 8019c20:	e17ffe15 	stw	r5,-8(fp)
 8019c24:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8019c28:	00bfffc4 	movi	r2,-1
 8019c2c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8019c30:	00bffb44 	movi	r2,-19
 8019c34:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8019c38:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8019c3c:	d1601c04 	addi	r5,gp,-32656
 8019c40:	e13ffd17 	ldw	r4,-12(fp)
 8019c44:	8019d8c0 	call	8019d8c <alt_find_dev>
 8019c48:	e0bff815 	stw	r2,-32(fp)
 8019c4c:	e0bff817 	ldw	r2,-32(fp)
 8019c50:	1000051e 	bne	r2,zero,8019c68 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8019c54:	e13ffd17 	ldw	r4,-12(fp)
 8019c58:	8019e1c0 	call	8019e1c <alt_find_file>
 8019c5c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8019c60:	00800044 	movi	r2,1
 8019c64:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8019c68:	e0bff817 	ldw	r2,-32(fp)
 8019c6c:	10002b26 	beq	r2,zero,8019d1c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8019c70:	e13ff817 	ldw	r4,-32(fp)
 8019c74:	8019f240 	call	8019f24 <alt_get_fd>
 8019c78:	e0bff915 	stw	r2,-28(fp)
 8019c7c:	e0bff917 	ldw	r2,-28(fp)
 8019c80:	1000030e 	bge	r2,zero,8019c90 <open+0x84>
    {
      status = index;
 8019c84:	e0bff917 	ldw	r2,-28(fp)
 8019c88:	e0bffa15 	stw	r2,-24(fp)
 8019c8c:	00002506 	br	8019d24 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 8019c90:	01400304 	movi	r5,12
 8019c94:	e13ff917 	ldw	r4,-28(fp)
 8019c98:	800a1780 	call	800a178 <__mulsi3>
 8019c9c:	1007883a 	mov	r3,r2
 8019ca0:	008200b4 	movhi	r2,2050
 8019ca4:	10ad9904 	addi	r2,r2,-18844
 8019ca8:	1885883a 	add	r2,r3,r2
 8019cac:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8019cb0:	e0fffe17 	ldw	r3,-8(fp)
 8019cb4:	00900034 	movhi	r2,16384
 8019cb8:	10bfffc4 	addi	r2,r2,-1
 8019cbc:	1886703a 	and	r3,r3,r2
 8019cc0:	e0bffc17 	ldw	r2,-16(fp)
 8019cc4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8019cc8:	e0bffb17 	ldw	r2,-20(fp)
 8019ccc:	1000051e 	bne	r2,zero,8019ce4 <open+0xd8>
 8019cd0:	e13ffc17 	ldw	r4,-16(fp)
 8019cd4:	8019b200 	call	8019b20 <alt_file_locked>
 8019cd8:	e0bffa15 	stw	r2,-24(fp)
 8019cdc:	e0bffa17 	ldw	r2,-24(fp)
 8019ce0:	10001016 	blt	r2,zero,8019d24 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8019ce4:	e0bff817 	ldw	r2,-32(fp)
 8019ce8:	10800317 	ldw	r2,12(r2)
 8019cec:	10000826 	beq	r2,zero,8019d10 <open+0x104>
 8019cf0:	e0bff817 	ldw	r2,-32(fp)
 8019cf4:	10800317 	ldw	r2,12(r2)
 8019cf8:	e1ffff17 	ldw	r7,-4(fp)
 8019cfc:	e1bffe17 	ldw	r6,-8(fp)
 8019d00:	e17ffd17 	ldw	r5,-12(fp)
 8019d04:	e13ffc17 	ldw	r4,-16(fp)
 8019d08:	103ee83a 	callr	r2
 8019d0c:	00000106 	br	8019d14 <open+0x108>
 8019d10:	0005883a 	mov	r2,zero
 8019d14:	e0bffa15 	stw	r2,-24(fp)
 8019d18:	00000206 	br	8019d24 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8019d1c:	00bffb44 	movi	r2,-19
 8019d20:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8019d24:	e0bffa17 	ldw	r2,-24(fp)
 8019d28:	1000090e 	bge	r2,zero,8019d50 <open+0x144>
  {
    alt_release_fd (index);  
 8019d2c:	e13ff917 	ldw	r4,-28(fp)
 8019d30:	8017f5c0 	call	8017f5c <alt_release_fd>
    ALT_ERRNO = -status;
 8019d34:	8019ae40 	call	8019ae4 <alt_get_errno>
 8019d38:	1007883a 	mov	r3,r2
 8019d3c:	e0bffa17 	ldw	r2,-24(fp)
 8019d40:	0085c83a 	sub	r2,zero,r2
 8019d44:	18800015 	stw	r2,0(r3)
    return -1;
 8019d48:	00bfffc4 	movi	r2,-1
 8019d4c:	00000106 	br	8019d54 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 8019d50:	e0bff917 	ldw	r2,-28(fp)
}
 8019d54:	e037883a 	mov	sp,fp
 8019d58:	dfc00117 	ldw	ra,4(sp)
 8019d5c:	df000017 	ldw	fp,0(sp)
 8019d60:	dec00204 	addi	sp,sp,8
 8019d64:	f800283a 	ret

08019d68 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8019d68:	deffff04 	addi	sp,sp,-4
 8019d6c:	df000015 	stw	fp,0(sp)
 8019d70:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8019d74:	000170fa 	wrctl	ienable,zero
}
 8019d78:	0001883a 	nop
 8019d7c:	e037883a 	mov	sp,fp
 8019d80:	df000017 	ldw	fp,0(sp)
 8019d84:	dec00104 	addi	sp,sp,4
 8019d88:	f800283a 	ret

08019d8c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8019d8c:	defffa04 	addi	sp,sp,-24
 8019d90:	dfc00515 	stw	ra,20(sp)
 8019d94:	df000415 	stw	fp,16(sp)
 8019d98:	df000404 	addi	fp,sp,16
 8019d9c:	e13ffe15 	stw	r4,-8(fp)
 8019da0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8019da4:	e0bfff17 	ldw	r2,-4(fp)
 8019da8:	10800017 	ldw	r2,0(r2)
 8019dac:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8019db0:	e13ffe17 	ldw	r4,-8(fp)
 8019db4:	800b0980 	call	800b098 <strlen>
 8019db8:	10800044 	addi	r2,r2,1
 8019dbc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8019dc0:	00000d06 	br	8019df8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8019dc4:	e0bffc17 	ldw	r2,-16(fp)
 8019dc8:	10800217 	ldw	r2,8(r2)
 8019dcc:	e0fffd17 	ldw	r3,-12(fp)
 8019dd0:	180d883a 	mov	r6,r3
 8019dd4:	e17ffe17 	ldw	r5,-8(fp)
 8019dd8:	1009883a 	mov	r4,r2
 8019ddc:	800aa8c0 	call	800aa8c <memcmp>
 8019de0:	1000021e 	bne	r2,zero,8019dec <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8019de4:	e0bffc17 	ldw	r2,-16(fp)
 8019de8:	00000706 	br	8019e08 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8019dec:	e0bffc17 	ldw	r2,-16(fp)
 8019df0:	10800017 	ldw	r2,0(r2)
 8019df4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8019df8:	e0fffc17 	ldw	r3,-16(fp)
 8019dfc:	e0bfff17 	ldw	r2,-4(fp)
 8019e00:	18bff01e 	bne	r3,r2,8019dc4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8019e04:	0005883a 	mov	r2,zero
}
 8019e08:	e037883a 	mov	sp,fp
 8019e0c:	dfc00117 	ldw	ra,4(sp)
 8019e10:	df000017 	ldw	fp,0(sp)
 8019e14:	dec00204 	addi	sp,sp,8
 8019e18:	f800283a 	ret

08019e1c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8019e1c:	defffb04 	addi	sp,sp,-20
 8019e20:	dfc00415 	stw	ra,16(sp)
 8019e24:	df000315 	stw	fp,12(sp)
 8019e28:	df000304 	addi	fp,sp,12
 8019e2c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8019e30:	d0a01a17 	ldw	r2,-32664(gp)
 8019e34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8019e38:	00003106 	br	8019f00 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8019e3c:	e0bffd17 	ldw	r2,-12(fp)
 8019e40:	10800217 	ldw	r2,8(r2)
 8019e44:	1009883a 	mov	r4,r2
 8019e48:	800b0980 	call	800b098 <strlen>
 8019e4c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8019e50:	e0bffd17 	ldw	r2,-12(fp)
 8019e54:	10c00217 	ldw	r3,8(r2)
 8019e58:	e0bffe17 	ldw	r2,-8(fp)
 8019e5c:	10bfffc4 	addi	r2,r2,-1
 8019e60:	1885883a 	add	r2,r3,r2
 8019e64:	10800003 	ldbu	r2,0(r2)
 8019e68:	10803fcc 	andi	r2,r2,255
 8019e6c:	1080201c 	xori	r2,r2,128
 8019e70:	10bfe004 	addi	r2,r2,-128
 8019e74:	10800bd8 	cmpnei	r2,r2,47
 8019e78:	1000031e 	bne	r2,zero,8019e88 <alt_find_file+0x6c>
    {
      len -= 1;
 8019e7c:	e0bffe17 	ldw	r2,-8(fp)
 8019e80:	10bfffc4 	addi	r2,r2,-1
 8019e84:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8019e88:	e0bffe17 	ldw	r2,-8(fp)
 8019e8c:	e0ffff17 	ldw	r3,-4(fp)
 8019e90:	1885883a 	add	r2,r3,r2
 8019e94:	10800003 	ldbu	r2,0(r2)
 8019e98:	10803fcc 	andi	r2,r2,255
 8019e9c:	1080201c 	xori	r2,r2,128
 8019ea0:	10bfe004 	addi	r2,r2,-128
 8019ea4:	10800be0 	cmpeqi	r2,r2,47
 8019ea8:	1000081e 	bne	r2,zero,8019ecc <alt_find_file+0xb0>
 8019eac:	e0bffe17 	ldw	r2,-8(fp)
 8019eb0:	e0ffff17 	ldw	r3,-4(fp)
 8019eb4:	1885883a 	add	r2,r3,r2
 8019eb8:	10800003 	ldbu	r2,0(r2)
 8019ebc:	10803fcc 	andi	r2,r2,255
 8019ec0:	1080201c 	xori	r2,r2,128
 8019ec4:	10bfe004 	addi	r2,r2,-128
 8019ec8:	10000a1e 	bne	r2,zero,8019ef4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8019ecc:	e0bffd17 	ldw	r2,-12(fp)
 8019ed0:	10800217 	ldw	r2,8(r2)
 8019ed4:	e0fffe17 	ldw	r3,-8(fp)
 8019ed8:	180d883a 	mov	r6,r3
 8019edc:	e17fff17 	ldw	r5,-4(fp)
 8019ee0:	1009883a 	mov	r4,r2
 8019ee4:	800aa8c0 	call	800aa8c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8019ee8:	1000021e 	bne	r2,zero,8019ef4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8019eec:	e0bffd17 	ldw	r2,-12(fp)
 8019ef0:	00000706 	br	8019f10 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8019ef4:	e0bffd17 	ldw	r2,-12(fp)
 8019ef8:	10800017 	ldw	r2,0(r2)
 8019efc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8019f00:	e0fffd17 	ldw	r3,-12(fp)
 8019f04:	d0a01a04 	addi	r2,gp,-32664
 8019f08:	18bfcc1e 	bne	r3,r2,8019e3c <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8019f0c:	0005883a 	mov	r2,zero
}
 8019f10:	e037883a 	mov	sp,fp
 8019f14:	dfc00117 	ldw	ra,4(sp)
 8019f18:	df000017 	ldw	fp,0(sp)
 8019f1c:	dec00204 	addi	sp,sp,8
 8019f20:	f800283a 	ret

08019f24 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8019f24:	defffa04 	addi	sp,sp,-24
 8019f28:	dfc00515 	stw	ra,20(sp)
 8019f2c:	df000415 	stw	fp,16(sp)
 8019f30:	dc000315 	stw	r16,12(sp)
 8019f34:	df000404 	addi	fp,sp,16
 8019f38:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8019f3c:	00bffa04 	movi	r2,-24
 8019f40:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8019f44:	e03ffc15 	stw	zero,-16(fp)
 8019f48:	00001d06 	br	8019fc0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 8019f4c:	040200b4 	movhi	r16,2050
 8019f50:	842d9904 	addi	r16,r16,-18844
 8019f54:	e0bffc17 	ldw	r2,-16(fp)
 8019f58:	01400304 	movi	r5,12
 8019f5c:	1009883a 	mov	r4,r2
 8019f60:	800a1780 	call	800a178 <__mulsi3>
 8019f64:	8085883a 	add	r2,r16,r2
 8019f68:	10800017 	ldw	r2,0(r2)
 8019f6c:	1000111e 	bne	r2,zero,8019fb4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 8019f70:	040200b4 	movhi	r16,2050
 8019f74:	842d9904 	addi	r16,r16,-18844
 8019f78:	e0bffc17 	ldw	r2,-16(fp)
 8019f7c:	01400304 	movi	r5,12
 8019f80:	1009883a 	mov	r4,r2
 8019f84:	800a1780 	call	800a178 <__mulsi3>
 8019f88:	8085883a 	add	r2,r16,r2
 8019f8c:	e0fffe17 	ldw	r3,-8(fp)
 8019f90:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8019f94:	d0e01e17 	ldw	r3,-32648(gp)
 8019f98:	e0bffc17 	ldw	r2,-16(fp)
 8019f9c:	1880020e 	bge	r3,r2,8019fa8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 8019fa0:	e0bffc17 	ldw	r2,-16(fp)
 8019fa4:	d0a01e15 	stw	r2,-32648(gp)
      }
      rc = i;
 8019fa8:	e0bffc17 	ldw	r2,-16(fp)
 8019fac:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8019fb0:	00000606 	br	8019fcc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8019fb4:	e0bffc17 	ldw	r2,-16(fp)
 8019fb8:	10800044 	addi	r2,r2,1
 8019fbc:	e0bffc15 	stw	r2,-16(fp)
 8019fc0:	e0bffc17 	ldw	r2,-16(fp)
 8019fc4:	10800810 	cmplti	r2,r2,32
 8019fc8:	103fe01e 	bne	r2,zero,8019f4c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8019fcc:	e0bffd17 	ldw	r2,-12(fp)
}
 8019fd0:	e6ffff04 	addi	sp,fp,-4
 8019fd4:	dfc00217 	ldw	ra,8(sp)
 8019fd8:	df000117 	ldw	fp,4(sp)
 8019fdc:	dc000017 	ldw	r16,0(sp)
 8019fe0:	dec00304 	addi	sp,sp,12
 8019fe4:	f800283a 	ret

08019fe8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8019fe8:	defffe04 	addi	sp,sp,-8
 8019fec:	df000115 	stw	fp,4(sp)
 8019ff0:	df000104 	addi	fp,sp,4
 8019ff4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8019ff8:	e0bfff17 	ldw	r2,-4(fp)
 8019ffc:	10bffe84 	addi	r2,r2,-6
 801a000:	10c00428 	cmpgeui	r3,r2,16
 801a004:	18001a1e 	bne	r3,zero,801a070 <alt_exception_cause_generated_bad_addr+0x88>
 801a008:	100690ba 	slli	r3,r2,2
 801a00c:	008200b4 	movhi	r2,2050
 801a010:	10a80804 	addi	r2,r2,-24544
 801a014:	1885883a 	add	r2,r3,r2
 801a018:	10800017 	ldw	r2,0(r2)
 801a01c:	1000683a 	jmp	r2
 801a020:	0801a060 	cmpeqi	zero,at,1665
 801a024:	0801a060 	cmpeqi	zero,at,1665
 801a028:	0801a070 	cmpltui	zero,at,1665
 801a02c:	0801a070 	cmpltui	zero,at,1665
 801a030:	0801a070 	cmpltui	zero,at,1665
 801a034:	0801a060 	cmpeqi	zero,at,1665
 801a038:	0801a068 	cmpgeui	zero,at,1665
 801a03c:	0801a070 	cmpltui	zero,at,1665
 801a040:	0801a060 	cmpeqi	zero,at,1665
 801a044:	0801a060 	cmpeqi	zero,at,1665
 801a048:	0801a070 	cmpltui	zero,at,1665
 801a04c:	0801a060 	cmpeqi	zero,at,1665
 801a050:	0801a068 	cmpgeui	zero,at,1665
 801a054:	0801a070 	cmpltui	zero,at,1665
 801a058:	0801a070 	cmpltui	zero,at,1665
 801a05c:	0801a060 	cmpeqi	zero,at,1665
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 801a060:	00800044 	movi	r2,1
 801a064:	00000306 	br	801a074 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 801a068:	0005883a 	mov	r2,zero
 801a06c:	00000106 	br	801a074 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 801a070:	0005883a 	mov	r2,zero
  }
}
 801a074:	e037883a 	mov	sp,fp
 801a078:	df000017 	ldw	fp,0(sp)
 801a07c:	dec00104 	addi	sp,sp,4
 801a080:	f800283a 	ret

0801a084 <atexit>:
 801a084:	200b883a 	mov	r5,r4
 801a088:	000f883a 	mov	r7,zero
 801a08c:	000d883a 	mov	r6,zero
 801a090:	0009883a 	mov	r4,zero
 801a094:	801a0d01 	jmpi	801a0d0 <__register_exitproc>

0801a098 <exit>:
 801a098:	defffe04 	addi	sp,sp,-8
 801a09c:	000b883a 	mov	r5,zero
 801a0a0:	dc000015 	stw	r16,0(sp)
 801a0a4:	dfc00115 	stw	ra,4(sp)
 801a0a8:	2021883a 	mov	r16,r4
 801a0ac:	801a1e80 	call	801a1e8 <__call_exitprocs>
 801a0b0:	008200b4 	movhi	r2,2050
 801a0b4:	10b22504 	addi	r2,r2,-14188
 801a0b8:	11000017 	ldw	r4,0(r2)
 801a0bc:	20800f17 	ldw	r2,60(r4)
 801a0c0:	10000126 	beq	r2,zero,801a0c8 <exit+0x30>
 801a0c4:	103ee83a 	callr	r2
 801a0c8:	8009883a 	mov	r4,r16
 801a0cc:	801a4740 	call	801a474 <_exit>

0801a0d0 <__register_exitproc>:
 801a0d0:	defffa04 	addi	sp,sp,-24
 801a0d4:	dc000315 	stw	r16,12(sp)
 801a0d8:	040200b4 	movhi	r16,2050
 801a0dc:	84322504 	addi	r16,r16,-14188
 801a0e0:	80c00017 	ldw	r3,0(r16)
 801a0e4:	dc400415 	stw	r17,16(sp)
 801a0e8:	dfc00515 	stw	ra,20(sp)
 801a0ec:	18805217 	ldw	r2,328(r3)
 801a0f0:	2023883a 	mov	r17,r4
 801a0f4:	10003726 	beq	r2,zero,801a1d4 <__register_exitproc+0x104>
 801a0f8:	10c00117 	ldw	r3,4(r2)
 801a0fc:	010007c4 	movi	r4,31
 801a100:	20c00e16 	blt	r4,r3,801a13c <__register_exitproc+0x6c>
 801a104:	1a000044 	addi	r8,r3,1
 801a108:	8800221e 	bne	r17,zero,801a194 <__register_exitproc+0xc4>
 801a10c:	18c00084 	addi	r3,r3,2
 801a110:	18c7883a 	add	r3,r3,r3
 801a114:	18c7883a 	add	r3,r3,r3
 801a118:	12000115 	stw	r8,4(r2)
 801a11c:	10c7883a 	add	r3,r2,r3
 801a120:	19400015 	stw	r5,0(r3)
 801a124:	0005883a 	mov	r2,zero
 801a128:	dfc00517 	ldw	ra,20(sp)
 801a12c:	dc400417 	ldw	r17,16(sp)
 801a130:	dc000317 	ldw	r16,12(sp)
 801a134:	dec00604 	addi	sp,sp,24
 801a138:	f800283a 	ret
 801a13c:	00820074 	movhi	r2,2049
 801a140:	10a89604 	addi	r2,r2,-23976
 801a144:	10002626 	beq	r2,zero,801a1e0 <__register_exitproc+0x110>
 801a148:	01006404 	movi	r4,400
 801a14c:	d9400015 	stw	r5,0(sp)
 801a150:	d9800115 	stw	r6,4(sp)
 801a154:	d9c00215 	stw	r7,8(sp)
 801a158:	800a2580 	call	800a258 <malloc>
 801a15c:	d9400017 	ldw	r5,0(sp)
 801a160:	d9800117 	ldw	r6,4(sp)
 801a164:	d9c00217 	ldw	r7,8(sp)
 801a168:	10001d26 	beq	r2,zero,801a1e0 <__register_exitproc+0x110>
 801a16c:	81000017 	ldw	r4,0(r16)
 801a170:	10000115 	stw	zero,4(r2)
 801a174:	02000044 	movi	r8,1
 801a178:	22405217 	ldw	r9,328(r4)
 801a17c:	0007883a 	mov	r3,zero
 801a180:	12400015 	stw	r9,0(r2)
 801a184:	20805215 	stw	r2,328(r4)
 801a188:	10006215 	stw	zero,392(r2)
 801a18c:	10006315 	stw	zero,396(r2)
 801a190:	883fde26 	beq	r17,zero,801a10c <__register_exitproc+0x3c>
 801a194:	18c9883a 	add	r4,r3,r3
 801a198:	2109883a 	add	r4,r4,r4
 801a19c:	1109883a 	add	r4,r2,r4
 801a1a0:	21802215 	stw	r6,136(r4)
 801a1a4:	01800044 	movi	r6,1
 801a1a8:	12406217 	ldw	r9,392(r2)
 801a1ac:	30cc983a 	sll	r6,r6,r3
 801a1b0:	4992b03a 	or	r9,r9,r6
 801a1b4:	12406215 	stw	r9,392(r2)
 801a1b8:	21c04215 	stw	r7,264(r4)
 801a1bc:	01000084 	movi	r4,2
 801a1c0:	893fd21e 	bne	r17,r4,801a10c <__register_exitproc+0x3c>
 801a1c4:	11006317 	ldw	r4,396(r2)
 801a1c8:	218cb03a 	or	r6,r4,r6
 801a1cc:	11806315 	stw	r6,396(r2)
 801a1d0:	003fce06 	br	801a10c <__register_exitproc+0x3c>
 801a1d4:	18805304 	addi	r2,r3,332
 801a1d8:	18805215 	stw	r2,328(r3)
 801a1dc:	003fc606 	br	801a0f8 <__register_exitproc+0x28>
 801a1e0:	00bfffc4 	movi	r2,-1
 801a1e4:	003fd006 	br	801a128 <__register_exitproc+0x58>

0801a1e8 <__call_exitprocs>:
 801a1e8:	defff504 	addi	sp,sp,-44
 801a1ec:	df000915 	stw	fp,36(sp)
 801a1f0:	dd400615 	stw	r21,24(sp)
 801a1f4:	dc800315 	stw	r18,12(sp)
 801a1f8:	dfc00a15 	stw	ra,40(sp)
 801a1fc:	ddc00815 	stw	r23,32(sp)
 801a200:	dd800715 	stw	r22,28(sp)
 801a204:	dd000515 	stw	r20,20(sp)
 801a208:	dcc00415 	stw	r19,16(sp)
 801a20c:	dc400215 	stw	r17,8(sp)
 801a210:	dc000115 	stw	r16,4(sp)
 801a214:	d9000015 	stw	r4,0(sp)
 801a218:	2839883a 	mov	fp,r5
 801a21c:	04800044 	movi	r18,1
 801a220:	057fffc4 	movi	r21,-1
 801a224:	008200b4 	movhi	r2,2050
 801a228:	10b22504 	addi	r2,r2,-14188
 801a22c:	12000017 	ldw	r8,0(r2)
 801a230:	45005217 	ldw	r20,328(r8)
 801a234:	44c05204 	addi	r19,r8,328
 801a238:	a0001c26 	beq	r20,zero,801a2ac <__call_exitprocs+0xc4>
 801a23c:	a0800117 	ldw	r2,4(r20)
 801a240:	15ffffc4 	addi	r23,r2,-1
 801a244:	b8000d16 	blt	r23,zero,801a27c <__call_exitprocs+0x94>
 801a248:	14000044 	addi	r16,r2,1
 801a24c:	8421883a 	add	r16,r16,r16
 801a250:	8421883a 	add	r16,r16,r16
 801a254:	84402004 	addi	r17,r16,128
 801a258:	a463883a 	add	r17,r20,r17
 801a25c:	a421883a 	add	r16,r20,r16
 801a260:	e0001e26 	beq	fp,zero,801a2dc <__call_exitprocs+0xf4>
 801a264:	80804017 	ldw	r2,256(r16)
 801a268:	e0801c26 	beq	fp,r2,801a2dc <__call_exitprocs+0xf4>
 801a26c:	bdffffc4 	addi	r23,r23,-1
 801a270:	843fff04 	addi	r16,r16,-4
 801a274:	8c7fff04 	addi	r17,r17,-4
 801a278:	bd7ff91e 	bne	r23,r21,801a260 <__call_exitprocs+0x78>
 801a27c:	00820074 	movhi	r2,2049
 801a280:	10a89b04 	addi	r2,r2,-23956
 801a284:	10000926 	beq	r2,zero,801a2ac <__call_exitprocs+0xc4>
 801a288:	a0800117 	ldw	r2,4(r20)
 801a28c:	1000301e 	bne	r2,zero,801a350 <__call_exitprocs+0x168>
 801a290:	a0800017 	ldw	r2,0(r20)
 801a294:	10003226 	beq	r2,zero,801a360 <__call_exitprocs+0x178>
 801a298:	a009883a 	mov	r4,r20
 801a29c:	98800015 	stw	r2,0(r19)
 801a2a0:	800a26c0 	call	800a26c <free>
 801a2a4:	9d000017 	ldw	r20,0(r19)
 801a2a8:	a03fe41e 	bne	r20,zero,801a23c <__call_exitprocs+0x54>
 801a2ac:	dfc00a17 	ldw	ra,40(sp)
 801a2b0:	df000917 	ldw	fp,36(sp)
 801a2b4:	ddc00817 	ldw	r23,32(sp)
 801a2b8:	dd800717 	ldw	r22,28(sp)
 801a2bc:	dd400617 	ldw	r21,24(sp)
 801a2c0:	dd000517 	ldw	r20,20(sp)
 801a2c4:	dcc00417 	ldw	r19,16(sp)
 801a2c8:	dc800317 	ldw	r18,12(sp)
 801a2cc:	dc400217 	ldw	r17,8(sp)
 801a2d0:	dc000117 	ldw	r16,4(sp)
 801a2d4:	dec00b04 	addi	sp,sp,44
 801a2d8:	f800283a 	ret
 801a2dc:	a0800117 	ldw	r2,4(r20)
 801a2e0:	80c00017 	ldw	r3,0(r16)
 801a2e4:	10bfffc4 	addi	r2,r2,-1
 801a2e8:	15c01426 	beq	r2,r23,801a33c <__call_exitprocs+0x154>
 801a2ec:	80000015 	stw	zero,0(r16)
 801a2f0:	183fde26 	beq	r3,zero,801a26c <__call_exitprocs+0x84>
 801a2f4:	95c8983a 	sll	r4,r18,r23
 801a2f8:	a0806217 	ldw	r2,392(r20)
 801a2fc:	a5800117 	ldw	r22,4(r20)
 801a300:	2084703a 	and	r2,r4,r2
 801a304:	10000b26 	beq	r2,zero,801a334 <__call_exitprocs+0x14c>
 801a308:	a0806317 	ldw	r2,396(r20)
 801a30c:	2088703a 	and	r4,r4,r2
 801a310:	20000c1e 	bne	r4,zero,801a344 <__call_exitprocs+0x15c>
 801a314:	89400017 	ldw	r5,0(r17)
 801a318:	d9000017 	ldw	r4,0(sp)
 801a31c:	183ee83a 	callr	r3
 801a320:	a0800117 	ldw	r2,4(r20)
 801a324:	15bfbf1e 	bne	r2,r22,801a224 <__call_exitprocs+0x3c>
 801a328:	98800017 	ldw	r2,0(r19)
 801a32c:	153fcf26 	beq	r2,r20,801a26c <__call_exitprocs+0x84>
 801a330:	003fbc06 	br	801a224 <__call_exitprocs+0x3c>
 801a334:	183ee83a 	callr	r3
 801a338:	003ff906 	br	801a320 <__call_exitprocs+0x138>
 801a33c:	a5c00115 	stw	r23,4(r20)
 801a340:	003feb06 	br	801a2f0 <__call_exitprocs+0x108>
 801a344:	89000017 	ldw	r4,0(r17)
 801a348:	183ee83a 	callr	r3
 801a34c:	003ff406 	br	801a320 <__call_exitprocs+0x138>
 801a350:	a0800017 	ldw	r2,0(r20)
 801a354:	a027883a 	mov	r19,r20
 801a358:	1029883a 	mov	r20,r2
 801a35c:	003fb606 	br	801a238 <__call_exitprocs+0x50>
 801a360:	0005883a 	mov	r2,zero
 801a364:	003ffb06 	br	801a354 <__call_exitprocs+0x16c>

0801a368 <__muldi3>:
 801a368:	defff604 	addi	sp,sp,-40
 801a36c:	dd800615 	stw	r22,24(sp)
 801a370:	dd400515 	stw	r21,20(sp)
 801a374:	dc400115 	stw	r17,4(sp)
 801a378:	357fffcc 	andi	r21,r6,65535
 801a37c:	2022d43a 	srli	r17,r4,16
 801a380:	25bfffcc 	andi	r22,r4,65535
 801a384:	dcc00315 	stw	r19,12(sp)
 801a388:	dc800215 	stw	r18,8(sp)
 801a38c:	2027883a 	mov	r19,r4
 801a390:	2825883a 	mov	r18,r5
 801a394:	b009883a 	mov	r4,r22
 801a398:	a80b883a 	mov	r5,r21
 801a39c:	dfc00915 	stw	ra,36(sp)
 801a3a0:	df000815 	stw	fp,32(sp)
 801a3a4:	ddc00715 	stw	r23,28(sp)
 801a3a8:	3839883a 	mov	fp,r7
 801a3ac:	302ed43a 	srli	r23,r6,16
 801a3b0:	dd000415 	stw	r20,16(sp)
 801a3b4:	dc000015 	stw	r16,0(sp)
 801a3b8:	3029883a 	mov	r20,r6
 801a3bc:	800a1780 	call	800a178 <__mulsi3>
 801a3c0:	a80b883a 	mov	r5,r21
 801a3c4:	8809883a 	mov	r4,r17
 801a3c8:	1021883a 	mov	r16,r2
 801a3cc:	800a1780 	call	800a178 <__mulsi3>
 801a3d0:	8809883a 	mov	r4,r17
 801a3d4:	b80b883a 	mov	r5,r23
 801a3d8:	102b883a 	mov	r21,r2
 801a3dc:	800a1780 	call	800a178 <__mulsi3>
 801a3e0:	b80b883a 	mov	r5,r23
 801a3e4:	b009883a 	mov	r4,r22
 801a3e8:	1023883a 	mov	r17,r2
 801a3ec:	800a1780 	call	800a178 <__mulsi3>
 801a3f0:	8006d43a 	srli	r3,r16,16
 801a3f4:	1545883a 	add	r2,r2,r21
 801a3f8:	1885883a 	add	r2,r3,r2
 801a3fc:	1540022e 	bgeu	r2,r21,801a408 <__muldi3+0xa0>
 801a400:	00c00074 	movhi	r3,1
 801a404:	88e3883a 	add	r17,r17,r3
 801a408:	1006d43a 	srli	r3,r2,16
 801a40c:	1004943a 	slli	r2,r2,16
 801a410:	e00b883a 	mov	r5,fp
 801a414:	9809883a 	mov	r4,r19
 801a418:	843fffcc 	andi	r16,r16,65535
 801a41c:	1c63883a 	add	r17,r3,r17
 801a420:	1421883a 	add	r16,r2,r16
 801a424:	800a1780 	call	800a178 <__mulsi3>
 801a428:	900b883a 	mov	r5,r18
 801a42c:	a009883a 	mov	r4,r20
 801a430:	1027883a 	mov	r19,r2
 801a434:	800a1780 	call	800a178 <__mulsi3>
 801a438:	9885883a 	add	r2,r19,r2
 801a43c:	1447883a 	add	r3,r2,r17
 801a440:	8005883a 	mov	r2,r16
 801a444:	dfc00917 	ldw	ra,36(sp)
 801a448:	df000817 	ldw	fp,32(sp)
 801a44c:	ddc00717 	ldw	r23,28(sp)
 801a450:	dd800617 	ldw	r22,24(sp)
 801a454:	dd400517 	ldw	r21,20(sp)
 801a458:	dd000417 	ldw	r20,16(sp)
 801a45c:	dcc00317 	ldw	r19,12(sp)
 801a460:	dc800217 	ldw	r18,8(sp)
 801a464:	dc400117 	ldw	r17,4(sp)
 801a468:	dc000017 	ldw	r16,0(sp)
 801a46c:	dec00a04 	addi	sp,sp,40
 801a470:	f800283a 	ret

0801a474 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 801a474:	defffd04 	addi	sp,sp,-12
 801a478:	df000215 	stw	fp,8(sp)
 801a47c:	df000204 	addi	fp,sp,8
 801a480:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 801a484:	0001883a 	nop
 801a488:	e0bfff17 	ldw	r2,-4(fp)
 801a48c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 801a490:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 801a494:	10000226 	beq	r2,zero,801a4a0 <_exit+0x2c>
    ALT_SIM_FAIL();
 801a498:	002af070 	cmpltui	zero,zero,43969
 801a49c:	00000106 	br	801a4a4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 801a4a0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 801a4a4:	003fff06 	br	801a4a4 <_exit+0x30>
