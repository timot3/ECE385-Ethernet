
ethernet.elf:     file format elf32-littlenios2
ethernet.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000230

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00015588 memsz 0x00015588 flags r-x
    LOAD off    0x000165a8 vaddr 0x080155a8 paddr 0x080170d8 align 2**12
         filesz 0x00001b30 memsz 0x00001b30 flags rw-
    LOAD off    0x00018c08 vaddr 0x08018c08 paddr 0x08018c08 align 2**12
         filesz 0x00000000 memsz 0x000004cc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014ee8  08000230  08000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000490  08015118  08015118  00016118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b30  080155a8  080170d8  000165a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000004cc  08018c08  08018c08  00018c08  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  000180d8  2**0
                  CONTENTS
  7 .sdram        00000000  080190d4  080190d4  000180d8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000180d8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001128  00000000  00000000  00018100  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002d51c  00000000  00000000  00019228  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b1c9  00000000  00000000  00046744  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000de1a  00000000  00000000  0005190d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000333c  00000000  00000000  0005f728  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000056ca  00000000  00000000  00062a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00018057  00000000  00000000  0006812e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00080188  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000019e8  00000000  00000000  00080198  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00086a9a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00086a9d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00086aa9  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00086aaa  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00086aab  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00086aaf  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00086ab3  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00086ab7  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00086ac2  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00086acd  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  00086ad8  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000027  00000000  00000000  00086ae0  2**0
                  CONTENTS, READONLY
 30 .jdi          00004e82  00000000  00000000  00086b07  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000643f0  00000000  00000000  0008b989  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000230 l    d  .text	00000000 .text
08015118 l    d  .rodata	00000000 .rodata
080155a8 l    d  .rwdata	00000000 .rwdata
08018c08 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
080190d4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ethernet_bsp//obj/HAL/src/crt0.o
08000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 EtherCard.cpp
00000000 l    df *ABS*	00000000 dhcp.cpp
08018c30 l     O .bss	00000001 _ZL9dhcpState
080155a8 l     O .rwdata	00000020 _ZL8hostname
08018c34 l     O .bss	00000004 _ZL10currentXid
08018c38 l     O .bss	00000004 _ZL10stateTimer
08018c3c l     O .bss	00000004 _ZL10leaseStart
08018c40 l     O .bss	00000004 _ZL9leaseTime
08018c44 l     O .bss	00000004 _ZL6bufPtr
08018c48 l     O .bss	00000004 _ZL20dhcpCustomOptionList
08018c4c l     O .bss	00000004 _ZL24dhcpCustomOptionCallback
08000328 l     F .text	0000003c _ZL8addToBufh
08000364 l     F .text	00000070 _ZL8addByteshPKh
080003d4 l     F .text	00000064 _ZL9addOptionhhPKh
08000438 l     F .text	000002f0 _ZL17send_dhcp_messagePh
08017076 l     O .rwdata	00000004 _ZZL17send_dhcp_messagePhE6cookie
08000728 l     F .text	000000d4 _ZL18process_dhcp_offertPh
080007fc l     F .text	00000210 _ZL16process_dhcp_ackt
08000a0c l     F .text	000000f8 _ZL26dhcp_received_message_typeth
08000b04 l     F .text	00000058 _ZL10toAsciiHexh
08018c50 l     O .bss	00000002 _ZZN9EtherCard21dhcpAddOptionCallbackEhPFvhPKhhEE10optionList
00000000 l    df *ABS*	00000000 dns.cpp
08018c52 l     O .bss	00000001 _ZL8dnstid_l
08000f30 l     F .text	000001f0 _ZL10dnsRequestPKcb
08001120 l     F .text	000001e8 _ZL17checkForDnsAnswert
00000000 l    df *ABS*	00000000 enc28j60.cpp
08018c58 l     O .bss	00000001 _ZL12Enc28j60Bank
08018c59 l     O .bss	00000001 _ZL9selectPin
080016b0 l     F .text	00000080 _ZL7writeOphhh
08001730 l     F .text	000000c8 _ZL6readOphh
080017f8 l     F .text	00000080 _ZL7SetBankh
08001878 l     F .text	0000005c _ZL12writeRegBytehh
080018d4 l     F .text	00000074 _ZL8writeReght
08001948 l     F .text	00000048 _ZL11readRegByteh
08001990 l     F .text	00000064 _ZL7readRegh
080019f4 l     F .text	00000078 _ZL8writePhyht
08001a6c l     F .text	00000080 _ZL11readPhyByteh
08001da8 l     F .text	00000070 _ZL7readBuftPh
08001e18 l     F .text	00000090 _ZL8writeBuftPKh
08018c5a l     O .bss	00000001 _ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket
08018c5c l     O .bss	00000002 _ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr
00000000 l    df *ABS*	00000000 tcpip.cpp
08017080 l     O .rwdata	00000001 _ZL20tcpclient_src_port_l
08018c60 l     O .bss	00000001 _ZL6tcp_fd
08018c61 l     O .bss	00000001 _ZL16tcp_client_state
08018c62 l     O .bss	00000001 _ZL17tcp_client_port_h
08018c63 l     O .bss	00000001 _ZL17tcp_client_port_l
08018c64 l     O .bss	00000004 _ZL20client_tcp_result_cb
08018c68 l     O .bss	00000004 _ZL22client_tcp_datafill_cb
08018c6c l     O .bss	00000001 _ZL6www_fd
08018c70 l     O .bss	00000004 _ZL17client_browser_cb
08018c74 l     O .bss	00000004 _ZL27client_additionalheaderline
08018c78 l     O .bss	00000004 _ZL14client_postval
08018c7c l     O .bss	00000004 _ZL13client_urlbuf
08018c80 l     O .bss	00000004 _ZL17client_urlbuf_var
08018c84 l     O .bss	00000004 _ZL14client_hoststr
08018c88 l     O .bss	00000004 _ZL7icmp_cb
08018c8c l     O .bss	00000006 _ZL11destmacaddr
08018c92 l     O .bss	00000001 _ZL19waiting_for_dns_mac
08018c93 l     O .bss	00000001 _ZL11has_dns_mac
08018c94 l     O .bss	00000001 _ZL20waiting_for_dest_mac
08018c95 l     O .bss	00000001 _ZL12has_dest_mac
08018c96 l     O .bss	00000006 _ZL9gwmacaddr
08018c9c l     O .bss	00000001 _ZL9waitgwmac
08018c9e l     O .bss	00000002 _ZL13info_data_len
08017081 l     O .rwdata	00000001 _ZL6seqnum
08017082 l     O .rwdata	00000001 _ZL9result_fd
08018ca0 l     O .bss	00000004 _ZL10result_ptr
08018ca4 l     O .bss	00000004 _ZL3SEQ
08017089 l     O .rwdata	00000008 _ZL9arpreqhdr
080151d8 l     O .rodata	00000009 _ZL5iphdr
080151e1 l     O .rodata	0000000a _ZL9ntpreqhdr
0800227c l     F .text	00000184 _ZL13fill_checksumhhth
08002400 l     F .text	00000050 _ZL7setMACsPKh
08002450 l     F .text	00000060 _ZL12setMACandIPsPKhS0_
080024b0 l     F .text	00000044 _ZL24check_ip_message_is_fromPKh
080024f4 l     F .text	000000bc _ZL6is_lanPKhS0_
080025b0 l     F .text	00000090 _ZL25eth_type_is_arp_and_my_ipt
08002640 l     F .text	000000dc _ZL24eth_type_is_ip_and_my_ipt
0800271c l     F .text	00000080 _ZL20fill_ip_hdr_checksumv
0800279c l     F .text	0000006c _ZL11make_eth_ipv
08002808 l     F .text	00000100 _ZL8step_seqth
08002908 l     F .text	000000e4 _ZL12make_tcpheadth
080029ec l     F .text	000000bc _ZL28make_arp_answer_from_requestv
08002aa8 l     F .text	000000a4 _ZL28make_echo_reply_from_requestt
08002ccc l     F .text	0000012c _ZL24make_tcp_synack_from_synv
08002e88 l     F .text	000000f0 _ZL21make_tcp_ack_from_anysh
08002f78 l     F .text	000000b8 _ZL30make_tcp_ack_with_data_noflagst
08003098 l     F .text	000000a8 _ZL16getBigEndianLongh
08003140 l     F .text	00000088 _ZL17setSequenceNumberm
08003b04 l     F .text	000000c8 _ZL17client_arp_whohasPh
08003c4c l     F .text	00000068 _ZL16client_store_macPhS_
08003d78 l     F .text	00000204 _ZL10client_synhhh
08003fe8 l     F .text	00000028 _ZL31www_client_internal_datafill_cbh
08004010 l     F .text	000000f8 _ZL29www_client_internal_result_cbhhtt
08004278 l     F .text	00000028 _ZL15tcp_datafill_cbh
080042a0 l     F .text	00000064 _ZL13tcp_result_cbhhtt
00000000 l    df *ABS*	00000000 webutil.cpp
00000000 l    df *ABS*	00000000 main.cpp
08017091 l     O .rwdata	00000006 _ZL5mymac
08004df0 l     F .text	0000003c _ZL9gotPingedPh
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 difftime.c
00000000 l    df *ABS*	00000000 impure.c
080155c8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
080153f2 l     O .rodata	00000010 zeroes.4404
0800844c l     F .text	000000bc __sbprintf
08015402 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0800865c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800a1b4 l     F .text	00000008 __fp_unlock
0800a1c8 l     F .text	0000019c __sinit.part.1
0800a364 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
08015a0c l     O .rwdata	00000020 lc_ctype_charset
080159ec l     O .rwdata	00000020 lc_message_charset
08015a2c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
08015430 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800d78c l     F .text	000000fc __sprint_r.part.0
08015554 l     O .rodata	00000010 zeroes.4349
0800edc8 l     F .text	000000bc __sbprintf
08015564 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0801243c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08012550 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0801257c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
08012864 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0801294c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
08012a38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08012c14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
080170c8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_times.c
0801302c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
080130e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0801321c l     F .text	00000034 alt_dev_reg
08016014 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08013514 l     F .text	0000020c altera_avalon_jtag_uart_irq
08013720 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08013f54 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08014194 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
080145f4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08014754 l     F .text	0000003c alt_get_errno
08014790 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
08018cec g     O .bss	00000004 alt_instruction_exception_handler
08005dbc g     F .text	00000018 putchar
0800cc68 g     F .text	00000074 _mprec_log10
0800cd54 g     F .text	0000008c __any_on
0800f4d4 g     F .text	00000054 _isatty_r
0801543c g     O .rodata	00000028 __mprec_tinytens
08012b50 g     F .text	0000007c alt_main
08005dd4 g     F .text	000000c0 _puts_r
08018fd4 g     O .bss	00000100 alt_irq
0800f528 g     F .text	00000060 _lseek_r
080041f4 g     F .text	00000084 _ZN9EtherCard8httpPostEPKcS1_S1_S1_PFvhttE
08004d70 g     F .text	00000040 _ZN9EtherCard7copyMacEPhPKh
080170d8 g       *ABS*	00000000 __flash_rwdata_start
080117c0 g     F .text	00000088 .hidden __eqdf2
0800afe8 g     F .text	0000005c _gettimeofday_r
080190d4 g       *ABS*	00000000 __alt_heap_start
08005d78 g     F .text	0000003c printf
0800f5e8 g     F .text	0000009c _wcrtomb_r
08001d70 g     F .text	00000038 _ZN8ENC28J608isLinkUpEv
0800d64c g     F .text	0000005c __sseek
0800a514 g     F .text	00000010 __sinit
0800ee84 g     F .text	00000140 __swbuf_r
0800b044 g     F .text	0000007c _setlocale_r
0800a36c g     F .text	00000078 __sfmoreglue
08012bf0 g     F .text	00000024 __malloc_unlock
0800bbcc g     F .text	0000015c memmove
0800a4fc g     F .text	00000018 _cleanup
0800bd28 g     F .text	000000a8 _Balloc
080043c4 g     F .text	00000088 _ZN9EtherCard24packetLoopIcmpCheckReplyEPKh
08005048 g     F .text	000000dc .hidden __gtdf2
080149d8 g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000000c __reset
08013068 g     F .text	00000078 times
0800416c g     F .text	00000088 _ZN9EtherCard9browseUrlEPKcS1_S1_S1_PFvhttE
08000020 g       *ABS*	00000000 __flash_exceptions_start
0800f478 g     F .text	0000005c _fstat_r
08018ca8 g     O .bss	00000004 errno
08001308 g     F .text	00000234 _ZN9EtherCard9dnsLookupEPKcb
0800d5c8 g     F .text	00000008 __seofread
08000d40 g     F .text	000001f0 _ZN9EtherCard16DhcpStateMachineEt
08018cd8 g     O .bss	00000004 alt_argv
0801f074 g       *ABS*	00000000 _gp
08018c1f g     O .bss	00000004 _ZN9EtherCard6dhcpipE
08015e94 g     O .rwdata	00000180 alt_fd_list
08005db4 g     F .text	00000008 _putchar_r
080149fc g     F .text	00000090 alt_find_dev
0800614c g     F .text	00000008 _times_r
08005ad8 g     F .text	00000148 memcpy
0800a1bc g     F .text	0000000c _cleanup_r
080122b8 g     F .text	000000dc .hidden __floatsidf
080146d8 g     F .text	0000007c alt_io_redirect
08011848 g     F .text	000000f4 .hidden __ltdf2
08015118 g       *ABS*	00000000 __DTOR_END__
08005e94 g     F .text	00000014 puts
08014c58 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0800d4ac g     F .text	00000074 __fpclassifyd
0800cbc4 g     F .text	000000a4 __ratio
0800edac g     F .text	0000001c __vfiprintf_internal
08018c08 g     O .bss	00000001 ether
08013918 g     F .text	0000021c altera_avalon_jtag_uart_read
08005d48 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08010488 g     F .text	00000064 .hidden __udivsi3
080128a0 g     F .text	000000ac isatty
0801548c g     O .rodata	000000c8 __mprec_tens
08003bf8 g     F .text	00000054 _ZN9EtherCard16clientWaitingDnsEv
0800b0c0 g     F .text	0000000c __locale_charset
08018cc4 g     O .bss	00000008 alt_timezone
08018cc0 g     O .bss	00000004 __malloc_top_pad
080170a0 g     O .rwdata	00000004 __mb_cur_max
0800b0f0 g     F .text	0000000c _localeconv_r
0800358c g     F .text	000000f4 _ZN9EtherCard16ntpProcessAnswerEPmh
0800c15c g     F .text	0000003c __i2b
0800a998 g     F .text	000004c8 __sfvwrite_r
0801707c g     O .rwdata	00000004 GPIO_PIO
0800d520 g     F .text	00000054 _sbrk_r
08002df8 g     F .text	00000090 _ZN9EtherCard19getTcpPayloadLengthEv
0800f588 g     F .text	00000060 _read_r
080170c0 g     O .rwdata	00000004 alt_max_fd
0800f16c g     F .text	000000f0 _fclose_r
0800a184 g     F .text	00000030 fflush
08018cbc g     O .bss	00000004 __malloc_max_sbrked_mem
08001610 g     F .text	000000a0 _Z12digitalWritehh
08001b24 g     F .text	0000024c _ZN8ENC28J6010initializeEtPKhh
08010544 g     F .text	000008ac .hidden __adddf3
0800c96c g     F .text	0000010c __b2d
0800fdcc g     F .text	000005c4 .hidden __umoddi3
08012a74 g     F .text	000000dc lseek
08017098 g     O .rwdata	00000004 _global_impure_ptr
0800cf48 g     F .text	00000564 _realloc_r
080190d4 g       *ABS*	00000000 __bss_end
08014504 g     F .text	000000f0 alt_iic_isr_register
08012f24 g     F .text	00000108 alt_tick
0800f7d0 g     F .text	000005fc .hidden __udivdi3
0800f3d4 g     F .text	00000024 _fputwc_r
08015464 g     O .rodata	00000028 __mprec_bigtens
0800bf40 g     F .text	00000104 __s2b
08012394 g     F .text	000000a8 .hidden __floatunsidf
0800c6ac g     F .text	00000060 __mcmp
08000300 g     F .text	00000028 _Z6millisv
0800153c g     F .text	00000058 _Z5delayi
0800a534 g     F .text	00000018 __fp_lock_all
080144b8 g     F .text	0000004c alt_ic_irq_enabled
08003240 g     F .text	00000070 _ZN9EtherCard26httpServerReply_with_flagsEth
08012e88 g     F .text	0000009c alt_alarm_stop
08018ce8 g     O .bss	00000004 alt_irq_active
08003680 g     F .text	00000188 _ZN9EtherCard10udpPrepareEtPKht
080000fc g     F .exceptions	000000d4 alt_irq_handler
08015e6c g     O .rwdata	00000028 alt_dev_null
08018c2e g     O .bss	00000002 _ZN9EtherCard8delaycntE
08018c27 g     O .bss	00000004 _ZN9EtherCard5hisipE
08001aec g     F .text	00000038 _Z8getThingh
08014174 g     F .text	00000020 alt_dcache_flush_all
0800c044 g     F .text	00000068 __hi0bits
08012238 g     F .text	00000080 .hidden __fixdfsi
080170d8 g       *ABS*	00000000 __ram_rwdata_end
08018c17 g     O .bss	00000004 _ZN9EtherCard11broadcastipE
080170b8 g     O .rwdata	00000008 alt_dev_list
0801311c g     F .text	00000100 write
0800cde0 g     F .text	000000a0 _putc_r
080155a8 g       *ABS*	00000000 __ram_rodata_end
080125b8 g     F .text	000000b8 fstat
08011848 g     F .text	000000f4 .hidden __ledf2
08004c9c g     F .text	00000050 _ZN9EtherCard7printIpEPKcPKh
080032b0 g     F .text	0000015c _ZN9EtherCard17clientIcmpRequestEPKh
0800c424 g     F .text	00000140 __pow5mult
0800d8a0 g     F .text	0000150c ___vfiprintf_internal_r
08018cb4 g     O .bss	00000004 __nlocale_changed
080104ec g     F .text	00000058 .hidden __umodsi3
08002238 g     F .text	00000044 _Z8memcpy_PPvPKvj
08004398 g     F .text	0000002c _ZN9EtherCard20registerPingCallbackEPFvPhE
080190d4 g       *ABS*	00000000 end
08003974 g     F .text	00000190 _ZN9EtherCard7sendWolEPh
08013454 g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
08015118 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08018c57 g     O .bss	00000001 _ZN8ENC28J6019promiscuous_enabledE
08013fcc g     F .text	0000007c alt_avalon_timer_sc_init
08005990 g     F .text	00000064 .hidden __clzsi2
08003f7c g     F .text	0000006c _ZN9EtherCard12clientTcpReqEPFhhhttEPFthEt
08013b34 g     F .text	00000224 altera_avalon_jtag_uart_write
0800a524 g     F .text	00000004 __sfp_lock_acquire
0800bae8 g     F .text	000000e4 memchr
08006154 g     F .text	000022dc ___vfprintf_internal_r
0800a688 g     F .text	00000310 _free_r
0800b0cc g     F .text	00000010 __locale_mb_cur_max
080021a4 g     F .text	00000070 _ZN8ENC28J6016disableBroadcastEb
08018c13 g     O .bss	00000004 _ZN9EtherCard7netmaskE
08000cc0 g     F .text	00000048 _ZN9EtherCard21dhcpAddOptionCallbackEhPFvhPKhhE
08014e58 g     F .text	00000180 __call_exitprocs
08003030 g     F .text	00000068 _ZN9EtherCard15httpServerReplyEt
08004108 g     F .text	00000064 _ZN9EtherCard9browseUrlEPKcS1_S1_PFvhttE
08018c0f g     O .bss	00000004 _ZN9EtherCard4myipE
08018cb0 g     O .bss	00000004 __mlocale_changed
080170a4 g     O .rwdata	00000004 __malloc_sbrk_base
08000230 g     F .text	0000003c _start
08018ce0 g     O .bss	00000004 _alt_tick_rate
0800c564 g     F .text	00000148 __lshift
08013d58 g     F .text	000001fc alt_avalon_spi_command
08018ce4 g     O .bss	00000004 _alt_nticks
08012c50 g     F .text	00000104 read
08013288 g     F .text	00000068 alt_sys_init
08014d40 g     F .text	00000118 __register_exitproc
08000d08 g     F .text	00000038 _ZN9EtherCard21dhcpAddOptionCallbackEPhPFvhPKhhE
08005f40 g     F .text	000000d0 strncmp
0800444c g     F .text	0000011c _ZN9EtherCard6acceptEtt
08001ea8 g     F .text	00000140 _ZN8ENC28J6013packetReceiveEv
0800c198 g     F .text	0000028c __multiply
080137c0 g     F .text	00000068 altera_avalon_jtag_uart_close
08005020 g     F .text	00000028 .hidden __mulsi3
080155a8 g       *ABS*	00000000 __ram_rwdata_start
08015118 g       *ABS*	00000000 __ram_rodata_start
08006010 g     F .text	000000ec strncpy
08018fac g     O .bss	00000028 __malloc_current_mallinfo
0800ca78 g     F .text	0000014c __d2b
080132f0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08014b94 g     F .text	000000c4 alt_get_fd
0800f03c g     F .text	00000054 _close_r
08018c56 g     O .bss	00000001 _ZN8ENC28J6017broadcast_enabledE
08005a5c g     F .text	0000007c memcmp
080133b0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
080190d4 g       *ABS*	00000000 __alt_stack_base
08013400 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08017074 g     O .rwdata	00000002 _ZN9EtherCard7hisportE
08004568 g     F .text	00000704 _ZN9EtherCard10packetLoopEt
08001fe8 g     F .text	00000158 _ZN8ENC28J6010packetSendEt
08008508 g     F .text	00000154 __swsetup_r
08010df0 g     F .text	000009d0 .hidden __divdf3
0800a3e4 g     F .text	00000118 __sfp
0800ccdc g     F .text	00000078 __copybits
08015a64 g     O .rwdata	00000408 __malloc_av_
0800a530 g     F .text	00000004 __sinit_lock_release
08005124 g     F .text	0000086c .hidden __muldf3
0800d574 g     F .text	00000054 __sread
080031c8 g     F .text	0000002c _ZN9EtherCard17getSequenceNumberEv
08014a8c g     F .text	00000108 alt_find_file
08018cf0 g     O .bss	000002bc _ZN8ENC28J606bufferE
080141d0 g     F .text	000000a4 alt_dev_llist_insert
08012bcc g     F .text	00000024 __malloc_lock
08012dd8 g     F .text	000000b0 sbrk
08004304 g     F .text	0000004c _ZN9EtherCard7tcpSendEv
0800a128 g     F .text	0000005c _fflush_r
0800f090 g     F .text	000000dc _calloc_r
08012670 g     F .text	000001f4 gettimeofday
08018c08 g       *ABS*	00000000 __bss_start
08002b4c g     F .text	00000180 _ZN9EtherCard12makeUdpReplyEPKcht
08005c20 g     F .text	00000128 memset
08004e2c g     F .text	000001f4 main
080031f4 g     F .text	0000004c _ZN9EtherCard18httpServerReplyAckEv
08018cdc g     O .bss	00000004 alt_envp
08018cb8 g     O .bss	00000004 __malloc_max_total_mem
08013350 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08001594 g     F .text	0000003c _Z7bitReadhh
0800efc4 g     F .text	00000018 __swbuf
0800d6a8 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
0800f25c g     F .text	00000014 fclose
08008884 g     F .text	00001688 _dtoa_r
0800b2dc g     F .text	0000080c _malloc_r
0800f744 g     F .text	00000030 __ascii_wctomb
080060fc g     F .text	00000050 time
080170c4 g     O .rwdata	00000004 alt_errno
08002140 g     F .text	00000064 _ZN8ENC28J6015enableBroadcastEb
0800ae60 g     F .text	000000c4 _fwalk
08018c09 g     O .bss	00000006 _ZN9EtherCard5mymacE
0800ce80 g     F .text	000000c8 putc
08010390 g     F .text	00000084 .hidden __divsi3
0800a564 g     F .text	00000124 _malloc_trim_r
08015118 g       *ABS*	00000000 __CTOR_END__
0800d6b0 g     F .text	000000dc strcmp
08015118 g       *ABS*	00000000 __flash_rodata_start
08015118 g       *ABS*	00000000 __DTOR_LIST__
08018c54 g     O .bss	00000002 _ZN8ENC28J6010bufferSizeE
08018c23 g     O .bss	00000004 _ZN9EtherCard5dnsipE
080117c0 g     F .text	00000088 .hidden __nedf2
08013250 g     F .text	00000038 alt_irq_init
08012d54 g     F .text	00000084 alt_release_fd
08003808 g     F .text	000000d0 _ZN9EtherCard11udpTransmitEt
080152a6 g     O .rodata	00000100 .hidden __clz_tab
08018cac g     O .bss	00000004 _PathLocale
08005a40 g     F .text	0000001c difftime
08014cf4 g     F .text	00000014 atexit
0800efdc g     F .text	00000060 _write_r
0800b0fc g     F .text	00000018 setlocale
08003cb4 g     F .text	00000044 _ZN9EtherCard7setGwIpEPKh
0801709c g     O .rwdata	00000004 _impure_ptr
08018cd4 g     O .bss	00000004 alt_argc
08009f0c g     F .text	0000021c __sflush_r
080142d4 g     F .text	00000060 _do_dtors
0800b0e8 g     F .text	00000008 __locale_cjk_lang
08004350 g     F .text	00000048 _ZN9EtherCard8tcpReplyEh
08004db0 g     F .text	00000040 _ZN9EtherCard6copyIpEPhPKh
080015d0 g     F .text	00000020 _Z11disableChipv
08000020 g       .exceptions	00000000 alt_irq_entry
0800c908 g     F .text	00000064 __ulp
0800a54c g     F .text	00000018 __fp_unlock_all
080170b0 g     O .rwdata	00000008 alt_fs_list
08002214 g     F .text	00000024 _Z4PSTRPc
08018ccc g     O .bss	00000008 alt_resettime
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800b114 g     F .text	0000000c localeconv
0800026c g     F .text	00000094 _ZN9EtherCard5beginEtPKhh
08017083 g     O .rwdata	00000006 allOnes
08014354 g     F .text	00000050 alt_ic_isr_register
080015f0 g     F .text	00000020 _Z10enableChipv
080170d8 g       *ABS*	00000000 _edata
080190d4 g       *ABS*	00000000 _end
0800f270 g     F .text	00000164 __fputwc
08000230 g       *ABS*	00000000 __ram_exceptions_end
08013828 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0801442c g     F .text	0000008c alt_ic_irq_disable
08018c1b g     O .bss	00000004 _ZN9EtherCard4gwipE
0800d5d0 g     F .text	0000007c __swrite
080170a8 g     O .rwdata	00000004 __malloc_trim_threshold
0800b0dc g     F .text	0000000c __locale_msgcharset
08014d08 g     F .text	00000038 exit
0800af24 g     F .text	000000c4 _fwalk_reent
0800c70c g     F .text	000001fc __mdiff
08004c6c g     F .text	00000030 _ZN9EtherCard20persistTcpConnectionEb
08003bcc g     F .text	0000002c _ZN9EtherCard15clientWaitingGwEv
08010414 g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
0800a528 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800340c g     F .text	00000180 _ZN9EtherCard10ntpRequestEPhh
080150e4 g     F .text	00000034 _exit
08014048 g     F .text	0000012c alt_alarm_start
08014fd8 g     F .text	0000010c .hidden __muldi3
0800b120 g     F .text	000001bc __smakebuf_r
08005ea8 g     F .text	00000098 strlen
0801487c g     F .text	0000015c open
08005048 g     F .text	000000dc .hidden __gedf2
080059f4 g     F .text	0000004c clock
08018c2c g     O .bss	00000001 _ZN9EtherCard22persist_tcp_connectionE
080170ac g     O .rwdata	00000004 __wctomb
0800d888 g     F .text	00000018 __sprint_r
08014334 g     F .text	00000020 alt_icache_flush_all
080170d4 g     O .rwdata	00000004 alt_priority_mask
08018c2b g     O .bss	00000001 _ZN9EtherCard10using_dhcpE
080143a4 g     F .text	00000088 alt_ic_irq_enable
08008430 g     F .text	0000001c __vfprintf_internal
0800f774 g     F .text	0000005c _wctomb_r
0801193c g     F .text	000008fc .hidden __subdf3
0800c0ac g     F .text	000000b0 __lo0bits
080170cc g     O .rwdata	00000008 alt_alarm_list
08014274 g     F .text	00000060 _do_ctors
080038d8 g     F .text	0000009c _ZN9EtherCard7sendUdpEPKchtPKht
08004cec g     F .text	00000084 _ZN9EtherCard7printIpEPKh
0800f684 g     F .text	000000c0 wcrtomb
08012478 g     F .text	000000d8 close
08000b5c g     F .text	00000164 _ZN9EtherCard9dhcpSetupEPKcb
080129b4 g     F .text	00000084 alt_load
08003cf8 g     F .text	00000080 _ZN9EtherCard22updateBroadcastAddressEv
0800f3f8 g     F .text	00000080 fputwc
0800a52c g     F .text	00000004 __sinit_lock_acquire
0800bdf8 g     F .text	00000148 __multadd
0800bdd0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408c14 	ori	at,at,560
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	008200b4 	movhi	r2,2050
 8000140:	10a3f504 	addi	r2,r2,-28716
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	008200b4 	movhi	r2,2050
 8000158:	10a3f504 	addi	r2,r2,-28716
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e4:	00bfffc4 	movi	r2,-1
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001f0:	d0a71e17 	ldw	r2,-25480(gp)
 80001f4:	10000726 	beq	r2,zero,8000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f8:	d0a71e17 	ldw	r2,-25480(gp)
 80001fc:	e0fffd17 	ldw	r3,-12(fp)
 8000200:	e1bffe17 	ldw	r6,-8(fp)
 8000204:	e17fff17 	ldw	r5,-4(fp)
 8000208:	1809883a 	mov	r4,r3
 800020c:	103ee83a 	callr	r2
 8000210:	00000206 	br	800021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000218:	0005883a 	mov	r2,zero
}
 800021c:	e037883a 	mov	sp,fp
 8000220:	dfc00117 	ldw	ra,4(sp)
 8000224:	df000017 	ldw	fp,0(sp)
 8000228:	dec00204 	addi	sp,sp,8
 800022c:	f800283a 	ret

Disassembly of section .text:

08000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000230:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000238:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 800023c:	d6bc1d14 	ori	gp,gp,61556
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000240:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000244:	10a30214 	ori	r2,r2,35848

    movhi r3, %hi(__bss_end)
 8000248:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 800024c:	18e43514 	ori	r3,r3,37076

    beq r2, r3, 1f
 8000250:	10c00326 	beq	r2,r3,8000260 <_start+0x30>

0:
    stw zero, (r2)
 8000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800025c:	10fffd36 	bltu	r2,r3,8000254 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000260:	80129b40 	call	80129b4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000264:	8012b500 	call	8012b50 <alt_main>

08000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000268:	003fff06 	br	8000268 <alt_after_alt_main>

0800026c <_ZN9EtherCard5beginEtPKhh>:
bool EtherCard::using_dhcp = false;
bool EtherCard::persist_tcp_connection = false;
uint16_t EtherCard::delaycnt = 0; //request gateway ARP lookup

uint8_t EtherCard::begin(const uint16_t size, const uint8_t *macaddr,
                         uint8_t csPin) {
 800026c:	defffa04 	addi	sp,sp,-24
 8000270:	dfc00515 	stw	ra,20(sp)
 8000274:	df000415 	stw	fp,16(sp)
 8000278:	df000404 	addi	fp,sp,16
 800027c:	2007883a 	mov	r3,r4
 8000280:	e17ffe15 	stw	r5,-8(fp)
 8000284:	3005883a 	mov	r2,r6
 8000288:	e0fffd0d 	sth	r3,-12(fp)
 800028c:	e0bfff05 	stb	r2,-4(fp)
  using_dhcp = false;
 8000290:	d026edc5 	stb	zero,-25673(gp)
  printf("starting begin");
 8000294:	01020074 	movhi	r4,2049
 8000298:	21144604 	addi	r4,r4,20760
 800029c:	8005d780 	call	8005d78 <printf>
  copyMac(mymac, macaddr);
 80002a0:	e17ffe17 	ldw	r5,-8(fp)
 80002a4:	d126e544 	addi	r4,gp,-25707
 80002a8:	8004d700 	call	8004d70 <_ZN9EtherCard7copyMacEPhPKh>
  printf("copy mac done");
 80002ac:	01020074 	movhi	r4,2049
 80002b0:	21144a04 	addi	r4,r4,20776
 80002b4:	8005d780 	call	8005d78 <printf>
  uint8_t ret = initialize(size, mymac, csPin);
 80002b8:	e0bffd0b 	ldhu	r2,-12(fp)
 80002bc:	e0ffff03 	ldbu	r3,-4(fp)
 80002c0:	180d883a 	mov	r6,r3
 80002c4:	d166e544 	addi	r5,gp,-25707
 80002c8:	1009883a 	mov	r4,r2
 80002cc:	8001b240 	call	8001b24 <_ZN8ENC28J6010initializeEtPKhh>
 80002d0:	e0bffc05 	stb	r2,-16(fp)
  printf("finished init (%x)", ret);
 80002d4:	e0bffc03 	ldbu	r2,-16(fp)
 80002d8:	100b883a 	mov	r5,r2
 80002dc:	01020074 	movhi	r4,2049
 80002e0:	21144e04 	addi	r4,r4,20792
 80002e4:	8005d780 	call	8005d78 <printf>
  return ret;
 80002e8:	e0bffc03 	ldbu	r2,-16(fp)
}
 80002ec:	e037883a 	mov	sp,fp
 80002f0:	dfc00117 	ldw	ra,4(sp)
 80002f4:	df000017 	ldw	fp,0(sp)
 80002f8:	dec00204 	addi	sp,sp,8
 80002fc:	f800283a 	ret

08000300 <_Z6millisv>:
static uint8_t* dhcpCustomOptionList = NULL;
static DhcpOptionCallback dhcpCustomOptionCallback = NULL;

extern uint8_t allOnes[];// = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

uint32_t millis() {
 8000300:	defffe04 	addi	sp,sp,-8
 8000304:	dfc00115 	stw	ra,4(sp)
 8000308:	df000015 	stw	fp,0(sp)
 800030c:	d839883a 	mov	fp,sp
	return (uint32_t) clock();
 8000310:	80059f40 	call	80059f4 <clock>
}
 8000314:	e037883a 	mov	sp,fp
 8000318:	dfc00117 	ldw	ra,4(sp)
 800031c:	df000017 	ldw	fp,0(sp)
 8000320:	dec00204 	addi	sp,sp,8
 8000324:	f800283a 	ret

08000328 <_ZL8addToBufh>:

static void addToBuf (byte b) {
 8000328:	defffe04 	addi	sp,sp,-8
 800032c:	df000115 	stw	fp,4(sp)
 8000330:	df000104 	addi	fp,sp,4
 8000334:	2005883a 	mov	r2,r4
 8000338:	e0bfff05 	stb	r2,-4(fp)
    *bufPtr++ = b;
 800033c:	d0a6f417 	ldw	r2,-25648(gp)
 8000340:	10c00044 	addi	r3,r2,1
 8000344:	d0e6f415 	stw	r3,-25648(gp)
 8000348:	e0ffff03 	ldbu	r3,-4(fp)
 800034c:	10c00005 	stb	r3,0(r2)
}
 8000350:	0001883a 	nop
 8000354:	e037883a 	mov	sp,fp
 8000358:	df000017 	ldw	fp,0(sp)
 800035c:	dec00104 	addi	sp,sp,4
 8000360:	f800283a 	ret

08000364 <_ZL8addByteshPKh>:

static void addBytes (byte len, const byte* data) {
 8000364:	defffc04 	addi	sp,sp,-16
 8000368:	dfc00315 	stw	ra,12(sp)
 800036c:	df000215 	stw	fp,8(sp)
 8000370:	df000204 	addi	fp,sp,8
 8000374:	2005883a 	mov	r2,r4
 8000378:	e17fff15 	stw	r5,-4(fp)
 800037c:	e0bffe05 	stb	r2,-8(fp)
    while (len-- > 0)
 8000380:	e0bffe03 	ldbu	r2,-8(fp)
 8000384:	10ffffc4 	addi	r3,r2,-1
 8000388:	e0fffe05 	stb	r3,-8(fp)
 800038c:	10803fcc 	andi	r2,r2,255
 8000390:	1004c03a 	cmpne	r2,r2,zero
 8000394:	10803fcc 	andi	r2,r2,255
 8000398:	10000826 	beq	r2,zero,80003bc <_ZL8addByteshPKh+0x58>
        addToBuf(*data++);
 800039c:	e0bfff17 	ldw	r2,-4(fp)
 80003a0:	10c00044 	addi	r3,r2,1
 80003a4:	e0ffff15 	stw	r3,-4(fp)
 80003a8:	10800003 	ldbu	r2,0(r2)
 80003ac:	10803fcc 	andi	r2,r2,255
 80003b0:	1009883a 	mov	r4,r2
 80003b4:	80003280 	call	8000328 <_ZL8addToBufh>
static void addToBuf (byte b) {
    *bufPtr++ = b;
}

static void addBytes (byte len, const byte* data) {
    while (len-- > 0)
 80003b8:	003ff106 	br	8000380 <_ZL8addByteshPKh+0x1c>
        addToBuf(*data++);
}
 80003bc:	0001883a 	nop
 80003c0:	e037883a 	mov	sp,fp
 80003c4:	dfc00117 	ldw	ra,4(sp)
 80003c8:	df000017 	ldw	fp,0(sp)
 80003cc:	dec00204 	addi	sp,sp,8
 80003d0:	f800283a 	ret

080003d4 <_ZL9addOptionhhPKh>:

static void addOption (byte opt, byte len, const byte* data) {
 80003d4:	defffb04 	addi	sp,sp,-20
 80003d8:	dfc00415 	stw	ra,16(sp)
 80003dc:	df000315 	stw	fp,12(sp)
 80003e0:	df000304 	addi	fp,sp,12
 80003e4:	2007883a 	mov	r3,r4
 80003e8:	2805883a 	mov	r2,r5
 80003ec:	e1bfff15 	stw	r6,-4(fp)
 80003f0:	e0fffd05 	stb	r3,-12(fp)
 80003f4:	e0bffe05 	stb	r2,-8(fp)
    addToBuf(opt);
 80003f8:	e0bffd03 	ldbu	r2,-12(fp)
 80003fc:	1009883a 	mov	r4,r2
 8000400:	80003280 	call	8000328 <_ZL8addToBufh>
    addToBuf(len);
 8000404:	e0bffe03 	ldbu	r2,-8(fp)
 8000408:	1009883a 	mov	r4,r2
 800040c:	80003280 	call	8000328 <_ZL8addToBufh>
    addBytes(len, data);
 8000410:	e0bffe03 	ldbu	r2,-8(fp)
 8000414:	e17fff17 	ldw	r5,-4(fp)
 8000418:	1009883a 	mov	r4,r2
 800041c:	80003640 	call	8000364 <_ZL8addByteshPKh>
}
 8000420:	0001883a 	nop
 8000424:	e037883a 	mov	sp,fp
 8000428:	dfc00117 	ldw	ra,4(sp)
 800042c:	df000017 	ldw	fp,0(sp)
 8000430:	dec00204 	addi	sp,sp,8
 8000434:	f800283a 	ret

08000438 <_ZL17send_dhcp_messagePh>:
#define DHCP_OPT_CLIENT_IDENTIFIER      61
#define DHCP_OPT_END                    255

#define DHCP_HTYPE_ETHER 1

static void send_dhcp_message(uint8_t *requestip) {
 8000438:	defff904 	addi	sp,sp,-28
 800043c:	dfc00615 	stw	ra,24(sp)
 8000440:	df000515 	stw	fp,20(sp)
 8000444:	df000504 	addi	fp,sp,20
 8000448:	e13fff15 	stw	r4,-4(fp)

    memset(gPB, 0, UDP_DATA_P + sizeof( DHCPdata ));
 800044c:	00804584 	movi	r2,278
 8000450:	100d883a 	mov	r6,r2
 8000454:	000b883a 	mov	r5,zero
 8000458:	010200b4 	movhi	r4,2050
 800045c:	21233c04 	addi	r4,r4,-29456
 8000460:	8005c200 	call	8005c20 <memset>

    EtherCard::udpPrepare(DHCP_CLIENT_PORT,
                          (dhcpState == DHCP_STATE_BOUND ? EtherCard::dhcpip : allOnes),
 8000464:	d0a6ef03 	ldbu	r2,-25668(gp)

static void send_dhcp_message(uint8_t *requestip) {

    memset(gPB, 0, UDP_DATA_P + sizeof( DHCPdata ));

    EtherCard::udpPrepare(DHCP_CLIENT_PORT,
 8000468:	10803fcc 	andi	r2,r2,255
 800046c:	108000d8 	cmpnei	r2,r2,3
 8000470:	1000021e 	bne	r2,zero,800047c <_ZL17send_dhcp_messagePh+0x44>
 8000474:	d0a6eac4 	addi	r2,gp,-25685
 8000478:	00000206 	br	8000484 <_ZL17send_dhcp_messagePh+0x4c>
 800047c:	00820074 	movhi	r2,2049
 8000480:	109c20c4 	addi	r2,r2,28803
                          (dhcpState == DHCP_STATE_BOUND ? EtherCard::dhcpip : allOnes),
                          DHCP_SERVER_PORT);
 8000484:	018010c4 	movi	r6,67
 8000488:	100b883a 	mov	r5,r2
 800048c:	01001104 	movi	r4,68
 8000490:	80036800 	call	8003680 <_ZN9EtherCard10udpPrepareEtPKht>

    // If we ever don't do this, the DHCP renewal gets sent to whatever random
    // destmacaddr was used by other code. Rather than cache the MAC address of
    // the DHCP server, just force a broadcast here in all cases.
    EtherCard::copyMac(gPB + ETH_DST_MAC, allOnes); //force broadcast mac
 8000494:	01420074 	movhi	r5,2049
 8000498:	295c20c4 	addi	r5,r5,28803
 800049c:	010200b4 	movhi	r4,2050
 80004a0:	21233c04 	addi	r4,r4,-29456
 80004a4:	8004d700 	call	8004d70 <_ZN9EtherCard7copyMacEPhPKh>

    // Build DHCP Packet from buf[UDP_DATA_P]
    DHCPdata *dhcpPtr = (DHCPdata*) (gPB + UDP_DATA_P);
 80004a8:	008200b4 	movhi	r2,2050
 80004ac:	10a34684 	addi	r2,r2,-29414
 80004b0:	e0bffe15 	stw	r2,-8(fp)
    dhcpPtr->op = DHCP_BOOTREQUEST;
 80004b4:	e0bffe17 	ldw	r2,-8(fp)
 80004b8:	00c00044 	movi	r3,1
 80004bc:	10c00005 	stb	r3,0(r2)
    dhcpPtr->htype = 1;
 80004c0:	e0bffe17 	ldw	r2,-8(fp)
 80004c4:	00c00044 	movi	r3,1
 80004c8:	10c00045 	stb	r3,1(r2)
    dhcpPtr->hlen = 6;
 80004cc:	e0bffe17 	ldw	r2,-8(fp)
 80004d0:	00c00184 	movi	r3,6
 80004d4:	10c00085 	stb	r3,2(r2)
    dhcpPtr->xid = currentXid;
 80004d8:	d0e6f017 	ldw	r3,-25664(gp)
 80004dc:	e0bffe17 	ldw	r2,-8(fp)
 80004e0:	10c00115 	stw	r3,4(r2)
    if (dhcpState == DHCP_STATE_BOUND) {
 80004e4:	d0a6ef03 	ldbu	r2,-25668(gp)
 80004e8:	10803fcc 	andi	r2,r2,255
 80004ec:	108000d8 	cmpnei	r2,r2,3
 80004f0:	1000051e 	bne	r2,zero,8000508 <_ZL17send_dhcp_messagePh+0xd0>
        EtherCard::copyIp(dhcpPtr->ciaddr, EtherCard::myip);
 80004f4:	e0bffe17 	ldw	r2,-8(fp)
 80004f8:	10800304 	addi	r2,r2,12
 80004fc:	d166e6c4 	addi	r5,gp,-25701
 8000500:	1009883a 	mov	r4,r2
 8000504:	8004db00 	call	8004db0 <_ZN9EtherCard6copyIpEPhPKh>
    }
    EtherCard::copyMac(dhcpPtr->chaddr, EtherCard::mymac);
 8000508:	e0bffe17 	ldw	r2,-8(fp)
 800050c:	10800704 	addi	r2,r2,28
 8000510:	d166e544 	addi	r5,gp,-25707
 8000514:	1009883a 	mov	r4,r2
 8000518:	8004d700 	call	8004d70 <_ZN9EtherCard7copyMacEPhPKh>

    // options defined as option, length, value
    bufPtr = gPB + UDP_DATA_P + sizeof( DHCPdata );
 800051c:	00c04584 	movi	r3,278
 8000520:	008200b4 	movhi	r2,2050
 8000524:	10a33c04 	addi	r2,r2,-29456
 8000528:	1885883a 	add	r2,r3,r2
 800052c:	d0a6f415 	stw	r2,-25648(gp)
    // DHCP magic cookie
    static const uint8_t cookie[] = { 0x63,0x82,0x53,0x63 };
    for (byte i = 0; i < sizeof(cookie); i++)
 8000530:	e03ffb05 	stb	zero,-20(fp)
 8000534:	e0bffb03 	ldbu	r2,-20(fp)
 8000538:	10800128 	cmpgeui	r2,r2,4
 800053c:	10000b1e 	bne	r2,zero,800056c <_ZL17send_dhcp_messagePh+0x134>
        addToBuf((unsigned char)cookie[i]);
 8000540:	e0fffb03 	ldbu	r3,-20(fp)
 8000544:	d0a00084 	addi	r2,gp,-32766
 8000548:	1885883a 	add	r2,r3,r2
 800054c:	10800003 	ldbu	r2,0(r2)
 8000550:	10803fcc 	andi	r2,r2,255
 8000554:	1009883a 	mov	r4,r2
 8000558:	80003280 	call	8000328 <_ZL8addToBufh>

    // options defined as option, length, value
    bufPtr = gPB + UDP_DATA_P + sizeof( DHCPdata );
    // DHCP magic cookie
    static const uint8_t cookie[] = { 0x63,0x82,0x53,0x63 };
    for (byte i = 0; i < sizeof(cookie); i++)
 800055c:	e0bffb03 	ldbu	r2,-20(fp)
 8000560:	10800044 	addi	r2,r2,1
 8000564:	e0bffb05 	stb	r2,-20(fp)
 8000568:	003ff206 	br	8000534 <_ZL17send_dhcp_messagePh+0xfc>
        addToBuf((unsigned char)cookie[i]);
    addToBuf(DHCP_OPT_MESSAGE_TYPE); // DHCP_STATE_SELECTING, DHCP_STATE_REQUESTING
 800056c:	01000d44 	movi	r4,53
 8000570:	80003280 	call	8000328 <_ZL8addToBufh>
    addToBuf(1);   // Length
 8000574:	01000044 	movi	r4,1
 8000578:	80003280 	call	8000328 <_ZL8addToBufh>
    addToBuf(dhcpState == DHCP_STATE_INIT ? DHCP_DISCOVER : DHCP_REQUEST);
 800057c:	d0a6ef03 	ldbu	r2,-25668(gp)
 8000580:	10803fcc 	andi	r2,r2,255
 8000584:	1000021e 	bne	r2,zero,8000590 <_ZL17send_dhcp_messagePh+0x158>
 8000588:	00800044 	movi	r2,1
 800058c:	00000106 	br	8000594 <_ZL17send_dhcp_messagePh+0x15c>
 8000590:	008000c4 	movi	r2,3
 8000594:	1009883a 	mov	r4,r2
 8000598:	80003280 	call	8000328 <_ZL8addToBufh>

    // Client Identifier Option, this is the client mac address
    addToBuf(DHCP_OPT_CLIENT_IDENTIFIER);
 800059c:	01000f44 	movi	r4,61
 80005a0:	80003280 	call	8000328 <_ZL8addToBufh>
    addToBuf(1 + ETH_LEN); // Length (hardware type + client MAC)
 80005a4:	010001c4 	movi	r4,7
 80005a8:	80003280 	call	8000328 <_ZL8addToBufh>
    addToBuf(DHCP_HTYPE_ETHER);
 80005ac:	01000044 	movi	r4,1
 80005b0:	80003280 	call	8000328 <_ZL8addToBufh>
    addBytes(ETH_LEN, EtherCard::mymac);
 80005b4:	d166e544 	addi	r5,gp,-25707
 80005b8:	01000184 	movi	r4,6
 80005bc:	80003640 	call	8000364 <_ZL8addByteshPKh>

    if (hostname[0]) {
 80005c0:	00820074 	movhi	r2,2049
 80005c4:	10956a04 	addi	r2,r2,21928
 80005c8:	10800003 	ldbu	r2,0(r2)
 80005cc:	10803fcc 	andi	r2,r2,255
 80005d0:	1080201c 	xori	r2,r2,128
 80005d4:	10bfe004 	addi	r2,r2,-128
 80005d8:	10000926 	beq	r2,zero,8000600 <_ZL17send_dhcp_messagePh+0x1c8>
        addOption(DHCP_OPT_HOSTNAME, strlen(hostname), (byte*) hostname);
 80005dc:	01020074 	movhi	r4,2049
 80005e0:	21156a04 	addi	r4,r4,21928
 80005e4:	8005ea80 	call	8005ea8 <strlen>
 80005e8:	10803fcc 	andi	r2,r2,255
 80005ec:	01820074 	movhi	r6,2049
 80005f0:	31956a04 	addi	r6,r6,21928
 80005f4:	100b883a 	mov	r5,r2
 80005f8:	01000304 	movi	r4,12
 80005fc:	80003d40 	call	80003d4 <_ZL9addOptionhhPKh>
    }

    if (requestip != NULL) {
 8000600:	e0bfff17 	ldw	r2,-4(fp)
 8000604:	10000826 	beq	r2,zero,8000628 <_ZL17send_dhcp_messagePh+0x1f0>
        addOption(DHCP_OPT_REQUESTED_ADDRESS, IP_LEN, requestip);
 8000608:	e1bfff17 	ldw	r6,-4(fp)
 800060c:	01400104 	movi	r5,4
 8000610:	01000c84 	movi	r4,50
 8000614:	80003d40 	call	80003d4 <_ZL9addOptionhhPKh>
        addOption(DHCP_OPT_SERVER_IDENTIFIER, IP_LEN, EtherCard::dhcpip);
 8000618:	d1a6eac4 	addi	r6,gp,-25685
 800061c:	01400104 	movi	r5,4
 8000620:	01000d84 	movi	r4,54
 8000624:	80003d40 	call	80003d4 <_ZL9addOptionhhPKh>
    }

    // Additional info in parameter list - minimal list for what we need
    byte len = 3;
 8000628:	008000c4 	movi	r2,3
 800062c:	e0bffb45 	stb	r2,-19(fp)
    if (dhcpCustomOptionList) {
 8000630:	d0a6f517 	ldw	r2,-25644(gp)
 8000634:	10000e26 	beq	r2,zero,8000670 <_ZL17send_dhcp_messagePh+0x238>
        uint8_t *p = dhcpCustomOptionList;
 8000638:	d0a6f517 	ldw	r2,-25644(gp)
 800063c:	e0bffc15 	stw	r2,-16(fp)
        while (*p++ != 0) len++;
 8000640:	e0bffc17 	ldw	r2,-16(fp)
 8000644:	10c00044 	addi	r3,r2,1
 8000648:	e0fffc15 	stw	r3,-16(fp)
 800064c:	10800003 	ldbu	r2,0(r2)
 8000650:	10803fcc 	andi	r2,r2,255
 8000654:	1004c03a 	cmpne	r2,r2,zero
 8000658:	10803fcc 	andi	r2,r2,255
 800065c:	10000426 	beq	r2,zero,8000670 <_ZL17send_dhcp_messagePh+0x238>
 8000660:	e0bffb43 	ldbu	r2,-19(fp)
 8000664:	10800044 	addi	r2,r2,1
 8000668:	e0bffb45 	stb	r2,-19(fp)
 800066c:	003ff406 	br	8000640 <_ZL17send_dhcp_messagePh+0x208>
    }
    addToBuf(DHCP_OPT_PARAMETER_REQUEST_LIST);
 8000670:	01000dc4 	movi	r4,55
 8000674:	80003280 	call	8000328 <_ZL8addToBufh>
    addToBuf(len);    // Length
 8000678:	e0bffb43 	ldbu	r2,-19(fp)
 800067c:	1009883a 	mov	r4,r2
 8000680:	80003280 	call	8000328 <_ZL8addToBufh>
    addToBuf(DHCP_OPT_SUBNET_MASK);
 8000684:	01000044 	movi	r4,1
 8000688:	80003280 	call	8000328 <_ZL8addToBufh>
    addToBuf(DHCP_OPT_ROUTERS);
 800068c:	010000c4 	movi	r4,3
 8000690:	80003280 	call	8000328 <_ZL8addToBufh>
    addToBuf(DHCP_OPT_DOMAIN_NAME_SERVERS);
 8000694:	01000184 	movi	r4,6
 8000698:	80003280 	call	8000328 <_ZL8addToBufh>
    if (dhcpCustomOptionList) {
 800069c:	d0a6f517 	ldw	r2,-25644(gp)
 80006a0:	10000e26 	beq	r2,zero,80006dc <_ZL17send_dhcp_messagePh+0x2a4>
        uint8_t *p = dhcpCustomOptionList; // Custom option list
 80006a4:	d0a6f517 	ldw	r2,-25644(gp)
 80006a8:	e0bffd15 	stw	r2,-12(fp)
        while (*p != 0) {
 80006ac:	e0bffd17 	ldw	r2,-12(fp)
 80006b0:	10800003 	ldbu	r2,0(r2)
 80006b4:	10803fcc 	andi	r2,r2,255
 80006b8:	10000826 	beq	r2,zero,80006dc <_ZL17send_dhcp_messagePh+0x2a4>
            addToBuf(*p++);
 80006bc:	e0bffd17 	ldw	r2,-12(fp)
 80006c0:	10c00044 	addi	r3,r2,1
 80006c4:	e0fffd15 	stw	r3,-12(fp)
 80006c8:	10800003 	ldbu	r2,0(r2)
 80006cc:	10803fcc 	andi	r2,r2,255
 80006d0:	1009883a 	mov	r4,r2
 80006d4:	80003280 	call	8000328 <_ZL8addToBufh>
    addToBuf(DHCP_OPT_SUBNET_MASK);
    addToBuf(DHCP_OPT_ROUTERS);
    addToBuf(DHCP_OPT_DOMAIN_NAME_SERVERS);
    if (dhcpCustomOptionList) {
        uint8_t *p = dhcpCustomOptionList; // Custom option list
        while (*p != 0) {
 80006d8:	003ff406 	br	80006ac <_ZL17send_dhcp_messagePh+0x274>
            addToBuf(*p++);
        }
    }
    addToBuf(DHCP_OPT_END);
 80006dc:	01003fc4 	movi	r4,255
 80006e0:	80003280 	call	8000328 <_ZL8addToBufh>

    // packet size will be under 300 bytes
    EtherCard::udpTransmit((bufPtr - gPB) - UDP_DATA_P);
 80006e4:	d0a6f417 	ldw	r2,-25648(gp)
 80006e8:	1007883a 	mov	r3,r2
 80006ec:	008200b4 	movhi	r2,2050
 80006f0:	10a33c04 	addi	r2,r2,-29456
 80006f4:	1009883a 	mov	r4,r2
 80006f8:	00bff584 	movi	r2,-42
 80006fc:	1105c83a 	sub	r2,r2,r4
 8000700:	1885883a 	add	r2,r3,r2
 8000704:	10bfffcc 	andi	r2,r2,65535
 8000708:	1009883a 	mov	r4,r2
 800070c:	80038080 	call	8003808 <_ZN9EtherCard11udpTransmitEt>
}
 8000710:	0001883a 	nop
 8000714:	e037883a 	mov	sp,fp
 8000718:	dfc00117 	ldw	ra,4(sp)
 800071c:	df000017 	ldw	fp,0(sp)
 8000720:	dec00204 	addi	sp,sp,8
 8000724:	f800283a 	ret

08000728 <_ZL18process_dhcp_offertPh>:

static void process_dhcp_offer(uint16_t len, uint8_t *offeredip) {
 8000728:	defff904 	addi	sp,sp,-28
 800072c:	dfc00615 	stw	ra,24(sp)
 8000730:	df000515 	stw	fp,20(sp)
 8000734:	df000504 	addi	fp,sp,20
 8000738:	2005883a 	mov	r2,r4
 800073c:	e17fff15 	stw	r5,-4(fp)
 8000740:	e0bffe0d 	sth	r2,-8(fp)
    // Map struct onto payload
    DHCPdata *dhcpPtr = (DHCPdata*) (gPB + UDP_DATA_P);
 8000744:	008200b4 	movhi	r2,2050
 8000748:	10a34684 	addi	r2,r2,-29414
 800074c:	e0bffc15 	stw	r2,-16(fp)

    // Offered IP address is in yiaddr
    EtherCard::copyIp(offeredip, dhcpPtr->yiaddr);
 8000750:	e0bffc17 	ldw	r2,-16(fp)
 8000754:	10800404 	addi	r2,r2,16
 8000758:	100b883a 	mov	r5,r2
 800075c:	e13fff17 	ldw	r4,-4(fp)
 8000760:	8004db00 	call	8004db0 <_ZN9EtherCard6copyIpEPhPKh>

    // Search for the server IP
    byte *ptr = (byte*) (dhcpPtr + 1) + 4;
 8000764:	e0bffc17 	ldw	r2,-16(fp)
 8000768:	10803c04 	addi	r2,r2,240
 800076c:	e0bffb15 	stw	r2,-20(fp)
    do {
        byte option = *ptr++;
 8000770:	e0bffb17 	ldw	r2,-20(fp)
 8000774:	10c00044 	addi	r3,r2,1
 8000778:	e0fffb15 	stw	r3,-20(fp)
 800077c:	10800003 	ldbu	r2,0(r2)
 8000780:	e0bffd05 	stb	r2,-12(fp)
        byte optionLen = *ptr++;
 8000784:	e0bffb17 	ldw	r2,-20(fp)
 8000788:	10c00044 	addi	r3,r2,1
 800078c:	e0fffb15 	stw	r3,-20(fp)
 8000790:	10800003 	ldbu	r2,0(r2)
 8000794:	e0bffd45 	stb	r2,-11(fp)
        if (option == DHCP_OPT_SERVER_IDENTIFIER) {
 8000798:	e0bffd03 	ldbu	r2,-12(fp)
 800079c:	10800d98 	cmpnei	r2,r2,54
 80007a0:	1000051e 	bne	r2,zero,80007b8 <_ZL18process_dhcp_offertPh+0x90>
            EtherCard::copyIp(EtherCard::dhcpip, ptr);
 80007a4:	e17ffb17 	ldw	r5,-20(fp)
 80007a8:	d126eac4 	addi	r4,gp,-25685
 80007ac:	8004db00 	call	8004db0 <_ZN9EtherCard6copyIpEPhPKh>
            break;
 80007b0:	0001883a 	nop
        }
        ptr += optionLen;
    } while (ptr < gPB + len);
}
 80007b4:	00000b06 	br	80007e4 <_ZL18process_dhcp_offertPh+0xbc>
        byte optionLen = *ptr++;
        if (option == DHCP_OPT_SERVER_IDENTIFIER) {
            EtherCard::copyIp(EtherCard::dhcpip, ptr);
            break;
        }
        ptr += optionLen;
 80007b8:	e0bffd43 	ldbu	r2,-11(fp)
 80007bc:	e0fffb17 	ldw	r3,-20(fp)
 80007c0:	1885883a 	add	r2,r3,r2
 80007c4:	e0bffb15 	stw	r2,-20(fp)
    } while (ptr < gPB + len);
 80007c8:	e0fffe0b 	ldhu	r3,-8(fp)
 80007cc:	008200b4 	movhi	r2,2050
 80007d0:	10a33c04 	addi	r2,r2,-29456
 80007d4:	1885883a 	add	r2,r3,r2
 80007d8:	e0fffb17 	ldw	r3,-20(fp)
 80007dc:	1880012e 	bgeu	r3,r2,80007e4 <_ZL18process_dhcp_offertPh+0xbc>
    // Offered IP address is in yiaddr
    EtherCard::copyIp(offeredip, dhcpPtr->yiaddr);

    // Search for the server IP
    byte *ptr = (byte*) (dhcpPtr + 1) + 4;
    do {
 80007e0:	003fe306 	br	8000770 <_ZL18process_dhcp_offertPh+0x48>
            EtherCard::copyIp(EtherCard::dhcpip, ptr);
            break;
        }
        ptr += optionLen;
    } while (ptr < gPB + len);
}
 80007e4:	0001883a 	nop
 80007e8:	e037883a 	mov	sp,fp
 80007ec:	dfc00117 	ldw	ra,4(sp)
 80007f0:	df000017 	ldw	fp,0(sp)
 80007f4:	dec00204 	addi	sp,sp,8
 80007f8:	f800283a 	ret

080007fc <_ZL16process_dhcp_ackt>:

static void process_dhcp_ack(uint16_t len) {
 80007fc:	defff804 	addi	sp,sp,-32
 8000800:	dfc00715 	stw	ra,28(sp)
 8000804:	df000615 	stw	fp,24(sp)
 8000808:	df000604 	addi	fp,sp,24
 800080c:	2005883a 	mov	r2,r4
 8000810:	e0bfff0d 	sth	r2,-4(fp)
    // Map struct onto payload
    DHCPdata *dhcpPtr = (DHCPdata*) (gPB + UDP_DATA_P);
 8000814:	008200b4 	movhi	r2,2050
 8000818:	10a34684 	addi	r2,r2,-29414
 800081c:	e0bffd15 	stw	r2,-12(fp)

    // Allocated IP address is in yiaddr
    EtherCard::copyIp(EtherCard::myip, dhcpPtr->yiaddr);
 8000820:	e0bffd17 	ldw	r2,-12(fp)
 8000824:	10800404 	addi	r2,r2,16
 8000828:	100b883a 	mov	r5,r2
 800082c:	d126e6c4 	addi	r4,gp,-25701
 8000830:	8004db00 	call	8004db0 <_ZN9EtherCard6copyIpEPhPKh>

    // Scan through variable length option list identifying options we want
    byte *ptr = (byte*) (dhcpPtr + 1) + 4;
 8000834:	e0bffd17 	ldw	r2,-12(fp)
 8000838:	10803c04 	addi	r2,r2,240
 800083c:	e0bffa15 	stw	r2,-24(fp)
    bool done = false;
 8000840:	e03ffb05 	stb	zero,-20(fp)
    do {
        byte option = *ptr++;
 8000844:	e0bffa17 	ldw	r2,-24(fp)
 8000848:	10c00044 	addi	r3,r2,1
 800084c:	e0fffa15 	stw	r3,-24(fp)
 8000850:	10800003 	ldbu	r2,0(r2)
 8000854:	e0bffe05 	stb	r2,-8(fp)
        byte optionLen = *ptr++;
 8000858:	e0bffa17 	ldw	r2,-24(fp)
 800085c:	10c00044 	addi	r3,r2,1
 8000860:	e0fffa15 	stw	r3,-24(fp)
 8000864:	10800003 	ldbu	r2,0(r2)
 8000868:	e0bffe45 	stb	r2,-7(fp)
        switch (option) {
 800086c:	e0bffe03 	ldbu	r2,-8(fp)
 8000870:	10c001a0 	cmpeqi	r3,r2,6
 8000874:	1800161e 	bne	r3,zero,80008d0 <_ZL16process_dhcp_ackt+0xd4>
 8000878:	10c001c8 	cmpgei	r3,r2,7
 800087c:	1800051e 	bne	r3,zero,8000894 <_ZL16process_dhcp_ackt+0x98>
 8000880:	10c00060 	cmpeqi	r3,r2,1
 8000884:	18000a1e 	bne	r3,zero,80008b0 <_ZL16process_dhcp_ackt+0xb4>
 8000888:	108000e0 	cmpeqi	r2,r2,3
 800088c:	10000c1e 	bne	r2,zero,80008c0 <_ZL16process_dhcp_ackt+0xc4>
 8000890:	00003106 	br	8000958 <_ZL16process_dhcp_ackt+0x15c>
 8000894:	10c00ea0 	cmpeqi	r3,r2,58
 8000898:	1800111e 	bne	r3,zero,80008e0 <_ZL16process_dhcp_ackt+0xe4>
 800089c:	10c03fe0 	cmpeqi	r3,r2,255
 80008a0:	18002a1e 	bne	r3,zero,800094c <_ZL16process_dhcp_ackt+0x150>
 80008a4:	10800ce0 	cmpeqi	r2,r2,51
 80008a8:	10000d1e 	bne	r2,zero,80008e0 <_ZL16process_dhcp_ackt+0xe4>
 80008ac:	00002a06 	br	8000958 <_ZL16process_dhcp_ackt+0x15c>
        case DHCP_OPT_SUBNET_MASK:
            EtherCard::copyIp(EtherCard::netmask, ptr);
 80008b0:	e17ffa17 	ldw	r5,-24(fp)
 80008b4:	d126e7c4 	addi	r4,gp,-25697
 80008b8:	8004db00 	call	8004db0 <_ZN9EtherCard6copyIpEPhPKh>
            break;
 80008bc:	00004006 	br	80009c0 <_ZL16process_dhcp_ackt+0x1c4>
        case DHCP_OPT_ROUTERS:
            EtherCard::copyIp(EtherCard::gwip, ptr);
 80008c0:	e17ffa17 	ldw	r5,-24(fp)
 80008c4:	d126e9c4 	addi	r4,gp,-25689
 80008c8:	8004db00 	call	8004db0 <_ZN9EtherCard6copyIpEPhPKh>
            break;
 80008cc:	00003c06 	br	80009c0 <_ZL16process_dhcp_ackt+0x1c4>
        case DHCP_OPT_DOMAIN_NAME_SERVERS:
            EtherCard::copyIp(EtherCard::dnsip, ptr);
 80008d0:	e17ffa17 	ldw	r5,-24(fp)
 80008d4:	d126ebc4 	addi	r4,gp,-25681
 80008d8:	8004db00 	call	8004db0 <_ZN9EtherCard6copyIpEPhPKh>
            break;
 80008dc:	00003806 	br	80009c0 <_ZL16process_dhcp_ackt+0x1c4>
        case DHCP_OPT_LEASE_TIME:
        case DHCP_OPT_RENEWAL_TIME:
            leaseTime = 0;
 80008e0:	d026f315 	stw	zero,-25652(gp)
            for (byte i = 0; i<4; i++)
 80008e4:	e03ffb45 	stb	zero,-19(fp)
 80008e8:	e0bffb43 	ldbu	r2,-19(fp)
 80008ec:	10800128 	cmpgeui	r2,r2,4
 80008f0:	10000d1e 	bne	r2,zero,8000928 <_ZL16process_dhcp_ackt+0x12c>
                leaseTime = (leaseTime << 8) + ptr[i];
 80008f4:	d0a6f317 	ldw	r2,-25652(gp)
 80008f8:	1006923a 	slli	r3,r2,8
 80008fc:	e0bffb43 	ldbu	r2,-19(fp)
 8000900:	e13ffa17 	ldw	r4,-24(fp)
 8000904:	2085883a 	add	r2,r4,r2
 8000908:	10800003 	ldbu	r2,0(r2)
 800090c:	10803fcc 	andi	r2,r2,255
 8000910:	1885883a 	add	r2,r3,r2
 8000914:	d0a6f315 	stw	r2,-25652(gp)
            EtherCard::copyIp(EtherCard::dnsip, ptr);
            break;
        case DHCP_OPT_LEASE_TIME:
        case DHCP_OPT_RENEWAL_TIME:
            leaseTime = 0;
            for (byte i = 0; i<4; i++)
 8000918:	e0bffb43 	ldbu	r2,-19(fp)
 800091c:	10800044 	addi	r2,r2,1
 8000920:	e0bffb45 	stb	r2,-19(fp)
 8000924:	003ff006 	br	80008e8 <_ZL16process_dhcp_ackt+0xec>
                leaseTime = (leaseTime << 8) + ptr[i];
            if (leaseTime != DHCP_INFINITE_LEASE) {
 8000928:	d0a6f317 	ldw	r2,-25652(gp)
 800092c:	10bfffe0 	cmpeqi	r2,r2,-1
 8000930:	1000221e 	bne	r2,zero,80009bc <_ZL16process_dhcp_ackt+0x1c0>
                leaseTime *= 1000;      // milliseconds
 8000934:	d0a6f317 	ldw	r2,-25652(gp)
 8000938:	0140fa04 	movi	r5,1000
 800093c:	1009883a 	mov	r4,r2
 8000940:	80050200 	call	8005020 <__mulsi3>
 8000944:	d0a6f315 	stw	r2,-25652(gp)
            }
            break;
 8000948:	00001c06 	br	80009bc <_ZL16process_dhcp_ackt+0x1c0>
        case DHCP_OPT_END:
            done = true;
 800094c:	00800044 	movi	r2,1
 8000950:	e0bffb05 	stb	r2,-20(fp)
            break;
 8000954:	00001a06 	br	80009c0 <_ZL16process_dhcp_ackt+0x1c4>
        default: {
            // Is is a custom configured option?
            if (dhcpCustomOptionList) {
 8000958:	d0a6f517 	ldw	r2,-25644(gp)
 800095c:	10001826 	beq	r2,zero,80009c0 <_ZL16process_dhcp_ackt+0x1c4>
                uint8_t *p = dhcpCustomOptionList;
 8000960:	d0a6f517 	ldw	r2,-25644(gp)
 8000964:	e0bffc15 	stw	r2,-16(fp)
                while (*p != 0) {
 8000968:	e0bffc17 	ldw	r2,-16(fp)
 800096c:	10800003 	ldbu	r2,0(r2)
 8000970:	10803fcc 	andi	r2,r2,255
 8000974:	10001226 	beq	r2,zero,80009c0 <_ZL16process_dhcp_ackt+0x1c4>
                    if (option == *p) {
 8000978:	e0bffc17 	ldw	r2,-16(fp)
 800097c:	10800003 	ldbu	r2,0(r2)
 8000980:	10c03fcc 	andi	r3,r2,255
 8000984:	e0bffe03 	ldbu	r2,-8(fp)
 8000988:	1880081e 	bne	r3,r2,80009ac <_ZL16process_dhcp_ackt+0x1b0>
                        dhcpCustomOptionCallback(option, ptr, optionLen);
 800098c:	d0a6f617 	ldw	r2,-25640(gp)
 8000990:	e0fffe03 	ldbu	r3,-8(fp)
 8000994:	e13ffe43 	ldbu	r4,-7(fp)
 8000998:	200d883a 	mov	r6,r4
 800099c:	e17ffa17 	ldw	r5,-24(fp)
 80009a0:	1809883a 	mov	r4,r3
 80009a4:	103ee83a 	callr	r2
                        break;
 80009a8:	00000506 	br	80009c0 <_ZL16process_dhcp_ackt+0x1c4>
                    }
                    p++;
 80009ac:	e0bffc17 	ldw	r2,-16(fp)
 80009b0:	10800044 	addi	r2,r2,1
 80009b4:	e0bffc15 	stw	r2,-16(fp)
            break;
        default: {
            // Is is a custom configured option?
            if (dhcpCustomOptionList) {
                uint8_t *p = dhcpCustomOptionList;
                while (*p != 0) {
 80009b8:	003feb06 	br	8000968 <_ZL16process_dhcp_ackt+0x16c>
            for (byte i = 0; i<4; i++)
                leaseTime = (leaseTime << 8) + ptr[i];
            if (leaseTime != DHCP_INFINITE_LEASE) {
                leaseTime *= 1000;      // milliseconds
            }
            break;
 80009bc:	0001883a 	nop
                    p++;
                }
            }
        }
    }
    ptr += optionLen;
 80009c0:	e0bffe43 	ldbu	r2,-7(fp)
 80009c4:	e0fffa17 	ldw	r3,-24(fp)
 80009c8:	1885883a 	add	r2,r3,r2
 80009cc:	e0bffa15 	stw	r2,-24(fp)
}
while (!done && ptr < gPB + len);
 80009d0:	e0bffb03 	ldbu	r2,-20(fp)
 80009d4:	1000071e 	bne	r2,zero,80009f4 <_ZL16process_dhcp_ackt+0x1f8>
 80009d8:	e0ffff0b 	ldhu	r3,-4(fp)
 80009dc:	008200b4 	movhi	r2,2050
 80009e0:	10a33c04 	addi	r2,r2,-29456
 80009e4:	1885883a 	add	r2,r3,r2
 80009e8:	e0fffa17 	ldw	r3,-24(fp)
 80009ec:	1880012e 	bgeu	r3,r2,80009f4 <_ZL16process_dhcp_ackt+0x1f8>
    EtherCard::copyIp(EtherCard::myip, dhcpPtr->yiaddr);

    // Scan through variable length option list identifying options we want
    byte *ptr = (byte*) (dhcpPtr + 1) + 4;
    bool done = false;
    do {
 80009f0:	003f9406 	br	8000844 <_ZL16process_dhcp_ackt+0x48>
        }
    }
    ptr += optionLen;
}
while (!done && ptr < gPB + len);
}
 80009f4:	0001883a 	nop
 80009f8:	e037883a 	mov	sp,fp
 80009fc:	dfc00117 	ldw	ra,4(sp)
 8000a00:	df000017 	ldw	fp,0(sp)
 8000a04:	dec00204 	addi	sp,sp,8
 8000a08:	f800283a 	ret

08000a0c <_ZL26dhcp_received_message_typeth>:

static bool dhcp_received_message_type (uint16_t len, byte msgType) {
 8000a0c:	defffa04 	addi	sp,sp,-24
 8000a10:	df000515 	stw	fp,20(sp)
 8000a14:	df000504 	addi	fp,sp,20
 8000a18:	2007883a 	mov	r3,r4
 8000a1c:	2805883a 	mov	r2,r5
 8000a20:	e0fffe0d 	sth	r3,-8(fp)
 8000a24:	e0bfff05 	stb	r2,-4(fp)
    // Map struct onto payload
    DHCPdata *dhcpPtr = (DHCPdata*) (gPB + UDP_DATA_P);
 8000a28:	008200b4 	movhi	r2,2050
 8000a2c:	10a34684 	addi	r2,r2,-29414
 8000a30:	e0bffc15 	stw	r2,-16(fp)

    if (len >= 70 && gPB[UDP_SRC_PORT_L_P] == DHCP_SERVER_PORT &&
 8000a34:	e0bffe0b 	ldhu	r2,-8(fp)
 8000a38:	108011b0 	cmpltui	r2,r2,70
 8000a3c:	10002c1e 	bne	r2,zero,8000af0 <_ZL26dhcp_received_message_typeth+0xe4>
 8000a40:	008200b4 	movhi	r2,2050
 8000a44:	10a33c04 	addi	r2,r2,-29456
 8000a48:	108008c3 	ldbu	r2,35(r2)
 8000a4c:	10803fcc 	andi	r2,r2,255
 8000a50:	108010d8 	cmpnei	r2,r2,67
 8000a54:	1000261e 	bne	r2,zero,8000af0 <_ZL26dhcp_received_message_typeth+0xe4>
            dhcpPtr->xid == currentXid ) {
 8000a58:	e0bffc17 	ldw	r2,-16(fp)
 8000a5c:	10c00117 	ldw	r3,4(r2)
 8000a60:	d0a6f017 	ldw	r2,-25664(gp)

static bool dhcp_received_message_type (uint16_t len, byte msgType) {
    // Map struct onto payload
    DHCPdata *dhcpPtr = (DHCPdata*) (gPB + UDP_DATA_P);

    if (len >= 70 && gPB[UDP_SRC_PORT_L_P] == DHCP_SERVER_PORT &&
 8000a64:	1880221e 	bne	r3,r2,8000af0 <_ZL26dhcp_received_message_typeth+0xe4>
            dhcpPtr->xid == currentXid ) {

        byte *ptr = (byte*) (dhcpPtr + 1) + 4;
 8000a68:	e0bffc17 	ldw	r2,-16(fp)
 8000a6c:	10803c04 	addi	r2,r2,240
 8000a70:	e0bffb15 	stw	r2,-20(fp)
        do {
            byte option = *ptr++;
 8000a74:	e0bffb17 	ldw	r2,-20(fp)
 8000a78:	10c00044 	addi	r3,r2,1
 8000a7c:	e0fffb15 	stw	r3,-20(fp)
 8000a80:	10800003 	ldbu	r2,0(r2)
 8000a84:	e0bffd05 	stb	r2,-12(fp)
            byte optionLen = *ptr++;
 8000a88:	e0bffb17 	ldw	r2,-20(fp)
 8000a8c:	10c00044 	addi	r3,r2,1
 8000a90:	e0fffb15 	stw	r3,-20(fp)
 8000a94:	10800003 	ldbu	r2,0(r2)
 8000a98:	e0bffd45 	stb	r2,-11(fp)
            if(option == DHCP_OPT_MESSAGE_TYPE && *ptr == msgType ) {
 8000a9c:	e0bffd03 	ldbu	r2,-12(fp)
 8000aa0:	10800d58 	cmpnei	r2,r2,53
 8000aa4:	1000071e 	bne	r2,zero,8000ac4 <_ZL26dhcp_received_message_typeth+0xb8>
 8000aa8:	e0bffb17 	ldw	r2,-20(fp)
 8000aac:	10800003 	ldbu	r2,0(r2)
 8000ab0:	10c03fcc 	andi	r3,r2,255
 8000ab4:	e0bfff03 	ldbu	r2,-4(fp)
 8000ab8:	1880021e 	bne	r3,r2,8000ac4 <_ZL26dhcp_received_message_typeth+0xb8>
                return true;
 8000abc:	00800044 	movi	r2,1
 8000ac0:	00000c06 	br	8000af4 <_ZL26dhcp_received_message_typeth+0xe8>
            }
            ptr += optionLen;
 8000ac4:	e0bffd43 	ldbu	r2,-11(fp)
 8000ac8:	e0fffb17 	ldw	r3,-20(fp)
 8000acc:	1885883a 	add	r2,r3,r2
 8000ad0:	e0bffb15 	stw	r2,-20(fp)
        } while (ptr < gPB + len);
 8000ad4:	e0fffe0b 	ldhu	r3,-8(fp)
 8000ad8:	008200b4 	movhi	r2,2050
 8000adc:	10a33c04 	addi	r2,r2,-29456
 8000ae0:	1885883a 	add	r2,r3,r2
 8000ae4:	e0fffb17 	ldw	r3,-20(fp)
 8000ae8:	1880012e 	bgeu	r3,r2,8000af0 <_ZL26dhcp_received_message_typeth+0xe4>

    if (len >= 70 && gPB[UDP_SRC_PORT_L_P] == DHCP_SERVER_PORT &&
            dhcpPtr->xid == currentXid ) {

        byte *ptr = (byte*) (dhcpPtr + 1) + 4;
        do {
 8000aec:	003fe106 	br	8000a74 <_ZL26dhcp_received_message_typeth+0x68>
                return true;
            }
            ptr += optionLen;
        } while (ptr < gPB + len);
    }
    return false;
 8000af0:	0005883a 	mov	r2,zero
}
 8000af4:	e037883a 	mov	sp,fp
 8000af8:	df000017 	ldw	fp,0(sp)
 8000afc:	dec00104 	addi	sp,sp,4
 8000b00:	f800283a 	ret

08000b04 <_ZL10toAsciiHexh>:

static char toAsciiHex(byte b) {
 8000b04:	defffd04 	addi	sp,sp,-12
 8000b08:	df000215 	stw	fp,8(sp)
 8000b0c:	df000204 	addi	fp,sp,8
 8000b10:	2005883a 	mov	r2,r4
 8000b14:	e0bfff05 	stb	r2,-4(fp)
    char c = b & 0x0f;
 8000b18:	e0bfff03 	ldbu	r2,-4(fp)
 8000b1c:	108003cc 	andi	r2,r2,15
 8000b20:	e0bffe05 	stb	r2,-8(fp)
    c += (c <= 9) ? '0' : 'A'-10;
 8000b24:	e0bffe07 	ldb	r2,-8(fp)
 8000b28:	10800288 	cmpgei	r2,r2,10
 8000b2c:	1000021e 	bne	r2,zero,8000b38 <_ZL10toAsciiHexh+0x34>
 8000b30:	00800c04 	movi	r2,48
 8000b34:	00000106 	br	8000b3c <_ZL10toAsciiHexh+0x38>
 8000b38:	00800dc4 	movi	r2,55
 8000b3c:	e0fffe03 	ldbu	r3,-8(fp)
 8000b40:	10c5883a 	add	r2,r2,r3
 8000b44:	e0bffe05 	stb	r2,-8(fp)
    return c;
 8000b48:	e0bffe03 	ldbu	r2,-8(fp)
}
 8000b4c:	e037883a 	mov	sp,fp
 8000b50:	df000017 	ldw	fp,0(sp)
 8000b54:	dec00104 	addi	sp,sp,4
 8000b58:	f800283a 	ret

08000b5c <_ZN9EtherCard9dhcpSetupEPKcb>:

bool EtherCard::dhcpSetup (const char *hname, bool fromRam) {
 8000b5c:	defffa04 	addi	sp,sp,-24
 8000b60:	dfc00515 	stw	ra,20(sp)
 8000b64:	df000415 	stw	fp,16(sp)
 8000b68:	dc000315 	stw	r16,12(sp)
 8000b6c:	df000404 	addi	fp,sp,16
 8000b70:	e13ffd15 	stw	r4,-12(fp)
 8000b74:	2805883a 	mov	r2,r5
 8000b78:	e0bffe05 	stb	r2,-8(fp)
    // Use during setup, as this discards all incoming requests until it returns.
    // That shouldn't be a problem, because we don't have an IPaddress yet.
    // Will try 60 secs to obtain DHCP-lease.

    using_dhcp = true;
 8000b7c:	00800044 	movi	r2,1
 8000b80:	d0a6edc5 	stb	r2,-25673(gp)

    if(hname != NULL) {
 8000b84:	e0bffd17 	ldw	r2,-12(fp)
 8000b88:	10000c26 	beq	r2,zero,8000bbc <_ZN9EtherCard9dhcpSetupEPKcb+0x60>
        if(fromRam) {
 8000b8c:	e0bffe03 	ldbu	r2,-8(fp)
 8000b90:	10000626 	beq	r2,zero,8000bac <_ZN9EtherCard9dhcpSetupEPKcb+0x50>
            strncpy(hostname, hname, DHCP_HOSTNAME_MAX_LEN);
 8000b94:	01800804 	movi	r6,32
 8000b98:	e17ffd17 	ldw	r5,-12(fp)
 8000b9c:	01020074 	movhi	r4,2049
 8000ba0:	21156a04 	addi	r4,r4,21928
 8000ba4:	80060100 	call	8006010 <strncpy>
 8000ba8:	00002006 	br	8000c2c <_ZN9EtherCard9dhcpSetupEPKcb+0xd0>
        }
        else {
            printf("BAD THING HAPPENED IN dhcpSetup\n");
 8000bac:	01020074 	movhi	r4,2049
 8000bb0:	21145304 	addi	r4,r4,20812
 8000bb4:	8005e940 	call	8005e94 <puts>
 8000bb8:	00001c06 	br	8000c2c <_ZN9EtherCard9dhcpSetupEPKcb+0xd0>
        }
    }
    else {
        // Set a unique hostname, use Arduino-?? with last octet of mac address
        hostname[strlen(hostname) - 2] = toAsciiHex(mymac[5] >> 4);   // Appends mac to last 2 digits of the hostname
 8000bbc:	01020074 	movhi	r4,2049
 8000bc0:	21156a04 	addi	r4,r4,21928
 8000bc4:	8005ea80 	call	8005ea8 <strlen>
 8000bc8:	143fff84 	addi	r16,r2,-2
 8000bcc:	d0a6e683 	ldbu	r2,-25702(gp)
 8000bd0:	10803fcc 	andi	r2,r2,255
 8000bd4:	1005d13a 	srai	r2,r2,4
 8000bd8:	10803fcc 	andi	r2,r2,255
 8000bdc:	1009883a 	mov	r4,r2
 8000be0:	8000b040 	call	8000b04 <_ZL10toAsciiHexh>
 8000be4:	1007883a 	mov	r3,r2
 8000be8:	00820074 	movhi	r2,2049
 8000bec:	10956a04 	addi	r2,r2,21928
 8000bf0:	1405883a 	add	r2,r2,r16
 8000bf4:	10c00005 	stb	r3,0(r2)
        hostname[strlen(hostname) - 1] = toAsciiHex(mymac[5]);   // Even if it's smaller than the maximum <thus, strlen(hostname)>
 8000bf8:	01020074 	movhi	r4,2049
 8000bfc:	21156a04 	addi	r4,r4,21928
 8000c00:	8005ea80 	call	8005ea8 <strlen>
 8000c04:	143fffc4 	addi	r16,r2,-1
 8000c08:	d0a6e683 	ldbu	r2,-25702(gp)
 8000c0c:	10803fcc 	andi	r2,r2,255
 8000c10:	1009883a 	mov	r4,r2
 8000c14:	8000b040 	call	8000b04 <_ZL10toAsciiHexh>
 8000c18:	1007883a 	mov	r3,r2
 8000c1c:	00820074 	movhi	r2,2049
 8000c20:	10956a04 	addi	r2,r2,21928
 8000c24:	1405883a 	add	r2,r2,r16
 8000c28:	10c00005 	stb	r3,0(r2)
    }

    dhcpState = DHCP_STATE_INIT;
 8000c2c:	d026ef05 	stb	zero,-25668(gp)
    uint16_t start = millis();
 8000c30:	80003000 	call	8000300 <_Z6millisv>
 8000c34:	e0bffc0d 	sth	r2,-16(fp)

    while (dhcpState != DHCP_STATE_BOUND && uint16_t(millis()) - start < 60000) {
 8000c38:	d0a6ef03 	ldbu	r2,-25668(gp)
 8000c3c:	10803fcc 	andi	r2,r2,255
 8000c40:	108000e0 	cmpeqi	r2,r2,3
 8000c44:	1000081e 	bne	r2,zero,8000c68 <_ZN9EtherCard9dhcpSetupEPKcb+0x10c>
 8000c48:	80003000 	call	8000300 <_Z6millisv>
 8000c4c:	10ffffcc 	andi	r3,r2,65535
 8000c50:	e0bffc0b 	ldhu	r2,-16(fp)
 8000c54:	1885c83a 	sub	r2,r3,r2
 8000c58:	00fa97d4 	movui	r3,59999
 8000c5c:	18800216 	blt	r3,r2,8000c68 <_ZN9EtherCard9dhcpSetupEPKcb+0x10c>
 8000c60:	00800044 	movi	r2,1
 8000c64:	00000106 	br	8000c6c <_ZN9EtherCard9dhcpSetupEPKcb+0x110>
 8000c68:	0005883a 	mov	r2,zero
 8000c6c:	10803fcc 	andi	r2,r2,255
 8000c70:	10000826 	beq	r2,zero,8000c94 <_ZN9EtherCard9dhcpSetupEPKcb+0x138>
        if (isLinkUp()) DhcpStateMachine(packetReceive());
 8000c74:	8001d700 	call	8001d70 <_ZN8ENC28J608isLinkUpEv>
 8000c78:	10803fcc 	andi	r2,r2,255
 8000c7c:	103fee26 	beq	r2,zero,8000c38 <_ZN9EtherCard9dhcpSetupEPKcb+0xdc>
 8000c80:	8001ea80 	call	8001ea8 <_ZN8ENC28J6013packetReceiveEv>
 8000c84:	10bfffcc 	andi	r2,r2,65535
 8000c88:	1009883a 	mov	r4,r2
 8000c8c:	8000d400 	call	8000d40 <_ZN9EtherCard16DhcpStateMachineEt>
    }

    dhcpState = DHCP_STATE_INIT;
    uint16_t start = millis();

    while (dhcpState != DHCP_STATE_BOUND && uint16_t(millis()) - start < 60000) {
 8000c90:	003fe906 	br	8000c38 <_ZN9EtherCard9dhcpSetupEPKcb+0xdc>
        if (isLinkUp()) DhcpStateMachine(packetReceive());
    }
    updateBroadcastAddress();
 8000c94:	8003cf80 	call	8003cf8 <_ZN9EtherCard22updateBroadcastAddressEv>
    delaycnt = 0;
 8000c98:	d026ee8d 	sth	zero,-25670(gp)
    return dhcpState == DHCP_STATE_BOUND ;
 8000c9c:	d0a6ef03 	ldbu	r2,-25668(gp)
 8000ca0:	10803fcc 	andi	r2,r2,255
 8000ca4:	108000e0 	cmpeqi	r2,r2,3
}
 8000ca8:	e6ffff04 	addi	sp,fp,-4
 8000cac:	dfc00217 	ldw	ra,8(sp)
 8000cb0:	df000117 	ldw	fp,4(sp)
 8000cb4:	dc000017 	ldw	r16,0(sp)
 8000cb8:	dec00304 	addi	sp,sp,12
 8000cbc:	f800283a 	ret

08000cc0 <_ZN9EtherCard21dhcpAddOptionCallbackEhPFvhPKhhE>:

void EtherCard::dhcpAddOptionCallback(uint8_t option, DhcpOptionCallback callback)
{
 8000cc0:	defffd04 	addi	sp,sp,-12
 8000cc4:	df000215 	stw	fp,8(sp)
 8000cc8:	df000204 	addi	fp,sp,8
 8000ccc:	2005883a 	mov	r2,r4
 8000cd0:	e17fff15 	stw	r5,-4(fp)
 8000cd4:	e0bffe05 	stb	r2,-8(fp)
    static uint8_t optionList[2];
    optionList[0] = option;
 8000cd8:	e0bffe03 	ldbu	r2,-8(fp)
 8000cdc:	d0a6f705 	stb	r2,-25636(gp)
    optionList[1] = 0;
 8000ce0:	d026f745 	stb	zero,-25635(gp)
    dhcpCustomOptionList = optionList;
 8000ce4:	d0a6f704 	addi	r2,gp,-25636
 8000ce8:	d0a6f515 	stw	r2,-25644(gp)
    dhcpCustomOptionCallback = callback;
 8000cec:	e0bfff17 	ldw	r2,-4(fp)
 8000cf0:	d0a6f615 	stw	r2,-25640(gp)
}
 8000cf4:	0001883a 	nop
 8000cf8:	e037883a 	mov	sp,fp
 8000cfc:	df000017 	ldw	fp,0(sp)
 8000d00:	dec00104 	addi	sp,sp,4
 8000d04:	f800283a 	ret

08000d08 <_ZN9EtherCard21dhcpAddOptionCallbackEPhPFvhPKhhE>:

void EtherCard::dhcpAddOptionCallback(uint8_t* optionlist, DhcpOptionCallback callback)
{
 8000d08:	defffd04 	addi	sp,sp,-12
 8000d0c:	df000215 	stw	fp,8(sp)
 8000d10:	df000204 	addi	fp,sp,8
 8000d14:	e13ffe15 	stw	r4,-8(fp)
 8000d18:	e17fff15 	stw	r5,-4(fp)
    dhcpCustomOptionList = optionlist;
 8000d1c:	e0bffe17 	ldw	r2,-8(fp)
 8000d20:	d0a6f515 	stw	r2,-25644(gp)
    dhcpCustomOptionCallback = callback;
 8000d24:	e0bfff17 	ldw	r2,-4(fp)
 8000d28:	d0a6f615 	stw	r2,-25640(gp)
}
 8000d2c:	0001883a 	nop
 8000d30:	e037883a 	mov	sp,fp
 8000d34:	df000017 	ldw	fp,0(sp)
 8000d38:	dec00104 	addi	sp,sp,4
 8000d3c:	f800283a 	ret

08000d40 <_ZN9EtherCard16DhcpStateMachineEt>:

void EtherCard::DhcpStateMachine (uint16_t len)
{
 8000d40:	defffc04 	addi	sp,sp,-16
 8000d44:	dfc00315 	stw	ra,12(sp)
 8000d48:	df000215 	stw	fp,8(sp)
 8000d4c:	df000204 	addi	fp,sp,8
 8000d50:	2005883a 	mov	r2,r4
 8000d54:	e0bfff0d 	sth	r2,-4(fp)
    	printf("Renew");
        break;
    }
#endif

    switch (dhcpState) {
 8000d58:	d0a6ef03 	ldbu	r2,-25668(gp)
 8000d5c:	10803fcc 	andi	r2,r2,255
 8000d60:	10c00168 	cmpgeui	r3,r2,5
 8000d64:	18006c1e 	bne	r3,zero,8000f18 <_ZN9EtherCard16DhcpStateMachineEt+0x1d8>
 8000d68:	100690ba 	slli	r3,r2,2
 8000d6c:	00820034 	movhi	r2,2048
 8000d70:	10836004 	addi	r2,r2,3456
 8000d74:	1885883a 	add	r2,r3,r2
 8000d78:	10800017 	ldw	r2,0(r2)
 8000d7c:	1000683a 	jmp	r2
 8000d80:	08000de8 	cmpgeui	zero,at,55
 8000d84:	08000e24 	muli	zero,at,56
 8000d88:	08000e8c 	andi	zero,at,58
 8000d8c:	08000d94 	ori	zero,at,54
 8000d90:	08000e8c 	andi	zero,at,58

    case DHCP_STATE_BOUND:
        //!@todo Due to millis() wrap-around, DHCP renewal may not work if leaseTime is larger than 49days
        if (leaseTime != DHCP_INFINITE_LEASE && millis() - leaseStart >= leaseTime) {
 8000d94:	d0a6f317 	ldw	r2,-25652(gp)
 8000d98:	10bfffe0 	cmpeqi	r2,r2,-1
 8000d9c:	1000081e 	bne	r2,zero,8000dc0 <_ZN9EtherCard16DhcpStateMachineEt+0x80>
 8000da0:	80003000 	call	8000300 <_Z6millisv>
 8000da4:	1007883a 	mov	r3,r2
 8000da8:	d0a6f217 	ldw	r2,-25656(gp)
 8000dac:	1887c83a 	sub	r3,r3,r2
 8000db0:	d0a6f317 	ldw	r2,-25652(gp)
 8000db4:	18800236 	bltu	r3,r2,8000dc0 <_ZN9EtherCard16DhcpStateMachineEt+0x80>
 8000db8:	00800044 	movi	r2,1
 8000dbc:	00000106 	br	8000dc4 <_ZN9EtherCard16DhcpStateMachineEt+0x84>
 8000dc0:	0005883a 	mov	r2,zero
 8000dc4:	10803fcc 	andi	r2,r2,255
 8000dc8:	10004e26 	beq	r2,zero,8000f04 <_ZN9EtherCard16DhcpStateMachineEt+0x1c4>
            send_dhcp_message(myip);
 8000dcc:	d126e6c4 	addi	r4,gp,-25701
 8000dd0:	80004380 	call	8000438 <_ZL17send_dhcp_messagePh>
            dhcpState = DHCP_STATE_RENEWING;
 8000dd4:	00800104 	movi	r2,4
 8000dd8:	d0a6ef05 	stb	r2,-25668(gp)
            stateTimer = millis();
 8000ddc:	80003000 	call	8000300 <_Z6millisv>
 8000de0:	d0a6f115 	stw	r2,-25660(gp)
        }
        break;
 8000de4:	00004706 	br	8000f04 <_ZN9EtherCard16DhcpStateMachineEt+0x1c4>

    case DHCP_STATE_INIT:
        currentXid = millis();
 8000de8:	80003000 	call	8000300 <_Z6millisv>
 8000dec:	d0a6f015 	stw	r2,-25664(gp)
        memset(myip,0,IP_LEN); // force ip 0.0.0.0
 8000df0:	01800104 	movi	r6,4
 8000df4:	000b883a 	mov	r5,zero
 8000df8:	d126e6c4 	addi	r4,gp,-25701
 8000dfc:	8005c200 	call	8005c20 <memset>
        send_dhcp_message(NULL);
 8000e00:	0009883a 	mov	r4,zero
 8000e04:	80004380 	call	8000438 <_ZL17send_dhcp_messagePh>
        enableBroadcast(true); //Temporarily enable broadcasts
 8000e08:	01000044 	movi	r4,1
 8000e0c:	80021400 	call	8002140 <_ZN8ENC28J6015enableBroadcastEb>
        dhcpState = DHCP_STATE_SELECTING;
 8000e10:	00800044 	movi	r2,1
 8000e14:	d0a6ef05 	stb	r2,-25668(gp)
        stateTimer = millis();
 8000e18:	80003000 	call	8000300 <_Z6millisv>
 8000e1c:	d0a6f115 	stw	r2,-25660(gp)
        break;
 8000e20:	00003d06 	br	8000f18 <_ZN9EtherCard16DhcpStateMachineEt+0x1d8>

    case DHCP_STATE_SELECTING:
        if (dhcp_received_message_type(len, DHCP_OFFER)) {
 8000e24:	e0bfff0b 	ldhu	r2,-4(fp)
 8000e28:	01400084 	movi	r5,2
 8000e2c:	1009883a 	mov	r4,r2
 8000e30:	8000a0c0 	call	8000a0c <_ZL26dhcp_received_message_typeth>
 8000e34:	10803fcc 	andi	r2,r2,255
 8000e38:	10000b26 	beq	r2,zero,8000e68 <_ZN9EtherCard16DhcpStateMachineEt+0x128>
            uint8_t offeredip[IP_LEN];
            process_dhcp_offer(len, offeredip);
 8000e3c:	e0bfff0b 	ldhu	r2,-4(fp)
 8000e40:	e17ffe04 	addi	r5,fp,-8
 8000e44:	1009883a 	mov	r4,r2
 8000e48:	80007280 	call	8000728 <_ZL18process_dhcp_offertPh>
            send_dhcp_message(offeredip);
 8000e4c:	e13ffe04 	addi	r4,fp,-8
 8000e50:	80004380 	call	8000438 <_ZL17send_dhcp_messagePh>
            dhcpState = DHCP_STATE_REQUESTING;
 8000e54:	00800084 	movi	r2,2
 8000e58:	d0a6ef05 	stb	r2,-25668(gp)
            stateTimer = millis();
 8000e5c:	80003000 	call	8000300 <_Z6millisv>
 8000e60:	d0a6f115 	stw	r2,-25660(gp)
        } else {
            if (millis() - stateTimer > DHCP_REQUEST_TIMEOUT) {
                dhcpState = DHCP_STATE_INIT;
            }
        }
        break;
 8000e64:	00002906 	br	8000f0c <_ZN9EtherCard16DhcpStateMachineEt+0x1cc>
            process_dhcp_offer(len, offeredip);
            send_dhcp_message(offeredip);
            dhcpState = DHCP_STATE_REQUESTING;
            stateTimer = millis();
        } else {
            if (millis() - stateTimer > DHCP_REQUEST_TIMEOUT) {
 8000e68:	80003000 	call	8000300 <_Z6millisv>
 8000e6c:	1007883a 	mov	r3,r2
 8000e70:	d0a6f117 	ldw	r2,-25660(gp)
 8000e74:	1885c83a 	sub	r2,r3,r2
 8000e78:	1089c468 	cmpgeui	r2,r2,10001
 8000e7c:	10803fcc 	andi	r2,r2,255
 8000e80:	10002226 	beq	r2,zero,8000f0c <_ZN9EtherCard16DhcpStateMachineEt+0x1cc>
                dhcpState = DHCP_STATE_INIT;
 8000e84:	d026ef05 	stb	zero,-25668(gp)
            }
        }
        break;
 8000e88:	00002006 	br	8000f0c <_ZN9EtherCard16DhcpStateMachineEt+0x1cc>

    case DHCP_STATE_REQUESTING:
    case DHCP_STATE_RENEWING:
        if (dhcp_received_message_type(len, DHCP_ACK)) {
 8000e8c:	e0bfff0b 	ldhu	r2,-4(fp)
 8000e90:	01400144 	movi	r5,5
 8000e94:	1009883a 	mov	r4,r2
 8000e98:	8000a0c0 	call	8000a0c <_ZL26dhcp_received_message_typeth>
 8000e9c:	10803fcc 	andi	r2,r2,255
 8000ea0:	10000f26 	beq	r2,zero,8000ee0 <_ZN9EtherCard16DhcpStateMachineEt+0x1a0>
            disableBroadcast(true); //Disable broadcast after temporary enable
 8000ea4:	01000044 	movi	r4,1
 8000ea8:	80021a40 	call	80021a4 <_ZN8ENC28J6016disableBroadcastEb>
            process_dhcp_ack(len);
 8000eac:	e0bfff0b 	ldhu	r2,-4(fp)
 8000eb0:	1009883a 	mov	r4,r2
 8000eb4:	80007fc0 	call	80007fc <_ZL16process_dhcp_ackt>
            leaseStart = millis();
 8000eb8:	80003000 	call	8000300 <_Z6millisv>
 8000ebc:	d0a6f215 	stw	r2,-25656(gp)
            if (gwip[0] != 0) setGwIp(gwip); // why is this? because it initiates an arp request
 8000ec0:	d0a6e9c3 	ldbu	r2,-25689(gp)
 8000ec4:	10803fcc 	andi	r2,r2,255
 8000ec8:	10000226 	beq	r2,zero,8000ed4 <_ZN9EtherCard16DhcpStateMachineEt+0x194>
 8000ecc:	d126e9c4 	addi	r4,gp,-25689
 8000ed0:	8003cb40 	call	8003cb4 <_ZN9EtherCard7setGwIpEPKh>
            dhcpState = DHCP_STATE_BOUND;
 8000ed4:	008000c4 	movi	r2,3
 8000ed8:	d0a6ef05 	stb	r2,-25668(gp)
        } else {
            if (millis() - stateTimer > DHCP_REQUEST_TIMEOUT) {
                dhcpState = DHCP_STATE_INIT;
            }
        }
        break;
 8000edc:	00000d06 	br	8000f14 <_ZN9EtherCard16DhcpStateMachineEt+0x1d4>
            process_dhcp_ack(len);
            leaseStart = millis();
            if (gwip[0] != 0) setGwIp(gwip); // why is this? because it initiates an arp request
            dhcpState = DHCP_STATE_BOUND;
        } else {
            if (millis() - stateTimer > DHCP_REQUEST_TIMEOUT) {
 8000ee0:	80003000 	call	8000300 <_Z6millisv>
 8000ee4:	1007883a 	mov	r3,r2
 8000ee8:	d0a6f117 	ldw	r2,-25660(gp)
 8000eec:	1885c83a 	sub	r2,r3,r2
 8000ef0:	1089c468 	cmpgeui	r2,r2,10001
 8000ef4:	10803fcc 	andi	r2,r2,255
 8000ef8:	10000626 	beq	r2,zero,8000f14 <_ZN9EtherCard16DhcpStateMachineEt+0x1d4>
                dhcpState = DHCP_STATE_INIT;
 8000efc:	d026ef05 	stb	zero,-25668(gp)
            }
        }
        break;
 8000f00:	00000406 	br	8000f14 <_ZN9EtherCard16DhcpStateMachineEt+0x1d4>
        if (leaseTime != DHCP_INFINITE_LEASE && millis() - leaseStart >= leaseTime) {
            send_dhcp_message(myip);
            dhcpState = DHCP_STATE_RENEWING;
            stateTimer = millis();
        }
        break;
 8000f04:	0001883a 	nop
 8000f08:	00000306 	br	8000f18 <_ZN9EtherCard16DhcpStateMachineEt+0x1d8>
        } else {
            if (millis() - stateTimer > DHCP_REQUEST_TIMEOUT) {
                dhcpState = DHCP_STATE_INIT;
            }
        }
        break;
 8000f0c:	0001883a 	nop
 8000f10:	00000106 	br	8000f18 <_ZN9EtherCard16DhcpStateMachineEt+0x1d8>
        } else {
            if (millis() - stateTimer > DHCP_REQUEST_TIMEOUT) {
                dhcpState = DHCP_STATE_INIT;
            }
        }
        break;
 8000f14:	0001883a 	nop

    }
}
 8000f18:	0001883a 	nop
 8000f1c:	e037883a 	mov	sp,fp
 8000f20:	dfc00117 	ldw	ra,4(sp)
 8000f24:	df000017 	ldw	fp,0(sp)
 8000f28:	dec00204 	addi	sp,sp,8
 8000f2c:	f800283a 	ret

08000f30 <_ZL10dnsRequestPKcb>:
#define DNSCLIENT_SRC_PORT_H 0xE0

#define DNS_TYPE_A 1
#define DNS_CLASS_IN 1

static void dnsRequest (const char *hostname, bool fromRam) {
 8000f30:	defffa04 	addi	sp,sp,-24
 8000f34:	dfc00515 	stw	ra,20(sp)
 8000f38:	df000415 	stw	fp,16(sp)
 8000f3c:	df000404 	addi	fp,sp,16
 8000f40:	e13ffe15 	stw	r4,-8(fp)
 8000f44:	2805883a 	mov	r2,r5
 8000f48:	e0bfff05 	stb	r2,-4(fp)
    ++dnstid_l; // increment for next request, finally wrap
 8000f4c:	d0a6f783 	ldbu	r2,-25634(gp)
 8000f50:	10800044 	addi	r2,r2,1
 8000f54:	d0a6f785 	stb	r2,-25634(gp)
    if (ether.dnsip[0] == 0)
 8000f58:	d0a6ebc3 	ldbu	r2,-25681(gp)
 8000f5c:	10803fcc 	andi	r2,r2,255
 8000f60:	1000041e 	bne	r2,zero,8000f74 <_ZL10dnsRequestPKcb+0x44>
        memset(ether.dnsip, 8, IP_LEN); // use 8.8.8.8 Google DNS as default
 8000f64:	01800104 	movi	r6,4
 8000f68:	01400204 	movi	r5,8
 8000f6c:	d126ebc4 	addi	r4,gp,-25681
 8000f70:	8005c200 	call	8005c20 <memset>
    ether.udpPrepare((DNSCLIENT_SRC_PORT_H << 8) | dnstid_l, ether.dnsip, DNS_PORT);
 8000f74:	d0a6f783 	ldbu	r2,-25634(gp)
 8000f78:	10c03fcc 	andi	r3,r2,255
 8000f7c:	00b80004 	movi	r2,-8192
 8000f80:	1884b03a 	or	r2,r3,r2
 8000f84:	10bfffcc 	andi	r2,r2,65535
 8000f88:	01800d44 	movi	r6,53
 8000f8c:	d166ebc4 	addi	r5,gp,-25681
 8000f90:	1009883a 	mov	r4,r2
 8000f94:	80036800 	call	8003680 <_ZN9EtherCard10udpPrepareEtPKht>
    memset(gPB + UDP_DATA_P, 0, 12);
 8000f98:	008200b4 	movhi	r2,2050
 8000f9c:	10a34684 	addi	r2,r2,-29414
 8000fa0:	01800304 	movi	r6,12
 8000fa4:	000b883a 	mov	r5,zero
 8000fa8:	1009883a 	mov	r4,r2
 8000fac:	8005c200 	call	8005c20 <memset>

    byte *p = gPB + UDP_DATA_P + 12;
 8000fb0:	008200b4 	movhi	r2,2050
 8000fb4:	10a34984 	addi	r2,r2,-29402
 8000fb8:	e0bffc15 	stw	r2,-16(fp)
    char c;
    do {
        byte n = 0;
 8000fbc:	e03ffd05 	stb	zero,-12(fp)
        for(;;) {
//            c = fromRam ? *hostname : pgm_read_byte(hostname);
        	c = *hostname;
 8000fc0:	e0bffe17 	ldw	r2,-8(fp)
 8000fc4:	10800003 	ldbu	r2,0(r2)
 8000fc8:	e0bffd45 	stb	r2,-11(fp)
            ++hostname;
 8000fcc:	e0bffe17 	ldw	r2,-8(fp)
 8000fd0:	10800044 	addi	r2,r2,1
 8000fd4:	e0bffe15 	stw	r2,-8(fp)
            if (c == '.' || c == 0)
 8000fd8:	e0bffd47 	ldb	r2,-11(fp)
 8000fdc:	10800ba0 	cmpeqi	r2,r2,46
 8000fe0:	10000b1e 	bne	r2,zero,8001010 <_ZL10dnsRequestPKcb+0xe0>
 8000fe4:	e0bffd47 	ldb	r2,-11(fp)
 8000fe8:	10000926 	beq	r2,zero,8001010 <_ZL10dnsRequestPKcb+0xe0>
                break;
            p[++n] = c;
 8000fec:	e0bffd03 	ldbu	r2,-12(fp)
 8000ff0:	10800044 	addi	r2,r2,1
 8000ff4:	e0bffd05 	stb	r2,-12(fp)
 8000ff8:	e0bffd03 	ldbu	r2,-12(fp)
 8000ffc:	e0fffc17 	ldw	r3,-16(fp)
 8001000:	1885883a 	add	r2,r3,r2
 8001004:	e0fffd43 	ldbu	r3,-11(fp)
 8001008:	10c00005 	stb	r3,0(r2)

    byte *p = gPB + UDP_DATA_P + 12;
    char c;
    do {
        byte n = 0;
        for(;;) {
 800100c:	003fec06 	br	8000fc0 <_ZL10dnsRequestPKcb+0x90>
            ++hostname;
            if (c == '.' || c == 0)
                break;
            p[++n] = c;
        }
        *p++ = n;
 8001010:	e0bffc17 	ldw	r2,-16(fp)
 8001014:	10c00044 	addi	r3,r2,1
 8001018:	e0fffc15 	stw	r3,-16(fp)
 800101c:	e0fffd03 	ldbu	r3,-12(fp)
 8001020:	10c00005 	stb	r3,0(r2)
        p += n;
 8001024:	e0bffd03 	ldbu	r2,-12(fp)
 8001028:	e0fffc17 	ldw	r3,-16(fp)
 800102c:	1885883a 	add	r2,r3,r2
 8001030:	e0bffc15 	stw	r2,-16(fp)
    } while (c != 0);
 8001034:	e0bffd47 	ldb	r2,-11(fp)
 8001038:	10000126 	beq	r2,zero,8001040 <_ZL10dnsRequestPKcb+0x110>
    ether.udpPrepare((DNSCLIENT_SRC_PORT_H << 8) | dnstid_l, ether.dnsip, DNS_PORT);
    memset(gPB + UDP_DATA_P, 0, 12);

    byte *p = gPB + UDP_DATA_P + 12;
    char c;
    do {
 800103c:	003fdf06 	br	8000fbc <_ZL10dnsRequestPKcb+0x8c>
        }
        *p++ = n;
        p += n;
    } while (c != 0);

    *p++ = 0; // terminate with zero, means root domain.
 8001040:	e0bffc17 	ldw	r2,-16(fp)
 8001044:	10c00044 	addi	r3,r2,1
 8001048:	e0fffc15 	stw	r3,-16(fp)
 800104c:	10000005 	stb	zero,0(r2)
    *p++ = 0;
 8001050:	e0bffc17 	ldw	r2,-16(fp)
 8001054:	10c00044 	addi	r3,r2,1
 8001058:	e0fffc15 	stw	r3,-16(fp)
 800105c:	10000005 	stb	zero,0(r2)
    *p++ = DNS_TYPE_A;
 8001060:	e0bffc17 	ldw	r2,-16(fp)
 8001064:	10c00044 	addi	r3,r2,1
 8001068:	e0fffc15 	stw	r3,-16(fp)
 800106c:	00c00044 	movi	r3,1
 8001070:	10c00005 	stb	r3,0(r2)
    *p++ = 0;
 8001074:	e0bffc17 	ldw	r2,-16(fp)
 8001078:	10c00044 	addi	r3,r2,1
 800107c:	e0fffc15 	stw	r3,-16(fp)
 8001080:	10000005 	stb	zero,0(r2)
    *p++ = DNS_CLASS_IN;
 8001084:	e0bffc17 	ldw	r2,-16(fp)
 8001088:	10c00044 	addi	r3,r2,1
 800108c:	e0fffc15 	stw	r3,-16(fp)
 8001090:	00c00044 	movi	r3,1
 8001094:	10c00005 	stb	r3,0(r2)
    byte i = p - gPB - UDP_DATA_P;
 8001098:	e0bffc17 	ldw	r2,-16(fp)
 800109c:	1007883a 	mov	r3,r2
 80010a0:	008200b4 	movhi	r2,2050
 80010a4:	10a33c04 	addi	r2,r2,-29456
 80010a8:	1009883a 	mov	r4,r2
 80010ac:	00bff584 	movi	r2,-42
 80010b0:	1105c83a 	sub	r2,r2,r4
 80010b4:	1885883a 	add	r2,r3,r2
 80010b8:	e0bffd85 	stb	r2,-10(fp)
    gPB[UDP_DATA_P] = i;
 80010bc:	008200b4 	movhi	r2,2050
 80010c0:	10a33c04 	addi	r2,r2,-29456
 80010c4:	e0fffd83 	ldbu	r3,-10(fp)
 80010c8:	10c00a85 	stb	r3,42(r2)
    gPB[UDP_DATA_P+1] = dnstid_l;
 80010cc:	d0e6f783 	ldbu	r3,-25634(gp)
 80010d0:	008200b4 	movhi	r2,2050
 80010d4:	10a33c04 	addi	r2,r2,-29456
 80010d8:	10c00ac5 	stb	r3,43(r2)
    gPB[UDP_DATA_P+2] = 1; // flags, standard recursive query
 80010dc:	008200b4 	movhi	r2,2050
 80010e0:	10a33c04 	addi	r2,r2,-29456
 80010e4:	00c00044 	movi	r3,1
 80010e8:	10c00b05 	stb	r3,44(r2)
    gPB[UDP_DATA_P+5] = 1; // 1 question
 80010ec:	008200b4 	movhi	r2,2050
 80010f0:	10a33c04 	addi	r2,r2,-29456
 80010f4:	00c00044 	movi	r3,1
 80010f8:	10c00bc5 	stb	r3,47(r2)
    ether.udpTransmit(i);
 80010fc:	e0bffd83 	ldbu	r2,-10(fp)
 8001100:	1009883a 	mov	r4,r2
 8001104:	80038080 	call	8003808 <_ZN9EtherCard11udpTransmitEt>
}
 8001108:	0001883a 	nop
 800110c:	e037883a 	mov	sp,fp
 8001110:	dfc00117 	ldw	ra,4(sp)
 8001114:	df000017 	ldw	fp,0(sp)
 8001118:	dec00204 	addi	sp,sp,8
 800111c:	f800283a 	ret

08001120 <_ZL17checkForDnsAnswert>:

static bool checkForDnsAnswer (uint16_t plen) {
 8001120:	defffc04 	addi	sp,sp,-16
 8001124:	dfc00315 	stw	ra,12(sp)
 8001128:	df000215 	stw	fp,8(sp)
 800112c:	df000204 	addi	fp,sp,8
 8001130:	2005883a 	mov	r2,r4
 8001134:	e0bfff0d 	sth	r2,-4(fp)
    byte *p = gPB + UDP_DATA_P; //start of UDP payload
 8001138:	008200b4 	movhi	r2,2050
 800113c:	10a34684 	addi	r2,r2,-29414
 8001140:	e0bffe15 	stw	r2,-8(fp)
    if (plen < 70 || gPB[UDP_SRC_PORT_L_P] != DNS_PORT || //from DNS source port
 8001144:	e0bfff0b 	ldhu	r2,-4(fp)
 8001148:	108011b0 	cmpltui	r2,r2,70
 800114c:	10001a1e 	bne	r2,zero,80011b8 <_ZL17checkForDnsAnswert+0x98>
 8001150:	008200b4 	movhi	r2,2050
 8001154:	10a33c04 	addi	r2,r2,-29456
 8001158:	108008c3 	ldbu	r2,35(r2)
 800115c:	10803fcc 	andi	r2,r2,255
 8001160:	10800d58 	cmpnei	r2,r2,53
 8001164:	1000141e 	bne	r2,zero,80011b8 <_ZL17checkForDnsAnswert+0x98>
            gPB[UDP_DST_PORT_H_P] != DNSCLIENT_SRC_PORT_H || //response to same port as we sent from (MSB)
 8001168:	008200b4 	movhi	r2,2050
 800116c:	10a33c04 	addi	r2,r2,-29456
 8001170:	10800903 	ldbu	r2,36(r2)
    ether.udpTransmit(i);
}

static bool checkForDnsAnswer (uint16_t plen) {
    byte *p = gPB + UDP_DATA_P; //start of UDP payload
    if (plen < 70 || gPB[UDP_SRC_PORT_L_P] != DNS_PORT || //from DNS source port
 8001174:	10803fcc 	andi	r2,r2,255
 8001178:	10803818 	cmpnei	r2,r2,224
 800117c:	10000e1e 	bne	r2,zero,80011b8 <_ZL17checkForDnsAnswert+0x98>
            gPB[UDP_DST_PORT_H_P] != DNSCLIENT_SRC_PORT_H || //response to same port as we sent from (MSB)
            gPB[UDP_DST_PORT_L_P] != dnstid_l || //response to same port as we sent from (LSB)
 8001180:	008200b4 	movhi	r2,2050
 8001184:	10a33c04 	addi	r2,r2,-29456
 8001188:	10c00943 	ldbu	r3,37(r2)
 800118c:	d0a6f783 	ldbu	r2,-25634(gp)
}

static bool checkForDnsAnswer (uint16_t plen) {
    byte *p = gPB + UDP_DATA_P; //start of UDP payload
    if (plen < 70 || gPB[UDP_SRC_PORT_L_P] != DNS_PORT || //from DNS source port
            gPB[UDP_DST_PORT_H_P] != DNSCLIENT_SRC_PORT_H || //response to same port as we sent from (MSB)
 8001190:	18c03fcc 	andi	r3,r3,255
 8001194:	10803fcc 	andi	r2,r2,255
 8001198:	1880071e 	bne	r3,r2,80011b8 <_ZL17checkForDnsAnswert+0x98>
            gPB[UDP_DST_PORT_L_P] != dnstid_l || //response to same port as we sent from (LSB)
            p[1] != dnstid_l) //message id same as we sent
 800119c:	e0bffe17 	ldw	r2,-8(fp)
 80011a0:	10800044 	addi	r2,r2,1
 80011a4:	10c00003 	ldbu	r3,0(r2)
 80011a8:	d0a6f783 	ldbu	r2,-25634(gp)

static bool checkForDnsAnswer (uint16_t plen) {
    byte *p = gPB + UDP_DATA_P; //start of UDP payload
    if (plen < 70 || gPB[UDP_SRC_PORT_L_P] != DNS_PORT || //from DNS source port
            gPB[UDP_DST_PORT_H_P] != DNSCLIENT_SRC_PORT_H || //response to same port as we sent from (MSB)
            gPB[UDP_DST_PORT_L_P] != dnstid_l || //response to same port as we sent from (LSB)
 80011ac:	18c03fcc 	andi	r3,r3,255
 80011b0:	10803fcc 	andi	r2,r2,255
 80011b4:	18800226 	beq	r3,r2,80011c0 <_ZL17checkForDnsAnswert+0xa0>
            p[1] != dnstid_l) //message id same as we sent
        return false; //not our DNS response
 80011b8:	0005883a 	mov	r2,zero
 80011bc:	00004d06 	br	80012f4 <_ZL17checkForDnsAnswert+0x1d4>
    if((p[3] & 0x0F) != 0)
 80011c0:	e0bffe17 	ldw	r2,-8(fp)
 80011c4:	108000c4 	addi	r2,r2,3
 80011c8:	10800003 	ldbu	r2,0(r2)
 80011cc:	10803fcc 	andi	r2,r2,255
 80011d0:	108003cc 	andi	r2,r2,15
 80011d4:	10000226 	beq	r2,zero,80011e0 <_ZL17checkForDnsAnswert+0xc0>
        return true; //DNS response received with error
 80011d8:	00800044 	movi	r2,1
 80011dc:	00004506 	br	80012f4 <_ZL17checkForDnsAnswert+0x1d4>

    p += *p; // we encoded the query len into tid
 80011e0:	e0bffe17 	ldw	r2,-8(fp)
 80011e4:	10800003 	ldbu	r2,0(r2)
 80011e8:	10803fcc 	andi	r2,r2,255
 80011ec:	e0fffe17 	ldw	r3,-8(fp)
 80011f0:	1885883a 	add	r2,r3,r2
 80011f4:	e0bffe15 	stw	r2,-8(fp)
    for (;;) {
        if (*p & 0xC0)
 80011f8:	e0bffe17 	ldw	r2,-8(fp)
 80011fc:	10800003 	ldbu	r2,0(r2)
 8001200:	10803fcc 	andi	r2,r2,255
 8001204:	1080300c 	andi	r2,r2,192
 8001208:	10000426 	beq	r2,zero,800121c <_ZL17checkForDnsAnswert+0xfc>
            p += 2;
 800120c:	e0bffe17 	ldw	r2,-8(fp)
 8001210:	10800084 	addi	r2,r2,2
 8001214:	e0bffe15 	stw	r2,-8(fp)
 8001218:	00001206 	br	8001264 <_ZL17checkForDnsAnswert+0x144>
        else
            while (++p < gPB + plen) {
 800121c:	e0bffe17 	ldw	r2,-8(fp)
 8001220:	10800044 	addi	r2,r2,1
 8001224:	e0bffe15 	stw	r2,-8(fp)
 8001228:	e0ffff0b 	ldhu	r3,-4(fp)
 800122c:	008200b4 	movhi	r2,2050
 8001230:	10a33c04 	addi	r2,r2,-29456
 8001234:	1885883a 	add	r2,r3,r2
 8001238:	e0fffe17 	ldw	r3,-8(fp)
 800123c:	1885803a 	cmpltu	r2,r3,r2
 8001240:	10803fcc 	andi	r2,r2,255
 8001244:	10000726 	beq	r2,zero,8001264 <_ZL17checkForDnsAnswert+0x144>
                if (*p == 0) {
 8001248:	e0bffe17 	ldw	r2,-8(fp)
 800124c:	10800003 	ldbu	r2,0(r2)
 8001250:	10803fcc 	andi	r2,r2,255
 8001254:	103ff11e 	bne	r2,zero,800121c <_ZL17checkForDnsAnswert+0xfc>
                    ++p;
 8001258:	e0bffe17 	ldw	r2,-8(fp)
 800125c:	10800044 	addi	r2,r2,1
 8001260:	e0bffe15 	stw	r2,-8(fp)
                    break;
                }
            }
        if (p + 14 > gPB + plen)
 8001264:	e0bffe17 	ldw	r2,-8(fp)
 8001268:	10c00384 	addi	r3,r2,14
 800126c:	e13fff0b 	ldhu	r4,-4(fp)
 8001270:	008200b4 	movhi	r2,2050
 8001274:	10a33c04 	addi	r2,r2,-29456
 8001278:	2085883a 	add	r2,r4,r2
 800127c:	10c01b36 	bltu	r2,r3,80012ec <_ZL17checkForDnsAnswert+0x1cc>
            break;
        if (p[1] == DNS_TYPE_A && p[9] == 4) { // type "A" and IPv4
 8001280:	e0bffe17 	ldw	r2,-8(fp)
 8001284:	10800044 	addi	r2,r2,1
 8001288:	10800003 	ldbu	r2,0(r2)
 800128c:	10803fcc 	andi	r2,r2,255
 8001290:	10800058 	cmpnei	r2,r2,1
 8001294:	10000c1e 	bne	r2,zero,80012c8 <_ZL17checkForDnsAnswert+0x1a8>
 8001298:	e0bffe17 	ldw	r2,-8(fp)
 800129c:	10800244 	addi	r2,r2,9
 80012a0:	10800003 	ldbu	r2,0(r2)
 80012a4:	10803fcc 	andi	r2,r2,255
 80012a8:	10800118 	cmpnei	r2,r2,4
 80012ac:	1000061e 	bne	r2,zero,80012c8 <_ZL17checkForDnsAnswert+0x1a8>
            ether.copyIp(ether.hisip, p + 10);
 80012b0:	e0bffe17 	ldw	r2,-8(fp)
 80012b4:	10800284 	addi	r2,r2,10
 80012b8:	100b883a 	mov	r5,r2
 80012bc:	d126ecc4 	addi	r4,gp,-25677
 80012c0:	8004db00 	call	8004db0 <_ZN9EtherCard6copyIpEPhPKh>
            break;
 80012c4:	00000a06 	br	80012f0 <_ZL17checkForDnsAnswert+0x1d0>
        }
        p += p[9] + 10;
 80012c8:	e0bffe17 	ldw	r2,-8(fp)
 80012cc:	10800244 	addi	r2,r2,9
 80012d0:	10800003 	ldbu	r2,0(r2)
 80012d4:	10803fcc 	andi	r2,r2,255
 80012d8:	10800284 	addi	r2,r2,10
 80012dc:	e0fffe17 	ldw	r3,-8(fp)
 80012e0:	1885883a 	add	r2,r3,r2
 80012e4:	e0bffe15 	stw	r2,-8(fp)
        return false; //not our DNS response
    if((p[3] & 0x0F) != 0)
        return true; //DNS response received with error

    p += *p; // we encoded the query len into tid
    for (;;) {
 80012e8:	003fc306 	br	80011f8 <_ZL17checkForDnsAnswert+0xd8>
                    ++p;
                    break;
                }
            }
        if (p + 14 > gPB + plen)
            break;
 80012ec:	0001883a 	nop
            ether.copyIp(ether.hisip, p + 10);
            break;
        }
        p += p[9] + 10;
    }
    return false; //No error
 80012f0:	0005883a 	mov	r2,zero
}
 80012f4:	e037883a 	mov	sp,fp
 80012f8:	dfc00117 	ldw	ra,4(sp)
 80012fc:	df000017 	ldw	fp,0(sp)
 8001300:	dec00204 	addi	sp,sp,8
 8001304:	f800283a 	ret

08001308 <_ZN9EtherCard9dnsLookupEPKcb>:

bool EtherCard::dnsLookup (const char* name, bool fromRam) {
 8001308:	defffa04 	addi	sp,sp,-24
 800130c:	dfc00515 	stw	ra,20(sp)
 8001310:	df000415 	stw	fp,16(sp)
 8001314:	dc000315 	stw	r16,12(sp)
 8001318:	df000404 	addi	fp,sp,16
 800131c:	e13ffd15 	stw	r4,-12(fp)
 8001320:	2805883a 	mov	r2,r5
 8001324:	e0bffe05 	stb	r2,-8(fp)
    uint16_t start = time(NULL);
 8001328:	0009883a 	mov	r4,zero
 800132c:	80060fc0 	call	80060fc <time>
 8001330:	e0bffc0d 	sth	r2,-16(fp)

    while(!isLinkUp())
 8001334:	8001d700 	call	8001d70 <_ZN8ENC28J608isLinkUpEv>
 8001338:	1080005c 	xori	r2,r2,1
 800133c:	10803fcc 	andi	r2,r2,255
 8001340:	10001b26 	beq	r2,zero,80013b0 <_ZN9EtherCard9dnsLookupEPKcb+0xa8>
    {
    	printf("not islinkup");
 8001344:	01020074 	movhi	r4,2049
 8001348:	21145b04 	addi	r4,r4,20844
 800134c:	8005d780 	call	8005d78 <printf>
        if (difftime(time(NULL), start) >= 30000 / 1000) {
 8001350:	0009883a 	mov	r4,zero
 8001354:	80060fc0 	call	80060fc <time>
 8001358:	1007883a 	mov	r3,r2
 800135c:	e0bffc0b 	ldhu	r2,-16(fp)
 8001360:	100b883a 	mov	r5,r2
 8001364:	1809883a 	mov	r4,r3
 8001368:	8005a400 	call	8005a40 <difftime>
 800136c:	1011883a 	mov	r8,r2
 8001370:	1813883a 	mov	r9,r3
 8001374:	04000044 	movi	r16,1
 8001378:	000d883a 	mov	r6,zero
 800137c:	01d00fb4 	movhi	r7,16446
 8001380:	4009883a 	mov	r4,r8
 8001384:	480b883a 	mov	r5,r9
 8001388:	80050480 	call	8005048 <__gedf2>
 800138c:	1000010e 	bge	r2,zero,8001394 <_ZN9EtherCard9dnsLookupEPKcb+0x8c>
 8001390:	0021883a 	mov	r16,zero
 8001394:	80803fcc 	andi	r2,r16,255
 8001398:	103fe626 	beq	r2,zero,8001334 <_ZN9EtherCard9dnsLookupEPKcb+0x2c>
        	printf("not islinkup time");
 800139c:	01020074 	movhi	r4,2049
 80013a0:	21145f04 	addi	r4,r4,20860
 80013a4:	8005d780 	call	8005d78 <printf>
            return false; //timeout waiting for link
 80013a8:	0005883a 	mov	r2,zero
 80013ac:	00005d06 	br	8001524 <_ZN9EtherCard9dnsLookupEPKcb+0x21c>
        }
    }
    while(clientWaitingDns())
 80013b0:	8003bf80 	call	8003bf8 <_ZN9EtherCard16clientWaitingDnsEv>
 80013b4:	10803fcc 	andi	r2,r2,255
 80013b8:	1004c03a 	cmpne	r2,r2,zero
 80013bc:	10803fcc 	andi	r2,r2,255
 80013c0:	10001f26 	beq	r2,zero,8001440 <_ZN9EtherCard9dnsLookupEPKcb+0x138>
    {
    	printf("while waiting dns");
 80013c4:	01020074 	movhi	r4,2049
 80013c8:	21146404 	addi	r4,r4,20880
 80013cc:	8005d780 	call	8005d78 <printf>
        packetLoop(packetReceive());
 80013d0:	8001ea80 	call	8001ea8 <_ZN8ENC28J6013packetReceiveEv>
 80013d4:	10bfffcc 	andi	r2,r2,65535
 80013d8:	1009883a 	mov	r4,r2
 80013dc:	80045680 	call	8004568 <_ZN9EtherCard10packetLoopEt>
        if (difftime(time(NULL), start) >= 30000 / 1000) {
 80013e0:	0009883a 	mov	r4,zero
 80013e4:	80060fc0 	call	80060fc <time>
 80013e8:	1007883a 	mov	r3,r2
 80013ec:	e0bffc0b 	ldhu	r2,-16(fp)
 80013f0:	100b883a 	mov	r5,r2
 80013f4:	1809883a 	mov	r4,r3
 80013f8:	8005a400 	call	8005a40 <difftime>
 80013fc:	1011883a 	mov	r8,r2
 8001400:	1813883a 	mov	r9,r3
 8001404:	04000044 	movi	r16,1
 8001408:	000d883a 	mov	r6,zero
 800140c:	01d00fb4 	movhi	r7,16446
 8001410:	4009883a 	mov	r4,r8
 8001414:	480b883a 	mov	r5,r9
 8001418:	80050480 	call	8005048 <__gedf2>
 800141c:	1000010e 	bge	r2,zero,8001424 <_ZN9EtherCard9dnsLookupEPKcb+0x11c>
 8001420:	0021883a 	mov	r16,zero
 8001424:	80803fcc 	andi	r2,r16,255
 8001428:	103fe126 	beq	r2,zero,80013b0 <_ZN9EtherCard9dnsLookupEPKcb+0xa8>
        	printf("while waiting dns time");
 800142c:	01020074 	movhi	r4,2049
 8001430:	21146904 	addi	r4,r4,20900
 8001434:	8005d780 	call	8005d78 <printf>
            return false; //timeout waiting for gateway ARP
 8001438:	0005883a 	mov	r2,zero
 800143c:	00003906 	br	8001524 <_ZN9EtherCard9dnsLookupEPKcb+0x21c>
        }
    }

    memset(hisip, 0, IP_LEN);
 8001440:	01800104 	movi	r6,4
 8001444:	000b883a 	mov	r5,zero
 8001448:	d126ecc4 	addi	r4,gp,-25677
 800144c:	8005c200 	call	8005c20 <memset>
    dnsRequest(name, fromRam);
 8001450:	e0bffe03 	ldbu	r2,-8(fp)
 8001454:	100b883a 	mov	r5,r2
 8001458:	e13ffd17 	ldw	r4,-12(fp)
 800145c:	8000f300 	call	8000f30 <_ZL10dnsRequestPKcb>

    start = time(NULL);
 8001460:	0009883a 	mov	r4,zero
 8001464:	80060fc0 	call	80060fc <time>
 8001468:	e0bffc0d 	sth	r2,-16(fp)
    while (hisip[0] == 0) {
 800146c:	d0a6ecc3 	ldbu	r2,-25677(gp)
 8001470:	10803fcc 	andi	r2,r2,255
 8001474:	10002a1e 	bne	r2,zero,8001520 <_ZN9EtherCard9dnsLookupEPKcb+0x218>
        if (difftime(time(NULL), start) >= 30000 / 1000)
 8001478:	0009883a 	mov	r4,zero
 800147c:	80060fc0 	call	80060fc <time>
 8001480:	1007883a 	mov	r3,r2
 8001484:	e0bffc0b 	ldhu	r2,-16(fp)
 8001488:	100b883a 	mov	r5,r2
 800148c:	1809883a 	mov	r4,r3
 8001490:	8005a400 	call	8005a40 <difftime>
 8001494:	1011883a 	mov	r8,r2
 8001498:	1813883a 	mov	r9,r3
 800149c:	04000044 	movi	r16,1
 80014a0:	000d883a 	mov	r6,zero
 80014a4:	01d00fb4 	movhi	r7,16446
 80014a8:	4009883a 	mov	r4,r8
 80014ac:	480b883a 	mov	r5,r9
 80014b0:	80050480 	call	8005048 <__gedf2>
 80014b4:	1000010e 	bge	r2,zero,80014bc <_ZN9EtherCard9dnsLookupEPKcb+0x1b4>
 80014b8:	0021883a 	mov	r16,zero
 80014bc:	80803fcc 	andi	r2,r16,255
 80014c0:	10000226 	beq	r2,zero,80014cc <_ZN9EtherCard9dnsLookupEPKcb+0x1c4>
            return false; //timeout waiting for dns response
 80014c4:	0005883a 	mov	r2,zero
 80014c8:	00001606 	br	8001524 <_ZN9EtherCard9dnsLookupEPKcb+0x21c>
        uint16_t len = packetReceive();
 80014cc:	8001ea80 	call	8001ea8 <_ZN8ENC28J6013packetReceiveEv>
 80014d0:	e0bffc8d 	sth	r2,-14(fp)
        if (len > 0 && packetLoop(len) == 0) //packet not handled by tcp/ip packet loop
 80014d4:	e0bffc8b 	ldhu	r2,-14(fp)
 80014d8:	10000726 	beq	r2,zero,80014f8 <_ZN9EtherCard9dnsLookupEPKcb+0x1f0>
 80014dc:	e0bffc8b 	ldhu	r2,-14(fp)
 80014e0:	1009883a 	mov	r4,r2
 80014e4:	80045680 	call	8004568 <_ZN9EtherCard10packetLoopEt>
 80014e8:	10bfffcc 	andi	r2,r2,65535
 80014ec:	1000021e 	bne	r2,zero,80014f8 <_ZN9EtherCard9dnsLookupEPKcb+0x1f0>
 80014f0:	00800044 	movi	r2,1
 80014f4:	00000106 	br	80014fc <_ZN9EtherCard9dnsLookupEPKcb+0x1f4>
 80014f8:	0005883a 	mov	r2,zero
 80014fc:	10803fcc 	andi	r2,r2,255
 8001500:	103fda26 	beq	r2,zero,800146c <_ZN9EtherCard9dnsLookupEPKcb+0x164>
            if(checkForDnsAnswer(len))
 8001504:	e0bffc8b 	ldhu	r2,-14(fp)
 8001508:	1009883a 	mov	r4,r2
 800150c:	80011200 	call	8001120 <_ZL17checkForDnsAnswert>
 8001510:	10803fcc 	andi	r2,r2,255
 8001514:	103fd526 	beq	r2,zero,800146c <_ZN9EtherCard9dnsLookupEPKcb+0x164>
                return false; //DNS response received with error
 8001518:	0005883a 	mov	r2,zero
 800151c:	00000106 	br	8001524 <_ZN9EtherCard9dnsLookupEPKcb+0x21c>
    }

    return true;
 8001520:	00800044 	movi	r2,1
}
 8001524:	e6ffff04 	addi	sp,fp,-4
 8001528:	dfc00217 	ldw	ra,8(sp)
 800152c:	df000117 	ldw	fp,4(sp)
 8001530:	dc000017 	ldw	r16,0(sp)
 8001534:	dec00304 	addi	sp,sp,12
 8001538:	f800283a 	ret

0800153c <_Z5delayi>:
struct transmit_status_vector {
    uint8_t bytes[7];
};

void delay(int milli_seconds)
{
 800153c:	defffc04 	addi	sp,sp,-16
 8001540:	dfc00315 	stw	ra,12(sp)
 8001544:	df000215 	stw	fp,8(sp)
 8001548:	df000204 	addi	fp,sp,8
 800154c:	e13fff15 	stw	r4,-4(fp)
    // Converting time into milli_seconds
    // Storing start time
    clock_t start_time = clock();
 8001550:	80059f40 	call	80059f4 <clock>
 8001554:	e0bffe15 	stw	r2,-8(fp)

    // looping till required time is not achieved
    while (clock() < start_time + milli_seconds)
 8001558:	80059f40 	call	80059f4 <clock>
 800155c:	1009883a 	mov	r4,r2
 8001560:	e0ffff17 	ldw	r3,-4(fp)
 8001564:	e0bffe17 	ldw	r2,-8(fp)
 8001568:	1885883a 	add	r2,r3,r2
 800156c:	2085803a 	cmpltu	r2,r4,r2
 8001570:	10803fcc 	andi	r2,r2,255
 8001574:	10000126 	beq	r2,zero,800157c <_Z5delayi+0x40>
 8001578:	003ff706 	br	8001558 <_Z5delayi+0x1c>
        ;
}
 800157c:	0001883a 	nop
 8001580:	e037883a 	mov	sp,fp
 8001584:	dfc00117 	ldw	ra,4(sp)
 8001588:	df000017 	ldw	fp,0(sp)
 800158c:	dec00204 	addi	sp,sp,8
 8001590:	f800283a 	ret

08001594 <_Z7bitReadhh>:

// Returns nth bit of x
uint8_t bitRead(uint8_t x, uint8_t n) {
 8001594:	defffd04 	addi	sp,sp,-12
 8001598:	df000215 	stw	fp,8(sp)
 800159c:	df000204 	addi	fp,sp,8
 80015a0:	2007883a 	mov	r3,r4
 80015a4:	2805883a 	mov	r2,r5
 80015a8:	e0fffe05 	stb	r3,-8(fp)
 80015ac:	e0bfff05 	stb	r2,-4(fp)
    return (x >> n) & 0x1;
 80015b0:	e0fffe03 	ldbu	r3,-8(fp)
 80015b4:	e0bfff03 	ldbu	r2,-4(fp)
 80015b8:	1885d83a 	sra	r2,r3,r2
 80015bc:	1080004c 	andi	r2,r2,1
}
 80015c0:	e037883a 	mov	sp,fp
 80015c4:	df000017 	ldw	fp,0(sp)
 80015c8:	dec00104 	addi	sp,sp,4
 80015cc:	f800283a 	ret

080015d0 <_Z11disableChipv>:

// disableChip, enableChip -- pass in
// IRQ ID's after creating the SPI module for the ethernet controller
void disableChip() {
 80015d0:	deffff04 	addi	sp,sp,-4
 80015d4:	df000015 	stw	fp,0(sp)
 80015d8:	d839883a 	mov	fp,sp
  // TODO set slave select to high (it's active low)
//  alt_ic_irq_disable(SPI_0_IRQ_INTERRUPT_CONTROLLER_ID, SPI_0_IRQ);
}
 80015dc:	0001883a 	nop
 80015e0:	e037883a 	mov	sp,fp
 80015e4:	df000017 	ldw	fp,0(sp)
 80015e8:	dec00104 	addi	sp,sp,4
 80015ec:	f800283a 	ret

080015f0 <_Z10enableChipv>:

// disableChip, enableChip -- pass in
// IRQ ID's after creating the SPI module for the ethernet controller
void enableChip() {
 80015f0:	deffff04 	addi	sp,sp,-4
 80015f4:	df000015 	stw	fp,0(sp)
 80015f8:	d839883a 	mov	fp,sp
//  alt_ic_irq_enable(SPI_0_IRQ_INTERRUPT_CONTROLLER_ID, SPI_0_IRQ);
  // TODO set slave select to low (it's active low)
}
 80015fc:	0001883a 	nop
 8001600:	e037883a 	mov	sp,fp
 8001604:	df000017 	ldw	fp,0(sp)
 8001608:	dec00104 	addi	sp,sp,4
 800160c:	f800283a 	ret

08001610 <_Z12digitalWritehh>:


// status -- 1 (HIGH), 0 (LOW)
int digitalWrite(uint8_t whichPin, uint8_t status) {
 8001610:	defffd04 	addi	sp,sp,-12
 8001614:	df000215 	stw	fp,8(sp)
 8001618:	df000204 	addi	fp,sp,8
 800161c:	2007883a 	mov	r3,r4
 8001620:	2805883a 	mov	r2,r5
 8001624:	e0fffe05 	stb	r3,-8(fp)
 8001628:	e0bfff05 	stb	r2,-4(fp)
  if (status != LOW || status != HIGH) return -1;
 800162c:	e0bfff03 	ldbu	r2,-4(fp)
 8001630:	1000031e 	bne	r2,zero,8001640 <_Z12digitalWritehh+0x30>
 8001634:	e0bfff03 	ldbu	r2,-4(fp)
 8001638:	10800060 	cmpeqi	r2,r2,1
 800163c:	1000021e 	bne	r2,zero,8001648 <_Z12digitalWritehh+0x38>
 8001640:	00bfffc4 	movi	r2,-1
 8001644:	00001606 	br	80016a0 <_Z12digitalWritehh+0x90>
  if (status == HIGH) {
 8001648:	e0bfff03 	ldbu	r2,-4(fp)
 800164c:	10800058 	cmpnei	r2,r2,1
 8001650:	1000091e 	bne	r2,zero,8001678 <_Z12digitalWritehh+0x68>
    *GPIO_PIO |= 1 << whichPin;
 8001654:	d0a00217 	ldw	r2,-32760(gp)
 8001658:	d0e00217 	ldw	r3,-32760(gp)
 800165c:	18c00017 	ldw	r3,0(r3)
 8001660:	e13ffe03 	ldbu	r4,-8(fp)
 8001664:	01400044 	movi	r5,1
 8001668:	2908983a 	sll	r4,r5,r4
 800166c:	1906b03a 	or	r3,r3,r4
 8001670:	10c00015 	stw	r3,0(r2)
 8001674:	00000906 	br	800169c <_Z12digitalWritehh+0x8c>
  } else {// status == LOW
    *GPIO_PIO &= ~(1 << whichPin);
 8001678:	d0a00217 	ldw	r2,-32760(gp)
 800167c:	d0e00217 	ldw	r3,-32760(gp)
 8001680:	18c00017 	ldw	r3,0(r3)
 8001684:	e13ffe03 	ldbu	r4,-8(fp)
 8001688:	01400044 	movi	r5,1
 800168c:	2908983a 	sll	r4,r5,r4
 8001690:	0108303a 	nor	r4,zero,r4
 8001694:	1906703a 	and	r3,r3,r4
 8001698:	10c00015 	stw	r3,0(r2)
  }
  return 0;
 800169c:	0005883a 	mov	r2,zero
}
 80016a0:	e037883a 	mov	sp,fp
 80016a4:	df000017 	ldw	fp,0(sp)
 80016a8:	dec00104 	addi	sp,sp,4
 80016ac:	f800283a 	ret

080016b0 <_ZL7writeOphhh>:
//                            SPDR, // read into SPDR
//                            flags); // no flags
//    printf("spdr: (%d) %x", flags, SPDR[0]);
//}

static void writeOp (uint8_t op, uint8_t address, uint8_t data) {
 80016b0:	defff704 	addi	sp,sp,-36
 80016b4:	dfc00815 	stw	ra,32(sp)
 80016b8:	df000715 	stw	fp,28(sp)
 80016bc:	df000704 	addi	fp,sp,28
 80016c0:	2807883a 	mov	r3,r5
 80016c4:	3005883a 	mov	r2,r6
 80016c8:	e13ffd05 	stb	r4,-12(fp)
 80016cc:	e0fffe05 	stb	r3,-8(fp)
 80016d0:	e0bfff05 	stb	r2,-4(fp)
    uint8_t send_data[2];
    send_data[0] = op | (address & ADDR_MASK);
 80016d4:	e0bffe03 	ldbu	r2,-8(fp)
 80016d8:	108007cc 	andi	r2,r2,31
 80016dc:	1007883a 	mov	r3,r2
 80016e0:	e0bffd03 	ldbu	r2,-12(fp)
 80016e4:	1884b03a 	or	r2,r3,r2
 80016e8:	e0bffc05 	stb	r2,-16(fp)
    send_data[1] = data;
 80016ec:	e0bfff03 	ldbu	r2,-4(fp)
 80016f0:	e0bffc45 	stb	r2,-15(fp)
							ETHERNET_CHIP_SLAVE,
							2, // write one byte
							send_data, // write data
							0, // Read one byte
							0, // read into SPDR
							0); // no flags
 80016f4:	d8000215 	stw	zero,8(sp)
 80016f8:	d8000115 	stw	zero,4(sp)
 80016fc:	d8000015 	stw	zero,0(sp)
 8001700:	e1fffc04 	addi	r7,fp,-16
 8001704:	01800084 	movi	r6,2
 8001708:	000b883a 	mov	r5,zero
 800170c:	01000074 	movhi	r4,1
 8001710:	21042804 	addi	r4,r4,4256
 8001714:	8013d580 	call	8013d58 <alt_avalon_spi_command>
}
 8001718:	0001883a 	nop
 800171c:	e037883a 	mov	sp,fp
 8001720:	dfc00117 	ldw	ra,4(sp)
 8001724:	df000017 	ldw	fp,0(sp)
 8001728:	dec00204 	addi	sp,sp,8
 800172c:	f800283a 	ret

08001730 <_ZL6readOphh>:

static uint8_t readOp (uint8_t op, uint8_t address) {
 8001730:	defff804 	addi	sp,sp,-32
 8001734:	dfc00715 	stw	ra,28(sp)
 8001738:	df000615 	stw	fp,24(sp)
 800173c:	df000604 	addi	fp,sp,24
 8001740:	2007883a 	mov	r3,r4
 8001744:	2805883a 	mov	r2,r5
 8001748:	e0fffe05 	stb	r3,-8(fp)
 800174c:	e0bfff05 	stb	r2,-4(fp)
    uint8_t send_data[3];
    send_data[0] = op | (address & ADDR_MASK);
 8001750:	e0bfff03 	ldbu	r2,-4(fp)
 8001754:	108007cc 	andi	r2,r2,31
 8001758:	1007883a 	mov	r3,r2
 800175c:	e0bffe03 	ldbu	r2,-8(fp)
 8001760:	1884b03a 	or	r2,r3,r2
 8001764:	e0bffd05 	stb	r2,-12(fp)
    send_data[1] = 0x00;
 8001768:	e03ffd45 	stb	zero,-11(fp)
    uint8_t recieve_data[1];

    if (address & 0x80) {
 800176c:	e0bfff03 	ldbu	r2,-4(fp)
 8001770:	10803fcc 	andi	r2,r2,255
 8001774:	1080201c 	xori	r2,r2,128
 8001778:	10bfe004 	addi	r2,r2,-128
 800177c:	10000d0e 	bge	r2,zero,80017b4 <_ZL6readOphh+0x84>
    	send_data[2] = 0x00;
 8001780:	e03ffd85 	stb	zero,-10(fp)
    							ETHERNET_CHIP_SLAVE,
    							3, // write one byte
    							send_data, // write data
    							1, // Read one byte
								recieve_data, // read into SPDR
    							0); // no flags
 8001784:	d8000215 	stw	zero,8(sp)
 8001788:	e0bffdc4 	addi	r2,fp,-9
 800178c:	d8800115 	stw	r2,4(sp)
 8001790:	00800044 	movi	r2,1
 8001794:	d8800015 	stw	r2,0(sp)
 8001798:	e1fffd04 	addi	r7,fp,-12
 800179c:	018000c4 	movi	r6,3
 80017a0:	000b883a 	mov	r5,zero
 80017a4:	01000074 	movhi	r4,1
 80017a8:	21042804 	addi	r4,r4,4256
 80017ac:	8013d580 	call	8013d58 <alt_avalon_spi_command>
 80017b0:	00000b06 	br	80017e0 <_ZL6readOphh+0xb0>
    							ETHERNET_CHIP_SLAVE,
    							2, // write one byte
    							send_data, // write data
    							1, // Read one byte
								recieve_data, // read into SPDR
    							0); // no flags
 80017b4:	d8000215 	stw	zero,8(sp)
 80017b8:	e0bffdc4 	addi	r2,fp,-9
 80017bc:	d8800115 	stw	r2,4(sp)
 80017c0:	00800044 	movi	r2,1
 80017c4:	d8800015 	stw	r2,0(sp)
 80017c8:	e1fffd04 	addi	r7,fp,-12
 80017cc:	01800084 	movi	r6,2
 80017d0:	000b883a 	mov	r5,zero
 80017d4:	01000074 	movhi	r4,1
 80017d8:	21042804 	addi	r4,r4,4256
 80017dc:	8013d580 	call	8013d58 <alt_avalon_spi_command>
    }

    return recieve_data[0];
 80017e0:	e0bffdc3 	ldbu	r2,-9(fp)
}
 80017e4:	e037883a 	mov	sp,fp
 80017e8:	dfc00117 	ldw	ra,4(sp)
 80017ec:	df000017 	ldw	fp,0(sp)
 80017f0:	dec00204 	addi	sp,sp,8
 80017f4:	f800283a 	ret

080017f8 <_ZL7SetBankh>:

static void SetBank (uint8_t address) {
 80017f8:	defffd04 	addi	sp,sp,-12
 80017fc:	dfc00215 	stw	ra,8(sp)
 8001800:	df000115 	stw	fp,4(sp)
 8001804:	df000104 	addi	fp,sp,4
 8001808:	2005883a 	mov	r2,r4
 800180c:	e0bfff05 	stb	r2,-4(fp)
    if ((address & BANK_MASK) != Enc28j60Bank) {
 8001810:	e0bfff03 	ldbu	r2,-4(fp)
 8001814:	10c0180c 	andi	r3,r2,96
 8001818:	d0a6f903 	ldbu	r2,-25628(gp)
 800181c:	10803fcc 	andi	r2,r2,255
 8001820:	18800f26 	beq	r3,r2,8001860 <_ZL7SetBankh+0x68>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
 8001824:	018000c4 	movi	r6,3
 8001828:	014007c4 	movi	r5,31
 800182c:	01002804 	movi	r4,160
 8001830:	80016b00 	call	80016b0 <_ZL7writeOphhh>
        Enc28j60Bank = address & BANK_MASK;
 8001834:	e0bfff03 	ldbu	r2,-4(fp)
 8001838:	1080180c 	andi	r2,r2,96
 800183c:	d0a6f905 	stb	r2,-25628(gp)
//        printf("bank: %x\n", Enc28j60Bank);
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
 8001840:	d0a6f903 	ldbu	r2,-25628(gp)
 8001844:	10803fcc 	andi	r2,r2,255
 8001848:	1005d17a 	srai	r2,r2,5
 800184c:	10803fcc 	andi	r2,r2,255
 8001850:	100d883a 	mov	r6,r2
 8001854:	014007c4 	movi	r5,31
 8001858:	01002004 	movi	r4,128
 800185c:	80016b00 	call	80016b0 <_ZL7writeOphhh>
    }
}
 8001860:	0001883a 	nop
 8001864:	e037883a 	mov	sp,fp
 8001868:	dfc00117 	ldw	ra,4(sp)
 800186c:	df000017 	ldw	fp,0(sp)
 8001870:	dec00204 	addi	sp,sp,8
 8001874:	f800283a 	ret

08001878 <_ZL12writeRegBytehh>:

static void writeRegByte (uint8_t address, uint8_t data) {
 8001878:	defffc04 	addi	sp,sp,-16
 800187c:	dfc00315 	stw	ra,12(sp)
 8001880:	df000215 	stw	fp,8(sp)
 8001884:	df000204 	addi	fp,sp,8
 8001888:	2007883a 	mov	r3,r4
 800188c:	2805883a 	mov	r2,r5
 8001890:	e0fffe05 	stb	r3,-8(fp)
 8001894:	e0bfff05 	stb	r2,-4(fp)
    SetBank(address);
 8001898:	e0bffe03 	ldbu	r2,-8(fp)
 800189c:	1009883a 	mov	r4,r2
 80018a0:	80017f80 	call	80017f8 <_ZL7SetBankh>
    writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
 80018a4:	e0bffe03 	ldbu	r2,-8(fp)
 80018a8:	e0ffff03 	ldbu	r3,-4(fp)
 80018ac:	180d883a 	mov	r6,r3
 80018b0:	100b883a 	mov	r5,r2
 80018b4:	01001004 	movi	r4,64
 80018b8:	80016b00 	call	80016b0 <_ZL7writeOphhh>
}
 80018bc:	0001883a 	nop
 80018c0:	e037883a 	mov	sp,fp
 80018c4:	dfc00117 	ldw	ra,4(sp)
 80018c8:	df000017 	ldw	fp,0(sp)
 80018cc:	dec00204 	addi	sp,sp,8
 80018d0:	f800283a 	ret

080018d4 <_ZL8writeReght>:

static void writeReg(uint8_t address, uint16_t data) {
 80018d4:	defffc04 	addi	sp,sp,-16
 80018d8:	dfc00315 	stw	ra,12(sp)
 80018dc:	df000215 	stw	fp,8(sp)
 80018e0:	df000204 	addi	fp,sp,8
 80018e4:	2007883a 	mov	r3,r4
 80018e8:	2805883a 	mov	r2,r5
 80018ec:	e0fffe05 	stb	r3,-8(fp)
 80018f0:	e0bfff0d 	sth	r2,-4(fp)
    writeRegByte(address, data);
 80018f4:	e0bffe03 	ldbu	r2,-8(fp)
 80018f8:	e0ffff0b 	ldhu	r3,-4(fp)
 80018fc:	18c03fcc 	andi	r3,r3,255
 8001900:	180b883a 	mov	r5,r3
 8001904:	1009883a 	mov	r4,r2
 8001908:	80018780 	call	8001878 <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
 800190c:	e0bffe03 	ldbu	r2,-8(fp)
 8001910:	10800044 	addi	r2,r2,1
 8001914:	10c03fcc 	andi	r3,r2,255
 8001918:	e0bfff0b 	ldhu	r2,-4(fp)
 800191c:	1004d23a 	srli	r2,r2,8
 8001920:	10bfffcc 	andi	r2,r2,65535
 8001924:	100b883a 	mov	r5,r2
 8001928:	1809883a 	mov	r4,r3
 800192c:	80018780 	call	8001878 <_ZL12writeRegBytehh>
}
 8001930:	0001883a 	nop
 8001934:	e037883a 	mov	sp,fp
 8001938:	dfc00117 	ldw	ra,4(sp)
 800193c:	df000017 	ldw	fp,0(sp)
 8001940:	dec00204 	addi	sp,sp,8
 8001944:	f800283a 	ret

08001948 <_ZL11readRegByteh>:



static uint8_t readRegByte (uint8_t address) {
 8001948:	defffd04 	addi	sp,sp,-12
 800194c:	dfc00215 	stw	ra,8(sp)
 8001950:	df000115 	stw	fp,4(sp)
 8001954:	df000104 	addi	fp,sp,4
 8001958:	2005883a 	mov	r2,r4
 800195c:	e0bfff05 	stb	r2,-4(fp)
    SetBank(address);
 8001960:	e0bfff03 	ldbu	r2,-4(fp)
 8001964:	1009883a 	mov	r4,r2
 8001968:	80017f80 	call	80017f8 <_ZL7SetBankh>
    return readOp(ENC28J60_READ_CTRL_REG, address);
 800196c:	e0bfff03 	ldbu	r2,-4(fp)
 8001970:	100b883a 	mov	r5,r2
 8001974:	0009883a 	mov	r4,zero
 8001978:	80017300 	call	8001730 <_ZL6readOphh>
}
 800197c:	e037883a 	mov	sp,fp
 8001980:	dfc00117 	ldw	ra,4(sp)
 8001984:	df000017 	ldw	fp,0(sp)
 8001988:	dec00204 	addi	sp,sp,8
 800198c:	f800283a 	ret

08001990 <_ZL7readRegh>:

static uint16_t readReg(byte address) {
 8001990:	defffc04 	addi	sp,sp,-16
 8001994:	dfc00315 	stw	ra,12(sp)
 8001998:	df000215 	stw	fp,8(sp)
 800199c:	dc000115 	stw	r16,4(sp)
 80019a0:	df000204 	addi	fp,sp,8
 80019a4:	2005883a 	mov	r2,r4
 80019a8:	e0bffe05 	stb	r2,-8(fp)
    return readRegByte(address) + (readRegByte(address+1) << 8);
 80019ac:	e0bffe03 	ldbu	r2,-8(fp)
 80019b0:	1009883a 	mov	r4,r2
 80019b4:	80019480 	call	8001948 <_ZL11readRegByteh>
 80019b8:	14003fcc 	andi	r16,r2,255
 80019bc:	e0bffe03 	ldbu	r2,-8(fp)
 80019c0:	10800044 	addi	r2,r2,1
 80019c4:	10803fcc 	andi	r2,r2,255
 80019c8:	1009883a 	mov	r4,r2
 80019cc:	80019480 	call	8001948 <_ZL11readRegByteh>
 80019d0:	10803fcc 	andi	r2,r2,255
 80019d4:	1004923a 	slli	r2,r2,8
 80019d8:	8085883a 	add	r2,r16,r2
}
 80019dc:	e6ffff04 	addi	sp,fp,-4
 80019e0:	dfc00217 	ldw	ra,8(sp)
 80019e4:	df000117 	ldw	fp,4(sp)
 80019e8:	dc000017 	ldw	r16,0(sp)
 80019ec:	dec00304 	addi	sp,sp,12
 80019f0:	f800283a 	ret

080019f4 <_ZL8writePhyht>:


static void writePhy (uint8_t address, uint16_t data) {
 80019f4:	defffc04 	addi	sp,sp,-16
 80019f8:	dfc00315 	stw	ra,12(sp)
 80019fc:	df000215 	stw	fp,8(sp)
 8001a00:	df000204 	addi	fp,sp,8
 8001a04:	2007883a 	mov	r3,r4
 8001a08:	2805883a 	mov	r2,r5
 8001a0c:	e0fffe05 	stb	r3,-8(fp)
 8001a10:	e0bfff0d 	sth	r2,-4(fp)
    writeRegByte(MIREGADR, address);
 8001a14:	e0bffe03 	ldbu	r2,-8(fp)
 8001a18:	100b883a 	mov	r5,r2
 8001a1c:	01003504 	movi	r4,212
 8001a20:	80018780 	call	8001878 <_ZL12writeRegBytehh>
    writeReg(MIWR, data);
 8001a24:	e0bfff0b 	ldhu	r2,-4(fp)
 8001a28:	100b883a 	mov	r5,r2
 8001a2c:	01003584 	movi	r4,214
 8001a30:	80018d40 	call	80018d4 <_ZL8writeReght>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
 8001a34:	01003a84 	movi	r4,234
 8001a38:	80019480 	call	8001948 <_ZL11readRegByteh>
 8001a3c:	10803fcc 	andi	r2,r2,255
 8001a40:	1080004c 	andi	r2,r2,1
 8001a44:	1004c03a 	cmpne	r2,r2,zero
 8001a48:	10803fcc 	andi	r2,r2,255
 8001a4c:	10000126 	beq	r2,zero,8001a54 <_ZL8writePhyht+0x60>
 8001a50:	003ff806 	br	8001a34 <_ZL8writePhyht+0x40>
        ;
}
 8001a54:	0001883a 	nop
 8001a58:	e037883a 	mov	sp,fp
 8001a5c:	dfc00117 	ldw	ra,4(sp)
 8001a60:	df000017 	ldw	fp,0(sp)
 8001a64:	dec00204 	addi	sp,sp,8
 8001a68:	f800283a 	ret

08001a6c <_ZL11readPhyByteh>:

static uint16_t readPhyByte (uint8_t address) {
 8001a6c:	defffd04 	addi	sp,sp,-12
 8001a70:	dfc00215 	stw	ra,8(sp)
 8001a74:	df000115 	stw	fp,4(sp)
 8001a78:	df000104 	addi	fp,sp,4
 8001a7c:	2005883a 	mov	r2,r4
 8001a80:	e0bfff05 	stb	r2,-4(fp)
    writeRegByte(MIREGADR, address);
 8001a84:	e0bfff03 	ldbu	r2,-4(fp)
 8001a88:	100b883a 	mov	r5,r2
 8001a8c:	01003504 	movi	r4,212
 8001a90:	80018780 	call	8001878 <_ZL12writeRegBytehh>
    writeRegByte(MICMD, MICMD_MIIRD);
 8001a94:	01400044 	movi	r5,1
 8001a98:	01003484 	movi	r4,210
 8001a9c:	80018780 	call	8001878 <_ZL12writeRegBytehh>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
 8001aa0:	01003a84 	movi	r4,234
 8001aa4:	80019480 	call	8001948 <_ZL11readRegByteh>
 8001aa8:	10803fcc 	andi	r2,r2,255
 8001aac:	1080004c 	andi	r2,r2,1
 8001ab0:	1004c03a 	cmpne	r2,r2,zero
 8001ab4:	10803fcc 	andi	r2,r2,255
 8001ab8:	10000126 	beq	r2,zero,8001ac0 <_ZL11readPhyByteh+0x54>
 8001abc:	003ff806 	br	8001aa0 <_ZL11readPhyByteh+0x34>
        ;
    writeRegByte(MICMD, 0x00);
 8001ac0:	000b883a 	mov	r5,zero
 8001ac4:	01003484 	movi	r4,210
 8001ac8:	80018780 	call	8001878 <_ZL12writeRegBytehh>
    return readRegByte(MIRD+1);
 8001acc:	01003644 	movi	r4,217
 8001ad0:	80019480 	call	8001948 <_ZL11readRegByteh>
 8001ad4:	10803fcc 	andi	r2,r2,255
}
 8001ad8:	e037883a 	mov	sp,fp
 8001adc:	dfc00117 	ldw	ra,4(sp)
 8001ae0:	df000017 	ldw	fp,0(sp)
 8001ae4:	dec00204 	addi	sp,sp,8
 8001ae8:	f800283a 	ret

08001aec <_Z8getThingh>:

uint8_t getThing(unsigned char address) {
 8001aec:	defffd04 	addi	sp,sp,-12
 8001af0:	dfc00215 	stw	ra,8(sp)
 8001af4:	df000115 	stw	fp,4(sp)
 8001af8:	df000104 	addi	fp,sp,4
 8001afc:	2005883a 	mov	r2,r4
 8001b00:	e0bfff05 	stb	r2,-4(fp)
	return readRegByte(address);
 8001b04:	e0bfff03 	ldbu	r2,-4(fp)
 8001b08:	1009883a 	mov	r4,r2
 8001b0c:	80019480 	call	8001948 <_ZL11readRegByteh>
}
 8001b10:	e037883a 	mov	sp,fp
 8001b14:	dfc00117 	ldw	ra,4(sp)
 8001b18:	df000017 	ldw	fp,0(sp)
 8001b1c:	dec00204 	addi	sp,sp,8
 8001b20:	f800283a 	ret

08001b24 <_ZN8ENC28J6010initializeEtPKhh>:


uint8_t ENC28J60::initialize(uint16_t size, const uint8_t *macaddr,
                             uint8_t csPin) {
 8001b24:	defffa04 	addi	sp,sp,-24
 8001b28:	dfc00515 	stw	ra,20(sp)
 8001b2c:	df000415 	stw	fp,16(sp)
 8001b30:	df000404 	addi	fp,sp,16
 8001b34:	2007883a 	mov	r3,r4
 8001b38:	e17ffe15 	stw	r5,-8(fp)
 8001b3c:	3005883a 	mov	r2,r6
 8001b40:	e0fffd0d 	sth	r3,-12(fp)
 8001b44:	e0bfff05 	stb	r2,-4(fp)
  bufferSize = size;
 8001b48:	e0bffd0b 	ldhu	r2,-12(fp)
 8001b4c:	d0a6f80d 	sth	r2,-25632(gp)

  selectPin = csPin;
 8001b50:	e0bfff03 	ldbu	r2,-4(fp)
 8001b54:	d0a6f945 	stb	r2,-25627(gp)

  // if (bitRead(SPCR, SPE) == 0)
  //   initSPI();

  // pinMode(selectPin, OUTPUT);
  disableChip();
 8001b58:	80015d00 	call	80015d0 <_Z11disableChipv>

  writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
 8001b5c:	01803fc4 	movi	r6,255
 8001b60:	000b883a 	mov	r5,zero
 8001b64:	01003fc4 	movi	r4,255
 8001b68:	80016b00 	call	80016b0 <_ZL7writeOphhh>
  delay(2); // errata B7/2
 8001b6c:	01000084 	movi	r4,2
 8001b70:	800153c0 	call	800153c <_Z5delayi>
  printf("before while");
 8001b74:	01020074 	movhi	r4,2049
 8001b78:	21146f04 	addi	r4,r4,20924
 8001b7c:	8005d780 	call	8005d78 <printf>
  while (!(readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY))
 8001b80:	01400744 	movi	r5,29
 8001b84:	0009883a 	mov	r4,zero
 8001b88:	80017300 	call	8001730 <_ZL6readOphh>
 8001b8c:	10803fcc 	andi	r2,r2,255
 8001b90:	1080004c 	andi	r2,r2,1
 8001b94:	1005003a 	cmpeq	r2,r2,zero
 8001b98:	10803fcc 	andi	r2,r2,255
 8001b9c:	10000126 	beq	r2,zero,8001ba4 <_ZN8ENC28J6010initializeEtPKhh+0x80>
 8001ba0:	003ff706 	br	8001b80 <_ZN8ENC28J6010initializeEtPKhh+0x5c>
    ;
  printf("after while");
 8001ba4:	01020074 	movhi	r4,2049
 8001ba8:	21147304 	addi	r4,r4,20940
 8001bac:	8005d780 	call	8005d78 <printf>

  writeReg(ERXST, RXSTART_INIT);
 8001bb0:	000b883a 	mov	r5,zero
 8001bb4:	01000204 	movi	r4,8
 8001bb8:	80018d40 	call	80018d4 <_ZL8writeReght>
  writeReg(ERXRDPT, RXSTART_INIT);
 8001bbc:	000b883a 	mov	r5,zero
 8001bc0:	01000304 	movi	r4,12
 8001bc4:	80018d40 	call	80018d4 <_ZL8writeReght>
  writeReg(ERXND, RXSTOP_INIT);
 8001bc8:	0142ffc4 	movi	r5,3071
 8001bcc:	01000284 	movi	r4,10
 8001bd0:	80018d40 	call	80018d4 <_ZL8writeReght>
  writeReg(ETXST, TXSTART_INIT);
 8001bd4:	01430004 	movi	r5,3072
 8001bd8:	01000104 	movi	r4,4
 8001bdc:	80018d40 	call	80018d4 <_ZL8writeReght>
  writeReg(ETXND, TXSTOP_INIT);
 8001be0:	01447fc4 	movi	r5,4607
 8001be4:	01000184 	movi	r4,6
 8001be8:	80018d40 	call	80018d4 <_ZL8writeReght>

  // Stretch pulses for LED, LED_A=Link, LED_B=activity
  writePhy(PHLCON, 0x476);
 8001bec:	01411d84 	movi	r5,1142
 8001bf0:	01000504 	movi	r4,20
 8001bf4:	80019f40 	call	80019f4 <_ZL8writePhyht>

  writeRegByte(ERXFCON,
               ERXFCON_UCEN | ERXFCON_CRCEN | ERXFCON_PMEN | ERXFCON_BCEN);
 8001bf8:	01402c44 	movi	r5,177
 8001bfc:	01000e04 	movi	r4,56
 8001c00:	80018780 	call	8001878 <_ZL12writeRegBytehh>
  writeReg(EPMM0, 0x303f);
 8001c04:	014c0fc4 	movi	r5,12351
 8001c08:	01000a04 	movi	r4,40
 8001c0c:	80018d40 	call	80018d4 <_ZL8writeReght>
  writeReg(EPMCS, 0xf7f9);
 8001c10:	017dfe54 	movui	r5,63481
 8001c14:	01000c04 	movi	r4,48
 8001c18:	80018d40 	call	80018d4 <_ZL8writeReght>
  writeRegByte(MACON1, MACON1_MARXEN);
 8001c1c:	01400044 	movi	r5,1
 8001c20:	01003004 	movi	r4,192
 8001c24:	80018780 	call	8001878 <_ZL12writeRegBytehh>
  writeOp(ENC28J60_BIT_FIELD_SET, MACON3,
          MACON3_PADCFG0 | MACON3_TXCRCEN | MACON3_FRMLNEN);
 8001c28:	01800c84 	movi	r6,50
 8001c2c:	01403084 	movi	r5,194
 8001c30:	01002004 	movi	r4,128
 8001c34:	80016b00 	call	80016b0 <_ZL7writeOphhh>
  writeReg(MAIPG, 0x0C12);
 8001c38:	01430484 	movi	r5,3090
 8001c3c:	01003184 	movi	r4,198
 8001c40:	80018d40 	call	80018d4 <_ZL8writeReght>
  writeRegByte(MABBIPG, 0x12);
 8001c44:	01400484 	movi	r5,18
 8001c48:	01003104 	movi	r4,196
 8001c4c:	80018780 	call	8001878 <_ZL12writeRegBytehh>
  writeReg(MAMXFL, MAX_FRAMELEN);
 8001c50:	01417704 	movi	r5,1500
 8001c54:	01003284 	movi	r4,202
 8001c58:	80018d40 	call	80018d4 <_ZL8writeReght>
  writeRegByte(MAADR5, macaddr[0]);
 8001c5c:	e0bffe17 	ldw	r2,-8(fp)
 8001c60:	10800003 	ldbu	r2,0(r2)
 8001c64:	10803fcc 	andi	r2,r2,255
 8001c68:	100b883a 	mov	r5,r2
 8001c6c:	01003904 	movi	r4,228
 8001c70:	80018780 	call	8001878 <_ZL12writeRegBytehh>
  writeRegByte(MAADR4, macaddr[1]);
 8001c74:	e0bffe17 	ldw	r2,-8(fp)
 8001c78:	10800044 	addi	r2,r2,1
 8001c7c:	10800003 	ldbu	r2,0(r2)
 8001c80:	10803fcc 	andi	r2,r2,255
 8001c84:	100b883a 	mov	r5,r2
 8001c88:	01003944 	movi	r4,229
 8001c8c:	80018780 	call	8001878 <_ZL12writeRegBytehh>
  writeRegByte(MAADR3, macaddr[2]);
 8001c90:	e0bffe17 	ldw	r2,-8(fp)
 8001c94:	10800084 	addi	r2,r2,2
 8001c98:	10800003 	ldbu	r2,0(r2)
 8001c9c:	10803fcc 	andi	r2,r2,255
 8001ca0:	100b883a 	mov	r5,r2
 8001ca4:	01003884 	movi	r4,226
 8001ca8:	80018780 	call	8001878 <_ZL12writeRegBytehh>
  writeRegByte(MAADR2, macaddr[3]);
 8001cac:	e0bffe17 	ldw	r2,-8(fp)
 8001cb0:	108000c4 	addi	r2,r2,3
 8001cb4:	10800003 	ldbu	r2,0(r2)
 8001cb8:	10803fcc 	andi	r2,r2,255
 8001cbc:	100b883a 	mov	r5,r2
 8001cc0:	010038c4 	movi	r4,227
 8001cc4:	80018780 	call	8001878 <_ZL12writeRegBytehh>
  writeRegByte(MAADR1, macaddr[4]);
 8001cc8:	e0bffe17 	ldw	r2,-8(fp)
 8001ccc:	10800104 	addi	r2,r2,4
 8001cd0:	10800003 	ldbu	r2,0(r2)
 8001cd4:	10803fcc 	andi	r2,r2,255
 8001cd8:	100b883a 	mov	r5,r2
 8001cdc:	01003804 	movi	r4,224
 8001ce0:	80018780 	call	8001878 <_ZL12writeRegBytehh>
  writeRegByte(MAADR0, macaddr[5]);
 8001ce4:	e0bffe17 	ldw	r2,-8(fp)
 8001ce8:	10800144 	addi	r2,r2,5
 8001cec:	10800003 	ldbu	r2,0(r2)
 8001cf0:	10803fcc 	andi	r2,r2,255
 8001cf4:	100b883a 	mov	r5,r2
 8001cf8:	01003844 	movi	r4,225
 8001cfc:	80018780 	call	8001878 <_ZL12writeRegBytehh>
  writePhy(PHCON2, PHCON2_HDLDIS);
 8001d00:	01404004 	movi	r5,256
 8001d04:	01000404 	movi	r4,16
 8001d08:	80019f40 	call	80019f4 <_ZL8writePhyht>
  SetBank(ECON1);
 8001d0c:	010007c4 	movi	r4,31
 8001d10:	80017f80 	call	80017f8 <_ZL7SetBankh>
  writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE | EIE_PKTIE);
 8001d14:	01803004 	movi	r6,192
 8001d18:	014006c4 	movi	r5,27
 8001d1c:	01002004 	movi	r4,128
 8001d20:	80016b00 	call	80016b0 <_ZL7writeOphhh>
  writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
 8001d24:	01800104 	movi	r6,4
 8001d28:	014007c4 	movi	r5,31
 8001d2c:	01002004 	movi	r4,128
 8001d30:	80016b00 	call	80016b0 <_ZL7writeOphhh>

  uint8_t rev = readRegByte(EREVID);
 8001d34:	01001c84 	movi	r4,114
 8001d38:	80019480 	call	8001948 <_ZL11readRegByteh>
 8001d3c:	e0bffc05 	stb	r2,-16(fp)
  // microchip forgot to step the number on the silicon when they
  // released the revision B7. 6 is now rev B7. We still have
  // to see what they do when they release B8. At the moment
  // there is no B8 out yet
  if (rev > 5)
 8001d40:	e0bffc03 	ldbu	r2,-16(fp)
 8001d44:	108001b0 	cmpltui	r2,r2,6
 8001d48:	1000031e 	bne	r2,zero,8001d58 <_ZN8ENC28J6010initializeEtPKhh+0x234>
    ++rev;
 8001d4c:	e0bffc03 	ldbu	r2,-16(fp)
 8001d50:	10800044 	addi	r2,r2,1
 8001d54:	e0bffc05 	stb	r2,-16(fp)
  return rev;
 8001d58:	e0bffc03 	ldbu	r2,-16(fp)
}
 8001d5c:	e037883a 	mov	sp,fp
 8001d60:	dfc00117 	ldw	ra,4(sp)
 8001d64:	df000017 	ldw	fp,0(sp)
 8001d68:	dec00204 	addi	sp,sp,8
 8001d6c:	f800283a 	ret

08001d70 <_ZN8ENC28J608isLinkUpEv>:

bool ENC28J60::isLinkUp() {
 8001d70:	defffe04 	addi	sp,sp,-8
 8001d74:	dfc00115 	stw	ra,4(sp)
 8001d78:	df000015 	stw	fp,0(sp)
 8001d7c:	d839883a 	mov	fp,sp
    return (readPhyByte(PHSTAT2) >> 2) & 1;
 8001d80:	01000444 	movi	r4,17
 8001d84:	8001a6c0 	call	8001a6c <_ZL11readPhyByteh>
 8001d88:	10bfffcc 	andi	r2,r2,65535
 8001d8c:	1080010c 	andi	r2,r2,4
 8001d90:	1004c03a 	cmpne	r2,r2,zero
}
 8001d94:	e037883a 	mov	sp,fp
 8001d98:	dfc00117 	ldw	ra,4(sp)
 8001d9c:	df000017 	ldw	fp,0(sp)
 8001da0:	dec00204 	addi	sp,sp,8
 8001da4:	f800283a 	ret

08001da8 <_ZL7readBuftPh>:


static void readBuf(uint16_t len, byte* data) {
 8001da8:	defff804 	addi	sp,sp,-32
 8001dac:	dfc00715 	stw	ra,28(sp)
 8001db0:	df000615 	stw	fp,24(sp)
 8001db4:	df000604 	addi	fp,sp,24
 8001db8:	2005883a 	mov	r2,r4
 8001dbc:	e17fff15 	stw	r5,-4(fp)
 8001dc0:	e0bffe0d 	sth	r2,-8(fp)
    if (len != 0) {
 8001dc4:	e0bffe0b 	ldhu	r2,-8(fp)
 8001dc8:	10000d26 	beq	r2,zero,8001e00 <_ZL7readBuftPh+0x58>
    	uint8_t send_data[1];
    	send_data[0] = ENC28J60_READ_BUF_MEM;
 8001dcc:	00800e84 	movi	r2,58
 8001dd0:	e0bffd05 	stb	r2,-12(fp)
    	alt_avalon_spi_command( SPI_0_BASE,
 8001dd4:	e0bffe0b 	ldhu	r2,-8(fp)
    							ETHERNET_CHIP_SLAVE,
    							1, //
								send_data, // write data
    							len, // Read 8 bytes
    							data, // read into SPDR
    							0); // no flags
 8001dd8:	d8000215 	stw	zero,8(sp)
 8001ddc:	e0ffff17 	ldw	r3,-4(fp)
 8001de0:	d8c00115 	stw	r3,4(sp)
 8001de4:	d8800015 	stw	r2,0(sp)
 8001de8:	e1fffd04 	addi	r7,fp,-12
 8001dec:	01800044 	movi	r6,1
 8001df0:	000b883a 	mov	r5,zero
 8001df4:	01000074 	movhi	r4,1
 8001df8:	21042804 	addi	r4,r4,4256
 8001dfc:	8013d580 	call	8013d58 <alt_avalon_spi_command>
    }
}
 8001e00:	0001883a 	nop
 8001e04:	e037883a 	mov	sp,fp
 8001e08:	dfc00117 	ldw	ra,4(sp)
 8001e0c:	df000017 	ldw	fp,0(sp)
 8001e10:	dec00204 	addi	sp,sp,8
 8001e14:	f800283a 	ret

08001e18 <_ZL8writeBuftPKh>:

// TODO
static void writeBuf(uint16_t len, const byte* data) {
 8001e18:	defff804 	addi	sp,sp,-32
 8001e1c:	dfc00715 	stw	ra,28(sp)
 8001e20:	df000615 	stw	fp,24(sp)
 8001e24:	df000604 	addi	fp,sp,24
 8001e28:	2005883a 	mov	r2,r4
 8001e2c:	e17fff15 	stw	r5,-4(fp)
 8001e30:	e0bffe0d 	sth	r2,-8(fp)
    if (len != 0) {
 8001e34:	e0bffe0b 	ldhu	r2,-8(fp)
 8001e38:	10001526 	beq	r2,zero,8001e90 <_ZL8writeBuftPKh+0x78>
    	uint8_t send_data[1];
    	send_data[0] = ENC28J60_WRITE_BUF_MEM;
 8001e3c:	00801e84 	movi	r2,122
 8001e40:	e0bffd05 	stb	r2,-12(fp)
    							ETHERNET_CHIP_SLAVE,
    							1, //
								send_data, // write data
    							0, // Read 8 bytes
    							0, // read into SPDR
    							0); // no flags
 8001e44:	d8000215 	stw	zero,8(sp)
 8001e48:	d8000115 	stw	zero,4(sp)
 8001e4c:	d8000015 	stw	zero,0(sp)
 8001e50:	e1fffd04 	addi	r7,fp,-12
 8001e54:	01800044 	movi	r6,1
 8001e58:	000b883a 	mov	r5,zero
 8001e5c:	01000074 	movhi	r4,1
 8001e60:	21042804 	addi	r4,r4,4256
 8001e64:	8013d580 	call	8013d58 <alt_avalon_spi_command>
    	alt_avalon_spi_command( SPI_0_BASE,
 8001e68:	e0bffe0b 	ldhu	r2,-8(fp)
    							ETHERNET_CHIP_SLAVE,
								len, //
								data, // write data
    							0, // Read 8 bytes
    							0, // read into SPDR
    							0); // no flags
 8001e6c:	d8000215 	stw	zero,8(sp)
 8001e70:	d8000115 	stw	zero,4(sp)
 8001e74:	d8000015 	stw	zero,0(sp)
 8001e78:	e1ffff17 	ldw	r7,-4(fp)
 8001e7c:	100d883a 	mov	r6,r2
 8001e80:	000b883a 	mov	r5,zero
 8001e84:	01000074 	movhi	r4,1
 8001e88:	21042804 	addi	r4,r4,4256
 8001e8c:	8013d580 	call	8013d58 <alt_avalon_spi_command>

    }
}
 8001e90:	0001883a 	nop
 8001e94:	e037883a 	mov	sp,fp
 8001e98:	dfc00117 	ldw	ra,4(sp)
 8001e9c:	df000017 	ldw	fp,0(sp)
 8001ea0:	dec00204 	addi	sp,sp,8
 8001ea4:	f800283a 	ret

08001ea8 <_ZN8ENC28J6013packetReceiveEv>:

uint16_t ENC28J60::packetReceive() {
 8001ea8:	defffc04 	addi	sp,sp,-16
 8001eac:	dfc00315 	stw	ra,12(sp)
 8001eb0:	df000215 	stw	fp,8(sp)
 8001eb4:	df000204 	addi	fp,sp,8
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;
 8001eb8:	e03ffe0d 	sth	zero,-8(fp)

    if (unreleasedPacket) {
 8001ebc:	d0a6f983 	ldbu	r2,-25626(gp)
 8001ec0:	10803fcc 	andi	r2,r2,255
 8001ec4:	10000e26 	beq	r2,zero,8001f00 <_ZN8ENC28J6013packetReceiveEv+0x58>
        if (gNextPacketPtr == 0)
 8001ec8:	d0a6fa0b 	ldhu	r2,-25624(gp)
 8001ecc:	10bfffcc 	andi	r2,r2,65535
 8001ed0:	1000041e 	bne	r2,zero,8001ee4 <_ZN8ENC28J6013packetReceiveEv+0x3c>
            writeReg(ERXRDPT, RXSTOP_INIT);
 8001ed4:	0142ffc4 	movi	r5,3071
 8001ed8:	01000304 	movi	r4,12
 8001edc:	80018d40 	call	80018d4 <_ZL8writeReght>
 8001ee0:	00000606 	br	8001efc <_ZN8ENC28J6013packetReceiveEv+0x54>
        else
            writeReg(ERXRDPT, gNextPacketPtr - 1);
 8001ee4:	d0a6fa0b 	ldhu	r2,-25624(gp)
 8001ee8:	10bfffc4 	addi	r2,r2,-1
 8001eec:	10bfffcc 	andi	r2,r2,65535
 8001ef0:	100b883a 	mov	r5,r2
 8001ef4:	01000304 	movi	r4,12
 8001ef8:	80018d40 	call	80018d4 <_ZL8writeReght>
        unreleasedPacket = false;
 8001efc:	d026f985 	stb	zero,-25626(gp)
    }

    if (readRegByte(EPKTCNT) > 0) {
 8001f00:	01000e44 	movi	r4,57
 8001f04:	80019480 	call	8001948 <_ZL11readRegByteh>
 8001f08:	10803fcc 	andi	r2,r2,255
 8001f0c:	1004c03a 	cmpne	r2,r2,zero
 8001f10:	10803fcc 	andi	r2,r2,255
 8001f14:	10002e26 	beq	r2,zero,8001fd0 <_ZN8ENC28J6013packetReceiveEv+0x128>
        writeReg(ERDPT, gNextPacketPtr);
 8001f18:	d0a6fa0b 	ldhu	r2,-25624(gp)
 8001f1c:	10bfffcc 	andi	r2,r2,65535
 8001f20:	100b883a 	mov	r5,r2
 8001f24:	0009883a 	mov	r4,zero
 8001f28:	80018d40 	call	80018d4 <_ZL8writeReght>
            uint16_t nextPacket;
            uint16_t byteCount;
            uint16_t status;
        } header;

        readBuf(sizeof header, (byte*) &header);
 8001f2c:	00800184 	movi	r2,6
 8001f30:	10bfffcc 	andi	r2,r2,65535
 8001f34:	e0fffe84 	addi	r3,fp,-6
 8001f38:	180b883a 	mov	r5,r3
 8001f3c:	1009883a 	mov	r4,r2
 8001f40:	8001da80 	call	8001da8 <_ZL7readBuftPh>

        gNextPacketPtr  = header.nextPacket;
 8001f44:	e0bffe8b 	ldhu	r2,-6(fp)
 8001f48:	d0a6fa0d 	sth	r2,-25624(gp)
        len = header.byteCount - 4; //remove the CRC count
 8001f4c:	e0bfff0b 	ldhu	r2,-4(fp)
 8001f50:	10bfff04 	addi	r2,r2,-4
 8001f54:	e0bffe0d 	sth	r2,-8(fp)
        if (len>bufferSize-1)
 8001f58:	e0bffe0b 	ldhu	r2,-8(fp)
 8001f5c:	d0e6f80b 	ldhu	r3,-25632(gp)
 8001f60:	18ffffcc 	andi	r3,r3,65535
 8001f64:	18ffffc4 	addi	r3,r3,-1
 8001f68:	1880030e 	bge	r3,r2,8001f78 <_ZN8ENC28J6013packetReceiveEv+0xd0>
            len=bufferSize-1;
 8001f6c:	d0a6f80b 	ldhu	r2,-25632(gp)
 8001f70:	10bfffc4 	addi	r2,r2,-1
 8001f74:	e0bffe0d 	sth	r2,-8(fp)
        if ((header.status & 0x80)==0)
 8001f78:	e0bfff8b 	ldhu	r2,-2(fp)
 8001f7c:	10bfffcc 	andi	r2,r2,65535
 8001f80:	1080200c 	andi	r2,r2,128
 8001f84:	1000021e 	bne	r2,zero,8001f90 <_ZN8ENC28J6013packetReceiveEv+0xe8>
            len = 0;
 8001f88:	e03ffe0d 	sth	zero,-8(fp)
 8001f8c:	00000506 	br	8001fa4 <_ZN8ENC28J6013packetReceiveEv+0xfc>
        else
            readBuf(len, buffer);
 8001f90:	e0bffe0b 	ldhu	r2,-8(fp)
 8001f94:	014200b4 	movhi	r5,2050
 8001f98:	29633c04 	addi	r5,r5,-29456
 8001f9c:	1009883a 	mov	r4,r2
 8001fa0:	8001da80 	call	8001da8 <_ZL7readBuftPh>
        buffer[len] = 0;
 8001fa4:	e0fffe0b 	ldhu	r3,-8(fp)
 8001fa8:	008200b4 	movhi	r2,2050
 8001fac:	10a33c04 	addi	r2,r2,-29456
 8001fb0:	10c5883a 	add	r2,r2,r3
 8001fb4:	10000005 	stb	zero,0(r2)
        unreleasedPacket = true;
 8001fb8:	00800044 	movi	r2,1
 8001fbc:	d0a6f985 	stb	r2,-25626(gp)

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
 8001fc0:	01801004 	movi	r6,64
 8001fc4:	01400784 	movi	r5,30
 8001fc8:	01002004 	movi	r4,128
 8001fcc:	80016b00 	call	80016b0 <_ZL7writeOphhh>
    }
    return len;
 8001fd0:	e0bffe0b 	ldhu	r2,-8(fp)
}
 8001fd4:	e037883a 	mov	sp,fp
 8001fd8:	dfc00117 	ldw	ra,4(sp)
 8001fdc:	df000017 	ldw	fp,0(sp)
 8001fe0:	dec00204 	addi	sp,sp,8
 8001fe4:	f800283a 	ret

08001fe8 <_ZN8ENC28J6010packetSendEt>:


void ENC28J60::packetSend(uint16_t len) {
 8001fe8:	defffa04 	addi	sp,sp,-24
 8001fec:	dfc00515 	stw	ra,20(sp)
 8001ff0:	df000415 	stw	fp,16(sp)
 8001ff4:	df000404 	addi	fp,sp,16
 8001ff8:	2005883a 	mov	r2,r4
 8001ffc:	e0bfff0d 	sth	r2,-4(fp)
    byte retry = 0;
 8002000:	e03ffc85 	stb	zero,-14(fp)
        // the Microchip TCP/IP stack implementation used to first check
        // whether TXERIF is set and only then reset the transmit logic
        // but this has been changed in later versions; possibly they
        // have a reason for this; they don't mention this in the errata
        // sheet
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
 8002004:	01802004 	movi	r6,128
 8002008:	014007c4 	movi	r5,31
 800200c:	01002004 	movi	r4,128
 8002010:	80016b00 	call	80016b0 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
 8002014:	01802004 	movi	r6,128
 8002018:	014007c4 	movi	r5,31
 800201c:	01002804 	movi	r4,160
 8002020:	80016b00 	call	80016b0 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);
 8002024:	01800284 	movi	r6,10
 8002028:	01400704 	movi	r5,28
 800202c:	01002804 	movi	r4,160
 8002030:	80016b00 	call	80016b0 <_ZL7writeOphhh>

        // prepare new transmission
        if (retry == 0) {
 8002034:	e0bffc83 	ldbu	r2,-14(fp)
 8002038:	1000121e 	bne	r2,zero,8002084 <_ZN8ENC28J6010packetSendEt+0x9c>
            writeReg(EWRPT, TXSTART_INIT);
 800203c:	01430004 	movi	r5,3072
 8002040:	01000084 	movi	r4,2
 8002044:	80018d40 	call	80018d4 <_ZL8writeReght>
            writeReg(ETXND, TXSTART_INIT+len);
 8002048:	e0bfff0b 	ldhu	r2,-4(fp)
 800204c:	10830004 	addi	r2,r2,3072
 8002050:	10bfffcc 	andi	r2,r2,65535
 8002054:	100b883a 	mov	r5,r2
 8002058:	01000184 	movi	r4,6
 800205c:	80018d40 	call	80018d4 <_ZL8writeReght>
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
 8002060:	000d883a 	mov	r6,zero
 8002064:	000b883a 	mov	r5,zero
 8002068:	01001e84 	movi	r4,122
 800206c:	80016b00 	call	80016b0 <_ZL7writeOphhh>
            writeBuf(len, buffer);
 8002070:	e0bfff0b 	ldhu	r2,-4(fp)
 8002074:	014200b4 	movhi	r5,2050
 8002078:	29633c04 	addi	r5,r5,-29456
 800207c:	1009883a 	mov	r4,r2
 8002080:	8001e180 	call	8001e18 <_ZL8writeBuftPKh>
        }

        // initiate transmission
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
 8002084:	01800204 	movi	r6,8
 8002088:	014007c4 	movi	r5,31
 800208c:	01002004 	movi	r4,128
 8002090:	80016b00 	call	80016b0 <_ZL7writeOphhh>
        // wait until transmission has finished; referring to the data sheet and
        // to the errata (Errata Issue 13; Example 1) you only need to wait until either
        // TXIF or TXERIF gets set; however this leads to hangs; apparently Microchip
        // realized this and in later implementations of their tcp/ip stack they introduced
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
 8002094:	e03ffc0d 	sth	zero,-16(fp)
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
 8002098:	01000704 	movi	r4,28
 800209c:	80019480 	call	8001948 <_ZL11readRegByteh>
 80020a0:	10803fcc 	andi	r2,r2,255
 80020a4:	1080028c 	andi	r2,r2,10
 80020a8:	1000081e 	bne	r2,zero,80020cc <_ZN8ENC28J6010packetSendEt+0xe4>
 80020ac:	e0bffc0b 	ldhu	r2,-16(fp)
 80020b0:	10800044 	addi	r2,r2,1
 80020b4:	e0bffc0d 	sth	r2,-16(fp)
 80020b8:	e0bffc0b 	ldhu	r2,-16(fp)
 80020bc:	1080fa28 	cmpgeui	r2,r2,1000
 80020c0:	1000021e 	bne	r2,zero,80020cc <_ZN8ENC28J6010packetSendEt+0xe4>
 80020c4:	00800044 	movi	r2,1
 80020c8:	00000106 	br	80020d0 <_ZN8ENC28J6010packetSendEt+0xe8>
 80020cc:	0005883a 	mov	r2,zero
 80020d0:	10803fcc 	andi	r2,r2,255
 80020d4:	10000126 	beq	r2,zero,80020dc <_ZN8ENC28J6010packetSendEt+0xf4>
 80020d8:	003fef06 	br	8002098 <_ZN8ENC28J6010packetSendEt+0xb0>
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
 80020dc:	01000704 	movi	r4,28
 80020e0:	80019480 	call	8001948 <_ZL11readRegByteh>
 80020e4:	10803fcc 	andi	r2,r2,255
 80020e8:	1080008c 	andi	r2,r2,2
 80020ec:	1000051e 	bne	r2,zero,8002104 <_ZN8ENC28J6010packetSendEt+0x11c>
 80020f0:	e0bffc0b 	ldhu	r2,-16(fp)
 80020f4:	1080fa28 	cmpgeui	r2,r2,1000
 80020f8:	1000021e 	bne	r2,zero,8002104 <_ZN8ENC28J6010packetSendEt+0x11c>
 80020fc:	00800044 	movi	r2,1
 8002100:	00000106 	br	8002108 <_ZN8ENC28J6010packetSendEt+0x120>
 8002104:	0005883a 	mov	r2,zero
 8002108:	10803fcc 	andi	r2,r2,255
 800210c:	1000051e 	bne	r2,zero,8002124 <_ZN8ENC28J6010packetSendEt+0x13c>
            // no error; start new transmission
            break;
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
 8002110:	01800204 	movi	r6,8
 8002114:	014007c4 	movi	r5,31
 8002118:	01002804 	movi	r4,160
 800211c:	80016b00 	call	80016b0 <_ZL7writeOphhh>

    #if ETHERCARD_RETRY_LATECOLLISIONS == 0
        break;
 8002120:	00000106 	br	8002128 <_ZN8ENC28J6010packetSendEt+0x140>
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
            // no error; start new transmission
            break;
 8002124:	0001883a 	nop
            break;
        }

        retry++;
    }
}
 8002128:	0001883a 	nop
 800212c:	e037883a 	mov	sp,fp
 8002130:	dfc00117 	ldw	ra,4(sp)
 8002134:	df000017 	ldw	fp,0(sp)
 8002138:	dec00204 	addi	sp,sp,8
 800213c:	f800283a 	ret

08002140 <_ZN8ENC28J6015enableBroadcastEb>:

void ENC28J60::enableBroadcast (bool temporary) {
 8002140:	defffd04 	addi	sp,sp,-12
 8002144:	dfc00215 	stw	ra,8(sp)
 8002148:	df000115 	stw	fp,4(sp)
 800214c:	df000104 	addi	fp,sp,4
 8002150:	2005883a 	mov	r2,r4
 8002154:	e0bfff05 	stb	r2,-4(fp)
    writeRegByte(ERXFCON, readRegByte(ERXFCON) | ERXFCON_BCEN);
 8002158:	01000e04 	movi	r4,56
 800215c:	80019480 	call	8001948 <_ZL11readRegByteh>
 8002160:	10800054 	ori	r2,r2,1
 8002164:	10803fcc 	andi	r2,r2,255
 8002168:	100b883a 	mov	r5,r2
 800216c:	01000e04 	movi	r4,56
 8002170:	80018780 	call	8001878 <_ZL12writeRegBytehh>
    if(!temporary)
 8002174:	e0bfff03 	ldbu	r2,-4(fp)
 8002178:	1080005c 	xori	r2,r2,1
 800217c:	10803fcc 	andi	r2,r2,255
 8002180:	10000226 	beq	r2,zero,800218c <_ZN8ENC28J6015enableBroadcastEb+0x4c>
        broadcast_enabled = true;
 8002184:	00800044 	movi	r2,1
 8002188:	d0a6f885 	stb	r2,-25630(gp)
}
 800218c:	0001883a 	nop
 8002190:	e037883a 	mov	sp,fp
 8002194:	dfc00117 	ldw	ra,4(sp)
 8002198:	df000017 	ldw	fp,0(sp)
 800219c:	dec00204 	addi	sp,sp,8
 80021a0:	f800283a 	ret

080021a4 <_ZN8ENC28J6016disableBroadcastEb>:

void ENC28J60::disableBroadcast (bool temporary) {
 80021a4:	defffd04 	addi	sp,sp,-12
 80021a8:	dfc00215 	stw	ra,8(sp)
 80021ac:	df000115 	stw	fp,4(sp)
 80021b0:	df000104 	addi	fp,sp,4
 80021b4:	2005883a 	mov	r2,r4
 80021b8:	e0bfff05 	stb	r2,-4(fp)
    if(!temporary)
 80021bc:	e0bfff03 	ldbu	r2,-4(fp)
 80021c0:	1080005c 	xori	r2,r2,1
 80021c4:	10803fcc 	andi	r2,r2,255
 80021c8:	10000126 	beq	r2,zero,80021d0 <_ZN8ENC28J6016disableBroadcastEb+0x2c>
        broadcast_enabled = false;
 80021cc:	d026f885 	stb	zero,-25630(gp)
    if(!broadcast_enabled)
 80021d0:	d0a6f883 	ldbu	r2,-25630(gp)
 80021d4:	1080005c 	xori	r2,r2,1
 80021d8:	10803fcc 	andi	r2,r2,255
 80021dc:	10000726 	beq	r2,zero,80021fc <_ZN8ENC28J6016disableBroadcastEb+0x58>
        writeRegByte(ERXFCON, readRegByte(ERXFCON) & ~ERXFCON_BCEN);
 80021e0:	01000e04 	movi	r4,56
 80021e4:	80019480 	call	8001948 <_ZL11readRegByteh>
 80021e8:	10803fcc 	andi	r2,r2,255
 80021ec:	10803f8c 	andi	r2,r2,254
 80021f0:	100b883a 	mov	r5,r2
 80021f4:	01000e04 	movi	r4,56
 80021f8:	80018780 	call	8001878 <_ZL12writeRegBytehh>
}
 80021fc:	0001883a 	nop
 8002200:	e037883a 	mov	sp,fp
 8002204:	dfc00117 	ldw	ra,4(sp)
 8002208:	df000017 	ldw	fp,0(sp)
 800220c:	dec00204 	addi	sp,sp,8
 8002210:	f800283a 	ret

08002214 <_Z4PSTRPc>:
// const unsigned char arpreqhdr[] PROGMEM = { 0,1,8,0,6,4,0,1 }; // ARP request header
// const unsigned char iphdr[] PROGMEM = { 0x45,0,0,0x82,0,0,0x40,0,0x20 }; //IP header
// const unsigned char ntpreqhdr[] PROGMEM = { 0xE3,0,4,0xFA,0,1,0,0,0,1 }; //NTP request header
extern const uint8_t allOnes[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }; // Used for hardware (MAC) and IP broadcast addresses

char* PSTR(char* str){
 8002214:	defffe04 	addi	sp,sp,-8
 8002218:	df000115 	stw	fp,4(sp)
 800221c:	df000104 	addi	fp,sp,4
 8002220:	e13fff15 	stw	r4,-4(fp)
	return str;
 8002224:	e0bfff17 	ldw	r2,-4(fp)
}
 8002228:	e037883a 	mov	sp,fp
 800222c:	df000017 	ldw	fp,0(sp)
 8002230:	dec00104 	addi	sp,sp,4
 8002234:	f800283a 	ret

08002238 <_Z8memcpy_PPvPKvj>:
const unsigned char arpreqhdr[] = { 0,1,8,0,6,4,0,1 }; // ARP request header
const unsigned char iphdr[] = { 0x45,0,0,0x82,0,0,0x40,0,0x20 }; //IP header
const unsigned char ntpreqhdr[] = { 0xE3,0,4,0xFA,0,1,0,0,0,1 }; //NTP request header


void* memcpy_P(void* dest, const void* src, std::size_t count) {
 8002238:	defffb04 	addi	sp,sp,-20
 800223c:	dfc00415 	stw	ra,16(sp)
 8002240:	df000315 	stw	fp,12(sp)
 8002244:	df000304 	addi	fp,sp,12
 8002248:	e13ffd15 	stw	r4,-12(fp)
 800224c:	e17ffe15 	stw	r5,-8(fp)
 8002250:	e1bfff15 	stw	r6,-4(fp)
	memcpy(dest, src, count);
 8002254:	e1bfff17 	ldw	r6,-4(fp)
 8002258:	e17ffe17 	ldw	r5,-8(fp)
 800225c:	e13ffd17 	ldw	r4,-12(fp)
 8002260:	8005ad80 	call	8005ad8 <memcpy>
}
 8002264:	0001883a 	nop
 8002268:	e037883a 	mov	sp,fp
 800226c:	dfc00117 	ldw	ra,4(sp)
 8002270:	df000017 	ldw	fp,0(sp)
 8002274:	dec00204 	addi	sp,sp,8
 8002278:	f800283a 	ret

0800227c <_ZL13fill_checksumhhth>:

static void fill_checksum(uint8_t dest, uint8_t off, uint16_t len,uint8_t type) {
 800227c:	defff804 	addi	sp,sp,-32
 8002280:	df000715 	stw	fp,28(sp)
 8002284:	df000704 	addi	fp,sp,28
 8002288:	2011883a 	mov	r8,r4
 800228c:	2809883a 	mov	r4,r5
 8002290:	3007883a 	mov	r3,r6
 8002294:	3805883a 	mov	r2,r7
 8002298:	e23ffc05 	stb	r8,-16(fp)
 800229c:	e13ffd05 	stb	r4,-12(fp)
 80022a0:	e0fffe0d 	sth	r3,-8(fp)
 80022a4:	e0bfff05 	stb	r2,-4(fp)
    const uint8_t* ptr = gPB + off;
 80022a8:	e0fffd03 	ldbu	r3,-12(fp)
 80022ac:	008200b4 	movhi	r2,2050
 80022b0:	10a33c04 	addi	r2,r2,-29456
 80022b4:	1885883a 	add	r2,r3,r2
 80022b8:	e0bff915 	stw	r2,-28(fp)
    uint32_t sum = type==1 ? IP_PROTO_UDP_V+len-8 :
                   type==2 ? IP_PROTO_TCP_V+len-8 : 0;
 80022bc:	e0bfff03 	ldbu	r2,-4(fp)
 80022c0:	10800058 	cmpnei	r2,r2,1
 80022c4:	1000031e 	bne	r2,zero,80022d4 <_ZL13fill_checksumhhth+0x58>
	memcpy(dest, src, count);
}

static void fill_checksum(uint8_t dest, uint8_t off, uint16_t len,uint8_t type) {
    const uint8_t* ptr = gPB + off;
    uint32_t sum = type==1 ? IP_PROTO_UDP_V+len-8 :
 80022c8:	e0bffe0b 	ldhu	r2,-8(fp)
 80022cc:	10800244 	addi	r2,r2,9
 80022d0:	00000706 	br	80022f0 <_ZL13fill_checksumhhth+0x74>
                   type==2 ? IP_PROTO_TCP_V+len-8 : 0;
 80022d4:	e0bfff03 	ldbu	r2,-4(fp)
 80022d8:	10800098 	cmpnei	r2,r2,2
 80022dc:	1000031e 	bne	r2,zero,80022ec <_ZL13fill_checksumhhth+0x70>
 80022e0:	e0bffe0b 	ldhu	r2,-8(fp)
 80022e4:	10bfff84 	addi	r2,r2,-2
 80022e8:	00000106 	br	80022f0 <_ZL13fill_checksumhhth+0x74>
 80022ec:	0005883a 	mov	r2,zero
 80022f0:	e0bffa15 	stw	r2,-24(fp)
    while(len >1) {
 80022f4:	e0bffe0b 	ldhu	r2,-8(fp)
 80022f8:	108000b0 	cmpltui	r2,r2,2
 80022fc:	1000151e 	bne	r2,zero,8002354 <_ZL13fill_checksumhhth+0xd8>
        sum += (uint16_t) (((uint32_t)*ptr<<8)|*(ptr+1));
 8002300:	e0bff917 	ldw	r2,-28(fp)
 8002304:	10800003 	ldbu	r2,0(r2)
 8002308:	10803fcc 	andi	r2,r2,255
 800230c:	1004923a 	slli	r2,r2,8
 8002310:	1007883a 	mov	r3,r2
 8002314:	e0bff917 	ldw	r2,-28(fp)
 8002318:	10800044 	addi	r2,r2,1
 800231c:	10800003 	ldbu	r2,0(r2)
 8002320:	10803fcc 	andi	r2,r2,255
 8002324:	1884b03a 	or	r2,r3,r2
 8002328:	10bfffcc 	andi	r2,r2,65535
 800232c:	e0fffa17 	ldw	r3,-24(fp)
 8002330:	1885883a 	add	r2,r3,r2
 8002334:	e0bffa15 	stw	r2,-24(fp)
        ptr+=2;
 8002338:	e0bff917 	ldw	r2,-28(fp)
 800233c:	10800084 	addi	r2,r2,2
 8002340:	e0bff915 	stw	r2,-28(fp)
        len-=2;
 8002344:	e0bffe0b 	ldhu	r2,-8(fp)
 8002348:	10bfff84 	addi	r2,r2,-2
 800234c:	e0bffe0d 	sth	r2,-8(fp)

static void fill_checksum(uint8_t dest, uint8_t off, uint16_t len,uint8_t type) {
    const uint8_t* ptr = gPB + off;
    uint32_t sum = type==1 ? IP_PROTO_UDP_V+len-8 :
                   type==2 ? IP_PROTO_TCP_V+len-8 : 0;
    while(len >1) {
 8002350:	003fe806 	br	80022f4 <_ZL13fill_checksumhhth+0x78>
        sum += (uint16_t) (((uint32_t)*ptr<<8)|*(ptr+1));
        ptr+=2;
        len-=2;
    }
    if (len)
 8002354:	e0bffe0b 	ldhu	r2,-8(fp)
 8002358:	10000726 	beq	r2,zero,8002378 <_ZL13fill_checksumhhth+0xfc>
        sum += ((uint32_t)*ptr)<<8;
 800235c:	e0bff917 	ldw	r2,-28(fp)
 8002360:	10800003 	ldbu	r2,0(r2)
 8002364:	10803fcc 	andi	r2,r2,255
 8002368:	1004923a 	slli	r2,r2,8
 800236c:	e0fffa17 	ldw	r3,-24(fp)
 8002370:	1885883a 	add	r2,r3,r2
 8002374:	e0bffa15 	stw	r2,-24(fp)
    while (sum>>16)
 8002378:	e0bffa17 	ldw	r2,-24(fp)
 800237c:	1004d43a 	srli	r2,r2,16
 8002380:	10000726 	beq	r2,zero,80023a0 <_ZL13fill_checksumhhth+0x124>
        sum = (uint16_t) sum + (sum >> 16);
 8002384:	e0bffa17 	ldw	r2,-24(fp)
 8002388:	10ffffcc 	andi	r3,r2,65535
 800238c:	e0bffa17 	ldw	r2,-24(fp)
 8002390:	1004d43a 	srli	r2,r2,16
 8002394:	1885883a 	add	r2,r3,r2
 8002398:	e0bffa15 	stw	r2,-24(fp)
        ptr+=2;
        len-=2;
    }
    if (len)
        sum += ((uint32_t)*ptr)<<8;
    while (sum>>16)
 800239c:	003ff606 	br	8002378 <_ZL13fill_checksumhhth+0xfc>
        sum = (uint16_t) sum + (sum >> 16);
    uint16_t ck = ~ (uint16_t) sum;
 80023a0:	e0bffa17 	ldw	r2,-24(fp)
 80023a4:	0084303a 	nor	r2,zero,r2
 80023a8:	e0bffb0d 	sth	r2,-20(fp)
    gPB[dest] = ck>>8;
 80023ac:	e0fffc03 	ldbu	r3,-16(fp)
 80023b0:	e0bffb0b 	ldhu	r2,-20(fp)
 80023b4:	1005d23a 	srai	r2,r2,8
 80023b8:	1009883a 	mov	r4,r2
 80023bc:	008200b4 	movhi	r2,2050
 80023c0:	10a33c04 	addi	r2,r2,-29456
 80023c4:	10c5883a 	add	r2,r2,r3
 80023c8:	11000005 	stb	r4,0(r2)
    gPB[dest+1] = ck;
 80023cc:	e0bffc03 	ldbu	r2,-16(fp)
 80023d0:	10c00044 	addi	r3,r2,1
 80023d4:	e0bffb0b 	ldhu	r2,-20(fp)
 80023d8:	1009883a 	mov	r4,r2
 80023dc:	008200b4 	movhi	r2,2050
 80023e0:	10a33c04 	addi	r2,r2,-29456
 80023e4:	10c5883a 	add	r2,r2,r3
 80023e8:	11000005 	stb	r4,0(r2)
}
 80023ec:	0001883a 	nop
 80023f0:	e037883a 	mov	sp,fp
 80023f4:	df000017 	ldw	fp,0(sp)
 80023f8:	dec00104 	addi	sp,sp,4
 80023fc:	f800283a 	ret

08002400 <_ZL7setMACsPKh>:

static void setMACs (const uint8_t *mac) {
 8002400:	defffd04 	addi	sp,sp,-12
 8002404:	dfc00215 	stw	ra,8(sp)
 8002408:	df000115 	stw	fp,4(sp)
 800240c:	df000104 	addi	fp,sp,4
 8002410:	e13fff15 	stw	r4,-4(fp)
    EtherCard::copyMac(gPB + ETH_DST_MAC, mac);
 8002414:	e17fff17 	ldw	r5,-4(fp)
 8002418:	010200b4 	movhi	r4,2050
 800241c:	21233c04 	addi	r4,r4,-29456
 8002420:	8004d700 	call	8004d70 <_ZN9EtherCard7copyMacEPhPKh>
    EtherCard::copyMac(gPB + ETH_SRC_MAC, EtherCard::mymac);
 8002424:	008200b4 	movhi	r2,2050
 8002428:	10a33d84 	addi	r2,r2,-29450
 800242c:	d166e544 	addi	r5,gp,-25707
 8002430:	1009883a 	mov	r4,r2
 8002434:	8004d700 	call	8004d70 <_ZN9EtherCard7copyMacEPhPKh>
}
 8002438:	0001883a 	nop
 800243c:	e037883a 	mov	sp,fp
 8002440:	dfc00117 	ldw	ra,4(sp)
 8002444:	df000017 	ldw	fp,0(sp)
 8002448:	dec00204 	addi	sp,sp,8
 800244c:	f800283a 	ret

08002450 <_ZL12setMACandIPsPKhS0_>:

static void setMACandIPs (const uint8_t *mac, const uint8_t *dst) {
 8002450:	defffc04 	addi	sp,sp,-16
 8002454:	dfc00315 	stw	ra,12(sp)
 8002458:	df000215 	stw	fp,8(sp)
 800245c:	df000204 	addi	fp,sp,8
 8002460:	e13ffe15 	stw	r4,-8(fp)
 8002464:	e17fff15 	stw	r5,-4(fp)
    setMACs(mac);
 8002468:	e13ffe17 	ldw	r4,-8(fp)
 800246c:	80024000 	call	8002400 <_ZL7setMACsPKh>
    EtherCard::copyIp(gPB + IP_DST_P, dst);
 8002470:	008200b4 	movhi	r2,2050
 8002474:	10a34384 	addi	r2,r2,-29426
 8002478:	e17fff17 	ldw	r5,-4(fp)
 800247c:	1009883a 	mov	r4,r2
 8002480:	8004db00 	call	8004db0 <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
 8002484:	008200b4 	movhi	r2,2050
 8002488:	10a34284 	addi	r2,r2,-29430
 800248c:	d166e6c4 	addi	r5,gp,-25701
 8002490:	1009883a 	mov	r4,r2
 8002494:	8004db00 	call	8004db0 <_ZN9EtherCard6copyIpEPhPKh>
}
 8002498:	0001883a 	nop
 800249c:	e037883a 	mov	sp,fp
 80024a0:	dfc00117 	ldw	ra,4(sp)
 80024a4:	df000017 	ldw	fp,0(sp)
 80024a8:	dec00204 	addi	sp,sp,8
 80024ac:	f800283a 	ret

080024b0 <_ZL24check_ip_message_is_fromPKh>:

static uint8_t check_ip_message_is_from(const uint8_t *ip) {
 80024b0:	defffd04 	addi	sp,sp,-12
 80024b4:	dfc00215 	stw	ra,8(sp)
 80024b8:	df000115 	stw	fp,4(sp)
 80024bc:	df000104 	addi	fp,sp,4
 80024c0:	e13fff15 	stw	r4,-4(fp)
    return memcmp(gPB + IP_SRC_P, ip, IP_LEN) == 0;
 80024c4:	008200b4 	movhi	r2,2050
 80024c8:	10a34284 	addi	r2,r2,-29430
 80024cc:	01800104 	movi	r6,4
 80024d0:	e17fff17 	ldw	r5,-4(fp)
 80024d4:	1009883a 	mov	r4,r2
 80024d8:	8005a5c0 	call	8005a5c <memcmp>
 80024dc:	1005003a 	cmpeq	r2,r2,zero
}
 80024e0:	e037883a 	mov	sp,fp
 80024e4:	dfc00117 	ldw	ra,4(sp)
 80024e8:	df000017 	ldw	fp,0(sp)
 80024ec:	dec00204 	addi	sp,sp,8
 80024f0:	f800283a 	ret

080024f4 <_ZL6is_lanPKhS0_>:

static bool is_lan(const uint8_t source[IP_LEN], const uint8_t destination[IP_LEN]) {
 80024f4:	defffc04 	addi	sp,sp,-16
 80024f8:	df000315 	stw	fp,12(sp)
 80024fc:	df000304 	addi	fp,sp,12
 8002500:	e13ffe15 	stw	r4,-8(fp)
 8002504:	e17fff15 	stw	r5,-4(fp)
    if(source[0] == 0 || destination[0] == 0) {
 8002508:	e0bffe17 	ldw	r2,-8(fp)
 800250c:	10800003 	ldbu	r2,0(r2)
 8002510:	10803fcc 	andi	r2,r2,255
 8002514:	10000426 	beq	r2,zero,8002528 <_ZL6is_lanPKhS0_+0x34>
 8002518:	e0bfff17 	ldw	r2,-4(fp)
 800251c:	10800003 	ldbu	r2,0(r2)
 8002520:	10803fcc 	andi	r2,r2,255
 8002524:	1000021e 	bne	r2,zero,8002530 <_ZL6is_lanPKhS0_+0x3c>
        return false;
 8002528:	0005883a 	mov	r2,zero
 800252c:	00001c06 	br	80025a0 <_ZL6is_lanPKhS0_+0xac>
    }
    for(int i = 0; i < IP_LEN; i++)
 8002530:	e03ffd15 	stw	zero,-12(fp)
 8002534:	e0bffd17 	ldw	r2,-12(fp)
 8002538:	10800108 	cmpgei	r2,r2,4
 800253c:	1000171e 	bne	r2,zero,800259c <_ZL6is_lanPKhS0_+0xa8>
        if((source[i] & EtherCard::netmask[i]) != (destination[i] & EtherCard::netmask[i])) {
 8002540:	e0bffd17 	ldw	r2,-12(fp)
 8002544:	e0fffe17 	ldw	r3,-8(fp)
 8002548:	1885883a 	add	r2,r3,r2
 800254c:	10c00003 	ldbu	r3,0(r2)
 8002550:	e0bffd17 	ldw	r2,-12(fp)
 8002554:	e13fff17 	ldw	r4,-4(fp)
 8002558:	2085883a 	add	r2,r4,r2
 800255c:	10800003 	ldbu	r2,0(r2)
 8002560:	1884f03a 	xor	r2,r3,r2
 8002564:	1009883a 	mov	r4,r2
 8002568:	e0fffd17 	ldw	r3,-12(fp)
 800256c:	d0a6e7c4 	addi	r2,gp,-25697
 8002570:	1885883a 	add	r2,r3,r2
 8002574:	10800003 	ldbu	r2,0(r2)
 8002578:	2084703a 	and	r2,r4,r2
 800257c:	10803fcc 	andi	r2,r2,255
 8002580:	10000226 	beq	r2,zero,800258c <_ZL6is_lanPKhS0_+0x98>
            return false;
 8002584:	0005883a 	mov	r2,zero
 8002588:	00000506 	br	80025a0 <_ZL6is_lanPKhS0_+0xac>

static bool is_lan(const uint8_t source[IP_LEN], const uint8_t destination[IP_LEN]) {
    if(source[0] == 0 || destination[0] == 0) {
        return false;
    }
    for(int i = 0; i < IP_LEN; i++)
 800258c:	e0bffd17 	ldw	r2,-12(fp)
 8002590:	10800044 	addi	r2,r2,1
 8002594:	e0bffd15 	stw	r2,-12(fp)
 8002598:	003fe606 	br	8002534 <_ZL6is_lanPKhS0_+0x40>
        if((source[i] & EtherCard::netmask[i]) != (destination[i] & EtherCard::netmask[i])) {
            return false;
        }
    return true;
 800259c:	00800044 	movi	r2,1
}
 80025a0:	e037883a 	mov	sp,fp
 80025a4:	df000017 	ldw	fp,0(sp)
 80025a8:	dec00104 	addi	sp,sp,4
 80025ac:	f800283a 	ret

080025b0 <_ZL25eth_type_is_arp_and_my_ipt>:

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
 80025b0:	defffd04 	addi	sp,sp,-12
 80025b4:	dfc00215 	stw	ra,8(sp)
 80025b8:	df000115 	stw	fp,4(sp)
 80025bc:	df000104 	addi	fp,sp,4
 80025c0:	2005883a 	mov	r2,r4
 80025c4:	e0bfff0d 	sth	r2,-4(fp)
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
 80025c8:	e0bfff0b 	ldhu	r2,-4(fp)
 80025cc:	10800a70 	cmpltui	r2,r2,41
 80025d0:	1000151e 	bne	r2,zero,8002628 <_ZL25eth_type_is_arp_and_my_ipt+0x78>
        }
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
 80025d4:	008200b4 	movhi	r2,2050
 80025d8:	10a33c04 	addi	r2,r2,-29456
 80025dc:	10800303 	ldbu	r2,12(r2)
 80025e0:	10803fcc 	andi	r2,r2,255
 80025e4:	10800218 	cmpnei	r2,r2,8
 80025e8:	10000f1e 	bne	r2,zero,8002628 <_ZL25eth_type_is_arp_and_my_ipt+0x78>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
 80025ec:	008200b4 	movhi	r2,2050
 80025f0:	10a33c04 	addi	r2,r2,-29456
 80025f4:	10800343 	ldbu	r2,13(r2)
        }
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
 80025f8:	10803fcc 	andi	r2,r2,255
 80025fc:	10800198 	cmpnei	r2,r2,6
 8002600:	1000091e 	bne	r2,zero,8002628 <_ZL25eth_type_is_arp_and_my_ipt+0x78>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
 8002604:	008200b4 	movhi	r2,2050
 8002608:	10a34584 	addi	r2,r2,-29418
 800260c:	01800104 	movi	r6,4
 8002610:	d166e6c4 	addi	r5,gp,-25701
 8002614:	1009883a 	mov	r4,r2
 8002618:	8005a5c0 	call	8005a5c <memcmp>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
 800261c:	1000021e 	bne	r2,zero,8002628 <_ZL25eth_type_is_arp_and_my_ipt+0x78>
 8002620:	00800044 	movi	r2,1
 8002624:	00000106 	br	800262c <_ZL25eth_type_is_arp_and_my_ipt+0x7c>
 8002628:	0005883a 	mov	r2,zero
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}
 800262c:	e037883a 	mov	sp,fp
 8002630:	dfc00117 	ldw	ra,4(sp)
 8002634:	df000017 	ldw	fp,0(sp)
 8002638:	dec00204 	addi	sp,sp,8
 800263c:	f800283a 	ret

08002640 <_ZL24eth_type_is_ip_and_my_ipt>:

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
 8002640:	defffd04 	addi	sp,sp,-12
 8002644:	dfc00215 	stw	ra,8(sp)
 8002648:	df000115 	stw	fp,4(sp)
 800264c:	df000104 	addi	fp,sp,4
 8002650:	2005883a 	mov	r2,r4
 8002654:	e0bfff0d 	sth	r2,-4(fp)
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
 8002658:	e0bfff0b 	ldhu	r2,-4(fp)
 800265c:	10800ab0 	cmpltui	r2,r2,42
 8002660:	1000281e 	bne	r2,zero,8002704 <_ZL24eth_type_is_ip_and_my_ipt+0xc4>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
 8002664:	008200b4 	movhi	r2,2050
 8002668:	10a33c04 	addi	r2,r2,-29456
 800266c:	10800303 	ldbu	r2,12(r2)
 8002670:	10803fcc 	andi	r2,r2,255
 8002674:	10800218 	cmpnei	r2,r2,8
 8002678:	1000221e 	bne	r2,zero,8002704 <_ZL24eth_type_is_ip_and_my_ipt+0xc4>
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
 800267c:	008200b4 	movhi	r2,2050
 8002680:	10a33c04 	addi	r2,r2,-29456
 8002684:	10800343 	ldbu	r2,13(r2)
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
 8002688:	10803fcc 	andi	r2,r2,255
 800268c:	10001d1e 	bne	r2,zero,8002704 <_ZL24eth_type_is_ip_and_my_ipt+0xc4>
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
 8002690:	008200b4 	movhi	r2,2050
 8002694:	10a33c04 	addi	r2,r2,-29456
 8002698:	10800383 	ldbu	r2,14(r2)
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
 800269c:	10803fcc 	andi	r2,r2,255
 80026a0:	10801158 	cmpnei	r2,r2,69
 80026a4:	1000171e 	bne	r2,zero,8002704 <_ZL24eth_type_is_ip_and_my_ipt+0xc4>
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
 80026a8:	008200b4 	movhi	r2,2050
 80026ac:	10a34384 	addi	r2,r2,-29426
 80026b0:	01800104 	movi	r6,4
 80026b4:	d166e6c4 	addi	r5,gp,-25701
 80026b8:	1009883a 	mov	r4,r2
 80026bc:	8005a5c0 	call	8005a5c <memcmp>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
 80026c0:	10000e26 	beq	r2,zero,80026fc <_ZL24eth_type_is_ip_and_my_ipt+0xbc>
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
            || (memcmp(gPB + IP_DST_P, EtherCard::broadcastip, IP_LEN) == 0) //not subnet broadcast
 80026c4:	008200b4 	movhi	r2,2050
 80026c8:	10a34384 	addi	r2,r2,-29426
 80026cc:	01800104 	movi	r6,4
 80026d0:	d166e8c4 	addi	r5,gp,-25693
 80026d4:	1009883a 	mov	r4,r2
 80026d8:	8005a5c0 	call	8005a5c <memcmp>
 80026dc:	10000726 	beq	r2,zero,80026fc <_ZL24eth_type_is_ip_and_my_ipt+0xbc>
            || (memcmp(gPB + IP_DST_P, allOnes, IP_LEN) == 0)); //not global broadcasts
 80026e0:	008200b4 	movhi	r2,2050
 80026e4:	10a34384 	addi	r2,r2,-29426
 80026e8:	01800104 	movi	r6,4
 80026ec:	d16003c4 	addi	r5,gp,-32753
 80026f0:	1009883a 	mov	r4,r2
 80026f4:	8005a5c0 	call	8005a5c <memcmp>
 80026f8:	1000021e 	bne	r2,zero,8002704 <_ZL24eth_type_is_ip_and_my_ipt+0xc4>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
 80026fc:	00800044 	movi	r2,1
 8002700:	00000106 	br	8002708 <_ZL24eth_type_is_ip_and_my_ipt+0xc8>
 8002704:	0005883a 	mov	r2,zero
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
            || (memcmp(gPB + IP_DST_P, EtherCard::broadcastip, IP_LEN) == 0) //not subnet broadcast
            || (memcmp(gPB + IP_DST_P, allOnes, IP_LEN) == 0)); //not global broadcasts
    //!@todo Handle multicast
}
 8002708:	e037883a 	mov	sp,fp
 800270c:	dfc00117 	ldw	ra,4(sp)
 8002710:	df000017 	ldw	fp,0(sp)
 8002714:	dec00204 	addi	sp,sp,8
 8002718:	f800283a 	ret

0800271c <_ZL20fill_ip_hdr_checksumv>:

static void fill_ip_hdr_checksum() {
 800271c:	defffe04 	addi	sp,sp,-8
 8002720:	dfc00115 	stw	ra,4(sp)
 8002724:	df000015 	stw	fp,0(sp)
 8002728:	d839883a 	mov	fp,sp
    gPB[IP_CHECKSUM_P] = 0;
 800272c:	008200b4 	movhi	r2,2050
 8002730:	10a33c04 	addi	r2,r2,-29456
 8002734:	10000605 	stb	zero,24(r2)
    gPB[IP_CHECKSUM_P+1] = 0;
 8002738:	008200b4 	movhi	r2,2050
 800273c:	10a33c04 	addi	r2,r2,-29456
 8002740:	10000645 	stb	zero,25(r2)
    gPB[IP_FLAGS_P] = 0x40; // don't fragment
 8002744:	008200b4 	movhi	r2,2050
 8002748:	10a33c04 	addi	r2,r2,-29456
 800274c:	00c01004 	movi	r3,64
 8002750:	10c00505 	stb	r3,20(r2)
    gPB[IP_FLAGS_P+1] = 0;  // fragment offset
 8002754:	008200b4 	movhi	r2,2050
 8002758:	10a33c04 	addi	r2,r2,-29456
 800275c:	10000545 	stb	zero,21(r2)
    gPB[IP_TTL_P] = 64; // ttl
 8002760:	008200b4 	movhi	r2,2050
 8002764:	10a33c04 	addi	r2,r2,-29456
 8002768:	00c01004 	movi	r3,64
 800276c:	10c00585 	stb	r3,22(r2)
    fill_checksum(IP_CHECKSUM_P, IP_P, IP_HEADER_LEN,0);
 8002770:	000f883a 	mov	r7,zero
 8002774:	01800504 	movi	r6,20
 8002778:	01400384 	movi	r5,14
 800277c:	01000604 	movi	r4,24
 8002780:	800227c0 	call	800227c <_ZL13fill_checksumhhth>
}
 8002784:	0001883a 	nop
 8002788:	e037883a 	mov	sp,fp
 800278c:	dfc00117 	ldw	ra,4(sp)
 8002790:	df000017 	ldw	fp,0(sp)
 8002794:	dec00204 	addi	sp,sp,8
 8002798:	f800283a 	ret

0800279c <_ZL11make_eth_ipv>:

static void make_eth_ip() {
 800279c:	defffe04 	addi	sp,sp,-8
 80027a0:	dfc00115 	stw	ra,4(sp)
 80027a4:	df000015 	stw	fp,0(sp)
 80027a8:	d839883a 	mov	fp,sp
    setMACs(gPB + ETH_SRC_MAC);
 80027ac:	008200b4 	movhi	r2,2050
 80027b0:	10a33d84 	addi	r2,r2,-29450
 80027b4:	1009883a 	mov	r4,r2
 80027b8:	80024000 	call	8002400 <_ZL7setMACsPKh>
    EtherCard::copyIp(gPB + IP_DST_P, gPB + IP_SRC_P);
 80027bc:	008200b4 	movhi	r2,2050
 80027c0:	10a34384 	addi	r2,r2,-29426
 80027c4:	00c200b4 	movhi	r3,2050
 80027c8:	18e34284 	addi	r3,r3,-29430
 80027cc:	180b883a 	mov	r5,r3
 80027d0:	1009883a 	mov	r4,r2
 80027d4:	8004db00 	call	8004db0 <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
 80027d8:	008200b4 	movhi	r2,2050
 80027dc:	10a34284 	addi	r2,r2,-29430
 80027e0:	d166e6c4 	addi	r5,gp,-25701
 80027e4:	1009883a 	mov	r4,r2
 80027e8:	8004db00 	call	8004db0 <_ZN9EtherCard6copyIpEPhPKh>
    fill_ip_hdr_checksum();
 80027ec:	800271c0 	call	800271c <_ZL20fill_ip_hdr_checksumv>
}
 80027f0:	0001883a 	nop
 80027f4:	e037883a 	mov	sp,fp
 80027f8:	dfc00117 	ldw	ra,4(sp)
 80027fc:	df000017 	ldw	fp,0(sp)
 8002800:	dec00204 	addi	sp,sp,8
 8002804:	f800283a 	ret

08002808 <_ZL8step_seqth>:

static void step_seq(uint16_t rel_ack_num,uint8_t cp_seq) {
 8002808:	defffc04 	addi	sp,sp,-16
 800280c:	df000315 	stw	fp,12(sp)
 8002810:	df000304 	addi	fp,sp,12
 8002814:	2007883a 	mov	r3,r4
 8002818:	2805883a 	mov	r2,r5
 800281c:	e0fffe0d 	sth	r3,-8(fp)
 8002820:	e0bfff05 	stb	r2,-4(fp)
    uint8_t i;
    uint8_t tseq;
    i = 4;
 8002824:	00800104 	movi	r2,4
 8002828:	e0bffd05 	stb	r2,-12(fp)
    while(i>0) {
 800282c:	e0bffd03 	ldbu	r2,-12(fp)
 8002830:	10003026 	beq	r2,zero,80028f4 <_ZL8step_seqth+0xec>
        rel_ack_num = gPB[TCP_SEQ_H_P+i-1]+rel_ack_num;
 8002834:	e0bffd03 	ldbu	r2,-12(fp)
 8002838:	10c00944 	addi	r3,r2,37
 800283c:	008200b4 	movhi	r2,2050
 8002840:	10a33c04 	addi	r2,r2,-29456
 8002844:	10c5883a 	add	r2,r2,r3
 8002848:	10800003 	ldbu	r2,0(r2)
 800284c:	10c03fcc 	andi	r3,r2,255
 8002850:	e0bffe0b 	ldhu	r2,-8(fp)
 8002854:	1885883a 	add	r2,r3,r2
 8002858:	e0bffe0d 	sth	r2,-8(fp)
        tseq = gPB[TCP_SEQACK_H_P+i-1];
 800285c:	e0bffd03 	ldbu	r2,-12(fp)
 8002860:	10c00a44 	addi	r3,r2,41
 8002864:	008200b4 	movhi	r2,2050
 8002868:	10a33c04 	addi	r2,r2,-29456
 800286c:	10c5883a 	add	r2,r2,r3
 8002870:	10800003 	ldbu	r2,0(r2)
 8002874:	e0bffd45 	stb	r2,-11(fp)
        gPB[TCP_SEQACK_H_P+i-1] = rel_ack_num;
 8002878:	e0bffd03 	ldbu	r2,-12(fp)
 800287c:	10c00a44 	addi	r3,r2,41
 8002880:	e0bffe0b 	ldhu	r2,-8(fp)
 8002884:	1009883a 	mov	r4,r2
 8002888:	008200b4 	movhi	r2,2050
 800288c:	10a33c04 	addi	r2,r2,-29456
 8002890:	10c5883a 	add	r2,r2,r3
 8002894:	11000005 	stb	r4,0(r2)
        if (cp_seq)
 8002898:	e0bfff03 	ldbu	r2,-4(fp)
 800289c:	10000826 	beq	r2,zero,80028c0 <_ZL8step_seqth+0xb8>
            gPB[TCP_SEQ_H_P+i-1] = tseq;
 80028a0:	e0bffd03 	ldbu	r2,-12(fp)
 80028a4:	10c00944 	addi	r3,r2,37
 80028a8:	008200b4 	movhi	r2,2050
 80028ac:	10a33c04 	addi	r2,r2,-29456
 80028b0:	10c5883a 	add	r2,r2,r3
 80028b4:	e0fffd43 	ldbu	r3,-11(fp)
 80028b8:	10c00005 	stb	r3,0(r2)
 80028bc:	00000606 	br	80028d8 <_ZL8step_seqth+0xd0>
        else
            gPB[TCP_SEQ_H_P+i-1] = 0; // some preset value
 80028c0:	e0bffd03 	ldbu	r2,-12(fp)
 80028c4:	10c00944 	addi	r3,r2,37
 80028c8:	008200b4 	movhi	r2,2050
 80028cc:	10a33c04 	addi	r2,r2,-29456
 80028d0:	10c5883a 	add	r2,r2,r3
 80028d4:	10000005 	stb	zero,0(r2)
        rel_ack_num = rel_ack_num>>8;
 80028d8:	e0bffe0b 	ldhu	r2,-8(fp)
 80028dc:	1005d23a 	srai	r2,r2,8
 80028e0:	e0bffe0d 	sth	r2,-8(fp)
        i--;
 80028e4:	e0bffd03 	ldbu	r2,-12(fp)
 80028e8:	10bfffc4 	addi	r2,r2,-1
 80028ec:	e0bffd05 	stb	r2,-12(fp)

static void step_seq(uint16_t rel_ack_num,uint8_t cp_seq) {
    uint8_t i;
    uint8_t tseq;
    i = 4;
    while(i>0) {
 80028f0:	003fce06 	br	800282c <_ZL8step_seqth+0x24>
        else
            gPB[TCP_SEQ_H_P+i-1] = 0; // some preset value
        rel_ack_num = rel_ack_num>>8;
        i--;
    }
}
 80028f4:	0001883a 	nop
 80028f8:	e037883a 	mov	sp,fp
 80028fc:	df000017 	ldw	fp,0(sp)
 8002900:	dec00104 	addi	sp,sp,4
 8002904:	f800283a 	ret

08002908 <_ZL12make_tcpheadth>:

static void make_tcphead(uint16_t rel_ack_num,uint8_t cp_seq) {
 8002908:	defffb04 	addi	sp,sp,-20
 800290c:	dfc00415 	stw	ra,16(sp)
 8002910:	df000315 	stw	fp,12(sp)
 8002914:	df000304 	addi	fp,sp,12
 8002918:	2007883a 	mov	r3,r4
 800291c:	2805883a 	mov	r2,r5
 8002920:	e0fffe0d 	sth	r3,-8(fp)
 8002924:	e0bfff05 	stb	r2,-4(fp)
    uint8_t i = gPB[TCP_DST_PORT_H_P];
 8002928:	008200b4 	movhi	r2,2050
 800292c:	10a33c04 	addi	r2,r2,-29456
 8002930:	10800903 	ldbu	r2,36(r2)
 8002934:	e0bffd05 	stb	r2,-12(fp)
    gPB[TCP_DST_PORT_H_P] = gPB[TCP_SRC_PORT_H_P];
 8002938:	008200b4 	movhi	r2,2050
 800293c:	10a33c04 	addi	r2,r2,-29456
 8002940:	10c00883 	ldbu	r3,34(r2)
 8002944:	008200b4 	movhi	r2,2050
 8002948:	10a33c04 	addi	r2,r2,-29456
 800294c:	10c00905 	stb	r3,36(r2)
    gPB[TCP_SRC_PORT_H_P] = i;
 8002950:	008200b4 	movhi	r2,2050
 8002954:	10a33c04 	addi	r2,r2,-29456
 8002958:	e0fffd03 	ldbu	r3,-12(fp)
 800295c:	10c00885 	stb	r3,34(r2)
    uint8_t j = gPB[TCP_DST_PORT_L_P];
 8002960:	008200b4 	movhi	r2,2050
 8002964:	10a33c04 	addi	r2,r2,-29456
 8002968:	10800943 	ldbu	r2,37(r2)
 800296c:	e0bffd45 	stb	r2,-11(fp)
    gPB[TCP_DST_PORT_L_P] = gPB[TCP_SRC_PORT_L_P];
 8002970:	008200b4 	movhi	r2,2050
 8002974:	10a33c04 	addi	r2,r2,-29456
 8002978:	10c008c3 	ldbu	r3,35(r2)
 800297c:	008200b4 	movhi	r2,2050
 8002980:	10a33c04 	addi	r2,r2,-29456
 8002984:	10c00945 	stb	r3,37(r2)
    gPB[TCP_SRC_PORT_L_P] = j;
 8002988:	008200b4 	movhi	r2,2050
 800298c:	10a33c04 	addi	r2,r2,-29456
 8002990:	e0fffd43 	ldbu	r3,-11(fp)
 8002994:	10c008c5 	stb	r3,35(r2)
    step_seq(rel_ack_num,cp_seq);
 8002998:	e0bffe0b 	ldhu	r2,-8(fp)
 800299c:	e0ffff03 	ldbu	r3,-4(fp)
 80029a0:	180b883a 	mov	r5,r3
 80029a4:	1009883a 	mov	r4,r2
 80029a8:	80028080 	call	8002808 <_ZL8step_seqth>
    gPB[TCP_CHECKSUM_H_P] = 0;
 80029ac:	008200b4 	movhi	r2,2050
 80029b0:	10a33c04 	addi	r2,r2,-29456
 80029b4:	10000c85 	stb	zero,50(r2)
    gPB[TCP_CHECKSUM_L_P] = 0;
 80029b8:	008200b4 	movhi	r2,2050
 80029bc:	10a33c04 	addi	r2,r2,-29456
 80029c0:	10000cc5 	stb	zero,51(r2)
    gPB[TCP_HEADER_LEN_P] = 0x50;
 80029c4:	008200b4 	movhi	r2,2050
 80029c8:	10a33c04 	addi	r2,r2,-29456
 80029cc:	00c01404 	movi	r3,80
 80029d0:	10c00b85 	stb	r3,46(r2)
}
 80029d4:	0001883a 	nop
 80029d8:	e037883a 	mov	sp,fp
 80029dc:	dfc00117 	ldw	ra,4(sp)
 80029e0:	df000017 	ldw	fp,0(sp)
 80029e4:	dec00204 	addi	sp,sp,8
 80029e8:	f800283a 	ret

080029ec <_ZL28make_arp_answer_from_requestv>:

static void make_arp_answer_from_request() {
 80029ec:	defffe04 	addi	sp,sp,-8
 80029f0:	dfc00115 	stw	ra,4(sp)
 80029f4:	df000015 	stw	fp,0(sp)
 80029f8:	d839883a 	mov	fp,sp
    setMACs(gPB + ETH_SRC_MAC);
 80029fc:	008200b4 	movhi	r2,2050
 8002a00:	10a33d84 	addi	r2,r2,-29450
 8002a04:	1009883a 	mov	r4,r2
 8002a08:	80024000 	call	8002400 <_ZL7setMACsPKh>
    gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
 8002a0c:	008200b4 	movhi	r2,2050
 8002a10:	10a33c04 	addi	r2,r2,-29456
 8002a14:	10000505 	stb	zero,20(r2)
    gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
 8002a18:	008200b4 	movhi	r2,2050
 8002a1c:	10a33c04 	addi	r2,r2,-29456
 8002a20:	00c00084 	movi	r3,2
 8002a24:	10c00545 	stb	r3,21(r2)
    EtherCard::copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
 8002a28:	008200b4 	movhi	r2,2050
 8002a2c:	10a34404 	addi	r2,r2,-29424
 8002a30:	00c200b4 	movhi	r3,2050
 8002a34:	18e34184 	addi	r3,r3,-29434
 8002a38:	180b883a 	mov	r5,r3
 8002a3c:	1009883a 	mov	r4,r2
 8002a40:	8004d700 	call	8004d70 <_ZN9EtherCard7copyMacEPhPKh>
    EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
 8002a44:	008200b4 	movhi	r2,2050
 8002a48:	10a34184 	addi	r2,r2,-29434
 8002a4c:	d166e544 	addi	r5,gp,-25707
 8002a50:	1009883a 	mov	r4,r2
 8002a54:	8004d700 	call	8004d70 <_ZN9EtherCard7copyMacEPhPKh>
    EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
 8002a58:	008200b4 	movhi	r2,2050
 8002a5c:	10a34584 	addi	r2,r2,-29418
 8002a60:	00c200b4 	movhi	r3,2050
 8002a64:	18e34304 	addi	r3,r3,-29428
 8002a68:	180b883a 	mov	r5,r3
 8002a6c:	1009883a 	mov	r4,r2
 8002a70:	8004db00 	call	8004db0 <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
 8002a74:	008200b4 	movhi	r2,2050
 8002a78:	10a34304 	addi	r2,r2,-29428
 8002a7c:	d166e6c4 	addi	r5,gp,-25701
 8002a80:	1009883a 	mov	r4,r2
 8002a84:	8004db00 	call	8004db0 <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::packetSend(42);
 8002a88:	01000a84 	movi	r4,42
 8002a8c:	8001fe80 	call	8001fe8 <_ZN8ENC28J6010packetSendEt>
}
 8002a90:	0001883a 	nop
 8002a94:	e037883a 	mov	sp,fp
 8002a98:	dfc00117 	ldw	ra,4(sp)
 8002a9c:	df000017 	ldw	fp,0(sp)
 8002aa0:	dec00204 	addi	sp,sp,8
 8002aa4:	f800283a 	ret

08002aa8 <_ZL28make_echo_reply_from_requestt>:

static void make_echo_reply_from_request(uint16_t len) {
 8002aa8:	defffd04 	addi	sp,sp,-12
 8002aac:	dfc00215 	stw	ra,8(sp)
 8002ab0:	df000115 	stw	fp,4(sp)
 8002ab4:	df000104 	addi	fp,sp,4
 8002ab8:	2005883a 	mov	r2,r4
 8002abc:	e0bfff0d 	sth	r2,-4(fp)
    make_eth_ip();
 8002ac0:	800279c0 	call	800279c <_ZL11make_eth_ipv>
    gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
 8002ac4:	008200b4 	movhi	r2,2050
 8002ac8:	10a33c04 	addi	r2,r2,-29456
 8002acc:	10000885 	stb	zero,34(r2)
    if (gPB[ICMP_CHECKSUM_P] > (0xFF-0x08))
 8002ad0:	008200b4 	movhi	r2,2050
 8002ad4:	10a33c04 	addi	r2,r2,-29456
 8002ad8:	10800903 	ldbu	r2,36(r2)
 8002adc:	10803fcc 	andi	r2,r2,255
 8002ae0:	10803e30 	cmpltui	r2,r2,248
 8002ae4:	1000081e 	bne	r2,zero,8002b08 <_ZL28make_echo_reply_from_requestt+0x60>
        gPB[ICMP_CHECKSUM_P+1]++;
 8002ae8:	008200b4 	movhi	r2,2050
 8002aec:	10a33c04 	addi	r2,r2,-29456
 8002af0:	10800943 	ldbu	r2,37(r2)
 8002af4:	10800044 	addi	r2,r2,1
 8002af8:	1007883a 	mov	r3,r2
 8002afc:	008200b4 	movhi	r2,2050
 8002b00:	10a33c04 	addi	r2,r2,-29456
 8002b04:	10c00945 	stb	r3,37(r2)
    gPB[ICMP_CHECKSUM_P] += 0x08;
 8002b08:	008200b4 	movhi	r2,2050
 8002b0c:	10a33c04 	addi	r2,r2,-29456
 8002b10:	10800903 	ldbu	r2,36(r2)
 8002b14:	10800204 	addi	r2,r2,8
 8002b18:	1007883a 	mov	r3,r2
 8002b1c:	008200b4 	movhi	r2,2050
 8002b20:	10a33c04 	addi	r2,r2,-29456
 8002b24:	10c00905 	stb	r3,36(r2)
    EtherCard::packetSend(len);
 8002b28:	e0bfff0b 	ldhu	r2,-4(fp)
 8002b2c:	1009883a 	mov	r4,r2
 8002b30:	8001fe80 	call	8001fe8 <_ZN8ENC28J6010packetSendEt>
}
 8002b34:	0001883a 	nop
 8002b38:	e037883a 	mov	sp,fp
 8002b3c:	dfc00117 	ldw	ra,4(sp)
 8002b40:	df000017 	ldw	fp,0(sp)
 8002b44:	dec00204 	addi	sp,sp,8
 8002b48:	f800283a 	ret

08002b4c <_ZN9EtherCard12makeUdpReplyEPKcht>:

void EtherCard::makeUdpReply (const char *data,uint8_t datalen,uint16_t port) {
 8002b4c:	defffb04 	addi	sp,sp,-20
 8002b50:	dfc00415 	stw	ra,16(sp)
 8002b54:	df000315 	stw	fp,12(sp)
 8002b58:	df000304 	addi	fp,sp,12
 8002b5c:	e13ffd15 	stw	r4,-12(fp)
 8002b60:	2807883a 	mov	r3,r5
 8002b64:	3005883a 	mov	r2,r6
 8002b68:	e0fffe05 	stb	r3,-8(fp)
 8002b6c:	e0bfff0d 	sth	r2,-4(fp)
    if (datalen>220)
 8002b70:	e0bffe03 	ldbu	r2,-8(fp)
 8002b74:	10803770 	cmpltui	r2,r2,221
 8002b78:	1000021e 	bne	r2,zero,8002b84 <_ZN9EtherCard12makeUdpReplyEPKcht+0x38>
        datalen = 220;
 8002b7c:	00bff704 	movi	r2,-36
 8002b80:	e0bffe05 	stb	r2,-8(fp)
    gPB[IP_TOTLEN_H_P] = (IP_HEADER_LEN+UDP_HEADER_LEN+datalen) >>8;
 8002b84:	e0bffe03 	ldbu	r2,-8(fp)
 8002b88:	10800704 	addi	r2,r2,28
 8002b8c:	1005d23a 	srai	r2,r2,8
 8002b90:	1007883a 	mov	r3,r2
 8002b94:	008200b4 	movhi	r2,2050
 8002b98:	10a33c04 	addi	r2,r2,-29456
 8002b9c:	10c00405 	stb	r3,16(r2)
    gPB[IP_TOTLEN_L_P] = IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
 8002ba0:	e0bffe03 	ldbu	r2,-8(fp)
 8002ba4:	10800704 	addi	r2,r2,28
 8002ba8:	1007883a 	mov	r3,r2
 8002bac:	008200b4 	movhi	r2,2050
 8002bb0:	10a33c04 	addi	r2,r2,-29456
 8002bb4:	10c00445 	stb	r3,17(r2)
    make_eth_ip();
 8002bb8:	800279c0 	call	800279c <_ZL11make_eth_ipv>
    gPB[UDP_DST_PORT_H_P] = gPB[UDP_SRC_PORT_H_P];
 8002bbc:	008200b4 	movhi	r2,2050
 8002bc0:	10a33c04 	addi	r2,r2,-29456
 8002bc4:	10c00883 	ldbu	r3,34(r2)
 8002bc8:	008200b4 	movhi	r2,2050
 8002bcc:	10a33c04 	addi	r2,r2,-29456
 8002bd0:	10c00905 	stb	r3,36(r2)
    gPB[UDP_DST_PORT_L_P] = gPB[UDP_SRC_PORT_L_P];
 8002bd4:	008200b4 	movhi	r2,2050
 8002bd8:	10a33c04 	addi	r2,r2,-29456
 8002bdc:	10c008c3 	ldbu	r3,35(r2)
 8002be0:	008200b4 	movhi	r2,2050
 8002be4:	10a33c04 	addi	r2,r2,-29456
 8002be8:	10c00945 	stb	r3,37(r2)
    gPB[UDP_SRC_PORT_H_P] = port>>8;
 8002bec:	e0bfff0b 	ldhu	r2,-4(fp)
 8002bf0:	1005d23a 	srai	r2,r2,8
 8002bf4:	1007883a 	mov	r3,r2
 8002bf8:	008200b4 	movhi	r2,2050
 8002bfc:	10a33c04 	addi	r2,r2,-29456
 8002c00:	10c00885 	stb	r3,34(r2)
    gPB[UDP_SRC_PORT_L_P] = port;
 8002c04:	e0bfff0b 	ldhu	r2,-4(fp)
 8002c08:	1007883a 	mov	r3,r2
 8002c0c:	008200b4 	movhi	r2,2050
 8002c10:	10a33c04 	addi	r2,r2,-29456
 8002c14:	10c008c5 	stb	r3,35(r2)
    gPB[UDP_LEN_H_P] = (UDP_HEADER_LEN+datalen) >> 8;
 8002c18:	e0bffe03 	ldbu	r2,-8(fp)
 8002c1c:	10800204 	addi	r2,r2,8
 8002c20:	1005d23a 	srai	r2,r2,8
 8002c24:	1007883a 	mov	r3,r2
 8002c28:	008200b4 	movhi	r2,2050
 8002c2c:	10a33c04 	addi	r2,r2,-29456
 8002c30:	10c00985 	stb	r3,38(r2)
    gPB[UDP_LEN_L_P] = UDP_HEADER_LEN+datalen;
 8002c34:	e0bffe03 	ldbu	r2,-8(fp)
 8002c38:	10800204 	addi	r2,r2,8
 8002c3c:	1007883a 	mov	r3,r2
 8002c40:	008200b4 	movhi	r2,2050
 8002c44:	10a33c04 	addi	r2,r2,-29456
 8002c48:	10c009c5 	stb	r3,39(r2)
    gPB[UDP_CHECKSUM_H_P] = 0;
 8002c4c:	008200b4 	movhi	r2,2050
 8002c50:	10a33c04 	addi	r2,r2,-29456
 8002c54:	10000a05 	stb	zero,40(r2)
    gPB[UDP_CHECKSUM_L_P] = 0;
 8002c58:	008200b4 	movhi	r2,2050
 8002c5c:	10a33c04 	addi	r2,r2,-29456
 8002c60:	10000a45 	stb	zero,41(r2)
    memcpy(gPB + UDP_DATA_P, data, datalen);
 8002c64:	008200b4 	movhi	r2,2050
 8002c68:	10a34684 	addi	r2,r2,-29414
 8002c6c:	e0fffe03 	ldbu	r3,-8(fp)
 8002c70:	180d883a 	mov	r6,r3
 8002c74:	e17ffd17 	ldw	r5,-12(fp)
 8002c78:	1009883a 	mov	r4,r2
 8002c7c:	8005ad80 	call	8005ad8 <memcpy>
    fill_checksum(UDP_CHECKSUM_H_P, IP_SRC_P, 16 + datalen,1);
 8002c80:	e0bffe03 	ldbu	r2,-8(fp)
 8002c84:	10800404 	addi	r2,r2,16
 8002c88:	10bfffcc 	andi	r2,r2,65535
 8002c8c:	01c00044 	movi	r7,1
 8002c90:	100d883a 	mov	r6,r2
 8002c94:	01400684 	movi	r5,26
 8002c98:	01000a04 	movi	r4,40
 8002c9c:	800227c0 	call	800227c <_ZL13fill_checksumhhth>
    packetSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen);
 8002ca0:	e0bffe03 	ldbu	r2,-8(fp)
 8002ca4:	10800a84 	addi	r2,r2,42
 8002ca8:	10bfffcc 	andi	r2,r2,65535
 8002cac:	1009883a 	mov	r4,r2
 8002cb0:	8001fe80 	call	8001fe8 <_ZN8ENC28J6010packetSendEt>
}
 8002cb4:	0001883a 	nop
 8002cb8:	e037883a 	mov	sp,fp
 8002cbc:	dfc00117 	ldw	ra,4(sp)
 8002cc0:	df000017 	ldw	fp,0(sp)
 8002cc4:	dec00204 	addi	sp,sp,8
 8002cc8:	f800283a 	ret

08002ccc <_ZL24make_tcp_synack_from_synv>:

static void make_tcp_synack_from_syn() {
 8002ccc:	defffe04 	addi	sp,sp,-8
 8002cd0:	dfc00115 	stw	ra,4(sp)
 8002cd4:	df000015 	stw	fp,0(sp)
 8002cd8:	d839883a 	mov	fp,sp
    gPB[IP_TOTLEN_H_P] = 0;
 8002cdc:	008200b4 	movhi	r2,2050
 8002ce0:	10a33c04 	addi	r2,r2,-29456
 8002ce4:	10000405 	stb	zero,16(r2)
    gPB[IP_TOTLEN_L_P] = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
 8002ce8:	008200b4 	movhi	r2,2050
 8002cec:	10a33c04 	addi	r2,r2,-29456
 8002cf0:	00c00b04 	movi	r3,44
 8002cf4:	10c00445 	stb	r3,17(r2)
    make_eth_ip();
 8002cf8:	800279c0 	call	800279c <_ZL11make_eth_ipv>
    gPB[TCP_FLAGS_P] = TCP_FLAGS_SYNACK_V;
 8002cfc:	008200b4 	movhi	r2,2050
 8002d00:	10a33c04 	addi	r2,r2,-29456
 8002d04:	00c00484 	movi	r3,18
 8002d08:	10c00bc5 	stb	r3,47(r2)
    make_tcphead(1,0);
 8002d0c:	000b883a 	mov	r5,zero
 8002d10:	01000044 	movi	r4,1
 8002d14:	80029080 	call	8002908 <_ZL12make_tcpheadth>
    gPB[TCP_SEQ_H_P+0] = 0;
 8002d18:	008200b4 	movhi	r2,2050
 8002d1c:	10a33c04 	addi	r2,r2,-29456
 8002d20:	10000985 	stb	zero,38(r2)
    gPB[TCP_SEQ_H_P+1] = 0;
 8002d24:	008200b4 	movhi	r2,2050
 8002d28:	10a33c04 	addi	r2,r2,-29456
 8002d2c:	100009c5 	stb	zero,39(r2)
    gPB[TCP_SEQ_H_P+2] = seqnum;
 8002d30:	d0e00343 	ldbu	r3,-32755(gp)
 8002d34:	008200b4 	movhi	r2,2050
 8002d38:	10a33c04 	addi	r2,r2,-29456
 8002d3c:	10c00a05 	stb	r3,40(r2)
    gPB[TCP_SEQ_H_P+3] = 0;
 8002d40:	008200b4 	movhi	r2,2050
 8002d44:	10a33c04 	addi	r2,r2,-29456
 8002d48:	10000a45 	stb	zero,41(r2)
    seqnum += 3;
 8002d4c:	d0a00343 	ldbu	r2,-32755(gp)
 8002d50:	108000c4 	addi	r2,r2,3
 8002d54:	d0a00345 	stb	r2,-32755(gp)
    gPB[TCP_OPTIONS_P] = 2;
 8002d58:	008200b4 	movhi	r2,2050
 8002d5c:	10a33c04 	addi	r2,r2,-29456
 8002d60:	00c00084 	movi	r3,2
 8002d64:	10c00d85 	stb	r3,54(r2)
    gPB[TCP_OPTIONS_P+1] = 4;
 8002d68:	008200b4 	movhi	r2,2050
 8002d6c:	10a33c04 	addi	r2,r2,-29456
 8002d70:	00c00104 	movi	r3,4
 8002d74:	10c00dc5 	stb	r3,55(r2)
    gPB[TCP_OPTIONS_P+2] = 0x05;
 8002d78:	008200b4 	movhi	r2,2050
 8002d7c:	10a33c04 	addi	r2,r2,-29456
 8002d80:	00c00144 	movi	r3,5
 8002d84:	10c00e05 	stb	r3,56(r2)
    gPB[TCP_OPTIONS_P+3] = 0x0;
 8002d88:	008200b4 	movhi	r2,2050
 8002d8c:	10a33c04 	addi	r2,r2,-29456
 8002d90:	10000e45 	stb	zero,57(r2)
    gPB[TCP_HEADER_LEN_P] = 0x60;
 8002d94:	008200b4 	movhi	r2,2050
 8002d98:	10a33c04 	addi	r2,r2,-29456
 8002d9c:	00c01804 	movi	r3,96
 8002da0:	10c00b85 	stb	r3,46(r2)
    gPB[TCP_WIN_SIZE] = 0x5; // 1400=0x578
 8002da4:	008200b4 	movhi	r2,2050
 8002da8:	10a33c04 	addi	r2,r2,-29456
 8002dac:	00c00144 	movi	r3,5
 8002db0:	10c00c05 	stb	r3,48(r2)
    gPB[TCP_WIN_SIZE+1] = 0x78;
 8002db4:	008200b4 	movhi	r2,2050
 8002db8:	10a33c04 	addi	r2,r2,-29456
 8002dbc:	00c01e04 	movi	r3,120
 8002dc0:	10c00c45 	stb	r3,49(r2)
    fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN+4,2);
 8002dc4:	01c00084 	movi	r7,2
 8002dc8:	01800804 	movi	r6,32
 8002dcc:	01400684 	movi	r5,26
 8002dd0:	01000c84 	movi	r4,50
 8002dd4:	800227c0 	call	800227c <_ZL13fill_checksumhhth>
    EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN);
 8002dd8:	01000e84 	movi	r4,58
 8002ddc:	8001fe80 	call	8001fe8 <_ZN8ENC28J6010packetSendEt>
}
 8002de0:	0001883a 	nop
 8002de4:	e037883a 	mov	sp,fp
 8002de8:	dfc00117 	ldw	ra,4(sp)
 8002dec:	df000017 	ldw	fp,0(sp)
 8002df0:	dec00204 	addi	sp,sp,8
 8002df4:	f800283a 	ret

08002df8 <_ZN9EtherCard19getTcpPayloadLengthEv>:

uint16_t EtherCard::getTcpPayloadLength() {
 8002df8:	defffe04 	addi	sp,sp,-8
 8002dfc:	df000115 	stw	fp,4(sp)
 8002e00:	df000104 	addi	fp,sp,4
    int16_t i = (((int16_t)gPB[IP_TOTLEN_H_P])<<8)|gPB[IP_TOTLEN_L_P];
 8002e04:	008200b4 	movhi	r2,2050
 8002e08:	10a33c04 	addi	r2,r2,-29456
 8002e0c:	10800403 	ldbu	r2,16(r2)
 8002e10:	10803fcc 	andi	r2,r2,255
 8002e14:	1004923a 	slli	r2,r2,8
 8002e18:	1007883a 	mov	r3,r2
 8002e1c:	008200b4 	movhi	r2,2050
 8002e20:	10a33c04 	addi	r2,r2,-29456
 8002e24:	10800443 	ldbu	r2,17(r2)
 8002e28:	10803fcc 	andi	r2,r2,255
 8002e2c:	1884b03a 	or	r2,r3,r2
 8002e30:	e0bfff0d 	sth	r2,-4(fp)
    i -= IP_HEADER_LEN;
 8002e34:	e0bfff0b 	ldhu	r2,-4(fp)
 8002e38:	10bffb04 	addi	r2,r2,-20
 8002e3c:	e0bfff0d 	sth	r2,-4(fp)
    i -= (gPB[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
 8002e40:	e0ffff0b 	ldhu	r3,-4(fp)
 8002e44:	008200b4 	movhi	r2,2050
 8002e48:	10a33c04 	addi	r2,r2,-29456
 8002e4c:	10800b83 	ldbu	r2,46(r2)
 8002e50:	10803fcc 	andi	r2,r2,255
 8002e54:	1005d13a 	srai	r2,r2,4
 8002e58:	1085883a 	add	r2,r2,r2
 8002e5c:	1085883a 	add	r2,r2,r2
 8002e60:	1885c83a 	sub	r2,r3,r2
 8002e64:	e0bfff0d 	sth	r2,-4(fp)
    if (i<=0)
 8002e68:	e0bfff0f 	ldh	r2,-4(fp)
 8002e6c:	00800116 	blt	zero,r2,8002e74 <_ZN9EtherCard19getTcpPayloadLengthEv+0x7c>
        i = 0;
 8002e70:	e03fff0d 	sth	zero,-4(fp)
    return (uint16_t)i;
 8002e74:	e0bfff0b 	ldhu	r2,-4(fp)
}
 8002e78:	e037883a 	mov	sp,fp
 8002e7c:	df000017 	ldw	fp,0(sp)
 8002e80:	dec00104 	addi	sp,sp,4
 8002e84:	f800283a 	ret

08002e88 <_ZL21make_tcp_ack_from_anysh>:

static void make_tcp_ack_from_any(int16_t datlentoack,uint8_t addflags) {
 8002e88:	defffb04 	addi	sp,sp,-20
 8002e8c:	dfc00415 	stw	ra,16(sp)
 8002e90:	df000315 	stw	fp,12(sp)
 8002e94:	df000304 	addi	fp,sp,12
 8002e98:	2007883a 	mov	r3,r4
 8002e9c:	2805883a 	mov	r2,r5
 8002ea0:	e0fffe0d 	sth	r3,-8(fp)
 8002ea4:	e0bfff05 	stb	r2,-4(fp)
    gPB[TCP_FLAGS_P] = TCP_FLAGS_ACK_V|addflags;
 8002ea8:	e0bfff03 	ldbu	r2,-4(fp)
 8002eac:	10800414 	ori	r2,r2,16
 8002eb0:	1007883a 	mov	r3,r2
 8002eb4:	008200b4 	movhi	r2,2050
 8002eb8:	10a33c04 	addi	r2,r2,-29456
 8002ebc:	10c00bc5 	stb	r3,47(r2)
    if (addflags!=TCP_FLAGS_RST_V && datlentoack==0)
 8002ec0:	e0bfff03 	ldbu	r2,-4(fp)
 8002ec4:	10800120 	cmpeqi	r2,r2,4
 8002ec8:	1000041e 	bne	r2,zero,8002edc <_ZL21make_tcp_ack_from_anysh+0x54>
 8002ecc:	e0bffe0f 	ldh	r2,-8(fp)
 8002ed0:	1000021e 	bne	r2,zero,8002edc <_ZL21make_tcp_ack_from_anysh+0x54>
        datlentoack = 1;
 8002ed4:	00800044 	movi	r2,1
 8002ed8:	e0bffe0d 	sth	r2,-8(fp)
    make_tcphead(datlentoack,1); // no options
 8002edc:	e0bffe0b 	ldhu	r2,-8(fp)
 8002ee0:	10bfffcc 	andi	r2,r2,65535
 8002ee4:	01400044 	movi	r5,1
 8002ee8:	1009883a 	mov	r4,r2
 8002eec:	80029080 	call	8002908 <_ZL12make_tcpheadth>
    uint16_t j = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN;
 8002ef0:	00800a04 	movi	r2,40
 8002ef4:	e0bffd0d 	sth	r2,-12(fp)
    gPB[IP_TOTLEN_H_P] = j>>8;
 8002ef8:	e0bffd0b 	ldhu	r2,-12(fp)
 8002efc:	1005d23a 	srai	r2,r2,8
 8002f00:	1007883a 	mov	r3,r2
 8002f04:	008200b4 	movhi	r2,2050
 8002f08:	10a33c04 	addi	r2,r2,-29456
 8002f0c:	10c00405 	stb	r3,16(r2)
    gPB[IP_TOTLEN_L_P] = j;
 8002f10:	e0bffd0b 	ldhu	r2,-12(fp)
 8002f14:	1007883a 	mov	r3,r2
 8002f18:	008200b4 	movhi	r2,2050
 8002f1c:	10a33c04 	addi	r2,r2,-29456
 8002f20:	10c00445 	stb	r3,17(r2)
    make_eth_ip();
 8002f24:	800279c0 	call	800279c <_ZL11make_eth_ipv>
    gPB[TCP_WIN_SIZE] = 0x4; // 1024=0x400, 1280=0x500 2048=0x800 768=0x300
 8002f28:	008200b4 	movhi	r2,2050
 8002f2c:	10a33c04 	addi	r2,r2,-29456
 8002f30:	00c00104 	movi	r3,4
 8002f34:	10c00c05 	stb	r3,48(r2)
    gPB[TCP_WIN_SIZE+1] = 0;
 8002f38:	008200b4 	movhi	r2,2050
 8002f3c:	10a33c04 	addi	r2,r2,-29456
 8002f40:	10000c45 	stb	zero,49(r2)
    fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN,2);
 8002f44:	01c00084 	movi	r7,2
 8002f48:	01800704 	movi	r6,28
 8002f4c:	01400684 	movi	r5,26
 8002f50:	01000c84 	movi	r4,50
 8002f54:	800227c0 	call	800227c <_ZL13fill_checksumhhth>
    EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN);
 8002f58:	01000d84 	movi	r4,54
 8002f5c:	8001fe80 	call	8001fe8 <_ZN8ENC28J6010packetSendEt>
}
 8002f60:	0001883a 	nop
 8002f64:	e037883a 	mov	sp,fp
 8002f68:	dfc00117 	ldw	ra,4(sp)
 8002f6c:	df000017 	ldw	fp,0(sp)
 8002f70:	dec00204 	addi	sp,sp,8
 8002f74:	f800283a 	ret

08002f78 <_ZL30make_tcp_ack_with_data_noflagst>:

static void make_tcp_ack_with_data_noflags(uint16_t dlen) {
 8002f78:	defffc04 	addi	sp,sp,-16
 8002f7c:	dfc00315 	stw	ra,12(sp)
 8002f80:	df000215 	stw	fp,8(sp)
 8002f84:	df000204 	addi	fp,sp,8
 8002f88:	2005883a 	mov	r2,r4
 8002f8c:	e0bfff0d 	sth	r2,-4(fp)
    uint16_t j = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen;
 8002f90:	e0bfff0b 	ldhu	r2,-4(fp)
 8002f94:	10800a04 	addi	r2,r2,40
 8002f98:	e0bffe0d 	sth	r2,-8(fp)
    gPB[IP_TOTLEN_H_P] = j>>8;
 8002f9c:	e0bffe0b 	ldhu	r2,-8(fp)
 8002fa0:	1005d23a 	srai	r2,r2,8
 8002fa4:	1007883a 	mov	r3,r2
 8002fa8:	008200b4 	movhi	r2,2050
 8002fac:	10a33c04 	addi	r2,r2,-29456
 8002fb0:	10c00405 	stb	r3,16(r2)
    gPB[IP_TOTLEN_L_P] = j;
 8002fb4:	e0bffe0b 	ldhu	r2,-8(fp)
 8002fb8:	1007883a 	mov	r3,r2
 8002fbc:	008200b4 	movhi	r2,2050
 8002fc0:	10a33c04 	addi	r2,r2,-29456
 8002fc4:	10c00445 	stb	r3,17(r2)
    fill_ip_hdr_checksum();
 8002fc8:	800271c0 	call	800271c <_ZL20fill_ip_hdr_checksumv>
    gPB[TCP_CHECKSUM_H_P] = 0;
 8002fcc:	008200b4 	movhi	r2,2050
 8002fd0:	10a33c04 	addi	r2,r2,-29456
 8002fd4:	10000c85 	stb	zero,50(r2)
    gPB[TCP_CHECKSUM_L_P] = 0;
 8002fd8:	008200b4 	movhi	r2,2050
 8002fdc:	10a33c04 	addi	r2,r2,-29456
 8002fe0:	10000cc5 	stb	zero,51(r2)
    fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN+dlen,2);
 8002fe4:	e0bfff0b 	ldhu	r2,-4(fp)
 8002fe8:	10800704 	addi	r2,r2,28
 8002fec:	10bfffcc 	andi	r2,r2,65535
 8002ff0:	01c00084 	movi	r7,2
 8002ff4:	100d883a 	mov	r6,r2
 8002ff8:	01400684 	movi	r5,26
 8002ffc:	01000c84 	movi	r4,50
 8003000:	800227c0 	call	800227c <_ZL13fill_checksumhhth>
    EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN);
 8003004:	e0bfff0b 	ldhu	r2,-4(fp)
 8003008:	10800d84 	addi	r2,r2,54
 800300c:	10bfffcc 	andi	r2,r2,65535
 8003010:	1009883a 	mov	r4,r2
 8003014:	8001fe80 	call	8001fe8 <_ZN8ENC28J6010packetSendEt>
}
 8003018:	0001883a 	nop
 800301c:	e037883a 	mov	sp,fp
 8003020:	dfc00117 	ldw	ra,4(sp)
 8003024:	df000017 	ldw	fp,0(sp)
 8003028:	dec00204 	addi	sp,sp,8
 800302c:	f800283a 	ret

08003030 <_ZN9EtherCard15httpServerReplyEt>:

void EtherCard::httpServerReply (uint16_t dlen) {
 8003030:	defffd04 	addi	sp,sp,-12
 8003034:	dfc00215 	stw	ra,8(sp)
 8003038:	df000115 	stw	fp,4(sp)
 800303c:	df000104 	addi	fp,sp,4
 8003040:	2005883a 	mov	r2,r4
 8003044:	e0bfff0d 	sth	r2,-4(fp)
    make_tcp_ack_from_any(info_data_len,0); // send ack for http get
 8003048:	d0a70a8b 	ldhu	r2,-25558(gp)
 800304c:	10bfffcc 	andi	r2,r2,65535
 8003050:	10a0001c 	xori	r2,r2,32768
 8003054:	10a00004 	addi	r2,r2,-32768
 8003058:	000b883a 	mov	r5,zero
 800305c:	1009883a 	mov	r4,r2
 8003060:	8002e880 	call	8002e88 <_ZL21make_tcp_ack_from_anysh>
    gPB[TCP_FLAGS_P] = TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V;
 8003064:	008200b4 	movhi	r2,2050
 8003068:	10a33c04 	addi	r2,r2,-29456
 800306c:	00c00644 	movi	r3,25
 8003070:	10c00bc5 	stb	r3,47(r2)
    make_tcp_ack_with_data_noflags(dlen); // send data
 8003074:	e0bfff0b 	ldhu	r2,-4(fp)
 8003078:	1009883a 	mov	r4,r2
 800307c:	8002f780 	call	8002f78 <_ZL30make_tcp_ack_with_data_noflagst>
}
 8003080:	0001883a 	nop
 8003084:	e037883a 	mov	sp,fp
 8003088:	dfc00117 	ldw	ra,4(sp)
 800308c:	df000017 	ldw	fp,0(sp)
 8003090:	dec00204 	addi	sp,sp,8
 8003094:	f800283a 	ret

08003098 <_ZL16getBigEndianLongh>:

static uint32_t getBigEndianLong(byte offs) { //get the sequence number of packets after an ack from GET
 8003098:	defffe04 	addi	sp,sp,-8
 800309c:	df000115 	stw	fp,4(sp)
 80030a0:	df000104 	addi	fp,sp,4
 80030a4:	2005883a 	mov	r2,r4
 80030a8:	e0bfff05 	stb	r2,-4(fp)
    return (((unsigned long)gPB[offs]*256+gPB[offs+1])*256+gPB[offs+2])*256+gPB[offs+3];
 80030ac:	e0ffff03 	ldbu	r3,-4(fp)
 80030b0:	008200b4 	movhi	r2,2050
 80030b4:	10a33c04 	addi	r2,r2,-29456
 80030b8:	10c5883a 	add	r2,r2,r3
 80030bc:	10800003 	ldbu	r2,0(r2)
 80030c0:	10803fcc 	andi	r2,r2,255
 80030c4:	1006923a 	slli	r3,r2,8
 80030c8:	e0bfff03 	ldbu	r2,-4(fp)
 80030cc:	11000044 	addi	r4,r2,1
 80030d0:	008200b4 	movhi	r2,2050
 80030d4:	10a33c04 	addi	r2,r2,-29456
 80030d8:	1105883a 	add	r2,r2,r4
 80030dc:	10800003 	ldbu	r2,0(r2)
 80030e0:	10803fcc 	andi	r2,r2,255
 80030e4:	1885883a 	add	r2,r3,r2
 80030e8:	1006923a 	slli	r3,r2,8
 80030ec:	e0bfff03 	ldbu	r2,-4(fp)
 80030f0:	11000084 	addi	r4,r2,2
 80030f4:	008200b4 	movhi	r2,2050
 80030f8:	10a33c04 	addi	r2,r2,-29456
 80030fc:	1105883a 	add	r2,r2,r4
 8003100:	10800003 	ldbu	r2,0(r2)
 8003104:	10803fcc 	andi	r2,r2,255
 8003108:	1885883a 	add	r2,r3,r2
 800310c:	1006923a 	slli	r3,r2,8
 8003110:	e0bfff03 	ldbu	r2,-4(fp)
 8003114:	110000c4 	addi	r4,r2,3
 8003118:	008200b4 	movhi	r2,2050
 800311c:	10a33c04 	addi	r2,r2,-29456
 8003120:	1105883a 	add	r2,r2,r4
 8003124:	10800003 	ldbu	r2,0(r2)
 8003128:	10803fcc 	andi	r2,r2,255
 800312c:	1885883a 	add	r2,r3,r2
} //thanks to mstuetz for the missing (unsigned long)
 8003130:	e037883a 	mov	sp,fp
 8003134:	df000017 	ldw	fp,0(sp)
 8003138:	dec00104 	addi	sp,sp,4
 800313c:	f800283a 	ret

08003140 <_ZL17setSequenceNumberm>:

static void setSequenceNumber(uint32_t seq) {
 8003140:	defffe04 	addi	sp,sp,-8
 8003144:	df000115 	stw	fp,4(sp)
 8003148:	df000104 	addi	fp,sp,4
 800314c:	e13fff15 	stw	r4,-4(fp)
    gPB[TCP_SEQ_H_P]   = (seq & 0xff000000 ) >> 24;
 8003150:	e0bfff17 	ldw	r2,-4(fp)
 8003154:	1004d63a 	srli	r2,r2,24
 8003158:	1007883a 	mov	r3,r2
 800315c:	008200b4 	movhi	r2,2050
 8003160:	10a33c04 	addi	r2,r2,-29456
 8003164:	10c00985 	stb	r3,38(r2)
    gPB[TCP_SEQ_H_P+1] = (seq & 0xff0000 ) >> 16;
 8003168:	e0bfff17 	ldw	r2,-4(fp)
 800316c:	10803fec 	andhi	r2,r2,255
 8003170:	1004d43a 	srli	r2,r2,16
 8003174:	1007883a 	mov	r3,r2
 8003178:	008200b4 	movhi	r2,2050
 800317c:	10a33c04 	addi	r2,r2,-29456
 8003180:	10c009c5 	stb	r3,39(r2)
    gPB[TCP_SEQ_H_P+2] = (seq & 0xff00 ) >> 8;
 8003184:	e0bfff17 	ldw	r2,-4(fp)
 8003188:	10bfc00c 	andi	r2,r2,65280
 800318c:	1004d23a 	srli	r2,r2,8
 8003190:	1007883a 	mov	r3,r2
 8003194:	008200b4 	movhi	r2,2050
 8003198:	10a33c04 	addi	r2,r2,-29456
 800319c:	10c00a05 	stb	r3,40(r2)
    gPB[TCP_SEQ_H_P+3] = (seq & 0xff );
 80031a0:	e0bfff17 	ldw	r2,-4(fp)
 80031a4:	1007883a 	mov	r3,r2
 80031a8:	008200b4 	movhi	r2,2050
 80031ac:	10a33c04 	addi	r2,r2,-29456
 80031b0:	10c00a45 	stb	r3,41(r2)
}
 80031b4:	0001883a 	nop
 80031b8:	e037883a 	mov	sp,fp
 80031bc:	df000017 	ldw	fp,0(sp)
 80031c0:	dec00104 	addi	sp,sp,4
 80031c4:	f800283a 	ret

080031c8 <_ZN9EtherCard17getSequenceNumberEv>:

uint32_t EtherCard::getSequenceNumber() {
 80031c8:	defffe04 	addi	sp,sp,-8
 80031cc:	dfc00115 	stw	ra,4(sp)
 80031d0:	df000015 	stw	fp,0(sp)
 80031d4:	d839883a 	mov	fp,sp
    return getBigEndianLong(TCP_SEQ_H_P);
 80031d8:	01000984 	movi	r4,38
 80031dc:	80030980 	call	8003098 <_ZL16getBigEndianLongh>
}
 80031e0:	e037883a 	mov	sp,fp
 80031e4:	dfc00117 	ldw	ra,4(sp)
 80031e8:	df000017 	ldw	fp,0(sp)
 80031ec:	dec00204 	addi	sp,sp,8
 80031f0:	f800283a 	ret

080031f4 <_ZN9EtherCard18httpServerReplyAckEv>:

void EtherCard::httpServerReplyAck () {
 80031f4:	defffe04 	addi	sp,sp,-8
 80031f8:	dfc00115 	stw	ra,4(sp)
 80031fc:	df000015 	stw	fp,0(sp)
 8003200:	d839883a 	mov	fp,sp
    make_tcp_ack_from_any(getTcpPayloadLength(),0); // send ack for http request
 8003204:	8002df80 	call	8002df8 <_ZN9EtherCard19getTcpPayloadLengthEv>
 8003208:	10bfffcc 	andi	r2,r2,65535
 800320c:	10a0001c 	xori	r2,r2,32768
 8003210:	10a00004 	addi	r2,r2,-32768
 8003214:	000b883a 	mov	r5,zero
 8003218:	1009883a 	mov	r4,r2
 800321c:	8002e880 	call	8002e88 <_ZL21make_tcp_ack_from_anysh>
    SEQ = getSequenceNumber(); //get the sequence number of packets after an ack from GET
 8003220:	80031c80 	call	80031c8 <_ZN9EtherCard17getSequenceNumberEv>
 8003224:	d0a70c15 	stw	r2,-25552(gp)
}
 8003228:	0001883a 	nop
 800322c:	e037883a 	mov	sp,fp
 8003230:	dfc00117 	ldw	ra,4(sp)
 8003234:	df000017 	ldw	fp,0(sp)
 8003238:	dec00204 	addi	sp,sp,8
 800323c:	f800283a 	ret

08003240 <_ZN9EtherCard26httpServerReply_with_flagsEth>:

void EtherCard::httpServerReply_with_flags (uint16_t dlen , uint8_t flags) {
 8003240:	defffc04 	addi	sp,sp,-16
 8003244:	dfc00315 	stw	ra,12(sp)
 8003248:	df000215 	stw	fp,8(sp)
 800324c:	df000204 	addi	fp,sp,8
 8003250:	2007883a 	mov	r3,r4
 8003254:	2805883a 	mov	r2,r5
 8003258:	e0fffe0d 	sth	r3,-8(fp)
 800325c:	e0bfff05 	stb	r2,-4(fp)
    setSequenceNumber(SEQ);
 8003260:	d0a70c17 	ldw	r2,-25552(gp)
 8003264:	1009883a 	mov	r4,r2
 8003268:	80031400 	call	8003140 <_ZL17setSequenceNumberm>
    gPB[TCP_FLAGS_P] = flags; // final packet
 800326c:	008200b4 	movhi	r2,2050
 8003270:	10a33c04 	addi	r2,r2,-29456
 8003274:	e0ffff03 	ldbu	r3,-4(fp)
 8003278:	10c00bc5 	stb	r3,47(r2)
    make_tcp_ack_with_data_noflags(dlen); // send data
 800327c:	e0bffe0b 	ldhu	r2,-8(fp)
 8003280:	1009883a 	mov	r4,r2
 8003284:	8002f780 	call	8002f78 <_ZL30make_tcp_ack_with_data_noflagst>
    SEQ=SEQ+dlen;
 8003288:	e0fffe0b 	ldhu	r3,-8(fp)
 800328c:	d0a70c17 	ldw	r2,-25552(gp)
 8003290:	1885883a 	add	r2,r3,r2
 8003294:	d0a70c15 	stw	r2,-25552(gp)
}
 8003298:	0001883a 	nop
 800329c:	e037883a 	mov	sp,fp
 80032a0:	dfc00117 	ldw	ra,4(sp)
 80032a4:	df000017 	ldw	fp,0(sp)
 80032a8:	dec00204 	addi	sp,sp,8
 80032ac:	f800283a 	ret

080032b0 <_ZN9EtherCard17clientIcmpRequestEPKh>:

void EtherCard::clientIcmpRequest(const uint8_t *destip) {
 80032b0:	defffd04 	addi	sp,sp,-12
 80032b4:	dfc00215 	stw	ra,8(sp)
 80032b8:	df000115 	stw	fp,4(sp)
 80032bc:	df000104 	addi	fp,sp,4
 80032c0:	e13fff15 	stw	r4,-4(fp)
    if(is_lan(EtherCard::myip, destip)) {
 80032c4:	e17fff17 	ldw	r5,-4(fp)
 80032c8:	d126e6c4 	addi	r4,gp,-25701
 80032cc:	80024f40 	call	80024f4 <_ZL6is_lanPKhS0_>
 80032d0:	10803fcc 	andi	r2,r2,255
 80032d4:	10000426 	beq	r2,zero,80032e8 <_ZN9EtherCard17clientIcmpRequestEPKh+0x38>
        setMACandIPs(destmacaddr, destip);
 80032d8:	e17fff17 	ldw	r5,-4(fp)
 80032dc:	d1270604 	addi	r4,gp,-25576
 80032e0:	80024500 	call	8002450 <_ZL12setMACandIPsPKhS0_>
 80032e4:	00000306 	br	80032f4 <_ZN9EtherCard17clientIcmpRequestEPKh+0x44>
    } else {
        setMACandIPs(gwmacaddr, destip);
 80032e8:	e17fff17 	ldw	r5,-4(fp)
 80032ec:	d1270884 	addi	r4,gp,-25566
 80032f0:	80024500 	call	8002450 <_ZL12setMACandIPsPKhS0_>
    }
    gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 80032f4:	008200b4 	movhi	r2,2050
 80032f8:	10a33c04 	addi	r2,r2,-29456
 80032fc:	00c00204 	movi	r3,8
 8003300:	10c00305 	stb	r3,12(r2)
    gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 8003304:	008200b4 	movhi	r2,2050
 8003308:	10a33c04 	addi	r2,r2,-29456
 800330c:	10000345 	stb	zero,13(r2)
    memcpy_P(gPB + IP_P,iphdr,sizeof iphdr);
 8003310:	008200b4 	movhi	r2,2050
 8003314:	10a33f84 	addi	r2,r2,-29442
 8003318:	01800244 	movi	r6,9
 800331c:	01420074 	movhi	r5,2049
 8003320:	29547604 	addi	r5,r5,20952
 8003324:	1009883a 	mov	r4,r2
 8003328:	80022380 	call	8002238 <_Z8memcpy_PPvPKvj>
    gPB[IP_TOTLEN_L_P] = 0x54;
 800332c:	008200b4 	movhi	r2,2050
 8003330:	10a33c04 	addi	r2,r2,-29456
 8003334:	00c01504 	movi	r3,84
 8003338:	10c00445 	stb	r3,17(r2)
    gPB[IP_PROTO_P] = IP_PROTO_ICMP_V;
 800333c:	008200b4 	movhi	r2,2050
 8003340:	10a33c04 	addi	r2,r2,-29456
 8003344:	00c00044 	movi	r3,1
 8003348:	10c005c5 	stb	r3,23(r2)
    fill_ip_hdr_checksum();
 800334c:	800271c0 	call	800271c <_ZL20fill_ip_hdr_checksumv>
    gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREQUEST_V;
 8003350:	008200b4 	movhi	r2,2050
 8003354:	10a33c04 	addi	r2,r2,-29456
 8003358:	00c00204 	movi	r3,8
 800335c:	10c00885 	stb	r3,34(r2)
    gPB[ICMP_TYPE_P+1] = 0; // code
 8003360:	008200b4 	movhi	r2,2050
 8003364:	10a33c04 	addi	r2,r2,-29456
 8003368:	100008c5 	stb	zero,35(r2)
    gPB[ICMP_CHECKSUM_H_P] = 0;
 800336c:	008200b4 	movhi	r2,2050
 8003370:	10a33c04 	addi	r2,r2,-29456
 8003374:	10000905 	stb	zero,36(r2)
    gPB[ICMP_CHECKSUM_L_P] = 0;
 8003378:	008200b4 	movhi	r2,2050
 800337c:	10a33c04 	addi	r2,r2,-29456
 8003380:	10000945 	stb	zero,37(r2)
    gPB[ICMP_IDENT_H_P] = 5; // some number
 8003384:	008200b4 	movhi	r2,2050
 8003388:	10a33c04 	addi	r2,r2,-29456
 800338c:	00c00144 	movi	r3,5
 8003390:	10c00985 	stb	r3,38(r2)
    gPB[ICMP_IDENT_L_P] = EtherCard::myip[3]; // last byte of my IP
 8003394:	d0e6e783 	ldbu	r3,-25698(gp)
 8003398:	008200b4 	movhi	r2,2050
 800339c:	10a33c04 	addi	r2,r2,-29456
 80033a0:	10c009c5 	stb	r3,39(r2)
    gPB[ICMP_IDENT_L_P+1] = 0; // seq number, high byte
 80033a4:	008200b4 	movhi	r2,2050
 80033a8:	10a33c04 	addi	r2,r2,-29456
 80033ac:	10000a05 	stb	zero,40(r2)
    gPB[ICMP_IDENT_L_P+2] = 1; // seq number, low byte, we send only 1 ping at a time
 80033b0:	008200b4 	movhi	r2,2050
 80033b4:	10a33c04 	addi	r2,r2,-29456
 80033b8:	00c00044 	movi	r3,1
 80033bc:	10c00a45 	stb	r3,41(r2)
    memset(gPB + ICMP_DATA_P, PINGPATTERN, 56);
 80033c0:	008200b4 	movhi	r2,2050
 80033c4:	10a34684 	addi	r2,r2,-29414
 80033c8:	01800e04 	movi	r6,56
 80033cc:	01401084 	movi	r5,66
 80033d0:	1009883a 	mov	r4,r2
 80033d4:	8005c200 	call	8005c20 <memset>
    fill_checksum(ICMP_CHECKSUM_H_P, ICMP_TYPE_P, 56+8,0);
 80033d8:	000f883a 	mov	r7,zero
 80033dc:	01801004 	movi	r6,64
 80033e0:	01400884 	movi	r5,34
 80033e4:	01000904 	movi	r4,36
 80033e8:	800227c0 	call	800227c <_ZL13fill_checksumhhth>
    packetSend(98);
 80033ec:	01001884 	movi	r4,98
 80033f0:	8001fe80 	call	8001fe8 <_ZN8ENC28J6010packetSendEt>
}
 80033f4:	0001883a 	nop
 80033f8:	e037883a 	mov	sp,fp
 80033fc:	dfc00117 	ldw	ra,4(sp)
 8003400:	df000017 	ldw	fp,0(sp)
 8003404:	dec00204 	addi	sp,sp,8
 8003408:	f800283a 	ret

0800340c <_ZN9EtherCard10ntpRequestEPhh>:

void EtherCard::ntpRequest (uint8_t *ntpip,uint8_t srcport) {
 800340c:	defffc04 	addi	sp,sp,-16
 8003410:	dfc00315 	stw	ra,12(sp)
 8003414:	df000215 	stw	fp,8(sp)
 8003418:	df000204 	addi	fp,sp,8
 800341c:	e13ffe15 	stw	r4,-8(fp)
 8003420:	2805883a 	mov	r2,r5
 8003424:	e0bfff05 	stb	r2,-4(fp)
    if(is_lan(myip, ntpip)) {
 8003428:	e17ffe17 	ldw	r5,-8(fp)
 800342c:	d126e6c4 	addi	r4,gp,-25701
 8003430:	80024f40 	call	80024f4 <_ZL6is_lanPKhS0_>
 8003434:	10803fcc 	andi	r2,r2,255
 8003438:	10000426 	beq	r2,zero,800344c <_ZN9EtherCard10ntpRequestEPhh+0x40>
        setMACandIPs(destmacaddr, ntpip);
 800343c:	e17ffe17 	ldw	r5,-8(fp)
 8003440:	d1270604 	addi	r4,gp,-25576
 8003444:	80024500 	call	8002450 <_ZL12setMACandIPsPKhS0_>
 8003448:	00000306 	br	8003458 <_ZN9EtherCard10ntpRequestEPhh+0x4c>
    } else {
        setMACandIPs(gwmacaddr, ntpip);
 800344c:	e17ffe17 	ldw	r5,-8(fp)
 8003450:	d1270884 	addi	r4,gp,-25566
 8003454:	80024500 	call	8002450 <_ZL12setMACandIPsPKhS0_>
    }
    gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 8003458:	008200b4 	movhi	r2,2050
 800345c:	10a33c04 	addi	r2,r2,-29456
 8003460:	00c00204 	movi	r3,8
 8003464:	10c00305 	stb	r3,12(r2)
    gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 8003468:	008200b4 	movhi	r2,2050
 800346c:	10a33c04 	addi	r2,r2,-29456
 8003470:	10000345 	stb	zero,13(r2)
    memcpy_P(gPB + IP_P,iphdr,sizeof iphdr);
 8003474:	008200b4 	movhi	r2,2050
 8003478:	10a33f84 	addi	r2,r2,-29442
 800347c:	01800244 	movi	r6,9
 8003480:	01420074 	movhi	r5,2049
 8003484:	29547604 	addi	r5,r5,20952
 8003488:	1009883a 	mov	r4,r2
 800348c:	80022380 	call	8002238 <_Z8memcpy_PPvPKvj>
    gPB[IP_TOTLEN_L_P] = 0x4c;
 8003490:	008200b4 	movhi	r2,2050
 8003494:	10a33c04 	addi	r2,r2,-29456
 8003498:	00c01304 	movi	r3,76
 800349c:	10c00445 	stb	r3,17(r2)
    gPB[IP_PROTO_P] = IP_PROTO_UDP_V;
 80034a0:	008200b4 	movhi	r2,2050
 80034a4:	10a33c04 	addi	r2,r2,-29456
 80034a8:	00c00444 	movi	r3,17
 80034ac:	10c005c5 	stb	r3,23(r2)
    fill_ip_hdr_checksum();
 80034b0:	800271c0 	call	800271c <_ZL20fill_ip_hdr_checksumv>
    gPB[UDP_DST_PORT_H_P] = 0;
 80034b4:	008200b4 	movhi	r2,2050
 80034b8:	10a33c04 	addi	r2,r2,-29456
 80034bc:	10000905 	stb	zero,36(r2)
    gPB[UDP_DST_PORT_L_P] = NTP_PORT; // ntp = 123
 80034c0:	008200b4 	movhi	r2,2050
 80034c4:	10a33c04 	addi	r2,r2,-29456
 80034c8:	00c01ec4 	movi	r3,123
 80034cc:	10c00945 	stb	r3,37(r2)
    gPB[UDP_SRC_PORT_H_P] = 10;
 80034d0:	008200b4 	movhi	r2,2050
 80034d4:	10a33c04 	addi	r2,r2,-29456
 80034d8:	00c00284 	movi	r3,10
 80034dc:	10c00885 	stb	r3,34(r2)
    gPB[UDP_SRC_PORT_L_P] = srcport; // lower 8 bit of src port
 80034e0:	008200b4 	movhi	r2,2050
 80034e4:	10a33c04 	addi	r2,r2,-29456
 80034e8:	e0ffff03 	ldbu	r3,-4(fp)
 80034ec:	10c008c5 	stb	r3,35(r2)
    gPB[UDP_LEN_H_P] = 0;
 80034f0:	008200b4 	movhi	r2,2050
 80034f4:	10a33c04 	addi	r2,r2,-29456
 80034f8:	10000985 	stb	zero,38(r2)
    gPB[UDP_LEN_L_P] = 56; // fixed len
 80034fc:	008200b4 	movhi	r2,2050
 8003500:	10a33c04 	addi	r2,r2,-29456
 8003504:	00c00e04 	movi	r3,56
 8003508:	10c009c5 	stb	r3,39(r2)
    gPB[UDP_CHECKSUM_H_P] = 0;
 800350c:	008200b4 	movhi	r2,2050
 8003510:	10a33c04 	addi	r2,r2,-29456
 8003514:	10000a05 	stb	zero,40(r2)
    gPB[UDP_CHECKSUM_L_P] = 0;
 8003518:	008200b4 	movhi	r2,2050
 800351c:	10a33c04 	addi	r2,r2,-29456
 8003520:	10000a45 	stb	zero,41(r2)
    memset(gPB + UDP_DATA_P, 0, 48);
 8003524:	008200b4 	movhi	r2,2050
 8003528:	10a34684 	addi	r2,r2,-29414
 800352c:	01800c04 	movi	r6,48
 8003530:	000b883a 	mov	r5,zero
 8003534:	1009883a 	mov	r4,r2
 8003538:	8005c200 	call	8005c20 <memset>
    memcpy_P(gPB + UDP_DATA_P,ntpreqhdr,10);
 800353c:	008200b4 	movhi	r2,2050
 8003540:	10a34684 	addi	r2,r2,-29414
 8003544:	01800284 	movi	r6,10
 8003548:	01420074 	movhi	r5,2049
 800354c:	29547844 	addi	r5,r5,20961
 8003550:	1009883a 	mov	r4,r2
 8003554:	80022380 	call	8002238 <_Z8memcpy_PPvPKvj>

    fill_checksum(UDP_CHECKSUM_H_P, IP_SRC_P, 16 + 48,1);
 8003558:	01c00044 	movi	r7,1
 800355c:	01801004 	movi	r6,64
 8003560:	01400684 	movi	r5,26
 8003564:	01000a04 	movi	r4,40
 8003568:	800227c0 	call	800227c <_ZL13fill_checksumhhth>
    packetSend(90);
 800356c:	01001684 	movi	r4,90
 8003570:	8001fe80 	call	8001fe8 <_ZN8ENC28J6010packetSendEt>
}
 8003574:	0001883a 	nop
 8003578:	e037883a 	mov	sp,fp
 800357c:	dfc00117 	ldw	ra,4(sp)
 8003580:	df000017 	ldw	fp,0(sp)
 8003584:	dec00204 	addi	sp,sp,8
 8003588:	f800283a 	ret

0800358c <_ZN9EtherCard16ntpProcessAnswerEPmh>:

uint8_t EtherCard::ntpProcessAnswer (uint32_t *time,uint8_t dstport_l) {
 800358c:	defffd04 	addi	sp,sp,-12
 8003590:	df000215 	stw	fp,8(sp)
 8003594:	df000204 	addi	fp,sp,8
 8003598:	e13ffe15 	stw	r4,-8(fp)
 800359c:	2805883a 	mov	r2,r5
 80035a0:	e0bfff05 	stb	r2,-4(fp)
    if ((dstport_l && gPB[UDP_DST_PORT_L_P]!=dstport_l) || gPB[UDP_LEN_H_P]!=0 ||
 80035a4:	e0bfff03 	ldbu	r2,-4(fp)
 80035a8:	10000626 	beq	r2,zero,80035c4 <_ZN9EtherCard16ntpProcessAnswerEPmh+0x38>
 80035ac:	008200b4 	movhi	r2,2050
 80035b0:	10a33c04 	addi	r2,r2,-29456
 80035b4:	10800943 	ldbu	r2,37(r2)
 80035b8:	10c03fcc 	andi	r3,r2,255
 80035bc:	e0bfff03 	ldbu	r2,-4(fp)
 80035c0:	1880111e 	bne	r3,r2,8003608 <_ZN9EtherCard16ntpProcessAnswerEPmh+0x7c>
 80035c4:	008200b4 	movhi	r2,2050
 80035c8:	10a33c04 	addi	r2,r2,-29456
 80035cc:	10800983 	ldbu	r2,38(r2)
 80035d0:	10803fcc 	andi	r2,r2,255
 80035d4:	10000c1e 	bne	r2,zero,8003608 <_ZN9EtherCard16ntpProcessAnswerEPmh+0x7c>
            gPB[UDP_LEN_L_P]!=56 || gPB[UDP_SRC_PORT_L_P]!=0x7b)
 80035d8:	008200b4 	movhi	r2,2050
 80035dc:	10a33c04 	addi	r2,r2,-29456
 80035e0:	108009c3 	ldbu	r2,39(r2)
    fill_checksum(UDP_CHECKSUM_H_P, IP_SRC_P, 16 + 48,1);
    packetSend(90);
}

uint8_t EtherCard::ntpProcessAnswer (uint32_t *time,uint8_t dstport_l) {
    if ((dstport_l && gPB[UDP_DST_PORT_L_P]!=dstport_l) || gPB[UDP_LEN_H_P]!=0 ||
 80035e4:	10803fcc 	andi	r2,r2,255
 80035e8:	10800e18 	cmpnei	r2,r2,56
 80035ec:	1000061e 	bne	r2,zero,8003608 <_ZN9EtherCard16ntpProcessAnswerEPmh+0x7c>
            gPB[UDP_LEN_L_P]!=56 || gPB[UDP_SRC_PORT_L_P]!=0x7b)
 80035f0:	008200b4 	movhi	r2,2050
 80035f4:	10a33c04 	addi	r2,r2,-29456
 80035f8:	108008c3 	ldbu	r2,35(r2)
 80035fc:	10803fcc 	andi	r2,r2,255
 8003600:	10801ee0 	cmpeqi	r2,r2,123
 8003604:	1000021e 	bne	r2,zero,8003610 <_ZN9EtherCard16ntpProcessAnswerEPmh+0x84>
        return 0;
 8003608:	0005883a 	mov	r2,zero
 800360c:	00001806 	br	8003670 <_ZN9EtherCard16ntpProcessAnswerEPmh+0xe4>
    ((uint8_t*) time)[3] = gPB[0x52];
 8003610:	e0bffe17 	ldw	r2,-8(fp)
 8003614:	10c000c4 	addi	r3,r2,3
 8003618:	008200b4 	movhi	r2,2050
 800361c:	10a33c04 	addi	r2,r2,-29456
 8003620:	10801483 	ldbu	r2,82(r2)
 8003624:	18800005 	stb	r2,0(r3)
    ((uint8_t*) time)[2] = gPB[0x53];
 8003628:	e0bffe17 	ldw	r2,-8(fp)
 800362c:	10c00084 	addi	r3,r2,2
 8003630:	008200b4 	movhi	r2,2050
 8003634:	10a33c04 	addi	r2,r2,-29456
 8003638:	108014c3 	ldbu	r2,83(r2)
 800363c:	18800005 	stb	r2,0(r3)
    ((uint8_t*) time)[1] = gPB[0x54];
 8003640:	e0bffe17 	ldw	r2,-8(fp)
 8003644:	10c00044 	addi	r3,r2,1
 8003648:	008200b4 	movhi	r2,2050
 800364c:	10a33c04 	addi	r2,r2,-29456
 8003650:	10801503 	ldbu	r2,84(r2)
 8003654:	18800005 	stb	r2,0(r3)
    ((uint8_t*) time)[0] = gPB[0x55];
 8003658:	008200b4 	movhi	r2,2050
 800365c:	10a33c04 	addi	r2,r2,-29456
 8003660:	10c01543 	ldbu	r3,85(r2)
 8003664:	e0bffe17 	ldw	r2,-8(fp)
 8003668:	10c00005 	stb	r3,0(r2)
    return 1;
 800366c:	00800044 	movi	r2,1
}
 8003670:	e037883a 	mov	sp,fp
 8003674:	df000017 	ldw	fp,0(sp)
 8003678:	dec00104 	addi	sp,sp,4
 800367c:	f800283a 	ret

08003680 <_ZN9EtherCard10udpPrepareEtPKht>:

void EtherCard::udpPrepare (uint16_t sport, const uint8_t *dip, uint16_t dport) {
 8003680:	defffb04 	addi	sp,sp,-20
 8003684:	dfc00415 	stw	ra,16(sp)
 8003688:	df000315 	stw	fp,12(sp)
 800368c:	df000304 	addi	fp,sp,12
 8003690:	2007883a 	mov	r3,r4
 8003694:	e17ffe15 	stw	r5,-8(fp)
 8003698:	3005883a 	mov	r2,r6
 800369c:	e0fffd0d 	sth	r3,-12(fp)
 80036a0:	e0bfff0d 	sth	r2,-4(fp)
    if(is_lan(myip, dip)) {                    // this works because both dns mac and destinations mac are stored in same variable - destmacaddr
 80036a4:	e17ffe17 	ldw	r5,-8(fp)
 80036a8:	d126e6c4 	addi	r4,gp,-25701
 80036ac:	80024f40 	call	80024f4 <_ZL6is_lanPKhS0_>
 80036b0:	10803fcc 	andi	r2,r2,255
 80036b4:	10000426 	beq	r2,zero,80036c8 <_ZN9EtherCard10udpPrepareEtPKht+0x48>
        setMACandIPs(destmacaddr, dip);        // at different times. The program could have separate variable for dns mac, then here should be
 80036b8:	e17ffe17 	ldw	r5,-8(fp)
 80036bc:	d1270604 	addi	r4,gp,-25576
 80036c0:	80024500 	call	8002450 <_ZL12setMACandIPsPKhS0_>
 80036c4:	00000306 	br	80036d4 <_ZN9EtherCard10udpPrepareEtPKht+0x54>
    } else {                                   // checked if dip is dns ip and separately if dip is hisip and then use correct mac.
        setMACandIPs(gwmacaddr, dip);
 80036c8:	e17ffe17 	ldw	r5,-8(fp)
 80036cc:	d1270884 	addi	r4,gp,-25566
 80036d0:	80024500 	call	8002450 <_ZL12setMACandIPsPKhS0_>
    }
    // see http://tldp.org/HOWTO/Multicast-HOWTO-2.html
    // multicast or broadcast address, https://github.com/njh/EtherCard/issues/59
    if ((dip[0] & 0xF0) == 0xE0 || *((unsigned long*) dip) == 0xFFFFFFFF || !memcmp(broadcastip,dip,IP_LEN))
 80036d4:	e0bffe17 	ldw	r2,-8(fp)
 80036d8:	10800003 	ldbu	r2,0(r2)
 80036dc:	10803fcc 	andi	r2,r2,255
 80036e0:	10803c0c 	andi	r2,r2,240
 80036e4:	10803820 	cmpeqi	r2,r2,224
 80036e8:	1000091e 	bne	r2,zero,8003710 <_ZN9EtherCard10udpPrepareEtPKht+0x90>
 80036ec:	e0bffe17 	ldw	r2,-8(fp)
 80036f0:	10800017 	ldw	r2,0(r2)
 80036f4:	10bfffe0 	cmpeqi	r2,r2,-1
 80036f8:	1000051e 	bne	r2,zero,8003710 <_ZN9EtherCard10udpPrepareEtPKht+0x90>
 80036fc:	01800104 	movi	r6,4
 8003700:	e17ffe17 	ldw	r5,-8(fp)
 8003704:	d126e8c4 	addi	r4,gp,-25693
 8003708:	8005a5c0 	call	8005a5c <memcmp>
 800370c:	1000041e 	bne	r2,zero,8003720 <_ZN9EtherCard10udpPrepareEtPKht+0xa0>
        EtherCard::copyMac(gPB + ETH_DST_MAC, allOnes);
 8003710:	d16003c4 	addi	r5,gp,-32753
 8003714:	010200b4 	movhi	r4,2050
 8003718:	21233c04 	addi	r4,r4,-29456
 800371c:	8004d700 	call	8004d70 <_ZN9EtherCard7copyMacEPhPKh>
    gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 8003720:	008200b4 	movhi	r2,2050
 8003724:	10a33c04 	addi	r2,r2,-29456
 8003728:	00c00204 	movi	r3,8
 800372c:	10c00305 	stb	r3,12(r2)
    gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 8003730:	008200b4 	movhi	r2,2050
 8003734:	10a33c04 	addi	r2,r2,-29456
 8003738:	10000345 	stb	zero,13(r2)
    memcpy_P(gPB + IP_P,iphdr,sizeof iphdr);
 800373c:	008200b4 	movhi	r2,2050
 8003740:	10a33f84 	addi	r2,r2,-29442
 8003744:	01800244 	movi	r6,9
 8003748:	01420074 	movhi	r5,2049
 800374c:	29547604 	addi	r5,r5,20952
 8003750:	1009883a 	mov	r4,r2
 8003754:	80022380 	call	8002238 <_Z8memcpy_PPvPKvj>
    gPB[IP_TOTLEN_H_P] = 0;
 8003758:	008200b4 	movhi	r2,2050
 800375c:	10a33c04 	addi	r2,r2,-29456
 8003760:	10000405 	stb	zero,16(r2)
    gPB[IP_PROTO_P] = IP_PROTO_UDP_V;
 8003764:	008200b4 	movhi	r2,2050
 8003768:	10a33c04 	addi	r2,r2,-29456
 800376c:	00c00444 	movi	r3,17
 8003770:	10c005c5 	stb	r3,23(r2)
    gPB[UDP_DST_PORT_H_P] = (dport>>8);
 8003774:	e0bfff0b 	ldhu	r2,-4(fp)
 8003778:	1005d23a 	srai	r2,r2,8
 800377c:	1007883a 	mov	r3,r2
 8003780:	008200b4 	movhi	r2,2050
 8003784:	10a33c04 	addi	r2,r2,-29456
 8003788:	10c00905 	stb	r3,36(r2)
    gPB[UDP_DST_PORT_L_P] = dport;
 800378c:	e0bfff0b 	ldhu	r2,-4(fp)
 8003790:	1007883a 	mov	r3,r2
 8003794:	008200b4 	movhi	r2,2050
 8003798:	10a33c04 	addi	r2,r2,-29456
 800379c:	10c00945 	stb	r3,37(r2)
    gPB[UDP_SRC_PORT_H_P] = (sport>>8);
 80037a0:	e0bffd0b 	ldhu	r2,-12(fp)
 80037a4:	1005d23a 	srai	r2,r2,8
 80037a8:	1007883a 	mov	r3,r2
 80037ac:	008200b4 	movhi	r2,2050
 80037b0:	10a33c04 	addi	r2,r2,-29456
 80037b4:	10c00885 	stb	r3,34(r2)
    gPB[UDP_SRC_PORT_L_P] = sport;
 80037b8:	e0bffd0b 	ldhu	r2,-12(fp)
 80037bc:	1007883a 	mov	r3,r2
 80037c0:	008200b4 	movhi	r2,2050
 80037c4:	10a33c04 	addi	r2,r2,-29456
 80037c8:	10c008c5 	stb	r3,35(r2)
    gPB[UDP_LEN_H_P] = 0;
 80037cc:	008200b4 	movhi	r2,2050
 80037d0:	10a33c04 	addi	r2,r2,-29456
 80037d4:	10000985 	stb	zero,38(r2)
    gPB[UDP_CHECKSUM_H_P] = 0;
 80037d8:	008200b4 	movhi	r2,2050
 80037dc:	10a33c04 	addi	r2,r2,-29456
 80037e0:	10000a05 	stb	zero,40(r2)
    gPB[UDP_CHECKSUM_L_P] = 0;
 80037e4:	008200b4 	movhi	r2,2050
 80037e8:	10a33c04 	addi	r2,r2,-29456
 80037ec:	10000a45 	stb	zero,41(r2)
}
 80037f0:	0001883a 	nop
 80037f4:	e037883a 	mov	sp,fp
 80037f8:	dfc00117 	ldw	ra,4(sp)
 80037fc:	df000017 	ldw	fp,0(sp)
 8003800:	dec00204 	addi	sp,sp,8
 8003804:	f800283a 	ret

08003808 <_ZN9EtherCard11udpTransmitEt>:

void EtherCard::udpTransmit (uint16_t datalen) {
 8003808:	defffd04 	addi	sp,sp,-12
 800380c:	dfc00215 	stw	ra,8(sp)
 8003810:	df000115 	stw	fp,4(sp)
 8003814:	df000104 	addi	fp,sp,4
 8003818:	2005883a 	mov	r2,r4
 800381c:	e0bfff0d 	sth	r2,-4(fp)
    gPB[IP_TOTLEN_H_P] = (IP_HEADER_LEN+UDP_HEADER_LEN+datalen) >> 8;
 8003820:	e0bfff0b 	ldhu	r2,-4(fp)
 8003824:	10800704 	addi	r2,r2,28
 8003828:	1005d23a 	srai	r2,r2,8
 800382c:	1007883a 	mov	r3,r2
 8003830:	008200b4 	movhi	r2,2050
 8003834:	10a33c04 	addi	r2,r2,-29456
 8003838:	10c00405 	stb	r3,16(r2)
    gPB[IP_TOTLEN_L_P] = IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
 800383c:	e0bfff0b 	ldhu	r2,-4(fp)
 8003840:	10800704 	addi	r2,r2,28
 8003844:	1007883a 	mov	r3,r2
 8003848:	008200b4 	movhi	r2,2050
 800384c:	10a33c04 	addi	r2,r2,-29456
 8003850:	10c00445 	stb	r3,17(r2)
    fill_ip_hdr_checksum();
 8003854:	800271c0 	call	800271c <_ZL20fill_ip_hdr_checksumv>
    gPB[UDP_LEN_H_P] = (UDP_HEADER_LEN+datalen) >>8;
 8003858:	e0bfff0b 	ldhu	r2,-4(fp)
 800385c:	10800204 	addi	r2,r2,8
 8003860:	1005d23a 	srai	r2,r2,8
 8003864:	1007883a 	mov	r3,r2
 8003868:	008200b4 	movhi	r2,2050
 800386c:	10a33c04 	addi	r2,r2,-29456
 8003870:	10c00985 	stb	r3,38(r2)
    gPB[UDP_LEN_L_P] = UDP_HEADER_LEN+datalen;
 8003874:	e0bfff0b 	ldhu	r2,-4(fp)
 8003878:	10800204 	addi	r2,r2,8
 800387c:	1007883a 	mov	r3,r2
 8003880:	008200b4 	movhi	r2,2050
 8003884:	10a33c04 	addi	r2,r2,-29456
 8003888:	10c009c5 	stb	r3,39(r2)
    fill_checksum(UDP_CHECKSUM_H_P, IP_SRC_P, 16 + datalen,1);
 800388c:	e0bfff0b 	ldhu	r2,-4(fp)
 8003890:	10800404 	addi	r2,r2,16
 8003894:	10bfffcc 	andi	r2,r2,65535
 8003898:	01c00044 	movi	r7,1
 800389c:	100d883a 	mov	r6,r2
 80038a0:	01400684 	movi	r5,26
 80038a4:	01000a04 	movi	r4,40
 80038a8:	800227c0 	call	800227c <_ZL13fill_checksumhhth>
    packetSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen);
 80038ac:	e0bfff0b 	ldhu	r2,-4(fp)
 80038b0:	10800a84 	addi	r2,r2,42
 80038b4:	10bfffcc 	andi	r2,r2,65535
 80038b8:	1009883a 	mov	r4,r2
 80038bc:	8001fe80 	call	8001fe8 <_ZN8ENC28J6010packetSendEt>
}
 80038c0:	0001883a 	nop
 80038c4:	e037883a 	mov	sp,fp
 80038c8:	dfc00117 	ldw	ra,4(sp)
 80038cc:	df000017 	ldw	fp,0(sp)
 80038d0:	dec00204 	addi	sp,sp,8
 80038d4:	f800283a 	ret

080038d8 <_ZN9EtherCard7sendUdpEPKchtPKht>:

void EtherCard::sendUdp (const char *data, uint8_t datalen, uint16_t sport,
                         const uint8_t *dip, uint16_t dport) {
 80038d8:	defff904 	addi	sp,sp,-28
 80038dc:	dfc00615 	stw	ra,24(sp)
 80038e0:	df000515 	stw	fp,20(sp)
 80038e4:	df000504 	addi	fp,sp,20
 80038e8:	e13ffb15 	stw	r4,-20(fp)
 80038ec:	2809883a 	mov	r4,r5
 80038f0:	3007883a 	mov	r3,r6
 80038f4:	e1fffe15 	stw	r7,-8(fp)
 80038f8:	e0800217 	ldw	r2,8(fp)
 80038fc:	e13ffc05 	stb	r4,-16(fp)
 8003900:	e0fffd0d 	sth	r3,-12(fp)
 8003904:	e0bfff0d 	sth	r2,-4(fp)
    udpPrepare(sport, dip, dport);
 8003908:	e0bffd0b 	ldhu	r2,-12(fp)
 800390c:	e0ffff0b 	ldhu	r3,-4(fp)
 8003910:	180d883a 	mov	r6,r3
 8003914:	e17ffe17 	ldw	r5,-8(fp)
 8003918:	1009883a 	mov	r4,r2
 800391c:	80036800 	call	8003680 <_ZN9EtherCard10udpPrepareEtPKht>
    if (datalen>220)
 8003920:	e0bffc03 	ldbu	r2,-16(fp)
 8003924:	10803770 	cmpltui	r2,r2,221
 8003928:	1000021e 	bne	r2,zero,8003934 <_ZN9EtherCard7sendUdpEPKchtPKht+0x5c>
        datalen = 220;
 800392c:	00bff704 	movi	r2,-36
 8003930:	e0bffc05 	stb	r2,-16(fp)
    memcpy(gPB + UDP_DATA_P, data, datalen);
 8003934:	008200b4 	movhi	r2,2050
 8003938:	10a34684 	addi	r2,r2,-29414
 800393c:	e0fffc03 	ldbu	r3,-16(fp)
 8003940:	180d883a 	mov	r6,r3
 8003944:	e17ffb17 	ldw	r5,-20(fp)
 8003948:	1009883a 	mov	r4,r2
 800394c:	8005ad80 	call	8005ad8 <memcpy>
    udpTransmit(datalen);
 8003950:	e0bffc03 	ldbu	r2,-16(fp)
 8003954:	1009883a 	mov	r4,r2
 8003958:	80038080 	call	8003808 <_ZN9EtherCard11udpTransmitEt>
}
 800395c:	0001883a 	nop
 8003960:	e037883a 	mov	sp,fp
 8003964:	dfc00117 	ldw	ra,4(sp)
 8003968:	df000017 	ldw	fp,0(sp)
 800396c:	dec00204 	addi	sp,sp,8
 8003970:	f800283a 	ret

08003974 <_ZN9EtherCard7sendWolEPh>:

void EtherCard::sendWol (uint8_t *wolmac) {
 8003974:	defffc04 	addi	sp,sp,-16
 8003978:	dfc00315 	stw	ra,12(sp)
 800397c:	df000215 	stw	fp,8(sp)
 8003980:	df000204 	addi	fp,sp,8
 8003984:	e13fff15 	stw	r4,-4(fp)
    setMACandIPs(allOnes, allOnes);
 8003988:	d16003c4 	addi	r5,gp,-32753
 800398c:	d12003c4 	addi	r4,gp,-32753
 8003990:	80024500 	call	8002450 <_ZL12setMACandIPsPKhS0_>
    gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 8003994:	008200b4 	movhi	r2,2050
 8003998:	10a33c04 	addi	r2,r2,-29456
 800399c:	00c00204 	movi	r3,8
 80039a0:	10c00305 	stb	r3,12(r2)
    gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 80039a4:	008200b4 	movhi	r2,2050
 80039a8:	10a33c04 	addi	r2,r2,-29456
 80039ac:	10000345 	stb	zero,13(r2)
    memcpy_P(gPB + IP_P,iphdr,9);
 80039b0:	008200b4 	movhi	r2,2050
 80039b4:	10a33f84 	addi	r2,r2,-29442
 80039b8:	01800244 	movi	r6,9
 80039bc:	01420074 	movhi	r5,2049
 80039c0:	29547604 	addi	r5,r5,20952
 80039c4:	1009883a 	mov	r4,r2
 80039c8:	80022380 	call	8002238 <_Z8memcpy_PPvPKvj>
    gPB[IP_TOTLEN_L_P] = 0x82;
 80039cc:	008200b4 	movhi	r2,2050
 80039d0:	10a33c04 	addi	r2,r2,-29456
 80039d4:	00ffe084 	movi	r3,-126
 80039d8:	10c00445 	stb	r3,17(r2)
    gPB[IP_PROTO_P] = IP_PROTO_UDP_V;
 80039dc:	008200b4 	movhi	r2,2050
 80039e0:	10a33c04 	addi	r2,r2,-29456
 80039e4:	00c00444 	movi	r3,17
 80039e8:	10c005c5 	stb	r3,23(r2)
    fill_ip_hdr_checksum();
 80039ec:	800271c0 	call	800271c <_ZL20fill_ip_hdr_checksumv>
    gPB[UDP_DST_PORT_H_P] = 0;
 80039f0:	008200b4 	movhi	r2,2050
 80039f4:	10a33c04 	addi	r2,r2,-29456
 80039f8:	10000905 	stb	zero,36(r2)
    gPB[UDP_DST_PORT_L_P] = 0x9; // wol = normally 9
 80039fc:	008200b4 	movhi	r2,2050
 8003a00:	10a33c04 	addi	r2,r2,-29456
 8003a04:	00c00244 	movi	r3,9
 8003a08:	10c00945 	stb	r3,37(r2)
    gPB[UDP_SRC_PORT_H_P] = 10;
 8003a0c:	008200b4 	movhi	r2,2050
 8003a10:	10a33c04 	addi	r2,r2,-29456
 8003a14:	00c00284 	movi	r3,10
 8003a18:	10c00885 	stb	r3,34(r2)
    gPB[UDP_SRC_PORT_L_P] = 0x42; // source port does not matter
 8003a1c:	008200b4 	movhi	r2,2050
 8003a20:	10a33c04 	addi	r2,r2,-29456
 8003a24:	00c01084 	movi	r3,66
 8003a28:	10c008c5 	stb	r3,35(r2)
    gPB[UDP_LEN_H_P] = 0;
 8003a2c:	008200b4 	movhi	r2,2050
 8003a30:	10a33c04 	addi	r2,r2,-29456
 8003a34:	10000985 	stb	zero,38(r2)
    gPB[UDP_LEN_L_P] = 110; // fixed len
 8003a38:	008200b4 	movhi	r2,2050
 8003a3c:	10a33c04 	addi	r2,r2,-29456
 8003a40:	00c01b84 	movi	r3,110
 8003a44:	10c009c5 	stb	r3,39(r2)
    gPB[UDP_CHECKSUM_H_P] = 0;
 8003a48:	008200b4 	movhi	r2,2050
 8003a4c:	10a33c04 	addi	r2,r2,-29456
 8003a50:	10000a05 	stb	zero,40(r2)
    gPB[UDP_CHECKSUM_L_P] = 0;
 8003a54:	008200b4 	movhi	r2,2050
 8003a58:	10a33c04 	addi	r2,r2,-29456
 8003a5c:	10000a45 	stb	zero,41(r2)
    copyMac(gPB + UDP_DATA_P, allOnes);
 8003a60:	008200b4 	movhi	r2,2050
 8003a64:	10a34684 	addi	r2,r2,-29414
 8003a68:	d16003c4 	addi	r5,gp,-32753
 8003a6c:	1009883a 	mov	r4,r2
 8003a70:	8004d700 	call	8004d70 <_ZN9EtherCard7copyMacEPhPKh>
    uint8_t pos = UDP_DATA_P;
 8003a74:	00800a84 	movi	r2,42
 8003a78:	e0bffe05 	stb	r2,-8(fp)
    for (uint8_t m = 0; m < 16; ++m) {
 8003a7c:	e03ffe45 	stb	zero,-7(fp)
 8003a80:	e0bffe43 	ldbu	r2,-7(fp)
 8003a84:	10800428 	cmpgeui	r2,r2,16
 8003a88:	10000e1e 	bne	r2,zero,8003ac4 <_ZN9EtherCard7sendWolEPh+0x150>
        pos += 6;
 8003a8c:	e0bffe03 	ldbu	r2,-8(fp)
 8003a90:	10800184 	addi	r2,r2,6
 8003a94:	e0bffe05 	stb	r2,-8(fp)
        copyMac(gPB + pos, wolmac);
 8003a98:	e0fffe03 	ldbu	r3,-8(fp)
 8003a9c:	008200b4 	movhi	r2,2050
 8003aa0:	10a33c04 	addi	r2,r2,-29456
 8003aa4:	1885883a 	add	r2,r3,r2
 8003aa8:	e17fff17 	ldw	r5,-4(fp)
 8003aac:	1009883a 	mov	r4,r2
 8003ab0:	8004d700 	call	8004d70 <_ZN9EtherCard7copyMacEPhPKh>
    gPB[UDP_LEN_L_P] = 110; // fixed len
    gPB[UDP_CHECKSUM_H_P] = 0;
    gPB[UDP_CHECKSUM_L_P] = 0;
    copyMac(gPB + UDP_DATA_P, allOnes);
    uint8_t pos = UDP_DATA_P;
    for (uint8_t m = 0; m < 16; ++m) {
 8003ab4:	e0bffe43 	ldbu	r2,-7(fp)
 8003ab8:	10800044 	addi	r2,r2,1
 8003abc:	e0bffe45 	stb	r2,-7(fp)
 8003ac0:	003fef06 	br	8003a80 <_ZN9EtherCard7sendWolEPh+0x10c>
        pos += 6;
        copyMac(gPB + pos, wolmac);
    }
    fill_checksum(UDP_CHECKSUM_H_P, IP_SRC_P, 16 + 102,1);
 8003ac4:	01c00044 	movi	r7,1
 8003ac8:	01801d84 	movi	r6,118
 8003acc:	01400684 	movi	r5,26
 8003ad0:	01000a04 	movi	r4,40
 8003ad4:	800227c0 	call	800227c <_ZL13fill_checksumhhth>
    packetSend(pos + 6);
 8003ad8:	e0bffe03 	ldbu	r2,-8(fp)
 8003adc:	10800184 	addi	r2,r2,6
 8003ae0:	10bfffcc 	andi	r2,r2,65535
 8003ae4:	1009883a 	mov	r4,r2
 8003ae8:	8001fe80 	call	8001fe8 <_ZN8ENC28J6010packetSendEt>
}
 8003aec:	0001883a 	nop
 8003af0:	e037883a 	mov	sp,fp
 8003af4:	dfc00117 	ldw	ra,4(sp)
 8003af8:	df000017 	ldw	fp,0(sp)
 8003afc:	dec00204 	addi	sp,sp,8
 8003b00:	f800283a 	ret

08003b04 <_ZL17client_arp_whohasPh>:

// make a arp request
static void client_arp_whohas(uint8_t *ip_we_search) {
 8003b04:	defffd04 	addi	sp,sp,-12
 8003b08:	dfc00215 	stw	ra,8(sp)
 8003b0c:	df000115 	stw	fp,4(sp)
 8003b10:	df000104 	addi	fp,sp,4
 8003b14:	e13fff15 	stw	r4,-4(fp)
    setMACs(allOnes);
 8003b18:	d12003c4 	addi	r4,gp,-32753
 8003b1c:	80024000 	call	8002400 <_ZL7setMACsPKh>
    gPB[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
 8003b20:	008200b4 	movhi	r2,2050
 8003b24:	10a33c04 	addi	r2,r2,-29456
 8003b28:	00c00204 	movi	r3,8
 8003b2c:	10c00305 	stb	r3,12(r2)
    gPB[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
 8003b30:	008200b4 	movhi	r2,2050
 8003b34:	10a33c04 	addi	r2,r2,-29456
 8003b38:	00c00184 	movi	r3,6
 8003b3c:	10c00345 	stb	r3,13(r2)
    memcpy_P(gPB + ETH_ARP_P, arpreqhdr, sizeof arpreqhdr);
 8003b40:	008200b4 	movhi	r2,2050
 8003b44:	10a33f84 	addi	r2,r2,-29442
 8003b48:	01800204 	movi	r6,8
 8003b4c:	d1600544 	addi	r5,gp,-32747
 8003b50:	1009883a 	mov	r4,r2
 8003b54:	80022380 	call	8002238 <_Z8memcpy_PPvPKvj>
    memset(gPB + ETH_ARP_DST_MAC_P, 0, ETH_LEN);
 8003b58:	008200b4 	movhi	r2,2050
 8003b5c:	10a34404 	addi	r2,r2,-29424
 8003b60:	01800184 	movi	r6,6
 8003b64:	000b883a 	mov	r5,zero
 8003b68:	1009883a 	mov	r4,r2
 8003b6c:	8005c200 	call	8005c20 <memset>
    EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
 8003b70:	008200b4 	movhi	r2,2050
 8003b74:	10a34184 	addi	r2,r2,-29434
 8003b78:	d166e544 	addi	r5,gp,-25707
 8003b7c:	1009883a 	mov	r4,r2
 8003b80:	8004d700 	call	8004d70 <_ZN9EtherCard7copyMacEPhPKh>
    EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, ip_we_search);
 8003b84:	008200b4 	movhi	r2,2050
 8003b88:	10a34584 	addi	r2,r2,-29418
 8003b8c:	e17fff17 	ldw	r5,-4(fp)
 8003b90:	1009883a 	mov	r4,r2
 8003b94:	8004db00 	call	8004db0 <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
 8003b98:	008200b4 	movhi	r2,2050
 8003b9c:	10a34304 	addi	r2,r2,-29428
 8003ba0:	d166e6c4 	addi	r5,gp,-25701
 8003ba4:	1009883a 	mov	r4,r2
 8003ba8:	8004db00 	call	8004db0 <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::packetSend(42);
 8003bac:	01000a84 	movi	r4,42
 8003bb0:	8001fe80 	call	8001fe8 <_ZN8ENC28J6010packetSendEt>
}
 8003bb4:	0001883a 	nop
 8003bb8:	e037883a 	mov	sp,fp
 8003bbc:	dfc00117 	ldw	ra,4(sp)
 8003bc0:	df000017 	ldw	fp,0(sp)
 8003bc4:	dec00204 	addi	sp,sp,8
 8003bc8:	f800283a 	ret

08003bcc <_ZN9EtherCard15clientWaitingGwEv>:

uint8_t EtherCard::clientWaitingGw () {
 8003bcc:	deffff04 	addi	sp,sp,-4
 8003bd0:	df000015 	stw	fp,0(sp)
 8003bd4:	d839883a 	mov	fp,sp
    return !(waitgwmac & WGW_HAVE_GW_MAC);
 8003bd8:	d0a70a03 	ldbu	r2,-25560(gp)
 8003bdc:	10803fcc 	andi	r2,r2,255
 8003be0:	1080008c 	andi	r2,r2,2
 8003be4:	1005003a 	cmpeq	r2,r2,zero
}
 8003be8:	e037883a 	mov	sp,fp
 8003bec:	df000017 	ldw	fp,0(sp)
 8003bf0:	dec00104 	addi	sp,sp,4
 8003bf4:	f800283a 	ret

08003bf8 <_ZN9EtherCard16clientWaitingDnsEv>:

uint8_t EtherCard::clientWaitingDns () {
 8003bf8:	defffe04 	addi	sp,sp,-8
 8003bfc:	dfc00115 	stw	ra,4(sp)
 8003c00:	df000015 	stw	fp,0(sp)
 8003c04:	d839883a 	mov	fp,sp
    if(is_lan(myip, dnsip))
 8003c08:	d166ebc4 	addi	r5,gp,-25681
 8003c0c:	d126e6c4 	addi	r4,gp,-25701
 8003c10:	80024f40 	call	80024f4 <_ZL6is_lanPKhS0_>
 8003c14:	10803fcc 	andi	r2,r2,255
 8003c18:	10000326 	beq	r2,zero,8003c28 <_ZN9EtherCard16clientWaitingDnsEv+0x30>
        return !has_dns_mac;
 8003c1c:	d0a707c3 	ldbu	r2,-25569(gp)
 8003c20:	1080005c 	xori	r2,r2,1
 8003c24:	00000406 	br	8003c38 <_ZN9EtherCard16clientWaitingDnsEv+0x40>
    return !(waitgwmac & WGW_HAVE_GW_MAC);
 8003c28:	d0a70a03 	ldbu	r2,-25560(gp)
 8003c2c:	10803fcc 	andi	r2,r2,255
 8003c30:	1080008c 	andi	r2,r2,2
 8003c34:	1005003a 	cmpeq	r2,r2,zero
}
 8003c38:	e037883a 	mov	sp,fp
 8003c3c:	dfc00117 	ldw	ra,4(sp)
 8003c40:	df000017 	ldw	fp,0(sp)
 8003c44:	dec00204 	addi	sp,sp,8
 8003c48:	f800283a 	ret

08003c4c <_ZL16client_store_macPhS_>:

static uint8_t client_store_mac(uint8_t *source_ip, uint8_t *mac) {
 8003c4c:	defffc04 	addi	sp,sp,-16
 8003c50:	dfc00315 	stw	ra,12(sp)
 8003c54:	df000215 	stw	fp,8(sp)
 8003c58:	df000204 	addi	fp,sp,8
 8003c5c:	e13ffe15 	stw	r4,-8(fp)
 8003c60:	e17fff15 	stw	r5,-4(fp)
    if (memcmp(gPB + ETH_ARP_SRC_IP_P, source_ip, IP_LEN) != 0)
 8003c64:	008200b4 	movhi	r2,2050
 8003c68:	10a34304 	addi	r2,r2,-29428
 8003c6c:	01800104 	movi	r6,4
 8003c70:	e17ffe17 	ldw	r5,-8(fp)
 8003c74:	1009883a 	mov	r4,r2
 8003c78:	8005a5c0 	call	8005a5c <memcmp>
 8003c7c:	10000226 	beq	r2,zero,8003c88 <_ZL16client_store_macPhS_+0x3c>
        return 0;
 8003c80:	0005883a 	mov	r2,zero
 8003c84:	00000606 	br	8003ca0 <_ZL16client_store_macPhS_+0x54>
    EtherCard::copyMac(mac, gPB + ETH_ARP_SRC_MAC_P);
 8003c88:	008200b4 	movhi	r2,2050
 8003c8c:	10a34184 	addi	r2,r2,-29434
 8003c90:	100b883a 	mov	r5,r2
 8003c94:	e13fff17 	ldw	r4,-4(fp)
 8003c98:	8004d700 	call	8004d70 <_ZN9EtherCard7copyMacEPhPKh>
    return 1;
 8003c9c:	00800044 	movi	r2,1
}
 8003ca0:	e037883a 	mov	sp,fp
 8003ca4:	dfc00117 	ldw	ra,4(sp)
 8003ca8:	df000017 	ldw	fp,0(sp)
 8003cac:	dec00204 	addi	sp,sp,8
 8003cb0:	f800283a 	ret

08003cb4 <_ZN9EtherCard7setGwIpEPKh>:
// static void client_gw_arp_refresh() {
//   if (waitgwmac & WGW_HAVE_GW_MAC)
//     waitgwmac |= WGW_REFRESHING;
// }

void EtherCard::setGwIp (const uint8_t *gwipaddr) {
 8003cb4:	defffd04 	addi	sp,sp,-12
 8003cb8:	dfc00215 	stw	ra,8(sp)
 8003cbc:	df000115 	stw	fp,4(sp)
 8003cc0:	df000104 	addi	fp,sp,4
 8003cc4:	e13fff15 	stw	r4,-4(fp)
    delaycnt = 0; //request gateway ARP lookup
 8003cc8:	d026ee8d 	sth	zero,-25670(gp)
    waitgwmac = WGW_INITIAL_ARP; // causes an arp request in the packet loop
 8003ccc:	00800044 	movi	r2,1
 8003cd0:	d0a70a05 	stb	r2,-25560(gp)
    copyIp(gwip, gwipaddr);
 8003cd4:	e17fff17 	ldw	r5,-4(fp)
 8003cd8:	d126e9c4 	addi	r4,gp,-25689
 8003cdc:	8004db00 	call	8004db0 <_ZN9EtherCard6copyIpEPhPKh>
}
 8003ce0:	0001883a 	nop
 8003ce4:	e037883a 	mov	sp,fp
 8003ce8:	dfc00117 	ldw	ra,4(sp)
 8003cec:	df000017 	ldw	fp,0(sp)
 8003cf0:	dec00204 	addi	sp,sp,8
 8003cf4:	f800283a 	ret

08003cf8 <_ZN9EtherCard22updateBroadcastAddressEv>:

void EtherCard::updateBroadcastAddress()
{
 8003cf8:	defffe04 	addi	sp,sp,-8
 8003cfc:	df000115 	stw	fp,4(sp)
 8003d00:	df000104 	addi	fp,sp,4
    for(uint8_t i=0; i<IP_LEN; i++)
 8003d04:	e03fff05 	stb	zero,-4(fp)
 8003d08:	e0bfff03 	ldbu	r2,-4(fp)
 8003d0c:	10800128 	cmpgeui	r2,r2,4
 8003d10:	1000141e 	bne	r2,zero,8003d64 <_ZN9EtherCard22updateBroadcastAddressEv+0x6c>
        broadcastip[i] = myip[i] | ~netmask[i];
 8003d14:	e0ffff03 	ldbu	r3,-4(fp)
 8003d18:	e13fff03 	ldbu	r4,-4(fp)
 8003d1c:	d0a6e6c4 	addi	r2,gp,-25701
 8003d20:	2085883a 	add	r2,r4,r2
 8003d24:	10800003 	ldbu	r2,0(r2)
 8003d28:	100b883a 	mov	r5,r2
 8003d2c:	e13fff03 	ldbu	r4,-4(fp)
 8003d30:	d0a6e7c4 	addi	r2,gp,-25697
 8003d34:	2085883a 	add	r2,r4,r2
 8003d38:	10800003 	ldbu	r2,0(r2)
 8003d3c:	0084303a 	nor	r2,zero,r2
 8003d40:	2884b03a 	or	r2,r5,r2
 8003d44:	1009883a 	mov	r4,r2
 8003d48:	d0a6e8c4 	addi	r2,gp,-25693
 8003d4c:	1885883a 	add	r2,r3,r2
 8003d50:	11000005 	stb	r4,0(r2)
    copyIp(gwip, gwipaddr);
}

void EtherCard::updateBroadcastAddress()
{
    for(uint8_t i=0; i<IP_LEN; i++)
 8003d54:	e0bfff03 	ldbu	r2,-4(fp)
 8003d58:	10800044 	addi	r2,r2,1
 8003d5c:	e0bfff05 	stb	r2,-4(fp)
 8003d60:	003fe906 	br	8003d08 <_ZN9EtherCard22updateBroadcastAddressEv+0x10>
        broadcastip[i] = myip[i] | ~netmask[i];
}
 8003d64:	0001883a 	nop
 8003d68:	e037883a 	mov	sp,fp
 8003d6c:	df000017 	ldw	fp,0(sp)
 8003d70:	dec00104 	addi	sp,sp,4
 8003d74:	f800283a 	ret

08003d78 <_ZL10client_synhhh>:

static void client_syn(uint8_t srcport,uint8_t dstport_h,uint8_t dstport_l) {
 8003d78:	defffb04 	addi	sp,sp,-20
 8003d7c:	dfc00415 	stw	ra,16(sp)
 8003d80:	df000315 	stw	fp,12(sp)
 8003d84:	df000304 	addi	fp,sp,12
 8003d88:	2807883a 	mov	r3,r5
 8003d8c:	3005883a 	mov	r2,r6
 8003d90:	e13ffd05 	stb	r4,-12(fp)
 8003d94:	e0fffe05 	stb	r3,-8(fp)
 8003d98:	e0bfff05 	stb	r2,-4(fp)
    if(is_lan(EtherCard::myip, EtherCard::hisip)) {
 8003d9c:	d166ecc4 	addi	r5,gp,-25677
 8003da0:	d126e6c4 	addi	r4,gp,-25701
 8003da4:	80024f40 	call	80024f4 <_ZL6is_lanPKhS0_>
 8003da8:	10803fcc 	andi	r2,r2,255
 8003dac:	10000426 	beq	r2,zero,8003dc0 <_ZL10client_synhhh+0x48>
        setMACandIPs(destmacaddr, EtherCard::hisip);
 8003db0:	d166ecc4 	addi	r5,gp,-25677
 8003db4:	d1270604 	addi	r4,gp,-25576
 8003db8:	80024500 	call	8002450 <_ZL12setMACandIPsPKhS0_>
 8003dbc:	00000306 	br	8003dcc <_ZL10client_synhhh+0x54>
    } else {
        setMACandIPs(gwmacaddr, EtherCard::hisip);
 8003dc0:	d166ecc4 	addi	r5,gp,-25677
 8003dc4:	d1270884 	addi	r4,gp,-25566
 8003dc8:	80024500 	call	8002450 <_ZL12setMACandIPsPKhS0_>
    }
    gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 8003dcc:	008200b4 	movhi	r2,2050
 8003dd0:	10a33c04 	addi	r2,r2,-29456
 8003dd4:	00c00204 	movi	r3,8
 8003dd8:	10c00305 	stb	r3,12(r2)
    gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 8003ddc:	008200b4 	movhi	r2,2050
 8003de0:	10a33c04 	addi	r2,r2,-29456
 8003de4:	10000345 	stb	zero,13(r2)
    memcpy_P(gPB + IP_P,iphdr,sizeof iphdr);
 8003de8:	008200b4 	movhi	r2,2050
 8003dec:	10a33f84 	addi	r2,r2,-29442
 8003df0:	01800244 	movi	r6,9
 8003df4:	01420074 	movhi	r5,2049
 8003df8:	29547604 	addi	r5,r5,20952
 8003dfc:	1009883a 	mov	r4,r2
 8003e00:	80022380 	call	8002238 <_Z8memcpy_PPvPKvj>
    gPB[IP_TOTLEN_L_P] = 44; // good for syn
 8003e04:	008200b4 	movhi	r2,2050
 8003e08:	10a33c04 	addi	r2,r2,-29456
 8003e0c:	00c00b04 	movi	r3,44
 8003e10:	10c00445 	stb	r3,17(r2)
    gPB[IP_PROTO_P] = IP_PROTO_TCP_V;
 8003e14:	008200b4 	movhi	r2,2050
 8003e18:	10a33c04 	addi	r2,r2,-29456
 8003e1c:	00c00184 	movi	r3,6
 8003e20:	10c005c5 	stb	r3,23(r2)
    fill_ip_hdr_checksum();
 8003e24:	800271c0 	call	800271c <_ZL20fill_ip_hdr_checksumv>
    gPB[TCP_DST_PORT_H_P] = dstport_h;
 8003e28:	008200b4 	movhi	r2,2050
 8003e2c:	10a33c04 	addi	r2,r2,-29456
 8003e30:	e0fffe03 	ldbu	r3,-8(fp)
 8003e34:	10c00905 	stb	r3,36(r2)
    gPB[TCP_DST_PORT_L_P] = dstport_l;
 8003e38:	008200b4 	movhi	r2,2050
 8003e3c:	10a33c04 	addi	r2,r2,-29456
 8003e40:	e0ffff03 	ldbu	r3,-4(fp)
 8003e44:	10c00945 	stb	r3,37(r2)
    gPB[TCP_SRC_PORT_H_P] = TCPCLIENT_SRC_PORT_H;
 8003e48:	008200b4 	movhi	r2,2050
 8003e4c:	10a33c04 	addi	r2,r2,-29456
 8003e50:	00c002c4 	movi	r3,11
 8003e54:	10c00885 	stb	r3,34(r2)
    gPB[TCP_SRC_PORT_L_P] = srcport; // lower 8 bit of src port
 8003e58:	008200b4 	movhi	r2,2050
 8003e5c:	10a33c04 	addi	r2,r2,-29456
 8003e60:	e0fffd03 	ldbu	r3,-12(fp)
 8003e64:	10c008c5 	stb	r3,35(r2)
    memset(gPB + TCP_SEQ_H_P, 0, 8);
 8003e68:	008200b4 	movhi	r2,2050
 8003e6c:	10a34584 	addi	r2,r2,-29418
 8003e70:	01800204 	movi	r6,8
 8003e74:	000b883a 	mov	r5,zero
 8003e78:	1009883a 	mov	r4,r2
 8003e7c:	8005c200 	call	8005c20 <memset>
    gPB[TCP_SEQ_H_P+2] = seqnum;
 8003e80:	d0e00343 	ldbu	r3,-32755(gp)
 8003e84:	008200b4 	movhi	r2,2050
 8003e88:	10a33c04 	addi	r2,r2,-29456
 8003e8c:	10c00a05 	stb	r3,40(r2)
    seqnum += 3;
 8003e90:	d0a00343 	ldbu	r2,-32755(gp)
 8003e94:	108000c4 	addi	r2,r2,3
 8003e98:	d0a00345 	stb	r2,-32755(gp)
    gPB[TCP_HEADER_LEN_P] = 0x60; // 0x60=24 len: (0x60>>4) * 4
 8003e9c:	008200b4 	movhi	r2,2050
 8003ea0:	10a33c04 	addi	r2,r2,-29456
 8003ea4:	00c01804 	movi	r3,96
 8003ea8:	10c00b85 	stb	r3,46(r2)
    gPB[TCP_FLAGS_P] = TCP_FLAGS_SYN_V;
 8003eac:	008200b4 	movhi	r2,2050
 8003eb0:	10a33c04 	addi	r2,r2,-29456
 8003eb4:	00c00084 	movi	r3,2
 8003eb8:	10c00bc5 	stb	r3,47(r2)
    gPB[TCP_WIN_SIZE] = 0x3; // 1024 = 0x400 768 = 0x300, initial window
 8003ebc:	008200b4 	movhi	r2,2050
 8003ec0:	10a33c04 	addi	r2,r2,-29456
 8003ec4:	00c000c4 	movi	r3,3
 8003ec8:	10c00c05 	stb	r3,48(r2)
    gPB[TCP_WIN_SIZE+1] = 0x0;
 8003ecc:	008200b4 	movhi	r2,2050
 8003ed0:	10a33c04 	addi	r2,r2,-29456
 8003ed4:	10000c45 	stb	zero,49(r2)
    gPB[TCP_CHECKSUM_H_P] = 0;
 8003ed8:	008200b4 	movhi	r2,2050
 8003edc:	10a33c04 	addi	r2,r2,-29456
 8003ee0:	10000c85 	stb	zero,50(r2)
    gPB[TCP_CHECKSUM_L_P] = 0;
 8003ee4:	008200b4 	movhi	r2,2050
 8003ee8:	10a33c04 	addi	r2,r2,-29456
 8003eec:	10000cc5 	stb	zero,51(r2)
    gPB[TCP_CHECKSUM_L_P+1] = 0;
 8003ef0:	008200b4 	movhi	r2,2050
 8003ef4:	10a33c04 	addi	r2,r2,-29456
 8003ef8:	10000d05 	stb	zero,52(r2)
    gPB[TCP_CHECKSUM_L_P+2] = 0;
 8003efc:	008200b4 	movhi	r2,2050
 8003f00:	10a33c04 	addi	r2,r2,-29456
 8003f04:	10000d45 	stb	zero,53(r2)
    gPB[TCP_OPTIONS_P] = 2;
 8003f08:	008200b4 	movhi	r2,2050
 8003f0c:	10a33c04 	addi	r2,r2,-29456
 8003f10:	00c00084 	movi	r3,2
 8003f14:	10c00d85 	stb	r3,54(r2)
    gPB[TCP_OPTIONS_P+1] = 4;
 8003f18:	008200b4 	movhi	r2,2050
 8003f1c:	10a33c04 	addi	r2,r2,-29456
 8003f20:	00c00104 	movi	r3,4
 8003f24:	10c00dc5 	stb	r3,55(r2)
    gPB[TCP_OPTIONS_P+2] = (CLIENTMSS>>8);
 8003f28:	008200b4 	movhi	r2,2050
 8003f2c:	10a33c04 	addi	r2,r2,-29456
 8003f30:	00c00084 	movi	r3,2
 8003f34:	10c00e05 	stb	r3,56(r2)
    gPB[TCP_OPTIONS_P+3] = (uint8_t) CLIENTMSS;
 8003f38:	008200b4 	movhi	r2,2050
 8003f3c:	10a33c04 	addi	r2,r2,-29456
 8003f40:	00c00984 	movi	r3,38
 8003f44:	10c00e45 	stb	r3,57(r2)
    fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8 +TCP_HEADER_LEN_PLAIN+4,2);
 8003f48:	01c00084 	movi	r7,2
 8003f4c:	01800804 	movi	r6,32
 8003f50:	01400684 	movi	r5,26
 8003f54:	01000c84 	movi	r4,50
 8003f58:	800227c0 	call	800227c <_ZL13fill_checksumhhth>
    // 4 is the tcp mss option:
    EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN+4);
 8003f5c:	01000e84 	movi	r4,58
 8003f60:	8001fe80 	call	8001fe8 <_ZN8ENC28J6010packetSendEt>
}
 8003f64:	0001883a 	nop
 8003f68:	e037883a 	mov	sp,fp
 8003f6c:	dfc00117 	ldw	ra,4(sp)
 8003f70:	df000017 	ldw	fp,0(sp)
 8003f74:	dec00204 	addi	sp,sp,8
 8003f78:	f800283a 	ret

08003f7c <_ZN9EtherCard12clientTcpReqEPFhhhttEPFthEt>:

uint8_t EtherCard::clientTcpReq (uint8_t (*result_cb)(uint8_t,uint8_t,uint16_t,uint16_t),
                                 uint16_t (*datafill_cb)(uint8_t),uint16_t port) {
 8003f7c:	defffc04 	addi	sp,sp,-16
 8003f80:	df000315 	stw	fp,12(sp)
 8003f84:	df000304 	addi	fp,sp,12
 8003f88:	e13ffd15 	stw	r4,-12(fp)
 8003f8c:	e17ffe15 	stw	r5,-8(fp)
 8003f90:	3005883a 	mov	r2,r6
 8003f94:	e0bfff0d 	sth	r2,-4(fp)
    client_tcp_result_cb = result_cb;
 8003f98:	e0bffd17 	ldw	r2,-12(fp)
 8003f9c:	d0a6fc15 	stw	r2,-25616(gp)
    client_tcp_datafill_cb = datafill_cb;
 8003fa0:	e0bffe17 	ldw	r2,-8(fp)
 8003fa4:	d0a6fd15 	stw	r2,-25612(gp)
    tcp_client_port_h = port>>8;
 8003fa8:	e0bfff0b 	ldhu	r2,-4(fp)
 8003fac:	1005d23a 	srai	r2,r2,8
 8003fb0:	d0a6fb85 	stb	r2,-25618(gp)
    tcp_client_port_l = port;
 8003fb4:	e0bfff0b 	ldhu	r2,-4(fp)
 8003fb8:	d0a6fbc5 	stb	r2,-25617(gp)
    tcp_client_state = TCP_STATE_SENDSYN; // Flag to packetloop to initiate a TCP/IP session by send a syn
 8003fbc:	00800044 	movi	r2,1
 8003fc0:	d0a6fb45 	stb	r2,-25619(gp)
    tcp_fd = (tcp_fd + 1) & 7;
 8003fc4:	d0a6fb03 	ldbu	r2,-25620(gp)
 8003fc8:	10800044 	addi	r2,r2,1
 8003fcc:	108001cc 	andi	r2,r2,7
 8003fd0:	d0a6fb05 	stb	r2,-25620(gp)
    return tcp_fd;
 8003fd4:	d0a6fb03 	ldbu	r2,-25620(gp)
}
 8003fd8:	e037883a 	mov	sp,fp
 8003fdc:	df000017 	ldw	fp,0(sp)
 8003fe0:	dec00104 	addi	sp,sp,4
 8003fe4:	f800283a 	ret

08003fe8 <_ZL31www_client_internal_datafill_cbh>:

static uint16_t www_client_internal_datafill_cb(uint8_t fd) {
 8003fe8:	defffe04 	addi	sp,sp,-8
 8003fec:	df000115 	stw	fp,4(sp)
 8003ff0:	df000104 	addi	fp,sp,4
 8003ff4:	2005883a 	mov	r2,r4
 8003ff8:	e0bfff05 	stb	r2,-4(fp)
    //                      strlen(client_postval),
    //                      client_postval);
    //     }
    // }
    // return bfill.position();
}
 8003ffc:	0001883a 	nop
 8004000:	e037883a 	mov	sp,fp
 8004004:	df000017 	ldw	fp,0(sp)
 8004008:	dec00104 	addi	sp,sp,4
 800400c:	f800283a 	ret

08004010 <_ZL29www_client_internal_result_cbhhtt>:

static uint8_t www_client_internal_result_cb(uint8_t fd, uint8_t statuscode, uint16_t datapos, uint16_t len_of_data) {
 8004010:	defff904 	addi	sp,sp,-28
 8004014:	dfc00615 	stw	ra,24(sp)
 8004018:	df000515 	stw	fp,20(sp)
 800401c:	df000504 	addi	fp,sp,20
 8004020:	2011883a 	mov	r8,r4
 8004024:	2809883a 	mov	r4,r5
 8004028:	3007883a 	mov	r3,r6
 800402c:	3805883a 	mov	r2,r7
 8004030:	e23ffc05 	stb	r8,-16(fp)
 8004034:	e13ffd05 	stb	r4,-12(fp)
 8004038:	e0fffe0d 	sth	r3,-8(fp)
 800403c:	e0bfff0d 	sth	r2,-4(fp)
    if (fd!=www_fd)
 8004040:	d0a6fe03 	ldbu	r2,-25608(gp)
 8004044:	e0fffc03 	ldbu	r3,-16(fp)
 8004048:	10803fcc 	andi	r2,r2,255
 800404c:	18800626 	beq	r3,r2,8004068 <_ZL29www_client_internal_result_cbhhtt+0x58>
        (*client_browser_cb)(4,0,0);
 8004050:	d0a6ff17 	ldw	r2,-25604(gp)
 8004054:	000d883a 	mov	r6,zero
 8004058:	000b883a 	mov	r5,zero
 800405c:	01000104 	movi	r4,4
 8004060:	103ee83a 	callr	r2
 8004064:	00002206 	br	80040f0 <_ZL29www_client_internal_result_cbhhtt+0xe0>
    else if (statuscode==0 && len_of_data>12 && client_browser_cb) {
 8004068:	e0bffd03 	ldbu	r2,-12(fp)
 800406c:	1000201e 	bne	r2,zero,80040f0 <_ZL29www_client_internal_result_cbhhtt+0xe0>
 8004070:	e0bfff0b 	ldhu	r2,-4(fp)
 8004074:	10800370 	cmpltui	r2,r2,13
 8004078:	10001d1e 	bne	r2,zero,80040f0 <_ZL29www_client_internal_result_cbhhtt+0xe0>
 800407c:	d0a6ff17 	ldw	r2,-25604(gp)
 8004080:	10001b26 	beq	r2,zero,80040f0 <_ZL29www_client_internal_result_cbhhtt+0xe0>
        uint8_t f = strncmp("200",(char *)&(gPB[datapos+9]),3) != 0;
 8004084:	e0bffe0b 	ldhu	r2,-8(fp)
 8004088:	10c00244 	addi	r3,r2,9
 800408c:	008200b4 	movhi	r2,2050
 8004090:	10a33c04 	addi	r2,r2,-29456
 8004094:	1885883a 	add	r2,r3,r2
 8004098:	018000c4 	movi	r6,3
 800409c:	100b883a 	mov	r5,r2
 80040a0:	01020074 	movhi	r4,2049
 80040a4:	21147b04 	addi	r4,r4,20972
 80040a8:	8005f400 	call	8005f40 <strncmp>
 80040ac:	1004c03a 	cmpne	r2,r2,zero
 80040b0:	e0bffb05 	stb	r2,-20(fp)
        (*client_browser_cb)(f, ((uint16_t)TCP_SRC_PORT_H_P+(gPB[TCP_HEADER_LEN_P]>>4)*4),len_of_data);
 80040b4:	d0e6ff17 	ldw	r3,-25604(gp)
 80040b8:	e13ffb03 	ldbu	r4,-20(fp)
 80040bc:	008200b4 	movhi	r2,2050
 80040c0:	10a33c04 	addi	r2,r2,-29456
 80040c4:	10800b83 	ldbu	r2,46(r2)
 80040c8:	10803fcc 	andi	r2,r2,255
 80040cc:	1005d13a 	srai	r2,r2,4
 80040d0:	1085883a 	add	r2,r2,r2
 80040d4:	1085883a 	add	r2,r2,r2
 80040d8:	10800884 	addi	r2,r2,34
 80040dc:	10bfffcc 	andi	r2,r2,65535
 80040e0:	e17fff0b 	ldhu	r5,-4(fp)
 80040e4:	280d883a 	mov	r6,r5
 80040e8:	100b883a 	mov	r5,r2
 80040ec:	183ee83a 	callr	r3
    }
    return 0;
 80040f0:	0005883a 	mov	r2,zero
}
 80040f4:	e037883a 	mov	sp,fp
 80040f8:	dfc00117 	ldw	ra,4(sp)
 80040fc:	df000017 	ldw	fp,0(sp)
 8004100:	dec00204 	addi	sp,sp,8
 8004104:	f800283a 	ret

08004108 <_ZN9EtherCard9browseUrlEPKcS1_S1_PFvhttE>:

void EtherCard::browseUrl (const char *urlbuf, const char *urlbuf_varpart, const char *hoststr, void (*callback)(uint8_t,uint16_t,uint16_t)) {
 8004108:	defff904 	addi	sp,sp,-28
 800410c:	dfc00615 	stw	ra,24(sp)
 8004110:	df000515 	stw	fp,20(sp)
 8004114:	df000504 	addi	fp,sp,20
 8004118:	e13ffc15 	stw	r4,-16(fp)
 800411c:	e17ffd15 	stw	r5,-12(fp)
 8004120:	e1bffe15 	stw	r6,-8(fp)
 8004124:	e1ffff15 	stw	r7,-4(fp)
    browseUrl(urlbuf, urlbuf_varpart, hoststr, PSTR("Accept: text/html"), callback);
 8004128:	01020074 	movhi	r4,2049
 800412c:	21147c04 	addi	r4,r4,20976
 8004130:	80022140 	call	8002214 <_Z4PSTRPc>
 8004134:	1007883a 	mov	r3,r2
 8004138:	e0bfff17 	ldw	r2,-4(fp)
 800413c:	d8800015 	stw	r2,0(sp)
 8004140:	180f883a 	mov	r7,r3
 8004144:	e1bffe17 	ldw	r6,-8(fp)
 8004148:	e17ffd17 	ldw	r5,-12(fp)
 800414c:	e13ffc17 	ldw	r4,-16(fp)
 8004150:	800416c0 	call	800416c <_ZN9EtherCard9browseUrlEPKcS1_S1_S1_PFvhttE>
}
 8004154:	0001883a 	nop
 8004158:	e037883a 	mov	sp,fp
 800415c:	dfc00117 	ldw	ra,4(sp)
 8004160:	df000017 	ldw	fp,0(sp)
 8004164:	dec00204 	addi	sp,sp,8
 8004168:	f800283a 	ret

0800416c <_ZN9EtherCard9browseUrlEPKcS1_S1_S1_PFvhttE>:

void EtherCard::browseUrl (const char *urlbuf, const char *urlbuf_varpart, const char *hoststr, const char *additionalheaderline, void (*callback)(uint8_t,uint16_t,uint16_t)) {
 800416c:	defffa04 	addi	sp,sp,-24
 8004170:	dfc00515 	stw	ra,20(sp)
 8004174:	df000415 	stw	fp,16(sp)
 8004178:	df000404 	addi	fp,sp,16
 800417c:	e13ffc15 	stw	r4,-16(fp)
 8004180:	e17ffd15 	stw	r5,-12(fp)
 8004184:	e1bffe15 	stw	r6,-8(fp)
 8004188:	e1ffff15 	stw	r7,-4(fp)
    client_urlbuf = urlbuf;
 800418c:	e0bffc17 	ldw	r2,-16(fp)
 8004190:	d0a70215 	stw	r2,-25592(gp)
    client_urlbuf_var = urlbuf_varpart;
 8004194:	e0bffd17 	ldw	r2,-12(fp)
 8004198:	d0a70315 	stw	r2,-25588(gp)
    client_hoststr = hoststr;
 800419c:	e0bffe17 	ldw	r2,-8(fp)
 80041a0:	d0a70415 	stw	r2,-25584(gp)
    client_additionalheaderline = additionalheaderline;
 80041a4:	e0bfff17 	ldw	r2,-4(fp)
 80041a8:	d0a70015 	stw	r2,-25600(gp)
    client_postval = 0;
 80041ac:	d0270115 	stw	zero,-25596(gp)
    client_browser_cb = callback;
 80041b0:	e0800217 	ldw	r2,8(fp)
 80041b4:	d0a6ff15 	stw	r2,-25604(gp)
    www_fd = clientTcpReq(&www_client_internal_result_cb,&www_client_internal_datafill_cb,hisport);
 80041b8:	d0a0000b 	ldhu	r2,-32768(gp)
 80041bc:	10bfffcc 	andi	r2,r2,65535
 80041c0:	100d883a 	mov	r6,r2
 80041c4:	01420034 	movhi	r5,2048
 80041c8:	294ffa04 	addi	r5,r5,16360
 80041cc:	01020034 	movhi	r4,2048
 80041d0:	21100404 	addi	r4,r4,16400
 80041d4:	8003f7c0 	call	8003f7c <_ZN9EtherCard12clientTcpReqEPFhhhttEPFthEt>
 80041d8:	d0a6fe05 	stb	r2,-25608(gp)
}
 80041dc:	0001883a 	nop
 80041e0:	e037883a 	mov	sp,fp
 80041e4:	dfc00117 	ldw	ra,4(sp)
 80041e8:	df000017 	ldw	fp,0(sp)
 80041ec:	dec00204 	addi	sp,sp,8
 80041f0:	f800283a 	ret

080041f4 <_ZN9EtherCard8httpPostEPKcS1_S1_S1_PFvhttE>:

void EtherCard::httpPost (const char *urlbuf, const char *hoststr, const char *additionalheaderline, const char *postval, void (*callback)(uint8_t,uint16_t,uint16_t)) {
 80041f4:	defffa04 	addi	sp,sp,-24
 80041f8:	dfc00515 	stw	ra,20(sp)
 80041fc:	df000415 	stw	fp,16(sp)
 8004200:	df000404 	addi	fp,sp,16
 8004204:	e13ffc15 	stw	r4,-16(fp)
 8004208:	e17ffd15 	stw	r5,-12(fp)
 800420c:	e1bffe15 	stw	r6,-8(fp)
 8004210:	e1ffff15 	stw	r7,-4(fp)
    client_urlbuf = urlbuf;
 8004214:	e0bffc17 	ldw	r2,-16(fp)
 8004218:	d0a70215 	stw	r2,-25592(gp)
    client_hoststr = hoststr;
 800421c:	e0bffd17 	ldw	r2,-12(fp)
 8004220:	d0a70415 	stw	r2,-25584(gp)
    client_additionalheaderline = additionalheaderline;
 8004224:	e0bffe17 	ldw	r2,-8(fp)
 8004228:	d0a70015 	stw	r2,-25600(gp)
    client_postval = postval;
 800422c:	e0bfff17 	ldw	r2,-4(fp)
 8004230:	d0a70115 	stw	r2,-25596(gp)
    client_browser_cb = callback;
 8004234:	e0800217 	ldw	r2,8(fp)
 8004238:	d0a6ff15 	stw	r2,-25604(gp)
    www_fd = clientTcpReq(&www_client_internal_result_cb,&www_client_internal_datafill_cb,hisport);
 800423c:	d0a0000b 	ldhu	r2,-32768(gp)
 8004240:	10bfffcc 	andi	r2,r2,65535
 8004244:	100d883a 	mov	r6,r2
 8004248:	01420034 	movhi	r5,2048
 800424c:	294ffa04 	addi	r5,r5,16360
 8004250:	01020034 	movhi	r4,2048
 8004254:	21100404 	addi	r4,r4,16400
 8004258:	8003f7c0 	call	8003f7c <_ZN9EtherCard12clientTcpReqEPFhhhttEPFthEt>
 800425c:	d0a6fe05 	stb	r2,-25608(gp)
}
 8004260:	0001883a 	nop
 8004264:	e037883a 	mov	sp,fp
 8004268:	dfc00117 	ldw	ra,4(sp)
 800426c:	df000017 	ldw	fp,0(sp)
 8004270:	dec00204 	addi	sp,sp,8
 8004274:	f800283a 	ret

08004278 <_ZL15tcp_datafill_cbh>:

static uint16_t tcp_datafill_cb(uint8_t fd) {
 8004278:	defffe04 	addi	sp,sp,-8
 800427c:	df000115 	stw	fp,4(sp)
 8004280:	df000104 	addi	fp,sp,4
 8004284:	2005883a 	mov	r2,r4
 8004288:	e0bfff05 	stb	r2,-4(fp)
//     Serial.println(len);
//     Serial.println((char*) EtherCard::tcpOffset());
// #endif
//     result_fd = 123; // bogus value
//     return len;
}
 800428c:	0001883a 	nop
 8004290:	e037883a 	mov	sp,fp
 8004294:	df000017 	ldw	fp,0(sp)
 8004298:	dec00104 	addi	sp,sp,4
 800429c:	f800283a 	ret

080042a0 <_ZL13tcp_result_cbhhtt>:

static uint8_t tcp_result_cb(uint8_t fd, uint8_t status, uint16_t datapos, uint16_t datalen) {
 80042a0:	defffb04 	addi	sp,sp,-20
 80042a4:	df000415 	stw	fp,16(sp)
 80042a8:	df000404 	addi	fp,sp,16
 80042ac:	2011883a 	mov	r8,r4
 80042b0:	2809883a 	mov	r4,r5
 80042b4:	3007883a 	mov	r3,r6
 80042b8:	3805883a 	mov	r2,r7
 80042bc:	e23ffc05 	stb	r8,-16(fp)
 80042c0:	e13ffd05 	stb	r4,-12(fp)
 80042c4:	e0fffe0d 	sth	r3,-8(fp)
 80042c8:	e0bfff0d 	sth	r2,-4(fp)
    if (status == 0) {
 80042cc:	e0bffd03 	ldbu	r2,-12(fp)
 80042d0:	1000071e 	bne	r2,zero,80042f0 <_ZL13tcp_result_cbhhtt+0x50>
        result_fd = fd; // a valid result has been received, remember its session id
 80042d4:	e0bffc03 	ldbu	r2,-16(fp)
 80042d8:	d0a00385 	stb	r2,-32754(gp)
        result_ptr = (char*) ether.buffer + datapos;
 80042dc:	e0fffe0b 	ldhu	r3,-8(fp)
 80042e0:	008200b4 	movhi	r2,2050
 80042e4:	10a33c04 	addi	r2,r2,-29456
 80042e8:	1885883a 	add	r2,r3,r2
 80042ec:	d0a70b15 	stw	r2,-25556(gp)
        // result_ptr[datalen] = 0;
    }
    return 1;
 80042f0:	00800044 	movi	r2,1
}
 80042f4:	e037883a 	mov	sp,fp
 80042f8:	df000017 	ldw	fp,0(sp)
 80042fc:	dec00104 	addi	sp,sp,4
 8004300:	f800283a 	ret

08004304 <_ZN9EtherCard7tcpSendEv>:

uint8_t EtherCard::tcpSend () {
 8004304:	defffe04 	addi	sp,sp,-8
 8004308:	dfc00115 	stw	ra,4(sp)
 800430c:	df000015 	stw	fp,0(sp)
 8004310:	d839883a 	mov	fp,sp
    www_fd = clientTcpReq(&tcp_result_cb, &tcp_datafill_cb, hisport);
 8004314:	d0a0000b 	ldhu	r2,-32768(gp)
 8004318:	10bfffcc 	andi	r2,r2,65535
 800431c:	100d883a 	mov	r6,r2
 8004320:	01420034 	movhi	r5,2048
 8004324:	29509e04 	addi	r5,r5,17016
 8004328:	01020034 	movhi	r4,2048
 800432c:	2110a804 	addi	r4,r4,17056
 8004330:	8003f7c0 	call	8003f7c <_ZN9EtherCard12clientTcpReqEPFhhhttEPFthEt>
 8004334:	d0a6fe05 	stb	r2,-25608(gp)
    return www_fd;
 8004338:	d0a6fe03 	ldbu	r2,-25608(gp)
}
 800433c:	e037883a 	mov	sp,fp
 8004340:	dfc00117 	ldw	ra,4(sp)
 8004344:	df000017 	ldw	fp,0(sp)
 8004348:	dec00204 	addi	sp,sp,8
 800434c:	f800283a 	ret

08004350 <_ZN9EtherCard8tcpReplyEh>:

const char* EtherCard::tcpReply (uint8_t fd) {
 8004350:	defffe04 	addi	sp,sp,-8
 8004354:	df000115 	stw	fp,4(sp)
 8004358:	df000104 	addi	fp,sp,4
 800435c:	2005883a 	mov	r2,r4
 8004360:	e0bfff05 	stb	r2,-4(fp)
    if (result_fd != fd)
 8004364:	d0a00383 	ldbu	r2,-32754(gp)
 8004368:	10c03fcc 	andi	r3,r2,255
 800436c:	e0bfff03 	ldbu	r2,-4(fp)
 8004370:	18800226 	beq	r3,r2,800437c <_ZN9EtherCard8tcpReplyEh+0x2c>
        return 0;
 8004374:	0005883a 	mov	r2,zero
 8004378:	00000306 	br	8004388 <_ZN9EtherCard8tcpReplyEh+0x38>
    result_fd = 123; // set to a bogus value to prevent future match
 800437c:	00801ec4 	movi	r2,123
 8004380:	d0a00385 	stb	r2,-32754(gp)
    return result_ptr;
 8004384:	d0a70b17 	ldw	r2,-25556(gp)
}
 8004388:	e037883a 	mov	sp,fp
 800438c:	df000017 	ldw	fp,0(sp)
 8004390:	dec00104 	addi	sp,sp,4
 8004394:	f800283a 	ret

08004398 <_ZN9EtherCard20registerPingCallbackEPFvPhE>:

void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
 8004398:	defffe04 	addi	sp,sp,-8
 800439c:	df000115 	stw	fp,4(sp)
 80043a0:	df000104 	addi	fp,sp,4
 80043a4:	e13fff15 	stw	r4,-4(fp)
    icmp_cb = callback;
 80043a8:	e0bfff17 	ldw	r2,-4(fp)
 80043ac:	d0a70515 	stw	r2,-25580(gp)
}
 80043b0:	0001883a 	nop
 80043b4:	e037883a 	mov	sp,fp
 80043b8:	df000017 	ldw	fp,0(sp)
 80043bc:	dec00104 	addi	sp,sp,4
 80043c0:	f800283a 	ret

080043c4 <_ZN9EtherCard24packetLoopIcmpCheckReplyEPKh>:

uint8_t EtherCard::packetLoopIcmpCheckReply (const uint8_t *ip_monitoredhost) {
 80043c4:	defffd04 	addi	sp,sp,-12
 80043c8:	dfc00215 	stw	ra,8(sp)
 80043cc:	df000115 	stw	fp,4(sp)
 80043d0:	df000104 	addi	fp,sp,4
 80043d4:	e13fff15 	stw	r4,-4(fp)
    return gPB[IP_PROTO_P]==IP_PROTO_ICMP_V &&
 80043d8:	008200b4 	movhi	r2,2050
 80043dc:	10a33c04 	addi	r2,r2,-29456
 80043e0:	108005c3 	ldbu	r2,23(r2)
           gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREPLY_V &&
           gPB[ICMP_DATA_P]== PINGPATTERN &&
 80043e4:	10803fcc 	andi	r2,r2,255
 80043e8:	10800058 	cmpnei	r2,r2,1
 80043ec:	1000111e 	bne	r2,zero,8004434 <_ZN9EtherCard24packetLoopIcmpCheckReplyEPKh+0x70>
    icmp_cb = callback;
}

uint8_t EtherCard::packetLoopIcmpCheckReply (const uint8_t *ip_monitoredhost) {
    return gPB[IP_PROTO_P]==IP_PROTO_ICMP_V &&
           gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREPLY_V &&
 80043f0:	008200b4 	movhi	r2,2050
 80043f4:	10a33c04 	addi	r2,r2,-29456
 80043f8:	10800883 	ldbu	r2,34(r2)
void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
}

uint8_t EtherCard::packetLoopIcmpCheckReply (const uint8_t *ip_monitoredhost) {
    return gPB[IP_PROTO_P]==IP_PROTO_ICMP_V &&
 80043fc:	10803fcc 	andi	r2,r2,255
 8004400:	10000c1e 	bne	r2,zero,8004434 <_ZN9EtherCard24packetLoopIcmpCheckReplyEPKh+0x70>
           gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREPLY_V &&
           gPB[ICMP_DATA_P]== PINGPATTERN &&
 8004404:	008200b4 	movhi	r2,2050
 8004408:	10a33c04 	addi	r2,r2,-29456
 800440c:	10800a83 	ldbu	r2,42(r2)
    icmp_cb = callback;
}

uint8_t EtherCard::packetLoopIcmpCheckReply (const uint8_t *ip_monitoredhost) {
    return gPB[IP_PROTO_P]==IP_PROTO_ICMP_V &&
           gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREPLY_V &&
 8004410:	10803fcc 	andi	r2,r2,255
 8004414:	10801098 	cmpnei	r2,r2,66
 8004418:	1000061e 	bne	r2,zero,8004434 <_ZN9EtherCard24packetLoopIcmpCheckReplyEPKh+0x70>
           gPB[ICMP_DATA_P]== PINGPATTERN &&
           check_ip_message_is_from(ip_monitoredhost);
 800441c:	e13fff17 	ldw	r4,-4(fp)
 8004420:	80024b00 	call	80024b0 <_ZL24check_ip_message_is_fromPKh>
}

uint8_t EtherCard::packetLoopIcmpCheckReply (const uint8_t *ip_monitoredhost) {
    return gPB[IP_PROTO_P]==IP_PROTO_ICMP_V &&
           gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREPLY_V &&
           gPB[ICMP_DATA_P]== PINGPATTERN &&
 8004424:	10803fcc 	andi	r2,r2,255
 8004428:	10000226 	beq	r2,zero,8004434 <_ZN9EtherCard24packetLoopIcmpCheckReplyEPKh+0x70>
 800442c:	00800044 	movi	r2,1
 8004430:	00000106 	br	8004438 <_ZN9EtherCard24packetLoopIcmpCheckReplyEPKh+0x74>
 8004434:	0005883a 	mov	r2,zero
           check_ip_message_is_from(ip_monitoredhost);
}
 8004438:	e037883a 	mov	sp,fp
 800443c:	dfc00117 	ldw	ra,4(sp)
 8004440:	df000017 	ldw	fp,0(sp)
 8004444:	dec00204 	addi	sp,sp,8
 8004448:	f800283a 	ret

0800444c <_ZN9EtherCard6acceptEtt>:

uint16_t EtherCard::accept(const uint16_t port, uint16_t plen) {
 800444c:	defffb04 	addi	sp,sp,-20
 8004450:	dfc00415 	stw	ra,16(sp)
 8004454:	df000315 	stw	fp,12(sp)
 8004458:	df000304 	addi	fp,sp,12
 800445c:	2007883a 	mov	r3,r4
 8004460:	2805883a 	mov	r2,r5
 8004464:	e0fffe0d 	sth	r3,-8(fp)
 8004468:	e0bfff0d 	sth	r2,-4(fp)
    uint16_t pos;

    if (gPB[TCP_DST_PORT_H_P] == (port >> 8) &&
 800446c:	008200b4 	movhi	r2,2050
 8004470:	10a33c04 	addi	r2,r2,-29456
 8004474:	10800903 	ldbu	r2,36(r2)
 8004478:	10c03fcc 	andi	r3,r2,255
 800447c:	e0bffe0b 	ldhu	r2,-8(fp)
 8004480:	1005d23a 	srai	r2,r2,8
 8004484:	1880321e 	bne	r3,r2,8004550 <_ZN9EtherCard6acceptEtt+0x104>
            gPB[TCP_DST_PORT_L_P] == ((uint8_t) port))
 8004488:	008200b4 	movhi	r2,2050
 800448c:	10a33c04 	addi	r2,r2,-29456
 8004490:	10800943 	ldbu	r2,37(r2)
 8004494:	e0fffe0b 	ldhu	r3,-8(fp)
 8004498:	1809883a 	mov	r4,r3
}

uint16_t EtherCard::accept(const uint16_t port, uint16_t plen) {
    uint16_t pos;

    if (gPB[TCP_DST_PORT_H_P] == (port >> 8) &&
 800449c:	10c03fcc 	andi	r3,r2,255
 80044a0:	20803fcc 	andi	r2,r4,255
 80044a4:	18802a1e 	bne	r3,r2,8004550 <_ZN9EtherCard6acceptEtt+0x104>
            gPB[TCP_DST_PORT_L_P] == ((uint8_t) port))
    {   //Packet targeted at specified port
        if (gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V)
 80044a8:	008200b4 	movhi	r2,2050
 80044ac:	10a33c04 	addi	r2,r2,-29456
 80044b0:	10800bc3 	ldbu	r2,47(r2)
 80044b4:	10803fcc 	andi	r2,r2,255
 80044b8:	1080008c 	andi	r2,r2,2
 80044bc:	10000226 	beq	r2,zero,80044c8 <_ZN9EtherCard6acceptEtt+0x7c>
            make_tcp_synack_from_syn(); //send SYN+ACK
 80044c0:	8002ccc0 	call	8002ccc <_ZL24make_tcp_synack_from_synv>
 80044c4:	00002206 	br	8004550 <_ZN9EtherCard6acceptEtt+0x104>
        else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
 80044c8:	008200b4 	movhi	r2,2050
 80044cc:	10a33c04 	addi	r2,r2,-29456
 80044d0:	10800bc3 	ldbu	r2,47(r2)
 80044d4:	10803fcc 	andi	r2,r2,255
 80044d8:	1080040c 	andi	r2,r2,16
 80044dc:	10001c26 	beq	r2,zero,8004550 <_ZN9EtherCard6acceptEtt+0x104>
        {   //This is an acknowledgement to our SYN+ACK so let's start processing that payload
            info_data_len = getTcpPayloadLength();
 80044e0:	8002df80 	call	8002df8 <_ZN9EtherCard19getTcpPayloadLengthEv>
 80044e4:	d0a70a8d 	sth	r2,-25558(gp)
            if (info_data_len > 0)
 80044e8:	d0a70a8b 	ldhu	r2,-25558(gp)
 80044ec:	10bfffcc 	andi	r2,r2,65535
 80044f0:	10000e26 	beq	r2,zero,800452c <_ZN9EtherCard6acceptEtt+0xe0>
            {   //Got some data
                pos = TCP_DATA_START; // TCP_DATA_START is a formula
 80044f4:	008200b4 	movhi	r2,2050
 80044f8:	10a33c04 	addi	r2,r2,-29456
 80044fc:	10800b83 	ldbu	r2,46(r2)
 8004500:	10803fcc 	andi	r2,r2,255
 8004504:	1005d13a 	srai	r2,r2,4
 8004508:	1085883a 	add	r2,r2,r2
 800450c:	1085883a 	add	r2,r2,r2
 8004510:	10800884 	addi	r2,r2,34
 8004514:	e0bffd0d 	sth	r2,-12(fp)
                //!@todo no idea what this check pos<=plen-8 does; changed this to pos<=plen as otw. perfectly valid tcp packets are ignored; still if anybody has any idea please leave a comment
                if (pos <= plen)
 8004518:	e0bffd0b 	ldhu	r2,-12(fp)
 800451c:	e0ffff0b 	ldhu	r3,-4(fp)
 8004520:	18800b36 	bltu	r3,r2,8004550 <_ZN9EtherCard6acceptEtt+0x104>
                    return pos;
 8004524:	e0bffd0b 	ldhu	r2,-12(fp)
 8004528:	00000a06 	br	8004554 <_ZN9EtherCard6acceptEtt+0x108>
            }
            else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V)
 800452c:	008200b4 	movhi	r2,2050
 8004530:	10a33c04 	addi	r2,r2,-29456
 8004534:	10800bc3 	ldbu	r2,47(r2)
 8004538:	10803fcc 	andi	r2,r2,255
 800453c:	1080004c 	andi	r2,r2,1
 8004540:	10000326 	beq	r2,zero,8004550 <_ZN9EtherCard6acceptEtt+0x104>
                make_tcp_ack_from_any(0,0); //No data so close connection
 8004544:	000b883a 	mov	r5,zero
 8004548:	0009883a 	mov	r4,zero
 800454c:	8002e880 	call	8002e88 <_ZL21make_tcp_ack_from_anysh>
        }
    }
    return 0;
 8004550:	0005883a 	mov	r2,zero
}
 8004554:	e037883a 	mov	sp,fp
 8004558:	dfc00117 	ldw	ra,4(sp)
 800455c:	df000017 	ldw	fp,0(sp)
 8004560:	dec00204 	addi	sp,sp,8
 8004564:	f800283a 	ret

08004568 <_ZN9EtherCard10packetLoopEt>:

uint16_t EtherCard::packetLoop (uint16_t plen) {
 8004568:	defffb04 	addi	sp,sp,-20
 800456c:	dfc00415 	stw	ra,16(sp)
 8004570:	df000315 	stw	fp,12(sp)
 8004574:	df000304 	addi	fp,sp,12
 8004578:	2005883a 	mov	r2,r4
 800457c:	e0bfff0d 	sth	r2,-4(fp)
    if(using_dhcp) {
        ether.DhcpStateMachine(plen);
    }
#endif

    if (plen==0) {
 8004580:	e0bfff0b 	ldhu	r2,-4(fp)
 8004584:	1000661e 	bne	r2,zero,8004720 <_ZN9EtherCard10packetLoopEt+0x1b8>
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
 8004588:	d0a70a03 	ldbu	r2,-25560(gp)
 800458c:	10803fcc 	andi	r2,r2,255
 8004590:	1080004c 	andi	r2,r2,1
                delaycnt==0 && isLinkUp()) {
 8004594:	1000041e 	bne	r2,zero,80045a8 <_ZN9EtherCard10packetLoopEt+0x40>
    }
#endif

    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
 8004598:	d0a70a03 	ldbu	r2,-25560(gp)
 800459c:	10803fcc 	andi	r2,r2,255
 80045a0:	1080010c 	andi	r2,r2,4
 80045a4:	10000826 	beq	r2,zero,80045c8 <_ZN9EtherCard10packetLoopEt+0x60>
                delaycnt==0 && isLinkUp()) {
 80045a8:	d0a6ee8b 	ldhu	r2,-25670(gp)
    }
#endif

    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
 80045ac:	10bfffcc 	andi	r2,r2,65535
 80045b0:	1000051e 	bne	r2,zero,80045c8 <_ZN9EtherCard10packetLoopEt+0x60>
                delaycnt==0 && isLinkUp()) {
 80045b4:	8001d700 	call	8001d70 <_ZN8ENC28J608isLinkUpEv>
 80045b8:	10803fcc 	andi	r2,r2,255
 80045bc:	10000226 	beq	r2,zero,80045c8 <_ZN9EtherCard10packetLoopEt+0x60>
 80045c0:	00800044 	movi	r2,1
 80045c4:	00000106 	br	80045cc <_ZN9EtherCard10packetLoopEt+0x64>
 80045c8:	0005883a 	mov	r2,zero
    }
#endif

    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
 80045cc:	10803fcc 	andi	r2,r2,255
 80045d0:	10000526 	beq	r2,zero,80045e8 <_ZN9EtherCard10packetLoopEt+0x80>
                delaycnt==0 && isLinkUp()) {
            client_arp_whohas(gwip);
 80045d4:	d126e9c4 	addi	r4,gp,-25689
 80045d8:	8003b040 	call	8003b04 <_ZL17client_arp_whohasPh>
            waitgwmac |= WGW_ACCEPT_ARP_REPLY;
 80045dc:	d0a70a03 	ldbu	r2,-25560(gp)
 80045e0:	10800214 	ori	r2,r2,8
 80045e4:	d0a70a05 	stb	r2,-25560(gp)
        }
        delaycnt++;
 80045e8:	d0a6ee8b 	ldhu	r2,-25670(gp)
 80045ec:	10800044 	addi	r2,r2,1
 80045f0:	d0a6ee8d 	sth	r2,-25670(gp)

#if ETHERCARD_TCPCLIENT
        //Initiate TCP/IP session if pending
        if (tcp_client_state==TCP_STATE_SENDSYN && (waitgwmac & WGW_HAVE_GW_MAC)) { // send a syn
 80045f4:	d0a6fb43 	ldbu	r2,-25619(gp)
 80045f8:	10803fcc 	andi	r2,r2,255
 80045fc:	10800058 	cmpnei	r2,r2,1
 8004600:	1000191e 	bne	r2,zero,8004668 <_ZN9EtherCard10packetLoopEt+0x100>
 8004604:	d0a70a03 	ldbu	r2,-25560(gp)
 8004608:	10803fcc 	andi	r2,r2,255
 800460c:	1080008c 	andi	r2,r2,2
 8004610:	10001526 	beq	r2,zero,8004668 <_ZN9EtherCard10packetLoopEt+0x100>
            tcp_client_state = TCP_STATE_SYNSENT;
 8004614:	00800084 	movi	r2,2
 8004618:	d0a6fb45 	stb	r2,-25619(gp)
            tcpclient_src_port_l++; // allocate a new port
 800461c:	d0a00303 	ldbu	r2,-32756(gp)
 8004620:	10800044 	addi	r2,r2,1
 8004624:	d0a00305 	stb	r2,-32756(gp)
            client_syn(((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port_h,tcp_client_port_l);
 8004628:	d0a6fb03 	ldbu	r2,-25620(gp)
 800462c:	10803fcc 	andi	r2,r2,255
 8004630:	1004917a 	slli	r2,r2,5
 8004634:	1007883a 	mov	r3,r2
 8004638:	d0a00303 	ldbu	r2,-32756(gp)
 800463c:	108007cc 	andi	r2,r2,31
 8004640:	1884b03a 	or	r2,r3,r2
 8004644:	10803fcc 	andi	r2,r2,255
 8004648:	d0e6fb83 	ldbu	r3,-25618(gp)
 800464c:	18c03fcc 	andi	r3,r3,255
 8004650:	d126fbc3 	ldbu	r4,-25617(gp)
 8004654:	21003fcc 	andi	r4,r4,255
 8004658:	200d883a 	mov	r6,r4
 800465c:	180b883a 	mov	r5,r3
 8004660:	1009883a 	mov	r4,r2
 8004664:	8003d780 	call	8003d78 <_ZL10client_synhhh>
        }
#endif

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
 8004668:	d166ebc4 	addi	r5,gp,-25681
 800466c:	d126e6c4 	addi	r4,gp,-25701
 8004670:	80024f40 	call	80024f4 <_ZL6is_lanPKhS0_>
 8004674:	10803fcc 	andi	r2,r2,255
 8004678:	10000a26 	beq	r2,zero,80046a4 <_ZN9EtherCard10packetLoopEt+0x13c>
 800467c:	d0a707c3 	ldbu	r2,-25569(gp)
 8004680:	1080005c 	xori	r2,r2,1
 8004684:	10803fcc 	andi	r2,r2,255
 8004688:	10000626 	beq	r2,zero,80046a4 <_ZN9EtherCard10packetLoopEt+0x13c>
 800468c:	d0a70783 	ldbu	r2,-25570(gp)
 8004690:	1080005c 	xori	r2,r2,1
 8004694:	10803fcc 	andi	r2,r2,255
 8004698:	10000226 	beq	r2,zero,80046a4 <_ZN9EtherCard10packetLoopEt+0x13c>
 800469c:	00800044 	movi	r2,1
 80046a0:	00000106 	br	80046a8 <_ZN9EtherCard10packetLoopEt+0x140>
 80046a4:	0005883a 	mov	r2,zero
 80046a8:	10803fcc 	andi	r2,r2,255
 80046ac:	10000426 	beq	r2,zero,80046c0 <_ZN9EtherCard10packetLoopEt+0x158>
            client_arp_whohas(dnsip);
 80046b0:	d126ebc4 	addi	r4,gp,-25681
 80046b4:	8003b040 	call	8003b04 <_ZL17client_arp_whohasPh>
            waiting_for_dns_mac = true;
 80046b8:	00800044 	movi	r2,1
 80046bc:	d0a70785 	stb	r2,-25570(gp)
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
 80046c0:	d166ecc4 	addi	r5,gp,-25677
 80046c4:	d126e6c4 	addi	r4,gp,-25701
 80046c8:	80024f40 	call	80024f4 <_ZL6is_lanPKhS0_>
 80046cc:	10803fcc 	andi	r2,r2,255
 80046d0:	10000a26 	beq	r2,zero,80046fc <_ZN9EtherCard10packetLoopEt+0x194>
 80046d4:	d0a70843 	ldbu	r2,-25567(gp)
 80046d8:	1080005c 	xori	r2,r2,1
 80046dc:	10803fcc 	andi	r2,r2,255
 80046e0:	10000626 	beq	r2,zero,80046fc <_ZN9EtherCard10packetLoopEt+0x194>
 80046e4:	d0a70803 	ldbu	r2,-25568(gp)
 80046e8:	1080005c 	xori	r2,r2,1
 80046ec:	10803fcc 	andi	r2,r2,255
 80046f0:	10000226 	beq	r2,zero,80046fc <_ZN9EtherCard10packetLoopEt+0x194>
 80046f4:	00800044 	movi	r2,1
 80046f8:	00000106 	br	8004700 <_ZN9EtherCard10packetLoopEt+0x198>
 80046fc:	0005883a 	mov	r2,zero
 8004700:	10803fcc 	andi	r2,r2,255
 8004704:	10000426 	beq	r2,zero,8004718 <_ZN9EtherCard10packetLoopEt+0x1b0>
            client_arp_whohas(hisip);
 8004708:	d126ecc4 	addi	r4,gp,-25677
 800470c:	8003b040 	call	8003b04 <_ZL17client_arp_whohasPh>
            waiting_for_dest_mac = true;
 8004710:	00800044 	movi	r2,1
 8004714:	d0a70805 	stb	r2,-25568(gp)
        }

        return 0;
 8004718:	0005883a 	mov	r2,zero
 800471c:	00014e06 	br	8004c58 <_ZN9EtherCard10packetLoopEt+0x6f0>
    }

    if (eth_type_is_arp_and_my_ip(plen))
 8004720:	e0bfff0b 	ldhu	r2,-4(fp)
 8004724:	1009883a 	mov	r4,r2
 8004728:	80025b00 	call	80025b0 <_ZL25eth_type_is_arp_and_my_ipt>
 800472c:	10803fcc 	andi	r2,r2,255
 8004730:	1004c03a 	cmpne	r2,r2,zero
 8004734:	10803fcc 	andi	r2,r2,255
 8004738:	10004726 	beq	r2,zero,8004858 <_ZN9EtherCard10packetLoopEt+0x2f0>
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
 800473c:	008200b4 	movhi	r2,2050
 8004740:	10a33c04 	addi	r2,r2,-29456
 8004744:	10800543 	ldbu	r2,21(r2)
 8004748:	10803fcc 	andi	r2,r2,255
 800474c:	10800058 	cmpnei	r2,r2,1
 8004750:	1000011e 	bne	r2,zero,8004758 <_ZN9EtherCard10packetLoopEt+0x1f0>
            make_arp_answer_from_request();
 8004754:	80029ec0 	call	80029ec <_ZL28make_arp_answer_from_requestv>
        if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_mac(gwip, gwmacaddr))
 8004758:	d0a70a03 	ldbu	r2,-25560(gp)
 800475c:	10803fcc 	andi	r2,r2,255
 8004760:	1080020c 	andi	r2,r2,8
 8004764:	10000d26 	beq	r2,zero,800479c <_ZN9EtherCard10packetLoopEt+0x234>
 8004768:	008200b4 	movhi	r2,2050
 800476c:	10a33c04 	addi	r2,r2,-29456
 8004770:	10800543 	ldbu	r2,21(r2)
 8004774:	10803fcc 	andi	r2,r2,255
 8004778:	10800098 	cmpnei	r2,r2,2
 800477c:	1000071e 	bne	r2,zero,800479c <_ZN9EtherCard10packetLoopEt+0x234>
 8004780:	d1670884 	addi	r5,gp,-25566
 8004784:	d126e9c4 	addi	r4,gp,-25689
 8004788:	8003c4c0 	call	8003c4c <_ZL16client_store_macPhS_>
 800478c:	10803fcc 	andi	r2,r2,255
 8004790:	10000226 	beq	r2,zero,800479c <_ZN9EtherCard10packetLoopEt+0x234>
 8004794:	00800044 	movi	r2,1
 8004798:	00000106 	br	80047a0 <_ZN9EtherCard10packetLoopEt+0x238>
 800479c:	0005883a 	mov	r2,zero
 80047a0:	10803fcc 	andi	r2,r2,255
 80047a4:	10000226 	beq	r2,zero,80047b0 <_ZN9EtherCard10packetLoopEt+0x248>
            waitgwmac = WGW_HAVE_GW_MAC;
 80047a8:	00800084 	movi	r2,2
 80047ac:	d0a70a05 	stb	r2,-25560(gp)
        if (!has_dns_mac && waiting_for_dns_mac && client_store_mac(dnsip, destmacaddr)) {
 80047b0:	d0a707c3 	ldbu	r2,-25569(gp)
 80047b4:	1080005c 	xori	r2,r2,1
 80047b8:	10803fcc 	andi	r2,r2,255
 80047bc:	10000a26 	beq	r2,zero,80047e8 <_ZN9EtherCard10packetLoopEt+0x280>
 80047c0:	d0a70783 	ldbu	r2,-25570(gp)
 80047c4:	10803fcc 	andi	r2,r2,255
 80047c8:	10000726 	beq	r2,zero,80047e8 <_ZN9EtherCard10packetLoopEt+0x280>
 80047cc:	d1670604 	addi	r5,gp,-25576
 80047d0:	d126ebc4 	addi	r4,gp,-25681
 80047d4:	8003c4c0 	call	8003c4c <_ZL16client_store_macPhS_>
 80047d8:	10803fcc 	andi	r2,r2,255
 80047dc:	10000226 	beq	r2,zero,80047e8 <_ZN9EtherCard10packetLoopEt+0x280>
 80047e0:	00800044 	movi	r2,1
 80047e4:	00000106 	br	80047ec <_ZN9EtherCard10packetLoopEt+0x284>
 80047e8:	0005883a 	mov	r2,zero
 80047ec:	10803fcc 	andi	r2,r2,255
 80047f0:	10000326 	beq	r2,zero,8004800 <_ZN9EtherCard10packetLoopEt+0x298>
            has_dns_mac = true;
 80047f4:	00800044 	movi	r2,1
 80047f8:	d0a707c5 	stb	r2,-25569(gp)
            waiting_for_dns_mac = false;
 80047fc:	d0270785 	stb	zero,-25570(gp)
        }
        if (!has_dest_mac && waiting_for_dest_mac && client_store_mac(hisip, destmacaddr)) {
 8004800:	d0a70843 	ldbu	r2,-25567(gp)
 8004804:	1080005c 	xori	r2,r2,1
 8004808:	10803fcc 	andi	r2,r2,255
 800480c:	10000a26 	beq	r2,zero,8004838 <_ZN9EtherCard10packetLoopEt+0x2d0>
 8004810:	d0a70803 	ldbu	r2,-25568(gp)
 8004814:	10803fcc 	andi	r2,r2,255
 8004818:	10000726 	beq	r2,zero,8004838 <_ZN9EtherCard10packetLoopEt+0x2d0>
 800481c:	d1670604 	addi	r5,gp,-25576
 8004820:	d126ecc4 	addi	r4,gp,-25677
 8004824:	8003c4c0 	call	8003c4c <_ZL16client_store_macPhS_>
 8004828:	10803fcc 	andi	r2,r2,255
 800482c:	10000226 	beq	r2,zero,8004838 <_ZN9EtherCard10packetLoopEt+0x2d0>
 8004830:	00800044 	movi	r2,1
 8004834:	00000106 	br	800483c <_ZN9EtherCard10packetLoopEt+0x2d4>
 8004838:	0005883a 	mov	r2,zero
 800483c:	10803fcc 	andi	r2,r2,255
 8004840:	10000326 	beq	r2,zero,8004850 <_ZN9EtherCard10packetLoopEt+0x2e8>
            has_dest_mac = true;
 8004844:	00800044 	movi	r2,1
 8004848:	d0a70845 	stb	r2,-25567(gp)
            waiting_for_dest_mac = false;
 800484c:	d0270805 	stb	zero,-25568(gp)
        }
        return 0;
 8004850:	0005883a 	mov	r2,zero
 8004854:	00010006 	br	8004c58 <_ZN9EtherCard10packetLoopEt+0x6f0>
    }

    if (eth_type_is_ip_and_my_ip(plen)==0)
 8004858:	e0bfff0b 	ldhu	r2,-4(fp)
 800485c:	1009883a 	mov	r4,r2
 8004860:	80026400 	call	8002640 <_ZL24eth_type_is_ip_and_my_ipt>
 8004864:	10803fcc 	andi	r2,r2,255
 8004868:	1005003a 	cmpeq	r2,r2,zero
 800486c:	10803fcc 	andi	r2,r2,255
 8004870:	10000226 	beq	r2,zero,800487c <_ZN9EtherCard10packetLoopEt+0x314>
    {   //Not IP so ignoring
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
 8004874:	0005883a 	mov	r2,zero
 8004878:	0000f706 	br	8004c58 <_ZN9EtherCard10packetLoopEt+0x6f0>
    }

#if ETHERCARD_ICMP
    if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
 800487c:	008200b4 	movhi	r2,2050
 8004880:	10a33c04 	addi	r2,r2,-29456
 8004884:	108005c3 	ldbu	r2,23(r2)
 8004888:	10803fcc 	andi	r2,r2,255
 800488c:	10800058 	cmpnei	r2,r2,1
 8004890:	1000111e 	bne	r2,zero,80048d8 <_ZN9EtherCard10packetLoopEt+0x370>
 8004894:	008200b4 	movhi	r2,2050
 8004898:	10a33c04 	addi	r2,r2,-29456
 800489c:	10800883 	ldbu	r2,34(r2)
 80048a0:	10803fcc 	andi	r2,r2,255
 80048a4:	10800218 	cmpnei	r2,r2,8
 80048a8:	10000b1e 	bne	r2,zero,80048d8 <_ZN9EtherCard10packetLoopEt+0x370>
    {   //Service ICMP echo request (ping)
        if (icmp_cb)
 80048ac:	d0a70517 	ldw	r2,-25580(gp)
 80048b0:	10000426 	beq	r2,zero,80048c4 <_ZN9EtherCard10packetLoopEt+0x35c>
            (*icmp_cb)(&(gPB[IP_SRC_P]));
 80048b4:	d0a70517 	ldw	r2,-25580(gp)
 80048b8:	010200b4 	movhi	r4,2050
 80048bc:	21234284 	addi	r4,r4,-29430
 80048c0:	103ee83a 	callr	r2
        make_echo_reply_from_request(plen);
 80048c4:	e0bfff0b 	ldhu	r2,-4(fp)
 80048c8:	1009883a 	mov	r4,r2
 80048cc:	8002aa80 	call	8002aa8 <_ZL28make_echo_reply_from_requestt>
        return 0;
 80048d0:	0005883a 	mov	r2,zero
 80048d4:	0000e006 	br	8004c58 <_ZN9EtherCard10packetLoopEt+0x6f0>
        if(ether.udpServerHasProcessedPacket(plen))
            return 0; //An UDP server handler (callback) has processed this packet
    }
#endif

    if (plen<54 || gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
 80048d8:	e0bfff0b 	ldhu	r2,-4(fp)
 80048dc:	10800db0 	cmpltui	r2,r2,54
 80048e0:	1000061e 	bne	r2,zero,80048fc <_ZN9EtherCard10packetLoopEt+0x394>
 80048e4:	008200b4 	movhi	r2,2050
 80048e8:	10a33c04 	addi	r2,r2,-29456
 80048ec:	108005c3 	ldbu	r2,23(r2)
 80048f0:	10803fcc 	andi	r2,r2,255
 80048f4:	108001a0 	cmpeqi	r2,r2,6
 80048f8:	1000021e 	bne	r2,zero,8004904 <_ZN9EtherCard10packetLoopEt+0x39c>
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes
 80048fc:	0005883a 	mov	r2,zero
 8004900:	0000d506 	br	8004c58 <_ZN9EtherCard10packetLoopEt+0x6f0>

#if ETHERCARD_TCPCLIENT
    if (gPB[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H)
 8004904:	008200b4 	movhi	r2,2050
 8004908:	10a33c04 	addi	r2,r2,-29456
 800490c:	10800903 	ldbu	r2,36(r2)
 8004910:	10803fcc 	andi	r2,r2,255
 8004914:	108002d8 	cmpnei	r2,r2,11
 8004918:	1000cf1e 	bne	r2,zero,8004c58 <_ZN9EtherCard10packetLoopEt+0x6f0>
    {   //Source port is in range reserved (by EtherCard) for client TCP/IP connections
        if (check_ip_message_is_from(hisip)==0)
 800491c:	d126ecc4 	addi	r4,gp,-25677
 8004920:	80024b00 	call	80024b0 <_ZL24check_ip_message_is_fromPKh>
 8004924:	10803fcc 	andi	r2,r2,255
 8004928:	1005003a 	cmpeq	r2,r2,zero
 800492c:	10803fcc 	andi	r2,r2,255
 8004930:	10000226 	beq	r2,zero,800493c <_ZN9EtherCard10packetLoopEt+0x3d4>
            return 0; //Not current TCP/IP connection (only handle one at a time)
 8004934:	0005883a 	mov	r2,zero
 8004938:	0000c706 	br	8004c58 <_ZN9EtherCard10packetLoopEt+0x6f0>
        if (gPB[TCP_FLAGS_P] & TCP_FLAGS_RST_V)
 800493c:	008200b4 	movhi	r2,2050
 8004940:	10a33c04 	addi	r2,r2,-29456
 8004944:	10800bc3 	ldbu	r2,47(r2)
 8004948:	10803fcc 	andi	r2,r2,255
 800494c:	1080010c 	andi	r2,r2,4
 8004950:	10001226 	beq	r2,zero,800499c <_ZN9EtherCard10packetLoopEt+0x434>
        {   //TCP reset flagged
            if (client_tcp_result_cb)
 8004954:	d0a6fc17 	ldw	r2,-25616(gp)
 8004958:	10000c26 	beq	r2,zero,800498c <_ZN9EtherCard10packetLoopEt+0x424>
                (*client_tcp_result_cb)((gPB[TCP_DST_PORT_L_P]>>5)&0x7,3,0,0);
 800495c:	d0e6fc17 	ldw	r3,-25616(gp)
 8004960:	008200b4 	movhi	r2,2050
 8004964:	10a33c04 	addi	r2,r2,-29456
 8004968:	10800943 	ldbu	r2,37(r2)
 800496c:	10803fcc 	andi	r2,r2,255
 8004970:	1004d17a 	srli	r2,r2,5
 8004974:	10803fcc 	andi	r2,r2,255
 8004978:	000f883a 	mov	r7,zero
 800497c:	000d883a 	mov	r6,zero
 8004980:	014000c4 	movi	r5,3
 8004984:	1009883a 	mov	r4,r2
 8004988:	183ee83a 	callr	r3
            tcp_client_state = TCP_STATE_CLOSING;
 800498c:	00800144 	movi	r2,5
 8004990:	d0a6fb45 	stb	r2,-25619(gp)
            return 0;
 8004994:	0005883a 	mov	r2,zero
 8004998:	0000af06 	br	8004c58 <_ZN9EtherCard10packetLoopEt+0x6f0>
        }
        len = getTcpPayloadLength();
 800499c:	8002df80 	call	8002df8 <_ZN9EtherCard19getTcpPayloadLengthEv>
 80049a0:	e0bffd0d 	sth	r2,-12(fp)
        if (tcp_client_state==TCP_STATE_SYNSENT)
 80049a4:	d0a6fb43 	ldbu	r2,-25619(gp)
 80049a8:	10803fcc 	andi	r2,r2,255
 80049ac:	10800098 	cmpnei	r2,r2,2
 80049b0:	10003c1e 	bne	r2,zero,8004aa4 <_ZN9EtherCard10packetLoopEt+0x53c>
        {   //Waiting for SYN-ACK
            if ((gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) && (gPB[TCP_FLAGS_P] &TCP_FLAGS_ACK_V))
 80049b4:	008200b4 	movhi	r2,2050
 80049b8:	10a33c04 	addi	r2,r2,-29456
 80049bc:	10800bc3 	ldbu	r2,47(r2)
 80049c0:	10803fcc 	andi	r2,r2,255
 80049c4:	1080008c 	andi	r2,r2,2
 80049c8:	10002126 	beq	r2,zero,8004a50 <_ZN9EtherCard10packetLoopEt+0x4e8>
 80049cc:	008200b4 	movhi	r2,2050
 80049d0:	10a33c04 	addi	r2,r2,-29456
 80049d4:	10800bc3 	ldbu	r2,47(r2)
 80049d8:	10803fcc 	andi	r2,r2,255
 80049dc:	1080040c 	andi	r2,r2,16
 80049e0:	10001b26 	beq	r2,zero,8004a50 <_ZN9EtherCard10packetLoopEt+0x4e8>
            {   //SYN and ACK flags set so this is an acknowledgement to our SYN
                make_tcp_ack_from_any(0,0);
 80049e4:	000b883a 	mov	r5,zero
 80049e8:	0009883a 	mov	r4,zero
 80049ec:	8002e880 	call	8002e88 <_ZL21make_tcp_ack_from_anysh>
                gPB[TCP_FLAGS_P] = TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V;
 80049f0:	008200b4 	movhi	r2,2050
 80049f4:	10a33c04 	addi	r2,r2,-29456
 80049f8:	00c00604 	movi	r3,24
 80049fc:	10c00bc5 	stb	r3,47(r2)
                if (client_tcp_datafill_cb)
 8004a00:	d0a6fd17 	ldw	r2,-25612(gp)
 8004a04:	10000b26 	beq	r2,zero,8004a34 <_ZN9EtherCard10packetLoopEt+0x4cc>
                    len = (*client_tcp_datafill_cb)((gPB[TCP_SRC_PORT_L_P]>>5)&0x7);
 8004a08:	d0e6fd17 	ldw	r3,-25612(gp)
 8004a0c:	008200b4 	movhi	r2,2050
 8004a10:	10a33c04 	addi	r2,r2,-29456
 8004a14:	108008c3 	ldbu	r2,35(r2)
 8004a18:	10803fcc 	andi	r2,r2,255
 8004a1c:	1004d17a 	srli	r2,r2,5
 8004a20:	10803fcc 	andi	r2,r2,255
 8004a24:	1009883a 	mov	r4,r2
 8004a28:	183ee83a 	callr	r3
 8004a2c:	e0bffd0d 	sth	r2,-12(fp)
 8004a30:	00000106 	br	8004a38 <_ZN9EtherCard10packetLoopEt+0x4d0>
                else
                    len = 0;
 8004a34:	e03ffd0d 	sth	zero,-12(fp)
                tcp_client_state = TCP_STATE_ESTABLISHED;
 8004a38:	008000c4 	movi	r2,3
 8004a3c:	d0a6fb45 	stb	r2,-25619(gp)
                make_tcp_ack_with_data_noflags(len);
 8004a40:	e0bffd0b 	ldhu	r2,-12(fp)
 8004a44:	1009883a 	mov	r4,r2
 8004a48:	8002f780 	call	8002f78 <_ZL30make_tcp_ack_with_data_noflagst>
 8004a4c:	00001306 	br	8004a9c <_ZN9EtherCard10packetLoopEt+0x534>
            }
            else
            {   //Expecting SYN+ACK so reset and resend SYN
                tcp_client_state = TCP_STATE_SENDSYN; // retry
 8004a50:	00800044 	movi	r2,1
 8004a54:	d0a6fb45 	stb	r2,-25619(gp)
                len++;
 8004a58:	e0bffd0b 	ldhu	r2,-12(fp)
 8004a5c:	10800044 	addi	r2,r2,1
 8004a60:	e0bffd0d 	sth	r2,-12(fp)
                if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
 8004a64:	008200b4 	movhi	r2,2050
 8004a68:	10a33c04 	addi	r2,r2,-29456
 8004a6c:	10800bc3 	ldbu	r2,47(r2)
 8004a70:	10803fcc 	andi	r2,r2,255
 8004a74:	1080040c 	andi	r2,r2,16
 8004a78:	10000126 	beq	r2,zero,8004a80 <_ZN9EtherCard10packetLoopEt+0x518>
                    len = 0;
 8004a7c:	e03ffd0d 	sth	zero,-12(fp)
                make_tcp_ack_from_any(len,TCP_FLAGS_RST_V);
 8004a80:	e0bffd0b 	ldhu	r2,-12(fp)
 8004a84:	10bfffcc 	andi	r2,r2,65535
 8004a88:	10a0001c 	xori	r2,r2,32768
 8004a8c:	10a00004 	addi	r2,r2,-32768
 8004a90:	01400104 	movi	r5,4
 8004a94:	1009883a 	mov	r4,r2
 8004a98:	8002e880 	call	8002e88 <_ZL21make_tcp_ack_from_anysh>
            }
            return 0;
 8004a9c:	0005883a 	mov	r2,zero
 8004aa0:	00006d06 	br	8004c58 <_ZN9EtherCard10packetLoopEt+0x6f0>
        }
        if (tcp_client_state==TCP_STATE_ESTABLISHED && len>0)
 8004aa4:	d0a6fb43 	ldbu	r2,-25619(gp)
 8004aa8:	10803fcc 	andi	r2,r2,255
 8004aac:	108000d8 	cmpnei	r2,r2,3
 8004ab0:	1000431e 	bne	r2,zero,8004bc0 <_ZN9EtherCard10packetLoopEt+0x658>
 8004ab4:	e0bffd0b 	ldhu	r2,-12(fp)
 8004ab8:	10004126 	beq	r2,zero,8004bc0 <_ZN9EtherCard10packetLoopEt+0x658>
        {   //TCP connection established so read data
            if (client_tcp_result_cb) {
 8004abc:	d0a6fc17 	ldw	r2,-25616(gp)
 8004ac0:	10003f26 	beq	r2,zero,8004bc0 <_ZN9EtherCard10packetLoopEt+0x658>
                uint16_t tcpstart = TCP_DATA_START; // TCP_DATA_START is a formula
 8004ac4:	008200b4 	movhi	r2,2050
 8004ac8:	10a33c04 	addi	r2,r2,-29456
 8004acc:	10800b83 	ldbu	r2,46(r2)
 8004ad0:	10803fcc 	andi	r2,r2,255
 8004ad4:	1005d13a 	srai	r2,r2,4
 8004ad8:	1085883a 	add	r2,r2,r2
 8004adc:	1085883a 	add	r2,r2,r2
 8004ae0:	10800884 	addi	r2,r2,34
 8004ae4:	e0bffd8d 	sth	r2,-10(fp)
                if (tcpstart>plen-8)
 8004ae8:	e0bffd8b 	ldhu	r2,-10(fp)
 8004aec:	e0ffff0b 	ldhu	r3,-4(fp)
 8004af0:	18fffe04 	addi	r3,r3,-8
 8004af4:	1880030e 	bge	r3,r2,8004b04 <_ZN9EtherCard10packetLoopEt+0x59c>
                    tcpstart = plen-8; // dummy but save
 8004af8:	e0bfff0b 	ldhu	r2,-4(fp)
 8004afc:	10bffe04 	addi	r2,r2,-8
 8004b00:	e0bffd8d 	sth	r2,-10(fp)
                uint16_t save_len = len;
 8004b04:	e0bffd0b 	ldhu	r2,-12(fp)
 8004b08:	e0bffe0d 	sth	r2,-8(fp)
                if (tcpstart+len>plen)
 8004b0c:	e0fffd8b 	ldhu	r3,-10(fp)
 8004b10:	e0bffd0b 	ldhu	r2,-12(fp)
 8004b14:	1885883a 	add	r2,r3,r2
 8004b18:	e0ffff0b 	ldhu	r3,-4(fp)
 8004b1c:	1880040e 	bge	r3,r2,8004b30 <_ZN9EtherCard10packetLoopEt+0x5c8>
                    save_len = plen-tcpstart;
 8004b20:	e0ffff0b 	ldhu	r3,-4(fp)
 8004b24:	e0bffd8b 	ldhu	r2,-10(fp)
 8004b28:	1885c83a 	sub	r2,r3,r2
 8004b2c:	e0bffe0d 	sth	r2,-8(fp)
                (*client_tcp_result_cb)((gPB[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len); //Call TCP handler (callback) function
 8004b30:	d0e6fc17 	ldw	r3,-25616(gp)
 8004b34:	008200b4 	movhi	r2,2050
 8004b38:	10a33c04 	addi	r2,r2,-29456
 8004b3c:	10800943 	ldbu	r2,37(r2)
 8004b40:	10803fcc 	andi	r2,r2,255
 8004b44:	1004d17a 	srli	r2,r2,5
 8004b48:	10803fcc 	andi	r2,r2,255
 8004b4c:	e13ffd8b 	ldhu	r4,-10(fp)
 8004b50:	e17ffe0b 	ldhu	r5,-8(fp)
 8004b54:	280f883a 	mov	r7,r5
 8004b58:	200d883a 	mov	r6,r4
 8004b5c:	000b883a 	mov	r5,zero
 8004b60:	1009883a 	mov	r4,r2
 8004b64:	183ee83a 	callr	r3

                if(persist_tcp_connection)
 8004b68:	d0a6ee03 	ldbu	r2,-25672(gp)
 8004b6c:	10803fcc 	andi	r2,r2,255
 8004b70:	10000826 	beq	r2,zero,8004b94 <_ZN9EtherCard10packetLoopEt+0x62c>
                {   //Keep connection alive by sending ACK
                    make_tcp_ack_from_any(len,TCP_FLAGS_PUSH_V);
 8004b74:	e0bffd0b 	ldhu	r2,-12(fp)
 8004b78:	10bfffcc 	andi	r2,r2,65535
 8004b7c:	10a0001c 	xori	r2,r2,32768
 8004b80:	10a00004 	addi	r2,r2,-32768
 8004b84:	01400204 	movi	r5,8
 8004b88:	1009883a 	mov	r4,r2
 8004b8c:	8002e880 	call	8002e88 <_ZL21make_tcp_ack_from_anysh>
 8004b90:	00000906 	br	8004bb8 <_ZN9EtherCard10packetLoopEt+0x650>
                }
                else
                {   //Close connection
                    make_tcp_ack_from_any(len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
 8004b94:	e0bffd0b 	ldhu	r2,-12(fp)
 8004b98:	10bfffcc 	andi	r2,r2,65535
 8004b9c:	10a0001c 	xori	r2,r2,32768
 8004ba0:	10a00004 	addi	r2,r2,-32768
 8004ba4:	01400244 	movi	r5,9
 8004ba8:	1009883a 	mov	r4,r2
 8004bac:	8002e880 	call	8002e88 <_ZL21make_tcp_ack_from_anysh>
                    tcp_client_state = TCP_STATE_CLOSED;
 8004bb0:	00800184 	movi	r2,6
 8004bb4:	d0a6fb45 	stb	r2,-25619(gp)
                }
                return 0;
 8004bb8:	0005883a 	mov	r2,zero
 8004bbc:	00002606 	br	8004c58 <_ZN9EtherCard10packetLoopEt+0x6f0>
            }
        }
        if (tcp_client_state != TCP_STATE_CLOSING)
 8004bc0:	d0a6fb43 	ldbu	r2,-25619(gp)
 8004bc4:	10803fcc 	andi	r2,r2,255
 8004bc8:	10800160 	cmpeqi	r2,r2,5
 8004bcc:	1000201e 	bne	r2,zero,8004c50 <_ZN9EtherCard10packetLoopEt+0x6e8>
        {   //
            if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V) {
 8004bd0:	008200b4 	movhi	r2,2050
 8004bd4:	10a33c04 	addi	r2,r2,-29456
 8004bd8:	10800bc3 	ldbu	r2,47(r2)
 8004bdc:	10803fcc 	andi	r2,r2,255
 8004be0:	1080004c 	andi	r2,r2,1
 8004be4:	10001126 	beq	r2,zero,8004c2c <_ZN9EtherCard10packetLoopEt+0x6c4>
                if(tcp_client_state == TCP_STATE_ESTABLISHED) {
 8004be8:	d0a6fb43 	ldbu	r2,-25619(gp)
 8004bec:	10803fcc 	andi	r2,r2,255
 8004bf0:	108000d8 	cmpnei	r2,r2,3
 8004bf4:	1000021e 	bne	r2,zero,8004c00 <_ZN9EtherCard10packetLoopEt+0x698>
                    return 0; // In some instances FIN is received *before* DATA.  If that is the case, we just return here and keep looking for the data packet
 8004bf8:	0005883a 	mov	r2,zero
 8004bfc:	00001606 	br	8004c58 <_ZN9EtherCard10packetLoopEt+0x6f0>
                }
                make_tcp_ack_from_any(len+1,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
 8004c00:	e0bffd0b 	ldhu	r2,-12(fp)
 8004c04:	10800044 	addi	r2,r2,1
 8004c08:	10bfffcc 	andi	r2,r2,65535
 8004c0c:	10a0001c 	xori	r2,r2,32768
 8004c10:	10a00004 	addi	r2,r2,-32768
 8004c14:	01400244 	movi	r5,9
 8004c18:	1009883a 	mov	r4,r2
 8004c1c:	8002e880 	call	8002e88 <_ZL21make_tcp_ack_from_anysh>
                tcp_client_state = TCP_STATE_CLOSED; // connection terminated
 8004c20:	00800184 	movi	r2,6
 8004c24:	d0a6fb45 	stb	r2,-25619(gp)
 8004c28:	00000906 	br	8004c50 <_ZN9EtherCard10packetLoopEt+0x6e8>
            } else if (len>0) {
 8004c2c:	e0bffd0b 	ldhu	r2,-12(fp)
 8004c30:	10000726 	beq	r2,zero,8004c50 <_ZN9EtherCard10packetLoopEt+0x6e8>
                make_tcp_ack_from_any(len,0);
 8004c34:	e0bffd0b 	ldhu	r2,-12(fp)
 8004c38:	10bfffcc 	andi	r2,r2,65535
 8004c3c:	10a0001c 	xori	r2,r2,32768
 8004c40:	10a00004 	addi	r2,r2,-32768
 8004c44:	000b883a 	mov	r5,zero
 8004c48:	1009883a 	mov	r4,r2
 8004c4c:	8002e880 	call	8002e88 <_ZL21make_tcp_ack_from_anysh>
            }
        }
        return 0;
 8004c50:	0005883a 	mov	r2,zero
 8004c54:	00000006 	br	8004c58 <_ZN9EtherCard10packetLoopEt+0x6f0>

#if ETHERCARD_TCPSERVER
    //If we are here then this is a TCP/IP packet targeted at us and not related to our client connection so accept
    return accept(hisport, plen);
#endif
}
 8004c58:	e037883a 	mov	sp,fp
 8004c5c:	dfc00117 	ldw	ra,4(sp)
 8004c60:	df000017 	ldw	fp,0(sp)
 8004c64:	dec00204 	addi	sp,sp,8
 8004c68:	f800283a 	ret

08004c6c <_ZN9EtherCard20persistTcpConnectionEb>:

void EtherCard::persistTcpConnection(bool persist) {
 8004c6c:	defffe04 	addi	sp,sp,-8
 8004c70:	df000115 	stw	fp,4(sp)
 8004c74:	df000104 	addi	fp,sp,4
 8004c78:	2005883a 	mov	r2,r4
 8004c7c:	e0bfff05 	stb	r2,-4(fp)
    persist_tcp_connection = persist;
 8004c80:	e0bfff03 	ldbu	r2,-4(fp)
 8004c84:	d0a6ee05 	stb	r2,-25672(gp)
}
 8004c88:	0001883a 	nop
 8004c8c:	e037883a 	mov	sp,fp
 8004c90:	df000017 	ldw	fp,0(sp)
 8004c94:	dec00104 	addi	sp,sp,4
 8004c98:	f800283a 	ret

08004c9c <_ZN9EtherCard7printIpEPKcPKh>:
#include "EtherCard.h"
#include <stdio.h>
#include <string.h>

void EtherCard::printIp (const char *msg, const uint8_t *buf) {
 8004c9c:	defffc04 	addi	sp,sp,-16
 8004ca0:	dfc00315 	stw	ra,12(sp)
 8004ca4:	df000215 	stw	fp,8(sp)
 8004ca8:	df000204 	addi	fp,sp,8
 8004cac:	e13ffe15 	stw	r4,-8(fp)
 8004cb0:	e17fff15 	stw	r5,-4(fp)
    printf("%s", msg);
 8004cb4:	e17ffe17 	ldw	r5,-8(fp)
 8004cb8:	01020074 	movhi	r4,2049
 8004cbc:	21148104 	addi	r4,r4,20996
 8004cc0:	8005d780 	call	8005d78 <printf>
    EtherCard::printIp(buf);
 8004cc4:	e13fff17 	ldw	r4,-4(fp)
 8004cc8:	8004cec0 	call	8004cec <_ZN9EtherCard7printIpEPKh>
    printf("\n");
 8004ccc:	01000284 	movi	r4,10
 8004cd0:	8005dbc0 	call	8005dbc <putchar>
}
 8004cd4:	0001883a 	nop
 8004cd8:	e037883a 	mov	sp,fp
 8004cdc:	dfc00117 	ldw	ra,4(sp)
 8004ce0:	df000017 	ldw	fp,0(sp)
 8004ce4:	dec00204 	addi	sp,sp,8
 8004ce8:	f800283a 	ret

08004cec <_ZN9EtherCard7printIpEPKh>:

void EtherCard::printIp (const uint8_t *buf) {
 8004cec:	defffc04 	addi	sp,sp,-16
 8004cf0:	dfc00315 	stw	ra,12(sp)
 8004cf4:	df000215 	stw	fp,8(sp)
 8004cf8:	df000204 	addi	fp,sp,8
 8004cfc:	e13fff15 	stw	r4,-4(fp)
    for (uint8_t i = 0; i < IP_LEN; ++i) {
 8004d00:	e03ffe05 	stb	zero,-8(fp)
 8004d04:	e0bffe03 	ldbu	r2,-8(fp)
 8004d08:	10800128 	cmpgeui	r2,r2,4
 8004d0c:	1000121e 	bne	r2,zero,8004d58 <_ZN9EtherCard7printIpEPKh+0x6c>
        printf("%d", buf[i]);
 8004d10:	e0bffe03 	ldbu	r2,-8(fp)
 8004d14:	e0ffff17 	ldw	r3,-4(fp)
 8004d18:	1885883a 	add	r2,r3,r2
 8004d1c:	10800003 	ldbu	r2,0(r2)
 8004d20:	10803fcc 	andi	r2,r2,255
 8004d24:	100b883a 	mov	r5,r2
 8004d28:	01020074 	movhi	r4,2049
 8004d2c:	21148204 	addi	r4,r4,21000
 8004d30:	8005d780 	call	8005d78 <printf>
        if (i < 3)
 8004d34:	e0bffe03 	ldbu	r2,-8(fp)
 8004d38:	108000e8 	cmpgeui	r2,r2,3
 8004d3c:	1000021e 	bne	r2,zero,8004d48 <_ZN9EtherCard7printIpEPKh+0x5c>
            printf(".");
 8004d40:	01000b84 	movi	r4,46
 8004d44:	8005dbc0 	call	8005dbc <putchar>
    EtherCard::printIp(buf);
    printf("\n");
}

void EtherCard::printIp (const uint8_t *buf) {
    for (uint8_t i = 0; i < IP_LEN; ++i) {
 8004d48:	e0bffe03 	ldbu	r2,-8(fp)
 8004d4c:	10800044 	addi	r2,r2,1
 8004d50:	e0bffe05 	stb	r2,-8(fp)
 8004d54:	003feb06 	br	8004d04 <_ZN9EtherCard7printIpEPKh+0x18>
        printf("%d", buf[i]);
        if (i < 3)
            printf(".");
    }
}
 8004d58:	0001883a 	nop
 8004d5c:	e037883a 	mov	sp,fp
 8004d60:	dfc00117 	ldw	ra,4(sp)
 8004d64:	df000017 	ldw	fp,0(sp)
 8004d68:	dec00204 	addi	sp,sp,8
 8004d6c:	f800283a 	ret

08004d70 <_ZN9EtherCard7copyMacEPhPKh>:

void EtherCard::copyMac (uint8_t *dst, const uint8_t *src) {
 8004d70:	defffc04 	addi	sp,sp,-16
 8004d74:	dfc00315 	stw	ra,12(sp)
 8004d78:	df000215 	stw	fp,8(sp)
 8004d7c:	df000204 	addi	fp,sp,8
 8004d80:	e13ffe15 	stw	r4,-8(fp)
 8004d84:	e17fff15 	stw	r5,-4(fp)
    memcpy(dst, src, ETH_LEN);
 8004d88:	01800184 	movi	r6,6
 8004d8c:	e17fff17 	ldw	r5,-4(fp)
 8004d90:	e13ffe17 	ldw	r4,-8(fp)
 8004d94:	8005ad80 	call	8005ad8 <memcpy>
}
 8004d98:	0001883a 	nop
 8004d9c:	e037883a 	mov	sp,fp
 8004da0:	dfc00117 	ldw	ra,4(sp)
 8004da4:	df000017 	ldw	fp,0(sp)
 8004da8:	dec00204 	addi	sp,sp,8
 8004dac:	f800283a 	ret

08004db0 <_ZN9EtherCard6copyIpEPhPKh>:

void EtherCard::copyIp (uint8_t *dst, const uint8_t *src) {
 8004db0:	defffc04 	addi	sp,sp,-16
 8004db4:	dfc00315 	stw	ra,12(sp)
 8004db8:	df000215 	stw	fp,8(sp)
 8004dbc:	df000204 	addi	fp,sp,8
 8004dc0:	e13ffe15 	stw	r4,-8(fp)
 8004dc4:	e17fff15 	stw	r5,-4(fp)
    memcpy(dst, src, IP_LEN);
 8004dc8:	01800104 	movi	r6,4
 8004dcc:	e17fff17 	ldw	r5,-4(fp)
 8004dd0:	e13ffe17 	ldw	r4,-8(fp)
 8004dd4:	8005ad80 	call	8005ad8 <memcpy>
}
 8004dd8:	0001883a 	nop
 8004ddc:	e037883a 	mov	sp,fp
 8004de0:	dfc00117 	ldw	ra,4(sp)
 8004de4:	df000017 	ldw	fp,0(sp)
 8004de8:	dec00204 	addi	sp,sp,8
 8004dec:	f800283a 	ret

08004df0 <_ZL9gotPingedPh>:
//EtherCard ether;

uint8_t Ethernet::buffer[700];

// called when a ping comes in (replies to it are automatic)
static void gotPinged(uint8_t *ptr) { ether.printIp(">>> ping from: ", ptr); }
 8004df0:	defffd04 	addi	sp,sp,-12
 8004df4:	dfc00215 	stw	ra,8(sp)
 8004df8:	df000115 	stw	fp,4(sp)
 8004dfc:	df000104 	addi	fp,sp,4
 8004e00:	e13fff15 	stw	r4,-4(fp)
 8004e04:	e17fff17 	ldw	r5,-4(fp)
 8004e08:	01020074 	movhi	r4,2049
 8004e0c:	21148304 	addi	r4,r4,21004
 8004e10:	8004c9c0 	call	8004c9c <_ZN9EtherCard7printIpEPKcPKh>
 8004e14:	0001883a 	nop
 8004e18:	e037883a 	mov	sp,fp
 8004e1c:	dfc00117 	ldw	ra,4(sp)
 8004e20:	df000017 	ldw	fp,0(sp)
 8004e24:	dec00204 	addi	sp,sp,8
 8004e28:	f800283a 	ret

08004e2c <main>:

int main() {
 8004e2c:	defffb04 	addi	sp,sp,-20
 8004e30:	dfc00415 	stw	ra,16(sp)
 8004e34:	df000315 	stw	fp,12(sp)
 8004e38:	dc000215 	stw	r16,8(sp)
 8004e3c:	df000304 	addi	fp,sp,12
  printf("\n[pings]");
 8004e40:	01020074 	movhi	r4,2049
 8004e44:	21148704 	addi	r4,r4,21020
 8004e48:	8005d780 	call	8005d78 <printf>


  // Change 'SS' to your Slave Select pin, if you arn't using the default pin
  if (ether.begin(sizeof ether.buffer, (const uint8_t*)mymac, SS) == 0)
 8004e4c:	0080af04 	movi	r2,700
 8004e50:	10bfffcc 	andi	r2,r2,65535
 8004e54:	000d883a 	mov	r6,zero
 8004e58:	d1600744 	addi	r5,gp,-32739
 8004e5c:	1009883a 	mov	r4,r2
 8004e60:	800026c0 	call	800026c <_ZN9EtherCard5beginEtPKhh>
 8004e64:	10803fcc 	andi	r2,r2,255
 8004e68:	1005003a 	cmpeq	r2,r2,zero
 8004e6c:	10803fcc 	andi	r2,r2,255
 8004e70:	10000326 	beq	r2,zero,8004e80 <main+0x54>
    printf("Failed to access Ethernet controller");
 8004e74:	01020074 	movhi	r4,2049
 8004e78:	21148a04 	addi	r4,r4,21032
 8004e7c:	8005d780 	call	8005d78 <printf>
   if (!ether.dhcpSetup())
 8004e80:	01400044 	movi	r5,1
 8004e84:	0009883a 	mov	r4,zero
 8004e88:	8000b5c0 	call	8000b5c <_ZN9EtherCard9dhcpSetupEPKcb>
 8004e8c:	1080005c 	xori	r2,r2,1
 8004e90:	10803fcc 	andi	r2,r2,255
 8004e94:	10000326 	beq	r2,zero,8004ea4 <main+0x78>
     printf("DHCP failed");
 8004e98:	01020074 	movhi	r4,2049
 8004e9c:	21149404 	addi	r4,r4,21072
 8004ea0:	8005d780 	call	8005d78 <printf>

  ether.printIp("IP:  ", ether.myip);
 8004ea4:	d166e6c4 	addi	r5,gp,-25701
 8004ea8:	01020074 	movhi	r4,2049
 8004eac:	21149704 	addi	r4,r4,21084
 8004eb0:	8004c9c0 	call	8004c9c <_ZN9EtherCard7printIpEPKcPKh>
  ether.printIp("GW:  ", ether.gwip);
 8004eb4:	d166e9c4 	addi	r5,gp,-25689
 8004eb8:	01020074 	movhi	r4,2049
 8004ebc:	21149904 	addi	r4,r4,21092
 8004ec0:	8004c9c0 	call	8004c9c <_ZN9EtherCard7printIpEPKcPKh>

  // use DNS to locate the IP address we want to ping
  if (!ether.dnsLookup("www.google.com"))
 8004ec4:	000b883a 	mov	r5,zero
 8004ec8:	01020074 	movhi	r4,2049
 8004ecc:	21149b04 	addi	r4,r4,21100
 8004ed0:	80013080 	call	8001308 <_ZN9EtherCard9dnsLookupEPKcb>
 8004ed4:	1080005c 	xori	r2,r2,1
 8004ed8:	10803fcc 	andi	r2,r2,255
 8004edc:	10000326 	beq	r2,zero,8004eec <main+0xc0>
    printf("DNS failed");
 8004ee0:	01020074 	movhi	r4,2049
 8004ee4:	21149f04 	addi	r4,r4,21116
 8004ee8:	8005d780 	call	8005d78 <printf>

  ether.printIp("SRV: ", ether.hisip);
 8004eec:	d166ecc4 	addi	r5,gp,-25677
 8004ef0:	01020074 	movhi	r4,2049
 8004ef4:	2114a204 	addi	r4,r4,21128
 8004ef8:	8004c9c0 	call	8004c9c <_ZN9EtherCard7printIpEPKcPKh>

  // call this to report others pinging us
  ether.registerPingCallback(gotPinged);
 8004efc:	01020034 	movhi	r4,2048
 8004f00:	21137c04 	addi	r4,r4,19952
 8004f04:	80043980 	call	8004398 <_ZN9EtherCard20registerPingCallbackEPFvPhE>

  //   timer = -9999999; // start timing out right away
  time_t prevTime = time(NULL);
 8004f08:	0009883a 	mov	r4,zero
 8004f0c:	80060fc0 	call	80060fc <time>
 8004f10:	e0bffd15 	stw	r2,-12(fp)

  while (1) {
    uint16_t len = ether.packetReceive(); // go receive new packets
 8004f14:	8001ea80 	call	8001ea8 <_ZN8ENC28J6013packetReceiveEv>
 8004f18:	e0bffe0d 	sth	r2,-8(fp)
    uint16_t pos = ether.packetLoop(len); // respond to incoming pings
 8004f1c:	e0bffe0b 	ldhu	r2,-8(fp)
 8004f20:	1009883a 	mov	r4,r2
 8004f24:	80045680 	call	8004568 <_ZN9EtherCard10packetLoopEt>
 8004f28:	e0bffe8d 	sth	r2,-6(fp)

    // report whenever a reply to our outgoing ping comes back
    if (len > 0 && ether.packetLoopIcmpCheckReply(ether.hisip))
 8004f2c:	e0bffe0b 	ldhu	r2,-8(fp)
 8004f30:	10000626 	beq	r2,zero,8004f4c <main+0x120>
 8004f34:	d126ecc4 	addi	r4,gp,-25677
 8004f38:	80043c40 	call	80043c4 <_ZN9EtherCard24packetLoopIcmpCheckReplyEPKh>
 8004f3c:	10803fcc 	andi	r2,r2,255
 8004f40:	10000226 	beq	r2,zero,8004f4c <main+0x120>
 8004f44:	00800044 	movi	r2,1
 8004f48:	00000106 	br	8004f50 <main+0x124>
 8004f4c:	0005883a 	mov	r2,zero
 8004f50:	10803fcc 	andi	r2,r2,255
 8004f54:	10001726 	beq	r2,zero,8004fb4 <main+0x188>
      printf("   %.f ms", difftime(time(NULL), prevTime) * 0.001);
 8004f58:	0009883a 	mov	r4,zero
 8004f5c:	80060fc0 	call	80060fc <time>
 8004f60:	e17ffd17 	ldw	r5,-12(fp)
 8004f64:	1009883a 	mov	r4,r2
 8004f68:	8005a400 	call	8005a40 <difftime>
 8004f6c:	1011883a 	mov	r8,r2
 8004f70:	1813883a 	mov	r9,r3
 8004f74:	01b4bcb4 	movhi	r6,54002
 8004f78:	31aa7f04 	addi	r6,r6,-22020
 8004f7c:	01cfd434 	movhi	r7,16208
 8004f80:	39d89344 	addi	r7,r7,25165
 8004f84:	4009883a 	mov	r4,r8
 8004f88:	480b883a 	mov	r5,r9
 8004f8c:	80051240 	call	8005124 <__muldf3>
 8004f90:	1009883a 	mov	r4,r2
 8004f94:	180b883a 	mov	r5,r3
 8004f98:	2005883a 	mov	r2,r4
 8004f9c:	2807883a 	mov	r3,r5
 8004fa0:	100b883a 	mov	r5,r2
 8004fa4:	180d883a 	mov	r6,r3
 8004fa8:	01020074 	movhi	r4,2049
 8004fac:	2114a404 	addi	r4,r4,21136
 8004fb0:	8005d780 	call	8005d78 <printf>

    // ping a remote server once every few seconds
    if (difftime(time(NULL), prevTime) >= 5) {
 8004fb4:	0009883a 	mov	r4,zero
 8004fb8:	80060fc0 	call	80060fc <time>
 8004fbc:	e17ffd17 	ldw	r5,-12(fp)
 8004fc0:	1009883a 	mov	r4,r2
 8004fc4:	8005a400 	call	8005a40 <difftime>
 8004fc8:	1011883a 	mov	r8,r2
 8004fcc:	1813883a 	mov	r9,r3
 8004fd0:	04000044 	movi	r16,1
 8004fd4:	000d883a 	mov	r6,zero
 8004fd8:	01d00534 	movhi	r7,16404
 8004fdc:	4009883a 	mov	r4,r8
 8004fe0:	480b883a 	mov	r5,r9
 8004fe4:	80050480 	call	8005048 <__gedf2>
 8004fe8:	1000010e 	bge	r2,zero,8004ff0 <main+0x1c4>
 8004fec:	0021883a 	mov	r16,zero
 8004ff0:	80803fcc 	andi	r2,r16,255
 8004ff4:	103fc726 	beq	r2,zero,8004f14 <main+0xe8>
      ether.printIp("Pinging: ", ether.hisip);
 8004ff8:	d166ecc4 	addi	r5,gp,-25677
 8004ffc:	01020074 	movhi	r4,2049
 8005000:	2114a704 	addi	r4,r4,21148
 8005004:	8004c9c0 	call	8004c9c <_ZN9EtherCard7printIpEPKcPKh>
      prevTime = time(NULL);
 8005008:	0009883a 	mov	r4,zero
 800500c:	80060fc0 	call	80060fc <time>
 8005010:	e0bffd15 	stw	r2,-12(fp)
      ether.clientIcmpRequest(ether.hisip);
 8005014:	d126ecc4 	addi	r4,gp,-25677
 8005018:	80032b00 	call	80032b0 <_ZN9EtherCard17clientIcmpRequestEPKh>
  ether.registerPingCallback(gotPinged);

  //   timer = -9999999; // start timing out right away
  time_t prevTime = time(NULL);

  while (1) {
 800501c:	003fbd06 	br	8004f14 <main+0xe8>

08005020 <__mulsi3>:
 8005020:	0005883a 	mov	r2,zero
 8005024:	20000726 	beq	r4,zero,8005044 <__mulsi3+0x24>
 8005028:	20c0004c 	andi	r3,r4,1
 800502c:	2008d07a 	srli	r4,r4,1
 8005030:	18000126 	beq	r3,zero,8005038 <__mulsi3+0x18>
 8005034:	1145883a 	add	r2,r2,r5
 8005038:	294b883a 	add	r5,r5,r5
 800503c:	203ffa1e 	bne	r4,zero,8005028 <__mulsi3+0x8>
 8005040:	f800283a 	ret
 8005044:	f800283a 	ret

08005048 <__gedf2>:
 8005048:	2804d53a 	srli	r2,r5,20
 800504c:	3806d53a 	srli	r3,r7,20
 8005050:	02000434 	movhi	r8,16
 8005054:	423fffc4 	addi	r8,r8,-1
 8005058:	1081ffcc 	andi	r2,r2,2047
 800505c:	0241ffc4 	movi	r9,2047
 8005060:	2a14703a 	and	r10,r5,r8
 8005064:	18c1ffcc 	andi	r3,r3,2047
 8005068:	3a10703a 	and	r8,r7,r8
 800506c:	280ad7fa 	srli	r5,r5,31
 8005070:	380ed7fa 	srli	r7,r7,31
 8005074:	12401d26 	beq	r2,r9,80050ec <__gedf2+0xa4>
 8005078:	0241ffc4 	movi	r9,2047
 800507c:	1a401226 	beq	r3,r9,80050c8 <__gedf2+0x80>
 8005080:	1000081e 	bne	r2,zero,80050a4 <__gedf2+0x5c>
 8005084:	2296b03a 	or	r11,r4,r10
 8005088:	5813003a 	cmpeq	r9,r11,zero
 800508c:	1800091e 	bne	r3,zero,80050b4 <__gedf2+0x6c>
 8005090:	3218b03a 	or	r12,r6,r8
 8005094:	6000071e 	bne	r12,zero,80050b4 <__gedf2+0x6c>
 8005098:	0005883a 	mov	r2,zero
 800509c:	5800101e 	bne	r11,zero,80050e0 <__gedf2+0x98>
 80050a0:	f800283a 	ret
 80050a4:	18000c1e 	bne	r3,zero,80050d8 <__gedf2+0x90>
 80050a8:	3212b03a 	or	r9,r6,r8
 80050ac:	48000c26 	beq	r9,zero,80050e0 <__gedf2+0x98>
 80050b0:	0013883a 	mov	r9,zero
 80050b4:	39c03fcc 	andi	r7,r7,255
 80050b8:	48000826 	beq	r9,zero,80050dc <__gedf2+0x94>
 80050bc:	38000926 	beq	r7,zero,80050e4 <__gedf2+0x9c>
 80050c0:	00800044 	movi	r2,1
 80050c4:	f800283a 	ret
 80050c8:	3212b03a 	or	r9,r6,r8
 80050cc:	483fec26 	beq	r9,zero,8005080 <__gedf2+0x38>
 80050d0:	00bfff84 	movi	r2,-2
 80050d4:	f800283a 	ret
 80050d8:	39c03fcc 	andi	r7,r7,255
 80050dc:	29c00626 	beq	r5,r7,80050f8 <__gedf2+0xb0>
 80050e0:	283ff726 	beq	r5,zero,80050c0 <__gedf2+0x78>
 80050e4:	00bfffc4 	movi	r2,-1
 80050e8:	f800283a 	ret
 80050ec:	2292b03a 	or	r9,r4,r10
 80050f0:	483fe126 	beq	r9,zero,8005078 <__gedf2+0x30>
 80050f4:	003ff606 	br	80050d0 <__gedf2+0x88>
 80050f8:	18bff916 	blt	r3,r2,80050e0 <__gedf2+0x98>
 80050fc:	10c00316 	blt	r2,r3,800510c <__gedf2+0xc4>
 8005100:	42bff736 	bltu	r8,r10,80050e0 <__gedf2+0x98>
 8005104:	52000326 	beq	r10,r8,8005114 <__gedf2+0xcc>
 8005108:	5200042e 	bgeu	r10,r8,800511c <__gedf2+0xd4>
 800510c:	283fec1e 	bne	r5,zero,80050c0 <__gedf2+0x78>
 8005110:	003ff406 	br	80050e4 <__gedf2+0x9c>
 8005114:	313ff236 	bltu	r6,r4,80050e0 <__gedf2+0x98>
 8005118:	21bffc36 	bltu	r4,r6,800510c <__gedf2+0xc4>
 800511c:	0005883a 	mov	r2,zero
 8005120:	f800283a 	ret

08005124 <__muldf3>:
 8005124:	deffee04 	addi	sp,sp,-72
 8005128:	dd000c15 	stw	r20,48(sp)
 800512c:	2828d53a 	srli	r20,r5,20
 8005130:	ddc00f15 	stw	r23,60(sp)
 8005134:	282ed7fa 	srli	r23,r5,31
 8005138:	dc000815 	stw	r16,32(sp)
 800513c:	04000434 	movhi	r16,16
 8005140:	dcc00b15 	stw	r19,44(sp)
 8005144:	843fffc4 	addi	r16,r16,-1
 8005148:	dfc01115 	stw	ra,68(sp)
 800514c:	df001015 	stw	fp,64(sp)
 8005150:	dd800e15 	stw	r22,56(sp)
 8005154:	dd400d15 	stw	r21,52(sp)
 8005158:	dc800a15 	stw	r18,40(sp)
 800515c:	dc400915 	stw	r17,36(sp)
 8005160:	a501ffcc 	andi	r20,r20,2047
 8005164:	2c20703a 	and	r16,r5,r16
 8005168:	b827883a 	mov	r19,r23
 800516c:	ba403fcc 	andi	r9,r23,255
 8005170:	a0006026 	beq	r20,zero,80052f4 <__muldf3+0x1d0>
 8005174:	0081ffc4 	movi	r2,2047
 8005178:	202d883a 	mov	r22,r4
 800517c:	a0803626 	beq	r20,r2,8005258 <__muldf3+0x134>
 8005180:	84000434 	orhi	r16,r16,16
 8005184:	200ad77a 	srli	r5,r4,29
 8005188:	800490fa 	slli	r2,r16,3
 800518c:	202c90fa 	slli	r22,r4,3
 8005190:	a53f0044 	addi	r20,r20,-1023
 8005194:	28a0b03a 	or	r16,r5,r2
 8005198:	002b883a 	mov	r21,zero
 800519c:	000b883a 	mov	r5,zero
 80051a0:	3804d53a 	srli	r2,r7,20
 80051a4:	3838d7fa 	srli	fp,r7,31
 80051a8:	04400434 	movhi	r17,16
 80051ac:	8c7fffc4 	addi	r17,r17,-1
 80051b0:	1081ffcc 	andi	r2,r2,2047
 80051b4:	3025883a 	mov	r18,r6
 80051b8:	3c62703a 	and	r17,r7,r17
 80051bc:	e2803fcc 	andi	r10,fp,255
 80051c0:	10006d26 	beq	r2,zero,8005378 <__muldf3+0x254>
 80051c4:	00c1ffc4 	movi	r3,2047
 80051c8:	10c06526 	beq	r2,r3,8005360 <__muldf3+0x23c>
 80051cc:	8c400434 	orhi	r17,r17,16
 80051d0:	300ed77a 	srli	r7,r6,29
 80051d4:	880690fa 	slli	r3,r17,3
 80051d8:	302490fa 	slli	r18,r6,3
 80051dc:	10bf0044 	addi	r2,r2,-1023
 80051e0:	38e2b03a 	or	r17,r7,r3
 80051e4:	000f883a 	mov	r7,zero
 80051e8:	a087883a 	add	r3,r20,r2
 80051ec:	010003c4 	movi	r4,15
 80051f0:	3d44b03a 	or	r2,r7,r21
 80051f4:	e5ccf03a 	xor	r6,fp,r23
 80051f8:	1a000044 	addi	r8,r3,1
 80051fc:	20809b36 	bltu	r4,r2,800546c <__muldf3+0x348>
 8005200:	100490ba 	slli	r2,r2,2
 8005204:	01020034 	movhi	r4,2048
 8005208:	21148604 	addi	r4,r4,21016
 800520c:	1105883a 	add	r2,r2,r4
 8005210:	10800017 	ldw	r2,0(r2)
 8005214:	1000683a 	jmp	r2
 8005218:	0800546c 	andhi	zero,at,337
 800521c:	08005278 	rdprs	zero,at,329
 8005220:	08005278 	rdprs	zero,at,329
 8005224:	08005274 	orhi	zero,at,329
 8005228:	08005448 	cmpgei	zero,at,337
 800522c:	08005448 	cmpgei	zero,at,337
 8005230:	08005430 	cmpltui	zero,at,336
 8005234:	08005274 	orhi	zero,at,329
 8005238:	08005448 	cmpgei	zero,at,337
 800523c:	08005430 	cmpltui	zero,at,336
 8005240:	08005448 	cmpgei	zero,at,337
 8005244:	08005274 	orhi	zero,at,329
 8005248:	08005458 	cmpnei	zero,at,337
 800524c:	08005458 	cmpnei	zero,at,337
 8005250:	08005458 	cmpnei	zero,at,337
 8005254:	080057b8 	rdprs	zero,at,350
 8005258:	2404b03a 	or	r2,r4,r16
 800525c:	1000711e 	bne	r2,zero,8005424 <__muldf3+0x300>
 8005260:	05400204 	movi	r21,8
 8005264:	0021883a 	mov	r16,zero
 8005268:	002d883a 	mov	r22,zero
 800526c:	01400084 	movi	r5,2
 8005270:	003fcb06 	br	80051a0 <__muldf3+0x7c>
 8005274:	500d883a 	mov	r6,r10
 8005278:	00800084 	movi	r2,2
 800527c:	38805926 	beq	r7,r2,80053e4 <__muldf3+0x2c0>
 8005280:	008000c4 	movi	r2,3
 8005284:	3881bb26 	beq	r7,r2,8005974 <__muldf3+0x850>
 8005288:	00800044 	movi	r2,1
 800528c:	3881961e 	bne	r7,r2,80058e8 <__muldf3+0x7c4>
 8005290:	3027883a 	mov	r19,r6
 8005294:	0005883a 	mov	r2,zero
 8005298:	0021883a 	mov	r16,zero
 800529c:	002d883a 	mov	r22,zero
 80052a0:	1004953a 	slli	r2,r2,20
 80052a4:	98c03fcc 	andi	r3,r19,255
 80052a8:	04400434 	movhi	r17,16
 80052ac:	8c7fffc4 	addi	r17,r17,-1
 80052b0:	180697fa 	slli	r3,r3,31
 80052b4:	8460703a 	and	r16,r16,r17
 80052b8:	80a0b03a 	or	r16,r16,r2
 80052bc:	80c6b03a 	or	r3,r16,r3
 80052c0:	b005883a 	mov	r2,r22
 80052c4:	dfc01117 	ldw	ra,68(sp)
 80052c8:	df001017 	ldw	fp,64(sp)
 80052cc:	ddc00f17 	ldw	r23,60(sp)
 80052d0:	dd800e17 	ldw	r22,56(sp)
 80052d4:	dd400d17 	ldw	r21,52(sp)
 80052d8:	dd000c17 	ldw	r20,48(sp)
 80052dc:	dcc00b17 	ldw	r19,44(sp)
 80052e0:	dc800a17 	ldw	r18,40(sp)
 80052e4:	dc400917 	ldw	r17,36(sp)
 80052e8:	dc000817 	ldw	r16,32(sp)
 80052ec:	dec01204 	addi	sp,sp,72
 80052f0:	f800283a 	ret
 80052f4:	2404b03a 	or	r2,r4,r16
 80052f8:	202b883a 	mov	r21,r4
 80052fc:	10004426 	beq	r2,zero,8005410 <__muldf3+0x2ec>
 8005300:	80015126 	beq	r16,zero,8005848 <__muldf3+0x724>
 8005304:	8009883a 	mov	r4,r16
 8005308:	d9800715 	stw	r6,28(sp)
 800530c:	d9c00215 	stw	r7,8(sp)
 8005310:	da400415 	stw	r9,16(sp)
 8005314:	80059900 	call	8005990 <__clzsi2>
 8005318:	d9800717 	ldw	r6,28(sp)
 800531c:	d9c00217 	ldw	r7,8(sp)
 8005320:	da400417 	ldw	r9,16(sp)
 8005324:	113ffd44 	addi	r4,r2,-11
 8005328:	00c00704 	movi	r3,28
 800532c:	19014216 	blt	r3,r4,8005838 <__muldf3+0x714>
 8005330:	00c00744 	movi	r3,29
 8005334:	15bffe04 	addi	r22,r2,-8
 8005338:	1907c83a 	sub	r3,r3,r4
 800533c:	85a0983a 	sll	r16,r16,r22
 8005340:	a8c6d83a 	srl	r3,r21,r3
 8005344:	adac983a 	sll	r22,r21,r22
 8005348:	1c20b03a 	or	r16,r3,r16
 800534c:	1080fcc4 	addi	r2,r2,1011
 8005350:	00a9c83a 	sub	r20,zero,r2
 8005354:	002b883a 	mov	r21,zero
 8005358:	000b883a 	mov	r5,zero
 800535c:	003f9006 	br	80051a0 <__muldf3+0x7c>
 8005360:	3446b03a 	or	r3,r6,r17
 8005364:	1800281e 	bne	r3,zero,8005408 <__muldf3+0x2e4>
 8005368:	0023883a 	mov	r17,zero
 800536c:	0025883a 	mov	r18,zero
 8005370:	01c00084 	movi	r7,2
 8005374:	003f9c06 	br	80051e8 <__muldf3+0xc4>
 8005378:	3446b03a 	or	r3,r6,r17
 800537c:	18001e26 	beq	r3,zero,80053f8 <__muldf3+0x2d4>
 8005380:	88012126 	beq	r17,zero,8005808 <__muldf3+0x6e4>
 8005384:	8809883a 	mov	r4,r17
 8005388:	d9400215 	stw	r5,8(sp)
 800538c:	d9800715 	stw	r6,28(sp)
 8005390:	da400415 	stw	r9,16(sp)
 8005394:	da800315 	stw	r10,12(sp)
 8005398:	80059900 	call	8005990 <__clzsi2>
 800539c:	d9400217 	ldw	r5,8(sp)
 80053a0:	d9800717 	ldw	r6,28(sp)
 80053a4:	da400417 	ldw	r9,16(sp)
 80053a8:	da800317 	ldw	r10,12(sp)
 80053ac:	113ffd44 	addi	r4,r2,-11
 80053b0:	00c00704 	movi	r3,28
 80053b4:	19011016 	blt	r3,r4,80057f8 <__muldf3+0x6d4>
 80053b8:	00c00744 	movi	r3,29
 80053bc:	14bffe04 	addi	r18,r2,-8
 80053c0:	1907c83a 	sub	r3,r3,r4
 80053c4:	8ca2983a 	sll	r17,r17,r18
 80053c8:	30c6d83a 	srl	r3,r6,r3
 80053cc:	34a4983a 	sll	r18,r6,r18
 80053d0:	1c62b03a 	or	r17,r3,r17
 80053d4:	1080fcc4 	addi	r2,r2,1011
 80053d8:	0085c83a 	sub	r2,zero,r2
 80053dc:	000f883a 	mov	r7,zero
 80053e0:	003f8106 	br	80051e8 <__muldf3+0xc4>
 80053e4:	3027883a 	mov	r19,r6
 80053e8:	0081ffc4 	movi	r2,2047
 80053ec:	0021883a 	mov	r16,zero
 80053f0:	002d883a 	mov	r22,zero
 80053f4:	003faa06 	br	80052a0 <__muldf3+0x17c>
 80053f8:	0023883a 	mov	r17,zero
 80053fc:	0025883a 	mov	r18,zero
 8005400:	01c00044 	movi	r7,1
 8005404:	003f7806 	br	80051e8 <__muldf3+0xc4>
 8005408:	01c000c4 	movi	r7,3
 800540c:	003f7606 	br	80051e8 <__muldf3+0xc4>
 8005410:	05400104 	movi	r21,4
 8005414:	0021883a 	mov	r16,zero
 8005418:	002d883a 	mov	r22,zero
 800541c:	01400044 	movi	r5,1
 8005420:	003f5f06 	br	80051a0 <__muldf3+0x7c>
 8005424:	05400304 	movi	r21,12
 8005428:	014000c4 	movi	r5,3
 800542c:	003f5c06 	br	80051a0 <__muldf3+0x7c>
 8005430:	04000434 	movhi	r16,16
 8005434:	0027883a 	mov	r19,zero
 8005438:	843fffc4 	addi	r16,r16,-1
 800543c:	05bfffc4 	movi	r22,-1
 8005440:	0081ffc4 	movi	r2,2047
 8005444:	003f9606 	br	80052a0 <__muldf3+0x17c>
 8005448:	8023883a 	mov	r17,r16
 800544c:	b025883a 	mov	r18,r22
 8005450:	280f883a 	mov	r7,r5
 8005454:	003f8806 	br	8005278 <__muldf3+0x154>
 8005458:	8023883a 	mov	r17,r16
 800545c:	b025883a 	mov	r18,r22
 8005460:	480d883a 	mov	r6,r9
 8005464:	280f883a 	mov	r7,r5
 8005468:	003f8306 	br	8005278 <__muldf3+0x154>
 800546c:	b026d43a 	srli	r19,r22,16
 8005470:	902ed43a 	srli	r23,r18,16
 8005474:	b5bfffcc 	andi	r22,r22,65535
 8005478:	94bfffcc 	andi	r18,r18,65535
 800547c:	b00b883a 	mov	r5,r22
 8005480:	9009883a 	mov	r4,r18
 8005484:	d8c00515 	stw	r3,20(sp)
 8005488:	d9800715 	stw	r6,28(sp)
 800548c:	da000615 	stw	r8,24(sp)
 8005490:	80050200 	call	8005020 <__mulsi3>
 8005494:	980b883a 	mov	r5,r19
 8005498:	9009883a 	mov	r4,r18
 800549c:	1029883a 	mov	r20,r2
 80054a0:	80050200 	call	8005020 <__mulsi3>
 80054a4:	b80b883a 	mov	r5,r23
 80054a8:	9809883a 	mov	r4,r19
 80054ac:	102b883a 	mov	r21,r2
 80054b0:	80050200 	call	8005020 <__mulsi3>
 80054b4:	b809883a 	mov	r4,r23
 80054b8:	b00b883a 	mov	r5,r22
 80054bc:	1039883a 	mov	fp,r2
 80054c0:	80050200 	call	8005020 <__mulsi3>
 80054c4:	a008d43a 	srli	r4,r20,16
 80054c8:	1545883a 	add	r2,r2,r21
 80054cc:	d8c00517 	ldw	r3,20(sp)
 80054d0:	2085883a 	add	r2,r4,r2
 80054d4:	d9800717 	ldw	r6,28(sp)
 80054d8:	da000617 	ldw	r8,24(sp)
 80054dc:	1540022e 	bgeu	r2,r21,80054e8 <__muldf3+0x3c4>
 80054e0:	01000074 	movhi	r4,1
 80054e4:	e139883a 	add	fp,fp,r4
 80054e8:	100e943a 	slli	r7,r2,16
 80054ec:	1004d43a 	srli	r2,r2,16
 80054f0:	882ad43a 	srli	r21,r17,16
 80054f4:	a53fffcc 	andi	r20,r20,65535
 80054f8:	8c7fffcc 	andi	r17,r17,65535
 80054fc:	3d29883a 	add	r20,r7,r20
 8005500:	b00b883a 	mov	r5,r22
 8005504:	8809883a 	mov	r4,r17
 8005508:	d8c00515 	stw	r3,20(sp)
 800550c:	d9800715 	stw	r6,28(sp)
 8005510:	da000615 	stw	r8,24(sp)
 8005514:	dd000115 	stw	r20,4(sp)
 8005518:	d8800015 	stw	r2,0(sp)
 800551c:	80050200 	call	8005020 <__mulsi3>
 8005520:	980b883a 	mov	r5,r19
 8005524:	8809883a 	mov	r4,r17
 8005528:	d8800215 	stw	r2,8(sp)
 800552c:	80050200 	call	8005020 <__mulsi3>
 8005530:	9809883a 	mov	r4,r19
 8005534:	a80b883a 	mov	r5,r21
 8005538:	1029883a 	mov	r20,r2
 800553c:	80050200 	call	8005020 <__mulsi3>
 8005540:	b00b883a 	mov	r5,r22
 8005544:	a809883a 	mov	r4,r21
 8005548:	d8800415 	stw	r2,16(sp)
 800554c:	80050200 	call	8005020 <__mulsi3>
 8005550:	d9c00217 	ldw	r7,8(sp)
 8005554:	1505883a 	add	r2,r2,r20
 8005558:	d8c00517 	ldw	r3,20(sp)
 800555c:	3826d43a 	srli	r19,r7,16
 8005560:	d9800717 	ldw	r6,28(sp)
 8005564:	da000617 	ldw	r8,24(sp)
 8005568:	9885883a 	add	r2,r19,r2
 800556c:	da400417 	ldw	r9,16(sp)
 8005570:	1500022e 	bgeu	r2,r20,800557c <__muldf3+0x458>
 8005574:	01000074 	movhi	r4,1
 8005578:	4913883a 	add	r9,r9,r4
 800557c:	1028d43a 	srli	r20,r2,16
 8005580:	1004943a 	slli	r2,r2,16
 8005584:	802cd43a 	srli	r22,r16,16
 8005588:	843fffcc 	andi	r16,r16,65535
 800558c:	3cffffcc 	andi	r19,r7,65535
 8005590:	9009883a 	mov	r4,r18
 8005594:	800b883a 	mov	r5,r16
 8005598:	a269883a 	add	r20,r20,r9
 800559c:	d8c00515 	stw	r3,20(sp)
 80055a0:	d9800715 	stw	r6,28(sp)
 80055a4:	da000615 	stw	r8,24(sp)
 80055a8:	14e7883a 	add	r19,r2,r19
 80055ac:	80050200 	call	8005020 <__mulsi3>
 80055b0:	9009883a 	mov	r4,r18
 80055b4:	b00b883a 	mov	r5,r22
 80055b8:	d8800315 	stw	r2,12(sp)
 80055bc:	80050200 	call	8005020 <__mulsi3>
 80055c0:	b809883a 	mov	r4,r23
 80055c4:	b00b883a 	mov	r5,r22
 80055c8:	d8800215 	stw	r2,8(sp)
 80055cc:	80050200 	call	8005020 <__mulsi3>
 80055d0:	b80b883a 	mov	r5,r23
 80055d4:	8009883a 	mov	r4,r16
 80055d8:	d8800415 	stw	r2,16(sp)
 80055dc:	80050200 	call	8005020 <__mulsi3>
 80055e0:	da800317 	ldw	r10,12(sp)
 80055e4:	d9c00217 	ldw	r7,8(sp)
 80055e8:	d9000017 	ldw	r4,0(sp)
 80055ec:	502ed43a 	srli	r23,r10,16
 80055f0:	11c5883a 	add	r2,r2,r7
 80055f4:	24e5883a 	add	r18,r4,r19
 80055f8:	b885883a 	add	r2,r23,r2
 80055fc:	d8c00517 	ldw	r3,20(sp)
 8005600:	d9800717 	ldw	r6,28(sp)
 8005604:	da000617 	ldw	r8,24(sp)
 8005608:	da400417 	ldw	r9,16(sp)
 800560c:	11c0022e 	bgeu	r2,r7,8005618 <__muldf3+0x4f4>
 8005610:	01000074 	movhi	r4,1
 8005614:	4913883a 	add	r9,r9,r4
 8005618:	100ed43a 	srli	r7,r2,16
 800561c:	1004943a 	slli	r2,r2,16
 8005620:	55ffffcc 	andi	r23,r10,65535
 8005624:	3a53883a 	add	r9,r7,r9
 8005628:	8809883a 	mov	r4,r17
 800562c:	800b883a 	mov	r5,r16
 8005630:	d8c00515 	stw	r3,20(sp)
 8005634:	d9800715 	stw	r6,28(sp)
 8005638:	da000615 	stw	r8,24(sp)
 800563c:	da400415 	stw	r9,16(sp)
 8005640:	15ef883a 	add	r23,r2,r23
 8005644:	80050200 	call	8005020 <__mulsi3>
 8005648:	8809883a 	mov	r4,r17
 800564c:	b00b883a 	mov	r5,r22
 8005650:	d8800215 	stw	r2,8(sp)
 8005654:	80050200 	call	8005020 <__mulsi3>
 8005658:	b00b883a 	mov	r5,r22
 800565c:	a809883a 	mov	r4,r21
 8005660:	d8800315 	stw	r2,12(sp)
 8005664:	80050200 	call	8005020 <__mulsi3>
 8005668:	8009883a 	mov	r4,r16
 800566c:	a80b883a 	mov	r5,r21
 8005670:	1023883a 	mov	r17,r2
 8005674:	80050200 	call	8005020 <__mulsi3>
 8005678:	d9c00217 	ldw	r7,8(sp)
 800567c:	da800317 	ldw	r10,12(sp)
 8005680:	d8c00517 	ldw	r3,20(sp)
 8005684:	3808d43a 	srli	r4,r7,16
 8005688:	1285883a 	add	r2,r2,r10
 800568c:	d9800717 	ldw	r6,28(sp)
 8005690:	2085883a 	add	r2,r4,r2
 8005694:	da000617 	ldw	r8,24(sp)
 8005698:	da400417 	ldw	r9,16(sp)
 800569c:	1280022e 	bgeu	r2,r10,80056a8 <__muldf3+0x584>
 80056a0:	01000074 	movhi	r4,1
 80056a4:	8923883a 	add	r17,r17,r4
 80056a8:	1008943a 	slli	r4,r2,16
 80056ac:	39ffffcc 	andi	r7,r7,65535
 80056b0:	e4b9883a 	add	fp,fp,r18
 80056b4:	21cf883a 	add	r7,r4,r7
 80056b8:	e4e7803a 	cmpltu	r19,fp,r19
 80056bc:	3d0f883a 	add	r7,r7,r20
 80056c0:	bf39883a 	add	fp,r23,fp
 80056c4:	99c9883a 	add	r4,r19,r7
 80056c8:	e5ef803a 	cmpltu	r23,fp,r23
 80056cc:	490b883a 	add	r5,r9,r4
 80056d0:	1004d43a 	srli	r2,r2,16
 80056d4:	b965883a 	add	r18,r23,r5
 80056d8:	24c9803a 	cmpltu	r4,r4,r19
 80056dc:	3d29803a 	cmpltu	r20,r7,r20
 80056e0:	a128b03a 	or	r20,r20,r4
 80056e4:	95ef803a 	cmpltu	r23,r18,r23
 80056e8:	2a53803a 	cmpltu	r9,r5,r9
 80056ec:	a0a9883a 	add	r20,r20,r2
 80056f0:	4deeb03a 	or	r23,r9,r23
 80056f4:	a5ef883a 	add	r23,r20,r23
 80056f8:	bc63883a 	add	r17,r23,r17
 80056fc:	e004927a 	slli	r2,fp,9
 8005700:	d9000117 	ldw	r4,4(sp)
 8005704:	882e927a 	slli	r23,r17,9
 8005708:	9022d5fa 	srli	r17,r18,23
 800570c:	e038d5fa 	srli	fp,fp,23
 8005710:	1104b03a 	or	r2,r2,r4
 8005714:	9024927a 	slli	r18,r18,9
 8005718:	1004c03a 	cmpne	r2,r2,zero
 800571c:	bc62b03a 	or	r17,r23,r17
 8005720:	1738b03a 	or	fp,r2,fp
 8005724:	8880402c 	andhi	r2,r17,256
 8005728:	e4a4b03a 	or	r18,fp,r18
 800572c:	10000726 	beq	r2,zero,800574c <__muldf3+0x628>
 8005730:	9006d07a 	srli	r3,r18,1
 8005734:	880497fa 	slli	r2,r17,31
 8005738:	9480004c 	andi	r18,r18,1
 800573c:	8822d07a 	srli	r17,r17,1
 8005740:	1ca4b03a 	or	r18,r3,r18
 8005744:	14a4b03a 	or	r18,r2,r18
 8005748:	4007883a 	mov	r3,r8
 800574c:	1880ffc4 	addi	r2,r3,1023
 8005750:	0080460e 	bge	zero,r2,800586c <__muldf3+0x748>
 8005754:	910001cc 	andi	r4,r18,7
 8005758:	20000726 	beq	r4,zero,8005778 <__muldf3+0x654>
 800575c:	910003cc 	andi	r4,r18,15
 8005760:	01400104 	movi	r5,4
 8005764:	21400426 	beq	r4,r5,8005778 <__muldf3+0x654>
 8005768:	9149883a 	add	r4,r18,r5
 800576c:	24a5803a 	cmpltu	r18,r4,r18
 8005770:	8ca3883a 	add	r17,r17,r18
 8005774:	2025883a 	mov	r18,r4
 8005778:	8900402c 	andhi	r4,r17,256
 800577c:	20000426 	beq	r4,zero,8005790 <__muldf3+0x66c>
 8005780:	18810004 	addi	r2,r3,1024
 8005784:	00ffc034 	movhi	r3,65280
 8005788:	18ffffc4 	addi	r3,r3,-1
 800578c:	88e2703a 	and	r17,r17,r3
 8005790:	00c1ff84 	movi	r3,2046
 8005794:	18bf1316 	blt	r3,r2,80053e4 <__muldf3+0x2c0>
 8005798:	882c977a 	slli	r22,r17,29
 800579c:	9024d0fa 	srli	r18,r18,3
 80057a0:	8822927a 	slli	r17,r17,9
 80057a4:	1081ffcc 	andi	r2,r2,2047
 80057a8:	b4acb03a 	or	r22,r22,r18
 80057ac:	8820d33a 	srli	r16,r17,12
 80057b0:	3027883a 	mov	r19,r6
 80057b4:	003eba06 	br	80052a0 <__muldf3+0x17c>
 80057b8:	8080022c 	andhi	r2,r16,8
 80057bc:	10000926 	beq	r2,zero,80057e4 <__muldf3+0x6c0>
 80057c0:	8880022c 	andhi	r2,r17,8
 80057c4:	1000071e 	bne	r2,zero,80057e4 <__muldf3+0x6c0>
 80057c8:	00800434 	movhi	r2,16
 80057cc:	8c000234 	orhi	r16,r17,8
 80057d0:	10bfffc4 	addi	r2,r2,-1
 80057d4:	e027883a 	mov	r19,fp
 80057d8:	80a0703a 	and	r16,r16,r2
 80057dc:	902d883a 	mov	r22,r18
 80057e0:	003f1706 	br	8005440 <__muldf3+0x31c>
 80057e4:	00800434 	movhi	r2,16
 80057e8:	84000234 	orhi	r16,r16,8
 80057ec:	10bfffc4 	addi	r2,r2,-1
 80057f0:	80a0703a 	and	r16,r16,r2
 80057f4:	003f1206 	br	8005440 <__muldf3+0x31c>
 80057f8:	147ff604 	addi	r17,r2,-40
 80057fc:	3462983a 	sll	r17,r6,r17
 8005800:	0025883a 	mov	r18,zero
 8005804:	003ef306 	br	80053d4 <__muldf3+0x2b0>
 8005808:	3009883a 	mov	r4,r6
 800580c:	d9400215 	stw	r5,8(sp)
 8005810:	d9800715 	stw	r6,28(sp)
 8005814:	da400415 	stw	r9,16(sp)
 8005818:	da800315 	stw	r10,12(sp)
 800581c:	80059900 	call	8005990 <__clzsi2>
 8005820:	10800804 	addi	r2,r2,32
 8005824:	da800317 	ldw	r10,12(sp)
 8005828:	da400417 	ldw	r9,16(sp)
 800582c:	d9800717 	ldw	r6,28(sp)
 8005830:	d9400217 	ldw	r5,8(sp)
 8005834:	003edd06 	br	80053ac <__muldf3+0x288>
 8005838:	143ff604 	addi	r16,r2,-40
 800583c:	ac20983a 	sll	r16,r21,r16
 8005840:	002d883a 	mov	r22,zero
 8005844:	003ec106 	br	800534c <__muldf3+0x228>
 8005848:	d9800715 	stw	r6,28(sp)
 800584c:	d9c00215 	stw	r7,8(sp)
 8005850:	da400415 	stw	r9,16(sp)
 8005854:	80059900 	call	8005990 <__clzsi2>
 8005858:	10800804 	addi	r2,r2,32
 800585c:	da400417 	ldw	r9,16(sp)
 8005860:	d9c00217 	ldw	r7,8(sp)
 8005864:	d9800717 	ldw	r6,28(sp)
 8005868:	003eae06 	br	8005324 <__muldf3+0x200>
 800586c:	00c00044 	movi	r3,1
 8005870:	1887c83a 	sub	r3,r3,r2
 8005874:	01000e04 	movi	r4,56
 8005878:	20fe8516 	blt	r4,r3,8005290 <__muldf3+0x16c>
 800587c:	010007c4 	movi	r4,31
 8005880:	20c01b16 	blt	r4,r3,80058f0 <__muldf3+0x7cc>
 8005884:	00800804 	movi	r2,32
 8005888:	10c5c83a 	sub	r2,r2,r3
 800588c:	888a983a 	sll	r5,r17,r2
 8005890:	90c8d83a 	srl	r4,r18,r3
 8005894:	9084983a 	sll	r2,r18,r2
 8005898:	88e2d83a 	srl	r17,r17,r3
 800589c:	2906b03a 	or	r3,r5,r4
 80058a0:	1004c03a 	cmpne	r2,r2,zero
 80058a4:	1886b03a 	or	r3,r3,r2
 80058a8:	188001cc 	andi	r2,r3,7
 80058ac:	10000726 	beq	r2,zero,80058cc <__muldf3+0x7a8>
 80058b0:	188003cc 	andi	r2,r3,15
 80058b4:	01000104 	movi	r4,4
 80058b8:	11000426 	beq	r2,r4,80058cc <__muldf3+0x7a8>
 80058bc:	1805883a 	mov	r2,r3
 80058c0:	10c00104 	addi	r3,r2,4
 80058c4:	1885803a 	cmpltu	r2,r3,r2
 80058c8:	88a3883a 	add	r17,r17,r2
 80058cc:	8880202c 	andhi	r2,r17,128
 80058d0:	10001c26 	beq	r2,zero,8005944 <__muldf3+0x820>
 80058d4:	3027883a 	mov	r19,r6
 80058d8:	00800044 	movi	r2,1
 80058dc:	0021883a 	mov	r16,zero
 80058e0:	002d883a 	mov	r22,zero
 80058e4:	003e6e06 	br	80052a0 <__muldf3+0x17c>
 80058e8:	4007883a 	mov	r3,r8
 80058ec:	003f9706 	br	800574c <__muldf3+0x628>
 80058f0:	017ff844 	movi	r5,-31
 80058f4:	2885c83a 	sub	r2,r5,r2
 80058f8:	888ad83a 	srl	r5,r17,r2
 80058fc:	00800804 	movi	r2,32
 8005900:	18801a26 	beq	r3,r2,800596c <__muldf3+0x848>
 8005904:	01001004 	movi	r4,64
 8005908:	20c7c83a 	sub	r3,r4,r3
 800590c:	88e2983a 	sll	r17,r17,r3
 8005910:	8ca4b03a 	or	r18,r17,r18
 8005914:	9004c03a 	cmpne	r2,r18,zero
 8005918:	2884b03a 	or	r2,r5,r2
 800591c:	144001cc 	andi	r17,r2,7
 8005920:	88000d1e 	bne	r17,zero,8005958 <__muldf3+0x834>
 8005924:	0021883a 	mov	r16,zero
 8005928:	102cd0fa 	srli	r22,r2,3
 800592c:	3027883a 	mov	r19,r6
 8005930:	0005883a 	mov	r2,zero
 8005934:	b46cb03a 	or	r22,r22,r17
 8005938:	003e5906 	br	80052a0 <__muldf3+0x17c>
 800593c:	1007883a 	mov	r3,r2
 8005940:	0023883a 	mov	r17,zero
 8005944:	8820927a 	slli	r16,r17,9
 8005948:	1805883a 	mov	r2,r3
 800594c:	8822977a 	slli	r17,r17,29
 8005950:	8020d33a 	srli	r16,r16,12
 8005954:	003ff406 	br	8005928 <__muldf3+0x804>
 8005958:	10c003cc 	andi	r3,r2,15
 800595c:	01000104 	movi	r4,4
 8005960:	193ff626 	beq	r3,r4,800593c <__muldf3+0x818>
 8005964:	0023883a 	mov	r17,zero
 8005968:	003fd506 	br	80058c0 <__muldf3+0x79c>
 800596c:	0023883a 	mov	r17,zero
 8005970:	003fe706 	br	8005910 <__muldf3+0x7ec>
 8005974:	00800434 	movhi	r2,16
 8005978:	8c000234 	orhi	r16,r17,8
 800597c:	10bfffc4 	addi	r2,r2,-1
 8005980:	3027883a 	mov	r19,r6
 8005984:	80a0703a 	and	r16,r16,r2
 8005988:	902d883a 	mov	r22,r18
 800598c:	003eac06 	br	8005440 <__muldf3+0x31c>

08005990 <__clzsi2>:
 8005990:	00bfffd4 	movui	r2,65535
 8005994:	11000536 	bltu	r2,r4,80059ac <__clzsi2+0x1c>
 8005998:	00803fc4 	movi	r2,255
 800599c:	11000f36 	bltu	r2,r4,80059dc <__clzsi2+0x4c>
 80059a0:	00800804 	movi	r2,32
 80059a4:	0007883a 	mov	r3,zero
 80059a8:	00000506 	br	80059c0 <__clzsi2+0x30>
 80059ac:	00804034 	movhi	r2,256
 80059b0:	10bfffc4 	addi	r2,r2,-1
 80059b4:	11000c2e 	bgeu	r2,r4,80059e8 <__clzsi2+0x58>
 80059b8:	00800204 	movi	r2,8
 80059bc:	00c00604 	movi	r3,24
 80059c0:	20c8d83a 	srl	r4,r4,r3
 80059c4:	00c20074 	movhi	r3,2049
 80059c8:	18d4a984 	addi	r3,r3,21158
 80059cc:	1909883a 	add	r4,r3,r4
 80059d0:	20c00003 	ldbu	r3,0(r4)
 80059d4:	10c5c83a 	sub	r2,r2,r3
 80059d8:	f800283a 	ret
 80059dc:	00800604 	movi	r2,24
 80059e0:	00c00204 	movi	r3,8
 80059e4:	003ff606 	br	80059c0 <__clzsi2+0x30>
 80059e8:	00800404 	movi	r2,16
 80059ec:	1007883a 	mov	r3,r2
 80059f0:	003ff306 	br	80059c0 <__clzsi2+0x30>

080059f4 <clock>:
 80059f4:	00820074 	movhi	r2,2049
 80059f8:	109c2704 	addi	r2,r2,28828
 80059fc:	11000017 	ldw	r4,0(r2)
 8005a00:	defffb04 	addi	sp,sp,-20
 8005a04:	d80b883a 	mov	r5,sp
 8005a08:	dfc00415 	stw	ra,16(sp)
 8005a0c:	800614c0 	call	800614c <_times_r>
 8005a10:	00ffffc4 	movi	r3,-1
 8005a14:	10c00726 	beq	r2,r3,8005a34 <clock+0x40>
 8005a18:	d8c00017 	ldw	r3,0(sp)
 8005a1c:	d8800117 	ldw	r2,4(sp)
 8005a20:	1885883a 	add	r2,r3,r2
 8005a24:	d8c00217 	ldw	r3,8(sp)
 8005a28:	10c7883a 	add	r3,r2,r3
 8005a2c:	d8800317 	ldw	r2,12(sp)
 8005a30:	1885883a 	add	r2,r3,r2
 8005a34:	dfc00417 	ldw	ra,16(sp)
 8005a38:	dec00504 	addi	sp,sp,20
 8005a3c:	f800283a 	ret

08005a40 <difftime>:
 8005a40:	deffff04 	addi	sp,sp,-4
 8005a44:	2149c83a 	sub	r4,r4,r5
 8005a48:	dfc00015 	stw	ra,0(sp)
 8005a4c:	80122b80 	call	80122b8 <__floatsidf>
 8005a50:	dfc00017 	ldw	ra,0(sp)
 8005a54:	dec00104 	addi	sp,sp,4
 8005a58:	f800283a 	ret

08005a5c <memcmp>:
 8005a5c:	01c000c4 	movi	r7,3
 8005a60:	3980192e 	bgeu	r7,r6,8005ac8 <memcmp+0x6c>
 8005a64:	2144b03a 	or	r2,r4,r5
 8005a68:	11c4703a 	and	r2,r2,r7
 8005a6c:	10000f26 	beq	r2,zero,8005aac <memcmp+0x50>
 8005a70:	20800003 	ldbu	r2,0(r4)
 8005a74:	28c00003 	ldbu	r3,0(r5)
 8005a78:	10c0151e 	bne	r2,r3,8005ad0 <memcmp+0x74>
 8005a7c:	31bfff84 	addi	r6,r6,-2
 8005a80:	01ffffc4 	movi	r7,-1
 8005a84:	00000406 	br	8005a98 <memcmp+0x3c>
 8005a88:	20800003 	ldbu	r2,0(r4)
 8005a8c:	28c00003 	ldbu	r3,0(r5)
 8005a90:	31bfffc4 	addi	r6,r6,-1
 8005a94:	10c00e1e 	bne	r2,r3,8005ad0 <memcmp+0x74>
 8005a98:	21000044 	addi	r4,r4,1
 8005a9c:	29400044 	addi	r5,r5,1
 8005aa0:	31fff91e 	bne	r6,r7,8005a88 <memcmp+0x2c>
 8005aa4:	0005883a 	mov	r2,zero
 8005aa8:	f800283a 	ret
 8005aac:	20c00017 	ldw	r3,0(r4)
 8005ab0:	28800017 	ldw	r2,0(r5)
 8005ab4:	18bfee1e 	bne	r3,r2,8005a70 <memcmp+0x14>
 8005ab8:	31bfff04 	addi	r6,r6,-4
 8005abc:	21000104 	addi	r4,r4,4
 8005ac0:	29400104 	addi	r5,r5,4
 8005ac4:	39bff936 	bltu	r7,r6,8005aac <memcmp+0x50>
 8005ac8:	303fe91e 	bne	r6,zero,8005a70 <memcmp+0x14>
 8005acc:	003ff506 	br	8005aa4 <memcmp+0x48>
 8005ad0:	10c5c83a 	sub	r2,r2,r3
 8005ad4:	f800283a 	ret

08005ad8 <memcpy>:
 8005ad8:	defffd04 	addi	sp,sp,-12
 8005adc:	dfc00215 	stw	ra,8(sp)
 8005ae0:	dc400115 	stw	r17,4(sp)
 8005ae4:	dc000015 	stw	r16,0(sp)
 8005ae8:	00c003c4 	movi	r3,15
 8005aec:	2005883a 	mov	r2,r4
 8005af0:	1980452e 	bgeu	r3,r6,8005c08 <memcpy+0x130>
 8005af4:	2906b03a 	or	r3,r5,r4
 8005af8:	18c000cc 	andi	r3,r3,3
 8005afc:	1800441e 	bne	r3,zero,8005c10 <memcpy+0x138>
 8005b00:	347ffc04 	addi	r17,r6,-16
 8005b04:	8822d13a 	srli	r17,r17,4
 8005b08:	28c00104 	addi	r3,r5,4
 8005b0c:	23400104 	addi	r13,r4,4
 8005b10:	8820913a 	slli	r16,r17,4
 8005b14:	2b000204 	addi	r12,r5,8
 8005b18:	22c00204 	addi	r11,r4,8
 8005b1c:	84000504 	addi	r16,r16,20
 8005b20:	2a800304 	addi	r10,r5,12
 8005b24:	22400304 	addi	r9,r4,12
 8005b28:	2c21883a 	add	r16,r5,r16
 8005b2c:	2811883a 	mov	r8,r5
 8005b30:	200f883a 	mov	r7,r4
 8005b34:	41000017 	ldw	r4,0(r8)
 8005b38:	1fc00017 	ldw	ra,0(r3)
 8005b3c:	63c00017 	ldw	r15,0(r12)
 8005b40:	39000015 	stw	r4,0(r7)
 8005b44:	53800017 	ldw	r14,0(r10)
 8005b48:	6fc00015 	stw	ra,0(r13)
 8005b4c:	5bc00015 	stw	r15,0(r11)
 8005b50:	4b800015 	stw	r14,0(r9)
 8005b54:	18c00404 	addi	r3,r3,16
 8005b58:	39c00404 	addi	r7,r7,16
 8005b5c:	42000404 	addi	r8,r8,16
 8005b60:	6b400404 	addi	r13,r13,16
 8005b64:	63000404 	addi	r12,r12,16
 8005b68:	5ac00404 	addi	r11,r11,16
 8005b6c:	52800404 	addi	r10,r10,16
 8005b70:	4a400404 	addi	r9,r9,16
 8005b74:	1c3fef1e 	bne	r3,r16,8005b34 <memcpy+0x5c>
 8005b78:	89c00044 	addi	r7,r17,1
 8005b7c:	380e913a 	slli	r7,r7,4
 8005b80:	310003cc 	andi	r4,r6,15
 8005b84:	02c000c4 	movi	r11,3
 8005b88:	11c7883a 	add	r3,r2,r7
 8005b8c:	29cb883a 	add	r5,r5,r7
 8005b90:	5900212e 	bgeu	r11,r4,8005c18 <memcpy+0x140>
 8005b94:	1813883a 	mov	r9,r3
 8005b98:	2811883a 	mov	r8,r5
 8005b9c:	200f883a 	mov	r7,r4
 8005ba0:	42800017 	ldw	r10,0(r8)
 8005ba4:	4a400104 	addi	r9,r9,4
 8005ba8:	39ffff04 	addi	r7,r7,-4
 8005bac:	4abfff15 	stw	r10,-4(r9)
 8005bb0:	42000104 	addi	r8,r8,4
 8005bb4:	59fffa36 	bltu	r11,r7,8005ba0 <memcpy+0xc8>
 8005bb8:	213fff04 	addi	r4,r4,-4
 8005bbc:	2008d0ba 	srli	r4,r4,2
 8005bc0:	318000cc 	andi	r6,r6,3
 8005bc4:	21000044 	addi	r4,r4,1
 8005bc8:	2109883a 	add	r4,r4,r4
 8005bcc:	2109883a 	add	r4,r4,r4
 8005bd0:	1907883a 	add	r3,r3,r4
 8005bd4:	290b883a 	add	r5,r5,r4
 8005bd8:	30000626 	beq	r6,zero,8005bf4 <memcpy+0x11c>
 8005bdc:	198d883a 	add	r6,r3,r6
 8005be0:	29c00003 	ldbu	r7,0(r5)
 8005be4:	18c00044 	addi	r3,r3,1
 8005be8:	29400044 	addi	r5,r5,1
 8005bec:	19ffffc5 	stb	r7,-1(r3)
 8005bf0:	19bffb1e 	bne	r3,r6,8005be0 <memcpy+0x108>
 8005bf4:	dfc00217 	ldw	ra,8(sp)
 8005bf8:	dc400117 	ldw	r17,4(sp)
 8005bfc:	dc000017 	ldw	r16,0(sp)
 8005c00:	dec00304 	addi	sp,sp,12
 8005c04:	f800283a 	ret
 8005c08:	2007883a 	mov	r3,r4
 8005c0c:	003ff206 	br	8005bd8 <memcpy+0x100>
 8005c10:	2007883a 	mov	r3,r4
 8005c14:	003ff106 	br	8005bdc <memcpy+0x104>
 8005c18:	200d883a 	mov	r6,r4
 8005c1c:	003fee06 	br	8005bd8 <memcpy+0x100>

08005c20 <memset>:
 8005c20:	20c000cc 	andi	r3,r4,3
 8005c24:	2005883a 	mov	r2,r4
 8005c28:	18004426 	beq	r3,zero,8005d3c <memset+0x11c>
 8005c2c:	31ffffc4 	addi	r7,r6,-1
 8005c30:	30004026 	beq	r6,zero,8005d34 <memset+0x114>
 8005c34:	2813883a 	mov	r9,r5
 8005c38:	200d883a 	mov	r6,r4
 8005c3c:	2007883a 	mov	r3,r4
 8005c40:	00000406 	br	8005c54 <memset+0x34>
 8005c44:	3a3fffc4 	addi	r8,r7,-1
 8005c48:	31800044 	addi	r6,r6,1
 8005c4c:	38003926 	beq	r7,zero,8005d34 <memset+0x114>
 8005c50:	400f883a 	mov	r7,r8
 8005c54:	18c00044 	addi	r3,r3,1
 8005c58:	32400005 	stb	r9,0(r6)
 8005c5c:	1a0000cc 	andi	r8,r3,3
 8005c60:	403ff81e 	bne	r8,zero,8005c44 <memset+0x24>
 8005c64:	010000c4 	movi	r4,3
 8005c68:	21c02d2e 	bgeu	r4,r7,8005d20 <memset+0x100>
 8005c6c:	29003fcc 	andi	r4,r5,255
 8005c70:	200c923a 	slli	r6,r4,8
 8005c74:	3108b03a 	or	r4,r6,r4
 8005c78:	200c943a 	slli	r6,r4,16
 8005c7c:	218cb03a 	or	r6,r4,r6
 8005c80:	010003c4 	movi	r4,15
 8005c84:	21c0182e 	bgeu	r4,r7,8005ce8 <memset+0xc8>
 8005c88:	3b3ffc04 	addi	r12,r7,-16
 8005c8c:	6018d13a 	srli	r12,r12,4
 8005c90:	1a000104 	addi	r8,r3,4
 8005c94:	1ac00204 	addi	r11,r3,8
 8005c98:	6008913a 	slli	r4,r12,4
 8005c9c:	1a800304 	addi	r10,r3,12
 8005ca0:	1813883a 	mov	r9,r3
 8005ca4:	21000504 	addi	r4,r4,20
 8005ca8:	1909883a 	add	r4,r3,r4
 8005cac:	49800015 	stw	r6,0(r9)
 8005cb0:	41800015 	stw	r6,0(r8)
 8005cb4:	59800015 	stw	r6,0(r11)
 8005cb8:	51800015 	stw	r6,0(r10)
 8005cbc:	42000404 	addi	r8,r8,16
 8005cc0:	4a400404 	addi	r9,r9,16
 8005cc4:	5ac00404 	addi	r11,r11,16
 8005cc8:	52800404 	addi	r10,r10,16
 8005ccc:	413ff71e 	bne	r8,r4,8005cac <memset+0x8c>
 8005cd0:	63000044 	addi	r12,r12,1
 8005cd4:	6018913a 	slli	r12,r12,4
 8005cd8:	39c003cc 	andi	r7,r7,15
 8005cdc:	010000c4 	movi	r4,3
 8005ce0:	1b07883a 	add	r3,r3,r12
 8005ce4:	21c00e2e 	bgeu	r4,r7,8005d20 <memset+0x100>
 8005ce8:	1813883a 	mov	r9,r3
 8005cec:	3811883a 	mov	r8,r7
 8005cf0:	010000c4 	movi	r4,3
 8005cf4:	49800015 	stw	r6,0(r9)
 8005cf8:	423fff04 	addi	r8,r8,-4
 8005cfc:	4a400104 	addi	r9,r9,4
 8005d00:	223ffc36 	bltu	r4,r8,8005cf4 <memset+0xd4>
 8005d04:	393fff04 	addi	r4,r7,-4
 8005d08:	2008d0ba 	srli	r4,r4,2
 8005d0c:	39c000cc 	andi	r7,r7,3
 8005d10:	21000044 	addi	r4,r4,1
 8005d14:	2109883a 	add	r4,r4,r4
 8005d18:	2109883a 	add	r4,r4,r4
 8005d1c:	1907883a 	add	r3,r3,r4
 8005d20:	38000526 	beq	r7,zero,8005d38 <memset+0x118>
 8005d24:	19cf883a 	add	r7,r3,r7
 8005d28:	19400005 	stb	r5,0(r3)
 8005d2c:	18c00044 	addi	r3,r3,1
 8005d30:	38fffd1e 	bne	r7,r3,8005d28 <memset+0x108>
 8005d34:	f800283a 	ret
 8005d38:	f800283a 	ret
 8005d3c:	2007883a 	mov	r3,r4
 8005d40:	300f883a 	mov	r7,r6
 8005d44:	003fc706 	br	8005c64 <memset+0x44>

08005d48 <_printf_r>:
 8005d48:	defffd04 	addi	sp,sp,-12
 8005d4c:	2805883a 	mov	r2,r5
 8005d50:	dfc00015 	stw	ra,0(sp)
 8005d54:	d9800115 	stw	r6,4(sp)
 8005d58:	d9c00215 	stw	r7,8(sp)
 8005d5c:	21400217 	ldw	r5,8(r4)
 8005d60:	d9c00104 	addi	r7,sp,4
 8005d64:	100d883a 	mov	r6,r2
 8005d68:	80061540 	call	8006154 <___vfprintf_internal_r>
 8005d6c:	dfc00017 	ldw	ra,0(sp)
 8005d70:	dec00304 	addi	sp,sp,12
 8005d74:	f800283a 	ret

08005d78 <printf>:
 8005d78:	defffc04 	addi	sp,sp,-16
 8005d7c:	dfc00015 	stw	ra,0(sp)
 8005d80:	d9400115 	stw	r5,4(sp)
 8005d84:	d9800215 	stw	r6,8(sp)
 8005d88:	d9c00315 	stw	r7,12(sp)
 8005d8c:	00820074 	movhi	r2,2049
 8005d90:	109c2704 	addi	r2,r2,28828
 8005d94:	10800017 	ldw	r2,0(r2)
 8005d98:	200b883a 	mov	r5,r4
 8005d9c:	d9800104 	addi	r6,sp,4
 8005da0:	11000217 	ldw	r4,8(r2)
 8005da4:	80084300 	call	8008430 <__vfprintf_internal>
 8005da8:	dfc00017 	ldw	ra,0(sp)
 8005dac:	dec00404 	addi	sp,sp,16
 8005db0:	f800283a 	ret

08005db4 <_putchar_r>:
 8005db4:	21800217 	ldw	r6,8(r4)
 8005db8:	800cde01 	jmpi	800cde0 <_putc_r>

08005dbc <putchar>:
 8005dbc:	00820074 	movhi	r2,2049
 8005dc0:	109c2704 	addi	r2,r2,28828
 8005dc4:	200b883a 	mov	r5,r4
 8005dc8:	11000017 	ldw	r4,0(r2)
 8005dcc:	21800217 	ldw	r6,8(r4)
 8005dd0:	800cde01 	jmpi	800cde0 <_putc_r>

08005dd4 <_puts_r>:
 8005dd4:	defff604 	addi	sp,sp,-40
 8005dd8:	dc000715 	stw	r16,28(sp)
 8005ddc:	2021883a 	mov	r16,r4
 8005de0:	2809883a 	mov	r4,r5
 8005de4:	dc400815 	stw	r17,32(sp)
 8005de8:	dfc00915 	stw	ra,36(sp)
 8005dec:	2823883a 	mov	r17,r5
 8005df0:	8005ea80 	call	8005ea8 <strlen>
 8005df4:	10c00044 	addi	r3,r2,1
 8005df8:	d8800115 	stw	r2,4(sp)
 8005dfc:	00820074 	movhi	r2,2049
 8005e00:	1094eb04 	addi	r2,r2,21420
 8005e04:	d8800215 	stw	r2,8(sp)
 8005e08:	00800044 	movi	r2,1
 8005e0c:	d8800315 	stw	r2,12(sp)
 8005e10:	00800084 	movi	r2,2
 8005e14:	dc400015 	stw	r17,0(sp)
 8005e18:	d8c00615 	stw	r3,24(sp)
 8005e1c:	dec00415 	stw	sp,16(sp)
 8005e20:	d8800515 	stw	r2,20(sp)
 8005e24:	80000226 	beq	r16,zero,8005e30 <_puts_r+0x5c>
 8005e28:	80800e17 	ldw	r2,56(r16)
 8005e2c:	10001426 	beq	r2,zero,8005e80 <_puts_r+0xac>
 8005e30:	81400217 	ldw	r5,8(r16)
 8005e34:	2880030b 	ldhu	r2,12(r5)
 8005e38:	10c8000c 	andi	r3,r2,8192
 8005e3c:	1800061e 	bne	r3,zero,8005e58 <_puts_r+0x84>
 8005e40:	29001917 	ldw	r4,100(r5)
 8005e44:	00f7ffc4 	movi	r3,-8193
 8005e48:	10880014 	ori	r2,r2,8192
 8005e4c:	20c6703a 	and	r3,r4,r3
 8005e50:	2880030d 	sth	r2,12(r5)
 8005e54:	28c01915 	stw	r3,100(r5)
 8005e58:	d9800404 	addi	r6,sp,16
 8005e5c:	8009883a 	mov	r4,r16
 8005e60:	800a9980 	call	800a998 <__sfvwrite_r>
 8005e64:	1000091e 	bne	r2,zero,8005e8c <_puts_r+0xb8>
 8005e68:	00800284 	movi	r2,10
 8005e6c:	dfc00917 	ldw	ra,36(sp)
 8005e70:	dc400817 	ldw	r17,32(sp)
 8005e74:	dc000717 	ldw	r16,28(sp)
 8005e78:	dec00a04 	addi	sp,sp,40
 8005e7c:	f800283a 	ret
 8005e80:	8009883a 	mov	r4,r16
 8005e84:	800a5140 	call	800a514 <__sinit>
 8005e88:	003fe906 	br	8005e30 <_puts_r+0x5c>
 8005e8c:	00bfffc4 	movi	r2,-1
 8005e90:	003ff606 	br	8005e6c <_puts_r+0x98>

08005e94 <puts>:
 8005e94:	00820074 	movhi	r2,2049
 8005e98:	109c2704 	addi	r2,r2,28828
 8005e9c:	200b883a 	mov	r5,r4
 8005ea0:	11000017 	ldw	r4,0(r2)
 8005ea4:	8005dd41 	jmpi	8005dd4 <_puts_r>

08005ea8 <strlen>:
 8005ea8:	208000cc 	andi	r2,r4,3
 8005eac:	10002026 	beq	r2,zero,8005f30 <strlen+0x88>
 8005eb0:	20800007 	ldb	r2,0(r4)
 8005eb4:	10002026 	beq	r2,zero,8005f38 <strlen+0x90>
 8005eb8:	2005883a 	mov	r2,r4
 8005ebc:	00000206 	br	8005ec8 <strlen+0x20>
 8005ec0:	10c00007 	ldb	r3,0(r2)
 8005ec4:	18001826 	beq	r3,zero,8005f28 <strlen+0x80>
 8005ec8:	10800044 	addi	r2,r2,1
 8005ecc:	10c000cc 	andi	r3,r2,3
 8005ed0:	183ffb1e 	bne	r3,zero,8005ec0 <strlen+0x18>
 8005ed4:	10c00017 	ldw	r3,0(r2)
 8005ed8:	01ffbff4 	movhi	r7,65279
 8005edc:	39ffbfc4 	addi	r7,r7,-257
 8005ee0:	00ca303a 	nor	r5,zero,r3
 8005ee4:	01a02074 	movhi	r6,32897
 8005ee8:	19c7883a 	add	r3,r3,r7
 8005eec:	31a02004 	addi	r6,r6,-32640
 8005ef0:	1946703a 	and	r3,r3,r5
 8005ef4:	1986703a 	and	r3,r3,r6
 8005ef8:	1800091e 	bne	r3,zero,8005f20 <strlen+0x78>
 8005efc:	10800104 	addi	r2,r2,4
 8005f00:	10c00017 	ldw	r3,0(r2)
 8005f04:	19cb883a 	add	r5,r3,r7
 8005f08:	00c6303a 	nor	r3,zero,r3
 8005f0c:	28c6703a 	and	r3,r5,r3
 8005f10:	1986703a 	and	r3,r3,r6
 8005f14:	183ff926 	beq	r3,zero,8005efc <strlen+0x54>
 8005f18:	00000106 	br	8005f20 <strlen+0x78>
 8005f1c:	10800044 	addi	r2,r2,1
 8005f20:	10c00007 	ldb	r3,0(r2)
 8005f24:	183ffd1e 	bne	r3,zero,8005f1c <strlen+0x74>
 8005f28:	1105c83a 	sub	r2,r2,r4
 8005f2c:	f800283a 	ret
 8005f30:	2005883a 	mov	r2,r4
 8005f34:	003fe706 	br	8005ed4 <strlen+0x2c>
 8005f38:	0005883a 	mov	r2,zero
 8005f3c:	f800283a 	ret

08005f40 <strncmp>:
 8005f40:	30003126 	beq	r6,zero,8006008 <strncmp+0xc8>
 8005f44:	2144b03a 	or	r2,r4,r5
 8005f48:	108000cc 	andi	r2,r2,3
 8005f4c:	10001e1e 	bne	r2,zero,8005fc8 <strncmp+0x88>
 8005f50:	024000c4 	movi	r9,3
 8005f54:	49801c2e 	bgeu	r9,r6,8005fc8 <strncmp+0x88>
 8005f58:	20800017 	ldw	r2,0(r4)
 8005f5c:	28c00017 	ldw	r3,0(r5)
 8005f60:	10c0191e 	bne	r2,r3,8005fc8 <strncmp+0x88>
 8005f64:	31bfff04 	addi	r6,r6,-4
 8005f68:	30002726 	beq	r6,zero,8006008 <strncmp+0xc8>
 8005f6c:	02ffbff4 	movhi	r11,65279
 8005f70:	5affbfc4 	addi	r11,r11,-257
 8005f74:	0086303a 	nor	r3,zero,r2
 8005f78:	02a02074 	movhi	r10,32897
 8005f7c:	12c5883a 	add	r2,r2,r11
 8005f80:	52a02004 	addi	r10,r10,-32640
 8005f84:	10c4703a 	and	r2,r2,r3
 8005f88:	1284703a 	and	r2,r2,r10
 8005f8c:	10000b26 	beq	r2,zero,8005fbc <strncmp+0x7c>
 8005f90:	00001d06 	br	8006008 <strncmp+0xc8>
 8005f94:	20c00017 	ldw	r3,0(r4)
 8005f98:	29c00017 	ldw	r7,0(r5)
 8005f9c:	1ad1883a 	add	r8,r3,r11
 8005fa0:	00c4303a 	nor	r2,zero,r3
 8005fa4:	4084703a 	and	r2,r8,r2
 8005fa8:	1284703a 	and	r2,r2,r10
 8005fac:	19c0061e 	bne	r3,r7,8005fc8 <strncmp+0x88>
 8005fb0:	31bfff04 	addi	r6,r6,-4
 8005fb4:	30001426 	beq	r6,zero,8006008 <strncmp+0xc8>
 8005fb8:	1000131e 	bne	r2,zero,8006008 <strncmp+0xc8>
 8005fbc:	21000104 	addi	r4,r4,4
 8005fc0:	29400104 	addi	r5,r5,4
 8005fc4:	49bff336 	bltu	r9,r6,8005f94 <strncmp+0x54>
 8005fc8:	28800007 	ldb	r2,0(r5)
 8005fcc:	20c00007 	ldb	r3,0(r4)
 8005fd0:	31bfffc4 	addi	r6,r6,-1
 8005fd4:	10c0081e 	bne	r2,r3,8005ff8 <strncmp+0xb8>
 8005fd8:	30000b26 	beq	r6,zero,8006008 <strncmp+0xc8>
 8005fdc:	10000a26 	beq	r2,zero,8006008 <strncmp+0xc8>
 8005fe0:	21000044 	addi	r4,r4,1
 8005fe4:	29400044 	addi	r5,r5,1
 8005fe8:	20800007 	ldb	r2,0(r4)
 8005fec:	28c00007 	ldb	r3,0(r5)
 8005ff0:	31bfffc4 	addi	r6,r6,-1
 8005ff4:	10fff826 	beq	r2,r3,8005fd8 <strncmp+0x98>
 8005ff8:	20800003 	ldbu	r2,0(r4)
 8005ffc:	28c00003 	ldbu	r3,0(r5)
 8006000:	10c5c83a 	sub	r2,r2,r3
 8006004:	f800283a 	ret
 8006008:	0005883a 	mov	r2,zero
 800600c:	f800283a 	ret

08006010 <strncpy>:
 8006010:	2906b03a 	or	r3,r5,r4
 8006014:	18c000cc 	andi	r3,r3,3
 8006018:	2005883a 	mov	r2,r4
 800601c:	18002c1e 	bne	r3,zero,80060d0 <strncpy+0xc0>
 8006020:	010000c4 	movi	r4,3
 8006024:	21802a2e 	bgeu	r4,r6,80060d0 <strncpy+0xc0>
 8006028:	033fbff4 	movhi	r12,65279
 800602c:	02e02074 	movhi	r11,32897
 8006030:	633fbfc4 	addi	r12,r12,-257
 8006034:	5ae02004 	addi	r11,r11,-32640
 8006038:	100f883a 	mov	r7,r2
 800603c:	2a000017 	ldw	r8,0(r5)
 8006040:	3815883a 	mov	r10,r7
 8006044:	4313883a 	add	r9,r8,r12
 8006048:	0206303a 	nor	r3,zero,r8
 800604c:	48c6703a 	and	r3,r9,r3
 8006050:	1ac6703a 	and	r3,r3,r11
 8006054:	1800261e 	bne	r3,zero,80060f0 <strncpy+0xe0>
 8006058:	39c00104 	addi	r7,r7,4
 800605c:	52000015 	stw	r8,0(r10)
 8006060:	31bfff04 	addi	r6,r6,-4
 8006064:	3811883a 	mov	r8,r7
 8006068:	29400104 	addi	r5,r5,4
 800606c:	21bff336 	bltu	r4,r6,800603c <strncpy+0x2c>
 8006070:	30001e26 	beq	r6,zero,80060ec <strncpy+0xdc>
 8006074:	29c00003 	ldbu	r7,0(r5)
 8006078:	31bfffc4 	addi	r6,r6,-1
 800607c:	40c00044 	addi	r3,r8,1
 8006080:	41c00005 	stb	r7,0(r8)
 8006084:	39c03fcc 	andi	r7,r7,255
 8006088:	39c0201c 	xori	r7,r7,128
 800608c:	39ffe004 	addi	r7,r7,-128
 8006090:	29400044 	addi	r5,r5,1
 8006094:	38001026 	beq	r7,zero,80060d8 <strncpy+0xc8>
 8006098:	1811883a 	mov	r8,r3
 800609c:	00000906 	br	80060c4 <strncpy+0xb4>
 80060a0:	29c00003 	ldbu	r7,0(r5)
 80060a4:	31bfffc4 	addi	r6,r6,-1
 80060a8:	29400044 	addi	r5,r5,1
 80060ac:	41c00005 	stb	r7,0(r8)
 80060b0:	39c03fcc 	andi	r7,r7,255
 80060b4:	39c0201c 	xori	r7,r7,128
 80060b8:	39ffe004 	addi	r7,r7,-128
 80060bc:	1811883a 	mov	r8,r3
 80060c0:	38000526 	beq	r7,zero,80060d8 <strncpy+0xc8>
 80060c4:	18c00044 	addi	r3,r3,1
 80060c8:	303ff51e 	bne	r6,zero,80060a0 <strncpy+0x90>
 80060cc:	f800283a 	ret
 80060d0:	1011883a 	mov	r8,r2
 80060d4:	003fe606 	br	8006070 <strncpy+0x60>
 80060d8:	30000726 	beq	r6,zero,80060f8 <strncpy+0xe8>
 80060dc:	198d883a 	add	r6,r3,r6
 80060e0:	18000005 	stb	zero,0(r3)
 80060e4:	18c00044 	addi	r3,r3,1
 80060e8:	19bffd1e 	bne	r3,r6,80060e0 <strncpy+0xd0>
 80060ec:	f800283a 	ret
 80060f0:	3811883a 	mov	r8,r7
 80060f4:	003fdf06 	br	8006074 <strncpy+0x64>
 80060f8:	f800283a 	ret

080060fc <time>:
 80060fc:	00820074 	movhi	r2,2049
 8006100:	defffc04 	addi	sp,sp,-16
 8006104:	109c2704 	addi	r2,r2,28828
 8006108:	dc000215 	stw	r16,8(sp)
 800610c:	2021883a 	mov	r16,r4
 8006110:	11000017 	ldw	r4,0(r2)
 8006114:	000d883a 	mov	r6,zero
 8006118:	d80b883a 	mov	r5,sp
 800611c:	dfc00315 	stw	ra,12(sp)
 8006120:	800afe80 	call	800afe8 <_gettimeofday_r>
 8006124:	10000716 	blt	r2,zero,8006144 <time+0x48>
 8006128:	d8800017 	ldw	r2,0(sp)
 800612c:	80000126 	beq	r16,zero,8006134 <time+0x38>
 8006130:	80800015 	stw	r2,0(r16)
 8006134:	dfc00317 	ldw	ra,12(sp)
 8006138:	dc000217 	ldw	r16,8(sp)
 800613c:	dec00404 	addi	sp,sp,16
 8006140:	f800283a 	ret
 8006144:	00bfffc4 	movi	r2,-1
 8006148:	003ffa06 	br	8006134 <time+0x38>

0800614c <_times_r>:
 800614c:	2809883a 	mov	r4,r5
 8006150:	80130681 	jmpi	8013068 <times>

08006154 <___vfprintf_internal_r>:
 8006154:	deffb804 	addi	sp,sp,-288
 8006158:	dfc04715 	stw	ra,284(sp)
 800615c:	ddc04515 	stw	r23,276(sp)
 8006160:	dd404315 	stw	r21,268(sp)
 8006164:	d9002d15 	stw	r4,180(sp)
 8006168:	282f883a 	mov	r23,r5
 800616c:	302b883a 	mov	r21,r6
 8006170:	d9c02e15 	stw	r7,184(sp)
 8006174:	df004615 	stw	fp,280(sp)
 8006178:	dd804415 	stw	r22,272(sp)
 800617c:	dd004215 	stw	r20,264(sp)
 8006180:	dcc04115 	stw	r19,260(sp)
 8006184:	dc804015 	stw	r18,256(sp)
 8006188:	dc403f15 	stw	r17,252(sp)
 800618c:	dc003e15 	stw	r16,248(sp)
 8006190:	800b0f00 	call	800b0f0 <_localeconv_r>
 8006194:	10800017 	ldw	r2,0(r2)
 8006198:	1009883a 	mov	r4,r2
 800619c:	d8803415 	stw	r2,208(sp)
 80061a0:	8005ea80 	call	8005ea8 <strlen>
 80061a4:	d8803715 	stw	r2,220(sp)
 80061a8:	d8802d17 	ldw	r2,180(sp)
 80061ac:	10000226 	beq	r2,zero,80061b8 <___vfprintf_internal_r+0x64>
 80061b0:	10800e17 	ldw	r2,56(r2)
 80061b4:	1000fb26 	beq	r2,zero,80065a4 <___vfprintf_internal_r+0x450>
 80061b8:	b880030b 	ldhu	r2,12(r23)
 80061bc:	10c8000c 	andi	r3,r2,8192
 80061c0:	1800061e 	bne	r3,zero,80061dc <___vfprintf_internal_r+0x88>
 80061c4:	b9001917 	ldw	r4,100(r23)
 80061c8:	00f7ffc4 	movi	r3,-8193
 80061cc:	10880014 	ori	r2,r2,8192
 80061d0:	20c6703a 	and	r3,r4,r3
 80061d4:	b880030d 	sth	r2,12(r23)
 80061d8:	b8c01915 	stw	r3,100(r23)
 80061dc:	10c0020c 	andi	r3,r2,8
 80061e0:	1800c326 	beq	r3,zero,80064f0 <___vfprintf_internal_r+0x39c>
 80061e4:	b8c00417 	ldw	r3,16(r23)
 80061e8:	1800c126 	beq	r3,zero,80064f0 <___vfprintf_internal_r+0x39c>
 80061ec:	1080068c 	andi	r2,r2,26
 80061f0:	00c00284 	movi	r3,10
 80061f4:	10c0c626 	beq	r2,r3,8006510 <___vfprintf_internal_r+0x3bc>
 80061f8:	d8c00404 	addi	r3,sp,16
 80061fc:	05020074 	movhi	r20,2049
 8006200:	d9001e04 	addi	r4,sp,120
 8006204:	a514fc84 	addi	r20,r20,21490
 8006208:	d8c01e15 	stw	r3,120(sp)
 800620c:	d8002015 	stw	zero,128(sp)
 8006210:	d8001f15 	stw	zero,124(sp)
 8006214:	d8003315 	stw	zero,204(sp)
 8006218:	d8003615 	stw	zero,216(sp)
 800621c:	d8003815 	stw	zero,224(sp)
 8006220:	1811883a 	mov	r8,r3
 8006224:	d8003915 	stw	zero,228(sp)
 8006228:	d8003a15 	stw	zero,232(sp)
 800622c:	d8002f15 	stw	zero,188(sp)
 8006230:	d9002815 	stw	r4,160(sp)
 8006234:	a8800007 	ldb	r2,0(r21)
 8006238:	10028b26 	beq	r2,zero,8006c68 <___vfprintf_internal_r+0xb14>
 800623c:	00c00944 	movi	r3,37
 8006240:	a823883a 	mov	r17,r21
 8006244:	10c0021e 	bne	r2,r3,8006250 <___vfprintf_internal_r+0xfc>
 8006248:	00001406 	br	800629c <___vfprintf_internal_r+0x148>
 800624c:	10c00326 	beq	r2,r3,800625c <___vfprintf_internal_r+0x108>
 8006250:	8c400044 	addi	r17,r17,1
 8006254:	88800007 	ldb	r2,0(r17)
 8006258:	103ffc1e 	bne	r2,zero,800624c <___vfprintf_internal_r+0xf8>
 800625c:	8d61c83a 	sub	r16,r17,r21
 8006260:	80000e26 	beq	r16,zero,800629c <___vfprintf_internal_r+0x148>
 8006264:	d8c02017 	ldw	r3,128(sp)
 8006268:	d8801f17 	ldw	r2,124(sp)
 800626c:	45400015 	stw	r21,0(r8)
 8006270:	1c07883a 	add	r3,r3,r16
 8006274:	10800044 	addi	r2,r2,1
 8006278:	d8c02015 	stw	r3,128(sp)
 800627c:	44000115 	stw	r16,4(r8)
 8006280:	d8801f15 	stw	r2,124(sp)
 8006284:	00c001c4 	movi	r3,7
 8006288:	1880a916 	blt	r3,r2,8006530 <___vfprintf_internal_r+0x3dc>
 800628c:	42000204 	addi	r8,r8,8
 8006290:	d9402f17 	ldw	r5,188(sp)
 8006294:	2c0b883a 	add	r5,r5,r16
 8006298:	d9402f15 	stw	r5,188(sp)
 800629c:	88800007 	ldb	r2,0(r17)
 80062a0:	1000aa26 	beq	r2,zero,800654c <___vfprintf_internal_r+0x3f8>
 80062a4:	8d400044 	addi	r21,r17,1
 80062a8:	8c400047 	ldb	r17,1(r17)
 80062ac:	0021883a 	mov	r16,zero
 80062b0:	00bfffc4 	movi	r2,-1
 80062b4:	0025883a 	mov	r18,zero
 80062b8:	dc002905 	stb	r16,164(sp)
 80062bc:	d8002785 	stb	zero,158(sp)
 80062c0:	d8002b05 	stb	zero,172(sp)
 80062c4:	d8802a15 	stw	r2,168(sp)
 80062c8:	d8003115 	stw	zero,196(sp)
 80062cc:	04c01604 	movi	r19,88
 80062d0:	05800244 	movi	r22,9
 80062d4:	9021883a 	mov	r16,r18
 80062d8:	4039883a 	mov	fp,r8
 80062dc:	ad400044 	addi	r21,r21,1
 80062e0:	88bff804 	addi	r2,r17,-32
 80062e4:	98833236 	bltu	r19,r2,8006fb0 <___vfprintf_internal_r+0xe5c>
 80062e8:	100490ba 	slli	r2,r2,2
 80062ec:	00c20034 	movhi	r3,2048
 80062f0:	18d8c004 	addi	r3,r3,25344
 80062f4:	10c5883a 	add	r2,r2,r3
 80062f8:	10800017 	ldw	r2,0(r2)
 80062fc:	1000683a 	jmp	r2
 8006300:	08006ea8 	cmpgeui	zero,at,442
 8006304:	08006fb0 	cmpltui	zero,at,446
 8006308:	08006fb0 	cmpltui	zero,at,446
 800630c:	08006ec8 	cmpgei	zero,at,443
 8006310:	08006fb0 	cmpltui	zero,at,446
 8006314:	08006fb0 	cmpltui	zero,at,446
 8006318:	08006fb0 	cmpltui	zero,at,446
 800631c:	08006fb0 	cmpltui	zero,at,446
 8006320:	08006fb0 	cmpltui	zero,at,446
 8006324:	08006fb0 	cmpltui	zero,at,446
 8006328:	080065b0 	cmpltui	zero,at,406
 800632c:	08006db8 	rdprs	zero,at,438
 8006330:	08006fb0 	cmpltui	zero,at,446
 8006334:	08006474 	orhi	zero,at,401
 8006338:	080065d4 	ori	zero,at,407
 800633c:	08006fb0 	cmpltui	zero,at,446
 8006340:	08006624 	muli	zero,at,408
 8006344:	08006630 	cmpltui	zero,at,408
 8006348:	08006630 	cmpltui	zero,at,408
 800634c:	08006630 	cmpltui	zero,at,408
 8006350:	08006630 	cmpltui	zero,at,408
 8006354:	08006630 	cmpltui	zero,at,408
 8006358:	08006630 	cmpltui	zero,at,408
 800635c:	08006630 	cmpltui	zero,at,408
 8006360:	08006630 	cmpltui	zero,at,408
 8006364:	08006630 	cmpltui	zero,at,408
 8006368:	08006fb0 	cmpltui	zero,at,446
 800636c:	08006fb0 	cmpltui	zero,at,446
 8006370:	08006fb0 	cmpltui	zero,at,446
 8006374:	08006fb0 	cmpltui	zero,at,446
 8006378:	08006fb0 	cmpltui	zero,at,446
 800637c:	08006fb0 	cmpltui	zero,at,446
 8006380:	08006fb0 	cmpltui	zero,at,446
 8006384:	08006fb0 	cmpltui	zero,at,446
 8006388:	08006fb0 	cmpltui	zero,at,446
 800638c:	08006fb0 	cmpltui	zero,at,446
 8006390:	0800666c 	andhi	zero,at,409
 8006394:	08006734 	orhi	zero,at,412
 8006398:	08006fb0 	cmpltui	zero,at,446
 800639c:	08006734 	orhi	zero,at,412
 80063a0:	08006fb0 	cmpltui	zero,at,446
 80063a4:	08006fb0 	cmpltui	zero,at,446
 80063a8:	08006fb0 	cmpltui	zero,at,446
 80063ac:	08006fb0 	cmpltui	zero,at,446
 80063b0:	080067e0 	cmpeqi	zero,at,415
 80063b4:	08006fb0 	cmpltui	zero,at,446
 80063b8:	08006fb0 	cmpltui	zero,at,446
 80063bc:	080067ec 	andhi	zero,at,415
 80063c0:	08006fb0 	cmpltui	zero,at,446
 80063c4:	08006fb0 	cmpltui	zero,at,446
 80063c8:	08006fb0 	cmpltui	zero,at,446
 80063cc:	08006fb0 	cmpltui	zero,at,446
 80063d0:	08006fb0 	cmpltui	zero,at,446
 80063d4:	08006c70 	cmpltui	zero,at,433
 80063d8:	08006fb0 	cmpltui	zero,at,446
 80063dc:	08006fb0 	cmpltui	zero,at,446
 80063e0:	08006cdc 	xori	zero,at,435
 80063e4:	08006fb0 	cmpltui	zero,at,446
 80063e8:	08006fb0 	cmpltui	zero,at,446
 80063ec:	08006fb0 	cmpltui	zero,at,446
 80063f0:	08006fb0 	cmpltui	zero,at,446
 80063f4:	08006fb0 	cmpltui	zero,at,446
 80063f8:	08006fb0 	cmpltui	zero,at,446
 80063fc:	08006fb0 	cmpltui	zero,at,446
 8006400:	08006fb0 	cmpltui	zero,at,446
 8006404:	08006fb0 	cmpltui	zero,at,446
 8006408:	08006fb0 	cmpltui	zero,at,446
 800640c:	08006f54 	ori	zero,at,445
 8006410:	08006ed4 	ori	zero,at,443
 8006414:	08006734 	orhi	zero,at,412
 8006418:	08006734 	orhi	zero,at,412
 800641c:	08006734 	orhi	zero,at,412
 8006420:	08006ef4 	orhi	zero,at,443
 8006424:	08006ed4 	ori	zero,at,443
 8006428:	08006fb0 	cmpltui	zero,at,446
 800642c:	08006fb0 	cmpltui	zero,at,446
 8006430:	08006f00 	call	8006f0 <__alt_mem_onchip_memory2_0+0x8006f0>
 8006434:	08006fb0 	cmpltui	zero,at,446
 8006438:	08006f14 	ori	zero,at,444
 800643c:	08006d98 	cmpnei	zero,at,438
 8006440:	08006480 	call	800648 <__alt_mem_onchip_memory2_0+0x800648>
 8006444:	08006dd0 	cmplti	zero,at,439
 8006448:	08006fb0 	cmpltui	zero,at,446
 800644c:	08006ddc 	xori	zero,at,439
 8006450:	08006fb0 	cmpltui	zero,at,446
 8006454:	08006e40 	call	8006e4 <__alt_mem_onchip_memory2_0+0x8006e4>
 8006458:	08006fb0 	cmpltui	zero,at,446
 800645c:	08006fb0 	cmpltui	zero,at,446
 8006460:	08006e60 	cmpeqi	zero,at,441
 8006464:	d8c03117 	ldw	r3,196(sp)
 8006468:	d8802e15 	stw	r2,184(sp)
 800646c:	00c7c83a 	sub	r3,zero,r3
 8006470:	d8c03115 	stw	r3,196(sp)
 8006474:	84000114 	ori	r16,r16,4
 8006478:	ac400007 	ldb	r17,0(r21)
 800647c:	003f9706 	br	80062dc <___vfprintf_internal_r+0x188>
 8006480:	00800c04 	movi	r2,48
 8006484:	d8802705 	stb	r2,156(sp)
 8006488:	00801e04 	movi	r2,120
 800648c:	d8802745 	stb	r2,157(sp)
 8006490:	d9002a17 	ldw	r4,168(sp)
 8006494:	d8802e17 	ldw	r2,184(sp)
 8006498:	d8002785 	stb	zero,158(sp)
 800649c:	e011883a 	mov	r8,fp
 80064a0:	10c00104 	addi	r3,r2,4
 80064a4:	14c00017 	ldw	r19,0(r2)
 80064a8:	002d883a 	mov	r22,zero
 80064ac:	80800094 	ori	r2,r16,2
 80064b0:	2002ca16 	blt	r4,zero,8006fdc <___vfprintf_internal_r+0xe88>
 80064b4:	00bfdfc4 	movi	r2,-129
 80064b8:	80a4703a 	and	r18,r16,r2
 80064bc:	d8c02e15 	stw	r3,184(sp)
 80064c0:	94800094 	ori	r18,r18,2
 80064c4:	9802b41e 	bne	r19,zero,8006f98 <___vfprintf_internal_r+0xe44>
 80064c8:	01420074 	movhi	r5,2049
 80064cc:	2954f504 	addi	r5,r5,21460
 80064d0:	d9403915 	stw	r5,228(sp)
 80064d4:	04401e04 	movi	r17,120
 80064d8:	d8802a17 	ldw	r2,168(sp)
 80064dc:	0039883a 	mov	fp,zero
 80064e0:	1001fa26 	beq	r2,zero,8006ccc <___vfprintf_internal_r+0xb78>
 80064e4:	0027883a 	mov	r19,zero
 80064e8:	002d883a 	mov	r22,zero
 80064ec:	00021906 	br	8006d54 <___vfprintf_internal_r+0xc00>
 80064f0:	d9002d17 	ldw	r4,180(sp)
 80064f4:	b80b883a 	mov	r5,r23
 80064f8:	80085080 	call	8008508 <__swsetup_r>
 80064fc:	1005dc1e 	bne	r2,zero,8007c70 <___vfprintf_internal_r+0x1b1c>
 8006500:	b880030b 	ldhu	r2,12(r23)
 8006504:	00c00284 	movi	r3,10
 8006508:	1080068c 	andi	r2,r2,26
 800650c:	10ff3a1e 	bne	r2,r3,80061f8 <___vfprintf_internal_r+0xa4>
 8006510:	b880038f 	ldh	r2,14(r23)
 8006514:	103f3816 	blt	r2,zero,80061f8 <___vfprintf_internal_r+0xa4>
 8006518:	d9c02e17 	ldw	r7,184(sp)
 800651c:	d9002d17 	ldw	r4,180(sp)
 8006520:	a80d883a 	mov	r6,r21
 8006524:	b80b883a 	mov	r5,r23
 8006528:	800844c0 	call	800844c <__sbprintf>
 800652c:	00001106 	br	8006574 <___vfprintf_internal_r+0x420>
 8006530:	d9002d17 	ldw	r4,180(sp)
 8006534:	d9801e04 	addi	r6,sp,120
 8006538:	b80b883a 	mov	r5,r23
 800653c:	800d8880 	call	800d888 <__sprint_r>
 8006540:	1000081e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 8006544:	da000404 	addi	r8,sp,16
 8006548:	003f5106 	br	8006290 <___vfprintf_internal_r+0x13c>
 800654c:	d8802017 	ldw	r2,128(sp)
 8006550:	10000426 	beq	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 8006554:	d9002d17 	ldw	r4,180(sp)
 8006558:	d9801e04 	addi	r6,sp,120
 800655c:	b80b883a 	mov	r5,r23
 8006560:	800d8880 	call	800d888 <__sprint_r>
 8006564:	b880030b 	ldhu	r2,12(r23)
 8006568:	1080100c 	andi	r2,r2,64
 800656c:	1005c01e 	bne	r2,zero,8007c70 <___vfprintf_internal_r+0x1b1c>
 8006570:	d8802f17 	ldw	r2,188(sp)
 8006574:	dfc04717 	ldw	ra,284(sp)
 8006578:	df004617 	ldw	fp,280(sp)
 800657c:	ddc04517 	ldw	r23,276(sp)
 8006580:	dd804417 	ldw	r22,272(sp)
 8006584:	dd404317 	ldw	r21,268(sp)
 8006588:	dd004217 	ldw	r20,264(sp)
 800658c:	dcc04117 	ldw	r19,260(sp)
 8006590:	dc804017 	ldw	r18,256(sp)
 8006594:	dc403f17 	ldw	r17,252(sp)
 8006598:	dc003e17 	ldw	r16,248(sp)
 800659c:	dec04804 	addi	sp,sp,288
 80065a0:	f800283a 	ret
 80065a4:	d9002d17 	ldw	r4,180(sp)
 80065a8:	800a5140 	call	800a514 <__sinit>
 80065ac:	003f0206 	br	80061b8 <___vfprintf_internal_r+0x64>
 80065b0:	d9002e17 	ldw	r4,184(sp)
 80065b4:	d9402e17 	ldw	r5,184(sp)
 80065b8:	21000017 	ldw	r4,0(r4)
 80065bc:	28800104 	addi	r2,r5,4
 80065c0:	d9003115 	stw	r4,196(sp)
 80065c4:	203fa716 	blt	r4,zero,8006464 <___vfprintf_internal_r+0x310>
 80065c8:	d8802e15 	stw	r2,184(sp)
 80065cc:	ac400007 	ldb	r17,0(r21)
 80065d0:	003f4206 	br	80062dc <___vfprintf_internal_r+0x188>
 80065d4:	ac400007 	ldb	r17,0(r21)
 80065d8:	01000a84 	movi	r4,42
 80065dc:	a8c00044 	addi	r3,r21,1
 80065e0:	89075826 	beq	r17,r4,8008344 <___vfprintf_internal_r+0x21f0>
 80065e4:	8cbff404 	addi	r18,r17,-48
 80065e8:	b486ae36 	bltu	r22,r18,80080a4 <___vfprintf_internal_r+0x1f50>
 80065ec:	0009883a 	mov	r4,zero
 80065f0:	1823883a 	mov	r17,r3
 80065f4:	01400284 	movi	r5,10
 80065f8:	80050200 	call	8005020 <__mulsi3>
 80065fc:	88c00007 	ldb	r3,0(r17)
 8006600:	1489883a 	add	r4,r2,r18
 8006604:	8d400044 	addi	r21,r17,1
 8006608:	1cbff404 	addi	r18,r3,-48
 800660c:	a823883a 	mov	r17,r21
 8006610:	b4bff82e 	bgeu	r22,r18,80065f4 <___vfprintf_internal_r+0x4a0>
 8006614:	1823883a 	mov	r17,r3
 8006618:	2005f616 	blt	r4,zero,8007df4 <___vfprintf_internal_r+0x1ca0>
 800661c:	d9002a15 	stw	r4,168(sp)
 8006620:	003f2f06 	br	80062e0 <___vfprintf_internal_r+0x18c>
 8006624:	84002014 	ori	r16,r16,128
 8006628:	ac400007 	ldb	r17,0(r21)
 800662c:	003f2b06 	br	80062dc <___vfprintf_internal_r+0x188>
 8006630:	8cbff404 	addi	r18,r17,-48
 8006634:	d8003115 	stw	zero,196(sp)
 8006638:	0009883a 	mov	r4,zero
 800663c:	a823883a 	mov	r17,r21
 8006640:	01400284 	movi	r5,10
 8006644:	80050200 	call	8005020 <__mulsi3>
 8006648:	88c00007 	ldb	r3,0(r17)
 800664c:	9089883a 	add	r4,r18,r2
 8006650:	ad400044 	addi	r21,r21,1
 8006654:	1cbff404 	addi	r18,r3,-48
 8006658:	a823883a 	mov	r17,r21
 800665c:	b4bff82e 	bgeu	r22,r18,8006640 <___vfprintf_internal_r+0x4ec>
 8006660:	1823883a 	mov	r17,r3
 8006664:	d9003115 	stw	r4,196(sp)
 8006668:	003f1d06 	br	80062e0 <___vfprintf_internal_r+0x18c>
 800666c:	8025883a 	mov	r18,r16
 8006670:	dc002903 	ldbu	r16,164(sp)
 8006674:	e011883a 	mov	r8,fp
 8006678:	84003fcc 	andi	r16,r16,255
 800667c:	8007531e 	bne	r16,zero,80083cc <___vfprintf_internal_r+0x2278>
 8006680:	94800414 	ori	r18,r18,16
 8006684:	9080080c 	andi	r2,r18,32
 8006688:	1003a326 	beq	r2,zero,8007518 <___vfprintf_internal_r+0x13c4>
 800668c:	d9002e17 	ldw	r4,184(sp)
 8006690:	20800117 	ldw	r2,4(r4)
 8006694:	24c00017 	ldw	r19,0(r4)
 8006698:	21000204 	addi	r4,r4,8
 800669c:	d9002e15 	stw	r4,184(sp)
 80066a0:	102d883a 	mov	r22,r2
 80066a4:	10047316 	blt	r2,zero,8007874 <___vfprintf_internal_r+0x1720>
 80066a8:	d9002a17 	ldw	r4,168(sp)
 80066ac:	df002783 	ldbu	fp,158(sp)
 80066b0:	2003e416 	blt	r4,zero,8007644 <___vfprintf_internal_r+0x14f0>
 80066b4:	00ffdfc4 	movi	r3,-129
 80066b8:	9d84b03a 	or	r2,r19,r22
 80066bc:	90e4703a 	and	r18,r18,r3
 80066c0:	10018026 	beq	r2,zero,8006cc4 <___vfprintf_internal_r+0xb70>
 80066c4:	b003ab26 	beq	r22,zero,8007574 <___vfprintf_internal_r+0x1420>
 80066c8:	dc402915 	stw	r17,164(sp)
 80066cc:	dc001e04 	addi	r16,sp,120
 80066d0:	b023883a 	mov	r17,r22
 80066d4:	402d883a 	mov	r22,r8
 80066d8:	9809883a 	mov	r4,r19
 80066dc:	880b883a 	mov	r5,r17
 80066e0:	01800284 	movi	r6,10
 80066e4:	000f883a 	mov	r7,zero
 80066e8:	800fdcc0 	call	800fdcc <__umoddi3>
 80066ec:	10800c04 	addi	r2,r2,48
 80066f0:	843fffc4 	addi	r16,r16,-1
 80066f4:	9809883a 	mov	r4,r19
 80066f8:	880b883a 	mov	r5,r17
 80066fc:	80800005 	stb	r2,0(r16)
 8006700:	01800284 	movi	r6,10
 8006704:	000f883a 	mov	r7,zero
 8006708:	800f7d00 	call	800f7d0 <__udivdi3>
 800670c:	1027883a 	mov	r19,r2
 8006710:	10c4b03a 	or	r2,r2,r3
 8006714:	1823883a 	mov	r17,r3
 8006718:	103fef1e 	bne	r2,zero,80066d8 <___vfprintf_internal_r+0x584>
 800671c:	d8c02817 	ldw	r3,160(sp)
 8006720:	dc402917 	ldw	r17,164(sp)
 8006724:	b011883a 	mov	r8,r22
 8006728:	1c07c83a 	sub	r3,r3,r16
 800672c:	d8c02b15 	stw	r3,172(sp)
 8006730:	00005f06 	br	80068b0 <___vfprintf_internal_r+0x75c>
 8006734:	8025883a 	mov	r18,r16
 8006738:	dc002903 	ldbu	r16,164(sp)
 800673c:	e011883a 	mov	r8,fp
 8006740:	84003fcc 	andi	r16,r16,255
 8006744:	80071e1e 	bne	r16,zero,80083c0 <___vfprintf_internal_r+0x226c>
 8006748:	9080020c 	andi	r2,r18,8
 800674c:	1004af26 	beq	r2,zero,8007a0c <___vfprintf_internal_r+0x18b8>
 8006750:	d9002e17 	ldw	r4,184(sp)
 8006754:	d9402e17 	ldw	r5,184(sp)
 8006758:	d8802e17 	ldw	r2,184(sp)
 800675c:	21000017 	ldw	r4,0(r4)
 8006760:	29400117 	ldw	r5,4(r5)
 8006764:	10800204 	addi	r2,r2,8
 8006768:	d9003615 	stw	r4,216(sp)
 800676c:	d9403815 	stw	r5,224(sp)
 8006770:	d8802e15 	stw	r2,184(sp)
 8006774:	d9003617 	ldw	r4,216(sp)
 8006778:	d9403817 	ldw	r5,224(sp)
 800677c:	da003d15 	stw	r8,244(sp)
 8006780:	04000044 	movi	r16,1
 8006784:	800d4ac0 	call	800d4ac <__fpclassifyd>
 8006788:	da003d17 	ldw	r8,244(sp)
 800678c:	1404441e 	bne	r2,r16,80078a0 <___vfprintf_internal_r+0x174c>
 8006790:	d9003617 	ldw	r4,216(sp)
 8006794:	d9403817 	ldw	r5,224(sp)
 8006798:	000d883a 	mov	r6,zero
 800679c:	000f883a 	mov	r7,zero
 80067a0:	80118480 	call	8011848 <__ledf2>
 80067a4:	da003d17 	ldw	r8,244(sp)
 80067a8:	1005e316 	blt	r2,zero,8007f38 <___vfprintf_internal_r+0x1de4>
 80067ac:	df002783 	ldbu	fp,158(sp)
 80067b0:	008011c4 	movi	r2,71
 80067b4:	1445580e 	bge	r2,r17,8007d18 <___vfprintf_internal_r+0x1bc4>
 80067b8:	04020074 	movhi	r16,2049
 80067bc:	8414ed04 	addi	r16,r16,21428
 80067c0:	00c000c4 	movi	r3,3
 80067c4:	00bfdfc4 	movi	r2,-129
 80067c8:	d8c02915 	stw	r3,164(sp)
 80067cc:	90a4703a 	and	r18,r18,r2
 80067d0:	d8c02b15 	stw	r3,172(sp)
 80067d4:	d8002a15 	stw	zero,168(sp)
 80067d8:	d8003215 	stw	zero,200(sp)
 80067dc:	00003a06 	br	80068c8 <___vfprintf_internal_r+0x774>
 80067e0:	84000214 	ori	r16,r16,8
 80067e4:	ac400007 	ldb	r17,0(r21)
 80067e8:	003ebc06 	br	80062dc <___vfprintf_internal_r+0x188>
 80067ec:	8025883a 	mov	r18,r16
 80067f0:	dc002903 	ldbu	r16,164(sp)
 80067f4:	e011883a 	mov	r8,fp
 80067f8:	84003fcc 	andi	r16,r16,255
 80067fc:	8007001e 	bne	r16,zero,8008400 <___vfprintf_internal_r+0x22ac>
 8006800:	94800414 	ori	r18,r18,16
 8006804:	9080080c 	andi	r2,r18,32
 8006808:	1002fa26 	beq	r2,zero,80073f4 <___vfprintf_internal_r+0x12a0>
 800680c:	d9002e17 	ldw	r4,184(sp)
 8006810:	d9402a17 	ldw	r5,168(sp)
 8006814:	d8002785 	stb	zero,158(sp)
 8006818:	20800204 	addi	r2,r4,8
 800681c:	24c00017 	ldw	r19,0(r4)
 8006820:	25800117 	ldw	r22,4(r4)
 8006824:	2804b116 	blt	r5,zero,8007aec <___vfprintf_internal_r+0x1998>
 8006828:	013fdfc4 	movi	r4,-129
 800682c:	9d86b03a 	or	r3,r19,r22
 8006830:	d8802e15 	stw	r2,184(sp)
 8006834:	9124703a 	and	r18,r18,r4
 8006838:	1802fb1e 	bne	r3,zero,8007428 <___vfprintf_internal_r+0x12d4>
 800683c:	d8c02a17 	ldw	r3,168(sp)
 8006840:	0039883a 	mov	fp,zero
 8006844:	1805e526 	beq	r3,zero,8007fdc <___vfprintf_internal_r+0x1e88>
 8006848:	0027883a 	mov	r19,zero
 800684c:	002d883a 	mov	r22,zero
 8006850:	dc001e04 	addi	r16,sp,120
 8006854:	9806d0fa 	srli	r3,r19,3
 8006858:	b008977a 	slli	r4,r22,29
 800685c:	b02cd0fa 	srli	r22,r22,3
 8006860:	9cc001cc 	andi	r19,r19,7
 8006864:	98800c04 	addi	r2,r19,48
 8006868:	843fffc4 	addi	r16,r16,-1
 800686c:	20e6b03a 	or	r19,r4,r3
 8006870:	80800005 	stb	r2,0(r16)
 8006874:	9d86b03a 	or	r3,r19,r22
 8006878:	183ff61e 	bne	r3,zero,8006854 <___vfprintf_internal_r+0x700>
 800687c:	90c0004c 	andi	r3,r18,1
 8006880:	18014126 	beq	r3,zero,8006d88 <___vfprintf_internal_r+0xc34>
 8006884:	10803fcc 	andi	r2,r2,255
 8006888:	1080201c 	xori	r2,r2,128
 800688c:	10bfe004 	addi	r2,r2,-128
 8006890:	00c00c04 	movi	r3,48
 8006894:	10c13c26 	beq	r2,r3,8006d88 <___vfprintf_internal_r+0xc34>
 8006898:	80ffffc5 	stb	r3,-1(r16)
 800689c:	d8c02817 	ldw	r3,160(sp)
 80068a0:	80bfffc4 	addi	r2,r16,-1
 80068a4:	1021883a 	mov	r16,r2
 80068a8:	1887c83a 	sub	r3,r3,r2
 80068ac:	d8c02b15 	stw	r3,172(sp)
 80068b0:	d8802b17 	ldw	r2,172(sp)
 80068b4:	d9002a17 	ldw	r4,168(sp)
 80068b8:	1100010e 	bge	r2,r4,80068c0 <___vfprintf_internal_r+0x76c>
 80068bc:	2005883a 	mov	r2,r4
 80068c0:	d8802915 	stw	r2,164(sp)
 80068c4:	d8003215 	stw	zero,200(sp)
 80068c8:	e7003fcc 	andi	fp,fp,255
 80068cc:	e700201c 	xori	fp,fp,128
 80068d0:	e73fe004 	addi	fp,fp,-128
 80068d4:	e0000326 	beq	fp,zero,80068e4 <___vfprintf_internal_r+0x790>
 80068d8:	d8c02917 	ldw	r3,164(sp)
 80068dc:	18c00044 	addi	r3,r3,1
 80068e0:	d8c02915 	stw	r3,164(sp)
 80068e4:	90c0008c 	andi	r3,r18,2
 80068e8:	d8c02c15 	stw	r3,176(sp)
 80068ec:	18000326 	beq	r3,zero,80068fc <___vfprintf_internal_r+0x7a8>
 80068f0:	d8c02917 	ldw	r3,164(sp)
 80068f4:	18c00084 	addi	r3,r3,2
 80068f8:	d8c02915 	stw	r3,164(sp)
 80068fc:	90c0210c 	andi	r3,r18,132
 8006900:	d8c03015 	stw	r3,192(sp)
 8006904:	1801c51e 	bne	r3,zero,800701c <___vfprintf_internal_r+0xec8>
 8006908:	d9003117 	ldw	r4,196(sp)
 800690c:	d8c02917 	ldw	r3,164(sp)
 8006910:	20e7c83a 	sub	r19,r4,r3
 8006914:	04c1c10e 	bge	zero,r19,800701c <___vfprintf_internal_r+0xec8>
 8006918:	02400404 	movi	r9,16
 800691c:	d8c02017 	ldw	r3,128(sp)
 8006920:	d8801f17 	ldw	r2,124(sp)
 8006924:	4cc52f0e 	bge	r9,r19,8007de4 <___vfprintf_internal_r+0x1c90>
 8006928:	01420074 	movhi	r5,2049
 800692c:	29550084 	addi	r5,r5,21506
 8006930:	dc403b15 	stw	r17,236(sp)
 8006934:	d9403515 	stw	r5,212(sp)
 8006938:	9823883a 	mov	r17,r19
 800693c:	482d883a 	mov	r22,r9
 8006940:	9027883a 	mov	r19,r18
 8006944:	070001c4 	movi	fp,7
 8006948:	8025883a 	mov	r18,r16
 800694c:	dc002d17 	ldw	r16,180(sp)
 8006950:	00000306 	br	8006960 <___vfprintf_internal_r+0x80c>
 8006954:	8c7ffc04 	addi	r17,r17,-16
 8006958:	42000204 	addi	r8,r8,8
 800695c:	b440130e 	bge	r22,r17,80069ac <___vfprintf_internal_r+0x858>
 8006960:	01020074 	movhi	r4,2049
 8006964:	18c00404 	addi	r3,r3,16
 8006968:	10800044 	addi	r2,r2,1
 800696c:	21150084 	addi	r4,r4,21506
 8006970:	41000015 	stw	r4,0(r8)
 8006974:	45800115 	stw	r22,4(r8)
 8006978:	d8c02015 	stw	r3,128(sp)
 800697c:	d8801f15 	stw	r2,124(sp)
 8006980:	e0bff40e 	bge	fp,r2,8006954 <___vfprintf_internal_r+0x800>
 8006984:	d9801e04 	addi	r6,sp,120
 8006988:	b80b883a 	mov	r5,r23
 800698c:	8009883a 	mov	r4,r16
 8006990:	800d8880 	call	800d888 <__sprint_r>
 8006994:	103ef31e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 8006998:	8c7ffc04 	addi	r17,r17,-16
 800699c:	d8c02017 	ldw	r3,128(sp)
 80069a0:	d8801f17 	ldw	r2,124(sp)
 80069a4:	da000404 	addi	r8,sp,16
 80069a8:	b47fed16 	blt	r22,r17,8006960 <___vfprintf_internal_r+0x80c>
 80069ac:	9021883a 	mov	r16,r18
 80069b0:	9825883a 	mov	r18,r19
 80069b4:	8827883a 	mov	r19,r17
 80069b8:	dc403b17 	ldw	r17,236(sp)
 80069bc:	d9403517 	ldw	r5,212(sp)
 80069c0:	98c7883a 	add	r3,r19,r3
 80069c4:	10800044 	addi	r2,r2,1
 80069c8:	41400015 	stw	r5,0(r8)
 80069cc:	44c00115 	stw	r19,4(r8)
 80069d0:	d8c02015 	stw	r3,128(sp)
 80069d4:	d8801f15 	stw	r2,124(sp)
 80069d8:	010001c4 	movi	r4,7
 80069dc:	2082c516 	blt	r4,r2,80074f4 <___vfprintf_internal_r+0x13a0>
 80069e0:	df002787 	ldb	fp,158(sp)
 80069e4:	42000204 	addi	r8,r8,8
 80069e8:	e0000c26 	beq	fp,zero,8006a1c <___vfprintf_internal_r+0x8c8>
 80069ec:	d8801f17 	ldw	r2,124(sp)
 80069f0:	d9002784 	addi	r4,sp,158
 80069f4:	18c00044 	addi	r3,r3,1
 80069f8:	10800044 	addi	r2,r2,1
 80069fc:	41000015 	stw	r4,0(r8)
 8006a00:	01000044 	movi	r4,1
 8006a04:	41000115 	stw	r4,4(r8)
 8006a08:	d8c02015 	stw	r3,128(sp)
 8006a0c:	d8801f15 	stw	r2,124(sp)
 8006a10:	010001c4 	movi	r4,7
 8006a14:	20825e16 	blt	r4,r2,8007390 <___vfprintf_internal_r+0x123c>
 8006a18:	42000204 	addi	r8,r8,8
 8006a1c:	d8802c17 	ldw	r2,176(sp)
 8006a20:	10000c26 	beq	r2,zero,8006a54 <___vfprintf_internal_r+0x900>
 8006a24:	d8801f17 	ldw	r2,124(sp)
 8006a28:	d9002704 	addi	r4,sp,156
 8006a2c:	18c00084 	addi	r3,r3,2
 8006a30:	10800044 	addi	r2,r2,1
 8006a34:	41000015 	stw	r4,0(r8)
 8006a38:	01000084 	movi	r4,2
 8006a3c:	41000115 	stw	r4,4(r8)
 8006a40:	d8c02015 	stw	r3,128(sp)
 8006a44:	d8801f15 	stw	r2,124(sp)
 8006a48:	010001c4 	movi	r4,7
 8006a4c:	20825816 	blt	r4,r2,80073b0 <___vfprintf_internal_r+0x125c>
 8006a50:	42000204 	addi	r8,r8,8
 8006a54:	d9003017 	ldw	r4,192(sp)
 8006a58:	00802004 	movi	r2,128
 8006a5c:	2081bb26 	beq	r4,r2,800714c <___vfprintf_internal_r+0xff8>
 8006a60:	d9402a17 	ldw	r5,168(sp)
 8006a64:	d8802b17 	ldw	r2,172(sp)
 8006a68:	28adc83a 	sub	r22,r5,r2
 8006a6c:	0580310e 	bge	zero,r22,8006b34 <___vfprintf_internal_r+0x9e0>
 8006a70:	07000404 	movi	fp,16
 8006a74:	d8801f17 	ldw	r2,124(sp)
 8006a78:	e584360e 	bge	fp,r22,8007b54 <___vfprintf_internal_r+0x1a00>
 8006a7c:	01420074 	movhi	r5,2049
 8006a80:	2954fc84 	addi	r5,r5,21490
 8006a84:	dc402a15 	stw	r17,168(sp)
 8006a88:	d9402c15 	stw	r5,176(sp)
 8006a8c:	b023883a 	mov	r17,r22
 8006a90:	04c001c4 	movi	r19,7
 8006a94:	a82d883a 	mov	r22,r21
 8006a98:	902b883a 	mov	r21,r18
 8006a9c:	8025883a 	mov	r18,r16
 8006aa0:	dc002d17 	ldw	r16,180(sp)
 8006aa4:	00000306 	br	8006ab4 <___vfprintf_internal_r+0x960>
 8006aa8:	8c7ffc04 	addi	r17,r17,-16
 8006aac:	42000204 	addi	r8,r8,8
 8006ab0:	e440110e 	bge	fp,r17,8006af8 <___vfprintf_internal_r+0x9a4>
 8006ab4:	18c00404 	addi	r3,r3,16
 8006ab8:	10800044 	addi	r2,r2,1
 8006abc:	45000015 	stw	r20,0(r8)
 8006ac0:	47000115 	stw	fp,4(r8)
 8006ac4:	d8c02015 	stw	r3,128(sp)
 8006ac8:	d8801f15 	stw	r2,124(sp)
 8006acc:	98bff60e 	bge	r19,r2,8006aa8 <___vfprintf_internal_r+0x954>
 8006ad0:	d9801e04 	addi	r6,sp,120
 8006ad4:	b80b883a 	mov	r5,r23
 8006ad8:	8009883a 	mov	r4,r16
 8006adc:	800d8880 	call	800d888 <__sprint_r>
 8006ae0:	103ea01e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 8006ae4:	8c7ffc04 	addi	r17,r17,-16
 8006ae8:	d8c02017 	ldw	r3,128(sp)
 8006aec:	d8801f17 	ldw	r2,124(sp)
 8006af0:	da000404 	addi	r8,sp,16
 8006af4:	e47fef16 	blt	fp,r17,8006ab4 <___vfprintf_internal_r+0x960>
 8006af8:	9021883a 	mov	r16,r18
 8006afc:	a825883a 	mov	r18,r21
 8006b00:	b02b883a 	mov	r21,r22
 8006b04:	882d883a 	mov	r22,r17
 8006b08:	dc402a17 	ldw	r17,168(sp)
 8006b0c:	d9002c17 	ldw	r4,176(sp)
 8006b10:	1d87883a 	add	r3,r3,r22
 8006b14:	10800044 	addi	r2,r2,1
 8006b18:	41000015 	stw	r4,0(r8)
 8006b1c:	45800115 	stw	r22,4(r8)
 8006b20:	d8c02015 	stw	r3,128(sp)
 8006b24:	d8801f15 	stw	r2,124(sp)
 8006b28:	010001c4 	movi	r4,7
 8006b2c:	20821016 	blt	r4,r2,8007370 <___vfprintf_internal_r+0x121c>
 8006b30:	42000204 	addi	r8,r8,8
 8006b34:	9080400c 	andi	r2,r18,256
 8006b38:	10013a1e 	bne	r2,zero,8007024 <___vfprintf_internal_r+0xed0>
 8006b3c:	d9402b17 	ldw	r5,172(sp)
 8006b40:	d8801f17 	ldw	r2,124(sp)
 8006b44:	44000015 	stw	r16,0(r8)
 8006b48:	1947883a 	add	r3,r3,r5
 8006b4c:	10800044 	addi	r2,r2,1
 8006b50:	41400115 	stw	r5,4(r8)
 8006b54:	d8c02015 	stw	r3,128(sp)
 8006b58:	d8801f15 	stw	r2,124(sp)
 8006b5c:	010001c4 	movi	r4,7
 8006b60:	2081f516 	blt	r4,r2,8007338 <___vfprintf_internal_r+0x11e4>
 8006b64:	42000204 	addi	r8,r8,8
 8006b68:	9480010c 	andi	r18,r18,4
 8006b6c:	90003226 	beq	r18,zero,8006c38 <___vfprintf_internal_r+0xae4>
 8006b70:	d9403117 	ldw	r5,196(sp)
 8006b74:	d8802917 	ldw	r2,164(sp)
 8006b78:	28a1c83a 	sub	r16,r5,r2
 8006b7c:	04002e0e 	bge	zero,r16,8006c38 <___vfprintf_internal_r+0xae4>
 8006b80:	04400404 	movi	r17,16
 8006b84:	d8801f17 	ldw	r2,124(sp)
 8006b88:	8c04c40e 	bge	r17,r16,8007e9c <___vfprintf_internal_r+0x1d48>
 8006b8c:	01420074 	movhi	r5,2049
 8006b90:	29550084 	addi	r5,r5,21506
 8006b94:	d9403515 	stw	r5,212(sp)
 8006b98:	048001c4 	movi	r18,7
 8006b9c:	dcc02d17 	ldw	r19,180(sp)
 8006ba0:	00000306 	br	8006bb0 <___vfprintf_internal_r+0xa5c>
 8006ba4:	843ffc04 	addi	r16,r16,-16
 8006ba8:	42000204 	addi	r8,r8,8
 8006bac:	8c00130e 	bge	r17,r16,8006bfc <___vfprintf_internal_r+0xaa8>
 8006bb0:	01020074 	movhi	r4,2049
 8006bb4:	18c00404 	addi	r3,r3,16
 8006bb8:	10800044 	addi	r2,r2,1
 8006bbc:	21150084 	addi	r4,r4,21506
 8006bc0:	41000015 	stw	r4,0(r8)
 8006bc4:	44400115 	stw	r17,4(r8)
 8006bc8:	d8c02015 	stw	r3,128(sp)
 8006bcc:	d8801f15 	stw	r2,124(sp)
 8006bd0:	90bff40e 	bge	r18,r2,8006ba4 <___vfprintf_internal_r+0xa50>
 8006bd4:	d9801e04 	addi	r6,sp,120
 8006bd8:	b80b883a 	mov	r5,r23
 8006bdc:	9809883a 	mov	r4,r19
 8006be0:	800d8880 	call	800d888 <__sprint_r>
 8006be4:	103e5f1e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 8006be8:	843ffc04 	addi	r16,r16,-16
 8006bec:	d8c02017 	ldw	r3,128(sp)
 8006bf0:	d8801f17 	ldw	r2,124(sp)
 8006bf4:	da000404 	addi	r8,sp,16
 8006bf8:	8c3fed16 	blt	r17,r16,8006bb0 <___vfprintf_internal_r+0xa5c>
 8006bfc:	d9403517 	ldw	r5,212(sp)
 8006c00:	1c07883a 	add	r3,r3,r16
 8006c04:	10800044 	addi	r2,r2,1
 8006c08:	41400015 	stw	r5,0(r8)
 8006c0c:	44000115 	stw	r16,4(r8)
 8006c10:	d8c02015 	stw	r3,128(sp)
 8006c14:	d8801f15 	stw	r2,124(sp)
 8006c18:	010001c4 	movi	r4,7
 8006c1c:	2080060e 	bge	r4,r2,8006c38 <___vfprintf_internal_r+0xae4>
 8006c20:	d9002d17 	ldw	r4,180(sp)
 8006c24:	d9801e04 	addi	r6,sp,120
 8006c28:	b80b883a 	mov	r5,r23
 8006c2c:	800d8880 	call	800d888 <__sprint_r>
 8006c30:	103e4c1e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 8006c34:	d8c02017 	ldw	r3,128(sp)
 8006c38:	d8803117 	ldw	r2,196(sp)
 8006c3c:	d9002917 	ldw	r4,164(sp)
 8006c40:	1100010e 	bge	r2,r4,8006c48 <___vfprintf_internal_r+0xaf4>
 8006c44:	2005883a 	mov	r2,r4
 8006c48:	d9402f17 	ldw	r5,188(sp)
 8006c4c:	288b883a 	add	r5,r5,r2
 8006c50:	d9402f15 	stw	r5,188(sp)
 8006c54:	1801c01e 	bne	r3,zero,8007358 <___vfprintf_internal_r+0x1204>
 8006c58:	a8800007 	ldb	r2,0(r21)
 8006c5c:	d8001f15 	stw	zero,124(sp)
 8006c60:	da000404 	addi	r8,sp,16
 8006c64:	103d751e 	bne	r2,zero,800623c <___vfprintf_internal_r+0xe8>
 8006c68:	a823883a 	mov	r17,r21
 8006c6c:	003d8b06 	br	800629c <___vfprintf_internal_r+0x148>
 8006c70:	8025883a 	mov	r18,r16
 8006c74:	dc002903 	ldbu	r16,164(sp)
 8006c78:	e011883a 	mov	r8,fp
 8006c7c:	84003fcc 	andi	r16,r16,255
 8006c80:	8005e51e 	bne	r16,zero,8008418 <___vfprintf_internal_r+0x22c4>
 8006c84:	94800414 	ori	r18,r18,16
 8006c88:	9080080c 	andi	r2,r18,32
 8006c8c:	10022b26 	beq	r2,zero,800753c <___vfprintf_internal_r+0x13e8>
 8006c90:	d9002e17 	ldw	r4,184(sp)
 8006c94:	d9402a17 	ldw	r5,168(sp)
 8006c98:	d8002785 	stb	zero,158(sp)
 8006c9c:	20c00204 	addi	r3,r4,8
 8006ca0:	24c00017 	ldw	r19,0(r4)
 8006ca4:	25800117 	ldw	r22,4(r4)
 8006ca8:	28042e16 	blt	r5,zero,8007d64 <___vfprintf_internal_r+0x1c10>
 8006cac:	013fdfc4 	movi	r4,-129
 8006cb0:	9d84b03a 	or	r2,r19,r22
 8006cb4:	d8c02e15 	stw	r3,184(sp)
 8006cb8:	9124703a 	and	r18,r18,r4
 8006cbc:	0039883a 	mov	fp,zero
 8006cc0:	103e801e 	bne	r2,zero,80066c4 <___vfprintf_internal_r+0x570>
 8006cc4:	d9002a17 	ldw	r4,168(sp)
 8006cc8:	2002e01e 	bne	r4,zero,800784c <___vfprintf_internal_r+0x16f8>
 8006ccc:	d8002a15 	stw	zero,168(sp)
 8006cd0:	d8002b15 	stw	zero,172(sp)
 8006cd4:	dc001e04 	addi	r16,sp,120
 8006cd8:	003ef506 	br	80068b0 <___vfprintf_internal_r+0x75c>
 8006cdc:	8025883a 	mov	r18,r16
 8006ce0:	dc002903 	ldbu	r16,164(sp)
 8006ce4:	e011883a 	mov	r8,fp
 8006ce8:	84003fcc 	andi	r16,r16,255
 8006cec:	8005ba1e 	bne	r16,zero,80083d8 <___vfprintf_internal_r+0x2284>
 8006cf0:	01020074 	movhi	r4,2049
 8006cf4:	2114f004 	addi	r4,r4,21440
 8006cf8:	d9003915 	stw	r4,228(sp)
 8006cfc:	9080080c 	andi	r2,r18,32
 8006d00:	10006126 	beq	r2,zero,8006e88 <___vfprintf_internal_r+0xd34>
 8006d04:	d9402e17 	ldw	r5,184(sp)
 8006d08:	2cc00017 	ldw	r19,0(r5)
 8006d0c:	2d800117 	ldw	r22,4(r5)
 8006d10:	29400204 	addi	r5,r5,8
 8006d14:	d9402e15 	stw	r5,184(sp)
 8006d18:	9080004c 	andi	r2,r18,1
 8006d1c:	1001ac26 	beq	r2,zero,80073d0 <___vfprintf_internal_r+0x127c>
 8006d20:	9d84b03a 	or	r2,r19,r22
 8006d24:	10038526 	beq	r2,zero,8007b3c <___vfprintf_internal_r+0x19e8>
 8006d28:	d8c02a17 	ldw	r3,168(sp)
 8006d2c:	00800c04 	movi	r2,48
 8006d30:	d8802705 	stb	r2,156(sp)
 8006d34:	dc402745 	stb	r17,157(sp)
 8006d38:	d8002785 	stb	zero,158(sp)
 8006d3c:	90800094 	ori	r2,r18,2
 8006d40:	18047916 	blt	r3,zero,8007f28 <___vfprintf_internal_r+0x1dd4>
 8006d44:	00bfdfc4 	movi	r2,-129
 8006d48:	90a4703a 	and	r18,r18,r2
 8006d4c:	94800094 	ori	r18,r18,2
 8006d50:	0039883a 	mov	fp,zero
 8006d54:	d9003917 	ldw	r4,228(sp)
 8006d58:	dc001e04 	addi	r16,sp,120
 8006d5c:	988003cc 	andi	r2,r19,15
 8006d60:	b006973a 	slli	r3,r22,28
 8006d64:	2085883a 	add	r2,r4,r2
 8006d68:	9826d13a 	srli	r19,r19,4
 8006d6c:	10800003 	ldbu	r2,0(r2)
 8006d70:	b02cd13a 	srli	r22,r22,4
 8006d74:	843fffc4 	addi	r16,r16,-1
 8006d78:	1ce6b03a 	or	r19,r3,r19
 8006d7c:	80800005 	stb	r2,0(r16)
 8006d80:	9d84b03a 	or	r2,r19,r22
 8006d84:	103ff51e 	bne	r2,zero,8006d5c <___vfprintf_internal_r+0xc08>
 8006d88:	d8c02817 	ldw	r3,160(sp)
 8006d8c:	1c07c83a 	sub	r3,r3,r16
 8006d90:	d8c02b15 	stw	r3,172(sp)
 8006d94:	003ec606 	br	80068b0 <___vfprintf_internal_r+0x75c>
 8006d98:	8025883a 	mov	r18,r16
 8006d9c:	dc002903 	ldbu	r16,164(sp)
 8006da0:	e011883a 	mov	r8,fp
 8006da4:	84003fcc 	andi	r16,r16,255
 8006da8:	803e9626 	beq	r16,zero,8006804 <___vfprintf_internal_r+0x6b0>
 8006dac:	d8c02b03 	ldbu	r3,172(sp)
 8006db0:	d8c02785 	stb	r3,158(sp)
 8006db4:	003e9306 	br	8006804 <___vfprintf_internal_r+0x6b0>
 8006db8:	00c00044 	movi	r3,1
 8006dbc:	d8c02905 	stb	r3,164(sp)
 8006dc0:	00c00ac4 	movi	r3,43
 8006dc4:	d8c02b05 	stb	r3,172(sp)
 8006dc8:	ac400007 	ldb	r17,0(r21)
 8006dcc:	003d4306 	br	80062dc <___vfprintf_internal_r+0x188>
 8006dd0:	84000814 	ori	r16,r16,32
 8006dd4:	ac400007 	ldb	r17,0(r21)
 8006dd8:	003d4006 	br	80062dc <___vfprintf_internal_r+0x188>
 8006ddc:	d8802e17 	ldw	r2,184(sp)
 8006de0:	8025883a 	mov	r18,r16
 8006de4:	d8002785 	stb	zero,158(sp)
 8006de8:	14000017 	ldw	r16,0(r2)
 8006dec:	e011883a 	mov	r8,fp
 8006df0:	14c00104 	addi	r19,r2,4
 8006df4:	80042d26 	beq	r16,zero,8007eac <___vfprintf_internal_r+0x1d58>
 8006df8:	d8c02a17 	ldw	r3,168(sp)
 8006dfc:	1803e416 	blt	r3,zero,8007d90 <___vfprintf_internal_r+0x1c3c>
 8006e00:	180d883a 	mov	r6,r3
 8006e04:	000b883a 	mov	r5,zero
 8006e08:	8009883a 	mov	r4,r16
 8006e0c:	df003d15 	stw	fp,244(sp)
 8006e10:	800bae80 	call	800bae8 <memchr>
 8006e14:	da003d17 	ldw	r8,244(sp)
 8006e18:	10046826 	beq	r2,zero,8007fbc <___vfprintf_internal_r+0x1e68>
 8006e1c:	1405c83a 	sub	r2,r2,r16
 8006e20:	d8802b15 	stw	r2,172(sp)
 8006e24:	1003e016 	blt	r2,zero,8007da8 <___vfprintf_internal_r+0x1c54>
 8006e28:	df002783 	ldbu	fp,158(sp)
 8006e2c:	d8802915 	stw	r2,164(sp)
 8006e30:	dcc02e15 	stw	r19,184(sp)
 8006e34:	d8002a15 	stw	zero,168(sp)
 8006e38:	d8003215 	stw	zero,200(sp)
 8006e3c:	003ea206 	br	80068c8 <___vfprintf_internal_r+0x774>
 8006e40:	8025883a 	mov	r18,r16
 8006e44:	dc002903 	ldbu	r16,164(sp)
 8006e48:	e011883a 	mov	r8,fp
 8006e4c:	84003fcc 	andi	r16,r16,255
 8006e50:	803f8d26 	beq	r16,zero,8006c88 <___vfprintf_internal_r+0xb34>
 8006e54:	d8c02b03 	ldbu	r3,172(sp)
 8006e58:	d8c02785 	stb	r3,158(sp)
 8006e5c:	003f8a06 	br	8006c88 <___vfprintf_internal_r+0xb34>
 8006e60:	8025883a 	mov	r18,r16
 8006e64:	dc002903 	ldbu	r16,164(sp)
 8006e68:	e011883a 	mov	r8,fp
 8006e6c:	84003fcc 	andi	r16,r16,255
 8006e70:	8005661e 	bne	r16,zero,800840c <___vfprintf_internal_r+0x22b8>
 8006e74:	01020074 	movhi	r4,2049
 8006e78:	2114f504 	addi	r4,r4,21460
 8006e7c:	d9003915 	stw	r4,228(sp)
 8006e80:	9080080c 	andi	r2,r18,32
 8006e84:	103f9f1e 	bne	r2,zero,8006d04 <___vfprintf_internal_r+0xbb0>
 8006e88:	9080040c 	andi	r2,r18,16
 8006e8c:	1002eb26 	beq	r2,zero,8007a3c <___vfprintf_internal_r+0x18e8>
 8006e90:	d8802e17 	ldw	r2,184(sp)
 8006e94:	002d883a 	mov	r22,zero
 8006e98:	14c00017 	ldw	r19,0(r2)
 8006e9c:	10800104 	addi	r2,r2,4
 8006ea0:	d8802e15 	stw	r2,184(sp)
 8006ea4:	003f9c06 	br	8006d18 <___vfprintf_internal_r+0xbc4>
 8006ea8:	d8802b07 	ldb	r2,172(sp)
 8006eac:	1002e11e 	bne	r2,zero,8007a34 <___vfprintf_internal_r+0x18e0>
 8006eb0:	00c00044 	movi	r3,1
 8006eb4:	d8c02905 	stb	r3,164(sp)
 8006eb8:	00c00804 	movi	r3,32
 8006ebc:	d8c02b05 	stb	r3,172(sp)
 8006ec0:	ac400007 	ldb	r17,0(r21)
 8006ec4:	003d0506 	br	80062dc <___vfprintf_internal_r+0x188>
 8006ec8:	84000054 	ori	r16,r16,1
 8006ecc:	ac400007 	ldb	r17,0(r21)
 8006ed0:	003d0206 	br	80062dc <___vfprintf_internal_r+0x188>
 8006ed4:	8025883a 	mov	r18,r16
 8006ed8:	dc002903 	ldbu	r16,164(sp)
 8006edc:	e011883a 	mov	r8,fp
 8006ee0:	84003fcc 	andi	r16,r16,255
 8006ee4:	803de726 	beq	r16,zero,8006684 <___vfprintf_internal_r+0x530>
 8006ee8:	d8c02b03 	ldbu	r3,172(sp)
 8006eec:	d8c02785 	stb	r3,158(sp)
 8006ef0:	003de406 	br	8006684 <___vfprintf_internal_r+0x530>
 8006ef4:	84001014 	ori	r16,r16,64
 8006ef8:	ac400007 	ldb	r17,0(r21)
 8006efc:	003cf706 	br	80062dc <___vfprintf_internal_r+0x188>
 8006f00:	ac400007 	ldb	r17,0(r21)
 8006f04:	00801b04 	movi	r2,108
 8006f08:	88838f26 	beq	r17,r2,8007d48 <___vfprintf_internal_r+0x1bf4>
 8006f0c:	84000414 	ori	r16,r16,16
 8006f10:	003cf206 	br	80062dc <___vfprintf_internal_r+0x188>
 8006f14:	8025883a 	mov	r18,r16
 8006f18:	dc002903 	ldbu	r16,164(sp)
 8006f1c:	e011883a 	mov	r8,fp
 8006f20:	84003fcc 	andi	r16,r16,255
 8006f24:	80053f1e 	bne	r16,zero,8008424 <___vfprintf_internal_r+0x22d0>
 8006f28:	9080080c 	andi	r2,r18,32
 8006f2c:	1002d226 	beq	r2,zero,8007a78 <___vfprintf_internal_r+0x1924>
 8006f30:	d9002e17 	ldw	r4,184(sp)
 8006f34:	d9402f17 	ldw	r5,188(sp)
 8006f38:	20800017 	ldw	r2,0(r4)
 8006f3c:	2807d7fa 	srai	r3,r5,31
 8006f40:	21000104 	addi	r4,r4,4
 8006f44:	d9002e15 	stw	r4,184(sp)
 8006f48:	11400015 	stw	r5,0(r2)
 8006f4c:	10c00115 	stw	r3,4(r2)
 8006f50:	003cb806 	br	8006234 <___vfprintf_internal_r+0xe0>
 8006f54:	d8c02e17 	ldw	r3,184(sp)
 8006f58:	d9002e17 	ldw	r4,184(sp)
 8006f5c:	8025883a 	mov	r18,r16
 8006f60:	18800017 	ldw	r2,0(r3)
 8006f64:	21000104 	addi	r4,r4,4
 8006f68:	00c00044 	movi	r3,1
 8006f6c:	e011883a 	mov	r8,fp
 8006f70:	d8c02915 	stw	r3,164(sp)
 8006f74:	d8002785 	stb	zero,158(sp)
 8006f78:	d8801405 	stb	r2,80(sp)
 8006f7c:	d9002e15 	stw	r4,184(sp)
 8006f80:	d8c02b15 	stw	r3,172(sp)
 8006f84:	d8002a15 	stw	zero,168(sp)
 8006f88:	d8003215 	stw	zero,200(sp)
 8006f8c:	dc001404 	addi	r16,sp,80
 8006f90:	0039883a 	mov	fp,zero
 8006f94:	003e5306 	br	80068e4 <___vfprintf_internal_r+0x790>
 8006f98:	01020074 	movhi	r4,2049
 8006f9c:	2114f504 	addi	r4,r4,21460
 8006fa0:	0039883a 	mov	fp,zero
 8006fa4:	d9003915 	stw	r4,228(sp)
 8006fa8:	04401e04 	movi	r17,120
 8006fac:	003f6906 	br	8006d54 <___vfprintf_internal_r+0xc00>
 8006fb0:	8025883a 	mov	r18,r16
 8006fb4:	dc002903 	ldbu	r16,164(sp)
 8006fb8:	e011883a 	mov	r8,fp
 8006fbc:	84003fcc 	andi	r16,r16,255
 8006fc0:	8005081e 	bne	r16,zero,80083e4 <___vfprintf_internal_r+0x2290>
 8006fc4:	883d6126 	beq	r17,zero,800654c <___vfprintf_internal_r+0x3f8>
 8006fc8:	00c00044 	movi	r3,1
 8006fcc:	d8c02915 	stw	r3,164(sp)
 8006fd0:	dc401405 	stb	r17,80(sp)
 8006fd4:	d8002785 	stb	zero,158(sp)
 8006fd8:	003fe906 	br	8006f80 <___vfprintf_internal_r+0xe2c>
 8006fdc:	01420074 	movhi	r5,2049
 8006fe0:	2954f504 	addi	r5,r5,21460
 8006fe4:	d9403915 	stw	r5,228(sp)
 8006fe8:	d8c02e15 	stw	r3,184(sp)
 8006fec:	1025883a 	mov	r18,r2
 8006ff0:	04401e04 	movi	r17,120
 8006ff4:	9d84b03a 	or	r2,r19,r22
 8006ff8:	1000fc1e 	bne	r2,zero,80073ec <___vfprintf_internal_r+0x1298>
 8006ffc:	0039883a 	mov	fp,zero
 8007000:	00800084 	movi	r2,2
 8007004:	10803fcc 	andi	r2,r2,255
 8007008:	00c00044 	movi	r3,1
 800700c:	10c20f26 	beq	r2,r3,800784c <___vfprintf_internal_r+0x16f8>
 8007010:	00c00084 	movi	r3,2
 8007014:	10fd3326 	beq	r2,r3,80064e4 <___vfprintf_internal_r+0x390>
 8007018:	003e0b06 	br	8006848 <___vfprintf_internal_r+0x6f4>
 800701c:	d8c02017 	ldw	r3,128(sp)
 8007020:	003e7106 	br	80069e8 <___vfprintf_internal_r+0x894>
 8007024:	00801944 	movi	r2,101
 8007028:	14407e0e 	bge	r2,r17,8007224 <___vfprintf_internal_r+0x10d0>
 800702c:	d9003617 	ldw	r4,216(sp)
 8007030:	d9403817 	ldw	r5,224(sp)
 8007034:	000d883a 	mov	r6,zero
 8007038:	000f883a 	mov	r7,zero
 800703c:	d8c03c15 	stw	r3,240(sp)
 8007040:	da003d15 	stw	r8,244(sp)
 8007044:	80117c00 	call	80117c0 <__eqdf2>
 8007048:	d8c03c17 	ldw	r3,240(sp)
 800704c:	da003d17 	ldw	r8,244(sp)
 8007050:	1000f71e 	bne	r2,zero,8007430 <___vfprintf_internal_r+0x12dc>
 8007054:	d8801f17 	ldw	r2,124(sp)
 8007058:	01020074 	movhi	r4,2049
 800705c:	2114fc04 	addi	r4,r4,21488
 8007060:	18c00044 	addi	r3,r3,1
 8007064:	10800044 	addi	r2,r2,1
 8007068:	41000015 	stw	r4,0(r8)
 800706c:	01000044 	movi	r4,1
 8007070:	41000115 	stw	r4,4(r8)
 8007074:	d8c02015 	stw	r3,128(sp)
 8007078:	d8801f15 	stw	r2,124(sp)
 800707c:	010001c4 	movi	r4,7
 8007080:	2082b816 	blt	r4,r2,8007b64 <___vfprintf_internal_r+0x1a10>
 8007084:	42000204 	addi	r8,r8,8
 8007088:	d8802617 	ldw	r2,152(sp)
 800708c:	d9403317 	ldw	r5,204(sp)
 8007090:	11400216 	blt	r2,r5,800709c <___vfprintf_internal_r+0xf48>
 8007094:	9080004c 	andi	r2,r18,1
 8007098:	103eb326 	beq	r2,zero,8006b68 <___vfprintf_internal_r+0xa14>
 800709c:	d8803717 	ldw	r2,220(sp)
 80070a0:	d9003417 	ldw	r4,208(sp)
 80070a4:	d9403717 	ldw	r5,220(sp)
 80070a8:	1887883a 	add	r3,r3,r2
 80070ac:	d8801f17 	ldw	r2,124(sp)
 80070b0:	41000015 	stw	r4,0(r8)
 80070b4:	41400115 	stw	r5,4(r8)
 80070b8:	10800044 	addi	r2,r2,1
 80070bc:	d8c02015 	stw	r3,128(sp)
 80070c0:	d8801f15 	stw	r2,124(sp)
 80070c4:	010001c4 	movi	r4,7
 80070c8:	20832916 	blt	r4,r2,8007d70 <___vfprintf_internal_r+0x1c1c>
 80070cc:	42000204 	addi	r8,r8,8
 80070d0:	d8803317 	ldw	r2,204(sp)
 80070d4:	143fffc4 	addi	r16,r2,-1
 80070d8:	043ea30e 	bge	zero,r16,8006b68 <___vfprintf_internal_r+0xa14>
 80070dc:	04400404 	movi	r17,16
 80070e0:	d8801f17 	ldw	r2,124(sp)
 80070e4:	8c00880e 	bge	r17,r16,8007308 <___vfprintf_internal_r+0x11b4>
 80070e8:	01420074 	movhi	r5,2049
 80070ec:	2954fc84 	addi	r5,r5,21490
 80070f0:	d9402c15 	stw	r5,176(sp)
 80070f4:	058001c4 	movi	r22,7
 80070f8:	dcc02d17 	ldw	r19,180(sp)
 80070fc:	00000306 	br	800710c <___vfprintf_internal_r+0xfb8>
 8007100:	42000204 	addi	r8,r8,8
 8007104:	843ffc04 	addi	r16,r16,-16
 8007108:	8c00820e 	bge	r17,r16,8007314 <___vfprintf_internal_r+0x11c0>
 800710c:	18c00404 	addi	r3,r3,16
 8007110:	10800044 	addi	r2,r2,1
 8007114:	45000015 	stw	r20,0(r8)
 8007118:	44400115 	stw	r17,4(r8)
 800711c:	d8c02015 	stw	r3,128(sp)
 8007120:	d8801f15 	stw	r2,124(sp)
 8007124:	b0bff60e 	bge	r22,r2,8007100 <___vfprintf_internal_r+0xfac>
 8007128:	d9801e04 	addi	r6,sp,120
 800712c:	b80b883a 	mov	r5,r23
 8007130:	9809883a 	mov	r4,r19
 8007134:	800d8880 	call	800d888 <__sprint_r>
 8007138:	103d0a1e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 800713c:	d8c02017 	ldw	r3,128(sp)
 8007140:	d8801f17 	ldw	r2,124(sp)
 8007144:	da000404 	addi	r8,sp,16
 8007148:	003fee06 	br	8007104 <___vfprintf_internal_r+0xfb0>
 800714c:	d9403117 	ldw	r5,196(sp)
 8007150:	d8802917 	ldw	r2,164(sp)
 8007154:	28adc83a 	sub	r22,r5,r2
 8007158:	05be410e 	bge	zero,r22,8006a60 <___vfprintf_internal_r+0x90c>
 800715c:	07000404 	movi	fp,16
 8007160:	d8801f17 	ldw	r2,124(sp)
 8007164:	e5838f0e 	bge	fp,r22,8007fa4 <___vfprintf_internal_r+0x1e50>
 8007168:	01420074 	movhi	r5,2049
 800716c:	2954fc84 	addi	r5,r5,21490
 8007170:	dc403015 	stw	r17,192(sp)
 8007174:	d9402c15 	stw	r5,176(sp)
 8007178:	b023883a 	mov	r17,r22
 800717c:	04c001c4 	movi	r19,7
 8007180:	a82d883a 	mov	r22,r21
 8007184:	902b883a 	mov	r21,r18
 8007188:	8025883a 	mov	r18,r16
 800718c:	dc002d17 	ldw	r16,180(sp)
 8007190:	00000306 	br	80071a0 <___vfprintf_internal_r+0x104c>
 8007194:	8c7ffc04 	addi	r17,r17,-16
 8007198:	42000204 	addi	r8,r8,8
 800719c:	e440110e 	bge	fp,r17,80071e4 <___vfprintf_internal_r+0x1090>
 80071a0:	18c00404 	addi	r3,r3,16
 80071a4:	10800044 	addi	r2,r2,1
 80071a8:	45000015 	stw	r20,0(r8)
 80071ac:	47000115 	stw	fp,4(r8)
 80071b0:	d8c02015 	stw	r3,128(sp)
 80071b4:	d8801f15 	stw	r2,124(sp)
 80071b8:	98bff60e 	bge	r19,r2,8007194 <___vfprintf_internal_r+0x1040>
 80071bc:	d9801e04 	addi	r6,sp,120
 80071c0:	b80b883a 	mov	r5,r23
 80071c4:	8009883a 	mov	r4,r16
 80071c8:	800d8880 	call	800d888 <__sprint_r>
 80071cc:	103ce51e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 80071d0:	8c7ffc04 	addi	r17,r17,-16
 80071d4:	d8c02017 	ldw	r3,128(sp)
 80071d8:	d8801f17 	ldw	r2,124(sp)
 80071dc:	da000404 	addi	r8,sp,16
 80071e0:	e47fef16 	blt	fp,r17,80071a0 <___vfprintf_internal_r+0x104c>
 80071e4:	9021883a 	mov	r16,r18
 80071e8:	a825883a 	mov	r18,r21
 80071ec:	b02b883a 	mov	r21,r22
 80071f0:	882d883a 	mov	r22,r17
 80071f4:	dc403017 	ldw	r17,192(sp)
 80071f8:	d9002c17 	ldw	r4,176(sp)
 80071fc:	1d87883a 	add	r3,r3,r22
 8007200:	10800044 	addi	r2,r2,1
 8007204:	41000015 	stw	r4,0(r8)
 8007208:	45800115 	stw	r22,4(r8)
 800720c:	d8c02015 	stw	r3,128(sp)
 8007210:	d8801f15 	stw	r2,124(sp)
 8007214:	010001c4 	movi	r4,7
 8007218:	20818e16 	blt	r4,r2,8007854 <___vfprintf_internal_r+0x1700>
 800721c:	42000204 	addi	r8,r8,8
 8007220:	003e0f06 	br	8006a60 <___vfprintf_internal_r+0x90c>
 8007224:	d9403317 	ldw	r5,204(sp)
 8007228:	00800044 	movi	r2,1
 800722c:	18c00044 	addi	r3,r3,1
 8007230:	1141530e 	bge	r2,r5,8007780 <___vfprintf_internal_r+0x162c>
 8007234:	dc401f17 	ldw	r17,124(sp)
 8007238:	00800044 	movi	r2,1
 800723c:	40800115 	stw	r2,4(r8)
 8007240:	8c400044 	addi	r17,r17,1
 8007244:	44000015 	stw	r16,0(r8)
 8007248:	d8c02015 	stw	r3,128(sp)
 800724c:	dc401f15 	stw	r17,124(sp)
 8007250:	008001c4 	movi	r2,7
 8007254:	14416b16 	blt	r2,r17,8007804 <___vfprintf_internal_r+0x16b0>
 8007258:	42000204 	addi	r8,r8,8
 800725c:	d8803717 	ldw	r2,220(sp)
 8007260:	d9003417 	ldw	r4,208(sp)
 8007264:	8c400044 	addi	r17,r17,1
 8007268:	10c7883a 	add	r3,r2,r3
 800726c:	40800115 	stw	r2,4(r8)
 8007270:	41000015 	stw	r4,0(r8)
 8007274:	d8c02015 	stw	r3,128(sp)
 8007278:	dc401f15 	stw	r17,124(sp)
 800727c:	008001c4 	movi	r2,7
 8007280:	14416916 	blt	r2,r17,8007828 <___vfprintf_internal_r+0x16d4>
 8007284:	45800204 	addi	r22,r8,8
 8007288:	d9003617 	ldw	r4,216(sp)
 800728c:	d9403817 	ldw	r5,224(sp)
 8007290:	000d883a 	mov	r6,zero
 8007294:	000f883a 	mov	r7,zero
 8007298:	d8c03c15 	stw	r3,240(sp)
 800729c:	80117c00 	call	80117c0 <__eqdf2>
 80072a0:	d8c03c17 	ldw	r3,240(sp)
 80072a4:	1000bc26 	beq	r2,zero,8007598 <___vfprintf_internal_r+0x1444>
 80072a8:	d9403317 	ldw	r5,204(sp)
 80072ac:	84000044 	addi	r16,r16,1
 80072b0:	8c400044 	addi	r17,r17,1
 80072b4:	28bfffc4 	addi	r2,r5,-1
 80072b8:	1887883a 	add	r3,r3,r2
 80072bc:	b0800115 	stw	r2,4(r22)
 80072c0:	b4000015 	stw	r16,0(r22)
 80072c4:	d8c02015 	stw	r3,128(sp)
 80072c8:	dc401f15 	stw	r17,124(sp)
 80072cc:	008001c4 	movi	r2,7
 80072d0:	14414316 	blt	r2,r17,80077e0 <___vfprintf_internal_r+0x168c>
 80072d4:	b5800204 	addi	r22,r22,8
 80072d8:	d9003a17 	ldw	r4,232(sp)
 80072dc:	df0022c4 	addi	fp,sp,139
 80072e0:	8c400044 	addi	r17,r17,1
 80072e4:	20c7883a 	add	r3,r4,r3
 80072e8:	b7000015 	stw	fp,0(r22)
 80072ec:	b1000115 	stw	r4,4(r22)
 80072f0:	d8c02015 	stw	r3,128(sp)
 80072f4:	dc401f15 	stw	r17,124(sp)
 80072f8:	008001c4 	movi	r2,7
 80072fc:	14400e16 	blt	r2,r17,8007338 <___vfprintf_internal_r+0x11e4>
 8007300:	b2000204 	addi	r8,r22,8
 8007304:	003e1806 	br	8006b68 <___vfprintf_internal_r+0xa14>
 8007308:	01020074 	movhi	r4,2049
 800730c:	2114fc84 	addi	r4,r4,21490
 8007310:	d9002c15 	stw	r4,176(sp)
 8007314:	d9002c17 	ldw	r4,176(sp)
 8007318:	1c07883a 	add	r3,r3,r16
 800731c:	44000115 	stw	r16,4(r8)
 8007320:	41000015 	stw	r4,0(r8)
 8007324:	10800044 	addi	r2,r2,1
 8007328:	d8c02015 	stw	r3,128(sp)
 800732c:	d8801f15 	stw	r2,124(sp)
 8007330:	010001c4 	movi	r4,7
 8007334:	20be0b0e 	bge	r4,r2,8006b64 <___vfprintf_internal_r+0xa10>
 8007338:	d9002d17 	ldw	r4,180(sp)
 800733c:	d9801e04 	addi	r6,sp,120
 8007340:	b80b883a 	mov	r5,r23
 8007344:	800d8880 	call	800d888 <__sprint_r>
 8007348:	103c861e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 800734c:	d8c02017 	ldw	r3,128(sp)
 8007350:	da000404 	addi	r8,sp,16
 8007354:	003e0406 	br	8006b68 <___vfprintf_internal_r+0xa14>
 8007358:	d9002d17 	ldw	r4,180(sp)
 800735c:	d9801e04 	addi	r6,sp,120
 8007360:	b80b883a 	mov	r5,r23
 8007364:	800d8880 	call	800d888 <__sprint_r>
 8007368:	103e3b26 	beq	r2,zero,8006c58 <___vfprintf_internal_r+0xb04>
 800736c:	003c7d06 	br	8006564 <___vfprintf_internal_r+0x410>
 8007370:	d9002d17 	ldw	r4,180(sp)
 8007374:	d9801e04 	addi	r6,sp,120
 8007378:	b80b883a 	mov	r5,r23
 800737c:	800d8880 	call	800d888 <__sprint_r>
 8007380:	103c781e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 8007384:	d8c02017 	ldw	r3,128(sp)
 8007388:	da000404 	addi	r8,sp,16
 800738c:	003de906 	br	8006b34 <___vfprintf_internal_r+0x9e0>
 8007390:	d9002d17 	ldw	r4,180(sp)
 8007394:	d9801e04 	addi	r6,sp,120
 8007398:	b80b883a 	mov	r5,r23
 800739c:	800d8880 	call	800d888 <__sprint_r>
 80073a0:	103c701e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 80073a4:	d8c02017 	ldw	r3,128(sp)
 80073a8:	da000404 	addi	r8,sp,16
 80073ac:	003d9b06 	br	8006a1c <___vfprintf_internal_r+0x8c8>
 80073b0:	d9002d17 	ldw	r4,180(sp)
 80073b4:	d9801e04 	addi	r6,sp,120
 80073b8:	b80b883a 	mov	r5,r23
 80073bc:	800d8880 	call	800d888 <__sprint_r>
 80073c0:	103c681e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 80073c4:	d8c02017 	ldw	r3,128(sp)
 80073c8:	da000404 	addi	r8,sp,16
 80073cc:	003da106 	br	8006a54 <___vfprintf_internal_r+0x900>
 80073d0:	d9402a17 	ldw	r5,168(sp)
 80073d4:	d8002785 	stb	zero,158(sp)
 80073d8:	283f0616 	blt	r5,zero,8006ff4 <___vfprintf_internal_r+0xea0>
 80073dc:	00ffdfc4 	movi	r3,-129
 80073e0:	9d84b03a 	or	r2,r19,r22
 80073e4:	90e4703a 	and	r18,r18,r3
 80073e8:	103c3b26 	beq	r2,zero,80064d8 <___vfprintf_internal_r+0x384>
 80073ec:	0039883a 	mov	fp,zero
 80073f0:	003e5806 	br	8006d54 <___vfprintf_internal_r+0xc00>
 80073f4:	9080040c 	andi	r2,r18,16
 80073f8:	1001b326 	beq	r2,zero,8007ac8 <___vfprintf_internal_r+0x1974>
 80073fc:	d8c02e17 	ldw	r3,184(sp)
 8007400:	d9002a17 	ldw	r4,168(sp)
 8007404:	d8002785 	stb	zero,158(sp)
 8007408:	18800104 	addi	r2,r3,4
 800740c:	1cc00017 	ldw	r19,0(r3)
 8007410:	002d883a 	mov	r22,zero
 8007414:	2001b516 	blt	r4,zero,8007aec <___vfprintf_internal_r+0x1998>
 8007418:	00ffdfc4 	movi	r3,-129
 800741c:	d8802e15 	stw	r2,184(sp)
 8007420:	90e4703a 	and	r18,r18,r3
 8007424:	983d0526 	beq	r19,zero,800683c <___vfprintf_internal_r+0x6e8>
 8007428:	0039883a 	mov	fp,zero
 800742c:	003d0806 	br	8006850 <___vfprintf_internal_r+0x6fc>
 8007430:	dc402617 	ldw	r17,152(sp)
 8007434:	0441d30e 	bge	zero,r17,8007b84 <___vfprintf_internal_r+0x1a30>
 8007438:	dc403217 	ldw	r17,200(sp)
 800743c:	d8803317 	ldw	r2,204(sp)
 8007440:	1440010e 	bge	r2,r17,8007448 <___vfprintf_internal_r+0x12f4>
 8007444:	1023883a 	mov	r17,r2
 8007448:	04400a0e 	bge	zero,r17,8007474 <___vfprintf_internal_r+0x1320>
 800744c:	d8801f17 	ldw	r2,124(sp)
 8007450:	1c47883a 	add	r3,r3,r17
 8007454:	44000015 	stw	r16,0(r8)
 8007458:	10800044 	addi	r2,r2,1
 800745c:	44400115 	stw	r17,4(r8)
 8007460:	d8c02015 	stw	r3,128(sp)
 8007464:	d8801f15 	stw	r2,124(sp)
 8007468:	010001c4 	movi	r4,7
 800746c:	20826516 	blt	r4,r2,8007e04 <___vfprintf_internal_r+0x1cb0>
 8007470:	42000204 	addi	r8,r8,8
 8007474:	88026116 	blt	r17,zero,8007dfc <___vfprintf_internal_r+0x1ca8>
 8007478:	d9003217 	ldw	r4,200(sp)
 800747c:	2463c83a 	sub	r17,r4,r17
 8007480:	04407b0e 	bge	zero,r17,8007670 <___vfprintf_internal_r+0x151c>
 8007484:	05800404 	movi	r22,16
 8007488:	d8801f17 	ldw	r2,124(sp)
 800748c:	b4419d0e 	bge	r22,r17,8007b04 <___vfprintf_internal_r+0x19b0>
 8007490:	01020074 	movhi	r4,2049
 8007494:	2114fc84 	addi	r4,r4,21490
 8007498:	d9002c15 	stw	r4,176(sp)
 800749c:	070001c4 	movi	fp,7
 80074a0:	dcc02d17 	ldw	r19,180(sp)
 80074a4:	00000306 	br	80074b4 <___vfprintf_internal_r+0x1360>
 80074a8:	42000204 	addi	r8,r8,8
 80074ac:	8c7ffc04 	addi	r17,r17,-16
 80074b0:	b441970e 	bge	r22,r17,8007b10 <___vfprintf_internal_r+0x19bc>
 80074b4:	18c00404 	addi	r3,r3,16
 80074b8:	10800044 	addi	r2,r2,1
 80074bc:	45000015 	stw	r20,0(r8)
 80074c0:	45800115 	stw	r22,4(r8)
 80074c4:	d8c02015 	stw	r3,128(sp)
 80074c8:	d8801f15 	stw	r2,124(sp)
 80074cc:	e0bff60e 	bge	fp,r2,80074a8 <___vfprintf_internal_r+0x1354>
 80074d0:	d9801e04 	addi	r6,sp,120
 80074d4:	b80b883a 	mov	r5,r23
 80074d8:	9809883a 	mov	r4,r19
 80074dc:	800d8880 	call	800d888 <__sprint_r>
 80074e0:	103c201e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 80074e4:	d8c02017 	ldw	r3,128(sp)
 80074e8:	d8801f17 	ldw	r2,124(sp)
 80074ec:	da000404 	addi	r8,sp,16
 80074f0:	003fee06 	br	80074ac <___vfprintf_internal_r+0x1358>
 80074f4:	d9002d17 	ldw	r4,180(sp)
 80074f8:	d9801e04 	addi	r6,sp,120
 80074fc:	b80b883a 	mov	r5,r23
 8007500:	800d8880 	call	800d888 <__sprint_r>
 8007504:	103c171e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 8007508:	d8c02017 	ldw	r3,128(sp)
 800750c:	df002787 	ldb	fp,158(sp)
 8007510:	da000404 	addi	r8,sp,16
 8007514:	003d3406 	br	80069e8 <___vfprintf_internal_r+0x894>
 8007518:	9080040c 	andi	r2,r18,16
 800751c:	10016126 	beq	r2,zero,8007aa4 <___vfprintf_internal_r+0x1950>
 8007520:	d9402e17 	ldw	r5,184(sp)
 8007524:	2cc00017 	ldw	r19,0(r5)
 8007528:	29400104 	addi	r5,r5,4
 800752c:	d9402e15 	stw	r5,184(sp)
 8007530:	982dd7fa 	srai	r22,r19,31
 8007534:	b005883a 	mov	r2,r22
 8007538:	003c5a06 	br	80066a4 <___vfprintf_internal_r+0x550>
 800753c:	9080040c 	andi	r2,r18,16
 8007540:	10003526 	beq	r2,zero,8007618 <___vfprintf_internal_r+0x14c4>
 8007544:	d8c02e17 	ldw	r3,184(sp)
 8007548:	d9002a17 	ldw	r4,168(sp)
 800754c:	d8002785 	stb	zero,158(sp)
 8007550:	18800104 	addi	r2,r3,4
 8007554:	1cc00017 	ldw	r19,0(r3)
 8007558:	002d883a 	mov	r22,zero
 800755c:	20003716 	blt	r4,zero,800763c <___vfprintf_internal_r+0x14e8>
 8007560:	00ffdfc4 	movi	r3,-129
 8007564:	d8802e15 	stw	r2,184(sp)
 8007568:	90e4703a 	and	r18,r18,r3
 800756c:	0039883a 	mov	fp,zero
 8007570:	983dd426 	beq	r19,zero,8006cc4 <___vfprintf_internal_r+0xb70>
 8007574:	00800244 	movi	r2,9
 8007578:	14fc5336 	bltu	r2,r19,80066c8 <___vfprintf_internal_r+0x574>
 800757c:	d8c02817 	ldw	r3,160(sp)
 8007580:	dc001dc4 	addi	r16,sp,119
 8007584:	9cc00c04 	addi	r19,r19,48
 8007588:	1c07c83a 	sub	r3,r3,r16
 800758c:	dcc01dc5 	stb	r19,119(sp)
 8007590:	d8c02b15 	stw	r3,172(sp)
 8007594:	003cc606 	br	80068b0 <___vfprintf_internal_r+0x75c>
 8007598:	d8803317 	ldw	r2,204(sp)
 800759c:	143fffc4 	addi	r16,r2,-1
 80075a0:	043f4d0e 	bge	zero,r16,80072d8 <___vfprintf_internal_r+0x1184>
 80075a4:	07000404 	movi	fp,16
 80075a8:	e400810e 	bge	fp,r16,80077b0 <___vfprintf_internal_r+0x165c>
 80075ac:	01420074 	movhi	r5,2049
 80075b0:	2954fc84 	addi	r5,r5,21490
 80075b4:	d9402c15 	stw	r5,176(sp)
 80075b8:	01c001c4 	movi	r7,7
 80075bc:	dcc02d17 	ldw	r19,180(sp)
 80075c0:	00000306 	br	80075d0 <___vfprintf_internal_r+0x147c>
 80075c4:	b5800204 	addi	r22,r22,8
 80075c8:	843ffc04 	addi	r16,r16,-16
 80075cc:	e4007b0e 	bge	fp,r16,80077bc <___vfprintf_internal_r+0x1668>
 80075d0:	18c00404 	addi	r3,r3,16
 80075d4:	8c400044 	addi	r17,r17,1
 80075d8:	b5000015 	stw	r20,0(r22)
 80075dc:	b7000115 	stw	fp,4(r22)
 80075e0:	d8c02015 	stw	r3,128(sp)
 80075e4:	dc401f15 	stw	r17,124(sp)
 80075e8:	3c7ff60e 	bge	r7,r17,80075c4 <___vfprintf_internal_r+0x1470>
 80075ec:	d9801e04 	addi	r6,sp,120
 80075f0:	b80b883a 	mov	r5,r23
 80075f4:	9809883a 	mov	r4,r19
 80075f8:	d9c03c15 	stw	r7,240(sp)
 80075fc:	800d8880 	call	800d888 <__sprint_r>
 8007600:	d9c03c17 	ldw	r7,240(sp)
 8007604:	103bd71e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 8007608:	d8c02017 	ldw	r3,128(sp)
 800760c:	dc401f17 	ldw	r17,124(sp)
 8007610:	dd800404 	addi	r22,sp,16
 8007614:	003fec06 	br	80075c8 <___vfprintf_internal_r+0x1474>
 8007618:	9080100c 	andi	r2,r18,64
 800761c:	d8002785 	stb	zero,158(sp)
 8007620:	10010e26 	beq	r2,zero,8007a5c <___vfprintf_internal_r+0x1908>
 8007624:	d9402e17 	ldw	r5,184(sp)
 8007628:	d8c02a17 	ldw	r3,168(sp)
 800762c:	002d883a 	mov	r22,zero
 8007630:	28800104 	addi	r2,r5,4
 8007634:	2cc0000b 	ldhu	r19,0(r5)
 8007638:	183fc90e 	bge	r3,zero,8007560 <___vfprintf_internal_r+0x140c>
 800763c:	d8802e15 	stw	r2,184(sp)
 8007640:	0039883a 	mov	fp,zero
 8007644:	9d84b03a 	or	r2,r19,r22
 8007648:	103c1e1e 	bne	r2,zero,80066c4 <___vfprintf_internal_r+0x570>
 800764c:	00800044 	movi	r2,1
 8007650:	003e6c06 	br	8007004 <___vfprintf_internal_r+0xeb0>
 8007654:	d9002d17 	ldw	r4,180(sp)
 8007658:	d9801e04 	addi	r6,sp,120
 800765c:	b80b883a 	mov	r5,r23
 8007660:	800d8880 	call	800d888 <__sprint_r>
 8007664:	103bbf1e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 8007668:	d8c02017 	ldw	r3,128(sp)
 800766c:	da000404 	addi	r8,sp,16
 8007670:	d9003217 	ldw	r4,200(sp)
 8007674:	d8802617 	ldw	r2,152(sp)
 8007678:	d9403317 	ldw	r5,204(sp)
 800767c:	8123883a 	add	r17,r16,r4
 8007680:	11400216 	blt	r2,r5,800768c <___vfprintf_internal_r+0x1538>
 8007684:	9100004c 	andi	r4,r18,1
 8007688:	20000d26 	beq	r4,zero,80076c0 <___vfprintf_internal_r+0x156c>
 800768c:	d9003717 	ldw	r4,220(sp)
 8007690:	d9403417 	ldw	r5,208(sp)
 8007694:	1907883a 	add	r3,r3,r4
 8007698:	d9001f17 	ldw	r4,124(sp)
 800769c:	41400015 	stw	r5,0(r8)
 80076a0:	d9403717 	ldw	r5,220(sp)
 80076a4:	21000044 	addi	r4,r4,1
 80076a8:	d8c02015 	stw	r3,128(sp)
 80076ac:	41400115 	stw	r5,4(r8)
 80076b0:	d9001f15 	stw	r4,124(sp)
 80076b4:	014001c4 	movi	r5,7
 80076b8:	2901e816 	blt	r5,r4,8007e5c <___vfprintf_internal_r+0x1d08>
 80076bc:	42000204 	addi	r8,r8,8
 80076c0:	d9003317 	ldw	r4,204(sp)
 80076c4:	8121883a 	add	r16,r16,r4
 80076c8:	2085c83a 	sub	r2,r4,r2
 80076cc:	8461c83a 	sub	r16,r16,r17
 80076d0:	1400010e 	bge	r2,r16,80076d8 <___vfprintf_internal_r+0x1584>
 80076d4:	1021883a 	mov	r16,r2
 80076d8:	04000a0e 	bge	zero,r16,8007704 <___vfprintf_internal_r+0x15b0>
 80076dc:	d9001f17 	ldw	r4,124(sp)
 80076e0:	1c07883a 	add	r3,r3,r16
 80076e4:	44400015 	stw	r17,0(r8)
 80076e8:	21000044 	addi	r4,r4,1
 80076ec:	44000115 	stw	r16,4(r8)
 80076f0:	d8c02015 	stw	r3,128(sp)
 80076f4:	d9001f15 	stw	r4,124(sp)
 80076f8:	014001c4 	movi	r5,7
 80076fc:	2901fb16 	blt	r5,r4,8007eec <___vfprintf_internal_r+0x1d98>
 8007700:	42000204 	addi	r8,r8,8
 8007704:	8001f716 	blt	r16,zero,8007ee4 <___vfprintf_internal_r+0x1d90>
 8007708:	1421c83a 	sub	r16,r2,r16
 800770c:	043d160e 	bge	zero,r16,8006b68 <___vfprintf_internal_r+0xa14>
 8007710:	04400404 	movi	r17,16
 8007714:	d8801f17 	ldw	r2,124(sp)
 8007718:	8c3efb0e 	bge	r17,r16,8007308 <___vfprintf_internal_r+0x11b4>
 800771c:	01420074 	movhi	r5,2049
 8007720:	2954fc84 	addi	r5,r5,21490
 8007724:	d9402c15 	stw	r5,176(sp)
 8007728:	058001c4 	movi	r22,7
 800772c:	dcc02d17 	ldw	r19,180(sp)
 8007730:	00000306 	br	8007740 <___vfprintf_internal_r+0x15ec>
 8007734:	42000204 	addi	r8,r8,8
 8007738:	843ffc04 	addi	r16,r16,-16
 800773c:	8c3ef50e 	bge	r17,r16,8007314 <___vfprintf_internal_r+0x11c0>
 8007740:	18c00404 	addi	r3,r3,16
 8007744:	10800044 	addi	r2,r2,1
 8007748:	45000015 	stw	r20,0(r8)
 800774c:	44400115 	stw	r17,4(r8)
 8007750:	d8c02015 	stw	r3,128(sp)
 8007754:	d8801f15 	stw	r2,124(sp)
 8007758:	b0bff60e 	bge	r22,r2,8007734 <___vfprintf_internal_r+0x15e0>
 800775c:	d9801e04 	addi	r6,sp,120
 8007760:	b80b883a 	mov	r5,r23
 8007764:	9809883a 	mov	r4,r19
 8007768:	800d8880 	call	800d888 <__sprint_r>
 800776c:	103b7d1e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 8007770:	d8c02017 	ldw	r3,128(sp)
 8007774:	d8801f17 	ldw	r2,124(sp)
 8007778:	da000404 	addi	r8,sp,16
 800777c:	003fee06 	br	8007738 <___vfprintf_internal_r+0x15e4>
 8007780:	9088703a 	and	r4,r18,r2
 8007784:	203eab1e 	bne	r4,zero,8007234 <___vfprintf_internal_r+0x10e0>
 8007788:	dc401f17 	ldw	r17,124(sp)
 800778c:	40800115 	stw	r2,4(r8)
 8007790:	44000015 	stw	r16,0(r8)
 8007794:	8c400044 	addi	r17,r17,1
 8007798:	d8c02015 	stw	r3,128(sp)
 800779c:	dc401f15 	stw	r17,124(sp)
 80077a0:	008001c4 	movi	r2,7
 80077a4:	14400e16 	blt	r2,r17,80077e0 <___vfprintf_internal_r+0x168c>
 80077a8:	45800204 	addi	r22,r8,8
 80077ac:	003eca06 	br	80072d8 <___vfprintf_internal_r+0x1184>
 80077b0:	01020074 	movhi	r4,2049
 80077b4:	2114fc84 	addi	r4,r4,21490
 80077b8:	d9002c15 	stw	r4,176(sp)
 80077bc:	d8802c17 	ldw	r2,176(sp)
 80077c0:	1c07883a 	add	r3,r3,r16
 80077c4:	8c400044 	addi	r17,r17,1
 80077c8:	b0800015 	stw	r2,0(r22)
 80077cc:	b4000115 	stw	r16,4(r22)
 80077d0:	d8c02015 	stw	r3,128(sp)
 80077d4:	dc401f15 	stw	r17,124(sp)
 80077d8:	008001c4 	movi	r2,7
 80077dc:	147ebd0e 	bge	r2,r17,80072d4 <___vfprintf_internal_r+0x1180>
 80077e0:	d9002d17 	ldw	r4,180(sp)
 80077e4:	d9801e04 	addi	r6,sp,120
 80077e8:	b80b883a 	mov	r5,r23
 80077ec:	800d8880 	call	800d888 <__sprint_r>
 80077f0:	103b5c1e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 80077f4:	d8c02017 	ldw	r3,128(sp)
 80077f8:	dc401f17 	ldw	r17,124(sp)
 80077fc:	dd800404 	addi	r22,sp,16
 8007800:	003eb506 	br	80072d8 <___vfprintf_internal_r+0x1184>
 8007804:	d9002d17 	ldw	r4,180(sp)
 8007808:	d9801e04 	addi	r6,sp,120
 800780c:	b80b883a 	mov	r5,r23
 8007810:	800d8880 	call	800d888 <__sprint_r>
 8007814:	103b531e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 8007818:	d8c02017 	ldw	r3,128(sp)
 800781c:	dc401f17 	ldw	r17,124(sp)
 8007820:	da000404 	addi	r8,sp,16
 8007824:	003e8d06 	br	800725c <___vfprintf_internal_r+0x1108>
 8007828:	d9002d17 	ldw	r4,180(sp)
 800782c:	d9801e04 	addi	r6,sp,120
 8007830:	b80b883a 	mov	r5,r23
 8007834:	800d8880 	call	800d888 <__sprint_r>
 8007838:	103b4a1e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 800783c:	d8c02017 	ldw	r3,128(sp)
 8007840:	dc401f17 	ldw	r17,124(sp)
 8007844:	dd800404 	addi	r22,sp,16
 8007848:	003e8f06 	br	8007288 <___vfprintf_internal_r+0x1134>
 800784c:	0027883a 	mov	r19,zero
 8007850:	003f4a06 	br	800757c <___vfprintf_internal_r+0x1428>
 8007854:	d9002d17 	ldw	r4,180(sp)
 8007858:	d9801e04 	addi	r6,sp,120
 800785c:	b80b883a 	mov	r5,r23
 8007860:	800d8880 	call	800d888 <__sprint_r>
 8007864:	103b3f1e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 8007868:	d8c02017 	ldw	r3,128(sp)
 800786c:	da000404 	addi	r8,sp,16
 8007870:	003c7b06 	br	8006a60 <___vfprintf_internal_r+0x90c>
 8007874:	d9402a17 	ldw	r5,168(sp)
 8007878:	04e7c83a 	sub	r19,zero,r19
 800787c:	07000b44 	movi	fp,45
 8007880:	9804c03a 	cmpne	r2,r19,zero
 8007884:	05adc83a 	sub	r22,zero,r22
 8007888:	df002785 	stb	fp,158(sp)
 800788c:	b0adc83a 	sub	r22,r22,r2
 8007890:	28017b16 	blt	r5,zero,8007e80 <___vfprintf_internal_r+0x1d2c>
 8007894:	00bfdfc4 	movi	r2,-129
 8007898:	90a4703a 	and	r18,r18,r2
 800789c:	003b8906 	br	80066c4 <___vfprintf_internal_r+0x570>
 80078a0:	d9003617 	ldw	r4,216(sp)
 80078a4:	d9403817 	ldw	r5,224(sp)
 80078a8:	da003d15 	stw	r8,244(sp)
 80078ac:	800d4ac0 	call	800d4ac <__fpclassifyd>
 80078b0:	da003d17 	ldw	r8,244(sp)
 80078b4:	1000f026 	beq	r2,zero,8007c78 <___vfprintf_internal_r+0x1b24>
 80078b8:	d9002a17 	ldw	r4,168(sp)
 80078bc:	05bff7c4 	movi	r22,-33
 80078c0:	00bfffc4 	movi	r2,-1
 80078c4:	8dac703a 	and	r22,r17,r22
 80078c8:	20820026 	beq	r4,r2,80080cc <___vfprintf_internal_r+0x1f78>
 80078cc:	008011c4 	movi	r2,71
 80078d0:	b081f726 	beq	r22,r2,80080b0 <___vfprintf_internal_r+0x1f5c>
 80078d4:	d9003817 	ldw	r4,224(sp)
 80078d8:	90c04014 	ori	r3,r18,256
 80078dc:	d8c02c15 	stw	r3,176(sp)
 80078e0:	20021516 	blt	r4,zero,8008138 <___vfprintf_internal_r+0x1fe4>
 80078e4:	dcc03817 	ldw	r19,224(sp)
 80078e8:	d8002905 	stb	zero,164(sp)
 80078ec:	00801984 	movi	r2,102
 80078f0:	8881f926 	beq	r17,r2,80080d8 <___vfprintf_internal_r+0x1f84>
 80078f4:	00801184 	movi	r2,70
 80078f8:	88821c26 	beq	r17,r2,800816c <___vfprintf_internal_r+0x2018>
 80078fc:	00801144 	movi	r2,69
 8007900:	b081ef26 	beq	r22,r2,80080c0 <___vfprintf_internal_r+0x1f6c>
 8007904:	d8c02a17 	ldw	r3,168(sp)
 8007908:	d8802104 	addi	r2,sp,132
 800790c:	d8800315 	stw	r2,12(sp)
 8007910:	d9403617 	ldw	r5,216(sp)
 8007914:	d8802504 	addi	r2,sp,148
 8007918:	d9002d17 	ldw	r4,180(sp)
 800791c:	d8800215 	stw	r2,8(sp)
 8007920:	d8802604 	addi	r2,sp,152
 8007924:	d8c00015 	stw	r3,0(sp)
 8007928:	d8800115 	stw	r2,4(sp)
 800792c:	01c00084 	movi	r7,2
 8007930:	980d883a 	mov	r6,r19
 8007934:	d8c03c15 	stw	r3,240(sp)
 8007938:	da003d15 	stw	r8,244(sp)
 800793c:	80088840 	call	8008884 <_dtoa_r>
 8007940:	1021883a 	mov	r16,r2
 8007944:	008019c4 	movi	r2,103
 8007948:	d8c03c17 	ldw	r3,240(sp)
 800794c:	da003d17 	ldw	r8,244(sp)
 8007950:	88817126 	beq	r17,r2,8007f18 <___vfprintf_internal_r+0x1dc4>
 8007954:	008011c4 	movi	r2,71
 8007958:	88829126 	beq	r17,r2,80083a0 <___vfprintf_internal_r+0x224c>
 800795c:	80f9883a 	add	fp,r16,r3
 8007960:	d9003617 	ldw	r4,216(sp)
 8007964:	000d883a 	mov	r6,zero
 8007968:	000f883a 	mov	r7,zero
 800796c:	980b883a 	mov	r5,r19
 8007970:	da003d15 	stw	r8,244(sp)
 8007974:	80117c00 	call	80117c0 <__eqdf2>
 8007978:	da003d17 	ldw	r8,244(sp)
 800797c:	10018d26 	beq	r2,zero,8007fb4 <___vfprintf_internal_r+0x1e60>
 8007980:	d8802117 	ldw	r2,132(sp)
 8007984:	1700062e 	bgeu	r2,fp,80079a0 <___vfprintf_internal_r+0x184c>
 8007988:	01000c04 	movi	r4,48
 800798c:	10c00044 	addi	r3,r2,1
 8007990:	d8c02115 	stw	r3,132(sp)
 8007994:	11000005 	stb	r4,0(r2)
 8007998:	d8802117 	ldw	r2,132(sp)
 800799c:	173ffb36 	bltu	r2,fp,800798c <___vfprintf_internal_r+0x1838>
 80079a0:	1405c83a 	sub	r2,r2,r16
 80079a4:	d8803315 	stw	r2,204(sp)
 80079a8:	008011c4 	movi	r2,71
 80079ac:	b0817626 	beq	r22,r2,8007f88 <___vfprintf_internal_r+0x1e34>
 80079b0:	00801944 	movi	r2,101
 80079b4:	1442800e 	bge	r2,r17,80083b8 <___vfprintf_internal_r+0x2264>
 80079b8:	d8c02617 	ldw	r3,152(sp)
 80079bc:	00801984 	movi	r2,102
 80079c0:	d8c03215 	stw	r3,200(sp)
 80079c4:	8881fe26 	beq	r17,r2,80081c0 <___vfprintf_internal_r+0x206c>
 80079c8:	d8c03217 	ldw	r3,200(sp)
 80079cc:	d9003317 	ldw	r4,204(sp)
 80079d0:	1901dd16 	blt	r3,r4,8008148 <___vfprintf_internal_r+0x1ff4>
 80079d4:	9480004c 	andi	r18,r18,1
 80079d8:	90022b1e 	bne	r18,zero,8008288 <___vfprintf_internal_r+0x2134>
 80079dc:	1805883a 	mov	r2,r3
 80079e0:	18028316 	blt	r3,zero,80083f0 <___vfprintf_internal_r+0x229c>
 80079e4:	d8c03217 	ldw	r3,200(sp)
 80079e8:	044019c4 	movi	r17,103
 80079ec:	d8c02b15 	stw	r3,172(sp)
 80079f0:	df002907 	ldb	fp,164(sp)
 80079f4:	e001531e 	bne	fp,zero,8007f44 <___vfprintf_internal_r+0x1df0>
 80079f8:	df002783 	ldbu	fp,158(sp)
 80079fc:	d8802915 	stw	r2,164(sp)
 8007a00:	dc802c17 	ldw	r18,176(sp)
 8007a04:	d8002a15 	stw	zero,168(sp)
 8007a08:	003baf06 	br	80068c8 <___vfprintf_internal_r+0x774>
 8007a0c:	d8c02e17 	ldw	r3,184(sp)
 8007a10:	d9002e17 	ldw	r4,184(sp)
 8007a14:	d9402e17 	ldw	r5,184(sp)
 8007a18:	18c00017 	ldw	r3,0(r3)
 8007a1c:	21000117 	ldw	r4,4(r4)
 8007a20:	29400204 	addi	r5,r5,8
 8007a24:	d8c03615 	stw	r3,216(sp)
 8007a28:	d9003815 	stw	r4,224(sp)
 8007a2c:	d9402e15 	stw	r5,184(sp)
 8007a30:	003b5006 	br	8006774 <___vfprintf_internal_r+0x620>
 8007a34:	ac400007 	ldb	r17,0(r21)
 8007a38:	003a2806 	br	80062dc <___vfprintf_internal_r+0x188>
 8007a3c:	9080100c 	andi	r2,r18,64
 8007a40:	1000a826 	beq	r2,zero,8007ce4 <___vfprintf_internal_r+0x1b90>
 8007a44:	d8c02e17 	ldw	r3,184(sp)
 8007a48:	002d883a 	mov	r22,zero
 8007a4c:	1cc0000b 	ldhu	r19,0(r3)
 8007a50:	18c00104 	addi	r3,r3,4
 8007a54:	d8c02e15 	stw	r3,184(sp)
 8007a58:	003caf06 	br	8006d18 <___vfprintf_internal_r+0xbc4>
 8007a5c:	d9002e17 	ldw	r4,184(sp)
 8007a60:	d9402a17 	ldw	r5,168(sp)
 8007a64:	002d883a 	mov	r22,zero
 8007a68:	20800104 	addi	r2,r4,4
 8007a6c:	24c00017 	ldw	r19,0(r4)
 8007a70:	283ebb0e 	bge	r5,zero,8007560 <___vfprintf_internal_r+0x140c>
 8007a74:	003ef106 	br	800763c <___vfprintf_internal_r+0x14e8>
 8007a78:	9080040c 	andi	r2,r18,16
 8007a7c:	1000921e 	bne	r2,zero,8007cc8 <___vfprintf_internal_r+0x1b74>
 8007a80:	9480100c 	andi	r18,r18,64
 8007a84:	90013926 	beq	r18,zero,8007f6c <___vfprintf_internal_r+0x1e18>
 8007a88:	d9402e17 	ldw	r5,184(sp)
 8007a8c:	d8c02f17 	ldw	r3,188(sp)
 8007a90:	28800017 	ldw	r2,0(r5)
 8007a94:	29400104 	addi	r5,r5,4
 8007a98:	d9402e15 	stw	r5,184(sp)
 8007a9c:	10c0000d 	sth	r3,0(r2)
 8007aa0:	0039e406 	br	8006234 <___vfprintf_internal_r+0xe0>
 8007aa4:	9080100c 	andi	r2,r18,64
 8007aa8:	10008026 	beq	r2,zero,8007cac <___vfprintf_internal_r+0x1b58>
 8007aac:	d8802e17 	ldw	r2,184(sp)
 8007ab0:	14c0000f 	ldh	r19,0(r2)
 8007ab4:	10800104 	addi	r2,r2,4
 8007ab8:	d8802e15 	stw	r2,184(sp)
 8007abc:	982dd7fa 	srai	r22,r19,31
 8007ac0:	b005883a 	mov	r2,r22
 8007ac4:	003af706 	br	80066a4 <___vfprintf_internal_r+0x550>
 8007ac8:	9080100c 	andi	r2,r18,64
 8007acc:	d8002785 	stb	zero,158(sp)
 8007ad0:	10008a1e 	bne	r2,zero,8007cfc <___vfprintf_internal_r+0x1ba8>
 8007ad4:	d9002e17 	ldw	r4,184(sp)
 8007ad8:	d9402a17 	ldw	r5,168(sp)
 8007adc:	002d883a 	mov	r22,zero
 8007ae0:	20800104 	addi	r2,r4,4
 8007ae4:	24c00017 	ldw	r19,0(r4)
 8007ae8:	283e4b0e 	bge	r5,zero,8007418 <___vfprintf_internal_r+0x12c4>
 8007aec:	9d86b03a 	or	r3,r19,r22
 8007af0:	d8802e15 	stw	r2,184(sp)
 8007af4:	183e4c1e 	bne	r3,zero,8007428 <___vfprintf_internal_r+0x12d4>
 8007af8:	0039883a 	mov	fp,zero
 8007afc:	0005883a 	mov	r2,zero
 8007b00:	003d4006 	br	8007004 <___vfprintf_internal_r+0xeb0>
 8007b04:	01420074 	movhi	r5,2049
 8007b08:	2954fc84 	addi	r5,r5,21490
 8007b0c:	d9402c15 	stw	r5,176(sp)
 8007b10:	d9402c17 	ldw	r5,176(sp)
 8007b14:	1c47883a 	add	r3,r3,r17
 8007b18:	10800044 	addi	r2,r2,1
 8007b1c:	41400015 	stw	r5,0(r8)
 8007b20:	44400115 	stw	r17,4(r8)
 8007b24:	d8c02015 	stw	r3,128(sp)
 8007b28:	d8801f15 	stw	r2,124(sp)
 8007b2c:	010001c4 	movi	r4,7
 8007b30:	20bec816 	blt	r4,r2,8007654 <___vfprintf_internal_r+0x1500>
 8007b34:	42000204 	addi	r8,r8,8
 8007b38:	003ecd06 	br	8007670 <___vfprintf_internal_r+0x151c>
 8007b3c:	d9002a17 	ldw	r4,168(sp)
 8007b40:	d8002785 	stb	zero,158(sp)
 8007b44:	203d2d16 	blt	r4,zero,8006ffc <___vfprintf_internal_r+0xea8>
 8007b48:	00bfdfc4 	movi	r2,-129
 8007b4c:	90a4703a 	and	r18,r18,r2
 8007b50:	003a6106 	br	80064d8 <___vfprintf_internal_r+0x384>
 8007b54:	01020074 	movhi	r4,2049
 8007b58:	2114fc84 	addi	r4,r4,21490
 8007b5c:	d9002c15 	stw	r4,176(sp)
 8007b60:	003bea06 	br	8006b0c <___vfprintf_internal_r+0x9b8>
 8007b64:	d9002d17 	ldw	r4,180(sp)
 8007b68:	d9801e04 	addi	r6,sp,120
 8007b6c:	b80b883a 	mov	r5,r23
 8007b70:	800d8880 	call	800d888 <__sprint_r>
 8007b74:	103a7b1e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 8007b78:	d8c02017 	ldw	r3,128(sp)
 8007b7c:	da000404 	addi	r8,sp,16
 8007b80:	003d4106 	br	8007088 <___vfprintf_internal_r+0xf34>
 8007b84:	d8801f17 	ldw	r2,124(sp)
 8007b88:	01420074 	movhi	r5,2049
 8007b8c:	01000044 	movi	r4,1
 8007b90:	18c00044 	addi	r3,r3,1
 8007b94:	10800044 	addi	r2,r2,1
 8007b98:	2954fc04 	addi	r5,r5,21488
 8007b9c:	41000115 	stw	r4,4(r8)
 8007ba0:	41400015 	stw	r5,0(r8)
 8007ba4:	d8c02015 	stw	r3,128(sp)
 8007ba8:	d8801f15 	stw	r2,124(sp)
 8007bac:	010001c4 	movi	r4,7
 8007bb0:	20805c16 	blt	r4,r2,8007d24 <___vfprintf_internal_r+0x1bd0>
 8007bb4:	42000204 	addi	r8,r8,8
 8007bb8:	8800041e 	bne	r17,zero,8007bcc <___vfprintf_internal_r+0x1a78>
 8007bbc:	d8803317 	ldw	r2,204(sp)
 8007bc0:	1000021e 	bne	r2,zero,8007bcc <___vfprintf_internal_r+0x1a78>
 8007bc4:	9080004c 	andi	r2,r18,1
 8007bc8:	103be726 	beq	r2,zero,8006b68 <___vfprintf_internal_r+0xa14>
 8007bcc:	d9003717 	ldw	r4,220(sp)
 8007bd0:	d8801f17 	ldw	r2,124(sp)
 8007bd4:	d9403417 	ldw	r5,208(sp)
 8007bd8:	20c7883a 	add	r3,r4,r3
 8007bdc:	10800044 	addi	r2,r2,1
 8007be0:	41000115 	stw	r4,4(r8)
 8007be4:	41400015 	stw	r5,0(r8)
 8007be8:	d8c02015 	stw	r3,128(sp)
 8007bec:	d8801f15 	stw	r2,124(sp)
 8007bf0:	010001c4 	movi	r4,7
 8007bf4:	20812116 	blt	r4,r2,800807c <___vfprintf_internal_r+0x1f28>
 8007bf8:	42000204 	addi	r8,r8,8
 8007bfc:	0463c83a 	sub	r17,zero,r17
 8007c00:	0440730e 	bge	zero,r17,8007dd0 <___vfprintf_internal_r+0x1c7c>
 8007c04:	05800404 	movi	r22,16
 8007c08:	b440860e 	bge	r22,r17,8007e24 <___vfprintf_internal_r+0x1cd0>
 8007c0c:	01420074 	movhi	r5,2049
 8007c10:	2954fc84 	addi	r5,r5,21490
 8007c14:	d9402c15 	stw	r5,176(sp)
 8007c18:	070001c4 	movi	fp,7
 8007c1c:	dcc02d17 	ldw	r19,180(sp)
 8007c20:	00000306 	br	8007c30 <___vfprintf_internal_r+0x1adc>
 8007c24:	42000204 	addi	r8,r8,8
 8007c28:	8c7ffc04 	addi	r17,r17,-16
 8007c2c:	b440800e 	bge	r22,r17,8007e30 <___vfprintf_internal_r+0x1cdc>
 8007c30:	18c00404 	addi	r3,r3,16
 8007c34:	10800044 	addi	r2,r2,1
 8007c38:	45000015 	stw	r20,0(r8)
 8007c3c:	45800115 	stw	r22,4(r8)
 8007c40:	d8c02015 	stw	r3,128(sp)
 8007c44:	d8801f15 	stw	r2,124(sp)
 8007c48:	e0bff60e 	bge	fp,r2,8007c24 <___vfprintf_internal_r+0x1ad0>
 8007c4c:	d9801e04 	addi	r6,sp,120
 8007c50:	b80b883a 	mov	r5,r23
 8007c54:	9809883a 	mov	r4,r19
 8007c58:	800d8880 	call	800d888 <__sprint_r>
 8007c5c:	103a411e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 8007c60:	d8c02017 	ldw	r3,128(sp)
 8007c64:	d8801f17 	ldw	r2,124(sp)
 8007c68:	da000404 	addi	r8,sp,16
 8007c6c:	003fee06 	br	8007c28 <___vfprintf_internal_r+0x1ad4>
 8007c70:	00bfffc4 	movi	r2,-1
 8007c74:	003a3f06 	br	8006574 <___vfprintf_internal_r+0x420>
 8007c78:	008011c4 	movi	r2,71
 8007c7c:	1440b816 	blt	r2,r17,8007f60 <___vfprintf_internal_r+0x1e0c>
 8007c80:	04020074 	movhi	r16,2049
 8007c84:	8414ee04 	addi	r16,r16,21432
 8007c88:	00c000c4 	movi	r3,3
 8007c8c:	00bfdfc4 	movi	r2,-129
 8007c90:	d8c02915 	stw	r3,164(sp)
 8007c94:	90a4703a 	and	r18,r18,r2
 8007c98:	df002783 	ldbu	fp,158(sp)
 8007c9c:	d8c02b15 	stw	r3,172(sp)
 8007ca0:	d8002a15 	stw	zero,168(sp)
 8007ca4:	d8003215 	stw	zero,200(sp)
 8007ca8:	003b0706 	br	80068c8 <___vfprintf_internal_r+0x774>
 8007cac:	d8c02e17 	ldw	r3,184(sp)
 8007cb0:	1cc00017 	ldw	r19,0(r3)
 8007cb4:	18c00104 	addi	r3,r3,4
 8007cb8:	d8c02e15 	stw	r3,184(sp)
 8007cbc:	982dd7fa 	srai	r22,r19,31
 8007cc0:	b005883a 	mov	r2,r22
 8007cc4:	003a7706 	br	80066a4 <___vfprintf_internal_r+0x550>
 8007cc8:	d8c02e17 	ldw	r3,184(sp)
 8007ccc:	d9002f17 	ldw	r4,188(sp)
 8007cd0:	18800017 	ldw	r2,0(r3)
 8007cd4:	18c00104 	addi	r3,r3,4
 8007cd8:	d8c02e15 	stw	r3,184(sp)
 8007cdc:	11000015 	stw	r4,0(r2)
 8007ce0:	00395406 	br	8006234 <___vfprintf_internal_r+0xe0>
 8007ce4:	d9002e17 	ldw	r4,184(sp)
 8007ce8:	002d883a 	mov	r22,zero
 8007cec:	24c00017 	ldw	r19,0(r4)
 8007cf0:	21000104 	addi	r4,r4,4
 8007cf4:	d9002e15 	stw	r4,184(sp)
 8007cf8:	003c0706 	br	8006d18 <___vfprintf_internal_r+0xbc4>
 8007cfc:	d9402e17 	ldw	r5,184(sp)
 8007d00:	d8c02a17 	ldw	r3,168(sp)
 8007d04:	002d883a 	mov	r22,zero
 8007d08:	28800104 	addi	r2,r5,4
 8007d0c:	2cc0000b 	ldhu	r19,0(r5)
 8007d10:	183dc10e 	bge	r3,zero,8007418 <___vfprintf_internal_r+0x12c4>
 8007d14:	003f7506 	br	8007aec <___vfprintf_internal_r+0x1998>
 8007d18:	04020074 	movhi	r16,2049
 8007d1c:	8414ec04 	addi	r16,r16,21424
 8007d20:	003aa706 	br	80067c0 <___vfprintf_internal_r+0x66c>
 8007d24:	d9002d17 	ldw	r4,180(sp)
 8007d28:	d9801e04 	addi	r6,sp,120
 8007d2c:	b80b883a 	mov	r5,r23
 8007d30:	800d8880 	call	800d888 <__sprint_r>
 8007d34:	103a0b1e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 8007d38:	dc402617 	ldw	r17,152(sp)
 8007d3c:	d8c02017 	ldw	r3,128(sp)
 8007d40:	da000404 	addi	r8,sp,16
 8007d44:	003f9c06 	br	8007bb8 <___vfprintf_internal_r+0x1a64>
 8007d48:	ac400043 	ldbu	r17,1(r21)
 8007d4c:	84000814 	ori	r16,r16,32
 8007d50:	ad400044 	addi	r21,r21,1
 8007d54:	8c403fcc 	andi	r17,r17,255
 8007d58:	8c40201c 	xori	r17,r17,128
 8007d5c:	8c7fe004 	addi	r17,r17,-128
 8007d60:	00395e06 	br	80062dc <___vfprintf_internal_r+0x188>
 8007d64:	d8c02e15 	stw	r3,184(sp)
 8007d68:	0039883a 	mov	fp,zero
 8007d6c:	003e3506 	br	8007644 <___vfprintf_internal_r+0x14f0>
 8007d70:	d9002d17 	ldw	r4,180(sp)
 8007d74:	d9801e04 	addi	r6,sp,120
 8007d78:	b80b883a 	mov	r5,r23
 8007d7c:	800d8880 	call	800d888 <__sprint_r>
 8007d80:	1039f81e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 8007d84:	d8c02017 	ldw	r3,128(sp)
 8007d88:	da000404 	addi	r8,sp,16
 8007d8c:	003cd006 	br	80070d0 <___vfprintf_internal_r+0xf7c>
 8007d90:	8009883a 	mov	r4,r16
 8007d94:	df003d15 	stw	fp,244(sp)
 8007d98:	8005ea80 	call	8005ea8 <strlen>
 8007d9c:	d8802b15 	stw	r2,172(sp)
 8007da0:	da003d17 	ldw	r8,244(sp)
 8007da4:	103c200e 	bge	r2,zero,8006e28 <___vfprintf_internal_r+0xcd4>
 8007da8:	0005883a 	mov	r2,zero
 8007dac:	003c1e06 	br	8006e28 <___vfprintf_internal_r+0xcd4>
 8007db0:	d9002d17 	ldw	r4,180(sp)
 8007db4:	d9801e04 	addi	r6,sp,120
 8007db8:	b80b883a 	mov	r5,r23
 8007dbc:	800d8880 	call	800d888 <__sprint_r>
 8007dc0:	1039e81e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 8007dc4:	d8c02017 	ldw	r3,128(sp)
 8007dc8:	d8801f17 	ldw	r2,124(sp)
 8007dcc:	da000404 	addi	r8,sp,16
 8007dd0:	d9403317 	ldw	r5,204(sp)
 8007dd4:	10800044 	addi	r2,r2,1
 8007dd8:	44000015 	stw	r16,0(r8)
 8007ddc:	28c7883a 	add	r3,r5,r3
 8007de0:	003b5b06 	br	8006b50 <___vfprintf_internal_r+0x9fc>
 8007de4:	01020074 	movhi	r4,2049
 8007de8:	21150084 	addi	r4,r4,21506
 8007dec:	d9003515 	stw	r4,212(sp)
 8007df0:	003af206 	br	80069bc <___vfprintf_internal_r+0x868>
 8007df4:	013fffc4 	movi	r4,-1
 8007df8:	003a0806 	br	800661c <___vfprintf_internal_r+0x4c8>
 8007dfc:	0023883a 	mov	r17,zero
 8007e00:	003d9d06 	br	8007478 <___vfprintf_internal_r+0x1324>
 8007e04:	d9002d17 	ldw	r4,180(sp)
 8007e08:	d9801e04 	addi	r6,sp,120
 8007e0c:	b80b883a 	mov	r5,r23
 8007e10:	800d8880 	call	800d888 <__sprint_r>
 8007e14:	1039d31e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 8007e18:	d8c02017 	ldw	r3,128(sp)
 8007e1c:	da000404 	addi	r8,sp,16
 8007e20:	003d9406 	br	8007474 <___vfprintf_internal_r+0x1320>
 8007e24:	01020074 	movhi	r4,2049
 8007e28:	2114fc84 	addi	r4,r4,21490
 8007e2c:	d9002c15 	stw	r4,176(sp)
 8007e30:	d9002c17 	ldw	r4,176(sp)
 8007e34:	1c47883a 	add	r3,r3,r17
 8007e38:	10800044 	addi	r2,r2,1
 8007e3c:	41000015 	stw	r4,0(r8)
 8007e40:	44400115 	stw	r17,4(r8)
 8007e44:	d8c02015 	stw	r3,128(sp)
 8007e48:	d8801f15 	stw	r2,124(sp)
 8007e4c:	010001c4 	movi	r4,7
 8007e50:	20bfd716 	blt	r4,r2,8007db0 <___vfprintf_internal_r+0x1c5c>
 8007e54:	42000204 	addi	r8,r8,8
 8007e58:	003fdd06 	br	8007dd0 <___vfprintf_internal_r+0x1c7c>
 8007e5c:	d9002d17 	ldw	r4,180(sp)
 8007e60:	d9801e04 	addi	r6,sp,120
 8007e64:	b80b883a 	mov	r5,r23
 8007e68:	800d8880 	call	800d888 <__sprint_r>
 8007e6c:	1039bd1e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 8007e70:	d8802617 	ldw	r2,152(sp)
 8007e74:	d8c02017 	ldw	r3,128(sp)
 8007e78:	da000404 	addi	r8,sp,16
 8007e7c:	003e1006 	br	80076c0 <___vfprintf_internal_r+0x156c>
 8007e80:	00800044 	movi	r2,1
 8007e84:	10803fcc 	andi	r2,r2,255
 8007e88:	00c00044 	movi	r3,1
 8007e8c:	10fa0d26 	beq	r2,r3,80066c4 <___vfprintf_internal_r+0x570>
 8007e90:	00c00084 	movi	r3,2
 8007e94:	10fbaf26 	beq	r2,r3,8006d54 <___vfprintf_internal_r+0xc00>
 8007e98:	003a6d06 	br	8006850 <___vfprintf_internal_r+0x6fc>
 8007e9c:	01020074 	movhi	r4,2049
 8007ea0:	21150084 	addi	r4,r4,21506
 8007ea4:	d9003515 	stw	r4,212(sp)
 8007ea8:	003b5406 	br	8006bfc <___vfprintf_internal_r+0xaa8>
 8007eac:	d8802a17 	ldw	r2,168(sp)
 8007eb0:	00c00184 	movi	r3,6
 8007eb4:	1880012e 	bgeu	r3,r2,8007ebc <___vfprintf_internal_r+0x1d68>
 8007eb8:	1805883a 	mov	r2,r3
 8007ebc:	d8802b15 	stw	r2,172(sp)
 8007ec0:	1000ef16 	blt	r2,zero,8008280 <___vfprintf_internal_r+0x212c>
 8007ec4:	04020074 	movhi	r16,2049
 8007ec8:	d8802915 	stw	r2,164(sp)
 8007ecc:	dcc02e15 	stw	r19,184(sp)
 8007ed0:	d8002a15 	stw	zero,168(sp)
 8007ed4:	d8003215 	stw	zero,200(sp)
 8007ed8:	8414fa04 	addi	r16,r16,21480
 8007edc:	0039883a 	mov	fp,zero
 8007ee0:	003a8006 	br	80068e4 <___vfprintf_internal_r+0x790>
 8007ee4:	0021883a 	mov	r16,zero
 8007ee8:	003e0706 	br	8007708 <___vfprintf_internal_r+0x15b4>
 8007eec:	d9002d17 	ldw	r4,180(sp)
 8007ef0:	d9801e04 	addi	r6,sp,120
 8007ef4:	b80b883a 	mov	r5,r23
 8007ef8:	800d8880 	call	800d888 <__sprint_r>
 8007efc:	1039991e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 8007f00:	d8802617 	ldw	r2,152(sp)
 8007f04:	d9403317 	ldw	r5,204(sp)
 8007f08:	d8c02017 	ldw	r3,128(sp)
 8007f0c:	da000404 	addi	r8,sp,16
 8007f10:	2885c83a 	sub	r2,r5,r2
 8007f14:	003dfb06 	br	8007704 <___vfprintf_internal_r+0x15b0>
 8007f18:	9080004c 	andi	r2,r18,1
 8007f1c:	103e8f1e 	bne	r2,zero,800795c <___vfprintf_internal_r+0x1808>
 8007f20:	d8802117 	ldw	r2,132(sp)
 8007f24:	003e9e06 	br	80079a0 <___vfprintf_internal_r+0x184c>
 8007f28:	1025883a 	mov	r18,r2
 8007f2c:	0039883a 	mov	fp,zero
 8007f30:	00800084 	movi	r2,2
 8007f34:	003fd306 	br	8007e84 <___vfprintf_internal_r+0x1d30>
 8007f38:	07000b44 	movi	fp,45
 8007f3c:	df002785 	stb	fp,158(sp)
 8007f40:	003a1b06 	br	80067b0 <___vfprintf_internal_r+0x65c>
 8007f44:	00c00b44 	movi	r3,45
 8007f48:	d8c02785 	stb	r3,158(sp)
 8007f4c:	d8802915 	stw	r2,164(sp)
 8007f50:	dc802c17 	ldw	r18,176(sp)
 8007f54:	d8002a15 	stw	zero,168(sp)
 8007f58:	07000b44 	movi	fp,45
 8007f5c:	003a5e06 	br	80068d8 <___vfprintf_internal_r+0x784>
 8007f60:	04020074 	movhi	r16,2049
 8007f64:	8414ef04 	addi	r16,r16,21436
 8007f68:	003f4706 	br	8007c88 <___vfprintf_internal_r+0x1b34>
 8007f6c:	d9002e17 	ldw	r4,184(sp)
 8007f70:	d9402f17 	ldw	r5,188(sp)
 8007f74:	20800017 	ldw	r2,0(r4)
 8007f78:	21000104 	addi	r4,r4,4
 8007f7c:	d9002e15 	stw	r4,184(sp)
 8007f80:	11400015 	stw	r5,0(r2)
 8007f84:	0038ab06 	br	8006234 <___vfprintf_internal_r+0xe0>
 8007f88:	dd802617 	ldw	r22,152(sp)
 8007f8c:	00bfff44 	movi	r2,-3
 8007f90:	b0801c16 	blt	r22,r2,8008004 <___vfprintf_internal_r+0x1eb0>
 8007f94:	d9402a17 	ldw	r5,168(sp)
 8007f98:	2d801a16 	blt	r5,r22,8008004 <___vfprintf_internal_r+0x1eb0>
 8007f9c:	dd803215 	stw	r22,200(sp)
 8007fa0:	003e8906 	br	80079c8 <___vfprintf_internal_r+0x1874>
 8007fa4:	01020074 	movhi	r4,2049
 8007fa8:	2114fc84 	addi	r4,r4,21490
 8007fac:	d9002c15 	stw	r4,176(sp)
 8007fb0:	003c9106 	br	80071f8 <___vfprintf_internal_r+0x10a4>
 8007fb4:	e005883a 	mov	r2,fp
 8007fb8:	003e7906 	br	80079a0 <___vfprintf_internal_r+0x184c>
 8007fbc:	d9002a17 	ldw	r4,168(sp)
 8007fc0:	df002783 	ldbu	fp,158(sp)
 8007fc4:	dcc02e15 	stw	r19,184(sp)
 8007fc8:	d9002915 	stw	r4,164(sp)
 8007fcc:	d9002b15 	stw	r4,172(sp)
 8007fd0:	d8002a15 	stw	zero,168(sp)
 8007fd4:	d8003215 	stw	zero,200(sp)
 8007fd8:	003a3b06 	br	80068c8 <___vfprintf_internal_r+0x774>
 8007fdc:	9080004c 	andi	r2,r18,1
 8007fe0:	0039883a 	mov	fp,zero
 8007fe4:	10000426 	beq	r2,zero,8007ff8 <___vfprintf_internal_r+0x1ea4>
 8007fe8:	00800c04 	movi	r2,48
 8007fec:	dc001dc4 	addi	r16,sp,119
 8007ff0:	d8801dc5 	stb	r2,119(sp)
 8007ff4:	003b6406 	br	8006d88 <___vfprintf_internal_r+0xc34>
 8007ff8:	d8002b15 	stw	zero,172(sp)
 8007ffc:	dc001e04 	addi	r16,sp,120
 8008000:	003a2b06 	br	80068b0 <___vfprintf_internal_r+0x75c>
 8008004:	8c7fff84 	addi	r17,r17,-2
 8008008:	b5bfffc4 	addi	r22,r22,-1
 800800c:	dd802615 	stw	r22,152(sp)
 8008010:	dc4022c5 	stb	r17,139(sp)
 8008014:	b000bf16 	blt	r22,zero,8008314 <___vfprintf_internal_r+0x21c0>
 8008018:	00800ac4 	movi	r2,43
 800801c:	d8802305 	stb	r2,140(sp)
 8008020:	00800244 	movi	r2,9
 8008024:	15807016 	blt	r2,r22,80081e8 <___vfprintf_internal_r+0x2094>
 8008028:	00800c04 	movi	r2,48
 800802c:	b5800c04 	addi	r22,r22,48
 8008030:	d8802345 	stb	r2,141(sp)
 8008034:	dd802385 	stb	r22,142(sp)
 8008038:	d88023c4 	addi	r2,sp,143
 800803c:	df0022c4 	addi	fp,sp,139
 8008040:	d8c03317 	ldw	r3,204(sp)
 8008044:	1739c83a 	sub	fp,r2,fp
 8008048:	d9003317 	ldw	r4,204(sp)
 800804c:	e0c7883a 	add	r3,fp,r3
 8008050:	df003a15 	stw	fp,232(sp)
 8008054:	d8c02b15 	stw	r3,172(sp)
 8008058:	00800044 	movi	r2,1
 800805c:	1100b30e 	bge	r2,r4,800832c <___vfprintf_internal_r+0x21d8>
 8008060:	d8c02b17 	ldw	r3,172(sp)
 8008064:	18c00044 	addi	r3,r3,1
 8008068:	d8c02b15 	stw	r3,172(sp)
 800806c:	1805883a 	mov	r2,r3
 8008070:	1800ac16 	blt	r3,zero,8008324 <___vfprintf_internal_r+0x21d0>
 8008074:	d8003215 	stw	zero,200(sp)
 8008078:	003e5d06 	br	80079f0 <___vfprintf_internal_r+0x189c>
 800807c:	d9002d17 	ldw	r4,180(sp)
 8008080:	d9801e04 	addi	r6,sp,120
 8008084:	b80b883a 	mov	r5,r23
 8008088:	800d8880 	call	800d888 <__sprint_r>
 800808c:	1039351e 	bne	r2,zero,8006564 <___vfprintf_internal_r+0x410>
 8008090:	dc402617 	ldw	r17,152(sp)
 8008094:	d8c02017 	ldw	r3,128(sp)
 8008098:	d8801f17 	ldw	r2,124(sp)
 800809c:	da000404 	addi	r8,sp,16
 80080a0:	003ed606 	br	8007bfc <___vfprintf_internal_r+0x1aa8>
 80080a4:	182b883a 	mov	r21,r3
 80080a8:	d8002a15 	stw	zero,168(sp)
 80080ac:	00388c06 	br	80062e0 <___vfprintf_internal_r+0x18c>
 80080b0:	d8802a17 	ldw	r2,168(sp)
 80080b4:	103e071e 	bne	r2,zero,80078d4 <___vfprintf_internal_r+0x1780>
 80080b8:	dc002a15 	stw	r16,168(sp)
 80080bc:	003e0506 	br	80078d4 <___vfprintf_internal_r+0x1780>
 80080c0:	d9002a17 	ldw	r4,168(sp)
 80080c4:	20c00044 	addi	r3,r4,1
 80080c8:	003e0f06 	br	8007908 <___vfprintf_internal_r+0x17b4>
 80080cc:	01400184 	movi	r5,6
 80080d0:	d9402a15 	stw	r5,168(sp)
 80080d4:	003dff06 	br	80078d4 <___vfprintf_internal_r+0x1780>
 80080d8:	d8802104 	addi	r2,sp,132
 80080dc:	d8800315 	stw	r2,12(sp)
 80080e0:	d8802504 	addi	r2,sp,148
 80080e4:	d8800215 	stw	r2,8(sp)
 80080e8:	d8802604 	addi	r2,sp,152
 80080ec:	d8800115 	stw	r2,4(sp)
 80080f0:	d8802a17 	ldw	r2,168(sp)
 80080f4:	d9403617 	ldw	r5,216(sp)
 80080f8:	d9002d17 	ldw	r4,180(sp)
 80080fc:	d8800015 	stw	r2,0(sp)
 8008100:	01c000c4 	movi	r7,3
 8008104:	980d883a 	mov	r6,r19
 8008108:	da003d15 	stw	r8,244(sp)
 800810c:	80088840 	call	8008884 <_dtoa_r>
 8008110:	d8c02a17 	ldw	r3,168(sp)
 8008114:	da003d17 	ldw	r8,244(sp)
 8008118:	1021883a 	mov	r16,r2
 800811c:	10f9883a 	add	fp,r2,r3
 8008120:	81000007 	ldb	r4,0(r16)
 8008124:	00800c04 	movi	r2,48
 8008128:	20805e26 	beq	r4,r2,80082a4 <___vfprintf_internal_r+0x2150>
 800812c:	d8c02617 	ldw	r3,152(sp)
 8008130:	e0f9883a 	add	fp,fp,r3
 8008134:	003e0a06 	br	8007960 <___vfprintf_internal_r+0x180c>
 8008138:	00c00b44 	movi	r3,45
 800813c:	24e0003c 	xorhi	r19,r4,32768
 8008140:	d8c02905 	stb	r3,164(sp)
 8008144:	003de906 	br	80078ec <___vfprintf_internal_r+0x1798>
 8008148:	d8c03217 	ldw	r3,200(sp)
 800814c:	00c07a0e 	bge	zero,r3,8008338 <___vfprintf_internal_r+0x21e4>
 8008150:	00800044 	movi	r2,1
 8008154:	d9003317 	ldw	r4,204(sp)
 8008158:	1105883a 	add	r2,r2,r4
 800815c:	d8802b15 	stw	r2,172(sp)
 8008160:	10004e16 	blt	r2,zero,800829c <___vfprintf_internal_r+0x2148>
 8008164:	044019c4 	movi	r17,103
 8008168:	003e2106 	br	80079f0 <___vfprintf_internal_r+0x189c>
 800816c:	d9002a17 	ldw	r4,168(sp)
 8008170:	d8802104 	addi	r2,sp,132
 8008174:	d8800315 	stw	r2,12(sp)
 8008178:	d9000015 	stw	r4,0(sp)
 800817c:	d8802504 	addi	r2,sp,148
 8008180:	d9403617 	ldw	r5,216(sp)
 8008184:	d9002d17 	ldw	r4,180(sp)
 8008188:	d8800215 	stw	r2,8(sp)
 800818c:	d8802604 	addi	r2,sp,152
 8008190:	d8800115 	stw	r2,4(sp)
 8008194:	01c000c4 	movi	r7,3
 8008198:	980d883a 	mov	r6,r19
 800819c:	da003d15 	stw	r8,244(sp)
 80081a0:	80088840 	call	8008884 <_dtoa_r>
 80081a4:	d8c02a17 	ldw	r3,168(sp)
 80081a8:	da003d17 	ldw	r8,244(sp)
 80081ac:	1021883a 	mov	r16,r2
 80081b0:	00801184 	movi	r2,70
 80081b4:	80f9883a 	add	fp,r16,r3
 80081b8:	88bfd926 	beq	r17,r2,8008120 <___vfprintf_internal_r+0x1fcc>
 80081bc:	003de806 	br	8007960 <___vfprintf_internal_r+0x180c>
 80081c0:	d9002a17 	ldw	r4,168(sp)
 80081c4:	00c04d0e 	bge	zero,r3,80082fc <___vfprintf_internal_r+0x21a8>
 80081c8:	2000441e 	bne	r4,zero,80082dc <___vfprintf_internal_r+0x2188>
 80081cc:	9480004c 	andi	r18,r18,1
 80081d0:	9000421e 	bne	r18,zero,80082dc <___vfprintf_internal_r+0x2188>
 80081d4:	1805883a 	mov	r2,r3
 80081d8:	18006f16 	blt	r3,zero,8008398 <___vfprintf_internal_r+0x2244>
 80081dc:	d8c03217 	ldw	r3,200(sp)
 80081e0:	d8c02b15 	stw	r3,172(sp)
 80081e4:	003e0206 	br	80079f0 <___vfprintf_internal_r+0x189c>
 80081e8:	df0022c4 	addi	fp,sp,139
 80081ec:	dc002a15 	stw	r16,168(sp)
 80081f0:	4027883a 	mov	r19,r8
 80081f4:	e021883a 	mov	r16,fp
 80081f8:	b009883a 	mov	r4,r22
 80081fc:	01400284 	movi	r5,10
 8008200:	80104140 	call	8010414 <__modsi3>
 8008204:	10800c04 	addi	r2,r2,48
 8008208:	843fffc4 	addi	r16,r16,-1
 800820c:	b009883a 	mov	r4,r22
 8008210:	01400284 	movi	r5,10
 8008214:	80800005 	stb	r2,0(r16)
 8008218:	80103900 	call	8010390 <__divsi3>
 800821c:	102d883a 	mov	r22,r2
 8008220:	00800244 	movi	r2,9
 8008224:	15bff416 	blt	r2,r22,80081f8 <___vfprintf_internal_r+0x20a4>
 8008228:	9811883a 	mov	r8,r19
 800822c:	b0800c04 	addi	r2,r22,48
 8008230:	8027883a 	mov	r19,r16
 8008234:	997fffc4 	addi	r5,r19,-1
 8008238:	98bfffc5 	stb	r2,-1(r19)
 800823c:	dc002a17 	ldw	r16,168(sp)
 8008240:	2f006d2e 	bgeu	r5,fp,80083f8 <___vfprintf_internal_r+0x22a4>
 8008244:	d9c02384 	addi	r7,sp,142
 8008248:	3ccfc83a 	sub	r7,r7,r19
 800824c:	d9002344 	addi	r4,sp,141
 8008250:	e1cf883a 	add	r7,fp,r7
 8008254:	00000106 	br	800825c <___vfprintf_internal_r+0x2108>
 8008258:	28800003 	ldbu	r2,0(r5)
 800825c:	20800005 	stb	r2,0(r4)
 8008260:	21000044 	addi	r4,r4,1
 8008264:	29400044 	addi	r5,r5,1
 8008268:	393ffb1e 	bne	r7,r4,8008258 <___vfprintf_internal_r+0x2104>
 800826c:	d8802304 	addi	r2,sp,140
 8008270:	14c5c83a 	sub	r2,r2,r19
 8008274:	d8c02344 	addi	r3,sp,141
 8008278:	1885883a 	add	r2,r3,r2
 800827c:	003f7006 	br	8008040 <___vfprintf_internal_r+0x1eec>
 8008280:	0005883a 	mov	r2,zero
 8008284:	003f0f06 	br	8007ec4 <___vfprintf_internal_r+0x1d70>
 8008288:	d8c03217 	ldw	r3,200(sp)
 800828c:	18c00044 	addi	r3,r3,1
 8008290:	d8c02b15 	stw	r3,172(sp)
 8008294:	1805883a 	mov	r2,r3
 8008298:	183fb20e 	bge	r3,zero,8008164 <___vfprintf_internal_r+0x2010>
 800829c:	0005883a 	mov	r2,zero
 80082a0:	003fb006 	br	8008164 <___vfprintf_internal_r+0x2010>
 80082a4:	d9003617 	ldw	r4,216(sp)
 80082a8:	000d883a 	mov	r6,zero
 80082ac:	000f883a 	mov	r7,zero
 80082b0:	980b883a 	mov	r5,r19
 80082b4:	d8c03c15 	stw	r3,240(sp)
 80082b8:	da003d15 	stw	r8,244(sp)
 80082bc:	80117c00 	call	80117c0 <__eqdf2>
 80082c0:	d8c03c17 	ldw	r3,240(sp)
 80082c4:	da003d17 	ldw	r8,244(sp)
 80082c8:	103f9826 	beq	r2,zero,800812c <___vfprintf_internal_r+0x1fd8>
 80082cc:	00800044 	movi	r2,1
 80082d0:	10c7c83a 	sub	r3,r2,r3
 80082d4:	d8c02615 	stw	r3,152(sp)
 80082d8:	003f9506 	br	8008130 <___vfprintf_internal_r+0x1fdc>
 80082dc:	d9002a17 	ldw	r4,168(sp)
 80082e0:	d8c03217 	ldw	r3,200(sp)
 80082e4:	20800044 	addi	r2,r4,1
 80082e8:	1885883a 	add	r2,r3,r2
 80082ec:	d8802b15 	stw	r2,172(sp)
 80082f0:	103dbf0e 	bge	r2,zero,80079f0 <___vfprintf_internal_r+0x189c>
 80082f4:	0005883a 	mov	r2,zero
 80082f8:	003dbd06 	br	80079f0 <___vfprintf_internal_r+0x189c>
 80082fc:	2000201e 	bne	r4,zero,8008380 <___vfprintf_internal_r+0x222c>
 8008300:	9480004c 	andi	r18,r18,1
 8008304:	90001e1e 	bne	r18,zero,8008380 <___vfprintf_internal_r+0x222c>
 8008308:	00800044 	movi	r2,1
 800830c:	d8802b15 	stw	r2,172(sp)
 8008310:	003db706 	br	80079f0 <___vfprintf_internal_r+0x189c>
 8008314:	00800b44 	movi	r2,45
 8008318:	05adc83a 	sub	r22,zero,r22
 800831c:	d8802305 	stb	r2,140(sp)
 8008320:	003f3f06 	br	8008020 <___vfprintf_internal_r+0x1ecc>
 8008324:	0005883a 	mov	r2,zero
 8008328:	003f5206 	br	8008074 <___vfprintf_internal_r+0x1f20>
 800832c:	90a4703a 	and	r18,r18,r2
 8008330:	903f4e26 	beq	r18,zero,800806c <___vfprintf_internal_r+0x1f18>
 8008334:	003f4a06 	br	8008060 <___vfprintf_internal_r+0x1f0c>
 8008338:	00800084 	movi	r2,2
 800833c:	10c5c83a 	sub	r2,r2,r3
 8008340:	003f8406 	br	8008154 <___vfprintf_internal_r+0x2000>
 8008344:	d9402e17 	ldw	r5,184(sp)
 8008348:	d9002e17 	ldw	r4,184(sp)
 800834c:	ac400043 	ldbu	r17,1(r21)
 8008350:	29400017 	ldw	r5,0(r5)
 8008354:	20800104 	addi	r2,r4,4
 8008358:	d8802e15 	stw	r2,184(sp)
 800835c:	d9402a15 	stw	r5,168(sp)
 8008360:	182b883a 	mov	r21,r3
 8008364:	283e7b0e 	bge	r5,zero,8007d54 <___vfprintf_internal_r+0x1c00>
 8008368:	8c403fcc 	andi	r17,r17,255
 800836c:	017fffc4 	movi	r5,-1
 8008370:	8c40201c 	xori	r17,r17,128
 8008374:	d9402a15 	stw	r5,168(sp)
 8008378:	8c7fe004 	addi	r17,r17,-128
 800837c:	0037d706 	br	80062dc <___vfprintf_internal_r+0x188>
 8008380:	d8c02a17 	ldw	r3,168(sp)
 8008384:	18c00084 	addi	r3,r3,2
 8008388:	d8c02b15 	stw	r3,172(sp)
 800838c:	1805883a 	mov	r2,r3
 8008390:	183d970e 	bge	r3,zero,80079f0 <___vfprintf_internal_r+0x189c>
 8008394:	003fd706 	br	80082f4 <___vfprintf_internal_r+0x21a0>
 8008398:	0005883a 	mov	r2,zero
 800839c:	003f8f06 	br	80081dc <___vfprintf_internal_r+0x2088>
 80083a0:	9080004c 	andi	r2,r18,1
 80083a4:	103f821e 	bne	r2,zero,80081b0 <___vfprintf_internal_r+0x205c>
 80083a8:	d8802117 	ldw	r2,132(sp)
 80083ac:	1405c83a 	sub	r2,r2,r16
 80083b0:	d8803315 	stw	r2,204(sp)
 80083b4:	b47ef426 	beq	r22,r17,8007f88 <___vfprintf_internal_r+0x1e34>
 80083b8:	dd802617 	ldw	r22,152(sp)
 80083bc:	003f1206 	br	8008008 <___vfprintf_internal_r+0x1eb4>
 80083c0:	d8c02b03 	ldbu	r3,172(sp)
 80083c4:	d8c02785 	stb	r3,158(sp)
 80083c8:	0038df06 	br	8006748 <___vfprintf_internal_r+0x5f4>
 80083cc:	d8c02b03 	ldbu	r3,172(sp)
 80083d0:	d8c02785 	stb	r3,158(sp)
 80083d4:	0038aa06 	br	8006680 <___vfprintf_internal_r+0x52c>
 80083d8:	d8c02b03 	ldbu	r3,172(sp)
 80083dc:	d8c02785 	stb	r3,158(sp)
 80083e0:	003a4306 	br	8006cf0 <___vfprintf_internal_r+0xb9c>
 80083e4:	d8c02b03 	ldbu	r3,172(sp)
 80083e8:	d8c02785 	stb	r3,158(sp)
 80083ec:	003af506 	br	8006fc4 <___vfprintf_internal_r+0xe70>
 80083f0:	0005883a 	mov	r2,zero
 80083f4:	003d7b06 	br	80079e4 <___vfprintf_internal_r+0x1890>
 80083f8:	d8802344 	addi	r2,sp,141
 80083fc:	003f1006 	br	8008040 <___vfprintf_internal_r+0x1eec>
 8008400:	d8c02b03 	ldbu	r3,172(sp)
 8008404:	d8c02785 	stb	r3,158(sp)
 8008408:	0038fd06 	br	8006800 <___vfprintf_internal_r+0x6ac>
 800840c:	d8c02b03 	ldbu	r3,172(sp)
 8008410:	d8c02785 	stb	r3,158(sp)
 8008414:	003a9706 	br	8006e74 <___vfprintf_internal_r+0xd20>
 8008418:	d8c02b03 	ldbu	r3,172(sp)
 800841c:	d8c02785 	stb	r3,158(sp)
 8008420:	003a1806 	br	8006c84 <___vfprintf_internal_r+0xb30>
 8008424:	d8c02b03 	ldbu	r3,172(sp)
 8008428:	d8c02785 	stb	r3,158(sp)
 800842c:	003abe06 	br	8006f28 <___vfprintf_internal_r+0xdd4>

08008430 <__vfprintf_internal>:
 8008430:	00820074 	movhi	r2,2049
 8008434:	109c2704 	addi	r2,r2,28828
 8008438:	300f883a 	mov	r7,r6
 800843c:	280d883a 	mov	r6,r5
 8008440:	200b883a 	mov	r5,r4
 8008444:	11000017 	ldw	r4,0(r2)
 8008448:	80061541 	jmpi	8006154 <___vfprintf_internal_r>

0800844c <__sbprintf>:
 800844c:	2880030b 	ldhu	r2,12(r5)
 8008450:	2ac01917 	ldw	r11,100(r5)
 8008454:	2a80038b 	ldhu	r10,14(r5)
 8008458:	2a400717 	ldw	r9,28(r5)
 800845c:	2a000917 	ldw	r8,36(r5)
 8008460:	defee204 	addi	sp,sp,-1144
 8008464:	00c10004 	movi	r3,1024
 8008468:	dc011a15 	stw	r16,1128(sp)
 800846c:	10bfff4c 	andi	r2,r2,65533
 8008470:	2821883a 	mov	r16,r5
 8008474:	d8cb883a 	add	r5,sp,r3
 8008478:	dc811c15 	stw	r18,1136(sp)
 800847c:	dc411b15 	stw	r17,1132(sp)
 8008480:	dfc11d15 	stw	ra,1140(sp)
 8008484:	2025883a 	mov	r18,r4
 8008488:	d881030d 	sth	r2,1036(sp)
 800848c:	dac11915 	stw	r11,1124(sp)
 8008490:	da81038d 	sth	r10,1038(sp)
 8008494:	da410715 	stw	r9,1052(sp)
 8008498:	da010915 	stw	r8,1060(sp)
 800849c:	dec10015 	stw	sp,1024(sp)
 80084a0:	dec10415 	stw	sp,1040(sp)
 80084a4:	d8c10215 	stw	r3,1032(sp)
 80084a8:	d8c10515 	stw	r3,1044(sp)
 80084ac:	d8010615 	stw	zero,1048(sp)
 80084b0:	80061540 	call	8006154 <___vfprintf_internal_r>
 80084b4:	1023883a 	mov	r17,r2
 80084b8:	10000416 	blt	r2,zero,80084cc <__sbprintf+0x80>
 80084bc:	d9410004 	addi	r5,sp,1024
 80084c0:	9009883a 	mov	r4,r18
 80084c4:	800a1280 	call	800a128 <_fflush_r>
 80084c8:	10000d1e 	bne	r2,zero,8008500 <__sbprintf+0xb4>
 80084cc:	d881030b 	ldhu	r2,1036(sp)
 80084d0:	1080100c 	andi	r2,r2,64
 80084d4:	10000326 	beq	r2,zero,80084e4 <__sbprintf+0x98>
 80084d8:	8080030b 	ldhu	r2,12(r16)
 80084dc:	10801014 	ori	r2,r2,64
 80084e0:	8080030d 	sth	r2,12(r16)
 80084e4:	8805883a 	mov	r2,r17
 80084e8:	dfc11d17 	ldw	ra,1140(sp)
 80084ec:	dc811c17 	ldw	r18,1136(sp)
 80084f0:	dc411b17 	ldw	r17,1132(sp)
 80084f4:	dc011a17 	ldw	r16,1128(sp)
 80084f8:	dec11e04 	addi	sp,sp,1144
 80084fc:	f800283a 	ret
 8008500:	047fffc4 	movi	r17,-1
 8008504:	003ff106 	br	80084cc <__sbprintf+0x80>

08008508 <__swsetup_r>:
 8008508:	00820074 	movhi	r2,2049
 800850c:	defffd04 	addi	sp,sp,-12
 8008510:	109c2704 	addi	r2,r2,28828
 8008514:	dc400115 	stw	r17,4(sp)
 8008518:	2023883a 	mov	r17,r4
 800851c:	11000017 	ldw	r4,0(r2)
 8008520:	dc000015 	stw	r16,0(sp)
 8008524:	dfc00215 	stw	ra,8(sp)
 8008528:	2821883a 	mov	r16,r5
 800852c:	20000226 	beq	r4,zero,8008538 <__swsetup_r+0x30>
 8008530:	20800e17 	ldw	r2,56(r4)
 8008534:	10003126 	beq	r2,zero,80085fc <__swsetup_r+0xf4>
 8008538:	8080030b 	ldhu	r2,12(r16)
 800853c:	10c0020c 	andi	r3,r2,8
 8008540:	1009883a 	mov	r4,r2
 8008544:	18000f26 	beq	r3,zero,8008584 <__swsetup_r+0x7c>
 8008548:	80c00417 	ldw	r3,16(r16)
 800854c:	18001526 	beq	r3,zero,80085a4 <__swsetup_r+0x9c>
 8008550:	1100004c 	andi	r4,r2,1
 8008554:	20001c1e 	bne	r4,zero,80085c8 <__swsetup_r+0xc0>
 8008558:	1080008c 	andi	r2,r2,2
 800855c:	1000291e 	bne	r2,zero,8008604 <__swsetup_r+0xfc>
 8008560:	80800517 	ldw	r2,20(r16)
 8008564:	80800215 	stw	r2,8(r16)
 8008568:	18001c26 	beq	r3,zero,80085dc <__swsetup_r+0xd4>
 800856c:	0005883a 	mov	r2,zero
 8008570:	dfc00217 	ldw	ra,8(sp)
 8008574:	dc400117 	ldw	r17,4(sp)
 8008578:	dc000017 	ldw	r16,0(sp)
 800857c:	dec00304 	addi	sp,sp,12
 8008580:	f800283a 	ret
 8008584:	2080040c 	andi	r2,r4,16
 8008588:	10002e26 	beq	r2,zero,8008644 <__swsetup_r+0x13c>
 800858c:	2080010c 	andi	r2,r4,4
 8008590:	10001e1e 	bne	r2,zero,800860c <__swsetup_r+0x104>
 8008594:	80c00417 	ldw	r3,16(r16)
 8008598:	20800214 	ori	r2,r4,8
 800859c:	8080030d 	sth	r2,12(r16)
 80085a0:	183feb1e 	bne	r3,zero,8008550 <__swsetup_r+0x48>
 80085a4:	1100a00c 	andi	r4,r2,640
 80085a8:	01408004 	movi	r5,512
 80085ac:	217fe826 	beq	r4,r5,8008550 <__swsetup_r+0x48>
 80085b0:	800b883a 	mov	r5,r16
 80085b4:	8809883a 	mov	r4,r17
 80085b8:	800b1200 	call	800b120 <__smakebuf_r>
 80085bc:	8080030b 	ldhu	r2,12(r16)
 80085c0:	80c00417 	ldw	r3,16(r16)
 80085c4:	003fe206 	br	8008550 <__swsetup_r+0x48>
 80085c8:	80800517 	ldw	r2,20(r16)
 80085cc:	80000215 	stw	zero,8(r16)
 80085d0:	0085c83a 	sub	r2,zero,r2
 80085d4:	80800615 	stw	r2,24(r16)
 80085d8:	183fe41e 	bne	r3,zero,800856c <__swsetup_r+0x64>
 80085dc:	80c0030b 	ldhu	r3,12(r16)
 80085e0:	0005883a 	mov	r2,zero
 80085e4:	1900200c 	andi	r4,r3,128
 80085e8:	203fe126 	beq	r4,zero,8008570 <__swsetup_r+0x68>
 80085ec:	18c01014 	ori	r3,r3,64
 80085f0:	80c0030d 	sth	r3,12(r16)
 80085f4:	00bfffc4 	movi	r2,-1
 80085f8:	003fdd06 	br	8008570 <__swsetup_r+0x68>
 80085fc:	800a5140 	call	800a514 <__sinit>
 8008600:	003fcd06 	br	8008538 <__swsetup_r+0x30>
 8008604:	0005883a 	mov	r2,zero
 8008608:	003fd606 	br	8008564 <__swsetup_r+0x5c>
 800860c:	81400c17 	ldw	r5,48(r16)
 8008610:	28000626 	beq	r5,zero,800862c <__swsetup_r+0x124>
 8008614:	80801004 	addi	r2,r16,64
 8008618:	28800326 	beq	r5,r2,8008628 <__swsetup_r+0x120>
 800861c:	8809883a 	mov	r4,r17
 8008620:	800a6880 	call	800a688 <_free_r>
 8008624:	8100030b 	ldhu	r4,12(r16)
 8008628:	80000c15 	stw	zero,48(r16)
 800862c:	80c00417 	ldw	r3,16(r16)
 8008630:	00bff6c4 	movi	r2,-37
 8008634:	1108703a 	and	r4,r2,r4
 8008638:	80000115 	stw	zero,4(r16)
 800863c:	80c00015 	stw	r3,0(r16)
 8008640:	003fd506 	br	8008598 <__swsetup_r+0x90>
 8008644:	00800244 	movi	r2,9
 8008648:	88800015 	stw	r2,0(r17)
 800864c:	20801014 	ori	r2,r4,64
 8008650:	8080030d 	sth	r2,12(r16)
 8008654:	00bfffc4 	movi	r2,-1
 8008658:	003fc506 	br	8008570 <__swsetup_r+0x68>

0800865c <quorem>:
 800865c:	defff204 	addi	sp,sp,-56
 8008660:	ddc00b15 	stw	r23,44(sp)
 8008664:	20800417 	ldw	r2,16(r4)
 8008668:	2dc00417 	ldw	r23,16(r5)
 800866c:	dfc00d15 	stw	ra,52(sp)
 8008670:	df000c15 	stw	fp,48(sp)
 8008674:	dd800a15 	stw	r22,40(sp)
 8008678:	dd400915 	stw	r21,36(sp)
 800867c:	dd000815 	stw	r20,32(sp)
 8008680:	dcc00715 	stw	r19,28(sp)
 8008684:	dc800615 	stw	r18,24(sp)
 8008688:	dc400515 	stw	r17,20(sp)
 800868c:	dc000415 	stw	r16,16(sp)
 8008690:	15c07a16 	blt	r2,r23,800887c <quorem+0x220>
 8008694:	bdffffc4 	addi	r23,r23,-1
 8008698:	bde9883a 	add	r20,r23,r23
 800869c:	28c00504 	addi	r3,r5,20
 80086a0:	a529883a 	add	r20,r20,r20
 80086a4:	1d39883a 	add	fp,r3,r20
 80086a8:	24c00504 	addi	r19,r4,20
 80086ac:	d9400215 	stw	r5,8(sp)
 80086b0:	9d29883a 	add	r20,r19,r20
 80086b4:	e1400017 	ldw	r5,0(fp)
 80086b8:	d9000015 	stw	r4,0(sp)
 80086bc:	a1000017 	ldw	r4,0(r20)
 80086c0:	29400044 	addi	r5,r5,1
 80086c4:	d8c00115 	stw	r3,4(sp)
 80086c8:	dd000315 	stw	r20,12(sp)
 80086cc:	80104880 	call	8010488 <__udivsi3>
 80086d0:	1025883a 	mov	r18,r2
 80086d4:	10003026 	beq	r2,zero,8008798 <quorem+0x13c>
 80086d8:	dc400117 	ldw	r17,4(sp)
 80086dc:	9829883a 	mov	r20,r19
 80086e0:	002d883a 	mov	r22,zero
 80086e4:	0021883a 	mov	r16,zero
 80086e8:	8d400017 	ldw	r21,0(r17)
 80086ec:	900b883a 	mov	r5,r18
 80086f0:	8c400104 	addi	r17,r17,4
 80086f4:	a93fffcc 	andi	r4,r21,65535
 80086f8:	80050200 	call	8005020 <__mulsi3>
 80086fc:	a808d43a 	srli	r4,r21,16
 8008700:	900b883a 	mov	r5,r18
 8008704:	15ad883a 	add	r22,r2,r22
 8008708:	80050200 	call	8005020 <__mulsi3>
 800870c:	a1000017 	ldw	r4,0(r20)
 8008710:	b00cd43a 	srli	r6,r22,16
 8008714:	b0ffffcc 	andi	r3,r22,65535
 8008718:	217fffcc 	andi	r5,r4,65535
 800871c:	2c21883a 	add	r16,r5,r16
 8008720:	80c7c83a 	sub	r3,r16,r3
 8008724:	2008d43a 	srli	r4,r4,16
 8008728:	1185883a 	add	r2,r2,r6
 800872c:	1821d43a 	srai	r16,r3,16
 8008730:	117fffcc 	andi	r5,r2,65535
 8008734:	2149c83a 	sub	r4,r4,r5
 8008738:	2421883a 	add	r16,r4,r16
 800873c:	8008943a 	slli	r4,r16,16
 8008740:	18ffffcc 	andi	r3,r3,65535
 8008744:	102cd43a 	srli	r22,r2,16
 8008748:	20c8b03a 	or	r4,r4,r3
 800874c:	a1000015 	stw	r4,0(r20)
 8008750:	8021d43a 	srai	r16,r16,16
 8008754:	a5000104 	addi	r20,r20,4
 8008758:	e47fe32e 	bgeu	fp,r17,80086e8 <quorem+0x8c>
 800875c:	d8c00317 	ldw	r3,12(sp)
 8008760:	18800017 	ldw	r2,0(r3)
 8008764:	10000c1e 	bne	r2,zero,8008798 <quorem+0x13c>
 8008768:	18bfff04 	addi	r2,r3,-4
 800876c:	9880082e 	bgeu	r19,r2,8008790 <quorem+0x134>
 8008770:	18ffff17 	ldw	r3,-4(r3)
 8008774:	18000326 	beq	r3,zero,8008784 <quorem+0x128>
 8008778:	00000506 	br	8008790 <quorem+0x134>
 800877c:	10c00017 	ldw	r3,0(r2)
 8008780:	1800031e 	bne	r3,zero,8008790 <quorem+0x134>
 8008784:	10bfff04 	addi	r2,r2,-4
 8008788:	bdffffc4 	addi	r23,r23,-1
 800878c:	98bffb36 	bltu	r19,r2,800877c <quorem+0x120>
 8008790:	d8c00017 	ldw	r3,0(sp)
 8008794:	1dc00415 	stw	r23,16(r3)
 8008798:	d9400217 	ldw	r5,8(sp)
 800879c:	d9000017 	ldw	r4,0(sp)
 80087a0:	800c6ac0 	call	800c6ac <__mcmp>
 80087a4:	10002816 	blt	r2,zero,8008848 <quorem+0x1ec>
 80087a8:	dc400117 	ldw	r17,4(sp)
 80087ac:	94800044 	addi	r18,r18,1
 80087b0:	980d883a 	mov	r6,r19
 80087b4:	0007883a 	mov	r3,zero
 80087b8:	31000017 	ldw	r4,0(r6)
 80087bc:	89400017 	ldw	r5,0(r17)
 80087c0:	31800104 	addi	r6,r6,4
 80087c4:	20bfffcc 	andi	r2,r4,65535
 80087c8:	10c7883a 	add	r3,r2,r3
 80087cc:	28bfffcc 	andi	r2,r5,65535
 80087d0:	1885c83a 	sub	r2,r3,r2
 80087d4:	280ad43a 	srli	r5,r5,16
 80087d8:	2008d43a 	srli	r4,r4,16
 80087dc:	1007d43a 	srai	r3,r2,16
 80087e0:	10bfffcc 	andi	r2,r2,65535
 80087e4:	2149c83a 	sub	r4,r4,r5
 80087e8:	20c9883a 	add	r4,r4,r3
 80087ec:	200a943a 	slli	r5,r4,16
 80087f0:	8c400104 	addi	r17,r17,4
 80087f4:	2007d43a 	srai	r3,r4,16
 80087f8:	2884b03a 	or	r2,r5,r2
 80087fc:	30bfff15 	stw	r2,-4(r6)
 8008800:	e47fed2e 	bgeu	fp,r17,80087b8 <quorem+0x15c>
 8008804:	bdc5883a 	add	r2,r23,r23
 8008808:	1085883a 	add	r2,r2,r2
 800880c:	9887883a 	add	r3,r19,r2
 8008810:	18800017 	ldw	r2,0(r3)
 8008814:	10000c1e 	bne	r2,zero,8008848 <quorem+0x1ec>
 8008818:	18bfff04 	addi	r2,r3,-4
 800881c:	9880082e 	bgeu	r19,r2,8008840 <quorem+0x1e4>
 8008820:	18ffff17 	ldw	r3,-4(r3)
 8008824:	18000326 	beq	r3,zero,8008834 <quorem+0x1d8>
 8008828:	00000506 	br	8008840 <quorem+0x1e4>
 800882c:	10c00017 	ldw	r3,0(r2)
 8008830:	1800031e 	bne	r3,zero,8008840 <quorem+0x1e4>
 8008834:	10bfff04 	addi	r2,r2,-4
 8008838:	bdffffc4 	addi	r23,r23,-1
 800883c:	98bffb36 	bltu	r19,r2,800882c <quorem+0x1d0>
 8008840:	d8c00017 	ldw	r3,0(sp)
 8008844:	1dc00415 	stw	r23,16(r3)
 8008848:	9005883a 	mov	r2,r18
 800884c:	dfc00d17 	ldw	ra,52(sp)
 8008850:	df000c17 	ldw	fp,48(sp)
 8008854:	ddc00b17 	ldw	r23,44(sp)
 8008858:	dd800a17 	ldw	r22,40(sp)
 800885c:	dd400917 	ldw	r21,36(sp)
 8008860:	dd000817 	ldw	r20,32(sp)
 8008864:	dcc00717 	ldw	r19,28(sp)
 8008868:	dc800617 	ldw	r18,24(sp)
 800886c:	dc400517 	ldw	r17,20(sp)
 8008870:	dc000417 	ldw	r16,16(sp)
 8008874:	dec00e04 	addi	sp,sp,56
 8008878:	f800283a 	ret
 800887c:	0005883a 	mov	r2,zero
 8008880:	003ff206 	br	800884c <quorem+0x1f0>

08008884 <_dtoa_r>:
 8008884:	20801017 	ldw	r2,64(r4)
 8008888:	deffde04 	addi	sp,sp,-136
 800888c:	df002015 	stw	fp,128(sp)
 8008890:	dcc01b15 	stw	r19,108(sp)
 8008894:	dc801a15 	stw	r18,104(sp)
 8008898:	dc401915 	stw	r17,100(sp)
 800889c:	dc001815 	stw	r16,96(sp)
 80088a0:	dfc02115 	stw	ra,132(sp)
 80088a4:	ddc01f15 	stw	r23,124(sp)
 80088a8:	dd801e15 	stw	r22,120(sp)
 80088ac:	dd401d15 	stw	r21,116(sp)
 80088b0:	dd001c15 	stw	r20,112(sp)
 80088b4:	d9c00315 	stw	r7,12(sp)
 80088b8:	2039883a 	mov	fp,r4
 80088bc:	3023883a 	mov	r17,r6
 80088c0:	2825883a 	mov	r18,r5
 80088c4:	dc002417 	ldw	r16,144(sp)
 80088c8:	3027883a 	mov	r19,r6
 80088cc:	10000826 	beq	r2,zero,80088f0 <_dtoa_r+0x6c>
 80088d0:	21801117 	ldw	r6,68(r4)
 80088d4:	00c00044 	movi	r3,1
 80088d8:	100b883a 	mov	r5,r2
 80088dc:	1986983a 	sll	r3,r3,r6
 80088e0:	11800115 	stw	r6,4(r2)
 80088e4:	10c00215 	stw	r3,8(r2)
 80088e8:	800bdd00 	call	800bdd0 <_Bfree>
 80088ec:	e0001015 	stw	zero,64(fp)
 80088f0:	88002e16 	blt	r17,zero,80089ac <_dtoa_r+0x128>
 80088f4:	80000015 	stw	zero,0(r16)
 80088f8:	889ffc2c 	andhi	r2,r17,32752
 80088fc:	00dffc34 	movhi	r3,32752
 8008900:	10c01c26 	beq	r2,r3,8008974 <_dtoa_r+0xf0>
 8008904:	000d883a 	mov	r6,zero
 8008908:	000f883a 	mov	r7,zero
 800890c:	9009883a 	mov	r4,r18
 8008910:	980b883a 	mov	r5,r19
 8008914:	80117c00 	call	80117c0 <__eqdf2>
 8008918:	10002b1e 	bne	r2,zero,80089c8 <_dtoa_r+0x144>
 800891c:	d9c02317 	ldw	r7,140(sp)
 8008920:	00800044 	movi	r2,1
 8008924:	38800015 	stw	r2,0(r7)
 8008928:	d8802517 	ldw	r2,148(sp)
 800892c:	10019e26 	beq	r2,zero,8008fa8 <_dtoa_r+0x724>
 8008930:	d8c02517 	ldw	r3,148(sp)
 8008934:	00820074 	movhi	r2,2049
 8008938:	1094fc44 	addi	r2,r2,21489
 800893c:	18800015 	stw	r2,0(r3)
 8008940:	10bfffc4 	addi	r2,r2,-1
 8008944:	dfc02117 	ldw	ra,132(sp)
 8008948:	df002017 	ldw	fp,128(sp)
 800894c:	ddc01f17 	ldw	r23,124(sp)
 8008950:	dd801e17 	ldw	r22,120(sp)
 8008954:	dd401d17 	ldw	r21,116(sp)
 8008958:	dd001c17 	ldw	r20,112(sp)
 800895c:	dcc01b17 	ldw	r19,108(sp)
 8008960:	dc801a17 	ldw	r18,104(sp)
 8008964:	dc401917 	ldw	r17,100(sp)
 8008968:	dc001817 	ldw	r16,96(sp)
 800896c:	dec02204 	addi	sp,sp,136
 8008970:	f800283a 	ret
 8008974:	d8c02317 	ldw	r3,140(sp)
 8008978:	0089c3c4 	movi	r2,9999
 800897c:	18800015 	stw	r2,0(r3)
 8008980:	90017726 	beq	r18,zero,8008f60 <_dtoa_r+0x6dc>
 8008984:	00820074 	movhi	r2,2049
 8008988:	10950804 	addi	r2,r2,21536
 800898c:	d9002517 	ldw	r4,148(sp)
 8008990:	203fec26 	beq	r4,zero,8008944 <_dtoa_r+0xc0>
 8008994:	10c000c7 	ldb	r3,3(r2)
 8008998:	1801781e 	bne	r3,zero,8008f7c <_dtoa_r+0x6f8>
 800899c:	10c000c4 	addi	r3,r2,3
 80089a0:	d9802517 	ldw	r6,148(sp)
 80089a4:	30c00015 	stw	r3,0(r6)
 80089a8:	003fe606 	br	8008944 <_dtoa_r+0xc0>
 80089ac:	04e00034 	movhi	r19,32768
 80089b0:	9cffffc4 	addi	r19,r19,-1
 80089b4:	00800044 	movi	r2,1
 80089b8:	8ce6703a 	and	r19,r17,r19
 80089bc:	80800015 	stw	r2,0(r16)
 80089c0:	9823883a 	mov	r17,r19
 80089c4:	003fcc06 	br	80088f8 <_dtoa_r+0x74>
 80089c8:	d8800204 	addi	r2,sp,8
 80089cc:	d8800015 	stw	r2,0(sp)
 80089d0:	d9c00104 	addi	r7,sp,4
 80089d4:	900b883a 	mov	r5,r18
 80089d8:	980d883a 	mov	r6,r19
 80089dc:	e009883a 	mov	r4,fp
 80089e0:	8820d53a 	srli	r16,r17,20
 80089e4:	800ca780 	call	800ca78 <__d2b>
 80089e8:	d8800915 	stw	r2,36(sp)
 80089ec:	8001651e 	bne	r16,zero,8008f84 <_dtoa_r+0x700>
 80089f0:	dd800217 	ldw	r22,8(sp)
 80089f4:	dc000117 	ldw	r16,4(sp)
 80089f8:	00800804 	movi	r2,32
 80089fc:	b421883a 	add	r16,r22,r16
 8008a00:	80c10c84 	addi	r3,r16,1074
 8008a04:	10c2d10e 	bge	r2,r3,800954c <_dtoa_r+0xcc8>
 8008a08:	00801004 	movi	r2,64
 8008a0c:	81010484 	addi	r4,r16,1042
 8008a10:	10c7c83a 	sub	r3,r2,r3
 8008a14:	9108d83a 	srl	r4,r18,r4
 8008a18:	88e2983a 	sll	r17,r17,r3
 8008a1c:	2448b03a 	or	r4,r4,r17
 8008a20:	80123940 	call	8012394 <__floatunsidf>
 8008a24:	017f8434 	movhi	r5,65040
 8008a28:	01800044 	movi	r6,1
 8008a2c:	1009883a 	mov	r4,r2
 8008a30:	194b883a 	add	r5,r3,r5
 8008a34:	843fffc4 	addi	r16,r16,-1
 8008a38:	d9801115 	stw	r6,68(sp)
 8008a3c:	000d883a 	mov	r6,zero
 8008a40:	01cffe34 	movhi	r7,16376
 8008a44:	801193c0 	call	801193c <__subdf3>
 8008a48:	0198dbf4 	movhi	r6,25455
 8008a4c:	01cff4f4 	movhi	r7,16339
 8008a50:	3190d844 	addi	r6,r6,17249
 8008a54:	39e1e9c4 	addi	r7,r7,-30809
 8008a58:	1009883a 	mov	r4,r2
 8008a5c:	180b883a 	mov	r5,r3
 8008a60:	80051240 	call	8005124 <__muldf3>
 8008a64:	01a2d874 	movhi	r6,35681
 8008a68:	01cff1f4 	movhi	r7,16327
 8008a6c:	31b22cc4 	addi	r6,r6,-14157
 8008a70:	39e28a04 	addi	r7,r7,-30168
 8008a74:	180b883a 	mov	r5,r3
 8008a78:	1009883a 	mov	r4,r2
 8008a7c:	80105440 	call	8010544 <__adddf3>
 8008a80:	8009883a 	mov	r4,r16
 8008a84:	1029883a 	mov	r20,r2
 8008a88:	1823883a 	mov	r17,r3
 8008a8c:	80122b80 	call	80122b8 <__floatsidf>
 8008a90:	019427f4 	movhi	r6,20639
 8008a94:	01cff4f4 	movhi	r7,16339
 8008a98:	319e7ec4 	addi	r6,r6,31227
 8008a9c:	39d104c4 	addi	r7,r7,17427
 8008aa0:	1009883a 	mov	r4,r2
 8008aa4:	180b883a 	mov	r5,r3
 8008aa8:	80051240 	call	8005124 <__muldf3>
 8008aac:	100d883a 	mov	r6,r2
 8008ab0:	180f883a 	mov	r7,r3
 8008ab4:	a009883a 	mov	r4,r20
 8008ab8:	880b883a 	mov	r5,r17
 8008abc:	80105440 	call	8010544 <__adddf3>
 8008ac0:	1009883a 	mov	r4,r2
 8008ac4:	180b883a 	mov	r5,r3
 8008ac8:	1029883a 	mov	r20,r2
 8008acc:	1823883a 	mov	r17,r3
 8008ad0:	80122380 	call	8012238 <__fixdfsi>
 8008ad4:	000d883a 	mov	r6,zero
 8008ad8:	000f883a 	mov	r7,zero
 8008adc:	a009883a 	mov	r4,r20
 8008ae0:	880b883a 	mov	r5,r17
 8008ae4:	d8800515 	stw	r2,20(sp)
 8008ae8:	80118480 	call	8011848 <__ledf2>
 8008aec:	10028716 	blt	r2,zero,800950c <_dtoa_r+0xc88>
 8008af0:	d8c00517 	ldw	r3,20(sp)
 8008af4:	00800584 	movi	r2,22
 8008af8:	10c27536 	bltu	r2,r3,80094d0 <_dtoa_r+0xc4c>
 8008afc:	180490fa 	slli	r2,r3,3
 8008b00:	00c20074 	movhi	r3,2049
 8008b04:	18d52304 	addi	r3,r3,21644
 8008b08:	1885883a 	add	r2,r3,r2
 8008b0c:	11000017 	ldw	r4,0(r2)
 8008b10:	11400117 	ldw	r5,4(r2)
 8008b14:	900d883a 	mov	r6,r18
 8008b18:	980f883a 	mov	r7,r19
 8008b1c:	80050480 	call	8005048 <__gedf2>
 8008b20:	00828d0e 	bge	zero,r2,8009558 <_dtoa_r+0xcd4>
 8008b24:	d9000517 	ldw	r4,20(sp)
 8008b28:	d8000e15 	stw	zero,56(sp)
 8008b2c:	213fffc4 	addi	r4,r4,-1
 8008b30:	d9000515 	stw	r4,20(sp)
 8008b34:	b42dc83a 	sub	r22,r22,r16
 8008b38:	b5bfffc4 	addi	r22,r22,-1
 8008b3c:	b0026f16 	blt	r22,zero,80094fc <_dtoa_r+0xc78>
 8008b40:	d8000815 	stw	zero,32(sp)
 8008b44:	d9c00517 	ldw	r7,20(sp)
 8008b48:	38026416 	blt	r7,zero,80094dc <_dtoa_r+0xc58>
 8008b4c:	b1ed883a 	add	r22,r22,r7
 8008b50:	d9c00d15 	stw	r7,52(sp)
 8008b54:	d8000a15 	stw	zero,40(sp)
 8008b58:	d9800317 	ldw	r6,12(sp)
 8008b5c:	00800244 	movi	r2,9
 8008b60:	11811436 	bltu	r2,r6,8008fb4 <_dtoa_r+0x730>
 8008b64:	00800144 	movi	r2,5
 8008b68:	1184e10e 	bge	r2,r6,8009ef0 <_dtoa_r+0x166c>
 8008b6c:	31bfff04 	addi	r6,r6,-4
 8008b70:	d9800315 	stw	r6,12(sp)
 8008b74:	0023883a 	mov	r17,zero
 8008b78:	d9800317 	ldw	r6,12(sp)
 8008b7c:	008000c4 	movi	r2,3
 8008b80:	30836726 	beq	r6,r2,8009920 <_dtoa_r+0x109c>
 8008b84:	1183410e 	bge	r2,r6,800988c <_dtoa_r+0x1008>
 8008b88:	d9c00317 	ldw	r7,12(sp)
 8008b8c:	00800104 	movi	r2,4
 8008b90:	38827c26 	beq	r7,r2,8009584 <_dtoa_r+0xd00>
 8008b94:	00800144 	movi	r2,5
 8008b98:	3884c41e 	bne	r7,r2,8009eac <_dtoa_r+0x1628>
 8008b9c:	00800044 	movi	r2,1
 8008ba0:	d8800b15 	stw	r2,44(sp)
 8008ba4:	d8c00517 	ldw	r3,20(sp)
 8008ba8:	d9002217 	ldw	r4,136(sp)
 8008bac:	1907883a 	add	r3,r3,r4
 8008bb0:	19800044 	addi	r6,r3,1
 8008bb4:	d8c00c15 	stw	r3,48(sp)
 8008bb8:	d9800615 	stw	r6,24(sp)
 8008bbc:	0183a40e 	bge	zero,r6,8009a50 <_dtoa_r+0x11cc>
 8008bc0:	d9800617 	ldw	r6,24(sp)
 8008bc4:	3021883a 	mov	r16,r6
 8008bc8:	e0001115 	stw	zero,68(fp)
 8008bcc:	008005c4 	movi	r2,23
 8008bd0:	1184c92e 	bgeu	r2,r6,8009ef8 <_dtoa_r+0x1674>
 8008bd4:	00c00044 	movi	r3,1
 8008bd8:	00800104 	movi	r2,4
 8008bdc:	1085883a 	add	r2,r2,r2
 8008be0:	11000504 	addi	r4,r2,20
 8008be4:	180b883a 	mov	r5,r3
 8008be8:	18c00044 	addi	r3,r3,1
 8008bec:	313ffb2e 	bgeu	r6,r4,8008bdc <_dtoa_r+0x358>
 8008bf0:	e1401115 	stw	r5,68(fp)
 8008bf4:	e009883a 	mov	r4,fp
 8008bf8:	800bd280 	call	800bd28 <_Balloc>
 8008bfc:	d8800715 	stw	r2,28(sp)
 8008c00:	e0801015 	stw	r2,64(fp)
 8008c04:	00800384 	movi	r2,14
 8008c08:	1400f736 	bltu	r2,r16,8008fe8 <_dtoa_r+0x764>
 8008c0c:	8800f626 	beq	r17,zero,8008fe8 <_dtoa_r+0x764>
 8008c10:	d9c00517 	ldw	r7,20(sp)
 8008c14:	01c39a0e 	bge	zero,r7,8009a80 <_dtoa_r+0x11fc>
 8008c18:	388003cc 	andi	r2,r7,15
 8008c1c:	100490fa 	slli	r2,r2,3
 8008c20:	382bd13a 	srai	r21,r7,4
 8008c24:	00c20074 	movhi	r3,2049
 8008c28:	18d52304 	addi	r3,r3,21644
 8008c2c:	1885883a 	add	r2,r3,r2
 8008c30:	a8c0040c 	andi	r3,r21,16
 8008c34:	12400017 	ldw	r9,0(r2)
 8008c38:	12000117 	ldw	r8,4(r2)
 8008c3c:	18037926 	beq	r3,zero,8009a24 <_dtoa_r+0x11a0>
 8008c40:	00820074 	movhi	r2,2049
 8008c44:	10951904 	addi	r2,r2,21604
 8008c48:	11800817 	ldw	r6,32(r2)
 8008c4c:	11c00917 	ldw	r7,36(r2)
 8008c50:	9009883a 	mov	r4,r18
 8008c54:	980b883a 	mov	r5,r19
 8008c58:	da001715 	stw	r8,92(sp)
 8008c5c:	da401615 	stw	r9,88(sp)
 8008c60:	8010df00 	call	8010df0 <__divdf3>
 8008c64:	da001717 	ldw	r8,92(sp)
 8008c68:	da401617 	ldw	r9,88(sp)
 8008c6c:	ad4003cc 	andi	r21,r21,15
 8008c70:	040000c4 	movi	r16,3
 8008c74:	1023883a 	mov	r17,r2
 8008c78:	1829883a 	mov	r20,r3
 8008c7c:	a8001126 	beq	r21,zero,8008cc4 <_dtoa_r+0x440>
 8008c80:	05c20074 	movhi	r23,2049
 8008c84:	bdd51904 	addi	r23,r23,21604
 8008c88:	4805883a 	mov	r2,r9
 8008c8c:	4007883a 	mov	r3,r8
 8008c90:	a980004c 	andi	r6,r21,1
 8008c94:	1009883a 	mov	r4,r2
 8008c98:	a82bd07a 	srai	r21,r21,1
 8008c9c:	180b883a 	mov	r5,r3
 8008ca0:	30000426 	beq	r6,zero,8008cb4 <_dtoa_r+0x430>
 8008ca4:	b9800017 	ldw	r6,0(r23)
 8008ca8:	b9c00117 	ldw	r7,4(r23)
 8008cac:	84000044 	addi	r16,r16,1
 8008cb0:	80051240 	call	8005124 <__muldf3>
 8008cb4:	bdc00204 	addi	r23,r23,8
 8008cb8:	a83ff51e 	bne	r21,zero,8008c90 <_dtoa_r+0x40c>
 8008cbc:	1013883a 	mov	r9,r2
 8008cc0:	1811883a 	mov	r8,r3
 8008cc4:	480d883a 	mov	r6,r9
 8008cc8:	400f883a 	mov	r7,r8
 8008ccc:	8809883a 	mov	r4,r17
 8008cd0:	a00b883a 	mov	r5,r20
 8008cd4:	8010df00 	call	8010df0 <__divdf3>
 8008cd8:	d8800f15 	stw	r2,60(sp)
 8008cdc:	d8c01015 	stw	r3,64(sp)
 8008ce0:	d8c00e17 	ldw	r3,56(sp)
 8008ce4:	18000626 	beq	r3,zero,8008d00 <_dtoa_r+0x47c>
 8008ce8:	d9000f17 	ldw	r4,60(sp)
 8008cec:	d9401017 	ldw	r5,64(sp)
 8008cf0:	000d883a 	mov	r6,zero
 8008cf4:	01cffc34 	movhi	r7,16368
 8008cf8:	80118480 	call	8011848 <__ledf2>
 8008cfc:	10040b16 	blt	r2,zero,8009d2c <_dtoa_r+0x14a8>
 8008d00:	8009883a 	mov	r4,r16
 8008d04:	80122b80 	call	80122b8 <__floatsidf>
 8008d08:	d9800f17 	ldw	r6,60(sp)
 8008d0c:	d9c01017 	ldw	r7,64(sp)
 8008d10:	1009883a 	mov	r4,r2
 8008d14:	180b883a 	mov	r5,r3
 8008d18:	80051240 	call	8005124 <__muldf3>
 8008d1c:	000d883a 	mov	r6,zero
 8008d20:	01d00734 	movhi	r7,16412
 8008d24:	1009883a 	mov	r4,r2
 8008d28:	180b883a 	mov	r5,r3
 8008d2c:	80105440 	call	8010544 <__adddf3>
 8008d30:	1021883a 	mov	r16,r2
 8008d34:	d8800617 	ldw	r2,24(sp)
 8008d38:	047f3034 	movhi	r17,64704
 8008d3c:	1c63883a 	add	r17,r3,r17
 8008d40:	10031826 	beq	r2,zero,80099a4 <_dtoa_r+0x1120>
 8008d44:	d8c00517 	ldw	r3,20(sp)
 8008d48:	db000617 	ldw	r12,24(sp)
 8008d4c:	d8c01315 	stw	r3,76(sp)
 8008d50:	d9000b17 	ldw	r4,44(sp)
 8008d54:	20038f26 	beq	r4,zero,8009b94 <_dtoa_r+0x1310>
 8008d58:	60bfffc4 	addi	r2,r12,-1
 8008d5c:	100490fa 	slli	r2,r2,3
 8008d60:	00c20074 	movhi	r3,2049
 8008d64:	18d52304 	addi	r3,r3,21644
 8008d68:	1885883a 	add	r2,r3,r2
 8008d6c:	11800017 	ldw	r6,0(r2)
 8008d70:	11c00117 	ldw	r7,4(r2)
 8008d74:	d8800717 	ldw	r2,28(sp)
 8008d78:	0009883a 	mov	r4,zero
 8008d7c:	014ff834 	movhi	r5,16352
 8008d80:	db001615 	stw	r12,88(sp)
 8008d84:	15c00044 	addi	r23,r2,1
 8008d88:	8010df00 	call	8010df0 <__divdf3>
 8008d8c:	800d883a 	mov	r6,r16
 8008d90:	880f883a 	mov	r7,r17
 8008d94:	1009883a 	mov	r4,r2
 8008d98:	180b883a 	mov	r5,r3
 8008d9c:	801193c0 	call	801193c <__subdf3>
 8008da0:	d9401017 	ldw	r5,64(sp)
 8008da4:	d9000f17 	ldw	r4,60(sp)
 8008da8:	102b883a 	mov	r21,r2
 8008dac:	d8c01215 	stw	r3,72(sp)
 8008db0:	80122380 	call	8012238 <__fixdfsi>
 8008db4:	1009883a 	mov	r4,r2
 8008db8:	1029883a 	mov	r20,r2
 8008dbc:	80122b80 	call	80122b8 <__floatsidf>
 8008dc0:	d9000f17 	ldw	r4,60(sp)
 8008dc4:	d9401017 	ldw	r5,64(sp)
 8008dc8:	100d883a 	mov	r6,r2
 8008dcc:	180f883a 	mov	r7,r3
 8008dd0:	801193c0 	call	801193c <__subdf3>
 8008dd4:	1823883a 	mov	r17,r3
 8008dd8:	d8c00717 	ldw	r3,28(sp)
 8008ddc:	d9401217 	ldw	r5,72(sp)
 8008de0:	a2000c04 	addi	r8,r20,48
 8008de4:	1021883a 	mov	r16,r2
 8008de8:	1a000005 	stb	r8,0(r3)
 8008dec:	800d883a 	mov	r6,r16
 8008df0:	880f883a 	mov	r7,r17
 8008df4:	a809883a 	mov	r4,r21
 8008df8:	4029883a 	mov	r20,r8
 8008dfc:	80050480 	call	8005048 <__gedf2>
 8008e00:	00841d16 	blt	zero,r2,8009e78 <_dtoa_r+0x15f4>
 8008e04:	800d883a 	mov	r6,r16
 8008e08:	880f883a 	mov	r7,r17
 8008e0c:	0009883a 	mov	r4,zero
 8008e10:	014ffc34 	movhi	r5,16368
 8008e14:	801193c0 	call	801193c <__subdf3>
 8008e18:	d9401217 	ldw	r5,72(sp)
 8008e1c:	100d883a 	mov	r6,r2
 8008e20:	180f883a 	mov	r7,r3
 8008e24:	a809883a 	mov	r4,r21
 8008e28:	80050480 	call	8005048 <__gedf2>
 8008e2c:	db001617 	ldw	r12,88(sp)
 8008e30:	00840e16 	blt	zero,r2,8009e6c <_dtoa_r+0x15e8>
 8008e34:	00800044 	movi	r2,1
 8008e38:	13006b0e 	bge	r2,r12,8008fe8 <_dtoa_r+0x764>
 8008e3c:	d9000717 	ldw	r4,28(sp)
 8008e40:	dd800f15 	stw	r22,60(sp)
 8008e44:	dcc01015 	stw	r19,64(sp)
 8008e48:	2319883a 	add	r12,r4,r12
 8008e4c:	dcc01217 	ldw	r19,72(sp)
 8008e50:	602d883a 	mov	r22,r12
 8008e54:	dc801215 	stw	r18,72(sp)
 8008e58:	b825883a 	mov	r18,r23
 8008e5c:	00000906 	br	8008e84 <_dtoa_r+0x600>
 8008e60:	801193c0 	call	801193c <__subdf3>
 8008e64:	a80d883a 	mov	r6,r21
 8008e68:	980f883a 	mov	r7,r19
 8008e6c:	1009883a 	mov	r4,r2
 8008e70:	180b883a 	mov	r5,r3
 8008e74:	80118480 	call	8011848 <__ledf2>
 8008e78:	1003e816 	blt	r2,zero,8009e1c <_dtoa_r+0x1598>
 8008e7c:	b825883a 	mov	r18,r23
 8008e80:	bd83e926 	beq	r23,r22,8009e28 <_dtoa_r+0x15a4>
 8008e84:	a809883a 	mov	r4,r21
 8008e88:	980b883a 	mov	r5,r19
 8008e8c:	000d883a 	mov	r6,zero
 8008e90:	01d00934 	movhi	r7,16420
 8008e94:	80051240 	call	8005124 <__muldf3>
 8008e98:	000d883a 	mov	r6,zero
 8008e9c:	01d00934 	movhi	r7,16420
 8008ea0:	8009883a 	mov	r4,r16
 8008ea4:	880b883a 	mov	r5,r17
 8008ea8:	102b883a 	mov	r21,r2
 8008eac:	1827883a 	mov	r19,r3
 8008eb0:	80051240 	call	8005124 <__muldf3>
 8008eb4:	180b883a 	mov	r5,r3
 8008eb8:	1009883a 	mov	r4,r2
 8008ebc:	1821883a 	mov	r16,r3
 8008ec0:	1023883a 	mov	r17,r2
 8008ec4:	80122380 	call	8012238 <__fixdfsi>
 8008ec8:	1009883a 	mov	r4,r2
 8008ecc:	1029883a 	mov	r20,r2
 8008ed0:	80122b80 	call	80122b8 <__floatsidf>
 8008ed4:	8809883a 	mov	r4,r17
 8008ed8:	800b883a 	mov	r5,r16
 8008edc:	100d883a 	mov	r6,r2
 8008ee0:	180f883a 	mov	r7,r3
 8008ee4:	801193c0 	call	801193c <__subdf3>
 8008ee8:	a5000c04 	addi	r20,r20,48
 8008eec:	a80d883a 	mov	r6,r21
 8008ef0:	980f883a 	mov	r7,r19
 8008ef4:	1009883a 	mov	r4,r2
 8008ef8:	180b883a 	mov	r5,r3
 8008efc:	95000005 	stb	r20,0(r18)
 8008f00:	1021883a 	mov	r16,r2
 8008f04:	1823883a 	mov	r17,r3
 8008f08:	80118480 	call	8011848 <__ledf2>
 8008f0c:	bdc00044 	addi	r23,r23,1
 8008f10:	800d883a 	mov	r6,r16
 8008f14:	880f883a 	mov	r7,r17
 8008f18:	0009883a 	mov	r4,zero
 8008f1c:	014ffc34 	movhi	r5,16368
 8008f20:	103fcf0e 	bge	r2,zero,8008e60 <_dtoa_r+0x5dc>
 8008f24:	d8c01317 	ldw	r3,76(sp)
 8008f28:	d8c00515 	stw	r3,20(sp)
 8008f2c:	d9400917 	ldw	r5,36(sp)
 8008f30:	e009883a 	mov	r4,fp
 8008f34:	800bdd00 	call	800bdd0 <_Bfree>
 8008f38:	d9000517 	ldw	r4,20(sp)
 8008f3c:	d9802317 	ldw	r6,140(sp)
 8008f40:	d9c02517 	ldw	r7,148(sp)
 8008f44:	b8000005 	stb	zero,0(r23)
 8008f48:	20800044 	addi	r2,r4,1
 8008f4c:	30800015 	stw	r2,0(r6)
 8008f50:	3802aa26 	beq	r7,zero,80099fc <_dtoa_r+0x1178>
 8008f54:	3dc00015 	stw	r23,0(r7)
 8008f58:	d8800717 	ldw	r2,28(sp)
 8008f5c:	003e7906 	br	8008944 <_dtoa_r+0xc0>
 8008f60:	00800434 	movhi	r2,16
 8008f64:	10bfffc4 	addi	r2,r2,-1
 8008f68:	88a2703a 	and	r17,r17,r2
 8008f6c:	883e851e 	bne	r17,zero,8008984 <_dtoa_r+0x100>
 8008f70:	00820074 	movhi	r2,2049
 8008f74:	10950504 	addi	r2,r2,21524
 8008f78:	003e8406 	br	800898c <_dtoa_r+0x108>
 8008f7c:	10c00204 	addi	r3,r2,8
 8008f80:	003e8706 	br	80089a0 <_dtoa_r+0x11c>
 8008f84:	01400434 	movhi	r5,16
 8008f88:	297fffc4 	addi	r5,r5,-1
 8008f8c:	994a703a 	and	r5,r19,r5
 8008f90:	9009883a 	mov	r4,r18
 8008f94:	843f0044 	addi	r16,r16,-1023
 8008f98:	294ffc34 	orhi	r5,r5,16368
 8008f9c:	dd800217 	ldw	r22,8(sp)
 8008fa0:	d8001115 	stw	zero,68(sp)
 8008fa4:	003ea506 	br	8008a3c <_dtoa_r+0x1b8>
 8008fa8:	00820074 	movhi	r2,2049
 8008fac:	1094fc04 	addi	r2,r2,21488
 8008fb0:	003e6406 	br	8008944 <_dtoa_r+0xc0>
 8008fb4:	e0001115 	stw	zero,68(fp)
 8008fb8:	000b883a 	mov	r5,zero
 8008fbc:	e009883a 	mov	r4,fp
 8008fc0:	800bd280 	call	800bd28 <_Balloc>
 8008fc4:	01bfffc4 	movi	r6,-1
 8008fc8:	01c00044 	movi	r7,1
 8008fcc:	d8800715 	stw	r2,28(sp)
 8008fd0:	d9800c15 	stw	r6,48(sp)
 8008fd4:	e0801015 	stw	r2,64(fp)
 8008fd8:	d8000315 	stw	zero,12(sp)
 8008fdc:	d9c00b15 	stw	r7,44(sp)
 8008fe0:	d9800615 	stw	r6,24(sp)
 8008fe4:	d8002215 	stw	zero,136(sp)
 8008fe8:	d8800117 	ldw	r2,4(sp)
 8008fec:	10008916 	blt	r2,zero,8009214 <_dtoa_r+0x990>
 8008ff0:	d9000517 	ldw	r4,20(sp)
 8008ff4:	00c00384 	movi	r3,14
 8008ff8:	19008616 	blt	r3,r4,8009214 <_dtoa_r+0x990>
 8008ffc:	200490fa 	slli	r2,r4,3
 8009000:	00c20074 	movhi	r3,2049
 8009004:	d9802217 	ldw	r6,136(sp)
 8009008:	18d52304 	addi	r3,r3,21644
 800900c:	1885883a 	add	r2,r3,r2
 8009010:	14000017 	ldw	r16,0(r2)
 8009014:	14400117 	ldw	r17,4(r2)
 8009018:	30016316 	blt	r6,zero,80095a8 <_dtoa_r+0xd24>
 800901c:	800d883a 	mov	r6,r16
 8009020:	880f883a 	mov	r7,r17
 8009024:	9009883a 	mov	r4,r18
 8009028:	980b883a 	mov	r5,r19
 800902c:	8010df00 	call	8010df0 <__divdf3>
 8009030:	180b883a 	mov	r5,r3
 8009034:	1009883a 	mov	r4,r2
 8009038:	80122380 	call	8012238 <__fixdfsi>
 800903c:	1009883a 	mov	r4,r2
 8009040:	102b883a 	mov	r21,r2
 8009044:	80122b80 	call	80122b8 <__floatsidf>
 8009048:	800d883a 	mov	r6,r16
 800904c:	880f883a 	mov	r7,r17
 8009050:	1009883a 	mov	r4,r2
 8009054:	180b883a 	mov	r5,r3
 8009058:	80051240 	call	8005124 <__muldf3>
 800905c:	100d883a 	mov	r6,r2
 8009060:	180f883a 	mov	r7,r3
 8009064:	9009883a 	mov	r4,r18
 8009068:	980b883a 	mov	r5,r19
 800906c:	801193c0 	call	801193c <__subdf3>
 8009070:	d9c00717 	ldw	r7,28(sp)
 8009074:	1009883a 	mov	r4,r2
 8009078:	a8800c04 	addi	r2,r21,48
 800907c:	38800005 	stb	r2,0(r7)
 8009080:	3dc00044 	addi	r23,r7,1
 8009084:	d9c00617 	ldw	r7,24(sp)
 8009088:	01800044 	movi	r6,1
 800908c:	180b883a 	mov	r5,r3
 8009090:	2005883a 	mov	r2,r4
 8009094:	39803826 	beq	r7,r6,8009178 <_dtoa_r+0x8f4>
 8009098:	000d883a 	mov	r6,zero
 800909c:	01d00934 	movhi	r7,16420
 80090a0:	80051240 	call	8005124 <__muldf3>
 80090a4:	000d883a 	mov	r6,zero
 80090a8:	000f883a 	mov	r7,zero
 80090ac:	1009883a 	mov	r4,r2
 80090b0:	180b883a 	mov	r5,r3
 80090b4:	1025883a 	mov	r18,r2
 80090b8:	1827883a 	mov	r19,r3
 80090bc:	80117c00 	call	80117c0 <__eqdf2>
 80090c0:	103f9a26 	beq	r2,zero,8008f2c <_dtoa_r+0x6a8>
 80090c4:	d9c00617 	ldw	r7,24(sp)
 80090c8:	d8c00717 	ldw	r3,28(sp)
 80090cc:	b829883a 	mov	r20,r23
 80090d0:	38bfffc4 	addi	r2,r7,-1
 80090d4:	18ad883a 	add	r22,r3,r2
 80090d8:	00000a06 	br	8009104 <_dtoa_r+0x880>
 80090dc:	80051240 	call	8005124 <__muldf3>
 80090e0:	000d883a 	mov	r6,zero
 80090e4:	000f883a 	mov	r7,zero
 80090e8:	1009883a 	mov	r4,r2
 80090ec:	180b883a 	mov	r5,r3
 80090f0:	1025883a 	mov	r18,r2
 80090f4:	1827883a 	mov	r19,r3
 80090f8:	b829883a 	mov	r20,r23
 80090fc:	80117c00 	call	80117c0 <__eqdf2>
 8009100:	103f8a26 	beq	r2,zero,8008f2c <_dtoa_r+0x6a8>
 8009104:	800d883a 	mov	r6,r16
 8009108:	880f883a 	mov	r7,r17
 800910c:	9009883a 	mov	r4,r18
 8009110:	980b883a 	mov	r5,r19
 8009114:	8010df00 	call	8010df0 <__divdf3>
 8009118:	180b883a 	mov	r5,r3
 800911c:	1009883a 	mov	r4,r2
 8009120:	80122380 	call	8012238 <__fixdfsi>
 8009124:	1009883a 	mov	r4,r2
 8009128:	102b883a 	mov	r21,r2
 800912c:	80122b80 	call	80122b8 <__floatsidf>
 8009130:	800d883a 	mov	r6,r16
 8009134:	880f883a 	mov	r7,r17
 8009138:	1009883a 	mov	r4,r2
 800913c:	180b883a 	mov	r5,r3
 8009140:	80051240 	call	8005124 <__muldf3>
 8009144:	100d883a 	mov	r6,r2
 8009148:	180f883a 	mov	r7,r3
 800914c:	9009883a 	mov	r4,r18
 8009150:	980b883a 	mov	r5,r19
 8009154:	801193c0 	call	801193c <__subdf3>
 8009158:	aa000c04 	addi	r8,r21,48
 800915c:	a2000005 	stb	r8,0(r20)
 8009160:	000d883a 	mov	r6,zero
 8009164:	01d00934 	movhi	r7,16420
 8009168:	1009883a 	mov	r4,r2
 800916c:	180b883a 	mov	r5,r3
 8009170:	a5c00044 	addi	r23,r20,1
 8009174:	b53fd91e 	bne	r22,r20,80090dc <_dtoa_r+0x858>
 8009178:	100d883a 	mov	r6,r2
 800917c:	180f883a 	mov	r7,r3
 8009180:	1009883a 	mov	r4,r2
 8009184:	180b883a 	mov	r5,r3
 8009188:	80105440 	call	8010544 <__adddf3>
 800918c:	100d883a 	mov	r6,r2
 8009190:	180f883a 	mov	r7,r3
 8009194:	8009883a 	mov	r4,r16
 8009198:	880b883a 	mov	r5,r17
 800919c:	1027883a 	mov	r19,r2
 80091a0:	1825883a 	mov	r18,r3
 80091a4:	80118480 	call	8011848 <__ledf2>
 80091a8:	10000816 	blt	r2,zero,80091cc <_dtoa_r+0x948>
 80091ac:	980d883a 	mov	r6,r19
 80091b0:	900f883a 	mov	r7,r18
 80091b4:	8009883a 	mov	r4,r16
 80091b8:	880b883a 	mov	r5,r17
 80091bc:	80117c00 	call	80117c0 <__eqdf2>
 80091c0:	103f5a1e 	bne	r2,zero,8008f2c <_dtoa_r+0x6a8>
 80091c4:	ad40004c 	andi	r21,r21,1
 80091c8:	a83f5826 	beq	r21,zero,8008f2c <_dtoa_r+0x6a8>
 80091cc:	bd3fffc3 	ldbu	r20,-1(r23)
 80091d0:	b8bfffc4 	addi	r2,r23,-1
 80091d4:	1007883a 	mov	r3,r2
 80091d8:	01400e44 	movi	r5,57
 80091dc:	d9800717 	ldw	r6,28(sp)
 80091e0:	00000506 	br	80091f8 <_dtoa_r+0x974>
 80091e4:	18ffffc4 	addi	r3,r3,-1
 80091e8:	11824726 	beq	r2,r6,8009b08 <_dtoa_r+0x1284>
 80091ec:	1d000003 	ldbu	r20,0(r3)
 80091f0:	102f883a 	mov	r23,r2
 80091f4:	10bfffc4 	addi	r2,r2,-1
 80091f8:	a1003fcc 	andi	r4,r20,255
 80091fc:	2100201c 	xori	r4,r4,128
 8009200:	213fe004 	addi	r4,r4,-128
 8009204:	217ff726 	beq	r4,r5,80091e4 <_dtoa_r+0x960>
 8009208:	a2000044 	addi	r8,r20,1
 800920c:	12000005 	stb	r8,0(r2)
 8009210:	003f4606 	br	8008f2c <_dtoa_r+0x6a8>
 8009214:	d9000b17 	ldw	r4,44(sp)
 8009218:	2000c826 	beq	r4,zero,800953c <_dtoa_r+0xcb8>
 800921c:	d9800317 	ldw	r6,12(sp)
 8009220:	00c00044 	movi	r3,1
 8009224:	1980f90e 	bge	r3,r6,800960c <_dtoa_r+0xd88>
 8009228:	d8800617 	ldw	r2,24(sp)
 800922c:	d8c00a17 	ldw	r3,40(sp)
 8009230:	157fffc4 	addi	r21,r2,-1
 8009234:	1d41f316 	blt	r3,r21,8009a04 <_dtoa_r+0x1180>
 8009238:	1d6bc83a 	sub	r21,r3,r21
 800923c:	d9c00617 	ldw	r7,24(sp)
 8009240:	3802aa16 	blt	r7,zero,8009cec <_dtoa_r+0x1468>
 8009244:	dd000817 	ldw	r20,32(sp)
 8009248:	d8800617 	ldw	r2,24(sp)
 800924c:	d8c00817 	ldw	r3,32(sp)
 8009250:	01400044 	movi	r5,1
 8009254:	e009883a 	mov	r4,fp
 8009258:	1887883a 	add	r3,r3,r2
 800925c:	d8c00815 	stw	r3,32(sp)
 8009260:	b0ad883a 	add	r22,r22,r2
 8009264:	800c15c0 	call	800c15c <__i2b>
 8009268:	1023883a 	mov	r17,r2
 800926c:	a0000826 	beq	r20,zero,8009290 <_dtoa_r+0xa0c>
 8009270:	0580070e 	bge	zero,r22,8009290 <_dtoa_r+0xa0c>
 8009274:	a005883a 	mov	r2,r20
 8009278:	b500b916 	blt	r22,r20,8009560 <_dtoa_r+0xcdc>
 800927c:	d9000817 	ldw	r4,32(sp)
 8009280:	a0a9c83a 	sub	r20,r20,r2
 8009284:	b0adc83a 	sub	r22,r22,r2
 8009288:	2089c83a 	sub	r4,r4,r2
 800928c:	d9000815 	stw	r4,32(sp)
 8009290:	d9800a17 	ldw	r6,40(sp)
 8009294:	0181810e 	bge	zero,r6,800989c <_dtoa_r+0x1018>
 8009298:	d9c00b17 	ldw	r7,44(sp)
 800929c:	3800b326 	beq	r7,zero,800956c <_dtoa_r+0xce8>
 80092a0:	a800b226 	beq	r21,zero,800956c <_dtoa_r+0xce8>
 80092a4:	880b883a 	mov	r5,r17
 80092a8:	a80d883a 	mov	r6,r21
 80092ac:	e009883a 	mov	r4,fp
 80092b0:	800c4240 	call	800c424 <__pow5mult>
 80092b4:	d9800917 	ldw	r6,36(sp)
 80092b8:	100b883a 	mov	r5,r2
 80092bc:	e009883a 	mov	r4,fp
 80092c0:	1023883a 	mov	r17,r2
 80092c4:	800c1980 	call	800c198 <__multiply>
 80092c8:	1021883a 	mov	r16,r2
 80092cc:	d8800a17 	ldw	r2,40(sp)
 80092d0:	d9400917 	ldw	r5,36(sp)
 80092d4:	e009883a 	mov	r4,fp
 80092d8:	1545c83a 	sub	r2,r2,r21
 80092dc:	d8800a15 	stw	r2,40(sp)
 80092e0:	800bdd00 	call	800bdd0 <_Bfree>
 80092e4:	d8c00a17 	ldw	r3,40(sp)
 80092e8:	18009f1e 	bne	r3,zero,8009568 <_dtoa_r+0xce4>
 80092ec:	05c00044 	movi	r23,1
 80092f0:	e009883a 	mov	r4,fp
 80092f4:	b80b883a 	mov	r5,r23
 80092f8:	800c15c0 	call	800c15c <__i2b>
 80092fc:	d9000d17 	ldw	r4,52(sp)
 8009300:	102b883a 	mov	r21,r2
 8009304:	2000ce26 	beq	r4,zero,8009640 <_dtoa_r+0xdbc>
 8009308:	200d883a 	mov	r6,r4
 800930c:	100b883a 	mov	r5,r2
 8009310:	e009883a 	mov	r4,fp
 8009314:	800c4240 	call	800c424 <__pow5mult>
 8009318:	d9800317 	ldw	r6,12(sp)
 800931c:	102b883a 	mov	r21,r2
 8009320:	b981810e 	bge	r23,r6,8009928 <_dtoa_r+0x10a4>
 8009324:	0027883a 	mov	r19,zero
 8009328:	a8800417 	ldw	r2,16(r21)
 800932c:	05c00804 	movi	r23,32
 8009330:	10800104 	addi	r2,r2,4
 8009334:	1085883a 	add	r2,r2,r2
 8009338:	1085883a 	add	r2,r2,r2
 800933c:	a885883a 	add	r2,r21,r2
 8009340:	11000017 	ldw	r4,0(r2)
 8009344:	800c0440 	call	800c044 <__hi0bits>
 8009348:	b885c83a 	sub	r2,r23,r2
 800934c:	1585883a 	add	r2,r2,r22
 8009350:	108007cc 	andi	r2,r2,31
 8009354:	1000b326 	beq	r2,zero,8009624 <_dtoa_r+0xda0>
 8009358:	00c00804 	movi	r3,32
 800935c:	1887c83a 	sub	r3,r3,r2
 8009360:	01000104 	movi	r4,4
 8009364:	20c2cd0e 	bge	r4,r3,8009e9c <_dtoa_r+0x1618>
 8009368:	00c00704 	movi	r3,28
 800936c:	1885c83a 	sub	r2,r3,r2
 8009370:	d8c00817 	ldw	r3,32(sp)
 8009374:	a0a9883a 	add	r20,r20,r2
 8009378:	b0ad883a 	add	r22,r22,r2
 800937c:	1887883a 	add	r3,r3,r2
 8009380:	d8c00815 	stw	r3,32(sp)
 8009384:	d9800817 	ldw	r6,32(sp)
 8009388:	0180040e 	bge	zero,r6,800939c <_dtoa_r+0xb18>
 800938c:	800b883a 	mov	r5,r16
 8009390:	e009883a 	mov	r4,fp
 8009394:	800c5640 	call	800c564 <__lshift>
 8009398:	1021883a 	mov	r16,r2
 800939c:	0580050e 	bge	zero,r22,80093b4 <_dtoa_r+0xb30>
 80093a0:	a80b883a 	mov	r5,r21
 80093a4:	b00d883a 	mov	r6,r22
 80093a8:	e009883a 	mov	r4,fp
 80093ac:	800c5640 	call	800c564 <__lshift>
 80093b0:	102b883a 	mov	r21,r2
 80093b4:	d9c00e17 	ldw	r7,56(sp)
 80093b8:	3801211e 	bne	r7,zero,8009840 <_dtoa_r+0xfbc>
 80093bc:	d9800617 	ldw	r6,24(sp)
 80093c0:	0181380e 	bge	zero,r6,80098a4 <_dtoa_r+0x1020>
 80093c4:	d8c00b17 	ldw	r3,44(sp)
 80093c8:	1800ab1e 	bne	r3,zero,8009678 <_dtoa_r+0xdf4>
 80093cc:	dc800717 	ldw	r18,28(sp)
 80093d0:	dcc00617 	ldw	r19,24(sp)
 80093d4:	9029883a 	mov	r20,r18
 80093d8:	00000206 	br	80093e4 <_dtoa_r+0xb60>
 80093dc:	800bdf80 	call	800bdf8 <__multadd>
 80093e0:	1021883a 	mov	r16,r2
 80093e4:	a80b883a 	mov	r5,r21
 80093e8:	8009883a 	mov	r4,r16
 80093ec:	800865c0 	call	800865c <quorem>
 80093f0:	10800c04 	addi	r2,r2,48
 80093f4:	90800005 	stb	r2,0(r18)
 80093f8:	94800044 	addi	r18,r18,1
 80093fc:	9507c83a 	sub	r3,r18,r20
 8009400:	000f883a 	mov	r7,zero
 8009404:	01800284 	movi	r6,10
 8009408:	800b883a 	mov	r5,r16
 800940c:	e009883a 	mov	r4,fp
 8009410:	1cfff216 	blt	r3,r19,80093dc <_dtoa_r+0xb58>
 8009414:	1011883a 	mov	r8,r2
 8009418:	d8800617 	ldw	r2,24(sp)
 800941c:	0082370e 	bge	zero,r2,8009cfc <_dtoa_r+0x1478>
 8009420:	d9000717 	ldw	r4,28(sp)
 8009424:	0025883a 	mov	r18,zero
 8009428:	20af883a 	add	r23,r4,r2
 800942c:	01800044 	movi	r6,1
 8009430:	800b883a 	mov	r5,r16
 8009434:	e009883a 	mov	r4,fp
 8009438:	da001715 	stw	r8,92(sp)
 800943c:	800c5640 	call	800c564 <__lshift>
 8009440:	a80b883a 	mov	r5,r21
 8009444:	1009883a 	mov	r4,r2
 8009448:	d8800915 	stw	r2,36(sp)
 800944c:	800c6ac0 	call	800c6ac <__mcmp>
 8009450:	da001717 	ldw	r8,92(sp)
 8009454:	0081800e 	bge	zero,r2,8009a58 <_dtoa_r+0x11d4>
 8009458:	b93fffc3 	ldbu	r4,-1(r23)
 800945c:	b8bfffc4 	addi	r2,r23,-1
 8009460:	1007883a 	mov	r3,r2
 8009464:	01800e44 	movi	r6,57
 8009468:	d9c00717 	ldw	r7,28(sp)
 800946c:	00000506 	br	8009484 <_dtoa_r+0xc00>
 8009470:	18ffffc4 	addi	r3,r3,-1
 8009474:	11c12326 	beq	r2,r7,8009904 <_dtoa_r+0x1080>
 8009478:	19000003 	ldbu	r4,0(r3)
 800947c:	102f883a 	mov	r23,r2
 8009480:	10bfffc4 	addi	r2,r2,-1
 8009484:	21403fcc 	andi	r5,r4,255
 8009488:	2940201c 	xori	r5,r5,128
 800948c:	297fe004 	addi	r5,r5,-128
 8009490:	29bff726 	beq	r5,r6,8009470 <_dtoa_r+0xbec>
 8009494:	21000044 	addi	r4,r4,1
 8009498:	11000005 	stb	r4,0(r2)
 800949c:	a80b883a 	mov	r5,r21
 80094a0:	e009883a 	mov	r4,fp
 80094a4:	800bdd00 	call	800bdd0 <_Bfree>
 80094a8:	883ea026 	beq	r17,zero,8008f2c <_dtoa_r+0x6a8>
 80094ac:	90000426 	beq	r18,zero,80094c0 <_dtoa_r+0xc3c>
 80094b0:	94400326 	beq	r18,r17,80094c0 <_dtoa_r+0xc3c>
 80094b4:	900b883a 	mov	r5,r18
 80094b8:	e009883a 	mov	r4,fp
 80094bc:	800bdd00 	call	800bdd0 <_Bfree>
 80094c0:	880b883a 	mov	r5,r17
 80094c4:	e009883a 	mov	r4,fp
 80094c8:	800bdd00 	call	800bdd0 <_Bfree>
 80094cc:	003e9706 	br	8008f2c <_dtoa_r+0x6a8>
 80094d0:	01800044 	movi	r6,1
 80094d4:	d9800e15 	stw	r6,56(sp)
 80094d8:	003d9606 	br	8008b34 <_dtoa_r+0x2b0>
 80094dc:	d8800817 	ldw	r2,32(sp)
 80094e0:	d8c00517 	ldw	r3,20(sp)
 80094e4:	d8000d15 	stw	zero,52(sp)
 80094e8:	10c5c83a 	sub	r2,r2,r3
 80094ec:	00c9c83a 	sub	r4,zero,r3
 80094f0:	d8800815 	stw	r2,32(sp)
 80094f4:	d9000a15 	stw	r4,40(sp)
 80094f8:	003d9706 	br	8008b58 <_dtoa_r+0x2d4>
 80094fc:	05adc83a 	sub	r22,zero,r22
 8009500:	dd800815 	stw	r22,32(sp)
 8009504:	002d883a 	mov	r22,zero
 8009508:	003d8e06 	br	8008b44 <_dtoa_r+0x2c0>
 800950c:	d9000517 	ldw	r4,20(sp)
 8009510:	80122b80 	call	80122b8 <__floatsidf>
 8009514:	100d883a 	mov	r6,r2
 8009518:	180f883a 	mov	r7,r3
 800951c:	a009883a 	mov	r4,r20
 8009520:	880b883a 	mov	r5,r17
 8009524:	80117c00 	call	80117c0 <__eqdf2>
 8009528:	103d7126 	beq	r2,zero,8008af0 <_dtoa_r+0x26c>
 800952c:	d9c00517 	ldw	r7,20(sp)
 8009530:	39ffffc4 	addi	r7,r7,-1
 8009534:	d9c00515 	stw	r7,20(sp)
 8009538:	003d6d06 	br	8008af0 <_dtoa_r+0x26c>
 800953c:	dd400a17 	ldw	r21,40(sp)
 8009540:	dd000817 	ldw	r20,32(sp)
 8009544:	0023883a 	mov	r17,zero
 8009548:	003f4806 	br	800926c <_dtoa_r+0x9e8>
 800954c:	10e3c83a 	sub	r17,r2,r3
 8009550:	9448983a 	sll	r4,r18,r17
 8009554:	003d3206 	br	8008a20 <_dtoa_r+0x19c>
 8009558:	d8000e15 	stw	zero,56(sp)
 800955c:	003d7506 	br	8008b34 <_dtoa_r+0x2b0>
 8009560:	b005883a 	mov	r2,r22
 8009564:	003f4506 	br	800927c <_dtoa_r+0x9f8>
 8009568:	dc000915 	stw	r16,36(sp)
 800956c:	d9800a17 	ldw	r6,40(sp)
 8009570:	d9400917 	ldw	r5,36(sp)
 8009574:	e009883a 	mov	r4,fp
 8009578:	800c4240 	call	800c424 <__pow5mult>
 800957c:	1021883a 	mov	r16,r2
 8009580:	003f5a06 	br	80092ec <_dtoa_r+0xa68>
 8009584:	01c00044 	movi	r7,1
 8009588:	d9c00b15 	stw	r7,44(sp)
 800958c:	d8802217 	ldw	r2,136(sp)
 8009590:	0081280e 	bge	zero,r2,8009a34 <_dtoa_r+0x11b0>
 8009594:	100d883a 	mov	r6,r2
 8009598:	1021883a 	mov	r16,r2
 800959c:	d8800c15 	stw	r2,48(sp)
 80095a0:	d8800615 	stw	r2,24(sp)
 80095a4:	003d8806 	br	8008bc8 <_dtoa_r+0x344>
 80095a8:	d8800617 	ldw	r2,24(sp)
 80095ac:	00be9b16 	blt	zero,r2,800901c <_dtoa_r+0x798>
 80095b0:	10010f1e 	bne	r2,zero,80099f0 <_dtoa_r+0x116c>
 80095b4:	880b883a 	mov	r5,r17
 80095b8:	000d883a 	mov	r6,zero
 80095bc:	01d00534 	movhi	r7,16404
 80095c0:	8009883a 	mov	r4,r16
 80095c4:	80051240 	call	8005124 <__muldf3>
 80095c8:	900d883a 	mov	r6,r18
 80095cc:	980f883a 	mov	r7,r19
 80095d0:	1009883a 	mov	r4,r2
 80095d4:	180b883a 	mov	r5,r3
 80095d8:	80050480 	call	8005048 <__gedf2>
 80095dc:	002b883a 	mov	r21,zero
 80095e0:	0023883a 	mov	r17,zero
 80095e4:	1000bf16 	blt	r2,zero,80098e4 <_dtoa_r+0x1060>
 80095e8:	d9802217 	ldw	r6,136(sp)
 80095ec:	ddc00717 	ldw	r23,28(sp)
 80095f0:	018c303a 	nor	r6,zero,r6
 80095f4:	d9800515 	stw	r6,20(sp)
 80095f8:	a80b883a 	mov	r5,r21
 80095fc:	e009883a 	mov	r4,fp
 8009600:	800bdd00 	call	800bdd0 <_Bfree>
 8009604:	883e4926 	beq	r17,zero,8008f2c <_dtoa_r+0x6a8>
 8009608:	003fad06 	br	80094c0 <_dtoa_r+0xc3c>
 800960c:	d9c01117 	ldw	r7,68(sp)
 8009610:	3801bc26 	beq	r7,zero,8009d04 <_dtoa_r+0x1480>
 8009614:	10810cc4 	addi	r2,r2,1075
 8009618:	dd400a17 	ldw	r21,40(sp)
 800961c:	dd000817 	ldw	r20,32(sp)
 8009620:	003f0a06 	br	800924c <_dtoa_r+0x9c8>
 8009624:	00800704 	movi	r2,28
 8009628:	d9000817 	ldw	r4,32(sp)
 800962c:	a0a9883a 	add	r20,r20,r2
 8009630:	b0ad883a 	add	r22,r22,r2
 8009634:	2089883a 	add	r4,r4,r2
 8009638:	d9000815 	stw	r4,32(sp)
 800963c:	003f5106 	br	8009384 <_dtoa_r+0xb00>
 8009640:	d8c00317 	ldw	r3,12(sp)
 8009644:	b8c1fc0e 	bge	r23,r3,8009e38 <_dtoa_r+0x15b4>
 8009648:	0027883a 	mov	r19,zero
 800964c:	b805883a 	mov	r2,r23
 8009650:	003f3e06 	br	800934c <_dtoa_r+0xac8>
 8009654:	880b883a 	mov	r5,r17
 8009658:	e009883a 	mov	r4,fp
 800965c:	000f883a 	mov	r7,zero
 8009660:	01800284 	movi	r6,10
 8009664:	800bdf80 	call	800bdf8 <__multadd>
 8009668:	d9000c17 	ldw	r4,48(sp)
 800966c:	1023883a 	mov	r17,r2
 8009670:	0102040e 	bge	zero,r4,8009e84 <_dtoa_r+0x1600>
 8009674:	d9000615 	stw	r4,24(sp)
 8009678:	0500050e 	bge	zero,r20,8009690 <_dtoa_r+0xe0c>
 800967c:	880b883a 	mov	r5,r17
 8009680:	a00d883a 	mov	r6,r20
 8009684:	e009883a 	mov	r4,fp
 8009688:	800c5640 	call	800c564 <__lshift>
 800968c:	1023883a 	mov	r17,r2
 8009690:	9801241e 	bne	r19,zero,8009b24 <_dtoa_r+0x12a0>
 8009694:	8829883a 	mov	r20,r17
 8009698:	d9000617 	ldw	r4,24(sp)
 800969c:	dcc00717 	ldw	r19,28(sp)
 80096a0:	9480004c 	andi	r18,r18,1
 80096a4:	20bfffc4 	addi	r2,r4,-1
 80096a8:	9885883a 	add	r2,r19,r2
 80096ac:	d8800415 	stw	r2,16(sp)
 80096b0:	dc800615 	stw	r18,24(sp)
 80096b4:	a80b883a 	mov	r5,r21
 80096b8:	8009883a 	mov	r4,r16
 80096bc:	800865c0 	call	800865c <quorem>
 80096c0:	880b883a 	mov	r5,r17
 80096c4:	8009883a 	mov	r4,r16
 80096c8:	102f883a 	mov	r23,r2
 80096cc:	800c6ac0 	call	800c6ac <__mcmp>
 80096d0:	a80b883a 	mov	r5,r21
 80096d4:	a00d883a 	mov	r6,r20
 80096d8:	e009883a 	mov	r4,fp
 80096dc:	102d883a 	mov	r22,r2
 80096e0:	800c70c0 	call	800c70c <__mdiff>
 80096e4:	1007883a 	mov	r3,r2
 80096e8:	10800317 	ldw	r2,12(r2)
 80096ec:	bc800c04 	addi	r18,r23,48
 80096f0:	180b883a 	mov	r5,r3
 80096f4:	10004e1e 	bne	r2,zero,8009830 <_dtoa_r+0xfac>
 80096f8:	8009883a 	mov	r4,r16
 80096fc:	d8c01615 	stw	r3,88(sp)
 8009700:	800c6ac0 	call	800c6ac <__mcmp>
 8009704:	d8c01617 	ldw	r3,88(sp)
 8009708:	e009883a 	mov	r4,fp
 800970c:	d8801615 	stw	r2,88(sp)
 8009710:	180b883a 	mov	r5,r3
 8009714:	800bdd00 	call	800bdd0 <_Bfree>
 8009718:	d8801617 	ldw	r2,88(sp)
 800971c:	1000041e 	bne	r2,zero,8009730 <_dtoa_r+0xeac>
 8009720:	d9800317 	ldw	r6,12(sp)
 8009724:	3000021e 	bne	r6,zero,8009730 <_dtoa_r+0xeac>
 8009728:	d8c00617 	ldw	r3,24(sp)
 800972c:	18003726 	beq	r3,zero,800980c <_dtoa_r+0xf88>
 8009730:	b0002016 	blt	r22,zero,80097b4 <_dtoa_r+0xf30>
 8009734:	b000041e 	bne	r22,zero,8009748 <_dtoa_r+0xec4>
 8009738:	d9000317 	ldw	r4,12(sp)
 800973c:	2000021e 	bne	r4,zero,8009748 <_dtoa_r+0xec4>
 8009740:	d8c00617 	ldw	r3,24(sp)
 8009744:	18001b26 	beq	r3,zero,80097b4 <_dtoa_r+0xf30>
 8009748:	00810716 	blt	zero,r2,8009b68 <_dtoa_r+0x12e4>
 800974c:	d8c00417 	ldw	r3,16(sp)
 8009750:	9d800044 	addi	r22,r19,1
 8009754:	9c800005 	stb	r18,0(r19)
 8009758:	b02f883a 	mov	r23,r22
 800975c:	98c10626 	beq	r19,r3,8009b78 <_dtoa_r+0x12f4>
 8009760:	800b883a 	mov	r5,r16
 8009764:	000f883a 	mov	r7,zero
 8009768:	01800284 	movi	r6,10
 800976c:	e009883a 	mov	r4,fp
 8009770:	800bdf80 	call	800bdf8 <__multadd>
 8009774:	1021883a 	mov	r16,r2
 8009778:	000f883a 	mov	r7,zero
 800977c:	01800284 	movi	r6,10
 8009780:	880b883a 	mov	r5,r17
 8009784:	e009883a 	mov	r4,fp
 8009788:	8d002526 	beq	r17,r20,8009820 <_dtoa_r+0xf9c>
 800978c:	800bdf80 	call	800bdf8 <__multadd>
 8009790:	a00b883a 	mov	r5,r20
 8009794:	000f883a 	mov	r7,zero
 8009798:	01800284 	movi	r6,10
 800979c:	e009883a 	mov	r4,fp
 80097a0:	1023883a 	mov	r17,r2
 80097a4:	800bdf80 	call	800bdf8 <__multadd>
 80097a8:	1029883a 	mov	r20,r2
 80097ac:	b027883a 	mov	r19,r22
 80097b0:	003fc006 	br	80096b4 <_dtoa_r+0xe30>
 80097b4:	9011883a 	mov	r8,r18
 80097b8:	00800e0e 	bge	zero,r2,80097f4 <_dtoa_r+0xf70>
 80097bc:	800b883a 	mov	r5,r16
 80097c0:	01800044 	movi	r6,1
 80097c4:	e009883a 	mov	r4,fp
 80097c8:	da001715 	stw	r8,92(sp)
 80097cc:	800c5640 	call	800c564 <__lshift>
 80097d0:	a80b883a 	mov	r5,r21
 80097d4:	1009883a 	mov	r4,r2
 80097d8:	1021883a 	mov	r16,r2
 80097dc:	800c6ac0 	call	800c6ac <__mcmp>
 80097e0:	da001717 	ldw	r8,92(sp)
 80097e4:	0081960e 	bge	zero,r2,8009e40 <_dtoa_r+0x15bc>
 80097e8:	00800e44 	movi	r2,57
 80097ec:	40817026 	beq	r8,r2,8009db0 <_dtoa_r+0x152c>
 80097f0:	ba000c44 	addi	r8,r23,49
 80097f4:	8825883a 	mov	r18,r17
 80097f8:	9dc00044 	addi	r23,r19,1
 80097fc:	9a000005 	stb	r8,0(r19)
 8009800:	a023883a 	mov	r17,r20
 8009804:	dc000915 	stw	r16,36(sp)
 8009808:	003f2406 	br	800949c <_dtoa_r+0xc18>
 800980c:	00800e44 	movi	r2,57
 8009810:	9011883a 	mov	r8,r18
 8009814:	90816626 	beq	r18,r2,8009db0 <_dtoa_r+0x152c>
 8009818:	05bff516 	blt	zero,r22,80097f0 <_dtoa_r+0xf6c>
 800981c:	003ff506 	br	80097f4 <_dtoa_r+0xf70>
 8009820:	800bdf80 	call	800bdf8 <__multadd>
 8009824:	1023883a 	mov	r17,r2
 8009828:	1029883a 	mov	r20,r2
 800982c:	003fdf06 	br	80097ac <_dtoa_r+0xf28>
 8009830:	e009883a 	mov	r4,fp
 8009834:	800bdd00 	call	800bdd0 <_Bfree>
 8009838:	00800044 	movi	r2,1
 800983c:	003fbc06 	br	8009730 <_dtoa_r+0xeac>
 8009840:	a80b883a 	mov	r5,r21
 8009844:	8009883a 	mov	r4,r16
 8009848:	800c6ac0 	call	800c6ac <__mcmp>
 800984c:	103edb0e 	bge	r2,zero,80093bc <_dtoa_r+0xb38>
 8009850:	800b883a 	mov	r5,r16
 8009854:	000f883a 	mov	r7,zero
 8009858:	01800284 	movi	r6,10
 800985c:	e009883a 	mov	r4,fp
 8009860:	800bdf80 	call	800bdf8 <__multadd>
 8009864:	1021883a 	mov	r16,r2
 8009868:	d8800517 	ldw	r2,20(sp)
 800986c:	d8c00b17 	ldw	r3,44(sp)
 8009870:	10bfffc4 	addi	r2,r2,-1
 8009874:	d8800515 	stw	r2,20(sp)
 8009878:	183f761e 	bne	r3,zero,8009654 <_dtoa_r+0xdd0>
 800987c:	d9000c17 	ldw	r4,48(sp)
 8009880:	0101730e 	bge	zero,r4,8009e50 <_dtoa_r+0x15cc>
 8009884:	d9000615 	stw	r4,24(sp)
 8009888:	003ed006 	br	80093cc <_dtoa_r+0xb48>
 800988c:	00800084 	movi	r2,2
 8009890:	3081861e 	bne	r6,r2,8009eac <_dtoa_r+0x1628>
 8009894:	d8000b15 	stw	zero,44(sp)
 8009898:	003f3c06 	br	800958c <_dtoa_r+0xd08>
 800989c:	dc000917 	ldw	r16,36(sp)
 80098a0:	003e9206 	br	80092ec <_dtoa_r+0xa68>
 80098a4:	d9c00317 	ldw	r7,12(sp)
 80098a8:	00800084 	movi	r2,2
 80098ac:	11fec50e 	bge	r2,r7,80093c4 <_dtoa_r+0xb40>
 80098b0:	d9000617 	ldw	r4,24(sp)
 80098b4:	20013c1e 	bne	r4,zero,8009da8 <_dtoa_r+0x1524>
 80098b8:	a80b883a 	mov	r5,r21
 80098bc:	000f883a 	mov	r7,zero
 80098c0:	01800144 	movi	r6,5
 80098c4:	e009883a 	mov	r4,fp
 80098c8:	800bdf80 	call	800bdf8 <__multadd>
 80098cc:	100b883a 	mov	r5,r2
 80098d0:	8009883a 	mov	r4,r16
 80098d4:	102b883a 	mov	r21,r2
 80098d8:	800c6ac0 	call	800c6ac <__mcmp>
 80098dc:	dc000915 	stw	r16,36(sp)
 80098e0:	00bf410e 	bge	zero,r2,80095e8 <_dtoa_r+0xd64>
 80098e4:	d9c00717 	ldw	r7,28(sp)
 80098e8:	00800c44 	movi	r2,49
 80098ec:	38800005 	stb	r2,0(r7)
 80098f0:	d8800517 	ldw	r2,20(sp)
 80098f4:	3dc00044 	addi	r23,r7,1
 80098f8:	10800044 	addi	r2,r2,1
 80098fc:	d8800515 	stw	r2,20(sp)
 8009900:	003f3d06 	br	80095f8 <_dtoa_r+0xd74>
 8009904:	d9800517 	ldw	r6,20(sp)
 8009908:	d9c00717 	ldw	r7,28(sp)
 800990c:	00800c44 	movi	r2,49
 8009910:	31800044 	addi	r6,r6,1
 8009914:	d9800515 	stw	r6,20(sp)
 8009918:	38800005 	stb	r2,0(r7)
 800991c:	003edf06 	br	800949c <_dtoa_r+0xc18>
 8009920:	d8000b15 	stw	zero,44(sp)
 8009924:	003c9f06 	br	8008ba4 <_dtoa_r+0x320>
 8009928:	903e7e1e 	bne	r18,zero,8009324 <_dtoa_r+0xaa0>
 800992c:	00800434 	movhi	r2,16
 8009930:	10bfffc4 	addi	r2,r2,-1
 8009934:	9884703a 	and	r2,r19,r2
 8009938:	1000ea1e 	bne	r2,zero,8009ce4 <_dtoa_r+0x1460>
 800993c:	9cdffc2c 	andhi	r19,r19,32752
 8009940:	9800e826 	beq	r19,zero,8009ce4 <_dtoa_r+0x1460>
 8009944:	d9c00817 	ldw	r7,32(sp)
 8009948:	b5800044 	addi	r22,r22,1
 800994c:	04c00044 	movi	r19,1
 8009950:	39c00044 	addi	r7,r7,1
 8009954:	d9c00815 	stw	r7,32(sp)
 8009958:	d8800d17 	ldw	r2,52(sp)
 800995c:	103e721e 	bne	r2,zero,8009328 <_dtoa_r+0xaa4>
 8009960:	00800044 	movi	r2,1
 8009964:	003e7906 	br	800934c <_dtoa_r+0xac8>
 8009968:	8009883a 	mov	r4,r16
 800996c:	80122b80 	call	80122b8 <__floatsidf>
 8009970:	d9800f17 	ldw	r6,60(sp)
 8009974:	d9c01017 	ldw	r7,64(sp)
 8009978:	1009883a 	mov	r4,r2
 800997c:	180b883a 	mov	r5,r3
 8009980:	80051240 	call	8005124 <__muldf3>
 8009984:	000d883a 	mov	r6,zero
 8009988:	01d00734 	movhi	r7,16412
 800998c:	1009883a 	mov	r4,r2
 8009990:	180b883a 	mov	r5,r3
 8009994:	80105440 	call	8010544 <__adddf3>
 8009998:	047f3034 	movhi	r17,64704
 800999c:	1021883a 	mov	r16,r2
 80099a0:	1c63883a 	add	r17,r3,r17
 80099a4:	d9000f17 	ldw	r4,60(sp)
 80099a8:	d9401017 	ldw	r5,64(sp)
 80099ac:	000d883a 	mov	r6,zero
 80099b0:	01d00534 	movhi	r7,16404
 80099b4:	801193c0 	call	801193c <__subdf3>
 80099b8:	800d883a 	mov	r6,r16
 80099bc:	880f883a 	mov	r7,r17
 80099c0:	1009883a 	mov	r4,r2
 80099c4:	180b883a 	mov	r5,r3
 80099c8:	102b883a 	mov	r21,r2
 80099cc:	1829883a 	mov	r20,r3
 80099d0:	80050480 	call	8005048 <__gedf2>
 80099d4:	00806c16 	blt	zero,r2,8009b88 <_dtoa_r+0x1304>
 80099d8:	89e0003c 	xorhi	r7,r17,32768
 80099dc:	800d883a 	mov	r6,r16
 80099e0:	a809883a 	mov	r4,r21
 80099e4:	a00b883a 	mov	r5,r20
 80099e8:	80118480 	call	8011848 <__ledf2>
 80099ec:	103d7e0e 	bge	r2,zero,8008fe8 <_dtoa_r+0x764>
 80099f0:	002b883a 	mov	r21,zero
 80099f4:	0023883a 	mov	r17,zero
 80099f8:	003efb06 	br	80095e8 <_dtoa_r+0xd64>
 80099fc:	d8800717 	ldw	r2,28(sp)
 8009a00:	003bd006 	br	8008944 <_dtoa_r+0xc0>
 8009a04:	d9000a17 	ldw	r4,40(sp)
 8009a08:	d9800d17 	ldw	r6,52(sp)
 8009a0c:	dd400a15 	stw	r21,40(sp)
 8009a10:	a905c83a 	sub	r2,r21,r4
 8009a14:	308d883a 	add	r6,r6,r2
 8009a18:	d9800d15 	stw	r6,52(sp)
 8009a1c:	002b883a 	mov	r21,zero
 8009a20:	003e0606 	br	800923c <_dtoa_r+0x9b8>
 8009a24:	9023883a 	mov	r17,r18
 8009a28:	9829883a 	mov	r20,r19
 8009a2c:	04000084 	movi	r16,2
 8009a30:	003c9206 	br	8008c7c <_dtoa_r+0x3f8>
 8009a34:	04000044 	movi	r16,1
 8009a38:	dc000c15 	stw	r16,48(sp)
 8009a3c:	dc000615 	stw	r16,24(sp)
 8009a40:	dc002215 	stw	r16,136(sp)
 8009a44:	e0001115 	stw	zero,68(fp)
 8009a48:	000b883a 	mov	r5,zero
 8009a4c:	003c6906 	br	8008bf4 <_dtoa_r+0x370>
 8009a50:	3021883a 	mov	r16,r6
 8009a54:	003ffb06 	br	8009a44 <_dtoa_r+0x11c0>
 8009a58:	1000021e 	bne	r2,zero,8009a64 <_dtoa_r+0x11e0>
 8009a5c:	4200004c 	andi	r8,r8,1
 8009a60:	403e7d1e 	bne	r8,zero,8009458 <_dtoa_r+0xbd4>
 8009a64:	01000c04 	movi	r4,48
 8009a68:	00000106 	br	8009a70 <_dtoa_r+0x11ec>
 8009a6c:	102f883a 	mov	r23,r2
 8009a70:	b8bfffc4 	addi	r2,r23,-1
 8009a74:	10c00007 	ldb	r3,0(r2)
 8009a78:	193ffc26 	beq	r3,r4,8009a6c <_dtoa_r+0x11e8>
 8009a7c:	003e8706 	br	800949c <_dtoa_r+0xc18>
 8009a80:	d8800517 	ldw	r2,20(sp)
 8009a84:	00a3c83a 	sub	r17,zero,r2
 8009a88:	8800a426 	beq	r17,zero,8009d1c <_dtoa_r+0x1498>
 8009a8c:	888003cc 	andi	r2,r17,15
 8009a90:	100490fa 	slli	r2,r2,3
 8009a94:	00c20074 	movhi	r3,2049
 8009a98:	18d52304 	addi	r3,r3,21644
 8009a9c:	1885883a 	add	r2,r3,r2
 8009aa0:	11800017 	ldw	r6,0(r2)
 8009aa4:	11c00117 	ldw	r7,4(r2)
 8009aa8:	9009883a 	mov	r4,r18
 8009aac:	980b883a 	mov	r5,r19
 8009ab0:	8823d13a 	srai	r17,r17,4
 8009ab4:	80051240 	call	8005124 <__muldf3>
 8009ab8:	d8800f15 	stw	r2,60(sp)
 8009abc:	d8c01015 	stw	r3,64(sp)
 8009ac0:	8800e826 	beq	r17,zero,8009e64 <_dtoa_r+0x15e0>
 8009ac4:	05020074 	movhi	r20,2049
 8009ac8:	a5151904 	addi	r20,r20,21604
 8009acc:	04000084 	movi	r16,2
 8009ad0:	8980004c 	andi	r6,r17,1
 8009ad4:	1009883a 	mov	r4,r2
 8009ad8:	8823d07a 	srai	r17,r17,1
 8009adc:	180b883a 	mov	r5,r3
 8009ae0:	30000426 	beq	r6,zero,8009af4 <_dtoa_r+0x1270>
 8009ae4:	a1800017 	ldw	r6,0(r20)
 8009ae8:	a1c00117 	ldw	r7,4(r20)
 8009aec:	84000044 	addi	r16,r16,1
 8009af0:	80051240 	call	8005124 <__muldf3>
 8009af4:	a5000204 	addi	r20,r20,8
 8009af8:	883ff51e 	bne	r17,zero,8009ad0 <_dtoa_r+0x124c>
 8009afc:	d8800f15 	stw	r2,60(sp)
 8009b00:	d8c01015 	stw	r3,64(sp)
 8009b04:	003c7606 	br	8008ce0 <_dtoa_r+0x45c>
 8009b08:	00c00c04 	movi	r3,48
 8009b0c:	10c00005 	stb	r3,0(r2)
 8009b10:	d8c00517 	ldw	r3,20(sp)
 8009b14:	bd3fffc3 	ldbu	r20,-1(r23)
 8009b18:	18c00044 	addi	r3,r3,1
 8009b1c:	d8c00515 	stw	r3,20(sp)
 8009b20:	003db906 	br	8009208 <_dtoa_r+0x984>
 8009b24:	89400117 	ldw	r5,4(r17)
 8009b28:	e009883a 	mov	r4,fp
 8009b2c:	800bd280 	call	800bd28 <_Balloc>
 8009b30:	89800417 	ldw	r6,16(r17)
 8009b34:	89400304 	addi	r5,r17,12
 8009b38:	11000304 	addi	r4,r2,12
 8009b3c:	31800084 	addi	r6,r6,2
 8009b40:	318d883a 	add	r6,r6,r6
 8009b44:	318d883a 	add	r6,r6,r6
 8009b48:	1027883a 	mov	r19,r2
 8009b4c:	8005ad80 	call	8005ad8 <memcpy>
 8009b50:	01800044 	movi	r6,1
 8009b54:	980b883a 	mov	r5,r19
 8009b58:	e009883a 	mov	r4,fp
 8009b5c:	800c5640 	call	800c564 <__lshift>
 8009b60:	1029883a 	mov	r20,r2
 8009b64:	003ecc06 	br	8009698 <_dtoa_r+0xe14>
 8009b68:	00800e44 	movi	r2,57
 8009b6c:	90809026 	beq	r18,r2,8009db0 <_dtoa_r+0x152c>
 8009b70:	92000044 	addi	r8,r18,1
 8009b74:	003f1f06 	br	80097f4 <_dtoa_r+0xf70>
 8009b78:	9011883a 	mov	r8,r18
 8009b7c:	8825883a 	mov	r18,r17
 8009b80:	a023883a 	mov	r17,r20
 8009b84:	003e2906 	br	800942c <_dtoa_r+0xba8>
 8009b88:	002b883a 	mov	r21,zero
 8009b8c:	0023883a 	mov	r17,zero
 8009b90:	003f5406 	br	80098e4 <_dtoa_r+0x1060>
 8009b94:	61bfffc4 	addi	r6,r12,-1
 8009b98:	300490fa 	slli	r2,r6,3
 8009b9c:	00c20074 	movhi	r3,2049
 8009ba0:	18d52304 	addi	r3,r3,21644
 8009ba4:	1885883a 	add	r2,r3,r2
 8009ba8:	11000017 	ldw	r4,0(r2)
 8009bac:	11400117 	ldw	r5,4(r2)
 8009bb0:	d8800717 	ldw	r2,28(sp)
 8009bb4:	880f883a 	mov	r7,r17
 8009bb8:	d9801215 	stw	r6,72(sp)
 8009bbc:	800d883a 	mov	r6,r16
 8009bc0:	db001615 	stw	r12,88(sp)
 8009bc4:	15c00044 	addi	r23,r2,1
 8009bc8:	80051240 	call	8005124 <__muldf3>
 8009bcc:	d9401017 	ldw	r5,64(sp)
 8009bd0:	d9000f17 	ldw	r4,60(sp)
 8009bd4:	d8c01515 	stw	r3,84(sp)
 8009bd8:	d8801415 	stw	r2,80(sp)
 8009bdc:	80122380 	call	8012238 <__fixdfsi>
 8009be0:	1009883a 	mov	r4,r2
 8009be4:	1021883a 	mov	r16,r2
 8009be8:	80122b80 	call	80122b8 <__floatsidf>
 8009bec:	d9000f17 	ldw	r4,60(sp)
 8009bf0:	d9401017 	ldw	r5,64(sp)
 8009bf4:	100d883a 	mov	r6,r2
 8009bf8:	180f883a 	mov	r7,r3
 8009bfc:	801193c0 	call	801193c <__subdf3>
 8009c00:	1829883a 	mov	r20,r3
 8009c04:	d8c00717 	ldw	r3,28(sp)
 8009c08:	84000c04 	addi	r16,r16,48
 8009c0c:	1023883a 	mov	r17,r2
 8009c10:	1c000005 	stb	r16,0(r3)
 8009c14:	db001617 	ldw	r12,88(sp)
 8009c18:	00800044 	movi	r2,1
 8009c1c:	60802226 	beq	r12,r2,8009ca8 <_dtoa_r+0x1424>
 8009c20:	d9c00717 	ldw	r7,28(sp)
 8009c24:	8805883a 	mov	r2,r17
 8009c28:	b82b883a 	mov	r21,r23
 8009c2c:	3b19883a 	add	r12,r7,r12
 8009c30:	6023883a 	mov	r17,r12
 8009c34:	a007883a 	mov	r3,r20
 8009c38:	dc800f15 	stw	r18,60(sp)
 8009c3c:	000d883a 	mov	r6,zero
 8009c40:	01d00934 	movhi	r7,16420
 8009c44:	1009883a 	mov	r4,r2
 8009c48:	180b883a 	mov	r5,r3
 8009c4c:	80051240 	call	8005124 <__muldf3>
 8009c50:	180b883a 	mov	r5,r3
 8009c54:	1009883a 	mov	r4,r2
 8009c58:	1829883a 	mov	r20,r3
 8009c5c:	1025883a 	mov	r18,r2
 8009c60:	80122380 	call	8012238 <__fixdfsi>
 8009c64:	1009883a 	mov	r4,r2
 8009c68:	1021883a 	mov	r16,r2
 8009c6c:	80122b80 	call	80122b8 <__floatsidf>
 8009c70:	100d883a 	mov	r6,r2
 8009c74:	180f883a 	mov	r7,r3
 8009c78:	9009883a 	mov	r4,r18
 8009c7c:	a00b883a 	mov	r5,r20
 8009c80:	84000c04 	addi	r16,r16,48
 8009c84:	801193c0 	call	801193c <__subdf3>
 8009c88:	ad400044 	addi	r21,r21,1
 8009c8c:	ac3fffc5 	stb	r16,-1(r21)
 8009c90:	ac7fea1e 	bne	r21,r17,8009c3c <_dtoa_r+0x13b8>
 8009c94:	1023883a 	mov	r17,r2
 8009c98:	d8801217 	ldw	r2,72(sp)
 8009c9c:	dc800f17 	ldw	r18,60(sp)
 8009ca0:	1829883a 	mov	r20,r3
 8009ca4:	b8af883a 	add	r23,r23,r2
 8009ca8:	d9001417 	ldw	r4,80(sp)
 8009cac:	d9401517 	ldw	r5,84(sp)
 8009cb0:	000d883a 	mov	r6,zero
 8009cb4:	01cff834 	movhi	r7,16352
 8009cb8:	80105440 	call	8010544 <__adddf3>
 8009cbc:	880d883a 	mov	r6,r17
 8009cc0:	a00f883a 	mov	r7,r20
 8009cc4:	1009883a 	mov	r4,r2
 8009cc8:	180b883a 	mov	r5,r3
 8009ccc:	80118480 	call	8011848 <__ledf2>
 8009cd0:	10003e0e 	bge	r2,zero,8009dcc <_dtoa_r+0x1548>
 8009cd4:	d9001317 	ldw	r4,76(sp)
 8009cd8:	bd3fffc3 	ldbu	r20,-1(r23)
 8009cdc:	d9000515 	stw	r4,20(sp)
 8009ce0:	003d3b06 	br	80091d0 <_dtoa_r+0x94c>
 8009ce4:	0027883a 	mov	r19,zero
 8009ce8:	003f1b06 	br	8009958 <_dtoa_r+0x10d4>
 8009cec:	d8800817 	ldw	r2,32(sp)
 8009cf0:	11e9c83a 	sub	r20,r2,r7
 8009cf4:	0005883a 	mov	r2,zero
 8009cf8:	003d5406 	br	800924c <_dtoa_r+0x9c8>
 8009cfc:	00800044 	movi	r2,1
 8009d00:	003dc706 	br	8009420 <_dtoa_r+0xb9c>
 8009d04:	d8c00217 	ldw	r3,8(sp)
 8009d08:	00800d84 	movi	r2,54
 8009d0c:	dd400a17 	ldw	r21,40(sp)
 8009d10:	10c5c83a 	sub	r2,r2,r3
 8009d14:	dd000817 	ldw	r20,32(sp)
 8009d18:	003d4c06 	br	800924c <_dtoa_r+0x9c8>
 8009d1c:	dc800f15 	stw	r18,60(sp)
 8009d20:	dcc01015 	stw	r19,64(sp)
 8009d24:	04000084 	movi	r16,2
 8009d28:	003bed06 	br	8008ce0 <_dtoa_r+0x45c>
 8009d2c:	d9000617 	ldw	r4,24(sp)
 8009d30:	203f0d26 	beq	r4,zero,8009968 <_dtoa_r+0x10e4>
 8009d34:	d9800c17 	ldw	r6,48(sp)
 8009d38:	01bcab0e 	bge	zero,r6,8008fe8 <_dtoa_r+0x764>
 8009d3c:	d9401017 	ldw	r5,64(sp)
 8009d40:	d9000f17 	ldw	r4,60(sp)
 8009d44:	000d883a 	mov	r6,zero
 8009d48:	01d00934 	movhi	r7,16420
 8009d4c:	80051240 	call	8005124 <__muldf3>
 8009d50:	81000044 	addi	r4,r16,1
 8009d54:	d8800f15 	stw	r2,60(sp)
 8009d58:	d8c01015 	stw	r3,64(sp)
 8009d5c:	80122b80 	call	80122b8 <__floatsidf>
 8009d60:	d9800f17 	ldw	r6,60(sp)
 8009d64:	d9c01017 	ldw	r7,64(sp)
 8009d68:	1009883a 	mov	r4,r2
 8009d6c:	180b883a 	mov	r5,r3
 8009d70:	80051240 	call	8005124 <__muldf3>
 8009d74:	01d00734 	movhi	r7,16412
 8009d78:	000d883a 	mov	r6,zero
 8009d7c:	1009883a 	mov	r4,r2
 8009d80:	180b883a 	mov	r5,r3
 8009d84:	80105440 	call	8010544 <__adddf3>
 8009d88:	d9c00517 	ldw	r7,20(sp)
 8009d8c:	047f3034 	movhi	r17,64704
 8009d90:	1021883a 	mov	r16,r2
 8009d94:	39ffffc4 	addi	r7,r7,-1
 8009d98:	d9c01315 	stw	r7,76(sp)
 8009d9c:	1c63883a 	add	r17,r3,r17
 8009da0:	db000c17 	ldw	r12,48(sp)
 8009da4:	003bea06 	br	8008d50 <_dtoa_r+0x4cc>
 8009da8:	dc000915 	stw	r16,36(sp)
 8009dac:	003e0e06 	br	80095e8 <_dtoa_r+0xd64>
 8009db0:	01000e44 	movi	r4,57
 8009db4:	8825883a 	mov	r18,r17
 8009db8:	9dc00044 	addi	r23,r19,1
 8009dbc:	99000005 	stb	r4,0(r19)
 8009dc0:	a023883a 	mov	r17,r20
 8009dc4:	dc000915 	stw	r16,36(sp)
 8009dc8:	003da406 	br	800945c <_dtoa_r+0xbd8>
 8009dcc:	d9801417 	ldw	r6,80(sp)
 8009dd0:	d9c01517 	ldw	r7,84(sp)
 8009dd4:	0009883a 	mov	r4,zero
 8009dd8:	014ff834 	movhi	r5,16352
 8009ddc:	801193c0 	call	801193c <__subdf3>
 8009de0:	880d883a 	mov	r6,r17
 8009de4:	a00f883a 	mov	r7,r20
 8009de8:	1009883a 	mov	r4,r2
 8009dec:	180b883a 	mov	r5,r3
 8009df0:	80050480 	call	8005048 <__gedf2>
 8009df4:	00bc7c0e 	bge	zero,r2,8008fe8 <_dtoa_r+0x764>
 8009df8:	01000c04 	movi	r4,48
 8009dfc:	00000106 	br	8009e04 <_dtoa_r+0x1580>
 8009e00:	102f883a 	mov	r23,r2
 8009e04:	b8bfffc4 	addi	r2,r23,-1
 8009e08:	10c00007 	ldb	r3,0(r2)
 8009e0c:	193ffc26 	beq	r3,r4,8009e00 <_dtoa_r+0x157c>
 8009e10:	d9801317 	ldw	r6,76(sp)
 8009e14:	d9800515 	stw	r6,20(sp)
 8009e18:	003c4406 	br	8008f2c <_dtoa_r+0x6a8>
 8009e1c:	d9801317 	ldw	r6,76(sp)
 8009e20:	d9800515 	stw	r6,20(sp)
 8009e24:	003cea06 	br	80091d0 <_dtoa_r+0x94c>
 8009e28:	dd800f17 	ldw	r22,60(sp)
 8009e2c:	dcc01017 	ldw	r19,64(sp)
 8009e30:	dc801217 	ldw	r18,72(sp)
 8009e34:	003c6c06 	br	8008fe8 <_dtoa_r+0x764>
 8009e38:	903e031e 	bne	r18,zero,8009648 <_dtoa_r+0xdc4>
 8009e3c:	003ebb06 	br	800992c <_dtoa_r+0x10a8>
 8009e40:	103e6c1e 	bne	r2,zero,80097f4 <_dtoa_r+0xf70>
 8009e44:	4080004c 	andi	r2,r8,1
 8009e48:	103e6a26 	beq	r2,zero,80097f4 <_dtoa_r+0xf70>
 8009e4c:	003e6606 	br	80097e8 <_dtoa_r+0xf64>
 8009e50:	d8c00317 	ldw	r3,12(sp)
 8009e54:	00800084 	movi	r2,2
 8009e58:	10c02916 	blt	r2,r3,8009f00 <_dtoa_r+0x167c>
 8009e5c:	d9000c17 	ldw	r4,48(sp)
 8009e60:	003e8806 	br	8009884 <_dtoa_r+0x1000>
 8009e64:	04000084 	movi	r16,2
 8009e68:	003b9d06 	br	8008ce0 <_dtoa_r+0x45c>
 8009e6c:	d9001317 	ldw	r4,76(sp)
 8009e70:	d9000515 	stw	r4,20(sp)
 8009e74:	003cd606 	br	80091d0 <_dtoa_r+0x94c>
 8009e78:	d8801317 	ldw	r2,76(sp)
 8009e7c:	d8800515 	stw	r2,20(sp)
 8009e80:	003c2a06 	br	8008f2c <_dtoa_r+0x6a8>
 8009e84:	d9800317 	ldw	r6,12(sp)
 8009e88:	00800084 	movi	r2,2
 8009e8c:	11801516 	blt	r2,r6,8009ee4 <_dtoa_r+0x1660>
 8009e90:	d9c00c17 	ldw	r7,48(sp)
 8009e94:	d9c00615 	stw	r7,24(sp)
 8009e98:	003df706 	br	8009678 <_dtoa_r+0xdf4>
 8009e9c:	193d3926 	beq	r3,r4,8009384 <_dtoa_r+0xb00>
 8009ea0:	00c00f04 	movi	r3,60
 8009ea4:	1885c83a 	sub	r2,r3,r2
 8009ea8:	003ddf06 	br	8009628 <_dtoa_r+0xda4>
 8009eac:	e009883a 	mov	r4,fp
 8009eb0:	e0001115 	stw	zero,68(fp)
 8009eb4:	000b883a 	mov	r5,zero
 8009eb8:	800bd280 	call	800bd28 <_Balloc>
 8009ebc:	d8800715 	stw	r2,28(sp)
 8009ec0:	d8c00717 	ldw	r3,28(sp)
 8009ec4:	00bfffc4 	movi	r2,-1
 8009ec8:	01000044 	movi	r4,1
 8009ecc:	d8800c15 	stw	r2,48(sp)
 8009ed0:	e0c01015 	stw	r3,64(fp)
 8009ed4:	d9000b15 	stw	r4,44(sp)
 8009ed8:	d8800615 	stw	r2,24(sp)
 8009edc:	d8002215 	stw	zero,136(sp)
 8009ee0:	003c4106 	br	8008fe8 <_dtoa_r+0x764>
 8009ee4:	d8c00c17 	ldw	r3,48(sp)
 8009ee8:	d8c00615 	stw	r3,24(sp)
 8009eec:	003e7006 	br	80098b0 <_dtoa_r+0x102c>
 8009ef0:	04400044 	movi	r17,1
 8009ef4:	003b2006 	br	8008b78 <_dtoa_r+0x2f4>
 8009ef8:	000b883a 	mov	r5,zero
 8009efc:	003b3d06 	br	8008bf4 <_dtoa_r+0x370>
 8009f00:	d8800c17 	ldw	r2,48(sp)
 8009f04:	d8800615 	stw	r2,24(sp)
 8009f08:	003e6906 	br	80098b0 <_dtoa_r+0x102c>

08009f0c <__sflush_r>:
 8009f0c:	2880030b 	ldhu	r2,12(r5)
 8009f10:	defffb04 	addi	sp,sp,-20
 8009f14:	dcc00315 	stw	r19,12(sp)
 8009f18:	dc400115 	stw	r17,4(sp)
 8009f1c:	dfc00415 	stw	ra,16(sp)
 8009f20:	dc800215 	stw	r18,8(sp)
 8009f24:	dc000015 	stw	r16,0(sp)
 8009f28:	10c0020c 	andi	r3,r2,8
 8009f2c:	2823883a 	mov	r17,r5
 8009f30:	2027883a 	mov	r19,r4
 8009f34:	1800311e 	bne	r3,zero,8009ffc <__sflush_r+0xf0>
 8009f38:	28c00117 	ldw	r3,4(r5)
 8009f3c:	10820014 	ori	r2,r2,2048
 8009f40:	2880030d 	sth	r2,12(r5)
 8009f44:	00c04b0e 	bge	zero,r3,800a074 <__sflush_r+0x168>
 8009f48:	8a000a17 	ldw	r8,40(r17)
 8009f4c:	40002326 	beq	r8,zero,8009fdc <__sflush_r+0xd0>
 8009f50:	9c000017 	ldw	r16,0(r19)
 8009f54:	10c4000c 	andi	r3,r2,4096
 8009f58:	98000015 	stw	zero,0(r19)
 8009f5c:	18004826 	beq	r3,zero,800a080 <__sflush_r+0x174>
 8009f60:	89801417 	ldw	r6,80(r17)
 8009f64:	10c0010c 	andi	r3,r2,4
 8009f68:	18000626 	beq	r3,zero,8009f84 <__sflush_r+0x78>
 8009f6c:	88c00117 	ldw	r3,4(r17)
 8009f70:	88800c17 	ldw	r2,48(r17)
 8009f74:	30cdc83a 	sub	r6,r6,r3
 8009f78:	10000226 	beq	r2,zero,8009f84 <__sflush_r+0x78>
 8009f7c:	88800f17 	ldw	r2,60(r17)
 8009f80:	308dc83a 	sub	r6,r6,r2
 8009f84:	89400717 	ldw	r5,28(r17)
 8009f88:	000f883a 	mov	r7,zero
 8009f8c:	9809883a 	mov	r4,r19
 8009f90:	403ee83a 	callr	r8
 8009f94:	00ffffc4 	movi	r3,-1
 8009f98:	10c04426 	beq	r2,r3,800a0ac <__sflush_r+0x1a0>
 8009f9c:	88c0030b 	ldhu	r3,12(r17)
 8009fa0:	89000417 	ldw	r4,16(r17)
 8009fa4:	88000115 	stw	zero,4(r17)
 8009fa8:	197dffcc 	andi	r5,r3,63487
 8009fac:	8940030d 	sth	r5,12(r17)
 8009fb0:	89000015 	stw	r4,0(r17)
 8009fb4:	18c4000c 	andi	r3,r3,4096
 8009fb8:	18002c1e 	bne	r3,zero,800a06c <__sflush_r+0x160>
 8009fbc:	89400c17 	ldw	r5,48(r17)
 8009fc0:	9c000015 	stw	r16,0(r19)
 8009fc4:	28000526 	beq	r5,zero,8009fdc <__sflush_r+0xd0>
 8009fc8:	88801004 	addi	r2,r17,64
 8009fcc:	28800226 	beq	r5,r2,8009fd8 <__sflush_r+0xcc>
 8009fd0:	9809883a 	mov	r4,r19
 8009fd4:	800a6880 	call	800a688 <_free_r>
 8009fd8:	88000c15 	stw	zero,48(r17)
 8009fdc:	0005883a 	mov	r2,zero
 8009fe0:	dfc00417 	ldw	ra,16(sp)
 8009fe4:	dcc00317 	ldw	r19,12(sp)
 8009fe8:	dc800217 	ldw	r18,8(sp)
 8009fec:	dc400117 	ldw	r17,4(sp)
 8009ff0:	dc000017 	ldw	r16,0(sp)
 8009ff4:	dec00504 	addi	sp,sp,20
 8009ff8:	f800283a 	ret
 8009ffc:	2c800417 	ldw	r18,16(r5)
 800a000:	903ff626 	beq	r18,zero,8009fdc <__sflush_r+0xd0>
 800a004:	2c000017 	ldw	r16,0(r5)
 800a008:	108000cc 	andi	r2,r2,3
 800a00c:	2c800015 	stw	r18,0(r5)
 800a010:	84a1c83a 	sub	r16,r16,r18
 800a014:	1000131e 	bne	r2,zero,800a064 <__sflush_r+0x158>
 800a018:	28800517 	ldw	r2,20(r5)
 800a01c:	88800215 	stw	r2,8(r17)
 800a020:	04000316 	blt	zero,r16,800a030 <__sflush_r+0x124>
 800a024:	003fed06 	br	8009fdc <__sflush_r+0xd0>
 800a028:	90a5883a 	add	r18,r18,r2
 800a02c:	043feb0e 	bge	zero,r16,8009fdc <__sflush_r+0xd0>
 800a030:	88800917 	ldw	r2,36(r17)
 800a034:	89400717 	ldw	r5,28(r17)
 800a038:	800f883a 	mov	r7,r16
 800a03c:	900d883a 	mov	r6,r18
 800a040:	9809883a 	mov	r4,r19
 800a044:	103ee83a 	callr	r2
 800a048:	80a1c83a 	sub	r16,r16,r2
 800a04c:	00bff616 	blt	zero,r2,800a028 <__sflush_r+0x11c>
 800a050:	88c0030b 	ldhu	r3,12(r17)
 800a054:	00bfffc4 	movi	r2,-1
 800a058:	18c01014 	ori	r3,r3,64
 800a05c:	88c0030d 	sth	r3,12(r17)
 800a060:	003fdf06 	br	8009fe0 <__sflush_r+0xd4>
 800a064:	0005883a 	mov	r2,zero
 800a068:	003fec06 	br	800a01c <__sflush_r+0x110>
 800a06c:	88801415 	stw	r2,80(r17)
 800a070:	003fd206 	br	8009fbc <__sflush_r+0xb0>
 800a074:	28c00f17 	ldw	r3,60(r5)
 800a078:	00ffb316 	blt	zero,r3,8009f48 <__sflush_r+0x3c>
 800a07c:	003fd706 	br	8009fdc <__sflush_r+0xd0>
 800a080:	89400717 	ldw	r5,28(r17)
 800a084:	000d883a 	mov	r6,zero
 800a088:	01c00044 	movi	r7,1
 800a08c:	9809883a 	mov	r4,r19
 800a090:	403ee83a 	callr	r8
 800a094:	100d883a 	mov	r6,r2
 800a098:	00bfffc4 	movi	r2,-1
 800a09c:	30801426 	beq	r6,r2,800a0f0 <__sflush_r+0x1e4>
 800a0a0:	8880030b 	ldhu	r2,12(r17)
 800a0a4:	8a000a17 	ldw	r8,40(r17)
 800a0a8:	003fae06 	br	8009f64 <__sflush_r+0x58>
 800a0ac:	98c00017 	ldw	r3,0(r19)
 800a0b0:	183fba26 	beq	r3,zero,8009f9c <__sflush_r+0x90>
 800a0b4:	01000744 	movi	r4,29
 800a0b8:	19000626 	beq	r3,r4,800a0d4 <__sflush_r+0x1c8>
 800a0bc:	01000584 	movi	r4,22
 800a0c0:	19000426 	beq	r3,r4,800a0d4 <__sflush_r+0x1c8>
 800a0c4:	88c0030b 	ldhu	r3,12(r17)
 800a0c8:	18c01014 	ori	r3,r3,64
 800a0cc:	88c0030d 	sth	r3,12(r17)
 800a0d0:	003fc306 	br	8009fe0 <__sflush_r+0xd4>
 800a0d4:	8880030b 	ldhu	r2,12(r17)
 800a0d8:	88c00417 	ldw	r3,16(r17)
 800a0dc:	88000115 	stw	zero,4(r17)
 800a0e0:	10bdffcc 	andi	r2,r2,63487
 800a0e4:	8880030d 	sth	r2,12(r17)
 800a0e8:	88c00015 	stw	r3,0(r17)
 800a0ec:	003fb306 	br	8009fbc <__sflush_r+0xb0>
 800a0f0:	98800017 	ldw	r2,0(r19)
 800a0f4:	103fea26 	beq	r2,zero,800a0a0 <__sflush_r+0x194>
 800a0f8:	00c00744 	movi	r3,29
 800a0fc:	10c00226 	beq	r2,r3,800a108 <__sflush_r+0x1fc>
 800a100:	00c00584 	movi	r3,22
 800a104:	10c0031e 	bne	r2,r3,800a114 <__sflush_r+0x208>
 800a108:	9c000015 	stw	r16,0(r19)
 800a10c:	0005883a 	mov	r2,zero
 800a110:	003fb306 	br	8009fe0 <__sflush_r+0xd4>
 800a114:	88c0030b 	ldhu	r3,12(r17)
 800a118:	3005883a 	mov	r2,r6
 800a11c:	18c01014 	ori	r3,r3,64
 800a120:	88c0030d 	sth	r3,12(r17)
 800a124:	003fae06 	br	8009fe0 <__sflush_r+0xd4>

0800a128 <_fflush_r>:
 800a128:	defffd04 	addi	sp,sp,-12
 800a12c:	dc000115 	stw	r16,4(sp)
 800a130:	dfc00215 	stw	ra,8(sp)
 800a134:	2021883a 	mov	r16,r4
 800a138:	20000226 	beq	r4,zero,800a144 <_fflush_r+0x1c>
 800a13c:	20800e17 	ldw	r2,56(r4)
 800a140:	10000c26 	beq	r2,zero,800a174 <_fflush_r+0x4c>
 800a144:	2880030f 	ldh	r2,12(r5)
 800a148:	1000051e 	bne	r2,zero,800a160 <_fflush_r+0x38>
 800a14c:	0005883a 	mov	r2,zero
 800a150:	dfc00217 	ldw	ra,8(sp)
 800a154:	dc000117 	ldw	r16,4(sp)
 800a158:	dec00304 	addi	sp,sp,12
 800a15c:	f800283a 	ret
 800a160:	8009883a 	mov	r4,r16
 800a164:	dfc00217 	ldw	ra,8(sp)
 800a168:	dc000117 	ldw	r16,4(sp)
 800a16c:	dec00304 	addi	sp,sp,12
 800a170:	8009f0c1 	jmpi	8009f0c <__sflush_r>
 800a174:	d9400015 	stw	r5,0(sp)
 800a178:	800a5140 	call	800a514 <__sinit>
 800a17c:	d9400017 	ldw	r5,0(sp)
 800a180:	003ff006 	br	800a144 <_fflush_r+0x1c>

0800a184 <fflush>:
 800a184:	20000526 	beq	r4,zero,800a19c <fflush+0x18>
 800a188:	00820074 	movhi	r2,2049
 800a18c:	109c2704 	addi	r2,r2,28828
 800a190:	200b883a 	mov	r5,r4
 800a194:	11000017 	ldw	r4,0(r2)
 800a198:	800a1281 	jmpi	800a128 <_fflush_r>
 800a19c:	00820074 	movhi	r2,2049
 800a1a0:	109c2604 	addi	r2,r2,28824
 800a1a4:	11000017 	ldw	r4,0(r2)
 800a1a8:	01420074 	movhi	r5,2049
 800a1ac:	29684a04 	addi	r5,r5,-24280
 800a1b0:	800af241 	jmpi	800af24 <_fwalk_reent>

0800a1b4 <__fp_unlock>:
 800a1b4:	0005883a 	mov	r2,zero
 800a1b8:	f800283a 	ret

0800a1bc <_cleanup_r>:
 800a1bc:	01420074 	movhi	r5,2049
 800a1c0:	297c5b04 	addi	r5,r5,-3732
 800a1c4:	800af241 	jmpi	800af24 <_fwalk_reent>

0800a1c8 <__sinit.part.1>:
 800a1c8:	defff704 	addi	sp,sp,-36
 800a1cc:	00c20074 	movhi	r3,2049
 800a1d0:	dfc00815 	stw	ra,32(sp)
 800a1d4:	ddc00715 	stw	r23,28(sp)
 800a1d8:	dd800615 	stw	r22,24(sp)
 800a1dc:	dd400515 	stw	r21,20(sp)
 800a1e0:	dd000415 	stw	r20,16(sp)
 800a1e4:	dcc00315 	stw	r19,12(sp)
 800a1e8:	dc800215 	stw	r18,8(sp)
 800a1ec:	dc400115 	stw	r17,4(sp)
 800a1f0:	dc000015 	stw	r16,0(sp)
 800a1f4:	18e86f04 	addi	r3,r3,-24132
 800a1f8:	24000117 	ldw	r16,4(r4)
 800a1fc:	20c00f15 	stw	r3,60(r4)
 800a200:	2080bb04 	addi	r2,r4,748
 800a204:	00c000c4 	movi	r3,3
 800a208:	20c0b915 	stw	r3,740(r4)
 800a20c:	2080ba15 	stw	r2,744(r4)
 800a210:	2000b815 	stw	zero,736(r4)
 800a214:	05c00204 	movi	r23,8
 800a218:	00800104 	movi	r2,4
 800a21c:	2025883a 	mov	r18,r4
 800a220:	b80d883a 	mov	r6,r23
 800a224:	81001704 	addi	r4,r16,92
 800a228:	000b883a 	mov	r5,zero
 800a22c:	80000015 	stw	zero,0(r16)
 800a230:	80000115 	stw	zero,4(r16)
 800a234:	80000215 	stw	zero,8(r16)
 800a238:	8080030d 	sth	r2,12(r16)
 800a23c:	80001915 	stw	zero,100(r16)
 800a240:	8000038d 	sth	zero,14(r16)
 800a244:	80000415 	stw	zero,16(r16)
 800a248:	80000515 	stw	zero,20(r16)
 800a24c:	80000615 	stw	zero,24(r16)
 800a250:	8005c200 	call	8005c20 <memset>
 800a254:	05820074 	movhi	r22,2049
 800a258:	94400217 	ldw	r17,8(r18)
 800a25c:	05420074 	movhi	r21,2049
 800a260:	05020074 	movhi	r20,2049
 800a264:	04c20074 	movhi	r19,2049
 800a268:	b5b55d04 	addi	r22,r22,-10892
 800a26c:	ad757404 	addi	r21,r21,-10800
 800a270:	a5359304 	addi	r20,r20,-10676
 800a274:	9cf5aa04 	addi	r19,r19,-10584
 800a278:	85800815 	stw	r22,32(r16)
 800a27c:	85400915 	stw	r21,36(r16)
 800a280:	85000a15 	stw	r20,40(r16)
 800a284:	84c00b15 	stw	r19,44(r16)
 800a288:	84000715 	stw	r16,28(r16)
 800a28c:	00800284 	movi	r2,10
 800a290:	8880030d 	sth	r2,12(r17)
 800a294:	00800044 	movi	r2,1
 800a298:	b80d883a 	mov	r6,r23
 800a29c:	89001704 	addi	r4,r17,92
 800a2a0:	000b883a 	mov	r5,zero
 800a2a4:	88000015 	stw	zero,0(r17)
 800a2a8:	88000115 	stw	zero,4(r17)
 800a2ac:	88000215 	stw	zero,8(r17)
 800a2b0:	88001915 	stw	zero,100(r17)
 800a2b4:	8880038d 	sth	r2,14(r17)
 800a2b8:	88000415 	stw	zero,16(r17)
 800a2bc:	88000515 	stw	zero,20(r17)
 800a2c0:	88000615 	stw	zero,24(r17)
 800a2c4:	8005c200 	call	8005c20 <memset>
 800a2c8:	94000317 	ldw	r16,12(r18)
 800a2cc:	00800484 	movi	r2,18
 800a2d0:	8c400715 	stw	r17,28(r17)
 800a2d4:	8d800815 	stw	r22,32(r17)
 800a2d8:	8d400915 	stw	r21,36(r17)
 800a2dc:	8d000a15 	stw	r20,40(r17)
 800a2e0:	8cc00b15 	stw	r19,44(r17)
 800a2e4:	8080030d 	sth	r2,12(r16)
 800a2e8:	00800084 	movi	r2,2
 800a2ec:	80000015 	stw	zero,0(r16)
 800a2f0:	80000115 	stw	zero,4(r16)
 800a2f4:	80000215 	stw	zero,8(r16)
 800a2f8:	80001915 	stw	zero,100(r16)
 800a2fc:	8080038d 	sth	r2,14(r16)
 800a300:	80000415 	stw	zero,16(r16)
 800a304:	80000515 	stw	zero,20(r16)
 800a308:	80000615 	stw	zero,24(r16)
 800a30c:	b80d883a 	mov	r6,r23
 800a310:	000b883a 	mov	r5,zero
 800a314:	81001704 	addi	r4,r16,92
 800a318:	8005c200 	call	8005c20 <memset>
 800a31c:	00800044 	movi	r2,1
 800a320:	84000715 	stw	r16,28(r16)
 800a324:	85800815 	stw	r22,32(r16)
 800a328:	85400915 	stw	r21,36(r16)
 800a32c:	85000a15 	stw	r20,40(r16)
 800a330:	84c00b15 	stw	r19,44(r16)
 800a334:	90800e15 	stw	r2,56(r18)
 800a338:	dfc00817 	ldw	ra,32(sp)
 800a33c:	ddc00717 	ldw	r23,28(sp)
 800a340:	dd800617 	ldw	r22,24(sp)
 800a344:	dd400517 	ldw	r21,20(sp)
 800a348:	dd000417 	ldw	r20,16(sp)
 800a34c:	dcc00317 	ldw	r19,12(sp)
 800a350:	dc800217 	ldw	r18,8(sp)
 800a354:	dc400117 	ldw	r17,4(sp)
 800a358:	dc000017 	ldw	r16,0(sp)
 800a35c:	dec00904 	addi	sp,sp,36
 800a360:	f800283a 	ret

0800a364 <__fp_lock>:
 800a364:	0005883a 	mov	r2,zero
 800a368:	f800283a 	ret

0800a36c <__sfmoreglue>:
 800a36c:	defffc04 	addi	sp,sp,-16
 800a370:	dc800215 	stw	r18,8(sp)
 800a374:	2825883a 	mov	r18,r5
 800a378:	dc000015 	stw	r16,0(sp)
 800a37c:	01401a04 	movi	r5,104
 800a380:	2021883a 	mov	r16,r4
 800a384:	913fffc4 	addi	r4,r18,-1
 800a388:	dfc00315 	stw	ra,12(sp)
 800a38c:	dc400115 	stw	r17,4(sp)
 800a390:	80050200 	call	8005020 <__mulsi3>
 800a394:	8009883a 	mov	r4,r16
 800a398:	11401d04 	addi	r5,r2,116
 800a39c:	1023883a 	mov	r17,r2
 800a3a0:	800b2dc0 	call	800b2dc <_malloc_r>
 800a3a4:	1021883a 	mov	r16,r2
 800a3a8:	10000726 	beq	r2,zero,800a3c8 <__sfmoreglue+0x5c>
 800a3ac:	11000304 	addi	r4,r2,12
 800a3b0:	10000015 	stw	zero,0(r2)
 800a3b4:	14800115 	stw	r18,4(r2)
 800a3b8:	11000215 	stw	r4,8(r2)
 800a3bc:	89801a04 	addi	r6,r17,104
 800a3c0:	000b883a 	mov	r5,zero
 800a3c4:	8005c200 	call	8005c20 <memset>
 800a3c8:	8005883a 	mov	r2,r16
 800a3cc:	dfc00317 	ldw	ra,12(sp)
 800a3d0:	dc800217 	ldw	r18,8(sp)
 800a3d4:	dc400117 	ldw	r17,4(sp)
 800a3d8:	dc000017 	ldw	r16,0(sp)
 800a3dc:	dec00404 	addi	sp,sp,16
 800a3e0:	f800283a 	ret

0800a3e4 <__sfp>:
 800a3e4:	defffb04 	addi	sp,sp,-20
 800a3e8:	dc000015 	stw	r16,0(sp)
 800a3ec:	04020074 	movhi	r16,2049
 800a3f0:	841c2604 	addi	r16,r16,28824
 800a3f4:	dcc00315 	stw	r19,12(sp)
 800a3f8:	2027883a 	mov	r19,r4
 800a3fc:	81000017 	ldw	r4,0(r16)
 800a400:	dfc00415 	stw	ra,16(sp)
 800a404:	dc800215 	stw	r18,8(sp)
 800a408:	20800e17 	ldw	r2,56(r4)
 800a40c:	dc400115 	stw	r17,4(sp)
 800a410:	1000021e 	bne	r2,zero,800a41c <__sfp+0x38>
 800a414:	800a1c80 	call	800a1c8 <__sinit.part.1>
 800a418:	81000017 	ldw	r4,0(r16)
 800a41c:	2480b804 	addi	r18,r4,736
 800a420:	047fffc4 	movi	r17,-1
 800a424:	91000117 	ldw	r4,4(r18)
 800a428:	94000217 	ldw	r16,8(r18)
 800a42c:	213fffc4 	addi	r4,r4,-1
 800a430:	20000a16 	blt	r4,zero,800a45c <__sfp+0x78>
 800a434:	8080030f 	ldh	r2,12(r16)
 800a438:	10000c26 	beq	r2,zero,800a46c <__sfp+0x88>
 800a43c:	80c01d04 	addi	r3,r16,116
 800a440:	00000206 	br	800a44c <__sfp+0x68>
 800a444:	18bfe60f 	ldh	r2,-104(r3)
 800a448:	10000826 	beq	r2,zero,800a46c <__sfp+0x88>
 800a44c:	213fffc4 	addi	r4,r4,-1
 800a450:	1c3ffd04 	addi	r16,r3,-12
 800a454:	18c01a04 	addi	r3,r3,104
 800a458:	247ffa1e 	bne	r4,r17,800a444 <__sfp+0x60>
 800a45c:	90800017 	ldw	r2,0(r18)
 800a460:	10001d26 	beq	r2,zero,800a4d8 <__sfp+0xf4>
 800a464:	1025883a 	mov	r18,r2
 800a468:	003fee06 	br	800a424 <__sfp+0x40>
 800a46c:	00bfffc4 	movi	r2,-1
 800a470:	8080038d 	sth	r2,14(r16)
 800a474:	00800044 	movi	r2,1
 800a478:	8080030d 	sth	r2,12(r16)
 800a47c:	80001915 	stw	zero,100(r16)
 800a480:	80000015 	stw	zero,0(r16)
 800a484:	80000215 	stw	zero,8(r16)
 800a488:	80000115 	stw	zero,4(r16)
 800a48c:	80000415 	stw	zero,16(r16)
 800a490:	80000515 	stw	zero,20(r16)
 800a494:	80000615 	stw	zero,24(r16)
 800a498:	01800204 	movi	r6,8
 800a49c:	000b883a 	mov	r5,zero
 800a4a0:	81001704 	addi	r4,r16,92
 800a4a4:	8005c200 	call	8005c20 <memset>
 800a4a8:	8005883a 	mov	r2,r16
 800a4ac:	80000c15 	stw	zero,48(r16)
 800a4b0:	80000d15 	stw	zero,52(r16)
 800a4b4:	80001115 	stw	zero,68(r16)
 800a4b8:	80001215 	stw	zero,72(r16)
 800a4bc:	dfc00417 	ldw	ra,16(sp)
 800a4c0:	dcc00317 	ldw	r19,12(sp)
 800a4c4:	dc800217 	ldw	r18,8(sp)
 800a4c8:	dc400117 	ldw	r17,4(sp)
 800a4cc:	dc000017 	ldw	r16,0(sp)
 800a4d0:	dec00504 	addi	sp,sp,20
 800a4d4:	f800283a 	ret
 800a4d8:	01400104 	movi	r5,4
 800a4dc:	9809883a 	mov	r4,r19
 800a4e0:	800a36c0 	call	800a36c <__sfmoreglue>
 800a4e4:	90800015 	stw	r2,0(r18)
 800a4e8:	103fde1e 	bne	r2,zero,800a464 <__sfp+0x80>
 800a4ec:	00800304 	movi	r2,12
 800a4f0:	98800015 	stw	r2,0(r19)
 800a4f4:	0005883a 	mov	r2,zero
 800a4f8:	003ff006 	br	800a4bc <__sfp+0xd8>

0800a4fc <_cleanup>:
 800a4fc:	00820074 	movhi	r2,2049
 800a500:	109c2604 	addi	r2,r2,28824
 800a504:	11000017 	ldw	r4,0(r2)
 800a508:	01420074 	movhi	r5,2049
 800a50c:	297c5b04 	addi	r5,r5,-3732
 800a510:	800af241 	jmpi	800af24 <_fwalk_reent>

0800a514 <__sinit>:
 800a514:	20800e17 	ldw	r2,56(r4)
 800a518:	10000126 	beq	r2,zero,800a520 <__sinit+0xc>
 800a51c:	f800283a 	ret
 800a520:	800a1c81 	jmpi	800a1c8 <__sinit.part.1>

0800a524 <__sfp_lock_acquire>:
 800a524:	f800283a 	ret

0800a528 <__sfp_lock_release>:
 800a528:	f800283a 	ret

0800a52c <__sinit_lock_acquire>:
 800a52c:	f800283a 	ret

0800a530 <__sinit_lock_release>:
 800a530:	f800283a 	ret

0800a534 <__fp_lock_all>:
 800a534:	00820074 	movhi	r2,2049
 800a538:	109c2704 	addi	r2,r2,28828
 800a53c:	11000017 	ldw	r4,0(r2)
 800a540:	01420074 	movhi	r5,2049
 800a544:	2968d904 	addi	r5,r5,-23708
 800a548:	800ae601 	jmpi	800ae60 <_fwalk>

0800a54c <__fp_unlock_all>:
 800a54c:	00820074 	movhi	r2,2049
 800a550:	109c2704 	addi	r2,r2,28828
 800a554:	11000017 	ldw	r4,0(r2)
 800a558:	01420074 	movhi	r5,2049
 800a55c:	29686d04 	addi	r5,r5,-24140
 800a560:	800ae601 	jmpi	800ae60 <_fwalk>

0800a564 <_malloc_trim_r>:
 800a564:	defffb04 	addi	sp,sp,-20
 800a568:	dcc00315 	stw	r19,12(sp)
 800a56c:	04c20074 	movhi	r19,2049
 800a570:	dc800215 	stw	r18,8(sp)
 800a574:	dc400115 	stw	r17,4(sp)
 800a578:	dc000015 	stw	r16,0(sp)
 800a57c:	dfc00415 	stw	ra,16(sp)
 800a580:	2821883a 	mov	r16,r5
 800a584:	9cd69904 	addi	r19,r19,23140
 800a588:	2025883a 	mov	r18,r4
 800a58c:	8012bcc0 	call	8012bcc <__malloc_lock>
 800a590:	98800217 	ldw	r2,8(r19)
 800a594:	14400117 	ldw	r17,4(r2)
 800a598:	00bfff04 	movi	r2,-4
 800a59c:	88a2703a 	and	r17,r17,r2
 800a5a0:	8c21c83a 	sub	r16,r17,r16
 800a5a4:	8403fbc4 	addi	r16,r16,4079
 800a5a8:	8020d33a 	srli	r16,r16,12
 800a5ac:	0083ffc4 	movi	r2,4095
 800a5b0:	843fffc4 	addi	r16,r16,-1
 800a5b4:	8020933a 	slli	r16,r16,12
 800a5b8:	1400060e 	bge	r2,r16,800a5d4 <_malloc_trim_r+0x70>
 800a5bc:	000b883a 	mov	r5,zero
 800a5c0:	9009883a 	mov	r4,r18
 800a5c4:	800d5200 	call	800d520 <_sbrk_r>
 800a5c8:	98c00217 	ldw	r3,8(r19)
 800a5cc:	1c47883a 	add	r3,r3,r17
 800a5d0:	10c00a26 	beq	r2,r3,800a5fc <_malloc_trim_r+0x98>
 800a5d4:	9009883a 	mov	r4,r18
 800a5d8:	8012bf00 	call	8012bf0 <__malloc_unlock>
 800a5dc:	0005883a 	mov	r2,zero
 800a5e0:	dfc00417 	ldw	ra,16(sp)
 800a5e4:	dcc00317 	ldw	r19,12(sp)
 800a5e8:	dc800217 	ldw	r18,8(sp)
 800a5ec:	dc400117 	ldw	r17,4(sp)
 800a5f0:	dc000017 	ldw	r16,0(sp)
 800a5f4:	dec00504 	addi	sp,sp,20
 800a5f8:	f800283a 	ret
 800a5fc:	040bc83a 	sub	r5,zero,r16
 800a600:	9009883a 	mov	r4,r18
 800a604:	800d5200 	call	800d520 <_sbrk_r>
 800a608:	00ffffc4 	movi	r3,-1
 800a60c:	10c00d26 	beq	r2,r3,800a644 <_malloc_trim_r+0xe0>
 800a610:	00c200b4 	movhi	r3,2050
 800a614:	18e3eb04 	addi	r3,r3,-28756
 800a618:	18800017 	ldw	r2,0(r3)
 800a61c:	99000217 	ldw	r4,8(r19)
 800a620:	8c23c83a 	sub	r17,r17,r16
 800a624:	8c400054 	ori	r17,r17,1
 800a628:	1421c83a 	sub	r16,r2,r16
 800a62c:	24400115 	stw	r17,4(r4)
 800a630:	9009883a 	mov	r4,r18
 800a634:	1c000015 	stw	r16,0(r3)
 800a638:	8012bf00 	call	8012bf0 <__malloc_unlock>
 800a63c:	00800044 	movi	r2,1
 800a640:	003fe706 	br	800a5e0 <_malloc_trim_r+0x7c>
 800a644:	000b883a 	mov	r5,zero
 800a648:	9009883a 	mov	r4,r18
 800a64c:	800d5200 	call	800d520 <_sbrk_r>
 800a650:	99000217 	ldw	r4,8(r19)
 800a654:	014003c4 	movi	r5,15
 800a658:	1107c83a 	sub	r3,r2,r4
 800a65c:	28ffdd0e 	bge	r5,r3,800a5d4 <_malloc_trim_r+0x70>
 800a660:	01420074 	movhi	r5,2049
 800a664:	295c2904 	addi	r5,r5,28836
 800a668:	29400017 	ldw	r5,0(r5)
 800a66c:	18c00054 	ori	r3,r3,1
 800a670:	20c00115 	stw	r3,4(r4)
 800a674:	00c200b4 	movhi	r3,2050
 800a678:	1145c83a 	sub	r2,r2,r5
 800a67c:	18e3eb04 	addi	r3,r3,-28756
 800a680:	18800015 	stw	r2,0(r3)
 800a684:	003fd306 	br	800a5d4 <_malloc_trim_r+0x70>

0800a688 <_free_r>:
 800a688:	28004126 	beq	r5,zero,800a790 <_free_r+0x108>
 800a68c:	defffd04 	addi	sp,sp,-12
 800a690:	dc400115 	stw	r17,4(sp)
 800a694:	dc000015 	stw	r16,0(sp)
 800a698:	2023883a 	mov	r17,r4
 800a69c:	2821883a 	mov	r16,r5
 800a6a0:	dfc00215 	stw	ra,8(sp)
 800a6a4:	8012bcc0 	call	8012bcc <__malloc_lock>
 800a6a8:	81ffff17 	ldw	r7,-4(r16)
 800a6ac:	00bfff84 	movi	r2,-2
 800a6b0:	01020074 	movhi	r4,2049
 800a6b4:	81bffe04 	addi	r6,r16,-8
 800a6b8:	3884703a 	and	r2,r7,r2
 800a6bc:	21169904 	addi	r4,r4,23140
 800a6c0:	308b883a 	add	r5,r6,r2
 800a6c4:	2a400117 	ldw	r9,4(r5)
 800a6c8:	22000217 	ldw	r8,8(r4)
 800a6cc:	00ffff04 	movi	r3,-4
 800a6d0:	48c6703a 	and	r3,r9,r3
 800a6d4:	2a005726 	beq	r5,r8,800a834 <_free_r+0x1ac>
 800a6d8:	28c00115 	stw	r3,4(r5)
 800a6dc:	39c0004c 	andi	r7,r7,1
 800a6e0:	3800091e 	bne	r7,zero,800a708 <_free_r+0x80>
 800a6e4:	823ffe17 	ldw	r8,-8(r16)
 800a6e8:	22400204 	addi	r9,r4,8
 800a6ec:	320dc83a 	sub	r6,r6,r8
 800a6f0:	31c00217 	ldw	r7,8(r6)
 800a6f4:	1205883a 	add	r2,r2,r8
 800a6f8:	3a406526 	beq	r7,r9,800a890 <_free_r+0x208>
 800a6fc:	32000317 	ldw	r8,12(r6)
 800a700:	3a000315 	stw	r8,12(r7)
 800a704:	41c00215 	stw	r7,8(r8)
 800a708:	28cf883a 	add	r7,r5,r3
 800a70c:	39c00117 	ldw	r7,4(r7)
 800a710:	39c0004c 	andi	r7,r7,1
 800a714:	38003a26 	beq	r7,zero,800a800 <_free_r+0x178>
 800a718:	10c00054 	ori	r3,r2,1
 800a71c:	30c00115 	stw	r3,4(r6)
 800a720:	3087883a 	add	r3,r6,r2
 800a724:	18800015 	stw	r2,0(r3)
 800a728:	00c07fc4 	movi	r3,511
 800a72c:	18801936 	bltu	r3,r2,800a794 <_free_r+0x10c>
 800a730:	1004d0fa 	srli	r2,r2,3
 800a734:	01c00044 	movi	r7,1
 800a738:	21400117 	ldw	r5,4(r4)
 800a73c:	10c00044 	addi	r3,r2,1
 800a740:	18c7883a 	add	r3,r3,r3
 800a744:	1005d0ba 	srai	r2,r2,2
 800a748:	18c7883a 	add	r3,r3,r3
 800a74c:	18c7883a 	add	r3,r3,r3
 800a750:	1907883a 	add	r3,r3,r4
 800a754:	3884983a 	sll	r2,r7,r2
 800a758:	19c00017 	ldw	r7,0(r3)
 800a75c:	1a3ffe04 	addi	r8,r3,-8
 800a760:	1144b03a 	or	r2,r2,r5
 800a764:	32000315 	stw	r8,12(r6)
 800a768:	31c00215 	stw	r7,8(r6)
 800a76c:	20800115 	stw	r2,4(r4)
 800a770:	19800015 	stw	r6,0(r3)
 800a774:	39800315 	stw	r6,12(r7)
 800a778:	8809883a 	mov	r4,r17
 800a77c:	dfc00217 	ldw	ra,8(sp)
 800a780:	dc400117 	ldw	r17,4(sp)
 800a784:	dc000017 	ldw	r16,0(sp)
 800a788:	dec00304 	addi	sp,sp,12
 800a78c:	8012bf01 	jmpi	8012bf0 <__malloc_unlock>
 800a790:	f800283a 	ret
 800a794:	100ad27a 	srli	r5,r2,9
 800a798:	00c00104 	movi	r3,4
 800a79c:	19404a36 	bltu	r3,r5,800a8c8 <_free_r+0x240>
 800a7a0:	100ad1ba 	srli	r5,r2,6
 800a7a4:	28c00e44 	addi	r3,r5,57
 800a7a8:	18c7883a 	add	r3,r3,r3
 800a7ac:	29400e04 	addi	r5,r5,56
 800a7b0:	18c7883a 	add	r3,r3,r3
 800a7b4:	18c7883a 	add	r3,r3,r3
 800a7b8:	1909883a 	add	r4,r3,r4
 800a7bc:	20c00017 	ldw	r3,0(r4)
 800a7c0:	01c20074 	movhi	r7,2049
 800a7c4:	213ffe04 	addi	r4,r4,-8
 800a7c8:	39d69904 	addi	r7,r7,23140
 800a7cc:	20c04426 	beq	r4,r3,800a8e0 <_free_r+0x258>
 800a7d0:	01ffff04 	movi	r7,-4
 800a7d4:	19400117 	ldw	r5,4(r3)
 800a7d8:	29ca703a 	and	r5,r5,r7
 800a7dc:	1140022e 	bgeu	r2,r5,800a7e8 <_free_r+0x160>
 800a7e0:	18c00217 	ldw	r3,8(r3)
 800a7e4:	20fffb1e 	bne	r4,r3,800a7d4 <_free_r+0x14c>
 800a7e8:	19000317 	ldw	r4,12(r3)
 800a7ec:	31000315 	stw	r4,12(r6)
 800a7f0:	30c00215 	stw	r3,8(r6)
 800a7f4:	21800215 	stw	r6,8(r4)
 800a7f8:	19800315 	stw	r6,12(r3)
 800a7fc:	003fde06 	br	800a778 <_free_r+0xf0>
 800a800:	29c00217 	ldw	r7,8(r5)
 800a804:	10c5883a 	add	r2,r2,r3
 800a808:	00c20074 	movhi	r3,2049
 800a80c:	18d69b04 	addi	r3,r3,23148
 800a810:	38c03b26 	beq	r7,r3,800a900 <_free_r+0x278>
 800a814:	2a000317 	ldw	r8,12(r5)
 800a818:	11400054 	ori	r5,r2,1
 800a81c:	3087883a 	add	r3,r6,r2
 800a820:	3a000315 	stw	r8,12(r7)
 800a824:	41c00215 	stw	r7,8(r8)
 800a828:	31400115 	stw	r5,4(r6)
 800a82c:	18800015 	stw	r2,0(r3)
 800a830:	003fbd06 	br	800a728 <_free_r+0xa0>
 800a834:	39c0004c 	andi	r7,r7,1
 800a838:	10c5883a 	add	r2,r2,r3
 800a83c:	3800071e 	bne	r7,zero,800a85c <_free_r+0x1d4>
 800a840:	81fffe17 	ldw	r7,-8(r16)
 800a844:	31cdc83a 	sub	r6,r6,r7
 800a848:	30c00317 	ldw	r3,12(r6)
 800a84c:	31400217 	ldw	r5,8(r6)
 800a850:	11c5883a 	add	r2,r2,r7
 800a854:	28c00315 	stw	r3,12(r5)
 800a858:	19400215 	stw	r5,8(r3)
 800a85c:	10c00054 	ori	r3,r2,1
 800a860:	30c00115 	stw	r3,4(r6)
 800a864:	00c20074 	movhi	r3,2049
 800a868:	18dc2a04 	addi	r3,r3,28840
 800a86c:	18c00017 	ldw	r3,0(r3)
 800a870:	21800215 	stw	r6,8(r4)
 800a874:	10ffc036 	bltu	r2,r3,800a778 <_free_r+0xf0>
 800a878:	008200b4 	movhi	r2,2050
 800a87c:	10a33004 	addi	r2,r2,-29504
 800a880:	11400017 	ldw	r5,0(r2)
 800a884:	8809883a 	mov	r4,r17
 800a888:	800a5640 	call	800a564 <_malloc_trim_r>
 800a88c:	003fba06 	br	800a778 <_free_r+0xf0>
 800a890:	28c9883a 	add	r4,r5,r3
 800a894:	21000117 	ldw	r4,4(r4)
 800a898:	2100004c 	andi	r4,r4,1
 800a89c:	2000391e 	bne	r4,zero,800a984 <_free_r+0x2fc>
 800a8a0:	29c00217 	ldw	r7,8(r5)
 800a8a4:	29000317 	ldw	r4,12(r5)
 800a8a8:	1885883a 	add	r2,r3,r2
 800a8ac:	10c00054 	ori	r3,r2,1
 800a8b0:	39000315 	stw	r4,12(r7)
 800a8b4:	21c00215 	stw	r7,8(r4)
 800a8b8:	30c00115 	stw	r3,4(r6)
 800a8bc:	308d883a 	add	r6,r6,r2
 800a8c0:	30800015 	stw	r2,0(r6)
 800a8c4:	003fac06 	br	800a778 <_free_r+0xf0>
 800a8c8:	00c00504 	movi	r3,20
 800a8cc:	19401536 	bltu	r3,r5,800a924 <_free_r+0x29c>
 800a8d0:	28c01704 	addi	r3,r5,92
 800a8d4:	18c7883a 	add	r3,r3,r3
 800a8d8:	294016c4 	addi	r5,r5,91
 800a8dc:	003fb406 	br	800a7b0 <_free_r+0x128>
 800a8e0:	280bd0ba 	srai	r5,r5,2
 800a8e4:	00c00044 	movi	r3,1
 800a8e8:	38800117 	ldw	r2,4(r7)
 800a8ec:	194a983a 	sll	r5,r3,r5
 800a8f0:	2007883a 	mov	r3,r4
 800a8f4:	2884b03a 	or	r2,r5,r2
 800a8f8:	38800115 	stw	r2,4(r7)
 800a8fc:	003fbb06 	br	800a7ec <_free_r+0x164>
 800a900:	21800515 	stw	r6,20(r4)
 800a904:	21800415 	stw	r6,16(r4)
 800a908:	10c00054 	ori	r3,r2,1
 800a90c:	31c00315 	stw	r7,12(r6)
 800a910:	31c00215 	stw	r7,8(r6)
 800a914:	30c00115 	stw	r3,4(r6)
 800a918:	308d883a 	add	r6,r6,r2
 800a91c:	30800015 	stw	r2,0(r6)
 800a920:	003f9506 	br	800a778 <_free_r+0xf0>
 800a924:	00c01504 	movi	r3,84
 800a928:	19400536 	bltu	r3,r5,800a940 <_free_r+0x2b8>
 800a92c:	100ad33a 	srli	r5,r2,12
 800a930:	28c01bc4 	addi	r3,r5,111
 800a934:	18c7883a 	add	r3,r3,r3
 800a938:	29401b84 	addi	r5,r5,110
 800a93c:	003f9c06 	br	800a7b0 <_free_r+0x128>
 800a940:	00c05504 	movi	r3,340
 800a944:	19400536 	bltu	r3,r5,800a95c <_free_r+0x2d4>
 800a948:	100ad3fa 	srli	r5,r2,15
 800a94c:	28c01e04 	addi	r3,r5,120
 800a950:	18c7883a 	add	r3,r3,r3
 800a954:	29401dc4 	addi	r5,r5,119
 800a958:	003f9506 	br	800a7b0 <_free_r+0x128>
 800a95c:	00c15504 	movi	r3,1364
 800a960:	19400536 	bltu	r3,r5,800a978 <_free_r+0x2f0>
 800a964:	100ad4ba 	srli	r5,r2,18
 800a968:	28c01f44 	addi	r3,r5,125
 800a96c:	18c7883a 	add	r3,r3,r3
 800a970:	29401f04 	addi	r5,r5,124
 800a974:	003f8e06 	br	800a7b0 <_free_r+0x128>
 800a978:	00c03f84 	movi	r3,254
 800a97c:	01401f84 	movi	r5,126
 800a980:	003f8b06 	br	800a7b0 <_free_r+0x128>
 800a984:	10c00054 	ori	r3,r2,1
 800a988:	30c00115 	stw	r3,4(r6)
 800a98c:	308d883a 	add	r6,r6,r2
 800a990:	30800015 	stw	r2,0(r6)
 800a994:	003f7806 	br	800a778 <_free_r+0xf0>

0800a998 <__sfvwrite_r>:
 800a998:	30800217 	ldw	r2,8(r6)
 800a99c:	10006726 	beq	r2,zero,800ab3c <__sfvwrite_r+0x1a4>
 800a9a0:	28c0030b 	ldhu	r3,12(r5)
 800a9a4:	defff404 	addi	sp,sp,-48
 800a9a8:	dd400715 	stw	r21,28(sp)
 800a9ac:	dd000615 	stw	r20,24(sp)
 800a9b0:	dc000215 	stw	r16,8(sp)
 800a9b4:	dfc00b15 	stw	ra,44(sp)
 800a9b8:	df000a15 	stw	fp,40(sp)
 800a9bc:	ddc00915 	stw	r23,36(sp)
 800a9c0:	dd800815 	stw	r22,32(sp)
 800a9c4:	dcc00515 	stw	r19,20(sp)
 800a9c8:	dc800415 	stw	r18,16(sp)
 800a9cc:	dc400315 	stw	r17,12(sp)
 800a9d0:	1880020c 	andi	r2,r3,8
 800a9d4:	2821883a 	mov	r16,r5
 800a9d8:	202b883a 	mov	r21,r4
 800a9dc:	3029883a 	mov	r20,r6
 800a9e0:	10002726 	beq	r2,zero,800aa80 <__sfvwrite_r+0xe8>
 800a9e4:	28800417 	ldw	r2,16(r5)
 800a9e8:	10002526 	beq	r2,zero,800aa80 <__sfvwrite_r+0xe8>
 800a9ec:	1880008c 	andi	r2,r3,2
 800a9f0:	a4400017 	ldw	r17,0(r20)
 800a9f4:	10002a26 	beq	r2,zero,800aaa0 <__sfvwrite_r+0x108>
 800a9f8:	05a00034 	movhi	r22,32768
 800a9fc:	0027883a 	mov	r19,zero
 800aa00:	0025883a 	mov	r18,zero
 800aa04:	b5bf0004 	addi	r22,r22,-1024
 800aa08:	980d883a 	mov	r6,r19
 800aa0c:	a809883a 	mov	r4,r21
 800aa10:	90004626 	beq	r18,zero,800ab2c <__sfvwrite_r+0x194>
 800aa14:	900f883a 	mov	r7,r18
 800aa18:	b480022e 	bgeu	r22,r18,800aa24 <__sfvwrite_r+0x8c>
 800aa1c:	01e00034 	movhi	r7,32768
 800aa20:	39ff0004 	addi	r7,r7,-1024
 800aa24:	80800917 	ldw	r2,36(r16)
 800aa28:	81400717 	ldw	r5,28(r16)
 800aa2c:	103ee83a 	callr	r2
 800aa30:	00805a0e 	bge	zero,r2,800ab9c <__sfvwrite_r+0x204>
 800aa34:	a0c00217 	ldw	r3,8(r20)
 800aa38:	98a7883a 	add	r19,r19,r2
 800aa3c:	90a5c83a 	sub	r18,r18,r2
 800aa40:	1885c83a 	sub	r2,r3,r2
 800aa44:	a0800215 	stw	r2,8(r20)
 800aa48:	103fef1e 	bne	r2,zero,800aa08 <__sfvwrite_r+0x70>
 800aa4c:	0005883a 	mov	r2,zero
 800aa50:	dfc00b17 	ldw	ra,44(sp)
 800aa54:	df000a17 	ldw	fp,40(sp)
 800aa58:	ddc00917 	ldw	r23,36(sp)
 800aa5c:	dd800817 	ldw	r22,32(sp)
 800aa60:	dd400717 	ldw	r21,28(sp)
 800aa64:	dd000617 	ldw	r20,24(sp)
 800aa68:	dcc00517 	ldw	r19,20(sp)
 800aa6c:	dc800417 	ldw	r18,16(sp)
 800aa70:	dc400317 	ldw	r17,12(sp)
 800aa74:	dc000217 	ldw	r16,8(sp)
 800aa78:	dec00c04 	addi	sp,sp,48
 800aa7c:	f800283a 	ret
 800aa80:	800b883a 	mov	r5,r16
 800aa84:	a809883a 	mov	r4,r21
 800aa88:	80085080 	call	8008508 <__swsetup_r>
 800aa8c:	1000ee1e 	bne	r2,zero,800ae48 <__sfvwrite_r+0x4b0>
 800aa90:	80c0030b 	ldhu	r3,12(r16)
 800aa94:	a4400017 	ldw	r17,0(r20)
 800aa98:	1880008c 	andi	r2,r3,2
 800aa9c:	103fd61e 	bne	r2,zero,800a9f8 <__sfvwrite_r+0x60>
 800aaa0:	1880004c 	andi	r2,r3,1
 800aaa4:	1000421e 	bne	r2,zero,800abb0 <__sfvwrite_r+0x218>
 800aaa8:	0039883a 	mov	fp,zero
 800aaac:	0025883a 	mov	r18,zero
 800aab0:	90001a26 	beq	r18,zero,800ab1c <__sfvwrite_r+0x184>
 800aab4:	1880800c 	andi	r2,r3,512
 800aab8:	84c00217 	ldw	r19,8(r16)
 800aabc:	10002126 	beq	r2,zero,800ab44 <__sfvwrite_r+0x1ac>
 800aac0:	982f883a 	mov	r23,r19
 800aac4:	94c09636 	bltu	r18,r19,800ad20 <__sfvwrite_r+0x388>
 800aac8:	1881200c 	andi	r2,r3,1152
 800aacc:	1000a11e 	bne	r2,zero,800ad54 <__sfvwrite_r+0x3bc>
 800aad0:	81000017 	ldw	r4,0(r16)
 800aad4:	b80d883a 	mov	r6,r23
 800aad8:	e00b883a 	mov	r5,fp
 800aadc:	800bbcc0 	call	800bbcc <memmove>
 800aae0:	80c00217 	ldw	r3,8(r16)
 800aae4:	81000017 	ldw	r4,0(r16)
 800aae8:	9005883a 	mov	r2,r18
 800aaec:	1ce7c83a 	sub	r19,r3,r19
 800aaf0:	25cf883a 	add	r7,r4,r23
 800aaf4:	84c00215 	stw	r19,8(r16)
 800aaf8:	81c00015 	stw	r7,0(r16)
 800aafc:	a0c00217 	ldw	r3,8(r20)
 800ab00:	e0b9883a 	add	fp,fp,r2
 800ab04:	90a5c83a 	sub	r18,r18,r2
 800ab08:	18a7c83a 	sub	r19,r3,r2
 800ab0c:	a4c00215 	stw	r19,8(r20)
 800ab10:	983fce26 	beq	r19,zero,800aa4c <__sfvwrite_r+0xb4>
 800ab14:	80c0030b 	ldhu	r3,12(r16)
 800ab18:	903fe61e 	bne	r18,zero,800aab4 <__sfvwrite_r+0x11c>
 800ab1c:	8f000017 	ldw	fp,0(r17)
 800ab20:	8c800117 	ldw	r18,4(r17)
 800ab24:	8c400204 	addi	r17,r17,8
 800ab28:	003fe106 	br	800aab0 <__sfvwrite_r+0x118>
 800ab2c:	8cc00017 	ldw	r19,0(r17)
 800ab30:	8c800117 	ldw	r18,4(r17)
 800ab34:	8c400204 	addi	r17,r17,8
 800ab38:	003fb306 	br	800aa08 <__sfvwrite_r+0x70>
 800ab3c:	0005883a 	mov	r2,zero
 800ab40:	f800283a 	ret
 800ab44:	81000017 	ldw	r4,0(r16)
 800ab48:	80800417 	ldw	r2,16(r16)
 800ab4c:	11005a36 	bltu	r2,r4,800acb8 <__sfvwrite_r+0x320>
 800ab50:	85c00517 	ldw	r23,20(r16)
 800ab54:	95c05836 	bltu	r18,r23,800acb8 <__sfvwrite_r+0x320>
 800ab58:	00a00034 	movhi	r2,32768
 800ab5c:	10bfffc4 	addi	r2,r2,-1
 800ab60:	9009883a 	mov	r4,r18
 800ab64:	1480012e 	bgeu	r2,r18,800ab6c <__sfvwrite_r+0x1d4>
 800ab68:	1009883a 	mov	r4,r2
 800ab6c:	b80b883a 	mov	r5,r23
 800ab70:	80103900 	call	8010390 <__divsi3>
 800ab74:	b80b883a 	mov	r5,r23
 800ab78:	1009883a 	mov	r4,r2
 800ab7c:	80050200 	call	8005020 <__mulsi3>
 800ab80:	81400717 	ldw	r5,28(r16)
 800ab84:	80c00917 	ldw	r3,36(r16)
 800ab88:	100f883a 	mov	r7,r2
 800ab8c:	e00d883a 	mov	r6,fp
 800ab90:	a809883a 	mov	r4,r21
 800ab94:	183ee83a 	callr	r3
 800ab98:	00bfd816 	blt	zero,r2,800aafc <__sfvwrite_r+0x164>
 800ab9c:	8080030b 	ldhu	r2,12(r16)
 800aba0:	10801014 	ori	r2,r2,64
 800aba4:	8080030d 	sth	r2,12(r16)
 800aba8:	00bfffc4 	movi	r2,-1
 800abac:	003fa806 	br	800aa50 <__sfvwrite_r+0xb8>
 800abb0:	0027883a 	mov	r19,zero
 800abb4:	0011883a 	mov	r8,zero
 800abb8:	0039883a 	mov	fp,zero
 800abbc:	0025883a 	mov	r18,zero
 800abc0:	90001f26 	beq	r18,zero,800ac40 <__sfvwrite_r+0x2a8>
 800abc4:	40005a26 	beq	r8,zero,800ad30 <__sfvwrite_r+0x398>
 800abc8:	982d883a 	mov	r22,r19
 800abcc:	94c0012e 	bgeu	r18,r19,800abd4 <__sfvwrite_r+0x23c>
 800abd0:	902d883a 	mov	r22,r18
 800abd4:	81000017 	ldw	r4,0(r16)
 800abd8:	80800417 	ldw	r2,16(r16)
 800abdc:	b02f883a 	mov	r23,r22
 800abe0:	81c00517 	ldw	r7,20(r16)
 800abe4:	1100032e 	bgeu	r2,r4,800abf4 <__sfvwrite_r+0x25c>
 800abe8:	80c00217 	ldw	r3,8(r16)
 800abec:	38c7883a 	add	r3,r7,r3
 800abf0:	1d801816 	blt	r3,r22,800ac54 <__sfvwrite_r+0x2bc>
 800abf4:	b1c03e16 	blt	r22,r7,800acf0 <__sfvwrite_r+0x358>
 800abf8:	80800917 	ldw	r2,36(r16)
 800abfc:	81400717 	ldw	r5,28(r16)
 800ac00:	e00d883a 	mov	r6,fp
 800ac04:	da000115 	stw	r8,4(sp)
 800ac08:	a809883a 	mov	r4,r21
 800ac0c:	103ee83a 	callr	r2
 800ac10:	102f883a 	mov	r23,r2
 800ac14:	da000117 	ldw	r8,4(sp)
 800ac18:	00bfe00e 	bge	zero,r2,800ab9c <__sfvwrite_r+0x204>
 800ac1c:	9de7c83a 	sub	r19,r19,r23
 800ac20:	98001f26 	beq	r19,zero,800aca0 <__sfvwrite_r+0x308>
 800ac24:	a0800217 	ldw	r2,8(r20)
 800ac28:	e5f9883a 	add	fp,fp,r23
 800ac2c:	95e5c83a 	sub	r18,r18,r23
 800ac30:	15efc83a 	sub	r23,r2,r23
 800ac34:	a5c00215 	stw	r23,8(r20)
 800ac38:	b83f8426 	beq	r23,zero,800aa4c <__sfvwrite_r+0xb4>
 800ac3c:	903fe11e 	bne	r18,zero,800abc4 <__sfvwrite_r+0x22c>
 800ac40:	8f000017 	ldw	fp,0(r17)
 800ac44:	8c800117 	ldw	r18,4(r17)
 800ac48:	0011883a 	mov	r8,zero
 800ac4c:	8c400204 	addi	r17,r17,8
 800ac50:	003fdb06 	br	800abc0 <__sfvwrite_r+0x228>
 800ac54:	180d883a 	mov	r6,r3
 800ac58:	e00b883a 	mov	r5,fp
 800ac5c:	da000115 	stw	r8,4(sp)
 800ac60:	d8c00015 	stw	r3,0(sp)
 800ac64:	800bbcc0 	call	800bbcc <memmove>
 800ac68:	d8c00017 	ldw	r3,0(sp)
 800ac6c:	80800017 	ldw	r2,0(r16)
 800ac70:	800b883a 	mov	r5,r16
 800ac74:	a809883a 	mov	r4,r21
 800ac78:	10c5883a 	add	r2,r2,r3
 800ac7c:	80800015 	stw	r2,0(r16)
 800ac80:	d8c00015 	stw	r3,0(sp)
 800ac84:	800a1280 	call	800a128 <_fflush_r>
 800ac88:	d8c00017 	ldw	r3,0(sp)
 800ac8c:	da000117 	ldw	r8,4(sp)
 800ac90:	103fc21e 	bne	r2,zero,800ab9c <__sfvwrite_r+0x204>
 800ac94:	182f883a 	mov	r23,r3
 800ac98:	9de7c83a 	sub	r19,r19,r23
 800ac9c:	983fe11e 	bne	r19,zero,800ac24 <__sfvwrite_r+0x28c>
 800aca0:	800b883a 	mov	r5,r16
 800aca4:	a809883a 	mov	r4,r21
 800aca8:	800a1280 	call	800a128 <_fflush_r>
 800acac:	103fbb1e 	bne	r2,zero,800ab9c <__sfvwrite_r+0x204>
 800acb0:	0011883a 	mov	r8,zero
 800acb4:	003fdb06 	br	800ac24 <__sfvwrite_r+0x28c>
 800acb8:	94c0012e 	bgeu	r18,r19,800acc0 <__sfvwrite_r+0x328>
 800acbc:	9027883a 	mov	r19,r18
 800acc0:	980d883a 	mov	r6,r19
 800acc4:	e00b883a 	mov	r5,fp
 800acc8:	800bbcc0 	call	800bbcc <memmove>
 800accc:	80800217 	ldw	r2,8(r16)
 800acd0:	80c00017 	ldw	r3,0(r16)
 800acd4:	14c5c83a 	sub	r2,r2,r19
 800acd8:	1cc7883a 	add	r3,r3,r19
 800acdc:	80800215 	stw	r2,8(r16)
 800ace0:	80c00015 	stw	r3,0(r16)
 800ace4:	10004326 	beq	r2,zero,800adf4 <__sfvwrite_r+0x45c>
 800ace8:	9805883a 	mov	r2,r19
 800acec:	003f8306 	br	800aafc <__sfvwrite_r+0x164>
 800acf0:	b00d883a 	mov	r6,r22
 800acf4:	e00b883a 	mov	r5,fp
 800acf8:	da000115 	stw	r8,4(sp)
 800acfc:	800bbcc0 	call	800bbcc <memmove>
 800ad00:	80800217 	ldw	r2,8(r16)
 800ad04:	80c00017 	ldw	r3,0(r16)
 800ad08:	da000117 	ldw	r8,4(sp)
 800ad0c:	1585c83a 	sub	r2,r2,r22
 800ad10:	1dad883a 	add	r22,r3,r22
 800ad14:	80800215 	stw	r2,8(r16)
 800ad18:	85800015 	stw	r22,0(r16)
 800ad1c:	003fbf06 	br	800ac1c <__sfvwrite_r+0x284>
 800ad20:	81000017 	ldw	r4,0(r16)
 800ad24:	9027883a 	mov	r19,r18
 800ad28:	902f883a 	mov	r23,r18
 800ad2c:	003f6906 	br	800aad4 <__sfvwrite_r+0x13c>
 800ad30:	900d883a 	mov	r6,r18
 800ad34:	01400284 	movi	r5,10
 800ad38:	e009883a 	mov	r4,fp
 800ad3c:	800bae80 	call	800bae8 <memchr>
 800ad40:	10003e26 	beq	r2,zero,800ae3c <__sfvwrite_r+0x4a4>
 800ad44:	10800044 	addi	r2,r2,1
 800ad48:	1727c83a 	sub	r19,r2,fp
 800ad4c:	02000044 	movi	r8,1
 800ad50:	003f9d06 	br	800abc8 <__sfvwrite_r+0x230>
 800ad54:	80800517 	ldw	r2,20(r16)
 800ad58:	81400417 	ldw	r5,16(r16)
 800ad5c:	81c00017 	ldw	r7,0(r16)
 800ad60:	10a7883a 	add	r19,r2,r2
 800ad64:	9885883a 	add	r2,r19,r2
 800ad68:	1026d7fa 	srli	r19,r2,31
 800ad6c:	396dc83a 	sub	r22,r7,r5
 800ad70:	b1000044 	addi	r4,r22,1
 800ad74:	9885883a 	add	r2,r19,r2
 800ad78:	1027d07a 	srai	r19,r2,1
 800ad7c:	2485883a 	add	r2,r4,r18
 800ad80:	980d883a 	mov	r6,r19
 800ad84:	9880022e 	bgeu	r19,r2,800ad90 <__sfvwrite_r+0x3f8>
 800ad88:	1027883a 	mov	r19,r2
 800ad8c:	100d883a 	mov	r6,r2
 800ad90:	18c1000c 	andi	r3,r3,1024
 800ad94:	18001c26 	beq	r3,zero,800ae08 <__sfvwrite_r+0x470>
 800ad98:	300b883a 	mov	r5,r6
 800ad9c:	a809883a 	mov	r4,r21
 800ada0:	800b2dc0 	call	800b2dc <_malloc_r>
 800ada4:	102f883a 	mov	r23,r2
 800ada8:	10002926 	beq	r2,zero,800ae50 <__sfvwrite_r+0x4b8>
 800adac:	81400417 	ldw	r5,16(r16)
 800adb0:	b00d883a 	mov	r6,r22
 800adb4:	1009883a 	mov	r4,r2
 800adb8:	8005ad80 	call	8005ad8 <memcpy>
 800adbc:	8080030b 	ldhu	r2,12(r16)
 800adc0:	00fedfc4 	movi	r3,-1153
 800adc4:	10c4703a 	and	r2,r2,r3
 800adc8:	10802014 	ori	r2,r2,128
 800adcc:	8080030d 	sth	r2,12(r16)
 800add0:	bd89883a 	add	r4,r23,r22
 800add4:	9d8fc83a 	sub	r7,r19,r22
 800add8:	85c00415 	stw	r23,16(r16)
 800addc:	84c00515 	stw	r19,20(r16)
 800ade0:	81000015 	stw	r4,0(r16)
 800ade4:	9027883a 	mov	r19,r18
 800ade8:	81c00215 	stw	r7,8(r16)
 800adec:	902f883a 	mov	r23,r18
 800adf0:	003f3806 	br	800aad4 <__sfvwrite_r+0x13c>
 800adf4:	800b883a 	mov	r5,r16
 800adf8:	a809883a 	mov	r4,r21
 800adfc:	800a1280 	call	800a128 <_fflush_r>
 800ae00:	103fb926 	beq	r2,zero,800ace8 <__sfvwrite_r+0x350>
 800ae04:	003f6506 	br	800ab9c <__sfvwrite_r+0x204>
 800ae08:	a809883a 	mov	r4,r21
 800ae0c:	800cf480 	call	800cf48 <_realloc_r>
 800ae10:	102f883a 	mov	r23,r2
 800ae14:	103fee1e 	bne	r2,zero,800add0 <__sfvwrite_r+0x438>
 800ae18:	81400417 	ldw	r5,16(r16)
 800ae1c:	a809883a 	mov	r4,r21
 800ae20:	800a6880 	call	800a688 <_free_r>
 800ae24:	8080030b 	ldhu	r2,12(r16)
 800ae28:	00ffdfc4 	movi	r3,-129
 800ae2c:	1884703a 	and	r2,r3,r2
 800ae30:	00c00304 	movi	r3,12
 800ae34:	a8c00015 	stw	r3,0(r21)
 800ae38:	003f5906 	br	800aba0 <__sfvwrite_r+0x208>
 800ae3c:	94c00044 	addi	r19,r18,1
 800ae40:	02000044 	movi	r8,1
 800ae44:	003f6006 	br	800abc8 <__sfvwrite_r+0x230>
 800ae48:	00bfffc4 	movi	r2,-1
 800ae4c:	003f0006 	br	800aa50 <__sfvwrite_r+0xb8>
 800ae50:	00800304 	movi	r2,12
 800ae54:	a8800015 	stw	r2,0(r21)
 800ae58:	8080030b 	ldhu	r2,12(r16)
 800ae5c:	003f5006 	br	800aba0 <__sfvwrite_r+0x208>

0800ae60 <_fwalk>:
 800ae60:	defff704 	addi	sp,sp,-36
 800ae64:	dd000415 	stw	r20,16(sp)
 800ae68:	dfc00815 	stw	ra,32(sp)
 800ae6c:	ddc00715 	stw	r23,28(sp)
 800ae70:	dd800615 	stw	r22,24(sp)
 800ae74:	dd400515 	stw	r21,20(sp)
 800ae78:	dcc00315 	stw	r19,12(sp)
 800ae7c:	dc800215 	stw	r18,8(sp)
 800ae80:	dc400115 	stw	r17,4(sp)
 800ae84:	dc000015 	stw	r16,0(sp)
 800ae88:	2500b804 	addi	r20,r4,736
 800ae8c:	a0002326 	beq	r20,zero,800af1c <_fwalk+0xbc>
 800ae90:	282b883a 	mov	r21,r5
 800ae94:	002f883a 	mov	r23,zero
 800ae98:	05800044 	movi	r22,1
 800ae9c:	04ffffc4 	movi	r19,-1
 800aea0:	a4400117 	ldw	r17,4(r20)
 800aea4:	a4800217 	ldw	r18,8(r20)
 800aea8:	8c7fffc4 	addi	r17,r17,-1
 800aeac:	88000d16 	blt	r17,zero,800aee4 <_fwalk+0x84>
 800aeb0:	94000304 	addi	r16,r18,12
 800aeb4:	94800384 	addi	r18,r18,14
 800aeb8:	8080000b 	ldhu	r2,0(r16)
 800aebc:	8c7fffc4 	addi	r17,r17,-1
 800aec0:	813ffd04 	addi	r4,r16,-12
 800aec4:	b080042e 	bgeu	r22,r2,800aed8 <_fwalk+0x78>
 800aec8:	9080000f 	ldh	r2,0(r18)
 800aecc:	14c00226 	beq	r2,r19,800aed8 <_fwalk+0x78>
 800aed0:	a83ee83a 	callr	r21
 800aed4:	b8aeb03a 	or	r23,r23,r2
 800aed8:	84001a04 	addi	r16,r16,104
 800aedc:	94801a04 	addi	r18,r18,104
 800aee0:	8cfff51e 	bne	r17,r19,800aeb8 <_fwalk+0x58>
 800aee4:	a5000017 	ldw	r20,0(r20)
 800aee8:	a03fed1e 	bne	r20,zero,800aea0 <_fwalk+0x40>
 800aeec:	b805883a 	mov	r2,r23
 800aef0:	dfc00817 	ldw	ra,32(sp)
 800aef4:	ddc00717 	ldw	r23,28(sp)
 800aef8:	dd800617 	ldw	r22,24(sp)
 800aefc:	dd400517 	ldw	r21,20(sp)
 800af00:	dd000417 	ldw	r20,16(sp)
 800af04:	dcc00317 	ldw	r19,12(sp)
 800af08:	dc800217 	ldw	r18,8(sp)
 800af0c:	dc400117 	ldw	r17,4(sp)
 800af10:	dc000017 	ldw	r16,0(sp)
 800af14:	dec00904 	addi	sp,sp,36
 800af18:	f800283a 	ret
 800af1c:	002f883a 	mov	r23,zero
 800af20:	003ff206 	br	800aeec <_fwalk+0x8c>

0800af24 <_fwalk_reent>:
 800af24:	defff704 	addi	sp,sp,-36
 800af28:	dd000415 	stw	r20,16(sp)
 800af2c:	dfc00815 	stw	ra,32(sp)
 800af30:	ddc00715 	stw	r23,28(sp)
 800af34:	dd800615 	stw	r22,24(sp)
 800af38:	dd400515 	stw	r21,20(sp)
 800af3c:	dcc00315 	stw	r19,12(sp)
 800af40:	dc800215 	stw	r18,8(sp)
 800af44:	dc400115 	stw	r17,4(sp)
 800af48:	dc000015 	stw	r16,0(sp)
 800af4c:	2500b804 	addi	r20,r4,736
 800af50:	a0002326 	beq	r20,zero,800afe0 <_fwalk_reent+0xbc>
 800af54:	282b883a 	mov	r21,r5
 800af58:	2027883a 	mov	r19,r4
 800af5c:	002f883a 	mov	r23,zero
 800af60:	05800044 	movi	r22,1
 800af64:	04bfffc4 	movi	r18,-1
 800af68:	a4400117 	ldw	r17,4(r20)
 800af6c:	a4000217 	ldw	r16,8(r20)
 800af70:	8c7fffc4 	addi	r17,r17,-1
 800af74:	88000c16 	blt	r17,zero,800afa8 <_fwalk_reent+0x84>
 800af78:	84000304 	addi	r16,r16,12
 800af7c:	8080000b 	ldhu	r2,0(r16)
 800af80:	8c7fffc4 	addi	r17,r17,-1
 800af84:	817ffd04 	addi	r5,r16,-12
 800af88:	b080052e 	bgeu	r22,r2,800afa0 <_fwalk_reent+0x7c>
 800af8c:	8080008f 	ldh	r2,2(r16)
 800af90:	9809883a 	mov	r4,r19
 800af94:	14800226 	beq	r2,r18,800afa0 <_fwalk_reent+0x7c>
 800af98:	a83ee83a 	callr	r21
 800af9c:	b8aeb03a 	or	r23,r23,r2
 800afa0:	84001a04 	addi	r16,r16,104
 800afa4:	8cbff51e 	bne	r17,r18,800af7c <_fwalk_reent+0x58>
 800afa8:	a5000017 	ldw	r20,0(r20)
 800afac:	a03fee1e 	bne	r20,zero,800af68 <_fwalk_reent+0x44>
 800afb0:	b805883a 	mov	r2,r23
 800afb4:	dfc00817 	ldw	ra,32(sp)
 800afb8:	ddc00717 	ldw	r23,28(sp)
 800afbc:	dd800617 	ldw	r22,24(sp)
 800afc0:	dd400517 	ldw	r21,20(sp)
 800afc4:	dd000417 	ldw	r20,16(sp)
 800afc8:	dcc00317 	ldw	r19,12(sp)
 800afcc:	dc800217 	ldw	r18,8(sp)
 800afd0:	dc400117 	ldw	r17,4(sp)
 800afd4:	dc000017 	ldw	r16,0(sp)
 800afd8:	dec00904 	addi	sp,sp,36
 800afdc:	f800283a 	ret
 800afe0:	002f883a 	mov	r23,zero
 800afe4:	003ff206 	br	800afb0 <_fwalk_reent+0x8c>

0800afe8 <_gettimeofday_r>:
 800afe8:	defffd04 	addi	sp,sp,-12
 800afec:	2805883a 	mov	r2,r5
 800aff0:	dc000015 	stw	r16,0(sp)
 800aff4:	040200b4 	movhi	r16,2050
 800aff8:	dc400115 	stw	r17,4(sp)
 800affc:	84232a04 	addi	r16,r16,-29528
 800b000:	2023883a 	mov	r17,r4
 800b004:	300b883a 	mov	r5,r6
 800b008:	1009883a 	mov	r4,r2
 800b00c:	dfc00215 	stw	ra,8(sp)
 800b010:	80000015 	stw	zero,0(r16)
 800b014:	80126700 	call	8012670 <gettimeofday>
 800b018:	00ffffc4 	movi	r3,-1
 800b01c:	10c00526 	beq	r2,r3,800b034 <_gettimeofday_r+0x4c>
 800b020:	dfc00217 	ldw	ra,8(sp)
 800b024:	dc400117 	ldw	r17,4(sp)
 800b028:	dc000017 	ldw	r16,0(sp)
 800b02c:	dec00304 	addi	sp,sp,12
 800b030:	f800283a 	ret
 800b034:	80c00017 	ldw	r3,0(r16)
 800b038:	183ff926 	beq	r3,zero,800b020 <_gettimeofday_r+0x38>
 800b03c:	88c00015 	stw	r3,0(r17)
 800b040:	003ff706 	br	800b020 <_gettimeofday_r+0x38>

0800b044 <_setlocale_r>:
 800b044:	30001b26 	beq	r6,zero,800b0b4 <_setlocale_r+0x70>
 800b048:	01420074 	movhi	r5,2049
 800b04c:	defffe04 	addi	sp,sp,-8
 800b050:	29550904 	addi	r5,r5,21540
 800b054:	3009883a 	mov	r4,r6
 800b058:	dc000015 	stw	r16,0(sp)
 800b05c:	dfc00115 	stw	ra,4(sp)
 800b060:	3021883a 	mov	r16,r6
 800b064:	800d6b00 	call	800d6b0 <strcmp>
 800b068:	1000061e 	bne	r2,zero,800b084 <_setlocale_r+0x40>
 800b06c:	00820074 	movhi	r2,2049
 800b070:	1094ea04 	addi	r2,r2,21416
 800b074:	dfc00117 	ldw	ra,4(sp)
 800b078:	dc000017 	ldw	r16,0(sp)
 800b07c:	dec00204 	addi	sp,sp,8
 800b080:	f800283a 	ret
 800b084:	01420074 	movhi	r5,2049
 800b088:	2954ea04 	addi	r5,r5,21416
 800b08c:	8009883a 	mov	r4,r16
 800b090:	800d6b00 	call	800d6b0 <strcmp>
 800b094:	103ff526 	beq	r2,zero,800b06c <_setlocale_r+0x28>
 800b098:	01420074 	movhi	r5,2049
 800b09c:	2954f404 	addi	r5,r5,21456
 800b0a0:	8009883a 	mov	r4,r16
 800b0a4:	800d6b00 	call	800d6b0 <strcmp>
 800b0a8:	103ff026 	beq	r2,zero,800b06c <_setlocale_r+0x28>
 800b0ac:	0005883a 	mov	r2,zero
 800b0b0:	003ff006 	br	800b074 <_setlocale_r+0x30>
 800b0b4:	00820074 	movhi	r2,2049
 800b0b8:	1094ea04 	addi	r2,r2,21416
 800b0bc:	f800283a 	ret

0800b0c0 <__locale_charset>:
 800b0c0:	00820074 	movhi	r2,2049
 800b0c4:	10968304 	addi	r2,r2,23052
 800b0c8:	f800283a 	ret

0800b0cc <__locale_mb_cur_max>:
 800b0cc:	00820074 	movhi	r2,2049
 800b0d0:	109c2804 	addi	r2,r2,28832
 800b0d4:	10800017 	ldw	r2,0(r2)
 800b0d8:	f800283a 	ret

0800b0dc <__locale_msgcharset>:
 800b0dc:	00820074 	movhi	r2,2049
 800b0e0:	10967b04 	addi	r2,r2,23020
 800b0e4:	f800283a 	ret

0800b0e8 <__locale_cjk_lang>:
 800b0e8:	0005883a 	mov	r2,zero
 800b0ec:	f800283a 	ret

0800b0f0 <_localeconv_r>:
 800b0f0:	00820074 	movhi	r2,2049
 800b0f4:	10968b04 	addi	r2,r2,23084
 800b0f8:	f800283a 	ret

0800b0fc <setlocale>:
 800b0fc:	00820074 	movhi	r2,2049
 800b100:	109c2704 	addi	r2,r2,28828
 800b104:	280d883a 	mov	r6,r5
 800b108:	200b883a 	mov	r5,r4
 800b10c:	11000017 	ldw	r4,0(r2)
 800b110:	800b0441 	jmpi	800b044 <_setlocale_r>

0800b114 <localeconv>:
 800b114:	00820074 	movhi	r2,2049
 800b118:	10968b04 	addi	r2,r2,23084
 800b11c:	f800283a 	ret

0800b120 <__smakebuf_r>:
 800b120:	2880030b 	ldhu	r2,12(r5)
 800b124:	10c0008c 	andi	r3,r2,2
 800b128:	1800411e 	bne	r3,zero,800b230 <__smakebuf_r+0x110>
 800b12c:	deffec04 	addi	sp,sp,-80
 800b130:	dc000f15 	stw	r16,60(sp)
 800b134:	2821883a 	mov	r16,r5
 800b138:	2940038f 	ldh	r5,14(r5)
 800b13c:	dc401015 	stw	r17,64(sp)
 800b140:	dfc01315 	stw	ra,76(sp)
 800b144:	dcc01215 	stw	r19,72(sp)
 800b148:	dc801115 	stw	r18,68(sp)
 800b14c:	2023883a 	mov	r17,r4
 800b150:	28001c16 	blt	r5,zero,800b1c4 <__smakebuf_r+0xa4>
 800b154:	d80d883a 	mov	r6,sp
 800b158:	800f4780 	call	800f478 <_fstat_r>
 800b15c:	10001816 	blt	r2,zero,800b1c0 <__smakebuf_r+0xa0>
 800b160:	d8800117 	ldw	r2,4(sp)
 800b164:	00e00014 	movui	r3,32768
 800b168:	10bc000c 	andi	r2,r2,61440
 800b16c:	14c80020 	cmpeqi	r19,r2,8192
 800b170:	10c03726 	beq	r2,r3,800b250 <__smakebuf_r+0x130>
 800b174:	80c0030b 	ldhu	r3,12(r16)
 800b178:	18c20014 	ori	r3,r3,2048
 800b17c:	80c0030d 	sth	r3,12(r16)
 800b180:	00c80004 	movi	r3,8192
 800b184:	10c0521e 	bne	r2,r3,800b2d0 <__smakebuf_r+0x1b0>
 800b188:	8140038f 	ldh	r5,14(r16)
 800b18c:	8809883a 	mov	r4,r17
 800b190:	800f4d40 	call	800f4d4 <_isatty_r>
 800b194:	10004c26 	beq	r2,zero,800b2c8 <__smakebuf_r+0x1a8>
 800b198:	8080030b 	ldhu	r2,12(r16)
 800b19c:	80c010c4 	addi	r3,r16,67
 800b1a0:	80c00015 	stw	r3,0(r16)
 800b1a4:	10800054 	ori	r2,r2,1
 800b1a8:	8080030d 	sth	r2,12(r16)
 800b1ac:	00800044 	movi	r2,1
 800b1b0:	80c00415 	stw	r3,16(r16)
 800b1b4:	80800515 	stw	r2,20(r16)
 800b1b8:	04810004 	movi	r18,1024
 800b1bc:	00000706 	br	800b1dc <__smakebuf_r+0xbc>
 800b1c0:	8080030b 	ldhu	r2,12(r16)
 800b1c4:	10c0200c 	andi	r3,r2,128
 800b1c8:	18001f1e 	bne	r3,zero,800b248 <__smakebuf_r+0x128>
 800b1cc:	04810004 	movi	r18,1024
 800b1d0:	10820014 	ori	r2,r2,2048
 800b1d4:	8080030d 	sth	r2,12(r16)
 800b1d8:	0027883a 	mov	r19,zero
 800b1dc:	900b883a 	mov	r5,r18
 800b1e0:	8809883a 	mov	r4,r17
 800b1e4:	800b2dc0 	call	800b2dc <_malloc_r>
 800b1e8:	10002c26 	beq	r2,zero,800b29c <__smakebuf_r+0x17c>
 800b1ec:	80c0030b 	ldhu	r3,12(r16)
 800b1f0:	01020074 	movhi	r4,2049
 800b1f4:	21286f04 	addi	r4,r4,-24132
 800b1f8:	89000f15 	stw	r4,60(r17)
 800b1fc:	18c02014 	ori	r3,r3,128
 800b200:	80c0030d 	sth	r3,12(r16)
 800b204:	80800015 	stw	r2,0(r16)
 800b208:	80800415 	stw	r2,16(r16)
 800b20c:	84800515 	stw	r18,20(r16)
 800b210:	98001a1e 	bne	r19,zero,800b27c <__smakebuf_r+0x15c>
 800b214:	dfc01317 	ldw	ra,76(sp)
 800b218:	dcc01217 	ldw	r19,72(sp)
 800b21c:	dc801117 	ldw	r18,68(sp)
 800b220:	dc401017 	ldw	r17,64(sp)
 800b224:	dc000f17 	ldw	r16,60(sp)
 800b228:	dec01404 	addi	sp,sp,80
 800b22c:	f800283a 	ret
 800b230:	288010c4 	addi	r2,r5,67
 800b234:	28800015 	stw	r2,0(r5)
 800b238:	28800415 	stw	r2,16(r5)
 800b23c:	00800044 	movi	r2,1
 800b240:	28800515 	stw	r2,20(r5)
 800b244:	f800283a 	ret
 800b248:	04801004 	movi	r18,64
 800b24c:	003fe006 	br	800b1d0 <__smakebuf_r+0xb0>
 800b250:	81000a17 	ldw	r4,40(r16)
 800b254:	00c20074 	movhi	r3,2049
 800b258:	18f59304 	addi	r3,r3,-10676
 800b25c:	20ffc51e 	bne	r4,r3,800b174 <__smakebuf_r+0x54>
 800b260:	8080030b 	ldhu	r2,12(r16)
 800b264:	04810004 	movi	r18,1024
 800b268:	84801315 	stw	r18,76(r16)
 800b26c:	1484b03a 	or	r2,r2,r18
 800b270:	8080030d 	sth	r2,12(r16)
 800b274:	0027883a 	mov	r19,zero
 800b278:	003fd806 	br	800b1dc <__smakebuf_r+0xbc>
 800b27c:	8140038f 	ldh	r5,14(r16)
 800b280:	8809883a 	mov	r4,r17
 800b284:	800f4d40 	call	800f4d4 <_isatty_r>
 800b288:	103fe226 	beq	r2,zero,800b214 <__smakebuf_r+0xf4>
 800b28c:	8080030b 	ldhu	r2,12(r16)
 800b290:	10800054 	ori	r2,r2,1
 800b294:	8080030d 	sth	r2,12(r16)
 800b298:	003fde06 	br	800b214 <__smakebuf_r+0xf4>
 800b29c:	8080030b 	ldhu	r2,12(r16)
 800b2a0:	10c0800c 	andi	r3,r2,512
 800b2a4:	183fdb1e 	bne	r3,zero,800b214 <__smakebuf_r+0xf4>
 800b2a8:	10800094 	ori	r2,r2,2
 800b2ac:	80c010c4 	addi	r3,r16,67
 800b2b0:	8080030d 	sth	r2,12(r16)
 800b2b4:	00800044 	movi	r2,1
 800b2b8:	80c00015 	stw	r3,0(r16)
 800b2bc:	80c00415 	stw	r3,16(r16)
 800b2c0:	80800515 	stw	r2,20(r16)
 800b2c4:	003fd306 	br	800b214 <__smakebuf_r+0xf4>
 800b2c8:	04810004 	movi	r18,1024
 800b2cc:	003fc306 	br	800b1dc <__smakebuf_r+0xbc>
 800b2d0:	0027883a 	mov	r19,zero
 800b2d4:	04810004 	movi	r18,1024
 800b2d8:	003fc006 	br	800b1dc <__smakebuf_r+0xbc>

0800b2dc <_malloc_r>:
 800b2dc:	defff504 	addi	sp,sp,-44
 800b2e0:	dc800315 	stw	r18,12(sp)
 800b2e4:	dfc00a15 	stw	ra,40(sp)
 800b2e8:	df000915 	stw	fp,36(sp)
 800b2ec:	ddc00815 	stw	r23,32(sp)
 800b2f0:	dd800715 	stw	r22,28(sp)
 800b2f4:	dd400615 	stw	r21,24(sp)
 800b2f8:	dd000515 	stw	r20,20(sp)
 800b2fc:	dcc00415 	stw	r19,16(sp)
 800b300:	dc400215 	stw	r17,8(sp)
 800b304:	dc000115 	stw	r16,4(sp)
 800b308:	288002c4 	addi	r2,r5,11
 800b30c:	00c00584 	movi	r3,22
 800b310:	2025883a 	mov	r18,r4
 800b314:	18807f2e 	bgeu	r3,r2,800b514 <_malloc_r+0x238>
 800b318:	047ffe04 	movi	r17,-8
 800b31c:	1462703a 	and	r17,r2,r17
 800b320:	8800a316 	blt	r17,zero,800b5b0 <_malloc_r+0x2d4>
 800b324:	8940a236 	bltu	r17,r5,800b5b0 <_malloc_r+0x2d4>
 800b328:	8012bcc0 	call	8012bcc <__malloc_lock>
 800b32c:	00807dc4 	movi	r2,503
 800b330:	1441e92e 	bgeu	r2,r17,800bad8 <_malloc_r+0x7fc>
 800b334:	8804d27a 	srli	r2,r17,9
 800b338:	1000a126 	beq	r2,zero,800b5c0 <_malloc_r+0x2e4>
 800b33c:	00c00104 	movi	r3,4
 800b340:	18811e36 	bltu	r3,r2,800b7bc <_malloc_r+0x4e0>
 800b344:	8804d1ba 	srli	r2,r17,6
 800b348:	12000e44 	addi	r8,r2,57
 800b34c:	11c00e04 	addi	r7,r2,56
 800b350:	4209883a 	add	r4,r8,r8
 800b354:	04c20074 	movhi	r19,2049
 800b358:	2109883a 	add	r4,r4,r4
 800b35c:	9cd69904 	addi	r19,r19,23140
 800b360:	2109883a 	add	r4,r4,r4
 800b364:	9909883a 	add	r4,r19,r4
 800b368:	24000117 	ldw	r16,4(r4)
 800b36c:	213ffe04 	addi	r4,r4,-8
 800b370:	24009726 	beq	r4,r16,800b5d0 <_malloc_r+0x2f4>
 800b374:	80800117 	ldw	r2,4(r16)
 800b378:	01bfff04 	movi	r6,-4
 800b37c:	014003c4 	movi	r5,15
 800b380:	1184703a 	and	r2,r2,r6
 800b384:	1447c83a 	sub	r3,r2,r17
 800b388:	28c00716 	blt	r5,r3,800b3a8 <_malloc_r+0xcc>
 800b38c:	1800920e 	bge	r3,zero,800b5d8 <_malloc_r+0x2fc>
 800b390:	84000317 	ldw	r16,12(r16)
 800b394:	24008e26 	beq	r4,r16,800b5d0 <_malloc_r+0x2f4>
 800b398:	80800117 	ldw	r2,4(r16)
 800b39c:	1184703a 	and	r2,r2,r6
 800b3a0:	1447c83a 	sub	r3,r2,r17
 800b3a4:	28fff90e 	bge	r5,r3,800b38c <_malloc_r+0xb0>
 800b3a8:	3809883a 	mov	r4,r7
 800b3ac:	01820074 	movhi	r6,2049
 800b3b0:	9c000417 	ldw	r16,16(r19)
 800b3b4:	31969904 	addi	r6,r6,23140
 800b3b8:	32000204 	addi	r8,r6,8
 800b3bc:	82013426 	beq	r16,r8,800b890 <_malloc_r+0x5b4>
 800b3c0:	80c00117 	ldw	r3,4(r16)
 800b3c4:	00bfff04 	movi	r2,-4
 800b3c8:	188e703a 	and	r7,r3,r2
 800b3cc:	3c45c83a 	sub	r2,r7,r17
 800b3d0:	00c003c4 	movi	r3,15
 800b3d4:	18811f16 	blt	r3,r2,800b854 <_malloc_r+0x578>
 800b3d8:	32000515 	stw	r8,20(r6)
 800b3dc:	32000415 	stw	r8,16(r6)
 800b3e0:	10007f0e 	bge	r2,zero,800b5e0 <_malloc_r+0x304>
 800b3e4:	00807fc4 	movi	r2,511
 800b3e8:	11c0fd36 	bltu	r2,r7,800b7e0 <_malloc_r+0x504>
 800b3ec:	3806d0fa 	srli	r3,r7,3
 800b3f0:	01c00044 	movi	r7,1
 800b3f4:	30800117 	ldw	r2,4(r6)
 800b3f8:	19400044 	addi	r5,r3,1
 800b3fc:	294b883a 	add	r5,r5,r5
 800b400:	1807d0ba 	srai	r3,r3,2
 800b404:	294b883a 	add	r5,r5,r5
 800b408:	294b883a 	add	r5,r5,r5
 800b40c:	298b883a 	add	r5,r5,r6
 800b410:	38c6983a 	sll	r3,r7,r3
 800b414:	29c00017 	ldw	r7,0(r5)
 800b418:	2a7ffe04 	addi	r9,r5,-8
 800b41c:	1886b03a 	or	r3,r3,r2
 800b420:	82400315 	stw	r9,12(r16)
 800b424:	81c00215 	stw	r7,8(r16)
 800b428:	30c00115 	stw	r3,4(r6)
 800b42c:	2c000015 	stw	r16,0(r5)
 800b430:	3c000315 	stw	r16,12(r7)
 800b434:	2005d0ba 	srai	r2,r4,2
 800b438:	01400044 	movi	r5,1
 800b43c:	288a983a 	sll	r5,r5,r2
 800b440:	19406f36 	bltu	r3,r5,800b600 <_malloc_r+0x324>
 800b444:	28c4703a 	and	r2,r5,r3
 800b448:	10000a1e 	bne	r2,zero,800b474 <_malloc_r+0x198>
 800b44c:	00bfff04 	movi	r2,-4
 800b450:	294b883a 	add	r5,r5,r5
 800b454:	2088703a 	and	r4,r4,r2
 800b458:	28c4703a 	and	r2,r5,r3
 800b45c:	21000104 	addi	r4,r4,4
 800b460:	1000041e 	bne	r2,zero,800b474 <_malloc_r+0x198>
 800b464:	294b883a 	add	r5,r5,r5
 800b468:	28c4703a 	and	r2,r5,r3
 800b46c:	21000104 	addi	r4,r4,4
 800b470:	103ffc26 	beq	r2,zero,800b464 <_malloc_r+0x188>
 800b474:	02bfff04 	movi	r10,-4
 800b478:	024003c4 	movi	r9,15
 800b47c:	21800044 	addi	r6,r4,1
 800b480:	318d883a 	add	r6,r6,r6
 800b484:	318d883a 	add	r6,r6,r6
 800b488:	318d883a 	add	r6,r6,r6
 800b48c:	998d883a 	add	r6,r19,r6
 800b490:	333ffe04 	addi	r12,r6,-8
 800b494:	2017883a 	mov	r11,r4
 800b498:	31800104 	addi	r6,r6,4
 800b49c:	34000017 	ldw	r16,0(r6)
 800b4a0:	31fffd04 	addi	r7,r6,-12
 800b4a4:	81c0041e 	bne	r16,r7,800b4b8 <_malloc_r+0x1dc>
 800b4a8:	0000fb06 	br	800b898 <_malloc_r+0x5bc>
 800b4ac:	1801030e 	bge	r3,zero,800b8bc <_malloc_r+0x5e0>
 800b4b0:	84000317 	ldw	r16,12(r16)
 800b4b4:	81c0f826 	beq	r16,r7,800b898 <_malloc_r+0x5bc>
 800b4b8:	80800117 	ldw	r2,4(r16)
 800b4bc:	1284703a 	and	r2,r2,r10
 800b4c0:	1447c83a 	sub	r3,r2,r17
 800b4c4:	48fff90e 	bge	r9,r3,800b4ac <_malloc_r+0x1d0>
 800b4c8:	80800317 	ldw	r2,12(r16)
 800b4cc:	81000217 	ldw	r4,8(r16)
 800b4d0:	89400054 	ori	r5,r17,1
 800b4d4:	81400115 	stw	r5,4(r16)
 800b4d8:	20800315 	stw	r2,12(r4)
 800b4dc:	11000215 	stw	r4,8(r2)
 800b4e0:	8463883a 	add	r17,r16,r17
 800b4e4:	9c400515 	stw	r17,20(r19)
 800b4e8:	9c400415 	stw	r17,16(r19)
 800b4ec:	18800054 	ori	r2,r3,1
 800b4f0:	88800115 	stw	r2,4(r17)
 800b4f4:	8a000315 	stw	r8,12(r17)
 800b4f8:	8a000215 	stw	r8,8(r17)
 800b4fc:	88e3883a 	add	r17,r17,r3
 800b500:	88c00015 	stw	r3,0(r17)
 800b504:	9009883a 	mov	r4,r18
 800b508:	8012bf00 	call	8012bf0 <__malloc_unlock>
 800b50c:	80800204 	addi	r2,r16,8
 800b510:	00001b06 	br	800b580 <_malloc_r+0x2a4>
 800b514:	04400404 	movi	r17,16
 800b518:	89402536 	bltu	r17,r5,800b5b0 <_malloc_r+0x2d4>
 800b51c:	8012bcc0 	call	8012bcc <__malloc_lock>
 800b520:	00800184 	movi	r2,6
 800b524:	01000084 	movi	r4,2
 800b528:	04c20074 	movhi	r19,2049
 800b52c:	1085883a 	add	r2,r2,r2
 800b530:	9cd69904 	addi	r19,r19,23140
 800b534:	1085883a 	add	r2,r2,r2
 800b538:	9885883a 	add	r2,r19,r2
 800b53c:	14000117 	ldw	r16,4(r2)
 800b540:	10fffe04 	addi	r3,r2,-8
 800b544:	80c0d926 	beq	r16,r3,800b8ac <_malloc_r+0x5d0>
 800b548:	80c00117 	ldw	r3,4(r16)
 800b54c:	81000317 	ldw	r4,12(r16)
 800b550:	00bfff04 	movi	r2,-4
 800b554:	1884703a 	and	r2,r3,r2
 800b558:	81400217 	ldw	r5,8(r16)
 800b55c:	8085883a 	add	r2,r16,r2
 800b560:	10c00117 	ldw	r3,4(r2)
 800b564:	29000315 	stw	r4,12(r5)
 800b568:	21400215 	stw	r5,8(r4)
 800b56c:	18c00054 	ori	r3,r3,1
 800b570:	10c00115 	stw	r3,4(r2)
 800b574:	9009883a 	mov	r4,r18
 800b578:	8012bf00 	call	8012bf0 <__malloc_unlock>
 800b57c:	80800204 	addi	r2,r16,8
 800b580:	dfc00a17 	ldw	ra,40(sp)
 800b584:	df000917 	ldw	fp,36(sp)
 800b588:	ddc00817 	ldw	r23,32(sp)
 800b58c:	dd800717 	ldw	r22,28(sp)
 800b590:	dd400617 	ldw	r21,24(sp)
 800b594:	dd000517 	ldw	r20,20(sp)
 800b598:	dcc00417 	ldw	r19,16(sp)
 800b59c:	dc800317 	ldw	r18,12(sp)
 800b5a0:	dc400217 	ldw	r17,8(sp)
 800b5a4:	dc000117 	ldw	r16,4(sp)
 800b5a8:	dec00b04 	addi	sp,sp,44
 800b5ac:	f800283a 	ret
 800b5b0:	00800304 	movi	r2,12
 800b5b4:	90800015 	stw	r2,0(r18)
 800b5b8:	0005883a 	mov	r2,zero
 800b5bc:	003ff006 	br	800b580 <_malloc_r+0x2a4>
 800b5c0:	01002004 	movi	r4,128
 800b5c4:	02001004 	movi	r8,64
 800b5c8:	01c00fc4 	movi	r7,63
 800b5cc:	003f6106 	br	800b354 <_malloc_r+0x78>
 800b5d0:	4009883a 	mov	r4,r8
 800b5d4:	003f7506 	br	800b3ac <_malloc_r+0xd0>
 800b5d8:	81000317 	ldw	r4,12(r16)
 800b5dc:	003fde06 	br	800b558 <_malloc_r+0x27c>
 800b5e0:	81c5883a 	add	r2,r16,r7
 800b5e4:	11400117 	ldw	r5,4(r2)
 800b5e8:	9009883a 	mov	r4,r18
 800b5ec:	29400054 	ori	r5,r5,1
 800b5f0:	11400115 	stw	r5,4(r2)
 800b5f4:	8012bf00 	call	8012bf0 <__malloc_unlock>
 800b5f8:	80800204 	addi	r2,r16,8
 800b5fc:	003fe006 	br	800b580 <_malloc_r+0x2a4>
 800b600:	9c000217 	ldw	r16,8(r19)
 800b604:	00bfff04 	movi	r2,-4
 800b608:	85800117 	ldw	r22,4(r16)
 800b60c:	b0ac703a 	and	r22,r22,r2
 800b610:	b4400336 	bltu	r22,r17,800b620 <_malloc_r+0x344>
 800b614:	b445c83a 	sub	r2,r22,r17
 800b618:	00c003c4 	movi	r3,15
 800b61c:	18805d16 	blt	r3,r2,800b794 <_malloc_r+0x4b8>
 800b620:	05c20074 	movhi	r23,2049
 800b624:	008200b4 	movhi	r2,2050
 800b628:	10a33004 	addi	r2,r2,-29504
 800b62c:	bddc2904 	addi	r23,r23,28836
 800b630:	15400017 	ldw	r21,0(r2)
 800b634:	b8c00017 	ldw	r3,0(r23)
 800b638:	00bfffc4 	movi	r2,-1
 800b63c:	858d883a 	add	r6,r16,r22
 800b640:	8d6b883a 	add	r21,r17,r21
 800b644:	1880ea26 	beq	r3,r2,800b9f0 <_malloc_r+0x714>
 800b648:	ad4403c4 	addi	r21,r21,4111
 800b64c:	00bc0004 	movi	r2,-4096
 800b650:	a8aa703a 	and	r21,r21,r2
 800b654:	a80b883a 	mov	r5,r21
 800b658:	9009883a 	mov	r4,r18
 800b65c:	d9800015 	stw	r6,0(sp)
 800b660:	800d5200 	call	800d520 <_sbrk_r>
 800b664:	1029883a 	mov	r20,r2
 800b668:	00bfffc4 	movi	r2,-1
 800b66c:	d9800017 	ldw	r6,0(sp)
 800b670:	a080e826 	beq	r20,r2,800ba14 <_malloc_r+0x738>
 800b674:	a180a636 	bltu	r20,r6,800b910 <_malloc_r+0x634>
 800b678:	070200b4 	movhi	fp,2050
 800b67c:	e723eb04 	addi	fp,fp,-28756
 800b680:	e0800017 	ldw	r2,0(fp)
 800b684:	a887883a 	add	r3,r21,r2
 800b688:	e0c00015 	stw	r3,0(fp)
 800b68c:	3500e626 	beq	r6,r20,800ba28 <_malloc_r+0x74c>
 800b690:	b9000017 	ldw	r4,0(r23)
 800b694:	00bfffc4 	movi	r2,-1
 800b698:	2080ee26 	beq	r4,r2,800ba54 <_malloc_r+0x778>
 800b69c:	a185c83a 	sub	r2,r20,r6
 800b6a0:	10c5883a 	add	r2,r2,r3
 800b6a4:	e0800015 	stw	r2,0(fp)
 800b6a8:	a0c001cc 	andi	r3,r20,7
 800b6ac:	1800bc26 	beq	r3,zero,800b9a0 <_malloc_r+0x6c4>
 800b6b0:	a0e9c83a 	sub	r20,r20,r3
 800b6b4:	00840204 	movi	r2,4104
 800b6b8:	a5000204 	addi	r20,r20,8
 800b6bc:	10c7c83a 	sub	r3,r2,r3
 800b6c0:	a545883a 	add	r2,r20,r21
 800b6c4:	1083ffcc 	andi	r2,r2,4095
 800b6c8:	18abc83a 	sub	r21,r3,r2
 800b6cc:	a80b883a 	mov	r5,r21
 800b6d0:	9009883a 	mov	r4,r18
 800b6d4:	800d5200 	call	800d520 <_sbrk_r>
 800b6d8:	00ffffc4 	movi	r3,-1
 800b6dc:	10c0e126 	beq	r2,r3,800ba64 <_malloc_r+0x788>
 800b6e0:	1505c83a 	sub	r2,r2,r20
 800b6e4:	1545883a 	add	r2,r2,r21
 800b6e8:	10800054 	ori	r2,r2,1
 800b6ec:	e0c00017 	ldw	r3,0(fp)
 800b6f0:	9d000215 	stw	r20,8(r19)
 800b6f4:	a0800115 	stw	r2,4(r20)
 800b6f8:	a8c7883a 	add	r3,r21,r3
 800b6fc:	e0c00015 	stw	r3,0(fp)
 800b700:	84c00e26 	beq	r16,r19,800b73c <_malloc_r+0x460>
 800b704:	018003c4 	movi	r6,15
 800b708:	3580a72e 	bgeu	r6,r22,800b9a8 <_malloc_r+0x6cc>
 800b70c:	81400117 	ldw	r5,4(r16)
 800b710:	013ffe04 	movi	r4,-8
 800b714:	b0bffd04 	addi	r2,r22,-12
 800b718:	1104703a 	and	r2,r2,r4
 800b71c:	2900004c 	andi	r4,r5,1
 800b720:	2088b03a 	or	r4,r4,r2
 800b724:	81000115 	stw	r4,4(r16)
 800b728:	01400144 	movi	r5,5
 800b72c:	8089883a 	add	r4,r16,r2
 800b730:	21400115 	stw	r5,4(r4)
 800b734:	21400215 	stw	r5,8(r4)
 800b738:	3080cd36 	bltu	r6,r2,800ba70 <_malloc_r+0x794>
 800b73c:	008200b4 	movhi	r2,2050
 800b740:	10a32f04 	addi	r2,r2,-29508
 800b744:	11000017 	ldw	r4,0(r2)
 800b748:	20c0012e 	bgeu	r4,r3,800b750 <_malloc_r+0x474>
 800b74c:	10c00015 	stw	r3,0(r2)
 800b750:	008200b4 	movhi	r2,2050
 800b754:	10a32e04 	addi	r2,r2,-29512
 800b758:	11000017 	ldw	r4,0(r2)
 800b75c:	9c000217 	ldw	r16,8(r19)
 800b760:	20c0012e 	bgeu	r4,r3,800b768 <_malloc_r+0x48c>
 800b764:	10c00015 	stw	r3,0(r2)
 800b768:	80c00117 	ldw	r3,4(r16)
 800b76c:	00bfff04 	movi	r2,-4
 800b770:	1886703a 	and	r3,r3,r2
 800b774:	1c45c83a 	sub	r2,r3,r17
 800b778:	1c400236 	bltu	r3,r17,800b784 <_malloc_r+0x4a8>
 800b77c:	00c003c4 	movi	r3,15
 800b780:	18800416 	blt	r3,r2,800b794 <_malloc_r+0x4b8>
 800b784:	9009883a 	mov	r4,r18
 800b788:	8012bf00 	call	8012bf0 <__malloc_unlock>
 800b78c:	0005883a 	mov	r2,zero
 800b790:	003f7b06 	br	800b580 <_malloc_r+0x2a4>
 800b794:	88c00054 	ori	r3,r17,1
 800b798:	80c00115 	stw	r3,4(r16)
 800b79c:	8463883a 	add	r17,r16,r17
 800b7a0:	10800054 	ori	r2,r2,1
 800b7a4:	9c400215 	stw	r17,8(r19)
 800b7a8:	88800115 	stw	r2,4(r17)
 800b7ac:	9009883a 	mov	r4,r18
 800b7b0:	8012bf00 	call	8012bf0 <__malloc_unlock>
 800b7b4:	80800204 	addi	r2,r16,8
 800b7b8:	003f7106 	br	800b580 <_malloc_r+0x2a4>
 800b7bc:	00c00504 	movi	r3,20
 800b7c0:	18804a2e 	bgeu	r3,r2,800b8ec <_malloc_r+0x610>
 800b7c4:	00c01504 	movi	r3,84
 800b7c8:	18806e36 	bltu	r3,r2,800b984 <_malloc_r+0x6a8>
 800b7cc:	8804d33a 	srli	r2,r17,12
 800b7d0:	12001bc4 	addi	r8,r2,111
 800b7d4:	11c01b84 	addi	r7,r2,110
 800b7d8:	4209883a 	add	r4,r8,r8
 800b7dc:	003edd06 	br	800b354 <_malloc_r+0x78>
 800b7e0:	3804d27a 	srli	r2,r7,9
 800b7e4:	00c00104 	movi	r3,4
 800b7e8:	1880442e 	bgeu	r3,r2,800b8fc <_malloc_r+0x620>
 800b7ec:	00c00504 	movi	r3,20
 800b7f0:	18808136 	bltu	r3,r2,800b9f8 <_malloc_r+0x71c>
 800b7f4:	11401704 	addi	r5,r2,92
 800b7f8:	10c016c4 	addi	r3,r2,91
 800b7fc:	294b883a 	add	r5,r5,r5
 800b800:	294b883a 	add	r5,r5,r5
 800b804:	294b883a 	add	r5,r5,r5
 800b808:	994b883a 	add	r5,r19,r5
 800b80c:	28800017 	ldw	r2,0(r5)
 800b810:	01820074 	movhi	r6,2049
 800b814:	297ffe04 	addi	r5,r5,-8
 800b818:	31969904 	addi	r6,r6,23140
 800b81c:	28806526 	beq	r5,r2,800b9b4 <_malloc_r+0x6d8>
 800b820:	01bfff04 	movi	r6,-4
 800b824:	10c00117 	ldw	r3,4(r2)
 800b828:	1986703a 	and	r3,r3,r6
 800b82c:	38c0022e 	bgeu	r7,r3,800b838 <_malloc_r+0x55c>
 800b830:	10800217 	ldw	r2,8(r2)
 800b834:	28bffb1e 	bne	r5,r2,800b824 <_malloc_r+0x548>
 800b838:	11400317 	ldw	r5,12(r2)
 800b83c:	98c00117 	ldw	r3,4(r19)
 800b840:	81400315 	stw	r5,12(r16)
 800b844:	80800215 	stw	r2,8(r16)
 800b848:	2c000215 	stw	r16,8(r5)
 800b84c:	14000315 	stw	r16,12(r2)
 800b850:	003ef806 	br	800b434 <_malloc_r+0x158>
 800b854:	88c00054 	ori	r3,r17,1
 800b858:	80c00115 	stw	r3,4(r16)
 800b85c:	8463883a 	add	r17,r16,r17
 800b860:	34400515 	stw	r17,20(r6)
 800b864:	34400415 	stw	r17,16(r6)
 800b868:	10c00054 	ori	r3,r2,1
 800b86c:	8a000315 	stw	r8,12(r17)
 800b870:	8a000215 	stw	r8,8(r17)
 800b874:	88c00115 	stw	r3,4(r17)
 800b878:	88a3883a 	add	r17,r17,r2
 800b87c:	88800015 	stw	r2,0(r17)
 800b880:	9009883a 	mov	r4,r18
 800b884:	8012bf00 	call	8012bf0 <__malloc_unlock>
 800b888:	80800204 	addi	r2,r16,8
 800b88c:	003f3c06 	br	800b580 <_malloc_r+0x2a4>
 800b890:	30c00117 	ldw	r3,4(r6)
 800b894:	003ee706 	br	800b434 <_malloc_r+0x158>
 800b898:	5ac00044 	addi	r11,r11,1
 800b89c:	588000cc 	andi	r2,r11,3
 800b8a0:	31800204 	addi	r6,r6,8
 800b8a4:	103efd1e 	bne	r2,zero,800b49c <_malloc_r+0x1c0>
 800b8a8:	00002406 	br	800b93c <_malloc_r+0x660>
 800b8ac:	14000317 	ldw	r16,12(r2)
 800b8b0:	143f251e 	bne	r2,r16,800b548 <_malloc_r+0x26c>
 800b8b4:	21000084 	addi	r4,r4,2
 800b8b8:	003ebc06 	br	800b3ac <_malloc_r+0xd0>
 800b8bc:	8085883a 	add	r2,r16,r2
 800b8c0:	10c00117 	ldw	r3,4(r2)
 800b8c4:	81000317 	ldw	r4,12(r16)
 800b8c8:	81400217 	ldw	r5,8(r16)
 800b8cc:	18c00054 	ori	r3,r3,1
 800b8d0:	10c00115 	stw	r3,4(r2)
 800b8d4:	29000315 	stw	r4,12(r5)
 800b8d8:	21400215 	stw	r5,8(r4)
 800b8dc:	9009883a 	mov	r4,r18
 800b8e0:	8012bf00 	call	8012bf0 <__malloc_unlock>
 800b8e4:	80800204 	addi	r2,r16,8
 800b8e8:	003f2506 	br	800b580 <_malloc_r+0x2a4>
 800b8ec:	12001704 	addi	r8,r2,92
 800b8f0:	11c016c4 	addi	r7,r2,91
 800b8f4:	4209883a 	add	r4,r8,r8
 800b8f8:	003e9606 	br	800b354 <_malloc_r+0x78>
 800b8fc:	3804d1ba 	srli	r2,r7,6
 800b900:	11400e44 	addi	r5,r2,57
 800b904:	10c00e04 	addi	r3,r2,56
 800b908:	294b883a 	add	r5,r5,r5
 800b90c:	003fbc06 	br	800b800 <_malloc_r+0x524>
 800b910:	84ff5926 	beq	r16,r19,800b678 <_malloc_r+0x39c>
 800b914:	00820074 	movhi	r2,2049
 800b918:	10969904 	addi	r2,r2,23140
 800b91c:	14000217 	ldw	r16,8(r2)
 800b920:	00bfff04 	movi	r2,-4
 800b924:	80c00117 	ldw	r3,4(r16)
 800b928:	1886703a 	and	r3,r3,r2
 800b92c:	003f9106 	br	800b774 <_malloc_r+0x498>
 800b930:	60800217 	ldw	r2,8(r12)
 800b934:	213fffc4 	addi	r4,r4,-1
 800b938:	1300651e 	bne	r2,r12,800bad0 <_malloc_r+0x7f4>
 800b93c:	208000cc 	andi	r2,r4,3
 800b940:	633ffe04 	addi	r12,r12,-8
 800b944:	103ffa1e 	bne	r2,zero,800b930 <_malloc_r+0x654>
 800b948:	98800117 	ldw	r2,4(r19)
 800b94c:	0146303a 	nor	r3,zero,r5
 800b950:	1884703a 	and	r2,r3,r2
 800b954:	98800115 	stw	r2,4(r19)
 800b958:	294b883a 	add	r5,r5,r5
 800b95c:	117f2836 	bltu	r2,r5,800b600 <_malloc_r+0x324>
 800b960:	283f2726 	beq	r5,zero,800b600 <_malloc_r+0x324>
 800b964:	2886703a 	and	r3,r5,r2
 800b968:	5809883a 	mov	r4,r11
 800b96c:	183ec31e 	bne	r3,zero,800b47c <_malloc_r+0x1a0>
 800b970:	294b883a 	add	r5,r5,r5
 800b974:	2886703a 	and	r3,r5,r2
 800b978:	21000104 	addi	r4,r4,4
 800b97c:	183ffc26 	beq	r3,zero,800b970 <_malloc_r+0x694>
 800b980:	003ebe06 	br	800b47c <_malloc_r+0x1a0>
 800b984:	00c05504 	movi	r3,340
 800b988:	18801236 	bltu	r3,r2,800b9d4 <_malloc_r+0x6f8>
 800b98c:	8804d3fa 	srli	r2,r17,15
 800b990:	12001e04 	addi	r8,r2,120
 800b994:	11c01dc4 	addi	r7,r2,119
 800b998:	4209883a 	add	r4,r8,r8
 800b99c:	003e6d06 	br	800b354 <_malloc_r+0x78>
 800b9a0:	00c40004 	movi	r3,4096
 800b9a4:	003f4606 	br	800b6c0 <_malloc_r+0x3e4>
 800b9a8:	00800044 	movi	r2,1
 800b9ac:	a0800115 	stw	r2,4(r20)
 800b9b0:	003f7406 	br	800b784 <_malloc_r+0x4a8>
 800b9b4:	1805d0ba 	srai	r2,r3,2
 800b9b8:	01c00044 	movi	r7,1
 800b9bc:	30c00117 	ldw	r3,4(r6)
 800b9c0:	388e983a 	sll	r7,r7,r2
 800b9c4:	2805883a 	mov	r2,r5
 800b9c8:	38c6b03a 	or	r3,r7,r3
 800b9cc:	30c00115 	stw	r3,4(r6)
 800b9d0:	003f9b06 	br	800b840 <_malloc_r+0x564>
 800b9d4:	00c15504 	movi	r3,1364
 800b9d8:	18801a36 	bltu	r3,r2,800ba44 <_malloc_r+0x768>
 800b9dc:	8804d4ba 	srli	r2,r17,18
 800b9e0:	12001f44 	addi	r8,r2,125
 800b9e4:	11c01f04 	addi	r7,r2,124
 800b9e8:	4209883a 	add	r4,r8,r8
 800b9ec:	003e5906 	br	800b354 <_malloc_r+0x78>
 800b9f0:	ad400404 	addi	r21,r21,16
 800b9f4:	003f1706 	br	800b654 <_malloc_r+0x378>
 800b9f8:	00c01504 	movi	r3,84
 800b9fc:	18802336 	bltu	r3,r2,800ba8c <_malloc_r+0x7b0>
 800ba00:	3804d33a 	srli	r2,r7,12
 800ba04:	11401bc4 	addi	r5,r2,111
 800ba08:	10c01b84 	addi	r3,r2,110
 800ba0c:	294b883a 	add	r5,r5,r5
 800ba10:	003f7b06 	br	800b800 <_malloc_r+0x524>
 800ba14:	9c000217 	ldw	r16,8(r19)
 800ba18:	00bfff04 	movi	r2,-4
 800ba1c:	80c00117 	ldw	r3,4(r16)
 800ba20:	1886703a 	and	r3,r3,r2
 800ba24:	003f5306 	br	800b774 <_malloc_r+0x498>
 800ba28:	3083ffcc 	andi	r2,r6,4095
 800ba2c:	103f181e 	bne	r2,zero,800b690 <_malloc_r+0x3b4>
 800ba30:	99000217 	ldw	r4,8(r19)
 800ba34:	b545883a 	add	r2,r22,r21
 800ba38:	10800054 	ori	r2,r2,1
 800ba3c:	20800115 	stw	r2,4(r4)
 800ba40:	003f3e06 	br	800b73c <_malloc_r+0x460>
 800ba44:	01003f84 	movi	r4,254
 800ba48:	02001fc4 	movi	r8,127
 800ba4c:	01c01f84 	movi	r7,126
 800ba50:	003e4006 	br	800b354 <_malloc_r+0x78>
 800ba54:	00820074 	movhi	r2,2049
 800ba58:	109c2904 	addi	r2,r2,28836
 800ba5c:	15000015 	stw	r20,0(r2)
 800ba60:	003f1106 	br	800b6a8 <_malloc_r+0x3cc>
 800ba64:	00800044 	movi	r2,1
 800ba68:	002b883a 	mov	r21,zero
 800ba6c:	003f1f06 	br	800b6ec <_malloc_r+0x410>
 800ba70:	81400204 	addi	r5,r16,8
 800ba74:	9009883a 	mov	r4,r18
 800ba78:	800a6880 	call	800a688 <_free_r>
 800ba7c:	008200b4 	movhi	r2,2050
 800ba80:	10a3eb04 	addi	r2,r2,-28756
 800ba84:	10c00017 	ldw	r3,0(r2)
 800ba88:	003f2c06 	br	800b73c <_malloc_r+0x460>
 800ba8c:	00c05504 	movi	r3,340
 800ba90:	18800536 	bltu	r3,r2,800baa8 <_malloc_r+0x7cc>
 800ba94:	3804d3fa 	srli	r2,r7,15
 800ba98:	11401e04 	addi	r5,r2,120
 800ba9c:	10c01dc4 	addi	r3,r2,119
 800baa0:	294b883a 	add	r5,r5,r5
 800baa4:	003f5606 	br	800b800 <_malloc_r+0x524>
 800baa8:	00c15504 	movi	r3,1364
 800baac:	18800536 	bltu	r3,r2,800bac4 <_malloc_r+0x7e8>
 800bab0:	3804d4ba 	srli	r2,r7,18
 800bab4:	11401f44 	addi	r5,r2,125
 800bab8:	10c01f04 	addi	r3,r2,124
 800babc:	294b883a 	add	r5,r5,r5
 800bac0:	003f4f06 	br	800b800 <_malloc_r+0x524>
 800bac4:	01403f84 	movi	r5,254
 800bac8:	00c01f84 	movi	r3,126
 800bacc:	003f4c06 	br	800b800 <_malloc_r+0x524>
 800bad0:	98800117 	ldw	r2,4(r19)
 800bad4:	003fa006 	br	800b958 <_malloc_r+0x67c>
 800bad8:	8808d0fa 	srli	r4,r17,3
 800badc:	20800044 	addi	r2,r4,1
 800bae0:	1085883a 	add	r2,r2,r2
 800bae4:	003e9006 	br	800b528 <_malloc_r+0x24c>

0800bae8 <memchr>:
 800bae8:	208000cc 	andi	r2,r4,3
 800baec:	280f883a 	mov	r7,r5
 800baf0:	10003426 	beq	r2,zero,800bbc4 <memchr+0xdc>
 800baf4:	30bfffc4 	addi	r2,r6,-1
 800baf8:	30001a26 	beq	r6,zero,800bb64 <memchr+0x7c>
 800bafc:	20c00003 	ldbu	r3,0(r4)
 800bb00:	29803fcc 	andi	r6,r5,255
 800bb04:	30c0051e 	bne	r6,r3,800bb1c <memchr+0x34>
 800bb08:	00001806 	br	800bb6c <memchr+0x84>
 800bb0c:	10001526 	beq	r2,zero,800bb64 <memchr+0x7c>
 800bb10:	20c00003 	ldbu	r3,0(r4)
 800bb14:	10bfffc4 	addi	r2,r2,-1
 800bb18:	30c01426 	beq	r6,r3,800bb6c <memchr+0x84>
 800bb1c:	21000044 	addi	r4,r4,1
 800bb20:	20c000cc 	andi	r3,r4,3
 800bb24:	183ff91e 	bne	r3,zero,800bb0c <memchr+0x24>
 800bb28:	020000c4 	movi	r8,3
 800bb2c:	40801136 	bltu	r8,r2,800bb74 <memchr+0x8c>
 800bb30:	10000c26 	beq	r2,zero,800bb64 <memchr+0x7c>
 800bb34:	20c00003 	ldbu	r3,0(r4)
 800bb38:	29403fcc 	andi	r5,r5,255
 800bb3c:	28c00b26 	beq	r5,r3,800bb6c <memchr+0x84>
 800bb40:	20c00044 	addi	r3,r4,1
 800bb44:	39803fcc 	andi	r6,r7,255
 800bb48:	2089883a 	add	r4,r4,r2
 800bb4c:	00000306 	br	800bb5c <memchr+0x74>
 800bb50:	18c00044 	addi	r3,r3,1
 800bb54:	197fffc3 	ldbu	r5,-1(r3)
 800bb58:	31400526 	beq	r6,r5,800bb70 <memchr+0x88>
 800bb5c:	1805883a 	mov	r2,r3
 800bb60:	20fffb1e 	bne	r4,r3,800bb50 <memchr+0x68>
 800bb64:	0005883a 	mov	r2,zero
 800bb68:	f800283a 	ret
 800bb6c:	2005883a 	mov	r2,r4
 800bb70:	f800283a 	ret
 800bb74:	28c03fcc 	andi	r3,r5,255
 800bb78:	1812923a 	slli	r9,r3,8
 800bb7c:	02ffbff4 	movhi	r11,65279
 800bb80:	02a02074 	movhi	r10,32897
 800bb84:	48d2b03a 	or	r9,r9,r3
 800bb88:	4806943a 	slli	r3,r9,16
 800bb8c:	5affbfc4 	addi	r11,r11,-257
 800bb90:	52a02004 	addi	r10,r10,-32640
 800bb94:	48d2b03a 	or	r9,r9,r3
 800bb98:	20c00017 	ldw	r3,0(r4)
 800bb9c:	48c6f03a 	xor	r3,r9,r3
 800bba0:	1acd883a 	add	r6,r3,r11
 800bba4:	00c6303a 	nor	r3,zero,r3
 800bba8:	30c6703a 	and	r3,r6,r3
 800bbac:	1a86703a 	and	r3,r3,r10
 800bbb0:	183fe01e 	bne	r3,zero,800bb34 <memchr+0x4c>
 800bbb4:	10bfff04 	addi	r2,r2,-4
 800bbb8:	21000104 	addi	r4,r4,4
 800bbbc:	40bff636 	bltu	r8,r2,800bb98 <memchr+0xb0>
 800bbc0:	003fdb06 	br	800bb30 <memchr+0x48>
 800bbc4:	3005883a 	mov	r2,r6
 800bbc8:	003fd706 	br	800bb28 <memchr+0x40>

0800bbcc <memmove>:
 800bbcc:	2005883a 	mov	r2,r4
 800bbd0:	29000b2e 	bgeu	r5,r4,800bc00 <memmove+0x34>
 800bbd4:	298f883a 	add	r7,r5,r6
 800bbd8:	21c0092e 	bgeu	r4,r7,800bc00 <memmove+0x34>
 800bbdc:	2187883a 	add	r3,r4,r6
 800bbe0:	198bc83a 	sub	r5,r3,r6
 800bbe4:	30004826 	beq	r6,zero,800bd08 <memmove+0x13c>
 800bbe8:	39ffffc4 	addi	r7,r7,-1
 800bbec:	39000003 	ldbu	r4,0(r7)
 800bbf0:	18ffffc4 	addi	r3,r3,-1
 800bbf4:	19000005 	stb	r4,0(r3)
 800bbf8:	28fffb1e 	bne	r5,r3,800bbe8 <memmove+0x1c>
 800bbfc:	f800283a 	ret
 800bc00:	00c003c4 	movi	r3,15
 800bc04:	1980412e 	bgeu	r3,r6,800bd0c <memmove+0x140>
 800bc08:	2886b03a 	or	r3,r5,r2
 800bc0c:	18c000cc 	andi	r3,r3,3
 800bc10:	1800401e 	bne	r3,zero,800bd14 <memmove+0x148>
 800bc14:	33fffc04 	addi	r15,r6,-16
 800bc18:	781ed13a 	srli	r15,r15,4
 800bc1c:	28c00104 	addi	r3,r5,4
 800bc20:	13400104 	addi	r13,r2,4
 800bc24:	781c913a 	slli	r14,r15,4
 800bc28:	2b000204 	addi	r12,r5,8
 800bc2c:	12c00204 	addi	r11,r2,8
 800bc30:	73800504 	addi	r14,r14,20
 800bc34:	2a800304 	addi	r10,r5,12
 800bc38:	12400304 	addi	r9,r2,12
 800bc3c:	2b9d883a 	add	r14,r5,r14
 800bc40:	2811883a 	mov	r8,r5
 800bc44:	100f883a 	mov	r7,r2
 800bc48:	41000017 	ldw	r4,0(r8)
 800bc4c:	39c00404 	addi	r7,r7,16
 800bc50:	18c00404 	addi	r3,r3,16
 800bc54:	393ffc15 	stw	r4,-16(r7)
 800bc58:	193ffc17 	ldw	r4,-16(r3)
 800bc5c:	6b400404 	addi	r13,r13,16
 800bc60:	5ac00404 	addi	r11,r11,16
 800bc64:	693ffc15 	stw	r4,-16(r13)
 800bc68:	61000017 	ldw	r4,0(r12)
 800bc6c:	4a400404 	addi	r9,r9,16
 800bc70:	42000404 	addi	r8,r8,16
 800bc74:	593ffc15 	stw	r4,-16(r11)
 800bc78:	51000017 	ldw	r4,0(r10)
 800bc7c:	63000404 	addi	r12,r12,16
 800bc80:	52800404 	addi	r10,r10,16
 800bc84:	493ffc15 	stw	r4,-16(r9)
 800bc88:	1bbfef1e 	bne	r3,r14,800bc48 <memmove+0x7c>
 800bc8c:	79000044 	addi	r4,r15,1
 800bc90:	2008913a 	slli	r4,r4,4
 800bc94:	328003cc 	andi	r10,r6,15
 800bc98:	02c000c4 	movi	r11,3
 800bc9c:	1107883a 	add	r3,r2,r4
 800bca0:	290b883a 	add	r5,r5,r4
 800bca4:	5a801e2e 	bgeu	r11,r10,800bd20 <memmove+0x154>
 800bca8:	1813883a 	mov	r9,r3
 800bcac:	2811883a 	mov	r8,r5
 800bcb0:	500f883a 	mov	r7,r10
 800bcb4:	41000017 	ldw	r4,0(r8)
 800bcb8:	4a400104 	addi	r9,r9,4
 800bcbc:	39ffff04 	addi	r7,r7,-4
 800bcc0:	493fff15 	stw	r4,-4(r9)
 800bcc4:	42000104 	addi	r8,r8,4
 800bcc8:	59fffa36 	bltu	r11,r7,800bcb4 <memmove+0xe8>
 800bccc:	513fff04 	addi	r4,r10,-4
 800bcd0:	2008d0ba 	srli	r4,r4,2
 800bcd4:	318000cc 	andi	r6,r6,3
 800bcd8:	21000044 	addi	r4,r4,1
 800bcdc:	2109883a 	add	r4,r4,r4
 800bce0:	2109883a 	add	r4,r4,r4
 800bce4:	1907883a 	add	r3,r3,r4
 800bce8:	290b883a 	add	r5,r5,r4
 800bcec:	30000b26 	beq	r6,zero,800bd1c <memmove+0x150>
 800bcf0:	198d883a 	add	r6,r3,r6
 800bcf4:	29c00003 	ldbu	r7,0(r5)
 800bcf8:	18c00044 	addi	r3,r3,1
 800bcfc:	29400044 	addi	r5,r5,1
 800bd00:	19ffffc5 	stb	r7,-1(r3)
 800bd04:	19bffb1e 	bne	r3,r6,800bcf4 <memmove+0x128>
 800bd08:	f800283a 	ret
 800bd0c:	1007883a 	mov	r3,r2
 800bd10:	003ff606 	br	800bcec <memmove+0x120>
 800bd14:	1007883a 	mov	r3,r2
 800bd18:	003ff506 	br	800bcf0 <memmove+0x124>
 800bd1c:	f800283a 	ret
 800bd20:	500d883a 	mov	r6,r10
 800bd24:	003ff106 	br	800bcec <memmove+0x120>

0800bd28 <_Balloc>:
 800bd28:	20801317 	ldw	r2,76(r4)
 800bd2c:	defffc04 	addi	sp,sp,-16
 800bd30:	dc400115 	stw	r17,4(sp)
 800bd34:	dc000015 	stw	r16,0(sp)
 800bd38:	dfc00315 	stw	ra,12(sp)
 800bd3c:	dc800215 	stw	r18,8(sp)
 800bd40:	2023883a 	mov	r17,r4
 800bd44:	2821883a 	mov	r16,r5
 800bd48:	10000f26 	beq	r2,zero,800bd88 <_Balloc+0x60>
 800bd4c:	8407883a 	add	r3,r16,r16
 800bd50:	18c7883a 	add	r3,r3,r3
 800bd54:	10c7883a 	add	r3,r2,r3
 800bd58:	18800017 	ldw	r2,0(r3)
 800bd5c:	10001126 	beq	r2,zero,800bda4 <_Balloc+0x7c>
 800bd60:	11000017 	ldw	r4,0(r2)
 800bd64:	19000015 	stw	r4,0(r3)
 800bd68:	10000415 	stw	zero,16(r2)
 800bd6c:	10000315 	stw	zero,12(r2)
 800bd70:	dfc00317 	ldw	ra,12(sp)
 800bd74:	dc800217 	ldw	r18,8(sp)
 800bd78:	dc400117 	ldw	r17,4(sp)
 800bd7c:	dc000017 	ldw	r16,0(sp)
 800bd80:	dec00404 	addi	sp,sp,16
 800bd84:	f800283a 	ret
 800bd88:	01800844 	movi	r6,33
 800bd8c:	01400104 	movi	r5,4
 800bd90:	800f0900 	call	800f090 <_calloc_r>
 800bd94:	88801315 	stw	r2,76(r17)
 800bd98:	103fec1e 	bne	r2,zero,800bd4c <_Balloc+0x24>
 800bd9c:	0005883a 	mov	r2,zero
 800bda0:	003ff306 	br	800bd70 <_Balloc+0x48>
 800bda4:	01400044 	movi	r5,1
 800bda8:	2c24983a 	sll	r18,r5,r16
 800bdac:	8809883a 	mov	r4,r17
 800bdb0:	91800144 	addi	r6,r18,5
 800bdb4:	318d883a 	add	r6,r6,r6
 800bdb8:	318d883a 	add	r6,r6,r6
 800bdbc:	800f0900 	call	800f090 <_calloc_r>
 800bdc0:	103ff626 	beq	r2,zero,800bd9c <_Balloc+0x74>
 800bdc4:	14000115 	stw	r16,4(r2)
 800bdc8:	14800215 	stw	r18,8(r2)
 800bdcc:	003fe606 	br	800bd68 <_Balloc+0x40>

0800bdd0 <_Bfree>:
 800bdd0:	28000826 	beq	r5,zero,800bdf4 <_Bfree+0x24>
 800bdd4:	28c00117 	ldw	r3,4(r5)
 800bdd8:	20801317 	ldw	r2,76(r4)
 800bddc:	18c7883a 	add	r3,r3,r3
 800bde0:	18c7883a 	add	r3,r3,r3
 800bde4:	10c5883a 	add	r2,r2,r3
 800bde8:	10c00017 	ldw	r3,0(r2)
 800bdec:	28c00015 	stw	r3,0(r5)
 800bdf0:	11400015 	stw	r5,0(r2)
 800bdf4:	f800283a 	ret

0800bdf8 <__multadd>:
 800bdf8:	defff704 	addi	sp,sp,-36
 800bdfc:	dc800215 	stw	r18,8(sp)
 800be00:	2c800417 	ldw	r18,16(r5)
 800be04:	dd800615 	stw	r22,24(sp)
 800be08:	dd400515 	stw	r21,20(sp)
 800be0c:	dd000415 	stw	r20,16(sp)
 800be10:	dcc00315 	stw	r19,12(sp)
 800be14:	dc400115 	stw	r17,4(sp)
 800be18:	dc000015 	stw	r16,0(sp)
 800be1c:	dfc00815 	stw	ra,32(sp)
 800be20:	ddc00715 	stw	r23,28(sp)
 800be24:	2827883a 	mov	r19,r5
 800be28:	2029883a 	mov	r20,r4
 800be2c:	3023883a 	mov	r17,r6
 800be30:	3821883a 	mov	r16,r7
 800be34:	2d400504 	addi	r21,r5,20
 800be38:	002d883a 	mov	r22,zero
 800be3c:	adc00017 	ldw	r23,0(r21)
 800be40:	880b883a 	mov	r5,r17
 800be44:	ad400104 	addi	r21,r21,4
 800be48:	b93fffcc 	andi	r4,r23,65535
 800be4c:	80050200 	call	8005020 <__mulsi3>
 800be50:	b808d43a 	srli	r4,r23,16
 800be54:	880b883a 	mov	r5,r17
 800be58:	1421883a 	add	r16,r2,r16
 800be5c:	80050200 	call	8005020 <__mulsi3>
 800be60:	800ed43a 	srli	r7,r16,16
 800be64:	80ffffcc 	andi	r3,r16,65535
 800be68:	b5800044 	addi	r22,r22,1
 800be6c:	11c5883a 	add	r2,r2,r7
 800be70:	100e943a 	slli	r7,r2,16
 800be74:	1020d43a 	srli	r16,r2,16
 800be78:	38c7883a 	add	r3,r7,r3
 800be7c:	a8ffff15 	stw	r3,-4(r21)
 800be80:	b4bfee16 	blt	r22,r18,800be3c <__multadd+0x44>
 800be84:	80000926 	beq	r16,zero,800beac <__multadd+0xb4>
 800be88:	98800217 	ldw	r2,8(r19)
 800be8c:	9080130e 	bge	r18,r2,800bedc <__multadd+0xe4>
 800be90:	90800144 	addi	r2,r18,5
 800be94:	1085883a 	add	r2,r2,r2
 800be98:	1085883a 	add	r2,r2,r2
 800be9c:	9885883a 	add	r2,r19,r2
 800bea0:	14000015 	stw	r16,0(r2)
 800bea4:	94800044 	addi	r18,r18,1
 800bea8:	9c800415 	stw	r18,16(r19)
 800beac:	9805883a 	mov	r2,r19
 800beb0:	dfc00817 	ldw	ra,32(sp)
 800beb4:	ddc00717 	ldw	r23,28(sp)
 800beb8:	dd800617 	ldw	r22,24(sp)
 800bebc:	dd400517 	ldw	r21,20(sp)
 800bec0:	dd000417 	ldw	r20,16(sp)
 800bec4:	dcc00317 	ldw	r19,12(sp)
 800bec8:	dc800217 	ldw	r18,8(sp)
 800becc:	dc400117 	ldw	r17,4(sp)
 800bed0:	dc000017 	ldw	r16,0(sp)
 800bed4:	dec00904 	addi	sp,sp,36
 800bed8:	f800283a 	ret
 800bedc:	99400117 	ldw	r5,4(r19)
 800bee0:	a009883a 	mov	r4,r20
 800bee4:	29400044 	addi	r5,r5,1
 800bee8:	800bd280 	call	800bd28 <_Balloc>
 800beec:	99800417 	ldw	r6,16(r19)
 800bef0:	99400304 	addi	r5,r19,12
 800bef4:	11000304 	addi	r4,r2,12
 800bef8:	31800084 	addi	r6,r6,2
 800befc:	318d883a 	add	r6,r6,r6
 800bf00:	318d883a 	add	r6,r6,r6
 800bf04:	1023883a 	mov	r17,r2
 800bf08:	8005ad80 	call	8005ad8 <memcpy>
 800bf0c:	98000a26 	beq	r19,zero,800bf38 <__multadd+0x140>
 800bf10:	98c00117 	ldw	r3,4(r19)
 800bf14:	a0801317 	ldw	r2,76(r20)
 800bf18:	18c7883a 	add	r3,r3,r3
 800bf1c:	18c7883a 	add	r3,r3,r3
 800bf20:	10c5883a 	add	r2,r2,r3
 800bf24:	10c00017 	ldw	r3,0(r2)
 800bf28:	98c00015 	stw	r3,0(r19)
 800bf2c:	14c00015 	stw	r19,0(r2)
 800bf30:	8827883a 	mov	r19,r17
 800bf34:	003fd606 	br	800be90 <__multadd+0x98>
 800bf38:	8827883a 	mov	r19,r17
 800bf3c:	003fd406 	br	800be90 <__multadd+0x98>

0800bf40 <__s2b>:
 800bf40:	defff904 	addi	sp,sp,-28
 800bf44:	dc400115 	stw	r17,4(sp)
 800bf48:	dc000015 	stw	r16,0(sp)
 800bf4c:	2023883a 	mov	r17,r4
 800bf50:	2821883a 	mov	r16,r5
 800bf54:	39000204 	addi	r4,r7,8
 800bf58:	01400244 	movi	r5,9
 800bf5c:	dcc00315 	stw	r19,12(sp)
 800bf60:	dc800215 	stw	r18,8(sp)
 800bf64:	dfc00615 	stw	ra,24(sp)
 800bf68:	dd400515 	stw	r21,20(sp)
 800bf6c:	dd000415 	stw	r20,16(sp)
 800bf70:	3825883a 	mov	r18,r7
 800bf74:	3027883a 	mov	r19,r6
 800bf78:	80103900 	call	8010390 <__divsi3>
 800bf7c:	00c00044 	movi	r3,1
 800bf80:	000b883a 	mov	r5,zero
 800bf84:	1880030e 	bge	r3,r2,800bf94 <__s2b+0x54>
 800bf88:	18c7883a 	add	r3,r3,r3
 800bf8c:	29400044 	addi	r5,r5,1
 800bf90:	18bffd16 	blt	r3,r2,800bf88 <__s2b+0x48>
 800bf94:	8809883a 	mov	r4,r17
 800bf98:	800bd280 	call	800bd28 <_Balloc>
 800bf9c:	d8c00717 	ldw	r3,28(sp)
 800bfa0:	10c00515 	stw	r3,20(r2)
 800bfa4:	00c00044 	movi	r3,1
 800bfa8:	10c00415 	stw	r3,16(r2)
 800bfac:	00c00244 	movi	r3,9
 800bfb0:	1cc0210e 	bge	r3,r19,800c038 <__s2b+0xf8>
 800bfb4:	80eb883a 	add	r21,r16,r3
 800bfb8:	a829883a 	mov	r20,r21
 800bfbc:	84e1883a 	add	r16,r16,r19
 800bfc0:	a1c00007 	ldb	r7,0(r20)
 800bfc4:	01800284 	movi	r6,10
 800bfc8:	a5000044 	addi	r20,r20,1
 800bfcc:	100b883a 	mov	r5,r2
 800bfd0:	39fff404 	addi	r7,r7,-48
 800bfd4:	8809883a 	mov	r4,r17
 800bfd8:	800bdf80 	call	800bdf8 <__multadd>
 800bfdc:	a43ff81e 	bne	r20,r16,800bfc0 <__s2b+0x80>
 800bfe0:	ace1883a 	add	r16,r21,r19
 800bfe4:	843ffe04 	addi	r16,r16,-8
 800bfe8:	9c800a0e 	bge	r19,r18,800c014 <__s2b+0xd4>
 800bfec:	94e5c83a 	sub	r18,r18,r19
 800bff0:	84a5883a 	add	r18,r16,r18
 800bff4:	81c00007 	ldb	r7,0(r16)
 800bff8:	01800284 	movi	r6,10
 800bffc:	84000044 	addi	r16,r16,1
 800c000:	100b883a 	mov	r5,r2
 800c004:	39fff404 	addi	r7,r7,-48
 800c008:	8809883a 	mov	r4,r17
 800c00c:	800bdf80 	call	800bdf8 <__multadd>
 800c010:	84bff81e 	bne	r16,r18,800bff4 <__s2b+0xb4>
 800c014:	dfc00617 	ldw	ra,24(sp)
 800c018:	dd400517 	ldw	r21,20(sp)
 800c01c:	dd000417 	ldw	r20,16(sp)
 800c020:	dcc00317 	ldw	r19,12(sp)
 800c024:	dc800217 	ldw	r18,8(sp)
 800c028:	dc400117 	ldw	r17,4(sp)
 800c02c:	dc000017 	ldw	r16,0(sp)
 800c030:	dec00704 	addi	sp,sp,28
 800c034:	f800283a 	ret
 800c038:	84000284 	addi	r16,r16,10
 800c03c:	1827883a 	mov	r19,r3
 800c040:	003fe906 	br	800bfe8 <__s2b+0xa8>

0800c044 <__hi0bits>:
 800c044:	20bfffec 	andhi	r2,r4,65535
 800c048:	1000141e 	bne	r2,zero,800c09c <__hi0bits+0x58>
 800c04c:	2008943a 	slli	r4,r4,16
 800c050:	00800404 	movi	r2,16
 800c054:	20ffc02c 	andhi	r3,r4,65280
 800c058:	1800021e 	bne	r3,zero,800c064 <__hi0bits+0x20>
 800c05c:	2008923a 	slli	r4,r4,8
 800c060:	10800204 	addi	r2,r2,8
 800c064:	20fc002c 	andhi	r3,r4,61440
 800c068:	1800021e 	bne	r3,zero,800c074 <__hi0bits+0x30>
 800c06c:	2008913a 	slli	r4,r4,4
 800c070:	10800104 	addi	r2,r2,4
 800c074:	20f0002c 	andhi	r3,r4,49152
 800c078:	1800031e 	bne	r3,zero,800c088 <__hi0bits+0x44>
 800c07c:	2109883a 	add	r4,r4,r4
 800c080:	10800084 	addi	r2,r2,2
 800c084:	2109883a 	add	r4,r4,r4
 800c088:	20000316 	blt	r4,zero,800c098 <__hi0bits+0x54>
 800c08c:	2110002c 	andhi	r4,r4,16384
 800c090:	2000041e 	bne	r4,zero,800c0a4 <__hi0bits+0x60>
 800c094:	00800804 	movi	r2,32
 800c098:	f800283a 	ret
 800c09c:	0005883a 	mov	r2,zero
 800c0a0:	003fec06 	br	800c054 <__hi0bits+0x10>
 800c0a4:	10800044 	addi	r2,r2,1
 800c0a8:	f800283a 	ret

0800c0ac <__lo0bits>:
 800c0ac:	20c00017 	ldw	r3,0(r4)
 800c0b0:	188001cc 	andi	r2,r3,7
 800c0b4:	10000826 	beq	r2,zero,800c0d8 <__lo0bits+0x2c>
 800c0b8:	1880004c 	andi	r2,r3,1
 800c0bc:	1000211e 	bne	r2,zero,800c144 <__lo0bits+0x98>
 800c0c0:	1880008c 	andi	r2,r3,2
 800c0c4:	1000211e 	bne	r2,zero,800c14c <__lo0bits+0xa0>
 800c0c8:	1806d0ba 	srli	r3,r3,2
 800c0cc:	00800084 	movi	r2,2
 800c0d0:	20c00015 	stw	r3,0(r4)
 800c0d4:	f800283a 	ret
 800c0d8:	18bfffcc 	andi	r2,r3,65535
 800c0dc:	10001326 	beq	r2,zero,800c12c <__lo0bits+0x80>
 800c0e0:	0005883a 	mov	r2,zero
 800c0e4:	19403fcc 	andi	r5,r3,255
 800c0e8:	2800021e 	bne	r5,zero,800c0f4 <__lo0bits+0x48>
 800c0ec:	1806d23a 	srli	r3,r3,8
 800c0f0:	10800204 	addi	r2,r2,8
 800c0f4:	194003cc 	andi	r5,r3,15
 800c0f8:	2800021e 	bne	r5,zero,800c104 <__lo0bits+0x58>
 800c0fc:	1806d13a 	srli	r3,r3,4
 800c100:	10800104 	addi	r2,r2,4
 800c104:	194000cc 	andi	r5,r3,3
 800c108:	2800021e 	bne	r5,zero,800c114 <__lo0bits+0x68>
 800c10c:	1806d0ba 	srli	r3,r3,2
 800c110:	10800084 	addi	r2,r2,2
 800c114:	1940004c 	andi	r5,r3,1
 800c118:	2800081e 	bne	r5,zero,800c13c <__lo0bits+0x90>
 800c11c:	1806d07a 	srli	r3,r3,1
 800c120:	1800051e 	bne	r3,zero,800c138 <__lo0bits+0x8c>
 800c124:	00800804 	movi	r2,32
 800c128:	f800283a 	ret
 800c12c:	1806d43a 	srli	r3,r3,16
 800c130:	00800404 	movi	r2,16
 800c134:	003feb06 	br	800c0e4 <__lo0bits+0x38>
 800c138:	10800044 	addi	r2,r2,1
 800c13c:	20c00015 	stw	r3,0(r4)
 800c140:	f800283a 	ret
 800c144:	0005883a 	mov	r2,zero
 800c148:	f800283a 	ret
 800c14c:	1806d07a 	srli	r3,r3,1
 800c150:	00800044 	movi	r2,1
 800c154:	20c00015 	stw	r3,0(r4)
 800c158:	f800283a 	ret

0800c15c <__i2b>:
 800c15c:	defffd04 	addi	sp,sp,-12
 800c160:	dc000015 	stw	r16,0(sp)
 800c164:	04000044 	movi	r16,1
 800c168:	dc400115 	stw	r17,4(sp)
 800c16c:	2823883a 	mov	r17,r5
 800c170:	800b883a 	mov	r5,r16
 800c174:	dfc00215 	stw	ra,8(sp)
 800c178:	800bd280 	call	800bd28 <_Balloc>
 800c17c:	14400515 	stw	r17,20(r2)
 800c180:	14000415 	stw	r16,16(r2)
 800c184:	dfc00217 	ldw	ra,8(sp)
 800c188:	dc400117 	ldw	r17,4(sp)
 800c18c:	dc000017 	ldw	r16,0(sp)
 800c190:	dec00304 	addi	sp,sp,12
 800c194:	f800283a 	ret

0800c198 <__multiply>:
 800c198:	deffef04 	addi	sp,sp,-68
 800c19c:	dc400815 	stw	r17,32(sp)
 800c1a0:	dc000715 	stw	r16,28(sp)
 800c1a4:	34400417 	ldw	r17,16(r6)
 800c1a8:	2c000417 	ldw	r16,16(r5)
 800c1ac:	dd800d15 	stw	r22,52(sp)
 800c1b0:	dc800915 	stw	r18,36(sp)
 800c1b4:	dfc01015 	stw	ra,64(sp)
 800c1b8:	df000f15 	stw	fp,60(sp)
 800c1bc:	ddc00e15 	stw	r23,56(sp)
 800c1c0:	dd400c15 	stw	r21,48(sp)
 800c1c4:	dd000b15 	stw	r20,44(sp)
 800c1c8:	dcc00a15 	stw	r19,40(sp)
 800c1cc:	2825883a 	mov	r18,r5
 800c1d0:	302d883a 	mov	r22,r6
 800c1d4:	8440050e 	bge	r16,r17,800c1ec <__multiply+0x54>
 800c1d8:	8007883a 	mov	r3,r16
 800c1dc:	3025883a 	mov	r18,r6
 800c1e0:	8821883a 	mov	r16,r17
 800c1e4:	282d883a 	mov	r22,r5
 800c1e8:	1823883a 	mov	r17,r3
 800c1ec:	90800217 	ldw	r2,8(r18)
 800c1f0:	8447883a 	add	r3,r16,r17
 800c1f4:	d8c00215 	stw	r3,8(sp)
 800c1f8:	91400117 	ldw	r5,4(r18)
 800c1fc:	10c0010e 	bge	r2,r3,800c204 <__multiply+0x6c>
 800c200:	29400044 	addi	r5,r5,1
 800c204:	800bd280 	call	800bd28 <_Balloc>
 800c208:	d8c00217 	ldw	r3,8(sp)
 800c20c:	d8800615 	stw	r2,24(sp)
 800c210:	18eb883a 	add	r21,r3,r3
 800c214:	ad6b883a 	add	r21,r21,r21
 800c218:	10c00504 	addi	r3,r2,20
 800c21c:	1d6b883a 	add	r21,r3,r21
 800c220:	d8c00115 	stw	r3,4(sp)
 800c224:	dd400315 	stw	r21,12(sp)
 800c228:	1805883a 	mov	r2,r3
 800c22c:	1d40042e 	bgeu	r3,r21,800c240 <__multiply+0xa8>
 800c230:	d8c00317 	ldw	r3,12(sp)
 800c234:	10000015 	stw	zero,0(r2)
 800c238:	10800104 	addi	r2,r2,4
 800c23c:	10fffc36 	bltu	r2,r3,800c230 <__multiply+0x98>
 800c240:	8c63883a 	add	r17,r17,r17
 800c244:	b5800504 	addi	r22,r22,20
 800c248:	8c63883a 	add	r17,r17,r17
 800c24c:	94800504 	addi	r18,r18,20
 800c250:	8421883a 	add	r16,r16,r16
 800c254:	b463883a 	add	r17,r22,r17
 800c258:	8421883a 	add	r16,r16,r16
 800c25c:	dd800015 	stw	r22,0(sp)
 800c260:	dc800415 	stw	r18,16(sp)
 800c264:	dc400515 	stw	r17,20(sp)
 800c268:	9429883a 	add	r20,r18,r16
 800c26c:	b4404f2e 	bgeu	r22,r17,800c3ac <__multiply+0x214>
 800c270:	d8c00017 	ldw	r3,0(sp)
 800c274:	1c800017 	ldw	r18,0(r3)
 800c278:	947fffcc 	andi	r17,r18,65535
 800c27c:	88001e26 	beq	r17,zero,800c2f8 <__multiply+0x160>
 800c280:	dd800117 	ldw	r22,4(sp)
 800c284:	dd400417 	ldw	r21,16(sp)
 800c288:	0027883a 	mov	r19,zero
 800c28c:	ac800017 	ldw	r18,0(r21)
 800c290:	b4000017 	ldw	r16,0(r22)
 800c294:	880b883a 	mov	r5,r17
 800c298:	913fffcc 	andi	r4,r18,65535
 800c29c:	80050200 	call	8005020 <__mulsi3>
 800c2a0:	9008d43a 	srli	r4,r18,16
 800c2a4:	84bfffcc 	andi	r18,r16,65535
 800c2a8:	1485883a 	add	r2,r2,r18
 800c2ac:	14e5883a 	add	r18,r2,r19
 800c2b0:	8020d43a 	srli	r16,r16,16
 800c2b4:	9026d43a 	srli	r19,r18,16
 800c2b8:	880b883a 	mov	r5,r17
 800c2bc:	80050200 	call	8005020 <__mulsi3>
 800c2c0:	1405883a 	add	r2,r2,r16
 800c2c4:	14e1883a 	add	r16,r2,r19
 800c2c8:	90ffffcc 	andi	r3,r18,65535
 800c2cc:	8024943a 	slli	r18,r16,16
 800c2d0:	ad400104 	addi	r21,r21,4
 800c2d4:	b005883a 	mov	r2,r22
 800c2d8:	90c6b03a 	or	r3,r18,r3
 800c2dc:	b0c00015 	stw	r3,0(r22)
 800c2e0:	8026d43a 	srli	r19,r16,16
 800c2e4:	b5800104 	addi	r22,r22,4
 800c2e8:	ad3fe836 	bltu	r21,r20,800c28c <__multiply+0xf4>
 800c2ec:	d8c00017 	ldw	r3,0(sp)
 800c2f0:	14c00115 	stw	r19,4(r2)
 800c2f4:	1c800017 	ldw	r18,0(r3)
 800c2f8:	9024d43a 	srli	r18,r18,16
 800c2fc:	90002226 	beq	r18,zero,800c388 <__multiply+0x1f0>
 800c300:	d8c00117 	ldw	r3,4(sp)
 800c304:	dd800417 	ldw	r22,16(sp)
 800c308:	002f883a 	mov	r23,zero
 800c30c:	1f000017 	ldw	fp,0(r3)
 800c310:	1823883a 	mov	r17,r3
 800c314:	182b883a 	mov	r21,r3
 800c318:	e021883a 	mov	r16,fp
 800c31c:	00000106 	br	800c324 <__multiply+0x18c>
 800c320:	982b883a 	mov	r21,r19
 800c324:	b100000b 	ldhu	r4,0(r22)
 800c328:	8020d43a 	srli	r16,r16,16
 800c32c:	900b883a 	mov	r5,r18
 800c330:	80050200 	call	8005020 <__mulsi3>
 800c334:	1405883a 	add	r2,r2,r16
 800c338:	15ef883a 	add	r23,r2,r23
 800c33c:	b804943a 	slli	r2,r23,16
 800c340:	e0ffffcc 	andi	r3,fp,65535
 800c344:	8c400104 	addi	r17,r17,4
 800c348:	10c6b03a 	or	r3,r2,r3
 800c34c:	88ffff15 	stw	r3,-4(r17)
 800c350:	b5800104 	addi	r22,r22,4
 800c354:	b13fff17 	ldw	r4,-4(r22)
 800c358:	acc00104 	addi	r19,r21,4
 800c35c:	900b883a 	mov	r5,r18
 800c360:	2008d43a 	srli	r4,r4,16
 800c364:	9c000017 	ldw	r16,0(r19)
 800c368:	80050200 	call	8005020 <__mulsi3>
 800c36c:	b806d43a 	srli	r3,r23,16
 800c370:	813fffcc 	andi	r4,r16,65535
 800c374:	1105883a 	add	r2,r2,r4
 800c378:	10f9883a 	add	fp,r2,r3
 800c37c:	e02ed43a 	srli	r23,fp,16
 800c380:	b53fe736 	bltu	r22,r20,800c320 <__multiply+0x188>
 800c384:	af000115 	stw	fp,4(r21)
 800c388:	d8c00017 	ldw	r3,0(sp)
 800c38c:	d9000517 	ldw	r4,20(sp)
 800c390:	18c00104 	addi	r3,r3,4
 800c394:	d8c00015 	stw	r3,0(sp)
 800c398:	d8c00117 	ldw	r3,4(sp)
 800c39c:	18c00104 	addi	r3,r3,4
 800c3a0:	d8c00115 	stw	r3,4(sp)
 800c3a4:	d8c00017 	ldw	r3,0(sp)
 800c3a8:	193fb136 	bltu	r3,r4,800c270 <__multiply+0xd8>
 800c3ac:	d8c00217 	ldw	r3,8(sp)
 800c3b0:	00c00c0e 	bge	zero,r3,800c3e4 <__multiply+0x24c>
 800c3b4:	d8c00317 	ldw	r3,12(sp)
 800c3b8:	18bfff17 	ldw	r2,-4(r3)
 800c3bc:	1d7fff04 	addi	r21,r3,-4
 800c3c0:	10000326 	beq	r2,zero,800c3d0 <__multiply+0x238>
 800c3c4:	00000706 	br	800c3e4 <__multiply+0x24c>
 800c3c8:	a8800017 	ldw	r2,0(r21)
 800c3cc:	1000051e 	bne	r2,zero,800c3e4 <__multiply+0x24c>
 800c3d0:	d8c00217 	ldw	r3,8(sp)
 800c3d4:	ad7fff04 	addi	r21,r21,-4
 800c3d8:	18ffffc4 	addi	r3,r3,-1
 800c3dc:	d8c00215 	stw	r3,8(sp)
 800c3e0:	183ff91e 	bne	r3,zero,800c3c8 <__multiply+0x230>
 800c3e4:	d8c00617 	ldw	r3,24(sp)
 800c3e8:	d9000217 	ldw	r4,8(sp)
 800c3ec:	1805883a 	mov	r2,r3
 800c3f0:	19000415 	stw	r4,16(r3)
 800c3f4:	dfc01017 	ldw	ra,64(sp)
 800c3f8:	df000f17 	ldw	fp,60(sp)
 800c3fc:	ddc00e17 	ldw	r23,56(sp)
 800c400:	dd800d17 	ldw	r22,52(sp)
 800c404:	dd400c17 	ldw	r21,48(sp)
 800c408:	dd000b17 	ldw	r20,44(sp)
 800c40c:	dcc00a17 	ldw	r19,40(sp)
 800c410:	dc800917 	ldw	r18,36(sp)
 800c414:	dc400817 	ldw	r17,32(sp)
 800c418:	dc000717 	ldw	r16,28(sp)
 800c41c:	dec01104 	addi	sp,sp,68
 800c420:	f800283a 	ret

0800c424 <__pow5mult>:
 800c424:	defffa04 	addi	sp,sp,-24
 800c428:	dcc00315 	stw	r19,12(sp)
 800c42c:	dc000015 	stw	r16,0(sp)
 800c430:	dfc00515 	stw	ra,20(sp)
 800c434:	dd000415 	stw	r20,16(sp)
 800c438:	dc800215 	stw	r18,8(sp)
 800c43c:	dc400115 	stw	r17,4(sp)
 800c440:	308000cc 	andi	r2,r6,3
 800c444:	3021883a 	mov	r16,r6
 800c448:	2027883a 	mov	r19,r4
 800c44c:	10002f1e 	bne	r2,zero,800c50c <__pow5mult+0xe8>
 800c450:	2825883a 	mov	r18,r5
 800c454:	8021d0ba 	srai	r16,r16,2
 800c458:	80001a26 	beq	r16,zero,800c4c4 <__pow5mult+0xa0>
 800c45c:	9c401217 	ldw	r17,72(r19)
 800c460:	8800061e 	bne	r17,zero,800c47c <__pow5mult+0x58>
 800c464:	00003406 	br	800c538 <__pow5mult+0x114>
 800c468:	8021d07a 	srai	r16,r16,1
 800c46c:	80001526 	beq	r16,zero,800c4c4 <__pow5mult+0xa0>
 800c470:	88800017 	ldw	r2,0(r17)
 800c474:	10001c26 	beq	r2,zero,800c4e8 <__pow5mult+0xc4>
 800c478:	1023883a 	mov	r17,r2
 800c47c:	8080004c 	andi	r2,r16,1
 800c480:	103ff926 	beq	r2,zero,800c468 <__pow5mult+0x44>
 800c484:	880d883a 	mov	r6,r17
 800c488:	900b883a 	mov	r5,r18
 800c48c:	9809883a 	mov	r4,r19
 800c490:	800c1980 	call	800c198 <__multiply>
 800c494:	90001b26 	beq	r18,zero,800c504 <__pow5mult+0xe0>
 800c498:	91000117 	ldw	r4,4(r18)
 800c49c:	98c01317 	ldw	r3,76(r19)
 800c4a0:	8021d07a 	srai	r16,r16,1
 800c4a4:	2109883a 	add	r4,r4,r4
 800c4a8:	2109883a 	add	r4,r4,r4
 800c4ac:	1907883a 	add	r3,r3,r4
 800c4b0:	19000017 	ldw	r4,0(r3)
 800c4b4:	91000015 	stw	r4,0(r18)
 800c4b8:	1c800015 	stw	r18,0(r3)
 800c4bc:	1025883a 	mov	r18,r2
 800c4c0:	803feb1e 	bne	r16,zero,800c470 <__pow5mult+0x4c>
 800c4c4:	9005883a 	mov	r2,r18
 800c4c8:	dfc00517 	ldw	ra,20(sp)
 800c4cc:	dd000417 	ldw	r20,16(sp)
 800c4d0:	dcc00317 	ldw	r19,12(sp)
 800c4d4:	dc800217 	ldw	r18,8(sp)
 800c4d8:	dc400117 	ldw	r17,4(sp)
 800c4dc:	dc000017 	ldw	r16,0(sp)
 800c4e0:	dec00604 	addi	sp,sp,24
 800c4e4:	f800283a 	ret
 800c4e8:	880d883a 	mov	r6,r17
 800c4ec:	880b883a 	mov	r5,r17
 800c4f0:	9809883a 	mov	r4,r19
 800c4f4:	800c1980 	call	800c198 <__multiply>
 800c4f8:	88800015 	stw	r2,0(r17)
 800c4fc:	10000015 	stw	zero,0(r2)
 800c500:	003fdd06 	br	800c478 <__pow5mult+0x54>
 800c504:	1025883a 	mov	r18,r2
 800c508:	003fd706 	br	800c468 <__pow5mult+0x44>
 800c50c:	10bfffc4 	addi	r2,r2,-1
 800c510:	1085883a 	add	r2,r2,r2
 800c514:	00c20074 	movhi	r3,2049
 800c518:	18d50c04 	addi	r3,r3,21552
 800c51c:	1085883a 	add	r2,r2,r2
 800c520:	1885883a 	add	r2,r3,r2
 800c524:	11800017 	ldw	r6,0(r2)
 800c528:	000f883a 	mov	r7,zero
 800c52c:	800bdf80 	call	800bdf8 <__multadd>
 800c530:	1025883a 	mov	r18,r2
 800c534:	003fc706 	br	800c454 <__pow5mult+0x30>
 800c538:	05000044 	movi	r20,1
 800c53c:	a00b883a 	mov	r5,r20
 800c540:	9809883a 	mov	r4,r19
 800c544:	800bd280 	call	800bd28 <_Balloc>
 800c548:	1023883a 	mov	r17,r2
 800c54c:	00809c44 	movi	r2,625
 800c550:	88800515 	stw	r2,20(r17)
 800c554:	8d000415 	stw	r20,16(r17)
 800c558:	9c401215 	stw	r17,72(r19)
 800c55c:	88000015 	stw	zero,0(r17)
 800c560:	003fc606 	br	800c47c <__pow5mult+0x58>

0800c564 <__lshift>:
 800c564:	defff904 	addi	sp,sp,-28
 800c568:	dd400515 	stw	r21,20(sp)
 800c56c:	dcc00315 	stw	r19,12(sp)
 800c570:	302bd17a 	srai	r21,r6,5
 800c574:	2cc00417 	ldw	r19,16(r5)
 800c578:	28800217 	ldw	r2,8(r5)
 800c57c:	dd000415 	stw	r20,16(sp)
 800c580:	ace7883a 	add	r19,r21,r19
 800c584:	dc800215 	stw	r18,8(sp)
 800c588:	dc400115 	stw	r17,4(sp)
 800c58c:	dc000015 	stw	r16,0(sp)
 800c590:	dfc00615 	stw	ra,24(sp)
 800c594:	9c000044 	addi	r16,r19,1
 800c598:	2823883a 	mov	r17,r5
 800c59c:	3029883a 	mov	r20,r6
 800c5a0:	2025883a 	mov	r18,r4
 800c5a4:	29400117 	ldw	r5,4(r5)
 800c5a8:	1400030e 	bge	r2,r16,800c5b8 <__lshift+0x54>
 800c5ac:	1085883a 	add	r2,r2,r2
 800c5b0:	29400044 	addi	r5,r5,1
 800c5b4:	143ffd16 	blt	r2,r16,800c5ac <__lshift+0x48>
 800c5b8:	9009883a 	mov	r4,r18
 800c5bc:	800bd280 	call	800bd28 <_Balloc>
 800c5c0:	10c00504 	addi	r3,r2,20
 800c5c4:	0540070e 	bge	zero,r21,800c5e4 <__lshift+0x80>
 800c5c8:	ad6b883a 	add	r21,r21,r21
 800c5cc:	ad6b883a 	add	r21,r21,r21
 800c5d0:	1809883a 	mov	r4,r3
 800c5d4:	1d47883a 	add	r3,r3,r21
 800c5d8:	20000015 	stw	zero,0(r4)
 800c5dc:	21000104 	addi	r4,r4,4
 800c5e0:	193ffd1e 	bne	r3,r4,800c5d8 <__lshift+0x74>
 800c5e4:	8a000417 	ldw	r8,16(r17)
 800c5e8:	89000504 	addi	r4,r17,20
 800c5ec:	a18007cc 	andi	r6,r20,31
 800c5f0:	4211883a 	add	r8,r8,r8
 800c5f4:	4211883a 	add	r8,r8,r8
 800c5f8:	2211883a 	add	r8,r4,r8
 800c5fc:	30002326 	beq	r6,zero,800c68c <__lshift+0x128>
 800c600:	02400804 	movi	r9,32
 800c604:	4993c83a 	sub	r9,r9,r6
 800c608:	000b883a 	mov	r5,zero
 800c60c:	21c00017 	ldw	r7,0(r4)
 800c610:	1815883a 	mov	r10,r3
 800c614:	18c00104 	addi	r3,r3,4
 800c618:	398e983a 	sll	r7,r7,r6
 800c61c:	21000104 	addi	r4,r4,4
 800c620:	394ab03a 	or	r5,r7,r5
 800c624:	197fff15 	stw	r5,-4(r3)
 800c628:	217fff17 	ldw	r5,-4(r4)
 800c62c:	2a4ad83a 	srl	r5,r5,r9
 800c630:	223ff636 	bltu	r4,r8,800c60c <__lshift+0xa8>
 800c634:	51400115 	stw	r5,4(r10)
 800c638:	28001a1e 	bne	r5,zero,800c6a4 <__lshift+0x140>
 800c63c:	843fffc4 	addi	r16,r16,-1
 800c640:	14000415 	stw	r16,16(r2)
 800c644:	88000826 	beq	r17,zero,800c668 <__lshift+0x104>
 800c648:	89000117 	ldw	r4,4(r17)
 800c64c:	90c01317 	ldw	r3,76(r18)
 800c650:	2109883a 	add	r4,r4,r4
 800c654:	2109883a 	add	r4,r4,r4
 800c658:	1907883a 	add	r3,r3,r4
 800c65c:	19000017 	ldw	r4,0(r3)
 800c660:	89000015 	stw	r4,0(r17)
 800c664:	1c400015 	stw	r17,0(r3)
 800c668:	dfc00617 	ldw	ra,24(sp)
 800c66c:	dd400517 	ldw	r21,20(sp)
 800c670:	dd000417 	ldw	r20,16(sp)
 800c674:	dcc00317 	ldw	r19,12(sp)
 800c678:	dc800217 	ldw	r18,8(sp)
 800c67c:	dc400117 	ldw	r17,4(sp)
 800c680:	dc000017 	ldw	r16,0(sp)
 800c684:	dec00704 	addi	sp,sp,28
 800c688:	f800283a 	ret
 800c68c:	21400017 	ldw	r5,0(r4)
 800c690:	18c00104 	addi	r3,r3,4
 800c694:	21000104 	addi	r4,r4,4
 800c698:	197fff15 	stw	r5,-4(r3)
 800c69c:	223ffb36 	bltu	r4,r8,800c68c <__lshift+0x128>
 800c6a0:	003fe606 	br	800c63c <__lshift+0xd8>
 800c6a4:	9c000084 	addi	r16,r19,2
 800c6a8:	003fe406 	br	800c63c <__lshift+0xd8>

0800c6ac <__mcmp>:
 800c6ac:	20800417 	ldw	r2,16(r4)
 800c6b0:	28c00417 	ldw	r3,16(r5)
 800c6b4:	10c5c83a 	sub	r2,r2,r3
 800c6b8:	1000111e 	bne	r2,zero,800c700 <__mcmp+0x54>
 800c6bc:	18c7883a 	add	r3,r3,r3
 800c6c0:	18c7883a 	add	r3,r3,r3
 800c6c4:	21000504 	addi	r4,r4,20
 800c6c8:	29400504 	addi	r5,r5,20
 800c6cc:	20c5883a 	add	r2,r4,r3
 800c6d0:	28cb883a 	add	r5,r5,r3
 800c6d4:	00000106 	br	800c6dc <__mcmp+0x30>
 800c6d8:	20800a2e 	bgeu	r4,r2,800c704 <__mcmp+0x58>
 800c6dc:	10bfff04 	addi	r2,r2,-4
 800c6e0:	297fff04 	addi	r5,r5,-4
 800c6e4:	11800017 	ldw	r6,0(r2)
 800c6e8:	28c00017 	ldw	r3,0(r5)
 800c6ec:	30fffa26 	beq	r6,r3,800c6d8 <__mcmp+0x2c>
 800c6f0:	30c00236 	bltu	r6,r3,800c6fc <__mcmp+0x50>
 800c6f4:	00800044 	movi	r2,1
 800c6f8:	f800283a 	ret
 800c6fc:	00bfffc4 	movi	r2,-1
 800c700:	f800283a 	ret
 800c704:	0005883a 	mov	r2,zero
 800c708:	f800283a 	ret

0800c70c <__mdiff>:
 800c70c:	28c00417 	ldw	r3,16(r5)
 800c710:	30800417 	ldw	r2,16(r6)
 800c714:	defffa04 	addi	sp,sp,-24
 800c718:	dcc00315 	stw	r19,12(sp)
 800c71c:	dc800215 	stw	r18,8(sp)
 800c720:	dfc00515 	stw	ra,20(sp)
 800c724:	dd000415 	stw	r20,16(sp)
 800c728:	dc400115 	stw	r17,4(sp)
 800c72c:	dc000015 	stw	r16,0(sp)
 800c730:	1887c83a 	sub	r3,r3,r2
 800c734:	2825883a 	mov	r18,r5
 800c738:	3027883a 	mov	r19,r6
 800c73c:	1800141e 	bne	r3,zero,800c790 <__mdiff+0x84>
 800c740:	1085883a 	add	r2,r2,r2
 800c744:	1085883a 	add	r2,r2,r2
 800c748:	2a000504 	addi	r8,r5,20
 800c74c:	34000504 	addi	r16,r6,20
 800c750:	4087883a 	add	r3,r8,r2
 800c754:	8085883a 	add	r2,r16,r2
 800c758:	00000106 	br	800c760 <__mdiff+0x54>
 800c75c:	40c0592e 	bgeu	r8,r3,800c8c4 <__mdiff+0x1b8>
 800c760:	18ffff04 	addi	r3,r3,-4
 800c764:	10bfff04 	addi	r2,r2,-4
 800c768:	19c00017 	ldw	r7,0(r3)
 800c76c:	11400017 	ldw	r5,0(r2)
 800c770:	397ffa26 	beq	r7,r5,800c75c <__mdiff+0x50>
 800c774:	3940592e 	bgeu	r7,r5,800c8dc <__mdiff+0x1d0>
 800c778:	9005883a 	mov	r2,r18
 800c77c:	4023883a 	mov	r17,r8
 800c780:	9825883a 	mov	r18,r19
 800c784:	05000044 	movi	r20,1
 800c788:	1027883a 	mov	r19,r2
 800c78c:	00000406 	br	800c7a0 <__mdiff+0x94>
 800c790:	18005616 	blt	r3,zero,800c8ec <__mdiff+0x1e0>
 800c794:	34400504 	addi	r17,r6,20
 800c798:	2c000504 	addi	r16,r5,20
 800c79c:	0029883a 	mov	r20,zero
 800c7a0:	91400117 	ldw	r5,4(r18)
 800c7a4:	800bd280 	call	800bd28 <_Balloc>
 800c7a8:	92400417 	ldw	r9,16(r18)
 800c7ac:	9b000417 	ldw	r12,16(r19)
 800c7b0:	12c00504 	addi	r11,r2,20
 800c7b4:	4a51883a 	add	r8,r9,r9
 800c7b8:	6319883a 	add	r12,r12,r12
 800c7bc:	4211883a 	add	r8,r8,r8
 800c7c0:	6319883a 	add	r12,r12,r12
 800c7c4:	15000315 	stw	r20,12(r2)
 800c7c8:	8211883a 	add	r8,r16,r8
 800c7cc:	8b19883a 	add	r12,r17,r12
 800c7d0:	0007883a 	mov	r3,zero
 800c7d4:	81400017 	ldw	r5,0(r16)
 800c7d8:	89c00017 	ldw	r7,0(r17)
 800c7dc:	59800104 	addi	r6,r11,4
 800c7e0:	293fffcc 	andi	r4,r5,65535
 800c7e4:	20c7883a 	add	r3,r4,r3
 800c7e8:	393fffcc 	andi	r4,r7,65535
 800c7ec:	1909c83a 	sub	r4,r3,r4
 800c7f0:	280ad43a 	srli	r5,r5,16
 800c7f4:	380ed43a 	srli	r7,r7,16
 800c7f8:	2007d43a 	srai	r3,r4,16
 800c7fc:	213fffcc 	andi	r4,r4,65535
 800c800:	29cbc83a 	sub	r5,r5,r7
 800c804:	28c7883a 	add	r3,r5,r3
 800c808:	180a943a 	slli	r5,r3,16
 800c80c:	8c400104 	addi	r17,r17,4
 800c810:	84000104 	addi	r16,r16,4
 800c814:	2908b03a 	or	r4,r5,r4
 800c818:	59000015 	stw	r4,0(r11)
 800c81c:	1807d43a 	srai	r3,r3,16
 800c820:	3015883a 	mov	r10,r6
 800c824:	3017883a 	mov	r11,r6
 800c828:	8b3fea36 	bltu	r17,r12,800c7d4 <__mdiff+0xc8>
 800c82c:	8200162e 	bgeu	r16,r8,800c888 <__mdiff+0x17c>
 800c830:	8017883a 	mov	r11,r16
 800c834:	59400017 	ldw	r5,0(r11)
 800c838:	31800104 	addi	r6,r6,4
 800c83c:	5ac00104 	addi	r11,r11,4
 800c840:	293fffcc 	andi	r4,r5,65535
 800c844:	20c7883a 	add	r3,r4,r3
 800c848:	280ed43a 	srli	r7,r5,16
 800c84c:	180bd43a 	srai	r5,r3,16
 800c850:	193fffcc 	andi	r4,r3,65535
 800c854:	3947883a 	add	r3,r7,r5
 800c858:	180a943a 	slli	r5,r3,16
 800c85c:	1807d43a 	srai	r3,r3,16
 800c860:	2908b03a 	or	r4,r5,r4
 800c864:	313fff15 	stw	r4,-4(r6)
 800c868:	5a3ff236 	bltu	r11,r8,800c834 <__mdiff+0x128>
 800c86c:	0406303a 	nor	r3,zero,r16
 800c870:	1a07883a 	add	r3,r3,r8
 800c874:	1806d0ba 	srli	r3,r3,2
 800c878:	18c00044 	addi	r3,r3,1
 800c87c:	18c7883a 	add	r3,r3,r3
 800c880:	18c7883a 	add	r3,r3,r3
 800c884:	50d5883a 	add	r10,r10,r3
 800c888:	50ffff04 	addi	r3,r10,-4
 800c88c:	2000041e 	bne	r4,zero,800c8a0 <__mdiff+0x194>
 800c890:	18ffff04 	addi	r3,r3,-4
 800c894:	19000017 	ldw	r4,0(r3)
 800c898:	4a7fffc4 	addi	r9,r9,-1
 800c89c:	203ffc26 	beq	r4,zero,800c890 <__mdiff+0x184>
 800c8a0:	12400415 	stw	r9,16(r2)
 800c8a4:	dfc00517 	ldw	ra,20(sp)
 800c8a8:	dd000417 	ldw	r20,16(sp)
 800c8ac:	dcc00317 	ldw	r19,12(sp)
 800c8b0:	dc800217 	ldw	r18,8(sp)
 800c8b4:	dc400117 	ldw	r17,4(sp)
 800c8b8:	dc000017 	ldw	r16,0(sp)
 800c8bc:	dec00604 	addi	sp,sp,24
 800c8c0:	f800283a 	ret
 800c8c4:	000b883a 	mov	r5,zero
 800c8c8:	800bd280 	call	800bd28 <_Balloc>
 800c8cc:	00c00044 	movi	r3,1
 800c8d0:	10c00415 	stw	r3,16(r2)
 800c8d4:	10000515 	stw	zero,20(r2)
 800c8d8:	003ff206 	br	800c8a4 <__mdiff+0x198>
 800c8dc:	8023883a 	mov	r17,r16
 800c8e0:	0029883a 	mov	r20,zero
 800c8e4:	4021883a 	mov	r16,r8
 800c8e8:	003fad06 	br	800c7a0 <__mdiff+0x94>
 800c8ec:	9005883a 	mov	r2,r18
 800c8f0:	94400504 	addi	r17,r18,20
 800c8f4:	9c000504 	addi	r16,r19,20
 800c8f8:	9825883a 	mov	r18,r19
 800c8fc:	05000044 	movi	r20,1
 800c900:	1027883a 	mov	r19,r2
 800c904:	003fa606 	br	800c7a0 <__mdiff+0x94>

0800c908 <__ulp>:
 800c908:	295ffc2c 	andhi	r5,r5,32752
 800c90c:	00bf3034 	movhi	r2,64704
 800c910:	2887883a 	add	r3,r5,r2
 800c914:	00c0020e 	bge	zero,r3,800c920 <__ulp+0x18>
 800c918:	0005883a 	mov	r2,zero
 800c91c:	f800283a 	ret
 800c920:	00c7c83a 	sub	r3,zero,r3
 800c924:	1807d53a 	srai	r3,r3,20
 800c928:	008004c4 	movi	r2,19
 800c92c:	10c00b0e 	bge	r2,r3,800c95c <__ulp+0x54>
 800c930:	18bffb04 	addi	r2,r3,-20
 800c934:	01000784 	movi	r4,30
 800c938:	0007883a 	mov	r3,zero
 800c93c:	20800516 	blt	r4,r2,800c954 <__ulp+0x4c>
 800c940:	010007c4 	movi	r4,31
 800c944:	2089c83a 	sub	r4,r4,r2
 800c948:	00800044 	movi	r2,1
 800c94c:	1104983a 	sll	r2,r2,r4
 800c950:	f800283a 	ret
 800c954:	00800044 	movi	r2,1
 800c958:	f800283a 	ret
 800c95c:	01400234 	movhi	r5,8
 800c960:	28c7d83a 	sra	r3,r5,r3
 800c964:	0005883a 	mov	r2,zero
 800c968:	f800283a 	ret

0800c96c <__b2d>:
 800c96c:	defffa04 	addi	sp,sp,-24
 800c970:	dc000015 	stw	r16,0(sp)
 800c974:	24000417 	ldw	r16,16(r4)
 800c978:	dc400115 	stw	r17,4(sp)
 800c97c:	24400504 	addi	r17,r4,20
 800c980:	8421883a 	add	r16,r16,r16
 800c984:	8421883a 	add	r16,r16,r16
 800c988:	8c21883a 	add	r16,r17,r16
 800c98c:	dc800215 	stw	r18,8(sp)
 800c990:	84bfff17 	ldw	r18,-4(r16)
 800c994:	dd000415 	stw	r20,16(sp)
 800c998:	dcc00315 	stw	r19,12(sp)
 800c99c:	9009883a 	mov	r4,r18
 800c9a0:	2829883a 	mov	r20,r5
 800c9a4:	dfc00515 	stw	ra,20(sp)
 800c9a8:	800c0440 	call	800c044 <__hi0bits>
 800c9ac:	00c00804 	movi	r3,32
 800c9b0:	1889c83a 	sub	r4,r3,r2
 800c9b4:	a1000015 	stw	r4,0(r20)
 800c9b8:	01000284 	movi	r4,10
 800c9bc:	84ffff04 	addi	r19,r16,-4
 800c9c0:	20801216 	blt	r4,r2,800ca0c <__b2d+0xa0>
 800c9c4:	018002c4 	movi	r6,11
 800c9c8:	308dc83a 	sub	r6,r6,r2
 800c9cc:	9186d83a 	srl	r3,r18,r6
 800c9d0:	18cffc34 	orhi	r3,r3,16368
 800c9d4:	8cc0212e 	bgeu	r17,r19,800ca5c <__b2d+0xf0>
 800c9d8:	813ffe17 	ldw	r4,-8(r16)
 800c9dc:	218cd83a 	srl	r6,r4,r6
 800c9e0:	10800544 	addi	r2,r2,21
 800c9e4:	9084983a 	sll	r2,r18,r2
 800c9e8:	1184b03a 	or	r2,r2,r6
 800c9ec:	dfc00517 	ldw	ra,20(sp)
 800c9f0:	dd000417 	ldw	r20,16(sp)
 800c9f4:	dcc00317 	ldw	r19,12(sp)
 800c9f8:	dc800217 	ldw	r18,8(sp)
 800c9fc:	dc400117 	ldw	r17,4(sp)
 800ca00:	dc000017 	ldw	r16,0(sp)
 800ca04:	dec00604 	addi	sp,sp,24
 800ca08:	f800283a 	ret
 800ca0c:	8cc00f2e 	bgeu	r17,r19,800ca4c <__b2d+0xe0>
 800ca10:	117ffd44 	addi	r5,r2,-11
 800ca14:	80bffe17 	ldw	r2,-8(r16)
 800ca18:	28000e26 	beq	r5,zero,800ca54 <__b2d+0xe8>
 800ca1c:	1949c83a 	sub	r4,r3,r5
 800ca20:	9164983a 	sll	r18,r18,r5
 800ca24:	1106d83a 	srl	r3,r2,r4
 800ca28:	81bffe04 	addi	r6,r16,-8
 800ca2c:	948ffc34 	orhi	r18,r18,16368
 800ca30:	90c6b03a 	or	r3,r18,r3
 800ca34:	89800e2e 	bgeu	r17,r6,800ca70 <__b2d+0x104>
 800ca38:	81bffd17 	ldw	r6,-12(r16)
 800ca3c:	1144983a 	sll	r2,r2,r5
 800ca40:	310ad83a 	srl	r5,r6,r4
 800ca44:	2884b03a 	or	r2,r5,r2
 800ca48:	003fe806 	br	800c9ec <__b2d+0x80>
 800ca4c:	10bffd44 	addi	r2,r2,-11
 800ca50:	1000041e 	bne	r2,zero,800ca64 <__b2d+0xf8>
 800ca54:	90cffc34 	orhi	r3,r18,16368
 800ca58:	003fe406 	br	800c9ec <__b2d+0x80>
 800ca5c:	000d883a 	mov	r6,zero
 800ca60:	003fdf06 	br	800c9e0 <__b2d+0x74>
 800ca64:	90a4983a 	sll	r18,r18,r2
 800ca68:	0005883a 	mov	r2,zero
 800ca6c:	003ff906 	br	800ca54 <__b2d+0xe8>
 800ca70:	1144983a 	sll	r2,r2,r5
 800ca74:	003fdd06 	br	800c9ec <__b2d+0x80>

0800ca78 <__d2b>:
 800ca78:	defff804 	addi	sp,sp,-32
 800ca7c:	dc000215 	stw	r16,8(sp)
 800ca80:	3021883a 	mov	r16,r6
 800ca84:	dc400315 	stw	r17,12(sp)
 800ca88:	8022907a 	slli	r17,r16,1
 800ca8c:	dd000615 	stw	r20,24(sp)
 800ca90:	2829883a 	mov	r20,r5
 800ca94:	01400044 	movi	r5,1
 800ca98:	dcc00515 	stw	r19,20(sp)
 800ca9c:	dc800415 	stw	r18,16(sp)
 800caa0:	dfc00715 	stw	ra,28(sp)
 800caa4:	3825883a 	mov	r18,r7
 800caa8:	8822d57a 	srli	r17,r17,21
 800caac:	800bd280 	call	800bd28 <_Balloc>
 800cab0:	1027883a 	mov	r19,r2
 800cab4:	00800434 	movhi	r2,16
 800cab8:	10bfffc4 	addi	r2,r2,-1
 800cabc:	808c703a 	and	r6,r16,r2
 800cac0:	88000126 	beq	r17,zero,800cac8 <__d2b+0x50>
 800cac4:	31800434 	orhi	r6,r6,16
 800cac8:	d9800015 	stw	r6,0(sp)
 800cacc:	a0002426 	beq	r20,zero,800cb60 <__d2b+0xe8>
 800cad0:	d9000104 	addi	r4,sp,4
 800cad4:	dd000115 	stw	r20,4(sp)
 800cad8:	800c0ac0 	call	800c0ac <__lo0bits>
 800cadc:	d8c00017 	ldw	r3,0(sp)
 800cae0:	10002f1e 	bne	r2,zero,800cba0 <__d2b+0x128>
 800cae4:	d9000117 	ldw	r4,4(sp)
 800cae8:	99000515 	stw	r4,20(r19)
 800caec:	1821003a 	cmpeq	r16,r3,zero
 800caf0:	01000084 	movi	r4,2
 800caf4:	2421c83a 	sub	r16,r4,r16
 800caf8:	98c00615 	stw	r3,24(r19)
 800cafc:	9c000415 	stw	r16,16(r19)
 800cb00:	88001f1e 	bne	r17,zero,800cb80 <__d2b+0x108>
 800cb04:	10bef384 	addi	r2,r2,-1074
 800cb08:	90800015 	stw	r2,0(r18)
 800cb0c:	00900034 	movhi	r2,16384
 800cb10:	10bfffc4 	addi	r2,r2,-1
 800cb14:	8085883a 	add	r2,r16,r2
 800cb18:	1085883a 	add	r2,r2,r2
 800cb1c:	1085883a 	add	r2,r2,r2
 800cb20:	9885883a 	add	r2,r19,r2
 800cb24:	11000517 	ldw	r4,20(r2)
 800cb28:	8020917a 	slli	r16,r16,5
 800cb2c:	800c0440 	call	800c044 <__hi0bits>
 800cb30:	d8c00817 	ldw	r3,32(sp)
 800cb34:	8085c83a 	sub	r2,r16,r2
 800cb38:	18800015 	stw	r2,0(r3)
 800cb3c:	9805883a 	mov	r2,r19
 800cb40:	dfc00717 	ldw	ra,28(sp)
 800cb44:	dd000617 	ldw	r20,24(sp)
 800cb48:	dcc00517 	ldw	r19,20(sp)
 800cb4c:	dc800417 	ldw	r18,16(sp)
 800cb50:	dc400317 	ldw	r17,12(sp)
 800cb54:	dc000217 	ldw	r16,8(sp)
 800cb58:	dec00804 	addi	sp,sp,32
 800cb5c:	f800283a 	ret
 800cb60:	d809883a 	mov	r4,sp
 800cb64:	800c0ac0 	call	800c0ac <__lo0bits>
 800cb68:	d8c00017 	ldw	r3,0(sp)
 800cb6c:	04000044 	movi	r16,1
 800cb70:	9c000415 	stw	r16,16(r19)
 800cb74:	98c00515 	stw	r3,20(r19)
 800cb78:	10800804 	addi	r2,r2,32
 800cb7c:	883fe126 	beq	r17,zero,800cb04 <__d2b+0x8c>
 800cb80:	00c00d44 	movi	r3,53
 800cb84:	8c7ef344 	addi	r17,r17,-1075
 800cb88:	88a3883a 	add	r17,r17,r2
 800cb8c:	1885c83a 	sub	r2,r3,r2
 800cb90:	d8c00817 	ldw	r3,32(sp)
 800cb94:	94400015 	stw	r17,0(r18)
 800cb98:	18800015 	stw	r2,0(r3)
 800cb9c:	003fe706 	br	800cb3c <__d2b+0xc4>
 800cba0:	01000804 	movi	r4,32
 800cba4:	2089c83a 	sub	r4,r4,r2
 800cba8:	1908983a 	sll	r4,r3,r4
 800cbac:	d9400117 	ldw	r5,4(sp)
 800cbb0:	1886d83a 	srl	r3,r3,r2
 800cbb4:	2148b03a 	or	r4,r4,r5
 800cbb8:	99000515 	stw	r4,20(r19)
 800cbbc:	d8c00015 	stw	r3,0(sp)
 800cbc0:	003fca06 	br	800caec <__d2b+0x74>

0800cbc4 <__ratio>:
 800cbc4:	defff904 	addi	sp,sp,-28
 800cbc8:	dc400315 	stw	r17,12(sp)
 800cbcc:	2823883a 	mov	r17,r5
 800cbd0:	d9400104 	addi	r5,sp,4
 800cbd4:	dfc00615 	stw	ra,24(sp)
 800cbd8:	dcc00515 	stw	r19,20(sp)
 800cbdc:	dc800415 	stw	r18,16(sp)
 800cbe0:	2027883a 	mov	r19,r4
 800cbe4:	dc000215 	stw	r16,8(sp)
 800cbe8:	800c96c0 	call	800c96c <__b2d>
 800cbec:	d80b883a 	mov	r5,sp
 800cbf0:	8809883a 	mov	r4,r17
 800cbf4:	1025883a 	mov	r18,r2
 800cbf8:	1821883a 	mov	r16,r3
 800cbfc:	800c96c0 	call	800c96c <__b2d>
 800cc00:	8a000417 	ldw	r8,16(r17)
 800cc04:	99000417 	ldw	r4,16(r19)
 800cc08:	d9400117 	ldw	r5,4(sp)
 800cc0c:	2209c83a 	sub	r4,r4,r8
 800cc10:	2010917a 	slli	r8,r4,5
 800cc14:	d9000017 	ldw	r4,0(sp)
 800cc18:	2909c83a 	sub	r4,r5,r4
 800cc1c:	4109883a 	add	r4,r8,r4
 800cc20:	01000e0e 	bge	zero,r4,800cc5c <__ratio+0x98>
 800cc24:	2008953a 	slli	r4,r4,20
 800cc28:	2421883a 	add	r16,r4,r16
 800cc2c:	100d883a 	mov	r6,r2
 800cc30:	180f883a 	mov	r7,r3
 800cc34:	9009883a 	mov	r4,r18
 800cc38:	800b883a 	mov	r5,r16
 800cc3c:	8010df00 	call	8010df0 <__divdf3>
 800cc40:	dfc00617 	ldw	ra,24(sp)
 800cc44:	dcc00517 	ldw	r19,20(sp)
 800cc48:	dc800417 	ldw	r18,16(sp)
 800cc4c:	dc400317 	ldw	r17,12(sp)
 800cc50:	dc000217 	ldw	r16,8(sp)
 800cc54:	dec00704 	addi	sp,sp,28
 800cc58:	f800283a 	ret
 800cc5c:	2008953a 	slli	r4,r4,20
 800cc60:	1907c83a 	sub	r3,r3,r4
 800cc64:	003ff106 	br	800cc2c <__ratio+0x68>

0800cc68 <_mprec_log10>:
 800cc68:	defffe04 	addi	sp,sp,-8
 800cc6c:	dc000015 	stw	r16,0(sp)
 800cc70:	dfc00115 	stw	ra,4(sp)
 800cc74:	008005c4 	movi	r2,23
 800cc78:	2021883a 	mov	r16,r4
 800cc7c:	11000d0e 	bge	r2,r4,800ccb4 <_mprec_log10+0x4c>
 800cc80:	0005883a 	mov	r2,zero
 800cc84:	00cffc34 	movhi	r3,16368
 800cc88:	843fffc4 	addi	r16,r16,-1
 800cc8c:	000d883a 	mov	r6,zero
 800cc90:	01d00934 	movhi	r7,16420
 800cc94:	1009883a 	mov	r4,r2
 800cc98:	180b883a 	mov	r5,r3
 800cc9c:	80051240 	call	8005124 <__muldf3>
 800cca0:	803ff91e 	bne	r16,zero,800cc88 <_mprec_log10+0x20>
 800cca4:	dfc00117 	ldw	ra,4(sp)
 800cca8:	dc000017 	ldw	r16,0(sp)
 800ccac:	dec00204 	addi	sp,sp,8
 800ccb0:	f800283a 	ret
 800ccb4:	202090fa 	slli	r16,r4,3
 800ccb8:	00820074 	movhi	r2,2049
 800ccbc:	10952304 	addi	r2,r2,21644
 800ccc0:	1421883a 	add	r16,r2,r16
 800ccc4:	80800017 	ldw	r2,0(r16)
 800ccc8:	80c00117 	ldw	r3,4(r16)
 800cccc:	dfc00117 	ldw	ra,4(sp)
 800ccd0:	dc000017 	ldw	r16,0(sp)
 800ccd4:	dec00204 	addi	sp,sp,8
 800ccd8:	f800283a 	ret

0800ccdc <__copybits>:
 800ccdc:	297fffc4 	addi	r5,r5,-1
 800cce0:	280fd17a 	srai	r7,r5,5
 800cce4:	30c00417 	ldw	r3,16(r6)
 800cce8:	30800504 	addi	r2,r6,20
 800ccec:	39c00044 	addi	r7,r7,1
 800ccf0:	18c7883a 	add	r3,r3,r3
 800ccf4:	39cf883a 	add	r7,r7,r7
 800ccf8:	18c7883a 	add	r3,r3,r3
 800ccfc:	39cf883a 	add	r7,r7,r7
 800cd00:	10c7883a 	add	r3,r2,r3
 800cd04:	21cf883a 	add	r7,r4,r7
 800cd08:	10c00d2e 	bgeu	r2,r3,800cd40 <__copybits+0x64>
 800cd0c:	200b883a 	mov	r5,r4
 800cd10:	12000017 	ldw	r8,0(r2)
 800cd14:	29400104 	addi	r5,r5,4
 800cd18:	10800104 	addi	r2,r2,4
 800cd1c:	2a3fff15 	stw	r8,-4(r5)
 800cd20:	10fffb36 	bltu	r2,r3,800cd10 <__copybits+0x34>
 800cd24:	1985c83a 	sub	r2,r3,r6
 800cd28:	10bffac4 	addi	r2,r2,-21
 800cd2c:	1004d0ba 	srli	r2,r2,2
 800cd30:	10800044 	addi	r2,r2,1
 800cd34:	1085883a 	add	r2,r2,r2
 800cd38:	1085883a 	add	r2,r2,r2
 800cd3c:	2089883a 	add	r4,r4,r2
 800cd40:	21c0032e 	bgeu	r4,r7,800cd50 <__copybits+0x74>
 800cd44:	20000015 	stw	zero,0(r4)
 800cd48:	21000104 	addi	r4,r4,4
 800cd4c:	21fffd36 	bltu	r4,r7,800cd44 <__copybits+0x68>
 800cd50:	f800283a 	ret

0800cd54 <__any_on>:
 800cd54:	20c00417 	ldw	r3,16(r4)
 800cd58:	2805d17a 	srai	r2,r5,5
 800cd5c:	21000504 	addi	r4,r4,20
 800cd60:	18800d0e 	bge	r3,r2,800cd98 <__any_on+0x44>
 800cd64:	18c7883a 	add	r3,r3,r3
 800cd68:	18c7883a 	add	r3,r3,r3
 800cd6c:	20c7883a 	add	r3,r4,r3
 800cd70:	20c0192e 	bgeu	r4,r3,800cdd8 <__any_on+0x84>
 800cd74:	18bfff17 	ldw	r2,-4(r3)
 800cd78:	18ffff04 	addi	r3,r3,-4
 800cd7c:	1000041e 	bne	r2,zero,800cd90 <__any_on+0x3c>
 800cd80:	20c0142e 	bgeu	r4,r3,800cdd4 <__any_on+0x80>
 800cd84:	18ffff04 	addi	r3,r3,-4
 800cd88:	19400017 	ldw	r5,0(r3)
 800cd8c:	283ffc26 	beq	r5,zero,800cd80 <__any_on+0x2c>
 800cd90:	00800044 	movi	r2,1
 800cd94:	f800283a 	ret
 800cd98:	10c00a0e 	bge	r2,r3,800cdc4 <__any_on+0x70>
 800cd9c:	1085883a 	add	r2,r2,r2
 800cda0:	1085883a 	add	r2,r2,r2
 800cda4:	294007cc 	andi	r5,r5,31
 800cda8:	2087883a 	add	r3,r4,r2
 800cdac:	283ff026 	beq	r5,zero,800cd70 <__any_on+0x1c>
 800cdb0:	19800017 	ldw	r6,0(r3)
 800cdb4:	3144d83a 	srl	r2,r6,r5
 800cdb8:	114a983a 	sll	r5,r2,r5
 800cdbc:	317ff41e 	bne	r6,r5,800cd90 <__any_on+0x3c>
 800cdc0:	003feb06 	br	800cd70 <__any_on+0x1c>
 800cdc4:	1085883a 	add	r2,r2,r2
 800cdc8:	1085883a 	add	r2,r2,r2
 800cdcc:	2087883a 	add	r3,r4,r2
 800cdd0:	003fe706 	br	800cd70 <__any_on+0x1c>
 800cdd4:	f800283a 	ret
 800cdd8:	0005883a 	mov	r2,zero
 800cddc:	f800283a 	ret

0800cde0 <_putc_r>:
 800cde0:	defffc04 	addi	sp,sp,-16
 800cde4:	dc000215 	stw	r16,8(sp)
 800cde8:	dfc00315 	stw	ra,12(sp)
 800cdec:	2021883a 	mov	r16,r4
 800cdf0:	20000226 	beq	r4,zero,800cdfc <_putc_r+0x1c>
 800cdf4:	20800e17 	ldw	r2,56(r4)
 800cdf8:	10001b26 	beq	r2,zero,800ce68 <_putc_r+0x88>
 800cdfc:	30800217 	ldw	r2,8(r6)
 800ce00:	10bfffc4 	addi	r2,r2,-1
 800ce04:	30800215 	stw	r2,8(r6)
 800ce08:	10000a16 	blt	r2,zero,800ce34 <_putc_r+0x54>
 800ce0c:	30800017 	ldw	r2,0(r6)
 800ce10:	11400005 	stb	r5,0(r2)
 800ce14:	30800017 	ldw	r2,0(r6)
 800ce18:	10c00044 	addi	r3,r2,1
 800ce1c:	30c00015 	stw	r3,0(r6)
 800ce20:	10800003 	ldbu	r2,0(r2)
 800ce24:	dfc00317 	ldw	ra,12(sp)
 800ce28:	dc000217 	ldw	r16,8(sp)
 800ce2c:	dec00404 	addi	sp,sp,16
 800ce30:	f800283a 	ret
 800ce34:	30c00617 	ldw	r3,24(r6)
 800ce38:	10c00616 	blt	r2,r3,800ce54 <_putc_r+0x74>
 800ce3c:	30800017 	ldw	r2,0(r6)
 800ce40:	00c00284 	movi	r3,10
 800ce44:	11400005 	stb	r5,0(r2)
 800ce48:	30800017 	ldw	r2,0(r6)
 800ce4c:	11400003 	ldbu	r5,0(r2)
 800ce50:	28fff11e 	bne	r5,r3,800ce18 <_putc_r+0x38>
 800ce54:	8009883a 	mov	r4,r16
 800ce58:	dfc00317 	ldw	ra,12(sp)
 800ce5c:	dc000217 	ldw	r16,8(sp)
 800ce60:	dec00404 	addi	sp,sp,16
 800ce64:	800ee841 	jmpi	800ee84 <__swbuf_r>
 800ce68:	d9400015 	stw	r5,0(sp)
 800ce6c:	d9800115 	stw	r6,4(sp)
 800ce70:	800a5140 	call	800a514 <__sinit>
 800ce74:	d9800117 	ldw	r6,4(sp)
 800ce78:	d9400017 	ldw	r5,0(sp)
 800ce7c:	003fdf06 	br	800cdfc <_putc_r+0x1c>

0800ce80 <putc>:
 800ce80:	00820074 	movhi	r2,2049
 800ce84:	defffc04 	addi	sp,sp,-16
 800ce88:	109c2704 	addi	r2,r2,28828
 800ce8c:	dc000115 	stw	r16,4(sp)
 800ce90:	14000017 	ldw	r16,0(r2)
 800ce94:	dc400215 	stw	r17,8(sp)
 800ce98:	dfc00315 	stw	ra,12(sp)
 800ce9c:	2023883a 	mov	r17,r4
 800cea0:	80000226 	beq	r16,zero,800ceac <putc+0x2c>
 800cea4:	80800e17 	ldw	r2,56(r16)
 800cea8:	10001a26 	beq	r2,zero,800cf14 <putc+0x94>
 800ceac:	28800217 	ldw	r2,8(r5)
 800ceb0:	10bfffc4 	addi	r2,r2,-1
 800ceb4:	28800215 	stw	r2,8(r5)
 800ceb8:	10000b16 	blt	r2,zero,800cee8 <putc+0x68>
 800cebc:	28800017 	ldw	r2,0(r5)
 800cec0:	14400005 	stb	r17,0(r2)
 800cec4:	28800017 	ldw	r2,0(r5)
 800cec8:	10c00044 	addi	r3,r2,1
 800cecc:	28c00015 	stw	r3,0(r5)
 800ced0:	10800003 	ldbu	r2,0(r2)
 800ced4:	dfc00317 	ldw	ra,12(sp)
 800ced8:	dc400217 	ldw	r17,8(sp)
 800cedc:	dc000117 	ldw	r16,4(sp)
 800cee0:	dec00404 	addi	sp,sp,16
 800cee4:	f800283a 	ret
 800cee8:	28c00617 	ldw	r3,24(r5)
 800ceec:	10c00e16 	blt	r2,r3,800cf28 <putc+0xa8>
 800cef0:	28800017 	ldw	r2,0(r5)
 800cef4:	01000284 	movi	r4,10
 800cef8:	14400005 	stb	r17,0(r2)
 800cefc:	28800017 	ldw	r2,0(r5)
 800cf00:	10c00003 	ldbu	r3,0(r2)
 800cf04:	193ff01e 	bne	r3,r4,800cec8 <putc+0x48>
 800cf08:	280d883a 	mov	r6,r5
 800cf0c:	180b883a 	mov	r5,r3
 800cf10:	00000706 	br	800cf30 <putc+0xb0>
 800cf14:	8009883a 	mov	r4,r16
 800cf18:	d9400015 	stw	r5,0(sp)
 800cf1c:	800a5140 	call	800a514 <__sinit>
 800cf20:	d9400017 	ldw	r5,0(sp)
 800cf24:	003fe106 	br	800ceac <putc+0x2c>
 800cf28:	280d883a 	mov	r6,r5
 800cf2c:	880b883a 	mov	r5,r17
 800cf30:	8009883a 	mov	r4,r16
 800cf34:	dfc00317 	ldw	ra,12(sp)
 800cf38:	dc400217 	ldw	r17,8(sp)
 800cf3c:	dc000117 	ldw	r16,4(sp)
 800cf40:	dec00404 	addi	sp,sp,16
 800cf44:	800ee841 	jmpi	800ee84 <__swbuf_r>

0800cf48 <_realloc_r>:
 800cf48:	defff604 	addi	sp,sp,-40
 800cf4c:	dc800215 	stw	r18,8(sp)
 800cf50:	dfc00915 	stw	ra,36(sp)
 800cf54:	df000815 	stw	fp,32(sp)
 800cf58:	ddc00715 	stw	r23,28(sp)
 800cf5c:	dd800615 	stw	r22,24(sp)
 800cf60:	dd400515 	stw	r21,20(sp)
 800cf64:	dd000415 	stw	r20,16(sp)
 800cf68:	dcc00315 	stw	r19,12(sp)
 800cf6c:	dc400115 	stw	r17,4(sp)
 800cf70:	dc000015 	stw	r16,0(sp)
 800cf74:	3025883a 	mov	r18,r6
 800cf78:	2800b726 	beq	r5,zero,800d258 <_realloc_r+0x310>
 800cf7c:	282b883a 	mov	r21,r5
 800cf80:	2029883a 	mov	r20,r4
 800cf84:	8012bcc0 	call	8012bcc <__malloc_lock>
 800cf88:	a8bfff17 	ldw	r2,-4(r21)
 800cf8c:	043fff04 	movi	r16,-4
 800cf90:	90c002c4 	addi	r3,r18,11
 800cf94:	01000584 	movi	r4,22
 800cf98:	acfffe04 	addi	r19,r21,-8
 800cf9c:	1420703a 	and	r16,r2,r16
 800cfa0:	20c0332e 	bgeu	r4,r3,800d070 <_realloc_r+0x128>
 800cfa4:	047ffe04 	movi	r17,-8
 800cfa8:	1c62703a 	and	r17,r3,r17
 800cfac:	8807883a 	mov	r3,r17
 800cfb0:	88005816 	blt	r17,zero,800d114 <_realloc_r+0x1cc>
 800cfb4:	8c805736 	bltu	r17,r18,800d114 <_realloc_r+0x1cc>
 800cfb8:	80c0300e 	bge	r16,r3,800d07c <_realloc_r+0x134>
 800cfbc:	07020074 	movhi	fp,2049
 800cfc0:	e7169904 	addi	fp,fp,23140
 800cfc4:	e1c00217 	ldw	r7,8(fp)
 800cfc8:	9c09883a 	add	r4,r19,r16
 800cfcc:	22000117 	ldw	r8,4(r4)
 800cfd0:	21c06326 	beq	r4,r7,800d160 <_realloc_r+0x218>
 800cfd4:	017fff84 	movi	r5,-2
 800cfd8:	414a703a 	and	r5,r8,r5
 800cfdc:	214b883a 	add	r5,r4,r5
 800cfe0:	29800117 	ldw	r6,4(r5)
 800cfe4:	3180004c 	andi	r6,r6,1
 800cfe8:	30003f26 	beq	r6,zero,800d0e8 <_realloc_r+0x1a0>
 800cfec:	1080004c 	andi	r2,r2,1
 800cff0:	10008326 	beq	r2,zero,800d200 <_realloc_r+0x2b8>
 800cff4:	900b883a 	mov	r5,r18
 800cff8:	a009883a 	mov	r4,r20
 800cffc:	800b2dc0 	call	800b2dc <_malloc_r>
 800d000:	1025883a 	mov	r18,r2
 800d004:	10011e26 	beq	r2,zero,800d480 <_realloc_r+0x538>
 800d008:	a93fff17 	ldw	r4,-4(r21)
 800d00c:	10fffe04 	addi	r3,r2,-8
 800d010:	00bfff84 	movi	r2,-2
 800d014:	2084703a 	and	r2,r4,r2
 800d018:	9885883a 	add	r2,r19,r2
 800d01c:	1880ee26 	beq	r3,r2,800d3d8 <_realloc_r+0x490>
 800d020:	81bfff04 	addi	r6,r16,-4
 800d024:	00800904 	movi	r2,36
 800d028:	1180b836 	bltu	r2,r6,800d30c <_realloc_r+0x3c4>
 800d02c:	00c004c4 	movi	r3,19
 800d030:	19809636 	bltu	r3,r6,800d28c <_realloc_r+0x344>
 800d034:	9005883a 	mov	r2,r18
 800d038:	a807883a 	mov	r3,r21
 800d03c:	19000017 	ldw	r4,0(r3)
 800d040:	11000015 	stw	r4,0(r2)
 800d044:	19000117 	ldw	r4,4(r3)
 800d048:	11000115 	stw	r4,4(r2)
 800d04c:	18c00217 	ldw	r3,8(r3)
 800d050:	10c00215 	stw	r3,8(r2)
 800d054:	a80b883a 	mov	r5,r21
 800d058:	a009883a 	mov	r4,r20
 800d05c:	800a6880 	call	800a688 <_free_r>
 800d060:	a009883a 	mov	r4,r20
 800d064:	8012bf00 	call	8012bf0 <__malloc_unlock>
 800d068:	9005883a 	mov	r2,r18
 800d06c:	00001206 	br	800d0b8 <_realloc_r+0x170>
 800d070:	00c00404 	movi	r3,16
 800d074:	1823883a 	mov	r17,r3
 800d078:	003fce06 	br	800cfb4 <_realloc_r+0x6c>
 800d07c:	a825883a 	mov	r18,r21
 800d080:	8445c83a 	sub	r2,r16,r17
 800d084:	00c003c4 	movi	r3,15
 800d088:	18802636 	bltu	r3,r2,800d124 <_realloc_r+0x1dc>
 800d08c:	99800117 	ldw	r6,4(r19)
 800d090:	9c07883a 	add	r3,r19,r16
 800d094:	3180004c 	andi	r6,r6,1
 800d098:	3420b03a 	or	r16,r6,r16
 800d09c:	9c000115 	stw	r16,4(r19)
 800d0a0:	18800117 	ldw	r2,4(r3)
 800d0a4:	10800054 	ori	r2,r2,1
 800d0a8:	18800115 	stw	r2,4(r3)
 800d0ac:	a009883a 	mov	r4,r20
 800d0b0:	8012bf00 	call	8012bf0 <__malloc_unlock>
 800d0b4:	9005883a 	mov	r2,r18
 800d0b8:	dfc00917 	ldw	ra,36(sp)
 800d0bc:	df000817 	ldw	fp,32(sp)
 800d0c0:	ddc00717 	ldw	r23,28(sp)
 800d0c4:	dd800617 	ldw	r22,24(sp)
 800d0c8:	dd400517 	ldw	r21,20(sp)
 800d0cc:	dd000417 	ldw	r20,16(sp)
 800d0d0:	dcc00317 	ldw	r19,12(sp)
 800d0d4:	dc800217 	ldw	r18,8(sp)
 800d0d8:	dc400117 	ldw	r17,4(sp)
 800d0dc:	dc000017 	ldw	r16,0(sp)
 800d0e0:	dec00a04 	addi	sp,sp,40
 800d0e4:	f800283a 	ret
 800d0e8:	017fff04 	movi	r5,-4
 800d0ec:	414a703a 	and	r5,r8,r5
 800d0f0:	814d883a 	add	r6,r16,r5
 800d0f4:	30c01f16 	blt	r6,r3,800d174 <_realloc_r+0x22c>
 800d0f8:	20800317 	ldw	r2,12(r4)
 800d0fc:	20c00217 	ldw	r3,8(r4)
 800d100:	a825883a 	mov	r18,r21
 800d104:	3021883a 	mov	r16,r6
 800d108:	18800315 	stw	r2,12(r3)
 800d10c:	10c00215 	stw	r3,8(r2)
 800d110:	003fdb06 	br	800d080 <_realloc_r+0x138>
 800d114:	00800304 	movi	r2,12
 800d118:	a0800015 	stw	r2,0(r20)
 800d11c:	0005883a 	mov	r2,zero
 800d120:	003fe506 	br	800d0b8 <_realloc_r+0x170>
 800d124:	98c00117 	ldw	r3,4(r19)
 800d128:	9c4b883a 	add	r5,r19,r17
 800d12c:	11000054 	ori	r4,r2,1
 800d130:	18c0004c 	andi	r3,r3,1
 800d134:	1c62b03a 	or	r17,r3,r17
 800d138:	9c400115 	stw	r17,4(r19)
 800d13c:	29000115 	stw	r4,4(r5)
 800d140:	2885883a 	add	r2,r5,r2
 800d144:	10c00117 	ldw	r3,4(r2)
 800d148:	29400204 	addi	r5,r5,8
 800d14c:	a009883a 	mov	r4,r20
 800d150:	18c00054 	ori	r3,r3,1
 800d154:	10c00115 	stw	r3,4(r2)
 800d158:	800a6880 	call	800a688 <_free_r>
 800d15c:	003fd306 	br	800d0ac <_realloc_r+0x164>
 800d160:	017fff04 	movi	r5,-4
 800d164:	414a703a 	and	r5,r8,r5
 800d168:	89800404 	addi	r6,r17,16
 800d16c:	8151883a 	add	r8,r16,r5
 800d170:	4180590e 	bge	r8,r6,800d2d8 <_realloc_r+0x390>
 800d174:	1080004c 	andi	r2,r2,1
 800d178:	103f9e1e 	bne	r2,zero,800cff4 <_realloc_r+0xac>
 800d17c:	adbffe17 	ldw	r22,-8(r21)
 800d180:	00bfff04 	movi	r2,-4
 800d184:	9dadc83a 	sub	r22,r19,r22
 800d188:	b1800117 	ldw	r6,4(r22)
 800d18c:	3084703a 	and	r2,r6,r2
 800d190:	20002026 	beq	r4,zero,800d214 <_realloc_r+0x2cc>
 800d194:	80af883a 	add	r23,r16,r2
 800d198:	b96f883a 	add	r23,r23,r5
 800d19c:	21c05f26 	beq	r4,r7,800d31c <_realloc_r+0x3d4>
 800d1a0:	b8c01c16 	blt	r23,r3,800d214 <_realloc_r+0x2cc>
 800d1a4:	20800317 	ldw	r2,12(r4)
 800d1a8:	20c00217 	ldw	r3,8(r4)
 800d1ac:	81bfff04 	addi	r6,r16,-4
 800d1b0:	01000904 	movi	r4,36
 800d1b4:	18800315 	stw	r2,12(r3)
 800d1b8:	10c00215 	stw	r3,8(r2)
 800d1bc:	b0c00217 	ldw	r3,8(r22)
 800d1c0:	b0800317 	ldw	r2,12(r22)
 800d1c4:	b4800204 	addi	r18,r22,8
 800d1c8:	18800315 	stw	r2,12(r3)
 800d1cc:	10c00215 	stw	r3,8(r2)
 800d1d0:	21801b36 	bltu	r4,r6,800d240 <_realloc_r+0x2f8>
 800d1d4:	008004c4 	movi	r2,19
 800d1d8:	1180352e 	bgeu	r2,r6,800d2b0 <_realloc_r+0x368>
 800d1dc:	a8800017 	ldw	r2,0(r21)
 800d1e0:	b0800215 	stw	r2,8(r22)
 800d1e4:	a8800117 	ldw	r2,4(r21)
 800d1e8:	b0800315 	stw	r2,12(r22)
 800d1ec:	008006c4 	movi	r2,27
 800d1f0:	11807f36 	bltu	r2,r6,800d3f0 <_realloc_r+0x4a8>
 800d1f4:	b0800404 	addi	r2,r22,16
 800d1f8:	ad400204 	addi	r21,r21,8
 800d1fc:	00002d06 	br	800d2b4 <_realloc_r+0x36c>
 800d200:	adbffe17 	ldw	r22,-8(r21)
 800d204:	00bfff04 	movi	r2,-4
 800d208:	9dadc83a 	sub	r22,r19,r22
 800d20c:	b1000117 	ldw	r4,4(r22)
 800d210:	2084703a 	and	r2,r4,r2
 800d214:	b03f7726 	beq	r22,zero,800cff4 <_realloc_r+0xac>
 800d218:	80af883a 	add	r23,r16,r2
 800d21c:	b8ff7516 	blt	r23,r3,800cff4 <_realloc_r+0xac>
 800d220:	b0800317 	ldw	r2,12(r22)
 800d224:	b0c00217 	ldw	r3,8(r22)
 800d228:	81bfff04 	addi	r6,r16,-4
 800d22c:	01000904 	movi	r4,36
 800d230:	18800315 	stw	r2,12(r3)
 800d234:	10c00215 	stw	r3,8(r2)
 800d238:	b4800204 	addi	r18,r22,8
 800d23c:	21bfe52e 	bgeu	r4,r6,800d1d4 <_realloc_r+0x28c>
 800d240:	a80b883a 	mov	r5,r21
 800d244:	9009883a 	mov	r4,r18
 800d248:	800bbcc0 	call	800bbcc <memmove>
 800d24c:	b821883a 	mov	r16,r23
 800d250:	b027883a 	mov	r19,r22
 800d254:	003f8a06 	br	800d080 <_realloc_r+0x138>
 800d258:	300b883a 	mov	r5,r6
 800d25c:	dfc00917 	ldw	ra,36(sp)
 800d260:	df000817 	ldw	fp,32(sp)
 800d264:	ddc00717 	ldw	r23,28(sp)
 800d268:	dd800617 	ldw	r22,24(sp)
 800d26c:	dd400517 	ldw	r21,20(sp)
 800d270:	dd000417 	ldw	r20,16(sp)
 800d274:	dcc00317 	ldw	r19,12(sp)
 800d278:	dc800217 	ldw	r18,8(sp)
 800d27c:	dc400117 	ldw	r17,4(sp)
 800d280:	dc000017 	ldw	r16,0(sp)
 800d284:	dec00a04 	addi	sp,sp,40
 800d288:	800b2dc1 	jmpi	800b2dc <_malloc_r>
 800d28c:	a8c00017 	ldw	r3,0(r21)
 800d290:	90c00015 	stw	r3,0(r18)
 800d294:	a8c00117 	ldw	r3,4(r21)
 800d298:	90c00115 	stw	r3,4(r18)
 800d29c:	00c006c4 	movi	r3,27
 800d2a0:	19804536 	bltu	r3,r6,800d3b8 <_realloc_r+0x470>
 800d2a4:	90800204 	addi	r2,r18,8
 800d2a8:	a8c00204 	addi	r3,r21,8
 800d2ac:	003f6306 	br	800d03c <_realloc_r+0xf4>
 800d2b0:	9005883a 	mov	r2,r18
 800d2b4:	a8c00017 	ldw	r3,0(r21)
 800d2b8:	b821883a 	mov	r16,r23
 800d2bc:	b027883a 	mov	r19,r22
 800d2c0:	10c00015 	stw	r3,0(r2)
 800d2c4:	a8c00117 	ldw	r3,4(r21)
 800d2c8:	10c00115 	stw	r3,4(r2)
 800d2cc:	a8c00217 	ldw	r3,8(r21)
 800d2d0:	10c00215 	stw	r3,8(r2)
 800d2d4:	003f6a06 	br	800d080 <_realloc_r+0x138>
 800d2d8:	9c67883a 	add	r19,r19,r17
 800d2dc:	4445c83a 	sub	r2,r8,r17
 800d2e0:	e4c00215 	stw	r19,8(fp)
 800d2e4:	10800054 	ori	r2,r2,1
 800d2e8:	98800115 	stw	r2,4(r19)
 800d2ec:	a8bfff17 	ldw	r2,-4(r21)
 800d2f0:	a009883a 	mov	r4,r20
 800d2f4:	1080004c 	andi	r2,r2,1
 800d2f8:	1462b03a 	or	r17,r2,r17
 800d2fc:	ac7fff15 	stw	r17,-4(r21)
 800d300:	8012bf00 	call	8012bf0 <__malloc_unlock>
 800d304:	a805883a 	mov	r2,r21
 800d308:	003f6b06 	br	800d0b8 <_realloc_r+0x170>
 800d30c:	a80b883a 	mov	r5,r21
 800d310:	9009883a 	mov	r4,r18
 800d314:	800bbcc0 	call	800bbcc <memmove>
 800d318:	003f4e06 	br	800d054 <_realloc_r+0x10c>
 800d31c:	89000404 	addi	r4,r17,16
 800d320:	b93fbc16 	blt	r23,r4,800d214 <_realloc_r+0x2cc>
 800d324:	b0800317 	ldw	r2,12(r22)
 800d328:	b0c00217 	ldw	r3,8(r22)
 800d32c:	81bfff04 	addi	r6,r16,-4
 800d330:	01000904 	movi	r4,36
 800d334:	18800315 	stw	r2,12(r3)
 800d338:	10c00215 	stw	r3,8(r2)
 800d33c:	b4800204 	addi	r18,r22,8
 800d340:	21804336 	bltu	r4,r6,800d450 <_realloc_r+0x508>
 800d344:	008004c4 	movi	r2,19
 800d348:	11803f2e 	bgeu	r2,r6,800d448 <_realloc_r+0x500>
 800d34c:	a8800017 	ldw	r2,0(r21)
 800d350:	b0800215 	stw	r2,8(r22)
 800d354:	a8800117 	ldw	r2,4(r21)
 800d358:	b0800315 	stw	r2,12(r22)
 800d35c:	008006c4 	movi	r2,27
 800d360:	11803f36 	bltu	r2,r6,800d460 <_realloc_r+0x518>
 800d364:	b0800404 	addi	r2,r22,16
 800d368:	ad400204 	addi	r21,r21,8
 800d36c:	a8c00017 	ldw	r3,0(r21)
 800d370:	10c00015 	stw	r3,0(r2)
 800d374:	a8c00117 	ldw	r3,4(r21)
 800d378:	10c00115 	stw	r3,4(r2)
 800d37c:	a8c00217 	ldw	r3,8(r21)
 800d380:	10c00215 	stw	r3,8(r2)
 800d384:	b447883a 	add	r3,r22,r17
 800d388:	bc45c83a 	sub	r2,r23,r17
 800d38c:	e0c00215 	stw	r3,8(fp)
 800d390:	10800054 	ori	r2,r2,1
 800d394:	18800115 	stw	r2,4(r3)
 800d398:	b0800117 	ldw	r2,4(r22)
 800d39c:	a009883a 	mov	r4,r20
 800d3a0:	1080004c 	andi	r2,r2,1
 800d3a4:	1462b03a 	or	r17,r2,r17
 800d3a8:	b4400115 	stw	r17,4(r22)
 800d3ac:	8012bf00 	call	8012bf0 <__malloc_unlock>
 800d3b0:	9005883a 	mov	r2,r18
 800d3b4:	003f4006 	br	800d0b8 <_realloc_r+0x170>
 800d3b8:	a8c00217 	ldw	r3,8(r21)
 800d3bc:	90c00215 	stw	r3,8(r18)
 800d3c0:	a8c00317 	ldw	r3,12(r21)
 800d3c4:	90c00315 	stw	r3,12(r18)
 800d3c8:	30801126 	beq	r6,r2,800d410 <_realloc_r+0x4c8>
 800d3cc:	90800404 	addi	r2,r18,16
 800d3d0:	a8c00404 	addi	r3,r21,16
 800d3d4:	003f1906 	br	800d03c <_realloc_r+0xf4>
 800d3d8:	90ffff17 	ldw	r3,-4(r18)
 800d3dc:	00bfff04 	movi	r2,-4
 800d3e0:	a825883a 	mov	r18,r21
 800d3e4:	1884703a 	and	r2,r3,r2
 800d3e8:	80a1883a 	add	r16,r16,r2
 800d3ec:	003f2406 	br	800d080 <_realloc_r+0x138>
 800d3f0:	a8800217 	ldw	r2,8(r21)
 800d3f4:	b0800415 	stw	r2,16(r22)
 800d3f8:	a8800317 	ldw	r2,12(r21)
 800d3fc:	b0800515 	stw	r2,20(r22)
 800d400:	31000a26 	beq	r6,r4,800d42c <_realloc_r+0x4e4>
 800d404:	b0800604 	addi	r2,r22,24
 800d408:	ad400404 	addi	r21,r21,16
 800d40c:	003fa906 	br	800d2b4 <_realloc_r+0x36c>
 800d410:	a9000417 	ldw	r4,16(r21)
 800d414:	90800604 	addi	r2,r18,24
 800d418:	a8c00604 	addi	r3,r21,24
 800d41c:	91000415 	stw	r4,16(r18)
 800d420:	a9000517 	ldw	r4,20(r21)
 800d424:	91000515 	stw	r4,20(r18)
 800d428:	003f0406 	br	800d03c <_realloc_r+0xf4>
 800d42c:	a8c00417 	ldw	r3,16(r21)
 800d430:	ad400604 	addi	r21,r21,24
 800d434:	b0800804 	addi	r2,r22,32
 800d438:	b0c00615 	stw	r3,24(r22)
 800d43c:	a8ffff17 	ldw	r3,-4(r21)
 800d440:	b0c00715 	stw	r3,28(r22)
 800d444:	003f9b06 	br	800d2b4 <_realloc_r+0x36c>
 800d448:	9005883a 	mov	r2,r18
 800d44c:	003fc706 	br	800d36c <_realloc_r+0x424>
 800d450:	a80b883a 	mov	r5,r21
 800d454:	9009883a 	mov	r4,r18
 800d458:	800bbcc0 	call	800bbcc <memmove>
 800d45c:	003fc906 	br	800d384 <_realloc_r+0x43c>
 800d460:	a8800217 	ldw	r2,8(r21)
 800d464:	b0800415 	stw	r2,16(r22)
 800d468:	a8800317 	ldw	r2,12(r21)
 800d46c:	b0800515 	stw	r2,20(r22)
 800d470:	31000726 	beq	r6,r4,800d490 <_realloc_r+0x548>
 800d474:	b0800604 	addi	r2,r22,24
 800d478:	ad400404 	addi	r21,r21,16
 800d47c:	003fbb06 	br	800d36c <_realloc_r+0x424>
 800d480:	a009883a 	mov	r4,r20
 800d484:	8012bf00 	call	8012bf0 <__malloc_unlock>
 800d488:	0005883a 	mov	r2,zero
 800d48c:	003f0a06 	br	800d0b8 <_realloc_r+0x170>
 800d490:	a8c00417 	ldw	r3,16(r21)
 800d494:	ad400604 	addi	r21,r21,24
 800d498:	b0800804 	addi	r2,r22,32
 800d49c:	b0c00615 	stw	r3,24(r22)
 800d4a0:	a8ffff17 	ldw	r3,-4(r21)
 800d4a4:	b0c00715 	stw	r3,28(r22)
 800d4a8:	003fb006 	br	800d36c <_realloc_r+0x424>

0800d4ac <__fpclassifyd>:
 800d4ac:	00a00034 	movhi	r2,32768
 800d4b0:	10bfffc4 	addi	r2,r2,-1
 800d4b4:	2884703a 	and	r2,r5,r2
 800d4b8:	10000726 	beq	r2,zero,800d4d8 <__fpclassifyd+0x2c>
 800d4bc:	00fffc34 	movhi	r3,65520
 800d4c0:	019ff834 	movhi	r6,32736
 800d4c4:	28c7883a 	add	r3,r5,r3
 800d4c8:	31bfffc4 	addi	r6,r6,-1
 800d4cc:	30c00536 	bltu	r6,r3,800d4e4 <__fpclassifyd+0x38>
 800d4d0:	00800104 	movi	r2,4
 800d4d4:	f800283a 	ret
 800d4d8:	2000021e 	bne	r4,zero,800d4e4 <__fpclassifyd+0x38>
 800d4dc:	00800084 	movi	r2,2
 800d4e0:	f800283a 	ret
 800d4e4:	00dffc34 	movhi	r3,32752
 800d4e8:	019ff834 	movhi	r6,32736
 800d4ec:	28cb883a 	add	r5,r5,r3
 800d4f0:	31bfffc4 	addi	r6,r6,-1
 800d4f4:	317ff62e 	bgeu	r6,r5,800d4d0 <__fpclassifyd+0x24>
 800d4f8:	01400434 	movhi	r5,16
 800d4fc:	297fffc4 	addi	r5,r5,-1
 800d500:	28800236 	bltu	r5,r2,800d50c <__fpclassifyd+0x60>
 800d504:	008000c4 	movi	r2,3
 800d508:	f800283a 	ret
 800d50c:	10c00226 	beq	r2,r3,800d518 <__fpclassifyd+0x6c>
 800d510:	0005883a 	mov	r2,zero
 800d514:	f800283a 	ret
 800d518:	2005003a 	cmpeq	r2,r4,zero
 800d51c:	f800283a 	ret

0800d520 <_sbrk_r>:
 800d520:	defffd04 	addi	sp,sp,-12
 800d524:	dc000015 	stw	r16,0(sp)
 800d528:	040200b4 	movhi	r16,2050
 800d52c:	dc400115 	stw	r17,4(sp)
 800d530:	84232a04 	addi	r16,r16,-29528
 800d534:	2023883a 	mov	r17,r4
 800d538:	2809883a 	mov	r4,r5
 800d53c:	dfc00215 	stw	ra,8(sp)
 800d540:	80000015 	stw	zero,0(r16)
 800d544:	8012dd80 	call	8012dd8 <sbrk>
 800d548:	00ffffc4 	movi	r3,-1
 800d54c:	10c00526 	beq	r2,r3,800d564 <_sbrk_r+0x44>
 800d550:	dfc00217 	ldw	ra,8(sp)
 800d554:	dc400117 	ldw	r17,4(sp)
 800d558:	dc000017 	ldw	r16,0(sp)
 800d55c:	dec00304 	addi	sp,sp,12
 800d560:	f800283a 	ret
 800d564:	80c00017 	ldw	r3,0(r16)
 800d568:	183ff926 	beq	r3,zero,800d550 <_sbrk_r+0x30>
 800d56c:	88c00015 	stw	r3,0(r17)
 800d570:	003ff706 	br	800d550 <_sbrk_r+0x30>

0800d574 <__sread>:
 800d574:	defffe04 	addi	sp,sp,-8
 800d578:	dc000015 	stw	r16,0(sp)
 800d57c:	2821883a 	mov	r16,r5
 800d580:	2940038f 	ldh	r5,14(r5)
 800d584:	dfc00115 	stw	ra,4(sp)
 800d588:	800f5880 	call	800f588 <_read_r>
 800d58c:	10000716 	blt	r2,zero,800d5ac <__sread+0x38>
 800d590:	80c01417 	ldw	r3,80(r16)
 800d594:	1887883a 	add	r3,r3,r2
 800d598:	80c01415 	stw	r3,80(r16)
 800d59c:	dfc00117 	ldw	ra,4(sp)
 800d5a0:	dc000017 	ldw	r16,0(sp)
 800d5a4:	dec00204 	addi	sp,sp,8
 800d5a8:	f800283a 	ret
 800d5ac:	80c0030b 	ldhu	r3,12(r16)
 800d5b0:	18fbffcc 	andi	r3,r3,61439
 800d5b4:	80c0030d 	sth	r3,12(r16)
 800d5b8:	dfc00117 	ldw	ra,4(sp)
 800d5bc:	dc000017 	ldw	r16,0(sp)
 800d5c0:	dec00204 	addi	sp,sp,8
 800d5c4:	f800283a 	ret

0800d5c8 <__seofread>:
 800d5c8:	0005883a 	mov	r2,zero
 800d5cc:	f800283a 	ret

0800d5d0 <__swrite>:
 800d5d0:	2880030b 	ldhu	r2,12(r5)
 800d5d4:	defffb04 	addi	sp,sp,-20
 800d5d8:	dcc00315 	stw	r19,12(sp)
 800d5dc:	dc800215 	stw	r18,8(sp)
 800d5e0:	dc400115 	stw	r17,4(sp)
 800d5e4:	dc000015 	stw	r16,0(sp)
 800d5e8:	dfc00415 	stw	ra,16(sp)
 800d5ec:	10c0400c 	andi	r3,r2,256
 800d5f0:	2821883a 	mov	r16,r5
 800d5f4:	2023883a 	mov	r17,r4
 800d5f8:	3025883a 	mov	r18,r6
 800d5fc:	3827883a 	mov	r19,r7
 800d600:	18000526 	beq	r3,zero,800d618 <__swrite+0x48>
 800d604:	2940038f 	ldh	r5,14(r5)
 800d608:	01c00084 	movi	r7,2
 800d60c:	000d883a 	mov	r6,zero
 800d610:	800f5280 	call	800f528 <_lseek_r>
 800d614:	8080030b 	ldhu	r2,12(r16)
 800d618:	8140038f 	ldh	r5,14(r16)
 800d61c:	10bbffcc 	andi	r2,r2,61439
 800d620:	980f883a 	mov	r7,r19
 800d624:	900d883a 	mov	r6,r18
 800d628:	8809883a 	mov	r4,r17
 800d62c:	8080030d 	sth	r2,12(r16)
 800d630:	dfc00417 	ldw	ra,16(sp)
 800d634:	dcc00317 	ldw	r19,12(sp)
 800d638:	dc800217 	ldw	r18,8(sp)
 800d63c:	dc400117 	ldw	r17,4(sp)
 800d640:	dc000017 	ldw	r16,0(sp)
 800d644:	dec00504 	addi	sp,sp,20
 800d648:	800efdc1 	jmpi	800efdc <_write_r>

0800d64c <__sseek>:
 800d64c:	defffe04 	addi	sp,sp,-8
 800d650:	dc000015 	stw	r16,0(sp)
 800d654:	2821883a 	mov	r16,r5
 800d658:	2940038f 	ldh	r5,14(r5)
 800d65c:	dfc00115 	stw	ra,4(sp)
 800d660:	800f5280 	call	800f528 <_lseek_r>
 800d664:	00ffffc4 	movi	r3,-1
 800d668:	10c00826 	beq	r2,r3,800d68c <__sseek+0x40>
 800d66c:	80c0030b 	ldhu	r3,12(r16)
 800d670:	80801415 	stw	r2,80(r16)
 800d674:	18c40014 	ori	r3,r3,4096
 800d678:	80c0030d 	sth	r3,12(r16)
 800d67c:	dfc00117 	ldw	ra,4(sp)
 800d680:	dc000017 	ldw	r16,0(sp)
 800d684:	dec00204 	addi	sp,sp,8
 800d688:	f800283a 	ret
 800d68c:	80c0030b 	ldhu	r3,12(r16)
 800d690:	18fbffcc 	andi	r3,r3,61439
 800d694:	80c0030d 	sth	r3,12(r16)
 800d698:	dfc00117 	ldw	ra,4(sp)
 800d69c:	dc000017 	ldw	r16,0(sp)
 800d6a0:	dec00204 	addi	sp,sp,8
 800d6a4:	f800283a 	ret

0800d6a8 <__sclose>:
 800d6a8:	2940038f 	ldh	r5,14(r5)
 800d6ac:	800f03c1 	jmpi	800f03c <_close_r>

0800d6b0 <strcmp>:
 800d6b0:	2144b03a 	or	r2,r4,r5
 800d6b4:	108000cc 	andi	r2,r2,3
 800d6b8:	1000171e 	bne	r2,zero,800d718 <strcmp+0x68>
 800d6bc:	20800017 	ldw	r2,0(r4)
 800d6c0:	28c00017 	ldw	r3,0(r5)
 800d6c4:	10c0141e 	bne	r2,r3,800d718 <strcmp+0x68>
 800d6c8:	027fbff4 	movhi	r9,65279
 800d6cc:	4a7fbfc4 	addi	r9,r9,-257
 800d6d0:	0086303a 	nor	r3,zero,r2
 800d6d4:	02202074 	movhi	r8,32897
 800d6d8:	1245883a 	add	r2,r2,r9
 800d6dc:	42202004 	addi	r8,r8,-32640
 800d6e0:	10c4703a 	and	r2,r2,r3
 800d6e4:	1204703a 	and	r2,r2,r8
 800d6e8:	10000226 	beq	r2,zero,800d6f4 <strcmp+0x44>
 800d6ec:	00002306 	br	800d77c <strcmp+0xcc>
 800d6f0:	1000221e 	bne	r2,zero,800d77c <strcmp+0xcc>
 800d6f4:	21000104 	addi	r4,r4,4
 800d6f8:	20c00017 	ldw	r3,0(r4)
 800d6fc:	29400104 	addi	r5,r5,4
 800d700:	29800017 	ldw	r6,0(r5)
 800d704:	1a4f883a 	add	r7,r3,r9
 800d708:	00c4303a 	nor	r2,zero,r3
 800d70c:	3884703a 	and	r2,r7,r2
 800d710:	1204703a 	and	r2,r2,r8
 800d714:	19bff626 	beq	r3,r6,800d6f0 <strcmp+0x40>
 800d718:	20800003 	ldbu	r2,0(r4)
 800d71c:	10c03fcc 	andi	r3,r2,255
 800d720:	18c0201c 	xori	r3,r3,128
 800d724:	18ffe004 	addi	r3,r3,-128
 800d728:	18000c26 	beq	r3,zero,800d75c <strcmp+0xac>
 800d72c:	29800007 	ldb	r6,0(r5)
 800d730:	19800326 	beq	r3,r6,800d740 <strcmp+0x90>
 800d734:	00001306 	br	800d784 <strcmp+0xd4>
 800d738:	29800007 	ldb	r6,0(r5)
 800d73c:	11800b1e 	bne	r2,r6,800d76c <strcmp+0xbc>
 800d740:	21000044 	addi	r4,r4,1
 800d744:	20c00003 	ldbu	r3,0(r4)
 800d748:	29400044 	addi	r5,r5,1
 800d74c:	18803fcc 	andi	r2,r3,255
 800d750:	1080201c 	xori	r2,r2,128
 800d754:	10bfe004 	addi	r2,r2,-128
 800d758:	103ff71e 	bne	r2,zero,800d738 <strcmp+0x88>
 800d75c:	0007883a 	mov	r3,zero
 800d760:	28800003 	ldbu	r2,0(r5)
 800d764:	1885c83a 	sub	r2,r3,r2
 800d768:	f800283a 	ret
 800d76c:	28800003 	ldbu	r2,0(r5)
 800d770:	18c03fcc 	andi	r3,r3,255
 800d774:	1885c83a 	sub	r2,r3,r2
 800d778:	f800283a 	ret
 800d77c:	0005883a 	mov	r2,zero
 800d780:	f800283a 	ret
 800d784:	10c03fcc 	andi	r3,r2,255
 800d788:	003ff506 	br	800d760 <strcmp+0xb0>

0800d78c <__sprint_r.part.0>:
 800d78c:	28801917 	ldw	r2,100(r5)
 800d790:	defff604 	addi	sp,sp,-40
 800d794:	dd400515 	stw	r21,20(sp)
 800d798:	dfc00915 	stw	ra,36(sp)
 800d79c:	df000815 	stw	fp,32(sp)
 800d7a0:	ddc00715 	stw	r23,28(sp)
 800d7a4:	dd800615 	stw	r22,24(sp)
 800d7a8:	dd000415 	stw	r20,16(sp)
 800d7ac:	dcc00315 	stw	r19,12(sp)
 800d7b0:	dc800215 	stw	r18,8(sp)
 800d7b4:	dc400115 	stw	r17,4(sp)
 800d7b8:	dc000015 	stw	r16,0(sp)
 800d7bc:	1088000c 	andi	r2,r2,8192
 800d7c0:	302b883a 	mov	r21,r6
 800d7c4:	10002e26 	beq	r2,zero,800d880 <__sprint_r.part.0+0xf4>
 800d7c8:	30800217 	ldw	r2,8(r6)
 800d7cc:	35800017 	ldw	r22,0(r6)
 800d7d0:	10002926 	beq	r2,zero,800d878 <__sprint_r.part.0+0xec>
 800d7d4:	2827883a 	mov	r19,r5
 800d7d8:	2029883a 	mov	r20,r4
 800d7dc:	b5c00104 	addi	r23,r22,4
 800d7e0:	04bfffc4 	movi	r18,-1
 800d7e4:	bc400017 	ldw	r17,0(r23)
 800d7e8:	b4000017 	ldw	r16,0(r22)
 800d7ec:	0039883a 	mov	fp,zero
 800d7f0:	8822d0ba 	srli	r17,r17,2
 800d7f4:	8800031e 	bne	r17,zero,800d804 <__sprint_r.part.0+0x78>
 800d7f8:	00001806 	br	800d85c <__sprint_r.part.0+0xd0>
 800d7fc:	84000104 	addi	r16,r16,4
 800d800:	8f001526 	beq	r17,fp,800d858 <__sprint_r.part.0+0xcc>
 800d804:	81400017 	ldw	r5,0(r16)
 800d808:	980d883a 	mov	r6,r19
 800d80c:	a009883a 	mov	r4,r20
 800d810:	800f3d40 	call	800f3d4 <_fputwc_r>
 800d814:	e7000044 	addi	fp,fp,1
 800d818:	14bff81e 	bne	r2,r18,800d7fc <__sprint_r.part.0+0x70>
 800d81c:	9005883a 	mov	r2,r18
 800d820:	a8000215 	stw	zero,8(r21)
 800d824:	a8000115 	stw	zero,4(r21)
 800d828:	dfc00917 	ldw	ra,36(sp)
 800d82c:	df000817 	ldw	fp,32(sp)
 800d830:	ddc00717 	ldw	r23,28(sp)
 800d834:	dd800617 	ldw	r22,24(sp)
 800d838:	dd400517 	ldw	r21,20(sp)
 800d83c:	dd000417 	ldw	r20,16(sp)
 800d840:	dcc00317 	ldw	r19,12(sp)
 800d844:	dc800217 	ldw	r18,8(sp)
 800d848:	dc400117 	ldw	r17,4(sp)
 800d84c:	dc000017 	ldw	r16,0(sp)
 800d850:	dec00a04 	addi	sp,sp,40
 800d854:	f800283a 	ret
 800d858:	a8800217 	ldw	r2,8(r21)
 800d85c:	8c63883a 	add	r17,r17,r17
 800d860:	8c63883a 	add	r17,r17,r17
 800d864:	1445c83a 	sub	r2,r2,r17
 800d868:	a8800215 	stw	r2,8(r21)
 800d86c:	b5800204 	addi	r22,r22,8
 800d870:	bdc00204 	addi	r23,r23,8
 800d874:	103fdb1e 	bne	r2,zero,800d7e4 <__sprint_r.part.0+0x58>
 800d878:	0005883a 	mov	r2,zero
 800d87c:	003fe806 	br	800d820 <__sprint_r.part.0+0x94>
 800d880:	800a9980 	call	800a998 <__sfvwrite_r>
 800d884:	003fe606 	br	800d820 <__sprint_r.part.0+0x94>

0800d888 <__sprint_r>:
 800d888:	30c00217 	ldw	r3,8(r6)
 800d88c:	18000126 	beq	r3,zero,800d894 <__sprint_r+0xc>
 800d890:	800d78c1 	jmpi	800d78c <__sprint_r.part.0>
 800d894:	30000115 	stw	zero,4(r6)
 800d898:	0005883a 	mov	r2,zero
 800d89c:	f800283a 	ret

0800d8a0 <___vfiprintf_internal_r>:
 800d8a0:	deffca04 	addi	sp,sp,-216
 800d8a4:	dd403115 	stw	r21,196(sp)
 800d8a8:	dfc03515 	stw	ra,212(sp)
 800d8ac:	df003415 	stw	fp,208(sp)
 800d8b0:	ddc03315 	stw	r23,204(sp)
 800d8b4:	dd803215 	stw	r22,200(sp)
 800d8b8:	dd003015 	stw	r20,192(sp)
 800d8bc:	dcc02f15 	stw	r19,188(sp)
 800d8c0:	dc802e15 	stw	r18,184(sp)
 800d8c4:	dc402d15 	stw	r17,180(sp)
 800d8c8:	dc002c15 	stw	r16,176(sp)
 800d8cc:	d9002115 	stw	r4,132(sp)
 800d8d0:	d9402015 	stw	r5,128(sp)
 800d8d4:	d9c02215 	stw	r7,136(sp)
 800d8d8:	302b883a 	mov	r21,r6
 800d8dc:	20000226 	beq	r4,zero,800d8e8 <___vfiprintf_internal_r+0x48>
 800d8e0:	20800e17 	ldw	r2,56(r4)
 800d8e4:	1000cf26 	beq	r2,zero,800dc24 <___vfiprintf_internal_r+0x384>
 800d8e8:	d8c02017 	ldw	r3,128(sp)
 800d8ec:	1880030b 	ldhu	r2,12(r3)
 800d8f0:	10c8000c 	andi	r3,r2,8192
 800d8f4:	1800071e 	bne	r3,zero,800d914 <___vfiprintf_internal_r+0x74>
 800d8f8:	d9402017 	ldw	r5,128(sp)
 800d8fc:	00f7ffc4 	movi	r3,-8193
 800d900:	10880014 	ori	r2,r2,8192
 800d904:	29001917 	ldw	r4,100(r5)
 800d908:	2880030d 	sth	r2,12(r5)
 800d90c:	20c6703a 	and	r3,r4,r3
 800d910:	28c01915 	stw	r3,100(r5)
 800d914:	10c0020c 	andi	r3,r2,8
 800d918:	1800a526 	beq	r3,zero,800dbb0 <___vfiprintf_internal_r+0x310>
 800d91c:	d9002017 	ldw	r4,128(sp)
 800d920:	20c00417 	ldw	r3,16(r4)
 800d924:	1800a226 	beq	r3,zero,800dbb0 <___vfiprintf_internal_r+0x310>
 800d928:	1080068c 	andi	r2,r2,26
 800d92c:	00c00284 	movi	r3,10
 800d930:	10c0a826 	beq	r2,r3,800dbd4 <___vfiprintf_internal_r+0x334>
 800d934:	d9001a04 	addi	r4,sp,104
 800d938:	d94019c4 	addi	r5,sp,103
 800d93c:	04820074 	movhi	r18,2049
 800d940:	2145c83a 	sub	r2,r4,r5
 800d944:	94955504 	addi	r18,r18,21844
 800d948:	d9001e15 	stw	r4,120(sp)
 800d94c:	d9401f15 	stw	r5,124(sp)
 800d950:	dec01a15 	stw	sp,104(sp)
 800d954:	d8001c15 	stw	zero,112(sp)
 800d958:	d8001b15 	stw	zero,108(sp)
 800d95c:	d811883a 	mov	r8,sp
 800d960:	d8002615 	stw	zero,152(sp)
 800d964:	d8002415 	stw	zero,144(sp)
 800d968:	d8802815 	stw	r2,160(sp)
 800d96c:	a82d883a 	mov	r22,r21
 800d970:	b0800007 	ldb	r2,0(r22)
 800d974:	10040d26 	beq	r2,zero,800e9ac <___vfiprintf_internal_r+0x110c>
 800d978:	00c00944 	movi	r3,37
 800d97c:	b029883a 	mov	r20,r22
 800d980:	10c0021e 	bne	r2,r3,800d98c <___vfiprintf_internal_r+0xec>
 800d984:	00001606 	br	800d9e0 <___vfiprintf_internal_r+0x140>
 800d988:	10c00326 	beq	r2,r3,800d998 <___vfiprintf_internal_r+0xf8>
 800d98c:	a5000044 	addi	r20,r20,1
 800d990:	a0800007 	ldb	r2,0(r20)
 800d994:	103ffc1e 	bne	r2,zero,800d988 <___vfiprintf_internal_r+0xe8>
 800d998:	a5a1c83a 	sub	r16,r20,r22
 800d99c:	80001026 	beq	r16,zero,800d9e0 <___vfiprintf_internal_r+0x140>
 800d9a0:	d8c01c17 	ldw	r3,112(sp)
 800d9a4:	d8801b17 	ldw	r2,108(sp)
 800d9a8:	45800015 	stw	r22,0(r8)
 800d9ac:	80c7883a 	add	r3,r16,r3
 800d9b0:	10800044 	addi	r2,r2,1
 800d9b4:	44000115 	stw	r16,4(r8)
 800d9b8:	d8c01c15 	stw	r3,112(sp)
 800d9bc:	d8801b15 	stw	r2,108(sp)
 800d9c0:	010001c4 	movi	r4,7
 800d9c4:	2080750e 	bge	r4,r2,800db9c <___vfiprintf_internal_r+0x2fc>
 800d9c8:	1803951e 	bne	r3,zero,800e820 <___vfiprintf_internal_r+0xf80>
 800d9cc:	d8c02417 	ldw	r3,144(sp)
 800d9d0:	d8001b15 	stw	zero,108(sp)
 800d9d4:	d811883a 	mov	r8,sp
 800d9d8:	1c07883a 	add	r3,r3,r16
 800d9dc:	d8c02415 	stw	r3,144(sp)
 800d9e0:	a0800007 	ldb	r2,0(r20)
 800d9e4:	1002e026 	beq	r2,zero,800e568 <___vfiprintf_internal_r+0xcc8>
 800d9e8:	a5800044 	addi	r22,r20,1
 800d9ec:	a0c00047 	ldb	r3,1(r20)
 800d9f0:	d8001d85 	stb	zero,118(sp)
 800d9f4:	0027883a 	mov	r19,zero
 800d9f8:	d8002305 	stb	zero,140(sp)
 800d9fc:	043fffc4 	movi	r16,-1
 800da00:	d8002515 	stw	zero,148(sp)
 800da04:	0023883a 	mov	r17,zero
 800da08:	05001604 	movi	r20,88
 800da0c:	05400244 	movi	r21,9
 800da10:	402f883a 	mov	r23,r8
 800da14:	b5800044 	addi	r22,r22,1
 800da18:	18bff804 	addi	r2,r3,-32
 800da1c:	a0827736 	bltu	r20,r2,800e3fc <___vfiprintf_internal_r+0xb5c>
 800da20:	100490ba 	slli	r2,r2,2
 800da24:	01020074 	movhi	r4,2049
 800da28:	21368e04 	addi	r4,r4,-9672
 800da2c:	1105883a 	add	r2,r2,r4
 800da30:	10800017 	ldw	r2,0(r2)
 800da34:	1000683a 	jmp	r2
 800da38:	0800e0fc 	xorhi	zero,at,899
 800da3c:	0800e3fc 	xorhi	zero,at,911
 800da40:	0800e3fc 	xorhi	zero,at,911
 800da44:	0800e118 	cmpnei	zero,at,900
 800da48:	0800e3fc 	xorhi	zero,at,911
 800da4c:	0800e3fc 	xorhi	zero,at,911
 800da50:	0800e3fc 	xorhi	zero,at,911
 800da54:	0800e3fc 	xorhi	zero,at,911
 800da58:	0800e3fc 	xorhi	zero,at,911
 800da5c:	0800e3fc 	xorhi	zero,at,911
 800da60:	0800e320 	cmpeqi	zero,at,908
 800da64:	0800e344 	addi	zero,at,909
 800da68:	0800e3fc 	xorhi	zero,at,911
 800da6c:	0800dc3c 	xorhi	zero,at,880
 800da70:	0800e358 	cmpnei	zero,at,909
 800da74:	0800e3fc 	xorhi	zero,at,911
 800da78:	0800e124 	muli	zero,at,900
 800da7c:	0800e130 	cmpltui	zero,at,900
 800da80:	0800e130 	cmpltui	zero,at,900
 800da84:	0800e130 	cmpltui	zero,at,900
 800da88:	0800e130 	cmpltui	zero,at,900
 800da8c:	0800e130 	cmpltui	zero,at,900
 800da90:	0800e130 	cmpltui	zero,at,900
 800da94:	0800e130 	cmpltui	zero,at,900
 800da98:	0800e130 	cmpltui	zero,at,900
 800da9c:	0800e130 	cmpltui	zero,at,900
 800daa0:	0800e3fc 	xorhi	zero,at,911
 800daa4:	0800e3fc 	xorhi	zero,at,911
 800daa8:	0800e3fc 	xorhi	zero,at,911
 800daac:	0800e3fc 	xorhi	zero,at,911
 800dab0:	0800e3fc 	xorhi	zero,at,911
 800dab4:	0800e3fc 	xorhi	zero,at,911
 800dab8:	0800e3fc 	xorhi	zero,at,911
 800dabc:	0800e3fc 	xorhi	zero,at,911
 800dac0:	0800e3fc 	xorhi	zero,at,911
 800dac4:	0800e3fc 	xorhi	zero,at,911
 800dac8:	0800e170 	cmpltui	zero,at,901
 800dacc:	0800e3fc 	xorhi	zero,at,911
 800dad0:	0800e3fc 	xorhi	zero,at,911
 800dad4:	0800e3fc 	xorhi	zero,at,911
 800dad8:	0800e3fc 	xorhi	zero,at,911
 800dadc:	0800e3fc 	xorhi	zero,at,911
 800dae0:	0800e3fc 	xorhi	zero,at,911
 800dae4:	0800e3fc 	xorhi	zero,at,911
 800dae8:	0800e3fc 	xorhi	zero,at,911
 800daec:	0800e3fc 	xorhi	zero,at,911
 800daf0:	0800e3fc 	xorhi	zero,at,911
 800daf4:	0800e1ac 	andhi	zero,at,902
 800daf8:	0800e3fc 	xorhi	zero,at,911
 800dafc:	0800e3fc 	xorhi	zero,at,911
 800db00:	0800e3fc 	xorhi	zero,at,911
 800db04:	0800e3fc 	xorhi	zero,at,911
 800db08:	0800e3fc 	xorhi	zero,at,911
 800db0c:	0800e208 	cmpgei	zero,at,904
 800db10:	0800e3fc 	xorhi	zero,at,911
 800db14:	0800e3fc 	xorhi	zero,at,911
 800db18:	0800e27c 	xorhi	zero,at,905
 800db1c:	0800e3fc 	xorhi	zero,at,911
 800db20:	0800e3fc 	xorhi	zero,at,911
 800db24:	0800e3fc 	xorhi	zero,at,911
 800db28:	0800e3fc 	xorhi	zero,at,911
 800db2c:	0800e3fc 	xorhi	zero,at,911
 800db30:	0800e3fc 	xorhi	zero,at,911
 800db34:	0800e3fc 	xorhi	zero,at,911
 800db38:	0800e3fc 	xorhi	zero,at,911
 800db3c:	0800e3fc 	xorhi	zero,at,911
 800db40:	0800e3fc 	xorhi	zero,at,911
 800db44:	0800e024 	muli	zero,at,896
 800db48:	0800e054 	ori	zero,at,897
 800db4c:	0800e3fc 	xorhi	zero,at,911
 800db50:	0800e3fc 	xorhi	zero,at,911
 800db54:	0800e3fc 	xorhi	zero,at,911
 800db58:	0800e3a4 	muli	zero,at,910
 800db5c:	0800e054 	ori	zero,at,897
 800db60:	0800e3fc 	xorhi	zero,at,911
 800db64:	0800e3fc 	xorhi	zero,at,911
 800db68:	0800defc 	xorhi	zero,at,891
 800db6c:	0800e3fc 	xorhi	zero,at,911
 800db70:	0800df10 	cmplti	zero,at,892
 800db74:	0800df48 	cmpgei	zero,at,893
 800db78:	0800dc48 	cmpgei	zero,at,881
 800db7c:	0800def0 	cmpltui	zero,at,891
 800db80:	0800e3fc 	xorhi	zero,at,911
 800db84:	0800e2bc 	xorhi	zero,at,906
 800db88:	0800e3fc 	xorhi	zero,at,911
 800db8c:	0800e308 	cmpgei	zero,at,908
 800db90:	0800e3fc 	xorhi	zero,at,911
 800db94:	0800e3fc 	xorhi	zero,at,911
 800db98:	0800dfcc 	andi	zero,at,895
 800db9c:	42000204 	addi	r8,r8,8
 800dba0:	d8c02417 	ldw	r3,144(sp)
 800dba4:	1c07883a 	add	r3,r3,r16
 800dba8:	d8c02415 	stw	r3,144(sp)
 800dbac:	003f8c06 	br	800d9e0 <___vfiprintf_internal_r+0x140>
 800dbb0:	d9402017 	ldw	r5,128(sp)
 800dbb4:	d9002117 	ldw	r4,132(sp)
 800dbb8:	80085080 	call	8008508 <__swsetup_r>
 800dbbc:	1003c11e 	bne	r2,zero,800eac4 <___vfiprintf_internal_r+0x1224>
 800dbc0:	d9402017 	ldw	r5,128(sp)
 800dbc4:	00c00284 	movi	r3,10
 800dbc8:	2880030b 	ldhu	r2,12(r5)
 800dbcc:	1080068c 	andi	r2,r2,26
 800dbd0:	10ff581e 	bne	r2,r3,800d934 <___vfiprintf_internal_r+0x94>
 800dbd4:	d8c02017 	ldw	r3,128(sp)
 800dbd8:	1880038f 	ldh	r2,14(r3)
 800dbdc:	103f5516 	blt	r2,zero,800d934 <___vfiprintf_internal_r+0x94>
 800dbe0:	d9c02217 	ldw	r7,136(sp)
 800dbe4:	d9002117 	ldw	r4,132(sp)
 800dbe8:	a80d883a 	mov	r6,r21
 800dbec:	180b883a 	mov	r5,r3
 800dbf0:	800edc80 	call	800edc8 <__sbprintf>
 800dbf4:	dfc03517 	ldw	ra,212(sp)
 800dbf8:	df003417 	ldw	fp,208(sp)
 800dbfc:	ddc03317 	ldw	r23,204(sp)
 800dc00:	dd803217 	ldw	r22,200(sp)
 800dc04:	dd403117 	ldw	r21,196(sp)
 800dc08:	dd003017 	ldw	r20,192(sp)
 800dc0c:	dcc02f17 	ldw	r19,188(sp)
 800dc10:	dc802e17 	ldw	r18,184(sp)
 800dc14:	dc402d17 	ldw	r17,180(sp)
 800dc18:	dc002c17 	ldw	r16,176(sp)
 800dc1c:	dec03604 	addi	sp,sp,216
 800dc20:	f800283a 	ret
 800dc24:	800a5140 	call	800a514 <__sinit>
 800dc28:	003f2f06 	br	800d8e8 <___vfiprintf_internal_r+0x48>
 800dc2c:	d8c02517 	ldw	r3,148(sp)
 800dc30:	d8802215 	stw	r2,136(sp)
 800dc34:	00c7c83a 	sub	r3,zero,r3
 800dc38:	d8c02515 	stw	r3,148(sp)
 800dc3c:	8c400114 	ori	r17,r17,4
 800dc40:	b0c00007 	ldb	r3,0(r22)
 800dc44:	003f7306 	br	800da14 <___vfiprintf_internal_r+0x174>
 800dc48:	00800c04 	movi	r2,48
 800dc4c:	d9402217 	ldw	r5,136(sp)
 800dc50:	d8801d05 	stb	r2,116(sp)
 800dc54:	00801e04 	movi	r2,120
 800dc58:	d8801d45 	stb	r2,117(sp)
 800dc5c:	d8001d85 	stb	zero,118(sp)
 800dc60:	b811883a 	mov	r8,r23
 800dc64:	28c00104 	addi	r3,r5,4
 800dc68:	2cc00017 	ldw	r19,0(r5)
 800dc6c:	0029883a 	mov	r20,zero
 800dc70:	88800094 	ori	r2,r17,2
 800dc74:	80032516 	blt	r16,zero,800e90c <___vfiprintf_internal_r+0x106c>
 800dc78:	00bfdfc4 	movi	r2,-129
 800dc7c:	88a2703a 	and	r17,r17,r2
 800dc80:	d8c02215 	stw	r3,136(sp)
 800dc84:	8c400094 	ori	r17,r17,2
 800dc88:	98032a1e 	bne	r19,zero,800e934 <___vfiprintf_internal_r+0x1094>
 800dc8c:	00820074 	movhi	r2,2049
 800dc90:	1094f504 	addi	r2,r2,21460
 800dc94:	d8802615 	stw	r2,152(sp)
 800dc98:	002b883a 	mov	r21,zero
 800dc9c:	8001741e 	bne	r16,zero,800e270 <___vfiprintf_internal_r+0x9d0>
 800dca0:	0021883a 	mov	r16,zero
 800dca4:	0029883a 	mov	r20,zero
 800dca8:	ddc01a04 	addi	r23,sp,104
 800dcac:	8027883a 	mov	r19,r16
 800dcb0:	8500010e 	bge	r16,r20,800dcb8 <___vfiprintf_internal_r+0x418>
 800dcb4:	a027883a 	mov	r19,r20
 800dcb8:	ad403fcc 	andi	r21,r21,255
 800dcbc:	ad40201c 	xori	r21,r21,128
 800dcc0:	ad7fe004 	addi	r21,r21,-128
 800dcc4:	a8000126 	beq	r21,zero,800dccc <___vfiprintf_internal_r+0x42c>
 800dcc8:	9cc00044 	addi	r19,r19,1
 800dccc:	89c0008c 	andi	r7,r17,2
 800dcd0:	38000126 	beq	r7,zero,800dcd8 <___vfiprintf_internal_r+0x438>
 800dcd4:	9cc00084 	addi	r19,r19,2
 800dcd8:	88c0210c 	andi	r3,r17,132
 800dcdc:	1801dd1e 	bne	r3,zero,800e454 <___vfiprintf_internal_r+0xbb4>
 800dce0:	d9402517 	ldw	r5,148(sp)
 800dce4:	2cebc83a 	sub	r21,r5,r19
 800dce8:	0541da0e 	bge	zero,r21,800e454 <___vfiprintf_internal_r+0xbb4>
 800dcec:	07000404 	movi	fp,16
 800dcf0:	d8801c17 	ldw	r2,112(sp)
 800dcf4:	e543be0e 	bge	fp,r21,800ebf0 <___vfiprintf_internal_r+0x1350>
 800dcf8:	01420074 	movhi	r5,2049
 800dcfc:	29555904 	addi	r5,r5,21860
 800dd00:	dc002715 	stw	r16,156(sp)
 800dd04:	d9801b17 	ldw	r6,108(sp)
 800dd08:	a821883a 	mov	r16,r21
 800dd0c:	d9402315 	stw	r5,140(sp)
 800dd10:	028001c4 	movi	r10,7
 800dd14:	d9c02915 	stw	r7,164(sp)
 800dd18:	182b883a 	mov	r21,r3
 800dd1c:	00000506 	br	800dd34 <___vfiprintf_internal_r+0x494>
 800dd20:	31000084 	addi	r4,r6,2
 800dd24:	42000204 	addi	r8,r8,8
 800dd28:	180d883a 	mov	r6,r3
 800dd2c:	843ffc04 	addi	r16,r16,-16
 800dd30:	e4000f0e 	bge	fp,r16,800dd70 <___vfiprintf_internal_r+0x4d0>
 800dd34:	01020074 	movhi	r4,2049
 800dd38:	10800404 	addi	r2,r2,16
 800dd3c:	30c00044 	addi	r3,r6,1
 800dd40:	21155904 	addi	r4,r4,21860
 800dd44:	41000015 	stw	r4,0(r8)
 800dd48:	47000115 	stw	fp,4(r8)
 800dd4c:	d8801c15 	stw	r2,112(sp)
 800dd50:	d8c01b15 	stw	r3,108(sp)
 800dd54:	50fff20e 	bge	r10,r3,800dd20 <___vfiprintf_internal_r+0x480>
 800dd58:	1001b21e 	bne	r2,zero,800e424 <___vfiprintf_internal_r+0xb84>
 800dd5c:	843ffc04 	addi	r16,r16,-16
 800dd60:	000d883a 	mov	r6,zero
 800dd64:	01000044 	movi	r4,1
 800dd68:	d811883a 	mov	r8,sp
 800dd6c:	e43ff116 	blt	fp,r16,800dd34 <___vfiprintf_internal_r+0x494>
 800dd70:	a807883a 	mov	r3,r21
 800dd74:	d9c02917 	ldw	r7,164(sp)
 800dd78:	802b883a 	mov	r21,r16
 800dd7c:	dc002717 	ldw	r16,156(sp)
 800dd80:	d9402317 	ldw	r5,140(sp)
 800dd84:	a885883a 	add	r2,r21,r2
 800dd88:	45400115 	stw	r21,4(r8)
 800dd8c:	41400015 	stw	r5,0(r8)
 800dd90:	d8801c15 	stw	r2,112(sp)
 800dd94:	d9001b15 	stw	r4,108(sp)
 800dd98:	014001c4 	movi	r5,7
 800dd9c:	29026216 	blt	r5,r4,800e728 <___vfiprintf_internal_r+0xe88>
 800dda0:	d9801d87 	ldb	r6,118(sp)
 800dda4:	42000204 	addi	r8,r8,8
 800dda8:	21400044 	addi	r5,r4,1
 800ddac:	3001ae1e 	bne	r6,zero,800e468 <___vfiprintf_internal_r+0xbc8>
 800ddb0:	3801bb26 	beq	r7,zero,800e4a0 <___vfiprintf_internal_r+0xc00>
 800ddb4:	d9001d04 	addi	r4,sp,116
 800ddb8:	10800084 	addi	r2,r2,2
 800ddbc:	41000015 	stw	r4,0(r8)
 800ddc0:	01000084 	movi	r4,2
 800ddc4:	41000115 	stw	r4,4(r8)
 800ddc8:	d8801c15 	stw	r2,112(sp)
 800ddcc:	d9401b15 	stw	r5,108(sp)
 800ddd0:	010001c4 	movi	r4,7
 800ddd4:	2142680e 	bge	r4,r5,800e778 <___vfiprintf_internal_r+0xed8>
 800ddd8:	1002b11e 	bne	r2,zero,800e8a0 <___vfiprintf_internal_r+0x1000>
 800dddc:	01802004 	movi	r6,128
 800dde0:	01400044 	movi	r5,1
 800dde4:	0009883a 	mov	r4,zero
 800dde8:	d811883a 	mov	r8,sp
 800ddec:	1981ae1e 	bne	r3,r6,800e4a8 <___vfiprintf_internal_r+0xc08>
 800ddf0:	d8c02517 	ldw	r3,148(sp)
 800ddf4:	1cf9c83a 	sub	fp,r3,r19
 800ddf8:	0701ab0e 	bge	zero,fp,800e4a8 <___vfiprintf_internal_r+0xc08>
 800ddfc:	05400404 	movi	r21,16
 800de00:	af03a90e 	bge	r21,fp,800eca8 <___vfiprintf_internal_r+0x1408>
 800de04:	01420074 	movhi	r5,2049
 800de08:	29555504 	addi	r5,r5,21844
 800de0c:	d9402315 	stw	r5,140(sp)
 800de10:	01c001c4 	movi	r7,7
 800de14:	00000506 	br	800de2c <___vfiprintf_internal_r+0x58c>
 800de18:	21800084 	addi	r6,r4,2
 800de1c:	42000204 	addi	r8,r8,8
 800de20:	1809883a 	mov	r4,r3
 800de24:	e73ffc04 	addi	fp,fp,-16
 800de28:	af000d0e 	bge	r21,fp,800de60 <___vfiprintf_internal_r+0x5c0>
 800de2c:	10800404 	addi	r2,r2,16
 800de30:	20c00044 	addi	r3,r4,1
 800de34:	44800015 	stw	r18,0(r8)
 800de38:	45400115 	stw	r21,4(r8)
 800de3c:	d8801c15 	stw	r2,112(sp)
 800de40:	d8c01b15 	stw	r3,108(sp)
 800de44:	38fff40e 	bge	r7,r3,800de18 <___vfiprintf_internal_r+0x578>
 800de48:	10022b1e 	bne	r2,zero,800e6f8 <___vfiprintf_internal_r+0xe58>
 800de4c:	e73ffc04 	addi	fp,fp,-16
 800de50:	01800044 	movi	r6,1
 800de54:	0009883a 	mov	r4,zero
 800de58:	d811883a 	mov	r8,sp
 800de5c:	af3ff316 	blt	r21,fp,800de2c <___vfiprintf_internal_r+0x58c>
 800de60:	d8c02317 	ldw	r3,140(sp)
 800de64:	1705883a 	add	r2,r2,fp
 800de68:	47000115 	stw	fp,4(r8)
 800de6c:	40c00015 	stw	r3,0(r8)
 800de70:	d8801c15 	stw	r2,112(sp)
 800de74:	d9801b15 	stw	r6,108(sp)
 800de78:	00c001c4 	movi	r3,7
 800de7c:	19829416 	blt	r3,r6,800e8d0 <___vfiprintf_internal_r+0x1030>
 800de80:	8521c83a 	sub	r16,r16,r20
 800de84:	42000204 	addi	r8,r8,8
 800de88:	31400044 	addi	r5,r6,1
 800de8c:	3009883a 	mov	r4,r6
 800de90:	04018716 	blt	zero,r16,800e4b0 <___vfiprintf_internal_r+0xc10>
 800de94:	a085883a 	add	r2,r20,r2
 800de98:	45c00015 	stw	r23,0(r8)
 800de9c:	45000115 	stw	r20,4(r8)
 800dea0:	d8801c15 	stw	r2,112(sp)
 800dea4:	d9401b15 	stw	r5,108(sp)
 800dea8:	00c001c4 	movi	r3,7
 800deac:	1941c20e 	bge	r3,r5,800e5b8 <___vfiprintf_internal_r+0xd18>
 800deb0:	1002531e 	bne	r2,zero,800e800 <___vfiprintf_internal_r+0xf60>
 800deb4:	d8001b15 	stw	zero,108(sp)
 800deb8:	8c40010c 	andi	r17,r17,4
 800debc:	88023226 	beq	r17,zero,800e788 <___vfiprintf_internal_r+0xee8>
 800dec0:	d9002517 	ldw	r4,148(sp)
 800dec4:	24e3c83a 	sub	r17,r4,r19
 800dec8:	04432916 	blt	zero,r17,800eb70 <___vfiprintf_internal_r+0x12d0>
 800decc:	d8802517 	ldw	r2,148(sp)
 800ded0:	14c0010e 	bge	r2,r19,800ded8 <___vfiprintf_internal_r+0x638>
 800ded4:	9805883a 	mov	r2,r19
 800ded8:	d8c02417 	ldw	r3,144(sp)
 800dedc:	1887883a 	add	r3,r3,r2
 800dee0:	d8c02415 	stw	r3,144(sp)
 800dee4:	d8001b15 	stw	zero,108(sp)
 800dee8:	d811883a 	mov	r8,sp
 800deec:	003ea006 	br	800d970 <___vfiprintf_internal_r+0xd0>
 800def0:	8c400814 	ori	r17,r17,32
 800def4:	b0c00007 	ldb	r3,0(r22)
 800def8:	003ec606 	br	800da14 <___vfiprintf_internal_r+0x174>
 800defc:	b0c00007 	ldb	r3,0(r22)
 800df00:	00801b04 	movi	r2,108
 800df04:	18832026 	beq	r3,r2,800eb88 <___vfiprintf_internal_r+0x12e8>
 800df08:	8c400414 	ori	r17,r17,16
 800df0c:	003ec106 	br	800da14 <___vfiprintf_internal_r+0x174>
 800df10:	9cc03fcc 	andi	r19,r19,255
 800df14:	b811883a 	mov	r8,r23
 800df18:	9803981e 	bne	r19,zero,800ed7c <___vfiprintf_internal_r+0x14dc>
 800df1c:	8880080c 	andi	r2,r17,32
 800df20:	1002be26 	beq	r2,zero,800ea1c <___vfiprintf_internal_r+0x117c>
 800df24:	d9002217 	ldw	r4,136(sp)
 800df28:	d9402417 	ldw	r5,144(sp)
 800df2c:	20800017 	ldw	r2,0(r4)
 800df30:	2807d7fa 	srai	r3,r5,31
 800df34:	21000104 	addi	r4,r4,4
 800df38:	d9002215 	stw	r4,136(sp)
 800df3c:	11400015 	stw	r5,0(r2)
 800df40:	10c00115 	stw	r3,4(r2)
 800df44:	003e8a06 	br	800d970 <___vfiprintf_internal_r+0xd0>
 800df48:	9cc03fcc 	andi	r19,r19,255
 800df4c:	b811883a 	mov	r8,r23
 800df50:	9803871e 	bne	r19,zero,800ed70 <___vfiprintf_internal_r+0x14d0>
 800df54:	8880080c 	andi	r2,r17,32
 800df58:	10009a26 	beq	r2,zero,800e1c4 <___vfiprintf_internal_r+0x924>
 800df5c:	d9002217 	ldw	r4,136(sp)
 800df60:	d8001d85 	stb	zero,118(sp)
 800df64:	20800204 	addi	r2,r4,8
 800df68:	24c00017 	ldw	r19,0(r4)
 800df6c:	25000117 	ldw	r20,4(r4)
 800df70:	8002a416 	blt	r16,zero,800ea04 <___vfiprintf_internal_r+0x1164>
 800df74:	013fdfc4 	movi	r4,-129
 800df78:	9d06b03a 	or	r3,r19,r20
 800df7c:	d8802215 	stw	r2,136(sp)
 800df80:	8922703a 	and	r17,r17,r4
 800df84:	18009b26 	beq	r3,zero,800e1f4 <___vfiprintf_internal_r+0x954>
 800df88:	002b883a 	mov	r21,zero
 800df8c:	ddc01a04 	addi	r23,sp,104
 800df90:	9806d0fa 	srli	r3,r19,3
 800df94:	a008977a 	slli	r4,r20,29
 800df98:	a028d0fa 	srli	r20,r20,3
 800df9c:	9cc001cc 	andi	r19,r19,7
 800dfa0:	98800c04 	addi	r2,r19,48
 800dfa4:	bdffffc4 	addi	r23,r23,-1
 800dfa8:	20e6b03a 	or	r19,r4,r3
 800dfac:	b8800005 	stb	r2,0(r23)
 800dfb0:	9d06b03a 	or	r3,r19,r20
 800dfb4:	183ff61e 	bne	r3,zero,800df90 <___vfiprintf_internal_r+0x6f0>
 800dfb8:	88c0004c 	andi	r3,r17,1
 800dfbc:	18021f1e 	bne	r3,zero,800e83c <___vfiprintf_internal_r+0xf9c>
 800dfc0:	d9401e17 	ldw	r5,120(sp)
 800dfc4:	2de9c83a 	sub	r20,r5,r23
 800dfc8:	003f3806 	br	800dcac <___vfiprintf_internal_r+0x40c>
 800dfcc:	9cc03fcc 	andi	r19,r19,255
 800dfd0:	b811883a 	mov	r8,r23
 800dfd4:	98034f1e 	bne	r19,zero,800ed14 <___vfiprintf_internal_r+0x1474>
 800dfd8:	00820074 	movhi	r2,2049
 800dfdc:	1094f504 	addi	r2,r2,21460
 800dfe0:	d8802615 	stw	r2,152(sp)
 800dfe4:	8880080c 	andi	r2,r17,32
 800dfe8:	1000ac26 	beq	r2,zero,800e29c <___vfiprintf_internal_r+0x9fc>
 800dfec:	d9002217 	ldw	r4,136(sp)
 800dff0:	24c00017 	ldw	r19,0(r4)
 800dff4:	25000117 	ldw	r20,4(r4)
 800dff8:	21000204 	addi	r4,r4,8
 800dffc:	d9002215 	stw	r4,136(sp)
 800e000:	8880004c 	andi	r2,r17,1
 800e004:	1001e726 	beq	r2,zero,800e7a4 <___vfiprintf_internal_r+0xf04>
 800e008:	9d04b03a 	or	r2,r19,r20
 800e00c:	10025c1e 	bne	r2,zero,800e980 <___vfiprintf_internal_r+0x10e0>
 800e010:	d8001d85 	stb	zero,118(sp)
 800e014:	80024416 	blt	r16,zero,800e928 <___vfiprintf_internal_r+0x1088>
 800e018:	00bfdfc4 	movi	r2,-129
 800e01c:	88a2703a 	and	r17,r17,r2
 800e020:	003f1d06 	br	800dc98 <___vfiprintf_internal_r+0x3f8>
 800e024:	d8c02217 	ldw	r3,136(sp)
 800e028:	04c00044 	movi	r19,1
 800e02c:	b811883a 	mov	r8,r23
 800e030:	18800017 	ldw	r2,0(r3)
 800e034:	18c00104 	addi	r3,r3,4
 800e038:	d8001d85 	stb	zero,118(sp)
 800e03c:	d8801005 	stb	r2,64(sp)
 800e040:	d8c02215 	stw	r3,136(sp)
 800e044:	9829883a 	mov	r20,r19
 800e048:	ddc01004 	addi	r23,sp,64
 800e04c:	0021883a 	mov	r16,zero
 800e050:	003f1e06 	br	800dccc <___vfiprintf_internal_r+0x42c>
 800e054:	9cc03fcc 	andi	r19,r19,255
 800e058:	b811883a 	mov	r8,r23
 800e05c:	9803331e 	bne	r19,zero,800ed2c <___vfiprintf_internal_r+0x148c>
 800e060:	8880080c 	andi	r2,r17,32
 800e064:	10004826 	beq	r2,zero,800e188 <___vfiprintf_internal_r+0x8e8>
 800e068:	d9002217 	ldw	r4,136(sp)
 800e06c:	20800117 	ldw	r2,4(r4)
 800e070:	24c00017 	ldw	r19,0(r4)
 800e074:	21000204 	addi	r4,r4,8
 800e078:	d9002215 	stw	r4,136(sp)
 800e07c:	1029883a 	mov	r20,r2
 800e080:	10024c16 	blt	r2,zero,800e9b4 <___vfiprintf_internal_r+0x1114>
 800e084:	dd401d83 	ldbu	r21,118(sp)
 800e088:	80007116 	blt	r16,zero,800e250 <___vfiprintf_internal_r+0x9b0>
 800e08c:	00ffdfc4 	movi	r3,-129
 800e090:	9d04b03a 	or	r2,r19,r20
 800e094:	88e2703a 	and	r17,r17,r3
 800e098:	1000d126 	beq	r2,zero,800e3e0 <___vfiprintf_internal_r+0xb40>
 800e09c:	a0023526 	beq	r20,zero,800e974 <___vfiprintf_internal_r+0x10d4>
 800e0a0:	ddc01a04 	addi	r23,sp,104
 800e0a4:	4039883a 	mov	fp,r8
 800e0a8:	9809883a 	mov	r4,r19
 800e0ac:	a00b883a 	mov	r5,r20
 800e0b0:	01800284 	movi	r6,10
 800e0b4:	000f883a 	mov	r7,zero
 800e0b8:	800fdcc0 	call	800fdcc <__umoddi3>
 800e0bc:	10800c04 	addi	r2,r2,48
 800e0c0:	bdffffc4 	addi	r23,r23,-1
 800e0c4:	9809883a 	mov	r4,r19
 800e0c8:	a00b883a 	mov	r5,r20
 800e0cc:	b8800005 	stb	r2,0(r23)
 800e0d0:	01800284 	movi	r6,10
 800e0d4:	000f883a 	mov	r7,zero
 800e0d8:	800f7d00 	call	800f7d0 <__udivdi3>
 800e0dc:	1027883a 	mov	r19,r2
 800e0e0:	10c4b03a 	or	r2,r2,r3
 800e0e4:	1829883a 	mov	r20,r3
 800e0e8:	103fef1e 	bne	r2,zero,800e0a8 <___vfiprintf_internal_r+0x808>
 800e0ec:	d9001e17 	ldw	r4,120(sp)
 800e0f0:	e011883a 	mov	r8,fp
 800e0f4:	25e9c83a 	sub	r20,r4,r23
 800e0f8:	003eec06 	br	800dcac <___vfiprintf_internal_r+0x40c>
 800e0fc:	d8802307 	ldb	r2,140(sp)
 800e100:	1002361e 	bne	r2,zero,800e9dc <___vfiprintf_internal_r+0x113c>
 800e104:	00c00804 	movi	r3,32
 800e108:	d8c02305 	stb	r3,140(sp)
 800e10c:	04c00044 	movi	r19,1
 800e110:	b0c00007 	ldb	r3,0(r22)
 800e114:	003e3f06 	br	800da14 <___vfiprintf_internal_r+0x174>
 800e118:	8c400054 	ori	r17,r17,1
 800e11c:	b0c00007 	ldb	r3,0(r22)
 800e120:	003e3c06 	br	800da14 <___vfiprintf_internal_r+0x174>
 800e124:	8c402014 	ori	r17,r17,128
 800e128:	b0c00007 	ldb	r3,0(r22)
 800e12c:	003e3906 	br	800da14 <___vfiprintf_internal_r+0x174>
 800e130:	dc002715 	stw	r16,156(sp)
 800e134:	d8002515 	stw	zero,148(sp)
 800e138:	1f3ff404 	addi	fp,r3,-48
 800e13c:	0009883a 	mov	r4,zero
 800e140:	b021883a 	mov	r16,r22
 800e144:	01400284 	movi	r5,10
 800e148:	80050200 	call	8005020 <__mulsi3>
 800e14c:	80c00007 	ldb	r3,0(r16)
 800e150:	e089883a 	add	r4,fp,r2
 800e154:	b5800044 	addi	r22,r22,1
 800e158:	1f3ff404 	addi	fp,r3,-48
 800e15c:	b021883a 	mov	r16,r22
 800e160:	af3ff82e 	bgeu	r21,fp,800e144 <___vfiprintf_internal_r+0x8a4>
 800e164:	d9002515 	stw	r4,148(sp)
 800e168:	dc002717 	ldw	r16,156(sp)
 800e16c:	003e2a06 	br	800da18 <___vfiprintf_internal_r+0x178>
 800e170:	9cc03fcc 	andi	r19,r19,255
 800e174:	b811883a 	mov	r8,r23
 800e178:	9802e91e 	bne	r19,zero,800ed20 <___vfiprintf_internal_r+0x1480>
 800e17c:	8c400414 	ori	r17,r17,16
 800e180:	8880080c 	andi	r2,r17,32
 800e184:	103fb81e 	bne	r2,zero,800e068 <___vfiprintf_internal_r+0x7c8>
 800e188:	8880040c 	andi	r2,r17,16
 800e18c:	10022e26 	beq	r2,zero,800ea48 <___vfiprintf_internal_r+0x11a8>
 800e190:	d9402217 	ldw	r5,136(sp)
 800e194:	2cc00017 	ldw	r19,0(r5)
 800e198:	29400104 	addi	r5,r5,4
 800e19c:	d9402215 	stw	r5,136(sp)
 800e1a0:	9829d7fa 	srai	r20,r19,31
 800e1a4:	a005883a 	mov	r2,r20
 800e1a8:	003fb506 	br	800e080 <___vfiprintf_internal_r+0x7e0>
 800e1ac:	9cc03fcc 	andi	r19,r19,255
 800e1b0:	b811883a 	mov	r8,r23
 800e1b4:	9802fa1e 	bne	r19,zero,800eda0 <___vfiprintf_internal_r+0x1500>
 800e1b8:	8c400414 	ori	r17,r17,16
 800e1bc:	8880080c 	andi	r2,r17,32
 800e1c0:	103f661e 	bne	r2,zero,800df5c <___vfiprintf_internal_r+0x6bc>
 800e1c4:	8880040c 	andi	r2,r17,16
 800e1c8:	10020626 	beq	r2,zero,800e9e4 <___vfiprintf_internal_r+0x1144>
 800e1cc:	d9402217 	ldw	r5,136(sp)
 800e1d0:	d8001d85 	stb	zero,118(sp)
 800e1d4:	0029883a 	mov	r20,zero
 800e1d8:	28800104 	addi	r2,r5,4
 800e1dc:	2cc00017 	ldw	r19,0(r5)
 800e1e0:	80020816 	blt	r16,zero,800ea04 <___vfiprintf_internal_r+0x1164>
 800e1e4:	00ffdfc4 	movi	r3,-129
 800e1e8:	d8802215 	stw	r2,136(sp)
 800e1ec:	88e2703a 	and	r17,r17,r3
 800e1f0:	983f651e 	bne	r19,zero,800df88 <___vfiprintf_internal_r+0x6e8>
 800e1f4:	002b883a 	mov	r21,zero
 800e1f8:	8002cf26 	beq	r16,zero,800ed38 <___vfiprintf_internal_r+0x1498>
 800e1fc:	0027883a 	mov	r19,zero
 800e200:	0029883a 	mov	r20,zero
 800e204:	003f6106 	br	800df8c <___vfiprintf_internal_r+0x6ec>
 800e208:	9cc03fcc 	andi	r19,r19,255
 800e20c:	b811883a 	mov	r8,r23
 800e210:	9802e01e 	bne	r19,zero,800ed94 <___vfiprintf_internal_r+0x14f4>
 800e214:	8c400414 	ori	r17,r17,16
 800e218:	8880080c 	andi	r2,r17,32
 800e21c:	1000641e 	bne	r2,zero,800e3b0 <___vfiprintf_internal_r+0xb10>
 800e220:	8880040c 	andi	r2,r17,16
 800e224:	1001c81e 	bne	r2,zero,800e948 <___vfiprintf_internal_r+0x10a8>
 800e228:	8880100c 	andi	r2,r17,64
 800e22c:	d8001d85 	stb	zero,118(sp)
 800e230:	1002281e 	bne	r2,zero,800ead4 <___vfiprintf_internal_r+0x1234>
 800e234:	d9002217 	ldw	r4,136(sp)
 800e238:	0029883a 	mov	r20,zero
 800e23c:	20800104 	addi	r2,r4,4
 800e240:	24c00017 	ldw	r19,0(r4)
 800e244:	8001c60e 	bge	r16,zero,800e960 <___vfiprintf_internal_r+0x10c0>
 800e248:	d8802215 	stw	r2,136(sp)
 800e24c:	002b883a 	mov	r21,zero
 800e250:	9d04b03a 	or	r2,r19,r20
 800e254:	103f911e 	bne	r2,zero,800e09c <___vfiprintf_internal_r+0x7fc>
 800e258:	00800044 	movi	r2,1
 800e25c:	10803fcc 	andi	r2,r2,255
 800e260:	00c00044 	movi	r3,1
 800e264:	10c05f26 	beq	r2,r3,800e3e4 <___vfiprintf_internal_r+0xb44>
 800e268:	00c00084 	movi	r3,2
 800e26c:	10ffe31e 	bne	r2,r3,800e1fc <___vfiprintf_internal_r+0x95c>
 800e270:	0027883a 	mov	r19,zero
 800e274:	0029883a 	mov	r20,zero
 800e278:	00015106 	br	800e7c0 <___vfiprintf_internal_r+0xf20>
 800e27c:	9cc03fcc 	andi	r19,r19,255
 800e280:	b811883a 	mov	r8,r23
 800e284:	9802c01e 	bne	r19,zero,800ed88 <___vfiprintf_internal_r+0x14e8>
 800e288:	01420074 	movhi	r5,2049
 800e28c:	2954f004 	addi	r5,r5,21440
 800e290:	d9402615 	stw	r5,152(sp)
 800e294:	8880080c 	andi	r2,r17,32
 800e298:	103f541e 	bne	r2,zero,800dfec <___vfiprintf_internal_r+0x74c>
 800e29c:	8880040c 	andi	r2,r17,16
 800e2a0:	1001f226 	beq	r2,zero,800ea6c <___vfiprintf_internal_r+0x11cc>
 800e2a4:	d9402217 	ldw	r5,136(sp)
 800e2a8:	0029883a 	mov	r20,zero
 800e2ac:	2cc00017 	ldw	r19,0(r5)
 800e2b0:	29400104 	addi	r5,r5,4
 800e2b4:	d9402215 	stw	r5,136(sp)
 800e2b8:	003f5106 	br	800e000 <___vfiprintf_internal_r+0x760>
 800e2bc:	d8c02217 	ldw	r3,136(sp)
 800e2c0:	b811883a 	mov	r8,r23
 800e2c4:	d8001d85 	stb	zero,118(sp)
 800e2c8:	1dc00017 	ldw	r23,0(r3)
 800e2cc:	1f000104 	addi	fp,r3,4
 800e2d0:	b8025926 	beq	r23,zero,800ec38 <___vfiprintf_internal_r+0x1398>
 800e2d4:	80023316 	blt	r16,zero,800eba4 <___vfiprintf_internal_r+0x1304>
 800e2d8:	800d883a 	mov	r6,r16
 800e2dc:	000b883a 	mov	r5,zero
 800e2e0:	b809883a 	mov	r4,r23
 800e2e4:	da002a15 	stw	r8,168(sp)
 800e2e8:	800bae80 	call	800bae8 <memchr>
 800e2ec:	da002a17 	ldw	r8,168(sp)
 800e2f0:	10026826 	beq	r2,zero,800ec94 <___vfiprintf_internal_r+0x13f4>
 800e2f4:	15e9c83a 	sub	r20,r2,r23
 800e2f8:	dd401d83 	ldbu	r21,118(sp)
 800e2fc:	df002215 	stw	fp,136(sp)
 800e300:	0021883a 	mov	r16,zero
 800e304:	003e6906 	br	800dcac <___vfiprintf_internal_r+0x40c>
 800e308:	9cc03fcc 	andi	r19,r19,255
 800e30c:	b811883a 	mov	r8,r23
 800e310:	983fc126 	beq	r19,zero,800e218 <___vfiprintf_internal_r+0x978>
 800e314:	d8c02303 	ldbu	r3,140(sp)
 800e318:	d8c01d85 	stb	r3,118(sp)
 800e31c:	003fbe06 	br	800e218 <___vfiprintf_internal_r+0x978>
 800e320:	d9002217 	ldw	r4,136(sp)
 800e324:	d9402217 	ldw	r5,136(sp)
 800e328:	21000017 	ldw	r4,0(r4)
 800e32c:	28800104 	addi	r2,r5,4
 800e330:	d9002515 	stw	r4,148(sp)
 800e334:	203e3d16 	blt	r4,zero,800dc2c <___vfiprintf_internal_r+0x38c>
 800e338:	d8802215 	stw	r2,136(sp)
 800e33c:	b0c00007 	ldb	r3,0(r22)
 800e340:	003db406 	br	800da14 <___vfiprintf_internal_r+0x174>
 800e344:	00c00ac4 	movi	r3,43
 800e348:	d8c02305 	stb	r3,140(sp)
 800e34c:	04c00044 	movi	r19,1
 800e350:	b0c00007 	ldb	r3,0(r22)
 800e354:	003daf06 	br	800da14 <___vfiprintf_internal_r+0x174>
 800e358:	b0c00007 	ldb	r3,0(r22)
 800e35c:	01000a84 	movi	r4,42
 800e360:	b4000044 	addi	r16,r22,1
 800e364:	19025e26 	beq	r3,r4,800ece0 <___vfiprintf_internal_r+0x1440>
 800e368:	1f3ff404 	addi	fp,r3,-48
 800e36c:	0009883a 	mov	r4,zero
 800e370:	af025236 	bltu	r21,fp,800ecbc <___vfiprintf_internal_r+0x141c>
 800e374:	01400284 	movi	r5,10
 800e378:	80050200 	call	8005020 <__mulsi3>
 800e37c:	80c00007 	ldb	r3,0(r16)
 800e380:	1709883a 	add	r4,r2,fp
 800e384:	85800044 	addi	r22,r16,1
 800e388:	1f3ff404 	addi	fp,r3,-48
 800e38c:	b021883a 	mov	r16,r22
 800e390:	af3ff82e 	bgeu	r21,fp,800e374 <___vfiprintf_internal_r+0xad4>
 800e394:	2021883a 	mov	r16,r4
 800e398:	203d9f0e 	bge	r4,zero,800da18 <___vfiprintf_internal_r+0x178>
 800e39c:	043fffc4 	movi	r16,-1
 800e3a0:	003d9d06 	br	800da18 <___vfiprintf_internal_r+0x178>
 800e3a4:	8c401014 	ori	r17,r17,64
 800e3a8:	b0c00007 	ldb	r3,0(r22)
 800e3ac:	003d9906 	br	800da14 <___vfiprintf_internal_r+0x174>
 800e3b0:	d9002217 	ldw	r4,136(sp)
 800e3b4:	d8001d85 	stb	zero,118(sp)
 800e3b8:	20c00204 	addi	r3,r4,8
 800e3bc:	24c00017 	ldw	r19,0(r4)
 800e3c0:	25000117 	ldw	r20,4(r4)
 800e3c4:	8001e716 	blt	r16,zero,800eb64 <___vfiprintf_internal_r+0x12c4>
 800e3c8:	013fdfc4 	movi	r4,-129
 800e3cc:	9d04b03a 	or	r2,r19,r20
 800e3d0:	d8c02215 	stw	r3,136(sp)
 800e3d4:	8922703a 	and	r17,r17,r4
 800e3d8:	002b883a 	mov	r21,zero
 800e3dc:	103f2f1e 	bne	r2,zero,800e09c <___vfiprintf_internal_r+0x7fc>
 800e3e0:	803e2f26 	beq	r16,zero,800dca0 <___vfiprintf_internal_r+0x400>
 800e3e4:	0027883a 	mov	r19,zero
 800e3e8:	9cc00c04 	addi	r19,r19,48
 800e3ec:	dcc019c5 	stb	r19,103(sp)
 800e3f0:	dd002817 	ldw	r20,160(sp)
 800e3f4:	ddc019c4 	addi	r23,sp,103
 800e3f8:	003e2c06 	br	800dcac <___vfiprintf_internal_r+0x40c>
 800e3fc:	9cc03fcc 	andi	r19,r19,255
 800e400:	b811883a 	mov	r8,r23
 800e404:	9802571e 	bne	r19,zero,800ed64 <___vfiprintf_internal_r+0x14c4>
 800e408:	18005726 	beq	r3,zero,800e568 <___vfiprintf_internal_r+0xcc8>
 800e40c:	04c00044 	movi	r19,1
 800e410:	d8c01005 	stb	r3,64(sp)
 800e414:	d8001d85 	stb	zero,118(sp)
 800e418:	9829883a 	mov	r20,r19
 800e41c:	ddc01004 	addi	r23,sp,64
 800e420:	003f0a06 	br	800e04c <___vfiprintf_internal_r+0x7ac>
 800e424:	d9402017 	ldw	r5,128(sp)
 800e428:	d9002117 	ldw	r4,132(sp)
 800e42c:	d9801a04 	addi	r6,sp,104
 800e430:	da802a15 	stw	r10,168(sp)
 800e434:	800d78c0 	call	800d78c <__sprint_r.part.0>
 800e438:	da802a17 	ldw	r10,168(sp)
 800e43c:	1000501e 	bne	r2,zero,800e580 <___vfiprintf_internal_r+0xce0>
 800e440:	d9801b17 	ldw	r6,108(sp)
 800e444:	d8801c17 	ldw	r2,112(sp)
 800e448:	d811883a 	mov	r8,sp
 800e44c:	31000044 	addi	r4,r6,1
 800e450:	003e3606 	br	800dd2c <___vfiprintf_internal_r+0x48c>
 800e454:	d9001b17 	ldw	r4,108(sp)
 800e458:	d8801c17 	ldw	r2,112(sp)
 800e45c:	21400044 	addi	r5,r4,1
 800e460:	d9801d87 	ldb	r6,118(sp)
 800e464:	303e5226 	beq	r6,zero,800ddb0 <___vfiprintf_internal_r+0x510>
 800e468:	01800044 	movi	r6,1
 800e46c:	d9001d84 	addi	r4,sp,118
 800e470:	1185883a 	add	r2,r2,r6
 800e474:	41000015 	stw	r4,0(r8)
 800e478:	41800115 	stw	r6,4(r8)
 800e47c:	d8801c15 	stw	r2,112(sp)
 800e480:	d9401b15 	stw	r5,108(sp)
 800e484:	010001c4 	movi	r4,7
 800e488:	2140b00e 	bge	r4,r5,800e74c <___vfiprintf_internal_r+0xeac>
 800e48c:	1000f61e 	bne	r2,zero,800e868 <___vfiprintf_internal_r+0xfc8>
 800e490:	3800b31e 	bne	r7,zero,800e760 <___vfiprintf_internal_r+0xec0>
 800e494:	0009883a 	mov	r4,zero
 800e498:	300b883a 	mov	r5,r6
 800e49c:	d811883a 	mov	r8,sp
 800e4a0:	01802004 	movi	r6,128
 800e4a4:	19be5226 	beq	r3,r6,800ddf0 <___vfiprintf_internal_r+0x550>
 800e4a8:	8521c83a 	sub	r16,r16,r20
 800e4ac:	043e790e 	bge	zero,r16,800de94 <___vfiprintf_internal_r+0x5f4>
 800e4b0:	05400404 	movi	r21,16
 800e4b4:	ac01b00e 	bge	r21,r16,800eb78 <___vfiprintf_internal_r+0x12d8>
 800e4b8:	01420074 	movhi	r5,2049
 800e4bc:	29555504 	addi	r5,r5,21844
 800e4c0:	d9402315 	stw	r5,140(sp)
 800e4c4:	070001c4 	movi	fp,7
 800e4c8:	00000506 	br	800e4e0 <___vfiprintf_internal_r+0xc40>
 800e4cc:	21400084 	addi	r5,r4,2
 800e4d0:	42000204 	addi	r8,r8,8
 800e4d4:	1809883a 	mov	r4,r3
 800e4d8:	843ffc04 	addi	r16,r16,-16
 800e4dc:	ac000d0e 	bge	r21,r16,800e514 <___vfiprintf_internal_r+0xc74>
 800e4e0:	10800404 	addi	r2,r2,16
 800e4e4:	20c00044 	addi	r3,r4,1
 800e4e8:	44800015 	stw	r18,0(r8)
 800e4ec:	45400115 	stw	r21,4(r8)
 800e4f0:	d8801c15 	stw	r2,112(sp)
 800e4f4:	d8c01b15 	stw	r3,108(sp)
 800e4f8:	e0fff40e 	bge	fp,r3,800e4cc <___vfiprintf_internal_r+0xc2c>
 800e4fc:	1000101e 	bne	r2,zero,800e540 <___vfiprintf_internal_r+0xca0>
 800e500:	843ffc04 	addi	r16,r16,-16
 800e504:	01400044 	movi	r5,1
 800e508:	0009883a 	mov	r4,zero
 800e50c:	d811883a 	mov	r8,sp
 800e510:	ac3ff316 	blt	r21,r16,800e4e0 <___vfiprintf_internal_r+0xc40>
 800e514:	d8c02317 	ldw	r3,140(sp)
 800e518:	1405883a 	add	r2,r2,r16
 800e51c:	44000115 	stw	r16,4(r8)
 800e520:	40c00015 	stw	r3,0(r8)
 800e524:	d8801c15 	stw	r2,112(sp)
 800e528:	d9401b15 	stw	r5,108(sp)
 800e52c:	00c001c4 	movi	r3,7
 800e530:	19401916 	blt	r3,r5,800e598 <___vfiprintf_internal_r+0xcf8>
 800e534:	42000204 	addi	r8,r8,8
 800e538:	29400044 	addi	r5,r5,1
 800e53c:	003e5506 	br	800de94 <___vfiprintf_internal_r+0x5f4>
 800e540:	d9402017 	ldw	r5,128(sp)
 800e544:	d9002117 	ldw	r4,132(sp)
 800e548:	d9801a04 	addi	r6,sp,104
 800e54c:	800d78c0 	call	800d78c <__sprint_r.part.0>
 800e550:	10000b1e 	bne	r2,zero,800e580 <___vfiprintf_internal_r+0xce0>
 800e554:	d9001b17 	ldw	r4,108(sp)
 800e558:	d8801c17 	ldw	r2,112(sp)
 800e55c:	d811883a 	mov	r8,sp
 800e560:	21400044 	addi	r5,r4,1
 800e564:	003fdc06 	br	800e4d8 <___vfiprintf_internal_r+0xc38>
 800e568:	d8801c17 	ldw	r2,112(sp)
 800e56c:	10000426 	beq	r2,zero,800e580 <___vfiprintf_internal_r+0xce0>
 800e570:	d9402017 	ldw	r5,128(sp)
 800e574:	d9002117 	ldw	r4,132(sp)
 800e578:	d9801a04 	addi	r6,sp,104
 800e57c:	800d78c0 	call	800d78c <__sprint_r.part.0>
 800e580:	d9402017 	ldw	r5,128(sp)
 800e584:	2880030b 	ldhu	r2,12(r5)
 800e588:	1080100c 	andi	r2,r2,64
 800e58c:	10014d1e 	bne	r2,zero,800eac4 <___vfiprintf_internal_r+0x1224>
 800e590:	d8802417 	ldw	r2,144(sp)
 800e594:	003d9706 	br	800dbf4 <___vfiprintf_internal_r+0x354>
 800e598:	1000d21e 	bne	r2,zero,800e8e4 <___vfiprintf_internal_r+0x1044>
 800e59c:	00c00044 	movi	r3,1
 800e5a0:	a005883a 	mov	r2,r20
 800e5a4:	ddc00015 	stw	r23,0(sp)
 800e5a8:	dd000115 	stw	r20,4(sp)
 800e5ac:	dd001c15 	stw	r20,112(sp)
 800e5b0:	d8c01b15 	stw	r3,108(sp)
 800e5b4:	d811883a 	mov	r8,sp
 800e5b8:	42000204 	addi	r8,r8,8
 800e5bc:	8c40010c 	andi	r17,r17,4
 800e5c0:	88004026 	beq	r17,zero,800e6c4 <___vfiprintf_internal_r+0xe24>
 800e5c4:	d9002517 	ldw	r4,148(sp)
 800e5c8:	24e3c83a 	sub	r17,r4,r19
 800e5cc:	04403d0e 	bge	zero,r17,800e6c4 <___vfiprintf_internal_r+0xe24>
 800e5d0:	04000404 	movi	r16,16
 800e5d4:	8441a90e 	bge	r16,r17,800ec7c <___vfiprintf_internal_r+0x13dc>
 800e5d8:	00c20074 	movhi	r3,2049
 800e5dc:	18d55904 	addi	r3,r3,21860
 800e5e0:	d9001b17 	ldw	r4,108(sp)
 800e5e4:	d8c02315 	stw	r3,140(sp)
 800e5e8:	050001c4 	movi	r20,7
 800e5ec:	dd402117 	ldw	r21,132(sp)
 800e5f0:	ddc02017 	ldw	r23,128(sp)
 800e5f4:	00000506 	br	800e60c <___vfiprintf_internal_r+0xd6c>
 800e5f8:	21400084 	addi	r5,r4,2
 800e5fc:	42000204 	addi	r8,r8,8
 800e600:	1809883a 	mov	r4,r3
 800e604:	8c7ffc04 	addi	r17,r17,-16
 800e608:	84400f0e 	bge	r16,r17,800e648 <___vfiprintf_internal_r+0xda8>
 800e60c:	01420074 	movhi	r5,2049
 800e610:	10800404 	addi	r2,r2,16
 800e614:	20c00044 	addi	r3,r4,1
 800e618:	29555904 	addi	r5,r5,21860
 800e61c:	41400015 	stw	r5,0(r8)
 800e620:	44000115 	stw	r16,4(r8)
 800e624:	d8801c15 	stw	r2,112(sp)
 800e628:	d8c01b15 	stw	r3,108(sp)
 800e62c:	a0fff20e 	bge	r20,r3,800e5f8 <___vfiprintf_internal_r+0xd58>
 800e630:	1000141e 	bne	r2,zero,800e684 <___vfiprintf_internal_r+0xde4>
 800e634:	8c7ffc04 	addi	r17,r17,-16
 800e638:	01400044 	movi	r5,1
 800e63c:	0009883a 	mov	r4,zero
 800e640:	d811883a 	mov	r8,sp
 800e644:	847ff116 	blt	r16,r17,800e60c <___vfiprintf_internal_r+0xd6c>
 800e648:	d8c02317 	ldw	r3,140(sp)
 800e64c:	1445883a 	add	r2,r2,r17
 800e650:	44400115 	stw	r17,4(r8)
 800e654:	40c00015 	stw	r3,0(r8)
 800e658:	d8801c15 	stw	r2,112(sp)
 800e65c:	d9401b15 	stw	r5,108(sp)
 800e660:	00c001c4 	movi	r3,7
 800e664:	1940170e 	bge	r3,r5,800e6c4 <___vfiprintf_internal_r+0xe24>
 800e668:	1000101e 	bne	r2,zero,800e6ac <___vfiprintf_internal_r+0xe0c>
 800e66c:	d8802517 	ldw	r2,148(sp)
 800e670:	14c11616 	blt	r2,r19,800eacc <___vfiprintf_internal_r+0x122c>
 800e674:	d9002417 	ldw	r4,144(sp)
 800e678:	2089883a 	add	r4,r4,r2
 800e67c:	d9002415 	stw	r4,144(sp)
 800e680:	003e1806 	br	800dee4 <___vfiprintf_internal_r+0x644>
 800e684:	d9801a04 	addi	r6,sp,104
 800e688:	b80b883a 	mov	r5,r23
 800e68c:	a809883a 	mov	r4,r21
 800e690:	800d78c0 	call	800d78c <__sprint_r.part.0>
 800e694:	103fba1e 	bne	r2,zero,800e580 <___vfiprintf_internal_r+0xce0>
 800e698:	d9001b17 	ldw	r4,108(sp)
 800e69c:	d8801c17 	ldw	r2,112(sp)
 800e6a0:	d811883a 	mov	r8,sp
 800e6a4:	21400044 	addi	r5,r4,1
 800e6a8:	003fd606 	br	800e604 <___vfiprintf_internal_r+0xd64>
 800e6ac:	d9402017 	ldw	r5,128(sp)
 800e6b0:	d9002117 	ldw	r4,132(sp)
 800e6b4:	d9801a04 	addi	r6,sp,104
 800e6b8:	800d78c0 	call	800d78c <__sprint_r.part.0>
 800e6bc:	103fb01e 	bne	r2,zero,800e580 <___vfiprintf_internal_r+0xce0>
 800e6c0:	d8801c17 	ldw	r2,112(sp)
 800e6c4:	d8c02517 	ldw	r3,148(sp)
 800e6c8:	1cc0010e 	bge	r3,r19,800e6d0 <___vfiprintf_internal_r+0xe30>
 800e6cc:	9807883a 	mov	r3,r19
 800e6d0:	d9002417 	ldw	r4,144(sp)
 800e6d4:	20c9883a 	add	r4,r4,r3
 800e6d8:	d9002415 	stw	r4,144(sp)
 800e6dc:	103e0126 	beq	r2,zero,800dee4 <___vfiprintf_internal_r+0x644>
 800e6e0:	d9402017 	ldw	r5,128(sp)
 800e6e4:	d9002117 	ldw	r4,132(sp)
 800e6e8:	d9801a04 	addi	r6,sp,104
 800e6ec:	800d78c0 	call	800d78c <__sprint_r.part.0>
 800e6f0:	103dfc26 	beq	r2,zero,800dee4 <___vfiprintf_internal_r+0x644>
 800e6f4:	003fa206 	br	800e580 <___vfiprintf_internal_r+0xce0>
 800e6f8:	d9402017 	ldw	r5,128(sp)
 800e6fc:	d9002117 	ldw	r4,132(sp)
 800e700:	d9801a04 	addi	r6,sp,104
 800e704:	d9c02b15 	stw	r7,172(sp)
 800e708:	800d78c0 	call	800d78c <__sprint_r.part.0>
 800e70c:	d9c02b17 	ldw	r7,172(sp)
 800e710:	103f9b1e 	bne	r2,zero,800e580 <___vfiprintf_internal_r+0xce0>
 800e714:	d9001b17 	ldw	r4,108(sp)
 800e718:	d8801c17 	ldw	r2,112(sp)
 800e71c:	d811883a 	mov	r8,sp
 800e720:	21800044 	addi	r6,r4,1
 800e724:	003dbf06 	br	800de24 <___vfiprintf_internal_r+0x584>
 800e728:	1000d81e 	bne	r2,zero,800ea8c <___vfiprintf_internal_r+0x11ec>
 800e72c:	d9001d87 	ldb	r4,118(sp)
 800e730:	20000a26 	beq	r4,zero,800e75c <___vfiprintf_internal_r+0xebc>
 800e734:	00800044 	movi	r2,1
 800e738:	d9001d84 	addi	r4,sp,118
 800e73c:	100b883a 	mov	r5,r2
 800e740:	d9000015 	stw	r4,0(sp)
 800e744:	d8800115 	stw	r2,4(sp)
 800e748:	d811883a 	mov	r8,sp
 800e74c:	2809883a 	mov	r4,r5
 800e750:	42000204 	addi	r8,r8,8
 800e754:	29400044 	addi	r5,r5,1
 800e758:	003d9506 	br	800ddb0 <___vfiprintf_internal_r+0x510>
 800e75c:	3800fd26 	beq	r7,zero,800eb54 <___vfiprintf_internal_r+0x12b4>
 800e760:	00800084 	movi	r2,2
 800e764:	d9001d04 	addi	r4,sp,116
 800e768:	d9000015 	stw	r4,0(sp)
 800e76c:	d8800115 	stw	r2,4(sp)
 800e770:	01400044 	movi	r5,1
 800e774:	d811883a 	mov	r8,sp
 800e778:	2809883a 	mov	r4,r5
 800e77c:	42000204 	addi	r8,r8,8
 800e780:	29400044 	addi	r5,r5,1
 800e784:	003f4606 	br	800e4a0 <___vfiprintf_internal_r+0xc00>
 800e788:	d8802517 	ldw	r2,148(sp)
 800e78c:	14c0010e 	bge	r2,r19,800e794 <___vfiprintf_internal_r+0xef4>
 800e790:	9805883a 	mov	r2,r19
 800e794:	d9402417 	ldw	r5,144(sp)
 800e798:	288b883a 	add	r5,r5,r2
 800e79c:	d9402415 	stw	r5,144(sp)
 800e7a0:	003dd006 	br	800dee4 <___vfiprintf_internal_r+0x644>
 800e7a4:	d8001d85 	stb	zero,118(sp)
 800e7a8:	80005d16 	blt	r16,zero,800e920 <___vfiprintf_internal_r+0x1080>
 800e7ac:	00ffdfc4 	movi	r3,-129
 800e7b0:	9d04b03a 	or	r2,r19,r20
 800e7b4:	88e2703a 	and	r17,r17,r3
 800e7b8:	103d3726 	beq	r2,zero,800dc98 <___vfiprintf_internal_r+0x3f8>
 800e7bc:	002b883a 	mov	r21,zero
 800e7c0:	d9002617 	ldw	r4,152(sp)
 800e7c4:	ddc01a04 	addi	r23,sp,104
 800e7c8:	988003cc 	andi	r2,r19,15
 800e7cc:	a006973a 	slli	r3,r20,28
 800e7d0:	2085883a 	add	r2,r4,r2
 800e7d4:	9826d13a 	srli	r19,r19,4
 800e7d8:	10800003 	ldbu	r2,0(r2)
 800e7dc:	a028d13a 	srli	r20,r20,4
 800e7e0:	bdffffc4 	addi	r23,r23,-1
 800e7e4:	1ce6b03a 	or	r19,r3,r19
 800e7e8:	b8800005 	stb	r2,0(r23)
 800e7ec:	9d04b03a 	or	r2,r19,r20
 800e7f0:	103ff51e 	bne	r2,zero,800e7c8 <___vfiprintf_internal_r+0xf28>
 800e7f4:	d8801e17 	ldw	r2,120(sp)
 800e7f8:	15e9c83a 	sub	r20,r2,r23
 800e7fc:	003d2b06 	br	800dcac <___vfiprintf_internal_r+0x40c>
 800e800:	d9402017 	ldw	r5,128(sp)
 800e804:	d9002117 	ldw	r4,132(sp)
 800e808:	d9801a04 	addi	r6,sp,104
 800e80c:	800d78c0 	call	800d78c <__sprint_r.part.0>
 800e810:	103f5b1e 	bne	r2,zero,800e580 <___vfiprintf_internal_r+0xce0>
 800e814:	d8801c17 	ldw	r2,112(sp)
 800e818:	d811883a 	mov	r8,sp
 800e81c:	003f6706 	br	800e5bc <___vfiprintf_internal_r+0xd1c>
 800e820:	d9402017 	ldw	r5,128(sp)
 800e824:	d9002117 	ldw	r4,132(sp)
 800e828:	d9801a04 	addi	r6,sp,104
 800e82c:	800d78c0 	call	800d78c <__sprint_r.part.0>
 800e830:	103f531e 	bne	r2,zero,800e580 <___vfiprintf_internal_r+0xce0>
 800e834:	d811883a 	mov	r8,sp
 800e838:	003cd906 	br	800dba0 <___vfiprintf_internal_r+0x300>
 800e83c:	10803fcc 	andi	r2,r2,255
 800e840:	1080201c 	xori	r2,r2,128
 800e844:	10bfe004 	addi	r2,r2,-128
 800e848:	00c00c04 	movi	r3,48
 800e84c:	10ffe926 	beq	r2,r3,800e7f4 <___vfiprintf_internal_r+0xf54>
 800e850:	b8ffffc5 	stb	r3,-1(r23)
 800e854:	d8c01e17 	ldw	r3,120(sp)
 800e858:	b8bfffc4 	addi	r2,r23,-1
 800e85c:	102f883a 	mov	r23,r2
 800e860:	18a9c83a 	sub	r20,r3,r2
 800e864:	003d1106 	br	800dcac <___vfiprintf_internal_r+0x40c>
 800e868:	d9402017 	ldw	r5,128(sp)
 800e86c:	d9002117 	ldw	r4,132(sp)
 800e870:	d9801a04 	addi	r6,sp,104
 800e874:	d8c02a15 	stw	r3,168(sp)
 800e878:	d9c02b15 	stw	r7,172(sp)
 800e87c:	800d78c0 	call	800d78c <__sprint_r.part.0>
 800e880:	d8c02a17 	ldw	r3,168(sp)
 800e884:	d9c02b17 	ldw	r7,172(sp)
 800e888:	103f3d1e 	bne	r2,zero,800e580 <___vfiprintf_internal_r+0xce0>
 800e88c:	d9001b17 	ldw	r4,108(sp)
 800e890:	d8801c17 	ldw	r2,112(sp)
 800e894:	d811883a 	mov	r8,sp
 800e898:	21400044 	addi	r5,r4,1
 800e89c:	003d4406 	br	800ddb0 <___vfiprintf_internal_r+0x510>
 800e8a0:	d9402017 	ldw	r5,128(sp)
 800e8a4:	d9002117 	ldw	r4,132(sp)
 800e8a8:	d9801a04 	addi	r6,sp,104
 800e8ac:	d8c02a15 	stw	r3,168(sp)
 800e8b0:	800d78c0 	call	800d78c <__sprint_r.part.0>
 800e8b4:	d8c02a17 	ldw	r3,168(sp)
 800e8b8:	103f311e 	bne	r2,zero,800e580 <___vfiprintf_internal_r+0xce0>
 800e8bc:	d9001b17 	ldw	r4,108(sp)
 800e8c0:	d8801c17 	ldw	r2,112(sp)
 800e8c4:	d811883a 	mov	r8,sp
 800e8c8:	21400044 	addi	r5,r4,1
 800e8cc:	003ef406 	br	800e4a0 <___vfiprintf_internal_r+0xc00>
 800e8d0:	1000bd1e 	bne	r2,zero,800ebc8 <___vfiprintf_internal_r+0x1328>
 800e8d4:	01400044 	movi	r5,1
 800e8d8:	0009883a 	mov	r4,zero
 800e8dc:	d811883a 	mov	r8,sp
 800e8e0:	003ef106 	br	800e4a8 <___vfiprintf_internal_r+0xc08>
 800e8e4:	d9402017 	ldw	r5,128(sp)
 800e8e8:	d9002117 	ldw	r4,132(sp)
 800e8ec:	d9801a04 	addi	r6,sp,104
 800e8f0:	800d78c0 	call	800d78c <__sprint_r.part.0>
 800e8f4:	103f221e 	bne	r2,zero,800e580 <___vfiprintf_internal_r+0xce0>
 800e8f8:	d9401b17 	ldw	r5,108(sp)
 800e8fc:	d8801c17 	ldw	r2,112(sp)
 800e900:	d811883a 	mov	r8,sp
 800e904:	29400044 	addi	r5,r5,1
 800e908:	003d6206 	br	800de94 <___vfiprintf_internal_r+0x5f4>
 800e90c:	01420074 	movhi	r5,2049
 800e910:	2954f504 	addi	r5,r5,21460
 800e914:	d9402615 	stw	r5,152(sp)
 800e918:	d8c02215 	stw	r3,136(sp)
 800e91c:	1023883a 	mov	r17,r2
 800e920:	9d04b03a 	or	r2,r19,r20
 800e924:	103fa51e 	bne	r2,zero,800e7bc <___vfiprintf_internal_r+0xf1c>
 800e928:	002b883a 	mov	r21,zero
 800e92c:	00800084 	movi	r2,2
 800e930:	003e4a06 	br	800e25c <___vfiprintf_internal_r+0x9bc>
 800e934:	01420074 	movhi	r5,2049
 800e938:	2954f504 	addi	r5,r5,21460
 800e93c:	002b883a 	mov	r21,zero
 800e940:	d9402615 	stw	r5,152(sp)
 800e944:	003f9e06 	br	800e7c0 <___vfiprintf_internal_r+0xf20>
 800e948:	d9402217 	ldw	r5,136(sp)
 800e94c:	d8001d85 	stb	zero,118(sp)
 800e950:	0029883a 	mov	r20,zero
 800e954:	28800104 	addi	r2,r5,4
 800e958:	2cc00017 	ldw	r19,0(r5)
 800e95c:	803e3a16 	blt	r16,zero,800e248 <___vfiprintf_internal_r+0x9a8>
 800e960:	00ffdfc4 	movi	r3,-129
 800e964:	d8802215 	stw	r2,136(sp)
 800e968:	88e2703a 	and	r17,r17,r3
 800e96c:	002b883a 	mov	r21,zero
 800e970:	983e9b26 	beq	r19,zero,800e3e0 <___vfiprintf_internal_r+0xb40>
 800e974:	00800244 	movi	r2,9
 800e978:	14fdc936 	bltu	r2,r19,800e0a0 <___vfiprintf_internal_r+0x800>
 800e97c:	003e9a06 	br	800e3e8 <___vfiprintf_internal_r+0xb48>
 800e980:	00800c04 	movi	r2,48
 800e984:	d8c01d45 	stb	r3,117(sp)
 800e988:	d8801d05 	stb	r2,116(sp)
 800e98c:	d8001d85 	stb	zero,118(sp)
 800e990:	88c00094 	ori	r3,r17,2
 800e994:	80009c16 	blt	r16,zero,800ec08 <___vfiprintf_internal_r+0x1368>
 800e998:	00bfdfc4 	movi	r2,-129
 800e99c:	88a2703a 	and	r17,r17,r2
 800e9a0:	8c400094 	ori	r17,r17,2
 800e9a4:	002b883a 	mov	r21,zero
 800e9a8:	003f8506 	br	800e7c0 <___vfiprintf_internal_r+0xf20>
 800e9ac:	b029883a 	mov	r20,r22
 800e9b0:	003c0b06 	br	800d9e0 <___vfiprintf_internal_r+0x140>
 800e9b4:	04e7c83a 	sub	r19,zero,r19
 800e9b8:	05400b44 	movi	r21,45
 800e9bc:	9804c03a 	cmpne	r2,r19,zero
 800e9c0:	0529c83a 	sub	r20,zero,r20
 800e9c4:	dd401d85 	stb	r21,118(sp)
 800e9c8:	a0a9c83a 	sub	r20,r20,r2
 800e9cc:	80009716 	blt	r16,zero,800ec2c <___vfiprintf_internal_r+0x138c>
 800e9d0:	00bfdfc4 	movi	r2,-129
 800e9d4:	88a2703a 	and	r17,r17,r2
 800e9d8:	003db006 	br	800e09c <___vfiprintf_internal_r+0x7fc>
 800e9dc:	b0c00007 	ldb	r3,0(r22)
 800e9e0:	003c0c06 	br	800da14 <___vfiprintf_internal_r+0x174>
 800e9e4:	8880100c 	andi	r2,r17,64
 800e9e8:	d8001d85 	stb	zero,118(sp)
 800e9ec:	1000461e 	bne	r2,zero,800eb08 <___vfiprintf_internal_r+0x1268>
 800e9f0:	d9002217 	ldw	r4,136(sp)
 800e9f4:	0029883a 	mov	r20,zero
 800e9f8:	20800104 	addi	r2,r4,4
 800e9fc:	24c00017 	ldw	r19,0(r4)
 800ea00:	803df80e 	bge	r16,zero,800e1e4 <___vfiprintf_internal_r+0x944>
 800ea04:	9d06b03a 	or	r3,r19,r20
 800ea08:	d8802215 	stw	r2,136(sp)
 800ea0c:	183d5e1e 	bne	r3,zero,800df88 <___vfiprintf_internal_r+0x6e8>
 800ea10:	002b883a 	mov	r21,zero
 800ea14:	0005883a 	mov	r2,zero
 800ea18:	003e1006 	br	800e25c <___vfiprintf_internal_r+0x9bc>
 800ea1c:	8880040c 	andi	r2,r17,16
 800ea20:	1000321e 	bne	r2,zero,800eaec <___vfiprintf_internal_r+0x124c>
 800ea24:	8c40100c 	andi	r17,r17,64
 800ea28:	88008d26 	beq	r17,zero,800ec60 <___vfiprintf_internal_r+0x13c0>
 800ea2c:	d9402217 	ldw	r5,136(sp)
 800ea30:	d8c02417 	ldw	r3,144(sp)
 800ea34:	28800017 	ldw	r2,0(r5)
 800ea38:	29400104 	addi	r5,r5,4
 800ea3c:	d9402215 	stw	r5,136(sp)
 800ea40:	10c0000d 	sth	r3,0(r2)
 800ea44:	003bca06 	br	800d970 <___vfiprintf_internal_r+0xd0>
 800ea48:	8880100c 	andi	r2,r17,64
 800ea4c:	10003a26 	beq	r2,zero,800eb38 <___vfiprintf_internal_r+0x1298>
 800ea50:	d8802217 	ldw	r2,136(sp)
 800ea54:	14c0000f 	ldh	r19,0(r2)
 800ea58:	10800104 	addi	r2,r2,4
 800ea5c:	d8802215 	stw	r2,136(sp)
 800ea60:	9829d7fa 	srai	r20,r19,31
 800ea64:	a005883a 	mov	r2,r20
 800ea68:	003d8506 	br	800e080 <___vfiprintf_internal_r+0x7e0>
 800ea6c:	8880100c 	andi	r2,r17,64
 800ea70:	10002b26 	beq	r2,zero,800eb20 <___vfiprintf_internal_r+0x1280>
 800ea74:	d8802217 	ldw	r2,136(sp)
 800ea78:	0029883a 	mov	r20,zero
 800ea7c:	14c0000b 	ldhu	r19,0(r2)
 800ea80:	10800104 	addi	r2,r2,4
 800ea84:	d8802215 	stw	r2,136(sp)
 800ea88:	003d5d06 	br	800e000 <___vfiprintf_internal_r+0x760>
 800ea8c:	d9402017 	ldw	r5,128(sp)
 800ea90:	d9002117 	ldw	r4,132(sp)
 800ea94:	d9801a04 	addi	r6,sp,104
 800ea98:	d8c02a15 	stw	r3,168(sp)
 800ea9c:	d9c02b15 	stw	r7,172(sp)
 800eaa0:	800d78c0 	call	800d78c <__sprint_r.part.0>
 800eaa4:	d8c02a17 	ldw	r3,168(sp)
 800eaa8:	d9c02b17 	ldw	r7,172(sp)
 800eaac:	103eb41e 	bne	r2,zero,800e580 <___vfiprintf_internal_r+0xce0>
 800eab0:	d9001b17 	ldw	r4,108(sp)
 800eab4:	d8801c17 	ldw	r2,112(sp)
 800eab8:	d811883a 	mov	r8,sp
 800eabc:	21400044 	addi	r5,r4,1
 800eac0:	003e6706 	br	800e460 <___vfiprintf_internal_r+0xbc0>
 800eac4:	00bfffc4 	movi	r2,-1
 800eac8:	003c4a06 	br	800dbf4 <___vfiprintf_internal_r+0x354>
 800eacc:	9805883a 	mov	r2,r19
 800ead0:	003ee806 	br	800e674 <___vfiprintf_internal_r+0xdd4>
 800ead4:	d8c02217 	ldw	r3,136(sp)
 800ead8:	0029883a 	mov	r20,zero
 800eadc:	18800104 	addi	r2,r3,4
 800eae0:	1cc0000b 	ldhu	r19,0(r3)
 800eae4:	803f9e0e 	bge	r16,zero,800e960 <___vfiprintf_internal_r+0x10c0>
 800eae8:	003dd706 	br	800e248 <___vfiprintf_internal_r+0x9a8>
 800eaec:	d8c02217 	ldw	r3,136(sp)
 800eaf0:	d9002417 	ldw	r4,144(sp)
 800eaf4:	18800017 	ldw	r2,0(r3)
 800eaf8:	18c00104 	addi	r3,r3,4
 800eafc:	d8c02215 	stw	r3,136(sp)
 800eb00:	11000015 	stw	r4,0(r2)
 800eb04:	003b9a06 	br	800d970 <___vfiprintf_internal_r+0xd0>
 800eb08:	d8c02217 	ldw	r3,136(sp)
 800eb0c:	0029883a 	mov	r20,zero
 800eb10:	18800104 	addi	r2,r3,4
 800eb14:	1cc0000b 	ldhu	r19,0(r3)
 800eb18:	803db20e 	bge	r16,zero,800e1e4 <___vfiprintf_internal_r+0x944>
 800eb1c:	003fb906 	br	800ea04 <___vfiprintf_internal_r+0x1164>
 800eb20:	d9002217 	ldw	r4,136(sp)
 800eb24:	0029883a 	mov	r20,zero
 800eb28:	24c00017 	ldw	r19,0(r4)
 800eb2c:	21000104 	addi	r4,r4,4
 800eb30:	d9002215 	stw	r4,136(sp)
 800eb34:	003d3206 	br	800e000 <___vfiprintf_internal_r+0x760>
 800eb38:	d8c02217 	ldw	r3,136(sp)
 800eb3c:	1cc00017 	ldw	r19,0(r3)
 800eb40:	18c00104 	addi	r3,r3,4
 800eb44:	d8c02215 	stw	r3,136(sp)
 800eb48:	9829d7fa 	srai	r20,r19,31
 800eb4c:	a005883a 	mov	r2,r20
 800eb50:	003d4b06 	br	800e080 <___vfiprintf_internal_r+0x7e0>
 800eb54:	0009883a 	mov	r4,zero
 800eb58:	01400044 	movi	r5,1
 800eb5c:	d811883a 	mov	r8,sp
 800eb60:	003e4f06 	br	800e4a0 <___vfiprintf_internal_r+0xc00>
 800eb64:	d8c02215 	stw	r3,136(sp)
 800eb68:	002b883a 	mov	r21,zero
 800eb6c:	003db806 	br	800e250 <___vfiprintf_internal_r+0x9b0>
 800eb70:	d811883a 	mov	r8,sp
 800eb74:	003e9606 	br	800e5d0 <___vfiprintf_internal_r+0xd30>
 800eb78:	01020074 	movhi	r4,2049
 800eb7c:	21155504 	addi	r4,r4,21844
 800eb80:	d9002315 	stw	r4,140(sp)
 800eb84:	003e6306 	br	800e514 <___vfiprintf_internal_r+0xc74>
 800eb88:	b0c00043 	ldbu	r3,1(r22)
 800eb8c:	8c400814 	ori	r17,r17,32
 800eb90:	b5800044 	addi	r22,r22,1
 800eb94:	18c03fcc 	andi	r3,r3,255
 800eb98:	18c0201c 	xori	r3,r3,128
 800eb9c:	18ffe004 	addi	r3,r3,-128
 800eba0:	003b9c06 	br	800da14 <___vfiprintf_internal_r+0x174>
 800eba4:	b809883a 	mov	r4,r23
 800eba8:	da002a15 	stw	r8,168(sp)
 800ebac:	8005ea80 	call	8005ea8 <strlen>
 800ebb0:	1029883a 	mov	r20,r2
 800ebb4:	dd401d83 	ldbu	r21,118(sp)
 800ebb8:	df002215 	stw	fp,136(sp)
 800ebbc:	0021883a 	mov	r16,zero
 800ebc0:	da002a17 	ldw	r8,168(sp)
 800ebc4:	003c3906 	br	800dcac <___vfiprintf_internal_r+0x40c>
 800ebc8:	d9402017 	ldw	r5,128(sp)
 800ebcc:	d9002117 	ldw	r4,132(sp)
 800ebd0:	d9801a04 	addi	r6,sp,104
 800ebd4:	800d78c0 	call	800d78c <__sprint_r.part.0>
 800ebd8:	103e691e 	bne	r2,zero,800e580 <___vfiprintf_internal_r+0xce0>
 800ebdc:	d9001b17 	ldw	r4,108(sp)
 800ebe0:	d8801c17 	ldw	r2,112(sp)
 800ebe4:	d811883a 	mov	r8,sp
 800ebe8:	21400044 	addi	r5,r4,1
 800ebec:	003e2e06 	br	800e4a8 <___vfiprintf_internal_r+0xc08>
 800ebf0:	01020074 	movhi	r4,2049
 800ebf4:	21155904 	addi	r4,r4,21860
 800ebf8:	d9002315 	stw	r4,140(sp)
 800ebfc:	d9001b17 	ldw	r4,108(sp)
 800ec00:	21000044 	addi	r4,r4,1
 800ec04:	003c5e06 	br	800dd80 <___vfiprintf_internal_r+0x4e0>
 800ec08:	002b883a 	mov	r21,zero
 800ec0c:	00800084 	movi	r2,2
 800ec10:	10803fcc 	andi	r2,r2,255
 800ec14:	01000044 	movi	r4,1
 800ec18:	11002b26 	beq	r2,r4,800ecc8 <___vfiprintf_internal_r+0x1428>
 800ec1c:	01000084 	movi	r4,2
 800ec20:	11002b1e 	bne	r2,r4,800ecd0 <___vfiprintf_internal_r+0x1430>
 800ec24:	1823883a 	mov	r17,r3
 800ec28:	003ee506 	br	800e7c0 <___vfiprintf_internal_r+0xf20>
 800ec2c:	8807883a 	mov	r3,r17
 800ec30:	00800044 	movi	r2,1
 800ec34:	003ff606 	br	800ec10 <___vfiprintf_internal_r+0x1370>
 800ec38:	00800184 	movi	r2,6
 800ec3c:	1400012e 	bgeu	r2,r16,800ec44 <___vfiprintf_internal_r+0x13a4>
 800ec40:	1021883a 	mov	r16,r2
 800ec44:	8029883a 	mov	r20,r16
 800ec48:	8027883a 	mov	r19,r16
 800ec4c:	80002216 	blt	r16,zero,800ecd8 <___vfiprintf_internal_r+0x1438>
 800ec50:	05c20074 	movhi	r23,2049
 800ec54:	df002215 	stw	fp,136(sp)
 800ec58:	bdd4fa04 	addi	r23,r23,21480
 800ec5c:	003cfb06 	br	800e04c <___vfiprintf_internal_r+0x7ac>
 800ec60:	d9002217 	ldw	r4,136(sp)
 800ec64:	d9402417 	ldw	r5,144(sp)
 800ec68:	20800017 	ldw	r2,0(r4)
 800ec6c:	21000104 	addi	r4,r4,4
 800ec70:	d9002215 	stw	r4,136(sp)
 800ec74:	11400015 	stw	r5,0(r2)
 800ec78:	003b3d06 	br	800d970 <___vfiprintf_internal_r+0xd0>
 800ec7c:	01420074 	movhi	r5,2049
 800ec80:	29555904 	addi	r5,r5,21860
 800ec84:	d9402315 	stw	r5,140(sp)
 800ec88:	d9401b17 	ldw	r5,108(sp)
 800ec8c:	29400044 	addi	r5,r5,1
 800ec90:	003e6d06 	br	800e648 <___vfiprintf_internal_r+0xda8>
 800ec94:	8029883a 	mov	r20,r16
 800ec98:	dd401d83 	ldbu	r21,118(sp)
 800ec9c:	df002215 	stw	fp,136(sp)
 800eca0:	0021883a 	mov	r16,zero
 800eca4:	003c0106 	br	800dcac <___vfiprintf_internal_r+0x40c>
 800eca8:	00c20074 	movhi	r3,2049
 800ecac:	18d55504 	addi	r3,r3,21844
 800ecb0:	d8c02315 	stw	r3,140(sp)
 800ecb4:	280d883a 	mov	r6,r5
 800ecb8:	003c6906 	br	800de60 <___vfiprintf_internal_r+0x5c0>
 800ecbc:	802d883a 	mov	r22,r16
 800ecc0:	0021883a 	mov	r16,zero
 800ecc4:	003b5406 	br	800da18 <___vfiprintf_internal_r+0x178>
 800ecc8:	1823883a 	mov	r17,r3
 800eccc:	003cf306 	br	800e09c <___vfiprintf_internal_r+0x7fc>
 800ecd0:	1823883a 	mov	r17,r3
 800ecd4:	003cad06 	br	800df8c <___vfiprintf_internal_r+0x6ec>
 800ecd8:	0027883a 	mov	r19,zero
 800ecdc:	003fdc06 	br	800ec50 <___vfiprintf_internal_r+0x13b0>
 800ece0:	d9402217 	ldw	r5,136(sp)
 800ece4:	8005883a 	mov	r2,r16
 800ece8:	b0c00043 	ldbu	r3,1(r22)
 800ecec:	2c000017 	ldw	r16,0(r5)
 800ecf0:	29000104 	addi	r4,r5,4
 800ecf4:	d9002215 	stw	r4,136(sp)
 800ecf8:	102d883a 	mov	r22,r2
 800ecfc:	803fa50e 	bge	r16,zero,800eb94 <___vfiprintf_internal_r+0x12f4>
 800ed00:	18c03fcc 	andi	r3,r3,255
 800ed04:	18c0201c 	xori	r3,r3,128
 800ed08:	043fffc4 	movi	r16,-1
 800ed0c:	18ffe004 	addi	r3,r3,-128
 800ed10:	003b4006 	br	800da14 <___vfiprintf_internal_r+0x174>
 800ed14:	d9402303 	ldbu	r5,140(sp)
 800ed18:	d9401d85 	stb	r5,118(sp)
 800ed1c:	003cae06 	br	800dfd8 <___vfiprintf_internal_r+0x738>
 800ed20:	d8c02303 	ldbu	r3,140(sp)
 800ed24:	d8c01d85 	stb	r3,118(sp)
 800ed28:	003d1406 	br	800e17c <___vfiprintf_internal_r+0x8dc>
 800ed2c:	d8c02303 	ldbu	r3,140(sp)
 800ed30:	d8c01d85 	stb	r3,118(sp)
 800ed34:	003cca06 	br	800e060 <___vfiprintf_internal_r+0x7c0>
 800ed38:	8880004c 	andi	r2,r17,1
 800ed3c:	002b883a 	mov	r21,zero
 800ed40:	10000526 	beq	r2,zero,800ed58 <___vfiprintf_internal_r+0x14b8>
 800ed44:	00800c04 	movi	r2,48
 800ed48:	d88019c5 	stb	r2,103(sp)
 800ed4c:	dd002817 	ldw	r20,160(sp)
 800ed50:	ddc019c4 	addi	r23,sp,103
 800ed54:	003bd506 	br	800dcac <___vfiprintf_internal_r+0x40c>
 800ed58:	0029883a 	mov	r20,zero
 800ed5c:	ddc01a04 	addi	r23,sp,104
 800ed60:	003bd206 	br	800dcac <___vfiprintf_internal_r+0x40c>
 800ed64:	d9002303 	ldbu	r4,140(sp)
 800ed68:	d9001d85 	stb	r4,118(sp)
 800ed6c:	003da606 	br	800e408 <___vfiprintf_internal_r+0xb68>
 800ed70:	d8c02303 	ldbu	r3,140(sp)
 800ed74:	d8c01d85 	stb	r3,118(sp)
 800ed78:	003c7606 	br	800df54 <___vfiprintf_internal_r+0x6b4>
 800ed7c:	d8c02303 	ldbu	r3,140(sp)
 800ed80:	d8c01d85 	stb	r3,118(sp)
 800ed84:	003c6506 	br	800df1c <___vfiprintf_internal_r+0x67c>
 800ed88:	d9002303 	ldbu	r4,140(sp)
 800ed8c:	d9001d85 	stb	r4,118(sp)
 800ed90:	003d3d06 	br	800e288 <___vfiprintf_internal_r+0x9e8>
 800ed94:	d8c02303 	ldbu	r3,140(sp)
 800ed98:	d8c01d85 	stb	r3,118(sp)
 800ed9c:	003d1d06 	br	800e214 <___vfiprintf_internal_r+0x974>
 800eda0:	d8c02303 	ldbu	r3,140(sp)
 800eda4:	d8c01d85 	stb	r3,118(sp)
 800eda8:	003d0306 	br	800e1b8 <___vfiprintf_internal_r+0x918>

0800edac <__vfiprintf_internal>:
 800edac:	00820074 	movhi	r2,2049
 800edb0:	109c2704 	addi	r2,r2,28828
 800edb4:	300f883a 	mov	r7,r6
 800edb8:	280d883a 	mov	r6,r5
 800edbc:	200b883a 	mov	r5,r4
 800edc0:	11000017 	ldw	r4,0(r2)
 800edc4:	800d8a01 	jmpi	800d8a0 <___vfiprintf_internal_r>

0800edc8 <__sbprintf>:
 800edc8:	2880030b 	ldhu	r2,12(r5)
 800edcc:	2ac01917 	ldw	r11,100(r5)
 800edd0:	2a80038b 	ldhu	r10,14(r5)
 800edd4:	2a400717 	ldw	r9,28(r5)
 800edd8:	2a000917 	ldw	r8,36(r5)
 800eddc:	defee204 	addi	sp,sp,-1144
 800ede0:	00c10004 	movi	r3,1024
 800ede4:	dc011a15 	stw	r16,1128(sp)
 800ede8:	10bfff4c 	andi	r2,r2,65533
 800edec:	2821883a 	mov	r16,r5
 800edf0:	d8cb883a 	add	r5,sp,r3
 800edf4:	dc811c15 	stw	r18,1136(sp)
 800edf8:	dc411b15 	stw	r17,1132(sp)
 800edfc:	dfc11d15 	stw	ra,1140(sp)
 800ee00:	2025883a 	mov	r18,r4
 800ee04:	d881030d 	sth	r2,1036(sp)
 800ee08:	dac11915 	stw	r11,1124(sp)
 800ee0c:	da81038d 	sth	r10,1038(sp)
 800ee10:	da410715 	stw	r9,1052(sp)
 800ee14:	da010915 	stw	r8,1060(sp)
 800ee18:	dec10015 	stw	sp,1024(sp)
 800ee1c:	dec10415 	stw	sp,1040(sp)
 800ee20:	d8c10215 	stw	r3,1032(sp)
 800ee24:	d8c10515 	stw	r3,1044(sp)
 800ee28:	d8010615 	stw	zero,1048(sp)
 800ee2c:	800d8a00 	call	800d8a0 <___vfiprintf_internal_r>
 800ee30:	1023883a 	mov	r17,r2
 800ee34:	10000416 	blt	r2,zero,800ee48 <__sbprintf+0x80>
 800ee38:	d9410004 	addi	r5,sp,1024
 800ee3c:	9009883a 	mov	r4,r18
 800ee40:	800a1280 	call	800a128 <_fflush_r>
 800ee44:	10000d1e 	bne	r2,zero,800ee7c <__sbprintf+0xb4>
 800ee48:	d881030b 	ldhu	r2,1036(sp)
 800ee4c:	1080100c 	andi	r2,r2,64
 800ee50:	10000326 	beq	r2,zero,800ee60 <__sbprintf+0x98>
 800ee54:	8080030b 	ldhu	r2,12(r16)
 800ee58:	10801014 	ori	r2,r2,64
 800ee5c:	8080030d 	sth	r2,12(r16)
 800ee60:	8805883a 	mov	r2,r17
 800ee64:	dfc11d17 	ldw	ra,1140(sp)
 800ee68:	dc811c17 	ldw	r18,1136(sp)
 800ee6c:	dc411b17 	ldw	r17,1132(sp)
 800ee70:	dc011a17 	ldw	r16,1128(sp)
 800ee74:	dec11e04 	addi	sp,sp,1144
 800ee78:	f800283a 	ret
 800ee7c:	047fffc4 	movi	r17,-1
 800ee80:	003ff106 	br	800ee48 <__sbprintf+0x80>

0800ee84 <__swbuf_r>:
 800ee84:	defffb04 	addi	sp,sp,-20
 800ee88:	dcc00315 	stw	r19,12(sp)
 800ee8c:	dc800215 	stw	r18,8(sp)
 800ee90:	dc000015 	stw	r16,0(sp)
 800ee94:	dfc00415 	stw	ra,16(sp)
 800ee98:	dc400115 	stw	r17,4(sp)
 800ee9c:	2025883a 	mov	r18,r4
 800eea0:	2827883a 	mov	r19,r5
 800eea4:	3021883a 	mov	r16,r6
 800eea8:	20000226 	beq	r4,zero,800eeb4 <__swbuf_r+0x30>
 800eeac:	20800e17 	ldw	r2,56(r4)
 800eeb0:	10004226 	beq	r2,zero,800efbc <__swbuf_r+0x138>
 800eeb4:	80800617 	ldw	r2,24(r16)
 800eeb8:	8100030b 	ldhu	r4,12(r16)
 800eebc:	80800215 	stw	r2,8(r16)
 800eec0:	2080020c 	andi	r2,r4,8
 800eec4:	10003626 	beq	r2,zero,800efa0 <__swbuf_r+0x11c>
 800eec8:	80c00417 	ldw	r3,16(r16)
 800eecc:	18003426 	beq	r3,zero,800efa0 <__swbuf_r+0x11c>
 800eed0:	2088000c 	andi	r2,r4,8192
 800eed4:	9c403fcc 	andi	r17,r19,255
 800eed8:	10001a26 	beq	r2,zero,800ef44 <__swbuf_r+0xc0>
 800eedc:	80800017 	ldw	r2,0(r16)
 800eee0:	81000517 	ldw	r4,20(r16)
 800eee4:	10c7c83a 	sub	r3,r2,r3
 800eee8:	1900200e 	bge	r3,r4,800ef6c <__swbuf_r+0xe8>
 800eeec:	18c00044 	addi	r3,r3,1
 800eef0:	81000217 	ldw	r4,8(r16)
 800eef4:	11400044 	addi	r5,r2,1
 800eef8:	81400015 	stw	r5,0(r16)
 800eefc:	213fffc4 	addi	r4,r4,-1
 800ef00:	81000215 	stw	r4,8(r16)
 800ef04:	14c00005 	stb	r19,0(r2)
 800ef08:	80800517 	ldw	r2,20(r16)
 800ef0c:	10c01e26 	beq	r2,r3,800ef88 <__swbuf_r+0x104>
 800ef10:	8080030b 	ldhu	r2,12(r16)
 800ef14:	1080004c 	andi	r2,r2,1
 800ef18:	10000226 	beq	r2,zero,800ef24 <__swbuf_r+0xa0>
 800ef1c:	00800284 	movi	r2,10
 800ef20:	88801926 	beq	r17,r2,800ef88 <__swbuf_r+0x104>
 800ef24:	8805883a 	mov	r2,r17
 800ef28:	dfc00417 	ldw	ra,16(sp)
 800ef2c:	dcc00317 	ldw	r19,12(sp)
 800ef30:	dc800217 	ldw	r18,8(sp)
 800ef34:	dc400117 	ldw	r17,4(sp)
 800ef38:	dc000017 	ldw	r16,0(sp)
 800ef3c:	dec00504 	addi	sp,sp,20
 800ef40:	f800283a 	ret
 800ef44:	81401917 	ldw	r5,100(r16)
 800ef48:	00b7ffc4 	movi	r2,-8193
 800ef4c:	21080014 	ori	r4,r4,8192
 800ef50:	2884703a 	and	r2,r5,r2
 800ef54:	80801915 	stw	r2,100(r16)
 800ef58:	80800017 	ldw	r2,0(r16)
 800ef5c:	8100030d 	sth	r4,12(r16)
 800ef60:	81000517 	ldw	r4,20(r16)
 800ef64:	10c7c83a 	sub	r3,r2,r3
 800ef68:	193fe016 	blt	r3,r4,800eeec <__swbuf_r+0x68>
 800ef6c:	800b883a 	mov	r5,r16
 800ef70:	9009883a 	mov	r4,r18
 800ef74:	800a1280 	call	800a128 <_fflush_r>
 800ef78:	1000071e 	bne	r2,zero,800ef98 <__swbuf_r+0x114>
 800ef7c:	80800017 	ldw	r2,0(r16)
 800ef80:	00c00044 	movi	r3,1
 800ef84:	003fda06 	br	800eef0 <__swbuf_r+0x6c>
 800ef88:	800b883a 	mov	r5,r16
 800ef8c:	9009883a 	mov	r4,r18
 800ef90:	800a1280 	call	800a128 <_fflush_r>
 800ef94:	103fe326 	beq	r2,zero,800ef24 <__swbuf_r+0xa0>
 800ef98:	00bfffc4 	movi	r2,-1
 800ef9c:	003fe206 	br	800ef28 <__swbuf_r+0xa4>
 800efa0:	800b883a 	mov	r5,r16
 800efa4:	9009883a 	mov	r4,r18
 800efa8:	80085080 	call	8008508 <__swsetup_r>
 800efac:	103ffa1e 	bne	r2,zero,800ef98 <__swbuf_r+0x114>
 800efb0:	8100030b 	ldhu	r4,12(r16)
 800efb4:	80c00417 	ldw	r3,16(r16)
 800efb8:	003fc506 	br	800eed0 <__swbuf_r+0x4c>
 800efbc:	800a5140 	call	800a514 <__sinit>
 800efc0:	003fbc06 	br	800eeb4 <__swbuf_r+0x30>

0800efc4 <__swbuf>:
 800efc4:	00820074 	movhi	r2,2049
 800efc8:	109c2704 	addi	r2,r2,28828
 800efcc:	280d883a 	mov	r6,r5
 800efd0:	200b883a 	mov	r5,r4
 800efd4:	11000017 	ldw	r4,0(r2)
 800efd8:	800ee841 	jmpi	800ee84 <__swbuf_r>

0800efdc <_write_r>:
 800efdc:	defffd04 	addi	sp,sp,-12
 800efe0:	2805883a 	mov	r2,r5
 800efe4:	dc000015 	stw	r16,0(sp)
 800efe8:	040200b4 	movhi	r16,2050
 800efec:	dc400115 	stw	r17,4(sp)
 800eff0:	300b883a 	mov	r5,r6
 800eff4:	84232a04 	addi	r16,r16,-29528
 800eff8:	2023883a 	mov	r17,r4
 800effc:	380d883a 	mov	r6,r7
 800f000:	1009883a 	mov	r4,r2
 800f004:	dfc00215 	stw	ra,8(sp)
 800f008:	80000015 	stw	zero,0(r16)
 800f00c:	801311c0 	call	801311c <write>
 800f010:	00ffffc4 	movi	r3,-1
 800f014:	10c00526 	beq	r2,r3,800f02c <_write_r+0x50>
 800f018:	dfc00217 	ldw	ra,8(sp)
 800f01c:	dc400117 	ldw	r17,4(sp)
 800f020:	dc000017 	ldw	r16,0(sp)
 800f024:	dec00304 	addi	sp,sp,12
 800f028:	f800283a 	ret
 800f02c:	80c00017 	ldw	r3,0(r16)
 800f030:	183ff926 	beq	r3,zero,800f018 <_write_r+0x3c>
 800f034:	88c00015 	stw	r3,0(r17)
 800f038:	003ff706 	br	800f018 <_write_r+0x3c>

0800f03c <_close_r>:
 800f03c:	defffd04 	addi	sp,sp,-12
 800f040:	dc000015 	stw	r16,0(sp)
 800f044:	040200b4 	movhi	r16,2050
 800f048:	dc400115 	stw	r17,4(sp)
 800f04c:	84232a04 	addi	r16,r16,-29528
 800f050:	2023883a 	mov	r17,r4
 800f054:	2809883a 	mov	r4,r5
 800f058:	dfc00215 	stw	ra,8(sp)
 800f05c:	80000015 	stw	zero,0(r16)
 800f060:	80124780 	call	8012478 <close>
 800f064:	00ffffc4 	movi	r3,-1
 800f068:	10c00526 	beq	r2,r3,800f080 <_close_r+0x44>
 800f06c:	dfc00217 	ldw	ra,8(sp)
 800f070:	dc400117 	ldw	r17,4(sp)
 800f074:	dc000017 	ldw	r16,0(sp)
 800f078:	dec00304 	addi	sp,sp,12
 800f07c:	f800283a 	ret
 800f080:	80c00017 	ldw	r3,0(r16)
 800f084:	183ff926 	beq	r3,zero,800f06c <_close_r+0x30>
 800f088:	88c00015 	stw	r3,0(r17)
 800f08c:	003ff706 	br	800f06c <_close_r+0x30>

0800f090 <_calloc_r>:
 800f090:	defffe04 	addi	sp,sp,-8
 800f094:	2805883a 	mov	r2,r5
 800f098:	dc000015 	stw	r16,0(sp)
 800f09c:	300b883a 	mov	r5,r6
 800f0a0:	2021883a 	mov	r16,r4
 800f0a4:	1009883a 	mov	r4,r2
 800f0a8:	dfc00115 	stw	ra,4(sp)
 800f0ac:	80050200 	call	8005020 <__mulsi3>
 800f0b0:	100b883a 	mov	r5,r2
 800f0b4:	8009883a 	mov	r4,r16
 800f0b8:	800b2dc0 	call	800b2dc <_malloc_r>
 800f0bc:	10002926 	beq	r2,zero,800f164 <_calloc_r+0xd4>
 800f0c0:	11bfff17 	ldw	r6,-4(r2)
 800f0c4:	1021883a 	mov	r16,r2
 800f0c8:	00bfff04 	movi	r2,-4
 800f0cc:	308c703a 	and	r6,r6,r2
 800f0d0:	00c00904 	movi	r3,36
 800f0d4:	308d883a 	add	r6,r6,r2
 800f0d8:	19801636 	bltu	r3,r6,800f134 <_calloc_r+0xa4>
 800f0dc:	008004c4 	movi	r2,19
 800f0e0:	11800b2e 	bgeu	r2,r6,800f110 <_calloc_r+0x80>
 800f0e4:	80000015 	stw	zero,0(r16)
 800f0e8:	80000115 	stw	zero,4(r16)
 800f0ec:	008006c4 	movi	r2,27
 800f0f0:	11801a2e 	bgeu	r2,r6,800f15c <_calloc_r+0xcc>
 800f0f4:	80000215 	stw	zero,8(r16)
 800f0f8:	80000315 	stw	zero,12(r16)
 800f0fc:	30c0151e 	bne	r6,r3,800f154 <_calloc_r+0xc4>
 800f100:	80000415 	stw	zero,16(r16)
 800f104:	80800604 	addi	r2,r16,24
 800f108:	80000515 	stw	zero,20(r16)
 800f10c:	00000106 	br	800f114 <_calloc_r+0x84>
 800f110:	8005883a 	mov	r2,r16
 800f114:	10000015 	stw	zero,0(r2)
 800f118:	10000115 	stw	zero,4(r2)
 800f11c:	10000215 	stw	zero,8(r2)
 800f120:	8005883a 	mov	r2,r16
 800f124:	dfc00117 	ldw	ra,4(sp)
 800f128:	dc000017 	ldw	r16,0(sp)
 800f12c:	dec00204 	addi	sp,sp,8
 800f130:	f800283a 	ret
 800f134:	000b883a 	mov	r5,zero
 800f138:	8009883a 	mov	r4,r16
 800f13c:	8005c200 	call	8005c20 <memset>
 800f140:	8005883a 	mov	r2,r16
 800f144:	dfc00117 	ldw	ra,4(sp)
 800f148:	dc000017 	ldw	r16,0(sp)
 800f14c:	dec00204 	addi	sp,sp,8
 800f150:	f800283a 	ret
 800f154:	80800404 	addi	r2,r16,16
 800f158:	003fee06 	br	800f114 <_calloc_r+0x84>
 800f15c:	80800204 	addi	r2,r16,8
 800f160:	003fec06 	br	800f114 <_calloc_r+0x84>
 800f164:	0005883a 	mov	r2,zero
 800f168:	003fee06 	br	800f124 <_calloc_r+0x94>

0800f16c <_fclose_r>:
 800f16c:	28003926 	beq	r5,zero,800f254 <_fclose_r+0xe8>
 800f170:	defffc04 	addi	sp,sp,-16
 800f174:	dc400115 	stw	r17,4(sp)
 800f178:	dc000015 	stw	r16,0(sp)
 800f17c:	dfc00315 	stw	ra,12(sp)
 800f180:	dc800215 	stw	r18,8(sp)
 800f184:	2023883a 	mov	r17,r4
 800f188:	2821883a 	mov	r16,r5
 800f18c:	20000226 	beq	r4,zero,800f198 <_fclose_r+0x2c>
 800f190:	20800e17 	ldw	r2,56(r4)
 800f194:	10002726 	beq	r2,zero,800f234 <_fclose_r+0xc8>
 800f198:	8080030f 	ldh	r2,12(r16)
 800f19c:	1000071e 	bne	r2,zero,800f1bc <_fclose_r+0x50>
 800f1a0:	0005883a 	mov	r2,zero
 800f1a4:	dfc00317 	ldw	ra,12(sp)
 800f1a8:	dc800217 	ldw	r18,8(sp)
 800f1ac:	dc400117 	ldw	r17,4(sp)
 800f1b0:	dc000017 	ldw	r16,0(sp)
 800f1b4:	dec00404 	addi	sp,sp,16
 800f1b8:	f800283a 	ret
 800f1bc:	800b883a 	mov	r5,r16
 800f1c0:	8809883a 	mov	r4,r17
 800f1c4:	8009f0c0 	call	8009f0c <__sflush_r>
 800f1c8:	1025883a 	mov	r18,r2
 800f1cc:	80800b17 	ldw	r2,44(r16)
 800f1d0:	10000426 	beq	r2,zero,800f1e4 <_fclose_r+0x78>
 800f1d4:	81400717 	ldw	r5,28(r16)
 800f1d8:	8809883a 	mov	r4,r17
 800f1dc:	103ee83a 	callr	r2
 800f1e0:	10001616 	blt	r2,zero,800f23c <_fclose_r+0xd0>
 800f1e4:	8080030b 	ldhu	r2,12(r16)
 800f1e8:	1080200c 	andi	r2,r2,128
 800f1ec:	1000151e 	bne	r2,zero,800f244 <_fclose_r+0xd8>
 800f1f0:	81400c17 	ldw	r5,48(r16)
 800f1f4:	28000526 	beq	r5,zero,800f20c <_fclose_r+0xa0>
 800f1f8:	80801004 	addi	r2,r16,64
 800f1fc:	28800226 	beq	r5,r2,800f208 <_fclose_r+0x9c>
 800f200:	8809883a 	mov	r4,r17
 800f204:	800a6880 	call	800a688 <_free_r>
 800f208:	80000c15 	stw	zero,48(r16)
 800f20c:	81401117 	ldw	r5,68(r16)
 800f210:	28000326 	beq	r5,zero,800f220 <_fclose_r+0xb4>
 800f214:	8809883a 	mov	r4,r17
 800f218:	800a6880 	call	800a688 <_free_r>
 800f21c:	80001115 	stw	zero,68(r16)
 800f220:	800a5240 	call	800a524 <__sfp_lock_acquire>
 800f224:	8000030d 	sth	zero,12(r16)
 800f228:	800a5280 	call	800a528 <__sfp_lock_release>
 800f22c:	9005883a 	mov	r2,r18
 800f230:	003fdc06 	br	800f1a4 <_fclose_r+0x38>
 800f234:	800a5140 	call	800a514 <__sinit>
 800f238:	003fd706 	br	800f198 <_fclose_r+0x2c>
 800f23c:	04bfffc4 	movi	r18,-1
 800f240:	003fe806 	br	800f1e4 <_fclose_r+0x78>
 800f244:	81400417 	ldw	r5,16(r16)
 800f248:	8809883a 	mov	r4,r17
 800f24c:	800a6880 	call	800a688 <_free_r>
 800f250:	003fe706 	br	800f1f0 <_fclose_r+0x84>
 800f254:	0005883a 	mov	r2,zero
 800f258:	f800283a 	ret

0800f25c <fclose>:
 800f25c:	00820074 	movhi	r2,2049
 800f260:	109c2704 	addi	r2,r2,28828
 800f264:	200b883a 	mov	r5,r4
 800f268:	11000017 	ldw	r4,0(r2)
 800f26c:	800f16c1 	jmpi	800f16c <_fclose_r>

0800f270 <__fputwc>:
 800f270:	defff804 	addi	sp,sp,-32
 800f274:	dcc00415 	stw	r19,16(sp)
 800f278:	dc800315 	stw	r18,12(sp)
 800f27c:	dc000115 	stw	r16,4(sp)
 800f280:	dfc00715 	stw	ra,28(sp)
 800f284:	dd400615 	stw	r21,24(sp)
 800f288:	dd000515 	stw	r20,20(sp)
 800f28c:	dc400215 	stw	r17,8(sp)
 800f290:	2027883a 	mov	r19,r4
 800f294:	2825883a 	mov	r18,r5
 800f298:	3021883a 	mov	r16,r6
 800f29c:	800b0cc0 	call	800b0cc <__locale_mb_cur_max>
 800f2a0:	00c00044 	movi	r3,1
 800f2a4:	10c03e26 	beq	r2,r3,800f3a0 <__fputwc+0x130>
 800f2a8:	81c01704 	addi	r7,r16,92
 800f2ac:	900d883a 	mov	r6,r18
 800f2b0:	d80b883a 	mov	r5,sp
 800f2b4:	9809883a 	mov	r4,r19
 800f2b8:	800f5e80 	call	800f5e8 <_wcrtomb_r>
 800f2bc:	1029883a 	mov	r20,r2
 800f2c0:	00bfffc4 	movi	r2,-1
 800f2c4:	a0802026 	beq	r20,r2,800f348 <__fputwc+0xd8>
 800f2c8:	d9400003 	ldbu	r5,0(sp)
 800f2cc:	a0001c26 	beq	r20,zero,800f340 <__fputwc+0xd0>
 800f2d0:	0023883a 	mov	r17,zero
 800f2d4:	05400284 	movi	r21,10
 800f2d8:	00000906 	br	800f300 <__fputwc+0x90>
 800f2dc:	80800017 	ldw	r2,0(r16)
 800f2e0:	11400005 	stb	r5,0(r2)
 800f2e4:	80c00017 	ldw	r3,0(r16)
 800f2e8:	18c00044 	addi	r3,r3,1
 800f2ec:	80c00015 	stw	r3,0(r16)
 800f2f0:	8c400044 	addi	r17,r17,1
 800f2f4:	dc45883a 	add	r2,sp,r17
 800f2f8:	8d00112e 	bgeu	r17,r20,800f340 <__fputwc+0xd0>
 800f2fc:	11400003 	ldbu	r5,0(r2)
 800f300:	80c00217 	ldw	r3,8(r16)
 800f304:	18ffffc4 	addi	r3,r3,-1
 800f308:	80c00215 	stw	r3,8(r16)
 800f30c:	183ff30e 	bge	r3,zero,800f2dc <__fputwc+0x6c>
 800f310:	80800617 	ldw	r2,24(r16)
 800f314:	18801916 	blt	r3,r2,800f37c <__fputwc+0x10c>
 800f318:	80800017 	ldw	r2,0(r16)
 800f31c:	11400005 	stb	r5,0(r2)
 800f320:	80800017 	ldw	r2,0(r16)
 800f324:	10c00003 	ldbu	r3,0(r2)
 800f328:	10800044 	addi	r2,r2,1
 800f32c:	1d402326 	beq	r3,r21,800f3bc <__fputwc+0x14c>
 800f330:	80800015 	stw	r2,0(r16)
 800f334:	8c400044 	addi	r17,r17,1
 800f338:	dc45883a 	add	r2,sp,r17
 800f33c:	8d3fef36 	bltu	r17,r20,800f2fc <__fputwc+0x8c>
 800f340:	9005883a 	mov	r2,r18
 800f344:	00000406 	br	800f358 <__fputwc+0xe8>
 800f348:	80c0030b 	ldhu	r3,12(r16)
 800f34c:	a005883a 	mov	r2,r20
 800f350:	18c01014 	ori	r3,r3,64
 800f354:	80c0030d 	sth	r3,12(r16)
 800f358:	dfc00717 	ldw	ra,28(sp)
 800f35c:	dd400617 	ldw	r21,24(sp)
 800f360:	dd000517 	ldw	r20,20(sp)
 800f364:	dcc00417 	ldw	r19,16(sp)
 800f368:	dc800317 	ldw	r18,12(sp)
 800f36c:	dc400217 	ldw	r17,8(sp)
 800f370:	dc000117 	ldw	r16,4(sp)
 800f374:	dec00804 	addi	sp,sp,32
 800f378:	f800283a 	ret
 800f37c:	800d883a 	mov	r6,r16
 800f380:	29403fcc 	andi	r5,r5,255
 800f384:	9809883a 	mov	r4,r19
 800f388:	800ee840 	call	800ee84 <__swbuf_r>
 800f38c:	10bfffe0 	cmpeqi	r2,r2,-1
 800f390:	10803fcc 	andi	r2,r2,255
 800f394:	103fd626 	beq	r2,zero,800f2f0 <__fputwc+0x80>
 800f398:	00bfffc4 	movi	r2,-1
 800f39c:	003fee06 	br	800f358 <__fputwc+0xe8>
 800f3a0:	90ffffc4 	addi	r3,r18,-1
 800f3a4:	01003f84 	movi	r4,254
 800f3a8:	20ffbf36 	bltu	r4,r3,800f2a8 <__fputwc+0x38>
 800f3ac:	900b883a 	mov	r5,r18
 800f3b0:	dc800005 	stb	r18,0(sp)
 800f3b4:	1029883a 	mov	r20,r2
 800f3b8:	003fc506 	br	800f2d0 <__fputwc+0x60>
 800f3bc:	800d883a 	mov	r6,r16
 800f3c0:	a80b883a 	mov	r5,r21
 800f3c4:	9809883a 	mov	r4,r19
 800f3c8:	800ee840 	call	800ee84 <__swbuf_r>
 800f3cc:	10bfffe0 	cmpeqi	r2,r2,-1
 800f3d0:	003fef06 	br	800f390 <__fputwc+0x120>

0800f3d4 <_fputwc_r>:
 800f3d4:	3080030b 	ldhu	r2,12(r6)
 800f3d8:	10c8000c 	andi	r3,r2,8192
 800f3dc:	1800051e 	bne	r3,zero,800f3f4 <_fputwc_r+0x20>
 800f3e0:	30c01917 	ldw	r3,100(r6)
 800f3e4:	10880014 	ori	r2,r2,8192
 800f3e8:	3080030d 	sth	r2,12(r6)
 800f3ec:	18880014 	ori	r2,r3,8192
 800f3f0:	30801915 	stw	r2,100(r6)
 800f3f4:	800f2701 	jmpi	800f270 <__fputwc>

0800f3f8 <fputwc>:
 800f3f8:	00820074 	movhi	r2,2049
 800f3fc:	defffc04 	addi	sp,sp,-16
 800f400:	109c2704 	addi	r2,r2,28828
 800f404:	dc000115 	stw	r16,4(sp)
 800f408:	14000017 	ldw	r16,0(r2)
 800f40c:	dc400215 	stw	r17,8(sp)
 800f410:	dfc00315 	stw	ra,12(sp)
 800f414:	2023883a 	mov	r17,r4
 800f418:	80000226 	beq	r16,zero,800f424 <fputwc+0x2c>
 800f41c:	80800e17 	ldw	r2,56(r16)
 800f420:	10001026 	beq	r2,zero,800f464 <fputwc+0x6c>
 800f424:	2880030b 	ldhu	r2,12(r5)
 800f428:	10c8000c 	andi	r3,r2,8192
 800f42c:	1800051e 	bne	r3,zero,800f444 <fputwc+0x4c>
 800f430:	28c01917 	ldw	r3,100(r5)
 800f434:	10880014 	ori	r2,r2,8192
 800f438:	2880030d 	sth	r2,12(r5)
 800f43c:	18880014 	ori	r2,r3,8192
 800f440:	28801915 	stw	r2,100(r5)
 800f444:	280d883a 	mov	r6,r5
 800f448:	8009883a 	mov	r4,r16
 800f44c:	880b883a 	mov	r5,r17
 800f450:	dfc00317 	ldw	ra,12(sp)
 800f454:	dc400217 	ldw	r17,8(sp)
 800f458:	dc000117 	ldw	r16,4(sp)
 800f45c:	dec00404 	addi	sp,sp,16
 800f460:	800f2701 	jmpi	800f270 <__fputwc>
 800f464:	8009883a 	mov	r4,r16
 800f468:	d9400015 	stw	r5,0(sp)
 800f46c:	800a5140 	call	800a514 <__sinit>
 800f470:	d9400017 	ldw	r5,0(sp)
 800f474:	003feb06 	br	800f424 <fputwc+0x2c>

0800f478 <_fstat_r>:
 800f478:	defffd04 	addi	sp,sp,-12
 800f47c:	2805883a 	mov	r2,r5
 800f480:	dc000015 	stw	r16,0(sp)
 800f484:	040200b4 	movhi	r16,2050
 800f488:	dc400115 	stw	r17,4(sp)
 800f48c:	84232a04 	addi	r16,r16,-29528
 800f490:	2023883a 	mov	r17,r4
 800f494:	300b883a 	mov	r5,r6
 800f498:	1009883a 	mov	r4,r2
 800f49c:	dfc00215 	stw	ra,8(sp)
 800f4a0:	80000015 	stw	zero,0(r16)
 800f4a4:	80125b80 	call	80125b8 <fstat>
 800f4a8:	00ffffc4 	movi	r3,-1
 800f4ac:	10c00526 	beq	r2,r3,800f4c4 <_fstat_r+0x4c>
 800f4b0:	dfc00217 	ldw	ra,8(sp)
 800f4b4:	dc400117 	ldw	r17,4(sp)
 800f4b8:	dc000017 	ldw	r16,0(sp)
 800f4bc:	dec00304 	addi	sp,sp,12
 800f4c0:	f800283a 	ret
 800f4c4:	80c00017 	ldw	r3,0(r16)
 800f4c8:	183ff926 	beq	r3,zero,800f4b0 <_fstat_r+0x38>
 800f4cc:	88c00015 	stw	r3,0(r17)
 800f4d0:	003ff706 	br	800f4b0 <_fstat_r+0x38>

0800f4d4 <_isatty_r>:
 800f4d4:	defffd04 	addi	sp,sp,-12
 800f4d8:	dc000015 	stw	r16,0(sp)
 800f4dc:	040200b4 	movhi	r16,2050
 800f4e0:	dc400115 	stw	r17,4(sp)
 800f4e4:	84232a04 	addi	r16,r16,-29528
 800f4e8:	2023883a 	mov	r17,r4
 800f4ec:	2809883a 	mov	r4,r5
 800f4f0:	dfc00215 	stw	ra,8(sp)
 800f4f4:	80000015 	stw	zero,0(r16)
 800f4f8:	80128a00 	call	80128a0 <isatty>
 800f4fc:	00ffffc4 	movi	r3,-1
 800f500:	10c00526 	beq	r2,r3,800f518 <_isatty_r+0x44>
 800f504:	dfc00217 	ldw	ra,8(sp)
 800f508:	dc400117 	ldw	r17,4(sp)
 800f50c:	dc000017 	ldw	r16,0(sp)
 800f510:	dec00304 	addi	sp,sp,12
 800f514:	f800283a 	ret
 800f518:	80c00017 	ldw	r3,0(r16)
 800f51c:	183ff926 	beq	r3,zero,800f504 <_isatty_r+0x30>
 800f520:	88c00015 	stw	r3,0(r17)
 800f524:	003ff706 	br	800f504 <_isatty_r+0x30>

0800f528 <_lseek_r>:
 800f528:	defffd04 	addi	sp,sp,-12
 800f52c:	2805883a 	mov	r2,r5
 800f530:	dc000015 	stw	r16,0(sp)
 800f534:	040200b4 	movhi	r16,2050
 800f538:	dc400115 	stw	r17,4(sp)
 800f53c:	300b883a 	mov	r5,r6
 800f540:	84232a04 	addi	r16,r16,-29528
 800f544:	2023883a 	mov	r17,r4
 800f548:	380d883a 	mov	r6,r7
 800f54c:	1009883a 	mov	r4,r2
 800f550:	dfc00215 	stw	ra,8(sp)
 800f554:	80000015 	stw	zero,0(r16)
 800f558:	8012a740 	call	8012a74 <lseek>
 800f55c:	00ffffc4 	movi	r3,-1
 800f560:	10c00526 	beq	r2,r3,800f578 <_lseek_r+0x50>
 800f564:	dfc00217 	ldw	ra,8(sp)
 800f568:	dc400117 	ldw	r17,4(sp)
 800f56c:	dc000017 	ldw	r16,0(sp)
 800f570:	dec00304 	addi	sp,sp,12
 800f574:	f800283a 	ret
 800f578:	80c00017 	ldw	r3,0(r16)
 800f57c:	183ff926 	beq	r3,zero,800f564 <_lseek_r+0x3c>
 800f580:	88c00015 	stw	r3,0(r17)
 800f584:	003ff706 	br	800f564 <_lseek_r+0x3c>

0800f588 <_read_r>:
 800f588:	defffd04 	addi	sp,sp,-12
 800f58c:	2805883a 	mov	r2,r5
 800f590:	dc000015 	stw	r16,0(sp)
 800f594:	040200b4 	movhi	r16,2050
 800f598:	dc400115 	stw	r17,4(sp)
 800f59c:	300b883a 	mov	r5,r6
 800f5a0:	84232a04 	addi	r16,r16,-29528
 800f5a4:	2023883a 	mov	r17,r4
 800f5a8:	380d883a 	mov	r6,r7
 800f5ac:	1009883a 	mov	r4,r2
 800f5b0:	dfc00215 	stw	ra,8(sp)
 800f5b4:	80000015 	stw	zero,0(r16)
 800f5b8:	8012c500 	call	8012c50 <read>
 800f5bc:	00ffffc4 	movi	r3,-1
 800f5c0:	10c00526 	beq	r2,r3,800f5d8 <_read_r+0x50>
 800f5c4:	dfc00217 	ldw	ra,8(sp)
 800f5c8:	dc400117 	ldw	r17,4(sp)
 800f5cc:	dc000017 	ldw	r16,0(sp)
 800f5d0:	dec00304 	addi	sp,sp,12
 800f5d4:	f800283a 	ret
 800f5d8:	80c00017 	ldw	r3,0(r16)
 800f5dc:	183ff926 	beq	r3,zero,800f5c4 <_read_r+0x3c>
 800f5e0:	88c00015 	stw	r3,0(r17)
 800f5e4:	003ff706 	br	800f5c4 <_read_r+0x3c>

0800f5e8 <_wcrtomb_r>:
 800f5e8:	defff604 	addi	sp,sp,-40
 800f5ec:	00820074 	movhi	r2,2049
 800f5f0:	dc800815 	stw	r18,32(sp)
 800f5f4:	dc400715 	stw	r17,28(sp)
 800f5f8:	dc000615 	stw	r16,24(sp)
 800f5fc:	109c2b04 	addi	r2,r2,28844
 800f600:	dfc00915 	stw	ra,36(sp)
 800f604:	2021883a 	mov	r16,r4
 800f608:	3823883a 	mov	r17,r7
 800f60c:	14800017 	ldw	r18,0(r2)
 800f610:	28001426 	beq	r5,zero,800f664 <_wcrtomb_r+0x7c>
 800f614:	d9400415 	stw	r5,16(sp)
 800f618:	d9800515 	stw	r6,20(sp)
 800f61c:	800b0c00 	call	800b0c0 <__locale_charset>
 800f620:	d9800517 	ldw	r6,20(sp)
 800f624:	d9400417 	ldw	r5,16(sp)
 800f628:	100f883a 	mov	r7,r2
 800f62c:	dc400015 	stw	r17,0(sp)
 800f630:	8009883a 	mov	r4,r16
 800f634:	903ee83a 	callr	r18
 800f638:	00ffffc4 	movi	r3,-1
 800f63c:	10c0031e 	bne	r2,r3,800f64c <_wcrtomb_r+0x64>
 800f640:	88000015 	stw	zero,0(r17)
 800f644:	00c02284 	movi	r3,138
 800f648:	80c00015 	stw	r3,0(r16)
 800f64c:	dfc00917 	ldw	ra,36(sp)
 800f650:	dc800817 	ldw	r18,32(sp)
 800f654:	dc400717 	ldw	r17,28(sp)
 800f658:	dc000617 	ldw	r16,24(sp)
 800f65c:	dec00a04 	addi	sp,sp,40
 800f660:	f800283a 	ret
 800f664:	800b0c00 	call	800b0c0 <__locale_charset>
 800f668:	100f883a 	mov	r7,r2
 800f66c:	dc400015 	stw	r17,0(sp)
 800f670:	000d883a 	mov	r6,zero
 800f674:	d9400104 	addi	r5,sp,4
 800f678:	8009883a 	mov	r4,r16
 800f67c:	903ee83a 	callr	r18
 800f680:	003fed06 	br	800f638 <_wcrtomb_r+0x50>

0800f684 <wcrtomb>:
 800f684:	defff604 	addi	sp,sp,-40
 800f688:	00820074 	movhi	r2,2049
 800f68c:	dc800615 	stw	r18,24(sp)
 800f690:	dc400515 	stw	r17,20(sp)
 800f694:	109c2704 	addi	r2,r2,28828
 800f698:	dfc00915 	stw	ra,36(sp)
 800f69c:	dd000815 	stw	r20,32(sp)
 800f6a0:	dcc00715 	stw	r19,28(sp)
 800f6a4:	dc000415 	stw	r16,16(sp)
 800f6a8:	3025883a 	mov	r18,r6
 800f6ac:	14400017 	ldw	r17,0(r2)
 800f6b0:	20001926 	beq	r4,zero,800f718 <wcrtomb+0x94>
 800f6b4:	00820074 	movhi	r2,2049
 800f6b8:	109c2b04 	addi	r2,r2,28844
 800f6bc:	15000017 	ldw	r20,0(r2)
 800f6c0:	2021883a 	mov	r16,r4
 800f6c4:	2827883a 	mov	r19,r5
 800f6c8:	800b0c00 	call	800b0c0 <__locale_charset>
 800f6cc:	100f883a 	mov	r7,r2
 800f6d0:	dc800015 	stw	r18,0(sp)
 800f6d4:	980d883a 	mov	r6,r19
 800f6d8:	800b883a 	mov	r5,r16
 800f6dc:	8809883a 	mov	r4,r17
 800f6e0:	a03ee83a 	callr	r20
 800f6e4:	00ffffc4 	movi	r3,-1
 800f6e8:	10c0031e 	bne	r2,r3,800f6f8 <wcrtomb+0x74>
 800f6ec:	90000015 	stw	zero,0(r18)
 800f6f0:	00c02284 	movi	r3,138
 800f6f4:	88c00015 	stw	r3,0(r17)
 800f6f8:	dfc00917 	ldw	ra,36(sp)
 800f6fc:	dd000817 	ldw	r20,32(sp)
 800f700:	dcc00717 	ldw	r19,28(sp)
 800f704:	dc800617 	ldw	r18,24(sp)
 800f708:	dc400517 	ldw	r17,20(sp)
 800f70c:	dc000417 	ldw	r16,16(sp)
 800f710:	dec00a04 	addi	sp,sp,40
 800f714:	f800283a 	ret
 800f718:	00820074 	movhi	r2,2049
 800f71c:	109c2b04 	addi	r2,r2,28844
 800f720:	14000017 	ldw	r16,0(r2)
 800f724:	800b0c00 	call	800b0c0 <__locale_charset>
 800f728:	100f883a 	mov	r7,r2
 800f72c:	dc800015 	stw	r18,0(sp)
 800f730:	000d883a 	mov	r6,zero
 800f734:	d9400104 	addi	r5,sp,4
 800f738:	8809883a 	mov	r4,r17
 800f73c:	803ee83a 	callr	r16
 800f740:	003fe806 	br	800f6e4 <wcrtomb+0x60>

0800f744 <__ascii_wctomb>:
 800f744:	28000526 	beq	r5,zero,800f75c <__ascii_wctomb+0x18>
 800f748:	00803fc4 	movi	r2,255
 800f74c:	11800536 	bltu	r2,r6,800f764 <__ascii_wctomb+0x20>
 800f750:	29800005 	stb	r6,0(r5)
 800f754:	00800044 	movi	r2,1
 800f758:	f800283a 	ret
 800f75c:	0005883a 	mov	r2,zero
 800f760:	f800283a 	ret
 800f764:	00802284 	movi	r2,138
 800f768:	20800015 	stw	r2,0(r4)
 800f76c:	00bfffc4 	movi	r2,-1
 800f770:	f800283a 	ret

0800f774 <_wctomb_r>:
 800f774:	00820074 	movhi	r2,2049
 800f778:	defff904 	addi	sp,sp,-28
 800f77c:	109c2b04 	addi	r2,r2,28844
 800f780:	dfc00615 	stw	ra,24(sp)
 800f784:	dc400515 	stw	r17,20(sp)
 800f788:	dc000415 	stw	r16,16(sp)
 800f78c:	3823883a 	mov	r17,r7
 800f790:	14000017 	ldw	r16,0(r2)
 800f794:	d9000115 	stw	r4,4(sp)
 800f798:	d9400215 	stw	r5,8(sp)
 800f79c:	d9800315 	stw	r6,12(sp)
 800f7a0:	800b0c00 	call	800b0c0 <__locale_charset>
 800f7a4:	d9800317 	ldw	r6,12(sp)
 800f7a8:	d9400217 	ldw	r5,8(sp)
 800f7ac:	d9000117 	ldw	r4,4(sp)
 800f7b0:	100f883a 	mov	r7,r2
 800f7b4:	dc400015 	stw	r17,0(sp)
 800f7b8:	803ee83a 	callr	r16
 800f7bc:	dfc00617 	ldw	ra,24(sp)
 800f7c0:	dc400517 	ldw	r17,20(sp)
 800f7c4:	dc000417 	ldw	r16,16(sp)
 800f7c8:	dec00704 	addi	sp,sp,28
 800f7cc:	f800283a 	ret

0800f7d0 <__udivdi3>:
 800f7d0:	defff404 	addi	sp,sp,-48
 800f7d4:	dcc00515 	stw	r19,20(sp)
 800f7d8:	dc000215 	stw	r16,8(sp)
 800f7dc:	dfc00b15 	stw	ra,44(sp)
 800f7e0:	df000a15 	stw	fp,40(sp)
 800f7e4:	ddc00915 	stw	r23,36(sp)
 800f7e8:	dd800815 	stw	r22,32(sp)
 800f7ec:	dd400715 	stw	r21,28(sp)
 800f7f0:	dd000615 	stw	r20,24(sp)
 800f7f4:	dc800415 	stw	r18,16(sp)
 800f7f8:	dc400315 	stw	r17,12(sp)
 800f7fc:	2027883a 	mov	r19,r4
 800f800:	2821883a 	mov	r16,r5
 800f804:	3800461e 	bne	r7,zero,800f920 <__udivdi3+0x150>
 800f808:	3023883a 	mov	r17,r6
 800f80c:	2025883a 	mov	r18,r4
 800f810:	2980572e 	bgeu	r5,r6,800f970 <__udivdi3+0x1a0>
 800f814:	00bfffd4 	movui	r2,65535
 800f818:	282d883a 	mov	r22,r5
 800f81c:	1180b236 	bltu	r2,r6,800fae8 <__udivdi3+0x318>
 800f820:	00803fc4 	movi	r2,255
 800f824:	1185803a 	cmpltu	r2,r2,r6
 800f828:	100490fa 	slli	r2,r2,3
 800f82c:	3086d83a 	srl	r3,r6,r2
 800f830:	01020074 	movhi	r4,2049
 800f834:	2114a984 	addi	r4,r4,21158
 800f838:	20c7883a 	add	r3,r4,r3
 800f83c:	18c00003 	ldbu	r3,0(r3)
 800f840:	1885883a 	add	r2,r3,r2
 800f844:	00c00804 	movi	r3,32
 800f848:	1887c83a 	sub	r3,r3,r2
 800f84c:	18000526 	beq	r3,zero,800f864 <__udivdi3+0x94>
 800f850:	80e0983a 	sll	r16,r16,r3
 800f854:	9884d83a 	srl	r2,r19,r2
 800f858:	30e2983a 	sll	r17,r6,r3
 800f85c:	98e4983a 	sll	r18,r19,r3
 800f860:	142cb03a 	or	r22,r2,r16
 800f864:	882ad43a 	srli	r21,r17,16
 800f868:	b009883a 	mov	r4,r22
 800f86c:	8d3fffcc 	andi	r20,r17,65535
 800f870:	a80b883a 	mov	r5,r21
 800f874:	80104ec0 	call	80104ec <__umodsi3>
 800f878:	b009883a 	mov	r4,r22
 800f87c:	a80b883a 	mov	r5,r21
 800f880:	1027883a 	mov	r19,r2
 800f884:	80104880 	call	8010488 <__udivsi3>
 800f888:	100b883a 	mov	r5,r2
 800f88c:	a009883a 	mov	r4,r20
 800f890:	102d883a 	mov	r22,r2
 800f894:	80050200 	call	8005020 <__mulsi3>
 800f898:	9826943a 	slli	r19,r19,16
 800f89c:	9006d43a 	srli	r3,r18,16
 800f8a0:	1cc6b03a 	or	r3,r3,r19
 800f8a4:	1880052e 	bgeu	r3,r2,800f8bc <__udivdi3+0xec>
 800f8a8:	1c47883a 	add	r3,r3,r17
 800f8ac:	b13fffc4 	addi	r4,r22,-1
 800f8b0:	1c400136 	bltu	r3,r17,800f8b8 <__udivdi3+0xe8>
 800f8b4:	18814236 	bltu	r3,r2,800fdc0 <__udivdi3+0x5f0>
 800f8b8:	202d883a 	mov	r22,r4
 800f8bc:	18a1c83a 	sub	r16,r3,r2
 800f8c0:	8009883a 	mov	r4,r16
 800f8c4:	a80b883a 	mov	r5,r21
 800f8c8:	80104ec0 	call	80104ec <__umodsi3>
 800f8cc:	1027883a 	mov	r19,r2
 800f8d0:	8009883a 	mov	r4,r16
 800f8d4:	a80b883a 	mov	r5,r21
 800f8d8:	9826943a 	slli	r19,r19,16
 800f8dc:	80104880 	call	8010488 <__udivsi3>
 800f8e0:	100b883a 	mov	r5,r2
 800f8e4:	a009883a 	mov	r4,r20
 800f8e8:	94bfffcc 	andi	r18,r18,65535
 800f8ec:	1021883a 	mov	r16,r2
 800f8f0:	94e4b03a 	or	r18,r18,r19
 800f8f4:	80050200 	call	8005020 <__mulsi3>
 800f8f8:	9080052e 	bgeu	r18,r2,800f910 <__udivdi3+0x140>
 800f8fc:	8ca5883a 	add	r18,r17,r18
 800f900:	80ffffc4 	addi	r3,r16,-1
 800f904:	94410c36 	bltu	r18,r17,800fd38 <__udivdi3+0x568>
 800f908:	90810b2e 	bgeu	r18,r2,800fd38 <__udivdi3+0x568>
 800f90c:	843fff84 	addi	r16,r16,-2
 800f910:	b004943a 	slli	r2,r22,16
 800f914:	0007883a 	mov	r3,zero
 800f918:	1404b03a 	or	r2,r2,r16
 800f91c:	00005e06 	br	800fa98 <__udivdi3+0x2c8>
 800f920:	29c05b36 	bltu	r5,r7,800fa90 <__udivdi3+0x2c0>
 800f924:	00bfffd4 	movui	r2,65535
 800f928:	11c0672e 	bgeu	r2,r7,800fac8 <__udivdi3+0x2f8>
 800f92c:	00804034 	movhi	r2,256
 800f930:	10bfffc4 	addi	r2,r2,-1
 800f934:	11c10a36 	bltu	r2,r7,800fd60 <__udivdi3+0x590>
 800f938:	00800404 	movi	r2,16
 800f93c:	3886d83a 	srl	r3,r7,r2
 800f940:	01020074 	movhi	r4,2049
 800f944:	2114a984 	addi	r4,r4,21158
 800f948:	20c7883a 	add	r3,r4,r3
 800f94c:	18c00003 	ldbu	r3,0(r3)
 800f950:	05c00804 	movi	r23,32
 800f954:	1885883a 	add	r2,r3,r2
 800f958:	b8afc83a 	sub	r23,r23,r2
 800f95c:	b800671e 	bne	r23,zero,800fafc <__udivdi3+0x32c>
 800f960:	3c010536 	bltu	r7,r16,800fd78 <__udivdi3+0x5a8>
 800f964:	9985403a 	cmpgeu	r2,r19,r6
 800f968:	0007883a 	mov	r3,zero
 800f96c:	00004a06 	br	800fa98 <__udivdi3+0x2c8>
 800f970:	3000041e 	bne	r6,zero,800f984 <__udivdi3+0x1b4>
 800f974:	000b883a 	mov	r5,zero
 800f978:	01000044 	movi	r4,1
 800f97c:	80104880 	call	8010488 <__udivsi3>
 800f980:	1023883a 	mov	r17,r2
 800f984:	00bfffd4 	movui	r2,65535
 800f988:	1440532e 	bgeu	r2,r17,800fad8 <__udivdi3+0x308>
 800f98c:	00804034 	movhi	r2,256
 800f990:	10bfffc4 	addi	r2,r2,-1
 800f994:	1440f436 	bltu	r2,r17,800fd68 <__udivdi3+0x598>
 800f998:	00800404 	movi	r2,16
 800f99c:	8886d83a 	srl	r3,r17,r2
 800f9a0:	01020074 	movhi	r4,2049
 800f9a4:	2114a984 	addi	r4,r4,21158
 800f9a8:	20c7883a 	add	r3,r4,r3
 800f9ac:	18c00003 	ldbu	r3,0(r3)
 800f9b0:	1885883a 	add	r2,r3,r2
 800f9b4:	00c00804 	movi	r3,32
 800f9b8:	1887c83a 	sub	r3,r3,r2
 800f9bc:	1800a51e 	bne	r3,zero,800fc54 <__udivdi3+0x484>
 800f9c0:	882ad43a 	srli	r21,r17,16
 800f9c4:	8461c83a 	sub	r16,r16,r17
 800f9c8:	8d3fffcc 	andi	r20,r17,65535
 800f9cc:	00c00044 	movi	r3,1
 800f9d0:	a80b883a 	mov	r5,r21
 800f9d4:	8009883a 	mov	r4,r16
 800f9d8:	d8c00115 	stw	r3,4(sp)
 800f9dc:	80104ec0 	call	80104ec <__umodsi3>
 800f9e0:	a80b883a 	mov	r5,r21
 800f9e4:	8009883a 	mov	r4,r16
 800f9e8:	1027883a 	mov	r19,r2
 800f9ec:	80104880 	call	8010488 <__udivsi3>
 800f9f0:	a00b883a 	mov	r5,r20
 800f9f4:	1009883a 	mov	r4,r2
 800f9f8:	102d883a 	mov	r22,r2
 800f9fc:	80050200 	call	8005020 <__mulsi3>
 800fa00:	9826943a 	slli	r19,r19,16
 800fa04:	900ed43a 	srli	r7,r18,16
 800fa08:	d8c00117 	ldw	r3,4(sp)
 800fa0c:	3cceb03a 	or	r7,r7,r19
 800fa10:	3880052e 	bgeu	r7,r2,800fa28 <__udivdi3+0x258>
 800fa14:	3c4f883a 	add	r7,r7,r17
 800fa18:	b13fffc4 	addi	r4,r22,-1
 800fa1c:	3c400136 	bltu	r7,r17,800fa24 <__udivdi3+0x254>
 800fa20:	3880e436 	bltu	r7,r2,800fdb4 <__udivdi3+0x5e4>
 800fa24:	202d883a 	mov	r22,r4
 800fa28:	38a1c83a 	sub	r16,r7,r2
 800fa2c:	8009883a 	mov	r4,r16
 800fa30:	a80b883a 	mov	r5,r21
 800fa34:	d8c00115 	stw	r3,4(sp)
 800fa38:	80104ec0 	call	80104ec <__umodsi3>
 800fa3c:	1027883a 	mov	r19,r2
 800fa40:	8009883a 	mov	r4,r16
 800fa44:	a80b883a 	mov	r5,r21
 800fa48:	9826943a 	slli	r19,r19,16
 800fa4c:	80104880 	call	8010488 <__udivsi3>
 800fa50:	a00b883a 	mov	r5,r20
 800fa54:	1009883a 	mov	r4,r2
 800fa58:	94bfffcc 	andi	r18,r18,65535
 800fa5c:	1021883a 	mov	r16,r2
 800fa60:	94e4b03a 	or	r18,r18,r19
 800fa64:	80050200 	call	8005020 <__mulsi3>
 800fa68:	d8c00117 	ldw	r3,4(sp)
 800fa6c:	9080052e 	bgeu	r18,r2,800fa84 <__udivdi3+0x2b4>
 800fa70:	8ca5883a 	add	r18,r17,r18
 800fa74:	813fffc4 	addi	r4,r16,-1
 800fa78:	9440ad36 	bltu	r18,r17,800fd30 <__udivdi3+0x560>
 800fa7c:	9080ac2e 	bgeu	r18,r2,800fd30 <__udivdi3+0x560>
 800fa80:	843fff84 	addi	r16,r16,-2
 800fa84:	b004943a 	slli	r2,r22,16
 800fa88:	1404b03a 	or	r2,r2,r16
 800fa8c:	00000206 	br	800fa98 <__udivdi3+0x2c8>
 800fa90:	0007883a 	mov	r3,zero
 800fa94:	0005883a 	mov	r2,zero
 800fa98:	dfc00b17 	ldw	ra,44(sp)
 800fa9c:	df000a17 	ldw	fp,40(sp)
 800faa0:	ddc00917 	ldw	r23,36(sp)
 800faa4:	dd800817 	ldw	r22,32(sp)
 800faa8:	dd400717 	ldw	r21,28(sp)
 800faac:	dd000617 	ldw	r20,24(sp)
 800fab0:	dcc00517 	ldw	r19,20(sp)
 800fab4:	dc800417 	ldw	r18,16(sp)
 800fab8:	dc400317 	ldw	r17,12(sp)
 800fabc:	dc000217 	ldw	r16,8(sp)
 800fac0:	dec00c04 	addi	sp,sp,48
 800fac4:	f800283a 	ret
 800fac8:	00803fc4 	movi	r2,255
 800facc:	11c5803a 	cmpltu	r2,r2,r7
 800fad0:	100490fa 	slli	r2,r2,3
 800fad4:	003f9906 	br	800f93c <__udivdi3+0x16c>
 800fad8:	00803fc4 	movi	r2,255
 800fadc:	1445803a 	cmpltu	r2,r2,r17
 800fae0:	100490fa 	slli	r2,r2,3
 800fae4:	003fad06 	br	800f99c <__udivdi3+0x1cc>
 800fae8:	00804034 	movhi	r2,256
 800faec:	10bfffc4 	addi	r2,r2,-1
 800faf0:	11809f36 	bltu	r2,r6,800fd70 <__udivdi3+0x5a0>
 800faf4:	00800404 	movi	r2,16
 800faf8:	003f4c06 	br	800f82c <__udivdi3+0x5c>
 800fafc:	3dce983a 	sll	r7,r7,r23
 800fb00:	30b8d83a 	srl	fp,r6,r2
 800fb04:	80a2d83a 	srl	r17,r16,r2
 800fb08:	35cc983a 	sll	r6,r6,r23
 800fb0c:	3f38b03a 	or	fp,r7,fp
 800fb10:	e024d43a 	srli	r18,fp,16
 800fb14:	9884d83a 	srl	r2,r19,r2
 800fb18:	85e0983a 	sll	r16,r16,r23
 800fb1c:	8809883a 	mov	r4,r17
 800fb20:	900b883a 	mov	r5,r18
 800fb24:	d9800015 	stw	r6,0(sp)
 800fb28:	1420b03a 	or	r16,r2,r16
 800fb2c:	80104ec0 	call	80104ec <__umodsi3>
 800fb30:	900b883a 	mov	r5,r18
 800fb34:	8809883a 	mov	r4,r17
 800fb38:	1029883a 	mov	r20,r2
 800fb3c:	e5bfffcc 	andi	r22,fp,65535
 800fb40:	80104880 	call	8010488 <__udivsi3>
 800fb44:	100b883a 	mov	r5,r2
 800fb48:	b009883a 	mov	r4,r22
 800fb4c:	102b883a 	mov	r21,r2
 800fb50:	80050200 	call	8005020 <__mulsi3>
 800fb54:	a028943a 	slli	r20,r20,16
 800fb58:	8006d43a 	srli	r3,r16,16
 800fb5c:	1d06b03a 	or	r3,r3,r20
 800fb60:	1880042e 	bgeu	r3,r2,800fb74 <__udivdi3+0x3a4>
 800fb64:	1f07883a 	add	r3,r3,fp
 800fb68:	a93fffc4 	addi	r4,r21,-1
 800fb6c:	1f00892e 	bgeu	r3,fp,800fd94 <__udivdi3+0x5c4>
 800fb70:	202b883a 	mov	r21,r4
 800fb74:	18a3c83a 	sub	r17,r3,r2
 800fb78:	8809883a 	mov	r4,r17
 800fb7c:	900b883a 	mov	r5,r18
 800fb80:	80104ec0 	call	80104ec <__umodsi3>
 800fb84:	1029883a 	mov	r20,r2
 800fb88:	8809883a 	mov	r4,r17
 800fb8c:	900b883a 	mov	r5,r18
 800fb90:	a028943a 	slli	r20,r20,16
 800fb94:	80104880 	call	8010488 <__udivsi3>
 800fb98:	100b883a 	mov	r5,r2
 800fb9c:	b009883a 	mov	r4,r22
 800fba0:	843fffcc 	andi	r16,r16,65535
 800fba4:	1023883a 	mov	r17,r2
 800fba8:	8520b03a 	or	r16,r16,r20
 800fbac:	80050200 	call	8005020 <__mulsi3>
 800fbb0:	8080042e 	bgeu	r16,r2,800fbc4 <__udivdi3+0x3f4>
 800fbb4:	8721883a 	add	r16,r16,fp
 800fbb8:	88ffffc4 	addi	r3,r17,-1
 800fbbc:	8700712e 	bgeu	r16,fp,800fd84 <__udivdi3+0x5b4>
 800fbc0:	1823883a 	mov	r17,r3
 800fbc4:	a80e943a 	slli	r7,r21,16
 800fbc8:	d8c00017 	ldw	r3,0(sp)
 800fbcc:	80a1c83a 	sub	r16,r16,r2
 800fbd0:	3c64b03a 	or	r18,r7,r17
 800fbd4:	1d3fffcc 	andi	r20,r3,65535
 800fbd8:	9022d43a 	srli	r17,r18,16
 800fbdc:	95bfffcc 	andi	r22,r18,65535
 800fbe0:	a00b883a 	mov	r5,r20
 800fbe4:	b009883a 	mov	r4,r22
 800fbe8:	182ad43a 	srli	r21,r3,16
 800fbec:	80050200 	call	8005020 <__mulsi3>
 800fbf0:	a00b883a 	mov	r5,r20
 800fbf4:	8809883a 	mov	r4,r17
 800fbf8:	1039883a 	mov	fp,r2
 800fbfc:	80050200 	call	8005020 <__mulsi3>
 800fc00:	8809883a 	mov	r4,r17
 800fc04:	a80b883a 	mov	r5,r21
 800fc08:	1029883a 	mov	r20,r2
 800fc0c:	80050200 	call	8005020 <__mulsi3>
 800fc10:	a80b883a 	mov	r5,r21
 800fc14:	b009883a 	mov	r4,r22
 800fc18:	1023883a 	mov	r17,r2
 800fc1c:	80050200 	call	8005020 <__mulsi3>
 800fc20:	e006d43a 	srli	r3,fp,16
 800fc24:	1505883a 	add	r2,r2,r20
 800fc28:	1887883a 	add	r3,r3,r2
 800fc2c:	1d00022e 	bgeu	r3,r20,800fc38 <__udivdi3+0x468>
 800fc30:	00800074 	movhi	r2,1
 800fc34:	88a3883a 	add	r17,r17,r2
 800fc38:	1804d43a 	srli	r2,r3,16
 800fc3c:	1463883a 	add	r17,r2,r17
 800fc40:	84404436 	bltu	r16,r17,800fd54 <__udivdi3+0x584>
 800fc44:	84403e26 	beq	r16,r17,800fd40 <__udivdi3+0x570>
 800fc48:	9005883a 	mov	r2,r18
 800fc4c:	0007883a 	mov	r3,zero
 800fc50:	003f9106 	br	800fa98 <__udivdi3+0x2c8>
 800fc54:	88e2983a 	sll	r17,r17,r3
 800fc58:	80aed83a 	srl	r23,r16,r2
 800fc5c:	80e0983a 	sll	r16,r16,r3
 800fc60:	882ad43a 	srli	r21,r17,16
 800fc64:	9884d83a 	srl	r2,r19,r2
 800fc68:	b809883a 	mov	r4,r23
 800fc6c:	a80b883a 	mov	r5,r21
 800fc70:	98e4983a 	sll	r18,r19,r3
 800fc74:	142cb03a 	or	r22,r2,r16
 800fc78:	80104ec0 	call	80104ec <__umodsi3>
 800fc7c:	b809883a 	mov	r4,r23
 800fc80:	a80b883a 	mov	r5,r21
 800fc84:	1027883a 	mov	r19,r2
 800fc88:	8d3fffcc 	andi	r20,r17,65535
 800fc8c:	80104880 	call	8010488 <__udivsi3>
 800fc90:	a009883a 	mov	r4,r20
 800fc94:	100b883a 	mov	r5,r2
 800fc98:	102f883a 	mov	r23,r2
 800fc9c:	80050200 	call	8005020 <__mulsi3>
 800fca0:	9826943a 	slli	r19,r19,16
 800fca4:	b008d43a 	srli	r4,r22,16
 800fca8:	24c8b03a 	or	r4,r4,r19
 800fcac:	2080062e 	bgeu	r4,r2,800fcc8 <__udivdi3+0x4f8>
 800fcb0:	2449883a 	add	r4,r4,r17
 800fcb4:	b8ffffc4 	addi	r3,r23,-1
 800fcb8:	24403c36 	bltu	r4,r17,800fdac <__udivdi3+0x5dc>
 800fcbc:	20803b2e 	bgeu	r4,r2,800fdac <__udivdi3+0x5dc>
 800fcc0:	bdffff84 	addi	r23,r23,-2
 800fcc4:	2449883a 	add	r4,r4,r17
 800fcc8:	20a1c83a 	sub	r16,r4,r2
 800fccc:	a80b883a 	mov	r5,r21
 800fcd0:	8009883a 	mov	r4,r16
 800fcd4:	80104ec0 	call	80104ec <__umodsi3>
 800fcd8:	a80b883a 	mov	r5,r21
 800fcdc:	8009883a 	mov	r4,r16
 800fce0:	1027883a 	mov	r19,r2
 800fce4:	80104880 	call	8010488 <__udivsi3>
 800fce8:	a009883a 	mov	r4,r20
 800fcec:	100b883a 	mov	r5,r2
 800fcf0:	9826943a 	slli	r19,r19,16
 800fcf4:	1039883a 	mov	fp,r2
 800fcf8:	80050200 	call	8005020 <__mulsi3>
 800fcfc:	b13fffcc 	andi	r4,r22,65535
 800fd00:	24c8b03a 	or	r4,r4,r19
 800fd04:	2080062e 	bgeu	r4,r2,800fd20 <__udivdi3+0x550>
 800fd08:	2449883a 	add	r4,r4,r17
 800fd0c:	e0ffffc4 	addi	r3,fp,-1
 800fd10:	24402436 	bltu	r4,r17,800fda4 <__udivdi3+0x5d4>
 800fd14:	2080232e 	bgeu	r4,r2,800fda4 <__udivdi3+0x5d4>
 800fd18:	e73fff84 	addi	fp,fp,-2
 800fd1c:	2449883a 	add	r4,r4,r17
 800fd20:	b82e943a 	slli	r23,r23,16
 800fd24:	20a1c83a 	sub	r16,r4,r2
 800fd28:	bf06b03a 	or	r3,r23,fp
 800fd2c:	003f2806 	br	800f9d0 <__udivdi3+0x200>
 800fd30:	2021883a 	mov	r16,r4
 800fd34:	003f5306 	br	800fa84 <__udivdi3+0x2b4>
 800fd38:	1821883a 	mov	r16,r3
 800fd3c:	003ef406 	br	800f910 <__udivdi3+0x140>
 800fd40:	1806943a 	slli	r3,r3,16
 800fd44:	9de6983a 	sll	r19,r19,r23
 800fd48:	e73fffcc 	andi	fp,fp,65535
 800fd4c:	1f07883a 	add	r3,r3,fp
 800fd50:	98ffbd2e 	bgeu	r19,r3,800fc48 <__udivdi3+0x478>
 800fd54:	90bfffc4 	addi	r2,r18,-1
 800fd58:	0007883a 	mov	r3,zero
 800fd5c:	003f4e06 	br	800fa98 <__udivdi3+0x2c8>
 800fd60:	00800604 	movi	r2,24
 800fd64:	003ef506 	br	800f93c <__udivdi3+0x16c>
 800fd68:	00800604 	movi	r2,24
 800fd6c:	003f0b06 	br	800f99c <__udivdi3+0x1cc>
 800fd70:	00800604 	movi	r2,24
 800fd74:	003ead06 	br	800f82c <__udivdi3+0x5c>
 800fd78:	0007883a 	mov	r3,zero
 800fd7c:	00800044 	movi	r2,1
 800fd80:	003f4506 	br	800fa98 <__udivdi3+0x2c8>
 800fd84:	80bf8e2e 	bgeu	r16,r2,800fbc0 <__udivdi3+0x3f0>
 800fd88:	8c7fff84 	addi	r17,r17,-2
 800fd8c:	8721883a 	add	r16,r16,fp
 800fd90:	003f8c06 	br	800fbc4 <__udivdi3+0x3f4>
 800fd94:	18bf762e 	bgeu	r3,r2,800fb70 <__udivdi3+0x3a0>
 800fd98:	ad7fff84 	addi	r21,r21,-2
 800fd9c:	1f07883a 	add	r3,r3,fp
 800fda0:	003f7406 	br	800fb74 <__udivdi3+0x3a4>
 800fda4:	1839883a 	mov	fp,r3
 800fda8:	003fdd06 	br	800fd20 <__udivdi3+0x550>
 800fdac:	182f883a 	mov	r23,r3
 800fdb0:	003fc506 	br	800fcc8 <__udivdi3+0x4f8>
 800fdb4:	b5bfff84 	addi	r22,r22,-2
 800fdb8:	3c4f883a 	add	r7,r7,r17
 800fdbc:	003f1a06 	br	800fa28 <__udivdi3+0x258>
 800fdc0:	b5bfff84 	addi	r22,r22,-2
 800fdc4:	1c47883a 	add	r3,r3,r17
 800fdc8:	003ebc06 	br	800f8bc <__udivdi3+0xec>

0800fdcc <__umoddi3>:
 800fdcc:	defff304 	addi	sp,sp,-52
 800fdd0:	df000b15 	stw	fp,44(sp)
 800fdd4:	dc400415 	stw	r17,16(sp)
 800fdd8:	dc000315 	stw	r16,12(sp)
 800fddc:	dfc00c15 	stw	ra,48(sp)
 800fde0:	ddc00a15 	stw	r23,40(sp)
 800fde4:	dd800915 	stw	r22,36(sp)
 800fde8:	dd400815 	stw	r21,32(sp)
 800fdec:	dd000715 	stw	r20,28(sp)
 800fdf0:	dcc00615 	stw	r19,24(sp)
 800fdf4:	dc800515 	stw	r18,20(sp)
 800fdf8:	2021883a 	mov	r16,r4
 800fdfc:	2823883a 	mov	r17,r5
 800fe00:	2839883a 	mov	fp,r5
 800fe04:	3800401e 	bne	r7,zero,800ff08 <__umoddi3+0x13c>
 800fe08:	3027883a 	mov	r19,r6
 800fe0c:	2029883a 	mov	r20,r4
 800fe10:	2980552e 	bgeu	r5,r6,800ff68 <__umoddi3+0x19c>
 800fe14:	00bfffd4 	movui	r2,65535
 800fe18:	1180a236 	bltu	r2,r6,80100a4 <__umoddi3+0x2d8>
 800fe1c:	01003fc4 	movi	r4,255
 800fe20:	2189803a 	cmpltu	r4,r4,r6
 800fe24:	200890fa 	slli	r4,r4,3
 800fe28:	3104d83a 	srl	r2,r6,r4
 800fe2c:	00c20074 	movhi	r3,2049
 800fe30:	18d4a984 	addi	r3,r3,21158
 800fe34:	1885883a 	add	r2,r3,r2
 800fe38:	10c00003 	ldbu	r3,0(r2)
 800fe3c:	00800804 	movi	r2,32
 800fe40:	1909883a 	add	r4,r3,r4
 800fe44:	1125c83a 	sub	r18,r2,r4
 800fe48:	90000526 	beq	r18,zero,800fe60 <__umoddi3+0x94>
 800fe4c:	8ca2983a 	sll	r17,r17,r18
 800fe50:	8108d83a 	srl	r4,r16,r4
 800fe54:	34a6983a 	sll	r19,r6,r18
 800fe58:	84a8983a 	sll	r20,r16,r18
 800fe5c:	2478b03a 	or	fp,r4,r17
 800fe60:	982cd43a 	srli	r22,r19,16
 800fe64:	e009883a 	mov	r4,fp
 800fe68:	9dffffcc 	andi	r23,r19,65535
 800fe6c:	b00b883a 	mov	r5,r22
 800fe70:	80104ec0 	call	80104ec <__umodsi3>
 800fe74:	b00b883a 	mov	r5,r22
 800fe78:	e009883a 	mov	r4,fp
 800fe7c:	102b883a 	mov	r21,r2
 800fe80:	80104880 	call	8010488 <__udivsi3>
 800fe84:	100b883a 	mov	r5,r2
 800fe88:	b809883a 	mov	r4,r23
 800fe8c:	80050200 	call	8005020 <__mulsi3>
 800fe90:	a82a943a 	slli	r21,r21,16
 800fe94:	a006d43a 	srli	r3,r20,16
 800fe98:	1d46b03a 	or	r3,r3,r21
 800fe9c:	1880032e 	bgeu	r3,r2,800feac <__umoddi3+0xe0>
 800fea0:	1cc7883a 	add	r3,r3,r19
 800fea4:	1cc00136 	bltu	r3,r19,800feac <__umoddi3+0xe0>
 800fea8:	18813136 	bltu	r3,r2,8010370 <__umoddi3+0x5a4>
 800feac:	18a1c83a 	sub	r16,r3,r2
 800feb0:	b00b883a 	mov	r5,r22
 800feb4:	8009883a 	mov	r4,r16
 800feb8:	80104ec0 	call	80104ec <__umodsi3>
 800febc:	b00b883a 	mov	r5,r22
 800fec0:	8009883a 	mov	r4,r16
 800fec4:	1023883a 	mov	r17,r2
 800fec8:	80104880 	call	8010488 <__udivsi3>
 800fecc:	100b883a 	mov	r5,r2
 800fed0:	b809883a 	mov	r4,r23
 800fed4:	8822943a 	slli	r17,r17,16
 800fed8:	80050200 	call	8005020 <__mulsi3>
 800fedc:	a0ffffcc 	andi	r3,r20,65535
 800fee0:	1c46b03a 	or	r3,r3,r17
 800fee4:	1880042e 	bgeu	r3,r2,800fef8 <__umoddi3+0x12c>
 800fee8:	1cc7883a 	add	r3,r3,r19
 800feec:	1cc00236 	bltu	r3,r19,800fef8 <__umoddi3+0x12c>
 800fef0:	1880012e 	bgeu	r3,r2,800fef8 <__umoddi3+0x12c>
 800fef4:	1cc7883a 	add	r3,r3,r19
 800fef8:	1885c83a 	sub	r2,r3,r2
 800fefc:	1484d83a 	srl	r2,r2,r18
 800ff00:	0007883a 	mov	r3,zero
 800ff04:	00005306 	br	8010054 <__umoddi3+0x288>
 800ff08:	29c05036 	bltu	r5,r7,801004c <__umoddi3+0x280>
 800ff0c:	00bfffd4 	movui	r2,65535
 800ff10:	11c05c2e 	bgeu	r2,r7,8010084 <__umoddi3+0x2b8>
 800ff14:	00804034 	movhi	r2,256
 800ff18:	10bfffc4 	addi	r2,r2,-1
 800ff1c:	11c10636 	bltu	r2,r7,8010338 <__umoddi3+0x56c>
 800ff20:	01000404 	movi	r4,16
 800ff24:	3904d83a 	srl	r2,r7,r4
 800ff28:	00c20074 	movhi	r3,2049
 800ff2c:	18d4a984 	addi	r3,r3,21158
 800ff30:	1885883a 	add	r2,r3,r2
 800ff34:	14c00003 	ldbu	r19,0(r2)
 800ff38:	00c00804 	movi	r3,32
 800ff3c:	9927883a 	add	r19,r19,r4
 800ff40:	1ce9c83a 	sub	r20,r3,r19
 800ff44:	a0005c1e 	bne	r20,zero,80100b8 <__umoddi3+0x2ec>
 800ff48:	3c400136 	bltu	r7,r17,800ff50 <__umoddi3+0x184>
 800ff4c:	81810a36 	bltu	r16,r6,8010378 <__umoddi3+0x5ac>
 800ff50:	8185c83a 	sub	r2,r16,r6
 800ff54:	89e3c83a 	sub	r17,r17,r7
 800ff58:	8089803a 	cmpltu	r4,r16,r2
 800ff5c:	8939c83a 	sub	fp,r17,r4
 800ff60:	e007883a 	mov	r3,fp
 800ff64:	00003b06 	br	8010054 <__umoddi3+0x288>
 800ff68:	3000041e 	bne	r6,zero,800ff7c <__umoddi3+0x1b0>
 800ff6c:	000b883a 	mov	r5,zero
 800ff70:	01000044 	movi	r4,1
 800ff74:	80104880 	call	8010488 <__udivsi3>
 800ff78:	1027883a 	mov	r19,r2
 800ff7c:	00bfffd4 	movui	r2,65535
 800ff80:	14c0442e 	bgeu	r2,r19,8010094 <__umoddi3+0x2c8>
 800ff84:	00804034 	movhi	r2,256
 800ff88:	10bfffc4 	addi	r2,r2,-1
 800ff8c:	14c0ec36 	bltu	r2,r19,8010340 <__umoddi3+0x574>
 800ff90:	00800404 	movi	r2,16
 800ff94:	9886d83a 	srl	r3,r19,r2
 800ff98:	01020074 	movhi	r4,2049
 800ff9c:	2114a984 	addi	r4,r4,21158
 800ffa0:	20c7883a 	add	r3,r4,r3
 800ffa4:	18c00003 	ldbu	r3,0(r3)
 800ffa8:	1887883a 	add	r3,r3,r2
 800ffac:	00800804 	movi	r2,32
 800ffb0:	10e5c83a 	sub	r18,r2,r3
 800ffb4:	9000ab1e 	bne	r18,zero,8010264 <__umoddi3+0x498>
 800ffb8:	982cd43a 	srli	r22,r19,16
 800ffbc:	8ce3c83a 	sub	r17,r17,r19
 800ffc0:	9dffffcc 	andi	r23,r19,65535
 800ffc4:	b00b883a 	mov	r5,r22
 800ffc8:	8809883a 	mov	r4,r17
 800ffcc:	80104ec0 	call	80104ec <__umodsi3>
 800ffd0:	b00b883a 	mov	r5,r22
 800ffd4:	8809883a 	mov	r4,r17
 800ffd8:	102b883a 	mov	r21,r2
 800ffdc:	80104880 	call	8010488 <__udivsi3>
 800ffe0:	b80b883a 	mov	r5,r23
 800ffe4:	1009883a 	mov	r4,r2
 800ffe8:	80050200 	call	8005020 <__mulsi3>
 800ffec:	a82a943a 	slli	r21,r21,16
 800fff0:	a006d43a 	srli	r3,r20,16
 800fff4:	1d46b03a 	or	r3,r3,r21
 800fff8:	1880042e 	bgeu	r3,r2,801000c <__umoddi3+0x240>
 800fffc:	1cc7883a 	add	r3,r3,r19
 8010000:	1cc00236 	bltu	r3,r19,801000c <__umoddi3+0x240>
 8010004:	1880012e 	bgeu	r3,r2,801000c <__umoddi3+0x240>
 8010008:	1cc7883a 	add	r3,r3,r19
 801000c:	18a1c83a 	sub	r16,r3,r2
 8010010:	b00b883a 	mov	r5,r22
 8010014:	8009883a 	mov	r4,r16
 8010018:	80104ec0 	call	80104ec <__umodsi3>
 801001c:	1023883a 	mov	r17,r2
 8010020:	b00b883a 	mov	r5,r22
 8010024:	8009883a 	mov	r4,r16
 8010028:	80104880 	call	8010488 <__udivsi3>
 801002c:	8822943a 	slli	r17,r17,16
 8010030:	b80b883a 	mov	r5,r23
 8010034:	1009883a 	mov	r4,r2
 8010038:	80050200 	call	8005020 <__mulsi3>
 801003c:	a53fffcc 	andi	r20,r20,65535
 8010040:	a446b03a 	or	r3,r20,r17
 8010044:	18bfac2e 	bgeu	r3,r2,800fef8 <__umoddi3+0x12c>
 8010048:	003fa706 	br	800fee8 <__umoddi3+0x11c>
 801004c:	2005883a 	mov	r2,r4
 8010050:	2807883a 	mov	r3,r5
 8010054:	dfc00c17 	ldw	ra,48(sp)
 8010058:	df000b17 	ldw	fp,44(sp)
 801005c:	ddc00a17 	ldw	r23,40(sp)
 8010060:	dd800917 	ldw	r22,36(sp)
 8010064:	dd400817 	ldw	r21,32(sp)
 8010068:	dd000717 	ldw	r20,28(sp)
 801006c:	dcc00617 	ldw	r19,24(sp)
 8010070:	dc800517 	ldw	r18,20(sp)
 8010074:	dc400417 	ldw	r17,16(sp)
 8010078:	dc000317 	ldw	r16,12(sp)
 801007c:	dec00d04 	addi	sp,sp,52
 8010080:	f800283a 	ret
 8010084:	04c03fc4 	movi	r19,255
 8010088:	99c9803a 	cmpltu	r4,r19,r7
 801008c:	200890fa 	slli	r4,r4,3
 8010090:	003fa406 	br	800ff24 <__umoddi3+0x158>
 8010094:	00803fc4 	movi	r2,255
 8010098:	14c5803a 	cmpltu	r2,r2,r19
 801009c:	100490fa 	slli	r2,r2,3
 80100a0:	003fbc06 	br	800ff94 <__umoddi3+0x1c8>
 80100a4:	00804034 	movhi	r2,256
 80100a8:	10bfffc4 	addi	r2,r2,-1
 80100ac:	1180a636 	bltu	r2,r6,8010348 <__umoddi3+0x57c>
 80100b0:	01000404 	movi	r4,16
 80100b4:	003f5c06 	br	800fe28 <__umoddi3+0x5c>
 80100b8:	3d0e983a 	sll	r7,r7,r20
 80100bc:	34ead83a 	srl	r21,r6,r19
 80100c0:	8cc6d83a 	srl	r3,r17,r19
 80100c4:	8d10983a 	sll	r8,r17,r20
 80100c8:	3d6ab03a 	or	r21,r7,r21
 80100cc:	a82cd43a 	srli	r22,r21,16
 80100d0:	84e2d83a 	srl	r17,r16,r19
 80100d4:	1809883a 	mov	r4,r3
 80100d8:	b00b883a 	mov	r5,r22
 80100dc:	8a22b03a 	or	r17,r17,r8
 80100e0:	3524983a 	sll	r18,r6,r20
 80100e4:	dc400015 	stw	r17,0(sp)
 80100e8:	d8c00115 	stw	r3,4(sp)
 80100ec:	80104ec0 	call	80104ec <__umodsi3>
 80100f0:	d8c00117 	ldw	r3,4(sp)
 80100f4:	b00b883a 	mov	r5,r22
 80100f8:	1039883a 	mov	fp,r2
 80100fc:	1809883a 	mov	r4,r3
 8010100:	80104880 	call	8010488 <__udivsi3>
 8010104:	adffffcc 	andi	r23,r21,65535
 8010108:	100b883a 	mov	r5,r2
 801010c:	b809883a 	mov	r4,r23
 8010110:	1023883a 	mov	r17,r2
 8010114:	80050200 	call	8005020 <__mulsi3>
 8010118:	d9400017 	ldw	r5,0(sp)
 801011c:	e008943a 	slli	r4,fp,16
 8010120:	8520983a 	sll	r16,r16,r20
 8010124:	2806d43a 	srli	r3,r5,16
 8010128:	1906b03a 	or	r3,r3,r4
 801012c:	1880042e 	bgeu	r3,r2,8010140 <__umoddi3+0x374>
 8010130:	1d47883a 	add	r3,r3,r21
 8010134:	893fffc4 	addi	r4,r17,-1
 8010138:	1d40892e 	bgeu	r3,r21,8010360 <__umoddi3+0x594>
 801013c:	2023883a 	mov	r17,r4
 8010140:	18b9c83a 	sub	fp,r3,r2
 8010144:	b00b883a 	mov	r5,r22
 8010148:	e009883a 	mov	r4,fp
 801014c:	80104ec0 	call	80104ec <__umodsi3>
 8010150:	b00b883a 	mov	r5,r22
 8010154:	e009883a 	mov	r4,fp
 8010158:	d8800215 	stw	r2,8(sp)
 801015c:	80104880 	call	8010488 <__udivsi3>
 8010160:	100b883a 	mov	r5,r2
 8010164:	b809883a 	mov	r4,r23
 8010168:	102d883a 	mov	r22,r2
 801016c:	80050200 	call	8005020 <__mulsi3>
 8010170:	d9800217 	ldw	r6,8(sp)
 8010174:	d8c00017 	ldw	r3,0(sp)
 8010178:	300c943a 	slli	r6,r6,16
 801017c:	1a3fffcc 	andi	r8,r3,65535
 8010180:	4190b03a 	or	r8,r8,r6
 8010184:	4080042e 	bgeu	r8,r2,8010198 <__umoddi3+0x3cc>
 8010188:	4551883a 	add	r8,r8,r21
 801018c:	b0ffffc4 	addi	r3,r22,-1
 8010190:	45406f2e 	bgeu	r8,r21,8010350 <__umoddi3+0x584>
 8010194:	182d883a 	mov	r22,r3
 8010198:	880e943a 	slli	r7,r17,16
 801019c:	9006d43a 	srli	r3,r18,16
 80101a0:	91bfffcc 	andi	r6,r18,65535
 80101a4:	3dacb03a 	or	r22,r7,r22
 80101a8:	b02ed43a 	srli	r23,r22,16
 80101ac:	b5bfffcc 	andi	r22,r22,65535
 80101b0:	300b883a 	mov	r5,r6
 80101b4:	b009883a 	mov	r4,r22
 80101b8:	40a3c83a 	sub	r17,r8,r2
 80101bc:	d8c00115 	stw	r3,4(sp)
 80101c0:	d9800215 	stw	r6,8(sp)
 80101c4:	80050200 	call	8005020 <__mulsi3>
 80101c8:	d9800217 	ldw	r6,8(sp)
 80101cc:	b809883a 	mov	r4,r23
 80101d0:	1039883a 	mov	fp,r2
 80101d4:	300b883a 	mov	r5,r6
 80101d8:	80050200 	call	8005020 <__mulsi3>
 80101dc:	d8c00117 	ldw	r3,4(sp)
 80101e0:	b809883a 	mov	r4,r23
 80101e4:	d8800215 	stw	r2,8(sp)
 80101e8:	180b883a 	mov	r5,r3
 80101ec:	80050200 	call	8005020 <__mulsi3>
 80101f0:	d8c00117 	ldw	r3,4(sp)
 80101f4:	b009883a 	mov	r4,r22
 80101f8:	102f883a 	mov	r23,r2
 80101fc:	180b883a 	mov	r5,r3
 8010200:	80050200 	call	8005020 <__mulsi3>
 8010204:	d9800217 	ldw	r6,8(sp)
 8010208:	e006d43a 	srli	r3,fp,16
 801020c:	1185883a 	add	r2,r2,r6
 8010210:	1885883a 	add	r2,r3,r2
 8010214:	1180022e 	bgeu	r2,r6,8010220 <__umoddi3+0x454>
 8010218:	00c00074 	movhi	r3,1
 801021c:	b8ef883a 	add	r23,r23,r3
 8010220:	1006d43a 	srli	r3,r2,16
 8010224:	1004943a 	slli	r2,r2,16
 8010228:	e73fffcc 	andi	fp,fp,65535
 801022c:	1dc7883a 	add	r3,r3,r23
 8010230:	1739883a 	add	fp,r2,fp
 8010234:	88c03a36 	bltu	r17,r3,8010320 <__umoddi3+0x554>
 8010238:	88c05126 	beq	r17,r3,8010380 <__umoddi3+0x5b4>
 801023c:	88c9c83a 	sub	r4,r17,r3
 8010240:	e00f883a 	mov	r7,fp
 8010244:	81cfc83a 	sub	r7,r16,r7
 8010248:	81c7803a 	cmpltu	r3,r16,r7
 801024c:	20c7c83a 	sub	r3,r4,r3
 8010250:	1cc4983a 	sll	r2,r3,r19
 8010254:	3d0ed83a 	srl	r7,r7,r20
 8010258:	1d06d83a 	srl	r3,r3,r20
 801025c:	11c4b03a 	or	r2,r2,r7
 8010260:	003f7c06 	br	8010054 <__umoddi3+0x288>
 8010264:	9ca6983a 	sll	r19,r19,r18
 8010268:	88f8d83a 	srl	fp,r17,r3
 801026c:	80c4d83a 	srl	r2,r16,r3
 8010270:	982cd43a 	srli	r22,r19,16
 8010274:	8ca2983a 	sll	r17,r17,r18
 8010278:	e009883a 	mov	r4,fp
 801027c:	b00b883a 	mov	r5,r22
 8010280:	146ab03a 	or	r21,r2,r17
 8010284:	80104ec0 	call	80104ec <__umodsi3>
 8010288:	b00b883a 	mov	r5,r22
 801028c:	e009883a 	mov	r4,fp
 8010290:	1029883a 	mov	r20,r2
 8010294:	9dffffcc 	andi	r23,r19,65535
 8010298:	80104880 	call	8010488 <__udivsi3>
 801029c:	b809883a 	mov	r4,r23
 80102a0:	100b883a 	mov	r5,r2
 80102a4:	80050200 	call	8005020 <__mulsi3>
 80102a8:	a008943a 	slli	r4,r20,16
 80102ac:	a806d43a 	srli	r3,r21,16
 80102b0:	84a8983a 	sll	r20,r16,r18
 80102b4:	1906b03a 	or	r3,r3,r4
 80102b8:	1880042e 	bgeu	r3,r2,80102cc <__umoddi3+0x500>
 80102bc:	1cc7883a 	add	r3,r3,r19
 80102c0:	1cc00236 	bltu	r3,r19,80102cc <__umoddi3+0x500>
 80102c4:	1880012e 	bgeu	r3,r2,80102cc <__umoddi3+0x500>
 80102c8:	1cc7883a 	add	r3,r3,r19
 80102cc:	18a3c83a 	sub	r17,r3,r2
 80102d0:	b00b883a 	mov	r5,r22
 80102d4:	8809883a 	mov	r4,r17
 80102d8:	80104ec0 	call	80104ec <__umodsi3>
 80102dc:	b00b883a 	mov	r5,r22
 80102e0:	8809883a 	mov	r4,r17
 80102e4:	1021883a 	mov	r16,r2
 80102e8:	80104880 	call	8010488 <__udivsi3>
 80102ec:	100b883a 	mov	r5,r2
 80102f0:	b809883a 	mov	r4,r23
 80102f4:	8020943a 	slli	r16,r16,16
 80102f8:	80050200 	call	8005020 <__mulsi3>
 80102fc:	a8ffffcc 	andi	r3,r21,65535
 8010300:	1c06b03a 	or	r3,r3,r16
 8010304:	1880042e 	bgeu	r3,r2,8010318 <__umoddi3+0x54c>
 8010308:	1cc7883a 	add	r3,r3,r19
 801030c:	1cc00236 	bltu	r3,r19,8010318 <__umoddi3+0x54c>
 8010310:	1880012e 	bgeu	r3,r2,8010318 <__umoddi3+0x54c>
 8010314:	1cc7883a 	add	r3,r3,r19
 8010318:	18a3c83a 	sub	r17,r3,r2
 801031c:	003f2906 	br	800ffc4 <__umoddi3+0x1f8>
 8010320:	e48fc83a 	sub	r7,fp,r18
 8010324:	1d49c83a 	sub	r4,r3,r21
 8010328:	e1f9803a 	cmpltu	fp,fp,r7
 801032c:	2739c83a 	sub	fp,r4,fp
 8010330:	8f09c83a 	sub	r4,r17,fp
 8010334:	003fc306 	br	8010244 <__umoddi3+0x478>
 8010338:	01000604 	movi	r4,24
 801033c:	003ef906 	br	800ff24 <__umoddi3+0x158>
 8010340:	00800604 	movi	r2,24
 8010344:	003f1306 	br	800ff94 <__umoddi3+0x1c8>
 8010348:	01000604 	movi	r4,24
 801034c:	003eb606 	br	800fe28 <__umoddi3+0x5c>
 8010350:	40bf902e 	bgeu	r8,r2,8010194 <__umoddi3+0x3c8>
 8010354:	b5bfff84 	addi	r22,r22,-2
 8010358:	4551883a 	add	r8,r8,r21
 801035c:	003f8e06 	br	8010198 <__umoddi3+0x3cc>
 8010360:	18bf762e 	bgeu	r3,r2,801013c <__umoddi3+0x370>
 8010364:	8c7fff84 	addi	r17,r17,-2
 8010368:	1d47883a 	add	r3,r3,r21
 801036c:	003f7406 	br	8010140 <__umoddi3+0x374>
 8010370:	1cc7883a 	add	r3,r3,r19
 8010374:	003ecd06 	br	800feac <__umoddi3+0xe0>
 8010378:	8005883a 	mov	r2,r16
 801037c:	003ef806 	br	800ff60 <__umoddi3+0x194>
 8010380:	873fe736 	bltu	r16,fp,8010320 <__umoddi3+0x554>
 8010384:	e00f883a 	mov	r7,fp
 8010388:	0009883a 	mov	r4,zero
 801038c:	003fad06 	br	8010244 <__umoddi3+0x478>

08010390 <__divsi3>:
 8010390:	20001b16 	blt	r4,zero,8010400 <__divsi3+0x70>
 8010394:	000f883a 	mov	r7,zero
 8010398:	28001616 	blt	r5,zero,80103f4 <__divsi3+0x64>
 801039c:	200d883a 	mov	r6,r4
 80103a0:	29001a2e 	bgeu	r5,r4,801040c <__divsi3+0x7c>
 80103a4:	00800804 	movi	r2,32
 80103a8:	00c00044 	movi	r3,1
 80103ac:	00000106 	br	80103b4 <__divsi3+0x24>
 80103b0:	10000d26 	beq	r2,zero,80103e8 <__divsi3+0x58>
 80103b4:	294b883a 	add	r5,r5,r5
 80103b8:	10bfffc4 	addi	r2,r2,-1
 80103bc:	18c7883a 	add	r3,r3,r3
 80103c0:	293ffb36 	bltu	r5,r4,80103b0 <__divsi3+0x20>
 80103c4:	0005883a 	mov	r2,zero
 80103c8:	18000726 	beq	r3,zero,80103e8 <__divsi3+0x58>
 80103cc:	0005883a 	mov	r2,zero
 80103d0:	31400236 	bltu	r6,r5,80103dc <__divsi3+0x4c>
 80103d4:	314dc83a 	sub	r6,r6,r5
 80103d8:	10c4b03a 	or	r2,r2,r3
 80103dc:	1806d07a 	srli	r3,r3,1
 80103e0:	280ad07a 	srli	r5,r5,1
 80103e4:	183ffa1e 	bne	r3,zero,80103d0 <__divsi3+0x40>
 80103e8:	38000126 	beq	r7,zero,80103f0 <__divsi3+0x60>
 80103ec:	0085c83a 	sub	r2,zero,r2
 80103f0:	f800283a 	ret
 80103f4:	014bc83a 	sub	r5,zero,r5
 80103f8:	39c0005c 	xori	r7,r7,1
 80103fc:	003fe706 	br	801039c <__divsi3+0xc>
 8010400:	0109c83a 	sub	r4,zero,r4
 8010404:	01c00044 	movi	r7,1
 8010408:	003fe306 	br	8010398 <__divsi3+0x8>
 801040c:	00c00044 	movi	r3,1
 8010410:	003fee06 	br	80103cc <__divsi3+0x3c>

08010414 <__modsi3>:
 8010414:	20001716 	blt	r4,zero,8010474 <__modsi3+0x60>
 8010418:	000f883a 	mov	r7,zero
 801041c:	2005883a 	mov	r2,r4
 8010420:	28001216 	blt	r5,zero,801046c <__modsi3+0x58>
 8010424:	2900162e 	bgeu	r5,r4,8010480 <__modsi3+0x6c>
 8010428:	01800804 	movi	r6,32
 801042c:	00c00044 	movi	r3,1
 8010430:	00000106 	br	8010438 <__modsi3+0x24>
 8010434:	30000a26 	beq	r6,zero,8010460 <__modsi3+0x4c>
 8010438:	294b883a 	add	r5,r5,r5
 801043c:	31bfffc4 	addi	r6,r6,-1
 8010440:	18c7883a 	add	r3,r3,r3
 8010444:	293ffb36 	bltu	r5,r4,8010434 <__modsi3+0x20>
 8010448:	18000526 	beq	r3,zero,8010460 <__modsi3+0x4c>
 801044c:	1806d07a 	srli	r3,r3,1
 8010450:	11400136 	bltu	r2,r5,8010458 <__modsi3+0x44>
 8010454:	1145c83a 	sub	r2,r2,r5
 8010458:	280ad07a 	srli	r5,r5,1
 801045c:	183ffb1e 	bne	r3,zero,801044c <__modsi3+0x38>
 8010460:	38000126 	beq	r7,zero,8010468 <__modsi3+0x54>
 8010464:	0085c83a 	sub	r2,zero,r2
 8010468:	f800283a 	ret
 801046c:	014bc83a 	sub	r5,zero,r5
 8010470:	003fec06 	br	8010424 <__modsi3+0x10>
 8010474:	0109c83a 	sub	r4,zero,r4
 8010478:	01c00044 	movi	r7,1
 801047c:	003fe706 	br	801041c <__modsi3+0x8>
 8010480:	00c00044 	movi	r3,1
 8010484:	003ff106 	br	801044c <__modsi3+0x38>

08010488 <__udivsi3>:
 8010488:	200d883a 	mov	r6,r4
 801048c:	2900152e 	bgeu	r5,r4,80104e4 <__udivsi3+0x5c>
 8010490:	28001416 	blt	r5,zero,80104e4 <__udivsi3+0x5c>
 8010494:	00800804 	movi	r2,32
 8010498:	00c00044 	movi	r3,1
 801049c:	00000206 	br	80104a8 <__udivsi3+0x20>
 80104a0:	10000e26 	beq	r2,zero,80104dc <__udivsi3+0x54>
 80104a4:	28000516 	blt	r5,zero,80104bc <__udivsi3+0x34>
 80104a8:	294b883a 	add	r5,r5,r5
 80104ac:	10bfffc4 	addi	r2,r2,-1
 80104b0:	18c7883a 	add	r3,r3,r3
 80104b4:	293ffa36 	bltu	r5,r4,80104a0 <__udivsi3+0x18>
 80104b8:	18000826 	beq	r3,zero,80104dc <__udivsi3+0x54>
 80104bc:	0005883a 	mov	r2,zero
 80104c0:	31400236 	bltu	r6,r5,80104cc <__udivsi3+0x44>
 80104c4:	314dc83a 	sub	r6,r6,r5
 80104c8:	10c4b03a 	or	r2,r2,r3
 80104cc:	1806d07a 	srli	r3,r3,1
 80104d0:	280ad07a 	srli	r5,r5,1
 80104d4:	183ffa1e 	bne	r3,zero,80104c0 <__udivsi3+0x38>
 80104d8:	f800283a 	ret
 80104dc:	0005883a 	mov	r2,zero
 80104e0:	f800283a 	ret
 80104e4:	00c00044 	movi	r3,1
 80104e8:	003ff406 	br	80104bc <__udivsi3+0x34>

080104ec <__umodsi3>:
 80104ec:	2005883a 	mov	r2,r4
 80104f0:	2900122e 	bgeu	r5,r4,801053c <__umodsi3+0x50>
 80104f4:	28001116 	blt	r5,zero,801053c <__umodsi3+0x50>
 80104f8:	01800804 	movi	r6,32
 80104fc:	00c00044 	movi	r3,1
 8010500:	00000206 	br	801050c <__umodsi3+0x20>
 8010504:	30000c26 	beq	r6,zero,8010538 <__umodsi3+0x4c>
 8010508:	28000516 	blt	r5,zero,8010520 <__umodsi3+0x34>
 801050c:	294b883a 	add	r5,r5,r5
 8010510:	31bfffc4 	addi	r6,r6,-1
 8010514:	18c7883a 	add	r3,r3,r3
 8010518:	293ffa36 	bltu	r5,r4,8010504 <__umodsi3+0x18>
 801051c:	18000626 	beq	r3,zero,8010538 <__umodsi3+0x4c>
 8010520:	1806d07a 	srli	r3,r3,1
 8010524:	11400136 	bltu	r2,r5,801052c <__umodsi3+0x40>
 8010528:	1145c83a 	sub	r2,r2,r5
 801052c:	280ad07a 	srli	r5,r5,1
 8010530:	183ffb1e 	bne	r3,zero,8010520 <__umodsi3+0x34>
 8010534:	f800283a 	ret
 8010538:	f800283a 	ret
 801053c:	00c00044 	movi	r3,1
 8010540:	003ff706 	br	8010520 <__umodsi3+0x34>

08010544 <__adddf3>:
 8010544:	02c00434 	movhi	r11,16
 8010548:	5affffc4 	addi	r11,r11,-1
 801054c:	2806d7fa 	srli	r3,r5,31
 8010550:	2ad4703a 	and	r10,r5,r11
 8010554:	3ad2703a 	and	r9,r7,r11
 8010558:	3804d53a 	srli	r2,r7,20
 801055c:	3018d77a 	srli	r12,r6,29
 8010560:	280ad53a 	srli	r5,r5,20
 8010564:	501490fa 	slli	r10,r10,3
 8010568:	2010d77a 	srli	r8,r4,29
 801056c:	481290fa 	slli	r9,r9,3
 8010570:	380ed7fa 	srli	r7,r7,31
 8010574:	defffb04 	addi	sp,sp,-20
 8010578:	dc800215 	stw	r18,8(sp)
 801057c:	dc400115 	stw	r17,4(sp)
 8010580:	dc000015 	stw	r16,0(sp)
 8010584:	dfc00415 	stw	ra,16(sp)
 8010588:	dcc00315 	stw	r19,12(sp)
 801058c:	1c803fcc 	andi	r18,r3,255
 8010590:	2c01ffcc 	andi	r16,r5,2047
 8010594:	5210b03a 	or	r8,r10,r8
 8010598:	202290fa 	slli	r17,r4,3
 801059c:	1081ffcc 	andi	r2,r2,2047
 80105a0:	4b12b03a 	or	r9,r9,r12
 80105a4:	300c90fa 	slli	r6,r6,3
 80105a8:	91c07526 	beq	r18,r7,8010780 <__adddf3+0x23c>
 80105ac:	8087c83a 	sub	r3,r16,r2
 80105b0:	00c0ab0e 	bge	zero,r3,8010860 <__adddf3+0x31c>
 80105b4:	10002a1e 	bne	r2,zero,8010660 <__adddf3+0x11c>
 80105b8:	4984b03a 	or	r2,r9,r6
 80105bc:	1000961e 	bne	r2,zero,8010818 <__adddf3+0x2d4>
 80105c0:	888001cc 	andi	r2,r17,7
 80105c4:	10000726 	beq	r2,zero,80105e4 <__adddf3+0xa0>
 80105c8:	888003cc 	andi	r2,r17,15
 80105cc:	00c00104 	movi	r3,4
 80105d0:	10c00426 	beq	r2,r3,80105e4 <__adddf3+0xa0>
 80105d4:	88c7883a 	add	r3,r17,r3
 80105d8:	1c63803a 	cmpltu	r17,r3,r17
 80105dc:	4451883a 	add	r8,r8,r17
 80105e0:	1823883a 	mov	r17,r3
 80105e4:	4080202c 	andhi	r2,r8,128
 80105e8:	10005926 	beq	r2,zero,8010750 <__adddf3+0x20c>
 80105ec:	84000044 	addi	r16,r16,1
 80105f0:	0081ffc4 	movi	r2,2047
 80105f4:	8080ba26 	beq	r16,r2,80108e0 <__adddf3+0x39c>
 80105f8:	00bfe034 	movhi	r2,65408
 80105fc:	10bfffc4 	addi	r2,r2,-1
 8010600:	4090703a 	and	r8,r8,r2
 8010604:	4004977a 	slli	r2,r8,29
 8010608:	4010927a 	slli	r8,r8,9
 801060c:	8822d0fa 	srli	r17,r17,3
 8010610:	8401ffcc 	andi	r16,r16,2047
 8010614:	4010d33a 	srli	r8,r8,12
 8010618:	9007883a 	mov	r3,r18
 801061c:	1444b03a 	or	r2,r2,r17
 8010620:	8401ffcc 	andi	r16,r16,2047
 8010624:	8020953a 	slli	r16,r16,20
 8010628:	18c03fcc 	andi	r3,r3,255
 801062c:	01000434 	movhi	r4,16
 8010630:	213fffc4 	addi	r4,r4,-1
 8010634:	180697fa 	slli	r3,r3,31
 8010638:	4110703a 	and	r8,r8,r4
 801063c:	4410b03a 	or	r8,r8,r16
 8010640:	40c6b03a 	or	r3,r8,r3
 8010644:	dfc00417 	ldw	ra,16(sp)
 8010648:	dcc00317 	ldw	r19,12(sp)
 801064c:	dc800217 	ldw	r18,8(sp)
 8010650:	dc400117 	ldw	r17,4(sp)
 8010654:	dc000017 	ldw	r16,0(sp)
 8010658:	dec00504 	addi	sp,sp,20
 801065c:	f800283a 	ret
 8010660:	0081ffc4 	movi	r2,2047
 8010664:	80bfd626 	beq	r16,r2,80105c0 <__adddf3+0x7c>
 8010668:	4a402034 	orhi	r9,r9,128
 801066c:	00800e04 	movi	r2,56
 8010670:	10c09f16 	blt	r2,r3,80108f0 <__adddf3+0x3ac>
 8010674:	008007c4 	movi	r2,31
 8010678:	10c0c216 	blt	r2,r3,8010984 <__adddf3+0x440>
 801067c:	00800804 	movi	r2,32
 8010680:	10c5c83a 	sub	r2,r2,r3
 8010684:	488a983a 	sll	r5,r9,r2
 8010688:	30c8d83a 	srl	r4,r6,r3
 801068c:	3084983a 	sll	r2,r6,r2
 8010690:	48c6d83a 	srl	r3,r9,r3
 8010694:	290cb03a 	or	r6,r5,r4
 8010698:	1004c03a 	cmpne	r2,r2,zero
 801069c:	308cb03a 	or	r6,r6,r2
 80106a0:	898dc83a 	sub	r6,r17,r6
 80106a4:	89a3803a 	cmpltu	r17,r17,r6
 80106a8:	40d1c83a 	sub	r8,r8,r3
 80106ac:	4451c83a 	sub	r8,r8,r17
 80106b0:	3023883a 	mov	r17,r6
 80106b4:	4080202c 	andhi	r2,r8,128
 80106b8:	10002326 	beq	r2,zero,8010748 <__adddf3+0x204>
 80106bc:	04c02034 	movhi	r19,128
 80106c0:	9cffffc4 	addi	r19,r19,-1
 80106c4:	44e6703a 	and	r19,r8,r19
 80106c8:	98007626 	beq	r19,zero,80108a4 <__adddf3+0x360>
 80106cc:	9809883a 	mov	r4,r19
 80106d0:	80059900 	call	8005990 <__clzsi2>
 80106d4:	10fffe04 	addi	r3,r2,-8
 80106d8:	010007c4 	movi	r4,31
 80106dc:	20c07716 	blt	r4,r3,80108bc <__adddf3+0x378>
 80106e0:	00800804 	movi	r2,32
 80106e4:	10c5c83a 	sub	r2,r2,r3
 80106e8:	8884d83a 	srl	r2,r17,r2
 80106ec:	98d0983a 	sll	r8,r19,r3
 80106f0:	88e2983a 	sll	r17,r17,r3
 80106f4:	1204b03a 	or	r2,r2,r8
 80106f8:	1c007416 	blt	r3,r16,80108cc <__adddf3+0x388>
 80106fc:	1c21c83a 	sub	r16,r3,r16
 8010700:	82000044 	addi	r8,r16,1
 8010704:	00c007c4 	movi	r3,31
 8010708:	1a009116 	blt	r3,r8,8010950 <__adddf3+0x40c>
 801070c:	00c00804 	movi	r3,32
 8010710:	1a07c83a 	sub	r3,r3,r8
 8010714:	8a08d83a 	srl	r4,r17,r8
 8010718:	88e2983a 	sll	r17,r17,r3
 801071c:	10c6983a 	sll	r3,r2,r3
 8010720:	1210d83a 	srl	r8,r2,r8
 8010724:	8804c03a 	cmpne	r2,r17,zero
 8010728:	1906b03a 	or	r3,r3,r4
 801072c:	18a2b03a 	or	r17,r3,r2
 8010730:	0021883a 	mov	r16,zero
 8010734:	003fa206 	br	80105c0 <__adddf3+0x7c>
 8010738:	1890b03a 	or	r8,r3,r2
 801073c:	40017d26 	beq	r8,zero,8010d34 <__adddf3+0x7f0>
 8010740:	1011883a 	mov	r8,r2
 8010744:	1823883a 	mov	r17,r3
 8010748:	888001cc 	andi	r2,r17,7
 801074c:	103f9e1e 	bne	r2,zero,80105c8 <__adddf3+0x84>
 8010750:	4004977a 	slli	r2,r8,29
 8010754:	8822d0fa 	srli	r17,r17,3
 8010758:	4010d0fa 	srli	r8,r8,3
 801075c:	9007883a 	mov	r3,r18
 8010760:	1444b03a 	or	r2,r2,r17
 8010764:	0101ffc4 	movi	r4,2047
 8010768:	81002426 	beq	r16,r4,80107fc <__adddf3+0x2b8>
 801076c:	8120703a 	and	r16,r16,r4
 8010770:	01000434 	movhi	r4,16
 8010774:	213fffc4 	addi	r4,r4,-1
 8010778:	4110703a 	and	r8,r8,r4
 801077c:	003fa806 	br	8010620 <__adddf3+0xdc>
 8010780:	8089c83a 	sub	r4,r16,r2
 8010784:	01005e0e 	bge	zero,r4,8010900 <__adddf3+0x3bc>
 8010788:	10002b26 	beq	r2,zero,8010838 <__adddf3+0x2f4>
 801078c:	0081ffc4 	movi	r2,2047
 8010790:	80bf8b26 	beq	r16,r2,80105c0 <__adddf3+0x7c>
 8010794:	4a402034 	orhi	r9,r9,128
 8010798:	00800e04 	movi	r2,56
 801079c:	1100a40e 	bge	r2,r4,8010a30 <__adddf3+0x4ec>
 80107a0:	498cb03a 	or	r6,r9,r6
 80107a4:	300ac03a 	cmpne	r5,r6,zero
 80107a8:	0013883a 	mov	r9,zero
 80107ac:	2c4b883a 	add	r5,r5,r17
 80107b0:	2c63803a 	cmpltu	r17,r5,r17
 80107b4:	4a11883a 	add	r8,r9,r8
 80107b8:	8a11883a 	add	r8,r17,r8
 80107bc:	2823883a 	mov	r17,r5
 80107c0:	4080202c 	andhi	r2,r8,128
 80107c4:	103fe026 	beq	r2,zero,8010748 <__adddf3+0x204>
 80107c8:	84000044 	addi	r16,r16,1
 80107cc:	0081ffc4 	movi	r2,2047
 80107d0:	8080d226 	beq	r16,r2,8010b1c <__adddf3+0x5d8>
 80107d4:	00bfe034 	movhi	r2,65408
 80107d8:	10bfffc4 	addi	r2,r2,-1
 80107dc:	4090703a 	and	r8,r8,r2
 80107e0:	880ad07a 	srli	r5,r17,1
 80107e4:	400897fa 	slli	r4,r8,31
 80107e8:	88c0004c 	andi	r3,r17,1
 80107ec:	28e2b03a 	or	r17,r5,r3
 80107f0:	4010d07a 	srli	r8,r8,1
 80107f4:	2462b03a 	or	r17,r4,r17
 80107f8:	003f7106 	br	80105c0 <__adddf3+0x7c>
 80107fc:	4088b03a 	or	r4,r8,r2
 8010800:	20014526 	beq	r4,zero,8010d18 <__adddf3+0x7d4>
 8010804:	01000434 	movhi	r4,16
 8010808:	42000234 	orhi	r8,r8,8
 801080c:	213fffc4 	addi	r4,r4,-1
 8010810:	4110703a 	and	r8,r8,r4
 8010814:	003f8206 	br	8010620 <__adddf3+0xdc>
 8010818:	18ffffc4 	addi	r3,r3,-1
 801081c:	1800491e 	bne	r3,zero,8010944 <__adddf3+0x400>
 8010820:	898bc83a 	sub	r5,r17,r6
 8010824:	8963803a 	cmpltu	r17,r17,r5
 8010828:	4251c83a 	sub	r8,r8,r9
 801082c:	4451c83a 	sub	r8,r8,r17
 8010830:	2823883a 	mov	r17,r5
 8010834:	003f9f06 	br	80106b4 <__adddf3+0x170>
 8010838:	4984b03a 	or	r2,r9,r6
 801083c:	103f6026 	beq	r2,zero,80105c0 <__adddf3+0x7c>
 8010840:	213fffc4 	addi	r4,r4,-1
 8010844:	2000931e 	bne	r4,zero,8010a94 <__adddf3+0x550>
 8010848:	898d883a 	add	r6,r17,r6
 801084c:	3463803a 	cmpltu	r17,r6,r17
 8010850:	4251883a 	add	r8,r8,r9
 8010854:	8a11883a 	add	r8,r17,r8
 8010858:	3023883a 	mov	r17,r6
 801085c:	003fd806 	br	80107c0 <__adddf3+0x27c>
 8010860:	1800541e 	bne	r3,zero,80109b4 <__adddf3+0x470>
 8010864:	80800044 	addi	r2,r16,1
 8010868:	1081ffcc 	andi	r2,r2,2047
 801086c:	00c00044 	movi	r3,1
 8010870:	1880a00e 	bge	r3,r2,8010af4 <__adddf3+0x5b0>
 8010874:	8989c83a 	sub	r4,r17,r6
 8010878:	8905803a 	cmpltu	r2,r17,r4
 801087c:	4267c83a 	sub	r19,r8,r9
 8010880:	98a7c83a 	sub	r19,r19,r2
 8010884:	9880202c 	andhi	r2,r19,128
 8010888:	10006326 	beq	r2,zero,8010a18 <__adddf3+0x4d4>
 801088c:	3463c83a 	sub	r17,r6,r17
 8010890:	4a07c83a 	sub	r3,r9,r8
 8010894:	344d803a 	cmpltu	r6,r6,r17
 8010898:	19a7c83a 	sub	r19,r3,r6
 801089c:	3825883a 	mov	r18,r7
 80108a0:	983f8a1e 	bne	r19,zero,80106cc <__adddf3+0x188>
 80108a4:	8809883a 	mov	r4,r17
 80108a8:	80059900 	call	8005990 <__clzsi2>
 80108ac:	10800804 	addi	r2,r2,32
 80108b0:	10fffe04 	addi	r3,r2,-8
 80108b4:	010007c4 	movi	r4,31
 80108b8:	20ff890e 	bge	r4,r3,80106e0 <__adddf3+0x19c>
 80108bc:	10bff604 	addi	r2,r2,-40
 80108c0:	8884983a 	sll	r2,r17,r2
 80108c4:	0023883a 	mov	r17,zero
 80108c8:	1c3f8c0e 	bge	r3,r16,80106fc <__adddf3+0x1b8>
 80108cc:	023fe034 	movhi	r8,65408
 80108d0:	423fffc4 	addi	r8,r8,-1
 80108d4:	80e1c83a 	sub	r16,r16,r3
 80108d8:	1210703a 	and	r8,r2,r8
 80108dc:	003f3806 	br	80105c0 <__adddf3+0x7c>
 80108e0:	9007883a 	mov	r3,r18
 80108e4:	0011883a 	mov	r8,zero
 80108e8:	0005883a 	mov	r2,zero
 80108ec:	003f4c06 	br	8010620 <__adddf3+0xdc>
 80108f0:	498cb03a 	or	r6,r9,r6
 80108f4:	300cc03a 	cmpne	r6,r6,zero
 80108f8:	0007883a 	mov	r3,zero
 80108fc:	003f6806 	br	80106a0 <__adddf3+0x15c>
 8010900:	20009c1e 	bne	r4,zero,8010b74 <__adddf3+0x630>
 8010904:	80800044 	addi	r2,r16,1
 8010908:	1141ffcc 	andi	r5,r2,2047
 801090c:	01000044 	movi	r4,1
 8010910:	2140670e 	bge	r4,r5,8010ab0 <__adddf3+0x56c>
 8010914:	0101ffc4 	movi	r4,2047
 8010918:	11007f26 	beq	r2,r4,8010b18 <__adddf3+0x5d4>
 801091c:	898d883a 	add	r6,r17,r6
 8010920:	4247883a 	add	r3,r8,r9
 8010924:	3451803a 	cmpltu	r8,r6,r17
 8010928:	40d1883a 	add	r8,r8,r3
 801092c:	402297fa 	slli	r17,r8,31
 8010930:	300cd07a 	srli	r6,r6,1
 8010934:	4010d07a 	srli	r8,r8,1
 8010938:	1021883a 	mov	r16,r2
 801093c:	89a2b03a 	or	r17,r17,r6
 8010940:	003f1f06 	br	80105c0 <__adddf3+0x7c>
 8010944:	0081ffc4 	movi	r2,2047
 8010948:	80bf481e 	bne	r16,r2,801066c <__adddf3+0x128>
 801094c:	003f1c06 	br	80105c0 <__adddf3+0x7c>
 8010950:	843ff844 	addi	r16,r16,-31
 8010954:	01000804 	movi	r4,32
 8010958:	1406d83a 	srl	r3,r2,r16
 801095c:	41005026 	beq	r8,r4,8010aa0 <__adddf3+0x55c>
 8010960:	01001004 	movi	r4,64
 8010964:	2211c83a 	sub	r8,r4,r8
 8010968:	1204983a 	sll	r2,r2,r8
 801096c:	88a2b03a 	or	r17,r17,r2
 8010970:	8822c03a 	cmpne	r17,r17,zero
 8010974:	1c62b03a 	or	r17,r3,r17
 8010978:	0011883a 	mov	r8,zero
 801097c:	0021883a 	mov	r16,zero
 8010980:	003f7106 	br	8010748 <__adddf3+0x204>
 8010984:	193ff804 	addi	r4,r3,-32
 8010988:	00800804 	movi	r2,32
 801098c:	4908d83a 	srl	r4,r9,r4
 8010990:	18804526 	beq	r3,r2,8010aa8 <__adddf3+0x564>
 8010994:	00801004 	movi	r2,64
 8010998:	10c5c83a 	sub	r2,r2,r3
 801099c:	4886983a 	sll	r3,r9,r2
 80109a0:	198cb03a 	or	r6,r3,r6
 80109a4:	300cc03a 	cmpne	r6,r6,zero
 80109a8:	218cb03a 	or	r6,r4,r6
 80109ac:	0007883a 	mov	r3,zero
 80109b0:	003f3b06 	br	80106a0 <__adddf3+0x15c>
 80109b4:	80002a26 	beq	r16,zero,8010a60 <__adddf3+0x51c>
 80109b8:	0101ffc4 	movi	r4,2047
 80109bc:	11006826 	beq	r2,r4,8010b60 <__adddf3+0x61c>
 80109c0:	00c7c83a 	sub	r3,zero,r3
 80109c4:	42002034 	orhi	r8,r8,128
 80109c8:	01000e04 	movi	r4,56
 80109cc:	20c07c16 	blt	r4,r3,8010bc0 <__adddf3+0x67c>
 80109d0:	010007c4 	movi	r4,31
 80109d4:	20c0da16 	blt	r4,r3,8010d40 <__adddf3+0x7fc>
 80109d8:	01000804 	movi	r4,32
 80109dc:	20c9c83a 	sub	r4,r4,r3
 80109e0:	4114983a 	sll	r10,r8,r4
 80109e4:	88cad83a 	srl	r5,r17,r3
 80109e8:	8908983a 	sll	r4,r17,r4
 80109ec:	40c6d83a 	srl	r3,r8,r3
 80109f0:	5162b03a 	or	r17,r10,r5
 80109f4:	2008c03a 	cmpne	r4,r4,zero
 80109f8:	8922b03a 	or	r17,r17,r4
 80109fc:	3463c83a 	sub	r17,r6,r17
 8010a00:	48c7c83a 	sub	r3,r9,r3
 8010a04:	344d803a 	cmpltu	r6,r6,r17
 8010a08:	1991c83a 	sub	r8,r3,r6
 8010a0c:	1021883a 	mov	r16,r2
 8010a10:	3825883a 	mov	r18,r7
 8010a14:	003f2706 	br	80106b4 <__adddf3+0x170>
 8010a18:	24d0b03a 	or	r8,r4,r19
 8010a1c:	40001b1e 	bne	r8,zero,8010a8c <__adddf3+0x548>
 8010a20:	0005883a 	mov	r2,zero
 8010a24:	0007883a 	mov	r3,zero
 8010a28:	0021883a 	mov	r16,zero
 8010a2c:	003f4d06 	br	8010764 <__adddf3+0x220>
 8010a30:	008007c4 	movi	r2,31
 8010a34:	11003c16 	blt	r2,r4,8010b28 <__adddf3+0x5e4>
 8010a38:	00800804 	movi	r2,32
 8010a3c:	1105c83a 	sub	r2,r2,r4
 8010a40:	488e983a 	sll	r7,r9,r2
 8010a44:	310ad83a 	srl	r5,r6,r4
 8010a48:	3084983a 	sll	r2,r6,r2
 8010a4c:	4912d83a 	srl	r9,r9,r4
 8010a50:	394ab03a 	or	r5,r7,r5
 8010a54:	1004c03a 	cmpne	r2,r2,zero
 8010a58:	288ab03a 	or	r5,r5,r2
 8010a5c:	003f5306 	br	80107ac <__adddf3+0x268>
 8010a60:	4448b03a 	or	r4,r8,r17
 8010a64:	20003e26 	beq	r4,zero,8010b60 <__adddf3+0x61c>
 8010a68:	00c6303a 	nor	r3,zero,r3
 8010a6c:	18003a1e 	bne	r3,zero,8010b58 <__adddf3+0x614>
 8010a70:	3463c83a 	sub	r17,r6,r17
 8010a74:	4a07c83a 	sub	r3,r9,r8
 8010a78:	344d803a 	cmpltu	r6,r6,r17
 8010a7c:	1991c83a 	sub	r8,r3,r6
 8010a80:	1021883a 	mov	r16,r2
 8010a84:	3825883a 	mov	r18,r7
 8010a88:	003f0a06 	br	80106b4 <__adddf3+0x170>
 8010a8c:	2023883a 	mov	r17,r4
 8010a90:	003f0d06 	br	80106c8 <__adddf3+0x184>
 8010a94:	0081ffc4 	movi	r2,2047
 8010a98:	80bf3f1e 	bne	r16,r2,8010798 <__adddf3+0x254>
 8010a9c:	003ec806 	br	80105c0 <__adddf3+0x7c>
 8010aa0:	0005883a 	mov	r2,zero
 8010aa4:	003fb106 	br	801096c <__adddf3+0x428>
 8010aa8:	0007883a 	mov	r3,zero
 8010aac:	003fbc06 	br	80109a0 <__adddf3+0x45c>
 8010ab0:	4444b03a 	or	r2,r8,r17
 8010ab4:	8000871e 	bne	r16,zero,8010cd4 <__adddf3+0x790>
 8010ab8:	1000ba26 	beq	r2,zero,8010da4 <__adddf3+0x860>
 8010abc:	4984b03a 	or	r2,r9,r6
 8010ac0:	103ebf26 	beq	r2,zero,80105c0 <__adddf3+0x7c>
 8010ac4:	8985883a 	add	r2,r17,r6
 8010ac8:	4247883a 	add	r3,r8,r9
 8010acc:	1451803a 	cmpltu	r8,r2,r17
 8010ad0:	40d1883a 	add	r8,r8,r3
 8010ad4:	40c0202c 	andhi	r3,r8,128
 8010ad8:	1023883a 	mov	r17,r2
 8010adc:	183f1a26 	beq	r3,zero,8010748 <__adddf3+0x204>
 8010ae0:	00bfe034 	movhi	r2,65408
 8010ae4:	10bfffc4 	addi	r2,r2,-1
 8010ae8:	2021883a 	mov	r16,r4
 8010aec:	4090703a 	and	r8,r8,r2
 8010af0:	003eb306 	br	80105c0 <__adddf3+0x7c>
 8010af4:	4444b03a 	or	r2,r8,r17
 8010af8:	8000291e 	bne	r16,zero,8010ba0 <__adddf3+0x65c>
 8010afc:	10004b1e 	bne	r2,zero,8010c2c <__adddf3+0x6e8>
 8010b00:	4990b03a 	or	r8,r9,r6
 8010b04:	40008b26 	beq	r8,zero,8010d34 <__adddf3+0x7f0>
 8010b08:	4811883a 	mov	r8,r9
 8010b0c:	3023883a 	mov	r17,r6
 8010b10:	3825883a 	mov	r18,r7
 8010b14:	003eaa06 	br	80105c0 <__adddf3+0x7c>
 8010b18:	1021883a 	mov	r16,r2
 8010b1c:	0011883a 	mov	r8,zero
 8010b20:	0005883a 	mov	r2,zero
 8010b24:	003f0f06 	br	8010764 <__adddf3+0x220>
 8010b28:	217ff804 	addi	r5,r4,-32
 8010b2c:	00800804 	movi	r2,32
 8010b30:	494ad83a 	srl	r5,r9,r5
 8010b34:	20807d26 	beq	r4,r2,8010d2c <__adddf3+0x7e8>
 8010b38:	00801004 	movi	r2,64
 8010b3c:	1109c83a 	sub	r4,r2,r4
 8010b40:	4912983a 	sll	r9,r9,r4
 8010b44:	498cb03a 	or	r6,r9,r6
 8010b48:	300cc03a 	cmpne	r6,r6,zero
 8010b4c:	298ab03a 	or	r5,r5,r6
 8010b50:	0013883a 	mov	r9,zero
 8010b54:	003f1506 	br	80107ac <__adddf3+0x268>
 8010b58:	0101ffc4 	movi	r4,2047
 8010b5c:	113f9a1e 	bne	r2,r4,80109c8 <__adddf3+0x484>
 8010b60:	4811883a 	mov	r8,r9
 8010b64:	3023883a 	mov	r17,r6
 8010b68:	1021883a 	mov	r16,r2
 8010b6c:	3825883a 	mov	r18,r7
 8010b70:	003e9306 	br	80105c0 <__adddf3+0x7c>
 8010b74:	8000161e 	bne	r16,zero,8010bd0 <__adddf3+0x68c>
 8010b78:	444ab03a 	or	r5,r8,r17
 8010b7c:	28005126 	beq	r5,zero,8010cc4 <__adddf3+0x780>
 8010b80:	0108303a 	nor	r4,zero,r4
 8010b84:	20004d1e 	bne	r4,zero,8010cbc <__adddf3+0x778>
 8010b88:	89a3883a 	add	r17,r17,r6
 8010b8c:	4253883a 	add	r9,r8,r9
 8010b90:	898d803a 	cmpltu	r6,r17,r6
 8010b94:	3251883a 	add	r8,r6,r9
 8010b98:	1021883a 	mov	r16,r2
 8010b9c:	003f0806 	br	80107c0 <__adddf3+0x27c>
 8010ba0:	1000301e 	bne	r2,zero,8010c64 <__adddf3+0x720>
 8010ba4:	4984b03a 	or	r2,r9,r6
 8010ba8:	10007126 	beq	r2,zero,8010d70 <__adddf3+0x82c>
 8010bac:	4811883a 	mov	r8,r9
 8010bb0:	3023883a 	mov	r17,r6
 8010bb4:	3825883a 	mov	r18,r7
 8010bb8:	0401ffc4 	movi	r16,2047
 8010bbc:	003e8006 	br	80105c0 <__adddf3+0x7c>
 8010bc0:	4462b03a 	or	r17,r8,r17
 8010bc4:	8822c03a 	cmpne	r17,r17,zero
 8010bc8:	0007883a 	mov	r3,zero
 8010bcc:	003f8b06 	br	80109fc <__adddf3+0x4b8>
 8010bd0:	0141ffc4 	movi	r5,2047
 8010bd4:	11403b26 	beq	r2,r5,8010cc4 <__adddf3+0x780>
 8010bd8:	0109c83a 	sub	r4,zero,r4
 8010bdc:	42002034 	orhi	r8,r8,128
 8010be0:	01400e04 	movi	r5,56
 8010be4:	29006716 	blt	r5,r4,8010d84 <__adddf3+0x840>
 8010be8:	014007c4 	movi	r5,31
 8010bec:	29007016 	blt	r5,r4,8010db0 <__adddf3+0x86c>
 8010bf0:	01400804 	movi	r5,32
 8010bf4:	290bc83a 	sub	r5,r5,r4
 8010bf8:	4154983a 	sll	r10,r8,r5
 8010bfc:	890ed83a 	srl	r7,r17,r4
 8010c00:	894a983a 	sll	r5,r17,r5
 8010c04:	4108d83a 	srl	r4,r8,r4
 8010c08:	51e2b03a 	or	r17,r10,r7
 8010c0c:	280ac03a 	cmpne	r5,r5,zero
 8010c10:	8962b03a 	or	r17,r17,r5
 8010c14:	89a3883a 	add	r17,r17,r6
 8010c18:	2253883a 	add	r9,r4,r9
 8010c1c:	898d803a 	cmpltu	r6,r17,r6
 8010c20:	3251883a 	add	r8,r6,r9
 8010c24:	1021883a 	mov	r16,r2
 8010c28:	003ee506 	br	80107c0 <__adddf3+0x27c>
 8010c2c:	4984b03a 	or	r2,r9,r6
 8010c30:	103e6326 	beq	r2,zero,80105c0 <__adddf3+0x7c>
 8010c34:	8987c83a 	sub	r3,r17,r6
 8010c38:	88c9803a 	cmpltu	r4,r17,r3
 8010c3c:	4245c83a 	sub	r2,r8,r9
 8010c40:	1105c83a 	sub	r2,r2,r4
 8010c44:	1100202c 	andhi	r4,r2,128
 8010c48:	203ebb26 	beq	r4,zero,8010738 <__adddf3+0x1f4>
 8010c4c:	3463c83a 	sub	r17,r6,r17
 8010c50:	4a07c83a 	sub	r3,r9,r8
 8010c54:	344d803a 	cmpltu	r6,r6,r17
 8010c58:	1991c83a 	sub	r8,r3,r6
 8010c5c:	3825883a 	mov	r18,r7
 8010c60:	003e5706 	br	80105c0 <__adddf3+0x7c>
 8010c64:	4984b03a 	or	r2,r9,r6
 8010c68:	10002e26 	beq	r2,zero,8010d24 <__adddf3+0x7e0>
 8010c6c:	4004d0fa 	srli	r2,r8,3
 8010c70:	8822d0fa 	srli	r17,r17,3
 8010c74:	4010977a 	slli	r8,r8,29
 8010c78:	10c0022c 	andhi	r3,r2,8
 8010c7c:	4462b03a 	or	r17,r8,r17
 8010c80:	18000826 	beq	r3,zero,8010ca4 <__adddf3+0x760>
 8010c84:	4808d0fa 	srli	r4,r9,3
 8010c88:	20c0022c 	andhi	r3,r4,8
 8010c8c:	1800051e 	bne	r3,zero,8010ca4 <__adddf3+0x760>
 8010c90:	300cd0fa 	srli	r6,r6,3
 8010c94:	4806977a 	slli	r3,r9,29
 8010c98:	2005883a 	mov	r2,r4
 8010c9c:	3825883a 	mov	r18,r7
 8010ca0:	19a2b03a 	or	r17,r3,r6
 8010ca4:	8810d77a 	srli	r8,r17,29
 8010ca8:	100490fa 	slli	r2,r2,3
 8010cac:	882290fa 	slli	r17,r17,3
 8010cb0:	0401ffc4 	movi	r16,2047
 8010cb4:	4090b03a 	or	r8,r8,r2
 8010cb8:	003e4106 	br	80105c0 <__adddf3+0x7c>
 8010cbc:	0141ffc4 	movi	r5,2047
 8010cc0:	117fc71e 	bne	r2,r5,8010be0 <__adddf3+0x69c>
 8010cc4:	4811883a 	mov	r8,r9
 8010cc8:	3023883a 	mov	r17,r6
 8010ccc:	1021883a 	mov	r16,r2
 8010cd0:	003e3b06 	br	80105c0 <__adddf3+0x7c>
 8010cd4:	10002f26 	beq	r2,zero,8010d94 <__adddf3+0x850>
 8010cd8:	4984b03a 	or	r2,r9,r6
 8010cdc:	10001126 	beq	r2,zero,8010d24 <__adddf3+0x7e0>
 8010ce0:	4004d0fa 	srli	r2,r8,3
 8010ce4:	8822d0fa 	srli	r17,r17,3
 8010ce8:	4010977a 	slli	r8,r8,29
 8010cec:	10c0022c 	andhi	r3,r2,8
 8010cf0:	4462b03a 	or	r17,r8,r17
 8010cf4:	183feb26 	beq	r3,zero,8010ca4 <__adddf3+0x760>
 8010cf8:	4808d0fa 	srli	r4,r9,3
 8010cfc:	20c0022c 	andhi	r3,r4,8
 8010d00:	183fe81e 	bne	r3,zero,8010ca4 <__adddf3+0x760>
 8010d04:	300cd0fa 	srli	r6,r6,3
 8010d08:	4806977a 	slli	r3,r9,29
 8010d0c:	2005883a 	mov	r2,r4
 8010d10:	19a2b03a 	or	r17,r3,r6
 8010d14:	003fe306 	br	8010ca4 <__adddf3+0x760>
 8010d18:	0011883a 	mov	r8,zero
 8010d1c:	0005883a 	mov	r2,zero
 8010d20:	003e3f06 	br	8010620 <__adddf3+0xdc>
 8010d24:	0401ffc4 	movi	r16,2047
 8010d28:	003e2506 	br	80105c0 <__adddf3+0x7c>
 8010d2c:	0013883a 	mov	r9,zero
 8010d30:	003f8406 	br	8010b44 <__adddf3+0x600>
 8010d34:	0005883a 	mov	r2,zero
 8010d38:	0007883a 	mov	r3,zero
 8010d3c:	003e8906 	br	8010764 <__adddf3+0x220>
 8010d40:	197ff804 	addi	r5,r3,-32
 8010d44:	01000804 	movi	r4,32
 8010d48:	414ad83a 	srl	r5,r8,r5
 8010d4c:	19002426 	beq	r3,r4,8010de0 <__adddf3+0x89c>
 8010d50:	01001004 	movi	r4,64
 8010d54:	20c7c83a 	sub	r3,r4,r3
 8010d58:	40c6983a 	sll	r3,r8,r3
 8010d5c:	1c46b03a 	or	r3,r3,r17
 8010d60:	1806c03a 	cmpne	r3,r3,zero
 8010d64:	28e2b03a 	or	r17,r5,r3
 8010d68:	0007883a 	mov	r3,zero
 8010d6c:	003f2306 	br	80109fc <__adddf3+0x4b8>
 8010d70:	0007883a 	mov	r3,zero
 8010d74:	5811883a 	mov	r8,r11
 8010d78:	00bfffc4 	movi	r2,-1
 8010d7c:	0401ffc4 	movi	r16,2047
 8010d80:	003e7806 	br	8010764 <__adddf3+0x220>
 8010d84:	4462b03a 	or	r17,r8,r17
 8010d88:	8822c03a 	cmpne	r17,r17,zero
 8010d8c:	0009883a 	mov	r4,zero
 8010d90:	003fa006 	br	8010c14 <__adddf3+0x6d0>
 8010d94:	4811883a 	mov	r8,r9
 8010d98:	3023883a 	mov	r17,r6
 8010d9c:	0401ffc4 	movi	r16,2047
 8010da0:	003e0706 	br	80105c0 <__adddf3+0x7c>
 8010da4:	4811883a 	mov	r8,r9
 8010da8:	3023883a 	mov	r17,r6
 8010dac:	003e0406 	br	80105c0 <__adddf3+0x7c>
 8010db0:	21fff804 	addi	r7,r4,-32
 8010db4:	01400804 	movi	r5,32
 8010db8:	41ced83a 	srl	r7,r8,r7
 8010dbc:	21400a26 	beq	r4,r5,8010de8 <__adddf3+0x8a4>
 8010dc0:	01401004 	movi	r5,64
 8010dc4:	2909c83a 	sub	r4,r5,r4
 8010dc8:	4108983a 	sll	r4,r8,r4
 8010dcc:	2448b03a 	or	r4,r4,r17
 8010dd0:	2008c03a 	cmpne	r4,r4,zero
 8010dd4:	3922b03a 	or	r17,r7,r4
 8010dd8:	0009883a 	mov	r4,zero
 8010ddc:	003f8d06 	br	8010c14 <__adddf3+0x6d0>
 8010de0:	0007883a 	mov	r3,zero
 8010de4:	003fdd06 	br	8010d5c <__adddf3+0x818>
 8010de8:	0009883a 	mov	r4,zero
 8010dec:	003ff706 	br	8010dcc <__adddf3+0x888>

08010df0 <__divdf3>:
 8010df0:	defff004 	addi	sp,sp,-64
 8010df4:	dc800815 	stw	r18,32(sp)
 8010df8:	2824d53a 	srli	r18,r5,20
 8010dfc:	dd800c15 	stw	r22,48(sp)
 8010e00:	282cd7fa 	srli	r22,r5,31
 8010e04:	dc000615 	stw	r16,24(sp)
 8010e08:	04000434 	movhi	r16,16
 8010e0c:	843fffc4 	addi	r16,r16,-1
 8010e10:	dfc00f15 	stw	ra,60(sp)
 8010e14:	df000e15 	stw	fp,56(sp)
 8010e18:	ddc00d15 	stw	r23,52(sp)
 8010e1c:	dd400b15 	stw	r21,44(sp)
 8010e20:	dd000a15 	stw	r20,40(sp)
 8010e24:	dcc00915 	stw	r19,36(sp)
 8010e28:	dc400715 	stw	r17,28(sp)
 8010e2c:	9481ffcc 	andi	r18,r18,2047
 8010e30:	2c20703a 	and	r16,r5,r16
 8010e34:	b2003fcc 	andi	r8,r22,255
 8010e38:	90006126 	beq	r18,zero,8010fc0 <__divdf3+0x1d0>
 8010e3c:	0081ffc4 	movi	r2,2047
 8010e40:	202b883a 	mov	r21,r4
 8010e44:	90803726 	beq	r18,r2,8010f24 <__divdf3+0x134>
 8010e48:	80800434 	orhi	r2,r16,16
 8010e4c:	100490fa 	slli	r2,r2,3
 8010e50:	2020d77a 	srli	r16,r4,29
 8010e54:	202a90fa 	slli	r21,r4,3
 8010e58:	94bf0044 	addi	r18,r18,-1023
 8010e5c:	80a0b03a 	or	r16,r16,r2
 8010e60:	0013883a 	mov	r9,zero
 8010e64:	000b883a 	mov	r5,zero
 8010e68:	3806d53a 	srli	r3,r7,20
 8010e6c:	382ed7fa 	srli	r23,r7,31
 8010e70:	04400434 	movhi	r17,16
 8010e74:	8c7fffc4 	addi	r17,r17,-1
 8010e78:	18c1ffcc 	andi	r3,r3,2047
 8010e7c:	3029883a 	mov	r20,r6
 8010e80:	3c62703a 	and	r17,r7,r17
 8010e84:	bf003fcc 	andi	fp,r23,255
 8010e88:	18006e26 	beq	r3,zero,8011044 <__divdf3+0x254>
 8010e8c:	0081ffc4 	movi	r2,2047
 8010e90:	18806626 	beq	r3,r2,801102c <__divdf3+0x23c>
 8010e94:	88800434 	orhi	r2,r17,16
 8010e98:	100490fa 	slli	r2,r2,3
 8010e9c:	3022d77a 	srli	r17,r6,29
 8010ea0:	302890fa 	slli	r20,r6,3
 8010ea4:	18ff0044 	addi	r3,r3,-1023
 8010ea8:	88a2b03a 	or	r17,r17,r2
 8010eac:	000f883a 	mov	r7,zero
 8010eb0:	b5e6f03a 	xor	r19,r22,r23
 8010eb4:	3a4cb03a 	or	r6,r7,r9
 8010eb8:	008003c4 	movi	r2,15
 8010ebc:	9809883a 	mov	r4,r19
 8010ec0:	90c7c83a 	sub	r3,r18,r3
 8010ec4:	9cc03fcc 	andi	r19,r19,255
 8010ec8:	11809636 	bltu	r2,r6,8011124 <__divdf3+0x334>
 8010ecc:	300c90ba 	slli	r6,r6,2
 8010ed0:	00820074 	movhi	r2,2049
 8010ed4:	1083b904 	addi	r2,r2,3812
 8010ed8:	308d883a 	add	r6,r6,r2
 8010edc:	30800017 	ldw	r2,0(r6)
 8010ee0:	1000683a 	jmp	r2
 8010ee4:	08011124 	muli	zero,at,1092
 8010ee8:	08010f5c 	xori	zero,at,1085
 8010eec:	08011114 	ori	zero,at,1092
 8010ef0:	08010f50 	cmplti	zero,at,1085
 8010ef4:	08011114 	ori	zero,at,1092
 8010ef8:	080110e8 	cmpgeui	zero,at,1091
 8010efc:	08011114 	ori	zero,at,1092
 8010f00:	08010f50 	cmplti	zero,at,1085
 8010f04:	08010f5c 	xori	zero,at,1085
 8010f08:	08010f5c 	xori	zero,at,1085
 8010f0c:	080110e8 	cmpgeui	zero,at,1091
 8010f10:	08010f50 	cmplti	zero,at,1085
 8010f14:	08010f40 	call	8010f4 <__alt_mem_onchip_memory2_0+0x8010f4>
 8010f18:	08010f40 	call	8010f4 <__alt_mem_onchip_memory2_0+0x8010f4>
 8010f1c:	08010f40 	call	8010f4 <__alt_mem_onchip_memory2_0+0x8010f4>
 8010f20:	080114ac 	andhi	zero,at,1106
 8010f24:	2404b03a 	or	r2,r4,r16
 8010f28:	10006c1e 	bne	r2,zero,80110dc <__divdf3+0x2ec>
 8010f2c:	02400204 	movi	r9,8
 8010f30:	0021883a 	mov	r16,zero
 8010f34:	002b883a 	mov	r21,zero
 8010f38:	01400084 	movi	r5,2
 8010f3c:	003fca06 	br	8010e68 <__divdf3+0x78>
 8010f40:	8023883a 	mov	r17,r16
 8010f44:	a829883a 	mov	r20,r21
 8010f48:	4039883a 	mov	fp,r8
 8010f4c:	280f883a 	mov	r7,r5
 8010f50:	00800084 	movi	r2,2
 8010f54:	3881601e 	bne	r7,r2,80114d8 <__divdf3+0x6e8>
 8010f58:	e027883a 	mov	r19,fp
 8010f5c:	9900004c 	andi	r4,r19,1
 8010f60:	0081ffc4 	movi	r2,2047
 8010f64:	0021883a 	mov	r16,zero
 8010f68:	002b883a 	mov	r21,zero
 8010f6c:	1004953a 	slli	r2,r2,20
 8010f70:	20c03fcc 	andi	r3,r4,255
 8010f74:	01400434 	movhi	r5,16
 8010f78:	297fffc4 	addi	r5,r5,-1
 8010f7c:	180697fa 	slli	r3,r3,31
 8010f80:	8160703a 	and	r16,r16,r5
 8010f84:	80a0b03a 	or	r16,r16,r2
 8010f88:	80c6b03a 	or	r3,r16,r3
 8010f8c:	a805883a 	mov	r2,r21
 8010f90:	dfc00f17 	ldw	ra,60(sp)
 8010f94:	df000e17 	ldw	fp,56(sp)
 8010f98:	ddc00d17 	ldw	r23,52(sp)
 8010f9c:	dd800c17 	ldw	r22,48(sp)
 8010fa0:	dd400b17 	ldw	r21,44(sp)
 8010fa4:	dd000a17 	ldw	r20,40(sp)
 8010fa8:	dcc00917 	ldw	r19,36(sp)
 8010fac:	dc800817 	ldw	r18,32(sp)
 8010fb0:	dc400717 	ldw	r17,28(sp)
 8010fb4:	dc000617 	ldw	r16,24(sp)
 8010fb8:	dec01004 	addi	sp,sp,64
 8010fbc:	f800283a 	ret
 8010fc0:	2404b03a 	or	r2,r4,r16
 8010fc4:	2023883a 	mov	r17,r4
 8010fc8:	10003f26 	beq	r2,zero,80110c8 <__divdf3+0x2d8>
 8010fcc:	80015e26 	beq	r16,zero,8011548 <__divdf3+0x758>
 8010fd0:	8009883a 	mov	r4,r16
 8010fd4:	d9800215 	stw	r6,8(sp)
 8010fd8:	d9c00515 	stw	r7,20(sp)
 8010fdc:	da000415 	stw	r8,16(sp)
 8010fe0:	80059900 	call	8005990 <__clzsi2>
 8010fe4:	d9800217 	ldw	r6,8(sp)
 8010fe8:	d9c00517 	ldw	r7,20(sp)
 8010fec:	da000417 	ldw	r8,16(sp)
 8010ff0:	113ffd44 	addi	r4,r2,-11
 8010ff4:	00c00704 	movi	r3,28
 8010ff8:	19014f16 	blt	r3,r4,8011538 <__divdf3+0x748>
 8010ffc:	00c00744 	movi	r3,29
 8011000:	157ffe04 	addi	r21,r2,-8
 8011004:	1907c83a 	sub	r3,r3,r4
 8011008:	8560983a 	sll	r16,r16,r21
 801100c:	88c6d83a 	srl	r3,r17,r3
 8011010:	8d6a983a 	sll	r21,r17,r21
 8011014:	1c20b03a 	or	r16,r3,r16
 8011018:	1080fcc4 	addi	r2,r2,1011
 801101c:	00a5c83a 	sub	r18,zero,r2
 8011020:	0013883a 	mov	r9,zero
 8011024:	000b883a 	mov	r5,zero
 8011028:	003f8f06 	br	8010e68 <__divdf3+0x78>
 801102c:	3444b03a 	or	r2,r6,r17
 8011030:	1000231e 	bne	r2,zero,80110c0 <__divdf3+0x2d0>
 8011034:	0023883a 	mov	r17,zero
 8011038:	0029883a 	mov	r20,zero
 801103c:	01c00084 	movi	r7,2
 8011040:	003f9b06 	br	8010eb0 <__divdf3+0xc0>
 8011044:	3444b03a 	or	r2,r6,r17
 8011048:	10001926 	beq	r2,zero,80110b0 <__divdf3+0x2c0>
 801104c:	88014b26 	beq	r17,zero,801157c <__divdf3+0x78c>
 8011050:	8809883a 	mov	r4,r17
 8011054:	d9400115 	stw	r5,4(sp)
 8011058:	d9800215 	stw	r6,8(sp)
 801105c:	da000415 	stw	r8,16(sp)
 8011060:	da400315 	stw	r9,12(sp)
 8011064:	80059900 	call	8005990 <__clzsi2>
 8011068:	d9400117 	ldw	r5,4(sp)
 801106c:	d9800217 	ldw	r6,8(sp)
 8011070:	da000417 	ldw	r8,16(sp)
 8011074:	da400317 	ldw	r9,12(sp)
 8011078:	113ffd44 	addi	r4,r2,-11
 801107c:	00c00704 	movi	r3,28
 8011080:	19013a16 	blt	r3,r4,801156c <__divdf3+0x77c>
 8011084:	00c00744 	movi	r3,29
 8011088:	153ffe04 	addi	r20,r2,-8
 801108c:	1907c83a 	sub	r3,r3,r4
 8011090:	8d22983a 	sll	r17,r17,r20
 8011094:	30c6d83a 	srl	r3,r6,r3
 8011098:	3528983a 	sll	r20,r6,r20
 801109c:	1c62b03a 	or	r17,r3,r17
 80110a0:	1080fcc4 	addi	r2,r2,1011
 80110a4:	0087c83a 	sub	r3,zero,r2
 80110a8:	000f883a 	mov	r7,zero
 80110ac:	003f8006 	br	8010eb0 <__divdf3+0xc0>
 80110b0:	0023883a 	mov	r17,zero
 80110b4:	0029883a 	mov	r20,zero
 80110b8:	01c00044 	movi	r7,1
 80110bc:	003f7c06 	br	8010eb0 <__divdf3+0xc0>
 80110c0:	01c000c4 	movi	r7,3
 80110c4:	003f7a06 	br	8010eb0 <__divdf3+0xc0>
 80110c8:	02400104 	movi	r9,4
 80110cc:	0021883a 	mov	r16,zero
 80110d0:	002b883a 	mov	r21,zero
 80110d4:	01400044 	movi	r5,1
 80110d8:	003f6306 	br	8010e68 <__divdf3+0x78>
 80110dc:	02400304 	movi	r9,12
 80110e0:	014000c4 	movi	r5,3
 80110e4:	003f6006 	br	8010e68 <__divdf3+0x78>
 80110e8:	04000434 	movhi	r16,16
 80110ec:	0009883a 	mov	r4,zero
 80110f0:	843fffc4 	addi	r16,r16,-1
 80110f4:	057fffc4 	movi	r21,-1
 80110f8:	0081ffc4 	movi	r2,2047
 80110fc:	003f9b06 	br	8010f6c <__divdf3+0x17c>
 8011100:	00c00044 	movi	r3,1
 8011104:	1887c83a 	sub	r3,r3,r2
 8011108:	01000e04 	movi	r4,56
 801110c:	20c1530e 	bge	r4,r3,801165c <__divdf3+0x86c>
 8011110:	9900004c 	andi	r4,r19,1
 8011114:	0005883a 	mov	r2,zero
 8011118:	0021883a 	mov	r16,zero
 801111c:	002b883a 	mov	r21,zero
 8011120:	003f9206 	br	8010f6c <__divdf3+0x17c>
 8011124:	8c012e36 	bltu	r17,r16,80115e0 <__divdf3+0x7f0>
 8011128:	84412c26 	beq	r16,r17,80115dc <__divdf3+0x7ec>
 801112c:	a82f883a 	mov	r23,r21
 8011130:	18ffffc4 	addi	r3,r3,-1
 8011134:	002b883a 	mov	r21,zero
 8011138:	a004d63a 	srli	r2,r20,24
 801113c:	8822923a 	slli	r17,r17,8
 8011140:	a028923a 	slli	r20,r20,8
 8011144:	8009883a 	mov	r4,r16
 8011148:	88acb03a 	or	r22,r17,r2
 801114c:	dd000015 	stw	r20,0(sp)
 8011150:	b028d43a 	srli	r20,r22,16
 8011154:	d8c00215 	stw	r3,8(sp)
 8011158:	b4bfffcc 	andi	r18,r22,65535
 801115c:	a00b883a 	mov	r5,r20
 8011160:	80104880 	call	8010488 <__udivsi3>
 8011164:	100b883a 	mov	r5,r2
 8011168:	9009883a 	mov	r4,r18
 801116c:	1023883a 	mov	r17,r2
 8011170:	80050200 	call	8005020 <__mulsi3>
 8011174:	8009883a 	mov	r4,r16
 8011178:	a00b883a 	mov	r5,r20
 801117c:	1039883a 	mov	fp,r2
 8011180:	80104ec0 	call	80104ec <__umodsi3>
 8011184:	1004943a 	slli	r2,r2,16
 8011188:	b808d43a 	srli	r4,r23,16
 801118c:	d8c00217 	ldw	r3,8(sp)
 8011190:	2084b03a 	or	r2,r4,r2
 8011194:	1700062e 	bgeu	r2,fp,80111b0 <__divdf3+0x3c0>
 8011198:	1585883a 	add	r2,r2,r22
 801119c:	893fffc4 	addi	r4,r17,-1
 80111a0:	15811d36 	bltu	r2,r22,8011618 <__divdf3+0x828>
 80111a4:	17011c2e 	bgeu	r2,fp,8011618 <__divdf3+0x828>
 80111a8:	8c7fff84 	addi	r17,r17,-2
 80111ac:	1585883a 	add	r2,r2,r22
 80111b0:	1739c83a 	sub	fp,r2,fp
 80111b4:	a00b883a 	mov	r5,r20
 80111b8:	e009883a 	mov	r4,fp
 80111bc:	d8c00215 	stw	r3,8(sp)
 80111c0:	80104880 	call	8010488 <__udivsi3>
 80111c4:	100b883a 	mov	r5,r2
 80111c8:	9009883a 	mov	r4,r18
 80111cc:	1021883a 	mov	r16,r2
 80111d0:	80050200 	call	8005020 <__mulsi3>
 80111d4:	a00b883a 	mov	r5,r20
 80111d8:	e009883a 	mov	r4,fp
 80111dc:	d8800415 	stw	r2,16(sp)
 80111e0:	80104ec0 	call	80104ec <__umodsi3>
 80111e4:	1004943a 	slli	r2,r2,16
 80111e8:	da000417 	ldw	r8,16(sp)
 80111ec:	bdffffcc 	andi	r23,r23,65535
 80111f0:	b884b03a 	or	r2,r23,r2
 80111f4:	d8c00217 	ldw	r3,8(sp)
 80111f8:	1200062e 	bgeu	r2,r8,8011214 <__divdf3+0x424>
 80111fc:	1585883a 	add	r2,r2,r22
 8011200:	813fffc4 	addi	r4,r16,-1
 8011204:	15810236 	bltu	r2,r22,8011610 <__divdf3+0x820>
 8011208:	1201012e 	bgeu	r2,r8,8011610 <__divdf3+0x820>
 801120c:	843fff84 	addi	r16,r16,-2
 8011210:	1585883a 	add	r2,r2,r22
 8011214:	8822943a 	slli	r17,r17,16
 8011218:	d9800017 	ldw	r6,0(sp)
 801121c:	1211c83a 	sub	r8,r2,r8
 8011220:	8c22b03a 	or	r17,r17,r16
 8011224:	373fffcc 	andi	fp,r6,65535
 8011228:	8abfffcc 	andi	r10,r17,65535
 801122c:	8820d43a 	srli	r16,r17,16
 8011230:	5009883a 	mov	r4,r10
 8011234:	e00b883a 	mov	r5,fp
 8011238:	302ed43a 	srli	r23,r6,16
 801123c:	d8c00215 	stw	r3,8(sp)
 8011240:	da000415 	stw	r8,16(sp)
 8011244:	da800115 	stw	r10,4(sp)
 8011248:	80050200 	call	8005020 <__mulsi3>
 801124c:	800b883a 	mov	r5,r16
 8011250:	e009883a 	mov	r4,fp
 8011254:	d8800515 	stw	r2,20(sp)
 8011258:	80050200 	call	8005020 <__mulsi3>
 801125c:	8009883a 	mov	r4,r16
 8011260:	b80b883a 	mov	r5,r23
 8011264:	d8800315 	stw	r2,12(sp)
 8011268:	80050200 	call	8005020 <__mulsi3>
 801126c:	da800117 	ldw	r10,4(sp)
 8011270:	b80b883a 	mov	r5,r23
 8011274:	1021883a 	mov	r16,r2
 8011278:	5009883a 	mov	r4,r10
 801127c:	80050200 	call	8005020 <__mulsi3>
 8011280:	d9c00517 	ldw	r7,20(sp)
 8011284:	da400317 	ldw	r9,12(sp)
 8011288:	d8c00217 	ldw	r3,8(sp)
 801128c:	3808d43a 	srli	r4,r7,16
 8011290:	1245883a 	add	r2,r2,r9
 8011294:	da000417 	ldw	r8,16(sp)
 8011298:	2085883a 	add	r2,r4,r2
 801129c:	1240022e 	bgeu	r2,r9,80112a8 <__divdf3+0x4b8>
 80112a0:	01000074 	movhi	r4,1
 80112a4:	8121883a 	add	r16,r16,r4
 80112a8:	1008d43a 	srli	r4,r2,16
 80112ac:	1004943a 	slli	r2,r2,16
 80112b0:	39ffffcc 	andi	r7,r7,65535
 80112b4:	2409883a 	add	r4,r4,r16
 80112b8:	11c5883a 	add	r2,r2,r7
 80112bc:	4100bb36 	bltu	r8,r4,80115ac <__divdf3+0x7bc>
 80112c0:	4100d726 	beq	r8,r4,8011620 <__divdf3+0x830>
 80112c4:	4109c83a 	sub	r4,r8,r4
 80112c8:	a8a1c83a 	sub	r16,r21,r2
 80112cc:	ac2b803a 	cmpltu	r21,r21,r16
 80112d0:	256bc83a 	sub	r21,r4,r21
 80112d4:	b540d926 	beq	r22,r21,801163c <__divdf3+0x84c>
 80112d8:	a00b883a 	mov	r5,r20
 80112dc:	a809883a 	mov	r4,r21
 80112e0:	d8c00215 	stw	r3,8(sp)
 80112e4:	80104880 	call	8010488 <__udivsi3>
 80112e8:	100b883a 	mov	r5,r2
 80112ec:	9009883a 	mov	r4,r18
 80112f0:	d8800515 	stw	r2,20(sp)
 80112f4:	80050200 	call	8005020 <__mulsi3>
 80112f8:	a809883a 	mov	r4,r21
 80112fc:	a00b883a 	mov	r5,r20
 8011300:	d8800415 	stw	r2,16(sp)
 8011304:	80104ec0 	call	80104ec <__umodsi3>
 8011308:	1004943a 	slli	r2,r2,16
 801130c:	8008d43a 	srli	r4,r16,16
 8011310:	da000417 	ldw	r8,16(sp)
 8011314:	d8c00217 	ldw	r3,8(sp)
 8011318:	2084b03a 	or	r2,r4,r2
 801131c:	d9c00517 	ldw	r7,20(sp)
 8011320:	1200062e 	bgeu	r2,r8,801133c <__divdf3+0x54c>
 8011324:	1585883a 	add	r2,r2,r22
 8011328:	393fffc4 	addi	r4,r7,-1
 801132c:	1580c536 	bltu	r2,r22,8011644 <__divdf3+0x854>
 8011330:	1200c42e 	bgeu	r2,r8,8011644 <__divdf3+0x854>
 8011334:	39ffff84 	addi	r7,r7,-2
 8011338:	1585883a 	add	r2,r2,r22
 801133c:	122bc83a 	sub	r21,r2,r8
 8011340:	a00b883a 	mov	r5,r20
 8011344:	a809883a 	mov	r4,r21
 8011348:	d8c00215 	stw	r3,8(sp)
 801134c:	d9c00515 	stw	r7,20(sp)
 8011350:	80104880 	call	8010488 <__udivsi3>
 8011354:	9009883a 	mov	r4,r18
 8011358:	100b883a 	mov	r5,r2
 801135c:	d8800415 	stw	r2,16(sp)
 8011360:	80050200 	call	8005020 <__mulsi3>
 8011364:	a809883a 	mov	r4,r21
 8011368:	a00b883a 	mov	r5,r20
 801136c:	1025883a 	mov	r18,r2
 8011370:	80104ec0 	call	80104ec <__umodsi3>
 8011374:	1004943a 	slli	r2,r2,16
 8011378:	813fffcc 	andi	r4,r16,65535
 801137c:	d8c00217 	ldw	r3,8(sp)
 8011380:	20a0b03a 	or	r16,r4,r2
 8011384:	d9c00517 	ldw	r7,20(sp)
 8011388:	da000417 	ldw	r8,16(sp)
 801138c:	8480062e 	bgeu	r16,r18,80113a8 <__divdf3+0x5b8>
 8011390:	85a1883a 	add	r16,r16,r22
 8011394:	40bfffc4 	addi	r2,r8,-1
 8011398:	8580ac36 	bltu	r16,r22,801164c <__divdf3+0x85c>
 801139c:	8480ab2e 	bgeu	r16,r18,801164c <__divdf3+0x85c>
 80113a0:	423fff84 	addi	r8,r8,-2
 80113a4:	85a1883a 	add	r16,r16,r22
 80113a8:	3804943a 	slli	r2,r7,16
 80113ac:	84a1c83a 	sub	r16,r16,r18
 80113b0:	e009883a 	mov	r4,fp
 80113b4:	1228b03a 	or	r20,r2,r8
 80113b8:	a1ffffcc 	andi	r7,r20,65535
 80113bc:	a024d43a 	srli	r18,r20,16
 80113c0:	380b883a 	mov	r5,r7
 80113c4:	d8c00215 	stw	r3,8(sp)
 80113c8:	d9c00515 	stw	r7,20(sp)
 80113cc:	80050200 	call	8005020 <__mulsi3>
 80113d0:	900b883a 	mov	r5,r18
 80113d4:	e009883a 	mov	r4,fp
 80113d8:	102b883a 	mov	r21,r2
 80113dc:	80050200 	call	8005020 <__mulsi3>
 80113e0:	900b883a 	mov	r5,r18
 80113e4:	b809883a 	mov	r4,r23
 80113e8:	1039883a 	mov	fp,r2
 80113ec:	80050200 	call	8005020 <__mulsi3>
 80113f0:	d9c00517 	ldw	r7,20(sp)
 80113f4:	b80b883a 	mov	r5,r23
 80113f8:	1025883a 	mov	r18,r2
 80113fc:	3809883a 	mov	r4,r7
 8011400:	80050200 	call	8005020 <__mulsi3>
 8011404:	a808d43a 	srli	r4,r21,16
 8011408:	1705883a 	add	r2,r2,fp
 801140c:	d8c00217 	ldw	r3,8(sp)
 8011410:	2085883a 	add	r2,r4,r2
 8011414:	1700022e 	bgeu	r2,fp,8011420 <__divdf3+0x630>
 8011418:	01000074 	movhi	r4,1
 801141c:	9125883a 	add	r18,r18,r4
 8011420:	1008d43a 	srli	r4,r2,16
 8011424:	1004943a 	slli	r2,r2,16
 8011428:	ad7fffcc 	andi	r21,r21,65535
 801142c:	2489883a 	add	r4,r4,r18
 8011430:	1545883a 	add	r2,r2,r21
 8011434:	81003836 	bltu	r16,r4,8011518 <__divdf3+0x728>
 8011438:	81003626 	beq	r16,r4,8011514 <__divdf3+0x724>
 801143c:	a5000054 	ori	r20,r20,1
 8011440:	1880ffc4 	addi	r2,r3,1023
 8011444:	00bf2e0e 	bge	zero,r2,8011100 <__divdf3+0x310>
 8011448:	a10001cc 	andi	r4,r20,7
 801144c:	20000726 	beq	r4,zero,801146c <__divdf3+0x67c>
 8011450:	a10003cc 	andi	r4,r20,15
 8011454:	01400104 	movi	r5,4
 8011458:	21400426 	beq	r4,r5,801146c <__divdf3+0x67c>
 801145c:	a149883a 	add	r4,r20,r5
 8011460:	2529803a 	cmpltu	r20,r4,r20
 8011464:	8d23883a 	add	r17,r17,r20
 8011468:	2029883a 	mov	r20,r4
 801146c:	8900402c 	andhi	r4,r17,256
 8011470:	20000426 	beq	r4,zero,8011484 <__divdf3+0x694>
 8011474:	18810004 	addi	r2,r3,1024
 8011478:	00ffc034 	movhi	r3,65280
 801147c:	18ffffc4 	addi	r3,r3,-1
 8011480:	88e2703a 	and	r17,r17,r3
 8011484:	00c1ff84 	movi	r3,2046
 8011488:	18beb416 	blt	r3,r2,8010f5c <__divdf3+0x16c>
 801148c:	a028d0fa 	srli	r20,r20,3
 8011490:	882a977a 	slli	r21,r17,29
 8011494:	8820927a 	slli	r16,r17,9
 8011498:	1081ffcc 	andi	r2,r2,2047
 801149c:	ad2ab03a 	or	r21,r21,r20
 80114a0:	8020d33a 	srli	r16,r16,12
 80114a4:	9900004c 	andi	r4,r19,1
 80114a8:	003eb006 	br	8010f6c <__divdf3+0x17c>
 80114ac:	8080022c 	andhi	r2,r16,8
 80114b0:	10001226 	beq	r2,zero,80114fc <__divdf3+0x70c>
 80114b4:	8880022c 	andhi	r2,r17,8
 80114b8:	1000101e 	bne	r2,zero,80114fc <__divdf3+0x70c>
 80114bc:	00800434 	movhi	r2,16
 80114c0:	8c000234 	orhi	r16,r17,8
 80114c4:	10bfffc4 	addi	r2,r2,-1
 80114c8:	b809883a 	mov	r4,r23
 80114cc:	80a0703a 	and	r16,r16,r2
 80114d0:	a02b883a 	mov	r21,r20
 80114d4:	003f0806 	br	80110f8 <__divdf3+0x308>
 80114d8:	008000c4 	movi	r2,3
 80114dc:	3880b126 	beq	r7,r2,80117a4 <__divdf3+0x9b4>
 80114e0:	00800044 	movi	r2,1
 80114e4:	38805b1e 	bne	r7,r2,8011654 <__divdf3+0x864>
 80114e8:	e009883a 	mov	r4,fp
 80114ec:	0005883a 	mov	r2,zero
 80114f0:	0021883a 	mov	r16,zero
 80114f4:	002b883a 	mov	r21,zero
 80114f8:	003e9c06 	br	8010f6c <__divdf3+0x17c>
 80114fc:	00800434 	movhi	r2,16
 8011500:	84000234 	orhi	r16,r16,8
 8011504:	10bfffc4 	addi	r2,r2,-1
 8011508:	b009883a 	mov	r4,r22
 801150c:	80a0703a 	and	r16,r16,r2
 8011510:	003ef906 	br	80110f8 <__divdf3+0x308>
 8011514:	103fca26 	beq	r2,zero,8011440 <__divdf3+0x650>
 8011518:	b421883a 	add	r16,r22,r16
 801151c:	a17fffc4 	addi	r5,r20,-1
 8011520:	8580422e 	bgeu	r16,r22,801162c <__divdf3+0x83c>
 8011524:	2829883a 	mov	r20,r5
 8011528:	813fc41e 	bne	r16,r4,801143c <__divdf3+0x64c>
 801152c:	d9800017 	ldw	r6,0(sp)
 8011530:	30bfc21e 	bne	r6,r2,801143c <__divdf3+0x64c>
 8011534:	003fc206 	br	8011440 <__divdf3+0x650>
 8011538:	143ff604 	addi	r16,r2,-40
 801153c:	8c20983a 	sll	r16,r17,r16
 8011540:	002b883a 	mov	r21,zero
 8011544:	003eb406 	br	8011018 <__divdf3+0x228>
 8011548:	d9800215 	stw	r6,8(sp)
 801154c:	d9c00515 	stw	r7,20(sp)
 8011550:	da000415 	stw	r8,16(sp)
 8011554:	80059900 	call	8005990 <__clzsi2>
 8011558:	10800804 	addi	r2,r2,32
 801155c:	da000417 	ldw	r8,16(sp)
 8011560:	d9c00517 	ldw	r7,20(sp)
 8011564:	d9800217 	ldw	r6,8(sp)
 8011568:	003ea106 	br	8010ff0 <__divdf3+0x200>
 801156c:	147ff604 	addi	r17,r2,-40
 8011570:	3462983a 	sll	r17,r6,r17
 8011574:	0029883a 	mov	r20,zero
 8011578:	003ec906 	br	80110a0 <__divdf3+0x2b0>
 801157c:	3009883a 	mov	r4,r6
 8011580:	d9400115 	stw	r5,4(sp)
 8011584:	d9800215 	stw	r6,8(sp)
 8011588:	da000415 	stw	r8,16(sp)
 801158c:	da400315 	stw	r9,12(sp)
 8011590:	80059900 	call	8005990 <__clzsi2>
 8011594:	10800804 	addi	r2,r2,32
 8011598:	da400317 	ldw	r9,12(sp)
 801159c:	da000417 	ldw	r8,16(sp)
 80115a0:	d9800217 	ldw	r6,8(sp)
 80115a4:	d9400117 	ldw	r5,4(sp)
 80115a8:	003eb306 	br	8011078 <__divdf3+0x288>
 80115ac:	d9800017 	ldw	r6,0(sp)
 80115b0:	a9ab883a 	add	r21,r21,r6
 80115b4:	a98b803a 	cmpltu	r5,r21,r6
 80115b8:	2d8b883a 	add	r5,r5,r22
 80115bc:	2a11883a 	add	r8,r5,r8
 80115c0:	897fffc4 	addi	r5,r17,-1
 80115c4:	b2000c2e 	bgeu	r22,r8,80115f8 <__divdf3+0x808>
 80115c8:	41003f36 	bltu	r8,r4,80116c8 <__divdf3+0x8d8>
 80115cc:	22006c26 	beq	r4,r8,8011780 <__divdf3+0x990>
 80115d0:	4109c83a 	sub	r4,r8,r4
 80115d4:	2823883a 	mov	r17,r5
 80115d8:	003f3b06 	br	80112c8 <__divdf3+0x4d8>
 80115dc:	ad3ed336 	bltu	r21,r20,801112c <__divdf3+0x33c>
 80115e0:	a804d07a 	srli	r2,r21,1
 80115e4:	802e97fa 	slli	r23,r16,31
 80115e8:	a82a97fa 	slli	r21,r21,31
 80115ec:	8020d07a 	srli	r16,r16,1
 80115f0:	b8aeb03a 	or	r23,r23,r2
 80115f4:	003ed006 	br	8011138 <__divdf3+0x348>
 80115f8:	b23ff51e 	bne	r22,r8,80115d0 <__divdf3+0x7e0>
 80115fc:	d9800017 	ldw	r6,0(sp)
 8011600:	a9bff12e 	bgeu	r21,r6,80115c8 <__divdf3+0x7d8>
 8011604:	b109c83a 	sub	r4,r22,r4
 8011608:	2823883a 	mov	r17,r5
 801160c:	003f2e06 	br	80112c8 <__divdf3+0x4d8>
 8011610:	2021883a 	mov	r16,r4
 8011614:	003eff06 	br	8011214 <__divdf3+0x424>
 8011618:	2023883a 	mov	r17,r4
 801161c:	003ee406 	br	80111b0 <__divdf3+0x3c0>
 8011620:	a8bfe236 	bltu	r21,r2,80115ac <__divdf3+0x7bc>
 8011624:	0009883a 	mov	r4,zero
 8011628:	003f2706 	br	80112c8 <__divdf3+0x4d8>
 801162c:	81002d36 	bltu	r16,r4,80116e4 <__divdf3+0x8f4>
 8011630:	24005626 	beq	r4,r16,801178c <__divdf3+0x99c>
 8011634:	2829883a 	mov	r20,r5
 8011638:	003f8006 	br	801143c <__divdf3+0x64c>
 801163c:	053fffc4 	movi	r20,-1
 8011640:	003f7f06 	br	8011440 <__divdf3+0x650>
 8011644:	200f883a 	mov	r7,r4
 8011648:	003f3c06 	br	801133c <__divdf3+0x54c>
 801164c:	1011883a 	mov	r8,r2
 8011650:	003f5506 	br	80113a8 <__divdf3+0x5b8>
 8011654:	e027883a 	mov	r19,fp
 8011658:	003f7906 	br	8011440 <__divdf3+0x650>
 801165c:	010007c4 	movi	r4,31
 8011660:	20c02816 	blt	r4,r3,8011704 <__divdf3+0x914>
 8011664:	00800804 	movi	r2,32
 8011668:	10c5c83a 	sub	r2,r2,r3
 801166c:	888a983a 	sll	r5,r17,r2
 8011670:	a0c8d83a 	srl	r4,r20,r3
 8011674:	a084983a 	sll	r2,r20,r2
 8011678:	88e2d83a 	srl	r17,r17,r3
 801167c:	2906b03a 	or	r3,r5,r4
 8011680:	1004c03a 	cmpne	r2,r2,zero
 8011684:	1886b03a 	or	r3,r3,r2
 8011688:	188001cc 	andi	r2,r3,7
 801168c:	10000726 	beq	r2,zero,80116ac <__divdf3+0x8bc>
 8011690:	188003cc 	andi	r2,r3,15
 8011694:	01000104 	movi	r4,4
 8011698:	11000426 	beq	r2,r4,80116ac <__divdf3+0x8bc>
 801169c:	1805883a 	mov	r2,r3
 80116a0:	10c00104 	addi	r3,r2,4
 80116a4:	1885803a 	cmpltu	r2,r3,r2
 80116a8:	88a3883a 	add	r17,r17,r2
 80116ac:	8880202c 	andhi	r2,r17,128
 80116b0:	10002926 	beq	r2,zero,8011758 <__divdf3+0x968>
 80116b4:	9900004c 	andi	r4,r19,1
 80116b8:	00800044 	movi	r2,1
 80116bc:	0021883a 	mov	r16,zero
 80116c0:	002b883a 	mov	r21,zero
 80116c4:	003e2906 	br	8010f6c <__divdf3+0x17c>
 80116c8:	d9800017 	ldw	r6,0(sp)
 80116cc:	8c7fff84 	addi	r17,r17,-2
 80116d0:	a9ab883a 	add	r21,r21,r6
 80116d4:	a98b803a 	cmpltu	r5,r21,r6
 80116d8:	2d8b883a 	add	r5,r5,r22
 80116dc:	2a11883a 	add	r8,r5,r8
 80116e0:	003ef806 	br	80112c4 <__divdf3+0x4d4>
 80116e4:	d9800017 	ldw	r6,0(sp)
 80116e8:	318f883a 	add	r7,r6,r6
 80116ec:	398b803a 	cmpltu	r5,r7,r6
 80116f0:	2d8d883a 	add	r6,r5,r22
 80116f4:	81a1883a 	add	r16,r16,r6
 80116f8:	a17fff84 	addi	r5,r20,-2
 80116fc:	d9c00015 	stw	r7,0(sp)
 8011700:	003f8806 	br	8011524 <__divdf3+0x734>
 8011704:	013ff844 	movi	r4,-31
 8011708:	2085c83a 	sub	r2,r4,r2
 801170c:	8888d83a 	srl	r4,r17,r2
 8011710:	00800804 	movi	r2,32
 8011714:	18802126 	beq	r3,r2,801179c <__divdf3+0x9ac>
 8011718:	04001004 	movi	r16,64
 801171c:	80c7c83a 	sub	r3,r16,r3
 8011720:	88e0983a 	sll	r16,r17,r3
 8011724:	8504b03a 	or	r2,r16,r20
 8011728:	1004c03a 	cmpne	r2,r2,zero
 801172c:	2084b03a 	or	r2,r4,r2
 8011730:	144001cc 	andi	r17,r2,7
 8011734:	88000d1e 	bne	r17,zero,801176c <__divdf3+0x97c>
 8011738:	0021883a 	mov	r16,zero
 801173c:	102ad0fa 	srli	r21,r2,3
 8011740:	9900004c 	andi	r4,r19,1
 8011744:	0005883a 	mov	r2,zero
 8011748:	ac6ab03a 	or	r21,r21,r17
 801174c:	003e0706 	br	8010f6c <__divdf3+0x17c>
 8011750:	1007883a 	mov	r3,r2
 8011754:	0023883a 	mov	r17,zero
 8011758:	8820927a 	slli	r16,r17,9
 801175c:	1805883a 	mov	r2,r3
 8011760:	8822977a 	slli	r17,r17,29
 8011764:	8020d33a 	srli	r16,r16,12
 8011768:	003ff406 	br	801173c <__divdf3+0x94c>
 801176c:	10c003cc 	andi	r3,r2,15
 8011770:	01000104 	movi	r4,4
 8011774:	193ff626 	beq	r3,r4,8011750 <__divdf3+0x960>
 8011778:	0023883a 	mov	r17,zero
 801177c:	003fc806 	br	80116a0 <__divdf3+0x8b0>
 8011780:	a8bfd136 	bltu	r21,r2,80116c8 <__divdf3+0x8d8>
 8011784:	2823883a 	mov	r17,r5
 8011788:	003fa606 	br	8011624 <__divdf3+0x834>
 801178c:	d9800017 	ldw	r6,0(sp)
 8011790:	30bfd436 	bltu	r6,r2,80116e4 <__divdf3+0x8f4>
 8011794:	2829883a 	mov	r20,r5
 8011798:	003f6406 	br	801152c <__divdf3+0x73c>
 801179c:	0021883a 	mov	r16,zero
 80117a0:	003fe006 	br	8011724 <__divdf3+0x934>
 80117a4:	00800434 	movhi	r2,16
 80117a8:	8c000234 	orhi	r16,r17,8
 80117ac:	10bfffc4 	addi	r2,r2,-1
 80117b0:	e009883a 	mov	r4,fp
 80117b4:	80a0703a 	and	r16,r16,r2
 80117b8:	a02b883a 	mov	r21,r20
 80117bc:	003e4e06 	br	80110f8 <__divdf3+0x308>

080117c0 <__eqdf2>:
 80117c0:	2804d53a 	srli	r2,r5,20
 80117c4:	3806d53a 	srli	r3,r7,20
 80117c8:	02000434 	movhi	r8,16
 80117cc:	423fffc4 	addi	r8,r8,-1
 80117d0:	1081ffcc 	andi	r2,r2,2047
 80117d4:	0281ffc4 	movi	r10,2047
 80117d8:	2a12703a 	and	r9,r5,r8
 80117dc:	18c1ffcc 	andi	r3,r3,2047
 80117e0:	3a10703a 	and	r8,r7,r8
 80117e4:	280ad7fa 	srli	r5,r5,31
 80117e8:	380ed7fa 	srli	r7,r7,31
 80117ec:	12801026 	beq	r2,r10,8011830 <__eqdf2+0x70>
 80117f0:	0281ffc4 	movi	r10,2047
 80117f4:	1a800a26 	beq	r3,r10,8011820 <__eqdf2+0x60>
 80117f8:	10c00226 	beq	r2,r3,8011804 <__eqdf2+0x44>
 80117fc:	00800044 	movi	r2,1
 8011800:	f800283a 	ret
 8011804:	4a3ffd1e 	bne	r9,r8,80117fc <__eqdf2+0x3c>
 8011808:	21bffc1e 	bne	r4,r6,80117fc <__eqdf2+0x3c>
 801180c:	29c00c26 	beq	r5,r7,8011840 <__eqdf2+0x80>
 8011810:	103ffa1e 	bne	r2,zero,80117fc <__eqdf2+0x3c>
 8011814:	2244b03a 	or	r2,r4,r9
 8011818:	1004c03a 	cmpne	r2,r2,zero
 801181c:	f800283a 	ret
 8011820:	3214b03a 	or	r10,r6,r8
 8011824:	503ff426 	beq	r10,zero,80117f8 <__eqdf2+0x38>
 8011828:	00800044 	movi	r2,1
 801182c:	f800283a 	ret
 8011830:	2254b03a 	or	r10,r4,r9
 8011834:	503fee26 	beq	r10,zero,80117f0 <__eqdf2+0x30>
 8011838:	00800044 	movi	r2,1
 801183c:	f800283a 	ret
 8011840:	0005883a 	mov	r2,zero
 8011844:	f800283a 	ret

08011848 <__ledf2>:
 8011848:	2804d53a 	srli	r2,r5,20
 801184c:	3810d53a 	srli	r8,r7,20
 8011850:	00c00434 	movhi	r3,16
 8011854:	18ffffc4 	addi	r3,r3,-1
 8011858:	1081ffcc 	andi	r2,r2,2047
 801185c:	0241ffc4 	movi	r9,2047
 8011860:	28d4703a 	and	r10,r5,r3
 8011864:	4201ffcc 	andi	r8,r8,2047
 8011868:	38c6703a 	and	r3,r7,r3
 801186c:	280ad7fa 	srli	r5,r5,31
 8011870:	380ed7fa 	srli	r7,r7,31
 8011874:	12401f26 	beq	r2,r9,80118f4 <__ledf2+0xac>
 8011878:	0241ffc4 	movi	r9,2047
 801187c:	42401426 	beq	r8,r9,80118d0 <__ledf2+0x88>
 8011880:	1000091e 	bne	r2,zero,80118a8 <__ledf2+0x60>
 8011884:	2296b03a 	or	r11,r4,r10
 8011888:	5813003a 	cmpeq	r9,r11,zero
 801188c:	29403fcc 	andi	r5,r5,255
 8011890:	40000a1e 	bne	r8,zero,80118bc <__ledf2+0x74>
 8011894:	30d8b03a 	or	r12,r6,r3
 8011898:	6000081e 	bne	r12,zero,80118bc <__ledf2+0x74>
 801189c:	0005883a 	mov	r2,zero
 80118a0:	5800111e 	bne	r11,zero,80118e8 <__ledf2+0xa0>
 80118a4:	f800283a 	ret
 80118a8:	29403fcc 	andi	r5,r5,255
 80118ac:	40000c1e 	bne	r8,zero,80118e0 <__ledf2+0x98>
 80118b0:	30d2b03a 	or	r9,r6,r3
 80118b4:	48000c26 	beq	r9,zero,80118e8 <__ledf2+0xa0>
 80118b8:	0013883a 	mov	r9,zero
 80118bc:	39c03fcc 	andi	r7,r7,255
 80118c0:	48000826 	beq	r9,zero,80118e4 <__ledf2+0x9c>
 80118c4:	38001126 	beq	r7,zero,801190c <__ledf2+0xc4>
 80118c8:	00800044 	movi	r2,1
 80118cc:	f800283a 	ret
 80118d0:	30d2b03a 	or	r9,r6,r3
 80118d4:	483fea26 	beq	r9,zero,8011880 <__ledf2+0x38>
 80118d8:	00800084 	movi	r2,2
 80118dc:	f800283a 	ret
 80118e0:	39c03fcc 	andi	r7,r7,255
 80118e4:	39400726 	beq	r7,r5,8011904 <__ledf2+0xbc>
 80118e8:	2800081e 	bne	r5,zero,801190c <__ledf2+0xc4>
 80118ec:	00800044 	movi	r2,1
 80118f0:	f800283a 	ret
 80118f4:	2292b03a 	or	r9,r4,r10
 80118f8:	483fdf26 	beq	r9,zero,8011878 <__ledf2+0x30>
 80118fc:	00800084 	movi	r2,2
 8011900:	f800283a 	ret
 8011904:	4080030e 	bge	r8,r2,8011914 <__ledf2+0xcc>
 8011908:	383fef26 	beq	r7,zero,80118c8 <__ledf2+0x80>
 801190c:	00bfffc4 	movi	r2,-1
 8011910:	f800283a 	ret
 8011914:	123feb16 	blt	r2,r8,80118c4 <__ledf2+0x7c>
 8011918:	1abff336 	bltu	r3,r10,80118e8 <__ledf2+0xa0>
 801191c:	50c00326 	beq	r10,r3,801192c <__ledf2+0xe4>
 8011920:	50c0042e 	bgeu	r10,r3,8011934 <__ledf2+0xec>
 8011924:	283fe81e 	bne	r5,zero,80118c8 <__ledf2+0x80>
 8011928:	003ff806 	br	801190c <__ledf2+0xc4>
 801192c:	313fee36 	bltu	r6,r4,80118e8 <__ledf2+0xa0>
 8011930:	21bffc36 	bltu	r4,r6,8011924 <__ledf2+0xdc>
 8011934:	0005883a 	mov	r2,zero
 8011938:	f800283a 	ret

0801193c <__subdf3>:
 801193c:	02000434 	movhi	r8,16
 8011940:	423fffc4 	addi	r8,r8,-1
 8011944:	defffb04 	addi	sp,sp,-20
 8011948:	2a14703a 	and	r10,r5,r8
 801194c:	3812d53a 	srli	r9,r7,20
 8011950:	3a10703a 	and	r8,r7,r8
 8011954:	2006d77a 	srli	r3,r4,29
 8011958:	3004d77a 	srli	r2,r6,29
 801195c:	dc000015 	stw	r16,0(sp)
 8011960:	501490fa 	slli	r10,r10,3
 8011964:	2820d53a 	srli	r16,r5,20
 8011968:	401090fa 	slli	r8,r8,3
 801196c:	dc800215 	stw	r18,8(sp)
 8011970:	dc400115 	stw	r17,4(sp)
 8011974:	dfc00415 	stw	ra,16(sp)
 8011978:	202290fa 	slli	r17,r4,3
 801197c:	dcc00315 	stw	r19,12(sp)
 8011980:	4a41ffcc 	andi	r9,r9,2047
 8011984:	0101ffc4 	movi	r4,2047
 8011988:	2824d7fa 	srli	r18,r5,31
 801198c:	8401ffcc 	andi	r16,r16,2047
 8011990:	50c6b03a 	or	r3,r10,r3
 8011994:	380ed7fa 	srli	r7,r7,31
 8011998:	408ab03a 	or	r5,r8,r2
 801199c:	300c90fa 	slli	r6,r6,3
 80119a0:	49009626 	beq	r9,r4,8011bfc <__subdf3+0x2c0>
 80119a4:	39c0005c 	xori	r7,r7,1
 80119a8:	8245c83a 	sub	r2,r16,r9
 80119ac:	3c807426 	beq	r7,r18,8011b80 <__subdf3+0x244>
 80119b0:	0080af0e 	bge	zero,r2,8011c70 <__subdf3+0x334>
 80119b4:	48002a1e 	bne	r9,zero,8011a60 <__subdf3+0x124>
 80119b8:	2988b03a 	or	r4,r5,r6
 80119bc:	20009a1e 	bne	r4,zero,8011c28 <__subdf3+0x2ec>
 80119c0:	888001cc 	andi	r2,r17,7
 80119c4:	10000726 	beq	r2,zero,80119e4 <__subdf3+0xa8>
 80119c8:	888003cc 	andi	r2,r17,15
 80119cc:	01000104 	movi	r4,4
 80119d0:	11000426 	beq	r2,r4,80119e4 <__subdf3+0xa8>
 80119d4:	890b883a 	add	r5,r17,r4
 80119d8:	2c63803a 	cmpltu	r17,r5,r17
 80119dc:	1c47883a 	add	r3,r3,r17
 80119e0:	2823883a 	mov	r17,r5
 80119e4:	1880202c 	andhi	r2,r3,128
 80119e8:	10005926 	beq	r2,zero,8011b50 <__subdf3+0x214>
 80119ec:	84000044 	addi	r16,r16,1
 80119f0:	0081ffc4 	movi	r2,2047
 80119f4:	8080be26 	beq	r16,r2,8011cf0 <__subdf3+0x3b4>
 80119f8:	017fe034 	movhi	r5,65408
 80119fc:	297fffc4 	addi	r5,r5,-1
 8011a00:	1946703a 	and	r3,r3,r5
 8011a04:	1804977a 	slli	r2,r3,29
 8011a08:	1806927a 	slli	r3,r3,9
 8011a0c:	8822d0fa 	srli	r17,r17,3
 8011a10:	8401ffcc 	andi	r16,r16,2047
 8011a14:	180ad33a 	srli	r5,r3,12
 8011a18:	9100004c 	andi	r4,r18,1
 8011a1c:	1444b03a 	or	r2,r2,r17
 8011a20:	80c1ffcc 	andi	r3,r16,2047
 8011a24:	1820953a 	slli	r16,r3,20
 8011a28:	20c03fcc 	andi	r3,r4,255
 8011a2c:	180897fa 	slli	r4,r3,31
 8011a30:	00c00434 	movhi	r3,16
 8011a34:	18ffffc4 	addi	r3,r3,-1
 8011a38:	28c6703a 	and	r3,r5,r3
 8011a3c:	1c06b03a 	or	r3,r3,r16
 8011a40:	1906b03a 	or	r3,r3,r4
 8011a44:	dfc00417 	ldw	ra,16(sp)
 8011a48:	dcc00317 	ldw	r19,12(sp)
 8011a4c:	dc800217 	ldw	r18,8(sp)
 8011a50:	dc400117 	ldw	r17,4(sp)
 8011a54:	dc000017 	ldw	r16,0(sp)
 8011a58:	dec00504 	addi	sp,sp,20
 8011a5c:	f800283a 	ret
 8011a60:	0101ffc4 	movi	r4,2047
 8011a64:	813fd626 	beq	r16,r4,80119c0 <__subdf3+0x84>
 8011a68:	29402034 	orhi	r5,r5,128
 8011a6c:	01000e04 	movi	r4,56
 8011a70:	2080a316 	blt	r4,r2,8011d00 <__subdf3+0x3c4>
 8011a74:	010007c4 	movi	r4,31
 8011a78:	2080c616 	blt	r4,r2,8011d94 <__subdf3+0x458>
 8011a7c:	01000804 	movi	r4,32
 8011a80:	2089c83a 	sub	r4,r4,r2
 8011a84:	2910983a 	sll	r8,r5,r4
 8011a88:	308ed83a 	srl	r7,r6,r2
 8011a8c:	3108983a 	sll	r4,r6,r4
 8011a90:	2884d83a 	srl	r2,r5,r2
 8011a94:	41ccb03a 	or	r6,r8,r7
 8011a98:	2008c03a 	cmpne	r4,r4,zero
 8011a9c:	310cb03a 	or	r6,r6,r4
 8011aa0:	898dc83a 	sub	r6,r17,r6
 8011aa4:	89a3803a 	cmpltu	r17,r17,r6
 8011aa8:	1887c83a 	sub	r3,r3,r2
 8011aac:	1c47c83a 	sub	r3,r3,r17
 8011ab0:	3023883a 	mov	r17,r6
 8011ab4:	1880202c 	andhi	r2,r3,128
 8011ab8:	10002326 	beq	r2,zero,8011b48 <__subdf3+0x20c>
 8011abc:	04c02034 	movhi	r19,128
 8011ac0:	9cffffc4 	addi	r19,r19,-1
 8011ac4:	1ce6703a 	and	r19,r3,r19
 8011ac8:	98007a26 	beq	r19,zero,8011cb4 <__subdf3+0x378>
 8011acc:	9809883a 	mov	r4,r19
 8011ad0:	80059900 	call	8005990 <__clzsi2>
 8011ad4:	113ffe04 	addi	r4,r2,-8
 8011ad8:	00c007c4 	movi	r3,31
 8011adc:	19007b16 	blt	r3,r4,8011ccc <__subdf3+0x390>
 8011ae0:	00800804 	movi	r2,32
 8011ae4:	1105c83a 	sub	r2,r2,r4
 8011ae8:	8884d83a 	srl	r2,r17,r2
 8011aec:	9906983a 	sll	r3,r19,r4
 8011af0:	8922983a 	sll	r17,r17,r4
 8011af4:	10c4b03a 	or	r2,r2,r3
 8011af8:	24007816 	blt	r4,r16,8011cdc <__subdf3+0x3a0>
 8011afc:	2421c83a 	sub	r16,r4,r16
 8011b00:	80c00044 	addi	r3,r16,1
 8011b04:	010007c4 	movi	r4,31
 8011b08:	20c09516 	blt	r4,r3,8011d60 <__subdf3+0x424>
 8011b0c:	01400804 	movi	r5,32
 8011b10:	28cbc83a 	sub	r5,r5,r3
 8011b14:	88c8d83a 	srl	r4,r17,r3
 8011b18:	8962983a 	sll	r17,r17,r5
 8011b1c:	114a983a 	sll	r5,r2,r5
 8011b20:	10c6d83a 	srl	r3,r2,r3
 8011b24:	8804c03a 	cmpne	r2,r17,zero
 8011b28:	290ab03a 	or	r5,r5,r4
 8011b2c:	28a2b03a 	or	r17,r5,r2
 8011b30:	0021883a 	mov	r16,zero
 8011b34:	003fa206 	br	80119c0 <__subdf3+0x84>
 8011b38:	2090b03a 	or	r8,r4,r2
 8011b3c:	40018e26 	beq	r8,zero,8012178 <__subdf3+0x83c>
 8011b40:	1007883a 	mov	r3,r2
 8011b44:	2023883a 	mov	r17,r4
 8011b48:	888001cc 	andi	r2,r17,7
 8011b4c:	103f9e1e 	bne	r2,zero,80119c8 <__subdf3+0x8c>
 8011b50:	1804977a 	slli	r2,r3,29
 8011b54:	8822d0fa 	srli	r17,r17,3
 8011b58:	1810d0fa 	srli	r8,r3,3
 8011b5c:	9100004c 	andi	r4,r18,1
 8011b60:	1444b03a 	or	r2,r2,r17
 8011b64:	00c1ffc4 	movi	r3,2047
 8011b68:	80c02826 	beq	r16,r3,8011c0c <__subdf3+0x2d0>
 8011b6c:	01400434 	movhi	r5,16
 8011b70:	297fffc4 	addi	r5,r5,-1
 8011b74:	80e0703a 	and	r16,r16,r3
 8011b78:	414a703a 	and	r5,r8,r5
 8011b7c:	003fa806 	br	8011a20 <__subdf3+0xe4>
 8011b80:	0080630e 	bge	zero,r2,8011d10 <__subdf3+0x3d4>
 8011b84:	48003026 	beq	r9,zero,8011c48 <__subdf3+0x30c>
 8011b88:	0101ffc4 	movi	r4,2047
 8011b8c:	813f8c26 	beq	r16,r4,80119c0 <__subdf3+0x84>
 8011b90:	29402034 	orhi	r5,r5,128
 8011b94:	01000e04 	movi	r4,56
 8011b98:	2080a90e 	bge	r4,r2,8011e40 <__subdf3+0x504>
 8011b9c:	298cb03a 	or	r6,r5,r6
 8011ba0:	3012c03a 	cmpne	r9,r6,zero
 8011ba4:	0005883a 	mov	r2,zero
 8011ba8:	4c53883a 	add	r9,r9,r17
 8011bac:	4c63803a 	cmpltu	r17,r9,r17
 8011bb0:	10c7883a 	add	r3,r2,r3
 8011bb4:	88c7883a 	add	r3,r17,r3
 8011bb8:	4823883a 	mov	r17,r9
 8011bbc:	1880202c 	andhi	r2,r3,128
 8011bc0:	1000d026 	beq	r2,zero,8011f04 <__subdf3+0x5c8>
 8011bc4:	84000044 	addi	r16,r16,1
 8011bc8:	0081ffc4 	movi	r2,2047
 8011bcc:	8080fe26 	beq	r16,r2,8011fc8 <__subdf3+0x68c>
 8011bd0:	00bfe034 	movhi	r2,65408
 8011bd4:	10bfffc4 	addi	r2,r2,-1
 8011bd8:	1886703a 	and	r3,r3,r2
 8011bdc:	880ad07a 	srli	r5,r17,1
 8011be0:	180497fa 	slli	r2,r3,31
 8011be4:	8900004c 	andi	r4,r17,1
 8011be8:	2922b03a 	or	r17,r5,r4
 8011bec:	1806d07a 	srli	r3,r3,1
 8011bf0:	1462b03a 	or	r17,r2,r17
 8011bf4:	3825883a 	mov	r18,r7
 8011bf8:	003f7106 	br	80119c0 <__subdf3+0x84>
 8011bfc:	2984b03a 	or	r2,r5,r6
 8011c00:	103f6826 	beq	r2,zero,80119a4 <__subdf3+0x68>
 8011c04:	39c03fcc 	andi	r7,r7,255
 8011c08:	003f6706 	br	80119a8 <__subdf3+0x6c>
 8011c0c:	4086b03a 	or	r3,r8,r2
 8011c10:	18015226 	beq	r3,zero,801215c <__subdf3+0x820>
 8011c14:	00c00434 	movhi	r3,16
 8011c18:	41400234 	orhi	r5,r8,8
 8011c1c:	18ffffc4 	addi	r3,r3,-1
 8011c20:	28ca703a 	and	r5,r5,r3
 8011c24:	003f7e06 	br	8011a20 <__subdf3+0xe4>
 8011c28:	10bfffc4 	addi	r2,r2,-1
 8011c2c:	1000491e 	bne	r2,zero,8011d54 <__subdf3+0x418>
 8011c30:	898fc83a 	sub	r7,r17,r6
 8011c34:	89e3803a 	cmpltu	r17,r17,r7
 8011c38:	1947c83a 	sub	r3,r3,r5
 8011c3c:	1c47c83a 	sub	r3,r3,r17
 8011c40:	3823883a 	mov	r17,r7
 8011c44:	003f9b06 	br	8011ab4 <__subdf3+0x178>
 8011c48:	2988b03a 	or	r4,r5,r6
 8011c4c:	203f5c26 	beq	r4,zero,80119c0 <__subdf3+0x84>
 8011c50:	10bfffc4 	addi	r2,r2,-1
 8011c54:	1000931e 	bne	r2,zero,8011ea4 <__subdf3+0x568>
 8011c58:	898d883a 	add	r6,r17,r6
 8011c5c:	3463803a 	cmpltu	r17,r6,r17
 8011c60:	1947883a 	add	r3,r3,r5
 8011c64:	88c7883a 	add	r3,r17,r3
 8011c68:	3023883a 	mov	r17,r6
 8011c6c:	003fd306 	br	8011bbc <__subdf3+0x280>
 8011c70:	1000541e 	bne	r2,zero,8011dc4 <__subdf3+0x488>
 8011c74:	80800044 	addi	r2,r16,1
 8011c78:	1081ffcc 	andi	r2,r2,2047
 8011c7c:	01000044 	movi	r4,1
 8011c80:	2080a20e 	bge	r4,r2,8011f0c <__subdf3+0x5d0>
 8011c84:	8989c83a 	sub	r4,r17,r6
 8011c88:	8905803a 	cmpltu	r2,r17,r4
 8011c8c:	1967c83a 	sub	r19,r3,r5
 8011c90:	98a7c83a 	sub	r19,r19,r2
 8011c94:	9880202c 	andhi	r2,r19,128
 8011c98:	10006326 	beq	r2,zero,8011e28 <__subdf3+0x4ec>
 8011c9c:	3463c83a 	sub	r17,r6,r17
 8011ca0:	28c7c83a 	sub	r3,r5,r3
 8011ca4:	344d803a 	cmpltu	r6,r6,r17
 8011ca8:	19a7c83a 	sub	r19,r3,r6
 8011cac:	3825883a 	mov	r18,r7
 8011cb0:	983f861e 	bne	r19,zero,8011acc <__subdf3+0x190>
 8011cb4:	8809883a 	mov	r4,r17
 8011cb8:	80059900 	call	8005990 <__clzsi2>
 8011cbc:	10800804 	addi	r2,r2,32
 8011cc0:	113ffe04 	addi	r4,r2,-8
 8011cc4:	00c007c4 	movi	r3,31
 8011cc8:	193f850e 	bge	r3,r4,8011ae0 <__subdf3+0x1a4>
 8011ccc:	10bff604 	addi	r2,r2,-40
 8011cd0:	8884983a 	sll	r2,r17,r2
 8011cd4:	0023883a 	mov	r17,zero
 8011cd8:	243f880e 	bge	r4,r16,8011afc <__subdf3+0x1c0>
 8011cdc:	00ffe034 	movhi	r3,65408
 8011ce0:	18ffffc4 	addi	r3,r3,-1
 8011ce4:	8121c83a 	sub	r16,r16,r4
 8011ce8:	10c6703a 	and	r3,r2,r3
 8011cec:	003f3406 	br	80119c0 <__subdf3+0x84>
 8011cf0:	9100004c 	andi	r4,r18,1
 8011cf4:	000b883a 	mov	r5,zero
 8011cf8:	0005883a 	mov	r2,zero
 8011cfc:	003f4806 	br	8011a20 <__subdf3+0xe4>
 8011d00:	298cb03a 	or	r6,r5,r6
 8011d04:	300cc03a 	cmpne	r6,r6,zero
 8011d08:	0005883a 	mov	r2,zero
 8011d0c:	003f6406 	br	8011aa0 <__subdf3+0x164>
 8011d10:	10009a1e 	bne	r2,zero,8011f7c <__subdf3+0x640>
 8011d14:	82400044 	addi	r9,r16,1
 8011d18:	4881ffcc 	andi	r2,r9,2047
 8011d1c:	02800044 	movi	r10,1
 8011d20:	5080670e 	bge	r10,r2,8011ec0 <__subdf3+0x584>
 8011d24:	0081ffc4 	movi	r2,2047
 8011d28:	4880af26 	beq	r9,r2,8011fe8 <__subdf3+0x6ac>
 8011d2c:	898d883a 	add	r6,r17,r6
 8011d30:	1945883a 	add	r2,r3,r5
 8011d34:	3447803a 	cmpltu	r3,r6,r17
 8011d38:	1887883a 	add	r3,r3,r2
 8011d3c:	182297fa 	slli	r17,r3,31
 8011d40:	300cd07a 	srli	r6,r6,1
 8011d44:	1806d07a 	srli	r3,r3,1
 8011d48:	4821883a 	mov	r16,r9
 8011d4c:	89a2b03a 	or	r17,r17,r6
 8011d50:	003f1b06 	br	80119c0 <__subdf3+0x84>
 8011d54:	0101ffc4 	movi	r4,2047
 8011d58:	813f441e 	bne	r16,r4,8011a6c <__subdf3+0x130>
 8011d5c:	003f1806 	br	80119c0 <__subdf3+0x84>
 8011d60:	843ff844 	addi	r16,r16,-31
 8011d64:	01400804 	movi	r5,32
 8011d68:	1408d83a 	srl	r4,r2,r16
 8011d6c:	19405026 	beq	r3,r5,8011eb0 <__subdf3+0x574>
 8011d70:	01401004 	movi	r5,64
 8011d74:	28c7c83a 	sub	r3,r5,r3
 8011d78:	10c4983a 	sll	r2,r2,r3
 8011d7c:	88a2b03a 	or	r17,r17,r2
 8011d80:	8822c03a 	cmpne	r17,r17,zero
 8011d84:	2462b03a 	or	r17,r4,r17
 8011d88:	0007883a 	mov	r3,zero
 8011d8c:	0021883a 	mov	r16,zero
 8011d90:	003f6d06 	br	8011b48 <__subdf3+0x20c>
 8011d94:	11fff804 	addi	r7,r2,-32
 8011d98:	01000804 	movi	r4,32
 8011d9c:	29ced83a 	srl	r7,r5,r7
 8011da0:	11004526 	beq	r2,r4,8011eb8 <__subdf3+0x57c>
 8011da4:	01001004 	movi	r4,64
 8011da8:	2089c83a 	sub	r4,r4,r2
 8011dac:	2904983a 	sll	r2,r5,r4
 8011db0:	118cb03a 	or	r6,r2,r6
 8011db4:	300cc03a 	cmpne	r6,r6,zero
 8011db8:	398cb03a 	or	r6,r7,r6
 8011dbc:	0005883a 	mov	r2,zero
 8011dc0:	003f3706 	br	8011aa0 <__subdf3+0x164>
 8011dc4:	80002a26 	beq	r16,zero,8011e70 <__subdf3+0x534>
 8011dc8:	0101ffc4 	movi	r4,2047
 8011dcc:	49006626 	beq	r9,r4,8011f68 <__subdf3+0x62c>
 8011dd0:	0085c83a 	sub	r2,zero,r2
 8011dd4:	18c02034 	orhi	r3,r3,128
 8011dd8:	01000e04 	movi	r4,56
 8011ddc:	20807e16 	blt	r4,r2,8011fd8 <__subdf3+0x69c>
 8011de0:	010007c4 	movi	r4,31
 8011de4:	2080e716 	blt	r4,r2,8012184 <__subdf3+0x848>
 8011de8:	01000804 	movi	r4,32
 8011dec:	2089c83a 	sub	r4,r4,r2
 8011df0:	1914983a 	sll	r10,r3,r4
 8011df4:	8890d83a 	srl	r8,r17,r2
 8011df8:	8908983a 	sll	r4,r17,r4
 8011dfc:	1884d83a 	srl	r2,r3,r2
 8011e00:	5222b03a 	or	r17,r10,r8
 8011e04:	2006c03a 	cmpne	r3,r4,zero
 8011e08:	88e2b03a 	or	r17,r17,r3
 8011e0c:	3463c83a 	sub	r17,r6,r17
 8011e10:	2885c83a 	sub	r2,r5,r2
 8011e14:	344d803a 	cmpltu	r6,r6,r17
 8011e18:	1187c83a 	sub	r3,r2,r6
 8011e1c:	4821883a 	mov	r16,r9
 8011e20:	3825883a 	mov	r18,r7
 8011e24:	003f2306 	br	8011ab4 <__subdf3+0x178>
 8011e28:	24d0b03a 	or	r8,r4,r19
 8011e2c:	40001b1e 	bne	r8,zero,8011e9c <__subdf3+0x560>
 8011e30:	0005883a 	mov	r2,zero
 8011e34:	0009883a 	mov	r4,zero
 8011e38:	0021883a 	mov	r16,zero
 8011e3c:	003f4906 	br	8011b64 <__subdf3+0x228>
 8011e40:	010007c4 	movi	r4,31
 8011e44:	20803a16 	blt	r4,r2,8011f30 <__subdf3+0x5f4>
 8011e48:	01000804 	movi	r4,32
 8011e4c:	2089c83a 	sub	r4,r4,r2
 8011e50:	2912983a 	sll	r9,r5,r4
 8011e54:	3090d83a 	srl	r8,r6,r2
 8011e58:	3108983a 	sll	r4,r6,r4
 8011e5c:	2884d83a 	srl	r2,r5,r2
 8011e60:	4a12b03a 	or	r9,r9,r8
 8011e64:	2008c03a 	cmpne	r4,r4,zero
 8011e68:	4912b03a 	or	r9,r9,r4
 8011e6c:	003f4e06 	br	8011ba8 <__subdf3+0x26c>
 8011e70:	1c48b03a 	or	r4,r3,r17
 8011e74:	20003c26 	beq	r4,zero,8011f68 <__subdf3+0x62c>
 8011e78:	0084303a 	nor	r2,zero,r2
 8011e7c:	1000381e 	bne	r2,zero,8011f60 <__subdf3+0x624>
 8011e80:	3463c83a 	sub	r17,r6,r17
 8011e84:	28c5c83a 	sub	r2,r5,r3
 8011e88:	344d803a 	cmpltu	r6,r6,r17
 8011e8c:	1187c83a 	sub	r3,r2,r6
 8011e90:	4821883a 	mov	r16,r9
 8011e94:	3825883a 	mov	r18,r7
 8011e98:	003f0606 	br	8011ab4 <__subdf3+0x178>
 8011e9c:	2023883a 	mov	r17,r4
 8011ea0:	003f0906 	br	8011ac8 <__subdf3+0x18c>
 8011ea4:	0101ffc4 	movi	r4,2047
 8011ea8:	813f3a1e 	bne	r16,r4,8011b94 <__subdf3+0x258>
 8011eac:	003ec406 	br	80119c0 <__subdf3+0x84>
 8011eb0:	0005883a 	mov	r2,zero
 8011eb4:	003fb106 	br	8011d7c <__subdf3+0x440>
 8011eb8:	0005883a 	mov	r2,zero
 8011ebc:	003fbc06 	br	8011db0 <__subdf3+0x474>
 8011ec0:	1c44b03a 	or	r2,r3,r17
 8011ec4:	80008e1e 	bne	r16,zero,8012100 <__subdf3+0x7c4>
 8011ec8:	1000c826 	beq	r2,zero,80121ec <__subdf3+0x8b0>
 8011ecc:	2984b03a 	or	r2,r5,r6
 8011ed0:	103ebb26 	beq	r2,zero,80119c0 <__subdf3+0x84>
 8011ed4:	8989883a 	add	r4,r17,r6
 8011ed8:	1945883a 	add	r2,r3,r5
 8011edc:	2447803a 	cmpltu	r3,r4,r17
 8011ee0:	1887883a 	add	r3,r3,r2
 8011ee4:	1880202c 	andhi	r2,r3,128
 8011ee8:	2023883a 	mov	r17,r4
 8011eec:	103f1626 	beq	r2,zero,8011b48 <__subdf3+0x20c>
 8011ef0:	00bfe034 	movhi	r2,65408
 8011ef4:	10bfffc4 	addi	r2,r2,-1
 8011ef8:	5021883a 	mov	r16,r10
 8011efc:	1886703a 	and	r3,r3,r2
 8011f00:	003eaf06 	br	80119c0 <__subdf3+0x84>
 8011f04:	3825883a 	mov	r18,r7
 8011f08:	003f0f06 	br	8011b48 <__subdf3+0x20c>
 8011f0c:	1c44b03a 	or	r2,r3,r17
 8011f10:	8000251e 	bne	r16,zero,8011fa8 <__subdf3+0x66c>
 8011f14:	1000661e 	bne	r2,zero,80120b0 <__subdf3+0x774>
 8011f18:	2990b03a 	or	r8,r5,r6
 8011f1c:	40009626 	beq	r8,zero,8012178 <__subdf3+0x83c>
 8011f20:	2807883a 	mov	r3,r5
 8011f24:	3023883a 	mov	r17,r6
 8011f28:	3825883a 	mov	r18,r7
 8011f2c:	003ea406 	br	80119c0 <__subdf3+0x84>
 8011f30:	127ff804 	addi	r9,r2,-32
 8011f34:	01000804 	movi	r4,32
 8011f38:	2a52d83a 	srl	r9,r5,r9
 8011f3c:	11008c26 	beq	r2,r4,8012170 <__subdf3+0x834>
 8011f40:	01001004 	movi	r4,64
 8011f44:	2085c83a 	sub	r2,r4,r2
 8011f48:	2884983a 	sll	r2,r5,r2
 8011f4c:	118cb03a 	or	r6,r2,r6
 8011f50:	300cc03a 	cmpne	r6,r6,zero
 8011f54:	4992b03a 	or	r9,r9,r6
 8011f58:	0005883a 	mov	r2,zero
 8011f5c:	003f1206 	br	8011ba8 <__subdf3+0x26c>
 8011f60:	0101ffc4 	movi	r4,2047
 8011f64:	493f9c1e 	bne	r9,r4,8011dd8 <__subdf3+0x49c>
 8011f68:	2807883a 	mov	r3,r5
 8011f6c:	3023883a 	mov	r17,r6
 8011f70:	4821883a 	mov	r16,r9
 8011f74:	3825883a 	mov	r18,r7
 8011f78:	003e9106 	br	80119c0 <__subdf3+0x84>
 8011f7c:	80001f1e 	bne	r16,zero,8011ffc <__subdf3+0x6c0>
 8011f80:	1c48b03a 	or	r4,r3,r17
 8011f84:	20005a26 	beq	r4,zero,80120f0 <__subdf3+0x7b4>
 8011f88:	0084303a 	nor	r2,zero,r2
 8011f8c:	1000561e 	bne	r2,zero,80120e8 <__subdf3+0x7ac>
 8011f90:	89a3883a 	add	r17,r17,r6
 8011f94:	1945883a 	add	r2,r3,r5
 8011f98:	898d803a 	cmpltu	r6,r17,r6
 8011f9c:	3087883a 	add	r3,r6,r2
 8011fa0:	4821883a 	mov	r16,r9
 8011fa4:	003f0506 	br	8011bbc <__subdf3+0x280>
 8011fa8:	10002b1e 	bne	r2,zero,8012058 <__subdf3+0x71c>
 8011fac:	2984b03a 	or	r2,r5,r6
 8011fb0:	10008026 	beq	r2,zero,80121b4 <__subdf3+0x878>
 8011fb4:	2807883a 	mov	r3,r5
 8011fb8:	3023883a 	mov	r17,r6
 8011fbc:	3825883a 	mov	r18,r7
 8011fc0:	0401ffc4 	movi	r16,2047
 8011fc4:	003e7e06 	br	80119c0 <__subdf3+0x84>
 8011fc8:	3809883a 	mov	r4,r7
 8011fcc:	0011883a 	mov	r8,zero
 8011fd0:	0005883a 	mov	r2,zero
 8011fd4:	003ee306 	br	8011b64 <__subdf3+0x228>
 8011fd8:	1c62b03a 	or	r17,r3,r17
 8011fdc:	8822c03a 	cmpne	r17,r17,zero
 8011fe0:	0005883a 	mov	r2,zero
 8011fe4:	003f8906 	br	8011e0c <__subdf3+0x4d0>
 8011fe8:	3809883a 	mov	r4,r7
 8011fec:	4821883a 	mov	r16,r9
 8011ff0:	0011883a 	mov	r8,zero
 8011ff4:	0005883a 	mov	r2,zero
 8011ff8:	003eda06 	br	8011b64 <__subdf3+0x228>
 8011ffc:	0101ffc4 	movi	r4,2047
 8012000:	49003b26 	beq	r9,r4,80120f0 <__subdf3+0x7b4>
 8012004:	0085c83a 	sub	r2,zero,r2
 8012008:	18c02034 	orhi	r3,r3,128
 801200c:	01000e04 	movi	r4,56
 8012010:	20806e16 	blt	r4,r2,80121cc <__subdf3+0x890>
 8012014:	010007c4 	movi	r4,31
 8012018:	20807716 	blt	r4,r2,80121f8 <__subdf3+0x8bc>
 801201c:	01000804 	movi	r4,32
 8012020:	2089c83a 	sub	r4,r4,r2
 8012024:	1914983a 	sll	r10,r3,r4
 8012028:	8890d83a 	srl	r8,r17,r2
 801202c:	8908983a 	sll	r4,r17,r4
 8012030:	1884d83a 	srl	r2,r3,r2
 8012034:	5222b03a 	or	r17,r10,r8
 8012038:	2006c03a 	cmpne	r3,r4,zero
 801203c:	88e2b03a 	or	r17,r17,r3
 8012040:	89a3883a 	add	r17,r17,r6
 8012044:	1145883a 	add	r2,r2,r5
 8012048:	898d803a 	cmpltu	r6,r17,r6
 801204c:	3087883a 	add	r3,r6,r2
 8012050:	4821883a 	mov	r16,r9
 8012054:	003ed906 	br	8011bbc <__subdf3+0x280>
 8012058:	2984b03a 	or	r2,r5,r6
 801205c:	10004226 	beq	r2,zero,8012168 <__subdf3+0x82c>
 8012060:	1808d0fa 	srli	r4,r3,3
 8012064:	8822d0fa 	srli	r17,r17,3
 8012068:	1806977a 	slli	r3,r3,29
 801206c:	2080022c 	andhi	r2,r4,8
 8012070:	1c62b03a 	or	r17,r3,r17
 8012074:	10000826 	beq	r2,zero,8012098 <__subdf3+0x75c>
 8012078:	2812d0fa 	srli	r9,r5,3
 801207c:	4880022c 	andhi	r2,r9,8
 8012080:	1000051e 	bne	r2,zero,8012098 <__subdf3+0x75c>
 8012084:	300cd0fa 	srli	r6,r6,3
 8012088:	2804977a 	slli	r2,r5,29
 801208c:	4809883a 	mov	r4,r9
 8012090:	3825883a 	mov	r18,r7
 8012094:	11a2b03a 	or	r17,r2,r6
 8012098:	8806d77a 	srli	r3,r17,29
 801209c:	200890fa 	slli	r4,r4,3
 80120a0:	882290fa 	slli	r17,r17,3
 80120a4:	0401ffc4 	movi	r16,2047
 80120a8:	1906b03a 	or	r3,r3,r4
 80120ac:	003e4406 	br	80119c0 <__subdf3+0x84>
 80120b0:	2984b03a 	or	r2,r5,r6
 80120b4:	103e4226 	beq	r2,zero,80119c0 <__subdf3+0x84>
 80120b8:	8989c83a 	sub	r4,r17,r6
 80120bc:	8911803a 	cmpltu	r8,r17,r4
 80120c0:	1945c83a 	sub	r2,r3,r5
 80120c4:	1205c83a 	sub	r2,r2,r8
 80120c8:	1200202c 	andhi	r8,r2,128
 80120cc:	403e9a26 	beq	r8,zero,8011b38 <__subdf3+0x1fc>
 80120d0:	3463c83a 	sub	r17,r6,r17
 80120d4:	28c5c83a 	sub	r2,r5,r3
 80120d8:	344d803a 	cmpltu	r6,r6,r17
 80120dc:	1187c83a 	sub	r3,r2,r6
 80120e0:	3825883a 	mov	r18,r7
 80120e4:	003e3606 	br	80119c0 <__subdf3+0x84>
 80120e8:	0101ffc4 	movi	r4,2047
 80120ec:	493fc71e 	bne	r9,r4,801200c <__subdf3+0x6d0>
 80120f0:	2807883a 	mov	r3,r5
 80120f4:	3023883a 	mov	r17,r6
 80120f8:	4821883a 	mov	r16,r9
 80120fc:	003e3006 	br	80119c0 <__subdf3+0x84>
 8012100:	10003626 	beq	r2,zero,80121dc <__subdf3+0x8a0>
 8012104:	2984b03a 	or	r2,r5,r6
 8012108:	10001726 	beq	r2,zero,8012168 <__subdf3+0x82c>
 801210c:	1808d0fa 	srli	r4,r3,3
 8012110:	8822d0fa 	srli	r17,r17,3
 8012114:	1806977a 	slli	r3,r3,29
 8012118:	2080022c 	andhi	r2,r4,8
 801211c:	1c62b03a 	or	r17,r3,r17
 8012120:	10000726 	beq	r2,zero,8012140 <__subdf3+0x804>
 8012124:	2812d0fa 	srli	r9,r5,3
 8012128:	4880022c 	andhi	r2,r9,8
 801212c:	1000041e 	bne	r2,zero,8012140 <__subdf3+0x804>
 8012130:	300cd0fa 	srli	r6,r6,3
 8012134:	2804977a 	slli	r2,r5,29
 8012138:	4809883a 	mov	r4,r9
 801213c:	11a2b03a 	or	r17,r2,r6
 8012140:	8806d77a 	srli	r3,r17,29
 8012144:	200890fa 	slli	r4,r4,3
 8012148:	882290fa 	slli	r17,r17,3
 801214c:	3825883a 	mov	r18,r7
 8012150:	1906b03a 	or	r3,r3,r4
 8012154:	0401ffc4 	movi	r16,2047
 8012158:	003e1906 	br	80119c0 <__subdf3+0x84>
 801215c:	000b883a 	mov	r5,zero
 8012160:	0005883a 	mov	r2,zero
 8012164:	003e2e06 	br	8011a20 <__subdf3+0xe4>
 8012168:	0401ffc4 	movi	r16,2047
 801216c:	003e1406 	br	80119c0 <__subdf3+0x84>
 8012170:	0005883a 	mov	r2,zero
 8012174:	003f7506 	br	8011f4c <__subdf3+0x610>
 8012178:	0005883a 	mov	r2,zero
 801217c:	0009883a 	mov	r4,zero
 8012180:	003e7806 	br	8011b64 <__subdf3+0x228>
 8012184:	123ff804 	addi	r8,r2,-32
 8012188:	01000804 	movi	r4,32
 801218c:	1a10d83a 	srl	r8,r3,r8
 8012190:	11002526 	beq	r2,r4,8012228 <__subdf3+0x8ec>
 8012194:	01001004 	movi	r4,64
 8012198:	2085c83a 	sub	r2,r4,r2
 801219c:	1884983a 	sll	r2,r3,r2
 80121a0:	1444b03a 	or	r2,r2,r17
 80121a4:	1004c03a 	cmpne	r2,r2,zero
 80121a8:	40a2b03a 	or	r17,r8,r2
 80121ac:	0005883a 	mov	r2,zero
 80121b0:	003f1606 	br	8011e0c <__subdf3+0x4d0>
 80121b4:	02000434 	movhi	r8,16
 80121b8:	0009883a 	mov	r4,zero
 80121bc:	423fffc4 	addi	r8,r8,-1
 80121c0:	00bfffc4 	movi	r2,-1
 80121c4:	0401ffc4 	movi	r16,2047
 80121c8:	003e6606 	br	8011b64 <__subdf3+0x228>
 80121cc:	1c62b03a 	or	r17,r3,r17
 80121d0:	8822c03a 	cmpne	r17,r17,zero
 80121d4:	0005883a 	mov	r2,zero
 80121d8:	003f9906 	br	8012040 <__subdf3+0x704>
 80121dc:	2807883a 	mov	r3,r5
 80121e0:	3023883a 	mov	r17,r6
 80121e4:	0401ffc4 	movi	r16,2047
 80121e8:	003df506 	br	80119c0 <__subdf3+0x84>
 80121ec:	2807883a 	mov	r3,r5
 80121f0:	3023883a 	mov	r17,r6
 80121f4:	003df206 	br	80119c0 <__subdf3+0x84>
 80121f8:	123ff804 	addi	r8,r2,-32
 80121fc:	01000804 	movi	r4,32
 8012200:	1a10d83a 	srl	r8,r3,r8
 8012204:	11000a26 	beq	r2,r4,8012230 <__subdf3+0x8f4>
 8012208:	01001004 	movi	r4,64
 801220c:	2085c83a 	sub	r2,r4,r2
 8012210:	1884983a 	sll	r2,r3,r2
 8012214:	1444b03a 	or	r2,r2,r17
 8012218:	1004c03a 	cmpne	r2,r2,zero
 801221c:	40a2b03a 	or	r17,r8,r2
 8012220:	0005883a 	mov	r2,zero
 8012224:	003f8606 	br	8012040 <__subdf3+0x704>
 8012228:	0005883a 	mov	r2,zero
 801222c:	003fdc06 	br	80121a0 <__subdf3+0x864>
 8012230:	0005883a 	mov	r2,zero
 8012234:	003ff706 	br	8012214 <__subdf3+0x8d8>

08012238 <__fixdfsi>:
 8012238:	280cd53a 	srli	r6,r5,20
 801223c:	00c00434 	movhi	r3,16
 8012240:	18ffffc4 	addi	r3,r3,-1
 8012244:	3181ffcc 	andi	r6,r6,2047
 8012248:	01c0ff84 	movi	r7,1022
 801224c:	28c6703a 	and	r3,r5,r3
 8012250:	280ad7fa 	srli	r5,r5,31
 8012254:	3980120e 	bge	r7,r6,80122a0 <__fixdfsi+0x68>
 8012258:	00810744 	movi	r2,1053
 801225c:	11800c16 	blt	r2,r6,8012290 <__fixdfsi+0x58>
 8012260:	00810cc4 	movi	r2,1075
 8012264:	1185c83a 	sub	r2,r2,r6
 8012268:	01c007c4 	movi	r7,31
 801226c:	18c00434 	orhi	r3,r3,16
 8012270:	38800d16 	blt	r7,r2,80122a8 <__fixdfsi+0x70>
 8012274:	31befb44 	addi	r6,r6,-1043
 8012278:	2084d83a 	srl	r2,r4,r2
 801227c:	1986983a 	sll	r3,r3,r6
 8012280:	1884b03a 	or	r2,r3,r2
 8012284:	28000726 	beq	r5,zero,80122a4 <__fixdfsi+0x6c>
 8012288:	0085c83a 	sub	r2,zero,r2
 801228c:	f800283a 	ret
 8012290:	00a00034 	movhi	r2,32768
 8012294:	10bfffc4 	addi	r2,r2,-1
 8012298:	2885883a 	add	r2,r5,r2
 801229c:	f800283a 	ret
 80122a0:	0005883a 	mov	r2,zero
 80122a4:	f800283a 	ret
 80122a8:	008104c4 	movi	r2,1043
 80122ac:	1185c83a 	sub	r2,r2,r6
 80122b0:	1884d83a 	srl	r2,r3,r2
 80122b4:	003ff306 	br	8012284 <__fixdfsi+0x4c>

080122b8 <__floatsidf>:
 80122b8:	defffd04 	addi	sp,sp,-12
 80122bc:	dfc00215 	stw	ra,8(sp)
 80122c0:	dc400115 	stw	r17,4(sp)
 80122c4:	dc000015 	stw	r16,0(sp)
 80122c8:	20002b26 	beq	r4,zero,8012378 <__floatsidf+0xc0>
 80122cc:	2023883a 	mov	r17,r4
 80122d0:	2020d7fa 	srli	r16,r4,31
 80122d4:	20002d16 	blt	r4,zero,801238c <__floatsidf+0xd4>
 80122d8:	8809883a 	mov	r4,r17
 80122dc:	80059900 	call	8005990 <__clzsi2>
 80122e0:	01410784 	movi	r5,1054
 80122e4:	288bc83a 	sub	r5,r5,r2
 80122e8:	01010cc4 	movi	r4,1075
 80122ec:	2149c83a 	sub	r4,r4,r5
 80122f0:	00c007c4 	movi	r3,31
 80122f4:	1900160e 	bge	r3,r4,8012350 <__floatsidf+0x98>
 80122f8:	00c104c4 	movi	r3,1043
 80122fc:	1947c83a 	sub	r3,r3,r5
 8012300:	88c6983a 	sll	r3,r17,r3
 8012304:	00800434 	movhi	r2,16
 8012308:	10bfffc4 	addi	r2,r2,-1
 801230c:	1886703a 	and	r3,r3,r2
 8012310:	2941ffcc 	andi	r5,r5,2047
 8012314:	800d883a 	mov	r6,r16
 8012318:	0005883a 	mov	r2,zero
 801231c:	280a953a 	slli	r5,r5,20
 8012320:	31803fcc 	andi	r6,r6,255
 8012324:	01000434 	movhi	r4,16
 8012328:	300c97fa 	slli	r6,r6,31
 801232c:	213fffc4 	addi	r4,r4,-1
 8012330:	1906703a 	and	r3,r3,r4
 8012334:	1946b03a 	or	r3,r3,r5
 8012338:	1986b03a 	or	r3,r3,r6
 801233c:	dfc00217 	ldw	ra,8(sp)
 8012340:	dc400117 	ldw	r17,4(sp)
 8012344:	dc000017 	ldw	r16,0(sp)
 8012348:	dec00304 	addi	sp,sp,12
 801234c:	f800283a 	ret
 8012350:	00c002c4 	movi	r3,11
 8012354:	1887c83a 	sub	r3,r3,r2
 8012358:	88c6d83a 	srl	r3,r17,r3
 801235c:	8904983a 	sll	r2,r17,r4
 8012360:	01000434 	movhi	r4,16
 8012364:	213fffc4 	addi	r4,r4,-1
 8012368:	2941ffcc 	andi	r5,r5,2047
 801236c:	1906703a 	and	r3,r3,r4
 8012370:	800d883a 	mov	r6,r16
 8012374:	003fe906 	br	801231c <__floatsidf+0x64>
 8012378:	000d883a 	mov	r6,zero
 801237c:	000b883a 	mov	r5,zero
 8012380:	0007883a 	mov	r3,zero
 8012384:	0005883a 	mov	r2,zero
 8012388:	003fe406 	br	801231c <__floatsidf+0x64>
 801238c:	0123c83a 	sub	r17,zero,r4
 8012390:	003fd106 	br	80122d8 <__floatsidf+0x20>

08012394 <__floatunsidf>:
 8012394:	defffe04 	addi	sp,sp,-8
 8012398:	dc000015 	stw	r16,0(sp)
 801239c:	dfc00115 	stw	ra,4(sp)
 80123a0:	2021883a 	mov	r16,r4
 80123a4:	20002226 	beq	r4,zero,8012430 <__floatunsidf+0x9c>
 80123a8:	80059900 	call	8005990 <__clzsi2>
 80123ac:	01010784 	movi	r4,1054
 80123b0:	2089c83a 	sub	r4,r4,r2
 80123b4:	01810cc4 	movi	r6,1075
 80123b8:	310dc83a 	sub	r6,r6,r4
 80123bc:	00c007c4 	movi	r3,31
 80123c0:	1980120e 	bge	r3,r6,801240c <__floatunsidf+0x78>
 80123c4:	00c104c4 	movi	r3,1043
 80123c8:	1907c83a 	sub	r3,r3,r4
 80123cc:	80ca983a 	sll	r5,r16,r3
 80123d0:	00800434 	movhi	r2,16
 80123d4:	10bfffc4 	addi	r2,r2,-1
 80123d8:	2101ffcc 	andi	r4,r4,2047
 80123dc:	0021883a 	mov	r16,zero
 80123e0:	288a703a 	and	r5,r5,r2
 80123e4:	2008953a 	slli	r4,r4,20
 80123e8:	00c00434 	movhi	r3,16
 80123ec:	18ffffc4 	addi	r3,r3,-1
 80123f0:	28c6703a 	and	r3,r5,r3
 80123f4:	8005883a 	mov	r2,r16
 80123f8:	1906b03a 	or	r3,r3,r4
 80123fc:	dfc00117 	ldw	ra,4(sp)
 8012400:	dc000017 	ldw	r16,0(sp)
 8012404:	dec00204 	addi	sp,sp,8
 8012408:	f800283a 	ret
 801240c:	00c002c4 	movi	r3,11
 8012410:	188bc83a 	sub	r5,r3,r2
 8012414:	814ad83a 	srl	r5,r16,r5
 8012418:	00c00434 	movhi	r3,16
 801241c:	18ffffc4 	addi	r3,r3,-1
 8012420:	81a0983a 	sll	r16,r16,r6
 8012424:	2101ffcc 	andi	r4,r4,2047
 8012428:	28ca703a 	and	r5,r5,r3
 801242c:	003fed06 	br	80123e4 <__floatunsidf+0x50>
 8012430:	0009883a 	mov	r4,zero
 8012434:	000b883a 	mov	r5,zero
 8012438:	003fea06 	br	80123e4 <__floatunsidf+0x50>

0801243c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801243c:	defffe04 	addi	sp,sp,-8
 8012440:	dfc00115 	stw	ra,4(sp)
 8012444:	df000015 	stw	fp,0(sp)
 8012448:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801244c:	d0a01417 	ldw	r2,-32688(gp)
 8012450:	10000326 	beq	r2,zero,8012460 <alt_get_errno+0x24>
 8012454:	d0a01417 	ldw	r2,-32688(gp)
 8012458:	103ee83a 	callr	r2
 801245c:	00000106 	br	8012464 <alt_get_errno+0x28>
 8012460:	d0a70d04 	addi	r2,gp,-25548
}
 8012464:	e037883a 	mov	sp,fp
 8012468:	dfc00117 	ldw	ra,4(sp)
 801246c:	df000017 	ldw	fp,0(sp)
 8012470:	dec00204 	addi	sp,sp,8
 8012474:	f800283a 	ret

08012478 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8012478:	defffb04 	addi	sp,sp,-20
 801247c:	dfc00415 	stw	ra,16(sp)
 8012480:	df000315 	stw	fp,12(sp)
 8012484:	df000304 	addi	fp,sp,12
 8012488:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 801248c:	e0bfff17 	ldw	r2,-4(fp)
 8012490:	10000816 	blt	r2,zero,80124b4 <close+0x3c>
 8012494:	01400304 	movi	r5,12
 8012498:	e13fff17 	ldw	r4,-4(fp)
 801249c:	80050200 	call	8005020 <__mulsi3>
 80124a0:	1007883a 	mov	r3,r2
 80124a4:	00820074 	movhi	r2,2049
 80124a8:	1097a504 	addi	r2,r2,24212
 80124ac:	1885883a 	add	r2,r3,r2
 80124b0:	00000106 	br	80124b8 <close+0x40>
 80124b4:	0005883a 	mov	r2,zero
 80124b8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 80124bc:	e0bffd17 	ldw	r2,-12(fp)
 80124c0:	10001926 	beq	r2,zero,8012528 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 80124c4:	e0bffd17 	ldw	r2,-12(fp)
 80124c8:	10800017 	ldw	r2,0(r2)
 80124cc:	10800417 	ldw	r2,16(r2)
 80124d0:	10000626 	beq	r2,zero,80124ec <close+0x74>
 80124d4:	e0bffd17 	ldw	r2,-12(fp)
 80124d8:	10800017 	ldw	r2,0(r2)
 80124dc:	10800417 	ldw	r2,16(r2)
 80124e0:	e13ffd17 	ldw	r4,-12(fp)
 80124e4:	103ee83a 	callr	r2
 80124e8:	00000106 	br	80124f0 <close+0x78>
 80124ec:	0005883a 	mov	r2,zero
 80124f0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 80124f4:	e13fff17 	ldw	r4,-4(fp)
 80124f8:	8012d540 	call	8012d54 <alt_release_fd>
    if (rval < 0)
 80124fc:	e0bffe17 	ldw	r2,-8(fp)
 8012500:	1000070e 	bge	r2,zero,8012520 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 8012504:	801243c0 	call	801243c <alt_get_errno>
 8012508:	1007883a 	mov	r3,r2
 801250c:	e0bffe17 	ldw	r2,-8(fp)
 8012510:	0085c83a 	sub	r2,zero,r2
 8012514:	18800015 	stw	r2,0(r3)
      return -1;
 8012518:	00bfffc4 	movi	r2,-1
 801251c:	00000706 	br	801253c <close+0xc4>
    }
    return 0;
 8012520:	0005883a 	mov	r2,zero
 8012524:	00000506 	br	801253c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8012528:	801243c0 	call	801243c <alt_get_errno>
 801252c:	1007883a 	mov	r3,r2
 8012530:	00801444 	movi	r2,81
 8012534:	18800015 	stw	r2,0(r3)
    return -1;
 8012538:	00bfffc4 	movi	r2,-1
  }
}
 801253c:	e037883a 	mov	sp,fp
 8012540:	dfc00117 	ldw	ra,4(sp)
 8012544:	df000017 	ldw	fp,0(sp)
 8012548:	dec00204 	addi	sp,sp,8
 801254c:	f800283a 	ret

08012550 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8012550:	defffc04 	addi	sp,sp,-16
 8012554:	df000315 	stw	fp,12(sp)
 8012558:	df000304 	addi	fp,sp,12
 801255c:	e13ffd15 	stw	r4,-12(fp)
 8012560:	e17ffe15 	stw	r5,-8(fp)
 8012564:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8012568:	e0bfff17 	ldw	r2,-4(fp)
}
 801256c:	e037883a 	mov	sp,fp
 8012570:	df000017 	ldw	fp,0(sp)
 8012574:	dec00104 	addi	sp,sp,4
 8012578:	f800283a 	ret

0801257c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801257c:	defffe04 	addi	sp,sp,-8
 8012580:	dfc00115 	stw	ra,4(sp)
 8012584:	df000015 	stw	fp,0(sp)
 8012588:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801258c:	d0a01417 	ldw	r2,-32688(gp)
 8012590:	10000326 	beq	r2,zero,80125a0 <alt_get_errno+0x24>
 8012594:	d0a01417 	ldw	r2,-32688(gp)
 8012598:	103ee83a 	callr	r2
 801259c:	00000106 	br	80125a4 <alt_get_errno+0x28>
 80125a0:	d0a70d04 	addi	r2,gp,-25548
}
 80125a4:	e037883a 	mov	sp,fp
 80125a8:	dfc00117 	ldw	ra,4(sp)
 80125ac:	df000017 	ldw	fp,0(sp)
 80125b0:	dec00204 	addi	sp,sp,8
 80125b4:	f800283a 	ret

080125b8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 80125b8:	defffb04 	addi	sp,sp,-20
 80125bc:	dfc00415 	stw	ra,16(sp)
 80125c0:	df000315 	stw	fp,12(sp)
 80125c4:	df000304 	addi	fp,sp,12
 80125c8:	e13ffe15 	stw	r4,-8(fp)
 80125cc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80125d0:	e0bffe17 	ldw	r2,-8(fp)
 80125d4:	10000816 	blt	r2,zero,80125f8 <fstat+0x40>
 80125d8:	01400304 	movi	r5,12
 80125dc:	e13ffe17 	ldw	r4,-8(fp)
 80125e0:	80050200 	call	8005020 <__mulsi3>
 80125e4:	1007883a 	mov	r3,r2
 80125e8:	00820074 	movhi	r2,2049
 80125ec:	1097a504 	addi	r2,r2,24212
 80125f0:	1885883a 	add	r2,r3,r2
 80125f4:	00000106 	br	80125fc <fstat+0x44>
 80125f8:	0005883a 	mov	r2,zero
 80125fc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8012600:	e0bffd17 	ldw	r2,-12(fp)
 8012604:	10001026 	beq	r2,zero,8012648 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8012608:	e0bffd17 	ldw	r2,-12(fp)
 801260c:	10800017 	ldw	r2,0(r2)
 8012610:	10800817 	ldw	r2,32(r2)
 8012614:	10000726 	beq	r2,zero,8012634 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 8012618:	e0bffd17 	ldw	r2,-12(fp)
 801261c:	10800017 	ldw	r2,0(r2)
 8012620:	10800817 	ldw	r2,32(r2)
 8012624:	e17fff17 	ldw	r5,-4(fp)
 8012628:	e13ffd17 	ldw	r4,-12(fp)
 801262c:	103ee83a 	callr	r2
 8012630:	00000a06 	br	801265c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8012634:	e0bfff17 	ldw	r2,-4(fp)
 8012638:	00c80004 	movi	r3,8192
 801263c:	10c00115 	stw	r3,4(r2)
      return 0;
 8012640:	0005883a 	mov	r2,zero
 8012644:	00000506 	br	801265c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8012648:	801257c0 	call	801257c <alt_get_errno>
 801264c:	1007883a 	mov	r3,r2
 8012650:	00801444 	movi	r2,81
 8012654:	18800015 	stw	r2,0(r3)
    return -1;
 8012658:	00bfffc4 	movi	r2,-1
  }
}
 801265c:	e037883a 	mov	sp,fp
 8012660:	dfc00117 	ldw	ra,4(sp)
 8012664:	df000017 	ldw	fp,0(sp)
 8012668:	dec00204 	addi	sp,sp,8
 801266c:	f800283a 	ret

08012670 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
 8012670:	defff404 	addi	sp,sp,-48
 8012674:	dfc00b15 	stw	ra,44(sp)
 8012678:	df000a15 	stw	fp,40(sp)
 801267c:	dd000915 	stw	r20,36(sp)
 8012680:	dcc00815 	stw	r19,32(sp)
 8012684:	dc800715 	stw	r18,28(sp)
 8012688:	dc400615 	stw	r17,24(sp)
 801268c:	dc000515 	stw	r16,20(sp)
 8012690:	df000a04 	addi	fp,sp,40
 8012694:	e13ff915 	stw	r4,-28(fp)
 8012698:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
 801269c:	e0bffa17 	ldw	r2,-24(fp)
 80126a0:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80126a4:	d0a71c17 	ldw	r2,-25488(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
 80126a8:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80126ac:	d0a71b17 	ldw	r2,-25492(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
 80126b0:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
 80126b4:	e0bff817 	ldw	r2,-32(fp)
 80126b8:	10005f26 	beq	r2,zero,8012838 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 80126bc:	d0a71617 	ldw	r2,-25512(gp)
 80126c0:	1029883a 	mov	r20,r2
 80126c4:	e17ff817 	ldw	r5,-32(fp)
 80126c8:	e13ff717 	ldw	r4,-36(fp)
 80126cc:	80104880 	call	8010488 <__udivsi3>
 80126d0:	a085883a 	add	r2,r20,r2
 80126d4:	1007883a 	mov	r3,r2
 80126d8:	e0bff917 	ldw	r2,-28(fp)
 80126dc:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
 80126e0:	d0a71717 	ldw	r2,-25508(gp)
 80126e4:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
 80126e8:	e0bff717 	ldw	r2,-36(fp)
 80126ec:	1021883a 	mov	r16,r2
 80126f0:	0023883a 	mov	r17,zero
 80126f4:	e17ff817 	ldw	r5,-32(fp)
 80126f8:	010003f4 	movhi	r4,15
 80126fc:	21109004 	addi	r4,r4,16960
 8012700:	80104880 	call	8010488 <__udivsi3>
 8012704:	1025883a 	mov	r18,r2
 8012708:	0027883a 	mov	r19,zero
 801270c:	900d883a 	mov	r6,r18
 8012710:	980f883a 	mov	r7,r19
 8012714:	8009883a 	mov	r4,r16
 8012718:	880b883a 	mov	r5,r17
 801271c:	8014fd80 	call	8014fd8 <__muldi3>
 8012720:	1009883a 	mov	r4,r2
 8012724:	180b883a 	mov	r5,r3
 8012728:	2005883a 	mov	r2,r4
 801272c:	2807883a 	mov	r3,r5
 8012730:	018003f4 	movhi	r6,15
 8012734:	31909004 	addi	r6,r6,16960
 8012738:	000f883a 	mov	r7,zero
 801273c:	1009883a 	mov	r4,r2
 8012740:	180b883a 	mov	r5,r3
 8012744:	800fdcc0 	call	800fdcc <__umoddi3>
 8012748:	1009883a 	mov	r4,r2
 801274c:	180b883a 	mov	r5,r3
 8012750:	2005883a 	mov	r2,r4
 8012754:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
 8012758:	a085883a 	add	r2,r20,r2
 801275c:	1007883a 	mov	r3,r2
 8012760:	e0bff917 	ldw	r2,-28(fp)
 8012764:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 8012768:	00001406 	br	80127bc <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
 801276c:	e0bff917 	ldw	r2,-28(fp)
 8012770:	10800017 	ldw	r2,0(r2)
 8012774:	00800516 	blt	zero,r2,801278c <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
 8012778:	e0bff917 	ldw	r2,-28(fp)
 801277c:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
 8012780:	e0bff917 	ldw	r2,-28(fp)
 8012784:	10000115 	stw	zero,4(r2)
          break;
 8012788:	00000f06 	br	80127c8 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
 801278c:	e0bff917 	ldw	r2,-28(fp)
 8012790:	10800017 	ldw	r2,0(r2)
 8012794:	10ffffc4 	addi	r3,r2,-1
 8012798:	e0bff917 	ldw	r2,-28(fp)
 801279c:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
 80127a0:	e0bff917 	ldw	r2,-28(fp)
 80127a4:	10c00117 	ldw	r3,4(r2)
 80127a8:	008003f4 	movhi	r2,15
 80127ac:	10909004 	addi	r2,r2,16960
 80127b0:	1887883a 	add	r3,r3,r2
 80127b4:	e0bff917 	ldw	r2,-28(fp)
 80127b8:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 80127bc:	e0bff917 	ldw	r2,-28(fp)
 80127c0:	10800117 	ldw	r2,4(r2)
 80127c4:	103fe916 	blt	r2,zero,801276c <gettimeofday+0xfc>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 80127c8:	00000c06 	br	80127fc <gettimeofday+0x18c>
      ptimeval->tv_sec++;
 80127cc:	e0bff917 	ldw	r2,-28(fp)
 80127d0:	10800017 	ldw	r2,0(r2)
 80127d4:	10c00044 	addi	r3,r2,1
 80127d8:	e0bff917 	ldw	r2,-28(fp)
 80127dc:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
 80127e0:	e0bff917 	ldw	r2,-28(fp)
 80127e4:	10c00117 	ldw	r3,4(r2)
 80127e8:	00bffc74 	movhi	r2,65521
 80127ec:	10af7004 	addi	r2,r2,-16960
 80127f0:	1887883a 	add	r3,r3,r2
 80127f4:	e0bff917 	ldw	r2,-28(fp)
 80127f8:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 80127fc:	e0bff917 	ldw	r2,-28(fp)
 8012800:	10c00117 	ldw	r3,4(r2)
 8012804:	008003f4 	movhi	r2,15
 8012808:	10908fc4 	addi	r2,r2,16959
 801280c:	10ffef16 	blt	r2,r3,80127cc <gettimeofday+0x15c>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
 8012810:	e0bff617 	ldw	r2,-40(fp)
 8012814:	10000626 	beq	r2,zero,8012830 <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
 8012818:	d0e71417 	ldw	r3,-25520(gp)
 801281c:	e0bff617 	ldw	r2,-40(fp)
 8012820:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
 8012824:	d0e71517 	ldw	r3,-25516(gp)
 8012828:	e0bff617 	ldw	r2,-40(fp)
 801282c:	10c00115 	stw	r3,4(r2)
    }

    return 0;
 8012830:	0005883a 	mov	r2,zero
 8012834:	00000106 	br	801283c <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
 8012838:	00bfde84 	movi	r2,-134
}
 801283c:	e6fffb04 	addi	sp,fp,-20
 8012840:	dfc00617 	ldw	ra,24(sp)
 8012844:	df000517 	ldw	fp,20(sp)
 8012848:	dd000417 	ldw	r20,16(sp)
 801284c:	dcc00317 	ldw	r19,12(sp)
 8012850:	dc800217 	ldw	r18,8(sp)
 8012854:	dc400117 	ldw	r17,4(sp)
 8012858:	dc000017 	ldw	r16,0(sp)
 801285c:	dec00704 	addi	sp,sp,28
 8012860:	f800283a 	ret

08012864 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8012864:	defffe04 	addi	sp,sp,-8
 8012868:	dfc00115 	stw	ra,4(sp)
 801286c:	df000015 	stw	fp,0(sp)
 8012870:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8012874:	d0a01417 	ldw	r2,-32688(gp)
 8012878:	10000326 	beq	r2,zero,8012888 <alt_get_errno+0x24>
 801287c:	d0a01417 	ldw	r2,-32688(gp)
 8012880:	103ee83a 	callr	r2
 8012884:	00000106 	br	801288c <alt_get_errno+0x28>
 8012888:	d0a70d04 	addi	r2,gp,-25548
}
 801288c:	e037883a 	mov	sp,fp
 8012890:	dfc00117 	ldw	ra,4(sp)
 8012894:	df000017 	ldw	fp,0(sp)
 8012898:	dec00204 	addi	sp,sp,8
 801289c:	f800283a 	ret

080128a0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 80128a0:	deffed04 	addi	sp,sp,-76
 80128a4:	dfc01215 	stw	ra,72(sp)
 80128a8:	df001115 	stw	fp,68(sp)
 80128ac:	df001104 	addi	fp,sp,68
 80128b0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80128b4:	e0bfff17 	ldw	r2,-4(fp)
 80128b8:	10000816 	blt	r2,zero,80128dc <isatty+0x3c>
 80128bc:	01400304 	movi	r5,12
 80128c0:	e13fff17 	ldw	r4,-4(fp)
 80128c4:	80050200 	call	8005020 <__mulsi3>
 80128c8:	1007883a 	mov	r3,r2
 80128cc:	00820074 	movhi	r2,2049
 80128d0:	1097a504 	addi	r2,r2,24212
 80128d4:	1885883a 	add	r2,r3,r2
 80128d8:	00000106 	br	80128e0 <isatty+0x40>
 80128dc:	0005883a 	mov	r2,zero
 80128e0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 80128e4:	e0bfef17 	ldw	r2,-68(fp)
 80128e8:	10000e26 	beq	r2,zero,8012924 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 80128ec:	e0bfef17 	ldw	r2,-68(fp)
 80128f0:	10800017 	ldw	r2,0(r2)
 80128f4:	10800817 	ldw	r2,32(r2)
 80128f8:	1000021e 	bne	r2,zero,8012904 <isatty+0x64>
    {
      return 1;
 80128fc:	00800044 	movi	r2,1
 8012900:	00000d06 	br	8012938 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8012904:	e0bff004 	addi	r2,fp,-64
 8012908:	100b883a 	mov	r5,r2
 801290c:	e13fff17 	ldw	r4,-4(fp)
 8012910:	80125b80 	call	80125b8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8012914:	e0bff117 	ldw	r2,-60(fp)
 8012918:	10880020 	cmpeqi	r2,r2,8192
 801291c:	10803fcc 	andi	r2,r2,255
 8012920:	00000506 	br	8012938 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8012924:	80128640 	call	8012864 <alt_get_errno>
 8012928:	1007883a 	mov	r3,r2
 801292c:	00801444 	movi	r2,81
 8012930:	18800015 	stw	r2,0(r3)
    return 0;
 8012934:	0005883a 	mov	r2,zero
  }
}
 8012938:	e037883a 	mov	sp,fp
 801293c:	dfc00117 	ldw	ra,4(sp)
 8012940:	df000017 	ldw	fp,0(sp)
 8012944:	dec00204 	addi	sp,sp,8
 8012948:	f800283a 	ret

0801294c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 801294c:	defffc04 	addi	sp,sp,-16
 8012950:	df000315 	stw	fp,12(sp)
 8012954:	df000304 	addi	fp,sp,12
 8012958:	e13ffd15 	stw	r4,-12(fp)
 801295c:	e17ffe15 	stw	r5,-8(fp)
 8012960:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8012964:	e0fffe17 	ldw	r3,-8(fp)
 8012968:	e0bffd17 	ldw	r2,-12(fp)
 801296c:	18800c26 	beq	r3,r2,80129a0 <alt_load_section+0x54>
  {
    while( to != end )
 8012970:	00000806 	br	8012994 <alt_load_section+0x48>
    {
      *to++ = *from++;
 8012974:	e0bffe17 	ldw	r2,-8(fp)
 8012978:	10c00104 	addi	r3,r2,4
 801297c:	e0fffe15 	stw	r3,-8(fp)
 8012980:	e0fffd17 	ldw	r3,-12(fp)
 8012984:	19000104 	addi	r4,r3,4
 8012988:	e13ffd15 	stw	r4,-12(fp)
 801298c:	18c00017 	ldw	r3,0(r3)
 8012990:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8012994:	e0fffe17 	ldw	r3,-8(fp)
 8012998:	e0bfff17 	ldw	r2,-4(fp)
 801299c:	18bff51e 	bne	r3,r2,8012974 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 80129a0:	0001883a 	nop
 80129a4:	e037883a 	mov	sp,fp
 80129a8:	df000017 	ldw	fp,0(sp)
 80129ac:	dec00104 	addi	sp,sp,4
 80129b0:	f800283a 	ret

080129b4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 80129b4:	defffe04 	addi	sp,sp,-8
 80129b8:	dfc00115 	stw	ra,4(sp)
 80129bc:	df000015 	stw	fp,0(sp)
 80129c0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 80129c4:	01820074 	movhi	r6,2049
 80129c8:	319c3604 	addi	r6,r6,28888
 80129cc:	01420074 	movhi	r5,2049
 80129d0:	29556a04 	addi	r5,r5,21928
 80129d4:	01020074 	movhi	r4,2049
 80129d8:	211c3604 	addi	r4,r4,28888
 80129dc:	801294c0 	call	801294c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 80129e0:	01820034 	movhi	r6,2048
 80129e4:	31808c04 	addi	r6,r6,560
 80129e8:	01420034 	movhi	r5,2048
 80129ec:	29400804 	addi	r5,r5,32
 80129f0:	01020034 	movhi	r4,2048
 80129f4:	21000804 	addi	r4,r4,32
 80129f8:	801294c0 	call	801294c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 80129fc:	01820074 	movhi	r6,2049
 8012a00:	31956a04 	addi	r6,r6,21928
 8012a04:	01420074 	movhi	r5,2049
 8012a08:	29544604 	addi	r5,r5,20760
 8012a0c:	01020074 	movhi	r4,2049
 8012a10:	21144604 	addi	r4,r4,20760
 8012a14:	801294c0 	call	801294c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8012a18:	80141740 	call	8014174 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8012a1c:	80143340 	call	8014334 <alt_icache_flush_all>
}
 8012a20:	0001883a 	nop
 8012a24:	e037883a 	mov	sp,fp
 8012a28:	dfc00117 	ldw	ra,4(sp)
 8012a2c:	df000017 	ldw	fp,0(sp)
 8012a30:	dec00204 	addi	sp,sp,8
 8012a34:	f800283a 	ret

08012a38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8012a38:	defffe04 	addi	sp,sp,-8
 8012a3c:	dfc00115 	stw	ra,4(sp)
 8012a40:	df000015 	stw	fp,0(sp)
 8012a44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8012a48:	d0a01417 	ldw	r2,-32688(gp)
 8012a4c:	10000326 	beq	r2,zero,8012a5c <alt_get_errno+0x24>
 8012a50:	d0a01417 	ldw	r2,-32688(gp)
 8012a54:	103ee83a 	callr	r2
 8012a58:	00000106 	br	8012a60 <alt_get_errno+0x28>
 8012a5c:	d0a70d04 	addi	r2,gp,-25548
}
 8012a60:	e037883a 	mov	sp,fp
 8012a64:	dfc00117 	ldw	ra,4(sp)
 8012a68:	df000017 	ldw	fp,0(sp)
 8012a6c:	dec00204 	addi	sp,sp,8
 8012a70:	f800283a 	ret

08012a74 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8012a74:	defff904 	addi	sp,sp,-28
 8012a78:	dfc00615 	stw	ra,24(sp)
 8012a7c:	df000515 	stw	fp,20(sp)
 8012a80:	df000504 	addi	fp,sp,20
 8012a84:	e13ffd15 	stw	r4,-12(fp)
 8012a88:	e17ffe15 	stw	r5,-8(fp)
 8012a8c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8012a90:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8012a94:	e0bffd17 	ldw	r2,-12(fp)
 8012a98:	10000816 	blt	r2,zero,8012abc <lseek+0x48>
 8012a9c:	01400304 	movi	r5,12
 8012aa0:	e13ffd17 	ldw	r4,-12(fp)
 8012aa4:	80050200 	call	8005020 <__mulsi3>
 8012aa8:	1007883a 	mov	r3,r2
 8012aac:	00820074 	movhi	r2,2049
 8012ab0:	1097a504 	addi	r2,r2,24212
 8012ab4:	1885883a 	add	r2,r3,r2
 8012ab8:	00000106 	br	8012ac0 <lseek+0x4c>
 8012abc:	0005883a 	mov	r2,zero
 8012ac0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8012ac4:	e0bffc17 	ldw	r2,-16(fp)
 8012ac8:	10001026 	beq	r2,zero,8012b0c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8012acc:	e0bffc17 	ldw	r2,-16(fp)
 8012ad0:	10800017 	ldw	r2,0(r2)
 8012ad4:	10800717 	ldw	r2,28(r2)
 8012ad8:	10000926 	beq	r2,zero,8012b00 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8012adc:	e0bffc17 	ldw	r2,-16(fp)
 8012ae0:	10800017 	ldw	r2,0(r2)
 8012ae4:	10800717 	ldw	r2,28(r2)
 8012ae8:	e1bfff17 	ldw	r6,-4(fp)
 8012aec:	e17ffe17 	ldw	r5,-8(fp)
 8012af0:	e13ffc17 	ldw	r4,-16(fp)
 8012af4:	103ee83a 	callr	r2
 8012af8:	e0bffb15 	stw	r2,-20(fp)
 8012afc:	00000506 	br	8012b14 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8012b00:	00bfde84 	movi	r2,-134
 8012b04:	e0bffb15 	stw	r2,-20(fp)
 8012b08:	00000206 	br	8012b14 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 8012b0c:	00bfebc4 	movi	r2,-81
 8012b10:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8012b14:	e0bffb17 	ldw	r2,-20(fp)
 8012b18:	1000070e 	bge	r2,zero,8012b38 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 8012b1c:	8012a380 	call	8012a38 <alt_get_errno>
 8012b20:	1007883a 	mov	r3,r2
 8012b24:	e0bffb17 	ldw	r2,-20(fp)
 8012b28:	0085c83a 	sub	r2,zero,r2
 8012b2c:	18800015 	stw	r2,0(r3)
    rc = -1;
 8012b30:	00bfffc4 	movi	r2,-1
 8012b34:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 8012b38:	e0bffb17 	ldw	r2,-20(fp)
}
 8012b3c:	e037883a 	mov	sp,fp
 8012b40:	dfc00117 	ldw	ra,4(sp)
 8012b44:	df000017 	ldw	fp,0(sp)
 8012b48:	dec00204 	addi	sp,sp,8
 8012b4c:	f800283a 	ret

08012b50 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8012b50:	defffd04 	addi	sp,sp,-12
 8012b54:	dfc00215 	stw	ra,8(sp)
 8012b58:	df000115 	stw	fp,4(sp)
 8012b5c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8012b60:	0009883a 	mov	r4,zero
 8012b64:	80132500 	call	8013250 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8012b68:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8012b6c:	80132880 	call	8013288 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8012b70:	01820074 	movhi	r6,2049
 8012b74:	31956004 	addi	r6,r6,21888
 8012b78:	01420074 	movhi	r5,2049
 8012b7c:	29556004 	addi	r5,r5,21888
 8012b80:	01020074 	movhi	r4,2049
 8012b84:	21156004 	addi	r4,r4,21888
 8012b88:	80146d80 	call	80146d8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8012b8c:	80142740 	call	8014274 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8012b90:	01020074 	movhi	r4,2049
 8012b94:	2110b504 	addi	r4,r4,17108
 8012b98:	8014cf40 	call	8014cf4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8012b9c:	d0a71817 	ldw	r2,-25504(gp)
 8012ba0:	d0e71917 	ldw	r3,-25500(gp)
 8012ba4:	d1271a17 	ldw	r4,-25496(gp)
 8012ba8:	200d883a 	mov	r6,r4
 8012bac:	180b883a 	mov	r5,r3
 8012bb0:	1009883a 	mov	r4,r2
 8012bb4:	8004e2c0 	call	8004e2c <main>
 8012bb8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8012bbc:	01000044 	movi	r4,1
 8012bc0:	80124780 	call	8012478 <close>
  exit (result);
 8012bc4:	e13fff17 	ldw	r4,-4(fp)
 8012bc8:	8014d080 	call	8014d08 <exit>

08012bcc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8012bcc:	defffe04 	addi	sp,sp,-8
 8012bd0:	df000115 	stw	fp,4(sp)
 8012bd4:	df000104 	addi	fp,sp,4
 8012bd8:	e13fff15 	stw	r4,-4(fp)
}
 8012bdc:	0001883a 	nop
 8012be0:	e037883a 	mov	sp,fp
 8012be4:	df000017 	ldw	fp,0(sp)
 8012be8:	dec00104 	addi	sp,sp,4
 8012bec:	f800283a 	ret

08012bf0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8012bf0:	defffe04 	addi	sp,sp,-8
 8012bf4:	df000115 	stw	fp,4(sp)
 8012bf8:	df000104 	addi	fp,sp,4
 8012bfc:	e13fff15 	stw	r4,-4(fp)
}
 8012c00:	0001883a 	nop
 8012c04:	e037883a 	mov	sp,fp
 8012c08:	df000017 	ldw	fp,0(sp)
 8012c0c:	dec00104 	addi	sp,sp,4
 8012c10:	f800283a 	ret

08012c14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8012c14:	defffe04 	addi	sp,sp,-8
 8012c18:	dfc00115 	stw	ra,4(sp)
 8012c1c:	df000015 	stw	fp,0(sp)
 8012c20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8012c24:	d0a01417 	ldw	r2,-32688(gp)
 8012c28:	10000326 	beq	r2,zero,8012c38 <alt_get_errno+0x24>
 8012c2c:	d0a01417 	ldw	r2,-32688(gp)
 8012c30:	103ee83a 	callr	r2
 8012c34:	00000106 	br	8012c3c <alt_get_errno+0x28>
 8012c38:	d0a70d04 	addi	r2,gp,-25548
}
 8012c3c:	e037883a 	mov	sp,fp
 8012c40:	dfc00117 	ldw	ra,4(sp)
 8012c44:	df000017 	ldw	fp,0(sp)
 8012c48:	dec00204 	addi	sp,sp,8
 8012c4c:	f800283a 	ret

08012c50 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8012c50:	defff904 	addi	sp,sp,-28
 8012c54:	dfc00615 	stw	ra,24(sp)
 8012c58:	df000515 	stw	fp,20(sp)
 8012c5c:	df000504 	addi	fp,sp,20
 8012c60:	e13ffd15 	stw	r4,-12(fp)
 8012c64:	e17ffe15 	stw	r5,-8(fp)
 8012c68:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8012c6c:	e0bffd17 	ldw	r2,-12(fp)
 8012c70:	10000816 	blt	r2,zero,8012c94 <read+0x44>
 8012c74:	01400304 	movi	r5,12
 8012c78:	e13ffd17 	ldw	r4,-12(fp)
 8012c7c:	80050200 	call	8005020 <__mulsi3>
 8012c80:	1007883a 	mov	r3,r2
 8012c84:	00820074 	movhi	r2,2049
 8012c88:	1097a504 	addi	r2,r2,24212
 8012c8c:	1885883a 	add	r2,r3,r2
 8012c90:	00000106 	br	8012c98 <read+0x48>
 8012c94:	0005883a 	mov	r2,zero
 8012c98:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8012c9c:	e0bffb17 	ldw	r2,-20(fp)
 8012ca0:	10002226 	beq	r2,zero,8012d2c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8012ca4:	e0bffb17 	ldw	r2,-20(fp)
 8012ca8:	10800217 	ldw	r2,8(r2)
 8012cac:	108000cc 	andi	r2,r2,3
 8012cb0:	10800060 	cmpeqi	r2,r2,1
 8012cb4:	1000181e 	bne	r2,zero,8012d18 <read+0xc8>
        (fd->dev->read))
 8012cb8:	e0bffb17 	ldw	r2,-20(fp)
 8012cbc:	10800017 	ldw	r2,0(r2)
 8012cc0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8012cc4:	10001426 	beq	r2,zero,8012d18 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8012cc8:	e0bffb17 	ldw	r2,-20(fp)
 8012ccc:	10800017 	ldw	r2,0(r2)
 8012cd0:	10800517 	ldw	r2,20(r2)
 8012cd4:	e0ffff17 	ldw	r3,-4(fp)
 8012cd8:	180d883a 	mov	r6,r3
 8012cdc:	e17ffe17 	ldw	r5,-8(fp)
 8012ce0:	e13ffb17 	ldw	r4,-20(fp)
 8012ce4:	103ee83a 	callr	r2
 8012ce8:	e0bffc15 	stw	r2,-16(fp)
 8012cec:	e0bffc17 	ldw	r2,-16(fp)
 8012cf0:	1000070e 	bge	r2,zero,8012d10 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 8012cf4:	8012c140 	call	8012c14 <alt_get_errno>
 8012cf8:	1007883a 	mov	r3,r2
 8012cfc:	e0bffc17 	ldw	r2,-16(fp)
 8012d00:	0085c83a 	sub	r2,zero,r2
 8012d04:	18800015 	stw	r2,0(r3)
          return -1;
 8012d08:	00bfffc4 	movi	r2,-1
 8012d0c:	00000c06 	br	8012d40 <read+0xf0>
        }
        return rval;
 8012d10:	e0bffc17 	ldw	r2,-16(fp)
 8012d14:	00000a06 	br	8012d40 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8012d18:	8012c140 	call	8012c14 <alt_get_errno>
 8012d1c:	1007883a 	mov	r3,r2
 8012d20:	00800344 	movi	r2,13
 8012d24:	18800015 	stw	r2,0(r3)
 8012d28:	00000406 	br	8012d3c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8012d2c:	8012c140 	call	8012c14 <alt_get_errno>
 8012d30:	1007883a 	mov	r3,r2
 8012d34:	00801444 	movi	r2,81
 8012d38:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8012d3c:	00bfffc4 	movi	r2,-1
}
 8012d40:	e037883a 	mov	sp,fp
 8012d44:	dfc00117 	ldw	ra,4(sp)
 8012d48:	df000017 	ldw	fp,0(sp)
 8012d4c:	dec00204 	addi	sp,sp,8
 8012d50:	f800283a 	ret

08012d54 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8012d54:	defffc04 	addi	sp,sp,-16
 8012d58:	dfc00315 	stw	ra,12(sp)
 8012d5c:	df000215 	stw	fp,8(sp)
 8012d60:	dc000115 	stw	r16,4(sp)
 8012d64:	df000204 	addi	fp,sp,8
 8012d68:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 8012d6c:	e0bffe17 	ldw	r2,-8(fp)
 8012d70:	108000d0 	cmplti	r2,r2,3
 8012d74:	1000111e 	bne	r2,zero,8012dbc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 8012d78:	04020074 	movhi	r16,2049
 8012d7c:	8417a504 	addi	r16,r16,24212
 8012d80:	e0bffe17 	ldw	r2,-8(fp)
 8012d84:	01400304 	movi	r5,12
 8012d88:	1009883a 	mov	r4,r2
 8012d8c:	80050200 	call	8005020 <__mulsi3>
 8012d90:	8085883a 	add	r2,r16,r2
 8012d94:	10800204 	addi	r2,r2,8
 8012d98:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8012d9c:	04020074 	movhi	r16,2049
 8012da0:	8417a504 	addi	r16,r16,24212
 8012da4:	e0bffe17 	ldw	r2,-8(fp)
 8012da8:	01400304 	movi	r5,12
 8012dac:	1009883a 	mov	r4,r2
 8012db0:	80050200 	call	8005020 <__mulsi3>
 8012db4:	8085883a 	add	r2,r16,r2
 8012db8:	10000015 	stw	zero,0(r2)
  }
}
 8012dbc:	0001883a 	nop
 8012dc0:	e6ffff04 	addi	sp,fp,-4
 8012dc4:	dfc00217 	ldw	ra,8(sp)
 8012dc8:	df000117 	ldw	fp,4(sp)
 8012dcc:	dc000017 	ldw	r16,0(sp)
 8012dd0:	dec00304 	addi	sp,sp,12
 8012dd4:	f800283a 	ret

08012dd8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8012dd8:	defff904 	addi	sp,sp,-28
 8012ddc:	df000615 	stw	fp,24(sp)
 8012de0:	df000604 	addi	fp,sp,24
 8012de4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012de8:	0005303a 	rdctl	r2,status
 8012dec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012df0:	e0fffe17 	ldw	r3,-8(fp)
 8012df4:	00bfff84 	movi	r2,-2
 8012df8:	1884703a 	and	r2,r3,r2
 8012dfc:	1001703a 	wrctl	status,r2
  
  return context;
 8012e00:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8012e04:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8012e08:	d0a01517 	ldw	r2,-32684(gp)
 8012e0c:	10c000c4 	addi	r3,r2,3
 8012e10:	00bfff04 	movi	r2,-4
 8012e14:	1884703a 	and	r2,r3,r2
 8012e18:	d0a01515 	stw	r2,-32684(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8012e1c:	d0e01517 	ldw	r3,-32684(gp)
 8012e20:	e0bfff17 	ldw	r2,-4(fp)
 8012e24:	1887883a 	add	r3,r3,r2
 8012e28:	00830034 	movhi	r2,3072
 8012e2c:	10800004 	addi	r2,r2,0
 8012e30:	10c0062e 	bgeu	r2,r3,8012e4c <sbrk+0x74>
 8012e34:	e0bffb17 	ldw	r2,-20(fp)
 8012e38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012e3c:	e0bffa17 	ldw	r2,-24(fp)
 8012e40:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8012e44:	00bfffc4 	movi	r2,-1
 8012e48:	00000b06 	br	8012e78 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8012e4c:	d0a01517 	ldw	r2,-32684(gp)
 8012e50:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 8012e54:	d0e01517 	ldw	r3,-32684(gp)
 8012e58:	e0bfff17 	ldw	r2,-4(fp)
 8012e5c:	1885883a 	add	r2,r3,r2
 8012e60:	d0a01515 	stw	r2,-32684(gp)
 8012e64:	e0bffb17 	ldw	r2,-20(fp)
 8012e68:	e0bffc15 	stw	r2,-16(fp)
 8012e6c:	e0bffc17 	ldw	r2,-16(fp)
 8012e70:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8012e74:	e0bffd17 	ldw	r2,-12(fp)
} 
 8012e78:	e037883a 	mov	sp,fp
 8012e7c:	df000017 	ldw	fp,0(sp)
 8012e80:	dec00104 	addi	sp,sp,4
 8012e84:	f800283a 	ret

08012e88 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8012e88:	defffa04 	addi	sp,sp,-24
 8012e8c:	df000515 	stw	fp,20(sp)
 8012e90:	df000504 	addi	fp,sp,20
 8012e94:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012e98:	0005303a 	rdctl	r2,status
 8012e9c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012ea0:	e0fffc17 	ldw	r3,-16(fp)
 8012ea4:	00bfff84 	movi	r2,-2
 8012ea8:	1884703a 	and	r2,r3,r2
 8012eac:	1001703a 	wrctl	status,r2
  
  return context;
 8012eb0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8012eb4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8012eb8:	e0bfff17 	ldw	r2,-4(fp)
 8012ebc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8012ec0:	e0bffd17 	ldw	r2,-12(fp)
 8012ec4:	10800017 	ldw	r2,0(r2)
 8012ec8:	e0fffd17 	ldw	r3,-12(fp)
 8012ecc:	18c00117 	ldw	r3,4(r3)
 8012ed0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8012ed4:	e0bffd17 	ldw	r2,-12(fp)
 8012ed8:	10800117 	ldw	r2,4(r2)
 8012edc:	e0fffd17 	ldw	r3,-12(fp)
 8012ee0:	18c00017 	ldw	r3,0(r3)
 8012ee4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8012ee8:	e0bffd17 	ldw	r2,-12(fp)
 8012eec:	e0fffd17 	ldw	r3,-12(fp)
 8012ef0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8012ef4:	e0bffd17 	ldw	r2,-12(fp)
 8012ef8:	e0fffd17 	ldw	r3,-12(fp)
 8012efc:	10c00015 	stw	r3,0(r2)
 8012f00:	e0bffb17 	ldw	r2,-20(fp)
 8012f04:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012f08:	e0bffe17 	ldw	r2,-8(fp)
 8012f0c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8012f10:	0001883a 	nop
 8012f14:	e037883a 	mov	sp,fp
 8012f18:	df000017 	ldw	fp,0(sp)
 8012f1c:	dec00104 	addi	sp,sp,4
 8012f20:	f800283a 	ret

08012f24 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8012f24:	defffb04 	addi	sp,sp,-20
 8012f28:	dfc00415 	stw	ra,16(sp)
 8012f2c:	df000315 	stw	fp,12(sp)
 8012f30:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8012f34:	d0a01617 	ldw	r2,-32680(gp)
 8012f38:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8012f3c:	d0a71c17 	ldw	r2,-25488(gp)
 8012f40:	10800044 	addi	r2,r2,1
 8012f44:	d0a71c15 	stw	r2,-25488(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8012f48:	00002e06 	br	8013004 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8012f4c:	e0bffd17 	ldw	r2,-12(fp)
 8012f50:	10800017 	ldw	r2,0(r2)
 8012f54:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8012f58:	e0bffd17 	ldw	r2,-12(fp)
 8012f5c:	10800403 	ldbu	r2,16(r2)
 8012f60:	10803fcc 	andi	r2,r2,255
 8012f64:	10000426 	beq	r2,zero,8012f78 <alt_tick+0x54>
 8012f68:	d0a71c17 	ldw	r2,-25488(gp)
 8012f6c:	1000021e 	bne	r2,zero,8012f78 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8012f70:	e0bffd17 	ldw	r2,-12(fp)
 8012f74:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8012f78:	e0bffd17 	ldw	r2,-12(fp)
 8012f7c:	10800217 	ldw	r2,8(r2)
 8012f80:	d0e71c17 	ldw	r3,-25488(gp)
 8012f84:	18801d36 	bltu	r3,r2,8012ffc <alt_tick+0xd8>
 8012f88:	e0bffd17 	ldw	r2,-12(fp)
 8012f8c:	10800403 	ldbu	r2,16(r2)
 8012f90:	10803fcc 	andi	r2,r2,255
 8012f94:	1000191e 	bne	r2,zero,8012ffc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8012f98:	e0bffd17 	ldw	r2,-12(fp)
 8012f9c:	10800317 	ldw	r2,12(r2)
 8012fa0:	e0fffd17 	ldw	r3,-12(fp)
 8012fa4:	18c00517 	ldw	r3,20(r3)
 8012fa8:	1809883a 	mov	r4,r3
 8012fac:	103ee83a 	callr	r2
 8012fb0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8012fb4:	e0bfff17 	ldw	r2,-4(fp)
 8012fb8:	1000031e 	bne	r2,zero,8012fc8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8012fbc:	e13ffd17 	ldw	r4,-12(fp)
 8012fc0:	8012e880 	call	8012e88 <alt_alarm_stop>
 8012fc4:	00000d06 	br	8012ffc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8012fc8:	e0bffd17 	ldw	r2,-12(fp)
 8012fcc:	10c00217 	ldw	r3,8(r2)
 8012fd0:	e0bfff17 	ldw	r2,-4(fp)
 8012fd4:	1887883a 	add	r3,r3,r2
 8012fd8:	e0bffd17 	ldw	r2,-12(fp)
 8012fdc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8012fe0:	e0bffd17 	ldw	r2,-12(fp)
 8012fe4:	10c00217 	ldw	r3,8(r2)
 8012fe8:	d0a71c17 	ldw	r2,-25488(gp)
 8012fec:	1880032e 	bgeu	r3,r2,8012ffc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8012ff0:	e0bffd17 	ldw	r2,-12(fp)
 8012ff4:	00c00044 	movi	r3,1
 8012ff8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8012ffc:	e0bffe17 	ldw	r2,-8(fp)
 8013000:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8013004:	e0fffd17 	ldw	r3,-12(fp)
 8013008:	d0a01604 	addi	r2,gp,-32680
 801300c:	18bfcf1e 	bne	r3,r2,8012f4c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8013010:	0001883a 	nop
}
 8013014:	0001883a 	nop
 8013018:	e037883a 	mov	sp,fp
 801301c:	dfc00117 	ldw	ra,4(sp)
 8013020:	df000017 	ldw	fp,0(sp)
 8013024:	dec00204 	addi	sp,sp,8
 8013028:	f800283a 	ret

0801302c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801302c:	defffe04 	addi	sp,sp,-8
 8013030:	dfc00115 	stw	ra,4(sp)
 8013034:	df000015 	stw	fp,0(sp)
 8013038:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801303c:	d0a01417 	ldw	r2,-32688(gp)
 8013040:	10000326 	beq	r2,zero,8013050 <alt_get_errno+0x24>
 8013044:	d0a01417 	ldw	r2,-32688(gp)
 8013048:	103ee83a 	callr	r2
 801304c:	00000106 	br	8013054 <alt_get_errno+0x28>
 8013050:	d0a70d04 	addi	r2,gp,-25548
}
 8013054:	e037883a 	mov	sp,fp
 8013058:	dfc00117 	ldw	ra,4(sp)
 801305c:	df000017 	ldw	fp,0(sp)
 8013060:	dec00204 	addi	sp,sp,8
 8013064:	f800283a 	ret

08013068 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
 8013068:	defffc04 	addi	sp,sp,-16
 801306c:	dfc00315 	stw	ra,12(sp)
 8013070:	df000215 	stw	fp,8(sp)
 8013074:	df000204 	addi	fp,sp,8
 8013078:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 801307c:	d0a71c17 	ldw	r2,-25488(gp)
  clock_t ticks = alt_nticks(); 
 8013080:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8013084:	d0a71b17 	ldw	r2,-25492(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
 8013088:	1000061e 	bne	r2,zero,80130a4 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
 801308c:	801302c0 	call	801302c <alt_get_errno>
 8013090:	1007883a 	mov	r3,r2
 8013094:	00801604 	movi	r2,88
 8013098:	18800015 	stw	r2,0(r3)
    return 0;
 801309c:	0005883a 	mov	r2,zero
 80130a0:	00000a06 	br	80130cc <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
 80130a4:	e0bfff17 	ldw	r2,-4(fp)
 80130a8:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
 80130ac:	e0bfff17 	ldw	r2,-4(fp)
 80130b0:	e0fffe17 	ldw	r3,-8(fp)
 80130b4:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
 80130b8:	e0bfff17 	ldw	r2,-4(fp)
 80130bc:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
 80130c0:	e0bfff17 	ldw	r2,-4(fp)
 80130c4:	10000315 	stw	zero,12(r2)

  return ticks;
 80130c8:	e0bffe17 	ldw	r2,-8(fp)
}
 80130cc:	e037883a 	mov	sp,fp
 80130d0:	dfc00117 	ldw	ra,4(sp)
 80130d4:	df000017 	ldw	fp,0(sp)
 80130d8:	dec00204 	addi	sp,sp,8
 80130dc:	f800283a 	ret

080130e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80130e0:	defffe04 	addi	sp,sp,-8
 80130e4:	dfc00115 	stw	ra,4(sp)
 80130e8:	df000015 	stw	fp,0(sp)
 80130ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80130f0:	d0a01417 	ldw	r2,-32688(gp)
 80130f4:	10000326 	beq	r2,zero,8013104 <alt_get_errno+0x24>
 80130f8:	d0a01417 	ldw	r2,-32688(gp)
 80130fc:	103ee83a 	callr	r2
 8013100:	00000106 	br	8013108 <alt_get_errno+0x28>
 8013104:	d0a70d04 	addi	r2,gp,-25548
}
 8013108:	e037883a 	mov	sp,fp
 801310c:	dfc00117 	ldw	ra,4(sp)
 8013110:	df000017 	ldw	fp,0(sp)
 8013114:	dec00204 	addi	sp,sp,8
 8013118:	f800283a 	ret

0801311c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 801311c:	defff904 	addi	sp,sp,-28
 8013120:	dfc00615 	stw	ra,24(sp)
 8013124:	df000515 	stw	fp,20(sp)
 8013128:	df000504 	addi	fp,sp,20
 801312c:	e13ffd15 	stw	r4,-12(fp)
 8013130:	e17ffe15 	stw	r5,-8(fp)
 8013134:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8013138:	e0bffd17 	ldw	r2,-12(fp)
 801313c:	10000816 	blt	r2,zero,8013160 <write+0x44>
 8013140:	01400304 	movi	r5,12
 8013144:	e13ffd17 	ldw	r4,-12(fp)
 8013148:	80050200 	call	8005020 <__mulsi3>
 801314c:	1007883a 	mov	r3,r2
 8013150:	00820074 	movhi	r2,2049
 8013154:	1097a504 	addi	r2,r2,24212
 8013158:	1885883a 	add	r2,r3,r2
 801315c:	00000106 	br	8013164 <write+0x48>
 8013160:	0005883a 	mov	r2,zero
 8013164:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8013168:	e0bffb17 	ldw	r2,-20(fp)
 801316c:	10002126 	beq	r2,zero,80131f4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8013170:	e0bffb17 	ldw	r2,-20(fp)
 8013174:	10800217 	ldw	r2,8(r2)
 8013178:	108000cc 	andi	r2,r2,3
 801317c:	10001826 	beq	r2,zero,80131e0 <write+0xc4>
 8013180:	e0bffb17 	ldw	r2,-20(fp)
 8013184:	10800017 	ldw	r2,0(r2)
 8013188:	10800617 	ldw	r2,24(r2)
 801318c:	10001426 	beq	r2,zero,80131e0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8013190:	e0bffb17 	ldw	r2,-20(fp)
 8013194:	10800017 	ldw	r2,0(r2)
 8013198:	10800617 	ldw	r2,24(r2)
 801319c:	e0ffff17 	ldw	r3,-4(fp)
 80131a0:	180d883a 	mov	r6,r3
 80131a4:	e17ffe17 	ldw	r5,-8(fp)
 80131a8:	e13ffb17 	ldw	r4,-20(fp)
 80131ac:	103ee83a 	callr	r2
 80131b0:	e0bffc15 	stw	r2,-16(fp)
 80131b4:	e0bffc17 	ldw	r2,-16(fp)
 80131b8:	1000070e 	bge	r2,zero,80131d8 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 80131bc:	80130e00 	call	80130e0 <alt_get_errno>
 80131c0:	1007883a 	mov	r3,r2
 80131c4:	e0bffc17 	ldw	r2,-16(fp)
 80131c8:	0085c83a 	sub	r2,zero,r2
 80131cc:	18800015 	stw	r2,0(r3)
        return -1;
 80131d0:	00bfffc4 	movi	r2,-1
 80131d4:	00000c06 	br	8013208 <write+0xec>
      }
      return rval;
 80131d8:	e0bffc17 	ldw	r2,-16(fp)
 80131dc:	00000a06 	br	8013208 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 80131e0:	80130e00 	call	80130e0 <alt_get_errno>
 80131e4:	1007883a 	mov	r3,r2
 80131e8:	00800344 	movi	r2,13
 80131ec:	18800015 	stw	r2,0(r3)
 80131f0:	00000406 	br	8013204 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 80131f4:	80130e00 	call	80130e0 <alt_get_errno>
 80131f8:	1007883a 	mov	r3,r2
 80131fc:	00801444 	movi	r2,81
 8013200:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8013204:	00bfffc4 	movi	r2,-1
}
 8013208:	e037883a 	mov	sp,fp
 801320c:	dfc00117 	ldw	ra,4(sp)
 8013210:	df000017 	ldw	fp,0(sp)
 8013214:	dec00204 	addi	sp,sp,8
 8013218:	f800283a 	ret

0801321c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 801321c:	defffd04 	addi	sp,sp,-12
 8013220:	dfc00215 	stw	ra,8(sp)
 8013224:	df000115 	stw	fp,4(sp)
 8013228:	df000104 	addi	fp,sp,4
 801322c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8013230:	d1601104 	addi	r5,gp,-32700
 8013234:	e13fff17 	ldw	r4,-4(fp)
 8013238:	80141d00 	call	80141d0 <alt_dev_llist_insert>
}
 801323c:	e037883a 	mov	sp,fp
 8013240:	dfc00117 	ldw	ra,4(sp)
 8013244:	df000017 	ldw	fp,0(sp)
 8013248:	dec00204 	addi	sp,sp,8
 801324c:	f800283a 	ret

08013250 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8013250:	defffd04 	addi	sp,sp,-12
 8013254:	dfc00215 	stw	ra,8(sp)
 8013258:	df000115 	stw	fp,4(sp)
 801325c:	df000104 	addi	fp,sp,4
 8013260:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8013264:	80149d80 	call	80149d8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8013268:	00800044 	movi	r2,1
 801326c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8013270:	0001883a 	nop
 8013274:	e037883a 	mov	sp,fp
 8013278:	dfc00117 	ldw	ra,4(sp)
 801327c:	df000017 	ldw	fp,0(sp)
 8013280:	dec00204 	addi	sp,sp,8
 8013284:	f800283a 	ret

08013288 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8013288:	defffe04 	addi	sp,sp,-8
 801328c:	dfc00115 	stw	ra,4(sp)
 8013290:	df000015 	stw	fp,0(sp)
 8013294:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 8013298:	01c0fa04 	movi	r7,1000
 801329c:	01800084 	movi	r6,2
 80132a0:	000b883a 	mov	r5,zero
 80132a4:	01000074 	movhi	r4,1
 80132a8:	21041004 	addi	r4,r4,4160
 80132ac:	8013fcc0 	call	8013fcc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 80132b0:	01800044 	movi	r6,1
 80132b4:	000b883a 	mov	r5,zero
 80132b8:	01020074 	movhi	r4,2049
 80132bc:	21180f04 	addi	r4,r4,24636
 80132c0:	80134540 	call	8013454 <altera_avalon_jtag_uart_init>
 80132c4:	01020074 	movhi	r4,2049
 80132c8:	21180504 	addi	r4,r4,24596
 80132cc:	801321c0 	call	801321c <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 80132d0:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 80132d4:	0001883a 	nop
}
 80132d8:	0001883a 	nop
 80132dc:	e037883a 	mov	sp,fp
 80132e0:	dfc00117 	ldw	ra,4(sp)
 80132e4:	df000017 	ldw	fp,0(sp)
 80132e8:	dec00204 	addi	sp,sp,8
 80132ec:	f800283a 	ret

080132f0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 80132f0:	defffa04 	addi	sp,sp,-24
 80132f4:	dfc00515 	stw	ra,20(sp)
 80132f8:	df000415 	stw	fp,16(sp)
 80132fc:	df000404 	addi	fp,sp,16
 8013300:	e13ffd15 	stw	r4,-12(fp)
 8013304:	e17ffe15 	stw	r5,-8(fp)
 8013308:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 801330c:	e0bffd17 	ldw	r2,-12(fp)
 8013310:	10800017 	ldw	r2,0(r2)
 8013314:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8013318:	e0bffc17 	ldw	r2,-16(fp)
 801331c:	10c00a04 	addi	r3,r2,40
 8013320:	e0bffd17 	ldw	r2,-12(fp)
 8013324:	10800217 	ldw	r2,8(r2)
 8013328:	100f883a 	mov	r7,r2
 801332c:	e1bfff17 	ldw	r6,-4(fp)
 8013330:	e17ffe17 	ldw	r5,-8(fp)
 8013334:	1809883a 	mov	r4,r3
 8013338:	80139180 	call	8013918 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 801333c:	e037883a 	mov	sp,fp
 8013340:	dfc00117 	ldw	ra,4(sp)
 8013344:	df000017 	ldw	fp,0(sp)
 8013348:	dec00204 	addi	sp,sp,8
 801334c:	f800283a 	ret

08013350 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8013350:	defffa04 	addi	sp,sp,-24
 8013354:	dfc00515 	stw	ra,20(sp)
 8013358:	df000415 	stw	fp,16(sp)
 801335c:	df000404 	addi	fp,sp,16
 8013360:	e13ffd15 	stw	r4,-12(fp)
 8013364:	e17ffe15 	stw	r5,-8(fp)
 8013368:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 801336c:	e0bffd17 	ldw	r2,-12(fp)
 8013370:	10800017 	ldw	r2,0(r2)
 8013374:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8013378:	e0bffc17 	ldw	r2,-16(fp)
 801337c:	10c00a04 	addi	r3,r2,40
 8013380:	e0bffd17 	ldw	r2,-12(fp)
 8013384:	10800217 	ldw	r2,8(r2)
 8013388:	100f883a 	mov	r7,r2
 801338c:	e1bfff17 	ldw	r6,-4(fp)
 8013390:	e17ffe17 	ldw	r5,-8(fp)
 8013394:	1809883a 	mov	r4,r3
 8013398:	8013b340 	call	8013b34 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 801339c:	e037883a 	mov	sp,fp
 80133a0:	dfc00117 	ldw	ra,4(sp)
 80133a4:	df000017 	ldw	fp,0(sp)
 80133a8:	dec00204 	addi	sp,sp,8
 80133ac:	f800283a 	ret

080133b0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 80133b0:	defffc04 	addi	sp,sp,-16
 80133b4:	dfc00315 	stw	ra,12(sp)
 80133b8:	df000215 	stw	fp,8(sp)
 80133bc:	df000204 	addi	fp,sp,8
 80133c0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80133c4:	e0bfff17 	ldw	r2,-4(fp)
 80133c8:	10800017 	ldw	r2,0(r2)
 80133cc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 80133d0:	e0bffe17 	ldw	r2,-8(fp)
 80133d4:	10c00a04 	addi	r3,r2,40
 80133d8:	e0bfff17 	ldw	r2,-4(fp)
 80133dc:	10800217 	ldw	r2,8(r2)
 80133e0:	100b883a 	mov	r5,r2
 80133e4:	1809883a 	mov	r4,r3
 80133e8:	80137c00 	call	80137c0 <altera_avalon_jtag_uart_close>
}
 80133ec:	e037883a 	mov	sp,fp
 80133f0:	dfc00117 	ldw	ra,4(sp)
 80133f4:	df000017 	ldw	fp,0(sp)
 80133f8:	dec00204 	addi	sp,sp,8
 80133fc:	f800283a 	ret

08013400 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8013400:	defffa04 	addi	sp,sp,-24
 8013404:	dfc00515 	stw	ra,20(sp)
 8013408:	df000415 	stw	fp,16(sp)
 801340c:	df000404 	addi	fp,sp,16
 8013410:	e13ffd15 	stw	r4,-12(fp)
 8013414:	e17ffe15 	stw	r5,-8(fp)
 8013418:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 801341c:	e0bffd17 	ldw	r2,-12(fp)
 8013420:	10800017 	ldw	r2,0(r2)
 8013424:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8013428:	e0bffc17 	ldw	r2,-16(fp)
 801342c:	10800a04 	addi	r2,r2,40
 8013430:	e1bfff17 	ldw	r6,-4(fp)
 8013434:	e17ffe17 	ldw	r5,-8(fp)
 8013438:	1009883a 	mov	r4,r2
 801343c:	80138280 	call	8013828 <altera_avalon_jtag_uart_ioctl>
}
 8013440:	e037883a 	mov	sp,fp
 8013444:	dfc00117 	ldw	ra,4(sp)
 8013448:	df000017 	ldw	fp,0(sp)
 801344c:	dec00204 	addi	sp,sp,8
 8013450:	f800283a 	ret

08013454 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8013454:	defffa04 	addi	sp,sp,-24
 8013458:	dfc00515 	stw	ra,20(sp)
 801345c:	df000415 	stw	fp,16(sp)
 8013460:	df000404 	addi	fp,sp,16
 8013464:	e13ffd15 	stw	r4,-12(fp)
 8013468:	e17ffe15 	stw	r5,-8(fp)
 801346c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8013470:	e0bffd17 	ldw	r2,-12(fp)
 8013474:	00c00044 	movi	r3,1
 8013478:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 801347c:	e0bffd17 	ldw	r2,-12(fp)
 8013480:	10800017 	ldw	r2,0(r2)
 8013484:	10800104 	addi	r2,r2,4
 8013488:	1007883a 	mov	r3,r2
 801348c:	e0bffd17 	ldw	r2,-12(fp)
 8013490:	10800817 	ldw	r2,32(r2)
 8013494:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8013498:	e0bffe17 	ldw	r2,-8(fp)
 801349c:	e0ffff17 	ldw	r3,-4(fp)
 80134a0:	d8000015 	stw	zero,0(sp)
 80134a4:	e1fffd17 	ldw	r7,-12(fp)
 80134a8:	01820074 	movhi	r6,2049
 80134ac:	318d4504 	addi	r6,r6,13588
 80134b0:	180b883a 	mov	r5,r3
 80134b4:	1009883a 	mov	r4,r2
 80134b8:	80143540 	call	8014354 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 80134bc:	e0bffd17 	ldw	r2,-12(fp)
 80134c0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 80134c4:	e0bffd17 	ldw	r2,-12(fp)
 80134c8:	10800204 	addi	r2,r2,8
 80134cc:	d0e71b17 	ldw	r3,-25492(gp)
 80134d0:	e1fffd17 	ldw	r7,-12(fp)
 80134d4:	01820074 	movhi	r6,2049
 80134d8:	318dc804 	addi	r6,r6,14112
 80134dc:	180b883a 	mov	r5,r3
 80134e0:	1009883a 	mov	r4,r2
 80134e4:	80140480 	call	8014048 <alt_alarm_start>
 80134e8:	1000040e 	bge	r2,zero,80134fc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 80134ec:	e0fffd17 	ldw	r3,-12(fp)
 80134f0:	00a00034 	movhi	r2,32768
 80134f4:	10bfffc4 	addi	r2,r2,-1
 80134f8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 80134fc:	0001883a 	nop
 8013500:	e037883a 	mov	sp,fp
 8013504:	dfc00117 	ldw	ra,4(sp)
 8013508:	df000017 	ldw	fp,0(sp)
 801350c:	dec00204 	addi	sp,sp,8
 8013510:	f800283a 	ret

08013514 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8013514:	defff804 	addi	sp,sp,-32
 8013518:	df000715 	stw	fp,28(sp)
 801351c:	df000704 	addi	fp,sp,28
 8013520:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8013524:	e0bfff17 	ldw	r2,-4(fp)
 8013528:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 801352c:	e0bffb17 	ldw	r2,-20(fp)
 8013530:	10800017 	ldw	r2,0(r2)
 8013534:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8013538:	e0bffc17 	ldw	r2,-16(fp)
 801353c:	10800104 	addi	r2,r2,4
 8013540:	10800037 	ldwio	r2,0(r2)
 8013544:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8013548:	e0bffd17 	ldw	r2,-12(fp)
 801354c:	1080c00c 	andi	r2,r2,768
 8013550:	10006d26 	beq	r2,zero,8013708 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8013554:	e0bffd17 	ldw	r2,-12(fp)
 8013558:	1080400c 	andi	r2,r2,256
 801355c:	10003526 	beq	r2,zero,8013634 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8013560:	00800074 	movhi	r2,1
 8013564:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8013568:	e0bffb17 	ldw	r2,-20(fp)
 801356c:	10800a17 	ldw	r2,40(r2)
 8013570:	10800044 	addi	r2,r2,1
 8013574:	1081ffcc 	andi	r2,r2,2047
 8013578:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 801357c:	e0bffb17 	ldw	r2,-20(fp)
 8013580:	10c00b17 	ldw	r3,44(r2)
 8013584:	e0bffe17 	ldw	r2,-8(fp)
 8013588:	18801526 	beq	r3,r2,80135e0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 801358c:	e0bffc17 	ldw	r2,-16(fp)
 8013590:	10800037 	ldwio	r2,0(r2)
 8013594:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8013598:	e0bff917 	ldw	r2,-28(fp)
 801359c:	10a0000c 	andi	r2,r2,32768
 80135a0:	10001126 	beq	r2,zero,80135e8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 80135a4:	e0bffb17 	ldw	r2,-20(fp)
 80135a8:	10800a17 	ldw	r2,40(r2)
 80135ac:	e0fff917 	ldw	r3,-28(fp)
 80135b0:	1809883a 	mov	r4,r3
 80135b4:	e0fffb17 	ldw	r3,-20(fp)
 80135b8:	1885883a 	add	r2,r3,r2
 80135bc:	10800e04 	addi	r2,r2,56
 80135c0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80135c4:	e0bffb17 	ldw	r2,-20(fp)
 80135c8:	10800a17 	ldw	r2,40(r2)
 80135cc:	10800044 	addi	r2,r2,1
 80135d0:	10c1ffcc 	andi	r3,r2,2047
 80135d4:	e0bffb17 	ldw	r2,-20(fp)
 80135d8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 80135dc:	003fe206 	br	8013568 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 80135e0:	0001883a 	nop
 80135e4:	00000106 	br	80135ec <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 80135e8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 80135ec:	e0bff917 	ldw	r2,-28(fp)
 80135f0:	10bfffec 	andhi	r2,r2,65535
 80135f4:	10000f26 	beq	r2,zero,8013634 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80135f8:	e0bffb17 	ldw	r2,-20(fp)
 80135fc:	10c00817 	ldw	r3,32(r2)
 8013600:	00bfff84 	movi	r2,-2
 8013604:	1886703a 	and	r3,r3,r2
 8013608:	e0bffb17 	ldw	r2,-20(fp)
 801360c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8013610:	e0bffc17 	ldw	r2,-16(fp)
 8013614:	10800104 	addi	r2,r2,4
 8013618:	1007883a 	mov	r3,r2
 801361c:	e0bffb17 	ldw	r2,-20(fp)
 8013620:	10800817 	ldw	r2,32(r2)
 8013624:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8013628:	e0bffc17 	ldw	r2,-16(fp)
 801362c:	10800104 	addi	r2,r2,4
 8013630:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8013634:	e0bffd17 	ldw	r2,-12(fp)
 8013638:	1080800c 	andi	r2,r2,512
 801363c:	103fbe26 	beq	r2,zero,8013538 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8013640:	e0bffd17 	ldw	r2,-12(fp)
 8013644:	1004d43a 	srli	r2,r2,16
 8013648:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 801364c:	00001406 	br	80136a0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8013650:	e0bffc17 	ldw	r2,-16(fp)
 8013654:	e0fffb17 	ldw	r3,-20(fp)
 8013658:	18c00d17 	ldw	r3,52(r3)
 801365c:	e13ffb17 	ldw	r4,-20(fp)
 8013660:	20c7883a 	add	r3,r4,r3
 8013664:	18c20e04 	addi	r3,r3,2104
 8013668:	18c00003 	ldbu	r3,0(r3)
 801366c:	18c03fcc 	andi	r3,r3,255
 8013670:	18c0201c 	xori	r3,r3,128
 8013674:	18ffe004 	addi	r3,r3,-128
 8013678:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801367c:	e0bffb17 	ldw	r2,-20(fp)
 8013680:	10800d17 	ldw	r2,52(r2)
 8013684:	10800044 	addi	r2,r2,1
 8013688:	10c1ffcc 	andi	r3,r2,2047
 801368c:	e0bffb17 	ldw	r2,-20(fp)
 8013690:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8013694:	e0bffa17 	ldw	r2,-24(fp)
 8013698:	10bfffc4 	addi	r2,r2,-1
 801369c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 80136a0:	e0bffa17 	ldw	r2,-24(fp)
 80136a4:	10000526 	beq	r2,zero,80136bc <altera_avalon_jtag_uart_irq+0x1a8>
 80136a8:	e0bffb17 	ldw	r2,-20(fp)
 80136ac:	10c00d17 	ldw	r3,52(r2)
 80136b0:	e0bffb17 	ldw	r2,-20(fp)
 80136b4:	10800c17 	ldw	r2,48(r2)
 80136b8:	18bfe51e 	bne	r3,r2,8013650 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 80136bc:	e0bffa17 	ldw	r2,-24(fp)
 80136c0:	103f9d26 	beq	r2,zero,8013538 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80136c4:	e0bffb17 	ldw	r2,-20(fp)
 80136c8:	10c00817 	ldw	r3,32(r2)
 80136cc:	00bfff44 	movi	r2,-3
 80136d0:	1886703a 	and	r3,r3,r2
 80136d4:	e0bffb17 	ldw	r2,-20(fp)
 80136d8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80136dc:	e0bffb17 	ldw	r2,-20(fp)
 80136e0:	10800017 	ldw	r2,0(r2)
 80136e4:	10800104 	addi	r2,r2,4
 80136e8:	1007883a 	mov	r3,r2
 80136ec:	e0bffb17 	ldw	r2,-20(fp)
 80136f0:	10800817 	ldw	r2,32(r2)
 80136f4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80136f8:	e0bffc17 	ldw	r2,-16(fp)
 80136fc:	10800104 	addi	r2,r2,4
 8013700:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8013704:	003f8c06 	br	8013538 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 8013708:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 801370c:	0001883a 	nop
 8013710:	e037883a 	mov	sp,fp
 8013714:	df000017 	ldw	fp,0(sp)
 8013718:	dec00104 	addi	sp,sp,4
 801371c:	f800283a 	ret

08013720 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8013720:	defff804 	addi	sp,sp,-32
 8013724:	df000715 	stw	fp,28(sp)
 8013728:	df000704 	addi	fp,sp,28
 801372c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8013730:	e0bffb17 	ldw	r2,-20(fp)
 8013734:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8013738:	e0bff917 	ldw	r2,-28(fp)
 801373c:	10800017 	ldw	r2,0(r2)
 8013740:	10800104 	addi	r2,r2,4
 8013744:	10800037 	ldwio	r2,0(r2)
 8013748:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 801374c:	e0bffa17 	ldw	r2,-24(fp)
 8013750:	1081000c 	andi	r2,r2,1024
 8013754:	10000b26 	beq	r2,zero,8013784 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8013758:	e0bff917 	ldw	r2,-28(fp)
 801375c:	10800017 	ldw	r2,0(r2)
 8013760:	10800104 	addi	r2,r2,4
 8013764:	1007883a 	mov	r3,r2
 8013768:	e0bff917 	ldw	r2,-28(fp)
 801376c:	10800817 	ldw	r2,32(r2)
 8013770:	10810014 	ori	r2,r2,1024
 8013774:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8013778:	e0bff917 	ldw	r2,-28(fp)
 801377c:	10000915 	stw	zero,36(r2)
 8013780:	00000a06 	br	80137ac <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8013784:	e0bff917 	ldw	r2,-28(fp)
 8013788:	10c00917 	ldw	r3,36(r2)
 801378c:	00a00034 	movhi	r2,32768
 8013790:	10bfff04 	addi	r2,r2,-4
 8013794:	10c00536 	bltu	r2,r3,80137ac <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8013798:	e0bff917 	ldw	r2,-28(fp)
 801379c:	10800917 	ldw	r2,36(r2)
 80137a0:	10c00044 	addi	r3,r2,1
 80137a4:	e0bff917 	ldw	r2,-28(fp)
 80137a8:	10c00915 	stw	r3,36(r2)
 80137ac:	d0a71b17 	ldw	r2,-25492(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 80137b0:	e037883a 	mov	sp,fp
 80137b4:	df000017 	ldw	fp,0(sp)
 80137b8:	dec00104 	addi	sp,sp,4
 80137bc:	f800283a 	ret

080137c0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 80137c0:	defffd04 	addi	sp,sp,-12
 80137c4:	df000215 	stw	fp,8(sp)
 80137c8:	df000204 	addi	fp,sp,8
 80137cc:	e13ffe15 	stw	r4,-8(fp)
 80137d0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80137d4:	00000506 	br	80137ec <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 80137d8:	e0bfff17 	ldw	r2,-4(fp)
 80137dc:	1090000c 	andi	r2,r2,16384
 80137e0:	10000226 	beq	r2,zero,80137ec <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 80137e4:	00bffd44 	movi	r2,-11
 80137e8:	00000b06 	br	8013818 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80137ec:	e0bffe17 	ldw	r2,-8(fp)
 80137f0:	10c00d17 	ldw	r3,52(r2)
 80137f4:	e0bffe17 	ldw	r2,-8(fp)
 80137f8:	10800c17 	ldw	r2,48(r2)
 80137fc:	18800526 	beq	r3,r2,8013814 <altera_avalon_jtag_uart_close+0x54>
 8013800:	e0bffe17 	ldw	r2,-8(fp)
 8013804:	10c00917 	ldw	r3,36(r2)
 8013808:	e0bffe17 	ldw	r2,-8(fp)
 801380c:	10800117 	ldw	r2,4(r2)
 8013810:	18bff136 	bltu	r3,r2,80137d8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8013814:	0005883a 	mov	r2,zero
}
 8013818:	e037883a 	mov	sp,fp
 801381c:	df000017 	ldw	fp,0(sp)
 8013820:	dec00104 	addi	sp,sp,4
 8013824:	f800283a 	ret

08013828 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8013828:	defffa04 	addi	sp,sp,-24
 801382c:	df000515 	stw	fp,20(sp)
 8013830:	df000504 	addi	fp,sp,20
 8013834:	e13ffd15 	stw	r4,-12(fp)
 8013838:	e17ffe15 	stw	r5,-8(fp)
 801383c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8013840:	00bff9c4 	movi	r2,-25
 8013844:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8013848:	e0bffe17 	ldw	r2,-8(fp)
 801384c:	10da8060 	cmpeqi	r3,r2,27137
 8013850:	1800031e 	bne	r3,zero,8013860 <altera_avalon_jtag_uart_ioctl+0x38>
 8013854:	109a80a0 	cmpeqi	r2,r2,27138
 8013858:	1000181e 	bne	r2,zero,80138bc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 801385c:	00002906 	br	8013904 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8013860:	e0bffd17 	ldw	r2,-12(fp)
 8013864:	10c00117 	ldw	r3,4(r2)
 8013868:	00a00034 	movhi	r2,32768
 801386c:	10bfffc4 	addi	r2,r2,-1
 8013870:	18802126 	beq	r3,r2,80138f8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 8013874:	e0bfff17 	ldw	r2,-4(fp)
 8013878:	10800017 	ldw	r2,0(r2)
 801387c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8013880:	e0bffc17 	ldw	r2,-16(fp)
 8013884:	10800090 	cmplti	r2,r2,2
 8013888:	1000061e 	bne	r2,zero,80138a4 <altera_avalon_jtag_uart_ioctl+0x7c>
 801388c:	e0fffc17 	ldw	r3,-16(fp)
 8013890:	00a00034 	movhi	r2,32768
 8013894:	10bfffc4 	addi	r2,r2,-1
 8013898:	18800226 	beq	r3,r2,80138a4 <altera_avalon_jtag_uart_ioctl+0x7c>
 801389c:	e0bffc17 	ldw	r2,-16(fp)
 80138a0:	00000206 	br	80138ac <altera_avalon_jtag_uart_ioctl+0x84>
 80138a4:	00a00034 	movhi	r2,32768
 80138a8:	10bfff84 	addi	r2,r2,-2
 80138ac:	e0fffd17 	ldw	r3,-12(fp)
 80138b0:	18800115 	stw	r2,4(r3)
      rc = 0;
 80138b4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80138b8:	00000f06 	br	80138f8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 80138bc:	e0bffd17 	ldw	r2,-12(fp)
 80138c0:	10c00117 	ldw	r3,4(r2)
 80138c4:	00a00034 	movhi	r2,32768
 80138c8:	10bfffc4 	addi	r2,r2,-1
 80138cc:	18800c26 	beq	r3,r2,8013900 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 80138d0:	e0bffd17 	ldw	r2,-12(fp)
 80138d4:	10c00917 	ldw	r3,36(r2)
 80138d8:	e0bffd17 	ldw	r2,-12(fp)
 80138dc:	10800117 	ldw	r2,4(r2)
 80138e0:	1885803a 	cmpltu	r2,r3,r2
 80138e4:	10c03fcc 	andi	r3,r2,255
 80138e8:	e0bfff17 	ldw	r2,-4(fp)
 80138ec:	10c00015 	stw	r3,0(r2)
      rc = 0;
 80138f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80138f4:	00000206 	br	8013900 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 80138f8:	0001883a 	nop
 80138fc:	00000106 	br	8013904 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 8013900:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8013904:	e0bffb17 	ldw	r2,-20(fp)
}
 8013908:	e037883a 	mov	sp,fp
 801390c:	df000017 	ldw	fp,0(sp)
 8013910:	dec00104 	addi	sp,sp,4
 8013914:	f800283a 	ret

08013918 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8013918:	defff304 	addi	sp,sp,-52
 801391c:	dfc00c15 	stw	ra,48(sp)
 8013920:	df000b15 	stw	fp,44(sp)
 8013924:	df000b04 	addi	fp,sp,44
 8013928:	e13ffc15 	stw	r4,-16(fp)
 801392c:	e17ffd15 	stw	r5,-12(fp)
 8013930:	e1bffe15 	stw	r6,-8(fp)
 8013934:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8013938:	e0bffd17 	ldw	r2,-12(fp)
 801393c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8013940:	00004706 	br	8013a60 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8013944:	e0bffc17 	ldw	r2,-16(fp)
 8013948:	10800a17 	ldw	r2,40(r2)
 801394c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8013950:	e0bffc17 	ldw	r2,-16(fp)
 8013954:	10800b17 	ldw	r2,44(r2)
 8013958:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 801395c:	e0fff717 	ldw	r3,-36(fp)
 8013960:	e0bff817 	ldw	r2,-32(fp)
 8013964:	18800536 	bltu	r3,r2,801397c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8013968:	e0fff717 	ldw	r3,-36(fp)
 801396c:	e0bff817 	ldw	r2,-32(fp)
 8013970:	1885c83a 	sub	r2,r3,r2
 8013974:	e0bff615 	stw	r2,-40(fp)
 8013978:	00000406 	br	801398c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 801397c:	00c20004 	movi	r3,2048
 8013980:	e0bff817 	ldw	r2,-32(fp)
 8013984:	1885c83a 	sub	r2,r3,r2
 8013988:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 801398c:	e0bff617 	ldw	r2,-40(fp)
 8013990:	10001e26 	beq	r2,zero,8013a0c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8013994:	e0fffe17 	ldw	r3,-8(fp)
 8013998:	e0bff617 	ldw	r2,-40(fp)
 801399c:	1880022e 	bgeu	r3,r2,80139a8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 80139a0:	e0bffe17 	ldw	r2,-8(fp)
 80139a4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 80139a8:	e0bffc17 	ldw	r2,-16(fp)
 80139ac:	10c00e04 	addi	r3,r2,56
 80139b0:	e0bff817 	ldw	r2,-32(fp)
 80139b4:	1885883a 	add	r2,r3,r2
 80139b8:	e1bff617 	ldw	r6,-40(fp)
 80139bc:	100b883a 	mov	r5,r2
 80139c0:	e13ff517 	ldw	r4,-44(fp)
 80139c4:	8005ad80 	call	8005ad8 <memcpy>
      ptr   += n;
 80139c8:	e0fff517 	ldw	r3,-44(fp)
 80139cc:	e0bff617 	ldw	r2,-40(fp)
 80139d0:	1885883a 	add	r2,r3,r2
 80139d4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 80139d8:	e0fffe17 	ldw	r3,-8(fp)
 80139dc:	e0bff617 	ldw	r2,-40(fp)
 80139e0:	1885c83a 	sub	r2,r3,r2
 80139e4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80139e8:	e0fff817 	ldw	r3,-32(fp)
 80139ec:	e0bff617 	ldw	r2,-40(fp)
 80139f0:	1885883a 	add	r2,r3,r2
 80139f4:	10c1ffcc 	andi	r3,r2,2047
 80139f8:	e0bffc17 	ldw	r2,-16(fp)
 80139fc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8013a00:	e0bffe17 	ldw	r2,-8(fp)
 8013a04:	00bfcf16 	blt	zero,r2,8013944 <altera_avalon_jtag_uart_read+0x2c>
 8013a08:	00000106 	br	8013a10 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 8013a0c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 8013a10:	e0fff517 	ldw	r3,-44(fp)
 8013a14:	e0bffd17 	ldw	r2,-12(fp)
 8013a18:	1880141e 	bne	r3,r2,8013a6c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8013a1c:	e0bfff17 	ldw	r2,-4(fp)
 8013a20:	1090000c 	andi	r2,r2,16384
 8013a24:	1000131e 	bne	r2,zero,8013a74 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8013a28:	0001883a 	nop
 8013a2c:	e0bffc17 	ldw	r2,-16(fp)
 8013a30:	10c00a17 	ldw	r3,40(r2)
 8013a34:	e0bff717 	ldw	r2,-36(fp)
 8013a38:	1880051e 	bne	r3,r2,8013a50 <altera_avalon_jtag_uart_read+0x138>
 8013a3c:	e0bffc17 	ldw	r2,-16(fp)
 8013a40:	10c00917 	ldw	r3,36(r2)
 8013a44:	e0bffc17 	ldw	r2,-16(fp)
 8013a48:	10800117 	ldw	r2,4(r2)
 8013a4c:	18bff736 	bltu	r3,r2,8013a2c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8013a50:	e0bffc17 	ldw	r2,-16(fp)
 8013a54:	10c00a17 	ldw	r3,40(r2)
 8013a58:	e0bff717 	ldw	r2,-36(fp)
 8013a5c:	18800726 	beq	r3,r2,8013a7c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8013a60:	e0bffe17 	ldw	r2,-8(fp)
 8013a64:	00bfb716 	blt	zero,r2,8013944 <altera_avalon_jtag_uart_read+0x2c>
 8013a68:	00000506 	br	8013a80 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8013a6c:	0001883a 	nop
 8013a70:	00000306 	br	8013a80 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 8013a74:	0001883a 	nop
 8013a78:	00000106 	br	8013a80 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8013a7c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8013a80:	e0fff517 	ldw	r3,-44(fp)
 8013a84:	e0bffd17 	ldw	r2,-12(fp)
 8013a88:	18801826 	beq	r3,r2,8013aec <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013a8c:	0005303a 	rdctl	r2,status
 8013a90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013a94:	e0fffb17 	ldw	r3,-20(fp)
 8013a98:	00bfff84 	movi	r2,-2
 8013a9c:	1884703a 	and	r2,r3,r2
 8013aa0:	1001703a 	wrctl	status,r2
  
  return context;
 8013aa4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8013aa8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8013aac:	e0bffc17 	ldw	r2,-16(fp)
 8013ab0:	10800817 	ldw	r2,32(r2)
 8013ab4:	10c00054 	ori	r3,r2,1
 8013ab8:	e0bffc17 	ldw	r2,-16(fp)
 8013abc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8013ac0:	e0bffc17 	ldw	r2,-16(fp)
 8013ac4:	10800017 	ldw	r2,0(r2)
 8013ac8:	10800104 	addi	r2,r2,4
 8013acc:	1007883a 	mov	r3,r2
 8013ad0:	e0bffc17 	ldw	r2,-16(fp)
 8013ad4:	10800817 	ldw	r2,32(r2)
 8013ad8:	18800035 	stwio	r2,0(r3)
 8013adc:	e0bffa17 	ldw	r2,-24(fp)
 8013ae0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013ae4:	e0bff917 	ldw	r2,-28(fp)
 8013ae8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8013aec:	e0fff517 	ldw	r3,-44(fp)
 8013af0:	e0bffd17 	ldw	r2,-12(fp)
 8013af4:	18800426 	beq	r3,r2,8013b08 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 8013af8:	e0fff517 	ldw	r3,-44(fp)
 8013afc:	e0bffd17 	ldw	r2,-12(fp)
 8013b00:	1885c83a 	sub	r2,r3,r2
 8013b04:	00000606 	br	8013b20 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 8013b08:	e0bfff17 	ldw	r2,-4(fp)
 8013b0c:	1090000c 	andi	r2,r2,16384
 8013b10:	10000226 	beq	r2,zero,8013b1c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8013b14:	00bffd44 	movi	r2,-11
 8013b18:	00000106 	br	8013b20 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 8013b1c:	00bffec4 	movi	r2,-5
}
 8013b20:	e037883a 	mov	sp,fp
 8013b24:	dfc00117 	ldw	ra,4(sp)
 8013b28:	df000017 	ldw	fp,0(sp)
 8013b2c:	dec00204 	addi	sp,sp,8
 8013b30:	f800283a 	ret

08013b34 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8013b34:	defff304 	addi	sp,sp,-52
 8013b38:	dfc00c15 	stw	ra,48(sp)
 8013b3c:	df000b15 	stw	fp,44(sp)
 8013b40:	df000b04 	addi	fp,sp,44
 8013b44:	e13ffc15 	stw	r4,-16(fp)
 8013b48:	e17ffd15 	stw	r5,-12(fp)
 8013b4c:	e1bffe15 	stw	r6,-8(fp)
 8013b50:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8013b54:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8013b58:	e0bffd17 	ldw	r2,-12(fp)
 8013b5c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8013b60:	00003706 	br	8013c40 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8013b64:	e0bffc17 	ldw	r2,-16(fp)
 8013b68:	10800c17 	ldw	r2,48(r2)
 8013b6c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 8013b70:	e0bffc17 	ldw	r2,-16(fp)
 8013b74:	10800d17 	ldw	r2,52(r2)
 8013b78:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8013b7c:	e0fff917 	ldw	r3,-28(fp)
 8013b80:	e0bff517 	ldw	r2,-44(fp)
 8013b84:	1880062e 	bgeu	r3,r2,8013ba0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8013b88:	e0fff517 	ldw	r3,-44(fp)
 8013b8c:	e0bff917 	ldw	r2,-28(fp)
 8013b90:	1885c83a 	sub	r2,r3,r2
 8013b94:	10bfffc4 	addi	r2,r2,-1
 8013b98:	e0bff615 	stw	r2,-40(fp)
 8013b9c:	00000b06 	br	8013bcc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8013ba0:	e0bff517 	ldw	r2,-44(fp)
 8013ba4:	10000526 	beq	r2,zero,8013bbc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8013ba8:	00c20004 	movi	r3,2048
 8013bac:	e0bff917 	ldw	r2,-28(fp)
 8013bb0:	1885c83a 	sub	r2,r3,r2
 8013bb4:	e0bff615 	stw	r2,-40(fp)
 8013bb8:	00000406 	br	8013bcc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8013bbc:	00c1ffc4 	movi	r3,2047
 8013bc0:	e0bff917 	ldw	r2,-28(fp)
 8013bc4:	1885c83a 	sub	r2,r3,r2
 8013bc8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8013bcc:	e0bff617 	ldw	r2,-40(fp)
 8013bd0:	10001e26 	beq	r2,zero,8013c4c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8013bd4:	e0fffe17 	ldw	r3,-8(fp)
 8013bd8:	e0bff617 	ldw	r2,-40(fp)
 8013bdc:	1880022e 	bgeu	r3,r2,8013be8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8013be0:	e0bffe17 	ldw	r2,-8(fp)
 8013be4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8013be8:	e0bffc17 	ldw	r2,-16(fp)
 8013bec:	10c20e04 	addi	r3,r2,2104
 8013bf0:	e0bff917 	ldw	r2,-28(fp)
 8013bf4:	1885883a 	add	r2,r3,r2
 8013bf8:	e1bff617 	ldw	r6,-40(fp)
 8013bfc:	e17ffd17 	ldw	r5,-12(fp)
 8013c00:	1009883a 	mov	r4,r2
 8013c04:	8005ad80 	call	8005ad8 <memcpy>
      ptr   += n;
 8013c08:	e0fffd17 	ldw	r3,-12(fp)
 8013c0c:	e0bff617 	ldw	r2,-40(fp)
 8013c10:	1885883a 	add	r2,r3,r2
 8013c14:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8013c18:	e0fffe17 	ldw	r3,-8(fp)
 8013c1c:	e0bff617 	ldw	r2,-40(fp)
 8013c20:	1885c83a 	sub	r2,r3,r2
 8013c24:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8013c28:	e0fff917 	ldw	r3,-28(fp)
 8013c2c:	e0bff617 	ldw	r2,-40(fp)
 8013c30:	1885883a 	add	r2,r3,r2
 8013c34:	10c1ffcc 	andi	r3,r2,2047
 8013c38:	e0bffc17 	ldw	r2,-16(fp)
 8013c3c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8013c40:	e0bffe17 	ldw	r2,-8(fp)
 8013c44:	00bfc716 	blt	zero,r2,8013b64 <altera_avalon_jtag_uart_write+0x30>
 8013c48:	00000106 	br	8013c50 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8013c4c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013c50:	0005303a 	rdctl	r2,status
 8013c54:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013c58:	e0fffb17 	ldw	r3,-20(fp)
 8013c5c:	00bfff84 	movi	r2,-2
 8013c60:	1884703a 	and	r2,r3,r2
 8013c64:	1001703a 	wrctl	status,r2
  
  return context;
 8013c68:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8013c6c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8013c70:	e0bffc17 	ldw	r2,-16(fp)
 8013c74:	10800817 	ldw	r2,32(r2)
 8013c78:	10c00094 	ori	r3,r2,2
 8013c7c:	e0bffc17 	ldw	r2,-16(fp)
 8013c80:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8013c84:	e0bffc17 	ldw	r2,-16(fp)
 8013c88:	10800017 	ldw	r2,0(r2)
 8013c8c:	10800104 	addi	r2,r2,4
 8013c90:	1007883a 	mov	r3,r2
 8013c94:	e0bffc17 	ldw	r2,-16(fp)
 8013c98:	10800817 	ldw	r2,32(r2)
 8013c9c:	18800035 	stwio	r2,0(r3)
 8013ca0:	e0bffa17 	ldw	r2,-24(fp)
 8013ca4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013ca8:	e0bff817 	ldw	r2,-32(fp)
 8013cac:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8013cb0:	e0bffe17 	ldw	r2,-8(fp)
 8013cb4:	0080100e 	bge	zero,r2,8013cf8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8013cb8:	e0bfff17 	ldw	r2,-4(fp)
 8013cbc:	1090000c 	andi	r2,r2,16384
 8013cc0:	1000101e 	bne	r2,zero,8013d04 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8013cc4:	0001883a 	nop
 8013cc8:	e0bffc17 	ldw	r2,-16(fp)
 8013ccc:	10c00d17 	ldw	r3,52(r2)
 8013cd0:	e0bff517 	ldw	r2,-44(fp)
 8013cd4:	1880051e 	bne	r3,r2,8013cec <altera_avalon_jtag_uart_write+0x1b8>
 8013cd8:	e0bffc17 	ldw	r2,-16(fp)
 8013cdc:	10c00917 	ldw	r3,36(r2)
 8013ce0:	e0bffc17 	ldw	r2,-16(fp)
 8013ce4:	10800117 	ldw	r2,4(r2)
 8013ce8:	18bff736 	bltu	r3,r2,8013cc8 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8013cec:	e0bffc17 	ldw	r2,-16(fp)
 8013cf0:	10800917 	ldw	r2,36(r2)
 8013cf4:	1000051e 	bne	r2,zero,8013d0c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8013cf8:	e0bffe17 	ldw	r2,-8(fp)
 8013cfc:	00bfd016 	blt	zero,r2,8013c40 <altera_avalon_jtag_uart_write+0x10c>
 8013d00:	00000306 	br	8013d10 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8013d04:	0001883a 	nop
 8013d08:	00000106 	br	8013d10 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8013d0c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8013d10:	e0fffd17 	ldw	r3,-12(fp)
 8013d14:	e0bff717 	ldw	r2,-36(fp)
 8013d18:	18800426 	beq	r3,r2,8013d2c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8013d1c:	e0fffd17 	ldw	r3,-12(fp)
 8013d20:	e0bff717 	ldw	r2,-36(fp)
 8013d24:	1885c83a 	sub	r2,r3,r2
 8013d28:	00000606 	br	8013d44 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8013d2c:	e0bfff17 	ldw	r2,-4(fp)
 8013d30:	1090000c 	andi	r2,r2,16384
 8013d34:	10000226 	beq	r2,zero,8013d40 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8013d38:	00bffd44 	movi	r2,-11
 8013d3c:	00000106 	br	8013d44 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8013d40:	00bffec4 	movi	r2,-5
}
 8013d44:	e037883a 	mov	sp,fp
 8013d48:	dfc00117 	ldw	ra,4(sp)
 8013d4c:	df000017 	ldw	fp,0(sp)
 8013d50:	dec00204 	addi	sp,sp,8
 8013d54:	f800283a 	ret

08013d58 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 8013d58:	defff404 	addi	sp,sp,-48
 8013d5c:	df000b15 	stw	fp,44(sp)
 8013d60:	df000b04 	addi	fp,sp,44
 8013d64:	e13ffc15 	stw	r4,-16(fp)
 8013d68:	e17ffd15 	stw	r5,-12(fp)
 8013d6c:	e1bffe15 	stw	r6,-8(fp)
 8013d70:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 8013d74:	e0ffff17 	ldw	r3,-4(fp)
 8013d78:	e0bffe17 	ldw	r2,-8(fp)
 8013d7c:	1885883a 	add	r2,r3,r2
 8013d80:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 8013d84:	e0c00217 	ldw	r3,8(fp)
 8013d88:	e0800117 	ldw	r2,4(fp)
 8013d8c:	1885883a 	add	r2,r3,r2
 8013d90:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 8013d94:	e0800117 	ldw	r2,4(fp)
 8013d98:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 8013d9c:	e0bffe17 	ldw	r2,-8(fp)
 8013da0:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 8013da4:	00800044 	movi	r2,1
 8013da8:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 8013dac:	e0bffc17 	ldw	r2,-16(fp)
 8013db0:	10800504 	addi	r2,r2,20
 8013db4:	1009883a 	mov	r4,r2
 8013db8:	00c00044 	movi	r3,1
 8013dbc:	e0bffd17 	ldw	r2,-12(fp)
 8013dc0:	1884983a 	sll	r2,r3,r2
 8013dc4:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 8013dc8:	e0800317 	ldw	r2,12(fp)
 8013dcc:	1080008c 	andi	r2,r2,2
 8013dd0:	1000051e 	bne	r2,zero,8013de8 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 8013dd4:	e0bffc17 	ldw	r2,-16(fp)
 8013dd8:	10800304 	addi	r2,r2,12
 8013ddc:	1007883a 	mov	r3,r2
 8013de0:	00810004 	movi	r2,1024
 8013de4:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 8013de8:	e0bffc17 	ldw	r2,-16(fp)
 8013dec:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 8013df0:	e0bffc17 	ldw	r2,-16(fp)
 8013df4:	10800204 	addi	r2,r2,8
 8013df8:	10800037 	ldwio	r2,0(r2)
 8013dfc:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 8013e00:	e0bffa17 	ldw	r2,-24(fp)
 8013e04:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 8013e08:	10000226 	beq	r2,zero,8013e14 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 8013e0c:	e0bff717 	ldw	r2,-36(fp)
 8013e10:	1000031e 	bne	r2,zero,8013e20 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 8013e14:	e0bffa17 	ldw	r2,-24(fp)
 8013e18:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 8013e1c:	103ff426 	beq	r2,zero,8013df0 <alt_avalon_spi_command+0x98>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 8013e20:	e0bffa17 	ldw	r2,-24(fp)
 8013e24:	1080100c 	andi	r2,r2,64
 8013e28:	10001e26 	beq	r2,zero,8013ea4 <alt_avalon_spi_command+0x14c>
 8013e2c:	e0bff717 	ldw	r2,-36(fp)
 8013e30:	00801c0e 	bge	zero,r2,8013ea4 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 8013e34:	e0bff717 	ldw	r2,-36(fp)
 8013e38:	10bfffc4 	addi	r2,r2,-1
 8013e3c:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 8013e40:	e0ffff17 	ldw	r3,-4(fp)
 8013e44:	e0bff817 	ldw	r2,-32(fp)
 8013e48:	18800a2e 	bgeu	r3,r2,8013e74 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 8013e4c:	e0bffc17 	ldw	r2,-16(fp)
 8013e50:	10800104 	addi	r2,r2,4
 8013e54:	1009883a 	mov	r4,r2
 8013e58:	e0bfff17 	ldw	r2,-4(fp)
 8013e5c:	10c00044 	addi	r3,r2,1
 8013e60:	e0ffff15 	stw	r3,-4(fp)
 8013e64:	10800003 	ldbu	r2,0(r2)
 8013e68:	10803fcc 	andi	r2,r2,255
 8013e6c:	20800035 	stwio	r2,0(r4)
 8013e70:	00000c06 	br	8013ea4 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 8013e74:	e0bff517 	ldw	r2,-44(fp)
 8013e78:	10000826 	beq	r2,zero,8013e9c <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 8013e7c:	e0bff517 	ldw	r2,-44(fp)
 8013e80:	10bfffc4 	addi	r2,r2,-1
 8013e84:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 8013e88:	e0bffc17 	ldw	r2,-16(fp)
 8013e8c:	10800104 	addi	r2,r2,4
 8013e90:	0007883a 	mov	r3,zero
 8013e94:	10c00035 	stwio	r3,0(r2)
 8013e98:	00000206 	br	8013ea4 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 8013e9c:	00bf0004 	movi	r2,-1024
 8013ea0:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 8013ea4:	e0bffa17 	ldw	r2,-24(fp)
 8013ea8:	1080200c 	andi	r2,r2,128
 8013eac:	103fd026 	beq	r2,zero,8013df0 <alt_avalon_spi_command+0x98>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 8013eb0:	e0bffc17 	ldw	r2,-16(fp)
 8013eb4:	10800037 	ldwio	r2,0(r2)
 8013eb8:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 8013ebc:	e0bff617 	ldw	r2,-40(fp)
 8013ec0:	10000426 	beq	r2,zero,8013ed4 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 8013ec4:	e0bff617 	ldw	r2,-40(fp)
 8013ec8:	10bfffc4 	addi	r2,r2,-1
 8013ecc:	e0bff615 	stw	r2,-40(fp)
 8013ed0:	00000506 	br	8013ee8 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 8013ed4:	e0800217 	ldw	r2,8(fp)
 8013ed8:	10c00044 	addi	r3,r2,1
 8013edc:	e0c00215 	stw	r3,8(fp)
 8013ee0:	e0fffb17 	ldw	r3,-20(fp)
 8013ee4:	10c00005 	stb	r3,0(r2)
      credits++;
 8013ee8:	e0bff717 	ldw	r2,-36(fp)
 8013eec:	10800044 	addi	r2,r2,1
 8013ef0:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 8013ef4:	e0bff617 	ldw	r2,-40(fp)
 8013ef8:	103fbd1e 	bne	r2,zero,8013df0 <alt_avalon_spi_command+0x98>
 8013efc:	e0c00217 	ldw	r3,8(fp)
 8013f00:	e0bff917 	ldw	r2,-28(fp)
 8013f04:	18bfba1e 	bne	r3,r2,8013df0 <alt_avalon_spi_command+0x98>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 8013f08:	e0bffc17 	ldw	r2,-16(fp)
 8013f0c:	10800204 	addi	r2,r2,8
 8013f10:	10800037 	ldwio	r2,0(r2)
 8013f14:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 8013f18:	e0bffa17 	ldw	r2,-24(fp)
 8013f1c:	1080080c 	andi	r2,r2,32
 8013f20:	103ff926 	beq	r2,zero,8013f08 <alt_avalon_spi_command+0x1b0>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 8013f24:	e0800317 	ldw	r2,12(fp)
 8013f28:	1080004c 	andi	r2,r2,1
 8013f2c:	1000041e 	bne	r2,zero,8013f40 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 8013f30:	e0bffc17 	ldw	r2,-16(fp)
 8013f34:	10800304 	addi	r2,r2,12
 8013f38:	0007883a 	mov	r3,zero
 8013f3c:	10c00035 	stwio	r3,0(r2)

  return read_length;
 8013f40:	e0800117 	ldw	r2,4(fp)
}
 8013f44:	e037883a 	mov	sp,fp
 8013f48:	df000017 	ldw	fp,0(sp)
 8013f4c:	dec00104 	addi	sp,sp,4
 8013f50:	f800283a 	ret

08013f54 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8013f54:	defffa04 	addi	sp,sp,-24
 8013f58:	dfc00515 	stw	ra,20(sp)
 8013f5c:	df000415 	stw	fp,16(sp)
 8013f60:	df000404 	addi	fp,sp,16
 8013f64:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8013f68:	0007883a 	mov	r3,zero
 8013f6c:	e0bfff17 	ldw	r2,-4(fp)
 8013f70:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8013f74:	e0bfff17 	ldw	r2,-4(fp)
 8013f78:	10800104 	addi	r2,r2,4
 8013f7c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013f80:	0005303a 	rdctl	r2,status
 8013f84:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013f88:	e0fffd17 	ldw	r3,-12(fp)
 8013f8c:	00bfff84 	movi	r2,-2
 8013f90:	1884703a 	and	r2,r3,r2
 8013f94:	1001703a 	wrctl	status,r2
  
  return context;
 8013f98:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8013f9c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8013fa0:	8012f240 	call	8012f24 <alt_tick>
 8013fa4:	e0bffc17 	ldw	r2,-16(fp)
 8013fa8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013fac:	e0bffe17 	ldw	r2,-8(fp)
 8013fb0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8013fb4:	0001883a 	nop
 8013fb8:	e037883a 	mov	sp,fp
 8013fbc:	dfc00117 	ldw	ra,4(sp)
 8013fc0:	df000017 	ldw	fp,0(sp)
 8013fc4:	dec00204 	addi	sp,sp,8
 8013fc8:	f800283a 	ret

08013fcc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8013fcc:	defff804 	addi	sp,sp,-32
 8013fd0:	dfc00715 	stw	ra,28(sp)
 8013fd4:	df000615 	stw	fp,24(sp)
 8013fd8:	df000604 	addi	fp,sp,24
 8013fdc:	e13ffc15 	stw	r4,-16(fp)
 8013fe0:	e17ffd15 	stw	r5,-12(fp)
 8013fe4:	e1bffe15 	stw	r6,-8(fp)
 8013fe8:	e1ffff15 	stw	r7,-4(fp)
 8013fec:	e0bfff17 	ldw	r2,-4(fp)
 8013ff0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8013ff4:	d0a71b17 	ldw	r2,-25492(gp)
 8013ff8:	1000021e 	bne	r2,zero,8014004 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 8013ffc:	e0bffb17 	ldw	r2,-20(fp)
 8014000:	d0a71b15 	stw	r2,-25492(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8014004:	e0bffc17 	ldw	r2,-16(fp)
 8014008:	10800104 	addi	r2,r2,4
 801400c:	00c001c4 	movi	r3,7
 8014010:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8014014:	d8000015 	stw	zero,0(sp)
 8014018:	e1fffc17 	ldw	r7,-16(fp)
 801401c:	01820074 	movhi	r6,2049
 8014020:	318fd504 	addi	r6,r6,16212
 8014024:	e17ffe17 	ldw	r5,-8(fp)
 8014028:	e13ffd17 	ldw	r4,-12(fp)
 801402c:	80143540 	call	8014354 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8014030:	0001883a 	nop
 8014034:	e037883a 	mov	sp,fp
 8014038:	dfc00117 	ldw	ra,4(sp)
 801403c:	df000017 	ldw	fp,0(sp)
 8014040:	dec00204 	addi	sp,sp,8
 8014044:	f800283a 	ret

08014048 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8014048:	defff504 	addi	sp,sp,-44
 801404c:	df000a15 	stw	fp,40(sp)
 8014050:	df000a04 	addi	fp,sp,40
 8014054:	e13ffc15 	stw	r4,-16(fp)
 8014058:	e17ffd15 	stw	r5,-12(fp)
 801405c:	e1bffe15 	stw	r6,-8(fp)
 8014060:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8014064:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8014068:	d0a71b17 	ldw	r2,-25492(gp)
  
  if (alt_ticks_per_second ())
 801406c:	10003c26 	beq	r2,zero,8014160 <alt_alarm_start+0x118>
  {
    if (alarm)
 8014070:	e0bffc17 	ldw	r2,-16(fp)
 8014074:	10003826 	beq	r2,zero,8014158 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8014078:	e0bffc17 	ldw	r2,-16(fp)
 801407c:	e0fffe17 	ldw	r3,-8(fp)
 8014080:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8014084:	e0bffc17 	ldw	r2,-16(fp)
 8014088:	e0ffff17 	ldw	r3,-4(fp)
 801408c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014090:	0005303a 	rdctl	r2,status
 8014094:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014098:	e0fff917 	ldw	r3,-28(fp)
 801409c:	00bfff84 	movi	r2,-2
 80140a0:	1884703a 	and	r2,r3,r2
 80140a4:	1001703a 	wrctl	status,r2
  
  return context;
 80140a8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 80140ac:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80140b0:	d0a71c17 	ldw	r2,-25488(gp)
      
      current_nticks = alt_nticks();
 80140b4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 80140b8:	e0fffd17 	ldw	r3,-12(fp)
 80140bc:	e0bff617 	ldw	r2,-40(fp)
 80140c0:	1885883a 	add	r2,r3,r2
 80140c4:	10c00044 	addi	r3,r2,1
 80140c8:	e0bffc17 	ldw	r2,-16(fp)
 80140cc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 80140d0:	e0bffc17 	ldw	r2,-16(fp)
 80140d4:	10c00217 	ldw	r3,8(r2)
 80140d8:	e0bff617 	ldw	r2,-40(fp)
 80140dc:	1880042e 	bgeu	r3,r2,80140f0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 80140e0:	e0bffc17 	ldw	r2,-16(fp)
 80140e4:	00c00044 	movi	r3,1
 80140e8:	10c00405 	stb	r3,16(r2)
 80140ec:	00000206 	br	80140f8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 80140f0:	e0bffc17 	ldw	r2,-16(fp)
 80140f4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 80140f8:	e0bffc17 	ldw	r2,-16(fp)
 80140fc:	d0e01604 	addi	r3,gp,-32680
 8014100:	e0fffa15 	stw	r3,-24(fp)
 8014104:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8014108:	e0bffb17 	ldw	r2,-20(fp)
 801410c:	e0fffa17 	ldw	r3,-24(fp)
 8014110:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8014114:	e0bffa17 	ldw	r2,-24(fp)
 8014118:	10c00017 	ldw	r3,0(r2)
 801411c:	e0bffb17 	ldw	r2,-20(fp)
 8014120:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8014124:	e0bffa17 	ldw	r2,-24(fp)
 8014128:	10800017 	ldw	r2,0(r2)
 801412c:	e0fffb17 	ldw	r3,-20(fp)
 8014130:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8014134:	e0bffa17 	ldw	r2,-24(fp)
 8014138:	e0fffb17 	ldw	r3,-20(fp)
 801413c:	10c00015 	stw	r3,0(r2)
 8014140:	e0bff817 	ldw	r2,-32(fp)
 8014144:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014148:	e0bff717 	ldw	r2,-36(fp)
 801414c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8014150:	0005883a 	mov	r2,zero
 8014154:	00000306 	br	8014164 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8014158:	00bffa84 	movi	r2,-22
 801415c:	00000106 	br	8014164 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8014160:	00bfde84 	movi	r2,-134
  }
}
 8014164:	e037883a 	mov	sp,fp
 8014168:	df000017 	ldw	fp,0(sp)
 801416c:	dec00104 	addi	sp,sp,4
 8014170:	f800283a 	ret

08014174 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8014174:	deffff04 	addi	sp,sp,-4
 8014178:	df000015 	stw	fp,0(sp)
 801417c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8014180:	0001883a 	nop
 8014184:	e037883a 	mov	sp,fp
 8014188:	df000017 	ldw	fp,0(sp)
 801418c:	dec00104 	addi	sp,sp,4
 8014190:	f800283a 	ret

08014194 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8014194:	defffe04 	addi	sp,sp,-8
 8014198:	dfc00115 	stw	ra,4(sp)
 801419c:	df000015 	stw	fp,0(sp)
 80141a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80141a4:	d0a01417 	ldw	r2,-32688(gp)
 80141a8:	10000326 	beq	r2,zero,80141b8 <alt_get_errno+0x24>
 80141ac:	d0a01417 	ldw	r2,-32688(gp)
 80141b0:	103ee83a 	callr	r2
 80141b4:	00000106 	br	80141bc <alt_get_errno+0x28>
 80141b8:	d0a70d04 	addi	r2,gp,-25548
}
 80141bc:	e037883a 	mov	sp,fp
 80141c0:	dfc00117 	ldw	ra,4(sp)
 80141c4:	df000017 	ldw	fp,0(sp)
 80141c8:	dec00204 	addi	sp,sp,8
 80141cc:	f800283a 	ret

080141d0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 80141d0:	defffa04 	addi	sp,sp,-24
 80141d4:	dfc00515 	stw	ra,20(sp)
 80141d8:	df000415 	stw	fp,16(sp)
 80141dc:	df000404 	addi	fp,sp,16
 80141e0:	e13ffe15 	stw	r4,-8(fp)
 80141e4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 80141e8:	e0bffe17 	ldw	r2,-8(fp)
 80141ec:	10000326 	beq	r2,zero,80141fc <alt_dev_llist_insert+0x2c>
 80141f0:	e0bffe17 	ldw	r2,-8(fp)
 80141f4:	10800217 	ldw	r2,8(r2)
 80141f8:	1000061e 	bne	r2,zero,8014214 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 80141fc:	80141940 	call	8014194 <alt_get_errno>
 8014200:	1007883a 	mov	r3,r2
 8014204:	00800584 	movi	r2,22
 8014208:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 801420c:	00bffa84 	movi	r2,-22
 8014210:	00001306 	br	8014260 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8014214:	e0bffe17 	ldw	r2,-8(fp)
 8014218:	e0ffff17 	ldw	r3,-4(fp)
 801421c:	e0fffc15 	stw	r3,-16(fp)
 8014220:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8014224:	e0bffd17 	ldw	r2,-12(fp)
 8014228:	e0fffc17 	ldw	r3,-16(fp)
 801422c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8014230:	e0bffc17 	ldw	r2,-16(fp)
 8014234:	10c00017 	ldw	r3,0(r2)
 8014238:	e0bffd17 	ldw	r2,-12(fp)
 801423c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8014240:	e0bffc17 	ldw	r2,-16(fp)
 8014244:	10800017 	ldw	r2,0(r2)
 8014248:	e0fffd17 	ldw	r3,-12(fp)
 801424c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8014250:	e0bffc17 	ldw	r2,-16(fp)
 8014254:	e0fffd17 	ldw	r3,-12(fp)
 8014258:	10c00015 	stw	r3,0(r2)

  return 0;  
 801425c:	0005883a 	mov	r2,zero
}
 8014260:	e037883a 	mov	sp,fp
 8014264:	dfc00117 	ldw	ra,4(sp)
 8014268:	df000017 	ldw	fp,0(sp)
 801426c:	dec00204 	addi	sp,sp,8
 8014270:	f800283a 	ret

08014274 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8014274:	defffd04 	addi	sp,sp,-12
 8014278:	dfc00215 	stw	ra,8(sp)
 801427c:	df000115 	stw	fp,4(sp)
 8014280:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8014284:	00820074 	movhi	r2,2049
 8014288:	10944504 	addi	r2,r2,20756
 801428c:	e0bfff15 	stw	r2,-4(fp)
 8014290:	00000606 	br	80142ac <_do_ctors+0x38>
        (*ctor) (); 
 8014294:	e0bfff17 	ldw	r2,-4(fp)
 8014298:	10800017 	ldw	r2,0(r2)
 801429c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80142a0:	e0bfff17 	ldw	r2,-4(fp)
 80142a4:	10bfff04 	addi	r2,r2,-4
 80142a8:	e0bfff15 	stw	r2,-4(fp)
 80142ac:	e0ffff17 	ldw	r3,-4(fp)
 80142b0:	00820074 	movhi	r2,2049
 80142b4:	10944604 	addi	r2,r2,20760
 80142b8:	18bff62e 	bgeu	r3,r2,8014294 <_do_ctors+0x20>
        (*ctor) (); 
}
 80142bc:	0001883a 	nop
 80142c0:	e037883a 	mov	sp,fp
 80142c4:	dfc00117 	ldw	ra,4(sp)
 80142c8:	df000017 	ldw	fp,0(sp)
 80142cc:	dec00204 	addi	sp,sp,8
 80142d0:	f800283a 	ret

080142d4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 80142d4:	defffd04 	addi	sp,sp,-12
 80142d8:	dfc00215 	stw	ra,8(sp)
 80142dc:	df000115 	stw	fp,4(sp)
 80142e0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80142e4:	00820074 	movhi	r2,2049
 80142e8:	10944504 	addi	r2,r2,20756
 80142ec:	e0bfff15 	stw	r2,-4(fp)
 80142f0:	00000606 	br	801430c <_do_dtors+0x38>
        (*dtor) (); 
 80142f4:	e0bfff17 	ldw	r2,-4(fp)
 80142f8:	10800017 	ldw	r2,0(r2)
 80142fc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8014300:	e0bfff17 	ldw	r2,-4(fp)
 8014304:	10bfff04 	addi	r2,r2,-4
 8014308:	e0bfff15 	stw	r2,-4(fp)
 801430c:	e0ffff17 	ldw	r3,-4(fp)
 8014310:	00820074 	movhi	r2,2049
 8014314:	10944604 	addi	r2,r2,20760
 8014318:	18bff62e 	bgeu	r3,r2,80142f4 <_do_dtors+0x20>
        (*dtor) (); 
}
 801431c:	0001883a 	nop
 8014320:	e037883a 	mov	sp,fp
 8014324:	dfc00117 	ldw	ra,4(sp)
 8014328:	df000017 	ldw	fp,0(sp)
 801432c:	dec00204 	addi	sp,sp,8
 8014330:	f800283a 	ret

08014334 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8014334:	deffff04 	addi	sp,sp,-4
 8014338:	df000015 	stw	fp,0(sp)
 801433c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8014340:	0001883a 	nop
 8014344:	e037883a 	mov	sp,fp
 8014348:	df000017 	ldw	fp,0(sp)
 801434c:	dec00104 	addi	sp,sp,4
 8014350:	f800283a 	ret

08014354 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8014354:	defff904 	addi	sp,sp,-28
 8014358:	dfc00615 	stw	ra,24(sp)
 801435c:	df000515 	stw	fp,20(sp)
 8014360:	df000504 	addi	fp,sp,20
 8014364:	e13ffc15 	stw	r4,-16(fp)
 8014368:	e17ffd15 	stw	r5,-12(fp)
 801436c:	e1bffe15 	stw	r6,-8(fp)
 8014370:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8014374:	e0800217 	ldw	r2,8(fp)
 8014378:	d8800015 	stw	r2,0(sp)
 801437c:	e1ffff17 	ldw	r7,-4(fp)
 8014380:	e1bffe17 	ldw	r6,-8(fp)
 8014384:	e17ffd17 	ldw	r5,-12(fp)
 8014388:	e13ffc17 	ldw	r4,-16(fp)
 801438c:	80145040 	call	8014504 <alt_iic_isr_register>
}  
 8014390:	e037883a 	mov	sp,fp
 8014394:	dfc00117 	ldw	ra,4(sp)
 8014398:	df000017 	ldw	fp,0(sp)
 801439c:	dec00204 	addi	sp,sp,8
 80143a0:	f800283a 	ret

080143a4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 80143a4:	defff904 	addi	sp,sp,-28
 80143a8:	df000615 	stw	fp,24(sp)
 80143ac:	df000604 	addi	fp,sp,24
 80143b0:	e13ffe15 	stw	r4,-8(fp)
 80143b4:	e17fff15 	stw	r5,-4(fp)
 80143b8:	e0bfff17 	ldw	r2,-4(fp)
 80143bc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80143c0:	0005303a 	rdctl	r2,status
 80143c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80143c8:	e0fffb17 	ldw	r3,-20(fp)
 80143cc:	00bfff84 	movi	r2,-2
 80143d0:	1884703a 	and	r2,r3,r2
 80143d4:	1001703a 	wrctl	status,r2
  
  return context;
 80143d8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80143dc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 80143e0:	00c00044 	movi	r3,1
 80143e4:	e0bffa17 	ldw	r2,-24(fp)
 80143e8:	1884983a 	sll	r2,r3,r2
 80143ec:	1007883a 	mov	r3,r2
 80143f0:	d0a71d17 	ldw	r2,-25484(gp)
 80143f4:	1884b03a 	or	r2,r3,r2
 80143f8:	d0a71d15 	stw	r2,-25484(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80143fc:	d0a71d17 	ldw	r2,-25484(gp)
 8014400:	100170fa 	wrctl	ienable,r2
 8014404:	e0bffc17 	ldw	r2,-16(fp)
 8014408:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801440c:	e0bffd17 	ldw	r2,-12(fp)
 8014410:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8014414:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8014418:	0001883a 	nop
}
 801441c:	e037883a 	mov	sp,fp
 8014420:	df000017 	ldw	fp,0(sp)
 8014424:	dec00104 	addi	sp,sp,4
 8014428:	f800283a 	ret

0801442c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 801442c:	defff904 	addi	sp,sp,-28
 8014430:	df000615 	stw	fp,24(sp)
 8014434:	df000604 	addi	fp,sp,24
 8014438:	e13ffe15 	stw	r4,-8(fp)
 801443c:	e17fff15 	stw	r5,-4(fp)
 8014440:	e0bfff17 	ldw	r2,-4(fp)
 8014444:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014448:	0005303a 	rdctl	r2,status
 801444c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014450:	e0fffb17 	ldw	r3,-20(fp)
 8014454:	00bfff84 	movi	r2,-2
 8014458:	1884703a 	and	r2,r3,r2
 801445c:	1001703a 	wrctl	status,r2
  
  return context;
 8014460:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8014464:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8014468:	00c00044 	movi	r3,1
 801446c:	e0bffa17 	ldw	r2,-24(fp)
 8014470:	1884983a 	sll	r2,r3,r2
 8014474:	0084303a 	nor	r2,zero,r2
 8014478:	1007883a 	mov	r3,r2
 801447c:	d0a71d17 	ldw	r2,-25484(gp)
 8014480:	1884703a 	and	r2,r3,r2
 8014484:	d0a71d15 	stw	r2,-25484(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8014488:	d0a71d17 	ldw	r2,-25484(gp)
 801448c:	100170fa 	wrctl	ienable,r2
 8014490:	e0bffc17 	ldw	r2,-16(fp)
 8014494:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014498:	e0bffd17 	ldw	r2,-12(fp)
 801449c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80144a0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 80144a4:	0001883a 	nop
}
 80144a8:	e037883a 	mov	sp,fp
 80144ac:	df000017 	ldw	fp,0(sp)
 80144b0:	dec00104 	addi	sp,sp,4
 80144b4:	f800283a 	ret

080144b8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 80144b8:	defffc04 	addi	sp,sp,-16
 80144bc:	df000315 	stw	fp,12(sp)
 80144c0:	df000304 	addi	fp,sp,12
 80144c4:	e13ffe15 	stw	r4,-8(fp)
 80144c8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 80144cc:	000530fa 	rdctl	r2,ienable
 80144d0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 80144d4:	00c00044 	movi	r3,1
 80144d8:	e0bfff17 	ldw	r2,-4(fp)
 80144dc:	1884983a 	sll	r2,r3,r2
 80144e0:	1007883a 	mov	r3,r2
 80144e4:	e0bffd17 	ldw	r2,-12(fp)
 80144e8:	1884703a 	and	r2,r3,r2
 80144ec:	1004c03a 	cmpne	r2,r2,zero
 80144f0:	10803fcc 	andi	r2,r2,255
}
 80144f4:	e037883a 	mov	sp,fp
 80144f8:	df000017 	ldw	fp,0(sp)
 80144fc:	dec00104 	addi	sp,sp,4
 8014500:	f800283a 	ret

08014504 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8014504:	defff504 	addi	sp,sp,-44
 8014508:	dfc00a15 	stw	ra,40(sp)
 801450c:	df000915 	stw	fp,36(sp)
 8014510:	df000904 	addi	fp,sp,36
 8014514:	e13ffc15 	stw	r4,-16(fp)
 8014518:	e17ffd15 	stw	r5,-12(fp)
 801451c:	e1bffe15 	stw	r6,-8(fp)
 8014520:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8014524:	00bffa84 	movi	r2,-22
 8014528:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 801452c:	e0bffd17 	ldw	r2,-12(fp)
 8014530:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8014534:	e0bff817 	ldw	r2,-32(fp)
 8014538:	10800808 	cmpgei	r2,r2,32
 801453c:	1000271e 	bne	r2,zero,80145dc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014540:	0005303a 	rdctl	r2,status
 8014544:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014548:	e0fffb17 	ldw	r3,-20(fp)
 801454c:	00bfff84 	movi	r2,-2
 8014550:	1884703a 	and	r2,r3,r2
 8014554:	1001703a 	wrctl	status,r2
  
  return context;
 8014558:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 801455c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8014560:	008200b4 	movhi	r2,2050
 8014564:	10a3f504 	addi	r2,r2,-28716
 8014568:	e0fff817 	ldw	r3,-32(fp)
 801456c:	180690fa 	slli	r3,r3,3
 8014570:	10c5883a 	add	r2,r2,r3
 8014574:	e0fffe17 	ldw	r3,-8(fp)
 8014578:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 801457c:	008200b4 	movhi	r2,2050
 8014580:	10a3f504 	addi	r2,r2,-28716
 8014584:	e0fff817 	ldw	r3,-32(fp)
 8014588:	180690fa 	slli	r3,r3,3
 801458c:	10c5883a 	add	r2,r2,r3
 8014590:	10800104 	addi	r2,r2,4
 8014594:	e0ffff17 	ldw	r3,-4(fp)
 8014598:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 801459c:	e0bffe17 	ldw	r2,-8(fp)
 80145a0:	10000526 	beq	r2,zero,80145b8 <alt_iic_isr_register+0xb4>
 80145a4:	e0bff817 	ldw	r2,-32(fp)
 80145a8:	100b883a 	mov	r5,r2
 80145ac:	e13ffc17 	ldw	r4,-16(fp)
 80145b0:	80143a40 	call	80143a4 <alt_ic_irq_enable>
 80145b4:	00000406 	br	80145c8 <alt_iic_isr_register+0xc4>
 80145b8:	e0bff817 	ldw	r2,-32(fp)
 80145bc:	100b883a 	mov	r5,r2
 80145c0:	e13ffc17 	ldw	r4,-16(fp)
 80145c4:	801442c0 	call	801442c <alt_ic_irq_disable>
 80145c8:	e0bff715 	stw	r2,-36(fp)
 80145cc:	e0bffa17 	ldw	r2,-24(fp)
 80145d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80145d4:	e0bff917 	ldw	r2,-28(fp)
 80145d8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 80145dc:	e0bff717 	ldw	r2,-36(fp)
}
 80145e0:	e037883a 	mov	sp,fp
 80145e4:	dfc00117 	ldw	ra,4(sp)
 80145e8:	df000017 	ldw	fp,0(sp)
 80145ec:	dec00204 	addi	sp,sp,8
 80145f0:	f800283a 	ret

080145f4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 80145f4:	defff804 	addi	sp,sp,-32
 80145f8:	dfc00715 	stw	ra,28(sp)
 80145fc:	df000615 	stw	fp,24(sp)
 8014600:	dc000515 	stw	r16,20(sp)
 8014604:	df000604 	addi	fp,sp,24
 8014608:	e13ffb15 	stw	r4,-20(fp)
 801460c:	e17ffc15 	stw	r5,-16(fp)
 8014610:	e1bffd15 	stw	r6,-12(fp)
 8014614:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 8014618:	e1bffe17 	ldw	r6,-8(fp)
 801461c:	e17ffd17 	ldw	r5,-12(fp)
 8014620:	e13ffc17 	ldw	r4,-16(fp)
 8014624:	801487c0 	call	801487c <open>
 8014628:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 801462c:	e0bffa17 	ldw	r2,-24(fp)
 8014630:	10002216 	blt	r2,zero,80146bc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 8014634:	04020074 	movhi	r16,2049
 8014638:	8417a504 	addi	r16,r16,24212
 801463c:	e0bffa17 	ldw	r2,-24(fp)
 8014640:	01400304 	movi	r5,12
 8014644:	1009883a 	mov	r4,r2
 8014648:	80050200 	call	8005020 <__mulsi3>
 801464c:	8085883a 	add	r2,r16,r2
 8014650:	10c00017 	ldw	r3,0(r2)
 8014654:	e0bffb17 	ldw	r2,-20(fp)
 8014658:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 801465c:	04020074 	movhi	r16,2049
 8014660:	8417a504 	addi	r16,r16,24212
 8014664:	e0bffa17 	ldw	r2,-24(fp)
 8014668:	01400304 	movi	r5,12
 801466c:	1009883a 	mov	r4,r2
 8014670:	80050200 	call	8005020 <__mulsi3>
 8014674:	8085883a 	add	r2,r16,r2
 8014678:	10800104 	addi	r2,r2,4
 801467c:	10c00017 	ldw	r3,0(r2)
 8014680:	e0bffb17 	ldw	r2,-20(fp)
 8014684:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8014688:	04020074 	movhi	r16,2049
 801468c:	8417a504 	addi	r16,r16,24212
 8014690:	e0bffa17 	ldw	r2,-24(fp)
 8014694:	01400304 	movi	r5,12
 8014698:	1009883a 	mov	r4,r2
 801469c:	80050200 	call	8005020 <__mulsi3>
 80146a0:	8085883a 	add	r2,r16,r2
 80146a4:	10800204 	addi	r2,r2,8
 80146a8:	10c00017 	ldw	r3,0(r2)
 80146ac:	e0bffb17 	ldw	r2,-20(fp)
 80146b0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 80146b4:	e13ffa17 	ldw	r4,-24(fp)
 80146b8:	8012d540 	call	8012d54 <alt_release_fd>
  }
} 
 80146bc:	0001883a 	nop
 80146c0:	e6ffff04 	addi	sp,fp,-4
 80146c4:	dfc00217 	ldw	ra,8(sp)
 80146c8:	df000117 	ldw	fp,4(sp)
 80146cc:	dc000017 	ldw	r16,0(sp)
 80146d0:	dec00304 	addi	sp,sp,12
 80146d4:	f800283a 	ret

080146d8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 80146d8:	defffb04 	addi	sp,sp,-20
 80146dc:	dfc00415 	stw	ra,16(sp)
 80146e0:	df000315 	stw	fp,12(sp)
 80146e4:	df000304 	addi	fp,sp,12
 80146e8:	e13ffd15 	stw	r4,-12(fp)
 80146ec:	e17ffe15 	stw	r5,-8(fp)
 80146f0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80146f4:	01c07fc4 	movi	r7,511
 80146f8:	01800044 	movi	r6,1
 80146fc:	e17ffd17 	ldw	r5,-12(fp)
 8014700:	01020074 	movhi	r4,2049
 8014704:	2117a804 	addi	r4,r4,24224
 8014708:	80145f40 	call	80145f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 801470c:	01c07fc4 	movi	r7,511
 8014710:	000d883a 	mov	r6,zero
 8014714:	e17ffe17 	ldw	r5,-8(fp)
 8014718:	01020074 	movhi	r4,2049
 801471c:	2117a504 	addi	r4,r4,24212
 8014720:	80145f40 	call	80145f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8014724:	01c07fc4 	movi	r7,511
 8014728:	01800044 	movi	r6,1
 801472c:	e17fff17 	ldw	r5,-4(fp)
 8014730:	01020074 	movhi	r4,2049
 8014734:	2117ab04 	addi	r4,r4,24236
 8014738:	80145f40 	call	80145f4 <alt_open_fd>
}  
 801473c:	0001883a 	nop
 8014740:	e037883a 	mov	sp,fp
 8014744:	dfc00117 	ldw	ra,4(sp)
 8014748:	df000017 	ldw	fp,0(sp)
 801474c:	dec00204 	addi	sp,sp,8
 8014750:	f800283a 	ret

08014754 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8014754:	defffe04 	addi	sp,sp,-8
 8014758:	dfc00115 	stw	ra,4(sp)
 801475c:	df000015 	stw	fp,0(sp)
 8014760:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8014764:	d0a01417 	ldw	r2,-32688(gp)
 8014768:	10000326 	beq	r2,zero,8014778 <alt_get_errno+0x24>
 801476c:	d0a01417 	ldw	r2,-32688(gp)
 8014770:	103ee83a 	callr	r2
 8014774:	00000106 	br	801477c <alt_get_errno+0x28>
 8014778:	d0a70d04 	addi	r2,gp,-25548
}
 801477c:	e037883a 	mov	sp,fp
 8014780:	dfc00117 	ldw	ra,4(sp)
 8014784:	df000017 	ldw	fp,0(sp)
 8014788:	dec00204 	addi	sp,sp,8
 801478c:	f800283a 	ret

08014790 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8014790:	defffb04 	addi	sp,sp,-20
 8014794:	dfc00415 	stw	ra,16(sp)
 8014798:	df000315 	stw	fp,12(sp)
 801479c:	dc000215 	stw	r16,8(sp)
 80147a0:	df000304 	addi	fp,sp,12
 80147a4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 80147a8:	e0bffe17 	ldw	r2,-8(fp)
 80147ac:	10800217 	ldw	r2,8(r2)
 80147b0:	10d00034 	orhi	r3,r2,16384
 80147b4:	e0bffe17 	ldw	r2,-8(fp)
 80147b8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80147bc:	e03ffd15 	stw	zero,-12(fp)
 80147c0:	00002306 	br	8014850 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80147c4:	04020074 	movhi	r16,2049
 80147c8:	8417a504 	addi	r16,r16,24212
 80147cc:	e0bffd17 	ldw	r2,-12(fp)
 80147d0:	01400304 	movi	r5,12
 80147d4:	1009883a 	mov	r4,r2
 80147d8:	80050200 	call	8005020 <__mulsi3>
 80147dc:	8085883a 	add	r2,r16,r2
 80147e0:	10c00017 	ldw	r3,0(r2)
 80147e4:	e0bffe17 	ldw	r2,-8(fp)
 80147e8:	10800017 	ldw	r2,0(r2)
 80147ec:	1880151e 	bne	r3,r2,8014844 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80147f0:	04020074 	movhi	r16,2049
 80147f4:	8417a504 	addi	r16,r16,24212
 80147f8:	e0bffd17 	ldw	r2,-12(fp)
 80147fc:	01400304 	movi	r5,12
 8014800:	1009883a 	mov	r4,r2
 8014804:	80050200 	call	8005020 <__mulsi3>
 8014808:	8085883a 	add	r2,r16,r2
 801480c:	10800204 	addi	r2,r2,8
 8014810:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8014814:	10000b0e 	bge	r2,zero,8014844 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8014818:	01400304 	movi	r5,12
 801481c:	e13ffd17 	ldw	r4,-12(fp)
 8014820:	80050200 	call	8005020 <__mulsi3>
 8014824:	1007883a 	mov	r3,r2
 8014828:	00820074 	movhi	r2,2049
 801482c:	1097a504 	addi	r2,r2,24212
 8014830:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8014834:	e0bffe17 	ldw	r2,-8(fp)
 8014838:	18800226 	beq	r3,r2,8014844 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 801483c:	00bffcc4 	movi	r2,-13
 8014840:	00000806 	br	8014864 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8014844:	e0bffd17 	ldw	r2,-12(fp)
 8014848:	10800044 	addi	r2,r2,1
 801484c:	e0bffd15 	stw	r2,-12(fp)
 8014850:	d0a01317 	ldw	r2,-32692(gp)
 8014854:	1007883a 	mov	r3,r2
 8014858:	e0bffd17 	ldw	r2,-12(fp)
 801485c:	18bfd92e 	bgeu	r3,r2,80147c4 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8014860:	0005883a 	mov	r2,zero
}
 8014864:	e6ffff04 	addi	sp,fp,-4
 8014868:	dfc00217 	ldw	ra,8(sp)
 801486c:	df000117 	ldw	fp,4(sp)
 8014870:	dc000017 	ldw	r16,0(sp)
 8014874:	dec00304 	addi	sp,sp,12
 8014878:	f800283a 	ret

0801487c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 801487c:	defff604 	addi	sp,sp,-40
 8014880:	dfc00915 	stw	ra,36(sp)
 8014884:	df000815 	stw	fp,32(sp)
 8014888:	df000804 	addi	fp,sp,32
 801488c:	e13ffd15 	stw	r4,-12(fp)
 8014890:	e17ffe15 	stw	r5,-8(fp)
 8014894:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8014898:	00bfffc4 	movi	r2,-1
 801489c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 80148a0:	00bffb44 	movi	r2,-19
 80148a4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 80148a8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 80148ac:	d1601104 	addi	r5,gp,-32700
 80148b0:	e13ffd17 	ldw	r4,-12(fp)
 80148b4:	80149fc0 	call	80149fc <alt_find_dev>
 80148b8:	e0bff815 	stw	r2,-32(fp)
 80148bc:	e0bff817 	ldw	r2,-32(fp)
 80148c0:	1000051e 	bne	r2,zero,80148d8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 80148c4:	e13ffd17 	ldw	r4,-12(fp)
 80148c8:	8014a8c0 	call	8014a8c <alt_find_file>
 80148cc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 80148d0:	00800044 	movi	r2,1
 80148d4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 80148d8:	e0bff817 	ldw	r2,-32(fp)
 80148dc:	10002b26 	beq	r2,zero,801498c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80148e0:	e13ff817 	ldw	r4,-32(fp)
 80148e4:	8014b940 	call	8014b94 <alt_get_fd>
 80148e8:	e0bff915 	stw	r2,-28(fp)
 80148ec:	e0bff917 	ldw	r2,-28(fp)
 80148f0:	1000030e 	bge	r2,zero,8014900 <open+0x84>
    {
      status = index;
 80148f4:	e0bff917 	ldw	r2,-28(fp)
 80148f8:	e0bffa15 	stw	r2,-24(fp)
 80148fc:	00002506 	br	8014994 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 8014900:	01400304 	movi	r5,12
 8014904:	e13ff917 	ldw	r4,-28(fp)
 8014908:	80050200 	call	8005020 <__mulsi3>
 801490c:	1007883a 	mov	r3,r2
 8014910:	00820074 	movhi	r2,2049
 8014914:	1097a504 	addi	r2,r2,24212
 8014918:	1885883a 	add	r2,r3,r2
 801491c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8014920:	e0fffe17 	ldw	r3,-8(fp)
 8014924:	00900034 	movhi	r2,16384
 8014928:	10bfffc4 	addi	r2,r2,-1
 801492c:	1886703a 	and	r3,r3,r2
 8014930:	e0bffc17 	ldw	r2,-16(fp)
 8014934:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8014938:	e0bffb17 	ldw	r2,-20(fp)
 801493c:	1000051e 	bne	r2,zero,8014954 <open+0xd8>
 8014940:	e13ffc17 	ldw	r4,-16(fp)
 8014944:	80147900 	call	8014790 <alt_file_locked>
 8014948:	e0bffa15 	stw	r2,-24(fp)
 801494c:	e0bffa17 	ldw	r2,-24(fp)
 8014950:	10001016 	blt	r2,zero,8014994 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8014954:	e0bff817 	ldw	r2,-32(fp)
 8014958:	10800317 	ldw	r2,12(r2)
 801495c:	10000826 	beq	r2,zero,8014980 <open+0x104>
 8014960:	e0bff817 	ldw	r2,-32(fp)
 8014964:	10800317 	ldw	r2,12(r2)
 8014968:	e1ffff17 	ldw	r7,-4(fp)
 801496c:	e1bffe17 	ldw	r6,-8(fp)
 8014970:	e17ffd17 	ldw	r5,-12(fp)
 8014974:	e13ffc17 	ldw	r4,-16(fp)
 8014978:	103ee83a 	callr	r2
 801497c:	00000106 	br	8014984 <open+0x108>
 8014980:	0005883a 	mov	r2,zero
 8014984:	e0bffa15 	stw	r2,-24(fp)
 8014988:	00000206 	br	8014994 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 801498c:	00bffb44 	movi	r2,-19
 8014990:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8014994:	e0bffa17 	ldw	r2,-24(fp)
 8014998:	1000090e 	bge	r2,zero,80149c0 <open+0x144>
  {
    alt_release_fd (index);  
 801499c:	e13ff917 	ldw	r4,-28(fp)
 80149a0:	8012d540 	call	8012d54 <alt_release_fd>
    ALT_ERRNO = -status;
 80149a4:	80147540 	call	8014754 <alt_get_errno>
 80149a8:	1007883a 	mov	r3,r2
 80149ac:	e0bffa17 	ldw	r2,-24(fp)
 80149b0:	0085c83a 	sub	r2,zero,r2
 80149b4:	18800015 	stw	r2,0(r3)
    return -1;
 80149b8:	00bfffc4 	movi	r2,-1
 80149bc:	00000106 	br	80149c4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 80149c0:	e0bff917 	ldw	r2,-28(fp)
}
 80149c4:	e037883a 	mov	sp,fp
 80149c8:	dfc00117 	ldw	ra,4(sp)
 80149cc:	df000017 	ldw	fp,0(sp)
 80149d0:	dec00204 	addi	sp,sp,8
 80149d4:	f800283a 	ret

080149d8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 80149d8:	deffff04 	addi	sp,sp,-4
 80149dc:	df000015 	stw	fp,0(sp)
 80149e0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80149e4:	000170fa 	wrctl	ienable,zero
}
 80149e8:	0001883a 	nop
 80149ec:	e037883a 	mov	sp,fp
 80149f0:	df000017 	ldw	fp,0(sp)
 80149f4:	dec00104 	addi	sp,sp,4
 80149f8:	f800283a 	ret

080149fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 80149fc:	defffa04 	addi	sp,sp,-24
 8014a00:	dfc00515 	stw	ra,20(sp)
 8014a04:	df000415 	stw	fp,16(sp)
 8014a08:	df000404 	addi	fp,sp,16
 8014a0c:	e13ffe15 	stw	r4,-8(fp)
 8014a10:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8014a14:	e0bfff17 	ldw	r2,-4(fp)
 8014a18:	10800017 	ldw	r2,0(r2)
 8014a1c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8014a20:	e13ffe17 	ldw	r4,-8(fp)
 8014a24:	8005ea80 	call	8005ea8 <strlen>
 8014a28:	10800044 	addi	r2,r2,1
 8014a2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8014a30:	00000d06 	br	8014a68 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8014a34:	e0bffc17 	ldw	r2,-16(fp)
 8014a38:	10800217 	ldw	r2,8(r2)
 8014a3c:	e0fffd17 	ldw	r3,-12(fp)
 8014a40:	180d883a 	mov	r6,r3
 8014a44:	e17ffe17 	ldw	r5,-8(fp)
 8014a48:	1009883a 	mov	r4,r2
 8014a4c:	8005a5c0 	call	8005a5c <memcmp>
 8014a50:	1000021e 	bne	r2,zero,8014a5c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8014a54:	e0bffc17 	ldw	r2,-16(fp)
 8014a58:	00000706 	br	8014a78 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8014a5c:	e0bffc17 	ldw	r2,-16(fp)
 8014a60:	10800017 	ldw	r2,0(r2)
 8014a64:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8014a68:	e0fffc17 	ldw	r3,-16(fp)
 8014a6c:	e0bfff17 	ldw	r2,-4(fp)
 8014a70:	18bff01e 	bne	r3,r2,8014a34 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8014a74:	0005883a 	mov	r2,zero
}
 8014a78:	e037883a 	mov	sp,fp
 8014a7c:	dfc00117 	ldw	ra,4(sp)
 8014a80:	df000017 	ldw	fp,0(sp)
 8014a84:	dec00204 	addi	sp,sp,8
 8014a88:	f800283a 	ret

08014a8c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8014a8c:	defffb04 	addi	sp,sp,-20
 8014a90:	dfc00415 	stw	ra,16(sp)
 8014a94:	df000315 	stw	fp,12(sp)
 8014a98:	df000304 	addi	fp,sp,12
 8014a9c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8014aa0:	d0a00f17 	ldw	r2,-32708(gp)
 8014aa4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8014aa8:	00003106 	br	8014b70 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8014aac:	e0bffd17 	ldw	r2,-12(fp)
 8014ab0:	10800217 	ldw	r2,8(r2)
 8014ab4:	1009883a 	mov	r4,r2
 8014ab8:	8005ea80 	call	8005ea8 <strlen>
 8014abc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8014ac0:	e0bffd17 	ldw	r2,-12(fp)
 8014ac4:	10c00217 	ldw	r3,8(r2)
 8014ac8:	e0bffe17 	ldw	r2,-8(fp)
 8014acc:	10bfffc4 	addi	r2,r2,-1
 8014ad0:	1885883a 	add	r2,r3,r2
 8014ad4:	10800003 	ldbu	r2,0(r2)
 8014ad8:	10803fcc 	andi	r2,r2,255
 8014adc:	1080201c 	xori	r2,r2,128
 8014ae0:	10bfe004 	addi	r2,r2,-128
 8014ae4:	10800bd8 	cmpnei	r2,r2,47
 8014ae8:	1000031e 	bne	r2,zero,8014af8 <alt_find_file+0x6c>
    {
      len -= 1;
 8014aec:	e0bffe17 	ldw	r2,-8(fp)
 8014af0:	10bfffc4 	addi	r2,r2,-1
 8014af4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8014af8:	e0bffe17 	ldw	r2,-8(fp)
 8014afc:	e0ffff17 	ldw	r3,-4(fp)
 8014b00:	1885883a 	add	r2,r3,r2
 8014b04:	10800003 	ldbu	r2,0(r2)
 8014b08:	10803fcc 	andi	r2,r2,255
 8014b0c:	1080201c 	xori	r2,r2,128
 8014b10:	10bfe004 	addi	r2,r2,-128
 8014b14:	10800be0 	cmpeqi	r2,r2,47
 8014b18:	1000081e 	bne	r2,zero,8014b3c <alt_find_file+0xb0>
 8014b1c:	e0bffe17 	ldw	r2,-8(fp)
 8014b20:	e0ffff17 	ldw	r3,-4(fp)
 8014b24:	1885883a 	add	r2,r3,r2
 8014b28:	10800003 	ldbu	r2,0(r2)
 8014b2c:	10803fcc 	andi	r2,r2,255
 8014b30:	1080201c 	xori	r2,r2,128
 8014b34:	10bfe004 	addi	r2,r2,-128
 8014b38:	10000a1e 	bne	r2,zero,8014b64 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8014b3c:	e0bffd17 	ldw	r2,-12(fp)
 8014b40:	10800217 	ldw	r2,8(r2)
 8014b44:	e0fffe17 	ldw	r3,-8(fp)
 8014b48:	180d883a 	mov	r6,r3
 8014b4c:	e17fff17 	ldw	r5,-4(fp)
 8014b50:	1009883a 	mov	r4,r2
 8014b54:	8005a5c0 	call	8005a5c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8014b58:	1000021e 	bne	r2,zero,8014b64 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8014b5c:	e0bffd17 	ldw	r2,-12(fp)
 8014b60:	00000706 	br	8014b80 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8014b64:	e0bffd17 	ldw	r2,-12(fp)
 8014b68:	10800017 	ldw	r2,0(r2)
 8014b6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8014b70:	e0fffd17 	ldw	r3,-12(fp)
 8014b74:	d0a00f04 	addi	r2,gp,-32708
 8014b78:	18bfcc1e 	bne	r3,r2,8014aac <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8014b7c:	0005883a 	mov	r2,zero
}
 8014b80:	e037883a 	mov	sp,fp
 8014b84:	dfc00117 	ldw	ra,4(sp)
 8014b88:	df000017 	ldw	fp,0(sp)
 8014b8c:	dec00204 	addi	sp,sp,8
 8014b90:	f800283a 	ret

08014b94 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8014b94:	defffa04 	addi	sp,sp,-24
 8014b98:	dfc00515 	stw	ra,20(sp)
 8014b9c:	df000415 	stw	fp,16(sp)
 8014ba0:	dc000315 	stw	r16,12(sp)
 8014ba4:	df000404 	addi	fp,sp,16
 8014ba8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8014bac:	00bffa04 	movi	r2,-24
 8014bb0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8014bb4:	e03ffc15 	stw	zero,-16(fp)
 8014bb8:	00001d06 	br	8014c30 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 8014bbc:	04020074 	movhi	r16,2049
 8014bc0:	8417a504 	addi	r16,r16,24212
 8014bc4:	e0bffc17 	ldw	r2,-16(fp)
 8014bc8:	01400304 	movi	r5,12
 8014bcc:	1009883a 	mov	r4,r2
 8014bd0:	80050200 	call	8005020 <__mulsi3>
 8014bd4:	8085883a 	add	r2,r16,r2
 8014bd8:	10800017 	ldw	r2,0(r2)
 8014bdc:	1000111e 	bne	r2,zero,8014c24 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 8014be0:	04020074 	movhi	r16,2049
 8014be4:	8417a504 	addi	r16,r16,24212
 8014be8:	e0bffc17 	ldw	r2,-16(fp)
 8014bec:	01400304 	movi	r5,12
 8014bf0:	1009883a 	mov	r4,r2
 8014bf4:	80050200 	call	8005020 <__mulsi3>
 8014bf8:	8085883a 	add	r2,r16,r2
 8014bfc:	e0fffe17 	ldw	r3,-8(fp)
 8014c00:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8014c04:	d0e01317 	ldw	r3,-32692(gp)
 8014c08:	e0bffc17 	ldw	r2,-16(fp)
 8014c0c:	1880020e 	bge	r3,r2,8014c18 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 8014c10:	e0bffc17 	ldw	r2,-16(fp)
 8014c14:	d0a01315 	stw	r2,-32692(gp)
      }
      rc = i;
 8014c18:	e0bffc17 	ldw	r2,-16(fp)
 8014c1c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8014c20:	00000606 	br	8014c3c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8014c24:	e0bffc17 	ldw	r2,-16(fp)
 8014c28:	10800044 	addi	r2,r2,1
 8014c2c:	e0bffc15 	stw	r2,-16(fp)
 8014c30:	e0bffc17 	ldw	r2,-16(fp)
 8014c34:	10800810 	cmplti	r2,r2,32
 8014c38:	103fe01e 	bne	r2,zero,8014bbc <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8014c3c:	e0bffd17 	ldw	r2,-12(fp)
}
 8014c40:	e6ffff04 	addi	sp,fp,-4
 8014c44:	dfc00217 	ldw	ra,8(sp)
 8014c48:	df000117 	ldw	fp,4(sp)
 8014c4c:	dc000017 	ldw	r16,0(sp)
 8014c50:	dec00304 	addi	sp,sp,12
 8014c54:	f800283a 	ret

08014c58 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8014c58:	defffe04 	addi	sp,sp,-8
 8014c5c:	df000115 	stw	fp,4(sp)
 8014c60:	df000104 	addi	fp,sp,4
 8014c64:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8014c68:	e0bfff17 	ldw	r2,-4(fp)
 8014c6c:	10bffe84 	addi	r2,r2,-6
 8014c70:	10c00428 	cmpgeui	r3,r2,16
 8014c74:	18001a1e 	bne	r3,zero,8014ce0 <alt_exception_cause_generated_bad_addr+0x88>
 8014c78:	100690ba 	slli	r3,r2,2
 8014c7c:	00820074 	movhi	r2,2049
 8014c80:	10932404 	addi	r2,r2,19600
 8014c84:	1885883a 	add	r2,r3,r2
 8014c88:	10800017 	ldw	r2,0(r2)
 8014c8c:	1000683a 	jmp	r2
 8014c90:	08014cd0 	cmplti	zero,at,1331
 8014c94:	08014cd0 	cmplti	zero,at,1331
 8014c98:	08014ce0 	cmpeqi	zero,at,1331
 8014c9c:	08014ce0 	cmpeqi	zero,at,1331
 8014ca0:	08014ce0 	cmpeqi	zero,at,1331
 8014ca4:	08014cd0 	cmplti	zero,at,1331
 8014ca8:	08014cd8 	cmpnei	zero,at,1331
 8014cac:	08014ce0 	cmpeqi	zero,at,1331
 8014cb0:	08014cd0 	cmplti	zero,at,1331
 8014cb4:	08014cd0 	cmplti	zero,at,1331
 8014cb8:	08014ce0 	cmpeqi	zero,at,1331
 8014cbc:	08014cd0 	cmplti	zero,at,1331
 8014cc0:	08014cd8 	cmpnei	zero,at,1331
 8014cc4:	08014ce0 	cmpeqi	zero,at,1331
 8014cc8:	08014ce0 	cmpeqi	zero,at,1331
 8014ccc:	08014cd0 	cmplti	zero,at,1331
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8014cd0:	00800044 	movi	r2,1
 8014cd4:	00000306 	br	8014ce4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8014cd8:	0005883a 	mov	r2,zero
 8014cdc:	00000106 	br	8014ce4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8014ce0:	0005883a 	mov	r2,zero
  }
}
 8014ce4:	e037883a 	mov	sp,fp
 8014ce8:	df000017 	ldw	fp,0(sp)
 8014cec:	dec00104 	addi	sp,sp,4
 8014cf0:	f800283a 	ret

08014cf4 <atexit>:
 8014cf4:	200b883a 	mov	r5,r4
 8014cf8:	000f883a 	mov	r7,zero
 8014cfc:	000d883a 	mov	r6,zero
 8014d00:	0009883a 	mov	r4,zero
 8014d04:	8014d401 	jmpi	8014d40 <__register_exitproc>

08014d08 <exit>:
 8014d08:	defffe04 	addi	sp,sp,-8
 8014d0c:	000b883a 	mov	r5,zero
 8014d10:	dc000015 	stw	r16,0(sp)
 8014d14:	dfc00115 	stw	ra,4(sp)
 8014d18:	2021883a 	mov	r16,r4
 8014d1c:	8014e580 	call	8014e58 <__call_exitprocs>
 8014d20:	00820074 	movhi	r2,2049
 8014d24:	109c2604 	addi	r2,r2,28824
 8014d28:	11000017 	ldw	r4,0(r2)
 8014d2c:	20800f17 	ldw	r2,60(r4)
 8014d30:	10000126 	beq	r2,zero,8014d38 <exit+0x30>
 8014d34:	103ee83a 	callr	r2
 8014d38:	8009883a 	mov	r4,r16
 8014d3c:	80150e40 	call	80150e4 <_exit>

08014d40 <__register_exitproc>:
 8014d40:	defffa04 	addi	sp,sp,-24
 8014d44:	dc000315 	stw	r16,12(sp)
 8014d48:	04020074 	movhi	r16,2049
 8014d4c:	841c2604 	addi	r16,r16,28824
 8014d50:	80c00017 	ldw	r3,0(r16)
 8014d54:	dc400415 	stw	r17,16(sp)
 8014d58:	dfc00515 	stw	ra,20(sp)
 8014d5c:	18805217 	ldw	r2,328(r3)
 8014d60:	2023883a 	mov	r17,r4
 8014d64:	10003726 	beq	r2,zero,8014e44 <__register_exitproc+0x104>
 8014d68:	10c00117 	ldw	r3,4(r2)
 8014d6c:	010007c4 	movi	r4,31
 8014d70:	20c00e16 	blt	r4,r3,8014dac <__register_exitproc+0x6c>
 8014d74:	1a000044 	addi	r8,r3,1
 8014d78:	8800221e 	bne	r17,zero,8014e04 <__register_exitproc+0xc4>
 8014d7c:	18c00084 	addi	r3,r3,2
 8014d80:	18c7883a 	add	r3,r3,r3
 8014d84:	18c7883a 	add	r3,r3,r3
 8014d88:	12000115 	stw	r8,4(r2)
 8014d8c:	10c7883a 	add	r3,r2,r3
 8014d90:	19400015 	stw	r5,0(r3)
 8014d94:	0005883a 	mov	r2,zero
 8014d98:	dfc00517 	ldw	ra,20(sp)
 8014d9c:	dc400417 	ldw	r17,16(sp)
 8014da0:	dc000317 	ldw	r16,12(sp)
 8014da4:	dec00604 	addi	sp,sp,24
 8014da8:	f800283a 	ret
 8014dac:	00800034 	movhi	r2,0
 8014db0:	10800004 	addi	r2,r2,0
 8014db4:	10002626 	beq	r2,zero,8014e50 <__register_exitproc+0x110>
 8014db8:	01006404 	movi	r4,400
 8014dbc:	d9400015 	stw	r5,0(sp)
 8014dc0:	d9800115 	stw	r6,4(sp)
 8014dc4:	d9c00215 	stw	r7,8(sp)
 8014dc8:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8014dcc:	d9400017 	ldw	r5,0(sp)
 8014dd0:	d9800117 	ldw	r6,4(sp)
 8014dd4:	d9c00217 	ldw	r7,8(sp)
 8014dd8:	10001d26 	beq	r2,zero,8014e50 <__register_exitproc+0x110>
 8014ddc:	81000017 	ldw	r4,0(r16)
 8014de0:	10000115 	stw	zero,4(r2)
 8014de4:	02000044 	movi	r8,1
 8014de8:	22405217 	ldw	r9,328(r4)
 8014dec:	0007883a 	mov	r3,zero
 8014df0:	12400015 	stw	r9,0(r2)
 8014df4:	20805215 	stw	r2,328(r4)
 8014df8:	10006215 	stw	zero,392(r2)
 8014dfc:	10006315 	stw	zero,396(r2)
 8014e00:	883fde26 	beq	r17,zero,8014d7c <__register_exitproc+0x3c>
 8014e04:	18c9883a 	add	r4,r3,r3
 8014e08:	2109883a 	add	r4,r4,r4
 8014e0c:	1109883a 	add	r4,r2,r4
 8014e10:	21802215 	stw	r6,136(r4)
 8014e14:	01800044 	movi	r6,1
 8014e18:	12406217 	ldw	r9,392(r2)
 8014e1c:	30cc983a 	sll	r6,r6,r3
 8014e20:	4992b03a 	or	r9,r9,r6
 8014e24:	12406215 	stw	r9,392(r2)
 8014e28:	21c04215 	stw	r7,264(r4)
 8014e2c:	01000084 	movi	r4,2
 8014e30:	893fd21e 	bne	r17,r4,8014d7c <__register_exitproc+0x3c>
 8014e34:	11006317 	ldw	r4,396(r2)
 8014e38:	218cb03a 	or	r6,r4,r6
 8014e3c:	11806315 	stw	r6,396(r2)
 8014e40:	003fce06 	br	8014d7c <__register_exitproc+0x3c>
 8014e44:	18805304 	addi	r2,r3,332
 8014e48:	18805215 	stw	r2,328(r3)
 8014e4c:	003fc606 	br	8014d68 <__register_exitproc+0x28>
 8014e50:	00bfffc4 	movi	r2,-1
 8014e54:	003fd006 	br	8014d98 <__register_exitproc+0x58>

08014e58 <__call_exitprocs>:
 8014e58:	defff504 	addi	sp,sp,-44
 8014e5c:	df000915 	stw	fp,36(sp)
 8014e60:	dd400615 	stw	r21,24(sp)
 8014e64:	dc800315 	stw	r18,12(sp)
 8014e68:	dfc00a15 	stw	ra,40(sp)
 8014e6c:	ddc00815 	stw	r23,32(sp)
 8014e70:	dd800715 	stw	r22,28(sp)
 8014e74:	dd000515 	stw	r20,20(sp)
 8014e78:	dcc00415 	stw	r19,16(sp)
 8014e7c:	dc400215 	stw	r17,8(sp)
 8014e80:	dc000115 	stw	r16,4(sp)
 8014e84:	d9000015 	stw	r4,0(sp)
 8014e88:	2839883a 	mov	fp,r5
 8014e8c:	04800044 	movi	r18,1
 8014e90:	057fffc4 	movi	r21,-1
 8014e94:	00820074 	movhi	r2,2049
 8014e98:	109c2604 	addi	r2,r2,28824
 8014e9c:	12000017 	ldw	r8,0(r2)
 8014ea0:	45005217 	ldw	r20,328(r8)
 8014ea4:	44c05204 	addi	r19,r8,328
 8014ea8:	a0001c26 	beq	r20,zero,8014f1c <__call_exitprocs+0xc4>
 8014eac:	a0800117 	ldw	r2,4(r20)
 8014eb0:	15ffffc4 	addi	r23,r2,-1
 8014eb4:	b8000d16 	blt	r23,zero,8014eec <__call_exitprocs+0x94>
 8014eb8:	14000044 	addi	r16,r2,1
 8014ebc:	8421883a 	add	r16,r16,r16
 8014ec0:	8421883a 	add	r16,r16,r16
 8014ec4:	84402004 	addi	r17,r16,128
 8014ec8:	a463883a 	add	r17,r20,r17
 8014ecc:	a421883a 	add	r16,r20,r16
 8014ed0:	e0001e26 	beq	fp,zero,8014f4c <__call_exitprocs+0xf4>
 8014ed4:	80804017 	ldw	r2,256(r16)
 8014ed8:	e0801c26 	beq	fp,r2,8014f4c <__call_exitprocs+0xf4>
 8014edc:	bdffffc4 	addi	r23,r23,-1
 8014ee0:	843fff04 	addi	r16,r16,-4
 8014ee4:	8c7fff04 	addi	r17,r17,-4
 8014ee8:	bd7ff91e 	bne	r23,r21,8014ed0 <__call_exitprocs+0x78>
 8014eec:	00800034 	movhi	r2,0
 8014ef0:	10800004 	addi	r2,r2,0
 8014ef4:	10000926 	beq	r2,zero,8014f1c <__call_exitprocs+0xc4>
 8014ef8:	a0800117 	ldw	r2,4(r20)
 8014efc:	1000301e 	bne	r2,zero,8014fc0 <__call_exitprocs+0x168>
 8014f00:	a0800017 	ldw	r2,0(r20)
 8014f04:	10003226 	beq	r2,zero,8014fd0 <__call_exitprocs+0x178>
 8014f08:	a009883a 	mov	r4,r20
 8014f0c:	98800015 	stw	r2,0(r19)
 8014f10:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8014f14:	9d000017 	ldw	r20,0(r19)
 8014f18:	a03fe41e 	bne	r20,zero,8014eac <__call_exitprocs+0x54>
 8014f1c:	dfc00a17 	ldw	ra,40(sp)
 8014f20:	df000917 	ldw	fp,36(sp)
 8014f24:	ddc00817 	ldw	r23,32(sp)
 8014f28:	dd800717 	ldw	r22,28(sp)
 8014f2c:	dd400617 	ldw	r21,24(sp)
 8014f30:	dd000517 	ldw	r20,20(sp)
 8014f34:	dcc00417 	ldw	r19,16(sp)
 8014f38:	dc800317 	ldw	r18,12(sp)
 8014f3c:	dc400217 	ldw	r17,8(sp)
 8014f40:	dc000117 	ldw	r16,4(sp)
 8014f44:	dec00b04 	addi	sp,sp,44
 8014f48:	f800283a 	ret
 8014f4c:	a0800117 	ldw	r2,4(r20)
 8014f50:	80c00017 	ldw	r3,0(r16)
 8014f54:	10bfffc4 	addi	r2,r2,-1
 8014f58:	15c01426 	beq	r2,r23,8014fac <__call_exitprocs+0x154>
 8014f5c:	80000015 	stw	zero,0(r16)
 8014f60:	183fde26 	beq	r3,zero,8014edc <__call_exitprocs+0x84>
 8014f64:	95c8983a 	sll	r4,r18,r23
 8014f68:	a0806217 	ldw	r2,392(r20)
 8014f6c:	a5800117 	ldw	r22,4(r20)
 8014f70:	2084703a 	and	r2,r4,r2
 8014f74:	10000b26 	beq	r2,zero,8014fa4 <__call_exitprocs+0x14c>
 8014f78:	a0806317 	ldw	r2,396(r20)
 8014f7c:	2088703a 	and	r4,r4,r2
 8014f80:	20000c1e 	bne	r4,zero,8014fb4 <__call_exitprocs+0x15c>
 8014f84:	89400017 	ldw	r5,0(r17)
 8014f88:	d9000017 	ldw	r4,0(sp)
 8014f8c:	183ee83a 	callr	r3
 8014f90:	a0800117 	ldw	r2,4(r20)
 8014f94:	15bfbf1e 	bne	r2,r22,8014e94 <__call_exitprocs+0x3c>
 8014f98:	98800017 	ldw	r2,0(r19)
 8014f9c:	153fcf26 	beq	r2,r20,8014edc <__call_exitprocs+0x84>
 8014fa0:	003fbc06 	br	8014e94 <__call_exitprocs+0x3c>
 8014fa4:	183ee83a 	callr	r3
 8014fa8:	003ff906 	br	8014f90 <__call_exitprocs+0x138>
 8014fac:	a5c00115 	stw	r23,4(r20)
 8014fb0:	003feb06 	br	8014f60 <__call_exitprocs+0x108>
 8014fb4:	89000017 	ldw	r4,0(r17)
 8014fb8:	183ee83a 	callr	r3
 8014fbc:	003ff406 	br	8014f90 <__call_exitprocs+0x138>
 8014fc0:	a0800017 	ldw	r2,0(r20)
 8014fc4:	a027883a 	mov	r19,r20
 8014fc8:	1029883a 	mov	r20,r2
 8014fcc:	003fb606 	br	8014ea8 <__call_exitprocs+0x50>
 8014fd0:	0005883a 	mov	r2,zero
 8014fd4:	003ffb06 	br	8014fc4 <__call_exitprocs+0x16c>

08014fd8 <__muldi3>:
 8014fd8:	defff604 	addi	sp,sp,-40
 8014fdc:	dd800615 	stw	r22,24(sp)
 8014fe0:	dd400515 	stw	r21,20(sp)
 8014fe4:	dc400115 	stw	r17,4(sp)
 8014fe8:	357fffcc 	andi	r21,r6,65535
 8014fec:	2022d43a 	srli	r17,r4,16
 8014ff0:	25bfffcc 	andi	r22,r4,65535
 8014ff4:	dcc00315 	stw	r19,12(sp)
 8014ff8:	dc800215 	stw	r18,8(sp)
 8014ffc:	2027883a 	mov	r19,r4
 8015000:	2825883a 	mov	r18,r5
 8015004:	b009883a 	mov	r4,r22
 8015008:	a80b883a 	mov	r5,r21
 801500c:	dfc00915 	stw	ra,36(sp)
 8015010:	df000815 	stw	fp,32(sp)
 8015014:	ddc00715 	stw	r23,28(sp)
 8015018:	3839883a 	mov	fp,r7
 801501c:	302ed43a 	srli	r23,r6,16
 8015020:	dd000415 	stw	r20,16(sp)
 8015024:	dc000015 	stw	r16,0(sp)
 8015028:	3029883a 	mov	r20,r6
 801502c:	80050200 	call	8005020 <__mulsi3>
 8015030:	a80b883a 	mov	r5,r21
 8015034:	8809883a 	mov	r4,r17
 8015038:	1021883a 	mov	r16,r2
 801503c:	80050200 	call	8005020 <__mulsi3>
 8015040:	8809883a 	mov	r4,r17
 8015044:	b80b883a 	mov	r5,r23
 8015048:	102b883a 	mov	r21,r2
 801504c:	80050200 	call	8005020 <__mulsi3>
 8015050:	b80b883a 	mov	r5,r23
 8015054:	b009883a 	mov	r4,r22
 8015058:	1023883a 	mov	r17,r2
 801505c:	80050200 	call	8005020 <__mulsi3>
 8015060:	8006d43a 	srli	r3,r16,16
 8015064:	1545883a 	add	r2,r2,r21
 8015068:	1885883a 	add	r2,r3,r2
 801506c:	1540022e 	bgeu	r2,r21,8015078 <__muldi3+0xa0>
 8015070:	00c00074 	movhi	r3,1
 8015074:	88e3883a 	add	r17,r17,r3
 8015078:	1006d43a 	srli	r3,r2,16
 801507c:	1004943a 	slli	r2,r2,16
 8015080:	e00b883a 	mov	r5,fp
 8015084:	9809883a 	mov	r4,r19
 8015088:	843fffcc 	andi	r16,r16,65535
 801508c:	1c63883a 	add	r17,r3,r17
 8015090:	1421883a 	add	r16,r2,r16
 8015094:	80050200 	call	8005020 <__mulsi3>
 8015098:	900b883a 	mov	r5,r18
 801509c:	a009883a 	mov	r4,r20
 80150a0:	1027883a 	mov	r19,r2
 80150a4:	80050200 	call	8005020 <__mulsi3>
 80150a8:	9885883a 	add	r2,r19,r2
 80150ac:	1447883a 	add	r3,r2,r17
 80150b0:	8005883a 	mov	r2,r16
 80150b4:	dfc00917 	ldw	ra,36(sp)
 80150b8:	df000817 	ldw	fp,32(sp)
 80150bc:	ddc00717 	ldw	r23,28(sp)
 80150c0:	dd800617 	ldw	r22,24(sp)
 80150c4:	dd400517 	ldw	r21,20(sp)
 80150c8:	dd000417 	ldw	r20,16(sp)
 80150cc:	dcc00317 	ldw	r19,12(sp)
 80150d0:	dc800217 	ldw	r18,8(sp)
 80150d4:	dc400117 	ldw	r17,4(sp)
 80150d8:	dc000017 	ldw	r16,0(sp)
 80150dc:	dec00a04 	addi	sp,sp,40
 80150e0:	f800283a 	ret

080150e4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80150e4:	defffd04 	addi	sp,sp,-12
 80150e8:	df000215 	stw	fp,8(sp)
 80150ec:	df000204 	addi	fp,sp,8
 80150f0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 80150f4:	0001883a 	nop
 80150f8:	e0bfff17 	ldw	r2,-4(fp)
 80150fc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8015100:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8015104:	10000226 	beq	r2,zero,8015110 <_exit+0x2c>
    ALT_SIM_FAIL();
 8015108:	002af070 	cmpltui	zero,zero,43969
 801510c:	00000106 	br	8015114 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8015110:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8015114:	003fff06 	br	8015114 <_exit+0x30>
