
ethernet.elf:     file format elf32-littlenios2
ethernet.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000230

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00015d68 memsz 0x00015d68 flags r-x
    LOAD off    0x00016d88 vaddr 0x08015d88 paddr 0x080178c4 align 2**12
         filesz 0x00001b3c memsz 0x00001b3c flags rw-
    LOAD off    0x00019400 vaddr 0x08019400 paddr 0x08019400 align 2**12
         filesz 0x00000000 memsz 0x00000510 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001567c  08000230  08000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004dc  080158ac  080158ac  000168ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b3c  08015d88  080178c4  00016d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000510  08019400  08019400  00019400  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  000188c4  2**0
                  CONTENTS
  7 .sdram        00000000  08019910  08019910  000188c4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000188c4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001148  00000000  00000000  000188e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002e29e  00000000  00000000  00019a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b448  00000000  00000000  00047cce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e0cb  00000000  00000000  00053116  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000341c  00000000  00000000  000611e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000056fe  00000000  00000000  00064600  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00018057  00000000  00000000  00069cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00081d58  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000019e8  00000000  00000000  00081d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0008885e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00088861  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0008886d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0008886e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0008886f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00088873  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00088877  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0008887b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00088886  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00088891  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  0008889c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000027  00000000  00000000  000888a4  2**0
                  CONTENTS, READONLY
 30 .jdi          00004e82  00000000  00000000  000888cb  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000643f1  00000000  00000000  0008d74d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000230 l    d  .text	00000000 .text
080158ac l    d  .rodata	00000000 .rodata
08015d88 l    d  .rwdata	00000000 .rwdata
08019400 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08019910 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ethernet_bsp//obj/HAL/src/crt0.o
08000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 EtherCard.cpp
00000000 l    df *ABS*	00000000 dhcp.cpp
08019428 l     O .bss	00000001 _ZL9dhcpState
08015d88 l     O .rwdata	00000020 _ZL8hostname
0801942c l     O .bss	00000004 _ZL10currentXid
08019430 l     O .bss	00000004 _ZL10stateTimer
08019434 l     O .bss	00000004 _ZL10leaseStart
08019438 l     O .bss	00000004 _ZL9leaseTime
0801943c l     O .bss	00000004 _ZL6bufPtr
08019440 l     O .bss	00000004 _ZL20dhcpCustomOptionList
08019444 l     O .bss	00000004 _ZL24dhcpCustomOptionCallback
080003f8 l     F .text	0000003c _ZL8addToBufh
08000434 l     F .text	00000070 _ZL8addByteshPKh
080004a4 l     F .text	00000064 _ZL9addOptionhhPKh
08000508 l     F .text	000002f0 _ZL17send_dhcp_messagePh
08017856 l     O .rwdata	00000004 _ZZL17send_dhcp_messagePhE6cookie
080007f8 l     F .text	000000d4 _ZL18process_dhcp_offertPh
080008cc l     F .text	00000210 _ZL16process_dhcp_ackt
08000adc l     F .text	00000130 _ZL26dhcp_received_message_typeth
08000c0c l     F .text	00000058 _ZL10toAsciiHexh
08019448 l     O .bss	00000002 _ZZN9EtherCard21dhcpAddOptionCallbackEhPFvhPKhhEE10optionList
00000000 l    df *ABS*	00000000 dns.cpp
0801944a l     O .bss	00000001 _ZL8dnstid_l
08001064 l     F .text	000001f0 _ZL10dnsRequestPKcb
08001254 l     F .text	000001e8 _ZL17checkForDnsAnswert
00000000 l    df *ABS*	00000000 enc28j60.cpp
08019450 l     O .bss	00000001 _ZL12Enc28j60Bank
08019451 l     O .bss	00000001 _ZL9selectPin
08001638 l     F .text	00000080 _ZL7writeOphhh
080016b8 l     F .text	000000c4 _ZL6readOphh
0800177c l     F .text	00000080 _ZL7SetBankh
080017fc l     F .text	0000005c _ZL12writeRegBytehh
08001858 l     F .text	00000074 _ZL8writeReght
080018cc l     F .text	00000048 _ZL11readRegByteh
08001914 l     F .text	00000064 _ZL7readRegh
08001978 l     F .text	00000078 _ZL8writePhyht
080019f0 l     F .text	00000080 _ZL11readPhyByteh
08001aa8 l     F .text	000000b4 _ZL10getMacAddrv
08001b5c l     F .text	000000a0 _ZL12doOtherThingv
08001e88 l     F .text	000001b4 _ZL7readBuftPh
0800203c l     F .text	00000140 _ZL8writeBuftPKh
08019452 l     O .bss	00000001 _ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket
08019454 l     O .bss	00000002 _ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr
00000000 l    df *ABS*	00000000 tcpip.cpp
08017860 l     O .rwdata	00000001 _ZL20tcpclient_src_port_l
08019458 l     O .bss	00000001 _ZL6tcp_fd
08019459 l     O .bss	00000001 _ZL16tcp_client_state
0801945a l     O .bss	00000001 _ZL17tcp_client_port_h
0801945b l     O .bss	00000001 _ZL17tcp_client_port_l
0801945c l     O .bss	00000004 _ZL20client_tcp_result_cb
08019460 l     O .bss	00000004 _ZL22client_tcp_datafill_cb
08019464 l     O .bss	00000001 _ZL6www_fd
08019468 l     O .bss	00000004 _ZL17client_browser_cb
0801946c l     O .bss	00000004 _ZL27client_additionalheaderline
08019470 l     O .bss	00000004 _ZL14client_postval
08019474 l     O .bss	00000004 _ZL13client_urlbuf
08019478 l     O .bss	00000004 _ZL17client_urlbuf_var
0801947c l     O .bss	00000004 _ZL14client_hoststr
08019480 l     O .bss	00000004 _ZL7icmp_cb
08019484 l     O .bss	00000006 _ZL11destmacaddr
0801948a l     O .bss	00000001 _ZL19waiting_for_dns_mac
0801948b l     O .bss	00000001 _ZL11has_dns_mac
0801948c l     O .bss	00000001 _ZL20waiting_for_dest_mac
0801948d l     O .bss	00000001 _ZL12has_dest_mac
0801948e l     O .bss	00000006 _ZL9gwmacaddr
08019494 l     O .bss	00000001 _ZL9waitgwmac
08019496 l     O .bss	00000002 _ZL13info_data_len
08017861 l     O .rwdata	00000001 _ZL6seqnum
08017862 l     O .rwdata	00000001 _ZL9result_fd
08019498 l     O .bss	00000004 _ZL10result_ptr
0801949c l     O .bss	00000004 _ZL3SEQ
08017869 l     O .rwdata	00000008 _ZL9arpreqhdr
080159ac l     O .rodata	00000009 _ZL5iphdr
080159b5 l     O .rodata	0000000a _ZL9ntpreqhdr
08002548 l     F .text	00000184 _ZL13fill_checksumhhth
080026cc l     F .text	00000050 _ZL7setMACsPKh
0800271c l     F .text	00000060 _ZL12setMACandIPsPKhS0_
0800277c l     F .text	00000044 _ZL24check_ip_message_is_fromPKh
080027c0 l     F .text	000000bc _ZL6is_lanPKhS0_
0800287c l     F .text	00000090 _ZL25eth_type_is_arp_and_my_ipt
0800290c l     F .text	000000dc _ZL24eth_type_is_ip_and_my_ipt
080029e8 l     F .text	00000080 _ZL20fill_ip_hdr_checksumv
08002a68 l     F .text	0000006c _ZL11make_eth_ipv
08002ad4 l     F .text	00000100 _ZL8step_seqth
08002bd4 l     F .text	000000e4 _ZL12make_tcpheadth
08002cb8 l     F .text	000000bc _ZL28make_arp_answer_from_requestv
08002d74 l     F .text	000000a4 _ZL28make_echo_reply_from_requestt
08002f98 l     F .text	0000012c _ZL24make_tcp_synack_from_synv
08003154 l     F .text	000000f0 _ZL21make_tcp_ack_from_anysh
08003244 l     F .text	000000b8 _ZL30make_tcp_ack_with_data_noflagst
08003364 l     F .text	000000a8 _ZL16getBigEndianLongh
0800340c l     F .text	00000088 _ZL17setSequenceNumberm
08003dd0 l     F .text	000000c8 _ZL17client_arp_whohasPh
08003f18 l     F .text	00000068 _ZL16client_store_macPhS_
08004044 l     F .text	00000204 _ZL10client_synhhh
080042b4 l     F .text	00000028 _ZL31www_client_internal_datafill_cbh
080042dc l     F .text	000000f8 _ZL29www_client_internal_result_cbhhtt
08004544 l     F .text	00000028 _ZL15tcp_datafill_cbh
0800456c l     F .text	00000064 _ZL13tcp_result_cbhhtt
00000000 l    df *ABS*	00000000 udpserver.cpp
00000000 l    df *ABS*	00000000 webutil.cpp
00000000 l    df *ABS*	00000000 main.cpp
08017871 l     O .rwdata	00000006 _ZL5mymac
0800556c l     F .text	0000003c _ZL9gotPingedPh
08017877 l     O .rwdata	00000004 _ZZ4mainE3dns
0801787b l     O .rwdata	00000004 _ZZ4mainE2gw
0801787f l     O .rwdata	00000004 _ZZ4mainE2ip
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 difftime.c
00000000 l    df *ABS*	00000000 impure.c
08015da8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
08015bd2 l     O .rodata	00000010 zeroes.4404
08008be0 l     F .text	000000bc __sbprintf
08015be2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08008df0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800a948 l     F .text	00000008 __fp_unlock
0800a95c l     F .text	0000019c __sinit.part.1
0800aaf8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
080161ec l     O .rwdata	00000020 lc_ctype_charset
080161cc l     O .rwdata	00000020 lc_message_charset
0801620c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
08015c10 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800df20 l     F .text	000000fc __sprint_r.part.0
08015d34 l     O .rodata	00000010 zeroes.4349
0800f55c l     F .text	000000bc __sbprintf
08015d44 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
08012bd0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08012ce4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08012d10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
08012ff8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
080130e0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
080131cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
080133a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
080178b4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_times.c
080137c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
08013874 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
080139b0 l     F .text	00000034 alt_dev_reg
080167f4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08013ca8 l     F .text	0000020c altera_avalon_jtag_uart_irq
08013eb4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
080146e8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08014928 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08014d88 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08014ee8 l     F .text	0000003c alt_get_errno
08014f24 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
080194e8 g     O .bss	00000004 alt_instruction_exception_handler
08005238 g     F .text	00000028 _ZN9EtherCard18udpServerListeningEv
08006550 g     F .text	00000018 putchar
0800d3fc g     F .text	00000074 _mprec_log10
0800d4e8 g     F .text	0000008c __any_on
0800fc68 g     F .text	00000054 _isatty_r
08015c1c g     O .rodata	00000028 __mprec_tinytens
080132e4 g     F .text	0000007c alt_main
08006568 g     F .text	000000c0 _puts_r
08019810 g     O .bss	00000100 alt_irq
0800fcbc g     F .text	00000060 _lseek_r
080044c0 g     F .text	00000084 _ZN9EtherCard8httpPostEPKcS1_S1_S1_PFvhttE
080054ec g     F .text	00000040 _ZN9EtherCard7copyMacEPhPKh
080178c4 g       *ABS*	00000000 __flash_rwdata_start
08011f54 g     F .text	00000088 .hidden __eqdf2
0800b77c g     F .text	0000005c _gettimeofday_r
08019910 g       *ABS*	00000000 __alt_heap_start
0800650c g     F .text	0000003c printf
0800fd7c g     F .text	0000009c _wcrtomb_r
08001e50 g     F .text	00000038 _ZN8ENC28J608isLinkUpEv
0800dde0 g     F .text	0000005c __sseek
0800aca8 g     F .text	00000010 __sinit
0800f618 g     F .text	00000140 __swbuf_r
0800b7d8 g     F .text	0000007c _setlocale_r
0800ab00 g     F .text	00000078 __sfmoreglue
08013384 g     F .text	00000024 __malloc_unlock
080194a0 g     O .bss	00000001 numListeners
0800c360 g     F .text	0000015c memmove
0800ac90 g     F .text	00000018 _cleanup
0800c4bc g     F .text	000000a8 _Balloc
08004690 g     F .text	00000088 _ZN9EtherCard24packetLoopIcmpCheckReplyEPKh
080057dc g     F .text	000000dc .hidden __gtdf2
0801516c g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000000c __reset
080137fc g     F .text	00000078 times
08004438 g     F .text	00000088 _ZN9EtherCard9browseUrlEPKcS1_S1_S1_PFvhttE
08000020 g       *ABS*	00000000 __flash_exceptions_start
0800fc0c g     F .text	0000005c _fstat_r
080194a4 g     O .bss	00000004 errno
0800143c g     F .text	00000168 _ZN9EtherCard9dnsLookupEPKcb
0800dd5c g     F .text	00000008 __seofread
08000e74 g     F .text	000001f0 _ZN9EtherCard16DhcpStateMachineEt
080194d4 g     O .bss	00000004 alt_argv
0801f854 g       *ABS*	00000000 _gp
08019417 g     O .bss	00000004 _ZN9EtherCard6dhcpipE
08016674 g     O .rwdata	00000180 alt_fd_list
08006548 g     F .text	00000008 _putchar_r
08015190 g     F .text	00000090 alt_find_dev
080068e0 g     F .text	00000008 _times_r
0800626c g     F .text	00000148 memcpy
0800a950 g     F .text	0000000c _cleanup_r
08012a4c g     F .text	000000dc .hidden __floatsidf
08014e6c g     F .text	0000007c alt_io_redirect
08011fdc g     F .text	000000f4 .hidden __ltdf2
080158ac g       *ABS*	00000000 __DTOR_END__
08006628 g     F .text	00000014 puts
080153ec g     F .text	0000009c alt_exception_cause_generated_bad_addr
0800dc40 g     F .text	00000074 __fpclassifyd
08005260 g     F .text	000001b8 _ZN9EtherCard27udpServerHasProcessedPacketEt
08004fec g     F .text	000000a0 _ZN9EtherCard21udpServerListenOnPortEPFvtPhtPKctEt
0800d358 g     F .text	000000a4 __ratio
0800f540 g     F .text	0000001c __vfiprintf_internal
08019400 g     O .bss	00000001 ether
080140ac g     F .text	0000021c altera_avalon_jtag_uart_read
080064dc g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08010c1c g     F .text	00000064 .hidden __udivsi3
08013034 g     F .text	000000ac isatty
08015c6c g     O .rodata	000000c8 __mprec_tens
080194ec g     O .bss	00000040 listeners
08003ec4 g     F .text	00000054 _ZN9EtherCard16clientWaitingDnsEv
0800b854 g     F .text	0000000c __locale_charset
080194c0 g     O .bss	00000008 alt_timezone
080194bc g     O .bss	00000004 __malloc_top_pad
0801788c g     O .rwdata	00000004 __mb_cur_max
0800b884 g     F .text	0000000c _localeconv_r
08003858 g     F .text	000000f4 _ZN9EtherCard16ntpProcessAnswerEPmh
0800c8f0 g     F .text	0000003c __i2b
0800b12c g     F .text	000004c8 __sfvwrite_r
0801785c g     O .rwdata	00000004 GPIO_PIO
0800dcb4 g     F .text	00000054 _sbrk_r
080030c4 g     F .text	00000090 _ZN9EtherCard19getTcpPayloadLengthEv
0800fd1c g     F .text	00000060 _read_r
080178ac g     O .rwdata	00000004 alt_max_fd
0800f900 g     F .text	000000f0 _fclose_r
0800a918 g     F .text	00000030 fflush
080194b8 g     O .bss	00000004 __malloc_max_sbrked_mem
08001bfc g     F .text	00000254 _ZN8ENC28J6010initializeEtPKhh
08010cd8 g     F .text	000008ac .hidden __adddf3
0800033c g     F .text	00000094 _ZN9EtherCard11staticSetupEPKhS1_S1_S1_
0800d100 g     F .text	0000010c __b2d
08010560 g     F .text	000005c4 .hidden __umoddi3
08013208 g     F .text	000000dc lseek
08017884 g     O .rwdata	00000004 _global_impure_ptr
0800d6dc g     F .text	00000564 _realloc_r
08019910 g       *ABS*	00000000 __bss_end
08014c98 g     F .text	000000f0 alt_iic_isr_register
080136b8 g     F .text	00000108 alt_tick
0800ff64 g     F .text	000005fc .hidden __udivdi3
0800fb68 g     F .text	00000024 _fputwc_r
08015c44 g     O .rodata	00000028 __mprec_bigtens
0800c6d4 g     F .text	00000104 __s2b
08012b28 g     F .text	000000a8 .hidden __floatunsidf
0800ce40 g     F .text	00000060 __mcmp
080003d0 g     F .text	00000028 _Z6millisv
080015a4 g     F .text	00000058 _Z5delayi
0800acc8 g     F .text	00000018 __fp_lock_all
08014c4c g     F .text	0000004c alt_ic_irq_enabled
0800350c g     F .text	00000070 _ZN9EtherCard26httpServerReply_with_flagsEth
0801361c g     F .text	0000009c alt_alarm_stop
080194e4 g     O .bss	00000004 alt_irq_active
0800394c g     F .text	00000188 _ZN9EtherCard10udpPrepareEtPKht
080000fc g     F .exceptions	000000d4 alt_irq_handler
0801664c g     O .rwdata	00000028 alt_dev_null
08019426 g     O .bss	00000002 _ZN9EtherCard8delaycntE
0801941f g     O .bss	00000004 _ZN9EtherCard5hisipE
08001a70 g     F .text	00000038 _Z8getThingh
08014908 g     F .text	00000020 alt_dcache_flush_all
0800c7d8 g     F .text	00000068 __hi0bits
080129cc g     F .text	00000080 .hidden __fixdfsi
080178c4 g       *ABS*	00000000 __ram_rwdata_end
0801940f g     O .bss	00000004 _ZN9EtherCard11broadcastipE
080178a4 g     O .rwdata	00000008 alt_dev_list
080138b0 g     F .text	00000100 write
0800d574 g     F .text	000000a0 _putc_r
08015d88 g       *ABS*	00000000 __ram_rodata_end
08012d4c g     F .text	000000b8 fstat
08011fdc g     F .text	000000f4 .hidden __ledf2
08005418 g     F .text	00000050 _ZN9EtherCard7printIpEPKcPKh
0800357c g     F .text	0000015c _ZN9EtherCard17clientIcmpRequestEPKh
0800cbb8 g     F .text	00000140 __pow5mult
0800e034 g     F .text	0000150c ___vfiprintf_internal_r
080194b0 g     O .bss	00000004 __nlocale_changed
08010c80 g     F .text	00000058 .hidden __umodsi3
08002508 g     F .text	00000040 _Z8memcpy_PPvPKvj
08004664 g     F .text	0000002c _ZN9EtherCard20registerPingCallbackEPFvPhE
08019910 g       *ABS*	00000000 end
08003c40 g     F .text	00000190 _ZN9EtherCard7sendWolEPh
08013be8 g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
080158ac g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0801944f g     O .bss	00000001 _ZN8ENC28J6019promiscuous_enabledE
08014760 g     F .text	0000007c alt_avalon_timer_sc_init
08006124 g     F .text	00000064 .hidden __clzsi2
08004248 g     F .text	0000006c _ZN9EtherCard12clientTcpReqEPFhhhttEPFthEt
080142c8 g     F .text	00000224 altera_avalon_jtag_uart_write
0800acb8 g     F .text	00000004 __sfp_lock_acquire
0800c27c g     F .text	000000e4 memchr
080068e8 g     F .text	000022dc ___vfprintf_internal_r
0800ae1c g     F .text	00000310 _free_r
0800b860 g     F .text	00000010 __locale_mb_cur_max
08002474 g     F .text	00000070 _ZN8ENC28J6016disableBroadcastEb
0801940b g     O .bss	00000004 _ZN9EtherCard7netmaskE
08000df4 g     F .text	00000048 _ZN9EtherCard21dhcpAddOptionCallbackEhPFvhPKhhE
080155ec g     F .text	00000180 __call_exitprocs
080032fc g     F .text	00000068 _ZN9EtherCard15httpServerReplyEt
080043d4 g     F .text	00000064 _ZN9EtherCard9browseUrlEPKcS1_S1_PFvhttE
08019407 g     O .bss	00000004 _ZN9EtherCard4myipE
080194ac g     O .bss	00000004 __mlocale_changed
08017890 g     O .rwdata	00000004 __malloc_sbrk_base
08000230 g     F .text	0000003c _start
080194dc g     O .bss	00000004 _alt_tick_rate
0800ccf8 g     F .text	00000148 __lshift
080144ec g     F .text	000001fc alt_avalon_spi_command
080194e0 g     O .bss	00000004 _alt_nticks
080133e4 g     F .text	00000104 read
08013a1c g     F .text	00000068 alt_sys_init
080154d4 g     F .text	00000118 __register_exitproc
08000e3c g     F .text	00000038 _ZN9EtherCard21dhcpAddOptionCallbackEPhPFvhPKhhE
080066d4 g     F .text	000000d0 strncmp
08004718 g     F .text	0000011c _ZN9EtherCard6acceptEtt
0800217c g     F .text	0000013c _ZN8ENC28J6013packetReceiveEv
0800c92c g     F .text	0000028c __multiply
08013f54 g     F .text	00000068 altera_avalon_jtag_uart_close
080057b4 g     F .text	00000028 .hidden __mulsi3
08015d88 g       *ABS*	00000000 __ram_rwdata_start
080158ac g       *ABS*	00000000 __ram_rodata_start
080067a4 g     F .text	000000ec strncpy
080197e8 g     O .bss	00000028 __malloc_current_mallinfo
0800d20c g     F .text	0000014c __d2b
08013a84 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08015328 g     F .text	000000c4 alt_get_fd
0800f7d0 g     F .text	00000054 _close_r
0801944e g     O .bss	00000001 _ZN8ENC28J6017broadcast_enabledE
080061f0 g     F .text	0000007c memcmp
08013b44 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08019910 g       *ABS*	00000000 __alt_stack_base
08013b94 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08017854 g     O .rwdata	00000002 _ZN9EtherCard7hisportE
08004834 g     F .text	00000788 _ZN9EtherCard10packetLoopEt
080022b8 g     F .text	00000158 _ZN8ENC28J6010packetSendEt
08008c9c g     F .text	00000154 __swsetup_r
08011584 g     F .text	000009d0 .hidden __divdf3
0800ab78 g     F .text	00000118 __sfp
0800d470 g     F .text	00000078 __copybits
08016244 g     O .rwdata	00000408 __malloc_av_
0800acc4 g     F .text	00000004 __sinit_lock_release
080058b8 g     F .text	0000086c .hidden __muldf3
0800dd08 g     F .text	00000054 __sread
08003494 g     F .text	0000002c _ZN9EtherCard17getSequenceNumberEv
08015220 g     F .text	00000108 alt_find_file
0801952c g     O .bss	000002bc _ZN8ENC28J606bufferE
08014964 g     F .text	000000a4 alt_dev_llist_insert
08013360 g     F .text	00000024 __malloc_lock
0801356c g     F .text	000000b0 sbrk
080045d0 g     F .text	0000004c _ZN9EtherCard7tcpSendEv
0800a8bc g     F .text	0000005c _fflush_r
0800f824 g     F .text	000000dc _calloc_r
08012e04 g     F .text	000001f4 gettimeofday
08019400 g       *ABS*	00000000 __bss_start
08002e18 g     F .text	00000180 _ZN9EtherCard12makeUdpReplyEPKcht
080063b4 g     F .text	00000128 memset
080055a8 g     F .text	0000020c main
080034c0 g     F .text	0000004c _ZN9EtherCard18httpServerReplyAckEv
080194d8 g     O .bss	00000004 alt_envp
080194b4 g     O .bss	00000004 __malloc_max_total_mem
08013ae4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080015fc g     F .text	0000003c _Z7bitReadhh
0800f758 g     F .text	00000018 __swbuf
0800de3c g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
0800f9f0 g     F .text	00000014 fclose
08009018 g     F .text	00001688 _dtoa_r
0800ba70 g     F .text	0000080c _malloc_r
0800fed8 g     F .text	00000030 __ascii_wctomb
08006890 g     F .text	00000050 time
080178b0 g     O .rwdata	00000004 alt_errno
08002410 g     F .text	00000064 _ZN8ENC28J6015enableBroadcastEb
0800b5f4 g     F .text	000000c4 _fwalk
08019401 g     O .bss	00000006 _ZN9EtherCard5mymacE
0800d614 g     F .text	000000c8 putc
08010b24 g     F .text	00000084 .hidden __divsi3
0800acf8 g     F .text	00000124 _malloc_trim_r
080158ac g       *ABS*	00000000 __CTOR_END__
0800de44 g     F .text	000000dc strcmp
080158ac g       *ABS*	00000000 __flash_rodata_start
080158ac g       *ABS*	00000000 __DTOR_LIST__
0801944c g     O .bss	00000002 _ZN8ENC28J6010bufferSizeE
0801941b g     O .bss	00000004 _ZN9EtherCard5dnsipE
08011f54 g     F .text	00000088 .hidden __nedf2
080139e4 g     F .text	00000038 alt_irq_init
080134e8 g     F .text	00000084 alt_release_fd
08003ad4 g     F .text	000000d0 _ZN9EtherCard11udpTransmitEt
08015a86 g     O .rodata	00000100 .hidden __clz_tab
080194a8 g     O .bss	00000004 _PathLocale
080061d4 g     F .text	0000001c difftime
08015488 g     F .text	00000014 atexit
0800f770 g     F .text	00000060 _write_r
0800b890 g     F .text	00000018 setlocale
08003f80 g     F .text	00000044 _ZN9EtherCard7setGwIpEPKh
08017888 g     O .rwdata	00000004 _impure_ptr
080194d0 g     O .bss	00000004 alt_argc
0800a6a0 g     F .text	0000021c __sflush_r
08014a68 g     F .text	00000060 _do_dtors
0800b87c g     F .text	00000008 __locale_cjk_lang
0800461c g     F .text	00000048 _ZN9EtherCard8tcpReplyEh
0800552c g     F .text	00000040 _ZN9EtherCard6copyIpEPhPKh
0800508c g     F .text	000000d4 _ZN9EtherCard26udpServerPauseListenOnPortEt
08005160 g     F .text	000000d8 _ZN9EtherCard27udpServerResumeListenOnPortEt
08000020 g       .exceptions	00000000 alt_irq_entry
0800d09c g     F .text	00000064 __ulp
0800ace0 g     F .text	00000018 __fp_unlock_all
0801789c g     O .rwdata	00000008 alt_fs_list
080024e4 g     F .text	00000024 _Z4PSTRPc
080194c8 g     O .bss	00000008 alt_resettime
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800b8a8 g     F .text	0000000c localeconv
0800026c g     F .text	000000d0 _ZN9EtherCard5beginEtPKhh
08017863 g     O .rwdata	00000006 allOnes
08014ae8 g     F .text	00000050 alt_ic_isr_register
080178c4 g       *ABS*	00000000 _edata
08019910 g       *ABS*	00000000 _end
0800fa04 g     F .text	00000164 __fputwc
08000230 g       *ABS*	00000000 __ram_exceptions_end
08013fbc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08014bc0 g     F .text	0000008c alt_ic_irq_disable
08019413 g     O .bss	00000004 _ZN9EtherCard4gwipE
0800dd64 g     F .text	0000007c __swrite
08017894 g     O .rwdata	00000004 __malloc_trim_threshold
0800b870 g     F .text	0000000c __locale_msgcharset
0801549c g     F .text	00000038 exit
0800b6b8 g     F .text	000000c4 _fwalk_reent
0800cea0 g     F .text	000001fc __mdiff
08004fbc g     F .text	00000030 _ZN9EtherCard20persistTcpConnectionEb
08003e98 g     F .text	0000002c _ZN9EtherCard15clientWaitingGwEv
08010ba8 g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
0800acbc g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
080036d8 g     F .text	00000180 _ZN9EtherCard10ntpRequestEPhh
08015878 g     F .text	00000034 _exit
080147dc g     F .text	0000012c alt_alarm_start
0801576c g     F .text	0000010c .hidden __muldi3
0800b8b4 g     F .text	000001bc __smakebuf_r
0800663c g     F .text	00000098 strlen
08015010 g     F .text	0000015c open
080057dc g     F .text	000000dc .hidden __gedf2
08006188 g     F .text	0000004c clock
08019424 g     O .bss	00000001 _ZN9EtherCard22persist_tcp_connectionE
08017898 g     O .rwdata	00000004 __wctomb
0800e01c g     F .text	00000018 __sprint_r
08014ac8 g     F .text	00000020 alt_icache_flush_all
080178c0 g     O .rwdata	00000004 alt_priority_mask
08019423 g     O .bss	00000001 _ZN9EtherCard10using_dhcpE
08014b38 g     F .text	00000088 alt_ic_irq_enable
08008bc4 g     F .text	0000001c __vfprintf_internal
0800ff08 g     F .text	0000005c _wctomb_r
080120d0 g     F .text	000008fc .hidden __subdf3
0800c840 g     F .text	000000b0 __lo0bits
080178b8 g     O .rwdata	00000008 alt_alarm_list
08014a08 g     F .text	00000060 _do_ctors
08003ba4 g     F .text	0000009c _ZN9EtherCard7sendUdpEPKchtPKht
08005468 g     F .text	00000084 _ZN9EtherCard7printIpEPKh
0800fe18 g     F .text	000000c0 wcrtomb
08012c0c g     F .text	000000d8 close
08000c64 g     F .text	00000190 _ZN9EtherCard9dhcpSetupEPKcb
08013148 g     F .text	00000084 alt_load
08003fc4 g     F .text	00000080 _ZN9EtherCard22updateBroadcastAddressEv
0800fb8c g     F .text	00000080 fputwc
0800acc0 g     F .text	00000004 __sinit_lock_acquire
0800c58c g     F .text	00000148 __multadd
0800c564 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408c14 	ori	at,at,560
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	008200b4 	movhi	r2,2050
 8000140:	10a60404 	addi	r2,r2,-26608
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	008200b4 	movhi	r2,2050
 8000158:	10a60404 	addi	r2,r2,-26608
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e4:	00bfffc4 	movi	r2,-1
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001f0:	d0a72517 	ldw	r2,-25452(gp)
 80001f4:	10000726 	beq	r2,zero,8000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f8:	d0a72517 	ldw	r2,-25452(gp)
 80001fc:	e0fffd17 	ldw	r3,-12(fp)
 8000200:	e1bffe17 	ldw	r6,-8(fp)
 8000204:	e17fff17 	ldw	r5,-4(fp)
 8000208:	1809883a 	mov	r4,r3
 800020c:	103ee83a 	callr	r2
 8000210:	00000206 	br	800021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000218:	0005883a 	mov	r2,zero
}
 800021c:	e037883a 	mov	sp,fp
 8000220:	dfc00117 	ldw	ra,4(sp)
 8000224:	df000017 	ldw	fp,0(sp)
 8000228:	dec00204 	addi	sp,sp,8
 800022c:	f800283a 	ret

Disassembly of section .text:

08000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000230:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000238:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 800023c:	d6be1514 	ori	gp,gp,63572
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000240:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000244:	10a50014 	ori	r2,r2,37888

    movhi r3, %hi(__bss_end)
 8000248:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 800024c:	18e64414 	ori	r3,r3,39184

    beq r2, r3, 1f
 8000250:	10c00326 	beq	r2,r3,8000260 <_start+0x30>

0:
    stw zero, (r2)
 8000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800025c:	10fffd36 	bltu	r2,r3,8000254 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000260:	80131480 	call	8013148 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000264:	80132e40 	call	80132e4 <alt_main>

08000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000268:	003fff06 	br	8000268 <alt_after_alt_main>

0800026c <_ZN9EtherCard5beginEtPKhh>:
bool EtherCard::using_dhcp = false;
bool EtherCard::persist_tcp_connection = false;
uint16_t EtherCard::delaycnt = 0; //request gateway ARP lookup

uint8_t EtherCard::begin(const uint16_t size, const uint8_t *macaddr,
                         uint8_t csPin) {
 800026c:	defff904 	addi	sp,sp,-28
 8000270:	dfc00615 	stw	ra,24(sp)
 8000274:	df000515 	stw	fp,20(sp)
 8000278:	df000504 	addi	fp,sp,20
 800027c:	2007883a 	mov	r3,r4
 8000280:	e17ffe15 	stw	r5,-8(fp)
 8000284:	3005883a 	mov	r2,r6
 8000288:	e0fffd0d 	sth	r3,-12(fp)
 800028c:	e0bfff05 	stb	r2,-4(fp)
  using_dhcp = true;
 8000290:	00800044 	movi	r2,1
 8000294:	d0a6f3c5 	stb	r2,-25649(gp)
  copyMac(mymac, macaddr);
 8000298:	e17ffe17 	ldw	r5,-8(fp)
 800029c:	d126eb44 	addi	r4,gp,-25683
 80002a0:	80054ec0 	call	80054ec <_ZN9EtherCard7copyMacEPhPKh>
  uint8_t ret = initialize(size, mymac, csPin);
 80002a4:	e0bffd0b 	ldhu	r2,-12(fp)
 80002a8:	e0ffff03 	ldbu	r3,-4(fp)
 80002ac:	180d883a 	mov	r6,r3
 80002b0:	d166eb44 	addi	r5,gp,-25683
 80002b4:	1009883a 	mov	r4,r2
 80002b8:	8001bfc0 	call	8001bfc <_ZN8ENC28J6010initializeEtPKhh>
 80002bc:	e0bffc05 	stb	r2,-16(fp)
  printf("mymac: ");
 80002c0:	01020074 	movhi	r4,2049
 80002c4:	21162b04 	addi	r4,r4,22700
 80002c8:	800650c0 	call	800650c <printf>
  for(int i = 0; i < 6; i++)
 80002cc:	e03ffb15 	stw	zero,-20(fp)
 80002d0:	e0bffb17 	ldw	r2,-20(fp)
 80002d4:	10800188 	cmpgei	r2,r2,6
 80002d8:	10000d1e 	bne	r2,zero,8000310 <_ZN9EtherCard5beginEtPKhh+0xa4>
	  printf("%x, ", mymac[i]);
 80002dc:	e0fffb17 	ldw	r3,-20(fp)
 80002e0:	d0a6eb44 	addi	r2,gp,-25683
 80002e4:	1885883a 	add	r2,r3,r2
 80002e8:	10800003 	ldbu	r2,0(r2)
 80002ec:	10803fcc 	andi	r2,r2,255
 80002f0:	100b883a 	mov	r5,r2
 80002f4:	01020074 	movhi	r4,2049
 80002f8:	21162d04 	addi	r4,r4,22708
 80002fc:	800650c0 	call	800650c <printf>
                         uint8_t csPin) {
  using_dhcp = true;
  copyMac(mymac, macaddr);
  uint8_t ret = initialize(size, mymac, csPin);
  printf("mymac: ");
  for(int i = 0; i < 6; i++)
 8000300:	e0bffb17 	ldw	r2,-20(fp)
 8000304:	10800044 	addi	r2,r2,1
 8000308:	e0bffb15 	stw	r2,-20(fp)
 800030c:	003ff006 	br	80002d0 <_ZN9EtherCard5beginEtPKhh+0x64>
	  printf("%x, ", mymac[i]);
  printf("\nfinished init (ret: %x)\n", ret);
 8000310:	e0bffc03 	ldbu	r2,-16(fp)
 8000314:	100b883a 	mov	r5,r2
 8000318:	01020074 	movhi	r4,2049
 800031c:	21162f04 	addi	r4,r4,22716
 8000320:	800650c0 	call	800650c <printf>
  return ret;
 8000324:	e0bffc03 	ldbu	r2,-16(fp)
}
 8000328:	e037883a 	mov	sp,fp
 800032c:	dfc00117 	ldw	ra,4(sp)
 8000330:	df000017 	ldw	fp,0(sp)
 8000334:	dec00204 	addi	sp,sp,8
 8000338:	f800283a 	ret

0800033c <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>:

bool EtherCard::staticSetup (const uint8_t* my_ip,
                             const uint8_t* gw_ip,
                             const uint8_t* dns_ip,
                             const uint8_t* mask) {
 800033c:	defffa04 	addi	sp,sp,-24
 8000340:	dfc00515 	stw	ra,20(sp)
 8000344:	df000415 	stw	fp,16(sp)
 8000348:	df000404 	addi	fp,sp,16
 800034c:	e13ffc15 	stw	r4,-16(fp)
 8000350:	e17ffd15 	stw	r5,-12(fp)
 8000354:	e1bffe15 	stw	r6,-8(fp)
 8000358:	e1ffff15 	stw	r7,-4(fp)
    using_dhcp = true;
 800035c:	00800044 	movi	r2,1
 8000360:	d0a6f3c5 	stb	r2,-25649(gp)

    if (my_ip != 0)
 8000364:	e0bffc17 	ldw	r2,-16(fp)
 8000368:	10000326 	beq	r2,zero,8000378 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x3c>
        copyIp(myip, my_ip);
 800036c:	e17ffc17 	ldw	r5,-16(fp)
 8000370:	d126ecc4 	addi	r4,gp,-25677
 8000374:	800552c0 	call	800552c <_ZN9EtherCard6copyIpEPhPKh>
    if (gw_ip != 0)
 8000378:	e0bffd17 	ldw	r2,-12(fp)
 800037c:	10000226 	beq	r2,zero,8000388 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x4c>
        setGwIp(gw_ip);
 8000380:	e13ffd17 	ldw	r4,-12(fp)
 8000384:	8003f800 	call	8003f80 <_ZN9EtherCard7setGwIpEPKh>
    if (dns_ip != 0)
 8000388:	e0bffe17 	ldw	r2,-8(fp)
 800038c:	10000326 	beq	r2,zero,800039c <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x60>
        copyIp(dnsip, dns_ip);
 8000390:	e17ffe17 	ldw	r5,-8(fp)
 8000394:	d126f1c4 	addi	r4,gp,-25657
 8000398:	800552c0 	call	800552c <_ZN9EtherCard6copyIpEPhPKh>
    if(mask != 0)
 800039c:	e0bfff17 	ldw	r2,-4(fp)
 80003a0:	10000326 	beq	r2,zero,80003b0 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x74>
        copyIp(netmask, mask);
 80003a4:	e17fff17 	ldw	r5,-4(fp)
 80003a8:	d126edc4 	addi	r4,gp,-25673
 80003ac:	800552c0 	call	800552c <_ZN9EtherCard6copyIpEPhPKh>
    updateBroadcastAddress();
 80003b0:	8003fc40 	call	8003fc4 <_ZN9EtherCard22updateBroadcastAddressEv>
    delaycnt = 0; //request gateway ARP lookup
 80003b4:	d026f48d 	sth	zero,-25646(gp)
    return true;
 80003b8:	00800044 	movi	r2,1
}
 80003bc:	e037883a 	mov	sp,fp
 80003c0:	dfc00117 	ldw	ra,4(sp)
 80003c4:	df000017 	ldw	fp,0(sp)
 80003c8:	dec00204 	addi	sp,sp,8
 80003cc:	f800283a 	ret

080003d0 <_Z6millisv>:
static uint8_t* dhcpCustomOptionList = NULL;
static DhcpOptionCallback dhcpCustomOptionCallback = NULL;

extern uint8_t allOnes[];// = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

uint32_t millis() {
 80003d0:	defffe04 	addi	sp,sp,-8
 80003d4:	dfc00115 	stw	ra,4(sp)
 80003d8:	df000015 	stw	fp,0(sp)
 80003dc:	d839883a 	mov	fp,sp
	return (uint32_t) clock();
 80003e0:	80061880 	call	8006188 <clock>
}
 80003e4:	e037883a 	mov	sp,fp
 80003e8:	dfc00117 	ldw	ra,4(sp)
 80003ec:	df000017 	ldw	fp,0(sp)
 80003f0:	dec00204 	addi	sp,sp,8
 80003f4:	f800283a 	ret

080003f8 <_ZL8addToBufh>:

static void addToBuf (byte b) {
 80003f8:	defffe04 	addi	sp,sp,-8
 80003fc:	df000115 	stw	fp,4(sp)
 8000400:	df000104 	addi	fp,sp,4
 8000404:	2005883a 	mov	r2,r4
 8000408:	e0bfff05 	stb	r2,-4(fp)
    *bufPtr++ = b;
 800040c:	d0a6fa17 	ldw	r2,-25624(gp)
 8000410:	10c00044 	addi	r3,r2,1
 8000414:	d0e6fa15 	stw	r3,-25624(gp)
 8000418:	e0ffff03 	ldbu	r3,-4(fp)
 800041c:	10c00005 	stb	r3,0(r2)
}
 8000420:	0001883a 	nop
 8000424:	e037883a 	mov	sp,fp
 8000428:	df000017 	ldw	fp,0(sp)
 800042c:	dec00104 	addi	sp,sp,4
 8000430:	f800283a 	ret

08000434 <_ZL8addByteshPKh>:

static void addBytes (byte len, const byte* data) {
 8000434:	defffc04 	addi	sp,sp,-16
 8000438:	dfc00315 	stw	ra,12(sp)
 800043c:	df000215 	stw	fp,8(sp)
 8000440:	df000204 	addi	fp,sp,8
 8000444:	2005883a 	mov	r2,r4
 8000448:	e17fff15 	stw	r5,-4(fp)
 800044c:	e0bffe05 	stb	r2,-8(fp)
    while (len-- > 0)
 8000450:	e0bffe03 	ldbu	r2,-8(fp)
 8000454:	10ffffc4 	addi	r3,r2,-1
 8000458:	e0fffe05 	stb	r3,-8(fp)
 800045c:	10803fcc 	andi	r2,r2,255
 8000460:	1004c03a 	cmpne	r2,r2,zero
 8000464:	10803fcc 	andi	r2,r2,255
 8000468:	10000826 	beq	r2,zero,800048c <_ZL8addByteshPKh+0x58>
        addToBuf(*data++);
 800046c:	e0bfff17 	ldw	r2,-4(fp)
 8000470:	10c00044 	addi	r3,r2,1
 8000474:	e0ffff15 	stw	r3,-4(fp)
 8000478:	10800003 	ldbu	r2,0(r2)
 800047c:	10803fcc 	andi	r2,r2,255
 8000480:	1009883a 	mov	r4,r2
 8000484:	80003f80 	call	80003f8 <_ZL8addToBufh>
static void addToBuf (byte b) {
    *bufPtr++ = b;
}

static void addBytes (byte len, const byte* data) {
    while (len-- > 0)
 8000488:	003ff106 	br	8000450 <_ZL8addByteshPKh+0x1c>
        addToBuf(*data++);
}
 800048c:	0001883a 	nop
 8000490:	e037883a 	mov	sp,fp
 8000494:	dfc00117 	ldw	ra,4(sp)
 8000498:	df000017 	ldw	fp,0(sp)
 800049c:	dec00204 	addi	sp,sp,8
 80004a0:	f800283a 	ret

080004a4 <_ZL9addOptionhhPKh>:

static void addOption (byte opt, byte len, const byte* data) {
 80004a4:	defffb04 	addi	sp,sp,-20
 80004a8:	dfc00415 	stw	ra,16(sp)
 80004ac:	df000315 	stw	fp,12(sp)
 80004b0:	df000304 	addi	fp,sp,12
 80004b4:	2007883a 	mov	r3,r4
 80004b8:	2805883a 	mov	r2,r5
 80004bc:	e1bfff15 	stw	r6,-4(fp)
 80004c0:	e0fffd05 	stb	r3,-12(fp)
 80004c4:	e0bffe05 	stb	r2,-8(fp)
    addToBuf(opt);
 80004c8:	e0bffd03 	ldbu	r2,-12(fp)
 80004cc:	1009883a 	mov	r4,r2
 80004d0:	80003f80 	call	80003f8 <_ZL8addToBufh>
    addToBuf(len);
 80004d4:	e0bffe03 	ldbu	r2,-8(fp)
 80004d8:	1009883a 	mov	r4,r2
 80004dc:	80003f80 	call	80003f8 <_ZL8addToBufh>
    addBytes(len, data);
 80004e0:	e0bffe03 	ldbu	r2,-8(fp)
 80004e4:	e17fff17 	ldw	r5,-4(fp)
 80004e8:	1009883a 	mov	r4,r2
 80004ec:	80004340 	call	8000434 <_ZL8addByteshPKh>
}
 80004f0:	0001883a 	nop
 80004f4:	e037883a 	mov	sp,fp
 80004f8:	dfc00117 	ldw	ra,4(sp)
 80004fc:	df000017 	ldw	fp,0(sp)
 8000500:	dec00204 	addi	sp,sp,8
 8000504:	f800283a 	ret

08000508 <_ZL17send_dhcp_messagePh>:
#define DHCP_OPT_CLIENT_IDENTIFIER      61
#define DHCP_OPT_END                    255

#define DHCP_HTYPE_ETHER 1

static void send_dhcp_message(uint8_t *requestip) {
 8000508:	defff904 	addi	sp,sp,-28
 800050c:	dfc00615 	stw	ra,24(sp)
 8000510:	df000515 	stw	fp,20(sp)
 8000514:	df000504 	addi	fp,sp,20
 8000518:	e13fff15 	stw	r4,-4(fp)

    memset(gPB, 0, UDP_DATA_P + sizeof( DHCPdata ));
 800051c:	00804584 	movi	r2,278
 8000520:	100d883a 	mov	r6,r2
 8000524:	000b883a 	mov	r5,zero
 8000528:	010200b4 	movhi	r4,2050
 800052c:	21254b04 	addi	r4,r4,-27348
 8000530:	80063b40 	call	80063b4 <memset>

    EtherCard::udpPrepare(DHCP_CLIENT_PORT,
                          (dhcpState == DHCP_STATE_BOUND ? EtherCard::dhcpip : allOnes),
 8000534:	d0a6f503 	ldbu	r2,-25644(gp)

static void send_dhcp_message(uint8_t *requestip) {

    memset(gPB, 0, UDP_DATA_P + sizeof( DHCPdata ));

    EtherCard::udpPrepare(DHCP_CLIENT_PORT,
 8000538:	10803fcc 	andi	r2,r2,255
 800053c:	108000d8 	cmpnei	r2,r2,3
 8000540:	1000021e 	bne	r2,zero,800054c <_ZL17send_dhcp_messagePh+0x44>
 8000544:	d0a6f0c4 	addi	r2,gp,-25661
 8000548:	00000206 	br	8000554 <_ZL17send_dhcp_messagePh+0x4c>
 800054c:	00820074 	movhi	r2,2049
 8000550:	109e18c4 	addi	r2,r2,30819
                          (dhcpState == DHCP_STATE_BOUND ? EtherCard::dhcpip : allOnes),
                          DHCP_SERVER_PORT);
 8000554:	018010c4 	movi	r6,67
 8000558:	100b883a 	mov	r5,r2
 800055c:	01001104 	movi	r4,68
 8000560:	800394c0 	call	800394c <_ZN9EtherCard10udpPrepareEtPKht>

    // If we ever don't do this, the DHCP renewal gets sent to whatever random
    // destmacaddr was used by other code. Rather than cache the MAC address of
    // the DHCP server, just force a broadcast here in all cases.
    EtherCard::copyMac(gPB + ETH_DST_MAC, allOnes); //force broadcast mac
 8000564:	01420074 	movhi	r5,2049
 8000568:	295e18c4 	addi	r5,r5,30819
 800056c:	010200b4 	movhi	r4,2050
 8000570:	21254b04 	addi	r4,r4,-27348
 8000574:	80054ec0 	call	80054ec <_ZN9EtherCard7copyMacEPhPKh>

    // Build DHCP Packet from buf[UDP_DATA_P]
    DHCPdata *dhcpPtr = (DHCPdata*) (gPB + UDP_DATA_P);
 8000578:	008200b4 	movhi	r2,2050
 800057c:	10a55584 	addi	r2,r2,-27306
 8000580:	e0bffe15 	stw	r2,-8(fp)
    dhcpPtr->op = DHCP_BOOTREQUEST;
 8000584:	e0bffe17 	ldw	r2,-8(fp)
 8000588:	00c00044 	movi	r3,1
 800058c:	10c00005 	stb	r3,0(r2)
    dhcpPtr->htype = 1;
 8000590:	e0bffe17 	ldw	r2,-8(fp)
 8000594:	00c00044 	movi	r3,1
 8000598:	10c00045 	stb	r3,1(r2)
    dhcpPtr->hlen = 6;
 800059c:	e0bffe17 	ldw	r2,-8(fp)
 80005a0:	00c00184 	movi	r3,6
 80005a4:	10c00085 	stb	r3,2(r2)
    dhcpPtr->xid = currentXid;
 80005a8:	d0e6f617 	ldw	r3,-25640(gp)
 80005ac:	e0bffe17 	ldw	r2,-8(fp)
 80005b0:	10c00115 	stw	r3,4(r2)
    if (dhcpState == DHCP_STATE_BOUND) {
 80005b4:	d0a6f503 	ldbu	r2,-25644(gp)
 80005b8:	10803fcc 	andi	r2,r2,255
 80005bc:	108000d8 	cmpnei	r2,r2,3
 80005c0:	1000051e 	bne	r2,zero,80005d8 <_ZL17send_dhcp_messagePh+0xd0>
        EtherCard::copyIp(dhcpPtr->ciaddr, EtherCard::myip);
 80005c4:	e0bffe17 	ldw	r2,-8(fp)
 80005c8:	10800304 	addi	r2,r2,12
 80005cc:	d166ecc4 	addi	r5,gp,-25677
 80005d0:	1009883a 	mov	r4,r2
 80005d4:	800552c0 	call	800552c <_ZN9EtherCard6copyIpEPhPKh>
    }
    EtherCard::copyMac(dhcpPtr->chaddr, EtherCard::mymac);
 80005d8:	e0bffe17 	ldw	r2,-8(fp)
 80005dc:	10800704 	addi	r2,r2,28
 80005e0:	d166eb44 	addi	r5,gp,-25683
 80005e4:	1009883a 	mov	r4,r2
 80005e8:	80054ec0 	call	80054ec <_ZN9EtherCard7copyMacEPhPKh>

    // options defined as option, length, value
    bufPtr = gPB + UDP_DATA_P + sizeof( DHCPdata );
 80005ec:	00c04584 	movi	r3,278
 80005f0:	008200b4 	movhi	r2,2050
 80005f4:	10a54b04 	addi	r2,r2,-27348
 80005f8:	1885883a 	add	r2,r3,r2
 80005fc:	d0a6fa15 	stw	r2,-25624(gp)
    // DHCP magic cookie
    static const uint8_t cookie[] = { 0x63,0x82,0x53,0x63 };
    for (byte i = 0; i < sizeof(cookie); i++)
 8000600:	e03ffb05 	stb	zero,-20(fp)
 8000604:	e0bffb03 	ldbu	r2,-20(fp)
 8000608:	10800128 	cmpgeui	r2,r2,4
 800060c:	10000b1e 	bne	r2,zero,800063c <_ZL17send_dhcp_messagePh+0x134>
        addToBuf((unsigned char)cookie[i]);
 8000610:	e0fffb03 	ldbu	r3,-20(fp)
 8000614:	d0a00084 	addi	r2,gp,-32766
 8000618:	1885883a 	add	r2,r3,r2
 800061c:	10800003 	ldbu	r2,0(r2)
 8000620:	10803fcc 	andi	r2,r2,255
 8000624:	1009883a 	mov	r4,r2
 8000628:	80003f80 	call	80003f8 <_ZL8addToBufh>

    // options defined as option, length, value
    bufPtr = gPB + UDP_DATA_P + sizeof( DHCPdata );
    // DHCP magic cookie
    static const uint8_t cookie[] = { 0x63,0x82,0x53,0x63 };
    for (byte i = 0; i < sizeof(cookie); i++)
 800062c:	e0bffb03 	ldbu	r2,-20(fp)
 8000630:	10800044 	addi	r2,r2,1
 8000634:	e0bffb05 	stb	r2,-20(fp)
 8000638:	003ff206 	br	8000604 <_ZL17send_dhcp_messagePh+0xfc>
        addToBuf((unsigned char)cookie[i]);
    addToBuf(DHCP_OPT_MESSAGE_TYPE); // DHCP_STATE_SELECTING, DHCP_STATE_REQUESTING
 800063c:	01000d44 	movi	r4,53
 8000640:	80003f80 	call	80003f8 <_ZL8addToBufh>
    addToBuf(1);   // Length
 8000644:	01000044 	movi	r4,1
 8000648:	80003f80 	call	80003f8 <_ZL8addToBufh>
    addToBuf(dhcpState == DHCP_STATE_INIT ? DHCP_DISCOVER : DHCP_REQUEST);
 800064c:	d0a6f503 	ldbu	r2,-25644(gp)
 8000650:	10803fcc 	andi	r2,r2,255
 8000654:	1000021e 	bne	r2,zero,8000660 <_ZL17send_dhcp_messagePh+0x158>
 8000658:	00800044 	movi	r2,1
 800065c:	00000106 	br	8000664 <_ZL17send_dhcp_messagePh+0x15c>
 8000660:	008000c4 	movi	r2,3
 8000664:	1009883a 	mov	r4,r2
 8000668:	80003f80 	call	80003f8 <_ZL8addToBufh>

    // Client Identifier Option, this is the client mac address
    addToBuf(DHCP_OPT_CLIENT_IDENTIFIER);
 800066c:	01000f44 	movi	r4,61
 8000670:	80003f80 	call	80003f8 <_ZL8addToBufh>
    addToBuf(1 + ETH_LEN); // Length (hardware type + client MAC)
 8000674:	010001c4 	movi	r4,7
 8000678:	80003f80 	call	80003f8 <_ZL8addToBufh>
    addToBuf(DHCP_HTYPE_ETHER);
 800067c:	01000044 	movi	r4,1
 8000680:	80003f80 	call	80003f8 <_ZL8addToBufh>
    addBytes(ETH_LEN, EtherCard::mymac);
 8000684:	d166eb44 	addi	r5,gp,-25683
 8000688:	01000184 	movi	r4,6
 800068c:	80004340 	call	8000434 <_ZL8addByteshPKh>

    if (hostname[0]) {
 8000690:	00820074 	movhi	r2,2049
 8000694:	10976204 	addi	r2,r2,23944
 8000698:	10800003 	ldbu	r2,0(r2)
 800069c:	10803fcc 	andi	r2,r2,255
 80006a0:	1080201c 	xori	r2,r2,128
 80006a4:	10bfe004 	addi	r2,r2,-128
 80006a8:	10000926 	beq	r2,zero,80006d0 <_ZL17send_dhcp_messagePh+0x1c8>
        addOption(DHCP_OPT_HOSTNAME, strlen(hostname), (byte*) hostname);
 80006ac:	01020074 	movhi	r4,2049
 80006b0:	21176204 	addi	r4,r4,23944
 80006b4:	800663c0 	call	800663c <strlen>
 80006b8:	10803fcc 	andi	r2,r2,255
 80006bc:	01820074 	movhi	r6,2049
 80006c0:	31976204 	addi	r6,r6,23944
 80006c4:	100b883a 	mov	r5,r2
 80006c8:	01000304 	movi	r4,12
 80006cc:	80004a40 	call	80004a4 <_ZL9addOptionhhPKh>
    }

    if (requestip != NULL) {
 80006d0:	e0bfff17 	ldw	r2,-4(fp)
 80006d4:	10000826 	beq	r2,zero,80006f8 <_ZL17send_dhcp_messagePh+0x1f0>
        addOption(DHCP_OPT_REQUESTED_ADDRESS, IP_LEN, requestip);
 80006d8:	e1bfff17 	ldw	r6,-4(fp)
 80006dc:	01400104 	movi	r5,4
 80006e0:	01000c84 	movi	r4,50
 80006e4:	80004a40 	call	80004a4 <_ZL9addOptionhhPKh>
        addOption(DHCP_OPT_SERVER_IDENTIFIER, IP_LEN, EtherCard::dhcpip);
 80006e8:	d1a6f0c4 	addi	r6,gp,-25661
 80006ec:	01400104 	movi	r5,4
 80006f0:	01000d84 	movi	r4,54
 80006f4:	80004a40 	call	80004a4 <_ZL9addOptionhhPKh>
    }

    // Additional info in parameter list - minimal list for what we need
    byte len = 3;
 80006f8:	008000c4 	movi	r2,3
 80006fc:	e0bffb45 	stb	r2,-19(fp)
    if (dhcpCustomOptionList) {
 8000700:	d0a6fb17 	ldw	r2,-25620(gp)
 8000704:	10000e26 	beq	r2,zero,8000740 <_ZL17send_dhcp_messagePh+0x238>
        uint8_t *p = dhcpCustomOptionList;
 8000708:	d0a6fb17 	ldw	r2,-25620(gp)
 800070c:	e0bffc15 	stw	r2,-16(fp)
        while (*p++ != 0) len++;
 8000710:	e0bffc17 	ldw	r2,-16(fp)
 8000714:	10c00044 	addi	r3,r2,1
 8000718:	e0fffc15 	stw	r3,-16(fp)
 800071c:	10800003 	ldbu	r2,0(r2)
 8000720:	10803fcc 	andi	r2,r2,255
 8000724:	1004c03a 	cmpne	r2,r2,zero
 8000728:	10803fcc 	andi	r2,r2,255
 800072c:	10000426 	beq	r2,zero,8000740 <_ZL17send_dhcp_messagePh+0x238>
 8000730:	e0bffb43 	ldbu	r2,-19(fp)
 8000734:	10800044 	addi	r2,r2,1
 8000738:	e0bffb45 	stb	r2,-19(fp)
 800073c:	003ff406 	br	8000710 <_ZL17send_dhcp_messagePh+0x208>
    }
    addToBuf(DHCP_OPT_PARAMETER_REQUEST_LIST);
 8000740:	01000dc4 	movi	r4,55
 8000744:	80003f80 	call	80003f8 <_ZL8addToBufh>
    addToBuf(len);    // Length
 8000748:	e0bffb43 	ldbu	r2,-19(fp)
 800074c:	1009883a 	mov	r4,r2
 8000750:	80003f80 	call	80003f8 <_ZL8addToBufh>
    addToBuf(DHCP_OPT_SUBNET_MASK);
 8000754:	01000044 	movi	r4,1
 8000758:	80003f80 	call	80003f8 <_ZL8addToBufh>
    addToBuf(DHCP_OPT_ROUTERS);
 800075c:	010000c4 	movi	r4,3
 8000760:	80003f80 	call	80003f8 <_ZL8addToBufh>
    addToBuf(DHCP_OPT_DOMAIN_NAME_SERVERS);
 8000764:	01000184 	movi	r4,6
 8000768:	80003f80 	call	80003f8 <_ZL8addToBufh>
    if (dhcpCustomOptionList) {
 800076c:	d0a6fb17 	ldw	r2,-25620(gp)
 8000770:	10000e26 	beq	r2,zero,80007ac <_ZL17send_dhcp_messagePh+0x2a4>
        uint8_t *p = dhcpCustomOptionList; // Custom option list
 8000774:	d0a6fb17 	ldw	r2,-25620(gp)
 8000778:	e0bffd15 	stw	r2,-12(fp)
        while (*p != 0) {
 800077c:	e0bffd17 	ldw	r2,-12(fp)
 8000780:	10800003 	ldbu	r2,0(r2)
 8000784:	10803fcc 	andi	r2,r2,255
 8000788:	10000826 	beq	r2,zero,80007ac <_ZL17send_dhcp_messagePh+0x2a4>
            addToBuf(*p++);
 800078c:	e0bffd17 	ldw	r2,-12(fp)
 8000790:	10c00044 	addi	r3,r2,1
 8000794:	e0fffd15 	stw	r3,-12(fp)
 8000798:	10800003 	ldbu	r2,0(r2)
 800079c:	10803fcc 	andi	r2,r2,255
 80007a0:	1009883a 	mov	r4,r2
 80007a4:	80003f80 	call	80003f8 <_ZL8addToBufh>
    addToBuf(DHCP_OPT_SUBNET_MASK);
    addToBuf(DHCP_OPT_ROUTERS);
    addToBuf(DHCP_OPT_DOMAIN_NAME_SERVERS);
    if (dhcpCustomOptionList) {
        uint8_t *p = dhcpCustomOptionList; // Custom option list
        while (*p != 0) {
 80007a8:	003ff406 	br	800077c <_ZL17send_dhcp_messagePh+0x274>
            addToBuf(*p++);
        }
    }
    addToBuf(DHCP_OPT_END);
 80007ac:	01003fc4 	movi	r4,255
 80007b0:	80003f80 	call	80003f8 <_ZL8addToBufh>

    // packet size will be under 300 bytes
    EtherCard::udpTransmit((bufPtr - gPB) - UDP_DATA_P);
 80007b4:	d0a6fa17 	ldw	r2,-25624(gp)
 80007b8:	1007883a 	mov	r3,r2
 80007bc:	008200b4 	movhi	r2,2050
 80007c0:	10a54b04 	addi	r2,r2,-27348
 80007c4:	1009883a 	mov	r4,r2
 80007c8:	00bff584 	movi	r2,-42
 80007cc:	1105c83a 	sub	r2,r2,r4
 80007d0:	1885883a 	add	r2,r3,r2
 80007d4:	10bfffcc 	andi	r2,r2,65535
 80007d8:	1009883a 	mov	r4,r2
 80007dc:	8003ad40 	call	8003ad4 <_ZN9EtherCard11udpTransmitEt>
}
 80007e0:	0001883a 	nop
 80007e4:	e037883a 	mov	sp,fp
 80007e8:	dfc00117 	ldw	ra,4(sp)
 80007ec:	df000017 	ldw	fp,0(sp)
 80007f0:	dec00204 	addi	sp,sp,8
 80007f4:	f800283a 	ret

080007f8 <_ZL18process_dhcp_offertPh>:

static void process_dhcp_offer(uint16_t len, uint8_t *offeredip) {
 80007f8:	defff904 	addi	sp,sp,-28
 80007fc:	dfc00615 	stw	ra,24(sp)
 8000800:	df000515 	stw	fp,20(sp)
 8000804:	df000504 	addi	fp,sp,20
 8000808:	2005883a 	mov	r2,r4
 800080c:	e17fff15 	stw	r5,-4(fp)
 8000810:	e0bffe0d 	sth	r2,-8(fp)
    // Map struct onto payload
    DHCPdata *dhcpPtr = (DHCPdata*) (gPB + UDP_DATA_P);
 8000814:	008200b4 	movhi	r2,2050
 8000818:	10a55584 	addi	r2,r2,-27306
 800081c:	e0bffc15 	stw	r2,-16(fp)

    // Offered IP address is in yiaddr
    EtherCard::copyIp(offeredip, dhcpPtr->yiaddr);
 8000820:	e0bffc17 	ldw	r2,-16(fp)
 8000824:	10800404 	addi	r2,r2,16
 8000828:	100b883a 	mov	r5,r2
 800082c:	e13fff17 	ldw	r4,-4(fp)
 8000830:	800552c0 	call	800552c <_ZN9EtherCard6copyIpEPhPKh>

    // Search for the server IP
    byte *ptr = (byte*) (dhcpPtr + 1) + 4;
 8000834:	e0bffc17 	ldw	r2,-16(fp)
 8000838:	10803c04 	addi	r2,r2,240
 800083c:	e0bffb15 	stw	r2,-20(fp)
    do {
        byte option = *ptr++;
 8000840:	e0bffb17 	ldw	r2,-20(fp)
 8000844:	10c00044 	addi	r3,r2,1
 8000848:	e0fffb15 	stw	r3,-20(fp)
 800084c:	10800003 	ldbu	r2,0(r2)
 8000850:	e0bffd05 	stb	r2,-12(fp)
        byte optionLen = *ptr++;
 8000854:	e0bffb17 	ldw	r2,-20(fp)
 8000858:	10c00044 	addi	r3,r2,1
 800085c:	e0fffb15 	stw	r3,-20(fp)
 8000860:	10800003 	ldbu	r2,0(r2)
 8000864:	e0bffd45 	stb	r2,-11(fp)
        if (option == DHCP_OPT_SERVER_IDENTIFIER) {
 8000868:	e0bffd03 	ldbu	r2,-12(fp)
 800086c:	10800d98 	cmpnei	r2,r2,54
 8000870:	1000051e 	bne	r2,zero,8000888 <_ZL18process_dhcp_offertPh+0x90>
            EtherCard::copyIp(EtherCard::dhcpip, ptr);
 8000874:	e17ffb17 	ldw	r5,-20(fp)
 8000878:	d126f0c4 	addi	r4,gp,-25661
 800087c:	800552c0 	call	800552c <_ZN9EtherCard6copyIpEPhPKh>
            break;
 8000880:	0001883a 	nop
        }
        ptr += optionLen;
    } while (ptr < gPB + len);
}
 8000884:	00000b06 	br	80008b4 <_ZL18process_dhcp_offertPh+0xbc>
        byte optionLen = *ptr++;
        if (option == DHCP_OPT_SERVER_IDENTIFIER) {
            EtherCard::copyIp(EtherCard::dhcpip, ptr);
            break;
        }
        ptr += optionLen;
 8000888:	e0bffd43 	ldbu	r2,-11(fp)
 800088c:	e0fffb17 	ldw	r3,-20(fp)
 8000890:	1885883a 	add	r2,r3,r2
 8000894:	e0bffb15 	stw	r2,-20(fp)
    } while (ptr < gPB + len);
 8000898:	e0fffe0b 	ldhu	r3,-8(fp)
 800089c:	008200b4 	movhi	r2,2050
 80008a0:	10a54b04 	addi	r2,r2,-27348
 80008a4:	1885883a 	add	r2,r3,r2
 80008a8:	e0fffb17 	ldw	r3,-20(fp)
 80008ac:	1880012e 	bgeu	r3,r2,80008b4 <_ZL18process_dhcp_offertPh+0xbc>
    // Offered IP address is in yiaddr
    EtherCard::copyIp(offeredip, dhcpPtr->yiaddr);

    // Search for the server IP
    byte *ptr = (byte*) (dhcpPtr + 1) + 4;
    do {
 80008b0:	003fe306 	br	8000840 <_ZL18process_dhcp_offertPh+0x48>
            EtherCard::copyIp(EtherCard::dhcpip, ptr);
            break;
        }
        ptr += optionLen;
    } while (ptr < gPB + len);
}
 80008b4:	0001883a 	nop
 80008b8:	e037883a 	mov	sp,fp
 80008bc:	dfc00117 	ldw	ra,4(sp)
 80008c0:	df000017 	ldw	fp,0(sp)
 80008c4:	dec00204 	addi	sp,sp,8
 80008c8:	f800283a 	ret

080008cc <_ZL16process_dhcp_ackt>:

static void process_dhcp_ack(uint16_t len) {
 80008cc:	defff804 	addi	sp,sp,-32
 80008d0:	dfc00715 	stw	ra,28(sp)
 80008d4:	df000615 	stw	fp,24(sp)
 80008d8:	df000604 	addi	fp,sp,24
 80008dc:	2005883a 	mov	r2,r4
 80008e0:	e0bfff0d 	sth	r2,-4(fp)
    // Map struct onto payload
    DHCPdata *dhcpPtr = (DHCPdata*) (gPB + UDP_DATA_P);
 80008e4:	008200b4 	movhi	r2,2050
 80008e8:	10a55584 	addi	r2,r2,-27306
 80008ec:	e0bffd15 	stw	r2,-12(fp)

    // Allocated IP address is in yiaddr
    EtherCard::copyIp(EtherCard::myip, dhcpPtr->yiaddr);
 80008f0:	e0bffd17 	ldw	r2,-12(fp)
 80008f4:	10800404 	addi	r2,r2,16
 80008f8:	100b883a 	mov	r5,r2
 80008fc:	d126ecc4 	addi	r4,gp,-25677
 8000900:	800552c0 	call	800552c <_ZN9EtherCard6copyIpEPhPKh>

    // Scan through variable length option list identifying options we want
    byte *ptr = (byte*) (dhcpPtr + 1) + 4;
 8000904:	e0bffd17 	ldw	r2,-12(fp)
 8000908:	10803c04 	addi	r2,r2,240
 800090c:	e0bffa15 	stw	r2,-24(fp)
    bool done = false;
 8000910:	e03ffb05 	stb	zero,-20(fp)
    do {
        byte option = *ptr++;
 8000914:	e0bffa17 	ldw	r2,-24(fp)
 8000918:	10c00044 	addi	r3,r2,1
 800091c:	e0fffa15 	stw	r3,-24(fp)
 8000920:	10800003 	ldbu	r2,0(r2)
 8000924:	e0bffe05 	stb	r2,-8(fp)
        byte optionLen = *ptr++;
 8000928:	e0bffa17 	ldw	r2,-24(fp)
 800092c:	10c00044 	addi	r3,r2,1
 8000930:	e0fffa15 	stw	r3,-24(fp)
 8000934:	10800003 	ldbu	r2,0(r2)
 8000938:	e0bffe45 	stb	r2,-7(fp)
        switch (option) {
 800093c:	e0bffe03 	ldbu	r2,-8(fp)
 8000940:	10c001a0 	cmpeqi	r3,r2,6
 8000944:	1800161e 	bne	r3,zero,80009a0 <_ZL16process_dhcp_ackt+0xd4>
 8000948:	10c001c8 	cmpgei	r3,r2,7
 800094c:	1800051e 	bne	r3,zero,8000964 <_ZL16process_dhcp_ackt+0x98>
 8000950:	10c00060 	cmpeqi	r3,r2,1
 8000954:	18000a1e 	bne	r3,zero,8000980 <_ZL16process_dhcp_ackt+0xb4>
 8000958:	108000e0 	cmpeqi	r2,r2,3
 800095c:	10000c1e 	bne	r2,zero,8000990 <_ZL16process_dhcp_ackt+0xc4>
 8000960:	00003106 	br	8000a28 <_ZL16process_dhcp_ackt+0x15c>
 8000964:	10c00ea0 	cmpeqi	r3,r2,58
 8000968:	1800111e 	bne	r3,zero,80009b0 <_ZL16process_dhcp_ackt+0xe4>
 800096c:	10c03fe0 	cmpeqi	r3,r2,255
 8000970:	18002a1e 	bne	r3,zero,8000a1c <_ZL16process_dhcp_ackt+0x150>
 8000974:	10800ce0 	cmpeqi	r2,r2,51
 8000978:	10000d1e 	bne	r2,zero,80009b0 <_ZL16process_dhcp_ackt+0xe4>
 800097c:	00002a06 	br	8000a28 <_ZL16process_dhcp_ackt+0x15c>
        case DHCP_OPT_SUBNET_MASK:
            EtherCard::copyIp(EtherCard::netmask, ptr);
 8000980:	e17ffa17 	ldw	r5,-24(fp)
 8000984:	d126edc4 	addi	r4,gp,-25673
 8000988:	800552c0 	call	800552c <_ZN9EtherCard6copyIpEPhPKh>
            break;
 800098c:	00004006 	br	8000a90 <_ZL16process_dhcp_ackt+0x1c4>
        case DHCP_OPT_ROUTERS:
            EtherCard::copyIp(EtherCard::gwip, ptr);
 8000990:	e17ffa17 	ldw	r5,-24(fp)
 8000994:	d126efc4 	addi	r4,gp,-25665
 8000998:	800552c0 	call	800552c <_ZN9EtherCard6copyIpEPhPKh>
            break;
 800099c:	00003c06 	br	8000a90 <_ZL16process_dhcp_ackt+0x1c4>
        case DHCP_OPT_DOMAIN_NAME_SERVERS:
            EtherCard::copyIp(EtherCard::dnsip, ptr);
 80009a0:	e17ffa17 	ldw	r5,-24(fp)
 80009a4:	d126f1c4 	addi	r4,gp,-25657
 80009a8:	800552c0 	call	800552c <_ZN9EtherCard6copyIpEPhPKh>
            break;
 80009ac:	00003806 	br	8000a90 <_ZL16process_dhcp_ackt+0x1c4>
        case DHCP_OPT_LEASE_TIME:
        case DHCP_OPT_RENEWAL_TIME:
            leaseTime = 0;
 80009b0:	d026f915 	stw	zero,-25628(gp)
            for (byte i = 0; i<4; i++)
 80009b4:	e03ffb45 	stb	zero,-19(fp)
 80009b8:	e0bffb43 	ldbu	r2,-19(fp)
 80009bc:	10800128 	cmpgeui	r2,r2,4
 80009c0:	10000d1e 	bne	r2,zero,80009f8 <_ZL16process_dhcp_ackt+0x12c>
                leaseTime = (leaseTime << 8) + ptr[i];
 80009c4:	d0a6f917 	ldw	r2,-25628(gp)
 80009c8:	1006923a 	slli	r3,r2,8
 80009cc:	e0bffb43 	ldbu	r2,-19(fp)
 80009d0:	e13ffa17 	ldw	r4,-24(fp)
 80009d4:	2085883a 	add	r2,r4,r2
 80009d8:	10800003 	ldbu	r2,0(r2)
 80009dc:	10803fcc 	andi	r2,r2,255
 80009e0:	1885883a 	add	r2,r3,r2
 80009e4:	d0a6f915 	stw	r2,-25628(gp)
            EtherCard::copyIp(EtherCard::dnsip, ptr);
            break;
        case DHCP_OPT_LEASE_TIME:
        case DHCP_OPT_RENEWAL_TIME:
            leaseTime = 0;
            for (byte i = 0; i<4; i++)
 80009e8:	e0bffb43 	ldbu	r2,-19(fp)
 80009ec:	10800044 	addi	r2,r2,1
 80009f0:	e0bffb45 	stb	r2,-19(fp)
 80009f4:	003ff006 	br	80009b8 <_ZL16process_dhcp_ackt+0xec>
                leaseTime = (leaseTime << 8) + ptr[i];
            if (leaseTime != DHCP_INFINITE_LEASE) {
 80009f8:	d0a6f917 	ldw	r2,-25628(gp)
 80009fc:	10bfffe0 	cmpeqi	r2,r2,-1
 8000a00:	1000221e 	bne	r2,zero,8000a8c <_ZL16process_dhcp_ackt+0x1c0>
                leaseTime *= 1000;      // milliseconds
 8000a04:	d0a6f917 	ldw	r2,-25628(gp)
 8000a08:	0140fa04 	movi	r5,1000
 8000a0c:	1009883a 	mov	r4,r2
 8000a10:	80057b40 	call	80057b4 <__mulsi3>
 8000a14:	d0a6f915 	stw	r2,-25628(gp)
            }
            break;
 8000a18:	00001c06 	br	8000a8c <_ZL16process_dhcp_ackt+0x1c0>
        case DHCP_OPT_END:
            done = true;
 8000a1c:	00800044 	movi	r2,1
 8000a20:	e0bffb05 	stb	r2,-20(fp)
            break;
 8000a24:	00001a06 	br	8000a90 <_ZL16process_dhcp_ackt+0x1c4>
        default: {
            // Is is a custom configured option?
            if (dhcpCustomOptionList) {
 8000a28:	d0a6fb17 	ldw	r2,-25620(gp)
 8000a2c:	10001826 	beq	r2,zero,8000a90 <_ZL16process_dhcp_ackt+0x1c4>
                uint8_t *p = dhcpCustomOptionList;
 8000a30:	d0a6fb17 	ldw	r2,-25620(gp)
 8000a34:	e0bffc15 	stw	r2,-16(fp)
                while (*p != 0) {
 8000a38:	e0bffc17 	ldw	r2,-16(fp)
 8000a3c:	10800003 	ldbu	r2,0(r2)
 8000a40:	10803fcc 	andi	r2,r2,255
 8000a44:	10001226 	beq	r2,zero,8000a90 <_ZL16process_dhcp_ackt+0x1c4>
                    if (option == *p) {
 8000a48:	e0bffc17 	ldw	r2,-16(fp)
 8000a4c:	10800003 	ldbu	r2,0(r2)
 8000a50:	10c03fcc 	andi	r3,r2,255
 8000a54:	e0bffe03 	ldbu	r2,-8(fp)
 8000a58:	1880081e 	bne	r3,r2,8000a7c <_ZL16process_dhcp_ackt+0x1b0>
                        dhcpCustomOptionCallback(option, ptr, optionLen);
 8000a5c:	d0a6fc17 	ldw	r2,-25616(gp)
 8000a60:	e0fffe03 	ldbu	r3,-8(fp)
 8000a64:	e13ffe43 	ldbu	r4,-7(fp)
 8000a68:	200d883a 	mov	r6,r4
 8000a6c:	e17ffa17 	ldw	r5,-24(fp)
 8000a70:	1809883a 	mov	r4,r3
 8000a74:	103ee83a 	callr	r2
                        break;
 8000a78:	00000506 	br	8000a90 <_ZL16process_dhcp_ackt+0x1c4>
                    }
                    p++;
 8000a7c:	e0bffc17 	ldw	r2,-16(fp)
 8000a80:	10800044 	addi	r2,r2,1
 8000a84:	e0bffc15 	stw	r2,-16(fp)
            break;
        default: {
            // Is is a custom configured option?
            if (dhcpCustomOptionList) {
                uint8_t *p = dhcpCustomOptionList;
                while (*p != 0) {
 8000a88:	003feb06 	br	8000a38 <_ZL16process_dhcp_ackt+0x16c>
            for (byte i = 0; i<4; i++)
                leaseTime = (leaseTime << 8) + ptr[i];
            if (leaseTime != DHCP_INFINITE_LEASE) {
                leaseTime *= 1000;      // milliseconds
            }
            break;
 8000a8c:	0001883a 	nop
                    p++;
                }
            }
        }
    }
    ptr += optionLen;
 8000a90:	e0bffe43 	ldbu	r2,-7(fp)
 8000a94:	e0fffa17 	ldw	r3,-24(fp)
 8000a98:	1885883a 	add	r2,r3,r2
 8000a9c:	e0bffa15 	stw	r2,-24(fp)
}
while (!done && ptr < gPB + len);
 8000aa0:	e0bffb03 	ldbu	r2,-20(fp)
 8000aa4:	1000071e 	bne	r2,zero,8000ac4 <_ZL16process_dhcp_ackt+0x1f8>
 8000aa8:	e0ffff0b 	ldhu	r3,-4(fp)
 8000aac:	008200b4 	movhi	r2,2050
 8000ab0:	10a54b04 	addi	r2,r2,-27348
 8000ab4:	1885883a 	add	r2,r3,r2
 8000ab8:	e0fffa17 	ldw	r3,-24(fp)
 8000abc:	1880012e 	bgeu	r3,r2,8000ac4 <_ZL16process_dhcp_ackt+0x1f8>
    EtherCard::copyIp(EtherCard::myip, dhcpPtr->yiaddr);

    // Scan through variable length option list identifying options we want
    byte *ptr = (byte*) (dhcpPtr + 1) + 4;
    bool done = false;
    do {
 8000ac0:	003f9406 	br	8000914 <_ZL16process_dhcp_ackt+0x48>
        }
    }
    ptr += optionLen;
}
while (!done && ptr < gPB + len);
}
 8000ac4:	0001883a 	nop
 8000ac8:	e037883a 	mov	sp,fp
 8000acc:	dfc00117 	ldw	ra,4(sp)
 8000ad0:	df000017 	ldw	fp,0(sp)
 8000ad4:	dec00204 	addi	sp,sp,8
 8000ad8:	f800283a 	ret

08000adc <_ZL26dhcp_received_message_typeth>:

static bool dhcp_received_message_type (uint16_t len, byte msgType) {
 8000adc:	defff904 	addi	sp,sp,-28
 8000ae0:	dfc00615 	stw	ra,24(sp)
 8000ae4:	df000515 	stw	fp,20(sp)
 8000ae8:	df000504 	addi	fp,sp,20
 8000aec:	2007883a 	mov	r3,r4
 8000af0:	2805883a 	mov	r2,r5
 8000af4:	e0fffe0d 	sth	r3,-8(fp)
 8000af8:	e0bfff05 	stb	r2,-4(fp)
    // Map struct onto payload
    DHCPdata *dhcpPtr = (DHCPdata*) (gPB + UDP_DATA_P);
 8000afc:	008200b4 	movhi	r2,2050
 8000b00:	10a55584 	addi	r2,r2,-27306
 8000b04:	e0bffc15 	stw	r2,-16(fp)
//    	for(int i = 0; i < len; i++)
//    		printf("%d (%x), ", gPB[i], i);
//    	printf("\n");
//    }

    if (len >= 70 && gPB[UDP_SRC_PORT_L_P] == DHCP_SERVER_PORT &&
 8000b08:	e0bffe0b 	ldhu	r2,-8(fp)
 8000b0c:	108011b0 	cmpltui	r2,r2,70
 8000b10:	1000381e 	bne	r2,zero,8000bf4 <_ZL26dhcp_received_message_typeth+0x118>
 8000b14:	008200b4 	movhi	r2,2050
 8000b18:	10a54b04 	addi	r2,r2,-27348
 8000b1c:	108008c3 	ldbu	r2,35(r2)
 8000b20:	10803fcc 	andi	r2,r2,255
 8000b24:	108010d8 	cmpnei	r2,r2,67
 8000b28:	1000321e 	bne	r2,zero,8000bf4 <_ZL26dhcp_received_message_typeth+0x118>
            dhcpPtr->xid == currentXid ) {
 8000b2c:	e0bffc17 	ldw	r2,-16(fp)
 8000b30:	10c00117 	ldw	r3,4(r2)
 8000b34:	d0a6f617 	ldw	r2,-25640(gp)
//    	for(int i = 0; i < len; i++)
//    		printf("%d (%x), ", gPB[i], i);
//    	printf("\n");
//    }

    if (len >= 70 && gPB[UDP_SRC_PORT_L_P] == DHCP_SERVER_PORT &&
 8000b38:	18802e1e 	bne	r3,r2,8000bf4 <_ZL26dhcp_received_message_typeth+0x118>
            dhcpPtr->xid == currentXid ) {

        byte *ptr = (byte*) (dhcpPtr + 1) + 4;
 8000b3c:	e0bffc17 	ldw	r2,-16(fp)
 8000b40:	10803c04 	addi	r2,r2,240
 8000b44:	e0bffb15 	stw	r2,-20(fp)
        do {
            byte option = *ptr++;
 8000b48:	e0bffb17 	ldw	r2,-20(fp)
 8000b4c:	10c00044 	addi	r3,r2,1
 8000b50:	e0fffb15 	stw	r3,-20(fp)
 8000b54:	10800003 	ldbu	r2,0(r2)
 8000b58:	e0bffd05 	stb	r2,-12(fp)
            byte optionLen = *ptr++;
 8000b5c:	e0bffb17 	ldw	r2,-20(fp)
 8000b60:	10c00044 	addi	r3,r2,1
 8000b64:	e0fffb15 	stw	r3,-20(fp)
 8000b68:	10800003 	ldbu	r2,0(r2)
 8000b6c:	e0bffd45 	stb	r2,-11(fp)
            printf("option: %x, msg: %x\n", option, *ptr);
 8000b70:	e0fffd03 	ldbu	r3,-12(fp)
 8000b74:	e0bffb17 	ldw	r2,-20(fp)
 8000b78:	10800003 	ldbu	r2,0(r2)
 8000b7c:	10803fcc 	andi	r2,r2,255
 8000b80:	100d883a 	mov	r6,r2
 8000b84:	180b883a 	mov	r5,r3
 8000b88:	01020074 	movhi	r4,2049
 8000b8c:	21163604 	addi	r4,r4,22744
 8000b90:	800650c0 	call	800650c <printf>
            if(option == DHCP_OPT_MESSAGE_TYPE && *ptr == msgType ) {
 8000b94:	e0bffd03 	ldbu	r2,-12(fp)
 8000b98:	10800d58 	cmpnei	r2,r2,53
 8000b9c:	10000a1e 	bne	r2,zero,8000bc8 <_ZL26dhcp_received_message_typeth+0xec>
 8000ba0:	e0bffb17 	ldw	r2,-20(fp)
 8000ba4:	10800003 	ldbu	r2,0(r2)
 8000ba8:	10c03fcc 	andi	r3,r2,255
 8000bac:	e0bfff03 	ldbu	r2,-4(fp)
 8000bb0:	1880051e 	bne	r3,r2,8000bc8 <_ZL26dhcp_received_message_typeth+0xec>
            	printf("returning true in received message\n");
 8000bb4:	01020074 	movhi	r4,2049
 8000bb8:	21163c04 	addi	r4,r4,22768
 8000bbc:	80066280 	call	8006628 <puts>
                return true;
 8000bc0:	00800044 	movi	r2,1
 8000bc4:	00000c06 	br	8000bf8 <_ZL26dhcp_received_message_typeth+0x11c>
            }
            ptr += optionLen;
 8000bc8:	e0bffd43 	ldbu	r2,-11(fp)
 8000bcc:	e0fffb17 	ldw	r3,-20(fp)
 8000bd0:	1885883a 	add	r2,r3,r2
 8000bd4:	e0bffb15 	stw	r2,-20(fp)
        } while (ptr < gPB + len);
 8000bd8:	e0fffe0b 	ldhu	r3,-8(fp)
 8000bdc:	008200b4 	movhi	r2,2050
 8000be0:	10a54b04 	addi	r2,r2,-27348
 8000be4:	1885883a 	add	r2,r3,r2
 8000be8:	e0fffb17 	ldw	r3,-20(fp)
 8000bec:	1880012e 	bgeu	r3,r2,8000bf4 <_ZL26dhcp_received_message_typeth+0x118>

    if (len >= 70 && gPB[UDP_SRC_PORT_L_P] == DHCP_SERVER_PORT &&
            dhcpPtr->xid == currentXid ) {

        byte *ptr = (byte*) (dhcpPtr + 1) + 4;
        do {
 8000bf0:	003fd506 	br	8000b48 <_ZL26dhcp_received_message_typeth+0x6c>
                return true;
            }
            ptr += optionLen;
        } while (ptr < gPB + len);
    }
    return false;
 8000bf4:	0005883a 	mov	r2,zero
}
 8000bf8:	e037883a 	mov	sp,fp
 8000bfc:	dfc00117 	ldw	ra,4(sp)
 8000c00:	df000017 	ldw	fp,0(sp)
 8000c04:	dec00204 	addi	sp,sp,8
 8000c08:	f800283a 	ret

08000c0c <_ZL10toAsciiHexh>:

static char toAsciiHex(byte b) {
 8000c0c:	defffd04 	addi	sp,sp,-12
 8000c10:	df000215 	stw	fp,8(sp)
 8000c14:	df000204 	addi	fp,sp,8
 8000c18:	2005883a 	mov	r2,r4
 8000c1c:	e0bfff05 	stb	r2,-4(fp)
    char c = b & 0x0f;
 8000c20:	e0bfff03 	ldbu	r2,-4(fp)
 8000c24:	108003cc 	andi	r2,r2,15
 8000c28:	e0bffe05 	stb	r2,-8(fp)
    c += (c <= 9) ? '0' : 'A'-10;
 8000c2c:	e0bffe07 	ldb	r2,-8(fp)
 8000c30:	10800288 	cmpgei	r2,r2,10
 8000c34:	1000021e 	bne	r2,zero,8000c40 <_ZL10toAsciiHexh+0x34>
 8000c38:	00800c04 	movi	r2,48
 8000c3c:	00000106 	br	8000c44 <_ZL10toAsciiHexh+0x38>
 8000c40:	00800dc4 	movi	r2,55
 8000c44:	e0fffe03 	ldbu	r3,-8(fp)
 8000c48:	10c5883a 	add	r2,r2,r3
 8000c4c:	e0bffe05 	stb	r2,-8(fp)
    return c;
 8000c50:	e0bffe03 	ldbu	r2,-8(fp)
}
 8000c54:	e037883a 	mov	sp,fp
 8000c58:	df000017 	ldw	fp,0(sp)
 8000c5c:	dec00104 	addi	sp,sp,4
 8000c60:	f800283a 	ret

08000c64 <_ZN9EtherCard9dhcpSetupEPKcb>:

bool EtherCard::dhcpSetup (const char *hname, bool fromRam) {
 8000c64:	defffa04 	addi	sp,sp,-24
 8000c68:	dfc00515 	stw	ra,20(sp)
 8000c6c:	df000415 	stw	fp,16(sp)
 8000c70:	dc000315 	stw	r16,12(sp)
 8000c74:	df000404 	addi	fp,sp,16
 8000c78:	e13ffd15 	stw	r4,-12(fp)
 8000c7c:	2805883a 	mov	r2,r5
 8000c80:	e0bffe05 	stb	r2,-8(fp)
    // Use during setup, as this discards all incoming requests until it returns.
    // That shouldn't be a problem, because we don't have an IPaddress yet.
    // Will try 60 secs to obtain DHCP-lease.

    using_dhcp = true;
 8000c84:	00800044 	movi	r2,1
 8000c88:	d0a6f3c5 	stb	r2,-25649(gp)

    if(hname != NULL) {
 8000c8c:	e0bffd17 	ldw	r2,-12(fp)
 8000c90:	10000c26 	beq	r2,zero,8000cc4 <_ZN9EtherCard9dhcpSetupEPKcb+0x60>
        if(fromRam) {
 8000c94:	e0bffe03 	ldbu	r2,-8(fp)
 8000c98:	10000626 	beq	r2,zero,8000cb4 <_ZN9EtherCard9dhcpSetupEPKcb+0x50>
            strncpy(hostname, hname, DHCP_HOSTNAME_MAX_LEN);
 8000c9c:	01800804 	movi	r6,32
 8000ca0:	e17ffd17 	ldw	r5,-12(fp)
 8000ca4:	01020074 	movhi	r4,2049
 8000ca8:	21176204 	addi	r4,r4,23944
 8000cac:	80067a40 	call	80067a4 <strncpy>
 8000cb0:	00002006 	br	8000d34 <_ZN9EtherCard9dhcpSetupEPKcb+0xd0>
        } else {
            printf("BAD THING HAPPENED IN dhcpSetup\n");
 8000cb4:	01020074 	movhi	r4,2049
 8000cb8:	21164504 	addi	r4,r4,22804
 8000cbc:	80066280 	call	8006628 <puts>
 8000cc0:	00001c06 	br	8000d34 <_ZN9EtherCard9dhcpSetupEPKcb+0xd0>
        }
    } else {
        // Set a unique hostname, use Arduino-?? with last octet of mac address
        hostname[strlen(hostname) - 2] = toAsciiHex(mymac[5] >> 4);   // Appends mac to last 2 digits of the hostname
 8000cc4:	01020074 	movhi	r4,2049
 8000cc8:	21176204 	addi	r4,r4,23944
 8000ccc:	800663c0 	call	800663c <strlen>
 8000cd0:	143fff84 	addi	r16,r2,-2
 8000cd4:	d0a6ec83 	ldbu	r2,-25678(gp)
 8000cd8:	10803fcc 	andi	r2,r2,255
 8000cdc:	1005d13a 	srai	r2,r2,4
 8000ce0:	10803fcc 	andi	r2,r2,255
 8000ce4:	1009883a 	mov	r4,r2
 8000ce8:	8000c0c0 	call	8000c0c <_ZL10toAsciiHexh>
 8000cec:	1007883a 	mov	r3,r2
 8000cf0:	00820074 	movhi	r2,2049
 8000cf4:	10976204 	addi	r2,r2,23944
 8000cf8:	1405883a 	add	r2,r2,r16
 8000cfc:	10c00005 	stb	r3,0(r2)
        hostname[strlen(hostname) - 1] = toAsciiHex(mymac[5]);   // Even if it's smaller than the maximum <thus, strlen(hostname)>
 8000d00:	01020074 	movhi	r4,2049
 8000d04:	21176204 	addi	r4,r4,23944
 8000d08:	800663c0 	call	800663c <strlen>
 8000d0c:	143fffc4 	addi	r16,r2,-1
 8000d10:	d0a6ec83 	ldbu	r2,-25678(gp)
 8000d14:	10803fcc 	andi	r2,r2,255
 8000d18:	1009883a 	mov	r4,r2
 8000d1c:	8000c0c0 	call	8000c0c <_ZL10toAsciiHexh>
 8000d20:	1007883a 	mov	r3,r2
 8000d24:	00820074 	movhi	r2,2049
 8000d28:	10976204 	addi	r2,r2,23944
 8000d2c:	1405883a 	add	r2,r2,r16
 8000d30:	10c00005 	stb	r3,0(r2)
    }

    dhcpState = DHCP_STATE_INIT;
 8000d34:	d026f505 	stb	zero,-25644(gp)
    uint16_t start = millis();
 8000d38:	80003d00 	call	80003d0 <_Z6millisv>
 8000d3c:	e0bffc0d 	sth	r2,-16(fp)

    while (dhcpState != DHCP_STATE_BOUND && uint16_t(millis()) - start < 60000) {
 8000d40:	d0a6f503 	ldbu	r2,-25644(gp)
 8000d44:	10803fcc 	andi	r2,r2,255
 8000d48:	108000e0 	cmpeqi	r2,r2,3
 8000d4c:	1000081e 	bne	r2,zero,8000d70 <_ZN9EtherCard9dhcpSetupEPKcb+0x10c>
 8000d50:	80003d00 	call	80003d0 <_Z6millisv>
 8000d54:	10ffffcc 	andi	r3,r2,65535
 8000d58:	e0bffc0b 	ldhu	r2,-16(fp)
 8000d5c:	1885c83a 	sub	r2,r3,r2
 8000d60:	00fa97d4 	movui	r3,59999
 8000d64:	18800216 	blt	r3,r2,8000d70 <_ZN9EtherCard9dhcpSetupEPKcb+0x10c>
 8000d68:	00800044 	movi	r2,1
 8000d6c:	00000106 	br	8000d74 <_ZN9EtherCard9dhcpSetupEPKcb+0x110>
 8000d70:	0005883a 	mov	r2,zero
 8000d74:	10803fcc 	andi	r2,r2,255
 8000d78:	10000826 	beq	r2,zero,8000d9c <_ZN9EtherCard9dhcpSetupEPKcb+0x138>
        if (isLinkUp()) {
 8000d7c:	8001e500 	call	8001e50 <_ZN8ENC28J608isLinkUpEv>
 8000d80:	10803fcc 	andi	r2,r2,255
 8000d84:	103fee26 	beq	r2,zero,8000d40 <_ZN9EtherCard9dhcpSetupEPKcb+0xdc>
        	DhcpStateMachine(packetReceive());
 8000d88:	800217c0 	call	800217c <_ZN8ENC28J6013packetReceiveEv>
 8000d8c:	10bfffcc 	andi	r2,r2,65535
 8000d90:	1009883a 	mov	r4,r2
 8000d94:	8000e740 	call	8000e74 <_ZN9EtherCard16DhcpStateMachineEt>
    }

    dhcpState = DHCP_STATE_INIT;
    uint16_t start = millis();

    while (dhcpState != DHCP_STATE_BOUND && uint16_t(millis()) - start < 60000) {
 8000d98:	003fe906 	br	8000d40 <_ZN9EtherCard9dhcpSetupEPKcb+0xdc>
        if (isLinkUp()) {
        	DhcpStateMachine(packetReceive());
        }
    }
    updateBroadcastAddress();
 8000d9c:	8003fc40 	call	8003fc4 <_ZN9EtherCard22updateBroadcastAddressEv>
    delaycnt = 0;
 8000da0:	d026f48d 	sth	zero,-25646(gp)
    printf("Finished dhcpSetup... returning %d (%d)\n", (dhcpState == DHCP_STATE_BOUND), dhcpState);
 8000da4:	d0a6f503 	ldbu	r2,-25644(gp)
 8000da8:	10803fcc 	andi	r2,r2,255
 8000dac:	108000e0 	cmpeqi	r2,r2,3
 8000db0:	10803fcc 	andi	r2,r2,255
 8000db4:	d0e6f503 	ldbu	r3,-25644(gp)
 8000db8:	18c03fcc 	andi	r3,r3,255
 8000dbc:	180d883a 	mov	r6,r3
 8000dc0:	100b883a 	mov	r5,r2
 8000dc4:	01020074 	movhi	r4,2049
 8000dc8:	21164d04 	addi	r4,r4,22836
 8000dcc:	800650c0 	call	800650c <printf>
    return dhcpState == DHCP_STATE_BOUND;
 8000dd0:	d0a6f503 	ldbu	r2,-25644(gp)
 8000dd4:	10803fcc 	andi	r2,r2,255
 8000dd8:	108000e0 	cmpeqi	r2,r2,3
}
 8000ddc:	e6ffff04 	addi	sp,fp,-4
 8000de0:	dfc00217 	ldw	ra,8(sp)
 8000de4:	df000117 	ldw	fp,4(sp)
 8000de8:	dc000017 	ldw	r16,0(sp)
 8000dec:	dec00304 	addi	sp,sp,12
 8000df0:	f800283a 	ret

08000df4 <_ZN9EtherCard21dhcpAddOptionCallbackEhPFvhPKhhE>:

void EtherCard::dhcpAddOptionCallback(uint8_t option, DhcpOptionCallback callback)
{
 8000df4:	defffd04 	addi	sp,sp,-12
 8000df8:	df000215 	stw	fp,8(sp)
 8000dfc:	df000204 	addi	fp,sp,8
 8000e00:	2005883a 	mov	r2,r4
 8000e04:	e17fff15 	stw	r5,-4(fp)
 8000e08:	e0bffe05 	stb	r2,-8(fp)
    static uint8_t optionList[2];
    optionList[0] = option;
 8000e0c:	e0bffe03 	ldbu	r2,-8(fp)
 8000e10:	d0a6fd05 	stb	r2,-25612(gp)
    optionList[1] = 0;
 8000e14:	d026fd45 	stb	zero,-25611(gp)
    dhcpCustomOptionList = optionList;
 8000e18:	d0a6fd04 	addi	r2,gp,-25612
 8000e1c:	d0a6fb15 	stw	r2,-25620(gp)
    dhcpCustomOptionCallback = callback;
 8000e20:	e0bfff17 	ldw	r2,-4(fp)
 8000e24:	d0a6fc15 	stw	r2,-25616(gp)
}
 8000e28:	0001883a 	nop
 8000e2c:	e037883a 	mov	sp,fp
 8000e30:	df000017 	ldw	fp,0(sp)
 8000e34:	dec00104 	addi	sp,sp,4
 8000e38:	f800283a 	ret

08000e3c <_ZN9EtherCard21dhcpAddOptionCallbackEPhPFvhPKhhE>:

void EtherCard::dhcpAddOptionCallback(uint8_t* optionlist, DhcpOptionCallback callback)
{
 8000e3c:	defffd04 	addi	sp,sp,-12
 8000e40:	df000215 	stw	fp,8(sp)
 8000e44:	df000204 	addi	fp,sp,8
 8000e48:	e13ffe15 	stw	r4,-8(fp)
 8000e4c:	e17fff15 	stw	r5,-4(fp)
    dhcpCustomOptionList = optionlist;
 8000e50:	e0bffe17 	ldw	r2,-8(fp)
 8000e54:	d0a6fb15 	stw	r2,-25620(gp)
    dhcpCustomOptionCallback = callback;
 8000e58:	e0bfff17 	ldw	r2,-4(fp)
 8000e5c:	d0a6fc15 	stw	r2,-25616(gp)
}
 8000e60:	0001883a 	nop
 8000e64:	e037883a 	mov	sp,fp
 8000e68:	df000017 	ldw	fp,0(sp)
 8000e6c:	dec00104 	addi	sp,sp,4
 8000e70:	f800283a 	ret

08000e74 <_ZN9EtherCard16DhcpStateMachineEt>:

void EtherCard::DhcpStateMachine (uint16_t len)
{
 8000e74:	defffc04 	addi	sp,sp,-16
 8000e78:	dfc00315 	stw	ra,12(sp)
 8000e7c:	df000215 	stw	fp,8(sp)
 8000e80:	df000204 	addi	fp,sp,8
 8000e84:	2005883a 	mov	r2,r4
 8000e88:	e0bfff0d 	sth	r2,-4(fp)
    	printf("Renew\n");
        break;
    }
#endif

    switch (dhcpState) {
 8000e8c:	d0a6f503 	ldbu	r2,-25644(gp)
 8000e90:	10803fcc 	andi	r2,r2,255
 8000e94:	10c00168 	cmpgeui	r3,r2,5
 8000e98:	18006c1e 	bne	r3,zero,800104c <_ZN9EtherCard16DhcpStateMachineEt+0x1d8>
 8000e9c:	100690ba 	slli	r3,r2,2
 8000ea0:	00820034 	movhi	r2,2048
 8000ea4:	1083ad04 	addi	r2,r2,3764
 8000ea8:	1885883a 	add	r2,r3,r2
 8000eac:	10800017 	ldw	r2,0(r2)
 8000eb0:	1000683a 	jmp	r2
 8000eb4:	08000f1c 	xori	zero,at,60
 8000eb8:	08000f58 	cmpnei	zero,at,61
 8000ebc:	08000fc0 	call	8000fc <__alt_mem_onchip_memory2_0+0x8000fc>
 8000ec0:	08000ec8 	cmpgei	zero,at,59
 8000ec4:	08000fc0 	call	8000fc <__alt_mem_onchip_memory2_0+0x8000fc>

    case DHCP_STATE_BOUND:
        //!@todo Due to millis() wrap-around, DHCP renewal may not work if leaseTime is larger than 49days
        if (leaseTime != DHCP_INFINITE_LEASE && millis() - leaseStart >= leaseTime) {
 8000ec8:	d0a6f917 	ldw	r2,-25628(gp)
 8000ecc:	10bfffe0 	cmpeqi	r2,r2,-1
 8000ed0:	1000081e 	bne	r2,zero,8000ef4 <_ZN9EtherCard16DhcpStateMachineEt+0x80>
 8000ed4:	80003d00 	call	80003d0 <_Z6millisv>
 8000ed8:	1007883a 	mov	r3,r2
 8000edc:	d0a6f817 	ldw	r2,-25632(gp)
 8000ee0:	1887c83a 	sub	r3,r3,r2
 8000ee4:	d0a6f917 	ldw	r2,-25628(gp)
 8000ee8:	18800236 	bltu	r3,r2,8000ef4 <_ZN9EtherCard16DhcpStateMachineEt+0x80>
 8000eec:	00800044 	movi	r2,1
 8000ef0:	00000106 	br	8000ef8 <_ZN9EtherCard16DhcpStateMachineEt+0x84>
 8000ef4:	0005883a 	mov	r2,zero
 8000ef8:	10803fcc 	andi	r2,r2,255
 8000efc:	10004e26 	beq	r2,zero,8001038 <_ZN9EtherCard16DhcpStateMachineEt+0x1c4>
            send_dhcp_message(myip);
 8000f00:	d126ecc4 	addi	r4,gp,-25677
 8000f04:	80005080 	call	8000508 <_ZL17send_dhcp_messagePh>
            dhcpState = DHCP_STATE_RENEWING;
 8000f08:	00800104 	movi	r2,4
 8000f0c:	d0a6f505 	stb	r2,-25644(gp)
            stateTimer = millis();
 8000f10:	80003d00 	call	80003d0 <_Z6millisv>
 8000f14:	d0a6f715 	stw	r2,-25636(gp)
        }
        break;
 8000f18:	00004706 	br	8001038 <_ZN9EtherCard16DhcpStateMachineEt+0x1c4>

    case DHCP_STATE_INIT:
        currentXid = millis();
 8000f1c:	80003d00 	call	80003d0 <_Z6millisv>
 8000f20:	d0a6f615 	stw	r2,-25640(gp)
        memset(myip,0,IP_LEN); // force ip 0.0.0.0
 8000f24:	01800104 	movi	r6,4
 8000f28:	000b883a 	mov	r5,zero
 8000f2c:	d126ecc4 	addi	r4,gp,-25677
 8000f30:	80063b40 	call	80063b4 <memset>
        send_dhcp_message(NULL);
 8000f34:	0009883a 	mov	r4,zero
 8000f38:	80005080 	call	8000508 <_ZL17send_dhcp_messagePh>
        enableBroadcast(true); //Temporarily enable broadcasts
 8000f3c:	01000044 	movi	r4,1
 8000f40:	80024100 	call	8002410 <_ZN8ENC28J6015enableBroadcastEb>
        dhcpState = DHCP_STATE_SELECTING;
 8000f44:	00800044 	movi	r2,1
 8000f48:	d0a6f505 	stb	r2,-25644(gp)
        stateTimer = millis();
 8000f4c:	80003d00 	call	80003d0 <_Z6millisv>
 8000f50:	d0a6f715 	stw	r2,-25636(gp)
        break;
 8000f54:	00003d06 	br	800104c <_ZN9EtherCard16DhcpStateMachineEt+0x1d8>

    case DHCP_STATE_SELECTING:
        if (dhcp_received_message_type(len, DHCP_OFFER)) {
 8000f58:	e0bfff0b 	ldhu	r2,-4(fp)
 8000f5c:	01400084 	movi	r5,2
 8000f60:	1009883a 	mov	r4,r2
 8000f64:	8000adc0 	call	8000adc <_ZL26dhcp_received_message_typeth>
 8000f68:	10803fcc 	andi	r2,r2,255
 8000f6c:	10000b26 	beq	r2,zero,8000f9c <_ZN9EtherCard16DhcpStateMachineEt+0x128>
            uint8_t offeredip[IP_LEN];
            process_dhcp_offer(len, offeredip);
 8000f70:	e0bfff0b 	ldhu	r2,-4(fp)
 8000f74:	e17ffe04 	addi	r5,fp,-8
 8000f78:	1009883a 	mov	r4,r2
 8000f7c:	80007f80 	call	80007f8 <_ZL18process_dhcp_offertPh>
            send_dhcp_message(offeredip);
 8000f80:	e13ffe04 	addi	r4,fp,-8
 8000f84:	80005080 	call	8000508 <_ZL17send_dhcp_messagePh>
            dhcpState = DHCP_STATE_REQUESTING;
 8000f88:	00800084 	movi	r2,2
 8000f8c:	d0a6f505 	stb	r2,-25644(gp)
            stateTimer = millis();
 8000f90:	80003d00 	call	80003d0 <_Z6millisv>
 8000f94:	d0a6f715 	stw	r2,-25636(gp)
        } else {
            if (millis() - stateTimer > DHCP_REQUEST_TIMEOUT) {
                dhcpState = DHCP_STATE_INIT;
            }
        }
        break;
 8000f98:	00002906 	br	8001040 <_ZN9EtherCard16DhcpStateMachineEt+0x1cc>
            process_dhcp_offer(len, offeredip);
            send_dhcp_message(offeredip);
            dhcpState = DHCP_STATE_REQUESTING;
            stateTimer = millis();
        } else {
            if (millis() - stateTimer > DHCP_REQUEST_TIMEOUT) {
 8000f9c:	80003d00 	call	80003d0 <_Z6millisv>
 8000fa0:	1007883a 	mov	r3,r2
 8000fa4:	d0a6f717 	ldw	r2,-25636(gp)
 8000fa8:	1885c83a 	sub	r2,r3,r2
 8000fac:	1089c468 	cmpgeui	r2,r2,10001
 8000fb0:	10803fcc 	andi	r2,r2,255
 8000fb4:	10002226 	beq	r2,zero,8001040 <_ZN9EtherCard16DhcpStateMachineEt+0x1cc>
                dhcpState = DHCP_STATE_INIT;
 8000fb8:	d026f505 	stb	zero,-25644(gp)
            }
        }
        break;
 8000fbc:	00002006 	br	8001040 <_ZN9EtherCard16DhcpStateMachineEt+0x1cc>

    case DHCP_STATE_REQUESTING:
    case DHCP_STATE_RENEWING:
        if (dhcp_received_message_type(len, DHCP_ACK)) {
 8000fc0:	e0bfff0b 	ldhu	r2,-4(fp)
 8000fc4:	01400144 	movi	r5,5
 8000fc8:	1009883a 	mov	r4,r2
 8000fcc:	8000adc0 	call	8000adc <_ZL26dhcp_received_message_typeth>
 8000fd0:	10803fcc 	andi	r2,r2,255
 8000fd4:	10000f26 	beq	r2,zero,8001014 <_ZN9EtherCard16DhcpStateMachineEt+0x1a0>
            disableBroadcast(true); //Disable broadcast after temporary enable
 8000fd8:	01000044 	movi	r4,1
 8000fdc:	80024740 	call	8002474 <_ZN8ENC28J6016disableBroadcastEb>
            process_dhcp_ack(len);
 8000fe0:	e0bfff0b 	ldhu	r2,-4(fp)
 8000fe4:	1009883a 	mov	r4,r2
 8000fe8:	80008cc0 	call	80008cc <_ZL16process_dhcp_ackt>
            leaseStart = millis();
 8000fec:	80003d00 	call	80003d0 <_Z6millisv>
 8000ff0:	d0a6f815 	stw	r2,-25632(gp)
            if (gwip[0] != 0) setGwIp(gwip); // why is this? because it initiates an arp request
 8000ff4:	d0a6efc3 	ldbu	r2,-25665(gp)
 8000ff8:	10803fcc 	andi	r2,r2,255
 8000ffc:	10000226 	beq	r2,zero,8001008 <_ZN9EtherCard16DhcpStateMachineEt+0x194>
 8001000:	d126efc4 	addi	r4,gp,-25665
 8001004:	8003f800 	call	8003f80 <_ZN9EtherCard7setGwIpEPKh>
            dhcpState = DHCP_STATE_BOUND;
 8001008:	008000c4 	movi	r2,3
 800100c:	d0a6f505 	stb	r2,-25644(gp)
        } else {
            if (millis() - stateTimer > DHCP_REQUEST_TIMEOUT) {
                dhcpState = DHCP_STATE_INIT;
            }
        }
        break;
 8001010:	00000d06 	br	8001048 <_ZN9EtherCard16DhcpStateMachineEt+0x1d4>
            process_dhcp_ack(len);
            leaseStart = millis();
            if (gwip[0] != 0) setGwIp(gwip); // why is this? because it initiates an arp request
            dhcpState = DHCP_STATE_BOUND;
        } else {
            if (millis() - stateTimer > DHCP_REQUEST_TIMEOUT) {
 8001014:	80003d00 	call	80003d0 <_Z6millisv>
 8001018:	1007883a 	mov	r3,r2
 800101c:	d0a6f717 	ldw	r2,-25636(gp)
 8001020:	1885c83a 	sub	r2,r3,r2
 8001024:	1089c468 	cmpgeui	r2,r2,10001
 8001028:	10803fcc 	andi	r2,r2,255
 800102c:	10000626 	beq	r2,zero,8001048 <_ZN9EtherCard16DhcpStateMachineEt+0x1d4>
                dhcpState = DHCP_STATE_INIT;
 8001030:	d026f505 	stb	zero,-25644(gp)
            }
        }
        break;
 8001034:	00000406 	br	8001048 <_ZN9EtherCard16DhcpStateMachineEt+0x1d4>
        if (leaseTime != DHCP_INFINITE_LEASE && millis() - leaseStart >= leaseTime) {
            send_dhcp_message(myip);
            dhcpState = DHCP_STATE_RENEWING;
            stateTimer = millis();
        }
        break;
 8001038:	0001883a 	nop
 800103c:	00000306 	br	800104c <_ZN9EtherCard16DhcpStateMachineEt+0x1d8>
        } else {
            if (millis() - stateTimer > DHCP_REQUEST_TIMEOUT) {
                dhcpState = DHCP_STATE_INIT;
            }
        }
        break;
 8001040:	0001883a 	nop
 8001044:	00000106 	br	800104c <_ZN9EtherCard16DhcpStateMachineEt+0x1d8>
        } else {
            if (millis() - stateTimer > DHCP_REQUEST_TIMEOUT) {
                dhcpState = DHCP_STATE_INIT;
            }
        }
        break;
 8001048:	0001883a 	nop

    }
}
 800104c:	0001883a 	nop
 8001050:	e037883a 	mov	sp,fp
 8001054:	dfc00117 	ldw	ra,4(sp)
 8001058:	df000017 	ldw	fp,0(sp)
 800105c:	dec00204 	addi	sp,sp,8
 8001060:	f800283a 	ret

08001064 <_ZL10dnsRequestPKcb>:
#define DNSCLIENT_SRC_PORT_H 0xE0

#define DNS_TYPE_A 1
#define DNS_CLASS_IN 1

static void dnsRequest (const char *hostname, bool fromRam) {
 8001064:	defffa04 	addi	sp,sp,-24
 8001068:	dfc00515 	stw	ra,20(sp)
 800106c:	df000415 	stw	fp,16(sp)
 8001070:	df000404 	addi	fp,sp,16
 8001074:	e13ffe15 	stw	r4,-8(fp)
 8001078:	2805883a 	mov	r2,r5
 800107c:	e0bfff05 	stb	r2,-4(fp)
    ++dnstid_l; // increment for next request, finally wrap
 8001080:	d0a6fd83 	ldbu	r2,-25610(gp)
 8001084:	10800044 	addi	r2,r2,1
 8001088:	d0a6fd85 	stb	r2,-25610(gp)
    if (ether.dnsip[0] == 0)
 800108c:	d0a6f1c3 	ldbu	r2,-25657(gp)
 8001090:	10803fcc 	andi	r2,r2,255
 8001094:	1000041e 	bne	r2,zero,80010a8 <_ZL10dnsRequestPKcb+0x44>
        memset(ether.dnsip, 8, IP_LEN); // use 8.8.8.8 Google DNS as default
 8001098:	01800104 	movi	r6,4
 800109c:	01400204 	movi	r5,8
 80010a0:	d126f1c4 	addi	r4,gp,-25657
 80010a4:	80063b40 	call	80063b4 <memset>
    ether.udpPrepare((DNSCLIENT_SRC_PORT_H << 8) | dnstid_l, ether.dnsip, DNS_PORT);
 80010a8:	d0a6fd83 	ldbu	r2,-25610(gp)
 80010ac:	10c03fcc 	andi	r3,r2,255
 80010b0:	00b80004 	movi	r2,-8192
 80010b4:	1884b03a 	or	r2,r3,r2
 80010b8:	10bfffcc 	andi	r2,r2,65535
 80010bc:	01800d44 	movi	r6,53
 80010c0:	d166f1c4 	addi	r5,gp,-25657
 80010c4:	1009883a 	mov	r4,r2
 80010c8:	800394c0 	call	800394c <_ZN9EtherCard10udpPrepareEtPKht>
    memset(gPB + UDP_DATA_P, 0, 12);
 80010cc:	008200b4 	movhi	r2,2050
 80010d0:	10a55584 	addi	r2,r2,-27306
 80010d4:	01800304 	movi	r6,12
 80010d8:	000b883a 	mov	r5,zero
 80010dc:	1009883a 	mov	r4,r2
 80010e0:	80063b40 	call	80063b4 <memset>

    byte *p = gPB + UDP_DATA_P + 12;
 80010e4:	008200b4 	movhi	r2,2050
 80010e8:	10a55884 	addi	r2,r2,-27294
 80010ec:	e0bffc15 	stw	r2,-16(fp)
    char c;
    do {
        byte n = 0;
 80010f0:	e03ffd05 	stb	zero,-12(fp)
        for(;;) {
//            c = fromRam ? *hostname : pgm_read_byte(hostname);
        	c = *hostname;
 80010f4:	e0bffe17 	ldw	r2,-8(fp)
 80010f8:	10800003 	ldbu	r2,0(r2)
 80010fc:	e0bffd45 	stb	r2,-11(fp)
            ++hostname;
 8001100:	e0bffe17 	ldw	r2,-8(fp)
 8001104:	10800044 	addi	r2,r2,1
 8001108:	e0bffe15 	stw	r2,-8(fp)
            if (c == '.' || c == 0)
 800110c:	e0bffd47 	ldb	r2,-11(fp)
 8001110:	10800ba0 	cmpeqi	r2,r2,46
 8001114:	10000b1e 	bne	r2,zero,8001144 <_ZL10dnsRequestPKcb+0xe0>
 8001118:	e0bffd47 	ldb	r2,-11(fp)
 800111c:	10000926 	beq	r2,zero,8001144 <_ZL10dnsRequestPKcb+0xe0>
                break;
            p[++n] = c;
 8001120:	e0bffd03 	ldbu	r2,-12(fp)
 8001124:	10800044 	addi	r2,r2,1
 8001128:	e0bffd05 	stb	r2,-12(fp)
 800112c:	e0bffd03 	ldbu	r2,-12(fp)
 8001130:	e0fffc17 	ldw	r3,-16(fp)
 8001134:	1885883a 	add	r2,r3,r2
 8001138:	e0fffd43 	ldbu	r3,-11(fp)
 800113c:	10c00005 	stb	r3,0(r2)

    byte *p = gPB + UDP_DATA_P + 12;
    char c;
    do {
        byte n = 0;
        for(;;) {
 8001140:	003fec06 	br	80010f4 <_ZL10dnsRequestPKcb+0x90>
            ++hostname;
            if (c == '.' || c == 0)
                break;
            p[++n] = c;
        }
        *p++ = n;
 8001144:	e0bffc17 	ldw	r2,-16(fp)
 8001148:	10c00044 	addi	r3,r2,1
 800114c:	e0fffc15 	stw	r3,-16(fp)
 8001150:	e0fffd03 	ldbu	r3,-12(fp)
 8001154:	10c00005 	stb	r3,0(r2)
        p += n;
 8001158:	e0bffd03 	ldbu	r2,-12(fp)
 800115c:	e0fffc17 	ldw	r3,-16(fp)
 8001160:	1885883a 	add	r2,r3,r2
 8001164:	e0bffc15 	stw	r2,-16(fp)
    } while (c != 0);
 8001168:	e0bffd47 	ldb	r2,-11(fp)
 800116c:	10000126 	beq	r2,zero,8001174 <_ZL10dnsRequestPKcb+0x110>
    ether.udpPrepare((DNSCLIENT_SRC_PORT_H << 8) | dnstid_l, ether.dnsip, DNS_PORT);
    memset(gPB + UDP_DATA_P, 0, 12);

    byte *p = gPB + UDP_DATA_P + 12;
    char c;
    do {
 8001170:	003fdf06 	br	80010f0 <_ZL10dnsRequestPKcb+0x8c>
        }
        *p++ = n;
        p += n;
    } while (c != 0);

    *p++ = 0; // terminate with zero, means root domain.
 8001174:	e0bffc17 	ldw	r2,-16(fp)
 8001178:	10c00044 	addi	r3,r2,1
 800117c:	e0fffc15 	stw	r3,-16(fp)
 8001180:	10000005 	stb	zero,0(r2)
    *p++ = 0;
 8001184:	e0bffc17 	ldw	r2,-16(fp)
 8001188:	10c00044 	addi	r3,r2,1
 800118c:	e0fffc15 	stw	r3,-16(fp)
 8001190:	10000005 	stb	zero,0(r2)
    *p++ = DNS_TYPE_A;
 8001194:	e0bffc17 	ldw	r2,-16(fp)
 8001198:	10c00044 	addi	r3,r2,1
 800119c:	e0fffc15 	stw	r3,-16(fp)
 80011a0:	00c00044 	movi	r3,1
 80011a4:	10c00005 	stb	r3,0(r2)
    *p++ = 0;
 80011a8:	e0bffc17 	ldw	r2,-16(fp)
 80011ac:	10c00044 	addi	r3,r2,1
 80011b0:	e0fffc15 	stw	r3,-16(fp)
 80011b4:	10000005 	stb	zero,0(r2)
    *p++ = DNS_CLASS_IN;
 80011b8:	e0bffc17 	ldw	r2,-16(fp)
 80011bc:	10c00044 	addi	r3,r2,1
 80011c0:	e0fffc15 	stw	r3,-16(fp)
 80011c4:	00c00044 	movi	r3,1
 80011c8:	10c00005 	stb	r3,0(r2)
    byte i = p - gPB - UDP_DATA_P;
 80011cc:	e0bffc17 	ldw	r2,-16(fp)
 80011d0:	1007883a 	mov	r3,r2
 80011d4:	008200b4 	movhi	r2,2050
 80011d8:	10a54b04 	addi	r2,r2,-27348
 80011dc:	1009883a 	mov	r4,r2
 80011e0:	00bff584 	movi	r2,-42
 80011e4:	1105c83a 	sub	r2,r2,r4
 80011e8:	1885883a 	add	r2,r3,r2
 80011ec:	e0bffd85 	stb	r2,-10(fp)
    gPB[UDP_DATA_P] = i;
 80011f0:	008200b4 	movhi	r2,2050
 80011f4:	10a54b04 	addi	r2,r2,-27348
 80011f8:	e0fffd83 	ldbu	r3,-10(fp)
 80011fc:	10c00a85 	stb	r3,42(r2)
    gPB[UDP_DATA_P+1] = dnstid_l;
 8001200:	d0e6fd83 	ldbu	r3,-25610(gp)
 8001204:	008200b4 	movhi	r2,2050
 8001208:	10a54b04 	addi	r2,r2,-27348
 800120c:	10c00ac5 	stb	r3,43(r2)
    gPB[UDP_DATA_P+2] = 1; // flags, standard recursive query
 8001210:	008200b4 	movhi	r2,2050
 8001214:	10a54b04 	addi	r2,r2,-27348
 8001218:	00c00044 	movi	r3,1
 800121c:	10c00b05 	stb	r3,44(r2)
    gPB[UDP_DATA_P+5] = 1; // 1 question
 8001220:	008200b4 	movhi	r2,2050
 8001224:	10a54b04 	addi	r2,r2,-27348
 8001228:	00c00044 	movi	r3,1
 800122c:	10c00bc5 	stb	r3,47(r2)
    ether.udpTransmit(i);
 8001230:	e0bffd83 	ldbu	r2,-10(fp)
 8001234:	1009883a 	mov	r4,r2
 8001238:	8003ad40 	call	8003ad4 <_ZN9EtherCard11udpTransmitEt>
}
 800123c:	0001883a 	nop
 8001240:	e037883a 	mov	sp,fp
 8001244:	dfc00117 	ldw	ra,4(sp)
 8001248:	df000017 	ldw	fp,0(sp)
 800124c:	dec00204 	addi	sp,sp,8
 8001250:	f800283a 	ret

08001254 <_ZL17checkForDnsAnswert>:

static bool checkForDnsAnswer (uint16_t plen) {
 8001254:	defffc04 	addi	sp,sp,-16
 8001258:	dfc00315 	stw	ra,12(sp)
 800125c:	df000215 	stw	fp,8(sp)
 8001260:	df000204 	addi	fp,sp,8
 8001264:	2005883a 	mov	r2,r4
 8001268:	e0bfff0d 	sth	r2,-4(fp)
    byte *p = gPB + UDP_DATA_P; //start of UDP payload
 800126c:	008200b4 	movhi	r2,2050
 8001270:	10a55584 	addi	r2,r2,-27306
 8001274:	e0bffe15 	stw	r2,-8(fp)
    if (plen < 70 || gPB[UDP_SRC_PORT_L_P] != DNS_PORT || //from DNS source port
 8001278:	e0bfff0b 	ldhu	r2,-4(fp)
 800127c:	108011b0 	cmpltui	r2,r2,70
 8001280:	10001a1e 	bne	r2,zero,80012ec <_ZL17checkForDnsAnswert+0x98>
 8001284:	008200b4 	movhi	r2,2050
 8001288:	10a54b04 	addi	r2,r2,-27348
 800128c:	108008c3 	ldbu	r2,35(r2)
 8001290:	10803fcc 	andi	r2,r2,255
 8001294:	10800d58 	cmpnei	r2,r2,53
 8001298:	1000141e 	bne	r2,zero,80012ec <_ZL17checkForDnsAnswert+0x98>
            gPB[UDP_DST_PORT_H_P] != DNSCLIENT_SRC_PORT_H || //response to same port as we sent from (MSB)
 800129c:	008200b4 	movhi	r2,2050
 80012a0:	10a54b04 	addi	r2,r2,-27348
 80012a4:	10800903 	ldbu	r2,36(r2)
    ether.udpTransmit(i);
}

static bool checkForDnsAnswer (uint16_t plen) {
    byte *p = gPB + UDP_DATA_P; //start of UDP payload
    if (plen < 70 || gPB[UDP_SRC_PORT_L_P] != DNS_PORT || //from DNS source port
 80012a8:	10803fcc 	andi	r2,r2,255
 80012ac:	10803818 	cmpnei	r2,r2,224
 80012b0:	10000e1e 	bne	r2,zero,80012ec <_ZL17checkForDnsAnswert+0x98>
            gPB[UDP_DST_PORT_H_P] != DNSCLIENT_SRC_PORT_H || //response to same port as we sent from (MSB)
            gPB[UDP_DST_PORT_L_P] != dnstid_l || //response to same port as we sent from (LSB)
 80012b4:	008200b4 	movhi	r2,2050
 80012b8:	10a54b04 	addi	r2,r2,-27348
 80012bc:	10c00943 	ldbu	r3,37(r2)
 80012c0:	d0a6fd83 	ldbu	r2,-25610(gp)
}

static bool checkForDnsAnswer (uint16_t plen) {
    byte *p = gPB + UDP_DATA_P; //start of UDP payload
    if (plen < 70 || gPB[UDP_SRC_PORT_L_P] != DNS_PORT || //from DNS source port
            gPB[UDP_DST_PORT_H_P] != DNSCLIENT_SRC_PORT_H || //response to same port as we sent from (MSB)
 80012c4:	18c03fcc 	andi	r3,r3,255
 80012c8:	10803fcc 	andi	r2,r2,255
 80012cc:	1880071e 	bne	r3,r2,80012ec <_ZL17checkForDnsAnswert+0x98>
            gPB[UDP_DST_PORT_L_P] != dnstid_l || //response to same port as we sent from (LSB)
            p[1] != dnstid_l) //message id same as we sent
 80012d0:	e0bffe17 	ldw	r2,-8(fp)
 80012d4:	10800044 	addi	r2,r2,1
 80012d8:	10c00003 	ldbu	r3,0(r2)
 80012dc:	d0a6fd83 	ldbu	r2,-25610(gp)

static bool checkForDnsAnswer (uint16_t plen) {
    byte *p = gPB + UDP_DATA_P; //start of UDP payload
    if (plen < 70 || gPB[UDP_SRC_PORT_L_P] != DNS_PORT || //from DNS source port
            gPB[UDP_DST_PORT_H_P] != DNSCLIENT_SRC_PORT_H || //response to same port as we sent from (MSB)
            gPB[UDP_DST_PORT_L_P] != dnstid_l || //response to same port as we sent from (LSB)
 80012e0:	18c03fcc 	andi	r3,r3,255
 80012e4:	10803fcc 	andi	r2,r2,255
 80012e8:	18800226 	beq	r3,r2,80012f4 <_ZL17checkForDnsAnswert+0xa0>
            p[1] != dnstid_l) //message id same as we sent
        return false; //not our DNS response
 80012ec:	0005883a 	mov	r2,zero
 80012f0:	00004d06 	br	8001428 <_ZL17checkForDnsAnswert+0x1d4>
    if((p[3] & 0x0F) != 0)
 80012f4:	e0bffe17 	ldw	r2,-8(fp)
 80012f8:	108000c4 	addi	r2,r2,3
 80012fc:	10800003 	ldbu	r2,0(r2)
 8001300:	10803fcc 	andi	r2,r2,255
 8001304:	108003cc 	andi	r2,r2,15
 8001308:	10000226 	beq	r2,zero,8001314 <_ZL17checkForDnsAnswert+0xc0>
        return true; //DNS response received with error
 800130c:	00800044 	movi	r2,1
 8001310:	00004506 	br	8001428 <_ZL17checkForDnsAnswert+0x1d4>

    p += *p; // we encoded the query len into tid
 8001314:	e0bffe17 	ldw	r2,-8(fp)
 8001318:	10800003 	ldbu	r2,0(r2)
 800131c:	10803fcc 	andi	r2,r2,255
 8001320:	e0fffe17 	ldw	r3,-8(fp)
 8001324:	1885883a 	add	r2,r3,r2
 8001328:	e0bffe15 	stw	r2,-8(fp)
    for (;;) {
        if (*p & 0xC0)
 800132c:	e0bffe17 	ldw	r2,-8(fp)
 8001330:	10800003 	ldbu	r2,0(r2)
 8001334:	10803fcc 	andi	r2,r2,255
 8001338:	1080300c 	andi	r2,r2,192
 800133c:	10000426 	beq	r2,zero,8001350 <_ZL17checkForDnsAnswert+0xfc>
            p += 2;
 8001340:	e0bffe17 	ldw	r2,-8(fp)
 8001344:	10800084 	addi	r2,r2,2
 8001348:	e0bffe15 	stw	r2,-8(fp)
 800134c:	00001206 	br	8001398 <_ZL17checkForDnsAnswert+0x144>
        else
            while (++p < gPB + plen) {
 8001350:	e0bffe17 	ldw	r2,-8(fp)
 8001354:	10800044 	addi	r2,r2,1
 8001358:	e0bffe15 	stw	r2,-8(fp)
 800135c:	e0ffff0b 	ldhu	r3,-4(fp)
 8001360:	008200b4 	movhi	r2,2050
 8001364:	10a54b04 	addi	r2,r2,-27348
 8001368:	1885883a 	add	r2,r3,r2
 800136c:	e0fffe17 	ldw	r3,-8(fp)
 8001370:	1885803a 	cmpltu	r2,r3,r2
 8001374:	10803fcc 	andi	r2,r2,255
 8001378:	10000726 	beq	r2,zero,8001398 <_ZL17checkForDnsAnswert+0x144>
                if (*p == 0) {
 800137c:	e0bffe17 	ldw	r2,-8(fp)
 8001380:	10800003 	ldbu	r2,0(r2)
 8001384:	10803fcc 	andi	r2,r2,255
 8001388:	103ff11e 	bne	r2,zero,8001350 <_ZL17checkForDnsAnswert+0xfc>
                    ++p;
 800138c:	e0bffe17 	ldw	r2,-8(fp)
 8001390:	10800044 	addi	r2,r2,1
 8001394:	e0bffe15 	stw	r2,-8(fp)
                    break;
                }
            }
        if (p + 14 > gPB + plen)
 8001398:	e0bffe17 	ldw	r2,-8(fp)
 800139c:	10c00384 	addi	r3,r2,14
 80013a0:	e13fff0b 	ldhu	r4,-4(fp)
 80013a4:	008200b4 	movhi	r2,2050
 80013a8:	10a54b04 	addi	r2,r2,-27348
 80013ac:	2085883a 	add	r2,r4,r2
 80013b0:	10c01b36 	bltu	r2,r3,8001420 <_ZL17checkForDnsAnswert+0x1cc>
            break;
        if (p[1] == DNS_TYPE_A && p[9] == 4) { // type "A" and IPv4
 80013b4:	e0bffe17 	ldw	r2,-8(fp)
 80013b8:	10800044 	addi	r2,r2,1
 80013bc:	10800003 	ldbu	r2,0(r2)
 80013c0:	10803fcc 	andi	r2,r2,255
 80013c4:	10800058 	cmpnei	r2,r2,1
 80013c8:	10000c1e 	bne	r2,zero,80013fc <_ZL17checkForDnsAnswert+0x1a8>
 80013cc:	e0bffe17 	ldw	r2,-8(fp)
 80013d0:	10800244 	addi	r2,r2,9
 80013d4:	10800003 	ldbu	r2,0(r2)
 80013d8:	10803fcc 	andi	r2,r2,255
 80013dc:	10800118 	cmpnei	r2,r2,4
 80013e0:	1000061e 	bne	r2,zero,80013fc <_ZL17checkForDnsAnswert+0x1a8>
            ether.copyIp(ether.hisip, p + 10);
 80013e4:	e0bffe17 	ldw	r2,-8(fp)
 80013e8:	10800284 	addi	r2,r2,10
 80013ec:	100b883a 	mov	r5,r2
 80013f0:	d126f2c4 	addi	r4,gp,-25653
 80013f4:	800552c0 	call	800552c <_ZN9EtherCard6copyIpEPhPKh>
            break;
 80013f8:	00000a06 	br	8001424 <_ZL17checkForDnsAnswert+0x1d0>
        }
        p += p[9] + 10;
 80013fc:	e0bffe17 	ldw	r2,-8(fp)
 8001400:	10800244 	addi	r2,r2,9
 8001404:	10800003 	ldbu	r2,0(r2)
 8001408:	10803fcc 	andi	r2,r2,255
 800140c:	10800284 	addi	r2,r2,10
 8001410:	e0fffe17 	ldw	r3,-8(fp)
 8001414:	1885883a 	add	r2,r3,r2
 8001418:	e0bffe15 	stw	r2,-8(fp)
        return false; //not our DNS response
    if((p[3] & 0x0F) != 0)
        return true; //DNS response received with error

    p += *p; // we encoded the query len into tid
    for (;;) {
 800141c:	003fc306 	br	800132c <_ZL17checkForDnsAnswert+0xd8>
                    ++p;
                    break;
                }
            }
        if (p + 14 > gPB + plen)
            break;
 8001420:	0001883a 	nop
            ether.copyIp(ether.hisip, p + 10);
            break;
        }
        p += p[9] + 10;
    }
    return false; //No error
 8001424:	0005883a 	mov	r2,zero
}
 8001428:	e037883a 	mov	sp,fp
 800142c:	dfc00117 	ldw	ra,4(sp)
 8001430:	df000017 	ldw	fp,0(sp)
 8001434:	dec00204 	addi	sp,sp,8
 8001438:	f800283a 	ret

0800143c <_ZN9EtherCard9dnsLookupEPKcb>:

bool EtherCard::dnsLookup (const char* name, bool fromRam) {
 800143c:	defffb04 	addi	sp,sp,-20
 8001440:	dfc00415 	stw	ra,16(sp)
 8001444:	df000315 	stw	fp,12(sp)
 8001448:	df000304 	addi	fp,sp,12
 800144c:	e13ffe15 	stw	r4,-8(fp)
 8001450:	2805883a 	mov	r2,r5
 8001454:	e0bfff05 	stb	r2,-4(fp)
    uint16_t start = clock();
 8001458:	80061880 	call	8006188 <clock>
 800145c:	e0bffd0d 	sth	r2,-12(fp)

    while(!isLinkUp())
 8001460:	8001e500 	call	8001e50 <_ZN8ENC28J608isLinkUpEv>
 8001464:	1080005c 	xori	r2,r2,1
 8001468:	10803fcc 	andi	r2,r2,255
 800146c:	10000926 	beq	r2,zero,8001494 <_ZN9EtherCard9dnsLookupEPKcb+0x58>
    {
        if (uint16_t(clock()) - start >= 30000) {
 8001470:	80061880 	call	8006188 <clock>
 8001474:	10ffffcc 	andi	r3,r2,65535
 8001478:	e0bffd0b 	ldhu	r2,-12(fp)
 800147c:	1885c83a 	sub	r2,r3,r2
 8001480:	109d4c08 	cmpgei	r2,r2,30000
 8001484:	10803fcc 	andi	r2,r2,255
 8001488:	103ff526 	beq	r2,zero,8001460 <_ZN9EtherCard9dnsLookupEPKcb+0x24>
            return false; //timeout waiting for link
 800148c:	0005883a 	mov	r2,zero
 8001490:	00003f06 	br	8001590 <_ZN9EtherCard9dnsLookupEPKcb+0x154>
        }
    }
    while(clientWaitingDns())
 8001494:	8003ec40 	call	8003ec4 <_ZN9EtherCard16clientWaitingDnsEv>
 8001498:	10803fcc 	andi	r2,r2,255
 800149c:	1004c03a 	cmpne	r2,r2,zero
 80014a0:	10803fcc 	andi	r2,r2,255
 80014a4:	10000d26 	beq	r2,zero,80014dc <_ZN9EtherCard9dnsLookupEPKcb+0xa0>
    {
        packetLoop(packetReceive());
 80014a8:	800217c0 	call	800217c <_ZN8ENC28J6013packetReceiveEv>
 80014ac:	10bfffcc 	andi	r2,r2,65535
 80014b0:	1009883a 	mov	r4,r2
 80014b4:	80048340 	call	8004834 <_ZN9EtherCard10packetLoopEt>
        if (uint16_t(clock()) - start >= 30000) {
 80014b8:	80061880 	call	8006188 <clock>
 80014bc:	10ffffcc 	andi	r3,r2,65535
 80014c0:	e0bffd0b 	ldhu	r2,-12(fp)
 80014c4:	1885c83a 	sub	r2,r3,r2
 80014c8:	109d4c08 	cmpgei	r2,r2,30000
 80014cc:	10803fcc 	andi	r2,r2,255
 80014d0:	103ff026 	beq	r2,zero,8001494 <_ZN9EtherCard9dnsLookupEPKcb+0x58>
            return false; //timeout waiting for gateway ARP
 80014d4:	0005883a 	mov	r2,zero
 80014d8:	00002d06 	br	8001590 <_ZN9EtherCard9dnsLookupEPKcb+0x154>
        }
    }

    memset(hisip, 0, IP_LEN);
 80014dc:	01800104 	movi	r6,4
 80014e0:	000b883a 	mov	r5,zero
 80014e4:	d126f2c4 	addi	r4,gp,-25653
 80014e8:	80063b40 	call	80063b4 <memset>
    dnsRequest(name, fromRam);
 80014ec:	e0bfff03 	ldbu	r2,-4(fp)
 80014f0:	100b883a 	mov	r5,r2
 80014f4:	e13ffe17 	ldw	r4,-8(fp)
 80014f8:	80010640 	call	8001064 <_ZL10dnsRequestPKcb>

    start = time(NULL);
 80014fc:	0009883a 	mov	r4,zero
 8001500:	80068900 	call	8006890 <time>
 8001504:	e0bffd0d 	sth	r2,-12(fp)
    while (hisip[0] == 0) {
 8001508:	d0a6f2c3 	ldbu	r2,-25653(gp)
 800150c:	10803fcc 	andi	r2,r2,255
 8001510:	10001e1e 	bne	r2,zero,800158c <_ZN9EtherCard9dnsLookupEPKcb+0x150>
        if (uint16_t(clock()) - start >= 30000)
 8001514:	80061880 	call	8006188 <clock>
 8001518:	10ffffcc 	andi	r3,r2,65535
 800151c:	e0bffd0b 	ldhu	r2,-12(fp)
 8001520:	1885c83a 	sub	r2,r3,r2
 8001524:	109d4c08 	cmpgei	r2,r2,30000
 8001528:	10803fcc 	andi	r2,r2,255
 800152c:	10000226 	beq	r2,zero,8001538 <_ZN9EtherCard9dnsLookupEPKcb+0xfc>
            return false; //timeout waiting for dns response
 8001530:	0005883a 	mov	r2,zero
 8001534:	00001606 	br	8001590 <_ZN9EtherCard9dnsLookupEPKcb+0x154>
        uint16_t len = packetReceive();
 8001538:	800217c0 	call	800217c <_ZN8ENC28J6013packetReceiveEv>
 800153c:	e0bffd8d 	sth	r2,-10(fp)
        if (len > 0 && packetLoop(len) == 0) //packet not handled by tcp/ip packet loop
 8001540:	e0bffd8b 	ldhu	r2,-10(fp)
 8001544:	10000726 	beq	r2,zero,8001564 <_ZN9EtherCard9dnsLookupEPKcb+0x128>
 8001548:	e0bffd8b 	ldhu	r2,-10(fp)
 800154c:	1009883a 	mov	r4,r2
 8001550:	80048340 	call	8004834 <_ZN9EtherCard10packetLoopEt>
 8001554:	10bfffcc 	andi	r2,r2,65535
 8001558:	1000021e 	bne	r2,zero,8001564 <_ZN9EtherCard9dnsLookupEPKcb+0x128>
 800155c:	00800044 	movi	r2,1
 8001560:	00000106 	br	8001568 <_ZN9EtherCard9dnsLookupEPKcb+0x12c>
 8001564:	0005883a 	mov	r2,zero
 8001568:	10803fcc 	andi	r2,r2,255
 800156c:	103fe626 	beq	r2,zero,8001508 <_ZN9EtherCard9dnsLookupEPKcb+0xcc>
            if(checkForDnsAnswer(len))
 8001570:	e0bffd8b 	ldhu	r2,-10(fp)
 8001574:	1009883a 	mov	r4,r2
 8001578:	80012540 	call	8001254 <_ZL17checkForDnsAnswert>
 800157c:	10803fcc 	andi	r2,r2,255
 8001580:	103fe126 	beq	r2,zero,8001508 <_ZN9EtherCard9dnsLookupEPKcb+0xcc>
                return false; //DNS response received with error
 8001584:	0005883a 	mov	r2,zero
 8001588:	00000106 	br	8001590 <_ZN9EtherCard9dnsLookupEPKcb+0x154>
    }

    return true;
 800158c:	00800044 	movi	r2,1
}
 8001590:	e037883a 	mov	sp,fp
 8001594:	dfc00117 	ldw	ra,4(sp)
 8001598:	df000017 	ldw	fp,0(sp)
 800159c:	dec00204 	addi	sp,sp,8
 80015a0:	f800283a 	ret

080015a4 <_Z5delayi>:
struct transmit_status_vector {
    uint8_t bytes[7];
};

void delay(int milli_seconds)
{
 80015a4:	defffc04 	addi	sp,sp,-16
 80015a8:	dfc00315 	stw	ra,12(sp)
 80015ac:	df000215 	stw	fp,8(sp)
 80015b0:	df000204 	addi	fp,sp,8
 80015b4:	e13fff15 	stw	r4,-4(fp)
    // Converting time into milli_seconds
    // Storing start time
    clock_t start_time = clock();
 80015b8:	80061880 	call	8006188 <clock>
 80015bc:	e0bffe15 	stw	r2,-8(fp)

    // looping till required time is not achieved
    while (clock() < start_time + milli_seconds)
 80015c0:	80061880 	call	8006188 <clock>
 80015c4:	1009883a 	mov	r4,r2
 80015c8:	e0ffff17 	ldw	r3,-4(fp)
 80015cc:	e0bffe17 	ldw	r2,-8(fp)
 80015d0:	1885883a 	add	r2,r3,r2
 80015d4:	2085803a 	cmpltu	r2,r4,r2
 80015d8:	10803fcc 	andi	r2,r2,255
 80015dc:	10000126 	beq	r2,zero,80015e4 <_Z5delayi+0x40>
 80015e0:	003ff706 	br	80015c0 <_Z5delayi+0x1c>
        ;
}
 80015e4:	0001883a 	nop
 80015e8:	e037883a 	mov	sp,fp
 80015ec:	dfc00117 	ldw	ra,4(sp)
 80015f0:	df000017 	ldw	fp,0(sp)
 80015f4:	dec00204 	addi	sp,sp,8
 80015f8:	f800283a 	ret

080015fc <_Z7bitReadhh>:

// Returns nth bit of x
uint8_t bitRead(uint8_t x, uint8_t n) {
 80015fc:	defffd04 	addi	sp,sp,-12
 8001600:	df000215 	stw	fp,8(sp)
 8001604:	df000204 	addi	fp,sp,8
 8001608:	2007883a 	mov	r3,r4
 800160c:	2805883a 	mov	r2,r5
 8001610:	e0fffe05 	stb	r3,-8(fp)
 8001614:	e0bfff05 	stb	r2,-4(fp)
    return (x >> n) & 0x1;
 8001618:	e0fffe03 	ldbu	r3,-8(fp)
 800161c:	e0bfff03 	ldbu	r2,-4(fp)
 8001620:	1885d83a 	sra	r2,r3,r2
 8001624:	1080004c 	andi	r2,r2,1
}
 8001628:	e037883a 	mov	sp,fp
 800162c:	df000017 	ldw	fp,0(sp)
 8001630:	dec00104 	addi	sp,sp,4
 8001634:	f800283a 	ret

08001638 <_ZL7writeOphhh>:
//                            SPDR, // read into SPDR
//                            flags); // no flags
//    printf("spdr: (%d) %x", flags, SPDR[0]);
//}

static void writeOp (uint8_t op, uint8_t address, uint8_t data) {
 8001638:	defff704 	addi	sp,sp,-36
 800163c:	dfc00815 	stw	ra,32(sp)
 8001640:	df000715 	stw	fp,28(sp)
 8001644:	df000704 	addi	fp,sp,28
 8001648:	2807883a 	mov	r3,r5
 800164c:	3005883a 	mov	r2,r6
 8001650:	e13ffd05 	stb	r4,-12(fp)
 8001654:	e0fffe05 	stb	r3,-8(fp)
 8001658:	e0bfff05 	stb	r2,-4(fp)
    uint8_t send_data[2];
    send_data[0] = op | (address & ADDR_MASK);
 800165c:	e0bffe03 	ldbu	r2,-8(fp)
 8001660:	108007cc 	andi	r2,r2,31
 8001664:	1007883a 	mov	r3,r2
 8001668:	e0bffd03 	ldbu	r2,-12(fp)
 800166c:	1884b03a 	or	r2,r3,r2
 8001670:	e0bffc05 	stb	r2,-16(fp)
    send_data[1] = data;
 8001674:	e0bfff03 	ldbu	r2,-4(fp)
 8001678:	e0bffc45 	stb	r2,-15(fp)
							ETHERNET_CHIP_SLAVE,
							2, // write one byte
							send_data, // write data
							0, // Read one byte
							0, // read into SPDR
							0); // no flags
 800167c:	d8000215 	stw	zero,8(sp)
 8001680:	d8000115 	stw	zero,4(sp)
 8001684:	d8000015 	stw	zero,0(sp)
 8001688:	e1fffc04 	addi	r7,fp,-16
 800168c:	01800084 	movi	r6,2
 8001690:	000b883a 	mov	r5,zero
 8001694:	01000074 	movhi	r4,1
 8001698:	21042804 	addi	r4,r4,4256
 800169c:	80144ec0 	call	80144ec <alt_avalon_spi_command>
}
 80016a0:	0001883a 	nop
 80016a4:	e037883a 	mov	sp,fp
 80016a8:	dfc00117 	ldw	ra,4(sp)
 80016ac:	df000017 	ldw	fp,0(sp)
 80016b0:	dec00204 	addi	sp,sp,8
 80016b4:	f800283a 	ret

080016b8 <_ZL6readOphh>:

static uint8_t readOp (uint8_t op, uint8_t address) {
 80016b8:	defff804 	addi	sp,sp,-32
 80016bc:	dfc00715 	stw	ra,28(sp)
 80016c0:	df000615 	stw	fp,24(sp)
 80016c4:	df000604 	addi	fp,sp,24
 80016c8:	2007883a 	mov	r3,r4
 80016cc:	2805883a 	mov	r2,r5
 80016d0:	e0fffe05 	stb	r3,-8(fp)
 80016d4:	e0bfff05 	stb	r2,-4(fp)
    uint8_t send_data[1];
    send_data[0] = op | (address & ADDR_MASK);
 80016d8:	e0bfff03 	ldbu	r2,-4(fp)
 80016dc:	108007cc 	andi	r2,r2,31
 80016e0:	1007883a 	mov	r3,r2
 80016e4:	e0bffe03 	ldbu	r2,-8(fp)
 80016e8:	1884b03a 	or	r2,r3,r2
 80016ec:	e0bffd05 	stb	r2,-12(fp)
//    uint8_t recieve_data[2];

    if (address & 0x80) {
 80016f0:	e0bfff03 	ldbu	r2,-4(fp)
 80016f4:	10803fcc 	andi	r2,r2,255
 80016f8:	1080201c 	xori	r2,r2,128
 80016fc:	10bfe004 	addi	r2,r2,-128
 8001700:	10000d0e 	bge	r2,zero,8001738 <_ZL6readOphh+0x80>
    							ETHERNET_CHIP_SLAVE,
    							1, // write one byte
    							send_data, // write data
    							2, // Read one byte
								recieve_data, // read into SPDR
    							0); // no flags
 8001704:	d8000215 	stw	zero,8(sp)
 8001708:	e0bffd44 	addi	r2,fp,-11
 800170c:	d8800115 	stw	r2,4(sp)
 8001710:	00800084 	movi	r2,2
 8001714:	d8800015 	stw	r2,0(sp)
 8001718:	e1fffd04 	addi	r7,fp,-12
 800171c:	01800044 	movi	r6,1
 8001720:	000b883a 	mov	r5,zero
 8001724:	01000074 	movhi	r4,1
 8001728:	21042804 	addi	r4,r4,4256
 800172c:	80144ec0 	call	80144ec <alt_avalon_spi_command>
    	return recieve_data[1];
 8001730:	e0bffd83 	ldbu	r2,-10(fp)
 8001734:	00000c06 	br	8001768 <_ZL6readOphh+0xb0>
    							ETHERNET_CHIP_SLAVE,
    							1, // write one byte
    							send_data, // write data
    							1, // Read one byte
								recieve_data, // read into SPDR
    							0); // no flags
 8001738:	d8000215 	stw	zero,8(sp)
 800173c:	e0bffdc4 	addi	r2,fp,-9
 8001740:	d8800115 	stw	r2,4(sp)
 8001744:	00800044 	movi	r2,1
 8001748:	d8800015 	stw	r2,0(sp)
 800174c:	e1fffd04 	addi	r7,fp,-12
 8001750:	01800044 	movi	r6,1
 8001754:	000b883a 	mov	r5,zero
 8001758:	01000074 	movhi	r4,1
 800175c:	21042804 	addi	r4,r4,4256
 8001760:	80144ec0 	call	80144ec <alt_avalon_spi_command>
    	return recieve_data[0];
 8001764:	e0bffdc3 	ldbu	r2,-9(fp)
    }

    return 0;
}
 8001768:	e037883a 	mov	sp,fp
 800176c:	dfc00117 	ldw	ra,4(sp)
 8001770:	df000017 	ldw	fp,0(sp)
 8001774:	dec00204 	addi	sp,sp,8
 8001778:	f800283a 	ret

0800177c <_ZL7SetBankh>:

static void SetBank (uint8_t address) {
 800177c:	defffd04 	addi	sp,sp,-12
 8001780:	dfc00215 	stw	ra,8(sp)
 8001784:	df000115 	stw	fp,4(sp)
 8001788:	df000104 	addi	fp,sp,4
 800178c:	2005883a 	mov	r2,r4
 8001790:	e0bfff05 	stb	r2,-4(fp)
    if ((address & BANK_MASK) != Enc28j60Bank) {
 8001794:	e0bfff03 	ldbu	r2,-4(fp)
 8001798:	10c0180c 	andi	r3,r2,96
 800179c:	d0a6ff03 	ldbu	r2,-25604(gp)
 80017a0:	10803fcc 	andi	r2,r2,255
 80017a4:	18800f26 	beq	r3,r2,80017e4 <_ZL7SetBankh+0x68>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
 80017a8:	018000c4 	movi	r6,3
 80017ac:	014007c4 	movi	r5,31
 80017b0:	01002804 	movi	r4,160
 80017b4:	80016380 	call	8001638 <_ZL7writeOphhh>
        Enc28j60Bank = address & BANK_MASK;
 80017b8:	e0bfff03 	ldbu	r2,-4(fp)
 80017bc:	1080180c 	andi	r2,r2,96
 80017c0:	d0a6ff05 	stb	r2,-25604(gp)
//        printf("bank: %x\n", Enc28j60Bank);
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
 80017c4:	d0a6ff03 	ldbu	r2,-25604(gp)
 80017c8:	10803fcc 	andi	r2,r2,255
 80017cc:	1005d17a 	srai	r2,r2,5
 80017d0:	10803fcc 	andi	r2,r2,255
 80017d4:	100d883a 	mov	r6,r2
 80017d8:	014007c4 	movi	r5,31
 80017dc:	01002004 	movi	r4,128
 80017e0:	80016380 	call	8001638 <_ZL7writeOphhh>
    }
}
 80017e4:	0001883a 	nop
 80017e8:	e037883a 	mov	sp,fp
 80017ec:	dfc00117 	ldw	ra,4(sp)
 80017f0:	df000017 	ldw	fp,0(sp)
 80017f4:	dec00204 	addi	sp,sp,8
 80017f8:	f800283a 	ret

080017fc <_ZL12writeRegBytehh>:

static void writeRegByte (uint8_t address, uint8_t data) {
 80017fc:	defffc04 	addi	sp,sp,-16
 8001800:	dfc00315 	stw	ra,12(sp)
 8001804:	df000215 	stw	fp,8(sp)
 8001808:	df000204 	addi	fp,sp,8
 800180c:	2007883a 	mov	r3,r4
 8001810:	2805883a 	mov	r2,r5
 8001814:	e0fffe05 	stb	r3,-8(fp)
 8001818:	e0bfff05 	stb	r2,-4(fp)
    SetBank(address);
 800181c:	e0bffe03 	ldbu	r2,-8(fp)
 8001820:	1009883a 	mov	r4,r2
 8001824:	800177c0 	call	800177c <_ZL7SetBankh>
    writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
 8001828:	e0bffe03 	ldbu	r2,-8(fp)
 800182c:	e0ffff03 	ldbu	r3,-4(fp)
 8001830:	180d883a 	mov	r6,r3
 8001834:	100b883a 	mov	r5,r2
 8001838:	01001004 	movi	r4,64
 800183c:	80016380 	call	8001638 <_ZL7writeOphhh>
}
 8001840:	0001883a 	nop
 8001844:	e037883a 	mov	sp,fp
 8001848:	dfc00117 	ldw	ra,4(sp)
 800184c:	df000017 	ldw	fp,0(sp)
 8001850:	dec00204 	addi	sp,sp,8
 8001854:	f800283a 	ret

08001858 <_ZL8writeReght>:

static void writeReg(uint8_t address, uint16_t data) {
 8001858:	defffc04 	addi	sp,sp,-16
 800185c:	dfc00315 	stw	ra,12(sp)
 8001860:	df000215 	stw	fp,8(sp)
 8001864:	df000204 	addi	fp,sp,8
 8001868:	2007883a 	mov	r3,r4
 800186c:	2805883a 	mov	r2,r5
 8001870:	e0fffe05 	stb	r3,-8(fp)
 8001874:	e0bfff0d 	sth	r2,-4(fp)
    writeRegByte(address, data);
 8001878:	e0bffe03 	ldbu	r2,-8(fp)
 800187c:	e0ffff0b 	ldhu	r3,-4(fp)
 8001880:	18c03fcc 	andi	r3,r3,255
 8001884:	180b883a 	mov	r5,r3
 8001888:	1009883a 	mov	r4,r2
 800188c:	80017fc0 	call	80017fc <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
 8001890:	e0bffe03 	ldbu	r2,-8(fp)
 8001894:	10800044 	addi	r2,r2,1
 8001898:	10c03fcc 	andi	r3,r2,255
 800189c:	e0bfff0b 	ldhu	r2,-4(fp)
 80018a0:	1004d23a 	srli	r2,r2,8
 80018a4:	10bfffcc 	andi	r2,r2,65535
 80018a8:	100b883a 	mov	r5,r2
 80018ac:	1809883a 	mov	r4,r3
 80018b0:	80017fc0 	call	80017fc <_ZL12writeRegBytehh>
}
 80018b4:	0001883a 	nop
 80018b8:	e037883a 	mov	sp,fp
 80018bc:	dfc00117 	ldw	ra,4(sp)
 80018c0:	df000017 	ldw	fp,0(sp)
 80018c4:	dec00204 	addi	sp,sp,8
 80018c8:	f800283a 	ret

080018cc <_ZL11readRegByteh>:

static uint8_t readRegByte (uint8_t address) {
 80018cc:	defffd04 	addi	sp,sp,-12
 80018d0:	dfc00215 	stw	ra,8(sp)
 80018d4:	df000115 	stw	fp,4(sp)
 80018d8:	df000104 	addi	fp,sp,4
 80018dc:	2005883a 	mov	r2,r4
 80018e0:	e0bfff05 	stb	r2,-4(fp)
    SetBank(address);
 80018e4:	e0bfff03 	ldbu	r2,-4(fp)
 80018e8:	1009883a 	mov	r4,r2
 80018ec:	800177c0 	call	800177c <_ZL7SetBankh>
    return readOp(ENC28J60_READ_CTRL_REG, address);
 80018f0:	e0bfff03 	ldbu	r2,-4(fp)
 80018f4:	100b883a 	mov	r5,r2
 80018f8:	0009883a 	mov	r4,zero
 80018fc:	80016b80 	call	80016b8 <_ZL6readOphh>
}
 8001900:	e037883a 	mov	sp,fp
 8001904:	dfc00117 	ldw	ra,4(sp)
 8001908:	df000017 	ldw	fp,0(sp)
 800190c:	dec00204 	addi	sp,sp,8
 8001910:	f800283a 	ret

08001914 <_ZL7readRegh>:

static uint16_t readReg(byte address) {
 8001914:	defffc04 	addi	sp,sp,-16
 8001918:	dfc00315 	stw	ra,12(sp)
 800191c:	df000215 	stw	fp,8(sp)
 8001920:	dc000115 	stw	r16,4(sp)
 8001924:	df000204 	addi	fp,sp,8
 8001928:	2005883a 	mov	r2,r4
 800192c:	e0bffe05 	stb	r2,-8(fp)
    return readRegByte(address) + (readRegByte(address+1) << 8);
 8001930:	e0bffe03 	ldbu	r2,-8(fp)
 8001934:	1009883a 	mov	r4,r2
 8001938:	80018cc0 	call	80018cc <_ZL11readRegByteh>
 800193c:	14003fcc 	andi	r16,r2,255
 8001940:	e0bffe03 	ldbu	r2,-8(fp)
 8001944:	10800044 	addi	r2,r2,1
 8001948:	10803fcc 	andi	r2,r2,255
 800194c:	1009883a 	mov	r4,r2
 8001950:	80018cc0 	call	80018cc <_ZL11readRegByteh>
 8001954:	10803fcc 	andi	r2,r2,255
 8001958:	1004923a 	slli	r2,r2,8
 800195c:	8085883a 	add	r2,r16,r2
}
 8001960:	e6ffff04 	addi	sp,fp,-4
 8001964:	dfc00217 	ldw	ra,8(sp)
 8001968:	df000117 	ldw	fp,4(sp)
 800196c:	dc000017 	ldw	r16,0(sp)
 8001970:	dec00304 	addi	sp,sp,12
 8001974:	f800283a 	ret

08001978 <_ZL8writePhyht>:


static void writePhy (uint8_t address, uint16_t data) {
 8001978:	defffc04 	addi	sp,sp,-16
 800197c:	dfc00315 	stw	ra,12(sp)
 8001980:	df000215 	stw	fp,8(sp)
 8001984:	df000204 	addi	fp,sp,8
 8001988:	2007883a 	mov	r3,r4
 800198c:	2805883a 	mov	r2,r5
 8001990:	e0fffe05 	stb	r3,-8(fp)
 8001994:	e0bfff0d 	sth	r2,-4(fp)
    writeRegByte(MIREGADR, address);
 8001998:	e0bffe03 	ldbu	r2,-8(fp)
 800199c:	100b883a 	mov	r5,r2
 80019a0:	01003504 	movi	r4,212
 80019a4:	80017fc0 	call	80017fc <_ZL12writeRegBytehh>
    writeReg(MIWR, data);
 80019a8:	e0bfff0b 	ldhu	r2,-4(fp)
 80019ac:	100b883a 	mov	r5,r2
 80019b0:	01003584 	movi	r4,214
 80019b4:	80018580 	call	8001858 <_ZL8writeReght>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
 80019b8:	01003a84 	movi	r4,234
 80019bc:	80018cc0 	call	80018cc <_ZL11readRegByteh>
 80019c0:	10803fcc 	andi	r2,r2,255
 80019c4:	1080004c 	andi	r2,r2,1
 80019c8:	1004c03a 	cmpne	r2,r2,zero
 80019cc:	10803fcc 	andi	r2,r2,255
 80019d0:	10000126 	beq	r2,zero,80019d8 <_ZL8writePhyht+0x60>
 80019d4:	003ff806 	br	80019b8 <_ZL8writePhyht+0x40>
        ;
}
 80019d8:	0001883a 	nop
 80019dc:	e037883a 	mov	sp,fp
 80019e0:	dfc00117 	ldw	ra,4(sp)
 80019e4:	df000017 	ldw	fp,0(sp)
 80019e8:	dec00204 	addi	sp,sp,8
 80019ec:	f800283a 	ret

080019f0 <_ZL11readPhyByteh>:

static uint16_t readPhyByte (uint8_t address) {
 80019f0:	defffd04 	addi	sp,sp,-12
 80019f4:	dfc00215 	stw	ra,8(sp)
 80019f8:	df000115 	stw	fp,4(sp)
 80019fc:	df000104 	addi	fp,sp,4
 8001a00:	2005883a 	mov	r2,r4
 8001a04:	e0bfff05 	stb	r2,-4(fp)
    writeRegByte(MIREGADR, address);
 8001a08:	e0bfff03 	ldbu	r2,-4(fp)
 8001a0c:	100b883a 	mov	r5,r2
 8001a10:	01003504 	movi	r4,212
 8001a14:	80017fc0 	call	80017fc <_ZL12writeRegBytehh>
    writeRegByte(MICMD, MICMD_MIIRD);
 8001a18:	01400044 	movi	r5,1
 8001a1c:	01003484 	movi	r4,210
 8001a20:	80017fc0 	call	80017fc <_ZL12writeRegBytehh>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
 8001a24:	01003a84 	movi	r4,234
 8001a28:	80018cc0 	call	80018cc <_ZL11readRegByteh>
 8001a2c:	10803fcc 	andi	r2,r2,255
 8001a30:	1080004c 	andi	r2,r2,1
 8001a34:	1004c03a 	cmpne	r2,r2,zero
 8001a38:	10803fcc 	andi	r2,r2,255
 8001a3c:	10000126 	beq	r2,zero,8001a44 <_ZL11readPhyByteh+0x54>
 8001a40:	003ff806 	br	8001a24 <_ZL11readPhyByteh+0x34>
        ;
    writeRegByte(MICMD, 0x00);
 8001a44:	000b883a 	mov	r5,zero
 8001a48:	01003484 	movi	r4,210
 8001a4c:	80017fc0 	call	80017fc <_ZL12writeRegBytehh>
    return readRegByte(MIRD+1);
 8001a50:	01003644 	movi	r4,217
 8001a54:	80018cc0 	call	80018cc <_ZL11readRegByteh>
 8001a58:	10803fcc 	andi	r2,r2,255
}
 8001a5c:	e037883a 	mov	sp,fp
 8001a60:	dfc00117 	ldw	ra,4(sp)
 8001a64:	df000017 	ldw	fp,0(sp)
 8001a68:	dec00204 	addi	sp,sp,8
 8001a6c:	f800283a 	ret

08001a70 <_Z8getThingh>:

uint8_t getThing(unsigned char address) {
 8001a70:	defffd04 	addi	sp,sp,-12
 8001a74:	dfc00215 	stw	ra,8(sp)
 8001a78:	df000115 	stw	fp,4(sp)
 8001a7c:	df000104 	addi	fp,sp,4
 8001a80:	2005883a 	mov	r2,r4
 8001a84:	e0bfff05 	stb	r2,-4(fp)
	return readRegByte(address);
 8001a88:	e0bfff03 	ldbu	r2,-4(fp)
 8001a8c:	1009883a 	mov	r4,r2
 8001a90:	80018cc0 	call	80018cc <_ZL11readRegByteh>
}
 8001a94:	e037883a 	mov	sp,fp
 8001a98:	dfc00117 	ldw	ra,4(sp)
 8001a9c:	df000017 	ldw	fp,0(sp)
 8001aa0:	dec00204 	addi	sp,sp,8
 8001aa4:	f800283a 	ret

08001aa8 <_ZL10getMacAddrv>:

static void getMacAddr() {
 8001aa8:	defffb04 	addi	sp,sp,-20
 8001aac:	dfc00415 	stw	ra,16(sp)
 8001ab0:	df000315 	stw	fp,12(sp)
 8001ab4:	df000304 	addi	fp,sp,12
	uint8_t arr[6];
	arr[0] = readReg(MAADR5);
 8001ab8:	01003904 	movi	r4,228
 8001abc:	80019140 	call	8001914 <_ZL7readRegh>
 8001ac0:	e0bffe05 	stb	r2,-8(fp)
	arr[1] = readReg(MAADR4);
 8001ac4:	01003944 	movi	r4,229
 8001ac8:	80019140 	call	8001914 <_ZL7readRegh>
 8001acc:	e0bffe45 	stb	r2,-7(fp)
	arr[2] = readReg(MAADR3);
 8001ad0:	01003884 	movi	r4,226
 8001ad4:	80019140 	call	8001914 <_ZL7readRegh>
 8001ad8:	e0bffe85 	stb	r2,-6(fp)
	arr[3] = readReg(MAADR2);
 8001adc:	010038c4 	movi	r4,227
 8001ae0:	80019140 	call	8001914 <_ZL7readRegh>
 8001ae4:	e0bffec5 	stb	r2,-5(fp)
	arr[4] = readReg(MAADR1);
 8001ae8:	01003804 	movi	r4,224
 8001aec:	80019140 	call	8001914 <_ZL7readRegh>
 8001af0:	e0bfff05 	stb	r2,-4(fp)
	arr[5] = readReg(MAADR0);
 8001af4:	01003844 	movi	r4,225
 8001af8:	80019140 	call	8001914 <_ZL7readRegh>
 8001afc:	e0bfff45 	stb	r2,-3(fp)

	for(int i = 0; i < 6; i++)
 8001b00:	e03ffd15 	stw	zero,-12(fp)
 8001b04:	e0bffd17 	ldw	r2,-12(fp)
 8001b08:	10800188 	cmpgei	r2,r2,6
 8001b0c:	10000d1e 	bne	r2,zero,8001b44 <_ZL10getMacAddrv+0x9c>
		printf("%x, ", arr[i]);
 8001b10:	e0fffe04 	addi	r3,fp,-8
 8001b14:	e0bffd17 	ldw	r2,-12(fp)
 8001b18:	1885883a 	add	r2,r3,r2
 8001b1c:	10800003 	ldbu	r2,0(r2)
 8001b20:	10803fcc 	andi	r2,r2,255
 8001b24:	100b883a 	mov	r5,r2
 8001b28:	01020074 	movhi	r4,2049
 8001b2c:	21165804 	addi	r4,r4,22880
 8001b30:	800650c0 	call	800650c <printf>
	arr[2] = readReg(MAADR3);
	arr[3] = readReg(MAADR2);
	arr[4] = readReg(MAADR1);
	arr[5] = readReg(MAADR0);

	for(int i = 0; i < 6; i++)
 8001b34:	e0bffd17 	ldw	r2,-12(fp)
 8001b38:	10800044 	addi	r2,r2,1
 8001b3c:	e0bffd15 	stw	r2,-12(fp)
 8001b40:	003ff006 	br	8001b04 <_ZL10getMacAddrv+0x5c>
		printf("%x, ", arr[i]);
}
 8001b44:	0001883a 	nop
 8001b48:	e037883a 	mov	sp,fp
 8001b4c:	dfc00117 	ldw	ra,4(sp)
 8001b50:	df000017 	ldw	fp,0(sp)
 8001b54:	dec00204 	addi	sp,sp,8
 8001b58:	f800283a 	ret

08001b5c <_ZL12doOtherThingv>:

static void doOtherThing() {
 8001b5c:	defffc04 	addi	sp,sp,-16
 8001b60:	dfc00315 	stw	ra,12(sp)
 8001b64:	df000215 	stw	fp,8(sp)
 8001b68:	df000204 	addi	fp,sp,8
	uint8_t arr[2];
	arr[0] = readReg(EPKTCNT);
 8001b6c:	01000e44 	movi	r4,57
 8001b70:	80019140 	call	8001914 <_ZL7readRegh>
 8001b74:	e0bfff05 	stb	r2,-4(fp)

	writeOp(ENC28J60_BIT_FIELD_SET, EPKTCNT, 0x05);
 8001b78:	01800144 	movi	r6,5
 8001b7c:	01400e44 	movi	r5,57
 8001b80:	01002004 	movi	r4,128
 8001b84:	80016380 	call	8001638 <_ZL7writeOphhh>

	arr[1] = readReg(EPKTCNT);
 8001b88:	01000e44 	movi	r4,57
 8001b8c:	80019140 	call	8001914 <_ZL7readRegh>
 8001b90:	e0bfff45 	stb	r2,-3(fp)
	printf("doOtherThing out: ");
 8001b94:	01020074 	movhi	r4,2049
 8001b98:	21165a04 	addi	r4,r4,22888
 8001b9c:	800650c0 	call	800650c <printf>
	for(int i = 0; i < 2; i++)
 8001ba0:	e03ffe15 	stw	zero,-8(fp)
 8001ba4:	e0bffe17 	ldw	r2,-8(fp)
 8001ba8:	10800088 	cmpgei	r2,r2,2
 8001bac:	10000d1e 	bne	r2,zero,8001be4 <_ZL12doOtherThingv+0x88>
		printf("%x, ", arr[i]);
 8001bb0:	e0ffff04 	addi	r3,fp,-4
 8001bb4:	e0bffe17 	ldw	r2,-8(fp)
 8001bb8:	1885883a 	add	r2,r3,r2
 8001bbc:	10800003 	ldbu	r2,0(r2)
 8001bc0:	10803fcc 	andi	r2,r2,255
 8001bc4:	100b883a 	mov	r5,r2
 8001bc8:	01020074 	movhi	r4,2049
 8001bcc:	21165804 	addi	r4,r4,22880
 8001bd0:	800650c0 	call	800650c <printf>

	writeOp(ENC28J60_BIT_FIELD_SET, EPKTCNT, 0x05);

	arr[1] = readReg(EPKTCNT);
	printf("doOtherThing out: ");
	for(int i = 0; i < 2; i++)
 8001bd4:	e0bffe17 	ldw	r2,-8(fp)
 8001bd8:	10800044 	addi	r2,r2,1
 8001bdc:	e0bffe15 	stw	r2,-8(fp)
 8001be0:	003ff006 	br	8001ba4 <_ZL12doOtherThingv+0x48>
		printf("%x, ", arr[i]);

}
 8001be4:	0001883a 	nop
 8001be8:	e037883a 	mov	sp,fp
 8001bec:	dfc00117 	ldw	ra,4(sp)
 8001bf0:	df000017 	ldw	fp,0(sp)
 8001bf4:	dec00204 	addi	sp,sp,8
 8001bf8:	f800283a 	ret

08001bfc <_ZN8ENC28J6010initializeEtPKhh>:

uint8_t ENC28J60::initialize(uint16_t size, const uint8_t *macaddr,
                             uint8_t csPin) {
 8001bfc:	defffa04 	addi	sp,sp,-24
 8001c00:	dfc00515 	stw	ra,20(sp)
 8001c04:	df000415 	stw	fp,16(sp)
 8001c08:	df000404 	addi	fp,sp,16
 8001c0c:	2007883a 	mov	r3,r4
 8001c10:	e17ffe15 	stw	r5,-8(fp)
 8001c14:	3005883a 	mov	r2,r6
 8001c18:	e0fffd0d 	sth	r3,-12(fp)
 8001c1c:	e0bfff05 	stb	r2,-4(fp)
//	uint8_t arr2[1];
//	arr2[0] = readReg(0x0A);
//	printf("ar: %x", arr2[0]);
//	return 6;

  bufferSize = size;
 8001c20:	e0bffd0b 	ldhu	r2,-12(fp)
 8001c24:	d0a6fe0d 	sth	r2,-25608(gp)

  selectPin = csPin;
 8001c28:	e0bfff03 	ldbu	r2,-4(fp)
 8001c2c:	d0a6ff45 	stb	r2,-25603(gp)
  //   initSPI();

  // pinMode(selectPin, OUTPUT);
//  disableChip();

  writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
 8001c30:	01803fc4 	movi	r6,255
 8001c34:	000b883a 	mov	r5,zero
 8001c38:	01003fc4 	movi	r4,255
 8001c3c:	80016380 	call	8001638 <_ZL7writeOphhh>
  delay(2); // errata B7/2
 8001c40:	01000084 	movi	r4,2
 8001c44:	80015a40 	call	80015a4 <_Z5delayi>
  while (!(readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY))
 8001c48:	01400744 	movi	r5,29
 8001c4c:	0009883a 	mov	r4,zero
 8001c50:	80016b80 	call	80016b8 <_ZL6readOphh>
 8001c54:	10803fcc 	andi	r2,r2,255
 8001c58:	1080004c 	andi	r2,r2,1
 8001c5c:	1005003a 	cmpeq	r2,r2,zero
 8001c60:	10803fcc 	andi	r2,r2,255
 8001c64:	10000126 	beq	r2,zero,8001c6c <_ZN8ENC28J6010initializeEtPKhh+0x70>
 8001c68:	003ff706 	br	8001c48 <_ZN8ENC28J6010initializeEtPKhh+0x4c>
    ;

  writeReg(ERXST, RXSTART_INIT);
 8001c6c:	000b883a 	mov	r5,zero
 8001c70:	01000204 	movi	r4,8
 8001c74:	80018580 	call	8001858 <_ZL8writeReght>
  writeReg(ERXRDPT, RXSTART_INIT);
 8001c78:	000b883a 	mov	r5,zero
 8001c7c:	01000304 	movi	r4,12
 8001c80:	80018580 	call	8001858 <_ZL8writeReght>
  writeReg(ERXND, RXSTOP_INIT);
 8001c84:	0142ffc4 	movi	r5,3071
 8001c88:	01000284 	movi	r4,10
 8001c8c:	80018580 	call	8001858 <_ZL8writeReght>
  writeReg(ETXST, TXSTART_INIT);
 8001c90:	01430004 	movi	r5,3072
 8001c94:	01000104 	movi	r4,4
 8001c98:	80018580 	call	8001858 <_ZL8writeReght>
  writeReg(ETXND, TXSTOP_INIT);
 8001c9c:	01447fc4 	movi	r5,4607
 8001ca0:	01000184 	movi	r4,6
 8001ca4:	80018580 	call	8001858 <_ZL8writeReght>

  // Stretch pulses for LED, LED_A=Link, LED_B=activity
  writePhy(PHLCON, 0x476);
 8001ca8:	01411d84 	movi	r5,1142
 8001cac:	01000504 	movi	r4,20
 8001cb0:	80019780 	call	8001978 <_ZL8writePhyht>

  writeRegByte(ERXFCON,
               ERXFCON_UCEN | ERXFCON_CRCEN | ERXFCON_PMEN | ERXFCON_BCEN);
 8001cb4:	01402c44 	movi	r5,177
 8001cb8:	01000e04 	movi	r4,56
 8001cbc:	80017fc0 	call	80017fc <_ZL12writeRegBytehh>
  writeReg(EPMM0, 0x303f);
 8001cc0:	014c0fc4 	movi	r5,12351
 8001cc4:	01000a04 	movi	r4,40
 8001cc8:	80018580 	call	8001858 <_ZL8writeReght>
  writeReg(EPMCS, 0xf7f9);
 8001ccc:	017dfe54 	movui	r5,63481
 8001cd0:	01000c04 	movi	r4,48
 8001cd4:	80018580 	call	8001858 <_ZL8writeReght>
  writeRegByte(MACON1, MACON1_MARXEN);
 8001cd8:	01400044 	movi	r5,1
 8001cdc:	01003004 	movi	r4,192
 8001ce0:	80017fc0 	call	80017fc <_ZL12writeRegBytehh>
  writeOp(ENC28J60_BIT_FIELD_SET, MACON3,
          MACON3_PADCFG0 | MACON3_TXCRCEN | MACON3_FRMLNEN);
 8001ce4:	01800c84 	movi	r6,50
 8001ce8:	01403084 	movi	r5,194
 8001cec:	01002004 	movi	r4,128
 8001cf0:	80016380 	call	8001638 <_ZL7writeOphhh>
  writeReg(MAIPG, 0x0C12);
 8001cf4:	01430484 	movi	r5,3090
 8001cf8:	01003184 	movi	r4,198
 8001cfc:	80018580 	call	8001858 <_ZL8writeReght>
  writeRegByte(MABBIPG, 0x12);
 8001d00:	01400484 	movi	r5,18
 8001d04:	01003104 	movi	r4,196
 8001d08:	80017fc0 	call	80017fc <_ZL12writeRegBytehh>
  writeReg(MAMXFL, MAX_FRAMELEN);
 8001d0c:	01417704 	movi	r5,1500
 8001d10:	01003284 	movi	r4,202
 8001d14:	80018580 	call	8001858 <_ZL8writeReght>
  printf("at 2nd: %x\n", macaddr[1]);
 8001d18:	e0bffe17 	ldw	r2,-8(fp)
 8001d1c:	10800044 	addi	r2,r2,1
 8001d20:	10800003 	ldbu	r2,0(r2)
 8001d24:	10803fcc 	andi	r2,r2,255
 8001d28:	100b883a 	mov	r5,r2
 8001d2c:	01020074 	movhi	r4,2049
 8001d30:	21165f04 	addi	r4,r4,22908
 8001d34:	800650c0 	call	800650c <printf>

	writeRegByte(MAADR5, macaddr[0]);
 8001d38:	e0bffe17 	ldw	r2,-8(fp)
 8001d3c:	10800003 	ldbu	r2,0(r2)
 8001d40:	10803fcc 	andi	r2,r2,255
 8001d44:	100b883a 	mov	r5,r2
 8001d48:	01003904 	movi	r4,228
 8001d4c:	80017fc0 	call	80017fc <_ZL12writeRegBytehh>
	writeRegByte(MAADR4, macaddr[1]);
 8001d50:	e0bffe17 	ldw	r2,-8(fp)
 8001d54:	10800044 	addi	r2,r2,1
 8001d58:	10800003 	ldbu	r2,0(r2)
 8001d5c:	10803fcc 	andi	r2,r2,255
 8001d60:	100b883a 	mov	r5,r2
 8001d64:	01003944 	movi	r4,229
 8001d68:	80017fc0 	call	80017fc <_ZL12writeRegBytehh>
	writeRegByte(MAADR3, macaddr[2]);
 8001d6c:	e0bffe17 	ldw	r2,-8(fp)
 8001d70:	10800084 	addi	r2,r2,2
 8001d74:	10800003 	ldbu	r2,0(r2)
 8001d78:	10803fcc 	andi	r2,r2,255
 8001d7c:	100b883a 	mov	r5,r2
 8001d80:	01003884 	movi	r4,226
 8001d84:	80017fc0 	call	80017fc <_ZL12writeRegBytehh>
	writeRegByte(MAADR2, macaddr[3]);
 8001d88:	e0bffe17 	ldw	r2,-8(fp)
 8001d8c:	108000c4 	addi	r2,r2,3
 8001d90:	10800003 	ldbu	r2,0(r2)
 8001d94:	10803fcc 	andi	r2,r2,255
 8001d98:	100b883a 	mov	r5,r2
 8001d9c:	010038c4 	movi	r4,227
 8001da0:	80017fc0 	call	80017fc <_ZL12writeRegBytehh>
	writeRegByte(MAADR1, macaddr[4]);
 8001da4:	e0bffe17 	ldw	r2,-8(fp)
 8001da8:	10800104 	addi	r2,r2,4
 8001dac:	10800003 	ldbu	r2,0(r2)
 8001db0:	10803fcc 	andi	r2,r2,255
 8001db4:	100b883a 	mov	r5,r2
 8001db8:	01003804 	movi	r4,224
 8001dbc:	80017fc0 	call	80017fc <_ZL12writeRegBytehh>
	writeRegByte(MAADR0, macaddr[5]);
 8001dc0:	e0bffe17 	ldw	r2,-8(fp)
 8001dc4:	10800144 	addi	r2,r2,5
 8001dc8:	10800003 	ldbu	r2,0(r2)
 8001dcc:	10803fcc 	andi	r2,r2,255
 8001dd0:	100b883a 	mov	r5,r2
 8001dd4:	01003844 	movi	r4,225
 8001dd8:	80017fc0 	call	80017fc <_ZL12writeRegBytehh>

	getMacAddr();
 8001ddc:	8001aa80 	call	8001aa8 <_ZL10getMacAddrv>

  writePhy(PHCON2, PHCON2_HDLDIS);
 8001de0:	01404004 	movi	r5,256
 8001de4:	01000404 	movi	r4,16
 8001de8:	80019780 	call	8001978 <_ZL8writePhyht>
  SetBank(ECON1);
 8001dec:	010007c4 	movi	r4,31
 8001df0:	800177c0 	call	800177c <_ZL7SetBankh>
  writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE | EIE_PKTIE);
 8001df4:	01803004 	movi	r6,192
 8001df8:	014006c4 	movi	r5,27
 8001dfc:	01002004 	movi	r4,128
 8001e00:	80016380 	call	8001638 <_ZL7writeOphhh>
  writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
 8001e04:	01800104 	movi	r6,4
 8001e08:	014007c4 	movi	r5,31
 8001e0c:	01002004 	movi	r4,128
 8001e10:	80016380 	call	8001638 <_ZL7writeOphhh>

//  SetBank(ECON2);
//  writeOp(ENC28J60_BIT_FIELD_SET, ECON2, 0x80);
//  SetBank(ECON1);

  uint8_t rev = readRegByte(EREVID);
 8001e14:	01001c84 	movi	r4,114
 8001e18:	80018cc0 	call	80018cc <_ZL11readRegByteh>
 8001e1c:	e0bffc05 	stb	r2,-16(fp)
  // microchip forgot to step the number on the silicon when they
  // released the revision B7. 6 is now rev B7. We still have
  // to see what they do when they release B8. At the moment
  // there is no B8 out yet
  if (rev > 5)
 8001e20:	e0bffc03 	ldbu	r2,-16(fp)
 8001e24:	108001b0 	cmpltui	r2,r2,6
 8001e28:	1000031e 	bne	r2,zero,8001e38 <_ZN8ENC28J6010initializeEtPKhh+0x23c>
    ++rev;
 8001e2c:	e0bffc03 	ldbu	r2,-16(fp)
 8001e30:	10800044 	addi	r2,r2,1
 8001e34:	e0bffc05 	stb	r2,-16(fp)



  return rev;
 8001e38:	e0bffc03 	ldbu	r2,-16(fp)
}
 8001e3c:	e037883a 	mov	sp,fp
 8001e40:	dfc00117 	ldw	ra,4(sp)
 8001e44:	df000017 	ldw	fp,0(sp)
 8001e48:	dec00204 	addi	sp,sp,8
 8001e4c:	f800283a 	ret

08001e50 <_ZN8ENC28J608isLinkUpEv>:

bool ENC28J60::isLinkUp() {
 8001e50:	defffe04 	addi	sp,sp,-8
 8001e54:	dfc00115 	stw	ra,4(sp)
 8001e58:	df000015 	stw	fp,0(sp)
 8001e5c:	d839883a 	mov	fp,sp
    return (readPhyByte(PHSTAT2) >> 2) & 1;
 8001e60:	01000444 	movi	r4,17
 8001e64:	80019f00 	call	80019f0 <_ZL11readPhyByteh>
 8001e68:	10bfffcc 	andi	r2,r2,65535
 8001e6c:	1080010c 	andi	r2,r2,4
 8001e70:	1004c03a 	cmpne	r2,r2,zero
}
 8001e74:	e037883a 	mov	sp,fp
 8001e78:	dfc00117 	ldw	ra,4(sp)
 8001e7c:	df000017 	ldw	fp,0(sp)
 8001e80:	dec00204 	addi	sp,sp,8
 8001e84:	f800283a 	ret

08001e88 <_ZL7readBuftPh>:


static void readBuf(uint16_t len, byte* data) {
 8001e88:	defff404 	addi	sp,sp,-48
 8001e8c:	dfc00b15 	stw	ra,44(sp)
 8001e90:	df000a15 	stw	fp,40(sp)
 8001e94:	dc000915 	stw	r16,36(sp)
 8001e98:	df000a04 	addi	fp,sp,40
 8001e9c:	e17ffe15 	stw	r5,-8(fp)
 8001ea0:	e13ffd0d 	sth	r4,-12(fp)
    if (len != 0) {
 8001ea4:	e13ffd0b 	ldhu	r4,-12(fp)
 8001ea8:	20005d26 	beq	r4,zero,8002020 <_ZL7readBuftPh+0x198>
			for(int i = 0; i < len; i++)
				printf("%x/%x (%x), ", data[i], data2[i], i);
			printf("\n");
    	} else {
    		printf("packet of len %d\n", len);
    	}
 8001eac:	d809883a 	mov	r4,sp
 8001eb0:	2021883a 	mov	r16,r4

static void readBuf(uint16_t len, byte* data) {
    if (len != 0) {
//    	alt_irq_context irqc = alt_irq_disable_all();
//    	alt_irq_disable(1);
    	uint8_t send_data[1], data2[len];
 8001eb4:	e13ffd0b 	ldhu	r4,-12(fp)
 8001eb8:	213fffc4 	addi	r4,r4,-1
 8001ebc:	e13ffa15 	stw	r4,-24(fp)
 8001ec0:	200b883a 	mov	r5,r4
 8001ec4:	29400044 	addi	r5,r5,1
 8001ec8:	2815883a 	mov	r10,r5
 8001ecc:	0017883a 	mov	r11,zero
 8001ed0:	500ad77a 	srli	r5,r10,29
 8001ed4:	580e90fa 	slli	r7,r11,3
 8001ed8:	29ceb03a 	or	r7,r5,r7
 8001edc:	500c90fa 	slli	r6,r10,3
 8001ee0:	200b883a 	mov	r5,r4
 8001ee4:	29400044 	addi	r5,r5,1
 8001ee8:	2811883a 	mov	r8,r5
 8001eec:	0013883a 	mov	r9,zero
 8001ef0:	400ad77a 	srli	r5,r8,29
 8001ef4:	480690fa 	slli	r3,r9,3
 8001ef8:	28c6b03a 	or	r3,r5,r3
 8001efc:	400490fa 	slli	r2,r8,3
 8001f00:	2005883a 	mov	r2,r4
 8001f04:	10800044 	addi	r2,r2,1
 8001f08:	108000c4 	addi	r2,r2,3
 8001f0c:	1004d0ba 	srli	r2,r2,2
 8001f10:	1085883a 	add	r2,r2,r2
 8001f14:	1085883a 	add	r2,r2,r2
 8001f18:	d8b7c83a 	sub	sp,sp,r2
 8001f1c:	d8800304 	addi	r2,sp,12
 8001f20:	1005883a 	mov	r2,r2
 8001f24:	e0bffb15 	stw	r2,-20(fp)
    	send_data[0] = ENC28J60_READ_BUF_MEM;
 8001f28:	00800e84 	movi	r2,58
 8001f2c:	e0bffc05 	stb	r2,-16(fp)
    	alt_avalon_spi_command( SPI_0_BASE,
 8001f30:	e0bffd0b 	ldhu	r2,-12(fp)
    							ETHERNET_CHIP_SLAVE,
    							1, //
								send_data, // write data
    							len, // Read 8 bytes
								data, // read into SPDR
    							0); // no flags
 8001f34:	e13ffc04 	addi	r4,fp,-16
 8001f38:	d8000215 	stw	zero,8(sp)
 8001f3c:	e0fffe17 	ldw	r3,-8(fp)
 8001f40:	d8c00115 	stw	r3,4(sp)
 8001f44:	d8800015 	stw	r2,0(sp)
 8001f48:	200f883a 	mov	r7,r4
 8001f4c:	01800044 	movi	r6,1
 8001f50:	000b883a 	mov	r5,zero
 8001f54:	01000074 	movhi	r4,1
 8001f58:	21042804 	addi	r4,r4,4256
 8001f5c:	80144ec0 	call	80144ec <alt_avalon_spi_command>
    	alt_avalon_spi_command( SPI_0_BASE,
 8001f60:	e0bffd0b 	ldhu	r2,-12(fp)
 8001f64:	e0fffb17 	ldw	r3,-20(fp)
    							ETHERNET_CHIP_SLAVE,
    							1, //
								send_data, // write data
    							len, // Read 8 bytes
								data2, // read into SPDR
    							0); // no flags
 8001f68:	e13ffc04 	addi	r4,fp,-16
 8001f6c:	d8000215 	stw	zero,8(sp)
 8001f70:	d8c00115 	stw	r3,4(sp)
 8001f74:	d8800015 	stw	r2,0(sp)
 8001f78:	200f883a 	mov	r7,r4
 8001f7c:	01800044 	movi	r6,1
 8001f80:	000b883a 	mov	r5,zero
 8001f84:	01000074 	movhi	r4,1
 8001f88:	21042804 	addi	r4,r4,4256
 8001f8c:	80144ec0 	call	80144ec <alt_avalon_spi_command>
    	if(len < 10) {
 8001f90:	e0bffd0b 	ldhu	r2,-12(fp)
 8001f94:	108002a8 	cmpgeui	r2,r2,10
 8001f98:	10001b1e 	bne	r2,zero,8002008 <_ZL7readBuftPh+0x180>
			for(int i = 0; i < len; i++)
 8001f9c:	e03ff915 	stw	zero,-28(fp)
 8001fa0:	e0bffd0b 	ldhu	r2,-12(fp)
 8001fa4:	e0fff917 	ldw	r3,-28(fp)
 8001fa8:	1880140e 	bge	r3,r2,8001ffc <_ZL7readBuftPh+0x174>
				printf("%x/%x (%x), ", data[i], data2[i], i);
 8001fac:	e0bff917 	ldw	r2,-28(fp)
 8001fb0:	e0fffe17 	ldw	r3,-8(fp)
 8001fb4:	1885883a 	add	r2,r3,r2
 8001fb8:	10800003 	ldbu	r2,0(r2)
 8001fbc:	11003fcc 	andi	r4,r2,255
 8001fc0:	e0fffb17 	ldw	r3,-20(fp)
 8001fc4:	e0bff917 	ldw	r2,-28(fp)
 8001fc8:	1885883a 	add	r2,r3,r2
 8001fcc:	10800003 	ldbu	r2,0(r2)
 8001fd0:	10803fcc 	andi	r2,r2,255
 8001fd4:	e1fff917 	ldw	r7,-28(fp)
 8001fd8:	100d883a 	mov	r6,r2
 8001fdc:	200b883a 	mov	r5,r4
 8001fe0:	01020074 	movhi	r4,2049
 8001fe4:	21166204 	addi	r4,r4,22920
 8001fe8:	800650c0 	call	800650c <printf>
								send_data, // write data
    							len, // Read 8 bytes
								data2, // read into SPDR
    							0); // no flags
    	if(len < 10) {
			for(int i = 0; i < len; i++)
 8001fec:	e0bff917 	ldw	r2,-28(fp)
 8001ff0:	10800044 	addi	r2,r2,1
 8001ff4:	e0bff915 	stw	r2,-28(fp)
 8001ff8:	003fe906 	br	8001fa0 <_ZL7readBuftPh+0x118>
				printf("%x/%x (%x), ", data[i], data2[i], i);
			printf("\n");
 8001ffc:	01000284 	movi	r4,10
 8002000:	80065500 	call	8006550 <putchar>
 8002004:	00000506 	br	800201c <_ZL7readBuftPh+0x194>
    	} else {
    		printf("packet of len %d\n", len);
 8002008:	e0bffd0b 	ldhu	r2,-12(fp)
 800200c:	100b883a 	mov	r5,r2
 8002010:	01020074 	movhi	r4,2049
 8002014:	21166604 	addi	r4,r4,22936
 8002018:	800650c0 	call	800650c <printf>
 800201c:	8037883a 	mov	sp,r16
    	}
//    	alt_irq_enable_all(irqc);
    }
}
 8002020:	0001883a 	nop
 8002024:	e6ffff04 	addi	sp,fp,-4
 8002028:	dfc00217 	ldw	ra,8(sp)
 800202c:	df000117 	ldw	fp,4(sp)
 8002030:	dc000017 	ldw	r16,0(sp)
 8002034:	dec00304 	addi	sp,sp,12
 8002038:	f800283a 	ret

0800203c <_ZL8writeBuftPKh>:

// TODO
static void writeBuf(uint16_t len, const byte* data) {
 800203c:	defff504 	addi	sp,sp,-44
 8002040:	dfc00a15 	stw	ra,40(sp)
 8002044:	df000915 	stw	fp,36(sp)
 8002048:	dc000815 	stw	r16,32(sp)
 800204c:	df000904 	addi	fp,sp,36
 8002050:	e17ffe15 	stw	r5,-8(fp)
 8002054:	e13ffd0d 	sth	r4,-12(fp)
    if (len != 0) {
 8002058:	e13ffd0b 	ldhu	r4,-12(fp)
 800205c:	20004026 	beq	r4,zero,8002160 <_ZL8writeBuftPKh+0x124>
    							ETHERNET_CHIP_SLAVE,
    							len + 1, //
								send_data, // write data
    							0, // Read 8 bytes
    							0, // read into SPDR
    							0); // no flags
 8002060:	d809883a 	mov	r4,sp
 8002064:	2021883a 	mov	r16,r4
static void writeBuf(uint16_t len, const byte* data) {
    if (len != 0) {
//    	uint8_t send_data[1];
//    	send_data[0] = ENC28J60_WRITE_BUF_MEM;

    	uint8_t send_data[len + 1];
 8002068:	e13ffd0b 	ldhu	r4,-12(fp)
 800206c:	e13ffb15 	stw	r4,-20(fp)
 8002070:	200b883a 	mov	r5,r4
 8002074:	29400044 	addi	r5,r5,1
 8002078:	2815883a 	mov	r10,r5
 800207c:	0017883a 	mov	r11,zero
 8002080:	500ad77a 	srli	r5,r10,29
 8002084:	580e90fa 	slli	r7,r11,3
 8002088:	29ceb03a 	or	r7,r5,r7
 800208c:	500c90fa 	slli	r6,r10,3
 8002090:	200b883a 	mov	r5,r4
 8002094:	29400044 	addi	r5,r5,1
 8002098:	2811883a 	mov	r8,r5
 800209c:	0013883a 	mov	r9,zero
 80020a0:	400ad77a 	srli	r5,r8,29
 80020a4:	480690fa 	slli	r3,r9,3
 80020a8:	28c6b03a 	or	r3,r5,r3
 80020ac:	400490fa 	slli	r2,r8,3
 80020b0:	2005883a 	mov	r2,r4
 80020b4:	10800044 	addi	r2,r2,1
 80020b8:	108000c4 	addi	r2,r2,3
 80020bc:	1004d0ba 	srli	r2,r2,2
 80020c0:	1085883a 	add	r2,r2,r2
 80020c4:	1085883a 	add	r2,r2,r2
 80020c8:	d8b7c83a 	sub	sp,sp,r2
 80020cc:	d8800304 	addi	r2,sp,12
 80020d0:	1005883a 	mov	r2,r2
 80020d4:	e0bffc15 	stw	r2,-16(fp)
    	send_data[0] = ENC28J60_WRITE_BUF_MEM;
 80020d8:	e0bffc17 	ldw	r2,-16(fp)
 80020dc:	00c01e84 	movi	r3,122
 80020e0:	10c00005 	stb	r3,0(r2)
    	for(int i = 0; i < len; i++)
 80020e4:	e03ffa15 	stw	zero,-24(fp)
 80020e8:	e0bffd0b 	ldhu	r2,-12(fp)
 80020ec:	e0fffa17 	ldw	r3,-24(fp)
 80020f0:	18800d0e 	bge	r3,r2,8002128 <_ZL8writeBuftPKh+0xec>
    		send_data[i+1] = data[i];
 80020f4:	e0bffa17 	ldw	r2,-24(fp)
 80020f8:	10800044 	addi	r2,r2,1
 80020fc:	e0fffa17 	ldw	r3,-24(fp)
 8002100:	e13ffe17 	ldw	r4,-8(fp)
 8002104:	20c7883a 	add	r3,r4,r3
 8002108:	18c00003 	ldbu	r3,0(r3)
 800210c:	e13ffc17 	ldw	r4,-16(fp)
 8002110:	2085883a 	add	r2,r4,r2
 8002114:	10c00005 	stb	r3,0(r2)
//    	uint8_t send_data[1];
//    	send_data[0] = ENC28J60_WRITE_BUF_MEM;

    	uint8_t send_data[len + 1];
    	send_data[0] = ENC28J60_WRITE_BUF_MEM;
    	for(int i = 0; i < len; i++)
 8002118:	e0bffa17 	ldw	r2,-24(fp)
 800211c:	10800044 	addi	r2,r2,1
 8002120:	e0bffa15 	stw	r2,-24(fp)
 8002124:	003ff006 	br	80020e8 <_ZL8writeBuftPKh+0xac>
    		send_data[i+1] = data[i];
//    	memcpy(send_data + 1, data, len);

    	alt_avalon_spi_command( SPI_0_BASE,
    							ETHERNET_CHIP_SLAVE,
    							len + 1, //
 8002128:	e0bffd0b 	ldhu	r2,-12(fp)
 800212c:	10800044 	addi	r2,r2,1
    	send_data[0] = ENC28J60_WRITE_BUF_MEM;
    	for(int i = 0; i < len; i++)
    		send_data[i+1] = data[i];
//    	memcpy(send_data + 1, data, len);

    	alt_avalon_spi_command( SPI_0_BASE,
 8002130:	1007883a 	mov	r3,r2
 8002134:	e0bffc17 	ldw	r2,-16(fp)
    							ETHERNET_CHIP_SLAVE,
    							len + 1, //
								send_data, // write data
    							0, // Read 8 bytes
    							0, // read into SPDR
    							0); // no flags
 8002138:	d8000215 	stw	zero,8(sp)
 800213c:	d8000115 	stw	zero,4(sp)
 8002140:	d8000015 	stw	zero,0(sp)
 8002144:	100f883a 	mov	r7,r2
 8002148:	180d883a 	mov	r6,r3
 800214c:	000b883a 	mov	r5,zero
 8002150:	01000074 	movhi	r4,1
 8002154:	21042804 	addi	r4,r4,4256
 8002158:	80144ec0 	call	80144ec <alt_avalon_spi_command>
 800215c:	8037883a 	mov	sp,r16

    }
}
 8002160:	0001883a 	nop
 8002164:	e6ffff04 	addi	sp,fp,-4
 8002168:	dfc00217 	ldw	ra,8(sp)
 800216c:	df000117 	ldw	fp,4(sp)
 8002170:	dc000017 	ldw	r16,0(sp)
 8002174:	dec00304 	addi	sp,sp,12
 8002178:	f800283a 	ret

0800217c <_ZN8ENC28J6013packetReceiveEv>:

uint16_t ENC28J60::packetReceive() {
 800217c:	defffb04 	addi	sp,sp,-20
 8002180:	dfc00415 	stw	ra,16(sp)
 8002184:	df000315 	stw	fp,12(sp)
 8002188:	df000304 	addi	fp,sp,12
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;
 800218c:	e03ffd0d 	sth	zero,-12(fp)

    if (unreleasedPacket) {
 8002190:	d0a6ff83 	ldbu	r2,-25602(gp)
 8002194:	10803fcc 	andi	r2,r2,255
 8002198:	10000e26 	beq	r2,zero,80021d4 <_ZN8ENC28J6013packetReceiveEv+0x58>
        if (gNextPacketPtr == 0)
 800219c:	d0a7000b 	ldhu	r2,-25600(gp)
 80021a0:	10bfffcc 	andi	r2,r2,65535
 80021a4:	1000041e 	bne	r2,zero,80021b8 <_ZN8ENC28J6013packetReceiveEv+0x3c>
            writeReg(ERXRDPT, RXSTOP_INIT);
 80021a8:	0142ffc4 	movi	r5,3071
 80021ac:	01000304 	movi	r4,12
 80021b0:	80018580 	call	8001858 <_ZL8writeReght>
 80021b4:	00000606 	br	80021d0 <_ZN8ENC28J6013packetReceiveEv+0x54>
        else
            writeReg(ERXRDPT, gNextPacketPtr - 1);
 80021b8:	d0a7000b 	ldhu	r2,-25600(gp)
 80021bc:	10bfffc4 	addi	r2,r2,-1
 80021c0:	10bfffcc 	andi	r2,r2,65535
 80021c4:	100b883a 	mov	r5,r2
 80021c8:	01000304 	movi	r4,12
 80021cc:	80018580 	call	8001858 <_ZL8writeReght>
        unreleasedPacket = false;
 80021d0:	d026ff85 	stb	zero,-25602(gp)
    }

    uint8_t r = readRegByte(EPKTCNT);
 80021d4:	01000e44 	movi	r4,57
 80021d8:	80018cc0 	call	80018cc <_ZL11readRegByteh>
 80021dc:	e0bffd85 	stb	r2,-10(fp)
    if (r > 0) {
 80021e0:	e0bffd83 	ldbu	r2,-10(fp)
 80021e4:	10002e26 	beq	r2,zero,80022a0 <_ZN8ENC28J6013packetReceiveEv+0x124>
//    	printf("readregbyte %d", r);
        writeReg(ERDPT, gNextPacketPtr);
 80021e8:	d0a7000b 	ldhu	r2,-25600(gp)
 80021ec:	10bfffcc 	andi	r2,r2,65535
 80021f0:	100b883a 	mov	r5,r2
 80021f4:	0009883a 	mov	r4,zero
 80021f8:	80018580 	call	8001858 <_ZL8writeReght>
            uint16_t nextPacket;
            uint16_t byteCount;
            uint16_t status;
        } header;

        readBuf(sizeof header, (byte*) &header);
 80021fc:	00800184 	movi	r2,6
 8002200:	10bfffcc 	andi	r2,r2,65535
 8002204:	e0fffe04 	addi	r3,fp,-8
 8002208:	180b883a 	mov	r5,r3
 800220c:	1009883a 	mov	r4,r2
 8002210:	8001e880 	call	8001e88 <_ZL7readBuftPh>

        gNextPacketPtr  = header.nextPacket;
 8002214:	e0bffe0b 	ldhu	r2,-8(fp)
 8002218:	d0a7000d 	sth	r2,-25600(gp)
        len = header.byteCount - 4; //remove the CRC count
 800221c:	e0bffe8b 	ldhu	r2,-6(fp)
 8002220:	10bfff04 	addi	r2,r2,-4
 8002224:	e0bffd0d 	sth	r2,-12(fp)
        if (len>bufferSize-1)
 8002228:	e0bffd0b 	ldhu	r2,-12(fp)
 800222c:	d0e6fe0b 	ldhu	r3,-25608(gp)
 8002230:	18ffffcc 	andi	r3,r3,65535
 8002234:	18ffffc4 	addi	r3,r3,-1
 8002238:	1880030e 	bge	r3,r2,8002248 <_ZN8ENC28J6013packetReceiveEv+0xcc>
            len=bufferSize-1;
 800223c:	d0a6fe0b 	ldhu	r2,-25608(gp)
 8002240:	10bfffc4 	addi	r2,r2,-1
 8002244:	e0bffd0d 	sth	r2,-12(fp)
        if ((header.status & 0x80)==0)
 8002248:	e0bfff0b 	ldhu	r2,-4(fp)
 800224c:	10bfffcc 	andi	r2,r2,65535
 8002250:	1080200c 	andi	r2,r2,128
 8002254:	1000021e 	bne	r2,zero,8002260 <_ZN8ENC28J6013packetReceiveEv+0xe4>
            len = 0;
 8002258:	e03ffd0d 	sth	zero,-12(fp)
 800225c:	00000506 	br	8002274 <_ZN8ENC28J6013packetReceiveEv+0xf8>
        else
            readBuf(len, buffer);
 8002260:	e0bffd0b 	ldhu	r2,-12(fp)
 8002264:	014200b4 	movhi	r5,2050
 8002268:	29654b04 	addi	r5,r5,-27348
 800226c:	1009883a 	mov	r4,r2
 8002270:	8001e880 	call	8001e88 <_ZL7readBuftPh>
        buffer[len] = 0;
 8002274:	e0fffd0b 	ldhu	r3,-12(fp)
 8002278:	008200b4 	movhi	r2,2050
 800227c:	10a54b04 	addi	r2,r2,-27348
 8002280:	10c5883a 	add	r2,r2,r3
 8002284:	10000005 	stb	zero,0(r2)
        unreleasedPacket = true;
 8002288:	00800044 	movi	r2,1
 800228c:	d0a6ff85 	stb	r2,-25602(gp)

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
 8002290:	01801004 	movi	r6,64
 8002294:	01400784 	movi	r5,30
 8002298:	01002004 	movi	r4,128
 800229c:	80016380 	call	8001638 <_ZL7writeOphhh>

//        printf("len = %d\n", len);
    }
    return len;
 80022a0:	e0bffd0b 	ldhu	r2,-12(fp)
}
 80022a4:	e037883a 	mov	sp,fp
 80022a8:	dfc00117 	ldw	ra,4(sp)
 80022ac:	df000017 	ldw	fp,0(sp)
 80022b0:	dec00204 	addi	sp,sp,8
 80022b4:	f800283a 	ret

080022b8 <_ZN8ENC28J6010packetSendEt>:


void ENC28J60::packetSend(uint16_t len) {
 80022b8:	defffa04 	addi	sp,sp,-24
 80022bc:	dfc00515 	stw	ra,20(sp)
 80022c0:	df000415 	stw	fp,16(sp)
 80022c4:	df000404 	addi	fp,sp,16
 80022c8:	2005883a 	mov	r2,r4
 80022cc:	e0bfff0d 	sth	r2,-4(fp)
    byte retry = 0;
 80022d0:	e03ffc85 	stb	zero,-14(fp)
        // the Microchip TCP/IP stack implementation used to first check
        // whether TXERIF is set and only then reset the transmit logic
        // but this has been changed in later versions; possibly they
        // have a reason for this; they don't mention this in the errata
        // sheet
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
 80022d4:	01802004 	movi	r6,128
 80022d8:	014007c4 	movi	r5,31
 80022dc:	01002004 	movi	r4,128
 80022e0:	80016380 	call	8001638 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
 80022e4:	01802004 	movi	r6,128
 80022e8:	014007c4 	movi	r5,31
 80022ec:	01002804 	movi	r4,160
 80022f0:	80016380 	call	8001638 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);
 80022f4:	01800284 	movi	r6,10
 80022f8:	01400704 	movi	r5,28
 80022fc:	01002804 	movi	r4,160
 8002300:	80016380 	call	8001638 <_ZL7writeOphhh>

        // prepare new transmission
        if (retry == 0) {
 8002304:	e0bffc83 	ldbu	r2,-14(fp)
 8002308:	1000121e 	bne	r2,zero,8002354 <_ZN8ENC28J6010packetSendEt+0x9c>
            writeReg(EWRPT, TXSTART_INIT);
 800230c:	01430004 	movi	r5,3072
 8002310:	01000084 	movi	r4,2
 8002314:	80018580 	call	8001858 <_ZL8writeReght>
            writeReg(ETXND, TXSTART_INIT+len);
 8002318:	e0bfff0b 	ldhu	r2,-4(fp)
 800231c:	10830004 	addi	r2,r2,3072
 8002320:	10bfffcc 	andi	r2,r2,65535
 8002324:	100b883a 	mov	r5,r2
 8002328:	01000184 	movi	r4,6
 800232c:	80018580 	call	8001858 <_ZL8writeReght>
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
 8002330:	000d883a 	mov	r6,zero
 8002334:	000b883a 	mov	r5,zero
 8002338:	01001e84 	movi	r4,122
 800233c:	80016380 	call	8001638 <_ZL7writeOphhh>
            writeBuf(len, buffer);
 8002340:	e0bfff0b 	ldhu	r2,-4(fp)
 8002344:	014200b4 	movhi	r5,2050
 8002348:	29654b04 	addi	r5,r5,-27348
 800234c:	1009883a 	mov	r4,r2
 8002350:	800203c0 	call	800203c <_ZL8writeBuftPKh>
        }

        // initiate transmission
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
 8002354:	01800204 	movi	r6,8
 8002358:	014007c4 	movi	r5,31
 800235c:	01002004 	movi	r4,128
 8002360:	80016380 	call	8001638 <_ZL7writeOphhh>
        // wait until transmission has finished; referring to the data sheet and
        // to the errata (Errata Issue 13; Example 1) you only need to wait until either
        // TXIF or TXERIF gets set; however this leads to hangs; apparently Microchip
        // realized this and in later implementations of their tcp/ip stack they introduced
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
 8002364:	e03ffc0d 	sth	zero,-16(fp)
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
 8002368:	01000704 	movi	r4,28
 800236c:	80018cc0 	call	80018cc <_ZL11readRegByteh>
 8002370:	10803fcc 	andi	r2,r2,255
 8002374:	1080028c 	andi	r2,r2,10
 8002378:	1000081e 	bne	r2,zero,800239c <_ZN8ENC28J6010packetSendEt+0xe4>
 800237c:	e0bffc0b 	ldhu	r2,-16(fp)
 8002380:	10800044 	addi	r2,r2,1
 8002384:	e0bffc0d 	sth	r2,-16(fp)
 8002388:	e0bffc0b 	ldhu	r2,-16(fp)
 800238c:	1080fa28 	cmpgeui	r2,r2,1000
 8002390:	1000021e 	bne	r2,zero,800239c <_ZN8ENC28J6010packetSendEt+0xe4>
 8002394:	00800044 	movi	r2,1
 8002398:	00000106 	br	80023a0 <_ZN8ENC28J6010packetSendEt+0xe8>
 800239c:	0005883a 	mov	r2,zero
 80023a0:	10803fcc 	andi	r2,r2,255
 80023a4:	10000126 	beq	r2,zero,80023ac <_ZN8ENC28J6010packetSendEt+0xf4>
 80023a8:	003fef06 	br	8002368 <_ZN8ENC28J6010packetSendEt+0xb0>
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
 80023ac:	01000704 	movi	r4,28
 80023b0:	80018cc0 	call	80018cc <_ZL11readRegByteh>
 80023b4:	10803fcc 	andi	r2,r2,255
 80023b8:	1080008c 	andi	r2,r2,2
 80023bc:	1000051e 	bne	r2,zero,80023d4 <_ZN8ENC28J6010packetSendEt+0x11c>
 80023c0:	e0bffc0b 	ldhu	r2,-16(fp)
 80023c4:	1080fa28 	cmpgeui	r2,r2,1000
 80023c8:	1000021e 	bne	r2,zero,80023d4 <_ZN8ENC28J6010packetSendEt+0x11c>
 80023cc:	00800044 	movi	r2,1
 80023d0:	00000106 	br	80023d8 <_ZN8ENC28J6010packetSendEt+0x120>
 80023d4:	0005883a 	mov	r2,zero
 80023d8:	10803fcc 	andi	r2,r2,255
 80023dc:	1000051e 	bne	r2,zero,80023f4 <_ZN8ENC28J6010packetSendEt+0x13c>
            // no error; start new transmission
            break;
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
 80023e0:	01800204 	movi	r6,8
 80023e4:	014007c4 	movi	r5,31
 80023e8:	01002804 	movi	r4,160
 80023ec:	80016380 	call	8001638 <_ZL7writeOphhh>

    #if ETHERCARD_RETRY_LATECOLLISIONS == 0
        break;
 80023f0:	00000106 	br	80023f8 <_ZN8ENC28J6010packetSendEt+0x140>
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
            // no error; start new transmission
            break;
 80023f4:	0001883a 	nop
            break;
        }

        retry++;
    }
}
 80023f8:	0001883a 	nop
 80023fc:	e037883a 	mov	sp,fp
 8002400:	dfc00117 	ldw	ra,4(sp)
 8002404:	df000017 	ldw	fp,0(sp)
 8002408:	dec00204 	addi	sp,sp,8
 800240c:	f800283a 	ret

08002410 <_ZN8ENC28J6015enableBroadcastEb>:

void ENC28J60::enableBroadcast (bool temporary) {
 8002410:	defffd04 	addi	sp,sp,-12
 8002414:	dfc00215 	stw	ra,8(sp)
 8002418:	df000115 	stw	fp,4(sp)
 800241c:	df000104 	addi	fp,sp,4
 8002420:	2005883a 	mov	r2,r4
 8002424:	e0bfff05 	stb	r2,-4(fp)
    writeRegByte(ERXFCON, readRegByte(ERXFCON) | ERXFCON_BCEN);
 8002428:	01000e04 	movi	r4,56
 800242c:	80018cc0 	call	80018cc <_ZL11readRegByteh>
 8002430:	10800054 	ori	r2,r2,1
 8002434:	10803fcc 	andi	r2,r2,255
 8002438:	100b883a 	mov	r5,r2
 800243c:	01000e04 	movi	r4,56
 8002440:	80017fc0 	call	80017fc <_ZL12writeRegBytehh>
    if(!temporary)
 8002444:	e0bfff03 	ldbu	r2,-4(fp)
 8002448:	1080005c 	xori	r2,r2,1
 800244c:	10803fcc 	andi	r2,r2,255
 8002450:	10000226 	beq	r2,zero,800245c <_ZN8ENC28J6015enableBroadcastEb+0x4c>
        broadcast_enabled = true;
 8002454:	00800044 	movi	r2,1
 8002458:	d0a6fe85 	stb	r2,-25606(gp)
}
 800245c:	0001883a 	nop
 8002460:	e037883a 	mov	sp,fp
 8002464:	dfc00117 	ldw	ra,4(sp)
 8002468:	df000017 	ldw	fp,0(sp)
 800246c:	dec00204 	addi	sp,sp,8
 8002470:	f800283a 	ret

08002474 <_ZN8ENC28J6016disableBroadcastEb>:

void ENC28J60::disableBroadcast (bool temporary) {
 8002474:	defffd04 	addi	sp,sp,-12
 8002478:	dfc00215 	stw	ra,8(sp)
 800247c:	df000115 	stw	fp,4(sp)
 8002480:	df000104 	addi	fp,sp,4
 8002484:	2005883a 	mov	r2,r4
 8002488:	e0bfff05 	stb	r2,-4(fp)
    if(!temporary)
 800248c:	e0bfff03 	ldbu	r2,-4(fp)
 8002490:	1080005c 	xori	r2,r2,1
 8002494:	10803fcc 	andi	r2,r2,255
 8002498:	10000126 	beq	r2,zero,80024a0 <_ZN8ENC28J6016disableBroadcastEb+0x2c>
        broadcast_enabled = false;
 800249c:	d026fe85 	stb	zero,-25606(gp)
    if(!broadcast_enabled)
 80024a0:	d0a6fe83 	ldbu	r2,-25606(gp)
 80024a4:	1080005c 	xori	r2,r2,1
 80024a8:	10803fcc 	andi	r2,r2,255
 80024ac:	10000726 	beq	r2,zero,80024cc <_ZN8ENC28J6016disableBroadcastEb+0x58>
        writeRegByte(ERXFCON, readRegByte(ERXFCON) & ~ERXFCON_BCEN);
 80024b0:	01000e04 	movi	r4,56
 80024b4:	80018cc0 	call	80018cc <_ZL11readRegByteh>
 80024b8:	10803fcc 	andi	r2,r2,255
 80024bc:	10803f8c 	andi	r2,r2,254
 80024c0:	100b883a 	mov	r5,r2
 80024c4:	01000e04 	movi	r4,56
 80024c8:	80017fc0 	call	80017fc <_ZL12writeRegBytehh>
}
 80024cc:	0001883a 	nop
 80024d0:	e037883a 	mov	sp,fp
 80024d4:	dfc00117 	ldw	ra,4(sp)
 80024d8:	df000017 	ldw	fp,0(sp)
 80024dc:	dec00204 	addi	sp,sp,8
 80024e0:	f800283a 	ret

080024e4 <_Z4PSTRPc>:
// const unsigned char arpreqhdr[] PROGMEM = { 0,1,8,0,6,4,0,1 }; // ARP request header
// const unsigned char iphdr[] PROGMEM = { 0x45,0,0,0x82,0,0,0x40,0,0x20 }; //IP header
// const unsigned char ntpreqhdr[] PROGMEM = { 0xE3,0,4,0xFA,0,1,0,0,0,1 }; //NTP request header
extern const uint8_t allOnes[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }; // Used for hardware (MAC) and IP broadcast addresses

char* PSTR(char* str){
 80024e4:	defffe04 	addi	sp,sp,-8
 80024e8:	df000115 	stw	fp,4(sp)
 80024ec:	df000104 	addi	fp,sp,4
 80024f0:	e13fff15 	stw	r4,-4(fp)
	return str;
 80024f4:	e0bfff17 	ldw	r2,-4(fp)
}
 80024f8:	e037883a 	mov	sp,fp
 80024fc:	df000017 	ldw	fp,0(sp)
 8002500:	dec00104 	addi	sp,sp,4
 8002504:	f800283a 	ret

08002508 <_Z8memcpy_PPvPKvj>:
const unsigned char arpreqhdr[] = { 0,1,8,0,6,4,0,1 }; // ARP request header
const unsigned char iphdr[] = { 0x45,0,0,0x82,0,0,0x40,0,0x20 }; //IP header
const unsigned char ntpreqhdr[] = { 0xE3,0,4,0xFA,0,1,0,0,0,1 }; //NTP request header


void* memcpy_P(void* dest, const void* src, std::size_t count) {
 8002508:	defffb04 	addi	sp,sp,-20
 800250c:	dfc00415 	stw	ra,16(sp)
 8002510:	df000315 	stw	fp,12(sp)
 8002514:	df000304 	addi	fp,sp,12
 8002518:	e13ffd15 	stw	r4,-12(fp)
 800251c:	e17ffe15 	stw	r5,-8(fp)
 8002520:	e1bfff15 	stw	r6,-4(fp)
	return memcpy(dest, src, count);
 8002524:	e1bfff17 	ldw	r6,-4(fp)
 8002528:	e17ffe17 	ldw	r5,-8(fp)
 800252c:	e13ffd17 	ldw	r4,-12(fp)
 8002530:	800626c0 	call	800626c <memcpy>
}
 8002534:	e037883a 	mov	sp,fp
 8002538:	dfc00117 	ldw	ra,4(sp)
 800253c:	df000017 	ldw	fp,0(sp)
 8002540:	dec00204 	addi	sp,sp,8
 8002544:	f800283a 	ret

08002548 <_ZL13fill_checksumhhth>:

static void fill_checksum(uint8_t dest, uint8_t off, uint16_t len,uint8_t type) {
 8002548:	defff804 	addi	sp,sp,-32
 800254c:	df000715 	stw	fp,28(sp)
 8002550:	df000704 	addi	fp,sp,28
 8002554:	2011883a 	mov	r8,r4
 8002558:	2809883a 	mov	r4,r5
 800255c:	3007883a 	mov	r3,r6
 8002560:	3805883a 	mov	r2,r7
 8002564:	e23ffc05 	stb	r8,-16(fp)
 8002568:	e13ffd05 	stb	r4,-12(fp)
 800256c:	e0fffe0d 	sth	r3,-8(fp)
 8002570:	e0bfff05 	stb	r2,-4(fp)
    const uint8_t* ptr = gPB + off;
 8002574:	e0fffd03 	ldbu	r3,-12(fp)
 8002578:	008200b4 	movhi	r2,2050
 800257c:	10a54b04 	addi	r2,r2,-27348
 8002580:	1885883a 	add	r2,r3,r2
 8002584:	e0bff915 	stw	r2,-28(fp)
    uint32_t sum = type==1 ? IP_PROTO_UDP_V+len-8 :
                   type==2 ? IP_PROTO_TCP_V+len-8 : 0;
 8002588:	e0bfff03 	ldbu	r2,-4(fp)
 800258c:	10800058 	cmpnei	r2,r2,1
 8002590:	1000031e 	bne	r2,zero,80025a0 <_ZL13fill_checksumhhth+0x58>
	return memcpy(dest, src, count);
}

static void fill_checksum(uint8_t dest, uint8_t off, uint16_t len,uint8_t type) {
    const uint8_t* ptr = gPB + off;
    uint32_t sum = type==1 ? IP_PROTO_UDP_V+len-8 :
 8002594:	e0bffe0b 	ldhu	r2,-8(fp)
 8002598:	10800244 	addi	r2,r2,9
 800259c:	00000706 	br	80025bc <_ZL13fill_checksumhhth+0x74>
                   type==2 ? IP_PROTO_TCP_V+len-8 : 0;
 80025a0:	e0bfff03 	ldbu	r2,-4(fp)
 80025a4:	10800098 	cmpnei	r2,r2,2
 80025a8:	1000031e 	bne	r2,zero,80025b8 <_ZL13fill_checksumhhth+0x70>
 80025ac:	e0bffe0b 	ldhu	r2,-8(fp)
 80025b0:	10bfff84 	addi	r2,r2,-2
 80025b4:	00000106 	br	80025bc <_ZL13fill_checksumhhth+0x74>
 80025b8:	0005883a 	mov	r2,zero
 80025bc:	e0bffa15 	stw	r2,-24(fp)
    while(len >1) {
 80025c0:	e0bffe0b 	ldhu	r2,-8(fp)
 80025c4:	108000b0 	cmpltui	r2,r2,2
 80025c8:	1000151e 	bne	r2,zero,8002620 <_ZL13fill_checksumhhth+0xd8>
        sum += (uint16_t) (((uint32_t)*ptr<<8)|*(ptr+1));
 80025cc:	e0bff917 	ldw	r2,-28(fp)
 80025d0:	10800003 	ldbu	r2,0(r2)
 80025d4:	10803fcc 	andi	r2,r2,255
 80025d8:	1004923a 	slli	r2,r2,8
 80025dc:	1007883a 	mov	r3,r2
 80025e0:	e0bff917 	ldw	r2,-28(fp)
 80025e4:	10800044 	addi	r2,r2,1
 80025e8:	10800003 	ldbu	r2,0(r2)
 80025ec:	10803fcc 	andi	r2,r2,255
 80025f0:	1884b03a 	or	r2,r3,r2
 80025f4:	10bfffcc 	andi	r2,r2,65535
 80025f8:	e0fffa17 	ldw	r3,-24(fp)
 80025fc:	1885883a 	add	r2,r3,r2
 8002600:	e0bffa15 	stw	r2,-24(fp)
        ptr+=2;
 8002604:	e0bff917 	ldw	r2,-28(fp)
 8002608:	10800084 	addi	r2,r2,2
 800260c:	e0bff915 	stw	r2,-28(fp)
        len-=2;
 8002610:	e0bffe0b 	ldhu	r2,-8(fp)
 8002614:	10bfff84 	addi	r2,r2,-2
 8002618:	e0bffe0d 	sth	r2,-8(fp)

static void fill_checksum(uint8_t dest, uint8_t off, uint16_t len,uint8_t type) {
    const uint8_t* ptr = gPB + off;
    uint32_t sum = type==1 ? IP_PROTO_UDP_V+len-8 :
                   type==2 ? IP_PROTO_TCP_V+len-8 : 0;
    while(len >1) {
 800261c:	003fe806 	br	80025c0 <_ZL13fill_checksumhhth+0x78>
        sum += (uint16_t) (((uint32_t)*ptr<<8)|*(ptr+1));
        ptr+=2;
        len-=2;
    }
    if (len)
 8002620:	e0bffe0b 	ldhu	r2,-8(fp)
 8002624:	10000726 	beq	r2,zero,8002644 <_ZL13fill_checksumhhth+0xfc>
        sum += ((uint32_t)*ptr)<<8;
 8002628:	e0bff917 	ldw	r2,-28(fp)
 800262c:	10800003 	ldbu	r2,0(r2)
 8002630:	10803fcc 	andi	r2,r2,255
 8002634:	1004923a 	slli	r2,r2,8
 8002638:	e0fffa17 	ldw	r3,-24(fp)
 800263c:	1885883a 	add	r2,r3,r2
 8002640:	e0bffa15 	stw	r2,-24(fp)
    while (sum>>16)
 8002644:	e0bffa17 	ldw	r2,-24(fp)
 8002648:	1004d43a 	srli	r2,r2,16
 800264c:	10000726 	beq	r2,zero,800266c <_ZL13fill_checksumhhth+0x124>
        sum = (uint16_t) sum + (sum >> 16);
 8002650:	e0bffa17 	ldw	r2,-24(fp)
 8002654:	10ffffcc 	andi	r3,r2,65535
 8002658:	e0bffa17 	ldw	r2,-24(fp)
 800265c:	1004d43a 	srli	r2,r2,16
 8002660:	1885883a 	add	r2,r3,r2
 8002664:	e0bffa15 	stw	r2,-24(fp)
        ptr+=2;
        len-=2;
    }
    if (len)
        sum += ((uint32_t)*ptr)<<8;
    while (sum>>16)
 8002668:	003ff606 	br	8002644 <_ZL13fill_checksumhhth+0xfc>
        sum = (uint16_t) sum + (sum >> 16);
    uint16_t ck = ~ (uint16_t) sum;
 800266c:	e0bffa17 	ldw	r2,-24(fp)
 8002670:	0084303a 	nor	r2,zero,r2
 8002674:	e0bffb0d 	sth	r2,-20(fp)
    gPB[dest] = ck>>8;
 8002678:	e0fffc03 	ldbu	r3,-16(fp)
 800267c:	e0bffb0b 	ldhu	r2,-20(fp)
 8002680:	1005d23a 	srai	r2,r2,8
 8002684:	1009883a 	mov	r4,r2
 8002688:	008200b4 	movhi	r2,2050
 800268c:	10a54b04 	addi	r2,r2,-27348
 8002690:	10c5883a 	add	r2,r2,r3
 8002694:	11000005 	stb	r4,0(r2)
    gPB[dest+1] = ck;
 8002698:	e0bffc03 	ldbu	r2,-16(fp)
 800269c:	10c00044 	addi	r3,r2,1
 80026a0:	e0bffb0b 	ldhu	r2,-20(fp)
 80026a4:	1009883a 	mov	r4,r2
 80026a8:	008200b4 	movhi	r2,2050
 80026ac:	10a54b04 	addi	r2,r2,-27348
 80026b0:	10c5883a 	add	r2,r2,r3
 80026b4:	11000005 	stb	r4,0(r2)
}
 80026b8:	0001883a 	nop
 80026bc:	e037883a 	mov	sp,fp
 80026c0:	df000017 	ldw	fp,0(sp)
 80026c4:	dec00104 	addi	sp,sp,4
 80026c8:	f800283a 	ret

080026cc <_ZL7setMACsPKh>:

static void setMACs (const uint8_t *mac) {
 80026cc:	defffd04 	addi	sp,sp,-12
 80026d0:	dfc00215 	stw	ra,8(sp)
 80026d4:	df000115 	stw	fp,4(sp)
 80026d8:	df000104 	addi	fp,sp,4
 80026dc:	e13fff15 	stw	r4,-4(fp)
    EtherCard::copyMac(gPB + ETH_DST_MAC, mac);
 80026e0:	e17fff17 	ldw	r5,-4(fp)
 80026e4:	010200b4 	movhi	r4,2050
 80026e8:	21254b04 	addi	r4,r4,-27348
 80026ec:	80054ec0 	call	80054ec <_ZN9EtherCard7copyMacEPhPKh>
    EtherCard::copyMac(gPB + ETH_SRC_MAC, EtherCard::mymac);
 80026f0:	008200b4 	movhi	r2,2050
 80026f4:	10a54c84 	addi	r2,r2,-27342
 80026f8:	d166eb44 	addi	r5,gp,-25683
 80026fc:	1009883a 	mov	r4,r2
 8002700:	80054ec0 	call	80054ec <_ZN9EtherCard7copyMacEPhPKh>
}
 8002704:	0001883a 	nop
 8002708:	e037883a 	mov	sp,fp
 800270c:	dfc00117 	ldw	ra,4(sp)
 8002710:	df000017 	ldw	fp,0(sp)
 8002714:	dec00204 	addi	sp,sp,8
 8002718:	f800283a 	ret

0800271c <_ZL12setMACandIPsPKhS0_>:

static void setMACandIPs (const uint8_t *mac, const uint8_t *dst) {
 800271c:	defffc04 	addi	sp,sp,-16
 8002720:	dfc00315 	stw	ra,12(sp)
 8002724:	df000215 	stw	fp,8(sp)
 8002728:	df000204 	addi	fp,sp,8
 800272c:	e13ffe15 	stw	r4,-8(fp)
 8002730:	e17fff15 	stw	r5,-4(fp)
    setMACs(mac);
 8002734:	e13ffe17 	ldw	r4,-8(fp)
 8002738:	80026cc0 	call	80026cc <_ZL7setMACsPKh>
    EtherCard::copyIp(gPB + IP_DST_P, dst);
 800273c:	008200b4 	movhi	r2,2050
 8002740:	10a55284 	addi	r2,r2,-27318
 8002744:	e17fff17 	ldw	r5,-4(fp)
 8002748:	1009883a 	mov	r4,r2
 800274c:	800552c0 	call	800552c <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
 8002750:	008200b4 	movhi	r2,2050
 8002754:	10a55184 	addi	r2,r2,-27322
 8002758:	d166ecc4 	addi	r5,gp,-25677
 800275c:	1009883a 	mov	r4,r2
 8002760:	800552c0 	call	800552c <_ZN9EtherCard6copyIpEPhPKh>
}
 8002764:	0001883a 	nop
 8002768:	e037883a 	mov	sp,fp
 800276c:	dfc00117 	ldw	ra,4(sp)
 8002770:	df000017 	ldw	fp,0(sp)
 8002774:	dec00204 	addi	sp,sp,8
 8002778:	f800283a 	ret

0800277c <_ZL24check_ip_message_is_fromPKh>:

static uint8_t check_ip_message_is_from(const uint8_t *ip) {
 800277c:	defffd04 	addi	sp,sp,-12
 8002780:	dfc00215 	stw	ra,8(sp)
 8002784:	df000115 	stw	fp,4(sp)
 8002788:	df000104 	addi	fp,sp,4
 800278c:	e13fff15 	stw	r4,-4(fp)
    return memcmp(gPB + IP_SRC_P, ip, IP_LEN) == 0;
 8002790:	008200b4 	movhi	r2,2050
 8002794:	10a55184 	addi	r2,r2,-27322
 8002798:	01800104 	movi	r6,4
 800279c:	e17fff17 	ldw	r5,-4(fp)
 80027a0:	1009883a 	mov	r4,r2
 80027a4:	80061f00 	call	80061f0 <memcmp>
 80027a8:	1005003a 	cmpeq	r2,r2,zero
}
 80027ac:	e037883a 	mov	sp,fp
 80027b0:	dfc00117 	ldw	ra,4(sp)
 80027b4:	df000017 	ldw	fp,0(sp)
 80027b8:	dec00204 	addi	sp,sp,8
 80027bc:	f800283a 	ret

080027c0 <_ZL6is_lanPKhS0_>:

static bool is_lan(const uint8_t source[IP_LEN], const uint8_t destination[IP_LEN]) {
 80027c0:	defffc04 	addi	sp,sp,-16
 80027c4:	df000315 	stw	fp,12(sp)
 80027c8:	df000304 	addi	fp,sp,12
 80027cc:	e13ffe15 	stw	r4,-8(fp)
 80027d0:	e17fff15 	stw	r5,-4(fp)
    if(source[0] == 0 || destination[0] == 0) {
 80027d4:	e0bffe17 	ldw	r2,-8(fp)
 80027d8:	10800003 	ldbu	r2,0(r2)
 80027dc:	10803fcc 	andi	r2,r2,255
 80027e0:	10000426 	beq	r2,zero,80027f4 <_ZL6is_lanPKhS0_+0x34>
 80027e4:	e0bfff17 	ldw	r2,-4(fp)
 80027e8:	10800003 	ldbu	r2,0(r2)
 80027ec:	10803fcc 	andi	r2,r2,255
 80027f0:	1000021e 	bne	r2,zero,80027fc <_ZL6is_lanPKhS0_+0x3c>
        return false;
 80027f4:	0005883a 	mov	r2,zero
 80027f8:	00001c06 	br	800286c <_ZL6is_lanPKhS0_+0xac>
    }
    for(int i = 0; i < IP_LEN; i++)
 80027fc:	e03ffd15 	stw	zero,-12(fp)
 8002800:	e0bffd17 	ldw	r2,-12(fp)
 8002804:	10800108 	cmpgei	r2,r2,4
 8002808:	1000171e 	bne	r2,zero,8002868 <_ZL6is_lanPKhS0_+0xa8>
        if((source[i] & EtherCard::netmask[i]) != (destination[i] & EtherCard::netmask[i])) {
 800280c:	e0bffd17 	ldw	r2,-12(fp)
 8002810:	e0fffe17 	ldw	r3,-8(fp)
 8002814:	1885883a 	add	r2,r3,r2
 8002818:	10c00003 	ldbu	r3,0(r2)
 800281c:	e0bffd17 	ldw	r2,-12(fp)
 8002820:	e13fff17 	ldw	r4,-4(fp)
 8002824:	2085883a 	add	r2,r4,r2
 8002828:	10800003 	ldbu	r2,0(r2)
 800282c:	1884f03a 	xor	r2,r3,r2
 8002830:	1009883a 	mov	r4,r2
 8002834:	e0fffd17 	ldw	r3,-12(fp)
 8002838:	d0a6edc4 	addi	r2,gp,-25673
 800283c:	1885883a 	add	r2,r3,r2
 8002840:	10800003 	ldbu	r2,0(r2)
 8002844:	2084703a 	and	r2,r4,r2
 8002848:	10803fcc 	andi	r2,r2,255
 800284c:	10000226 	beq	r2,zero,8002858 <_ZL6is_lanPKhS0_+0x98>
            return false;
 8002850:	0005883a 	mov	r2,zero
 8002854:	00000506 	br	800286c <_ZL6is_lanPKhS0_+0xac>

static bool is_lan(const uint8_t source[IP_LEN], const uint8_t destination[IP_LEN]) {
    if(source[0] == 0 || destination[0] == 0) {
        return false;
    }
    for(int i = 0; i < IP_LEN; i++)
 8002858:	e0bffd17 	ldw	r2,-12(fp)
 800285c:	10800044 	addi	r2,r2,1
 8002860:	e0bffd15 	stw	r2,-12(fp)
 8002864:	003fe606 	br	8002800 <_ZL6is_lanPKhS0_+0x40>
        if((source[i] & EtherCard::netmask[i]) != (destination[i] & EtherCard::netmask[i])) {
            return false;
        }
    return true;
 8002868:	00800044 	movi	r2,1
}
 800286c:	e037883a 	mov	sp,fp
 8002870:	df000017 	ldw	fp,0(sp)
 8002874:	dec00104 	addi	sp,sp,4
 8002878:	f800283a 	ret

0800287c <_ZL25eth_type_is_arp_and_my_ipt>:

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
 800287c:	defffd04 	addi	sp,sp,-12
 8002880:	dfc00215 	stw	ra,8(sp)
 8002884:	df000115 	stw	fp,4(sp)
 8002888:	df000104 	addi	fp,sp,4
 800288c:	2005883a 	mov	r2,r4
 8002890:	e0bfff0d 	sth	r2,-4(fp)
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
 8002894:	e0bfff0b 	ldhu	r2,-4(fp)
 8002898:	10800a70 	cmpltui	r2,r2,41
 800289c:	1000151e 	bne	r2,zero,80028f4 <_ZL25eth_type_is_arp_and_my_ipt+0x78>
        }
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
 80028a0:	008200b4 	movhi	r2,2050
 80028a4:	10a54b04 	addi	r2,r2,-27348
 80028a8:	10800303 	ldbu	r2,12(r2)
 80028ac:	10803fcc 	andi	r2,r2,255
 80028b0:	10800218 	cmpnei	r2,r2,8
 80028b4:	10000f1e 	bne	r2,zero,80028f4 <_ZL25eth_type_is_arp_and_my_ipt+0x78>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
 80028b8:	008200b4 	movhi	r2,2050
 80028bc:	10a54b04 	addi	r2,r2,-27348
 80028c0:	10800343 	ldbu	r2,13(r2)
        }
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
 80028c4:	10803fcc 	andi	r2,r2,255
 80028c8:	10800198 	cmpnei	r2,r2,6
 80028cc:	1000091e 	bne	r2,zero,80028f4 <_ZL25eth_type_is_arp_and_my_ipt+0x78>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
 80028d0:	008200b4 	movhi	r2,2050
 80028d4:	10a55484 	addi	r2,r2,-27310
 80028d8:	01800104 	movi	r6,4
 80028dc:	d166ecc4 	addi	r5,gp,-25677
 80028e0:	1009883a 	mov	r4,r2
 80028e4:	80061f00 	call	80061f0 <memcmp>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
 80028e8:	1000021e 	bne	r2,zero,80028f4 <_ZL25eth_type_is_arp_and_my_ipt+0x78>
 80028ec:	00800044 	movi	r2,1
 80028f0:	00000106 	br	80028f8 <_ZL25eth_type_is_arp_and_my_ipt+0x7c>
 80028f4:	0005883a 	mov	r2,zero
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}
 80028f8:	e037883a 	mov	sp,fp
 80028fc:	dfc00117 	ldw	ra,4(sp)
 8002900:	df000017 	ldw	fp,0(sp)
 8002904:	dec00204 	addi	sp,sp,8
 8002908:	f800283a 	ret

0800290c <_ZL24eth_type_is_ip_and_my_ipt>:

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
 800290c:	defffd04 	addi	sp,sp,-12
 8002910:	dfc00215 	stw	ra,8(sp)
 8002914:	df000115 	stw	fp,4(sp)
 8002918:	df000104 	addi	fp,sp,4
 800291c:	2005883a 	mov	r2,r4
 8002920:	e0bfff0d 	sth	r2,-4(fp)
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
 8002924:	e0bfff0b 	ldhu	r2,-4(fp)
 8002928:	10800ab0 	cmpltui	r2,r2,42
 800292c:	1000281e 	bne	r2,zero,80029d0 <_ZL24eth_type_is_ip_and_my_ipt+0xc4>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
 8002930:	008200b4 	movhi	r2,2050
 8002934:	10a54b04 	addi	r2,r2,-27348
 8002938:	10800303 	ldbu	r2,12(r2)
 800293c:	10803fcc 	andi	r2,r2,255
 8002940:	10800218 	cmpnei	r2,r2,8
 8002944:	1000221e 	bne	r2,zero,80029d0 <_ZL24eth_type_is_ip_and_my_ipt+0xc4>
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
 8002948:	008200b4 	movhi	r2,2050
 800294c:	10a54b04 	addi	r2,r2,-27348
 8002950:	10800343 	ldbu	r2,13(r2)
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
 8002954:	10803fcc 	andi	r2,r2,255
 8002958:	10001d1e 	bne	r2,zero,80029d0 <_ZL24eth_type_is_ip_and_my_ipt+0xc4>
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
 800295c:	008200b4 	movhi	r2,2050
 8002960:	10a54b04 	addi	r2,r2,-27348
 8002964:	10800383 	ldbu	r2,14(r2)
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
 8002968:	10803fcc 	andi	r2,r2,255
 800296c:	10801158 	cmpnei	r2,r2,69
 8002970:	1000171e 	bne	r2,zero,80029d0 <_ZL24eth_type_is_ip_and_my_ipt+0xc4>
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
 8002974:	008200b4 	movhi	r2,2050
 8002978:	10a55284 	addi	r2,r2,-27318
 800297c:	01800104 	movi	r6,4
 8002980:	d166ecc4 	addi	r5,gp,-25677
 8002984:	1009883a 	mov	r4,r2
 8002988:	80061f00 	call	80061f0 <memcmp>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
 800298c:	10000e26 	beq	r2,zero,80029c8 <_ZL24eth_type_is_ip_and_my_ipt+0xbc>
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
            || (memcmp(gPB + IP_DST_P, EtherCard::broadcastip, IP_LEN) == 0) //not subnet broadcast
 8002990:	008200b4 	movhi	r2,2050
 8002994:	10a55284 	addi	r2,r2,-27318
 8002998:	01800104 	movi	r6,4
 800299c:	d166eec4 	addi	r5,gp,-25669
 80029a0:	1009883a 	mov	r4,r2
 80029a4:	80061f00 	call	80061f0 <memcmp>
 80029a8:	10000726 	beq	r2,zero,80029c8 <_ZL24eth_type_is_ip_and_my_ipt+0xbc>
            || (memcmp(gPB + IP_DST_P, allOnes, IP_LEN) == 0)); //not global broadcasts
 80029ac:	008200b4 	movhi	r2,2050
 80029b0:	10a55284 	addi	r2,r2,-27318
 80029b4:	01800104 	movi	r6,4
 80029b8:	d16003c4 	addi	r5,gp,-32753
 80029bc:	1009883a 	mov	r4,r2
 80029c0:	80061f00 	call	80061f0 <memcmp>
 80029c4:	1000021e 	bne	r2,zero,80029d0 <_ZL24eth_type_is_ip_and_my_ipt+0xc4>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
 80029c8:	00800044 	movi	r2,1
 80029cc:	00000106 	br	80029d4 <_ZL24eth_type_is_ip_and_my_ipt+0xc8>
 80029d0:	0005883a 	mov	r2,zero
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
            || (memcmp(gPB + IP_DST_P, EtherCard::broadcastip, IP_LEN) == 0) //not subnet broadcast
            || (memcmp(gPB + IP_DST_P, allOnes, IP_LEN) == 0)); //not global broadcasts
    //!@todo Handle multicast
}
 80029d4:	e037883a 	mov	sp,fp
 80029d8:	dfc00117 	ldw	ra,4(sp)
 80029dc:	df000017 	ldw	fp,0(sp)
 80029e0:	dec00204 	addi	sp,sp,8
 80029e4:	f800283a 	ret

080029e8 <_ZL20fill_ip_hdr_checksumv>:

static void fill_ip_hdr_checksum() {
 80029e8:	defffe04 	addi	sp,sp,-8
 80029ec:	dfc00115 	stw	ra,4(sp)
 80029f0:	df000015 	stw	fp,0(sp)
 80029f4:	d839883a 	mov	fp,sp
    gPB[IP_CHECKSUM_P] = 0;
 80029f8:	008200b4 	movhi	r2,2050
 80029fc:	10a54b04 	addi	r2,r2,-27348
 8002a00:	10000605 	stb	zero,24(r2)
    gPB[IP_CHECKSUM_P+1] = 0;
 8002a04:	008200b4 	movhi	r2,2050
 8002a08:	10a54b04 	addi	r2,r2,-27348
 8002a0c:	10000645 	stb	zero,25(r2)
    gPB[IP_FLAGS_P] = 0x40; // don't fragment
 8002a10:	008200b4 	movhi	r2,2050
 8002a14:	10a54b04 	addi	r2,r2,-27348
 8002a18:	00c01004 	movi	r3,64
 8002a1c:	10c00505 	stb	r3,20(r2)
    gPB[IP_FLAGS_P+1] = 0;  // fragment offset
 8002a20:	008200b4 	movhi	r2,2050
 8002a24:	10a54b04 	addi	r2,r2,-27348
 8002a28:	10000545 	stb	zero,21(r2)
    gPB[IP_TTL_P] = 64; // ttl
 8002a2c:	008200b4 	movhi	r2,2050
 8002a30:	10a54b04 	addi	r2,r2,-27348
 8002a34:	00c01004 	movi	r3,64
 8002a38:	10c00585 	stb	r3,22(r2)
    fill_checksum(IP_CHECKSUM_P, IP_P, IP_HEADER_LEN,0);
 8002a3c:	000f883a 	mov	r7,zero
 8002a40:	01800504 	movi	r6,20
 8002a44:	01400384 	movi	r5,14
 8002a48:	01000604 	movi	r4,24
 8002a4c:	80025480 	call	8002548 <_ZL13fill_checksumhhth>
}
 8002a50:	0001883a 	nop
 8002a54:	e037883a 	mov	sp,fp
 8002a58:	dfc00117 	ldw	ra,4(sp)
 8002a5c:	df000017 	ldw	fp,0(sp)
 8002a60:	dec00204 	addi	sp,sp,8
 8002a64:	f800283a 	ret

08002a68 <_ZL11make_eth_ipv>:

static void make_eth_ip() {
 8002a68:	defffe04 	addi	sp,sp,-8
 8002a6c:	dfc00115 	stw	ra,4(sp)
 8002a70:	df000015 	stw	fp,0(sp)
 8002a74:	d839883a 	mov	fp,sp
    setMACs(gPB + ETH_SRC_MAC);
 8002a78:	008200b4 	movhi	r2,2050
 8002a7c:	10a54c84 	addi	r2,r2,-27342
 8002a80:	1009883a 	mov	r4,r2
 8002a84:	80026cc0 	call	80026cc <_ZL7setMACsPKh>
    EtherCard::copyIp(gPB + IP_DST_P, gPB + IP_SRC_P);
 8002a88:	008200b4 	movhi	r2,2050
 8002a8c:	10a55284 	addi	r2,r2,-27318
 8002a90:	00c200b4 	movhi	r3,2050
 8002a94:	18e55184 	addi	r3,r3,-27322
 8002a98:	180b883a 	mov	r5,r3
 8002a9c:	1009883a 	mov	r4,r2
 8002aa0:	800552c0 	call	800552c <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
 8002aa4:	008200b4 	movhi	r2,2050
 8002aa8:	10a55184 	addi	r2,r2,-27322
 8002aac:	d166ecc4 	addi	r5,gp,-25677
 8002ab0:	1009883a 	mov	r4,r2
 8002ab4:	800552c0 	call	800552c <_ZN9EtherCard6copyIpEPhPKh>
    fill_ip_hdr_checksum();
 8002ab8:	80029e80 	call	80029e8 <_ZL20fill_ip_hdr_checksumv>
}
 8002abc:	0001883a 	nop
 8002ac0:	e037883a 	mov	sp,fp
 8002ac4:	dfc00117 	ldw	ra,4(sp)
 8002ac8:	df000017 	ldw	fp,0(sp)
 8002acc:	dec00204 	addi	sp,sp,8
 8002ad0:	f800283a 	ret

08002ad4 <_ZL8step_seqth>:

static void step_seq(uint16_t rel_ack_num,uint8_t cp_seq) {
 8002ad4:	defffc04 	addi	sp,sp,-16
 8002ad8:	df000315 	stw	fp,12(sp)
 8002adc:	df000304 	addi	fp,sp,12
 8002ae0:	2007883a 	mov	r3,r4
 8002ae4:	2805883a 	mov	r2,r5
 8002ae8:	e0fffe0d 	sth	r3,-8(fp)
 8002aec:	e0bfff05 	stb	r2,-4(fp)
    uint8_t i;
    uint8_t tseq;
    i = 4;
 8002af0:	00800104 	movi	r2,4
 8002af4:	e0bffd05 	stb	r2,-12(fp)
    while(i>0) {
 8002af8:	e0bffd03 	ldbu	r2,-12(fp)
 8002afc:	10003026 	beq	r2,zero,8002bc0 <_ZL8step_seqth+0xec>
        rel_ack_num = gPB[TCP_SEQ_H_P+i-1]+rel_ack_num;
 8002b00:	e0bffd03 	ldbu	r2,-12(fp)
 8002b04:	10c00944 	addi	r3,r2,37
 8002b08:	008200b4 	movhi	r2,2050
 8002b0c:	10a54b04 	addi	r2,r2,-27348
 8002b10:	10c5883a 	add	r2,r2,r3
 8002b14:	10800003 	ldbu	r2,0(r2)
 8002b18:	10c03fcc 	andi	r3,r2,255
 8002b1c:	e0bffe0b 	ldhu	r2,-8(fp)
 8002b20:	1885883a 	add	r2,r3,r2
 8002b24:	e0bffe0d 	sth	r2,-8(fp)
        tseq = gPB[TCP_SEQACK_H_P+i-1];
 8002b28:	e0bffd03 	ldbu	r2,-12(fp)
 8002b2c:	10c00a44 	addi	r3,r2,41
 8002b30:	008200b4 	movhi	r2,2050
 8002b34:	10a54b04 	addi	r2,r2,-27348
 8002b38:	10c5883a 	add	r2,r2,r3
 8002b3c:	10800003 	ldbu	r2,0(r2)
 8002b40:	e0bffd45 	stb	r2,-11(fp)
        gPB[TCP_SEQACK_H_P+i-1] = rel_ack_num;
 8002b44:	e0bffd03 	ldbu	r2,-12(fp)
 8002b48:	10c00a44 	addi	r3,r2,41
 8002b4c:	e0bffe0b 	ldhu	r2,-8(fp)
 8002b50:	1009883a 	mov	r4,r2
 8002b54:	008200b4 	movhi	r2,2050
 8002b58:	10a54b04 	addi	r2,r2,-27348
 8002b5c:	10c5883a 	add	r2,r2,r3
 8002b60:	11000005 	stb	r4,0(r2)
        if (cp_seq)
 8002b64:	e0bfff03 	ldbu	r2,-4(fp)
 8002b68:	10000826 	beq	r2,zero,8002b8c <_ZL8step_seqth+0xb8>
            gPB[TCP_SEQ_H_P+i-1] = tseq;
 8002b6c:	e0bffd03 	ldbu	r2,-12(fp)
 8002b70:	10c00944 	addi	r3,r2,37
 8002b74:	008200b4 	movhi	r2,2050
 8002b78:	10a54b04 	addi	r2,r2,-27348
 8002b7c:	10c5883a 	add	r2,r2,r3
 8002b80:	e0fffd43 	ldbu	r3,-11(fp)
 8002b84:	10c00005 	stb	r3,0(r2)
 8002b88:	00000606 	br	8002ba4 <_ZL8step_seqth+0xd0>
        else
            gPB[TCP_SEQ_H_P+i-1] = 0; // some preset value
 8002b8c:	e0bffd03 	ldbu	r2,-12(fp)
 8002b90:	10c00944 	addi	r3,r2,37
 8002b94:	008200b4 	movhi	r2,2050
 8002b98:	10a54b04 	addi	r2,r2,-27348
 8002b9c:	10c5883a 	add	r2,r2,r3
 8002ba0:	10000005 	stb	zero,0(r2)
        rel_ack_num = rel_ack_num>>8;
 8002ba4:	e0bffe0b 	ldhu	r2,-8(fp)
 8002ba8:	1005d23a 	srai	r2,r2,8
 8002bac:	e0bffe0d 	sth	r2,-8(fp)
        i--;
 8002bb0:	e0bffd03 	ldbu	r2,-12(fp)
 8002bb4:	10bfffc4 	addi	r2,r2,-1
 8002bb8:	e0bffd05 	stb	r2,-12(fp)

static void step_seq(uint16_t rel_ack_num,uint8_t cp_seq) {
    uint8_t i;
    uint8_t tseq;
    i = 4;
    while(i>0) {
 8002bbc:	003fce06 	br	8002af8 <_ZL8step_seqth+0x24>
        else
            gPB[TCP_SEQ_H_P+i-1] = 0; // some preset value
        rel_ack_num = rel_ack_num>>8;
        i--;
    }
}
 8002bc0:	0001883a 	nop
 8002bc4:	e037883a 	mov	sp,fp
 8002bc8:	df000017 	ldw	fp,0(sp)
 8002bcc:	dec00104 	addi	sp,sp,4
 8002bd0:	f800283a 	ret

08002bd4 <_ZL12make_tcpheadth>:

static void make_tcphead(uint16_t rel_ack_num,uint8_t cp_seq) {
 8002bd4:	defffb04 	addi	sp,sp,-20
 8002bd8:	dfc00415 	stw	ra,16(sp)
 8002bdc:	df000315 	stw	fp,12(sp)
 8002be0:	df000304 	addi	fp,sp,12
 8002be4:	2007883a 	mov	r3,r4
 8002be8:	2805883a 	mov	r2,r5
 8002bec:	e0fffe0d 	sth	r3,-8(fp)
 8002bf0:	e0bfff05 	stb	r2,-4(fp)
    uint8_t i = gPB[TCP_DST_PORT_H_P];
 8002bf4:	008200b4 	movhi	r2,2050
 8002bf8:	10a54b04 	addi	r2,r2,-27348
 8002bfc:	10800903 	ldbu	r2,36(r2)
 8002c00:	e0bffd05 	stb	r2,-12(fp)
    gPB[TCP_DST_PORT_H_P] = gPB[TCP_SRC_PORT_H_P];
 8002c04:	008200b4 	movhi	r2,2050
 8002c08:	10a54b04 	addi	r2,r2,-27348
 8002c0c:	10c00883 	ldbu	r3,34(r2)
 8002c10:	008200b4 	movhi	r2,2050
 8002c14:	10a54b04 	addi	r2,r2,-27348
 8002c18:	10c00905 	stb	r3,36(r2)
    gPB[TCP_SRC_PORT_H_P] = i;
 8002c1c:	008200b4 	movhi	r2,2050
 8002c20:	10a54b04 	addi	r2,r2,-27348
 8002c24:	e0fffd03 	ldbu	r3,-12(fp)
 8002c28:	10c00885 	stb	r3,34(r2)
    uint8_t j = gPB[TCP_DST_PORT_L_P];
 8002c2c:	008200b4 	movhi	r2,2050
 8002c30:	10a54b04 	addi	r2,r2,-27348
 8002c34:	10800943 	ldbu	r2,37(r2)
 8002c38:	e0bffd45 	stb	r2,-11(fp)
    gPB[TCP_DST_PORT_L_P] = gPB[TCP_SRC_PORT_L_P];
 8002c3c:	008200b4 	movhi	r2,2050
 8002c40:	10a54b04 	addi	r2,r2,-27348
 8002c44:	10c008c3 	ldbu	r3,35(r2)
 8002c48:	008200b4 	movhi	r2,2050
 8002c4c:	10a54b04 	addi	r2,r2,-27348
 8002c50:	10c00945 	stb	r3,37(r2)
    gPB[TCP_SRC_PORT_L_P] = j;
 8002c54:	008200b4 	movhi	r2,2050
 8002c58:	10a54b04 	addi	r2,r2,-27348
 8002c5c:	e0fffd43 	ldbu	r3,-11(fp)
 8002c60:	10c008c5 	stb	r3,35(r2)
    step_seq(rel_ack_num,cp_seq);
 8002c64:	e0bffe0b 	ldhu	r2,-8(fp)
 8002c68:	e0ffff03 	ldbu	r3,-4(fp)
 8002c6c:	180b883a 	mov	r5,r3
 8002c70:	1009883a 	mov	r4,r2
 8002c74:	8002ad40 	call	8002ad4 <_ZL8step_seqth>
    gPB[TCP_CHECKSUM_H_P] = 0;
 8002c78:	008200b4 	movhi	r2,2050
 8002c7c:	10a54b04 	addi	r2,r2,-27348
 8002c80:	10000c85 	stb	zero,50(r2)
    gPB[TCP_CHECKSUM_L_P] = 0;
 8002c84:	008200b4 	movhi	r2,2050
 8002c88:	10a54b04 	addi	r2,r2,-27348
 8002c8c:	10000cc5 	stb	zero,51(r2)
    gPB[TCP_HEADER_LEN_P] = 0x50;
 8002c90:	008200b4 	movhi	r2,2050
 8002c94:	10a54b04 	addi	r2,r2,-27348
 8002c98:	00c01404 	movi	r3,80
 8002c9c:	10c00b85 	stb	r3,46(r2)
}
 8002ca0:	0001883a 	nop
 8002ca4:	e037883a 	mov	sp,fp
 8002ca8:	dfc00117 	ldw	ra,4(sp)
 8002cac:	df000017 	ldw	fp,0(sp)
 8002cb0:	dec00204 	addi	sp,sp,8
 8002cb4:	f800283a 	ret

08002cb8 <_ZL28make_arp_answer_from_requestv>:

static void make_arp_answer_from_request() {
 8002cb8:	defffe04 	addi	sp,sp,-8
 8002cbc:	dfc00115 	stw	ra,4(sp)
 8002cc0:	df000015 	stw	fp,0(sp)
 8002cc4:	d839883a 	mov	fp,sp
    setMACs(gPB + ETH_SRC_MAC);
 8002cc8:	008200b4 	movhi	r2,2050
 8002ccc:	10a54c84 	addi	r2,r2,-27342
 8002cd0:	1009883a 	mov	r4,r2
 8002cd4:	80026cc0 	call	80026cc <_ZL7setMACsPKh>
    gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
 8002cd8:	008200b4 	movhi	r2,2050
 8002cdc:	10a54b04 	addi	r2,r2,-27348
 8002ce0:	10000505 	stb	zero,20(r2)
    gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
 8002ce4:	008200b4 	movhi	r2,2050
 8002ce8:	10a54b04 	addi	r2,r2,-27348
 8002cec:	00c00084 	movi	r3,2
 8002cf0:	10c00545 	stb	r3,21(r2)
    EtherCard::copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
 8002cf4:	008200b4 	movhi	r2,2050
 8002cf8:	10a55304 	addi	r2,r2,-27316
 8002cfc:	00c200b4 	movhi	r3,2050
 8002d00:	18e55084 	addi	r3,r3,-27326
 8002d04:	180b883a 	mov	r5,r3
 8002d08:	1009883a 	mov	r4,r2
 8002d0c:	80054ec0 	call	80054ec <_ZN9EtherCard7copyMacEPhPKh>
    EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
 8002d10:	008200b4 	movhi	r2,2050
 8002d14:	10a55084 	addi	r2,r2,-27326
 8002d18:	d166eb44 	addi	r5,gp,-25683
 8002d1c:	1009883a 	mov	r4,r2
 8002d20:	80054ec0 	call	80054ec <_ZN9EtherCard7copyMacEPhPKh>
    EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
 8002d24:	008200b4 	movhi	r2,2050
 8002d28:	10a55484 	addi	r2,r2,-27310
 8002d2c:	00c200b4 	movhi	r3,2050
 8002d30:	18e55204 	addi	r3,r3,-27320
 8002d34:	180b883a 	mov	r5,r3
 8002d38:	1009883a 	mov	r4,r2
 8002d3c:	800552c0 	call	800552c <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
 8002d40:	008200b4 	movhi	r2,2050
 8002d44:	10a55204 	addi	r2,r2,-27320
 8002d48:	d166ecc4 	addi	r5,gp,-25677
 8002d4c:	1009883a 	mov	r4,r2
 8002d50:	800552c0 	call	800552c <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::packetSend(42);
 8002d54:	01000a84 	movi	r4,42
 8002d58:	80022b80 	call	80022b8 <_ZN8ENC28J6010packetSendEt>
}
 8002d5c:	0001883a 	nop
 8002d60:	e037883a 	mov	sp,fp
 8002d64:	dfc00117 	ldw	ra,4(sp)
 8002d68:	df000017 	ldw	fp,0(sp)
 8002d6c:	dec00204 	addi	sp,sp,8
 8002d70:	f800283a 	ret

08002d74 <_ZL28make_echo_reply_from_requestt>:

static void make_echo_reply_from_request(uint16_t len) {
 8002d74:	defffd04 	addi	sp,sp,-12
 8002d78:	dfc00215 	stw	ra,8(sp)
 8002d7c:	df000115 	stw	fp,4(sp)
 8002d80:	df000104 	addi	fp,sp,4
 8002d84:	2005883a 	mov	r2,r4
 8002d88:	e0bfff0d 	sth	r2,-4(fp)
    make_eth_ip();
 8002d8c:	8002a680 	call	8002a68 <_ZL11make_eth_ipv>
    gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
 8002d90:	008200b4 	movhi	r2,2050
 8002d94:	10a54b04 	addi	r2,r2,-27348
 8002d98:	10000885 	stb	zero,34(r2)
    if (gPB[ICMP_CHECKSUM_P] > (0xFF-0x08))
 8002d9c:	008200b4 	movhi	r2,2050
 8002da0:	10a54b04 	addi	r2,r2,-27348
 8002da4:	10800903 	ldbu	r2,36(r2)
 8002da8:	10803fcc 	andi	r2,r2,255
 8002dac:	10803e30 	cmpltui	r2,r2,248
 8002db0:	1000081e 	bne	r2,zero,8002dd4 <_ZL28make_echo_reply_from_requestt+0x60>
        gPB[ICMP_CHECKSUM_P+1]++;
 8002db4:	008200b4 	movhi	r2,2050
 8002db8:	10a54b04 	addi	r2,r2,-27348
 8002dbc:	10800943 	ldbu	r2,37(r2)
 8002dc0:	10800044 	addi	r2,r2,1
 8002dc4:	1007883a 	mov	r3,r2
 8002dc8:	008200b4 	movhi	r2,2050
 8002dcc:	10a54b04 	addi	r2,r2,-27348
 8002dd0:	10c00945 	stb	r3,37(r2)
    gPB[ICMP_CHECKSUM_P] += 0x08;
 8002dd4:	008200b4 	movhi	r2,2050
 8002dd8:	10a54b04 	addi	r2,r2,-27348
 8002ddc:	10800903 	ldbu	r2,36(r2)
 8002de0:	10800204 	addi	r2,r2,8
 8002de4:	1007883a 	mov	r3,r2
 8002de8:	008200b4 	movhi	r2,2050
 8002dec:	10a54b04 	addi	r2,r2,-27348
 8002df0:	10c00905 	stb	r3,36(r2)
    EtherCard::packetSend(len);
 8002df4:	e0bfff0b 	ldhu	r2,-4(fp)
 8002df8:	1009883a 	mov	r4,r2
 8002dfc:	80022b80 	call	80022b8 <_ZN8ENC28J6010packetSendEt>
}
 8002e00:	0001883a 	nop
 8002e04:	e037883a 	mov	sp,fp
 8002e08:	dfc00117 	ldw	ra,4(sp)
 8002e0c:	df000017 	ldw	fp,0(sp)
 8002e10:	dec00204 	addi	sp,sp,8
 8002e14:	f800283a 	ret

08002e18 <_ZN9EtherCard12makeUdpReplyEPKcht>:

void EtherCard::makeUdpReply (const char *data,uint8_t datalen,uint16_t port) {
 8002e18:	defffb04 	addi	sp,sp,-20
 8002e1c:	dfc00415 	stw	ra,16(sp)
 8002e20:	df000315 	stw	fp,12(sp)
 8002e24:	df000304 	addi	fp,sp,12
 8002e28:	e13ffd15 	stw	r4,-12(fp)
 8002e2c:	2807883a 	mov	r3,r5
 8002e30:	3005883a 	mov	r2,r6
 8002e34:	e0fffe05 	stb	r3,-8(fp)
 8002e38:	e0bfff0d 	sth	r2,-4(fp)
    if (datalen>220)
 8002e3c:	e0bffe03 	ldbu	r2,-8(fp)
 8002e40:	10803770 	cmpltui	r2,r2,221
 8002e44:	1000021e 	bne	r2,zero,8002e50 <_ZN9EtherCard12makeUdpReplyEPKcht+0x38>
        datalen = 220;
 8002e48:	00bff704 	movi	r2,-36
 8002e4c:	e0bffe05 	stb	r2,-8(fp)
    gPB[IP_TOTLEN_H_P] = (IP_HEADER_LEN+UDP_HEADER_LEN+datalen) >>8;
 8002e50:	e0bffe03 	ldbu	r2,-8(fp)
 8002e54:	10800704 	addi	r2,r2,28
 8002e58:	1005d23a 	srai	r2,r2,8
 8002e5c:	1007883a 	mov	r3,r2
 8002e60:	008200b4 	movhi	r2,2050
 8002e64:	10a54b04 	addi	r2,r2,-27348
 8002e68:	10c00405 	stb	r3,16(r2)
    gPB[IP_TOTLEN_L_P] = IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
 8002e6c:	e0bffe03 	ldbu	r2,-8(fp)
 8002e70:	10800704 	addi	r2,r2,28
 8002e74:	1007883a 	mov	r3,r2
 8002e78:	008200b4 	movhi	r2,2050
 8002e7c:	10a54b04 	addi	r2,r2,-27348
 8002e80:	10c00445 	stb	r3,17(r2)
    make_eth_ip();
 8002e84:	8002a680 	call	8002a68 <_ZL11make_eth_ipv>
    gPB[UDP_DST_PORT_H_P] = gPB[UDP_SRC_PORT_H_P];
 8002e88:	008200b4 	movhi	r2,2050
 8002e8c:	10a54b04 	addi	r2,r2,-27348
 8002e90:	10c00883 	ldbu	r3,34(r2)
 8002e94:	008200b4 	movhi	r2,2050
 8002e98:	10a54b04 	addi	r2,r2,-27348
 8002e9c:	10c00905 	stb	r3,36(r2)
    gPB[UDP_DST_PORT_L_P] = gPB[UDP_SRC_PORT_L_P];
 8002ea0:	008200b4 	movhi	r2,2050
 8002ea4:	10a54b04 	addi	r2,r2,-27348
 8002ea8:	10c008c3 	ldbu	r3,35(r2)
 8002eac:	008200b4 	movhi	r2,2050
 8002eb0:	10a54b04 	addi	r2,r2,-27348
 8002eb4:	10c00945 	stb	r3,37(r2)
    gPB[UDP_SRC_PORT_H_P] = port>>8;
 8002eb8:	e0bfff0b 	ldhu	r2,-4(fp)
 8002ebc:	1005d23a 	srai	r2,r2,8
 8002ec0:	1007883a 	mov	r3,r2
 8002ec4:	008200b4 	movhi	r2,2050
 8002ec8:	10a54b04 	addi	r2,r2,-27348
 8002ecc:	10c00885 	stb	r3,34(r2)
    gPB[UDP_SRC_PORT_L_P] = port;
 8002ed0:	e0bfff0b 	ldhu	r2,-4(fp)
 8002ed4:	1007883a 	mov	r3,r2
 8002ed8:	008200b4 	movhi	r2,2050
 8002edc:	10a54b04 	addi	r2,r2,-27348
 8002ee0:	10c008c5 	stb	r3,35(r2)
    gPB[UDP_LEN_H_P] = (UDP_HEADER_LEN+datalen) >> 8;
 8002ee4:	e0bffe03 	ldbu	r2,-8(fp)
 8002ee8:	10800204 	addi	r2,r2,8
 8002eec:	1005d23a 	srai	r2,r2,8
 8002ef0:	1007883a 	mov	r3,r2
 8002ef4:	008200b4 	movhi	r2,2050
 8002ef8:	10a54b04 	addi	r2,r2,-27348
 8002efc:	10c00985 	stb	r3,38(r2)
    gPB[UDP_LEN_L_P] = UDP_HEADER_LEN+datalen;
 8002f00:	e0bffe03 	ldbu	r2,-8(fp)
 8002f04:	10800204 	addi	r2,r2,8
 8002f08:	1007883a 	mov	r3,r2
 8002f0c:	008200b4 	movhi	r2,2050
 8002f10:	10a54b04 	addi	r2,r2,-27348
 8002f14:	10c009c5 	stb	r3,39(r2)
    gPB[UDP_CHECKSUM_H_P] = 0;
 8002f18:	008200b4 	movhi	r2,2050
 8002f1c:	10a54b04 	addi	r2,r2,-27348
 8002f20:	10000a05 	stb	zero,40(r2)
    gPB[UDP_CHECKSUM_L_P] = 0;
 8002f24:	008200b4 	movhi	r2,2050
 8002f28:	10a54b04 	addi	r2,r2,-27348
 8002f2c:	10000a45 	stb	zero,41(r2)
    memcpy(gPB + UDP_DATA_P, data, datalen);
 8002f30:	008200b4 	movhi	r2,2050
 8002f34:	10a55584 	addi	r2,r2,-27306
 8002f38:	e0fffe03 	ldbu	r3,-8(fp)
 8002f3c:	180d883a 	mov	r6,r3
 8002f40:	e17ffd17 	ldw	r5,-12(fp)
 8002f44:	1009883a 	mov	r4,r2
 8002f48:	800626c0 	call	800626c <memcpy>
    fill_checksum(UDP_CHECKSUM_H_P, IP_SRC_P, 16 + datalen,1);
 8002f4c:	e0bffe03 	ldbu	r2,-8(fp)
 8002f50:	10800404 	addi	r2,r2,16
 8002f54:	10bfffcc 	andi	r2,r2,65535
 8002f58:	01c00044 	movi	r7,1
 8002f5c:	100d883a 	mov	r6,r2
 8002f60:	01400684 	movi	r5,26
 8002f64:	01000a04 	movi	r4,40
 8002f68:	80025480 	call	8002548 <_ZL13fill_checksumhhth>
    packetSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen);
 8002f6c:	e0bffe03 	ldbu	r2,-8(fp)
 8002f70:	10800a84 	addi	r2,r2,42
 8002f74:	10bfffcc 	andi	r2,r2,65535
 8002f78:	1009883a 	mov	r4,r2
 8002f7c:	80022b80 	call	80022b8 <_ZN8ENC28J6010packetSendEt>
}
 8002f80:	0001883a 	nop
 8002f84:	e037883a 	mov	sp,fp
 8002f88:	dfc00117 	ldw	ra,4(sp)
 8002f8c:	df000017 	ldw	fp,0(sp)
 8002f90:	dec00204 	addi	sp,sp,8
 8002f94:	f800283a 	ret

08002f98 <_ZL24make_tcp_synack_from_synv>:

static void make_tcp_synack_from_syn() {
 8002f98:	defffe04 	addi	sp,sp,-8
 8002f9c:	dfc00115 	stw	ra,4(sp)
 8002fa0:	df000015 	stw	fp,0(sp)
 8002fa4:	d839883a 	mov	fp,sp
    gPB[IP_TOTLEN_H_P] = 0;
 8002fa8:	008200b4 	movhi	r2,2050
 8002fac:	10a54b04 	addi	r2,r2,-27348
 8002fb0:	10000405 	stb	zero,16(r2)
    gPB[IP_TOTLEN_L_P] = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
 8002fb4:	008200b4 	movhi	r2,2050
 8002fb8:	10a54b04 	addi	r2,r2,-27348
 8002fbc:	00c00b04 	movi	r3,44
 8002fc0:	10c00445 	stb	r3,17(r2)
    make_eth_ip();
 8002fc4:	8002a680 	call	8002a68 <_ZL11make_eth_ipv>
    gPB[TCP_FLAGS_P] = TCP_FLAGS_SYNACK_V;
 8002fc8:	008200b4 	movhi	r2,2050
 8002fcc:	10a54b04 	addi	r2,r2,-27348
 8002fd0:	00c00484 	movi	r3,18
 8002fd4:	10c00bc5 	stb	r3,47(r2)
    make_tcphead(1,0);
 8002fd8:	000b883a 	mov	r5,zero
 8002fdc:	01000044 	movi	r4,1
 8002fe0:	8002bd40 	call	8002bd4 <_ZL12make_tcpheadth>
    gPB[TCP_SEQ_H_P+0] = 0;
 8002fe4:	008200b4 	movhi	r2,2050
 8002fe8:	10a54b04 	addi	r2,r2,-27348
 8002fec:	10000985 	stb	zero,38(r2)
    gPB[TCP_SEQ_H_P+1] = 0;
 8002ff0:	008200b4 	movhi	r2,2050
 8002ff4:	10a54b04 	addi	r2,r2,-27348
 8002ff8:	100009c5 	stb	zero,39(r2)
    gPB[TCP_SEQ_H_P+2] = seqnum;
 8002ffc:	d0e00343 	ldbu	r3,-32755(gp)
 8003000:	008200b4 	movhi	r2,2050
 8003004:	10a54b04 	addi	r2,r2,-27348
 8003008:	10c00a05 	stb	r3,40(r2)
    gPB[TCP_SEQ_H_P+3] = 0;
 800300c:	008200b4 	movhi	r2,2050
 8003010:	10a54b04 	addi	r2,r2,-27348
 8003014:	10000a45 	stb	zero,41(r2)
    seqnum += 3;
 8003018:	d0a00343 	ldbu	r2,-32755(gp)
 800301c:	108000c4 	addi	r2,r2,3
 8003020:	d0a00345 	stb	r2,-32755(gp)
    gPB[TCP_OPTIONS_P] = 2;
 8003024:	008200b4 	movhi	r2,2050
 8003028:	10a54b04 	addi	r2,r2,-27348
 800302c:	00c00084 	movi	r3,2
 8003030:	10c00d85 	stb	r3,54(r2)
    gPB[TCP_OPTIONS_P+1] = 4;
 8003034:	008200b4 	movhi	r2,2050
 8003038:	10a54b04 	addi	r2,r2,-27348
 800303c:	00c00104 	movi	r3,4
 8003040:	10c00dc5 	stb	r3,55(r2)
    gPB[TCP_OPTIONS_P+2] = 0x05;
 8003044:	008200b4 	movhi	r2,2050
 8003048:	10a54b04 	addi	r2,r2,-27348
 800304c:	00c00144 	movi	r3,5
 8003050:	10c00e05 	stb	r3,56(r2)
    gPB[TCP_OPTIONS_P+3] = 0x0;
 8003054:	008200b4 	movhi	r2,2050
 8003058:	10a54b04 	addi	r2,r2,-27348
 800305c:	10000e45 	stb	zero,57(r2)
    gPB[TCP_HEADER_LEN_P] = 0x60;
 8003060:	008200b4 	movhi	r2,2050
 8003064:	10a54b04 	addi	r2,r2,-27348
 8003068:	00c01804 	movi	r3,96
 800306c:	10c00b85 	stb	r3,46(r2)
    gPB[TCP_WIN_SIZE] = 0x5; // 1400=0x578
 8003070:	008200b4 	movhi	r2,2050
 8003074:	10a54b04 	addi	r2,r2,-27348
 8003078:	00c00144 	movi	r3,5
 800307c:	10c00c05 	stb	r3,48(r2)
    gPB[TCP_WIN_SIZE+1] = 0x78;
 8003080:	008200b4 	movhi	r2,2050
 8003084:	10a54b04 	addi	r2,r2,-27348
 8003088:	00c01e04 	movi	r3,120
 800308c:	10c00c45 	stb	r3,49(r2)
    fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN+4,2);
 8003090:	01c00084 	movi	r7,2
 8003094:	01800804 	movi	r6,32
 8003098:	01400684 	movi	r5,26
 800309c:	01000c84 	movi	r4,50
 80030a0:	80025480 	call	8002548 <_ZL13fill_checksumhhth>
    EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN);
 80030a4:	01000e84 	movi	r4,58
 80030a8:	80022b80 	call	80022b8 <_ZN8ENC28J6010packetSendEt>
}
 80030ac:	0001883a 	nop
 80030b0:	e037883a 	mov	sp,fp
 80030b4:	dfc00117 	ldw	ra,4(sp)
 80030b8:	df000017 	ldw	fp,0(sp)
 80030bc:	dec00204 	addi	sp,sp,8
 80030c0:	f800283a 	ret

080030c4 <_ZN9EtherCard19getTcpPayloadLengthEv>:

uint16_t EtherCard::getTcpPayloadLength() {
 80030c4:	defffe04 	addi	sp,sp,-8
 80030c8:	df000115 	stw	fp,4(sp)
 80030cc:	df000104 	addi	fp,sp,4
    int16_t i = (((int16_t)gPB[IP_TOTLEN_H_P])<<8)|gPB[IP_TOTLEN_L_P];
 80030d0:	008200b4 	movhi	r2,2050
 80030d4:	10a54b04 	addi	r2,r2,-27348
 80030d8:	10800403 	ldbu	r2,16(r2)
 80030dc:	10803fcc 	andi	r2,r2,255
 80030e0:	1004923a 	slli	r2,r2,8
 80030e4:	1007883a 	mov	r3,r2
 80030e8:	008200b4 	movhi	r2,2050
 80030ec:	10a54b04 	addi	r2,r2,-27348
 80030f0:	10800443 	ldbu	r2,17(r2)
 80030f4:	10803fcc 	andi	r2,r2,255
 80030f8:	1884b03a 	or	r2,r3,r2
 80030fc:	e0bfff0d 	sth	r2,-4(fp)
    i -= IP_HEADER_LEN;
 8003100:	e0bfff0b 	ldhu	r2,-4(fp)
 8003104:	10bffb04 	addi	r2,r2,-20
 8003108:	e0bfff0d 	sth	r2,-4(fp)
    i -= (gPB[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
 800310c:	e0ffff0b 	ldhu	r3,-4(fp)
 8003110:	008200b4 	movhi	r2,2050
 8003114:	10a54b04 	addi	r2,r2,-27348
 8003118:	10800b83 	ldbu	r2,46(r2)
 800311c:	10803fcc 	andi	r2,r2,255
 8003120:	1005d13a 	srai	r2,r2,4
 8003124:	1085883a 	add	r2,r2,r2
 8003128:	1085883a 	add	r2,r2,r2
 800312c:	1885c83a 	sub	r2,r3,r2
 8003130:	e0bfff0d 	sth	r2,-4(fp)
    if (i<=0)
 8003134:	e0bfff0f 	ldh	r2,-4(fp)
 8003138:	00800116 	blt	zero,r2,8003140 <_ZN9EtherCard19getTcpPayloadLengthEv+0x7c>
        i = 0;
 800313c:	e03fff0d 	sth	zero,-4(fp)
    return (uint16_t)i;
 8003140:	e0bfff0b 	ldhu	r2,-4(fp)
}
 8003144:	e037883a 	mov	sp,fp
 8003148:	df000017 	ldw	fp,0(sp)
 800314c:	dec00104 	addi	sp,sp,4
 8003150:	f800283a 	ret

08003154 <_ZL21make_tcp_ack_from_anysh>:

static void make_tcp_ack_from_any(int16_t datlentoack,uint8_t addflags) {
 8003154:	defffb04 	addi	sp,sp,-20
 8003158:	dfc00415 	stw	ra,16(sp)
 800315c:	df000315 	stw	fp,12(sp)
 8003160:	df000304 	addi	fp,sp,12
 8003164:	2007883a 	mov	r3,r4
 8003168:	2805883a 	mov	r2,r5
 800316c:	e0fffe0d 	sth	r3,-8(fp)
 8003170:	e0bfff05 	stb	r2,-4(fp)
    gPB[TCP_FLAGS_P] = TCP_FLAGS_ACK_V|addflags;
 8003174:	e0bfff03 	ldbu	r2,-4(fp)
 8003178:	10800414 	ori	r2,r2,16
 800317c:	1007883a 	mov	r3,r2
 8003180:	008200b4 	movhi	r2,2050
 8003184:	10a54b04 	addi	r2,r2,-27348
 8003188:	10c00bc5 	stb	r3,47(r2)
    if (addflags!=TCP_FLAGS_RST_V && datlentoack==0)
 800318c:	e0bfff03 	ldbu	r2,-4(fp)
 8003190:	10800120 	cmpeqi	r2,r2,4
 8003194:	1000041e 	bne	r2,zero,80031a8 <_ZL21make_tcp_ack_from_anysh+0x54>
 8003198:	e0bffe0f 	ldh	r2,-8(fp)
 800319c:	1000021e 	bne	r2,zero,80031a8 <_ZL21make_tcp_ack_from_anysh+0x54>
        datlentoack = 1;
 80031a0:	00800044 	movi	r2,1
 80031a4:	e0bffe0d 	sth	r2,-8(fp)
    make_tcphead(datlentoack,1); // no options
 80031a8:	e0bffe0b 	ldhu	r2,-8(fp)
 80031ac:	10bfffcc 	andi	r2,r2,65535
 80031b0:	01400044 	movi	r5,1
 80031b4:	1009883a 	mov	r4,r2
 80031b8:	8002bd40 	call	8002bd4 <_ZL12make_tcpheadth>
    uint16_t j = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN;
 80031bc:	00800a04 	movi	r2,40
 80031c0:	e0bffd0d 	sth	r2,-12(fp)
    gPB[IP_TOTLEN_H_P] = j>>8;
 80031c4:	e0bffd0b 	ldhu	r2,-12(fp)
 80031c8:	1005d23a 	srai	r2,r2,8
 80031cc:	1007883a 	mov	r3,r2
 80031d0:	008200b4 	movhi	r2,2050
 80031d4:	10a54b04 	addi	r2,r2,-27348
 80031d8:	10c00405 	stb	r3,16(r2)
    gPB[IP_TOTLEN_L_P] = j;
 80031dc:	e0bffd0b 	ldhu	r2,-12(fp)
 80031e0:	1007883a 	mov	r3,r2
 80031e4:	008200b4 	movhi	r2,2050
 80031e8:	10a54b04 	addi	r2,r2,-27348
 80031ec:	10c00445 	stb	r3,17(r2)
    make_eth_ip();
 80031f0:	8002a680 	call	8002a68 <_ZL11make_eth_ipv>
    gPB[TCP_WIN_SIZE] = 0x4; // 1024=0x400, 1280=0x500 2048=0x800 768=0x300
 80031f4:	008200b4 	movhi	r2,2050
 80031f8:	10a54b04 	addi	r2,r2,-27348
 80031fc:	00c00104 	movi	r3,4
 8003200:	10c00c05 	stb	r3,48(r2)
    gPB[TCP_WIN_SIZE+1] = 0;
 8003204:	008200b4 	movhi	r2,2050
 8003208:	10a54b04 	addi	r2,r2,-27348
 800320c:	10000c45 	stb	zero,49(r2)
    fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN,2);
 8003210:	01c00084 	movi	r7,2
 8003214:	01800704 	movi	r6,28
 8003218:	01400684 	movi	r5,26
 800321c:	01000c84 	movi	r4,50
 8003220:	80025480 	call	8002548 <_ZL13fill_checksumhhth>
    EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN);
 8003224:	01000d84 	movi	r4,54
 8003228:	80022b80 	call	80022b8 <_ZN8ENC28J6010packetSendEt>
}
 800322c:	0001883a 	nop
 8003230:	e037883a 	mov	sp,fp
 8003234:	dfc00117 	ldw	ra,4(sp)
 8003238:	df000017 	ldw	fp,0(sp)
 800323c:	dec00204 	addi	sp,sp,8
 8003240:	f800283a 	ret

08003244 <_ZL30make_tcp_ack_with_data_noflagst>:

static void make_tcp_ack_with_data_noflags(uint16_t dlen) {
 8003244:	defffc04 	addi	sp,sp,-16
 8003248:	dfc00315 	stw	ra,12(sp)
 800324c:	df000215 	stw	fp,8(sp)
 8003250:	df000204 	addi	fp,sp,8
 8003254:	2005883a 	mov	r2,r4
 8003258:	e0bfff0d 	sth	r2,-4(fp)
    uint16_t j = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen;
 800325c:	e0bfff0b 	ldhu	r2,-4(fp)
 8003260:	10800a04 	addi	r2,r2,40
 8003264:	e0bffe0d 	sth	r2,-8(fp)
    gPB[IP_TOTLEN_H_P] = j>>8;
 8003268:	e0bffe0b 	ldhu	r2,-8(fp)
 800326c:	1005d23a 	srai	r2,r2,8
 8003270:	1007883a 	mov	r3,r2
 8003274:	008200b4 	movhi	r2,2050
 8003278:	10a54b04 	addi	r2,r2,-27348
 800327c:	10c00405 	stb	r3,16(r2)
    gPB[IP_TOTLEN_L_P] = j;
 8003280:	e0bffe0b 	ldhu	r2,-8(fp)
 8003284:	1007883a 	mov	r3,r2
 8003288:	008200b4 	movhi	r2,2050
 800328c:	10a54b04 	addi	r2,r2,-27348
 8003290:	10c00445 	stb	r3,17(r2)
    fill_ip_hdr_checksum();
 8003294:	80029e80 	call	80029e8 <_ZL20fill_ip_hdr_checksumv>
    gPB[TCP_CHECKSUM_H_P] = 0;
 8003298:	008200b4 	movhi	r2,2050
 800329c:	10a54b04 	addi	r2,r2,-27348
 80032a0:	10000c85 	stb	zero,50(r2)
    gPB[TCP_CHECKSUM_L_P] = 0;
 80032a4:	008200b4 	movhi	r2,2050
 80032a8:	10a54b04 	addi	r2,r2,-27348
 80032ac:	10000cc5 	stb	zero,51(r2)
    fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN+dlen,2);
 80032b0:	e0bfff0b 	ldhu	r2,-4(fp)
 80032b4:	10800704 	addi	r2,r2,28
 80032b8:	10bfffcc 	andi	r2,r2,65535
 80032bc:	01c00084 	movi	r7,2
 80032c0:	100d883a 	mov	r6,r2
 80032c4:	01400684 	movi	r5,26
 80032c8:	01000c84 	movi	r4,50
 80032cc:	80025480 	call	8002548 <_ZL13fill_checksumhhth>
    EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN);
 80032d0:	e0bfff0b 	ldhu	r2,-4(fp)
 80032d4:	10800d84 	addi	r2,r2,54
 80032d8:	10bfffcc 	andi	r2,r2,65535
 80032dc:	1009883a 	mov	r4,r2
 80032e0:	80022b80 	call	80022b8 <_ZN8ENC28J6010packetSendEt>
}
 80032e4:	0001883a 	nop
 80032e8:	e037883a 	mov	sp,fp
 80032ec:	dfc00117 	ldw	ra,4(sp)
 80032f0:	df000017 	ldw	fp,0(sp)
 80032f4:	dec00204 	addi	sp,sp,8
 80032f8:	f800283a 	ret

080032fc <_ZN9EtherCard15httpServerReplyEt>:

void EtherCard::httpServerReply (uint16_t dlen) {
 80032fc:	defffd04 	addi	sp,sp,-12
 8003300:	dfc00215 	stw	ra,8(sp)
 8003304:	df000115 	stw	fp,4(sp)
 8003308:	df000104 	addi	fp,sp,4
 800330c:	2005883a 	mov	r2,r4
 8003310:	e0bfff0d 	sth	r2,-4(fp)
    make_tcp_ack_from_any(info_data_len,0); // send ack for http get
 8003314:	d0a7108b 	ldhu	r2,-25534(gp)
 8003318:	10bfffcc 	andi	r2,r2,65535
 800331c:	10a0001c 	xori	r2,r2,32768
 8003320:	10a00004 	addi	r2,r2,-32768
 8003324:	000b883a 	mov	r5,zero
 8003328:	1009883a 	mov	r4,r2
 800332c:	80031540 	call	8003154 <_ZL21make_tcp_ack_from_anysh>
    gPB[TCP_FLAGS_P] = TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V;
 8003330:	008200b4 	movhi	r2,2050
 8003334:	10a54b04 	addi	r2,r2,-27348
 8003338:	00c00644 	movi	r3,25
 800333c:	10c00bc5 	stb	r3,47(r2)
    make_tcp_ack_with_data_noflags(dlen); // send data
 8003340:	e0bfff0b 	ldhu	r2,-4(fp)
 8003344:	1009883a 	mov	r4,r2
 8003348:	80032440 	call	8003244 <_ZL30make_tcp_ack_with_data_noflagst>
}
 800334c:	0001883a 	nop
 8003350:	e037883a 	mov	sp,fp
 8003354:	dfc00117 	ldw	ra,4(sp)
 8003358:	df000017 	ldw	fp,0(sp)
 800335c:	dec00204 	addi	sp,sp,8
 8003360:	f800283a 	ret

08003364 <_ZL16getBigEndianLongh>:

static uint32_t getBigEndianLong(byte offs) { //get the sequence number of packets after an ack from GET
 8003364:	defffe04 	addi	sp,sp,-8
 8003368:	df000115 	stw	fp,4(sp)
 800336c:	df000104 	addi	fp,sp,4
 8003370:	2005883a 	mov	r2,r4
 8003374:	e0bfff05 	stb	r2,-4(fp)
    return (((unsigned long)gPB[offs]*256+gPB[offs+1])*256+gPB[offs+2])*256+gPB[offs+3];
 8003378:	e0ffff03 	ldbu	r3,-4(fp)
 800337c:	008200b4 	movhi	r2,2050
 8003380:	10a54b04 	addi	r2,r2,-27348
 8003384:	10c5883a 	add	r2,r2,r3
 8003388:	10800003 	ldbu	r2,0(r2)
 800338c:	10803fcc 	andi	r2,r2,255
 8003390:	1006923a 	slli	r3,r2,8
 8003394:	e0bfff03 	ldbu	r2,-4(fp)
 8003398:	11000044 	addi	r4,r2,1
 800339c:	008200b4 	movhi	r2,2050
 80033a0:	10a54b04 	addi	r2,r2,-27348
 80033a4:	1105883a 	add	r2,r2,r4
 80033a8:	10800003 	ldbu	r2,0(r2)
 80033ac:	10803fcc 	andi	r2,r2,255
 80033b0:	1885883a 	add	r2,r3,r2
 80033b4:	1006923a 	slli	r3,r2,8
 80033b8:	e0bfff03 	ldbu	r2,-4(fp)
 80033bc:	11000084 	addi	r4,r2,2
 80033c0:	008200b4 	movhi	r2,2050
 80033c4:	10a54b04 	addi	r2,r2,-27348
 80033c8:	1105883a 	add	r2,r2,r4
 80033cc:	10800003 	ldbu	r2,0(r2)
 80033d0:	10803fcc 	andi	r2,r2,255
 80033d4:	1885883a 	add	r2,r3,r2
 80033d8:	1006923a 	slli	r3,r2,8
 80033dc:	e0bfff03 	ldbu	r2,-4(fp)
 80033e0:	110000c4 	addi	r4,r2,3
 80033e4:	008200b4 	movhi	r2,2050
 80033e8:	10a54b04 	addi	r2,r2,-27348
 80033ec:	1105883a 	add	r2,r2,r4
 80033f0:	10800003 	ldbu	r2,0(r2)
 80033f4:	10803fcc 	andi	r2,r2,255
 80033f8:	1885883a 	add	r2,r3,r2
} //thanks to mstuetz for the missing (unsigned long)
 80033fc:	e037883a 	mov	sp,fp
 8003400:	df000017 	ldw	fp,0(sp)
 8003404:	dec00104 	addi	sp,sp,4
 8003408:	f800283a 	ret

0800340c <_ZL17setSequenceNumberm>:

static void setSequenceNumber(uint32_t seq) {
 800340c:	defffe04 	addi	sp,sp,-8
 8003410:	df000115 	stw	fp,4(sp)
 8003414:	df000104 	addi	fp,sp,4
 8003418:	e13fff15 	stw	r4,-4(fp)
    gPB[TCP_SEQ_H_P]   = (seq & 0xff000000 ) >> 24;
 800341c:	e0bfff17 	ldw	r2,-4(fp)
 8003420:	1004d63a 	srli	r2,r2,24
 8003424:	1007883a 	mov	r3,r2
 8003428:	008200b4 	movhi	r2,2050
 800342c:	10a54b04 	addi	r2,r2,-27348
 8003430:	10c00985 	stb	r3,38(r2)
    gPB[TCP_SEQ_H_P+1] = (seq & 0xff0000 ) >> 16;
 8003434:	e0bfff17 	ldw	r2,-4(fp)
 8003438:	10803fec 	andhi	r2,r2,255
 800343c:	1004d43a 	srli	r2,r2,16
 8003440:	1007883a 	mov	r3,r2
 8003444:	008200b4 	movhi	r2,2050
 8003448:	10a54b04 	addi	r2,r2,-27348
 800344c:	10c009c5 	stb	r3,39(r2)
    gPB[TCP_SEQ_H_P+2] = (seq & 0xff00 ) >> 8;
 8003450:	e0bfff17 	ldw	r2,-4(fp)
 8003454:	10bfc00c 	andi	r2,r2,65280
 8003458:	1004d23a 	srli	r2,r2,8
 800345c:	1007883a 	mov	r3,r2
 8003460:	008200b4 	movhi	r2,2050
 8003464:	10a54b04 	addi	r2,r2,-27348
 8003468:	10c00a05 	stb	r3,40(r2)
    gPB[TCP_SEQ_H_P+3] = (seq & 0xff );
 800346c:	e0bfff17 	ldw	r2,-4(fp)
 8003470:	1007883a 	mov	r3,r2
 8003474:	008200b4 	movhi	r2,2050
 8003478:	10a54b04 	addi	r2,r2,-27348
 800347c:	10c00a45 	stb	r3,41(r2)
}
 8003480:	0001883a 	nop
 8003484:	e037883a 	mov	sp,fp
 8003488:	df000017 	ldw	fp,0(sp)
 800348c:	dec00104 	addi	sp,sp,4
 8003490:	f800283a 	ret

08003494 <_ZN9EtherCard17getSequenceNumberEv>:

uint32_t EtherCard::getSequenceNumber() {
 8003494:	defffe04 	addi	sp,sp,-8
 8003498:	dfc00115 	stw	ra,4(sp)
 800349c:	df000015 	stw	fp,0(sp)
 80034a0:	d839883a 	mov	fp,sp
    return getBigEndianLong(TCP_SEQ_H_P);
 80034a4:	01000984 	movi	r4,38
 80034a8:	80033640 	call	8003364 <_ZL16getBigEndianLongh>
}
 80034ac:	e037883a 	mov	sp,fp
 80034b0:	dfc00117 	ldw	ra,4(sp)
 80034b4:	df000017 	ldw	fp,0(sp)
 80034b8:	dec00204 	addi	sp,sp,8
 80034bc:	f800283a 	ret

080034c0 <_ZN9EtherCard18httpServerReplyAckEv>:

void EtherCard::httpServerReplyAck () {
 80034c0:	defffe04 	addi	sp,sp,-8
 80034c4:	dfc00115 	stw	ra,4(sp)
 80034c8:	df000015 	stw	fp,0(sp)
 80034cc:	d839883a 	mov	fp,sp
    make_tcp_ack_from_any(getTcpPayloadLength(),0); // send ack for http request
 80034d0:	80030c40 	call	80030c4 <_ZN9EtherCard19getTcpPayloadLengthEv>
 80034d4:	10bfffcc 	andi	r2,r2,65535
 80034d8:	10a0001c 	xori	r2,r2,32768
 80034dc:	10a00004 	addi	r2,r2,-32768
 80034e0:	000b883a 	mov	r5,zero
 80034e4:	1009883a 	mov	r4,r2
 80034e8:	80031540 	call	8003154 <_ZL21make_tcp_ack_from_anysh>
    SEQ = getSequenceNumber(); //get the sequence number of packets after an ack from GET
 80034ec:	80034940 	call	8003494 <_ZN9EtherCard17getSequenceNumberEv>
 80034f0:	d0a71215 	stw	r2,-25528(gp)
}
 80034f4:	0001883a 	nop
 80034f8:	e037883a 	mov	sp,fp
 80034fc:	dfc00117 	ldw	ra,4(sp)
 8003500:	df000017 	ldw	fp,0(sp)
 8003504:	dec00204 	addi	sp,sp,8
 8003508:	f800283a 	ret

0800350c <_ZN9EtherCard26httpServerReply_with_flagsEth>:

void EtherCard::httpServerReply_with_flags (uint16_t dlen , uint8_t flags) {
 800350c:	defffc04 	addi	sp,sp,-16
 8003510:	dfc00315 	stw	ra,12(sp)
 8003514:	df000215 	stw	fp,8(sp)
 8003518:	df000204 	addi	fp,sp,8
 800351c:	2007883a 	mov	r3,r4
 8003520:	2805883a 	mov	r2,r5
 8003524:	e0fffe0d 	sth	r3,-8(fp)
 8003528:	e0bfff05 	stb	r2,-4(fp)
    setSequenceNumber(SEQ);
 800352c:	d0a71217 	ldw	r2,-25528(gp)
 8003530:	1009883a 	mov	r4,r2
 8003534:	800340c0 	call	800340c <_ZL17setSequenceNumberm>
    gPB[TCP_FLAGS_P] = flags; // final packet
 8003538:	008200b4 	movhi	r2,2050
 800353c:	10a54b04 	addi	r2,r2,-27348
 8003540:	e0ffff03 	ldbu	r3,-4(fp)
 8003544:	10c00bc5 	stb	r3,47(r2)
    make_tcp_ack_with_data_noflags(dlen); // send data
 8003548:	e0bffe0b 	ldhu	r2,-8(fp)
 800354c:	1009883a 	mov	r4,r2
 8003550:	80032440 	call	8003244 <_ZL30make_tcp_ack_with_data_noflagst>
    SEQ=SEQ+dlen;
 8003554:	e0fffe0b 	ldhu	r3,-8(fp)
 8003558:	d0a71217 	ldw	r2,-25528(gp)
 800355c:	1885883a 	add	r2,r3,r2
 8003560:	d0a71215 	stw	r2,-25528(gp)
}
 8003564:	0001883a 	nop
 8003568:	e037883a 	mov	sp,fp
 800356c:	dfc00117 	ldw	ra,4(sp)
 8003570:	df000017 	ldw	fp,0(sp)
 8003574:	dec00204 	addi	sp,sp,8
 8003578:	f800283a 	ret

0800357c <_ZN9EtherCard17clientIcmpRequestEPKh>:

void EtherCard::clientIcmpRequest(const uint8_t *destip) {
 800357c:	defffd04 	addi	sp,sp,-12
 8003580:	dfc00215 	stw	ra,8(sp)
 8003584:	df000115 	stw	fp,4(sp)
 8003588:	df000104 	addi	fp,sp,4
 800358c:	e13fff15 	stw	r4,-4(fp)
    if(is_lan(EtherCard::myip, destip)) {
 8003590:	e17fff17 	ldw	r5,-4(fp)
 8003594:	d126ecc4 	addi	r4,gp,-25677
 8003598:	80027c00 	call	80027c0 <_ZL6is_lanPKhS0_>
 800359c:	10803fcc 	andi	r2,r2,255
 80035a0:	10000426 	beq	r2,zero,80035b4 <_ZN9EtherCard17clientIcmpRequestEPKh+0x38>
        setMACandIPs(destmacaddr, destip);
 80035a4:	e17fff17 	ldw	r5,-4(fp)
 80035a8:	d1270c04 	addi	r4,gp,-25552
 80035ac:	800271c0 	call	800271c <_ZL12setMACandIPsPKhS0_>
 80035b0:	00000306 	br	80035c0 <_ZN9EtherCard17clientIcmpRequestEPKh+0x44>
    } else {
        setMACandIPs(gwmacaddr, destip);
 80035b4:	e17fff17 	ldw	r5,-4(fp)
 80035b8:	d1270e84 	addi	r4,gp,-25542
 80035bc:	800271c0 	call	800271c <_ZL12setMACandIPsPKhS0_>
    }
    gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 80035c0:	008200b4 	movhi	r2,2050
 80035c4:	10a54b04 	addi	r2,r2,-27348
 80035c8:	00c00204 	movi	r3,8
 80035cc:	10c00305 	stb	r3,12(r2)
    gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 80035d0:	008200b4 	movhi	r2,2050
 80035d4:	10a54b04 	addi	r2,r2,-27348
 80035d8:	10000345 	stb	zero,13(r2)
    memcpy_P(gPB + IP_P,iphdr,sizeof iphdr);
 80035dc:	008200b4 	movhi	r2,2050
 80035e0:	10a54e84 	addi	r2,r2,-27334
 80035e4:	01800244 	movi	r6,9
 80035e8:	01420074 	movhi	r5,2049
 80035ec:	29566b04 	addi	r5,r5,22956
 80035f0:	1009883a 	mov	r4,r2
 80035f4:	80025080 	call	8002508 <_Z8memcpy_PPvPKvj>
    gPB[IP_TOTLEN_L_P] = 0x54;
 80035f8:	008200b4 	movhi	r2,2050
 80035fc:	10a54b04 	addi	r2,r2,-27348
 8003600:	00c01504 	movi	r3,84
 8003604:	10c00445 	stb	r3,17(r2)
    gPB[IP_PROTO_P] = IP_PROTO_ICMP_V;
 8003608:	008200b4 	movhi	r2,2050
 800360c:	10a54b04 	addi	r2,r2,-27348
 8003610:	00c00044 	movi	r3,1
 8003614:	10c005c5 	stb	r3,23(r2)
    fill_ip_hdr_checksum();
 8003618:	80029e80 	call	80029e8 <_ZL20fill_ip_hdr_checksumv>
    gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREQUEST_V;
 800361c:	008200b4 	movhi	r2,2050
 8003620:	10a54b04 	addi	r2,r2,-27348
 8003624:	00c00204 	movi	r3,8
 8003628:	10c00885 	stb	r3,34(r2)
    gPB[ICMP_TYPE_P+1] = 0; // code
 800362c:	008200b4 	movhi	r2,2050
 8003630:	10a54b04 	addi	r2,r2,-27348
 8003634:	100008c5 	stb	zero,35(r2)
    gPB[ICMP_CHECKSUM_H_P] = 0;
 8003638:	008200b4 	movhi	r2,2050
 800363c:	10a54b04 	addi	r2,r2,-27348
 8003640:	10000905 	stb	zero,36(r2)
    gPB[ICMP_CHECKSUM_L_P] = 0;
 8003644:	008200b4 	movhi	r2,2050
 8003648:	10a54b04 	addi	r2,r2,-27348
 800364c:	10000945 	stb	zero,37(r2)
    gPB[ICMP_IDENT_H_P] = 5; // some number
 8003650:	008200b4 	movhi	r2,2050
 8003654:	10a54b04 	addi	r2,r2,-27348
 8003658:	00c00144 	movi	r3,5
 800365c:	10c00985 	stb	r3,38(r2)
    gPB[ICMP_IDENT_L_P] = EtherCard::myip[3]; // last byte of my IP
 8003660:	d0e6ed83 	ldbu	r3,-25674(gp)
 8003664:	008200b4 	movhi	r2,2050
 8003668:	10a54b04 	addi	r2,r2,-27348
 800366c:	10c009c5 	stb	r3,39(r2)
    gPB[ICMP_IDENT_L_P+1] = 0; // seq number, high byte
 8003670:	008200b4 	movhi	r2,2050
 8003674:	10a54b04 	addi	r2,r2,-27348
 8003678:	10000a05 	stb	zero,40(r2)
    gPB[ICMP_IDENT_L_P+2] = 1; // seq number, low byte, we send only 1 ping at a time
 800367c:	008200b4 	movhi	r2,2050
 8003680:	10a54b04 	addi	r2,r2,-27348
 8003684:	00c00044 	movi	r3,1
 8003688:	10c00a45 	stb	r3,41(r2)
    memset(gPB + ICMP_DATA_P, PINGPATTERN, 56);
 800368c:	008200b4 	movhi	r2,2050
 8003690:	10a55584 	addi	r2,r2,-27306
 8003694:	01800e04 	movi	r6,56
 8003698:	01401084 	movi	r5,66
 800369c:	1009883a 	mov	r4,r2
 80036a0:	80063b40 	call	80063b4 <memset>
    fill_checksum(ICMP_CHECKSUM_H_P, ICMP_TYPE_P, 56+8,0);
 80036a4:	000f883a 	mov	r7,zero
 80036a8:	01801004 	movi	r6,64
 80036ac:	01400884 	movi	r5,34
 80036b0:	01000904 	movi	r4,36
 80036b4:	80025480 	call	8002548 <_ZL13fill_checksumhhth>
    packetSend(98);
 80036b8:	01001884 	movi	r4,98
 80036bc:	80022b80 	call	80022b8 <_ZN8ENC28J6010packetSendEt>
}
 80036c0:	0001883a 	nop
 80036c4:	e037883a 	mov	sp,fp
 80036c8:	dfc00117 	ldw	ra,4(sp)
 80036cc:	df000017 	ldw	fp,0(sp)
 80036d0:	dec00204 	addi	sp,sp,8
 80036d4:	f800283a 	ret

080036d8 <_ZN9EtherCard10ntpRequestEPhh>:

void EtherCard::ntpRequest (uint8_t *ntpip,uint8_t srcport) {
 80036d8:	defffc04 	addi	sp,sp,-16
 80036dc:	dfc00315 	stw	ra,12(sp)
 80036e0:	df000215 	stw	fp,8(sp)
 80036e4:	df000204 	addi	fp,sp,8
 80036e8:	e13ffe15 	stw	r4,-8(fp)
 80036ec:	2805883a 	mov	r2,r5
 80036f0:	e0bfff05 	stb	r2,-4(fp)
    if(is_lan(myip, ntpip)) {
 80036f4:	e17ffe17 	ldw	r5,-8(fp)
 80036f8:	d126ecc4 	addi	r4,gp,-25677
 80036fc:	80027c00 	call	80027c0 <_ZL6is_lanPKhS0_>
 8003700:	10803fcc 	andi	r2,r2,255
 8003704:	10000426 	beq	r2,zero,8003718 <_ZN9EtherCard10ntpRequestEPhh+0x40>
        setMACandIPs(destmacaddr, ntpip);
 8003708:	e17ffe17 	ldw	r5,-8(fp)
 800370c:	d1270c04 	addi	r4,gp,-25552
 8003710:	800271c0 	call	800271c <_ZL12setMACandIPsPKhS0_>
 8003714:	00000306 	br	8003724 <_ZN9EtherCard10ntpRequestEPhh+0x4c>
    } else {
        setMACandIPs(gwmacaddr, ntpip);
 8003718:	e17ffe17 	ldw	r5,-8(fp)
 800371c:	d1270e84 	addi	r4,gp,-25542
 8003720:	800271c0 	call	800271c <_ZL12setMACandIPsPKhS0_>
    }
    gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 8003724:	008200b4 	movhi	r2,2050
 8003728:	10a54b04 	addi	r2,r2,-27348
 800372c:	00c00204 	movi	r3,8
 8003730:	10c00305 	stb	r3,12(r2)
    gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 8003734:	008200b4 	movhi	r2,2050
 8003738:	10a54b04 	addi	r2,r2,-27348
 800373c:	10000345 	stb	zero,13(r2)
    memcpy_P(gPB + IP_P,iphdr,sizeof iphdr);
 8003740:	008200b4 	movhi	r2,2050
 8003744:	10a54e84 	addi	r2,r2,-27334
 8003748:	01800244 	movi	r6,9
 800374c:	01420074 	movhi	r5,2049
 8003750:	29566b04 	addi	r5,r5,22956
 8003754:	1009883a 	mov	r4,r2
 8003758:	80025080 	call	8002508 <_Z8memcpy_PPvPKvj>
    gPB[IP_TOTLEN_L_P] = 0x4c;
 800375c:	008200b4 	movhi	r2,2050
 8003760:	10a54b04 	addi	r2,r2,-27348
 8003764:	00c01304 	movi	r3,76
 8003768:	10c00445 	stb	r3,17(r2)
    gPB[IP_PROTO_P] = IP_PROTO_UDP_V;
 800376c:	008200b4 	movhi	r2,2050
 8003770:	10a54b04 	addi	r2,r2,-27348
 8003774:	00c00444 	movi	r3,17
 8003778:	10c005c5 	stb	r3,23(r2)
    fill_ip_hdr_checksum();
 800377c:	80029e80 	call	80029e8 <_ZL20fill_ip_hdr_checksumv>
    gPB[UDP_DST_PORT_H_P] = 0;
 8003780:	008200b4 	movhi	r2,2050
 8003784:	10a54b04 	addi	r2,r2,-27348
 8003788:	10000905 	stb	zero,36(r2)
    gPB[UDP_DST_PORT_L_P] = NTP_PORT; // ntp = 123
 800378c:	008200b4 	movhi	r2,2050
 8003790:	10a54b04 	addi	r2,r2,-27348
 8003794:	00c01ec4 	movi	r3,123
 8003798:	10c00945 	stb	r3,37(r2)
    gPB[UDP_SRC_PORT_H_P] = 10;
 800379c:	008200b4 	movhi	r2,2050
 80037a0:	10a54b04 	addi	r2,r2,-27348
 80037a4:	00c00284 	movi	r3,10
 80037a8:	10c00885 	stb	r3,34(r2)
    gPB[UDP_SRC_PORT_L_P] = srcport; // lower 8 bit of src port
 80037ac:	008200b4 	movhi	r2,2050
 80037b0:	10a54b04 	addi	r2,r2,-27348
 80037b4:	e0ffff03 	ldbu	r3,-4(fp)
 80037b8:	10c008c5 	stb	r3,35(r2)
    gPB[UDP_LEN_H_P] = 0;
 80037bc:	008200b4 	movhi	r2,2050
 80037c0:	10a54b04 	addi	r2,r2,-27348
 80037c4:	10000985 	stb	zero,38(r2)
    gPB[UDP_LEN_L_P] = 56; // fixed len
 80037c8:	008200b4 	movhi	r2,2050
 80037cc:	10a54b04 	addi	r2,r2,-27348
 80037d0:	00c00e04 	movi	r3,56
 80037d4:	10c009c5 	stb	r3,39(r2)
    gPB[UDP_CHECKSUM_H_P] = 0;
 80037d8:	008200b4 	movhi	r2,2050
 80037dc:	10a54b04 	addi	r2,r2,-27348
 80037e0:	10000a05 	stb	zero,40(r2)
    gPB[UDP_CHECKSUM_L_P] = 0;
 80037e4:	008200b4 	movhi	r2,2050
 80037e8:	10a54b04 	addi	r2,r2,-27348
 80037ec:	10000a45 	stb	zero,41(r2)
    memset(gPB + UDP_DATA_P, 0, 48);
 80037f0:	008200b4 	movhi	r2,2050
 80037f4:	10a55584 	addi	r2,r2,-27306
 80037f8:	01800c04 	movi	r6,48
 80037fc:	000b883a 	mov	r5,zero
 8003800:	1009883a 	mov	r4,r2
 8003804:	80063b40 	call	80063b4 <memset>
    memcpy_P(gPB + UDP_DATA_P,ntpreqhdr,10);
 8003808:	008200b4 	movhi	r2,2050
 800380c:	10a55584 	addi	r2,r2,-27306
 8003810:	01800284 	movi	r6,10
 8003814:	01420074 	movhi	r5,2049
 8003818:	29566d44 	addi	r5,r5,22965
 800381c:	1009883a 	mov	r4,r2
 8003820:	80025080 	call	8002508 <_Z8memcpy_PPvPKvj>

    fill_checksum(UDP_CHECKSUM_H_P, IP_SRC_P, 16 + 48,1);
 8003824:	01c00044 	movi	r7,1
 8003828:	01801004 	movi	r6,64
 800382c:	01400684 	movi	r5,26
 8003830:	01000a04 	movi	r4,40
 8003834:	80025480 	call	8002548 <_ZL13fill_checksumhhth>
    packetSend(90);
 8003838:	01001684 	movi	r4,90
 800383c:	80022b80 	call	80022b8 <_ZN8ENC28J6010packetSendEt>
}
 8003840:	0001883a 	nop
 8003844:	e037883a 	mov	sp,fp
 8003848:	dfc00117 	ldw	ra,4(sp)
 800384c:	df000017 	ldw	fp,0(sp)
 8003850:	dec00204 	addi	sp,sp,8
 8003854:	f800283a 	ret

08003858 <_ZN9EtherCard16ntpProcessAnswerEPmh>:

uint8_t EtherCard::ntpProcessAnswer (uint32_t *time,uint8_t dstport_l) {
 8003858:	defffd04 	addi	sp,sp,-12
 800385c:	df000215 	stw	fp,8(sp)
 8003860:	df000204 	addi	fp,sp,8
 8003864:	e13ffe15 	stw	r4,-8(fp)
 8003868:	2805883a 	mov	r2,r5
 800386c:	e0bfff05 	stb	r2,-4(fp)
    if ((dstport_l && gPB[UDP_DST_PORT_L_P]!=dstport_l) || gPB[UDP_LEN_H_P]!=0 ||
 8003870:	e0bfff03 	ldbu	r2,-4(fp)
 8003874:	10000626 	beq	r2,zero,8003890 <_ZN9EtherCard16ntpProcessAnswerEPmh+0x38>
 8003878:	008200b4 	movhi	r2,2050
 800387c:	10a54b04 	addi	r2,r2,-27348
 8003880:	10800943 	ldbu	r2,37(r2)
 8003884:	10c03fcc 	andi	r3,r2,255
 8003888:	e0bfff03 	ldbu	r2,-4(fp)
 800388c:	1880111e 	bne	r3,r2,80038d4 <_ZN9EtherCard16ntpProcessAnswerEPmh+0x7c>
 8003890:	008200b4 	movhi	r2,2050
 8003894:	10a54b04 	addi	r2,r2,-27348
 8003898:	10800983 	ldbu	r2,38(r2)
 800389c:	10803fcc 	andi	r2,r2,255
 80038a0:	10000c1e 	bne	r2,zero,80038d4 <_ZN9EtherCard16ntpProcessAnswerEPmh+0x7c>
            gPB[UDP_LEN_L_P]!=56 || gPB[UDP_SRC_PORT_L_P]!=0x7b)
 80038a4:	008200b4 	movhi	r2,2050
 80038a8:	10a54b04 	addi	r2,r2,-27348
 80038ac:	108009c3 	ldbu	r2,39(r2)
    fill_checksum(UDP_CHECKSUM_H_P, IP_SRC_P, 16 + 48,1);
    packetSend(90);
}

uint8_t EtherCard::ntpProcessAnswer (uint32_t *time,uint8_t dstport_l) {
    if ((dstport_l && gPB[UDP_DST_PORT_L_P]!=dstport_l) || gPB[UDP_LEN_H_P]!=0 ||
 80038b0:	10803fcc 	andi	r2,r2,255
 80038b4:	10800e18 	cmpnei	r2,r2,56
 80038b8:	1000061e 	bne	r2,zero,80038d4 <_ZN9EtherCard16ntpProcessAnswerEPmh+0x7c>
            gPB[UDP_LEN_L_P]!=56 || gPB[UDP_SRC_PORT_L_P]!=0x7b)
 80038bc:	008200b4 	movhi	r2,2050
 80038c0:	10a54b04 	addi	r2,r2,-27348
 80038c4:	108008c3 	ldbu	r2,35(r2)
 80038c8:	10803fcc 	andi	r2,r2,255
 80038cc:	10801ee0 	cmpeqi	r2,r2,123
 80038d0:	1000021e 	bne	r2,zero,80038dc <_ZN9EtherCard16ntpProcessAnswerEPmh+0x84>
        return 0;
 80038d4:	0005883a 	mov	r2,zero
 80038d8:	00001806 	br	800393c <_ZN9EtherCard16ntpProcessAnswerEPmh+0xe4>
    ((uint8_t*) time)[3] = gPB[0x52];
 80038dc:	e0bffe17 	ldw	r2,-8(fp)
 80038e0:	10c000c4 	addi	r3,r2,3
 80038e4:	008200b4 	movhi	r2,2050
 80038e8:	10a54b04 	addi	r2,r2,-27348
 80038ec:	10801483 	ldbu	r2,82(r2)
 80038f0:	18800005 	stb	r2,0(r3)
    ((uint8_t*) time)[2] = gPB[0x53];
 80038f4:	e0bffe17 	ldw	r2,-8(fp)
 80038f8:	10c00084 	addi	r3,r2,2
 80038fc:	008200b4 	movhi	r2,2050
 8003900:	10a54b04 	addi	r2,r2,-27348
 8003904:	108014c3 	ldbu	r2,83(r2)
 8003908:	18800005 	stb	r2,0(r3)
    ((uint8_t*) time)[1] = gPB[0x54];
 800390c:	e0bffe17 	ldw	r2,-8(fp)
 8003910:	10c00044 	addi	r3,r2,1
 8003914:	008200b4 	movhi	r2,2050
 8003918:	10a54b04 	addi	r2,r2,-27348
 800391c:	10801503 	ldbu	r2,84(r2)
 8003920:	18800005 	stb	r2,0(r3)
    ((uint8_t*) time)[0] = gPB[0x55];
 8003924:	008200b4 	movhi	r2,2050
 8003928:	10a54b04 	addi	r2,r2,-27348
 800392c:	10c01543 	ldbu	r3,85(r2)
 8003930:	e0bffe17 	ldw	r2,-8(fp)
 8003934:	10c00005 	stb	r3,0(r2)
    return 1;
 8003938:	00800044 	movi	r2,1
}
 800393c:	e037883a 	mov	sp,fp
 8003940:	df000017 	ldw	fp,0(sp)
 8003944:	dec00104 	addi	sp,sp,4
 8003948:	f800283a 	ret

0800394c <_ZN9EtherCard10udpPrepareEtPKht>:

void EtherCard::udpPrepare (uint16_t sport, const uint8_t *dip, uint16_t dport) {
 800394c:	defffb04 	addi	sp,sp,-20
 8003950:	dfc00415 	stw	ra,16(sp)
 8003954:	df000315 	stw	fp,12(sp)
 8003958:	df000304 	addi	fp,sp,12
 800395c:	2007883a 	mov	r3,r4
 8003960:	e17ffe15 	stw	r5,-8(fp)
 8003964:	3005883a 	mov	r2,r6
 8003968:	e0fffd0d 	sth	r3,-12(fp)
 800396c:	e0bfff0d 	sth	r2,-4(fp)
    if(is_lan(myip, dip)) {                    // this works because both dns mac and destinations mac are stored in same variable - destmacaddr
 8003970:	e17ffe17 	ldw	r5,-8(fp)
 8003974:	d126ecc4 	addi	r4,gp,-25677
 8003978:	80027c00 	call	80027c0 <_ZL6is_lanPKhS0_>
 800397c:	10803fcc 	andi	r2,r2,255
 8003980:	10000426 	beq	r2,zero,8003994 <_ZN9EtherCard10udpPrepareEtPKht+0x48>
        setMACandIPs(destmacaddr, dip);        // at different times. The program could have separate variable for dns mac, then here should be
 8003984:	e17ffe17 	ldw	r5,-8(fp)
 8003988:	d1270c04 	addi	r4,gp,-25552
 800398c:	800271c0 	call	800271c <_ZL12setMACandIPsPKhS0_>
 8003990:	00000306 	br	80039a0 <_ZN9EtherCard10udpPrepareEtPKht+0x54>
    } else {                                   // checked if dip is dns ip and separately if dip is hisip and then use correct mac.
        setMACandIPs(gwmacaddr, dip);
 8003994:	e17ffe17 	ldw	r5,-8(fp)
 8003998:	d1270e84 	addi	r4,gp,-25542
 800399c:	800271c0 	call	800271c <_ZL12setMACandIPsPKhS0_>
    }
    // see http://tldp.org/HOWTO/Multicast-HOWTO-2.html
    // multicast or broadcast address, https://github.com/njh/EtherCard/issues/59
    if ((dip[0] & 0xF0) == 0xE0 || *((unsigned long*) dip) == 0xFFFFFFFF || !memcmp(broadcastip,dip,IP_LEN))
 80039a0:	e0bffe17 	ldw	r2,-8(fp)
 80039a4:	10800003 	ldbu	r2,0(r2)
 80039a8:	10803fcc 	andi	r2,r2,255
 80039ac:	10803c0c 	andi	r2,r2,240
 80039b0:	10803820 	cmpeqi	r2,r2,224
 80039b4:	1000091e 	bne	r2,zero,80039dc <_ZN9EtherCard10udpPrepareEtPKht+0x90>
 80039b8:	e0bffe17 	ldw	r2,-8(fp)
 80039bc:	10800017 	ldw	r2,0(r2)
 80039c0:	10bfffe0 	cmpeqi	r2,r2,-1
 80039c4:	1000051e 	bne	r2,zero,80039dc <_ZN9EtherCard10udpPrepareEtPKht+0x90>
 80039c8:	01800104 	movi	r6,4
 80039cc:	e17ffe17 	ldw	r5,-8(fp)
 80039d0:	d126eec4 	addi	r4,gp,-25669
 80039d4:	80061f00 	call	80061f0 <memcmp>
 80039d8:	1000041e 	bne	r2,zero,80039ec <_ZN9EtherCard10udpPrepareEtPKht+0xa0>
        EtherCard::copyMac(gPB + ETH_DST_MAC, allOnes);
 80039dc:	d16003c4 	addi	r5,gp,-32753
 80039e0:	010200b4 	movhi	r4,2050
 80039e4:	21254b04 	addi	r4,r4,-27348
 80039e8:	80054ec0 	call	80054ec <_ZN9EtherCard7copyMacEPhPKh>
    gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 80039ec:	008200b4 	movhi	r2,2050
 80039f0:	10a54b04 	addi	r2,r2,-27348
 80039f4:	00c00204 	movi	r3,8
 80039f8:	10c00305 	stb	r3,12(r2)
    gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 80039fc:	008200b4 	movhi	r2,2050
 8003a00:	10a54b04 	addi	r2,r2,-27348
 8003a04:	10000345 	stb	zero,13(r2)
    memcpy_P(gPB + IP_P,iphdr,sizeof iphdr);
 8003a08:	008200b4 	movhi	r2,2050
 8003a0c:	10a54e84 	addi	r2,r2,-27334
 8003a10:	01800244 	movi	r6,9
 8003a14:	01420074 	movhi	r5,2049
 8003a18:	29566b04 	addi	r5,r5,22956
 8003a1c:	1009883a 	mov	r4,r2
 8003a20:	80025080 	call	8002508 <_Z8memcpy_PPvPKvj>
    gPB[IP_TOTLEN_H_P] = 0;
 8003a24:	008200b4 	movhi	r2,2050
 8003a28:	10a54b04 	addi	r2,r2,-27348
 8003a2c:	10000405 	stb	zero,16(r2)
    gPB[IP_PROTO_P] = IP_PROTO_UDP_V;
 8003a30:	008200b4 	movhi	r2,2050
 8003a34:	10a54b04 	addi	r2,r2,-27348
 8003a38:	00c00444 	movi	r3,17
 8003a3c:	10c005c5 	stb	r3,23(r2)
    gPB[UDP_DST_PORT_H_P] = (dport>>8);
 8003a40:	e0bfff0b 	ldhu	r2,-4(fp)
 8003a44:	1005d23a 	srai	r2,r2,8
 8003a48:	1007883a 	mov	r3,r2
 8003a4c:	008200b4 	movhi	r2,2050
 8003a50:	10a54b04 	addi	r2,r2,-27348
 8003a54:	10c00905 	stb	r3,36(r2)
    gPB[UDP_DST_PORT_L_P] = dport;
 8003a58:	e0bfff0b 	ldhu	r2,-4(fp)
 8003a5c:	1007883a 	mov	r3,r2
 8003a60:	008200b4 	movhi	r2,2050
 8003a64:	10a54b04 	addi	r2,r2,-27348
 8003a68:	10c00945 	stb	r3,37(r2)
    gPB[UDP_SRC_PORT_H_P] = (sport>>8);
 8003a6c:	e0bffd0b 	ldhu	r2,-12(fp)
 8003a70:	1005d23a 	srai	r2,r2,8
 8003a74:	1007883a 	mov	r3,r2
 8003a78:	008200b4 	movhi	r2,2050
 8003a7c:	10a54b04 	addi	r2,r2,-27348
 8003a80:	10c00885 	stb	r3,34(r2)
    gPB[UDP_SRC_PORT_L_P] = sport;
 8003a84:	e0bffd0b 	ldhu	r2,-12(fp)
 8003a88:	1007883a 	mov	r3,r2
 8003a8c:	008200b4 	movhi	r2,2050
 8003a90:	10a54b04 	addi	r2,r2,-27348
 8003a94:	10c008c5 	stb	r3,35(r2)
    gPB[UDP_LEN_H_P] = 0;
 8003a98:	008200b4 	movhi	r2,2050
 8003a9c:	10a54b04 	addi	r2,r2,-27348
 8003aa0:	10000985 	stb	zero,38(r2)
    gPB[UDP_CHECKSUM_H_P] = 0;
 8003aa4:	008200b4 	movhi	r2,2050
 8003aa8:	10a54b04 	addi	r2,r2,-27348
 8003aac:	10000a05 	stb	zero,40(r2)
    gPB[UDP_CHECKSUM_L_P] = 0;
 8003ab0:	008200b4 	movhi	r2,2050
 8003ab4:	10a54b04 	addi	r2,r2,-27348
 8003ab8:	10000a45 	stb	zero,41(r2)
}
 8003abc:	0001883a 	nop
 8003ac0:	e037883a 	mov	sp,fp
 8003ac4:	dfc00117 	ldw	ra,4(sp)
 8003ac8:	df000017 	ldw	fp,0(sp)
 8003acc:	dec00204 	addi	sp,sp,8
 8003ad0:	f800283a 	ret

08003ad4 <_ZN9EtherCard11udpTransmitEt>:

void EtherCard::udpTransmit (uint16_t datalen) {
 8003ad4:	defffd04 	addi	sp,sp,-12
 8003ad8:	dfc00215 	stw	ra,8(sp)
 8003adc:	df000115 	stw	fp,4(sp)
 8003ae0:	df000104 	addi	fp,sp,4
 8003ae4:	2005883a 	mov	r2,r4
 8003ae8:	e0bfff0d 	sth	r2,-4(fp)
    gPB[IP_TOTLEN_H_P] = (IP_HEADER_LEN+UDP_HEADER_LEN+datalen) >> 8;
 8003aec:	e0bfff0b 	ldhu	r2,-4(fp)
 8003af0:	10800704 	addi	r2,r2,28
 8003af4:	1005d23a 	srai	r2,r2,8
 8003af8:	1007883a 	mov	r3,r2
 8003afc:	008200b4 	movhi	r2,2050
 8003b00:	10a54b04 	addi	r2,r2,-27348
 8003b04:	10c00405 	stb	r3,16(r2)
    gPB[IP_TOTLEN_L_P] = IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
 8003b08:	e0bfff0b 	ldhu	r2,-4(fp)
 8003b0c:	10800704 	addi	r2,r2,28
 8003b10:	1007883a 	mov	r3,r2
 8003b14:	008200b4 	movhi	r2,2050
 8003b18:	10a54b04 	addi	r2,r2,-27348
 8003b1c:	10c00445 	stb	r3,17(r2)
    fill_ip_hdr_checksum();
 8003b20:	80029e80 	call	80029e8 <_ZL20fill_ip_hdr_checksumv>
    gPB[UDP_LEN_H_P] = (UDP_HEADER_LEN+datalen) >>8;
 8003b24:	e0bfff0b 	ldhu	r2,-4(fp)
 8003b28:	10800204 	addi	r2,r2,8
 8003b2c:	1005d23a 	srai	r2,r2,8
 8003b30:	1007883a 	mov	r3,r2
 8003b34:	008200b4 	movhi	r2,2050
 8003b38:	10a54b04 	addi	r2,r2,-27348
 8003b3c:	10c00985 	stb	r3,38(r2)
    gPB[UDP_LEN_L_P] = UDP_HEADER_LEN+datalen;
 8003b40:	e0bfff0b 	ldhu	r2,-4(fp)
 8003b44:	10800204 	addi	r2,r2,8
 8003b48:	1007883a 	mov	r3,r2
 8003b4c:	008200b4 	movhi	r2,2050
 8003b50:	10a54b04 	addi	r2,r2,-27348
 8003b54:	10c009c5 	stb	r3,39(r2)
    fill_checksum(UDP_CHECKSUM_H_P, IP_SRC_P, 16 + datalen,1);
 8003b58:	e0bfff0b 	ldhu	r2,-4(fp)
 8003b5c:	10800404 	addi	r2,r2,16
 8003b60:	10bfffcc 	andi	r2,r2,65535
 8003b64:	01c00044 	movi	r7,1
 8003b68:	100d883a 	mov	r6,r2
 8003b6c:	01400684 	movi	r5,26
 8003b70:	01000a04 	movi	r4,40
 8003b74:	80025480 	call	8002548 <_ZL13fill_checksumhhth>
    packetSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen);
 8003b78:	e0bfff0b 	ldhu	r2,-4(fp)
 8003b7c:	10800a84 	addi	r2,r2,42
 8003b80:	10bfffcc 	andi	r2,r2,65535
 8003b84:	1009883a 	mov	r4,r2
 8003b88:	80022b80 	call	80022b8 <_ZN8ENC28J6010packetSendEt>
}
 8003b8c:	0001883a 	nop
 8003b90:	e037883a 	mov	sp,fp
 8003b94:	dfc00117 	ldw	ra,4(sp)
 8003b98:	df000017 	ldw	fp,0(sp)
 8003b9c:	dec00204 	addi	sp,sp,8
 8003ba0:	f800283a 	ret

08003ba4 <_ZN9EtherCard7sendUdpEPKchtPKht>:

void EtherCard::sendUdp (const char *data, uint8_t datalen, uint16_t sport,
                         const uint8_t *dip, uint16_t dport) {
 8003ba4:	defff904 	addi	sp,sp,-28
 8003ba8:	dfc00615 	stw	ra,24(sp)
 8003bac:	df000515 	stw	fp,20(sp)
 8003bb0:	df000504 	addi	fp,sp,20
 8003bb4:	e13ffb15 	stw	r4,-20(fp)
 8003bb8:	2809883a 	mov	r4,r5
 8003bbc:	3007883a 	mov	r3,r6
 8003bc0:	e1fffe15 	stw	r7,-8(fp)
 8003bc4:	e0800217 	ldw	r2,8(fp)
 8003bc8:	e13ffc05 	stb	r4,-16(fp)
 8003bcc:	e0fffd0d 	sth	r3,-12(fp)
 8003bd0:	e0bfff0d 	sth	r2,-4(fp)
    udpPrepare(sport, dip, dport);
 8003bd4:	e0bffd0b 	ldhu	r2,-12(fp)
 8003bd8:	e0ffff0b 	ldhu	r3,-4(fp)
 8003bdc:	180d883a 	mov	r6,r3
 8003be0:	e17ffe17 	ldw	r5,-8(fp)
 8003be4:	1009883a 	mov	r4,r2
 8003be8:	800394c0 	call	800394c <_ZN9EtherCard10udpPrepareEtPKht>
    if (datalen>220)
 8003bec:	e0bffc03 	ldbu	r2,-16(fp)
 8003bf0:	10803770 	cmpltui	r2,r2,221
 8003bf4:	1000021e 	bne	r2,zero,8003c00 <_ZN9EtherCard7sendUdpEPKchtPKht+0x5c>
        datalen = 220;
 8003bf8:	00bff704 	movi	r2,-36
 8003bfc:	e0bffc05 	stb	r2,-16(fp)
    memcpy(gPB + UDP_DATA_P, data, datalen);
 8003c00:	008200b4 	movhi	r2,2050
 8003c04:	10a55584 	addi	r2,r2,-27306
 8003c08:	e0fffc03 	ldbu	r3,-16(fp)
 8003c0c:	180d883a 	mov	r6,r3
 8003c10:	e17ffb17 	ldw	r5,-20(fp)
 8003c14:	1009883a 	mov	r4,r2
 8003c18:	800626c0 	call	800626c <memcpy>
    udpTransmit(datalen);
 8003c1c:	e0bffc03 	ldbu	r2,-16(fp)
 8003c20:	1009883a 	mov	r4,r2
 8003c24:	8003ad40 	call	8003ad4 <_ZN9EtherCard11udpTransmitEt>
}
 8003c28:	0001883a 	nop
 8003c2c:	e037883a 	mov	sp,fp
 8003c30:	dfc00117 	ldw	ra,4(sp)
 8003c34:	df000017 	ldw	fp,0(sp)
 8003c38:	dec00204 	addi	sp,sp,8
 8003c3c:	f800283a 	ret

08003c40 <_ZN9EtherCard7sendWolEPh>:

void EtherCard::sendWol (uint8_t *wolmac) {
 8003c40:	defffc04 	addi	sp,sp,-16
 8003c44:	dfc00315 	stw	ra,12(sp)
 8003c48:	df000215 	stw	fp,8(sp)
 8003c4c:	df000204 	addi	fp,sp,8
 8003c50:	e13fff15 	stw	r4,-4(fp)
    setMACandIPs(allOnes, allOnes);
 8003c54:	d16003c4 	addi	r5,gp,-32753
 8003c58:	d12003c4 	addi	r4,gp,-32753
 8003c5c:	800271c0 	call	800271c <_ZL12setMACandIPsPKhS0_>
    gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 8003c60:	008200b4 	movhi	r2,2050
 8003c64:	10a54b04 	addi	r2,r2,-27348
 8003c68:	00c00204 	movi	r3,8
 8003c6c:	10c00305 	stb	r3,12(r2)
    gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 8003c70:	008200b4 	movhi	r2,2050
 8003c74:	10a54b04 	addi	r2,r2,-27348
 8003c78:	10000345 	stb	zero,13(r2)
    memcpy_P(gPB + IP_P,iphdr,9);
 8003c7c:	008200b4 	movhi	r2,2050
 8003c80:	10a54e84 	addi	r2,r2,-27334
 8003c84:	01800244 	movi	r6,9
 8003c88:	01420074 	movhi	r5,2049
 8003c8c:	29566b04 	addi	r5,r5,22956
 8003c90:	1009883a 	mov	r4,r2
 8003c94:	80025080 	call	8002508 <_Z8memcpy_PPvPKvj>
    gPB[IP_TOTLEN_L_P] = 0x82;
 8003c98:	008200b4 	movhi	r2,2050
 8003c9c:	10a54b04 	addi	r2,r2,-27348
 8003ca0:	00ffe084 	movi	r3,-126
 8003ca4:	10c00445 	stb	r3,17(r2)
    gPB[IP_PROTO_P] = IP_PROTO_UDP_V;
 8003ca8:	008200b4 	movhi	r2,2050
 8003cac:	10a54b04 	addi	r2,r2,-27348
 8003cb0:	00c00444 	movi	r3,17
 8003cb4:	10c005c5 	stb	r3,23(r2)
    fill_ip_hdr_checksum();
 8003cb8:	80029e80 	call	80029e8 <_ZL20fill_ip_hdr_checksumv>
    gPB[UDP_DST_PORT_H_P] = 0;
 8003cbc:	008200b4 	movhi	r2,2050
 8003cc0:	10a54b04 	addi	r2,r2,-27348
 8003cc4:	10000905 	stb	zero,36(r2)
    gPB[UDP_DST_PORT_L_P] = 0x9; // wol = normally 9
 8003cc8:	008200b4 	movhi	r2,2050
 8003ccc:	10a54b04 	addi	r2,r2,-27348
 8003cd0:	00c00244 	movi	r3,9
 8003cd4:	10c00945 	stb	r3,37(r2)
    gPB[UDP_SRC_PORT_H_P] = 10;
 8003cd8:	008200b4 	movhi	r2,2050
 8003cdc:	10a54b04 	addi	r2,r2,-27348
 8003ce0:	00c00284 	movi	r3,10
 8003ce4:	10c00885 	stb	r3,34(r2)
    gPB[UDP_SRC_PORT_L_P] = 0x42; // source port does not matter
 8003ce8:	008200b4 	movhi	r2,2050
 8003cec:	10a54b04 	addi	r2,r2,-27348
 8003cf0:	00c01084 	movi	r3,66
 8003cf4:	10c008c5 	stb	r3,35(r2)
    gPB[UDP_LEN_H_P] = 0;
 8003cf8:	008200b4 	movhi	r2,2050
 8003cfc:	10a54b04 	addi	r2,r2,-27348
 8003d00:	10000985 	stb	zero,38(r2)
    gPB[UDP_LEN_L_P] = 110; // fixed len
 8003d04:	008200b4 	movhi	r2,2050
 8003d08:	10a54b04 	addi	r2,r2,-27348
 8003d0c:	00c01b84 	movi	r3,110
 8003d10:	10c009c5 	stb	r3,39(r2)
    gPB[UDP_CHECKSUM_H_P] = 0;
 8003d14:	008200b4 	movhi	r2,2050
 8003d18:	10a54b04 	addi	r2,r2,-27348
 8003d1c:	10000a05 	stb	zero,40(r2)
    gPB[UDP_CHECKSUM_L_P] = 0;
 8003d20:	008200b4 	movhi	r2,2050
 8003d24:	10a54b04 	addi	r2,r2,-27348
 8003d28:	10000a45 	stb	zero,41(r2)
    copyMac(gPB + UDP_DATA_P, allOnes);
 8003d2c:	008200b4 	movhi	r2,2050
 8003d30:	10a55584 	addi	r2,r2,-27306
 8003d34:	d16003c4 	addi	r5,gp,-32753
 8003d38:	1009883a 	mov	r4,r2
 8003d3c:	80054ec0 	call	80054ec <_ZN9EtherCard7copyMacEPhPKh>
    uint8_t pos = UDP_DATA_P;
 8003d40:	00800a84 	movi	r2,42
 8003d44:	e0bffe05 	stb	r2,-8(fp)
    for (uint8_t m = 0; m < 16; ++m) {
 8003d48:	e03ffe45 	stb	zero,-7(fp)
 8003d4c:	e0bffe43 	ldbu	r2,-7(fp)
 8003d50:	10800428 	cmpgeui	r2,r2,16
 8003d54:	10000e1e 	bne	r2,zero,8003d90 <_ZN9EtherCard7sendWolEPh+0x150>
        pos += 6;
 8003d58:	e0bffe03 	ldbu	r2,-8(fp)
 8003d5c:	10800184 	addi	r2,r2,6
 8003d60:	e0bffe05 	stb	r2,-8(fp)
        copyMac(gPB + pos, wolmac);
 8003d64:	e0fffe03 	ldbu	r3,-8(fp)
 8003d68:	008200b4 	movhi	r2,2050
 8003d6c:	10a54b04 	addi	r2,r2,-27348
 8003d70:	1885883a 	add	r2,r3,r2
 8003d74:	e17fff17 	ldw	r5,-4(fp)
 8003d78:	1009883a 	mov	r4,r2
 8003d7c:	80054ec0 	call	80054ec <_ZN9EtherCard7copyMacEPhPKh>
    gPB[UDP_LEN_L_P] = 110; // fixed len
    gPB[UDP_CHECKSUM_H_P] = 0;
    gPB[UDP_CHECKSUM_L_P] = 0;
    copyMac(gPB + UDP_DATA_P, allOnes);
    uint8_t pos = UDP_DATA_P;
    for (uint8_t m = 0; m < 16; ++m) {
 8003d80:	e0bffe43 	ldbu	r2,-7(fp)
 8003d84:	10800044 	addi	r2,r2,1
 8003d88:	e0bffe45 	stb	r2,-7(fp)
 8003d8c:	003fef06 	br	8003d4c <_ZN9EtherCard7sendWolEPh+0x10c>
        pos += 6;
        copyMac(gPB + pos, wolmac);
    }
    fill_checksum(UDP_CHECKSUM_H_P, IP_SRC_P, 16 + 102,1);
 8003d90:	01c00044 	movi	r7,1
 8003d94:	01801d84 	movi	r6,118
 8003d98:	01400684 	movi	r5,26
 8003d9c:	01000a04 	movi	r4,40
 8003da0:	80025480 	call	8002548 <_ZL13fill_checksumhhth>
    packetSend(pos + 6);
 8003da4:	e0bffe03 	ldbu	r2,-8(fp)
 8003da8:	10800184 	addi	r2,r2,6
 8003dac:	10bfffcc 	andi	r2,r2,65535
 8003db0:	1009883a 	mov	r4,r2
 8003db4:	80022b80 	call	80022b8 <_ZN8ENC28J6010packetSendEt>
}
 8003db8:	0001883a 	nop
 8003dbc:	e037883a 	mov	sp,fp
 8003dc0:	dfc00117 	ldw	ra,4(sp)
 8003dc4:	df000017 	ldw	fp,0(sp)
 8003dc8:	dec00204 	addi	sp,sp,8
 8003dcc:	f800283a 	ret

08003dd0 <_ZL17client_arp_whohasPh>:

// make a arp request
static void client_arp_whohas(uint8_t *ip_we_search) {
 8003dd0:	defffd04 	addi	sp,sp,-12
 8003dd4:	dfc00215 	stw	ra,8(sp)
 8003dd8:	df000115 	stw	fp,4(sp)
 8003ddc:	df000104 	addi	fp,sp,4
 8003de0:	e13fff15 	stw	r4,-4(fp)
    setMACs(allOnes);
 8003de4:	d12003c4 	addi	r4,gp,-32753
 8003de8:	80026cc0 	call	80026cc <_ZL7setMACsPKh>
    gPB[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
 8003dec:	008200b4 	movhi	r2,2050
 8003df0:	10a54b04 	addi	r2,r2,-27348
 8003df4:	00c00204 	movi	r3,8
 8003df8:	10c00305 	stb	r3,12(r2)
    gPB[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
 8003dfc:	008200b4 	movhi	r2,2050
 8003e00:	10a54b04 	addi	r2,r2,-27348
 8003e04:	00c00184 	movi	r3,6
 8003e08:	10c00345 	stb	r3,13(r2)
    memcpy_P(gPB + ETH_ARP_P, arpreqhdr, sizeof arpreqhdr);
 8003e0c:	008200b4 	movhi	r2,2050
 8003e10:	10a54e84 	addi	r2,r2,-27334
 8003e14:	01800204 	movi	r6,8
 8003e18:	d1600544 	addi	r5,gp,-32747
 8003e1c:	1009883a 	mov	r4,r2
 8003e20:	80025080 	call	8002508 <_Z8memcpy_PPvPKvj>
    memset(gPB + ETH_ARP_DST_MAC_P, 0, ETH_LEN);
 8003e24:	008200b4 	movhi	r2,2050
 8003e28:	10a55304 	addi	r2,r2,-27316
 8003e2c:	01800184 	movi	r6,6
 8003e30:	000b883a 	mov	r5,zero
 8003e34:	1009883a 	mov	r4,r2
 8003e38:	80063b40 	call	80063b4 <memset>
    EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
 8003e3c:	008200b4 	movhi	r2,2050
 8003e40:	10a55084 	addi	r2,r2,-27326
 8003e44:	d166eb44 	addi	r5,gp,-25683
 8003e48:	1009883a 	mov	r4,r2
 8003e4c:	80054ec0 	call	80054ec <_ZN9EtherCard7copyMacEPhPKh>
    EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, ip_we_search);
 8003e50:	008200b4 	movhi	r2,2050
 8003e54:	10a55484 	addi	r2,r2,-27310
 8003e58:	e17fff17 	ldw	r5,-4(fp)
 8003e5c:	1009883a 	mov	r4,r2
 8003e60:	800552c0 	call	800552c <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
 8003e64:	008200b4 	movhi	r2,2050
 8003e68:	10a55204 	addi	r2,r2,-27320
 8003e6c:	d166ecc4 	addi	r5,gp,-25677
 8003e70:	1009883a 	mov	r4,r2
 8003e74:	800552c0 	call	800552c <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::packetSend(42);
 8003e78:	01000a84 	movi	r4,42
 8003e7c:	80022b80 	call	80022b8 <_ZN8ENC28J6010packetSendEt>
}
 8003e80:	0001883a 	nop
 8003e84:	e037883a 	mov	sp,fp
 8003e88:	dfc00117 	ldw	ra,4(sp)
 8003e8c:	df000017 	ldw	fp,0(sp)
 8003e90:	dec00204 	addi	sp,sp,8
 8003e94:	f800283a 	ret

08003e98 <_ZN9EtherCard15clientWaitingGwEv>:

uint8_t EtherCard::clientWaitingGw () {
 8003e98:	deffff04 	addi	sp,sp,-4
 8003e9c:	df000015 	stw	fp,0(sp)
 8003ea0:	d839883a 	mov	fp,sp
    return !(waitgwmac & WGW_HAVE_GW_MAC);
 8003ea4:	d0a71003 	ldbu	r2,-25536(gp)
 8003ea8:	10803fcc 	andi	r2,r2,255
 8003eac:	1080008c 	andi	r2,r2,2
 8003eb0:	1005003a 	cmpeq	r2,r2,zero
}
 8003eb4:	e037883a 	mov	sp,fp
 8003eb8:	df000017 	ldw	fp,0(sp)
 8003ebc:	dec00104 	addi	sp,sp,4
 8003ec0:	f800283a 	ret

08003ec4 <_ZN9EtherCard16clientWaitingDnsEv>:

uint8_t EtherCard::clientWaitingDns () {
 8003ec4:	defffe04 	addi	sp,sp,-8
 8003ec8:	dfc00115 	stw	ra,4(sp)
 8003ecc:	df000015 	stw	fp,0(sp)
 8003ed0:	d839883a 	mov	fp,sp
    if(is_lan(myip, dnsip))
 8003ed4:	d166f1c4 	addi	r5,gp,-25657
 8003ed8:	d126ecc4 	addi	r4,gp,-25677
 8003edc:	80027c00 	call	80027c0 <_ZL6is_lanPKhS0_>
 8003ee0:	10803fcc 	andi	r2,r2,255
 8003ee4:	10000326 	beq	r2,zero,8003ef4 <_ZN9EtherCard16clientWaitingDnsEv+0x30>
        return !has_dns_mac;
 8003ee8:	d0a70dc3 	ldbu	r2,-25545(gp)
 8003eec:	1080005c 	xori	r2,r2,1
 8003ef0:	00000406 	br	8003f04 <_ZN9EtherCard16clientWaitingDnsEv+0x40>
    return !(waitgwmac & WGW_HAVE_GW_MAC);
 8003ef4:	d0a71003 	ldbu	r2,-25536(gp)
 8003ef8:	10803fcc 	andi	r2,r2,255
 8003efc:	1080008c 	andi	r2,r2,2
 8003f00:	1005003a 	cmpeq	r2,r2,zero
}
 8003f04:	e037883a 	mov	sp,fp
 8003f08:	dfc00117 	ldw	ra,4(sp)
 8003f0c:	df000017 	ldw	fp,0(sp)
 8003f10:	dec00204 	addi	sp,sp,8
 8003f14:	f800283a 	ret

08003f18 <_ZL16client_store_macPhS_>:

static uint8_t client_store_mac(uint8_t *source_ip, uint8_t *mac) {
 8003f18:	defffc04 	addi	sp,sp,-16
 8003f1c:	dfc00315 	stw	ra,12(sp)
 8003f20:	df000215 	stw	fp,8(sp)
 8003f24:	df000204 	addi	fp,sp,8
 8003f28:	e13ffe15 	stw	r4,-8(fp)
 8003f2c:	e17fff15 	stw	r5,-4(fp)
    if (memcmp(gPB + ETH_ARP_SRC_IP_P, source_ip, IP_LEN) != 0)
 8003f30:	008200b4 	movhi	r2,2050
 8003f34:	10a55204 	addi	r2,r2,-27320
 8003f38:	01800104 	movi	r6,4
 8003f3c:	e17ffe17 	ldw	r5,-8(fp)
 8003f40:	1009883a 	mov	r4,r2
 8003f44:	80061f00 	call	80061f0 <memcmp>
 8003f48:	10000226 	beq	r2,zero,8003f54 <_ZL16client_store_macPhS_+0x3c>
        return 0;
 8003f4c:	0005883a 	mov	r2,zero
 8003f50:	00000606 	br	8003f6c <_ZL16client_store_macPhS_+0x54>
    EtherCard::copyMac(mac, gPB + ETH_ARP_SRC_MAC_P);
 8003f54:	008200b4 	movhi	r2,2050
 8003f58:	10a55084 	addi	r2,r2,-27326
 8003f5c:	100b883a 	mov	r5,r2
 8003f60:	e13fff17 	ldw	r4,-4(fp)
 8003f64:	80054ec0 	call	80054ec <_ZN9EtherCard7copyMacEPhPKh>
    return 1;
 8003f68:	00800044 	movi	r2,1
}
 8003f6c:	e037883a 	mov	sp,fp
 8003f70:	dfc00117 	ldw	ra,4(sp)
 8003f74:	df000017 	ldw	fp,0(sp)
 8003f78:	dec00204 	addi	sp,sp,8
 8003f7c:	f800283a 	ret

08003f80 <_ZN9EtherCard7setGwIpEPKh>:
// static void client_gw_arp_refresh() {
//   if (waitgwmac & WGW_HAVE_GW_MAC)
//     waitgwmac |= WGW_REFRESHING;
// }

void EtherCard::setGwIp (const uint8_t *gwipaddr) {
 8003f80:	defffd04 	addi	sp,sp,-12
 8003f84:	dfc00215 	stw	ra,8(sp)
 8003f88:	df000115 	stw	fp,4(sp)
 8003f8c:	df000104 	addi	fp,sp,4
 8003f90:	e13fff15 	stw	r4,-4(fp)
    delaycnt = 0; //request gateway ARP lookup
 8003f94:	d026f48d 	sth	zero,-25646(gp)
    waitgwmac = WGW_INITIAL_ARP; // causes an arp request in the packet loop
 8003f98:	00800044 	movi	r2,1
 8003f9c:	d0a71005 	stb	r2,-25536(gp)
    copyIp(gwip, gwipaddr);
 8003fa0:	e17fff17 	ldw	r5,-4(fp)
 8003fa4:	d126efc4 	addi	r4,gp,-25665
 8003fa8:	800552c0 	call	800552c <_ZN9EtherCard6copyIpEPhPKh>
}
 8003fac:	0001883a 	nop
 8003fb0:	e037883a 	mov	sp,fp
 8003fb4:	dfc00117 	ldw	ra,4(sp)
 8003fb8:	df000017 	ldw	fp,0(sp)
 8003fbc:	dec00204 	addi	sp,sp,8
 8003fc0:	f800283a 	ret

08003fc4 <_ZN9EtherCard22updateBroadcastAddressEv>:

void EtherCard::updateBroadcastAddress() {
 8003fc4:	defffe04 	addi	sp,sp,-8
 8003fc8:	df000115 	stw	fp,4(sp)
 8003fcc:	df000104 	addi	fp,sp,4
    for(uint8_t i=0; i<IP_LEN; i++)
 8003fd0:	e03fff05 	stb	zero,-4(fp)
 8003fd4:	e0bfff03 	ldbu	r2,-4(fp)
 8003fd8:	10800128 	cmpgeui	r2,r2,4
 8003fdc:	1000141e 	bne	r2,zero,8004030 <_ZN9EtherCard22updateBroadcastAddressEv+0x6c>
        broadcastip[i] = myip[i] | ~netmask[i];
 8003fe0:	e0ffff03 	ldbu	r3,-4(fp)
 8003fe4:	e13fff03 	ldbu	r4,-4(fp)
 8003fe8:	d0a6ecc4 	addi	r2,gp,-25677
 8003fec:	2085883a 	add	r2,r4,r2
 8003ff0:	10800003 	ldbu	r2,0(r2)
 8003ff4:	100b883a 	mov	r5,r2
 8003ff8:	e13fff03 	ldbu	r4,-4(fp)
 8003ffc:	d0a6edc4 	addi	r2,gp,-25673
 8004000:	2085883a 	add	r2,r4,r2
 8004004:	10800003 	ldbu	r2,0(r2)
 8004008:	0084303a 	nor	r2,zero,r2
 800400c:	2884b03a 	or	r2,r5,r2
 8004010:	1009883a 	mov	r4,r2
 8004014:	d0a6eec4 	addi	r2,gp,-25669
 8004018:	1885883a 	add	r2,r3,r2
 800401c:	11000005 	stb	r4,0(r2)
    waitgwmac = WGW_INITIAL_ARP; // causes an arp request in the packet loop
    copyIp(gwip, gwipaddr);
}

void EtherCard::updateBroadcastAddress() {
    for(uint8_t i=0; i<IP_LEN; i++)
 8004020:	e0bfff03 	ldbu	r2,-4(fp)
 8004024:	10800044 	addi	r2,r2,1
 8004028:	e0bfff05 	stb	r2,-4(fp)
 800402c:	003fe906 	br	8003fd4 <_ZN9EtherCard22updateBroadcastAddressEv+0x10>
        broadcastip[i] = myip[i] | ~netmask[i];
}
 8004030:	0001883a 	nop
 8004034:	e037883a 	mov	sp,fp
 8004038:	df000017 	ldw	fp,0(sp)
 800403c:	dec00104 	addi	sp,sp,4
 8004040:	f800283a 	ret

08004044 <_ZL10client_synhhh>:

static void client_syn(uint8_t srcport,uint8_t dstport_h,uint8_t dstport_l) {
 8004044:	defffb04 	addi	sp,sp,-20
 8004048:	dfc00415 	stw	ra,16(sp)
 800404c:	df000315 	stw	fp,12(sp)
 8004050:	df000304 	addi	fp,sp,12
 8004054:	2807883a 	mov	r3,r5
 8004058:	3005883a 	mov	r2,r6
 800405c:	e13ffd05 	stb	r4,-12(fp)
 8004060:	e0fffe05 	stb	r3,-8(fp)
 8004064:	e0bfff05 	stb	r2,-4(fp)
    if(is_lan(EtherCard::myip, EtherCard::hisip)) {
 8004068:	d166f2c4 	addi	r5,gp,-25653
 800406c:	d126ecc4 	addi	r4,gp,-25677
 8004070:	80027c00 	call	80027c0 <_ZL6is_lanPKhS0_>
 8004074:	10803fcc 	andi	r2,r2,255
 8004078:	10000426 	beq	r2,zero,800408c <_ZL10client_synhhh+0x48>
        setMACandIPs(destmacaddr, EtherCard::hisip);
 800407c:	d166f2c4 	addi	r5,gp,-25653
 8004080:	d1270c04 	addi	r4,gp,-25552
 8004084:	800271c0 	call	800271c <_ZL12setMACandIPsPKhS0_>
 8004088:	00000306 	br	8004098 <_ZL10client_synhhh+0x54>
    } else {
        setMACandIPs(gwmacaddr, EtherCard::hisip);
 800408c:	d166f2c4 	addi	r5,gp,-25653
 8004090:	d1270e84 	addi	r4,gp,-25542
 8004094:	800271c0 	call	800271c <_ZL12setMACandIPsPKhS0_>
    }
    gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 8004098:	008200b4 	movhi	r2,2050
 800409c:	10a54b04 	addi	r2,r2,-27348
 80040a0:	00c00204 	movi	r3,8
 80040a4:	10c00305 	stb	r3,12(r2)
    gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 80040a8:	008200b4 	movhi	r2,2050
 80040ac:	10a54b04 	addi	r2,r2,-27348
 80040b0:	10000345 	stb	zero,13(r2)
    memcpy_P(gPB + IP_P,iphdr,sizeof iphdr);
 80040b4:	008200b4 	movhi	r2,2050
 80040b8:	10a54e84 	addi	r2,r2,-27334
 80040bc:	01800244 	movi	r6,9
 80040c0:	01420074 	movhi	r5,2049
 80040c4:	29566b04 	addi	r5,r5,22956
 80040c8:	1009883a 	mov	r4,r2
 80040cc:	80025080 	call	8002508 <_Z8memcpy_PPvPKvj>
    gPB[IP_TOTLEN_L_P] = 44; // good for syn
 80040d0:	008200b4 	movhi	r2,2050
 80040d4:	10a54b04 	addi	r2,r2,-27348
 80040d8:	00c00b04 	movi	r3,44
 80040dc:	10c00445 	stb	r3,17(r2)
    gPB[IP_PROTO_P] = IP_PROTO_TCP_V;
 80040e0:	008200b4 	movhi	r2,2050
 80040e4:	10a54b04 	addi	r2,r2,-27348
 80040e8:	00c00184 	movi	r3,6
 80040ec:	10c005c5 	stb	r3,23(r2)
    fill_ip_hdr_checksum();
 80040f0:	80029e80 	call	80029e8 <_ZL20fill_ip_hdr_checksumv>
    gPB[TCP_DST_PORT_H_P] = dstport_h;
 80040f4:	008200b4 	movhi	r2,2050
 80040f8:	10a54b04 	addi	r2,r2,-27348
 80040fc:	e0fffe03 	ldbu	r3,-8(fp)
 8004100:	10c00905 	stb	r3,36(r2)
    gPB[TCP_DST_PORT_L_P] = dstport_l;
 8004104:	008200b4 	movhi	r2,2050
 8004108:	10a54b04 	addi	r2,r2,-27348
 800410c:	e0ffff03 	ldbu	r3,-4(fp)
 8004110:	10c00945 	stb	r3,37(r2)
    gPB[TCP_SRC_PORT_H_P] = TCPCLIENT_SRC_PORT_H;
 8004114:	008200b4 	movhi	r2,2050
 8004118:	10a54b04 	addi	r2,r2,-27348
 800411c:	00c002c4 	movi	r3,11
 8004120:	10c00885 	stb	r3,34(r2)
    gPB[TCP_SRC_PORT_L_P] = srcport; // lower 8 bit of src port
 8004124:	008200b4 	movhi	r2,2050
 8004128:	10a54b04 	addi	r2,r2,-27348
 800412c:	e0fffd03 	ldbu	r3,-12(fp)
 8004130:	10c008c5 	stb	r3,35(r2)
    memset(gPB + TCP_SEQ_H_P, 0, 8);
 8004134:	008200b4 	movhi	r2,2050
 8004138:	10a55484 	addi	r2,r2,-27310
 800413c:	01800204 	movi	r6,8
 8004140:	000b883a 	mov	r5,zero
 8004144:	1009883a 	mov	r4,r2
 8004148:	80063b40 	call	80063b4 <memset>
    gPB[TCP_SEQ_H_P+2] = seqnum;
 800414c:	d0e00343 	ldbu	r3,-32755(gp)
 8004150:	008200b4 	movhi	r2,2050
 8004154:	10a54b04 	addi	r2,r2,-27348
 8004158:	10c00a05 	stb	r3,40(r2)
    seqnum += 3;
 800415c:	d0a00343 	ldbu	r2,-32755(gp)
 8004160:	108000c4 	addi	r2,r2,3
 8004164:	d0a00345 	stb	r2,-32755(gp)
    gPB[TCP_HEADER_LEN_P] = 0x60; // 0x60=24 len: (0x60>>4) * 4
 8004168:	008200b4 	movhi	r2,2050
 800416c:	10a54b04 	addi	r2,r2,-27348
 8004170:	00c01804 	movi	r3,96
 8004174:	10c00b85 	stb	r3,46(r2)
    gPB[TCP_FLAGS_P] = TCP_FLAGS_SYN_V;
 8004178:	008200b4 	movhi	r2,2050
 800417c:	10a54b04 	addi	r2,r2,-27348
 8004180:	00c00084 	movi	r3,2
 8004184:	10c00bc5 	stb	r3,47(r2)
    gPB[TCP_WIN_SIZE] = 0x3; // 1024 = 0x400 768 = 0x300, initial window
 8004188:	008200b4 	movhi	r2,2050
 800418c:	10a54b04 	addi	r2,r2,-27348
 8004190:	00c000c4 	movi	r3,3
 8004194:	10c00c05 	stb	r3,48(r2)
    gPB[TCP_WIN_SIZE+1] = 0x0;
 8004198:	008200b4 	movhi	r2,2050
 800419c:	10a54b04 	addi	r2,r2,-27348
 80041a0:	10000c45 	stb	zero,49(r2)
    gPB[TCP_CHECKSUM_H_P] = 0;
 80041a4:	008200b4 	movhi	r2,2050
 80041a8:	10a54b04 	addi	r2,r2,-27348
 80041ac:	10000c85 	stb	zero,50(r2)
    gPB[TCP_CHECKSUM_L_P] = 0;
 80041b0:	008200b4 	movhi	r2,2050
 80041b4:	10a54b04 	addi	r2,r2,-27348
 80041b8:	10000cc5 	stb	zero,51(r2)
    gPB[TCP_CHECKSUM_L_P+1] = 0;
 80041bc:	008200b4 	movhi	r2,2050
 80041c0:	10a54b04 	addi	r2,r2,-27348
 80041c4:	10000d05 	stb	zero,52(r2)
    gPB[TCP_CHECKSUM_L_P+2] = 0;
 80041c8:	008200b4 	movhi	r2,2050
 80041cc:	10a54b04 	addi	r2,r2,-27348
 80041d0:	10000d45 	stb	zero,53(r2)
    gPB[TCP_OPTIONS_P] = 2;
 80041d4:	008200b4 	movhi	r2,2050
 80041d8:	10a54b04 	addi	r2,r2,-27348
 80041dc:	00c00084 	movi	r3,2
 80041e0:	10c00d85 	stb	r3,54(r2)
    gPB[TCP_OPTIONS_P+1] = 4;
 80041e4:	008200b4 	movhi	r2,2050
 80041e8:	10a54b04 	addi	r2,r2,-27348
 80041ec:	00c00104 	movi	r3,4
 80041f0:	10c00dc5 	stb	r3,55(r2)
    gPB[TCP_OPTIONS_P+2] = (CLIENTMSS>>8);
 80041f4:	008200b4 	movhi	r2,2050
 80041f8:	10a54b04 	addi	r2,r2,-27348
 80041fc:	00c00084 	movi	r3,2
 8004200:	10c00e05 	stb	r3,56(r2)
    gPB[TCP_OPTIONS_P+3] = (uint8_t) CLIENTMSS;
 8004204:	008200b4 	movhi	r2,2050
 8004208:	10a54b04 	addi	r2,r2,-27348
 800420c:	00c00984 	movi	r3,38
 8004210:	10c00e45 	stb	r3,57(r2)
    fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8 +TCP_HEADER_LEN_PLAIN+4,2);
 8004214:	01c00084 	movi	r7,2
 8004218:	01800804 	movi	r6,32
 800421c:	01400684 	movi	r5,26
 8004220:	01000c84 	movi	r4,50
 8004224:	80025480 	call	8002548 <_ZL13fill_checksumhhth>
    // 4 is the tcp mss option:
    EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN+4);
 8004228:	01000e84 	movi	r4,58
 800422c:	80022b80 	call	80022b8 <_ZN8ENC28J6010packetSendEt>
}
 8004230:	0001883a 	nop
 8004234:	e037883a 	mov	sp,fp
 8004238:	dfc00117 	ldw	ra,4(sp)
 800423c:	df000017 	ldw	fp,0(sp)
 8004240:	dec00204 	addi	sp,sp,8
 8004244:	f800283a 	ret

08004248 <_ZN9EtherCard12clientTcpReqEPFhhhttEPFthEt>:

uint8_t EtherCard::clientTcpReq (uint8_t (*result_cb)(uint8_t,uint8_t,uint16_t,uint16_t),
                                 uint16_t (*datafill_cb)(uint8_t),uint16_t port) {
 8004248:	defffc04 	addi	sp,sp,-16
 800424c:	df000315 	stw	fp,12(sp)
 8004250:	df000304 	addi	fp,sp,12
 8004254:	e13ffd15 	stw	r4,-12(fp)
 8004258:	e17ffe15 	stw	r5,-8(fp)
 800425c:	3005883a 	mov	r2,r6
 8004260:	e0bfff0d 	sth	r2,-4(fp)
    client_tcp_result_cb = result_cb;
 8004264:	e0bffd17 	ldw	r2,-12(fp)
 8004268:	d0a70215 	stw	r2,-25592(gp)
    client_tcp_datafill_cb = datafill_cb;
 800426c:	e0bffe17 	ldw	r2,-8(fp)
 8004270:	d0a70315 	stw	r2,-25588(gp)
    tcp_client_port_h = port>>8;
 8004274:	e0bfff0b 	ldhu	r2,-4(fp)
 8004278:	1005d23a 	srai	r2,r2,8
 800427c:	d0a70185 	stb	r2,-25594(gp)
    tcp_client_port_l = port;
 8004280:	e0bfff0b 	ldhu	r2,-4(fp)
 8004284:	d0a701c5 	stb	r2,-25593(gp)
    tcp_client_state = TCP_STATE_SENDSYN; // Flag to packetloop to initiate a TCP/IP session by send a syn
 8004288:	00800044 	movi	r2,1
 800428c:	d0a70145 	stb	r2,-25595(gp)
    tcp_fd = (tcp_fd + 1) & 7;
 8004290:	d0a70103 	ldbu	r2,-25596(gp)
 8004294:	10800044 	addi	r2,r2,1
 8004298:	108001cc 	andi	r2,r2,7
 800429c:	d0a70105 	stb	r2,-25596(gp)
    return tcp_fd;
 80042a0:	d0a70103 	ldbu	r2,-25596(gp)
}
 80042a4:	e037883a 	mov	sp,fp
 80042a8:	df000017 	ldw	fp,0(sp)
 80042ac:	dec00104 	addi	sp,sp,4
 80042b0:	f800283a 	ret

080042b4 <_ZL31www_client_internal_datafill_cbh>:

static uint16_t www_client_internal_datafill_cb(uint8_t fd) {
 80042b4:	defffe04 	addi	sp,sp,-8
 80042b8:	df000115 	stw	fp,4(sp)
 80042bc:	df000104 	addi	fp,sp,4
 80042c0:	2005883a 	mov	r2,r4
 80042c4:	e0bfff05 	stb	r2,-4(fp)
    //                      client_postval);
    //     }
    // }
    // return bfill.position();

	return 0;
 80042c8:	0005883a 	mov	r2,zero
}
 80042cc:	e037883a 	mov	sp,fp
 80042d0:	df000017 	ldw	fp,0(sp)
 80042d4:	dec00104 	addi	sp,sp,4
 80042d8:	f800283a 	ret

080042dc <_ZL29www_client_internal_result_cbhhtt>:

static uint8_t www_client_internal_result_cb(uint8_t fd, uint8_t statuscode, uint16_t datapos, uint16_t len_of_data) {
 80042dc:	defff904 	addi	sp,sp,-28
 80042e0:	dfc00615 	stw	ra,24(sp)
 80042e4:	df000515 	stw	fp,20(sp)
 80042e8:	df000504 	addi	fp,sp,20
 80042ec:	2011883a 	mov	r8,r4
 80042f0:	2809883a 	mov	r4,r5
 80042f4:	3007883a 	mov	r3,r6
 80042f8:	3805883a 	mov	r2,r7
 80042fc:	e23ffc05 	stb	r8,-16(fp)
 8004300:	e13ffd05 	stb	r4,-12(fp)
 8004304:	e0fffe0d 	sth	r3,-8(fp)
 8004308:	e0bfff0d 	sth	r2,-4(fp)
    if (fd!=www_fd)
 800430c:	d0a70403 	ldbu	r2,-25584(gp)
 8004310:	e0fffc03 	ldbu	r3,-16(fp)
 8004314:	10803fcc 	andi	r2,r2,255
 8004318:	18800626 	beq	r3,r2,8004334 <_ZL29www_client_internal_result_cbhhtt+0x58>
        (*client_browser_cb)(4,0,0);
 800431c:	d0a70517 	ldw	r2,-25580(gp)
 8004320:	000d883a 	mov	r6,zero
 8004324:	000b883a 	mov	r5,zero
 8004328:	01000104 	movi	r4,4
 800432c:	103ee83a 	callr	r2
 8004330:	00002206 	br	80043bc <_ZL29www_client_internal_result_cbhhtt+0xe0>
    else if (statuscode==0 && len_of_data>12 && client_browser_cb) {
 8004334:	e0bffd03 	ldbu	r2,-12(fp)
 8004338:	1000201e 	bne	r2,zero,80043bc <_ZL29www_client_internal_result_cbhhtt+0xe0>
 800433c:	e0bfff0b 	ldhu	r2,-4(fp)
 8004340:	10800370 	cmpltui	r2,r2,13
 8004344:	10001d1e 	bne	r2,zero,80043bc <_ZL29www_client_internal_result_cbhhtt+0xe0>
 8004348:	d0a70517 	ldw	r2,-25580(gp)
 800434c:	10001b26 	beq	r2,zero,80043bc <_ZL29www_client_internal_result_cbhhtt+0xe0>
        uint8_t f = strncmp("200",(char *)&(gPB[datapos+9]),3) != 0;
 8004350:	e0bffe0b 	ldhu	r2,-8(fp)
 8004354:	10c00244 	addi	r3,r2,9
 8004358:	008200b4 	movhi	r2,2050
 800435c:	10a54b04 	addi	r2,r2,-27348
 8004360:	1885883a 	add	r2,r3,r2
 8004364:	018000c4 	movi	r6,3
 8004368:	100b883a 	mov	r5,r2
 800436c:	01020074 	movhi	r4,2049
 8004370:	21167004 	addi	r4,r4,22976
 8004374:	80066d40 	call	80066d4 <strncmp>
 8004378:	1004c03a 	cmpne	r2,r2,zero
 800437c:	e0bffb05 	stb	r2,-20(fp)
        (*client_browser_cb)(f, ((uint16_t)TCP_SRC_PORT_H_P+(gPB[TCP_HEADER_LEN_P]>>4)*4),len_of_data);
 8004380:	d0e70517 	ldw	r3,-25580(gp)
 8004384:	e13ffb03 	ldbu	r4,-20(fp)
 8004388:	008200b4 	movhi	r2,2050
 800438c:	10a54b04 	addi	r2,r2,-27348
 8004390:	10800b83 	ldbu	r2,46(r2)
 8004394:	10803fcc 	andi	r2,r2,255
 8004398:	1005d13a 	srai	r2,r2,4
 800439c:	1085883a 	add	r2,r2,r2
 80043a0:	1085883a 	add	r2,r2,r2
 80043a4:	10800884 	addi	r2,r2,34
 80043a8:	10bfffcc 	andi	r2,r2,65535
 80043ac:	e17fff0b 	ldhu	r5,-4(fp)
 80043b0:	280d883a 	mov	r6,r5
 80043b4:	100b883a 	mov	r5,r2
 80043b8:	183ee83a 	callr	r3
    }
    return 0;
 80043bc:	0005883a 	mov	r2,zero
}
 80043c0:	e037883a 	mov	sp,fp
 80043c4:	dfc00117 	ldw	ra,4(sp)
 80043c8:	df000017 	ldw	fp,0(sp)
 80043cc:	dec00204 	addi	sp,sp,8
 80043d0:	f800283a 	ret

080043d4 <_ZN9EtherCard9browseUrlEPKcS1_S1_PFvhttE>:

void EtherCard::browseUrl (const char *urlbuf, const char *urlbuf_varpart, const char *hoststr, void (*callback)(uint8_t,uint16_t,uint16_t)) {
 80043d4:	defff904 	addi	sp,sp,-28
 80043d8:	dfc00615 	stw	ra,24(sp)
 80043dc:	df000515 	stw	fp,20(sp)
 80043e0:	df000504 	addi	fp,sp,20
 80043e4:	e13ffc15 	stw	r4,-16(fp)
 80043e8:	e17ffd15 	stw	r5,-12(fp)
 80043ec:	e1bffe15 	stw	r6,-8(fp)
 80043f0:	e1ffff15 	stw	r7,-4(fp)
    browseUrl(urlbuf, urlbuf_varpart, hoststr, PSTR("Accept: text/html"), callback);
 80043f4:	01020074 	movhi	r4,2049
 80043f8:	21167104 	addi	r4,r4,22980
 80043fc:	80024e40 	call	80024e4 <_Z4PSTRPc>
 8004400:	1007883a 	mov	r3,r2
 8004404:	e0bfff17 	ldw	r2,-4(fp)
 8004408:	d8800015 	stw	r2,0(sp)
 800440c:	180f883a 	mov	r7,r3
 8004410:	e1bffe17 	ldw	r6,-8(fp)
 8004414:	e17ffd17 	ldw	r5,-12(fp)
 8004418:	e13ffc17 	ldw	r4,-16(fp)
 800441c:	80044380 	call	8004438 <_ZN9EtherCard9browseUrlEPKcS1_S1_S1_PFvhttE>
}
 8004420:	0001883a 	nop
 8004424:	e037883a 	mov	sp,fp
 8004428:	dfc00117 	ldw	ra,4(sp)
 800442c:	df000017 	ldw	fp,0(sp)
 8004430:	dec00204 	addi	sp,sp,8
 8004434:	f800283a 	ret

08004438 <_ZN9EtherCard9browseUrlEPKcS1_S1_S1_PFvhttE>:

void EtherCard::browseUrl (const char *urlbuf, const char *urlbuf_varpart, const char *hoststr, const char *additionalheaderline, void (*callback)(uint8_t,uint16_t,uint16_t)) {
 8004438:	defffa04 	addi	sp,sp,-24
 800443c:	dfc00515 	stw	ra,20(sp)
 8004440:	df000415 	stw	fp,16(sp)
 8004444:	df000404 	addi	fp,sp,16
 8004448:	e13ffc15 	stw	r4,-16(fp)
 800444c:	e17ffd15 	stw	r5,-12(fp)
 8004450:	e1bffe15 	stw	r6,-8(fp)
 8004454:	e1ffff15 	stw	r7,-4(fp)
    client_urlbuf = urlbuf;
 8004458:	e0bffc17 	ldw	r2,-16(fp)
 800445c:	d0a70815 	stw	r2,-25568(gp)
    client_urlbuf_var = urlbuf_varpart;
 8004460:	e0bffd17 	ldw	r2,-12(fp)
 8004464:	d0a70915 	stw	r2,-25564(gp)
    client_hoststr = hoststr;
 8004468:	e0bffe17 	ldw	r2,-8(fp)
 800446c:	d0a70a15 	stw	r2,-25560(gp)
    client_additionalheaderline = additionalheaderline;
 8004470:	e0bfff17 	ldw	r2,-4(fp)
 8004474:	d0a70615 	stw	r2,-25576(gp)
    client_postval = 0;
 8004478:	d0270715 	stw	zero,-25572(gp)
    client_browser_cb = callback;
 800447c:	e0800217 	ldw	r2,8(fp)
 8004480:	d0a70515 	stw	r2,-25580(gp)
    www_fd = clientTcpReq(&www_client_internal_result_cb,&www_client_internal_datafill_cb,hisport);
 8004484:	d0a0000b 	ldhu	r2,-32768(gp)
 8004488:	10bfffcc 	andi	r2,r2,65535
 800448c:	100d883a 	mov	r6,r2
 8004490:	01420034 	movhi	r5,2048
 8004494:	2950ad04 	addi	r5,r5,17076
 8004498:	01020034 	movhi	r4,2048
 800449c:	2110b704 	addi	r4,r4,17116
 80044a0:	80042480 	call	8004248 <_ZN9EtherCard12clientTcpReqEPFhhhttEPFthEt>
 80044a4:	d0a70405 	stb	r2,-25584(gp)
}
 80044a8:	0001883a 	nop
 80044ac:	e037883a 	mov	sp,fp
 80044b0:	dfc00117 	ldw	ra,4(sp)
 80044b4:	df000017 	ldw	fp,0(sp)
 80044b8:	dec00204 	addi	sp,sp,8
 80044bc:	f800283a 	ret

080044c0 <_ZN9EtherCard8httpPostEPKcS1_S1_S1_PFvhttE>:

void EtherCard::httpPost (const char *urlbuf, const char *hoststr, const char *additionalheaderline, const char *postval, void (*callback)(uint8_t,uint16_t,uint16_t)) {
 80044c0:	defffa04 	addi	sp,sp,-24
 80044c4:	dfc00515 	stw	ra,20(sp)
 80044c8:	df000415 	stw	fp,16(sp)
 80044cc:	df000404 	addi	fp,sp,16
 80044d0:	e13ffc15 	stw	r4,-16(fp)
 80044d4:	e17ffd15 	stw	r5,-12(fp)
 80044d8:	e1bffe15 	stw	r6,-8(fp)
 80044dc:	e1ffff15 	stw	r7,-4(fp)
    client_urlbuf = urlbuf;
 80044e0:	e0bffc17 	ldw	r2,-16(fp)
 80044e4:	d0a70815 	stw	r2,-25568(gp)
    client_hoststr = hoststr;
 80044e8:	e0bffd17 	ldw	r2,-12(fp)
 80044ec:	d0a70a15 	stw	r2,-25560(gp)
    client_additionalheaderline = additionalheaderline;
 80044f0:	e0bffe17 	ldw	r2,-8(fp)
 80044f4:	d0a70615 	stw	r2,-25576(gp)
    client_postval = postval;
 80044f8:	e0bfff17 	ldw	r2,-4(fp)
 80044fc:	d0a70715 	stw	r2,-25572(gp)
    client_browser_cb = callback;
 8004500:	e0800217 	ldw	r2,8(fp)
 8004504:	d0a70515 	stw	r2,-25580(gp)
    www_fd = clientTcpReq(&www_client_internal_result_cb,&www_client_internal_datafill_cb,hisport);
 8004508:	d0a0000b 	ldhu	r2,-32768(gp)
 800450c:	10bfffcc 	andi	r2,r2,65535
 8004510:	100d883a 	mov	r6,r2
 8004514:	01420034 	movhi	r5,2048
 8004518:	2950ad04 	addi	r5,r5,17076
 800451c:	01020034 	movhi	r4,2048
 8004520:	2110b704 	addi	r4,r4,17116
 8004524:	80042480 	call	8004248 <_ZN9EtherCard12clientTcpReqEPFhhhttEPFthEt>
 8004528:	d0a70405 	stb	r2,-25584(gp)
}
 800452c:	0001883a 	nop
 8004530:	e037883a 	mov	sp,fp
 8004534:	dfc00117 	ldw	ra,4(sp)
 8004538:	df000017 	ldw	fp,0(sp)
 800453c:	dec00204 	addi	sp,sp,8
 8004540:	f800283a 	ret

08004544 <_ZL15tcp_datafill_cbh>:

static uint16_t tcp_datafill_cb(uint8_t fd) {
 8004544:	defffe04 	addi	sp,sp,-8
 8004548:	df000115 	stw	fp,4(sp)
 800454c:	df000104 	addi	fp,sp,4
 8004550:	2005883a 	mov	r2,r4
 8004554:	e0bfff05 	stb	r2,-4(fp)
//     Serial.println((char*) EtherCard::tcpOffset());
// #endif
//     result_fd = 123; // bogus value
//     return len;

	return 0;
 8004558:	0005883a 	mov	r2,zero
}
 800455c:	e037883a 	mov	sp,fp
 8004560:	df000017 	ldw	fp,0(sp)
 8004564:	dec00104 	addi	sp,sp,4
 8004568:	f800283a 	ret

0800456c <_ZL13tcp_result_cbhhtt>:

static uint8_t tcp_result_cb(uint8_t fd, uint8_t status, uint16_t datapos, uint16_t datalen) {
 800456c:	defffb04 	addi	sp,sp,-20
 8004570:	df000415 	stw	fp,16(sp)
 8004574:	df000404 	addi	fp,sp,16
 8004578:	2011883a 	mov	r8,r4
 800457c:	2809883a 	mov	r4,r5
 8004580:	3007883a 	mov	r3,r6
 8004584:	3805883a 	mov	r2,r7
 8004588:	e23ffc05 	stb	r8,-16(fp)
 800458c:	e13ffd05 	stb	r4,-12(fp)
 8004590:	e0fffe0d 	sth	r3,-8(fp)
 8004594:	e0bfff0d 	sth	r2,-4(fp)
    if (status == 0) {
 8004598:	e0bffd03 	ldbu	r2,-12(fp)
 800459c:	1000071e 	bne	r2,zero,80045bc <_ZL13tcp_result_cbhhtt+0x50>
        result_fd = fd; // a valid result has been received, remember its session id
 80045a0:	e0bffc03 	ldbu	r2,-16(fp)
 80045a4:	d0a00385 	stb	r2,-32754(gp)
        result_ptr = (char*) ether.buffer + datapos;
 80045a8:	e0fffe0b 	ldhu	r3,-8(fp)
 80045ac:	008200b4 	movhi	r2,2050
 80045b0:	10a54b04 	addi	r2,r2,-27348
 80045b4:	1885883a 	add	r2,r3,r2
 80045b8:	d0a71115 	stw	r2,-25532(gp)
        // result_ptr[datalen] = 0;
    }
    return 1;
 80045bc:	00800044 	movi	r2,1
}
 80045c0:	e037883a 	mov	sp,fp
 80045c4:	df000017 	ldw	fp,0(sp)
 80045c8:	dec00104 	addi	sp,sp,4
 80045cc:	f800283a 	ret

080045d0 <_ZN9EtherCard7tcpSendEv>:

uint8_t EtherCard::tcpSend () {
 80045d0:	defffe04 	addi	sp,sp,-8
 80045d4:	dfc00115 	stw	ra,4(sp)
 80045d8:	df000015 	stw	fp,0(sp)
 80045dc:	d839883a 	mov	fp,sp
    www_fd = clientTcpReq(&tcp_result_cb, &tcp_datafill_cb, hisport);
 80045e0:	d0a0000b 	ldhu	r2,-32768(gp)
 80045e4:	10bfffcc 	andi	r2,r2,65535
 80045e8:	100d883a 	mov	r6,r2
 80045ec:	01420034 	movhi	r5,2048
 80045f0:	29515104 	addi	r5,r5,17732
 80045f4:	01020034 	movhi	r4,2048
 80045f8:	21115b04 	addi	r4,r4,17772
 80045fc:	80042480 	call	8004248 <_ZN9EtherCard12clientTcpReqEPFhhhttEPFthEt>
 8004600:	d0a70405 	stb	r2,-25584(gp)
    return www_fd;
 8004604:	d0a70403 	ldbu	r2,-25584(gp)
}
 8004608:	e037883a 	mov	sp,fp
 800460c:	dfc00117 	ldw	ra,4(sp)
 8004610:	df000017 	ldw	fp,0(sp)
 8004614:	dec00204 	addi	sp,sp,8
 8004618:	f800283a 	ret

0800461c <_ZN9EtherCard8tcpReplyEh>:

const char* EtherCard::tcpReply (uint8_t fd) {
 800461c:	defffe04 	addi	sp,sp,-8
 8004620:	df000115 	stw	fp,4(sp)
 8004624:	df000104 	addi	fp,sp,4
 8004628:	2005883a 	mov	r2,r4
 800462c:	e0bfff05 	stb	r2,-4(fp)
    if (result_fd != fd)
 8004630:	d0a00383 	ldbu	r2,-32754(gp)
 8004634:	10c03fcc 	andi	r3,r2,255
 8004638:	e0bfff03 	ldbu	r2,-4(fp)
 800463c:	18800226 	beq	r3,r2,8004648 <_ZN9EtherCard8tcpReplyEh+0x2c>
        return 0;
 8004640:	0005883a 	mov	r2,zero
 8004644:	00000306 	br	8004654 <_ZN9EtherCard8tcpReplyEh+0x38>
    result_fd = 123; // set to a bogus value to prevent future match
 8004648:	00801ec4 	movi	r2,123
 800464c:	d0a00385 	stb	r2,-32754(gp)
    return result_ptr;
 8004650:	d0a71117 	ldw	r2,-25532(gp)
}
 8004654:	e037883a 	mov	sp,fp
 8004658:	df000017 	ldw	fp,0(sp)
 800465c:	dec00104 	addi	sp,sp,4
 8004660:	f800283a 	ret

08004664 <_ZN9EtherCard20registerPingCallbackEPFvPhE>:

void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
 8004664:	defffe04 	addi	sp,sp,-8
 8004668:	df000115 	stw	fp,4(sp)
 800466c:	df000104 	addi	fp,sp,4
 8004670:	e13fff15 	stw	r4,-4(fp)
    icmp_cb = callback;
 8004674:	e0bfff17 	ldw	r2,-4(fp)
 8004678:	d0a70b15 	stw	r2,-25556(gp)
}
 800467c:	0001883a 	nop
 8004680:	e037883a 	mov	sp,fp
 8004684:	df000017 	ldw	fp,0(sp)
 8004688:	dec00104 	addi	sp,sp,4
 800468c:	f800283a 	ret

08004690 <_ZN9EtherCard24packetLoopIcmpCheckReplyEPKh>:

uint8_t EtherCard::packetLoopIcmpCheckReply (const uint8_t *ip_monitoredhost) {
 8004690:	defffd04 	addi	sp,sp,-12
 8004694:	dfc00215 	stw	ra,8(sp)
 8004698:	df000115 	stw	fp,4(sp)
 800469c:	df000104 	addi	fp,sp,4
 80046a0:	e13fff15 	stw	r4,-4(fp)
    return gPB[IP_PROTO_P]==IP_PROTO_ICMP_V &&
 80046a4:	008200b4 	movhi	r2,2050
 80046a8:	10a54b04 	addi	r2,r2,-27348
 80046ac:	108005c3 	ldbu	r2,23(r2)
           gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREPLY_V &&
           gPB[ICMP_DATA_P]== PINGPATTERN &&
 80046b0:	10803fcc 	andi	r2,r2,255
 80046b4:	10800058 	cmpnei	r2,r2,1
 80046b8:	1000111e 	bne	r2,zero,8004700 <_ZN9EtherCard24packetLoopIcmpCheckReplyEPKh+0x70>
    icmp_cb = callback;
}

uint8_t EtherCard::packetLoopIcmpCheckReply (const uint8_t *ip_monitoredhost) {
    return gPB[IP_PROTO_P]==IP_PROTO_ICMP_V &&
           gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREPLY_V &&
 80046bc:	008200b4 	movhi	r2,2050
 80046c0:	10a54b04 	addi	r2,r2,-27348
 80046c4:	10800883 	ldbu	r2,34(r2)
void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
}

uint8_t EtherCard::packetLoopIcmpCheckReply (const uint8_t *ip_monitoredhost) {
    return gPB[IP_PROTO_P]==IP_PROTO_ICMP_V &&
 80046c8:	10803fcc 	andi	r2,r2,255
 80046cc:	10000c1e 	bne	r2,zero,8004700 <_ZN9EtherCard24packetLoopIcmpCheckReplyEPKh+0x70>
           gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREPLY_V &&
           gPB[ICMP_DATA_P]== PINGPATTERN &&
 80046d0:	008200b4 	movhi	r2,2050
 80046d4:	10a54b04 	addi	r2,r2,-27348
 80046d8:	10800a83 	ldbu	r2,42(r2)
    icmp_cb = callback;
}

uint8_t EtherCard::packetLoopIcmpCheckReply (const uint8_t *ip_monitoredhost) {
    return gPB[IP_PROTO_P]==IP_PROTO_ICMP_V &&
           gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREPLY_V &&
 80046dc:	10803fcc 	andi	r2,r2,255
 80046e0:	10801098 	cmpnei	r2,r2,66
 80046e4:	1000061e 	bne	r2,zero,8004700 <_ZN9EtherCard24packetLoopIcmpCheckReplyEPKh+0x70>
           gPB[ICMP_DATA_P]== PINGPATTERN &&
           check_ip_message_is_from(ip_monitoredhost);
 80046e8:	e13fff17 	ldw	r4,-4(fp)
 80046ec:	800277c0 	call	800277c <_ZL24check_ip_message_is_fromPKh>
}

uint8_t EtherCard::packetLoopIcmpCheckReply (const uint8_t *ip_monitoredhost) {
    return gPB[IP_PROTO_P]==IP_PROTO_ICMP_V &&
           gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREPLY_V &&
           gPB[ICMP_DATA_P]== PINGPATTERN &&
 80046f0:	10803fcc 	andi	r2,r2,255
 80046f4:	10000226 	beq	r2,zero,8004700 <_ZN9EtherCard24packetLoopIcmpCheckReplyEPKh+0x70>
 80046f8:	00800044 	movi	r2,1
 80046fc:	00000106 	br	8004704 <_ZN9EtherCard24packetLoopIcmpCheckReplyEPKh+0x74>
 8004700:	0005883a 	mov	r2,zero
           check_ip_message_is_from(ip_monitoredhost);
}
 8004704:	e037883a 	mov	sp,fp
 8004708:	dfc00117 	ldw	ra,4(sp)
 800470c:	df000017 	ldw	fp,0(sp)
 8004710:	dec00204 	addi	sp,sp,8
 8004714:	f800283a 	ret

08004718 <_ZN9EtherCard6acceptEtt>:

uint16_t EtherCard::accept(const uint16_t port, uint16_t plen) {
 8004718:	defffb04 	addi	sp,sp,-20
 800471c:	dfc00415 	stw	ra,16(sp)
 8004720:	df000315 	stw	fp,12(sp)
 8004724:	df000304 	addi	fp,sp,12
 8004728:	2007883a 	mov	r3,r4
 800472c:	2805883a 	mov	r2,r5
 8004730:	e0fffe0d 	sth	r3,-8(fp)
 8004734:	e0bfff0d 	sth	r2,-4(fp)
    uint16_t pos;

    if (gPB[TCP_DST_PORT_H_P] == (port >> 8) &&
 8004738:	008200b4 	movhi	r2,2050
 800473c:	10a54b04 	addi	r2,r2,-27348
 8004740:	10800903 	ldbu	r2,36(r2)
 8004744:	10c03fcc 	andi	r3,r2,255
 8004748:	e0bffe0b 	ldhu	r2,-8(fp)
 800474c:	1005d23a 	srai	r2,r2,8
 8004750:	1880321e 	bne	r3,r2,800481c <_ZN9EtherCard6acceptEtt+0x104>
            gPB[TCP_DST_PORT_L_P] == ((uint8_t) port))
 8004754:	008200b4 	movhi	r2,2050
 8004758:	10a54b04 	addi	r2,r2,-27348
 800475c:	10800943 	ldbu	r2,37(r2)
 8004760:	e0fffe0b 	ldhu	r3,-8(fp)
 8004764:	1809883a 	mov	r4,r3
}

uint16_t EtherCard::accept(const uint16_t port, uint16_t plen) {
    uint16_t pos;

    if (gPB[TCP_DST_PORT_H_P] == (port >> 8) &&
 8004768:	10c03fcc 	andi	r3,r2,255
 800476c:	20803fcc 	andi	r2,r4,255
 8004770:	18802a1e 	bne	r3,r2,800481c <_ZN9EtherCard6acceptEtt+0x104>
            gPB[TCP_DST_PORT_L_P] == ((uint8_t) port))
    {   //Packet targeted at specified port
        if (gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V)
 8004774:	008200b4 	movhi	r2,2050
 8004778:	10a54b04 	addi	r2,r2,-27348
 800477c:	10800bc3 	ldbu	r2,47(r2)
 8004780:	10803fcc 	andi	r2,r2,255
 8004784:	1080008c 	andi	r2,r2,2
 8004788:	10000226 	beq	r2,zero,8004794 <_ZN9EtherCard6acceptEtt+0x7c>
            make_tcp_synack_from_syn(); //send SYN+ACK
 800478c:	8002f980 	call	8002f98 <_ZL24make_tcp_synack_from_synv>
 8004790:	00002206 	br	800481c <_ZN9EtherCard6acceptEtt+0x104>
        else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
 8004794:	008200b4 	movhi	r2,2050
 8004798:	10a54b04 	addi	r2,r2,-27348
 800479c:	10800bc3 	ldbu	r2,47(r2)
 80047a0:	10803fcc 	andi	r2,r2,255
 80047a4:	1080040c 	andi	r2,r2,16
 80047a8:	10001c26 	beq	r2,zero,800481c <_ZN9EtherCard6acceptEtt+0x104>
        {   //This is an acknowledgement to our SYN+ACK so let's start processing that payload
            info_data_len = getTcpPayloadLength();
 80047ac:	80030c40 	call	80030c4 <_ZN9EtherCard19getTcpPayloadLengthEv>
 80047b0:	d0a7108d 	sth	r2,-25534(gp)
            if (info_data_len > 0)
 80047b4:	d0a7108b 	ldhu	r2,-25534(gp)
 80047b8:	10bfffcc 	andi	r2,r2,65535
 80047bc:	10000e26 	beq	r2,zero,80047f8 <_ZN9EtherCard6acceptEtt+0xe0>
            {   //Got some data
                pos = TCP_DATA_START; // TCP_DATA_START is a formula
 80047c0:	008200b4 	movhi	r2,2050
 80047c4:	10a54b04 	addi	r2,r2,-27348
 80047c8:	10800b83 	ldbu	r2,46(r2)
 80047cc:	10803fcc 	andi	r2,r2,255
 80047d0:	1005d13a 	srai	r2,r2,4
 80047d4:	1085883a 	add	r2,r2,r2
 80047d8:	1085883a 	add	r2,r2,r2
 80047dc:	10800884 	addi	r2,r2,34
 80047e0:	e0bffd0d 	sth	r2,-12(fp)
                //!@todo no idea what this check pos<=plen-8 does; changed this to pos<=plen as otw. perfectly valid tcp packets are ignored; still if anybody has any idea please leave a comment
                if (pos <= plen)
 80047e4:	e0bffd0b 	ldhu	r2,-12(fp)
 80047e8:	e0ffff0b 	ldhu	r3,-4(fp)
 80047ec:	18800b36 	bltu	r3,r2,800481c <_ZN9EtherCard6acceptEtt+0x104>
                    return pos;
 80047f0:	e0bffd0b 	ldhu	r2,-12(fp)
 80047f4:	00000a06 	br	8004820 <_ZN9EtherCard6acceptEtt+0x108>
            }
            else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V)
 80047f8:	008200b4 	movhi	r2,2050
 80047fc:	10a54b04 	addi	r2,r2,-27348
 8004800:	10800bc3 	ldbu	r2,47(r2)
 8004804:	10803fcc 	andi	r2,r2,255
 8004808:	1080004c 	andi	r2,r2,1
 800480c:	10000326 	beq	r2,zero,800481c <_ZN9EtherCard6acceptEtt+0x104>
                make_tcp_ack_from_any(0,0); //No data so close connection
 8004810:	000b883a 	mov	r5,zero
 8004814:	0009883a 	mov	r4,zero
 8004818:	80031540 	call	8003154 <_ZL21make_tcp_ack_from_anysh>
        }
    }
    return 0;
 800481c:	0005883a 	mov	r2,zero
}
 8004820:	e037883a 	mov	sp,fp
 8004824:	dfc00117 	ldw	ra,4(sp)
 8004828:	df000017 	ldw	fp,0(sp)
 800482c:	dec00204 	addi	sp,sp,8
 8004830:	f800283a 	ret

08004834 <_ZN9EtherCard10packetLoopEt>:

uint16_t EtherCard::packetLoop (uint16_t plen) {
 8004834:	defffb04 	addi	sp,sp,-20
 8004838:	dfc00415 	stw	ra,16(sp)
 800483c:	df000315 	stw	fp,12(sp)
 8004840:	df000304 	addi	fp,sp,12
 8004844:	2005883a 	mov	r2,r4
 8004848:	e0bfff0d 	sth	r2,-4(fp)
    uint16_t len;

#if ETHERCARD_DHCP
    if(using_dhcp) {
 800484c:	d0a6f3c3 	ldbu	r2,-25649(gp)
 8004850:	10803fcc 	andi	r2,r2,255
 8004854:	10000326 	beq	r2,zero,8004864 <_ZN9EtherCard10packetLoopEt+0x30>
        ether.DhcpStateMachine(plen);
 8004858:	e0bfff0b 	ldhu	r2,-4(fp)
 800485c:	1009883a 	mov	r4,r2
 8004860:	8000e740 	call	8000e74 <_ZN9EtherCard16DhcpStateMachineEt>
    }
#endif

    if (plen==0) {
 8004864:	e0bfff0b 	ldhu	r2,-4(fp)
 8004868:	1000661e 	bne	r2,zero,8004a04 <_ZN9EtherCard10packetLoopEt+0x1d0>
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if (((waitgwmac & WGW_INITIAL_ARP) || (waitgwmac & WGW_REFRESHING)) &&
 800486c:	d0a71003 	ldbu	r2,-25536(gp)
 8004870:	10803fcc 	andi	r2,r2,255
 8004874:	1080004c 	andi	r2,r2,1
                delaycnt==0 && isLinkUp()) {
 8004878:	1000041e 	bne	r2,zero,800488c <_ZN9EtherCard10packetLoopEt+0x58>
    }
#endif

    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if (((waitgwmac & WGW_INITIAL_ARP) || (waitgwmac & WGW_REFRESHING)) &&
 800487c:	d0a71003 	ldbu	r2,-25536(gp)
 8004880:	10803fcc 	andi	r2,r2,255
 8004884:	1080010c 	andi	r2,r2,4
 8004888:	10000826 	beq	r2,zero,80048ac <_ZN9EtherCard10packetLoopEt+0x78>
                delaycnt==0 && isLinkUp()) {
 800488c:	d0a6f48b 	ldhu	r2,-25646(gp)
    }
#endif

    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if (((waitgwmac & WGW_INITIAL_ARP) || (waitgwmac & WGW_REFRESHING)) &&
 8004890:	10bfffcc 	andi	r2,r2,65535
 8004894:	1000051e 	bne	r2,zero,80048ac <_ZN9EtherCard10packetLoopEt+0x78>
                delaycnt==0 && isLinkUp()) {
 8004898:	8001e500 	call	8001e50 <_ZN8ENC28J608isLinkUpEv>
 800489c:	10803fcc 	andi	r2,r2,255
 80048a0:	10000226 	beq	r2,zero,80048ac <_ZN9EtherCard10packetLoopEt+0x78>
 80048a4:	00800044 	movi	r2,1
 80048a8:	00000106 	br	80048b0 <_ZN9EtherCard10packetLoopEt+0x7c>
 80048ac:	0005883a 	mov	r2,zero
    }
#endif

    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if (((waitgwmac & WGW_INITIAL_ARP) || (waitgwmac & WGW_REFRESHING)) &&
 80048b0:	10803fcc 	andi	r2,r2,255
 80048b4:	10000526 	beq	r2,zero,80048cc <_ZN9EtherCard10packetLoopEt+0x98>
                delaycnt==0 && isLinkUp()) {
            client_arp_whohas(gwip);
 80048b8:	d126efc4 	addi	r4,gp,-25665
 80048bc:	8003dd00 	call	8003dd0 <_ZL17client_arp_whohasPh>
            waitgwmac |= WGW_ACCEPT_ARP_REPLY;
 80048c0:	d0a71003 	ldbu	r2,-25536(gp)
 80048c4:	10800214 	ori	r2,r2,8
 80048c8:	d0a71005 	stb	r2,-25536(gp)
        }
        delaycnt++;
 80048cc:	d0a6f48b 	ldhu	r2,-25646(gp)
 80048d0:	10800044 	addi	r2,r2,1
 80048d4:	d0a6f48d 	sth	r2,-25646(gp)

#if ETHERCARD_TCPCLIENT
        //Initiate TCP/IP session if pending
        if (tcp_client_state==TCP_STATE_SENDSYN && (waitgwmac & WGW_HAVE_GW_MAC)) { // send a syn
 80048d8:	d0a70143 	ldbu	r2,-25595(gp)
 80048dc:	10803fcc 	andi	r2,r2,255
 80048e0:	10800058 	cmpnei	r2,r2,1
 80048e4:	1000191e 	bne	r2,zero,800494c <_ZN9EtherCard10packetLoopEt+0x118>
 80048e8:	d0a71003 	ldbu	r2,-25536(gp)
 80048ec:	10803fcc 	andi	r2,r2,255
 80048f0:	1080008c 	andi	r2,r2,2
 80048f4:	10001526 	beq	r2,zero,800494c <_ZN9EtherCard10packetLoopEt+0x118>
            tcp_client_state = TCP_STATE_SYNSENT;
 80048f8:	00800084 	movi	r2,2
 80048fc:	d0a70145 	stb	r2,-25595(gp)
            tcpclient_src_port_l++; // allocate a new port
 8004900:	d0a00303 	ldbu	r2,-32756(gp)
 8004904:	10800044 	addi	r2,r2,1
 8004908:	d0a00305 	stb	r2,-32756(gp)
            client_syn(((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port_h,tcp_client_port_l);
 800490c:	d0a70103 	ldbu	r2,-25596(gp)
 8004910:	10803fcc 	andi	r2,r2,255
 8004914:	1004917a 	slli	r2,r2,5
 8004918:	1007883a 	mov	r3,r2
 800491c:	d0a00303 	ldbu	r2,-32756(gp)
 8004920:	108007cc 	andi	r2,r2,31
 8004924:	1884b03a 	or	r2,r3,r2
 8004928:	10803fcc 	andi	r2,r2,255
 800492c:	d0e70183 	ldbu	r3,-25594(gp)
 8004930:	18c03fcc 	andi	r3,r3,255
 8004934:	d12701c3 	ldbu	r4,-25593(gp)
 8004938:	21003fcc 	andi	r4,r4,255
 800493c:	200d883a 	mov	r6,r4
 8004940:	180b883a 	mov	r5,r3
 8004944:	1009883a 	mov	r4,r2
 8004948:	80040440 	call	8004044 <_ZL10client_synhhh>
        }
#endif

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
 800494c:	d166f1c4 	addi	r5,gp,-25657
 8004950:	d126ecc4 	addi	r4,gp,-25677
 8004954:	80027c00 	call	80027c0 <_ZL6is_lanPKhS0_>
 8004958:	10803fcc 	andi	r2,r2,255
 800495c:	10000a26 	beq	r2,zero,8004988 <_ZN9EtherCard10packetLoopEt+0x154>
 8004960:	d0a70dc3 	ldbu	r2,-25545(gp)
 8004964:	1080005c 	xori	r2,r2,1
 8004968:	10803fcc 	andi	r2,r2,255
 800496c:	10000626 	beq	r2,zero,8004988 <_ZN9EtherCard10packetLoopEt+0x154>
 8004970:	d0a70d83 	ldbu	r2,-25546(gp)
 8004974:	1080005c 	xori	r2,r2,1
 8004978:	10803fcc 	andi	r2,r2,255
 800497c:	10000226 	beq	r2,zero,8004988 <_ZN9EtherCard10packetLoopEt+0x154>
 8004980:	00800044 	movi	r2,1
 8004984:	00000106 	br	800498c <_ZN9EtherCard10packetLoopEt+0x158>
 8004988:	0005883a 	mov	r2,zero
 800498c:	10803fcc 	andi	r2,r2,255
 8004990:	10000426 	beq	r2,zero,80049a4 <_ZN9EtherCard10packetLoopEt+0x170>
            client_arp_whohas(dnsip);
 8004994:	d126f1c4 	addi	r4,gp,-25657
 8004998:	8003dd00 	call	8003dd0 <_ZL17client_arp_whohasPh>
            waiting_for_dns_mac = true;
 800499c:	00800044 	movi	r2,1
 80049a0:	d0a70d85 	stb	r2,-25546(gp)
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
 80049a4:	d166f2c4 	addi	r5,gp,-25653
 80049a8:	d126ecc4 	addi	r4,gp,-25677
 80049ac:	80027c00 	call	80027c0 <_ZL6is_lanPKhS0_>
 80049b0:	10803fcc 	andi	r2,r2,255
 80049b4:	10000a26 	beq	r2,zero,80049e0 <_ZN9EtherCard10packetLoopEt+0x1ac>
 80049b8:	d0a70e43 	ldbu	r2,-25543(gp)
 80049bc:	1080005c 	xori	r2,r2,1
 80049c0:	10803fcc 	andi	r2,r2,255
 80049c4:	10000626 	beq	r2,zero,80049e0 <_ZN9EtherCard10packetLoopEt+0x1ac>
 80049c8:	d0a70e03 	ldbu	r2,-25544(gp)
 80049cc:	1080005c 	xori	r2,r2,1
 80049d0:	10803fcc 	andi	r2,r2,255
 80049d4:	10000226 	beq	r2,zero,80049e0 <_ZN9EtherCard10packetLoopEt+0x1ac>
 80049d8:	00800044 	movi	r2,1
 80049dc:	00000106 	br	80049e4 <_ZN9EtherCard10packetLoopEt+0x1b0>
 80049e0:	0005883a 	mov	r2,zero
 80049e4:	10803fcc 	andi	r2,r2,255
 80049e8:	10000426 	beq	r2,zero,80049fc <_ZN9EtherCard10packetLoopEt+0x1c8>
            client_arp_whohas(hisip);
 80049ec:	d126f2c4 	addi	r4,gp,-25653
 80049f0:	8003dd00 	call	8003dd0 <_ZL17client_arp_whohasPh>
            waiting_for_dest_mac = true;
 80049f4:	00800044 	movi	r2,1
 80049f8:	d0a70e05 	stb	r2,-25544(gp)
        }

        return 0;
 80049fc:	0005883a 	mov	r2,zero
 8004a00:	00016906 	br	8004fa8 <_ZN9EtherCard10packetLoopEt+0x774>
    }

    if (eth_type_is_arp_and_my_ip(plen))
 8004a04:	e0bfff0b 	ldhu	r2,-4(fp)
 8004a08:	1009883a 	mov	r4,r2
 8004a0c:	800287c0 	call	800287c <_ZL25eth_type_is_arp_and_my_ipt>
 8004a10:	10803fcc 	andi	r2,r2,255
 8004a14:	1004c03a 	cmpne	r2,r2,zero
 8004a18:	10803fcc 	andi	r2,r2,255
 8004a1c:	10004726 	beq	r2,zero,8004b3c <_ZN9EtherCard10packetLoopEt+0x308>
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
 8004a20:	008200b4 	movhi	r2,2050
 8004a24:	10a54b04 	addi	r2,r2,-27348
 8004a28:	10800543 	ldbu	r2,21(r2)
 8004a2c:	10803fcc 	andi	r2,r2,255
 8004a30:	10800058 	cmpnei	r2,r2,1
 8004a34:	1000011e 	bne	r2,zero,8004a3c <_ZN9EtherCard10packetLoopEt+0x208>
            make_arp_answer_from_request();
 8004a38:	8002cb80 	call	8002cb8 <_ZL28make_arp_answer_from_requestv>
        if ((waitgwmac & WGW_ACCEPT_ARP_REPLY) && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_mac(gwip, gwmacaddr))
 8004a3c:	d0a71003 	ldbu	r2,-25536(gp)
 8004a40:	10803fcc 	andi	r2,r2,255
 8004a44:	1080020c 	andi	r2,r2,8
 8004a48:	10000d26 	beq	r2,zero,8004a80 <_ZN9EtherCard10packetLoopEt+0x24c>
 8004a4c:	008200b4 	movhi	r2,2050
 8004a50:	10a54b04 	addi	r2,r2,-27348
 8004a54:	10800543 	ldbu	r2,21(r2)
 8004a58:	10803fcc 	andi	r2,r2,255
 8004a5c:	10800098 	cmpnei	r2,r2,2
 8004a60:	1000071e 	bne	r2,zero,8004a80 <_ZN9EtherCard10packetLoopEt+0x24c>
 8004a64:	d1670e84 	addi	r5,gp,-25542
 8004a68:	d126efc4 	addi	r4,gp,-25665
 8004a6c:	8003f180 	call	8003f18 <_ZL16client_store_macPhS_>
 8004a70:	10803fcc 	andi	r2,r2,255
 8004a74:	10000226 	beq	r2,zero,8004a80 <_ZN9EtherCard10packetLoopEt+0x24c>
 8004a78:	00800044 	movi	r2,1
 8004a7c:	00000106 	br	8004a84 <_ZN9EtherCard10packetLoopEt+0x250>
 8004a80:	0005883a 	mov	r2,zero
 8004a84:	10803fcc 	andi	r2,r2,255
 8004a88:	10000226 	beq	r2,zero,8004a94 <_ZN9EtherCard10packetLoopEt+0x260>
            waitgwmac = WGW_HAVE_GW_MAC;
 8004a8c:	00800084 	movi	r2,2
 8004a90:	d0a71005 	stb	r2,-25536(gp)
        if (!has_dns_mac && waiting_for_dns_mac && client_store_mac(dnsip, destmacaddr)) {
 8004a94:	d0a70dc3 	ldbu	r2,-25545(gp)
 8004a98:	1080005c 	xori	r2,r2,1
 8004a9c:	10803fcc 	andi	r2,r2,255
 8004aa0:	10000a26 	beq	r2,zero,8004acc <_ZN9EtherCard10packetLoopEt+0x298>
 8004aa4:	d0a70d83 	ldbu	r2,-25546(gp)
 8004aa8:	10803fcc 	andi	r2,r2,255
 8004aac:	10000726 	beq	r2,zero,8004acc <_ZN9EtherCard10packetLoopEt+0x298>
 8004ab0:	d1670c04 	addi	r5,gp,-25552
 8004ab4:	d126f1c4 	addi	r4,gp,-25657
 8004ab8:	8003f180 	call	8003f18 <_ZL16client_store_macPhS_>
 8004abc:	10803fcc 	andi	r2,r2,255
 8004ac0:	10000226 	beq	r2,zero,8004acc <_ZN9EtherCard10packetLoopEt+0x298>
 8004ac4:	00800044 	movi	r2,1
 8004ac8:	00000106 	br	8004ad0 <_ZN9EtherCard10packetLoopEt+0x29c>
 8004acc:	0005883a 	mov	r2,zero
 8004ad0:	10803fcc 	andi	r2,r2,255
 8004ad4:	10000326 	beq	r2,zero,8004ae4 <_ZN9EtherCard10packetLoopEt+0x2b0>
            has_dns_mac = true;
 8004ad8:	00800044 	movi	r2,1
 8004adc:	d0a70dc5 	stb	r2,-25545(gp)
            waiting_for_dns_mac = false;
 8004ae0:	d0270d85 	stb	zero,-25546(gp)
        }
        if (!has_dest_mac && waiting_for_dest_mac && client_store_mac(hisip, destmacaddr)) {
 8004ae4:	d0a70e43 	ldbu	r2,-25543(gp)
 8004ae8:	1080005c 	xori	r2,r2,1
 8004aec:	10803fcc 	andi	r2,r2,255
 8004af0:	10000a26 	beq	r2,zero,8004b1c <_ZN9EtherCard10packetLoopEt+0x2e8>
 8004af4:	d0a70e03 	ldbu	r2,-25544(gp)
 8004af8:	10803fcc 	andi	r2,r2,255
 8004afc:	10000726 	beq	r2,zero,8004b1c <_ZN9EtherCard10packetLoopEt+0x2e8>
 8004b00:	d1670c04 	addi	r5,gp,-25552
 8004b04:	d126f2c4 	addi	r4,gp,-25653
 8004b08:	8003f180 	call	8003f18 <_ZL16client_store_macPhS_>
 8004b0c:	10803fcc 	andi	r2,r2,255
 8004b10:	10000226 	beq	r2,zero,8004b1c <_ZN9EtherCard10packetLoopEt+0x2e8>
 8004b14:	00800044 	movi	r2,1
 8004b18:	00000106 	br	8004b20 <_ZN9EtherCard10packetLoopEt+0x2ec>
 8004b1c:	0005883a 	mov	r2,zero
 8004b20:	10803fcc 	andi	r2,r2,255
 8004b24:	10000326 	beq	r2,zero,8004b34 <_ZN9EtherCard10packetLoopEt+0x300>
            has_dest_mac = true;
 8004b28:	00800044 	movi	r2,1
 8004b2c:	d0a70e45 	stb	r2,-25543(gp)
            waiting_for_dest_mac = false;
 8004b30:	d0270e05 	stb	zero,-25544(gp)
        }
        return 0;
 8004b34:	0005883a 	mov	r2,zero
 8004b38:	00011b06 	br	8004fa8 <_ZN9EtherCard10packetLoopEt+0x774>
    }

    if (eth_type_is_ip_and_my_ip(plen)==0)
 8004b3c:	e0bfff0b 	ldhu	r2,-4(fp)
 8004b40:	1009883a 	mov	r4,r2
 8004b44:	800290c0 	call	800290c <_ZL24eth_type_is_ip_and_my_ipt>
 8004b48:	10803fcc 	andi	r2,r2,255
 8004b4c:	1005003a 	cmpeq	r2,r2,zero
 8004b50:	10803fcc 	andi	r2,r2,255
 8004b54:	10000226 	beq	r2,zero,8004b60 <_ZN9EtherCard10packetLoopEt+0x32c>
    {   //Not IP so ignoring
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
 8004b58:	0005883a 	mov	r2,zero
 8004b5c:	00011206 	br	8004fa8 <_ZN9EtherCard10packetLoopEt+0x774>
    }

#if ETHERCARD_ICMP
    if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
 8004b60:	008200b4 	movhi	r2,2050
 8004b64:	10a54b04 	addi	r2,r2,-27348
 8004b68:	108005c3 	ldbu	r2,23(r2)
 8004b6c:	10803fcc 	andi	r2,r2,255
 8004b70:	10800058 	cmpnei	r2,r2,1
 8004b74:	1000111e 	bne	r2,zero,8004bbc <_ZN9EtherCard10packetLoopEt+0x388>
 8004b78:	008200b4 	movhi	r2,2050
 8004b7c:	10a54b04 	addi	r2,r2,-27348
 8004b80:	10800883 	ldbu	r2,34(r2)
 8004b84:	10803fcc 	andi	r2,r2,255
 8004b88:	10800218 	cmpnei	r2,r2,8
 8004b8c:	10000b1e 	bne	r2,zero,8004bbc <_ZN9EtherCard10packetLoopEt+0x388>
    {   //Service ICMP echo request (ping)
        if (icmp_cb)
 8004b90:	d0a70b17 	ldw	r2,-25556(gp)
 8004b94:	10000426 	beq	r2,zero,8004ba8 <_ZN9EtherCard10packetLoopEt+0x374>
            (*icmp_cb)(&(gPB[IP_SRC_P]));
 8004b98:	d0a70b17 	ldw	r2,-25556(gp)
 8004b9c:	010200b4 	movhi	r4,2050
 8004ba0:	21255184 	addi	r4,r4,-27322
 8004ba4:	103ee83a 	callr	r2
        make_echo_reply_from_request(plen);
 8004ba8:	e0bfff0b 	ldhu	r2,-4(fp)
 8004bac:	1009883a 	mov	r4,r2
 8004bb0:	8002d740 	call	8002d74 <_ZL28make_echo_reply_from_requestt>
        return 0;
 8004bb4:	0005883a 	mov	r2,zero
 8004bb8:	0000fb06 	br	8004fa8 <_ZN9EtherCard10packetLoopEt+0x774>
    }
#endif
#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
 8004bbc:	80052380 	call	8005238 <_ZN9EtherCard18udpServerListeningEv>
 8004bc0:	10803fcc 	andi	r2,r2,255
 8004bc4:	10000826 	beq	r2,zero,8004be8 <_ZN9EtherCard10packetLoopEt+0x3b4>
 8004bc8:	008200b4 	movhi	r2,2050
 8004bcc:	10a54b04 	addi	r2,r2,-27348
 8004bd0:	108005c3 	ldbu	r2,23(r2)
 8004bd4:	10803fcc 	andi	r2,r2,255
 8004bd8:	10800458 	cmpnei	r2,r2,17
 8004bdc:	1000021e 	bne	r2,zero,8004be8 <_ZN9EtherCard10packetLoopEt+0x3b4>
 8004be0:	00800044 	movi	r2,1
 8004be4:	00000106 	br	8004bec <_ZN9EtherCard10packetLoopEt+0x3b8>
 8004be8:	0005883a 	mov	r2,zero
 8004bec:	10803fcc 	andi	r2,r2,255
 8004bf0:	10000726 	beq	r2,zero,8004c10 <_ZN9EtherCard10packetLoopEt+0x3dc>
    {   //Call UDP server handler (callback) if one is defined for this packet
        if(ether.udpServerHasProcessedPacket(plen))
 8004bf4:	e0bfff0b 	ldhu	r2,-4(fp)
 8004bf8:	1009883a 	mov	r4,r2
 8004bfc:	80052600 	call	8005260 <_ZN9EtherCard27udpServerHasProcessedPacketEt>
 8004c00:	10803fcc 	andi	r2,r2,255
 8004c04:	10000226 	beq	r2,zero,8004c10 <_ZN9EtherCard10packetLoopEt+0x3dc>
            return 0; //An UDP server handler (callback) has processed this packet
 8004c08:	0005883a 	mov	r2,zero
 8004c0c:	0000e606 	br	8004fa8 <_ZN9EtherCard10packetLoopEt+0x774>
    }
#endif

    if (plen<54 || gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
 8004c10:	e0bfff0b 	ldhu	r2,-4(fp)
 8004c14:	10800db0 	cmpltui	r2,r2,54
 8004c18:	1000061e 	bne	r2,zero,8004c34 <_ZN9EtherCard10packetLoopEt+0x400>
 8004c1c:	008200b4 	movhi	r2,2050
 8004c20:	10a54b04 	addi	r2,r2,-27348
 8004c24:	108005c3 	ldbu	r2,23(r2)
 8004c28:	10803fcc 	andi	r2,r2,255
 8004c2c:	108001a0 	cmpeqi	r2,r2,6
 8004c30:	1000021e 	bne	r2,zero,8004c3c <_ZN9EtherCard10packetLoopEt+0x408>
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes
 8004c34:	0005883a 	mov	r2,zero
 8004c38:	0000db06 	br	8004fa8 <_ZN9EtherCard10packetLoopEt+0x774>

#if ETHERCARD_TCPCLIENT
    if (gPB[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H)
 8004c3c:	008200b4 	movhi	r2,2050
 8004c40:	10a54b04 	addi	r2,r2,-27348
 8004c44:	10800903 	ldbu	r2,36(r2)
 8004c48:	10803fcc 	andi	r2,r2,255
 8004c4c:	108002d8 	cmpnei	r2,r2,11
 8004c50:	1000cf1e 	bne	r2,zero,8004f90 <_ZN9EtherCard10packetLoopEt+0x75c>
    {   //Source port is in range reserved (by EtherCard) for client TCP/IP connections
        if (check_ip_message_is_from(hisip)==0)
 8004c54:	d126f2c4 	addi	r4,gp,-25653
 8004c58:	800277c0 	call	800277c <_ZL24check_ip_message_is_fromPKh>
 8004c5c:	10803fcc 	andi	r2,r2,255
 8004c60:	1005003a 	cmpeq	r2,r2,zero
 8004c64:	10803fcc 	andi	r2,r2,255
 8004c68:	10000226 	beq	r2,zero,8004c74 <_ZN9EtherCard10packetLoopEt+0x440>
            return 0; //Not current TCP/IP connection (only handle one at a time)
 8004c6c:	0005883a 	mov	r2,zero
 8004c70:	0000cd06 	br	8004fa8 <_ZN9EtherCard10packetLoopEt+0x774>
        if (gPB[TCP_FLAGS_P] & TCP_FLAGS_RST_V)
 8004c74:	008200b4 	movhi	r2,2050
 8004c78:	10a54b04 	addi	r2,r2,-27348
 8004c7c:	10800bc3 	ldbu	r2,47(r2)
 8004c80:	10803fcc 	andi	r2,r2,255
 8004c84:	1080010c 	andi	r2,r2,4
 8004c88:	10001226 	beq	r2,zero,8004cd4 <_ZN9EtherCard10packetLoopEt+0x4a0>
        {   //TCP reset flagged
            if (client_tcp_result_cb)
 8004c8c:	d0a70217 	ldw	r2,-25592(gp)
 8004c90:	10000c26 	beq	r2,zero,8004cc4 <_ZN9EtherCard10packetLoopEt+0x490>
                (*client_tcp_result_cb)((gPB[TCP_DST_PORT_L_P]>>5)&0x7,3,0,0);
 8004c94:	d0e70217 	ldw	r3,-25592(gp)
 8004c98:	008200b4 	movhi	r2,2050
 8004c9c:	10a54b04 	addi	r2,r2,-27348
 8004ca0:	10800943 	ldbu	r2,37(r2)
 8004ca4:	10803fcc 	andi	r2,r2,255
 8004ca8:	1004d17a 	srli	r2,r2,5
 8004cac:	10803fcc 	andi	r2,r2,255
 8004cb0:	000f883a 	mov	r7,zero
 8004cb4:	000d883a 	mov	r6,zero
 8004cb8:	014000c4 	movi	r5,3
 8004cbc:	1009883a 	mov	r4,r2
 8004cc0:	183ee83a 	callr	r3
            tcp_client_state = TCP_STATE_CLOSING;
 8004cc4:	00800144 	movi	r2,5
 8004cc8:	d0a70145 	stb	r2,-25595(gp)
            return 0;
 8004ccc:	0005883a 	mov	r2,zero
 8004cd0:	0000b506 	br	8004fa8 <_ZN9EtherCard10packetLoopEt+0x774>
        }
        len = getTcpPayloadLength();
 8004cd4:	80030c40 	call	80030c4 <_ZN9EtherCard19getTcpPayloadLengthEv>
 8004cd8:	e0bffd0d 	sth	r2,-12(fp)
        if (tcp_client_state==TCP_STATE_SYNSENT)
 8004cdc:	d0a70143 	ldbu	r2,-25595(gp)
 8004ce0:	10803fcc 	andi	r2,r2,255
 8004ce4:	10800098 	cmpnei	r2,r2,2
 8004ce8:	10003c1e 	bne	r2,zero,8004ddc <_ZN9EtherCard10packetLoopEt+0x5a8>
        {   //Waiting for SYN-ACK
            if ((gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) && (gPB[TCP_FLAGS_P] &TCP_FLAGS_ACK_V))
 8004cec:	008200b4 	movhi	r2,2050
 8004cf0:	10a54b04 	addi	r2,r2,-27348
 8004cf4:	10800bc3 	ldbu	r2,47(r2)
 8004cf8:	10803fcc 	andi	r2,r2,255
 8004cfc:	1080008c 	andi	r2,r2,2
 8004d00:	10002126 	beq	r2,zero,8004d88 <_ZN9EtherCard10packetLoopEt+0x554>
 8004d04:	008200b4 	movhi	r2,2050
 8004d08:	10a54b04 	addi	r2,r2,-27348
 8004d0c:	10800bc3 	ldbu	r2,47(r2)
 8004d10:	10803fcc 	andi	r2,r2,255
 8004d14:	1080040c 	andi	r2,r2,16
 8004d18:	10001b26 	beq	r2,zero,8004d88 <_ZN9EtherCard10packetLoopEt+0x554>
            {   //SYN and ACK flags set so this is an acknowledgement to our SYN
                make_tcp_ack_from_any(0,0);
 8004d1c:	000b883a 	mov	r5,zero
 8004d20:	0009883a 	mov	r4,zero
 8004d24:	80031540 	call	8003154 <_ZL21make_tcp_ack_from_anysh>
                gPB[TCP_FLAGS_P] = TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V;
 8004d28:	008200b4 	movhi	r2,2050
 8004d2c:	10a54b04 	addi	r2,r2,-27348
 8004d30:	00c00604 	movi	r3,24
 8004d34:	10c00bc5 	stb	r3,47(r2)
                if (client_tcp_datafill_cb)
 8004d38:	d0a70317 	ldw	r2,-25588(gp)
 8004d3c:	10000b26 	beq	r2,zero,8004d6c <_ZN9EtherCard10packetLoopEt+0x538>
                    len = (*client_tcp_datafill_cb)((gPB[TCP_SRC_PORT_L_P]>>5)&0x7);
 8004d40:	d0e70317 	ldw	r3,-25588(gp)
 8004d44:	008200b4 	movhi	r2,2050
 8004d48:	10a54b04 	addi	r2,r2,-27348
 8004d4c:	108008c3 	ldbu	r2,35(r2)
 8004d50:	10803fcc 	andi	r2,r2,255
 8004d54:	1004d17a 	srli	r2,r2,5
 8004d58:	10803fcc 	andi	r2,r2,255
 8004d5c:	1009883a 	mov	r4,r2
 8004d60:	183ee83a 	callr	r3
 8004d64:	e0bffd0d 	sth	r2,-12(fp)
 8004d68:	00000106 	br	8004d70 <_ZN9EtherCard10packetLoopEt+0x53c>
                else
                    len = 0;
 8004d6c:	e03ffd0d 	sth	zero,-12(fp)
                tcp_client_state = TCP_STATE_ESTABLISHED;
 8004d70:	008000c4 	movi	r2,3
 8004d74:	d0a70145 	stb	r2,-25595(gp)
                make_tcp_ack_with_data_noflags(len);
 8004d78:	e0bffd0b 	ldhu	r2,-12(fp)
 8004d7c:	1009883a 	mov	r4,r2
 8004d80:	80032440 	call	8003244 <_ZL30make_tcp_ack_with_data_noflagst>
 8004d84:	00001306 	br	8004dd4 <_ZN9EtherCard10packetLoopEt+0x5a0>
            }
            else
            {   //Expecting SYN+ACK so reset and resend SYN
                tcp_client_state = TCP_STATE_SENDSYN; // retry
 8004d88:	00800044 	movi	r2,1
 8004d8c:	d0a70145 	stb	r2,-25595(gp)
                len++;
 8004d90:	e0bffd0b 	ldhu	r2,-12(fp)
 8004d94:	10800044 	addi	r2,r2,1
 8004d98:	e0bffd0d 	sth	r2,-12(fp)
                if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
 8004d9c:	008200b4 	movhi	r2,2050
 8004da0:	10a54b04 	addi	r2,r2,-27348
 8004da4:	10800bc3 	ldbu	r2,47(r2)
 8004da8:	10803fcc 	andi	r2,r2,255
 8004dac:	1080040c 	andi	r2,r2,16
 8004db0:	10000126 	beq	r2,zero,8004db8 <_ZN9EtherCard10packetLoopEt+0x584>
                    len = 0;
 8004db4:	e03ffd0d 	sth	zero,-12(fp)
                make_tcp_ack_from_any(len,TCP_FLAGS_RST_V);
 8004db8:	e0bffd0b 	ldhu	r2,-12(fp)
 8004dbc:	10bfffcc 	andi	r2,r2,65535
 8004dc0:	10a0001c 	xori	r2,r2,32768
 8004dc4:	10a00004 	addi	r2,r2,-32768
 8004dc8:	01400104 	movi	r5,4
 8004dcc:	1009883a 	mov	r4,r2
 8004dd0:	80031540 	call	8003154 <_ZL21make_tcp_ack_from_anysh>
            }
            return 0;
 8004dd4:	0005883a 	mov	r2,zero
 8004dd8:	00007306 	br	8004fa8 <_ZN9EtherCard10packetLoopEt+0x774>
        }
        if (tcp_client_state==TCP_STATE_ESTABLISHED && len>0)
 8004ddc:	d0a70143 	ldbu	r2,-25595(gp)
 8004de0:	10803fcc 	andi	r2,r2,255
 8004de4:	108000d8 	cmpnei	r2,r2,3
 8004de8:	1000431e 	bne	r2,zero,8004ef8 <_ZN9EtherCard10packetLoopEt+0x6c4>
 8004dec:	e0bffd0b 	ldhu	r2,-12(fp)
 8004df0:	10004126 	beq	r2,zero,8004ef8 <_ZN9EtherCard10packetLoopEt+0x6c4>
        {   //TCP connection established so read data
            if (client_tcp_result_cb) {
 8004df4:	d0a70217 	ldw	r2,-25592(gp)
 8004df8:	10003f26 	beq	r2,zero,8004ef8 <_ZN9EtherCard10packetLoopEt+0x6c4>
                uint16_t tcpstart = TCP_DATA_START; // TCP_DATA_START is a formula
 8004dfc:	008200b4 	movhi	r2,2050
 8004e00:	10a54b04 	addi	r2,r2,-27348
 8004e04:	10800b83 	ldbu	r2,46(r2)
 8004e08:	10803fcc 	andi	r2,r2,255
 8004e0c:	1005d13a 	srai	r2,r2,4
 8004e10:	1085883a 	add	r2,r2,r2
 8004e14:	1085883a 	add	r2,r2,r2
 8004e18:	10800884 	addi	r2,r2,34
 8004e1c:	e0bffd8d 	sth	r2,-10(fp)
                if (tcpstart>plen-8)
 8004e20:	e0bffd8b 	ldhu	r2,-10(fp)
 8004e24:	e0ffff0b 	ldhu	r3,-4(fp)
 8004e28:	18fffe04 	addi	r3,r3,-8
 8004e2c:	1880030e 	bge	r3,r2,8004e3c <_ZN9EtherCard10packetLoopEt+0x608>
                    tcpstart = plen-8; // dummy but save
 8004e30:	e0bfff0b 	ldhu	r2,-4(fp)
 8004e34:	10bffe04 	addi	r2,r2,-8
 8004e38:	e0bffd8d 	sth	r2,-10(fp)
                uint16_t save_len = len;
 8004e3c:	e0bffd0b 	ldhu	r2,-12(fp)
 8004e40:	e0bffe0d 	sth	r2,-8(fp)
                if (tcpstart+len>plen)
 8004e44:	e0fffd8b 	ldhu	r3,-10(fp)
 8004e48:	e0bffd0b 	ldhu	r2,-12(fp)
 8004e4c:	1885883a 	add	r2,r3,r2
 8004e50:	e0ffff0b 	ldhu	r3,-4(fp)
 8004e54:	1880040e 	bge	r3,r2,8004e68 <_ZN9EtherCard10packetLoopEt+0x634>
                    save_len = plen-tcpstart;
 8004e58:	e0ffff0b 	ldhu	r3,-4(fp)
 8004e5c:	e0bffd8b 	ldhu	r2,-10(fp)
 8004e60:	1885c83a 	sub	r2,r3,r2
 8004e64:	e0bffe0d 	sth	r2,-8(fp)
                (*client_tcp_result_cb)((gPB[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len); //Call TCP handler (callback) function
 8004e68:	d0e70217 	ldw	r3,-25592(gp)
 8004e6c:	008200b4 	movhi	r2,2050
 8004e70:	10a54b04 	addi	r2,r2,-27348
 8004e74:	10800943 	ldbu	r2,37(r2)
 8004e78:	10803fcc 	andi	r2,r2,255
 8004e7c:	1004d17a 	srli	r2,r2,5
 8004e80:	10803fcc 	andi	r2,r2,255
 8004e84:	e13ffd8b 	ldhu	r4,-10(fp)
 8004e88:	e17ffe0b 	ldhu	r5,-8(fp)
 8004e8c:	280f883a 	mov	r7,r5
 8004e90:	200d883a 	mov	r6,r4
 8004e94:	000b883a 	mov	r5,zero
 8004e98:	1009883a 	mov	r4,r2
 8004e9c:	183ee83a 	callr	r3

                if(persist_tcp_connection)
 8004ea0:	d0a6f403 	ldbu	r2,-25648(gp)
 8004ea4:	10803fcc 	andi	r2,r2,255
 8004ea8:	10000826 	beq	r2,zero,8004ecc <_ZN9EtherCard10packetLoopEt+0x698>
                {   //Keep connection alive by sending ACK
                    make_tcp_ack_from_any(len,TCP_FLAGS_PUSH_V);
 8004eac:	e0bffd0b 	ldhu	r2,-12(fp)
 8004eb0:	10bfffcc 	andi	r2,r2,65535
 8004eb4:	10a0001c 	xori	r2,r2,32768
 8004eb8:	10a00004 	addi	r2,r2,-32768
 8004ebc:	01400204 	movi	r5,8
 8004ec0:	1009883a 	mov	r4,r2
 8004ec4:	80031540 	call	8003154 <_ZL21make_tcp_ack_from_anysh>
 8004ec8:	00000906 	br	8004ef0 <_ZN9EtherCard10packetLoopEt+0x6bc>
                }
                else
                {   //Close connection
                    make_tcp_ack_from_any(len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
 8004ecc:	e0bffd0b 	ldhu	r2,-12(fp)
 8004ed0:	10bfffcc 	andi	r2,r2,65535
 8004ed4:	10a0001c 	xori	r2,r2,32768
 8004ed8:	10a00004 	addi	r2,r2,-32768
 8004edc:	01400244 	movi	r5,9
 8004ee0:	1009883a 	mov	r4,r2
 8004ee4:	80031540 	call	8003154 <_ZL21make_tcp_ack_from_anysh>
                    tcp_client_state = TCP_STATE_CLOSED;
 8004ee8:	00800184 	movi	r2,6
 8004eec:	d0a70145 	stb	r2,-25595(gp)
                }
                return 0;
 8004ef0:	0005883a 	mov	r2,zero
 8004ef4:	00002c06 	br	8004fa8 <_ZN9EtherCard10packetLoopEt+0x774>
            }
        }
        if (tcp_client_state != TCP_STATE_CLOSING)
 8004ef8:	d0a70143 	ldbu	r2,-25595(gp)
 8004efc:	10803fcc 	andi	r2,r2,255
 8004f00:	10800160 	cmpeqi	r2,r2,5
 8004f04:	1000201e 	bne	r2,zero,8004f88 <_ZN9EtherCard10packetLoopEt+0x754>
        {   //
            if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V) {
 8004f08:	008200b4 	movhi	r2,2050
 8004f0c:	10a54b04 	addi	r2,r2,-27348
 8004f10:	10800bc3 	ldbu	r2,47(r2)
 8004f14:	10803fcc 	andi	r2,r2,255
 8004f18:	1080004c 	andi	r2,r2,1
 8004f1c:	10001126 	beq	r2,zero,8004f64 <_ZN9EtherCard10packetLoopEt+0x730>
                if(tcp_client_state == TCP_STATE_ESTABLISHED) {
 8004f20:	d0a70143 	ldbu	r2,-25595(gp)
 8004f24:	10803fcc 	andi	r2,r2,255
 8004f28:	108000d8 	cmpnei	r2,r2,3
 8004f2c:	1000021e 	bne	r2,zero,8004f38 <_ZN9EtherCard10packetLoopEt+0x704>
                    return 0; // In some instances FIN is received *before* DATA.  If that is the case, we just return here and keep looking for the data packet
 8004f30:	0005883a 	mov	r2,zero
 8004f34:	00001c06 	br	8004fa8 <_ZN9EtherCard10packetLoopEt+0x774>
                }
                make_tcp_ack_from_any(len+1,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
 8004f38:	e0bffd0b 	ldhu	r2,-12(fp)
 8004f3c:	10800044 	addi	r2,r2,1
 8004f40:	10bfffcc 	andi	r2,r2,65535
 8004f44:	10a0001c 	xori	r2,r2,32768
 8004f48:	10a00004 	addi	r2,r2,-32768
 8004f4c:	01400244 	movi	r5,9
 8004f50:	1009883a 	mov	r4,r2
 8004f54:	80031540 	call	8003154 <_ZL21make_tcp_ack_from_anysh>
                tcp_client_state = TCP_STATE_CLOSED; // connection terminated
 8004f58:	00800184 	movi	r2,6
 8004f5c:	d0a70145 	stb	r2,-25595(gp)
 8004f60:	00000906 	br	8004f88 <_ZN9EtherCard10packetLoopEt+0x754>
            } else if (len>0) {
 8004f64:	e0bffd0b 	ldhu	r2,-12(fp)
 8004f68:	10000726 	beq	r2,zero,8004f88 <_ZN9EtherCard10packetLoopEt+0x754>
                make_tcp_ack_from_any(len,0);
 8004f6c:	e0bffd0b 	ldhu	r2,-12(fp)
 8004f70:	10bfffcc 	andi	r2,r2,65535
 8004f74:	10a0001c 	xori	r2,r2,32768
 8004f78:	10a00004 	addi	r2,r2,-32768
 8004f7c:	000b883a 	mov	r5,zero
 8004f80:	1009883a 	mov	r4,r2
 8004f84:	80031540 	call	8003154 <_ZL21make_tcp_ack_from_anysh>
            }
        }
        return 0;
 8004f88:	0005883a 	mov	r2,zero
 8004f8c:	00000606 	br	8004fa8 <_ZN9EtherCard10packetLoopEt+0x774>
    }
#endif

#if ETHERCARD_TCPSERVER
    //If we are here then this is a TCP/IP packet targeted at us and not related to our client connection so accept
    return accept(hisport, plen);
 8004f90:	d0a0000b 	ldhu	r2,-32768(gp)
 8004f94:	10bfffcc 	andi	r2,r2,65535
 8004f98:	e0ffff0b 	ldhu	r3,-4(fp)
 8004f9c:	180b883a 	mov	r5,r3
 8004fa0:	1009883a 	mov	r4,r2
 8004fa4:	80047180 	call	8004718 <_ZN9EtherCard6acceptEtt>
#endif
}
 8004fa8:	e037883a 	mov	sp,fp
 8004fac:	dfc00117 	ldw	ra,4(sp)
 8004fb0:	df000017 	ldw	fp,0(sp)
 8004fb4:	dec00204 	addi	sp,sp,8
 8004fb8:	f800283a 	ret

08004fbc <_ZN9EtherCard20persistTcpConnectionEb>:

void EtherCard::persistTcpConnection(bool persist) {
 8004fbc:	defffe04 	addi	sp,sp,-8
 8004fc0:	df000115 	stw	fp,4(sp)
 8004fc4:	df000104 	addi	fp,sp,4
 8004fc8:	2005883a 	mov	r2,r4
 8004fcc:	e0bfff05 	stb	r2,-4(fp)
    persist_tcp_connection = persist;
 8004fd0:	e0bfff03 	ldbu	r2,-4(fp)
 8004fd4:	d0a6f405 	stb	r2,-25648(gp)
}
 8004fd8:	0001883a 	nop
 8004fdc:	e037883a 	mov	sp,fp
 8004fe0:	df000017 	ldw	fp,0(sp)
 8004fe4:	dec00104 	addi	sp,sp,4
 8004fe8:	f800283a 	ret

08004fec <_ZN9EtherCard21udpServerListenOnPortEPFvtPhtPKctEt>:
} UdpServerListener;

UdpServerListener listeners[UDPSERVER_MAXLISTENERS];
byte numListeners = 0;

void EtherCard::udpServerListenOnPort(UdpServerCallback callback, uint16_t port) {
 8004fec:	defffd04 	addi	sp,sp,-12
 8004ff0:	df000215 	stw	fp,8(sp)
 8004ff4:	df000204 	addi	fp,sp,8
 8004ff8:	e13ffe15 	stw	r4,-8(fp)
 8004ffc:	2805883a 	mov	r2,r5
 8005000:	e0bfff0d 	sth	r2,-4(fp)
    if(numListeners < UDPSERVER_MAXLISTENERS)
 8005004:	d0a71303 	ldbu	r2,-25524(gp)
 8005008:	10803fcc 	andi	r2,r2,255
 800500c:	10800228 	cmpgeui	r2,r2,8
 8005010:	1000191e 	bne	r2,zero,8005078 <_ZN9EtherCard21udpServerListenOnPortEPFvtPhtPKctEt+0x8c>
    {
        listeners[numListeners] = (UdpServerListener) {
            callback, port, true
        };
 8005014:	d0a71303 	ldbu	r2,-25524(gp)
 8005018:	10c03fcc 	andi	r3,r2,255
 800501c:	008200b4 	movhi	r2,2050
 8005020:	10a53b04 	addi	r2,r2,-27412
 8005024:	180890fa 	slli	r4,r3,3
 8005028:	1105883a 	add	r2,r2,r4
 800502c:	e13ffe17 	ldw	r4,-8(fp)
 8005030:	11000015 	stw	r4,0(r2)
 8005034:	008200b4 	movhi	r2,2050
 8005038:	10a53b04 	addi	r2,r2,-27412
 800503c:	180890fa 	slli	r4,r3,3
 8005040:	1105883a 	add	r2,r2,r4
 8005044:	10800104 	addi	r2,r2,4
 8005048:	e13fff0b 	ldhu	r4,-4(fp)
 800504c:	1100000d 	sth	r4,0(r2)
 8005050:	008200b4 	movhi	r2,2050
 8005054:	10a53b04 	addi	r2,r2,-27412
 8005058:	180690fa 	slli	r3,r3,3
 800505c:	10c5883a 	add	r2,r2,r3
 8005060:	10800184 	addi	r2,r2,6
 8005064:	00c00044 	movi	r3,1
 8005068:	10c00005 	stb	r3,0(r2)
        numListeners++;
 800506c:	d0a71303 	ldbu	r2,-25524(gp)
 8005070:	10800044 	addi	r2,r2,1
 8005074:	d0a71305 	stb	r2,-25524(gp)
    }
}
 8005078:	0001883a 	nop
 800507c:	e037883a 	mov	sp,fp
 8005080:	df000017 	ldw	fp,0(sp)
 8005084:	dec00104 	addi	sp,sp,4
 8005088:	f800283a 	ret

0800508c <_ZN9EtherCard26udpServerPauseListenOnPortEt>:

void EtherCard::udpServerPauseListenOnPort(uint16_t port) {
 800508c:	defffd04 	addi	sp,sp,-12
 8005090:	df000215 	stw	fp,8(sp)
 8005094:	df000204 	addi	fp,sp,8
 8005098:	2005883a 	mov	r2,r4
 800509c:	e0bfff0d 	sth	r2,-4(fp)
    for(int i = 0; i < numListeners; i++)
 80050a0:	e03ffe15 	stw	zero,-8(fp)
 80050a4:	d0a71303 	ldbu	r2,-25524(gp)
 80050a8:	10803fcc 	andi	r2,r2,255
 80050ac:	e0fffe17 	ldw	r3,-8(fp)
 80050b0:	1880260e 	bge	r3,r2,800514c <_ZN9EtherCard26udpServerPauseListenOnPortEt+0xc0>
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((byte) listeners[i].port)) {
 80050b4:	008200b4 	movhi	r2,2050
 80050b8:	10a54b04 	addi	r2,r2,-27348
 80050bc:	10800903 	ldbu	r2,36(r2)
 80050c0:	10c03fcc 	andi	r3,r2,255
 80050c4:	008200b4 	movhi	r2,2050
 80050c8:	10a53b04 	addi	r2,r2,-27412
 80050cc:	e13ffe17 	ldw	r4,-8(fp)
 80050d0:	200890fa 	slli	r4,r4,3
 80050d4:	1105883a 	add	r2,r2,r4
 80050d8:	10800104 	addi	r2,r2,4
 80050dc:	1080000b 	ldhu	r2,0(r2)
 80050e0:	10bfffcc 	andi	r2,r2,65535
 80050e4:	1005d23a 	srai	r2,r2,8
 80050e8:	1880141e 	bne	r3,r2,800513c <_ZN9EtherCard26udpServerPauseListenOnPortEt+0xb0>
 80050ec:	008200b4 	movhi	r2,2050
 80050f0:	10a54b04 	addi	r2,r2,-27348
 80050f4:	11000943 	ldbu	r4,37(r2)
 80050f8:	008200b4 	movhi	r2,2050
 80050fc:	10a53b04 	addi	r2,r2,-27412
 8005100:	e0fffe17 	ldw	r3,-8(fp)
 8005104:	180690fa 	slli	r3,r3,3
 8005108:	10c5883a 	add	r2,r2,r3
 800510c:	10800104 	addi	r2,r2,4
 8005110:	1080000b 	ldhu	r2,0(r2)
 8005114:	20c03fcc 	andi	r3,r4,255
 8005118:	10803fcc 	andi	r2,r2,255
 800511c:	1880071e 	bne	r3,r2,800513c <_ZN9EtherCard26udpServerPauseListenOnPortEt+0xb0>
            listeners[i].listening = false;
 8005120:	008200b4 	movhi	r2,2050
 8005124:	10a53b04 	addi	r2,r2,-27412
 8005128:	e0fffe17 	ldw	r3,-8(fp)
 800512c:	180690fa 	slli	r3,r3,3
 8005130:	10c5883a 	add	r2,r2,r3
 8005134:	10800184 	addi	r2,r2,6
 8005138:	10000005 	stb	zero,0(r2)
        numListeners++;
    }
}

void EtherCard::udpServerPauseListenOnPort(uint16_t port) {
    for(int i = 0; i < numListeners; i++)
 800513c:	e0bffe17 	ldw	r2,-8(fp)
 8005140:	10800044 	addi	r2,r2,1
 8005144:	e0bffe15 	stw	r2,-8(fp)
 8005148:	003fd606 	br	80050a4 <_ZN9EtherCard26udpServerPauseListenOnPortEt+0x18>
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((byte) listeners[i].port)) {
            listeners[i].listening = false;
        }
    }
}
 800514c:	0001883a 	nop
 8005150:	e037883a 	mov	sp,fp
 8005154:	df000017 	ldw	fp,0(sp)
 8005158:	dec00104 	addi	sp,sp,4
 800515c:	f800283a 	ret

08005160 <_ZN9EtherCard27udpServerResumeListenOnPortEt>:

void EtherCard::udpServerResumeListenOnPort(uint16_t port) {
 8005160:	defffd04 	addi	sp,sp,-12
 8005164:	df000215 	stw	fp,8(sp)
 8005168:	df000204 	addi	fp,sp,8
 800516c:	2005883a 	mov	r2,r4
 8005170:	e0bfff0d 	sth	r2,-4(fp)
    for(int i = 0; i < numListeners; i++)
 8005174:	e03ffe15 	stw	zero,-8(fp)
 8005178:	d0a71303 	ldbu	r2,-25524(gp)
 800517c:	10803fcc 	andi	r2,r2,255
 8005180:	e0fffe17 	ldw	r3,-8(fp)
 8005184:	1880270e 	bge	r3,r2,8005224 <_ZN9EtherCard27udpServerResumeListenOnPortEt+0xc4>
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((byte) listeners[i].port)) {
 8005188:	008200b4 	movhi	r2,2050
 800518c:	10a54b04 	addi	r2,r2,-27348
 8005190:	10800903 	ldbu	r2,36(r2)
 8005194:	10c03fcc 	andi	r3,r2,255
 8005198:	008200b4 	movhi	r2,2050
 800519c:	10a53b04 	addi	r2,r2,-27412
 80051a0:	e13ffe17 	ldw	r4,-8(fp)
 80051a4:	200890fa 	slli	r4,r4,3
 80051a8:	1105883a 	add	r2,r2,r4
 80051ac:	10800104 	addi	r2,r2,4
 80051b0:	1080000b 	ldhu	r2,0(r2)
 80051b4:	10bfffcc 	andi	r2,r2,65535
 80051b8:	1005d23a 	srai	r2,r2,8
 80051bc:	1880151e 	bne	r3,r2,8005214 <_ZN9EtherCard27udpServerResumeListenOnPortEt+0xb4>
 80051c0:	008200b4 	movhi	r2,2050
 80051c4:	10a54b04 	addi	r2,r2,-27348
 80051c8:	11000943 	ldbu	r4,37(r2)
 80051cc:	008200b4 	movhi	r2,2050
 80051d0:	10a53b04 	addi	r2,r2,-27412
 80051d4:	e0fffe17 	ldw	r3,-8(fp)
 80051d8:	180690fa 	slli	r3,r3,3
 80051dc:	10c5883a 	add	r2,r2,r3
 80051e0:	10800104 	addi	r2,r2,4
 80051e4:	1080000b 	ldhu	r2,0(r2)
 80051e8:	20c03fcc 	andi	r3,r4,255
 80051ec:	10803fcc 	andi	r2,r2,255
 80051f0:	1880081e 	bne	r3,r2,8005214 <_ZN9EtherCard27udpServerResumeListenOnPortEt+0xb4>
            listeners[i].listening = true;
 80051f4:	008200b4 	movhi	r2,2050
 80051f8:	10a53b04 	addi	r2,r2,-27412
 80051fc:	e0fffe17 	ldw	r3,-8(fp)
 8005200:	180690fa 	slli	r3,r3,3
 8005204:	10c5883a 	add	r2,r2,r3
 8005208:	10800184 	addi	r2,r2,6
 800520c:	00c00044 	movi	r3,1
 8005210:	10c00005 	stb	r3,0(r2)
        }
    }
}

void EtherCard::udpServerResumeListenOnPort(uint16_t port) {
    for(int i = 0; i < numListeners; i++)
 8005214:	e0bffe17 	ldw	r2,-8(fp)
 8005218:	10800044 	addi	r2,r2,1
 800521c:	e0bffe15 	stw	r2,-8(fp)
 8005220:	003fd506 	br	8005178 <_ZN9EtherCard27udpServerResumeListenOnPortEt+0x18>
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((byte) listeners[i].port)) {
            listeners[i].listening = true;
        }
    }
}
 8005224:	0001883a 	nop
 8005228:	e037883a 	mov	sp,fp
 800522c:	df000017 	ldw	fp,0(sp)
 8005230:	dec00104 	addi	sp,sp,4
 8005234:	f800283a 	ret

08005238 <_ZN9EtherCard18udpServerListeningEv>:

bool EtherCard::udpServerListening() {
 8005238:	deffff04 	addi	sp,sp,-4
 800523c:	df000015 	stw	fp,0(sp)
 8005240:	d839883a 	mov	fp,sp
    return numListeners > 0;
 8005244:	d0a71303 	ldbu	r2,-25524(gp)
 8005248:	10803fcc 	andi	r2,r2,255
 800524c:	1004c03a 	cmpne	r2,r2,zero
}
 8005250:	e037883a 	mov	sp,fp
 8005254:	df000017 	ldw	fp,0(sp)
 8005258:	dec00104 	addi	sp,sp,4
 800525c:	f800283a 	ret

08005260 <_ZN9EtherCard27udpServerHasProcessedPacketEt>:

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
 8005260:	defff904 	addi	sp,sp,-28
 8005264:	dfc00615 	stw	ra,24(sp)
 8005268:	df000515 	stw	fp,20(sp)
 800526c:	df000504 	addi	fp,sp,20
 8005270:	2005883a 	mov	r2,r4
 8005274:	e0bfff0d 	sth	r2,-4(fp)
    bool packetProcessed = false;
 8005278:	e03ffc05 	stb	zero,-16(fp)
    for(int i = 0; i < numListeners; i++)
 800527c:	e03ffd15 	stw	zero,-12(fp)
 8005280:	d0a71303 	ldbu	r2,-25524(gp)
 8005284:	10803fcc 	andi	r2,r2,255
 8005288:	e0fffd17 	ldw	r3,-12(fp)
 800528c:	18805c0e 	bge	r3,r2,8005400 <_ZN9EtherCard27udpServerHasProcessedPacketEt+0x1a0>
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((byte) listeners[i].port) && listeners[i].listening)
 8005290:	008200b4 	movhi	r2,2050
 8005294:	10a54b04 	addi	r2,r2,-27348
 8005298:	10800903 	ldbu	r2,36(r2)
 800529c:	10c03fcc 	andi	r3,r2,255
 80052a0:	008200b4 	movhi	r2,2050
 80052a4:	10a53b04 	addi	r2,r2,-27412
 80052a8:	e13ffd17 	ldw	r4,-12(fp)
 80052ac:	200890fa 	slli	r4,r4,3
 80052b0:	1105883a 	add	r2,r2,r4
 80052b4:	10800104 	addi	r2,r2,4
 80052b8:	1080000b 	ldhu	r2,0(r2)
 80052bc:	10bfffcc 	andi	r2,r2,65535
 80052c0:	1005d23a 	srai	r2,r2,8
 80052c4:	18804a1e 	bne	r3,r2,80053f0 <_ZN9EtherCard27udpServerHasProcessedPacketEt+0x190>
 80052c8:	008200b4 	movhi	r2,2050
 80052cc:	10a54b04 	addi	r2,r2,-27348
 80052d0:	11000943 	ldbu	r4,37(r2)
 80052d4:	008200b4 	movhi	r2,2050
 80052d8:	10a53b04 	addi	r2,r2,-27412
 80052dc:	e0fffd17 	ldw	r3,-12(fp)
 80052e0:	180690fa 	slli	r3,r3,3
 80052e4:	10c5883a 	add	r2,r2,r3
 80052e8:	10800104 	addi	r2,r2,4
 80052ec:	1080000b 	ldhu	r2,0(r2)
 80052f0:	20c03fcc 	andi	r3,r4,255
 80052f4:	10803fcc 	andi	r2,r2,255
 80052f8:	18803d1e 	bne	r3,r2,80053f0 <_ZN9EtherCard27udpServerHasProcessedPacketEt+0x190>
 80052fc:	008200b4 	movhi	r2,2050
 8005300:	10a53b04 	addi	r2,r2,-27412
 8005304:	e0fffd17 	ldw	r3,-12(fp)
 8005308:	180690fa 	slli	r3,r3,3
 800530c:	10c5883a 	add	r2,r2,r3
 8005310:	10800184 	addi	r2,r2,6
 8005314:	10800003 	ldbu	r2,0(r2)
 8005318:	10803fcc 	andi	r2,r2,255
 800531c:	10003426 	beq	r2,zero,80053f0 <_ZN9EtherCard27udpServerHasProcessedPacketEt+0x190>
        {
            uint16_t datalen = (uint16_t) (gPB[UDP_LEN_H_P] << 8)  + gPB[UDP_LEN_L_P] - UDP_HEADER_LEN;
 8005320:	008200b4 	movhi	r2,2050
 8005324:	10a54b04 	addi	r2,r2,-27348
 8005328:	10800983 	ldbu	r2,38(r2)
 800532c:	10803fcc 	andi	r2,r2,255
 8005330:	1004923a 	slli	r2,r2,8
 8005334:	1007883a 	mov	r3,r2
 8005338:	008200b4 	movhi	r2,2050
 800533c:	10a54b04 	addi	r2,r2,-27348
 8005340:	108009c3 	ldbu	r2,39(r2)
 8005344:	10803fcc 	andi	r2,r2,255
 8005348:	1885883a 	add	r2,r3,r2
 800534c:	10bffe04 	addi	r2,r2,-8
 8005350:	e0bffe0d 	sth	r2,-8(fp)
            listeners[i].callback(
 8005354:	008200b4 	movhi	r2,2050
 8005358:	10a53b04 	addi	r2,r2,-27412
 800535c:	e0fffd17 	ldw	r3,-12(fp)
 8005360:	180690fa 	slli	r3,r3,3
 8005364:	10c5883a 	add	r2,r2,r3
 8005368:	12000017 	ldw	r8,0(r2)
                listeners[i].port,
 800536c:	008200b4 	movhi	r2,2050
 8005370:	10a53b04 	addi	r2,r2,-27412
 8005374:	e0fffd17 	ldw	r3,-12(fp)
 8005378:	180690fa 	slli	r3,r3,3
 800537c:	10c5883a 	add	r2,r2,r3
 8005380:	10800104 	addi	r2,r2,4
 8005384:	1080000b 	ldhu	r2,0(r2)
    for(int i = 0; i < numListeners; i++)
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((byte) listeners[i].port) && listeners[i].listening)
        {
            uint16_t datalen = (uint16_t) (gPB[UDP_LEN_H_P] << 8)  + gPB[UDP_LEN_L_P] - UDP_HEADER_LEN;
            listeners[i].callback(
 8005388:	127fffcc 	andi	r9,r2,65535
 800538c:	00c200b4 	movhi	r3,2050
 8005390:	18e55184 	addi	r3,r3,-27322
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
 8005394:	008200b4 	movhi	r2,2050
 8005398:	10a54b04 	addi	r2,r2,-27348
 800539c:	10800883 	ldbu	r2,34(r2)
 80053a0:	10803fcc 	andi	r2,r2,255
 80053a4:	1004923a 	slli	r2,r2,8
    for(int i = 0; i < numListeners; i++)
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((byte) listeners[i].port) && listeners[i].listening)
        {
            uint16_t datalen = (uint16_t) (gPB[UDP_LEN_H_P] << 8)  + gPB[UDP_LEN_L_P] - UDP_HEADER_LEN;
            listeners[i].callback(
 80053a8:	1009883a 	mov	r4,r2
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
 80053ac:	008200b4 	movhi	r2,2050
 80053b0:	10a54b04 	addi	r2,r2,-27348
 80053b4:	108008c3 	ldbu	r2,35(r2)
    for(int i = 0; i < numListeners; i++)
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((byte) listeners[i].port) && listeners[i].listening)
        {
            uint16_t datalen = (uint16_t) (gPB[UDP_LEN_H_P] << 8)  + gPB[UDP_LEN_L_P] - UDP_HEADER_LEN;
            listeners[i].callback(
 80053b8:	10803fcc 	andi	r2,r2,255
 80053bc:	2084b03a 	or	r2,r4,r2
 80053c0:	117fffcc 	andi	r5,r2,65535
 80053c4:	008200b4 	movhi	r2,2050
 80053c8:	10a55584 	addi	r2,r2,-27306
 80053cc:	e13ffe0b 	ldhu	r4,-8(fp)
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
 80053d0:	d9000015 	stw	r4,0(sp)
 80053d4:	100f883a 	mov	r7,r2
 80053d8:	280d883a 	mov	r6,r5
 80053dc:	180b883a 	mov	r5,r3
 80053e0:	4809883a 	mov	r4,r9
 80053e4:	403ee83a 	callr	r8
            packetProcessed = true;
 80053e8:	00800044 	movi	r2,1
 80053ec:	e0bffc05 	stb	r2,-16(fp)
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
 80053f0:	e0bffd17 	ldw	r2,-12(fp)
 80053f4:	10800044 	addi	r2,r2,1
 80053f8:	e0bffd15 	stw	r2,-12(fp)
 80053fc:	003fa006 	br	8005280 <_ZN9EtherCard27udpServerHasProcessedPacketEt+0x20>
                (const char *) (gPB + UDP_DATA_P),
                datalen);
            packetProcessed = true;
        }
    }
    return packetProcessed;
 8005400:	e0bffc03 	ldbu	r2,-16(fp)
}
 8005404:	e037883a 	mov	sp,fp
 8005408:	dfc00117 	ldw	ra,4(sp)
 800540c:	df000017 	ldw	fp,0(sp)
 8005410:	dec00204 	addi	sp,sp,8
 8005414:	f800283a 	ret

08005418 <_ZN9EtherCard7printIpEPKcPKh>:
#include "EtherCard.h"
#include <stdio.h>
#include <string.h>

void EtherCard::printIp (const char *msg, const uint8_t *buf) {
 8005418:	defffc04 	addi	sp,sp,-16
 800541c:	dfc00315 	stw	ra,12(sp)
 8005420:	df000215 	stw	fp,8(sp)
 8005424:	df000204 	addi	fp,sp,8
 8005428:	e13ffe15 	stw	r4,-8(fp)
 800542c:	e17fff15 	stw	r5,-4(fp)
    printf("%s", msg);
 8005430:	e17ffe17 	ldw	r5,-8(fp)
 8005434:	01020074 	movhi	r4,2049
 8005438:	21167604 	addi	r4,r4,23000
 800543c:	800650c0 	call	800650c <printf>
    EtherCard::printIp(buf);
 8005440:	e13fff17 	ldw	r4,-4(fp)
 8005444:	80054680 	call	8005468 <_ZN9EtherCard7printIpEPKh>
    printf("\n");
 8005448:	01000284 	movi	r4,10
 800544c:	80065500 	call	8006550 <putchar>
}
 8005450:	0001883a 	nop
 8005454:	e037883a 	mov	sp,fp
 8005458:	dfc00117 	ldw	ra,4(sp)
 800545c:	df000017 	ldw	fp,0(sp)
 8005460:	dec00204 	addi	sp,sp,8
 8005464:	f800283a 	ret

08005468 <_ZN9EtherCard7printIpEPKh>:

void EtherCard::printIp (const uint8_t *buf) {
 8005468:	defffc04 	addi	sp,sp,-16
 800546c:	dfc00315 	stw	ra,12(sp)
 8005470:	df000215 	stw	fp,8(sp)
 8005474:	df000204 	addi	fp,sp,8
 8005478:	e13fff15 	stw	r4,-4(fp)
    for (uint8_t i = 0; i < IP_LEN; ++i) {
 800547c:	e03ffe05 	stb	zero,-8(fp)
 8005480:	e0bffe03 	ldbu	r2,-8(fp)
 8005484:	10800128 	cmpgeui	r2,r2,4
 8005488:	1000121e 	bne	r2,zero,80054d4 <_ZN9EtherCard7printIpEPKh+0x6c>
        printf("%d", buf[i]);
 800548c:	e0bffe03 	ldbu	r2,-8(fp)
 8005490:	e0ffff17 	ldw	r3,-4(fp)
 8005494:	1885883a 	add	r2,r3,r2
 8005498:	10800003 	ldbu	r2,0(r2)
 800549c:	10803fcc 	andi	r2,r2,255
 80054a0:	100b883a 	mov	r5,r2
 80054a4:	01020074 	movhi	r4,2049
 80054a8:	21167704 	addi	r4,r4,23004
 80054ac:	800650c0 	call	800650c <printf>
        if (i < 3)
 80054b0:	e0bffe03 	ldbu	r2,-8(fp)
 80054b4:	108000e8 	cmpgeui	r2,r2,3
 80054b8:	1000021e 	bne	r2,zero,80054c4 <_ZN9EtherCard7printIpEPKh+0x5c>
            printf(".");
 80054bc:	01000b84 	movi	r4,46
 80054c0:	80065500 	call	8006550 <putchar>
    EtherCard::printIp(buf);
    printf("\n");
}

void EtherCard::printIp (const uint8_t *buf) {
    for (uint8_t i = 0; i < IP_LEN; ++i) {
 80054c4:	e0bffe03 	ldbu	r2,-8(fp)
 80054c8:	10800044 	addi	r2,r2,1
 80054cc:	e0bffe05 	stb	r2,-8(fp)
 80054d0:	003feb06 	br	8005480 <_ZN9EtherCard7printIpEPKh+0x18>
        printf("%d", buf[i]);
        if (i < 3)
            printf(".");
    }
}
 80054d4:	0001883a 	nop
 80054d8:	e037883a 	mov	sp,fp
 80054dc:	dfc00117 	ldw	ra,4(sp)
 80054e0:	df000017 	ldw	fp,0(sp)
 80054e4:	dec00204 	addi	sp,sp,8
 80054e8:	f800283a 	ret

080054ec <_ZN9EtherCard7copyMacEPhPKh>:

void EtherCard::copyMac (uint8_t *dst, const uint8_t *src) {
 80054ec:	defffc04 	addi	sp,sp,-16
 80054f0:	dfc00315 	stw	ra,12(sp)
 80054f4:	df000215 	stw	fp,8(sp)
 80054f8:	df000204 	addi	fp,sp,8
 80054fc:	e13ffe15 	stw	r4,-8(fp)
 8005500:	e17fff15 	stw	r5,-4(fp)
    memcpy(dst, src, ETH_LEN);
 8005504:	01800184 	movi	r6,6
 8005508:	e17fff17 	ldw	r5,-4(fp)
 800550c:	e13ffe17 	ldw	r4,-8(fp)
 8005510:	800626c0 	call	800626c <memcpy>
}
 8005514:	0001883a 	nop
 8005518:	e037883a 	mov	sp,fp
 800551c:	dfc00117 	ldw	ra,4(sp)
 8005520:	df000017 	ldw	fp,0(sp)
 8005524:	dec00204 	addi	sp,sp,8
 8005528:	f800283a 	ret

0800552c <_ZN9EtherCard6copyIpEPhPKh>:

void EtherCard::copyIp (uint8_t *dst, const uint8_t *src) {
 800552c:	defffc04 	addi	sp,sp,-16
 8005530:	dfc00315 	stw	ra,12(sp)
 8005534:	df000215 	stw	fp,8(sp)
 8005538:	df000204 	addi	fp,sp,8
 800553c:	e13ffe15 	stw	r4,-8(fp)
 8005540:	e17fff15 	stw	r5,-4(fp)
    memcpy(dst, src, IP_LEN);
 8005544:	01800104 	movi	r6,4
 8005548:	e17fff17 	ldw	r5,-4(fp)
 800554c:	e13ffe17 	ldw	r4,-8(fp)
 8005550:	800626c0 	call	800626c <memcpy>
}
 8005554:	0001883a 	nop
 8005558:	e037883a 	mov	sp,fp
 800555c:	dfc00117 	ldw	ra,4(sp)
 8005560:	df000017 	ldw	fp,0(sp)
 8005564:	dec00204 	addi	sp,sp,8
 8005568:	f800283a 	ret

0800556c <_ZL9gotPingedPh>:
//EtherCard ether;

uint8_t Ethernet::buffer[700];

// called when a ping comes in (replies to it are automatic)
static void gotPinged(uint8_t *ptr) { ether.printIp(">>> ping from: ", ptr); }
 800556c:	defffd04 	addi	sp,sp,-12
 8005570:	dfc00215 	stw	ra,8(sp)
 8005574:	df000115 	stw	fp,4(sp)
 8005578:	df000104 	addi	fp,sp,4
 800557c:	e13fff15 	stw	r4,-4(fp)
 8005580:	e17fff17 	ldw	r5,-4(fp)
 8005584:	01020074 	movhi	r4,2049
 8005588:	21167804 	addi	r4,r4,23008
 800558c:	80054180 	call	8005418 <_ZN9EtherCard7printIpEPKcPKh>
 8005590:	0001883a 	nop
 8005594:	e037883a 	mov	sp,fp
 8005598:	dfc00117 	ldw	ra,4(sp)
 800559c:	df000017 	ldw	fp,0(sp)
 80055a0:	dec00204 	addi	sp,sp,8
 80055a4:	f800283a 	ret

080055a8 <main>:

int main() {
 80055a8:	defffa04 	addi	sp,sp,-24
 80055ac:	dfc00515 	stw	ra,20(sp)
 80055b0:	df000415 	stw	fp,16(sp)
 80055b4:	dc000315 	stw	r16,12(sp)
 80055b8:	df000404 	addi	fp,sp,16
  printf("\n[pings]");
 80055bc:	01020074 	movhi	r4,2049
 80055c0:	21167c04 	addi	r4,r4,23024
 80055c4:	800650c0 	call	800650c <printf>


  // Change 'SS' to your Slave Select pin, if you arn't using the default pin
  uint16_t sz = sizeof ether.buffer;
 80055c8:	0080af04 	movi	r2,700
 80055cc:	e0bffd0d 	sth	r2,-12(fp)
  printf("Size: %x\n", sz);
 80055d0:	e0bffd0b 	ldhu	r2,-12(fp)
 80055d4:	100b883a 	mov	r5,r2
 80055d8:	01020074 	movhi	r4,2049
 80055dc:	21167f04 	addi	r4,r4,23036
 80055e0:	800650c0 	call	800650c <printf>
  if (ether.begin(sz, (const uint8_t*)mymac, SS) == 0)
 80055e4:	e0bffd0b 	ldhu	r2,-12(fp)
 80055e8:	000d883a 	mov	r6,zero
 80055ec:	d1600744 	addi	r5,gp,-32739
 80055f0:	1009883a 	mov	r4,r2
 80055f4:	800026c0 	call	800026c <_ZN9EtherCard5beginEtPKhh>
 80055f8:	10803fcc 	andi	r2,r2,255
 80055fc:	1005003a 	cmpeq	r2,r2,zero
 8005600:	10803fcc 	andi	r2,r2,255
 8005604:	10000326 	beq	r2,zero,8005614 <main+0x6c>
    printf("Failed to access Ethernet controller");
 8005608:	01020074 	movhi	r4,2049
 800560c:	21168204 	addi	r4,r4,23048
 8005610:	800650c0 	call	800650c <printf>

//  return 0;
   if (!ether.dhcpSetup())
 8005614:	01400044 	movi	r5,1
 8005618:	0009883a 	mov	r4,zero
 800561c:	8000c640 	call	8000c64 <_ZN9EtherCard9dhcpSetupEPKcb>
 8005620:	1080005c 	xori	r2,r2,1
 8005624:	10803fcc 	andi	r2,r2,255
 8005628:	10000326 	beq	r2,zero,8005638 <main+0x90>
     printf("DHCP failed");
 800562c:	01020074 	movhi	r4,2049
 8005630:	21168c04 	addi	r4,r4,23088
 8005634:	800650c0 	call	800650c <printf>
//  {
//      // handle failure to configure static IP address (current implementation always returns true!)
//	  printf("pain and suffering");
//  }

  ether.printIp("IP:  ", ether.myip);
 8005638:	d166ecc4 	addi	r5,gp,-25677
 800563c:	01020074 	movhi	r4,2049
 8005640:	21168f04 	addi	r4,r4,23100
 8005644:	80054180 	call	8005418 <_ZN9EtherCard7printIpEPKcPKh>
  ether.printIp("GW:  ", ether.gwip);
 8005648:	d166efc4 	addi	r5,gp,-25665
 800564c:	01020074 	movhi	r4,2049
 8005650:	21169104 	addi	r4,r4,23108
 8005654:	80054180 	call	8005418 <_ZN9EtherCard7printIpEPKcPKh>

  // use DNS to locate the IP address we want to ping
  if (!ether.dnsLookup("www.google.com"))
 8005658:	000b883a 	mov	r5,zero
 800565c:	01020074 	movhi	r4,2049
 8005660:	21169304 	addi	r4,r4,23116
 8005664:	800143c0 	call	800143c <_ZN9EtherCard9dnsLookupEPKcb>
 8005668:	1080005c 	xori	r2,r2,1
 800566c:	10803fcc 	andi	r2,r2,255
 8005670:	10000326 	beq	r2,zero,8005680 <main+0xd8>
    printf("DNS failed");
 8005674:	01020074 	movhi	r4,2049
 8005678:	21169704 	addi	r4,r4,23132
 800567c:	800650c0 	call	800650c <printf>
//  ether.hisip[0] = 192;
//  ether.hisip[1] = 168;
//  ether.hisip[2] = 0;
//  ether.hisip[3] = 241;

  ether.printIp("SRV: ", ether.hisip);
 8005680:	d166f2c4 	addi	r5,gp,-25653
 8005684:	01020074 	movhi	r4,2049
 8005688:	21169a04 	addi	r4,r4,23144
 800568c:	80054180 	call	8005418 <_ZN9EtherCard7printIpEPKcPKh>

  // call this to report others pinging us
  ether.registerPingCallback(gotPinged);
 8005690:	01020034 	movhi	r4,2048
 8005694:	21155b04 	addi	r4,r4,21868
 8005698:	80046640 	call	8004664 <_ZN9EtherCard20registerPingCallbackEPFvPhE>

  //   timer = -9999999; // start timing out right away
  time_t prevTime = time(NULL);
 800569c:	0009883a 	mov	r4,zero
 80056a0:	80068900 	call	8006890 <time>
 80056a4:	e0bffc15 	stw	r2,-16(fp)

  while (1) {
    uint16_t len = ether.packetReceive(); // go receive new packets
 80056a8:	800217c0 	call	800217c <_ZN8ENC28J6013packetReceiveEv>
 80056ac:	e0bffd8d 	sth	r2,-10(fp)
    uint16_t pos = ether.packetLoop(len); // respond to incoming pings
 80056b0:	e0bffd8b 	ldhu	r2,-10(fp)
 80056b4:	1009883a 	mov	r4,r2
 80056b8:	80048340 	call	8004834 <_ZN9EtherCard10packetLoopEt>
 80056bc:	e0bffe0d 	sth	r2,-8(fp)

    // report whenever a reply to our outgoing ping comes back
    if (len > 0 && ether.packetLoopIcmpCheckReply(ether.hisip))
 80056c0:	e0bffd8b 	ldhu	r2,-10(fp)
 80056c4:	10000626 	beq	r2,zero,80056e0 <main+0x138>
 80056c8:	d126f2c4 	addi	r4,gp,-25653
 80056cc:	80046900 	call	8004690 <_ZN9EtherCard24packetLoopIcmpCheckReplyEPKh>
 80056d0:	10803fcc 	andi	r2,r2,255
 80056d4:	10000226 	beq	r2,zero,80056e0 <main+0x138>
 80056d8:	00800044 	movi	r2,1
 80056dc:	00000106 	br	80056e4 <main+0x13c>
 80056e0:	0005883a 	mov	r2,zero
 80056e4:	10803fcc 	andi	r2,r2,255
 80056e8:	10001726 	beq	r2,zero,8005748 <main+0x1a0>
      printf("   %.f ms", difftime(time(NULL), prevTime) * 0.001);
 80056ec:	0009883a 	mov	r4,zero
 80056f0:	80068900 	call	8006890 <time>
 80056f4:	e17ffc17 	ldw	r5,-16(fp)
 80056f8:	1009883a 	mov	r4,r2
 80056fc:	80061d40 	call	80061d4 <difftime>
 8005700:	1011883a 	mov	r8,r2
 8005704:	1813883a 	mov	r9,r3
 8005708:	01b4bcb4 	movhi	r6,54002
 800570c:	31aa7f04 	addi	r6,r6,-22020
 8005710:	01cfd434 	movhi	r7,16208
 8005714:	39d89344 	addi	r7,r7,25165
 8005718:	4009883a 	mov	r4,r8
 800571c:	480b883a 	mov	r5,r9
 8005720:	80058b80 	call	80058b8 <__muldf3>
 8005724:	1009883a 	mov	r4,r2
 8005728:	180b883a 	mov	r5,r3
 800572c:	2005883a 	mov	r2,r4
 8005730:	2807883a 	mov	r3,r5
 8005734:	100b883a 	mov	r5,r2
 8005738:	180d883a 	mov	r6,r3
 800573c:	01020074 	movhi	r4,2049
 8005740:	21169c04 	addi	r4,r4,23152
 8005744:	800650c0 	call	800650c <printf>

    // ping a remote server once every few seconds
    if (difftime(time(NULL), prevTime) >= 5) {
 8005748:	0009883a 	mov	r4,zero
 800574c:	80068900 	call	8006890 <time>
 8005750:	e17ffc17 	ldw	r5,-16(fp)
 8005754:	1009883a 	mov	r4,r2
 8005758:	80061d40 	call	80061d4 <difftime>
 800575c:	1011883a 	mov	r8,r2
 8005760:	1813883a 	mov	r9,r3
 8005764:	04000044 	movi	r16,1
 8005768:	000d883a 	mov	r6,zero
 800576c:	01d00534 	movhi	r7,16404
 8005770:	4009883a 	mov	r4,r8
 8005774:	480b883a 	mov	r5,r9
 8005778:	80057dc0 	call	80057dc <__gedf2>
 800577c:	1000010e 	bge	r2,zero,8005784 <main+0x1dc>
 8005780:	0021883a 	mov	r16,zero
 8005784:	80803fcc 	andi	r2,r16,255
 8005788:	103fc726 	beq	r2,zero,80056a8 <main+0x100>
      ether.printIp("Pinging: ", ether.hisip);
 800578c:	d166f2c4 	addi	r5,gp,-25653
 8005790:	01020074 	movhi	r4,2049
 8005794:	21169f04 	addi	r4,r4,23164
 8005798:	80054180 	call	8005418 <_ZN9EtherCard7printIpEPKcPKh>
      prevTime = time(NULL);
 800579c:	0009883a 	mov	r4,zero
 80057a0:	80068900 	call	8006890 <time>
 80057a4:	e0bffc15 	stw	r2,-16(fp)
      ether.clientIcmpRequest(ether.hisip);
 80057a8:	d126f2c4 	addi	r4,gp,-25653
 80057ac:	800357c0 	call	800357c <_ZN9EtherCard17clientIcmpRequestEPKh>
  ether.registerPingCallback(gotPinged);

  //   timer = -9999999; // start timing out right away
  time_t prevTime = time(NULL);

  while (1) {
 80057b0:	003fbd06 	br	80056a8 <main+0x100>

080057b4 <__mulsi3>:
 80057b4:	0005883a 	mov	r2,zero
 80057b8:	20000726 	beq	r4,zero,80057d8 <__mulsi3+0x24>
 80057bc:	20c0004c 	andi	r3,r4,1
 80057c0:	2008d07a 	srli	r4,r4,1
 80057c4:	18000126 	beq	r3,zero,80057cc <__mulsi3+0x18>
 80057c8:	1145883a 	add	r2,r2,r5
 80057cc:	294b883a 	add	r5,r5,r5
 80057d0:	203ffa1e 	bne	r4,zero,80057bc <__mulsi3+0x8>
 80057d4:	f800283a 	ret
 80057d8:	f800283a 	ret

080057dc <__gedf2>:
 80057dc:	2804d53a 	srli	r2,r5,20
 80057e0:	3806d53a 	srli	r3,r7,20
 80057e4:	02000434 	movhi	r8,16
 80057e8:	423fffc4 	addi	r8,r8,-1
 80057ec:	1081ffcc 	andi	r2,r2,2047
 80057f0:	0241ffc4 	movi	r9,2047
 80057f4:	2a14703a 	and	r10,r5,r8
 80057f8:	18c1ffcc 	andi	r3,r3,2047
 80057fc:	3a10703a 	and	r8,r7,r8
 8005800:	280ad7fa 	srli	r5,r5,31
 8005804:	380ed7fa 	srli	r7,r7,31
 8005808:	12401d26 	beq	r2,r9,8005880 <__gedf2+0xa4>
 800580c:	0241ffc4 	movi	r9,2047
 8005810:	1a401226 	beq	r3,r9,800585c <__gedf2+0x80>
 8005814:	1000081e 	bne	r2,zero,8005838 <__gedf2+0x5c>
 8005818:	2296b03a 	or	r11,r4,r10
 800581c:	5813003a 	cmpeq	r9,r11,zero
 8005820:	1800091e 	bne	r3,zero,8005848 <__gedf2+0x6c>
 8005824:	3218b03a 	or	r12,r6,r8
 8005828:	6000071e 	bne	r12,zero,8005848 <__gedf2+0x6c>
 800582c:	0005883a 	mov	r2,zero
 8005830:	5800101e 	bne	r11,zero,8005874 <__gedf2+0x98>
 8005834:	f800283a 	ret
 8005838:	18000c1e 	bne	r3,zero,800586c <__gedf2+0x90>
 800583c:	3212b03a 	or	r9,r6,r8
 8005840:	48000c26 	beq	r9,zero,8005874 <__gedf2+0x98>
 8005844:	0013883a 	mov	r9,zero
 8005848:	39c03fcc 	andi	r7,r7,255
 800584c:	48000826 	beq	r9,zero,8005870 <__gedf2+0x94>
 8005850:	38000926 	beq	r7,zero,8005878 <__gedf2+0x9c>
 8005854:	00800044 	movi	r2,1
 8005858:	f800283a 	ret
 800585c:	3212b03a 	or	r9,r6,r8
 8005860:	483fec26 	beq	r9,zero,8005814 <__gedf2+0x38>
 8005864:	00bfff84 	movi	r2,-2
 8005868:	f800283a 	ret
 800586c:	39c03fcc 	andi	r7,r7,255
 8005870:	29c00626 	beq	r5,r7,800588c <__gedf2+0xb0>
 8005874:	283ff726 	beq	r5,zero,8005854 <__gedf2+0x78>
 8005878:	00bfffc4 	movi	r2,-1
 800587c:	f800283a 	ret
 8005880:	2292b03a 	or	r9,r4,r10
 8005884:	483fe126 	beq	r9,zero,800580c <__gedf2+0x30>
 8005888:	003ff606 	br	8005864 <__gedf2+0x88>
 800588c:	18bff916 	blt	r3,r2,8005874 <__gedf2+0x98>
 8005890:	10c00316 	blt	r2,r3,80058a0 <__gedf2+0xc4>
 8005894:	42bff736 	bltu	r8,r10,8005874 <__gedf2+0x98>
 8005898:	52000326 	beq	r10,r8,80058a8 <__gedf2+0xcc>
 800589c:	5200042e 	bgeu	r10,r8,80058b0 <__gedf2+0xd4>
 80058a0:	283fec1e 	bne	r5,zero,8005854 <__gedf2+0x78>
 80058a4:	003ff406 	br	8005878 <__gedf2+0x9c>
 80058a8:	313ff236 	bltu	r6,r4,8005874 <__gedf2+0x98>
 80058ac:	21bffc36 	bltu	r4,r6,80058a0 <__gedf2+0xc4>
 80058b0:	0005883a 	mov	r2,zero
 80058b4:	f800283a 	ret

080058b8 <__muldf3>:
 80058b8:	deffee04 	addi	sp,sp,-72
 80058bc:	dd000c15 	stw	r20,48(sp)
 80058c0:	2828d53a 	srli	r20,r5,20
 80058c4:	ddc00f15 	stw	r23,60(sp)
 80058c8:	282ed7fa 	srli	r23,r5,31
 80058cc:	dc000815 	stw	r16,32(sp)
 80058d0:	04000434 	movhi	r16,16
 80058d4:	dcc00b15 	stw	r19,44(sp)
 80058d8:	843fffc4 	addi	r16,r16,-1
 80058dc:	dfc01115 	stw	ra,68(sp)
 80058e0:	df001015 	stw	fp,64(sp)
 80058e4:	dd800e15 	stw	r22,56(sp)
 80058e8:	dd400d15 	stw	r21,52(sp)
 80058ec:	dc800a15 	stw	r18,40(sp)
 80058f0:	dc400915 	stw	r17,36(sp)
 80058f4:	a501ffcc 	andi	r20,r20,2047
 80058f8:	2c20703a 	and	r16,r5,r16
 80058fc:	b827883a 	mov	r19,r23
 8005900:	ba403fcc 	andi	r9,r23,255
 8005904:	a0006026 	beq	r20,zero,8005a88 <__muldf3+0x1d0>
 8005908:	0081ffc4 	movi	r2,2047
 800590c:	202d883a 	mov	r22,r4
 8005910:	a0803626 	beq	r20,r2,80059ec <__muldf3+0x134>
 8005914:	84000434 	orhi	r16,r16,16
 8005918:	200ad77a 	srli	r5,r4,29
 800591c:	800490fa 	slli	r2,r16,3
 8005920:	202c90fa 	slli	r22,r4,3
 8005924:	a53f0044 	addi	r20,r20,-1023
 8005928:	28a0b03a 	or	r16,r5,r2
 800592c:	002b883a 	mov	r21,zero
 8005930:	000b883a 	mov	r5,zero
 8005934:	3804d53a 	srli	r2,r7,20
 8005938:	3838d7fa 	srli	fp,r7,31
 800593c:	04400434 	movhi	r17,16
 8005940:	8c7fffc4 	addi	r17,r17,-1
 8005944:	1081ffcc 	andi	r2,r2,2047
 8005948:	3025883a 	mov	r18,r6
 800594c:	3c62703a 	and	r17,r7,r17
 8005950:	e2803fcc 	andi	r10,fp,255
 8005954:	10006d26 	beq	r2,zero,8005b0c <__muldf3+0x254>
 8005958:	00c1ffc4 	movi	r3,2047
 800595c:	10c06526 	beq	r2,r3,8005af4 <__muldf3+0x23c>
 8005960:	8c400434 	orhi	r17,r17,16
 8005964:	300ed77a 	srli	r7,r6,29
 8005968:	880690fa 	slli	r3,r17,3
 800596c:	302490fa 	slli	r18,r6,3
 8005970:	10bf0044 	addi	r2,r2,-1023
 8005974:	38e2b03a 	or	r17,r7,r3
 8005978:	000f883a 	mov	r7,zero
 800597c:	a087883a 	add	r3,r20,r2
 8005980:	010003c4 	movi	r4,15
 8005984:	3d44b03a 	or	r2,r7,r21
 8005988:	e5ccf03a 	xor	r6,fp,r23
 800598c:	1a000044 	addi	r8,r3,1
 8005990:	20809b36 	bltu	r4,r2,8005c00 <__muldf3+0x348>
 8005994:	100490ba 	slli	r2,r2,2
 8005998:	01020034 	movhi	r4,2048
 800599c:	21166b04 	addi	r4,r4,22956
 80059a0:	1105883a 	add	r2,r2,r4
 80059a4:	10800017 	ldw	r2,0(r2)
 80059a8:	1000683a 	jmp	r2
 80059ac:	08005c00 	call	8005c0 <__alt_mem_onchip_memory2_0+0x8005c0>
 80059b0:	08005a0c 	andi	zero,at,360
 80059b4:	08005a0c 	andi	zero,at,360
 80059b8:	08005a08 	cmpgei	zero,at,360
 80059bc:	08005bdc 	xori	zero,at,367
 80059c0:	08005bdc 	xori	zero,at,367
 80059c4:	08005bc4 	addi	zero,at,367
 80059c8:	08005a08 	cmpgei	zero,at,360
 80059cc:	08005bdc 	xori	zero,at,367
 80059d0:	08005bc4 	addi	zero,at,367
 80059d4:	08005bdc 	xori	zero,at,367
 80059d8:	08005a08 	cmpgei	zero,at,360
 80059dc:	08005bec 	andhi	zero,at,367
 80059e0:	08005bec 	andhi	zero,at,367
 80059e4:	08005bec 	andhi	zero,at,367
 80059e8:	08005f4c 	andi	zero,at,381
 80059ec:	2404b03a 	or	r2,r4,r16
 80059f0:	1000711e 	bne	r2,zero,8005bb8 <__muldf3+0x300>
 80059f4:	05400204 	movi	r21,8
 80059f8:	0021883a 	mov	r16,zero
 80059fc:	002d883a 	mov	r22,zero
 8005a00:	01400084 	movi	r5,2
 8005a04:	003fcb06 	br	8005934 <__muldf3+0x7c>
 8005a08:	500d883a 	mov	r6,r10
 8005a0c:	00800084 	movi	r2,2
 8005a10:	38805926 	beq	r7,r2,8005b78 <__muldf3+0x2c0>
 8005a14:	008000c4 	movi	r2,3
 8005a18:	3881bb26 	beq	r7,r2,8006108 <__muldf3+0x850>
 8005a1c:	00800044 	movi	r2,1
 8005a20:	3881961e 	bne	r7,r2,800607c <__muldf3+0x7c4>
 8005a24:	3027883a 	mov	r19,r6
 8005a28:	0005883a 	mov	r2,zero
 8005a2c:	0021883a 	mov	r16,zero
 8005a30:	002d883a 	mov	r22,zero
 8005a34:	1004953a 	slli	r2,r2,20
 8005a38:	98c03fcc 	andi	r3,r19,255
 8005a3c:	04400434 	movhi	r17,16
 8005a40:	8c7fffc4 	addi	r17,r17,-1
 8005a44:	180697fa 	slli	r3,r3,31
 8005a48:	8460703a 	and	r16,r16,r17
 8005a4c:	80a0b03a 	or	r16,r16,r2
 8005a50:	80c6b03a 	or	r3,r16,r3
 8005a54:	b005883a 	mov	r2,r22
 8005a58:	dfc01117 	ldw	ra,68(sp)
 8005a5c:	df001017 	ldw	fp,64(sp)
 8005a60:	ddc00f17 	ldw	r23,60(sp)
 8005a64:	dd800e17 	ldw	r22,56(sp)
 8005a68:	dd400d17 	ldw	r21,52(sp)
 8005a6c:	dd000c17 	ldw	r20,48(sp)
 8005a70:	dcc00b17 	ldw	r19,44(sp)
 8005a74:	dc800a17 	ldw	r18,40(sp)
 8005a78:	dc400917 	ldw	r17,36(sp)
 8005a7c:	dc000817 	ldw	r16,32(sp)
 8005a80:	dec01204 	addi	sp,sp,72
 8005a84:	f800283a 	ret
 8005a88:	2404b03a 	or	r2,r4,r16
 8005a8c:	202b883a 	mov	r21,r4
 8005a90:	10004426 	beq	r2,zero,8005ba4 <__muldf3+0x2ec>
 8005a94:	80015126 	beq	r16,zero,8005fdc <__muldf3+0x724>
 8005a98:	8009883a 	mov	r4,r16
 8005a9c:	d9800715 	stw	r6,28(sp)
 8005aa0:	d9c00215 	stw	r7,8(sp)
 8005aa4:	da400415 	stw	r9,16(sp)
 8005aa8:	80061240 	call	8006124 <__clzsi2>
 8005aac:	d9800717 	ldw	r6,28(sp)
 8005ab0:	d9c00217 	ldw	r7,8(sp)
 8005ab4:	da400417 	ldw	r9,16(sp)
 8005ab8:	113ffd44 	addi	r4,r2,-11
 8005abc:	00c00704 	movi	r3,28
 8005ac0:	19014216 	blt	r3,r4,8005fcc <__muldf3+0x714>
 8005ac4:	00c00744 	movi	r3,29
 8005ac8:	15bffe04 	addi	r22,r2,-8
 8005acc:	1907c83a 	sub	r3,r3,r4
 8005ad0:	85a0983a 	sll	r16,r16,r22
 8005ad4:	a8c6d83a 	srl	r3,r21,r3
 8005ad8:	adac983a 	sll	r22,r21,r22
 8005adc:	1c20b03a 	or	r16,r3,r16
 8005ae0:	1080fcc4 	addi	r2,r2,1011
 8005ae4:	00a9c83a 	sub	r20,zero,r2
 8005ae8:	002b883a 	mov	r21,zero
 8005aec:	000b883a 	mov	r5,zero
 8005af0:	003f9006 	br	8005934 <__muldf3+0x7c>
 8005af4:	3446b03a 	or	r3,r6,r17
 8005af8:	1800281e 	bne	r3,zero,8005b9c <__muldf3+0x2e4>
 8005afc:	0023883a 	mov	r17,zero
 8005b00:	0025883a 	mov	r18,zero
 8005b04:	01c00084 	movi	r7,2
 8005b08:	003f9c06 	br	800597c <__muldf3+0xc4>
 8005b0c:	3446b03a 	or	r3,r6,r17
 8005b10:	18001e26 	beq	r3,zero,8005b8c <__muldf3+0x2d4>
 8005b14:	88012126 	beq	r17,zero,8005f9c <__muldf3+0x6e4>
 8005b18:	8809883a 	mov	r4,r17
 8005b1c:	d9400215 	stw	r5,8(sp)
 8005b20:	d9800715 	stw	r6,28(sp)
 8005b24:	da400415 	stw	r9,16(sp)
 8005b28:	da800315 	stw	r10,12(sp)
 8005b2c:	80061240 	call	8006124 <__clzsi2>
 8005b30:	d9400217 	ldw	r5,8(sp)
 8005b34:	d9800717 	ldw	r6,28(sp)
 8005b38:	da400417 	ldw	r9,16(sp)
 8005b3c:	da800317 	ldw	r10,12(sp)
 8005b40:	113ffd44 	addi	r4,r2,-11
 8005b44:	00c00704 	movi	r3,28
 8005b48:	19011016 	blt	r3,r4,8005f8c <__muldf3+0x6d4>
 8005b4c:	00c00744 	movi	r3,29
 8005b50:	14bffe04 	addi	r18,r2,-8
 8005b54:	1907c83a 	sub	r3,r3,r4
 8005b58:	8ca2983a 	sll	r17,r17,r18
 8005b5c:	30c6d83a 	srl	r3,r6,r3
 8005b60:	34a4983a 	sll	r18,r6,r18
 8005b64:	1c62b03a 	or	r17,r3,r17
 8005b68:	1080fcc4 	addi	r2,r2,1011
 8005b6c:	0085c83a 	sub	r2,zero,r2
 8005b70:	000f883a 	mov	r7,zero
 8005b74:	003f8106 	br	800597c <__muldf3+0xc4>
 8005b78:	3027883a 	mov	r19,r6
 8005b7c:	0081ffc4 	movi	r2,2047
 8005b80:	0021883a 	mov	r16,zero
 8005b84:	002d883a 	mov	r22,zero
 8005b88:	003faa06 	br	8005a34 <__muldf3+0x17c>
 8005b8c:	0023883a 	mov	r17,zero
 8005b90:	0025883a 	mov	r18,zero
 8005b94:	01c00044 	movi	r7,1
 8005b98:	003f7806 	br	800597c <__muldf3+0xc4>
 8005b9c:	01c000c4 	movi	r7,3
 8005ba0:	003f7606 	br	800597c <__muldf3+0xc4>
 8005ba4:	05400104 	movi	r21,4
 8005ba8:	0021883a 	mov	r16,zero
 8005bac:	002d883a 	mov	r22,zero
 8005bb0:	01400044 	movi	r5,1
 8005bb4:	003f5f06 	br	8005934 <__muldf3+0x7c>
 8005bb8:	05400304 	movi	r21,12
 8005bbc:	014000c4 	movi	r5,3
 8005bc0:	003f5c06 	br	8005934 <__muldf3+0x7c>
 8005bc4:	04000434 	movhi	r16,16
 8005bc8:	0027883a 	mov	r19,zero
 8005bcc:	843fffc4 	addi	r16,r16,-1
 8005bd0:	05bfffc4 	movi	r22,-1
 8005bd4:	0081ffc4 	movi	r2,2047
 8005bd8:	003f9606 	br	8005a34 <__muldf3+0x17c>
 8005bdc:	8023883a 	mov	r17,r16
 8005be0:	b025883a 	mov	r18,r22
 8005be4:	280f883a 	mov	r7,r5
 8005be8:	003f8806 	br	8005a0c <__muldf3+0x154>
 8005bec:	8023883a 	mov	r17,r16
 8005bf0:	b025883a 	mov	r18,r22
 8005bf4:	480d883a 	mov	r6,r9
 8005bf8:	280f883a 	mov	r7,r5
 8005bfc:	003f8306 	br	8005a0c <__muldf3+0x154>
 8005c00:	b026d43a 	srli	r19,r22,16
 8005c04:	902ed43a 	srli	r23,r18,16
 8005c08:	b5bfffcc 	andi	r22,r22,65535
 8005c0c:	94bfffcc 	andi	r18,r18,65535
 8005c10:	b00b883a 	mov	r5,r22
 8005c14:	9009883a 	mov	r4,r18
 8005c18:	d8c00515 	stw	r3,20(sp)
 8005c1c:	d9800715 	stw	r6,28(sp)
 8005c20:	da000615 	stw	r8,24(sp)
 8005c24:	80057b40 	call	80057b4 <__mulsi3>
 8005c28:	980b883a 	mov	r5,r19
 8005c2c:	9009883a 	mov	r4,r18
 8005c30:	1029883a 	mov	r20,r2
 8005c34:	80057b40 	call	80057b4 <__mulsi3>
 8005c38:	b80b883a 	mov	r5,r23
 8005c3c:	9809883a 	mov	r4,r19
 8005c40:	102b883a 	mov	r21,r2
 8005c44:	80057b40 	call	80057b4 <__mulsi3>
 8005c48:	b809883a 	mov	r4,r23
 8005c4c:	b00b883a 	mov	r5,r22
 8005c50:	1039883a 	mov	fp,r2
 8005c54:	80057b40 	call	80057b4 <__mulsi3>
 8005c58:	a008d43a 	srli	r4,r20,16
 8005c5c:	1545883a 	add	r2,r2,r21
 8005c60:	d8c00517 	ldw	r3,20(sp)
 8005c64:	2085883a 	add	r2,r4,r2
 8005c68:	d9800717 	ldw	r6,28(sp)
 8005c6c:	da000617 	ldw	r8,24(sp)
 8005c70:	1540022e 	bgeu	r2,r21,8005c7c <__muldf3+0x3c4>
 8005c74:	01000074 	movhi	r4,1
 8005c78:	e139883a 	add	fp,fp,r4
 8005c7c:	100e943a 	slli	r7,r2,16
 8005c80:	1004d43a 	srli	r2,r2,16
 8005c84:	882ad43a 	srli	r21,r17,16
 8005c88:	a53fffcc 	andi	r20,r20,65535
 8005c8c:	8c7fffcc 	andi	r17,r17,65535
 8005c90:	3d29883a 	add	r20,r7,r20
 8005c94:	b00b883a 	mov	r5,r22
 8005c98:	8809883a 	mov	r4,r17
 8005c9c:	d8c00515 	stw	r3,20(sp)
 8005ca0:	d9800715 	stw	r6,28(sp)
 8005ca4:	da000615 	stw	r8,24(sp)
 8005ca8:	dd000115 	stw	r20,4(sp)
 8005cac:	d8800015 	stw	r2,0(sp)
 8005cb0:	80057b40 	call	80057b4 <__mulsi3>
 8005cb4:	980b883a 	mov	r5,r19
 8005cb8:	8809883a 	mov	r4,r17
 8005cbc:	d8800215 	stw	r2,8(sp)
 8005cc0:	80057b40 	call	80057b4 <__mulsi3>
 8005cc4:	9809883a 	mov	r4,r19
 8005cc8:	a80b883a 	mov	r5,r21
 8005ccc:	1029883a 	mov	r20,r2
 8005cd0:	80057b40 	call	80057b4 <__mulsi3>
 8005cd4:	b00b883a 	mov	r5,r22
 8005cd8:	a809883a 	mov	r4,r21
 8005cdc:	d8800415 	stw	r2,16(sp)
 8005ce0:	80057b40 	call	80057b4 <__mulsi3>
 8005ce4:	d9c00217 	ldw	r7,8(sp)
 8005ce8:	1505883a 	add	r2,r2,r20
 8005cec:	d8c00517 	ldw	r3,20(sp)
 8005cf0:	3826d43a 	srli	r19,r7,16
 8005cf4:	d9800717 	ldw	r6,28(sp)
 8005cf8:	da000617 	ldw	r8,24(sp)
 8005cfc:	9885883a 	add	r2,r19,r2
 8005d00:	da400417 	ldw	r9,16(sp)
 8005d04:	1500022e 	bgeu	r2,r20,8005d10 <__muldf3+0x458>
 8005d08:	01000074 	movhi	r4,1
 8005d0c:	4913883a 	add	r9,r9,r4
 8005d10:	1028d43a 	srli	r20,r2,16
 8005d14:	1004943a 	slli	r2,r2,16
 8005d18:	802cd43a 	srli	r22,r16,16
 8005d1c:	843fffcc 	andi	r16,r16,65535
 8005d20:	3cffffcc 	andi	r19,r7,65535
 8005d24:	9009883a 	mov	r4,r18
 8005d28:	800b883a 	mov	r5,r16
 8005d2c:	a269883a 	add	r20,r20,r9
 8005d30:	d8c00515 	stw	r3,20(sp)
 8005d34:	d9800715 	stw	r6,28(sp)
 8005d38:	da000615 	stw	r8,24(sp)
 8005d3c:	14e7883a 	add	r19,r2,r19
 8005d40:	80057b40 	call	80057b4 <__mulsi3>
 8005d44:	9009883a 	mov	r4,r18
 8005d48:	b00b883a 	mov	r5,r22
 8005d4c:	d8800315 	stw	r2,12(sp)
 8005d50:	80057b40 	call	80057b4 <__mulsi3>
 8005d54:	b809883a 	mov	r4,r23
 8005d58:	b00b883a 	mov	r5,r22
 8005d5c:	d8800215 	stw	r2,8(sp)
 8005d60:	80057b40 	call	80057b4 <__mulsi3>
 8005d64:	b80b883a 	mov	r5,r23
 8005d68:	8009883a 	mov	r4,r16
 8005d6c:	d8800415 	stw	r2,16(sp)
 8005d70:	80057b40 	call	80057b4 <__mulsi3>
 8005d74:	da800317 	ldw	r10,12(sp)
 8005d78:	d9c00217 	ldw	r7,8(sp)
 8005d7c:	d9000017 	ldw	r4,0(sp)
 8005d80:	502ed43a 	srli	r23,r10,16
 8005d84:	11c5883a 	add	r2,r2,r7
 8005d88:	24e5883a 	add	r18,r4,r19
 8005d8c:	b885883a 	add	r2,r23,r2
 8005d90:	d8c00517 	ldw	r3,20(sp)
 8005d94:	d9800717 	ldw	r6,28(sp)
 8005d98:	da000617 	ldw	r8,24(sp)
 8005d9c:	da400417 	ldw	r9,16(sp)
 8005da0:	11c0022e 	bgeu	r2,r7,8005dac <__muldf3+0x4f4>
 8005da4:	01000074 	movhi	r4,1
 8005da8:	4913883a 	add	r9,r9,r4
 8005dac:	100ed43a 	srli	r7,r2,16
 8005db0:	1004943a 	slli	r2,r2,16
 8005db4:	55ffffcc 	andi	r23,r10,65535
 8005db8:	3a53883a 	add	r9,r7,r9
 8005dbc:	8809883a 	mov	r4,r17
 8005dc0:	800b883a 	mov	r5,r16
 8005dc4:	d8c00515 	stw	r3,20(sp)
 8005dc8:	d9800715 	stw	r6,28(sp)
 8005dcc:	da000615 	stw	r8,24(sp)
 8005dd0:	da400415 	stw	r9,16(sp)
 8005dd4:	15ef883a 	add	r23,r2,r23
 8005dd8:	80057b40 	call	80057b4 <__mulsi3>
 8005ddc:	8809883a 	mov	r4,r17
 8005de0:	b00b883a 	mov	r5,r22
 8005de4:	d8800215 	stw	r2,8(sp)
 8005de8:	80057b40 	call	80057b4 <__mulsi3>
 8005dec:	b00b883a 	mov	r5,r22
 8005df0:	a809883a 	mov	r4,r21
 8005df4:	d8800315 	stw	r2,12(sp)
 8005df8:	80057b40 	call	80057b4 <__mulsi3>
 8005dfc:	8009883a 	mov	r4,r16
 8005e00:	a80b883a 	mov	r5,r21
 8005e04:	1023883a 	mov	r17,r2
 8005e08:	80057b40 	call	80057b4 <__mulsi3>
 8005e0c:	d9c00217 	ldw	r7,8(sp)
 8005e10:	da800317 	ldw	r10,12(sp)
 8005e14:	d8c00517 	ldw	r3,20(sp)
 8005e18:	3808d43a 	srli	r4,r7,16
 8005e1c:	1285883a 	add	r2,r2,r10
 8005e20:	d9800717 	ldw	r6,28(sp)
 8005e24:	2085883a 	add	r2,r4,r2
 8005e28:	da000617 	ldw	r8,24(sp)
 8005e2c:	da400417 	ldw	r9,16(sp)
 8005e30:	1280022e 	bgeu	r2,r10,8005e3c <__muldf3+0x584>
 8005e34:	01000074 	movhi	r4,1
 8005e38:	8923883a 	add	r17,r17,r4
 8005e3c:	1008943a 	slli	r4,r2,16
 8005e40:	39ffffcc 	andi	r7,r7,65535
 8005e44:	e4b9883a 	add	fp,fp,r18
 8005e48:	21cf883a 	add	r7,r4,r7
 8005e4c:	e4e7803a 	cmpltu	r19,fp,r19
 8005e50:	3d0f883a 	add	r7,r7,r20
 8005e54:	bf39883a 	add	fp,r23,fp
 8005e58:	99c9883a 	add	r4,r19,r7
 8005e5c:	e5ef803a 	cmpltu	r23,fp,r23
 8005e60:	490b883a 	add	r5,r9,r4
 8005e64:	1004d43a 	srli	r2,r2,16
 8005e68:	b965883a 	add	r18,r23,r5
 8005e6c:	24c9803a 	cmpltu	r4,r4,r19
 8005e70:	3d29803a 	cmpltu	r20,r7,r20
 8005e74:	a128b03a 	or	r20,r20,r4
 8005e78:	95ef803a 	cmpltu	r23,r18,r23
 8005e7c:	2a53803a 	cmpltu	r9,r5,r9
 8005e80:	a0a9883a 	add	r20,r20,r2
 8005e84:	4deeb03a 	or	r23,r9,r23
 8005e88:	a5ef883a 	add	r23,r20,r23
 8005e8c:	bc63883a 	add	r17,r23,r17
 8005e90:	e004927a 	slli	r2,fp,9
 8005e94:	d9000117 	ldw	r4,4(sp)
 8005e98:	882e927a 	slli	r23,r17,9
 8005e9c:	9022d5fa 	srli	r17,r18,23
 8005ea0:	e038d5fa 	srli	fp,fp,23
 8005ea4:	1104b03a 	or	r2,r2,r4
 8005ea8:	9024927a 	slli	r18,r18,9
 8005eac:	1004c03a 	cmpne	r2,r2,zero
 8005eb0:	bc62b03a 	or	r17,r23,r17
 8005eb4:	1738b03a 	or	fp,r2,fp
 8005eb8:	8880402c 	andhi	r2,r17,256
 8005ebc:	e4a4b03a 	or	r18,fp,r18
 8005ec0:	10000726 	beq	r2,zero,8005ee0 <__muldf3+0x628>
 8005ec4:	9006d07a 	srli	r3,r18,1
 8005ec8:	880497fa 	slli	r2,r17,31
 8005ecc:	9480004c 	andi	r18,r18,1
 8005ed0:	8822d07a 	srli	r17,r17,1
 8005ed4:	1ca4b03a 	or	r18,r3,r18
 8005ed8:	14a4b03a 	or	r18,r2,r18
 8005edc:	4007883a 	mov	r3,r8
 8005ee0:	1880ffc4 	addi	r2,r3,1023
 8005ee4:	0080460e 	bge	zero,r2,8006000 <__muldf3+0x748>
 8005ee8:	910001cc 	andi	r4,r18,7
 8005eec:	20000726 	beq	r4,zero,8005f0c <__muldf3+0x654>
 8005ef0:	910003cc 	andi	r4,r18,15
 8005ef4:	01400104 	movi	r5,4
 8005ef8:	21400426 	beq	r4,r5,8005f0c <__muldf3+0x654>
 8005efc:	9149883a 	add	r4,r18,r5
 8005f00:	24a5803a 	cmpltu	r18,r4,r18
 8005f04:	8ca3883a 	add	r17,r17,r18
 8005f08:	2025883a 	mov	r18,r4
 8005f0c:	8900402c 	andhi	r4,r17,256
 8005f10:	20000426 	beq	r4,zero,8005f24 <__muldf3+0x66c>
 8005f14:	18810004 	addi	r2,r3,1024
 8005f18:	00ffc034 	movhi	r3,65280
 8005f1c:	18ffffc4 	addi	r3,r3,-1
 8005f20:	88e2703a 	and	r17,r17,r3
 8005f24:	00c1ff84 	movi	r3,2046
 8005f28:	18bf1316 	blt	r3,r2,8005b78 <__muldf3+0x2c0>
 8005f2c:	882c977a 	slli	r22,r17,29
 8005f30:	9024d0fa 	srli	r18,r18,3
 8005f34:	8822927a 	slli	r17,r17,9
 8005f38:	1081ffcc 	andi	r2,r2,2047
 8005f3c:	b4acb03a 	or	r22,r22,r18
 8005f40:	8820d33a 	srli	r16,r17,12
 8005f44:	3027883a 	mov	r19,r6
 8005f48:	003eba06 	br	8005a34 <__muldf3+0x17c>
 8005f4c:	8080022c 	andhi	r2,r16,8
 8005f50:	10000926 	beq	r2,zero,8005f78 <__muldf3+0x6c0>
 8005f54:	8880022c 	andhi	r2,r17,8
 8005f58:	1000071e 	bne	r2,zero,8005f78 <__muldf3+0x6c0>
 8005f5c:	00800434 	movhi	r2,16
 8005f60:	8c000234 	orhi	r16,r17,8
 8005f64:	10bfffc4 	addi	r2,r2,-1
 8005f68:	e027883a 	mov	r19,fp
 8005f6c:	80a0703a 	and	r16,r16,r2
 8005f70:	902d883a 	mov	r22,r18
 8005f74:	003f1706 	br	8005bd4 <__muldf3+0x31c>
 8005f78:	00800434 	movhi	r2,16
 8005f7c:	84000234 	orhi	r16,r16,8
 8005f80:	10bfffc4 	addi	r2,r2,-1
 8005f84:	80a0703a 	and	r16,r16,r2
 8005f88:	003f1206 	br	8005bd4 <__muldf3+0x31c>
 8005f8c:	147ff604 	addi	r17,r2,-40
 8005f90:	3462983a 	sll	r17,r6,r17
 8005f94:	0025883a 	mov	r18,zero
 8005f98:	003ef306 	br	8005b68 <__muldf3+0x2b0>
 8005f9c:	3009883a 	mov	r4,r6
 8005fa0:	d9400215 	stw	r5,8(sp)
 8005fa4:	d9800715 	stw	r6,28(sp)
 8005fa8:	da400415 	stw	r9,16(sp)
 8005fac:	da800315 	stw	r10,12(sp)
 8005fb0:	80061240 	call	8006124 <__clzsi2>
 8005fb4:	10800804 	addi	r2,r2,32
 8005fb8:	da800317 	ldw	r10,12(sp)
 8005fbc:	da400417 	ldw	r9,16(sp)
 8005fc0:	d9800717 	ldw	r6,28(sp)
 8005fc4:	d9400217 	ldw	r5,8(sp)
 8005fc8:	003edd06 	br	8005b40 <__muldf3+0x288>
 8005fcc:	143ff604 	addi	r16,r2,-40
 8005fd0:	ac20983a 	sll	r16,r21,r16
 8005fd4:	002d883a 	mov	r22,zero
 8005fd8:	003ec106 	br	8005ae0 <__muldf3+0x228>
 8005fdc:	d9800715 	stw	r6,28(sp)
 8005fe0:	d9c00215 	stw	r7,8(sp)
 8005fe4:	da400415 	stw	r9,16(sp)
 8005fe8:	80061240 	call	8006124 <__clzsi2>
 8005fec:	10800804 	addi	r2,r2,32
 8005ff0:	da400417 	ldw	r9,16(sp)
 8005ff4:	d9c00217 	ldw	r7,8(sp)
 8005ff8:	d9800717 	ldw	r6,28(sp)
 8005ffc:	003eae06 	br	8005ab8 <__muldf3+0x200>
 8006000:	00c00044 	movi	r3,1
 8006004:	1887c83a 	sub	r3,r3,r2
 8006008:	01000e04 	movi	r4,56
 800600c:	20fe8516 	blt	r4,r3,8005a24 <__muldf3+0x16c>
 8006010:	010007c4 	movi	r4,31
 8006014:	20c01b16 	blt	r4,r3,8006084 <__muldf3+0x7cc>
 8006018:	00800804 	movi	r2,32
 800601c:	10c5c83a 	sub	r2,r2,r3
 8006020:	888a983a 	sll	r5,r17,r2
 8006024:	90c8d83a 	srl	r4,r18,r3
 8006028:	9084983a 	sll	r2,r18,r2
 800602c:	88e2d83a 	srl	r17,r17,r3
 8006030:	2906b03a 	or	r3,r5,r4
 8006034:	1004c03a 	cmpne	r2,r2,zero
 8006038:	1886b03a 	or	r3,r3,r2
 800603c:	188001cc 	andi	r2,r3,7
 8006040:	10000726 	beq	r2,zero,8006060 <__muldf3+0x7a8>
 8006044:	188003cc 	andi	r2,r3,15
 8006048:	01000104 	movi	r4,4
 800604c:	11000426 	beq	r2,r4,8006060 <__muldf3+0x7a8>
 8006050:	1805883a 	mov	r2,r3
 8006054:	10c00104 	addi	r3,r2,4
 8006058:	1885803a 	cmpltu	r2,r3,r2
 800605c:	88a3883a 	add	r17,r17,r2
 8006060:	8880202c 	andhi	r2,r17,128
 8006064:	10001c26 	beq	r2,zero,80060d8 <__muldf3+0x820>
 8006068:	3027883a 	mov	r19,r6
 800606c:	00800044 	movi	r2,1
 8006070:	0021883a 	mov	r16,zero
 8006074:	002d883a 	mov	r22,zero
 8006078:	003e6e06 	br	8005a34 <__muldf3+0x17c>
 800607c:	4007883a 	mov	r3,r8
 8006080:	003f9706 	br	8005ee0 <__muldf3+0x628>
 8006084:	017ff844 	movi	r5,-31
 8006088:	2885c83a 	sub	r2,r5,r2
 800608c:	888ad83a 	srl	r5,r17,r2
 8006090:	00800804 	movi	r2,32
 8006094:	18801a26 	beq	r3,r2,8006100 <__muldf3+0x848>
 8006098:	01001004 	movi	r4,64
 800609c:	20c7c83a 	sub	r3,r4,r3
 80060a0:	88e2983a 	sll	r17,r17,r3
 80060a4:	8ca4b03a 	or	r18,r17,r18
 80060a8:	9004c03a 	cmpne	r2,r18,zero
 80060ac:	2884b03a 	or	r2,r5,r2
 80060b0:	144001cc 	andi	r17,r2,7
 80060b4:	88000d1e 	bne	r17,zero,80060ec <__muldf3+0x834>
 80060b8:	0021883a 	mov	r16,zero
 80060bc:	102cd0fa 	srli	r22,r2,3
 80060c0:	3027883a 	mov	r19,r6
 80060c4:	0005883a 	mov	r2,zero
 80060c8:	b46cb03a 	or	r22,r22,r17
 80060cc:	003e5906 	br	8005a34 <__muldf3+0x17c>
 80060d0:	1007883a 	mov	r3,r2
 80060d4:	0023883a 	mov	r17,zero
 80060d8:	8820927a 	slli	r16,r17,9
 80060dc:	1805883a 	mov	r2,r3
 80060e0:	8822977a 	slli	r17,r17,29
 80060e4:	8020d33a 	srli	r16,r16,12
 80060e8:	003ff406 	br	80060bc <__muldf3+0x804>
 80060ec:	10c003cc 	andi	r3,r2,15
 80060f0:	01000104 	movi	r4,4
 80060f4:	193ff626 	beq	r3,r4,80060d0 <__muldf3+0x818>
 80060f8:	0023883a 	mov	r17,zero
 80060fc:	003fd506 	br	8006054 <__muldf3+0x79c>
 8006100:	0023883a 	mov	r17,zero
 8006104:	003fe706 	br	80060a4 <__muldf3+0x7ec>
 8006108:	00800434 	movhi	r2,16
 800610c:	8c000234 	orhi	r16,r17,8
 8006110:	10bfffc4 	addi	r2,r2,-1
 8006114:	3027883a 	mov	r19,r6
 8006118:	80a0703a 	and	r16,r16,r2
 800611c:	902d883a 	mov	r22,r18
 8006120:	003eac06 	br	8005bd4 <__muldf3+0x31c>

08006124 <__clzsi2>:
 8006124:	00bfffd4 	movui	r2,65535
 8006128:	11000536 	bltu	r2,r4,8006140 <__clzsi2+0x1c>
 800612c:	00803fc4 	movi	r2,255
 8006130:	11000f36 	bltu	r2,r4,8006170 <__clzsi2+0x4c>
 8006134:	00800804 	movi	r2,32
 8006138:	0007883a 	mov	r3,zero
 800613c:	00000506 	br	8006154 <__clzsi2+0x30>
 8006140:	00804034 	movhi	r2,256
 8006144:	10bfffc4 	addi	r2,r2,-1
 8006148:	11000c2e 	bgeu	r2,r4,800617c <__clzsi2+0x58>
 800614c:	00800204 	movi	r2,8
 8006150:	00c00604 	movi	r3,24
 8006154:	20c8d83a 	srl	r4,r4,r3
 8006158:	00c20074 	movhi	r3,2049
 800615c:	18d6a184 	addi	r3,r3,23174
 8006160:	1909883a 	add	r4,r3,r4
 8006164:	20c00003 	ldbu	r3,0(r4)
 8006168:	10c5c83a 	sub	r2,r2,r3
 800616c:	f800283a 	ret
 8006170:	00800604 	movi	r2,24
 8006174:	00c00204 	movi	r3,8
 8006178:	003ff606 	br	8006154 <__clzsi2+0x30>
 800617c:	00800404 	movi	r2,16
 8006180:	1007883a 	mov	r3,r2
 8006184:	003ff306 	br	8006154 <__clzsi2+0x30>

08006188 <clock>:
 8006188:	00820074 	movhi	r2,2049
 800618c:	109e2204 	addi	r2,r2,30856
 8006190:	11000017 	ldw	r4,0(r2)
 8006194:	defffb04 	addi	sp,sp,-20
 8006198:	d80b883a 	mov	r5,sp
 800619c:	dfc00415 	stw	ra,16(sp)
 80061a0:	80068e00 	call	80068e0 <_times_r>
 80061a4:	00ffffc4 	movi	r3,-1
 80061a8:	10c00726 	beq	r2,r3,80061c8 <clock+0x40>
 80061ac:	d8c00017 	ldw	r3,0(sp)
 80061b0:	d8800117 	ldw	r2,4(sp)
 80061b4:	1885883a 	add	r2,r3,r2
 80061b8:	d8c00217 	ldw	r3,8(sp)
 80061bc:	10c7883a 	add	r3,r2,r3
 80061c0:	d8800317 	ldw	r2,12(sp)
 80061c4:	1885883a 	add	r2,r3,r2
 80061c8:	dfc00417 	ldw	ra,16(sp)
 80061cc:	dec00504 	addi	sp,sp,20
 80061d0:	f800283a 	ret

080061d4 <difftime>:
 80061d4:	deffff04 	addi	sp,sp,-4
 80061d8:	2149c83a 	sub	r4,r4,r5
 80061dc:	dfc00015 	stw	ra,0(sp)
 80061e0:	8012a4c0 	call	8012a4c <__floatsidf>
 80061e4:	dfc00017 	ldw	ra,0(sp)
 80061e8:	dec00104 	addi	sp,sp,4
 80061ec:	f800283a 	ret

080061f0 <memcmp>:
 80061f0:	01c000c4 	movi	r7,3
 80061f4:	3980192e 	bgeu	r7,r6,800625c <memcmp+0x6c>
 80061f8:	2144b03a 	or	r2,r4,r5
 80061fc:	11c4703a 	and	r2,r2,r7
 8006200:	10000f26 	beq	r2,zero,8006240 <memcmp+0x50>
 8006204:	20800003 	ldbu	r2,0(r4)
 8006208:	28c00003 	ldbu	r3,0(r5)
 800620c:	10c0151e 	bne	r2,r3,8006264 <memcmp+0x74>
 8006210:	31bfff84 	addi	r6,r6,-2
 8006214:	01ffffc4 	movi	r7,-1
 8006218:	00000406 	br	800622c <memcmp+0x3c>
 800621c:	20800003 	ldbu	r2,0(r4)
 8006220:	28c00003 	ldbu	r3,0(r5)
 8006224:	31bfffc4 	addi	r6,r6,-1
 8006228:	10c00e1e 	bne	r2,r3,8006264 <memcmp+0x74>
 800622c:	21000044 	addi	r4,r4,1
 8006230:	29400044 	addi	r5,r5,1
 8006234:	31fff91e 	bne	r6,r7,800621c <memcmp+0x2c>
 8006238:	0005883a 	mov	r2,zero
 800623c:	f800283a 	ret
 8006240:	20c00017 	ldw	r3,0(r4)
 8006244:	28800017 	ldw	r2,0(r5)
 8006248:	18bfee1e 	bne	r3,r2,8006204 <memcmp+0x14>
 800624c:	31bfff04 	addi	r6,r6,-4
 8006250:	21000104 	addi	r4,r4,4
 8006254:	29400104 	addi	r5,r5,4
 8006258:	39bff936 	bltu	r7,r6,8006240 <memcmp+0x50>
 800625c:	303fe91e 	bne	r6,zero,8006204 <memcmp+0x14>
 8006260:	003ff506 	br	8006238 <memcmp+0x48>
 8006264:	10c5c83a 	sub	r2,r2,r3
 8006268:	f800283a 	ret

0800626c <memcpy>:
 800626c:	defffd04 	addi	sp,sp,-12
 8006270:	dfc00215 	stw	ra,8(sp)
 8006274:	dc400115 	stw	r17,4(sp)
 8006278:	dc000015 	stw	r16,0(sp)
 800627c:	00c003c4 	movi	r3,15
 8006280:	2005883a 	mov	r2,r4
 8006284:	1980452e 	bgeu	r3,r6,800639c <memcpy+0x130>
 8006288:	2906b03a 	or	r3,r5,r4
 800628c:	18c000cc 	andi	r3,r3,3
 8006290:	1800441e 	bne	r3,zero,80063a4 <memcpy+0x138>
 8006294:	347ffc04 	addi	r17,r6,-16
 8006298:	8822d13a 	srli	r17,r17,4
 800629c:	28c00104 	addi	r3,r5,4
 80062a0:	23400104 	addi	r13,r4,4
 80062a4:	8820913a 	slli	r16,r17,4
 80062a8:	2b000204 	addi	r12,r5,8
 80062ac:	22c00204 	addi	r11,r4,8
 80062b0:	84000504 	addi	r16,r16,20
 80062b4:	2a800304 	addi	r10,r5,12
 80062b8:	22400304 	addi	r9,r4,12
 80062bc:	2c21883a 	add	r16,r5,r16
 80062c0:	2811883a 	mov	r8,r5
 80062c4:	200f883a 	mov	r7,r4
 80062c8:	41000017 	ldw	r4,0(r8)
 80062cc:	1fc00017 	ldw	ra,0(r3)
 80062d0:	63c00017 	ldw	r15,0(r12)
 80062d4:	39000015 	stw	r4,0(r7)
 80062d8:	53800017 	ldw	r14,0(r10)
 80062dc:	6fc00015 	stw	ra,0(r13)
 80062e0:	5bc00015 	stw	r15,0(r11)
 80062e4:	4b800015 	stw	r14,0(r9)
 80062e8:	18c00404 	addi	r3,r3,16
 80062ec:	39c00404 	addi	r7,r7,16
 80062f0:	42000404 	addi	r8,r8,16
 80062f4:	6b400404 	addi	r13,r13,16
 80062f8:	63000404 	addi	r12,r12,16
 80062fc:	5ac00404 	addi	r11,r11,16
 8006300:	52800404 	addi	r10,r10,16
 8006304:	4a400404 	addi	r9,r9,16
 8006308:	1c3fef1e 	bne	r3,r16,80062c8 <memcpy+0x5c>
 800630c:	89c00044 	addi	r7,r17,1
 8006310:	380e913a 	slli	r7,r7,4
 8006314:	310003cc 	andi	r4,r6,15
 8006318:	02c000c4 	movi	r11,3
 800631c:	11c7883a 	add	r3,r2,r7
 8006320:	29cb883a 	add	r5,r5,r7
 8006324:	5900212e 	bgeu	r11,r4,80063ac <memcpy+0x140>
 8006328:	1813883a 	mov	r9,r3
 800632c:	2811883a 	mov	r8,r5
 8006330:	200f883a 	mov	r7,r4
 8006334:	42800017 	ldw	r10,0(r8)
 8006338:	4a400104 	addi	r9,r9,4
 800633c:	39ffff04 	addi	r7,r7,-4
 8006340:	4abfff15 	stw	r10,-4(r9)
 8006344:	42000104 	addi	r8,r8,4
 8006348:	59fffa36 	bltu	r11,r7,8006334 <memcpy+0xc8>
 800634c:	213fff04 	addi	r4,r4,-4
 8006350:	2008d0ba 	srli	r4,r4,2
 8006354:	318000cc 	andi	r6,r6,3
 8006358:	21000044 	addi	r4,r4,1
 800635c:	2109883a 	add	r4,r4,r4
 8006360:	2109883a 	add	r4,r4,r4
 8006364:	1907883a 	add	r3,r3,r4
 8006368:	290b883a 	add	r5,r5,r4
 800636c:	30000626 	beq	r6,zero,8006388 <memcpy+0x11c>
 8006370:	198d883a 	add	r6,r3,r6
 8006374:	29c00003 	ldbu	r7,0(r5)
 8006378:	18c00044 	addi	r3,r3,1
 800637c:	29400044 	addi	r5,r5,1
 8006380:	19ffffc5 	stb	r7,-1(r3)
 8006384:	19bffb1e 	bne	r3,r6,8006374 <memcpy+0x108>
 8006388:	dfc00217 	ldw	ra,8(sp)
 800638c:	dc400117 	ldw	r17,4(sp)
 8006390:	dc000017 	ldw	r16,0(sp)
 8006394:	dec00304 	addi	sp,sp,12
 8006398:	f800283a 	ret
 800639c:	2007883a 	mov	r3,r4
 80063a0:	003ff206 	br	800636c <memcpy+0x100>
 80063a4:	2007883a 	mov	r3,r4
 80063a8:	003ff106 	br	8006370 <memcpy+0x104>
 80063ac:	200d883a 	mov	r6,r4
 80063b0:	003fee06 	br	800636c <memcpy+0x100>

080063b4 <memset>:
 80063b4:	20c000cc 	andi	r3,r4,3
 80063b8:	2005883a 	mov	r2,r4
 80063bc:	18004426 	beq	r3,zero,80064d0 <memset+0x11c>
 80063c0:	31ffffc4 	addi	r7,r6,-1
 80063c4:	30004026 	beq	r6,zero,80064c8 <memset+0x114>
 80063c8:	2813883a 	mov	r9,r5
 80063cc:	200d883a 	mov	r6,r4
 80063d0:	2007883a 	mov	r3,r4
 80063d4:	00000406 	br	80063e8 <memset+0x34>
 80063d8:	3a3fffc4 	addi	r8,r7,-1
 80063dc:	31800044 	addi	r6,r6,1
 80063e0:	38003926 	beq	r7,zero,80064c8 <memset+0x114>
 80063e4:	400f883a 	mov	r7,r8
 80063e8:	18c00044 	addi	r3,r3,1
 80063ec:	32400005 	stb	r9,0(r6)
 80063f0:	1a0000cc 	andi	r8,r3,3
 80063f4:	403ff81e 	bne	r8,zero,80063d8 <memset+0x24>
 80063f8:	010000c4 	movi	r4,3
 80063fc:	21c02d2e 	bgeu	r4,r7,80064b4 <memset+0x100>
 8006400:	29003fcc 	andi	r4,r5,255
 8006404:	200c923a 	slli	r6,r4,8
 8006408:	3108b03a 	or	r4,r6,r4
 800640c:	200c943a 	slli	r6,r4,16
 8006410:	218cb03a 	or	r6,r4,r6
 8006414:	010003c4 	movi	r4,15
 8006418:	21c0182e 	bgeu	r4,r7,800647c <memset+0xc8>
 800641c:	3b3ffc04 	addi	r12,r7,-16
 8006420:	6018d13a 	srli	r12,r12,4
 8006424:	1a000104 	addi	r8,r3,4
 8006428:	1ac00204 	addi	r11,r3,8
 800642c:	6008913a 	slli	r4,r12,4
 8006430:	1a800304 	addi	r10,r3,12
 8006434:	1813883a 	mov	r9,r3
 8006438:	21000504 	addi	r4,r4,20
 800643c:	1909883a 	add	r4,r3,r4
 8006440:	49800015 	stw	r6,0(r9)
 8006444:	41800015 	stw	r6,0(r8)
 8006448:	59800015 	stw	r6,0(r11)
 800644c:	51800015 	stw	r6,0(r10)
 8006450:	42000404 	addi	r8,r8,16
 8006454:	4a400404 	addi	r9,r9,16
 8006458:	5ac00404 	addi	r11,r11,16
 800645c:	52800404 	addi	r10,r10,16
 8006460:	413ff71e 	bne	r8,r4,8006440 <memset+0x8c>
 8006464:	63000044 	addi	r12,r12,1
 8006468:	6018913a 	slli	r12,r12,4
 800646c:	39c003cc 	andi	r7,r7,15
 8006470:	010000c4 	movi	r4,3
 8006474:	1b07883a 	add	r3,r3,r12
 8006478:	21c00e2e 	bgeu	r4,r7,80064b4 <memset+0x100>
 800647c:	1813883a 	mov	r9,r3
 8006480:	3811883a 	mov	r8,r7
 8006484:	010000c4 	movi	r4,3
 8006488:	49800015 	stw	r6,0(r9)
 800648c:	423fff04 	addi	r8,r8,-4
 8006490:	4a400104 	addi	r9,r9,4
 8006494:	223ffc36 	bltu	r4,r8,8006488 <memset+0xd4>
 8006498:	393fff04 	addi	r4,r7,-4
 800649c:	2008d0ba 	srli	r4,r4,2
 80064a0:	39c000cc 	andi	r7,r7,3
 80064a4:	21000044 	addi	r4,r4,1
 80064a8:	2109883a 	add	r4,r4,r4
 80064ac:	2109883a 	add	r4,r4,r4
 80064b0:	1907883a 	add	r3,r3,r4
 80064b4:	38000526 	beq	r7,zero,80064cc <memset+0x118>
 80064b8:	19cf883a 	add	r7,r3,r7
 80064bc:	19400005 	stb	r5,0(r3)
 80064c0:	18c00044 	addi	r3,r3,1
 80064c4:	38fffd1e 	bne	r7,r3,80064bc <memset+0x108>
 80064c8:	f800283a 	ret
 80064cc:	f800283a 	ret
 80064d0:	2007883a 	mov	r3,r4
 80064d4:	300f883a 	mov	r7,r6
 80064d8:	003fc706 	br	80063f8 <memset+0x44>

080064dc <_printf_r>:
 80064dc:	defffd04 	addi	sp,sp,-12
 80064e0:	2805883a 	mov	r2,r5
 80064e4:	dfc00015 	stw	ra,0(sp)
 80064e8:	d9800115 	stw	r6,4(sp)
 80064ec:	d9c00215 	stw	r7,8(sp)
 80064f0:	21400217 	ldw	r5,8(r4)
 80064f4:	d9c00104 	addi	r7,sp,4
 80064f8:	100d883a 	mov	r6,r2
 80064fc:	80068e80 	call	80068e8 <___vfprintf_internal_r>
 8006500:	dfc00017 	ldw	ra,0(sp)
 8006504:	dec00304 	addi	sp,sp,12
 8006508:	f800283a 	ret

0800650c <printf>:
 800650c:	defffc04 	addi	sp,sp,-16
 8006510:	dfc00015 	stw	ra,0(sp)
 8006514:	d9400115 	stw	r5,4(sp)
 8006518:	d9800215 	stw	r6,8(sp)
 800651c:	d9c00315 	stw	r7,12(sp)
 8006520:	00820074 	movhi	r2,2049
 8006524:	109e2204 	addi	r2,r2,30856
 8006528:	10800017 	ldw	r2,0(r2)
 800652c:	200b883a 	mov	r5,r4
 8006530:	d9800104 	addi	r6,sp,4
 8006534:	11000217 	ldw	r4,8(r2)
 8006538:	8008bc40 	call	8008bc4 <__vfprintf_internal>
 800653c:	dfc00017 	ldw	ra,0(sp)
 8006540:	dec00404 	addi	sp,sp,16
 8006544:	f800283a 	ret

08006548 <_putchar_r>:
 8006548:	21800217 	ldw	r6,8(r4)
 800654c:	800d5741 	jmpi	800d574 <_putc_r>

08006550 <putchar>:
 8006550:	00820074 	movhi	r2,2049
 8006554:	109e2204 	addi	r2,r2,30856
 8006558:	200b883a 	mov	r5,r4
 800655c:	11000017 	ldw	r4,0(r2)
 8006560:	21800217 	ldw	r6,8(r4)
 8006564:	800d5741 	jmpi	800d574 <_putc_r>

08006568 <_puts_r>:
 8006568:	defff604 	addi	sp,sp,-40
 800656c:	dc000715 	stw	r16,28(sp)
 8006570:	2021883a 	mov	r16,r4
 8006574:	2809883a 	mov	r4,r5
 8006578:	dc400815 	stw	r17,32(sp)
 800657c:	dfc00915 	stw	ra,36(sp)
 8006580:	2823883a 	mov	r17,r5
 8006584:	800663c0 	call	800663c <strlen>
 8006588:	10c00044 	addi	r3,r2,1
 800658c:	d8800115 	stw	r2,4(sp)
 8006590:	00820074 	movhi	r2,2049
 8006594:	1096e304 	addi	r2,r2,23436
 8006598:	d8800215 	stw	r2,8(sp)
 800659c:	00800044 	movi	r2,1
 80065a0:	d8800315 	stw	r2,12(sp)
 80065a4:	00800084 	movi	r2,2
 80065a8:	dc400015 	stw	r17,0(sp)
 80065ac:	d8c00615 	stw	r3,24(sp)
 80065b0:	dec00415 	stw	sp,16(sp)
 80065b4:	d8800515 	stw	r2,20(sp)
 80065b8:	80000226 	beq	r16,zero,80065c4 <_puts_r+0x5c>
 80065bc:	80800e17 	ldw	r2,56(r16)
 80065c0:	10001426 	beq	r2,zero,8006614 <_puts_r+0xac>
 80065c4:	81400217 	ldw	r5,8(r16)
 80065c8:	2880030b 	ldhu	r2,12(r5)
 80065cc:	10c8000c 	andi	r3,r2,8192
 80065d0:	1800061e 	bne	r3,zero,80065ec <_puts_r+0x84>
 80065d4:	29001917 	ldw	r4,100(r5)
 80065d8:	00f7ffc4 	movi	r3,-8193
 80065dc:	10880014 	ori	r2,r2,8192
 80065e0:	20c6703a 	and	r3,r4,r3
 80065e4:	2880030d 	sth	r2,12(r5)
 80065e8:	28c01915 	stw	r3,100(r5)
 80065ec:	d9800404 	addi	r6,sp,16
 80065f0:	8009883a 	mov	r4,r16
 80065f4:	800b12c0 	call	800b12c <__sfvwrite_r>
 80065f8:	1000091e 	bne	r2,zero,8006620 <_puts_r+0xb8>
 80065fc:	00800284 	movi	r2,10
 8006600:	dfc00917 	ldw	ra,36(sp)
 8006604:	dc400817 	ldw	r17,32(sp)
 8006608:	dc000717 	ldw	r16,28(sp)
 800660c:	dec00a04 	addi	sp,sp,40
 8006610:	f800283a 	ret
 8006614:	8009883a 	mov	r4,r16
 8006618:	800aca80 	call	800aca8 <__sinit>
 800661c:	003fe906 	br	80065c4 <_puts_r+0x5c>
 8006620:	00bfffc4 	movi	r2,-1
 8006624:	003ff606 	br	8006600 <_puts_r+0x98>

08006628 <puts>:
 8006628:	00820074 	movhi	r2,2049
 800662c:	109e2204 	addi	r2,r2,30856
 8006630:	200b883a 	mov	r5,r4
 8006634:	11000017 	ldw	r4,0(r2)
 8006638:	80065681 	jmpi	8006568 <_puts_r>

0800663c <strlen>:
 800663c:	208000cc 	andi	r2,r4,3
 8006640:	10002026 	beq	r2,zero,80066c4 <strlen+0x88>
 8006644:	20800007 	ldb	r2,0(r4)
 8006648:	10002026 	beq	r2,zero,80066cc <strlen+0x90>
 800664c:	2005883a 	mov	r2,r4
 8006650:	00000206 	br	800665c <strlen+0x20>
 8006654:	10c00007 	ldb	r3,0(r2)
 8006658:	18001826 	beq	r3,zero,80066bc <strlen+0x80>
 800665c:	10800044 	addi	r2,r2,1
 8006660:	10c000cc 	andi	r3,r2,3
 8006664:	183ffb1e 	bne	r3,zero,8006654 <strlen+0x18>
 8006668:	10c00017 	ldw	r3,0(r2)
 800666c:	01ffbff4 	movhi	r7,65279
 8006670:	39ffbfc4 	addi	r7,r7,-257
 8006674:	00ca303a 	nor	r5,zero,r3
 8006678:	01a02074 	movhi	r6,32897
 800667c:	19c7883a 	add	r3,r3,r7
 8006680:	31a02004 	addi	r6,r6,-32640
 8006684:	1946703a 	and	r3,r3,r5
 8006688:	1986703a 	and	r3,r3,r6
 800668c:	1800091e 	bne	r3,zero,80066b4 <strlen+0x78>
 8006690:	10800104 	addi	r2,r2,4
 8006694:	10c00017 	ldw	r3,0(r2)
 8006698:	19cb883a 	add	r5,r3,r7
 800669c:	00c6303a 	nor	r3,zero,r3
 80066a0:	28c6703a 	and	r3,r5,r3
 80066a4:	1986703a 	and	r3,r3,r6
 80066a8:	183ff926 	beq	r3,zero,8006690 <strlen+0x54>
 80066ac:	00000106 	br	80066b4 <strlen+0x78>
 80066b0:	10800044 	addi	r2,r2,1
 80066b4:	10c00007 	ldb	r3,0(r2)
 80066b8:	183ffd1e 	bne	r3,zero,80066b0 <strlen+0x74>
 80066bc:	1105c83a 	sub	r2,r2,r4
 80066c0:	f800283a 	ret
 80066c4:	2005883a 	mov	r2,r4
 80066c8:	003fe706 	br	8006668 <strlen+0x2c>
 80066cc:	0005883a 	mov	r2,zero
 80066d0:	f800283a 	ret

080066d4 <strncmp>:
 80066d4:	30003126 	beq	r6,zero,800679c <strncmp+0xc8>
 80066d8:	2144b03a 	or	r2,r4,r5
 80066dc:	108000cc 	andi	r2,r2,3
 80066e0:	10001e1e 	bne	r2,zero,800675c <strncmp+0x88>
 80066e4:	024000c4 	movi	r9,3
 80066e8:	49801c2e 	bgeu	r9,r6,800675c <strncmp+0x88>
 80066ec:	20800017 	ldw	r2,0(r4)
 80066f0:	28c00017 	ldw	r3,0(r5)
 80066f4:	10c0191e 	bne	r2,r3,800675c <strncmp+0x88>
 80066f8:	31bfff04 	addi	r6,r6,-4
 80066fc:	30002726 	beq	r6,zero,800679c <strncmp+0xc8>
 8006700:	02ffbff4 	movhi	r11,65279
 8006704:	5affbfc4 	addi	r11,r11,-257
 8006708:	0086303a 	nor	r3,zero,r2
 800670c:	02a02074 	movhi	r10,32897
 8006710:	12c5883a 	add	r2,r2,r11
 8006714:	52a02004 	addi	r10,r10,-32640
 8006718:	10c4703a 	and	r2,r2,r3
 800671c:	1284703a 	and	r2,r2,r10
 8006720:	10000b26 	beq	r2,zero,8006750 <strncmp+0x7c>
 8006724:	00001d06 	br	800679c <strncmp+0xc8>
 8006728:	20c00017 	ldw	r3,0(r4)
 800672c:	29c00017 	ldw	r7,0(r5)
 8006730:	1ad1883a 	add	r8,r3,r11
 8006734:	00c4303a 	nor	r2,zero,r3
 8006738:	4084703a 	and	r2,r8,r2
 800673c:	1284703a 	and	r2,r2,r10
 8006740:	19c0061e 	bne	r3,r7,800675c <strncmp+0x88>
 8006744:	31bfff04 	addi	r6,r6,-4
 8006748:	30001426 	beq	r6,zero,800679c <strncmp+0xc8>
 800674c:	1000131e 	bne	r2,zero,800679c <strncmp+0xc8>
 8006750:	21000104 	addi	r4,r4,4
 8006754:	29400104 	addi	r5,r5,4
 8006758:	49bff336 	bltu	r9,r6,8006728 <strncmp+0x54>
 800675c:	28800007 	ldb	r2,0(r5)
 8006760:	20c00007 	ldb	r3,0(r4)
 8006764:	31bfffc4 	addi	r6,r6,-1
 8006768:	10c0081e 	bne	r2,r3,800678c <strncmp+0xb8>
 800676c:	30000b26 	beq	r6,zero,800679c <strncmp+0xc8>
 8006770:	10000a26 	beq	r2,zero,800679c <strncmp+0xc8>
 8006774:	21000044 	addi	r4,r4,1
 8006778:	29400044 	addi	r5,r5,1
 800677c:	20800007 	ldb	r2,0(r4)
 8006780:	28c00007 	ldb	r3,0(r5)
 8006784:	31bfffc4 	addi	r6,r6,-1
 8006788:	10fff826 	beq	r2,r3,800676c <strncmp+0x98>
 800678c:	20800003 	ldbu	r2,0(r4)
 8006790:	28c00003 	ldbu	r3,0(r5)
 8006794:	10c5c83a 	sub	r2,r2,r3
 8006798:	f800283a 	ret
 800679c:	0005883a 	mov	r2,zero
 80067a0:	f800283a 	ret

080067a4 <strncpy>:
 80067a4:	2906b03a 	or	r3,r5,r4
 80067a8:	18c000cc 	andi	r3,r3,3
 80067ac:	2005883a 	mov	r2,r4
 80067b0:	18002c1e 	bne	r3,zero,8006864 <strncpy+0xc0>
 80067b4:	010000c4 	movi	r4,3
 80067b8:	21802a2e 	bgeu	r4,r6,8006864 <strncpy+0xc0>
 80067bc:	033fbff4 	movhi	r12,65279
 80067c0:	02e02074 	movhi	r11,32897
 80067c4:	633fbfc4 	addi	r12,r12,-257
 80067c8:	5ae02004 	addi	r11,r11,-32640
 80067cc:	100f883a 	mov	r7,r2
 80067d0:	2a000017 	ldw	r8,0(r5)
 80067d4:	3815883a 	mov	r10,r7
 80067d8:	4313883a 	add	r9,r8,r12
 80067dc:	0206303a 	nor	r3,zero,r8
 80067e0:	48c6703a 	and	r3,r9,r3
 80067e4:	1ac6703a 	and	r3,r3,r11
 80067e8:	1800261e 	bne	r3,zero,8006884 <strncpy+0xe0>
 80067ec:	39c00104 	addi	r7,r7,4
 80067f0:	52000015 	stw	r8,0(r10)
 80067f4:	31bfff04 	addi	r6,r6,-4
 80067f8:	3811883a 	mov	r8,r7
 80067fc:	29400104 	addi	r5,r5,4
 8006800:	21bff336 	bltu	r4,r6,80067d0 <strncpy+0x2c>
 8006804:	30001e26 	beq	r6,zero,8006880 <strncpy+0xdc>
 8006808:	29c00003 	ldbu	r7,0(r5)
 800680c:	31bfffc4 	addi	r6,r6,-1
 8006810:	40c00044 	addi	r3,r8,1
 8006814:	41c00005 	stb	r7,0(r8)
 8006818:	39c03fcc 	andi	r7,r7,255
 800681c:	39c0201c 	xori	r7,r7,128
 8006820:	39ffe004 	addi	r7,r7,-128
 8006824:	29400044 	addi	r5,r5,1
 8006828:	38001026 	beq	r7,zero,800686c <strncpy+0xc8>
 800682c:	1811883a 	mov	r8,r3
 8006830:	00000906 	br	8006858 <strncpy+0xb4>
 8006834:	29c00003 	ldbu	r7,0(r5)
 8006838:	31bfffc4 	addi	r6,r6,-1
 800683c:	29400044 	addi	r5,r5,1
 8006840:	41c00005 	stb	r7,0(r8)
 8006844:	39c03fcc 	andi	r7,r7,255
 8006848:	39c0201c 	xori	r7,r7,128
 800684c:	39ffe004 	addi	r7,r7,-128
 8006850:	1811883a 	mov	r8,r3
 8006854:	38000526 	beq	r7,zero,800686c <strncpy+0xc8>
 8006858:	18c00044 	addi	r3,r3,1
 800685c:	303ff51e 	bne	r6,zero,8006834 <strncpy+0x90>
 8006860:	f800283a 	ret
 8006864:	1011883a 	mov	r8,r2
 8006868:	003fe606 	br	8006804 <strncpy+0x60>
 800686c:	30000726 	beq	r6,zero,800688c <strncpy+0xe8>
 8006870:	198d883a 	add	r6,r3,r6
 8006874:	18000005 	stb	zero,0(r3)
 8006878:	18c00044 	addi	r3,r3,1
 800687c:	19bffd1e 	bne	r3,r6,8006874 <strncpy+0xd0>
 8006880:	f800283a 	ret
 8006884:	3811883a 	mov	r8,r7
 8006888:	003fdf06 	br	8006808 <strncpy+0x64>
 800688c:	f800283a 	ret

08006890 <time>:
 8006890:	00820074 	movhi	r2,2049
 8006894:	defffc04 	addi	sp,sp,-16
 8006898:	109e2204 	addi	r2,r2,30856
 800689c:	dc000215 	stw	r16,8(sp)
 80068a0:	2021883a 	mov	r16,r4
 80068a4:	11000017 	ldw	r4,0(r2)
 80068a8:	000d883a 	mov	r6,zero
 80068ac:	d80b883a 	mov	r5,sp
 80068b0:	dfc00315 	stw	ra,12(sp)
 80068b4:	800b77c0 	call	800b77c <_gettimeofday_r>
 80068b8:	10000716 	blt	r2,zero,80068d8 <time+0x48>
 80068bc:	d8800017 	ldw	r2,0(sp)
 80068c0:	80000126 	beq	r16,zero,80068c8 <time+0x38>
 80068c4:	80800015 	stw	r2,0(r16)
 80068c8:	dfc00317 	ldw	ra,12(sp)
 80068cc:	dc000217 	ldw	r16,8(sp)
 80068d0:	dec00404 	addi	sp,sp,16
 80068d4:	f800283a 	ret
 80068d8:	00bfffc4 	movi	r2,-1
 80068dc:	003ffa06 	br	80068c8 <time+0x38>

080068e0 <_times_r>:
 80068e0:	2809883a 	mov	r4,r5
 80068e4:	80137fc1 	jmpi	80137fc <times>

080068e8 <___vfprintf_internal_r>:
 80068e8:	deffb804 	addi	sp,sp,-288
 80068ec:	dfc04715 	stw	ra,284(sp)
 80068f0:	ddc04515 	stw	r23,276(sp)
 80068f4:	dd404315 	stw	r21,268(sp)
 80068f8:	d9002d15 	stw	r4,180(sp)
 80068fc:	282f883a 	mov	r23,r5
 8006900:	302b883a 	mov	r21,r6
 8006904:	d9c02e15 	stw	r7,184(sp)
 8006908:	df004615 	stw	fp,280(sp)
 800690c:	dd804415 	stw	r22,272(sp)
 8006910:	dd004215 	stw	r20,264(sp)
 8006914:	dcc04115 	stw	r19,260(sp)
 8006918:	dc804015 	stw	r18,256(sp)
 800691c:	dc403f15 	stw	r17,252(sp)
 8006920:	dc003e15 	stw	r16,248(sp)
 8006924:	800b8840 	call	800b884 <_localeconv_r>
 8006928:	10800017 	ldw	r2,0(r2)
 800692c:	1009883a 	mov	r4,r2
 8006930:	d8803415 	stw	r2,208(sp)
 8006934:	800663c0 	call	800663c <strlen>
 8006938:	d8803715 	stw	r2,220(sp)
 800693c:	d8802d17 	ldw	r2,180(sp)
 8006940:	10000226 	beq	r2,zero,800694c <___vfprintf_internal_r+0x64>
 8006944:	10800e17 	ldw	r2,56(r2)
 8006948:	1000fb26 	beq	r2,zero,8006d38 <___vfprintf_internal_r+0x450>
 800694c:	b880030b 	ldhu	r2,12(r23)
 8006950:	10c8000c 	andi	r3,r2,8192
 8006954:	1800061e 	bne	r3,zero,8006970 <___vfprintf_internal_r+0x88>
 8006958:	b9001917 	ldw	r4,100(r23)
 800695c:	00f7ffc4 	movi	r3,-8193
 8006960:	10880014 	ori	r2,r2,8192
 8006964:	20c6703a 	and	r3,r4,r3
 8006968:	b880030d 	sth	r2,12(r23)
 800696c:	b8c01915 	stw	r3,100(r23)
 8006970:	10c0020c 	andi	r3,r2,8
 8006974:	1800c326 	beq	r3,zero,8006c84 <___vfprintf_internal_r+0x39c>
 8006978:	b8c00417 	ldw	r3,16(r23)
 800697c:	1800c126 	beq	r3,zero,8006c84 <___vfprintf_internal_r+0x39c>
 8006980:	1080068c 	andi	r2,r2,26
 8006984:	00c00284 	movi	r3,10
 8006988:	10c0c626 	beq	r2,r3,8006ca4 <___vfprintf_internal_r+0x3bc>
 800698c:	d8c00404 	addi	r3,sp,16
 8006990:	05020074 	movhi	r20,2049
 8006994:	d9001e04 	addi	r4,sp,120
 8006998:	a516f484 	addi	r20,r20,23506
 800699c:	d8c01e15 	stw	r3,120(sp)
 80069a0:	d8002015 	stw	zero,128(sp)
 80069a4:	d8001f15 	stw	zero,124(sp)
 80069a8:	d8003315 	stw	zero,204(sp)
 80069ac:	d8003615 	stw	zero,216(sp)
 80069b0:	d8003815 	stw	zero,224(sp)
 80069b4:	1811883a 	mov	r8,r3
 80069b8:	d8003915 	stw	zero,228(sp)
 80069bc:	d8003a15 	stw	zero,232(sp)
 80069c0:	d8002f15 	stw	zero,188(sp)
 80069c4:	d9002815 	stw	r4,160(sp)
 80069c8:	a8800007 	ldb	r2,0(r21)
 80069cc:	10028b26 	beq	r2,zero,80073fc <___vfprintf_internal_r+0xb14>
 80069d0:	00c00944 	movi	r3,37
 80069d4:	a823883a 	mov	r17,r21
 80069d8:	10c0021e 	bne	r2,r3,80069e4 <___vfprintf_internal_r+0xfc>
 80069dc:	00001406 	br	8006a30 <___vfprintf_internal_r+0x148>
 80069e0:	10c00326 	beq	r2,r3,80069f0 <___vfprintf_internal_r+0x108>
 80069e4:	8c400044 	addi	r17,r17,1
 80069e8:	88800007 	ldb	r2,0(r17)
 80069ec:	103ffc1e 	bne	r2,zero,80069e0 <___vfprintf_internal_r+0xf8>
 80069f0:	8d61c83a 	sub	r16,r17,r21
 80069f4:	80000e26 	beq	r16,zero,8006a30 <___vfprintf_internal_r+0x148>
 80069f8:	d8c02017 	ldw	r3,128(sp)
 80069fc:	d8801f17 	ldw	r2,124(sp)
 8006a00:	45400015 	stw	r21,0(r8)
 8006a04:	1c07883a 	add	r3,r3,r16
 8006a08:	10800044 	addi	r2,r2,1
 8006a0c:	d8c02015 	stw	r3,128(sp)
 8006a10:	44000115 	stw	r16,4(r8)
 8006a14:	d8801f15 	stw	r2,124(sp)
 8006a18:	00c001c4 	movi	r3,7
 8006a1c:	1880a916 	blt	r3,r2,8006cc4 <___vfprintf_internal_r+0x3dc>
 8006a20:	42000204 	addi	r8,r8,8
 8006a24:	d9402f17 	ldw	r5,188(sp)
 8006a28:	2c0b883a 	add	r5,r5,r16
 8006a2c:	d9402f15 	stw	r5,188(sp)
 8006a30:	88800007 	ldb	r2,0(r17)
 8006a34:	1000aa26 	beq	r2,zero,8006ce0 <___vfprintf_internal_r+0x3f8>
 8006a38:	8d400044 	addi	r21,r17,1
 8006a3c:	8c400047 	ldb	r17,1(r17)
 8006a40:	0021883a 	mov	r16,zero
 8006a44:	00bfffc4 	movi	r2,-1
 8006a48:	0025883a 	mov	r18,zero
 8006a4c:	dc002905 	stb	r16,164(sp)
 8006a50:	d8002785 	stb	zero,158(sp)
 8006a54:	d8002b05 	stb	zero,172(sp)
 8006a58:	d8802a15 	stw	r2,168(sp)
 8006a5c:	d8003115 	stw	zero,196(sp)
 8006a60:	04c01604 	movi	r19,88
 8006a64:	05800244 	movi	r22,9
 8006a68:	9021883a 	mov	r16,r18
 8006a6c:	4039883a 	mov	fp,r8
 8006a70:	ad400044 	addi	r21,r21,1
 8006a74:	88bff804 	addi	r2,r17,-32
 8006a78:	98833236 	bltu	r19,r2,8007744 <___vfprintf_internal_r+0xe5c>
 8006a7c:	100490ba 	slli	r2,r2,2
 8006a80:	00c20034 	movhi	r3,2048
 8006a84:	18daa504 	addi	r3,r3,27284
 8006a88:	10c5883a 	add	r2,r2,r3
 8006a8c:	10800017 	ldw	r2,0(r2)
 8006a90:	1000683a 	jmp	r2
 8006a94:	0800763c 	xorhi	zero,at,472
 8006a98:	08007744 	addi	zero,at,477
 8006a9c:	08007744 	addi	zero,at,477
 8006aa0:	0800765c 	xori	zero,at,473
 8006aa4:	08007744 	addi	zero,at,477
 8006aa8:	08007744 	addi	zero,at,477
 8006aac:	08007744 	addi	zero,at,477
 8006ab0:	08007744 	addi	zero,at,477
 8006ab4:	08007744 	addi	zero,at,477
 8006ab8:	08007744 	addi	zero,at,477
 8006abc:	08006d44 	addi	zero,at,437
 8006ac0:	0800754c 	andi	zero,at,469
 8006ac4:	08007744 	addi	zero,at,477
 8006ac8:	08006c08 	cmpgei	zero,at,432
 8006acc:	08006d68 	cmpgeui	zero,at,437
 8006ad0:	08007744 	addi	zero,at,477
 8006ad4:	08006db8 	rdprs	zero,at,438
 8006ad8:	08006dc4 	addi	zero,at,439
 8006adc:	08006dc4 	addi	zero,at,439
 8006ae0:	08006dc4 	addi	zero,at,439
 8006ae4:	08006dc4 	addi	zero,at,439
 8006ae8:	08006dc4 	addi	zero,at,439
 8006aec:	08006dc4 	addi	zero,at,439
 8006af0:	08006dc4 	addi	zero,at,439
 8006af4:	08006dc4 	addi	zero,at,439
 8006af8:	08006dc4 	addi	zero,at,439
 8006afc:	08007744 	addi	zero,at,477
 8006b00:	08007744 	addi	zero,at,477
 8006b04:	08007744 	addi	zero,at,477
 8006b08:	08007744 	addi	zero,at,477
 8006b0c:	08007744 	addi	zero,at,477
 8006b10:	08007744 	addi	zero,at,477
 8006b14:	08007744 	addi	zero,at,477
 8006b18:	08007744 	addi	zero,at,477
 8006b1c:	08007744 	addi	zero,at,477
 8006b20:	08007744 	addi	zero,at,477
 8006b24:	08006e00 	call	8006e0 <__alt_mem_onchip_memory2_0+0x8006e0>
 8006b28:	08006ec8 	cmpgei	zero,at,443
 8006b2c:	08007744 	addi	zero,at,477
 8006b30:	08006ec8 	cmpgei	zero,at,443
 8006b34:	08007744 	addi	zero,at,477
 8006b38:	08007744 	addi	zero,at,477
 8006b3c:	08007744 	addi	zero,at,477
 8006b40:	08007744 	addi	zero,at,477
 8006b44:	08006f74 	orhi	zero,at,445
 8006b48:	08007744 	addi	zero,at,477
 8006b4c:	08007744 	addi	zero,at,477
 8006b50:	08006f80 	call	8006f8 <__alt_mem_onchip_memory2_0+0x8006f8>
 8006b54:	08007744 	addi	zero,at,477
 8006b58:	08007744 	addi	zero,at,477
 8006b5c:	08007744 	addi	zero,at,477
 8006b60:	08007744 	addi	zero,at,477
 8006b64:	08007744 	addi	zero,at,477
 8006b68:	08007404 	addi	zero,at,464
 8006b6c:	08007744 	addi	zero,at,477
 8006b70:	08007744 	addi	zero,at,477
 8006b74:	08007470 	cmpltui	zero,at,465
 8006b78:	08007744 	addi	zero,at,477
 8006b7c:	08007744 	addi	zero,at,477
 8006b80:	08007744 	addi	zero,at,477
 8006b84:	08007744 	addi	zero,at,477
 8006b88:	08007744 	addi	zero,at,477
 8006b8c:	08007744 	addi	zero,at,477
 8006b90:	08007744 	addi	zero,at,477
 8006b94:	08007744 	addi	zero,at,477
 8006b98:	08007744 	addi	zero,at,477
 8006b9c:	08007744 	addi	zero,at,477
 8006ba0:	080076e8 	cmpgeui	zero,at,475
 8006ba4:	08007668 	cmpgeui	zero,at,473
 8006ba8:	08006ec8 	cmpgei	zero,at,443
 8006bac:	08006ec8 	cmpgei	zero,at,443
 8006bb0:	08006ec8 	cmpgei	zero,at,443
 8006bb4:	08007688 	cmpgei	zero,at,474
 8006bb8:	08007668 	cmpgeui	zero,at,473
 8006bbc:	08007744 	addi	zero,at,477
 8006bc0:	08007744 	addi	zero,at,477
 8006bc4:	08007694 	ori	zero,at,474
 8006bc8:	08007744 	addi	zero,at,477
 8006bcc:	080076a8 	cmpgeui	zero,at,474
 8006bd0:	0800752c 	andhi	zero,at,468
 8006bd4:	08006c14 	ori	zero,at,432
 8006bd8:	08007564 	muli	zero,at,469
 8006bdc:	08007744 	addi	zero,at,477
 8006be0:	08007570 	cmpltui	zero,at,469
 8006be4:	08007744 	addi	zero,at,477
 8006be8:	080075d4 	ori	zero,at,471
 8006bec:	08007744 	addi	zero,at,477
 8006bf0:	08007744 	addi	zero,at,477
 8006bf4:	080075f4 	orhi	zero,at,471
 8006bf8:	d8c03117 	ldw	r3,196(sp)
 8006bfc:	d8802e15 	stw	r2,184(sp)
 8006c00:	00c7c83a 	sub	r3,zero,r3
 8006c04:	d8c03115 	stw	r3,196(sp)
 8006c08:	84000114 	ori	r16,r16,4
 8006c0c:	ac400007 	ldb	r17,0(r21)
 8006c10:	003f9706 	br	8006a70 <___vfprintf_internal_r+0x188>
 8006c14:	00800c04 	movi	r2,48
 8006c18:	d8802705 	stb	r2,156(sp)
 8006c1c:	00801e04 	movi	r2,120
 8006c20:	d8802745 	stb	r2,157(sp)
 8006c24:	d9002a17 	ldw	r4,168(sp)
 8006c28:	d8802e17 	ldw	r2,184(sp)
 8006c2c:	d8002785 	stb	zero,158(sp)
 8006c30:	e011883a 	mov	r8,fp
 8006c34:	10c00104 	addi	r3,r2,4
 8006c38:	14c00017 	ldw	r19,0(r2)
 8006c3c:	002d883a 	mov	r22,zero
 8006c40:	80800094 	ori	r2,r16,2
 8006c44:	2002ca16 	blt	r4,zero,8007770 <___vfprintf_internal_r+0xe88>
 8006c48:	00bfdfc4 	movi	r2,-129
 8006c4c:	80a4703a 	and	r18,r16,r2
 8006c50:	d8c02e15 	stw	r3,184(sp)
 8006c54:	94800094 	ori	r18,r18,2
 8006c58:	9802b41e 	bne	r19,zero,800772c <___vfprintf_internal_r+0xe44>
 8006c5c:	01420074 	movhi	r5,2049
 8006c60:	2956ed04 	addi	r5,r5,23476
 8006c64:	d9403915 	stw	r5,228(sp)
 8006c68:	04401e04 	movi	r17,120
 8006c6c:	d8802a17 	ldw	r2,168(sp)
 8006c70:	0039883a 	mov	fp,zero
 8006c74:	1001fa26 	beq	r2,zero,8007460 <___vfprintf_internal_r+0xb78>
 8006c78:	0027883a 	mov	r19,zero
 8006c7c:	002d883a 	mov	r22,zero
 8006c80:	00021906 	br	80074e8 <___vfprintf_internal_r+0xc00>
 8006c84:	d9002d17 	ldw	r4,180(sp)
 8006c88:	b80b883a 	mov	r5,r23
 8006c8c:	8008c9c0 	call	8008c9c <__swsetup_r>
 8006c90:	1005dc1e 	bne	r2,zero,8008404 <___vfprintf_internal_r+0x1b1c>
 8006c94:	b880030b 	ldhu	r2,12(r23)
 8006c98:	00c00284 	movi	r3,10
 8006c9c:	1080068c 	andi	r2,r2,26
 8006ca0:	10ff3a1e 	bne	r2,r3,800698c <___vfprintf_internal_r+0xa4>
 8006ca4:	b880038f 	ldh	r2,14(r23)
 8006ca8:	103f3816 	blt	r2,zero,800698c <___vfprintf_internal_r+0xa4>
 8006cac:	d9c02e17 	ldw	r7,184(sp)
 8006cb0:	d9002d17 	ldw	r4,180(sp)
 8006cb4:	a80d883a 	mov	r6,r21
 8006cb8:	b80b883a 	mov	r5,r23
 8006cbc:	8008be00 	call	8008be0 <__sbprintf>
 8006cc0:	00001106 	br	8006d08 <___vfprintf_internal_r+0x420>
 8006cc4:	d9002d17 	ldw	r4,180(sp)
 8006cc8:	d9801e04 	addi	r6,sp,120
 8006ccc:	b80b883a 	mov	r5,r23
 8006cd0:	800e01c0 	call	800e01c <__sprint_r>
 8006cd4:	1000081e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 8006cd8:	da000404 	addi	r8,sp,16
 8006cdc:	003f5106 	br	8006a24 <___vfprintf_internal_r+0x13c>
 8006ce0:	d8802017 	ldw	r2,128(sp)
 8006ce4:	10000426 	beq	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 8006ce8:	d9002d17 	ldw	r4,180(sp)
 8006cec:	d9801e04 	addi	r6,sp,120
 8006cf0:	b80b883a 	mov	r5,r23
 8006cf4:	800e01c0 	call	800e01c <__sprint_r>
 8006cf8:	b880030b 	ldhu	r2,12(r23)
 8006cfc:	1080100c 	andi	r2,r2,64
 8006d00:	1005c01e 	bne	r2,zero,8008404 <___vfprintf_internal_r+0x1b1c>
 8006d04:	d8802f17 	ldw	r2,188(sp)
 8006d08:	dfc04717 	ldw	ra,284(sp)
 8006d0c:	df004617 	ldw	fp,280(sp)
 8006d10:	ddc04517 	ldw	r23,276(sp)
 8006d14:	dd804417 	ldw	r22,272(sp)
 8006d18:	dd404317 	ldw	r21,268(sp)
 8006d1c:	dd004217 	ldw	r20,264(sp)
 8006d20:	dcc04117 	ldw	r19,260(sp)
 8006d24:	dc804017 	ldw	r18,256(sp)
 8006d28:	dc403f17 	ldw	r17,252(sp)
 8006d2c:	dc003e17 	ldw	r16,248(sp)
 8006d30:	dec04804 	addi	sp,sp,288
 8006d34:	f800283a 	ret
 8006d38:	d9002d17 	ldw	r4,180(sp)
 8006d3c:	800aca80 	call	800aca8 <__sinit>
 8006d40:	003f0206 	br	800694c <___vfprintf_internal_r+0x64>
 8006d44:	d9002e17 	ldw	r4,184(sp)
 8006d48:	d9402e17 	ldw	r5,184(sp)
 8006d4c:	21000017 	ldw	r4,0(r4)
 8006d50:	28800104 	addi	r2,r5,4
 8006d54:	d9003115 	stw	r4,196(sp)
 8006d58:	203fa716 	blt	r4,zero,8006bf8 <___vfprintf_internal_r+0x310>
 8006d5c:	d8802e15 	stw	r2,184(sp)
 8006d60:	ac400007 	ldb	r17,0(r21)
 8006d64:	003f4206 	br	8006a70 <___vfprintf_internal_r+0x188>
 8006d68:	ac400007 	ldb	r17,0(r21)
 8006d6c:	01000a84 	movi	r4,42
 8006d70:	a8c00044 	addi	r3,r21,1
 8006d74:	89075826 	beq	r17,r4,8008ad8 <___vfprintf_internal_r+0x21f0>
 8006d78:	8cbff404 	addi	r18,r17,-48
 8006d7c:	b486ae36 	bltu	r22,r18,8008838 <___vfprintf_internal_r+0x1f50>
 8006d80:	0009883a 	mov	r4,zero
 8006d84:	1823883a 	mov	r17,r3
 8006d88:	01400284 	movi	r5,10
 8006d8c:	80057b40 	call	80057b4 <__mulsi3>
 8006d90:	88c00007 	ldb	r3,0(r17)
 8006d94:	1489883a 	add	r4,r2,r18
 8006d98:	8d400044 	addi	r21,r17,1
 8006d9c:	1cbff404 	addi	r18,r3,-48
 8006da0:	a823883a 	mov	r17,r21
 8006da4:	b4bff82e 	bgeu	r22,r18,8006d88 <___vfprintf_internal_r+0x4a0>
 8006da8:	1823883a 	mov	r17,r3
 8006dac:	2005f616 	blt	r4,zero,8008588 <___vfprintf_internal_r+0x1ca0>
 8006db0:	d9002a15 	stw	r4,168(sp)
 8006db4:	003f2f06 	br	8006a74 <___vfprintf_internal_r+0x18c>
 8006db8:	84002014 	ori	r16,r16,128
 8006dbc:	ac400007 	ldb	r17,0(r21)
 8006dc0:	003f2b06 	br	8006a70 <___vfprintf_internal_r+0x188>
 8006dc4:	8cbff404 	addi	r18,r17,-48
 8006dc8:	d8003115 	stw	zero,196(sp)
 8006dcc:	0009883a 	mov	r4,zero
 8006dd0:	a823883a 	mov	r17,r21
 8006dd4:	01400284 	movi	r5,10
 8006dd8:	80057b40 	call	80057b4 <__mulsi3>
 8006ddc:	88c00007 	ldb	r3,0(r17)
 8006de0:	9089883a 	add	r4,r18,r2
 8006de4:	ad400044 	addi	r21,r21,1
 8006de8:	1cbff404 	addi	r18,r3,-48
 8006dec:	a823883a 	mov	r17,r21
 8006df0:	b4bff82e 	bgeu	r22,r18,8006dd4 <___vfprintf_internal_r+0x4ec>
 8006df4:	1823883a 	mov	r17,r3
 8006df8:	d9003115 	stw	r4,196(sp)
 8006dfc:	003f1d06 	br	8006a74 <___vfprintf_internal_r+0x18c>
 8006e00:	8025883a 	mov	r18,r16
 8006e04:	dc002903 	ldbu	r16,164(sp)
 8006e08:	e011883a 	mov	r8,fp
 8006e0c:	84003fcc 	andi	r16,r16,255
 8006e10:	8007531e 	bne	r16,zero,8008b60 <___vfprintf_internal_r+0x2278>
 8006e14:	94800414 	ori	r18,r18,16
 8006e18:	9080080c 	andi	r2,r18,32
 8006e1c:	1003a326 	beq	r2,zero,8007cac <___vfprintf_internal_r+0x13c4>
 8006e20:	d9002e17 	ldw	r4,184(sp)
 8006e24:	20800117 	ldw	r2,4(r4)
 8006e28:	24c00017 	ldw	r19,0(r4)
 8006e2c:	21000204 	addi	r4,r4,8
 8006e30:	d9002e15 	stw	r4,184(sp)
 8006e34:	102d883a 	mov	r22,r2
 8006e38:	10047316 	blt	r2,zero,8008008 <___vfprintf_internal_r+0x1720>
 8006e3c:	d9002a17 	ldw	r4,168(sp)
 8006e40:	df002783 	ldbu	fp,158(sp)
 8006e44:	2003e416 	blt	r4,zero,8007dd8 <___vfprintf_internal_r+0x14f0>
 8006e48:	00ffdfc4 	movi	r3,-129
 8006e4c:	9d84b03a 	or	r2,r19,r22
 8006e50:	90e4703a 	and	r18,r18,r3
 8006e54:	10018026 	beq	r2,zero,8007458 <___vfprintf_internal_r+0xb70>
 8006e58:	b003ab26 	beq	r22,zero,8007d08 <___vfprintf_internal_r+0x1420>
 8006e5c:	dc402915 	stw	r17,164(sp)
 8006e60:	dc001e04 	addi	r16,sp,120
 8006e64:	b023883a 	mov	r17,r22
 8006e68:	402d883a 	mov	r22,r8
 8006e6c:	9809883a 	mov	r4,r19
 8006e70:	880b883a 	mov	r5,r17
 8006e74:	01800284 	movi	r6,10
 8006e78:	000f883a 	mov	r7,zero
 8006e7c:	80105600 	call	8010560 <__umoddi3>
 8006e80:	10800c04 	addi	r2,r2,48
 8006e84:	843fffc4 	addi	r16,r16,-1
 8006e88:	9809883a 	mov	r4,r19
 8006e8c:	880b883a 	mov	r5,r17
 8006e90:	80800005 	stb	r2,0(r16)
 8006e94:	01800284 	movi	r6,10
 8006e98:	000f883a 	mov	r7,zero
 8006e9c:	800ff640 	call	800ff64 <__udivdi3>
 8006ea0:	1027883a 	mov	r19,r2
 8006ea4:	10c4b03a 	or	r2,r2,r3
 8006ea8:	1823883a 	mov	r17,r3
 8006eac:	103fef1e 	bne	r2,zero,8006e6c <___vfprintf_internal_r+0x584>
 8006eb0:	d8c02817 	ldw	r3,160(sp)
 8006eb4:	dc402917 	ldw	r17,164(sp)
 8006eb8:	b011883a 	mov	r8,r22
 8006ebc:	1c07c83a 	sub	r3,r3,r16
 8006ec0:	d8c02b15 	stw	r3,172(sp)
 8006ec4:	00005f06 	br	8007044 <___vfprintf_internal_r+0x75c>
 8006ec8:	8025883a 	mov	r18,r16
 8006ecc:	dc002903 	ldbu	r16,164(sp)
 8006ed0:	e011883a 	mov	r8,fp
 8006ed4:	84003fcc 	andi	r16,r16,255
 8006ed8:	80071e1e 	bne	r16,zero,8008b54 <___vfprintf_internal_r+0x226c>
 8006edc:	9080020c 	andi	r2,r18,8
 8006ee0:	1004af26 	beq	r2,zero,80081a0 <___vfprintf_internal_r+0x18b8>
 8006ee4:	d9002e17 	ldw	r4,184(sp)
 8006ee8:	d9402e17 	ldw	r5,184(sp)
 8006eec:	d8802e17 	ldw	r2,184(sp)
 8006ef0:	21000017 	ldw	r4,0(r4)
 8006ef4:	29400117 	ldw	r5,4(r5)
 8006ef8:	10800204 	addi	r2,r2,8
 8006efc:	d9003615 	stw	r4,216(sp)
 8006f00:	d9403815 	stw	r5,224(sp)
 8006f04:	d8802e15 	stw	r2,184(sp)
 8006f08:	d9003617 	ldw	r4,216(sp)
 8006f0c:	d9403817 	ldw	r5,224(sp)
 8006f10:	da003d15 	stw	r8,244(sp)
 8006f14:	04000044 	movi	r16,1
 8006f18:	800dc400 	call	800dc40 <__fpclassifyd>
 8006f1c:	da003d17 	ldw	r8,244(sp)
 8006f20:	1404441e 	bne	r2,r16,8008034 <___vfprintf_internal_r+0x174c>
 8006f24:	d9003617 	ldw	r4,216(sp)
 8006f28:	d9403817 	ldw	r5,224(sp)
 8006f2c:	000d883a 	mov	r6,zero
 8006f30:	000f883a 	mov	r7,zero
 8006f34:	8011fdc0 	call	8011fdc <__ledf2>
 8006f38:	da003d17 	ldw	r8,244(sp)
 8006f3c:	1005e316 	blt	r2,zero,80086cc <___vfprintf_internal_r+0x1de4>
 8006f40:	df002783 	ldbu	fp,158(sp)
 8006f44:	008011c4 	movi	r2,71
 8006f48:	1445580e 	bge	r2,r17,80084ac <___vfprintf_internal_r+0x1bc4>
 8006f4c:	04020074 	movhi	r16,2049
 8006f50:	8416e504 	addi	r16,r16,23444
 8006f54:	00c000c4 	movi	r3,3
 8006f58:	00bfdfc4 	movi	r2,-129
 8006f5c:	d8c02915 	stw	r3,164(sp)
 8006f60:	90a4703a 	and	r18,r18,r2
 8006f64:	d8c02b15 	stw	r3,172(sp)
 8006f68:	d8002a15 	stw	zero,168(sp)
 8006f6c:	d8003215 	stw	zero,200(sp)
 8006f70:	00003a06 	br	800705c <___vfprintf_internal_r+0x774>
 8006f74:	84000214 	ori	r16,r16,8
 8006f78:	ac400007 	ldb	r17,0(r21)
 8006f7c:	003ebc06 	br	8006a70 <___vfprintf_internal_r+0x188>
 8006f80:	8025883a 	mov	r18,r16
 8006f84:	dc002903 	ldbu	r16,164(sp)
 8006f88:	e011883a 	mov	r8,fp
 8006f8c:	84003fcc 	andi	r16,r16,255
 8006f90:	8007001e 	bne	r16,zero,8008b94 <___vfprintf_internal_r+0x22ac>
 8006f94:	94800414 	ori	r18,r18,16
 8006f98:	9080080c 	andi	r2,r18,32
 8006f9c:	1002fa26 	beq	r2,zero,8007b88 <___vfprintf_internal_r+0x12a0>
 8006fa0:	d9002e17 	ldw	r4,184(sp)
 8006fa4:	d9402a17 	ldw	r5,168(sp)
 8006fa8:	d8002785 	stb	zero,158(sp)
 8006fac:	20800204 	addi	r2,r4,8
 8006fb0:	24c00017 	ldw	r19,0(r4)
 8006fb4:	25800117 	ldw	r22,4(r4)
 8006fb8:	2804b116 	blt	r5,zero,8008280 <___vfprintf_internal_r+0x1998>
 8006fbc:	013fdfc4 	movi	r4,-129
 8006fc0:	9d86b03a 	or	r3,r19,r22
 8006fc4:	d8802e15 	stw	r2,184(sp)
 8006fc8:	9124703a 	and	r18,r18,r4
 8006fcc:	1802fb1e 	bne	r3,zero,8007bbc <___vfprintf_internal_r+0x12d4>
 8006fd0:	d8c02a17 	ldw	r3,168(sp)
 8006fd4:	0039883a 	mov	fp,zero
 8006fd8:	1805e526 	beq	r3,zero,8008770 <___vfprintf_internal_r+0x1e88>
 8006fdc:	0027883a 	mov	r19,zero
 8006fe0:	002d883a 	mov	r22,zero
 8006fe4:	dc001e04 	addi	r16,sp,120
 8006fe8:	9806d0fa 	srli	r3,r19,3
 8006fec:	b008977a 	slli	r4,r22,29
 8006ff0:	b02cd0fa 	srli	r22,r22,3
 8006ff4:	9cc001cc 	andi	r19,r19,7
 8006ff8:	98800c04 	addi	r2,r19,48
 8006ffc:	843fffc4 	addi	r16,r16,-1
 8007000:	20e6b03a 	or	r19,r4,r3
 8007004:	80800005 	stb	r2,0(r16)
 8007008:	9d86b03a 	or	r3,r19,r22
 800700c:	183ff61e 	bne	r3,zero,8006fe8 <___vfprintf_internal_r+0x700>
 8007010:	90c0004c 	andi	r3,r18,1
 8007014:	18014126 	beq	r3,zero,800751c <___vfprintf_internal_r+0xc34>
 8007018:	10803fcc 	andi	r2,r2,255
 800701c:	1080201c 	xori	r2,r2,128
 8007020:	10bfe004 	addi	r2,r2,-128
 8007024:	00c00c04 	movi	r3,48
 8007028:	10c13c26 	beq	r2,r3,800751c <___vfprintf_internal_r+0xc34>
 800702c:	80ffffc5 	stb	r3,-1(r16)
 8007030:	d8c02817 	ldw	r3,160(sp)
 8007034:	80bfffc4 	addi	r2,r16,-1
 8007038:	1021883a 	mov	r16,r2
 800703c:	1887c83a 	sub	r3,r3,r2
 8007040:	d8c02b15 	stw	r3,172(sp)
 8007044:	d8802b17 	ldw	r2,172(sp)
 8007048:	d9002a17 	ldw	r4,168(sp)
 800704c:	1100010e 	bge	r2,r4,8007054 <___vfprintf_internal_r+0x76c>
 8007050:	2005883a 	mov	r2,r4
 8007054:	d8802915 	stw	r2,164(sp)
 8007058:	d8003215 	stw	zero,200(sp)
 800705c:	e7003fcc 	andi	fp,fp,255
 8007060:	e700201c 	xori	fp,fp,128
 8007064:	e73fe004 	addi	fp,fp,-128
 8007068:	e0000326 	beq	fp,zero,8007078 <___vfprintf_internal_r+0x790>
 800706c:	d8c02917 	ldw	r3,164(sp)
 8007070:	18c00044 	addi	r3,r3,1
 8007074:	d8c02915 	stw	r3,164(sp)
 8007078:	90c0008c 	andi	r3,r18,2
 800707c:	d8c02c15 	stw	r3,176(sp)
 8007080:	18000326 	beq	r3,zero,8007090 <___vfprintf_internal_r+0x7a8>
 8007084:	d8c02917 	ldw	r3,164(sp)
 8007088:	18c00084 	addi	r3,r3,2
 800708c:	d8c02915 	stw	r3,164(sp)
 8007090:	90c0210c 	andi	r3,r18,132
 8007094:	d8c03015 	stw	r3,192(sp)
 8007098:	1801c51e 	bne	r3,zero,80077b0 <___vfprintf_internal_r+0xec8>
 800709c:	d9003117 	ldw	r4,196(sp)
 80070a0:	d8c02917 	ldw	r3,164(sp)
 80070a4:	20e7c83a 	sub	r19,r4,r3
 80070a8:	04c1c10e 	bge	zero,r19,80077b0 <___vfprintf_internal_r+0xec8>
 80070ac:	02400404 	movi	r9,16
 80070b0:	d8c02017 	ldw	r3,128(sp)
 80070b4:	d8801f17 	ldw	r2,124(sp)
 80070b8:	4cc52f0e 	bge	r9,r19,8008578 <___vfprintf_internal_r+0x1c90>
 80070bc:	01420074 	movhi	r5,2049
 80070c0:	2956f884 	addi	r5,r5,23522
 80070c4:	dc403b15 	stw	r17,236(sp)
 80070c8:	d9403515 	stw	r5,212(sp)
 80070cc:	9823883a 	mov	r17,r19
 80070d0:	482d883a 	mov	r22,r9
 80070d4:	9027883a 	mov	r19,r18
 80070d8:	070001c4 	movi	fp,7
 80070dc:	8025883a 	mov	r18,r16
 80070e0:	dc002d17 	ldw	r16,180(sp)
 80070e4:	00000306 	br	80070f4 <___vfprintf_internal_r+0x80c>
 80070e8:	8c7ffc04 	addi	r17,r17,-16
 80070ec:	42000204 	addi	r8,r8,8
 80070f0:	b440130e 	bge	r22,r17,8007140 <___vfprintf_internal_r+0x858>
 80070f4:	01020074 	movhi	r4,2049
 80070f8:	18c00404 	addi	r3,r3,16
 80070fc:	10800044 	addi	r2,r2,1
 8007100:	2116f884 	addi	r4,r4,23522
 8007104:	41000015 	stw	r4,0(r8)
 8007108:	45800115 	stw	r22,4(r8)
 800710c:	d8c02015 	stw	r3,128(sp)
 8007110:	d8801f15 	stw	r2,124(sp)
 8007114:	e0bff40e 	bge	fp,r2,80070e8 <___vfprintf_internal_r+0x800>
 8007118:	d9801e04 	addi	r6,sp,120
 800711c:	b80b883a 	mov	r5,r23
 8007120:	8009883a 	mov	r4,r16
 8007124:	800e01c0 	call	800e01c <__sprint_r>
 8007128:	103ef31e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 800712c:	8c7ffc04 	addi	r17,r17,-16
 8007130:	d8c02017 	ldw	r3,128(sp)
 8007134:	d8801f17 	ldw	r2,124(sp)
 8007138:	da000404 	addi	r8,sp,16
 800713c:	b47fed16 	blt	r22,r17,80070f4 <___vfprintf_internal_r+0x80c>
 8007140:	9021883a 	mov	r16,r18
 8007144:	9825883a 	mov	r18,r19
 8007148:	8827883a 	mov	r19,r17
 800714c:	dc403b17 	ldw	r17,236(sp)
 8007150:	d9403517 	ldw	r5,212(sp)
 8007154:	98c7883a 	add	r3,r19,r3
 8007158:	10800044 	addi	r2,r2,1
 800715c:	41400015 	stw	r5,0(r8)
 8007160:	44c00115 	stw	r19,4(r8)
 8007164:	d8c02015 	stw	r3,128(sp)
 8007168:	d8801f15 	stw	r2,124(sp)
 800716c:	010001c4 	movi	r4,7
 8007170:	2082c516 	blt	r4,r2,8007c88 <___vfprintf_internal_r+0x13a0>
 8007174:	df002787 	ldb	fp,158(sp)
 8007178:	42000204 	addi	r8,r8,8
 800717c:	e0000c26 	beq	fp,zero,80071b0 <___vfprintf_internal_r+0x8c8>
 8007180:	d8801f17 	ldw	r2,124(sp)
 8007184:	d9002784 	addi	r4,sp,158
 8007188:	18c00044 	addi	r3,r3,1
 800718c:	10800044 	addi	r2,r2,1
 8007190:	41000015 	stw	r4,0(r8)
 8007194:	01000044 	movi	r4,1
 8007198:	41000115 	stw	r4,4(r8)
 800719c:	d8c02015 	stw	r3,128(sp)
 80071a0:	d8801f15 	stw	r2,124(sp)
 80071a4:	010001c4 	movi	r4,7
 80071a8:	20825e16 	blt	r4,r2,8007b24 <___vfprintf_internal_r+0x123c>
 80071ac:	42000204 	addi	r8,r8,8
 80071b0:	d8802c17 	ldw	r2,176(sp)
 80071b4:	10000c26 	beq	r2,zero,80071e8 <___vfprintf_internal_r+0x900>
 80071b8:	d8801f17 	ldw	r2,124(sp)
 80071bc:	d9002704 	addi	r4,sp,156
 80071c0:	18c00084 	addi	r3,r3,2
 80071c4:	10800044 	addi	r2,r2,1
 80071c8:	41000015 	stw	r4,0(r8)
 80071cc:	01000084 	movi	r4,2
 80071d0:	41000115 	stw	r4,4(r8)
 80071d4:	d8c02015 	stw	r3,128(sp)
 80071d8:	d8801f15 	stw	r2,124(sp)
 80071dc:	010001c4 	movi	r4,7
 80071e0:	20825816 	blt	r4,r2,8007b44 <___vfprintf_internal_r+0x125c>
 80071e4:	42000204 	addi	r8,r8,8
 80071e8:	d9003017 	ldw	r4,192(sp)
 80071ec:	00802004 	movi	r2,128
 80071f0:	2081bb26 	beq	r4,r2,80078e0 <___vfprintf_internal_r+0xff8>
 80071f4:	d9402a17 	ldw	r5,168(sp)
 80071f8:	d8802b17 	ldw	r2,172(sp)
 80071fc:	28adc83a 	sub	r22,r5,r2
 8007200:	0580310e 	bge	zero,r22,80072c8 <___vfprintf_internal_r+0x9e0>
 8007204:	07000404 	movi	fp,16
 8007208:	d8801f17 	ldw	r2,124(sp)
 800720c:	e584360e 	bge	fp,r22,80082e8 <___vfprintf_internal_r+0x1a00>
 8007210:	01420074 	movhi	r5,2049
 8007214:	2956f484 	addi	r5,r5,23506
 8007218:	dc402a15 	stw	r17,168(sp)
 800721c:	d9402c15 	stw	r5,176(sp)
 8007220:	b023883a 	mov	r17,r22
 8007224:	04c001c4 	movi	r19,7
 8007228:	a82d883a 	mov	r22,r21
 800722c:	902b883a 	mov	r21,r18
 8007230:	8025883a 	mov	r18,r16
 8007234:	dc002d17 	ldw	r16,180(sp)
 8007238:	00000306 	br	8007248 <___vfprintf_internal_r+0x960>
 800723c:	8c7ffc04 	addi	r17,r17,-16
 8007240:	42000204 	addi	r8,r8,8
 8007244:	e440110e 	bge	fp,r17,800728c <___vfprintf_internal_r+0x9a4>
 8007248:	18c00404 	addi	r3,r3,16
 800724c:	10800044 	addi	r2,r2,1
 8007250:	45000015 	stw	r20,0(r8)
 8007254:	47000115 	stw	fp,4(r8)
 8007258:	d8c02015 	stw	r3,128(sp)
 800725c:	d8801f15 	stw	r2,124(sp)
 8007260:	98bff60e 	bge	r19,r2,800723c <___vfprintf_internal_r+0x954>
 8007264:	d9801e04 	addi	r6,sp,120
 8007268:	b80b883a 	mov	r5,r23
 800726c:	8009883a 	mov	r4,r16
 8007270:	800e01c0 	call	800e01c <__sprint_r>
 8007274:	103ea01e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 8007278:	8c7ffc04 	addi	r17,r17,-16
 800727c:	d8c02017 	ldw	r3,128(sp)
 8007280:	d8801f17 	ldw	r2,124(sp)
 8007284:	da000404 	addi	r8,sp,16
 8007288:	e47fef16 	blt	fp,r17,8007248 <___vfprintf_internal_r+0x960>
 800728c:	9021883a 	mov	r16,r18
 8007290:	a825883a 	mov	r18,r21
 8007294:	b02b883a 	mov	r21,r22
 8007298:	882d883a 	mov	r22,r17
 800729c:	dc402a17 	ldw	r17,168(sp)
 80072a0:	d9002c17 	ldw	r4,176(sp)
 80072a4:	1d87883a 	add	r3,r3,r22
 80072a8:	10800044 	addi	r2,r2,1
 80072ac:	41000015 	stw	r4,0(r8)
 80072b0:	45800115 	stw	r22,4(r8)
 80072b4:	d8c02015 	stw	r3,128(sp)
 80072b8:	d8801f15 	stw	r2,124(sp)
 80072bc:	010001c4 	movi	r4,7
 80072c0:	20821016 	blt	r4,r2,8007b04 <___vfprintf_internal_r+0x121c>
 80072c4:	42000204 	addi	r8,r8,8
 80072c8:	9080400c 	andi	r2,r18,256
 80072cc:	10013a1e 	bne	r2,zero,80077b8 <___vfprintf_internal_r+0xed0>
 80072d0:	d9402b17 	ldw	r5,172(sp)
 80072d4:	d8801f17 	ldw	r2,124(sp)
 80072d8:	44000015 	stw	r16,0(r8)
 80072dc:	1947883a 	add	r3,r3,r5
 80072e0:	10800044 	addi	r2,r2,1
 80072e4:	41400115 	stw	r5,4(r8)
 80072e8:	d8c02015 	stw	r3,128(sp)
 80072ec:	d8801f15 	stw	r2,124(sp)
 80072f0:	010001c4 	movi	r4,7
 80072f4:	2081f516 	blt	r4,r2,8007acc <___vfprintf_internal_r+0x11e4>
 80072f8:	42000204 	addi	r8,r8,8
 80072fc:	9480010c 	andi	r18,r18,4
 8007300:	90003226 	beq	r18,zero,80073cc <___vfprintf_internal_r+0xae4>
 8007304:	d9403117 	ldw	r5,196(sp)
 8007308:	d8802917 	ldw	r2,164(sp)
 800730c:	28a1c83a 	sub	r16,r5,r2
 8007310:	04002e0e 	bge	zero,r16,80073cc <___vfprintf_internal_r+0xae4>
 8007314:	04400404 	movi	r17,16
 8007318:	d8801f17 	ldw	r2,124(sp)
 800731c:	8c04c40e 	bge	r17,r16,8008630 <___vfprintf_internal_r+0x1d48>
 8007320:	01420074 	movhi	r5,2049
 8007324:	2956f884 	addi	r5,r5,23522
 8007328:	d9403515 	stw	r5,212(sp)
 800732c:	048001c4 	movi	r18,7
 8007330:	dcc02d17 	ldw	r19,180(sp)
 8007334:	00000306 	br	8007344 <___vfprintf_internal_r+0xa5c>
 8007338:	843ffc04 	addi	r16,r16,-16
 800733c:	42000204 	addi	r8,r8,8
 8007340:	8c00130e 	bge	r17,r16,8007390 <___vfprintf_internal_r+0xaa8>
 8007344:	01020074 	movhi	r4,2049
 8007348:	18c00404 	addi	r3,r3,16
 800734c:	10800044 	addi	r2,r2,1
 8007350:	2116f884 	addi	r4,r4,23522
 8007354:	41000015 	stw	r4,0(r8)
 8007358:	44400115 	stw	r17,4(r8)
 800735c:	d8c02015 	stw	r3,128(sp)
 8007360:	d8801f15 	stw	r2,124(sp)
 8007364:	90bff40e 	bge	r18,r2,8007338 <___vfprintf_internal_r+0xa50>
 8007368:	d9801e04 	addi	r6,sp,120
 800736c:	b80b883a 	mov	r5,r23
 8007370:	9809883a 	mov	r4,r19
 8007374:	800e01c0 	call	800e01c <__sprint_r>
 8007378:	103e5f1e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 800737c:	843ffc04 	addi	r16,r16,-16
 8007380:	d8c02017 	ldw	r3,128(sp)
 8007384:	d8801f17 	ldw	r2,124(sp)
 8007388:	da000404 	addi	r8,sp,16
 800738c:	8c3fed16 	blt	r17,r16,8007344 <___vfprintf_internal_r+0xa5c>
 8007390:	d9403517 	ldw	r5,212(sp)
 8007394:	1c07883a 	add	r3,r3,r16
 8007398:	10800044 	addi	r2,r2,1
 800739c:	41400015 	stw	r5,0(r8)
 80073a0:	44000115 	stw	r16,4(r8)
 80073a4:	d8c02015 	stw	r3,128(sp)
 80073a8:	d8801f15 	stw	r2,124(sp)
 80073ac:	010001c4 	movi	r4,7
 80073b0:	2080060e 	bge	r4,r2,80073cc <___vfprintf_internal_r+0xae4>
 80073b4:	d9002d17 	ldw	r4,180(sp)
 80073b8:	d9801e04 	addi	r6,sp,120
 80073bc:	b80b883a 	mov	r5,r23
 80073c0:	800e01c0 	call	800e01c <__sprint_r>
 80073c4:	103e4c1e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 80073c8:	d8c02017 	ldw	r3,128(sp)
 80073cc:	d8803117 	ldw	r2,196(sp)
 80073d0:	d9002917 	ldw	r4,164(sp)
 80073d4:	1100010e 	bge	r2,r4,80073dc <___vfprintf_internal_r+0xaf4>
 80073d8:	2005883a 	mov	r2,r4
 80073dc:	d9402f17 	ldw	r5,188(sp)
 80073e0:	288b883a 	add	r5,r5,r2
 80073e4:	d9402f15 	stw	r5,188(sp)
 80073e8:	1801c01e 	bne	r3,zero,8007aec <___vfprintf_internal_r+0x1204>
 80073ec:	a8800007 	ldb	r2,0(r21)
 80073f0:	d8001f15 	stw	zero,124(sp)
 80073f4:	da000404 	addi	r8,sp,16
 80073f8:	103d751e 	bne	r2,zero,80069d0 <___vfprintf_internal_r+0xe8>
 80073fc:	a823883a 	mov	r17,r21
 8007400:	003d8b06 	br	8006a30 <___vfprintf_internal_r+0x148>
 8007404:	8025883a 	mov	r18,r16
 8007408:	dc002903 	ldbu	r16,164(sp)
 800740c:	e011883a 	mov	r8,fp
 8007410:	84003fcc 	andi	r16,r16,255
 8007414:	8005e51e 	bne	r16,zero,8008bac <___vfprintf_internal_r+0x22c4>
 8007418:	94800414 	ori	r18,r18,16
 800741c:	9080080c 	andi	r2,r18,32
 8007420:	10022b26 	beq	r2,zero,8007cd0 <___vfprintf_internal_r+0x13e8>
 8007424:	d9002e17 	ldw	r4,184(sp)
 8007428:	d9402a17 	ldw	r5,168(sp)
 800742c:	d8002785 	stb	zero,158(sp)
 8007430:	20c00204 	addi	r3,r4,8
 8007434:	24c00017 	ldw	r19,0(r4)
 8007438:	25800117 	ldw	r22,4(r4)
 800743c:	28042e16 	blt	r5,zero,80084f8 <___vfprintf_internal_r+0x1c10>
 8007440:	013fdfc4 	movi	r4,-129
 8007444:	9d84b03a 	or	r2,r19,r22
 8007448:	d8c02e15 	stw	r3,184(sp)
 800744c:	9124703a 	and	r18,r18,r4
 8007450:	0039883a 	mov	fp,zero
 8007454:	103e801e 	bne	r2,zero,8006e58 <___vfprintf_internal_r+0x570>
 8007458:	d9002a17 	ldw	r4,168(sp)
 800745c:	2002e01e 	bne	r4,zero,8007fe0 <___vfprintf_internal_r+0x16f8>
 8007460:	d8002a15 	stw	zero,168(sp)
 8007464:	d8002b15 	stw	zero,172(sp)
 8007468:	dc001e04 	addi	r16,sp,120
 800746c:	003ef506 	br	8007044 <___vfprintf_internal_r+0x75c>
 8007470:	8025883a 	mov	r18,r16
 8007474:	dc002903 	ldbu	r16,164(sp)
 8007478:	e011883a 	mov	r8,fp
 800747c:	84003fcc 	andi	r16,r16,255
 8007480:	8005ba1e 	bne	r16,zero,8008b6c <___vfprintf_internal_r+0x2284>
 8007484:	01020074 	movhi	r4,2049
 8007488:	2116e804 	addi	r4,r4,23456
 800748c:	d9003915 	stw	r4,228(sp)
 8007490:	9080080c 	andi	r2,r18,32
 8007494:	10006126 	beq	r2,zero,800761c <___vfprintf_internal_r+0xd34>
 8007498:	d9402e17 	ldw	r5,184(sp)
 800749c:	2cc00017 	ldw	r19,0(r5)
 80074a0:	2d800117 	ldw	r22,4(r5)
 80074a4:	29400204 	addi	r5,r5,8
 80074a8:	d9402e15 	stw	r5,184(sp)
 80074ac:	9080004c 	andi	r2,r18,1
 80074b0:	1001ac26 	beq	r2,zero,8007b64 <___vfprintf_internal_r+0x127c>
 80074b4:	9d84b03a 	or	r2,r19,r22
 80074b8:	10038526 	beq	r2,zero,80082d0 <___vfprintf_internal_r+0x19e8>
 80074bc:	d8c02a17 	ldw	r3,168(sp)
 80074c0:	00800c04 	movi	r2,48
 80074c4:	d8802705 	stb	r2,156(sp)
 80074c8:	dc402745 	stb	r17,157(sp)
 80074cc:	d8002785 	stb	zero,158(sp)
 80074d0:	90800094 	ori	r2,r18,2
 80074d4:	18047916 	blt	r3,zero,80086bc <___vfprintf_internal_r+0x1dd4>
 80074d8:	00bfdfc4 	movi	r2,-129
 80074dc:	90a4703a 	and	r18,r18,r2
 80074e0:	94800094 	ori	r18,r18,2
 80074e4:	0039883a 	mov	fp,zero
 80074e8:	d9003917 	ldw	r4,228(sp)
 80074ec:	dc001e04 	addi	r16,sp,120
 80074f0:	988003cc 	andi	r2,r19,15
 80074f4:	b006973a 	slli	r3,r22,28
 80074f8:	2085883a 	add	r2,r4,r2
 80074fc:	9826d13a 	srli	r19,r19,4
 8007500:	10800003 	ldbu	r2,0(r2)
 8007504:	b02cd13a 	srli	r22,r22,4
 8007508:	843fffc4 	addi	r16,r16,-1
 800750c:	1ce6b03a 	or	r19,r3,r19
 8007510:	80800005 	stb	r2,0(r16)
 8007514:	9d84b03a 	or	r2,r19,r22
 8007518:	103ff51e 	bne	r2,zero,80074f0 <___vfprintf_internal_r+0xc08>
 800751c:	d8c02817 	ldw	r3,160(sp)
 8007520:	1c07c83a 	sub	r3,r3,r16
 8007524:	d8c02b15 	stw	r3,172(sp)
 8007528:	003ec606 	br	8007044 <___vfprintf_internal_r+0x75c>
 800752c:	8025883a 	mov	r18,r16
 8007530:	dc002903 	ldbu	r16,164(sp)
 8007534:	e011883a 	mov	r8,fp
 8007538:	84003fcc 	andi	r16,r16,255
 800753c:	803e9626 	beq	r16,zero,8006f98 <___vfprintf_internal_r+0x6b0>
 8007540:	d8c02b03 	ldbu	r3,172(sp)
 8007544:	d8c02785 	stb	r3,158(sp)
 8007548:	003e9306 	br	8006f98 <___vfprintf_internal_r+0x6b0>
 800754c:	00c00044 	movi	r3,1
 8007550:	d8c02905 	stb	r3,164(sp)
 8007554:	00c00ac4 	movi	r3,43
 8007558:	d8c02b05 	stb	r3,172(sp)
 800755c:	ac400007 	ldb	r17,0(r21)
 8007560:	003d4306 	br	8006a70 <___vfprintf_internal_r+0x188>
 8007564:	84000814 	ori	r16,r16,32
 8007568:	ac400007 	ldb	r17,0(r21)
 800756c:	003d4006 	br	8006a70 <___vfprintf_internal_r+0x188>
 8007570:	d8802e17 	ldw	r2,184(sp)
 8007574:	8025883a 	mov	r18,r16
 8007578:	d8002785 	stb	zero,158(sp)
 800757c:	14000017 	ldw	r16,0(r2)
 8007580:	e011883a 	mov	r8,fp
 8007584:	14c00104 	addi	r19,r2,4
 8007588:	80042d26 	beq	r16,zero,8008640 <___vfprintf_internal_r+0x1d58>
 800758c:	d8c02a17 	ldw	r3,168(sp)
 8007590:	1803e416 	blt	r3,zero,8008524 <___vfprintf_internal_r+0x1c3c>
 8007594:	180d883a 	mov	r6,r3
 8007598:	000b883a 	mov	r5,zero
 800759c:	8009883a 	mov	r4,r16
 80075a0:	df003d15 	stw	fp,244(sp)
 80075a4:	800c27c0 	call	800c27c <memchr>
 80075a8:	da003d17 	ldw	r8,244(sp)
 80075ac:	10046826 	beq	r2,zero,8008750 <___vfprintf_internal_r+0x1e68>
 80075b0:	1405c83a 	sub	r2,r2,r16
 80075b4:	d8802b15 	stw	r2,172(sp)
 80075b8:	1003e016 	blt	r2,zero,800853c <___vfprintf_internal_r+0x1c54>
 80075bc:	df002783 	ldbu	fp,158(sp)
 80075c0:	d8802915 	stw	r2,164(sp)
 80075c4:	dcc02e15 	stw	r19,184(sp)
 80075c8:	d8002a15 	stw	zero,168(sp)
 80075cc:	d8003215 	stw	zero,200(sp)
 80075d0:	003ea206 	br	800705c <___vfprintf_internal_r+0x774>
 80075d4:	8025883a 	mov	r18,r16
 80075d8:	dc002903 	ldbu	r16,164(sp)
 80075dc:	e011883a 	mov	r8,fp
 80075e0:	84003fcc 	andi	r16,r16,255
 80075e4:	803f8d26 	beq	r16,zero,800741c <___vfprintf_internal_r+0xb34>
 80075e8:	d8c02b03 	ldbu	r3,172(sp)
 80075ec:	d8c02785 	stb	r3,158(sp)
 80075f0:	003f8a06 	br	800741c <___vfprintf_internal_r+0xb34>
 80075f4:	8025883a 	mov	r18,r16
 80075f8:	dc002903 	ldbu	r16,164(sp)
 80075fc:	e011883a 	mov	r8,fp
 8007600:	84003fcc 	andi	r16,r16,255
 8007604:	8005661e 	bne	r16,zero,8008ba0 <___vfprintf_internal_r+0x22b8>
 8007608:	01020074 	movhi	r4,2049
 800760c:	2116ed04 	addi	r4,r4,23476
 8007610:	d9003915 	stw	r4,228(sp)
 8007614:	9080080c 	andi	r2,r18,32
 8007618:	103f9f1e 	bne	r2,zero,8007498 <___vfprintf_internal_r+0xbb0>
 800761c:	9080040c 	andi	r2,r18,16
 8007620:	1002eb26 	beq	r2,zero,80081d0 <___vfprintf_internal_r+0x18e8>
 8007624:	d8802e17 	ldw	r2,184(sp)
 8007628:	002d883a 	mov	r22,zero
 800762c:	14c00017 	ldw	r19,0(r2)
 8007630:	10800104 	addi	r2,r2,4
 8007634:	d8802e15 	stw	r2,184(sp)
 8007638:	003f9c06 	br	80074ac <___vfprintf_internal_r+0xbc4>
 800763c:	d8802b07 	ldb	r2,172(sp)
 8007640:	1002e11e 	bne	r2,zero,80081c8 <___vfprintf_internal_r+0x18e0>
 8007644:	00c00044 	movi	r3,1
 8007648:	d8c02905 	stb	r3,164(sp)
 800764c:	00c00804 	movi	r3,32
 8007650:	d8c02b05 	stb	r3,172(sp)
 8007654:	ac400007 	ldb	r17,0(r21)
 8007658:	003d0506 	br	8006a70 <___vfprintf_internal_r+0x188>
 800765c:	84000054 	ori	r16,r16,1
 8007660:	ac400007 	ldb	r17,0(r21)
 8007664:	003d0206 	br	8006a70 <___vfprintf_internal_r+0x188>
 8007668:	8025883a 	mov	r18,r16
 800766c:	dc002903 	ldbu	r16,164(sp)
 8007670:	e011883a 	mov	r8,fp
 8007674:	84003fcc 	andi	r16,r16,255
 8007678:	803de726 	beq	r16,zero,8006e18 <___vfprintf_internal_r+0x530>
 800767c:	d8c02b03 	ldbu	r3,172(sp)
 8007680:	d8c02785 	stb	r3,158(sp)
 8007684:	003de406 	br	8006e18 <___vfprintf_internal_r+0x530>
 8007688:	84001014 	ori	r16,r16,64
 800768c:	ac400007 	ldb	r17,0(r21)
 8007690:	003cf706 	br	8006a70 <___vfprintf_internal_r+0x188>
 8007694:	ac400007 	ldb	r17,0(r21)
 8007698:	00801b04 	movi	r2,108
 800769c:	88838f26 	beq	r17,r2,80084dc <___vfprintf_internal_r+0x1bf4>
 80076a0:	84000414 	ori	r16,r16,16
 80076a4:	003cf206 	br	8006a70 <___vfprintf_internal_r+0x188>
 80076a8:	8025883a 	mov	r18,r16
 80076ac:	dc002903 	ldbu	r16,164(sp)
 80076b0:	e011883a 	mov	r8,fp
 80076b4:	84003fcc 	andi	r16,r16,255
 80076b8:	80053f1e 	bne	r16,zero,8008bb8 <___vfprintf_internal_r+0x22d0>
 80076bc:	9080080c 	andi	r2,r18,32
 80076c0:	1002d226 	beq	r2,zero,800820c <___vfprintf_internal_r+0x1924>
 80076c4:	d9002e17 	ldw	r4,184(sp)
 80076c8:	d9402f17 	ldw	r5,188(sp)
 80076cc:	20800017 	ldw	r2,0(r4)
 80076d0:	2807d7fa 	srai	r3,r5,31
 80076d4:	21000104 	addi	r4,r4,4
 80076d8:	d9002e15 	stw	r4,184(sp)
 80076dc:	11400015 	stw	r5,0(r2)
 80076e0:	10c00115 	stw	r3,4(r2)
 80076e4:	003cb806 	br	80069c8 <___vfprintf_internal_r+0xe0>
 80076e8:	d8c02e17 	ldw	r3,184(sp)
 80076ec:	d9002e17 	ldw	r4,184(sp)
 80076f0:	8025883a 	mov	r18,r16
 80076f4:	18800017 	ldw	r2,0(r3)
 80076f8:	21000104 	addi	r4,r4,4
 80076fc:	00c00044 	movi	r3,1
 8007700:	e011883a 	mov	r8,fp
 8007704:	d8c02915 	stw	r3,164(sp)
 8007708:	d8002785 	stb	zero,158(sp)
 800770c:	d8801405 	stb	r2,80(sp)
 8007710:	d9002e15 	stw	r4,184(sp)
 8007714:	d8c02b15 	stw	r3,172(sp)
 8007718:	d8002a15 	stw	zero,168(sp)
 800771c:	d8003215 	stw	zero,200(sp)
 8007720:	dc001404 	addi	r16,sp,80
 8007724:	0039883a 	mov	fp,zero
 8007728:	003e5306 	br	8007078 <___vfprintf_internal_r+0x790>
 800772c:	01020074 	movhi	r4,2049
 8007730:	2116ed04 	addi	r4,r4,23476
 8007734:	0039883a 	mov	fp,zero
 8007738:	d9003915 	stw	r4,228(sp)
 800773c:	04401e04 	movi	r17,120
 8007740:	003f6906 	br	80074e8 <___vfprintf_internal_r+0xc00>
 8007744:	8025883a 	mov	r18,r16
 8007748:	dc002903 	ldbu	r16,164(sp)
 800774c:	e011883a 	mov	r8,fp
 8007750:	84003fcc 	andi	r16,r16,255
 8007754:	8005081e 	bne	r16,zero,8008b78 <___vfprintf_internal_r+0x2290>
 8007758:	883d6126 	beq	r17,zero,8006ce0 <___vfprintf_internal_r+0x3f8>
 800775c:	00c00044 	movi	r3,1
 8007760:	d8c02915 	stw	r3,164(sp)
 8007764:	dc401405 	stb	r17,80(sp)
 8007768:	d8002785 	stb	zero,158(sp)
 800776c:	003fe906 	br	8007714 <___vfprintf_internal_r+0xe2c>
 8007770:	01420074 	movhi	r5,2049
 8007774:	2956ed04 	addi	r5,r5,23476
 8007778:	d9403915 	stw	r5,228(sp)
 800777c:	d8c02e15 	stw	r3,184(sp)
 8007780:	1025883a 	mov	r18,r2
 8007784:	04401e04 	movi	r17,120
 8007788:	9d84b03a 	or	r2,r19,r22
 800778c:	1000fc1e 	bne	r2,zero,8007b80 <___vfprintf_internal_r+0x1298>
 8007790:	0039883a 	mov	fp,zero
 8007794:	00800084 	movi	r2,2
 8007798:	10803fcc 	andi	r2,r2,255
 800779c:	00c00044 	movi	r3,1
 80077a0:	10c20f26 	beq	r2,r3,8007fe0 <___vfprintf_internal_r+0x16f8>
 80077a4:	00c00084 	movi	r3,2
 80077a8:	10fd3326 	beq	r2,r3,8006c78 <___vfprintf_internal_r+0x390>
 80077ac:	003e0b06 	br	8006fdc <___vfprintf_internal_r+0x6f4>
 80077b0:	d8c02017 	ldw	r3,128(sp)
 80077b4:	003e7106 	br	800717c <___vfprintf_internal_r+0x894>
 80077b8:	00801944 	movi	r2,101
 80077bc:	14407e0e 	bge	r2,r17,80079b8 <___vfprintf_internal_r+0x10d0>
 80077c0:	d9003617 	ldw	r4,216(sp)
 80077c4:	d9403817 	ldw	r5,224(sp)
 80077c8:	000d883a 	mov	r6,zero
 80077cc:	000f883a 	mov	r7,zero
 80077d0:	d8c03c15 	stw	r3,240(sp)
 80077d4:	da003d15 	stw	r8,244(sp)
 80077d8:	8011f540 	call	8011f54 <__eqdf2>
 80077dc:	d8c03c17 	ldw	r3,240(sp)
 80077e0:	da003d17 	ldw	r8,244(sp)
 80077e4:	1000f71e 	bne	r2,zero,8007bc4 <___vfprintf_internal_r+0x12dc>
 80077e8:	d8801f17 	ldw	r2,124(sp)
 80077ec:	01020074 	movhi	r4,2049
 80077f0:	2116f404 	addi	r4,r4,23504
 80077f4:	18c00044 	addi	r3,r3,1
 80077f8:	10800044 	addi	r2,r2,1
 80077fc:	41000015 	stw	r4,0(r8)
 8007800:	01000044 	movi	r4,1
 8007804:	41000115 	stw	r4,4(r8)
 8007808:	d8c02015 	stw	r3,128(sp)
 800780c:	d8801f15 	stw	r2,124(sp)
 8007810:	010001c4 	movi	r4,7
 8007814:	2082b816 	blt	r4,r2,80082f8 <___vfprintf_internal_r+0x1a10>
 8007818:	42000204 	addi	r8,r8,8
 800781c:	d8802617 	ldw	r2,152(sp)
 8007820:	d9403317 	ldw	r5,204(sp)
 8007824:	11400216 	blt	r2,r5,8007830 <___vfprintf_internal_r+0xf48>
 8007828:	9080004c 	andi	r2,r18,1
 800782c:	103eb326 	beq	r2,zero,80072fc <___vfprintf_internal_r+0xa14>
 8007830:	d8803717 	ldw	r2,220(sp)
 8007834:	d9003417 	ldw	r4,208(sp)
 8007838:	d9403717 	ldw	r5,220(sp)
 800783c:	1887883a 	add	r3,r3,r2
 8007840:	d8801f17 	ldw	r2,124(sp)
 8007844:	41000015 	stw	r4,0(r8)
 8007848:	41400115 	stw	r5,4(r8)
 800784c:	10800044 	addi	r2,r2,1
 8007850:	d8c02015 	stw	r3,128(sp)
 8007854:	d8801f15 	stw	r2,124(sp)
 8007858:	010001c4 	movi	r4,7
 800785c:	20832916 	blt	r4,r2,8008504 <___vfprintf_internal_r+0x1c1c>
 8007860:	42000204 	addi	r8,r8,8
 8007864:	d8803317 	ldw	r2,204(sp)
 8007868:	143fffc4 	addi	r16,r2,-1
 800786c:	043ea30e 	bge	zero,r16,80072fc <___vfprintf_internal_r+0xa14>
 8007870:	04400404 	movi	r17,16
 8007874:	d8801f17 	ldw	r2,124(sp)
 8007878:	8c00880e 	bge	r17,r16,8007a9c <___vfprintf_internal_r+0x11b4>
 800787c:	01420074 	movhi	r5,2049
 8007880:	2956f484 	addi	r5,r5,23506
 8007884:	d9402c15 	stw	r5,176(sp)
 8007888:	058001c4 	movi	r22,7
 800788c:	dcc02d17 	ldw	r19,180(sp)
 8007890:	00000306 	br	80078a0 <___vfprintf_internal_r+0xfb8>
 8007894:	42000204 	addi	r8,r8,8
 8007898:	843ffc04 	addi	r16,r16,-16
 800789c:	8c00820e 	bge	r17,r16,8007aa8 <___vfprintf_internal_r+0x11c0>
 80078a0:	18c00404 	addi	r3,r3,16
 80078a4:	10800044 	addi	r2,r2,1
 80078a8:	45000015 	stw	r20,0(r8)
 80078ac:	44400115 	stw	r17,4(r8)
 80078b0:	d8c02015 	stw	r3,128(sp)
 80078b4:	d8801f15 	stw	r2,124(sp)
 80078b8:	b0bff60e 	bge	r22,r2,8007894 <___vfprintf_internal_r+0xfac>
 80078bc:	d9801e04 	addi	r6,sp,120
 80078c0:	b80b883a 	mov	r5,r23
 80078c4:	9809883a 	mov	r4,r19
 80078c8:	800e01c0 	call	800e01c <__sprint_r>
 80078cc:	103d0a1e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 80078d0:	d8c02017 	ldw	r3,128(sp)
 80078d4:	d8801f17 	ldw	r2,124(sp)
 80078d8:	da000404 	addi	r8,sp,16
 80078dc:	003fee06 	br	8007898 <___vfprintf_internal_r+0xfb0>
 80078e0:	d9403117 	ldw	r5,196(sp)
 80078e4:	d8802917 	ldw	r2,164(sp)
 80078e8:	28adc83a 	sub	r22,r5,r2
 80078ec:	05be410e 	bge	zero,r22,80071f4 <___vfprintf_internal_r+0x90c>
 80078f0:	07000404 	movi	fp,16
 80078f4:	d8801f17 	ldw	r2,124(sp)
 80078f8:	e5838f0e 	bge	fp,r22,8008738 <___vfprintf_internal_r+0x1e50>
 80078fc:	01420074 	movhi	r5,2049
 8007900:	2956f484 	addi	r5,r5,23506
 8007904:	dc403015 	stw	r17,192(sp)
 8007908:	d9402c15 	stw	r5,176(sp)
 800790c:	b023883a 	mov	r17,r22
 8007910:	04c001c4 	movi	r19,7
 8007914:	a82d883a 	mov	r22,r21
 8007918:	902b883a 	mov	r21,r18
 800791c:	8025883a 	mov	r18,r16
 8007920:	dc002d17 	ldw	r16,180(sp)
 8007924:	00000306 	br	8007934 <___vfprintf_internal_r+0x104c>
 8007928:	8c7ffc04 	addi	r17,r17,-16
 800792c:	42000204 	addi	r8,r8,8
 8007930:	e440110e 	bge	fp,r17,8007978 <___vfprintf_internal_r+0x1090>
 8007934:	18c00404 	addi	r3,r3,16
 8007938:	10800044 	addi	r2,r2,1
 800793c:	45000015 	stw	r20,0(r8)
 8007940:	47000115 	stw	fp,4(r8)
 8007944:	d8c02015 	stw	r3,128(sp)
 8007948:	d8801f15 	stw	r2,124(sp)
 800794c:	98bff60e 	bge	r19,r2,8007928 <___vfprintf_internal_r+0x1040>
 8007950:	d9801e04 	addi	r6,sp,120
 8007954:	b80b883a 	mov	r5,r23
 8007958:	8009883a 	mov	r4,r16
 800795c:	800e01c0 	call	800e01c <__sprint_r>
 8007960:	103ce51e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 8007964:	8c7ffc04 	addi	r17,r17,-16
 8007968:	d8c02017 	ldw	r3,128(sp)
 800796c:	d8801f17 	ldw	r2,124(sp)
 8007970:	da000404 	addi	r8,sp,16
 8007974:	e47fef16 	blt	fp,r17,8007934 <___vfprintf_internal_r+0x104c>
 8007978:	9021883a 	mov	r16,r18
 800797c:	a825883a 	mov	r18,r21
 8007980:	b02b883a 	mov	r21,r22
 8007984:	882d883a 	mov	r22,r17
 8007988:	dc403017 	ldw	r17,192(sp)
 800798c:	d9002c17 	ldw	r4,176(sp)
 8007990:	1d87883a 	add	r3,r3,r22
 8007994:	10800044 	addi	r2,r2,1
 8007998:	41000015 	stw	r4,0(r8)
 800799c:	45800115 	stw	r22,4(r8)
 80079a0:	d8c02015 	stw	r3,128(sp)
 80079a4:	d8801f15 	stw	r2,124(sp)
 80079a8:	010001c4 	movi	r4,7
 80079ac:	20818e16 	blt	r4,r2,8007fe8 <___vfprintf_internal_r+0x1700>
 80079b0:	42000204 	addi	r8,r8,8
 80079b4:	003e0f06 	br	80071f4 <___vfprintf_internal_r+0x90c>
 80079b8:	d9403317 	ldw	r5,204(sp)
 80079bc:	00800044 	movi	r2,1
 80079c0:	18c00044 	addi	r3,r3,1
 80079c4:	1141530e 	bge	r2,r5,8007f14 <___vfprintf_internal_r+0x162c>
 80079c8:	dc401f17 	ldw	r17,124(sp)
 80079cc:	00800044 	movi	r2,1
 80079d0:	40800115 	stw	r2,4(r8)
 80079d4:	8c400044 	addi	r17,r17,1
 80079d8:	44000015 	stw	r16,0(r8)
 80079dc:	d8c02015 	stw	r3,128(sp)
 80079e0:	dc401f15 	stw	r17,124(sp)
 80079e4:	008001c4 	movi	r2,7
 80079e8:	14416b16 	blt	r2,r17,8007f98 <___vfprintf_internal_r+0x16b0>
 80079ec:	42000204 	addi	r8,r8,8
 80079f0:	d8803717 	ldw	r2,220(sp)
 80079f4:	d9003417 	ldw	r4,208(sp)
 80079f8:	8c400044 	addi	r17,r17,1
 80079fc:	10c7883a 	add	r3,r2,r3
 8007a00:	40800115 	stw	r2,4(r8)
 8007a04:	41000015 	stw	r4,0(r8)
 8007a08:	d8c02015 	stw	r3,128(sp)
 8007a0c:	dc401f15 	stw	r17,124(sp)
 8007a10:	008001c4 	movi	r2,7
 8007a14:	14416916 	blt	r2,r17,8007fbc <___vfprintf_internal_r+0x16d4>
 8007a18:	45800204 	addi	r22,r8,8
 8007a1c:	d9003617 	ldw	r4,216(sp)
 8007a20:	d9403817 	ldw	r5,224(sp)
 8007a24:	000d883a 	mov	r6,zero
 8007a28:	000f883a 	mov	r7,zero
 8007a2c:	d8c03c15 	stw	r3,240(sp)
 8007a30:	8011f540 	call	8011f54 <__eqdf2>
 8007a34:	d8c03c17 	ldw	r3,240(sp)
 8007a38:	1000bc26 	beq	r2,zero,8007d2c <___vfprintf_internal_r+0x1444>
 8007a3c:	d9403317 	ldw	r5,204(sp)
 8007a40:	84000044 	addi	r16,r16,1
 8007a44:	8c400044 	addi	r17,r17,1
 8007a48:	28bfffc4 	addi	r2,r5,-1
 8007a4c:	1887883a 	add	r3,r3,r2
 8007a50:	b0800115 	stw	r2,4(r22)
 8007a54:	b4000015 	stw	r16,0(r22)
 8007a58:	d8c02015 	stw	r3,128(sp)
 8007a5c:	dc401f15 	stw	r17,124(sp)
 8007a60:	008001c4 	movi	r2,7
 8007a64:	14414316 	blt	r2,r17,8007f74 <___vfprintf_internal_r+0x168c>
 8007a68:	b5800204 	addi	r22,r22,8
 8007a6c:	d9003a17 	ldw	r4,232(sp)
 8007a70:	df0022c4 	addi	fp,sp,139
 8007a74:	8c400044 	addi	r17,r17,1
 8007a78:	20c7883a 	add	r3,r4,r3
 8007a7c:	b7000015 	stw	fp,0(r22)
 8007a80:	b1000115 	stw	r4,4(r22)
 8007a84:	d8c02015 	stw	r3,128(sp)
 8007a88:	dc401f15 	stw	r17,124(sp)
 8007a8c:	008001c4 	movi	r2,7
 8007a90:	14400e16 	blt	r2,r17,8007acc <___vfprintf_internal_r+0x11e4>
 8007a94:	b2000204 	addi	r8,r22,8
 8007a98:	003e1806 	br	80072fc <___vfprintf_internal_r+0xa14>
 8007a9c:	01020074 	movhi	r4,2049
 8007aa0:	2116f484 	addi	r4,r4,23506
 8007aa4:	d9002c15 	stw	r4,176(sp)
 8007aa8:	d9002c17 	ldw	r4,176(sp)
 8007aac:	1c07883a 	add	r3,r3,r16
 8007ab0:	44000115 	stw	r16,4(r8)
 8007ab4:	41000015 	stw	r4,0(r8)
 8007ab8:	10800044 	addi	r2,r2,1
 8007abc:	d8c02015 	stw	r3,128(sp)
 8007ac0:	d8801f15 	stw	r2,124(sp)
 8007ac4:	010001c4 	movi	r4,7
 8007ac8:	20be0b0e 	bge	r4,r2,80072f8 <___vfprintf_internal_r+0xa10>
 8007acc:	d9002d17 	ldw	r4,180(sp)
 8007ad0:	d9801e04 	addi	r6,sp,120
 8007ad4:	b80b883a 	mov	r5,r23
 8007ad8:	800e01c0 	call	800e01c <__sprint_r>
 8007adc:	103c861e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 8007ae0:	d8c02017 	ldw	r3,128(sp)
 8007ae4:	da000404 	addi	r8,sp,16
 8007ae8:	003e0406 	br	80072fc <___vfprintf_internal_r+0xa14>
 8007aec:	d9002d17 	ldw	r4,180(sp)
 8007af0:	d9801e04 	addi	r6,sp,120
 8007af4:	b80b883a 	mov	r5,r23
 8007af8:	800e01c0 	call	800e01c <__sprint_r>
 8007afc:	103e3b26 	beq	r2,zero,80073ec <___vfprintf_internal_r+0xb04>
 8007b00:	003c7d06 	br	8006cf8 <___vfprintf_internal_r+0x410>
 8007b04:	d9002d17 	ldw	r4,180(sp)
 8007b08:	d9801e04 	addi	r6,sp,120
 8007b0c:	b80b883a 	mov	r5,r23
 8007b10:	800e01c0 	call	800e01c <__sprint_r>
 8007b14:	103c781e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 8007b18:	d8c02017 	ldw	r3,128(sp)
 8007b1c:	da000404 	addi	r8,sp,16
 8007b20:	003de906 	br	80072c8 <___vfprintf_internal_r+0x9e0>
 8007b24:	d9002d17 	ldw	r4,180(sp)
 8007b28:	d9801e04 	addi	r6,sp,120
 8007b2c:	b80b883a 	mov	r5,r23
 8007b30:	800e01c0 	call	800e01c <__sprint_r>
 8007b34:	103c701e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 8007b38:	d8c02017 	ldw	r3,128(sp)
 8007b3c:	da000404 	addi	r8,sp,16
 8007b40:	003d9b06 	br	80071b0 <___vfprintf_internal_r+0x8c8>
 8007b44:	d9002d17 	ldw	r4,180(sp)
 8007b48:	d9801e04 	addi	r6,sp,120
 8007b4c:	b80b883a 	mov	r5,r23
 8007b50:	800e01c0 	call	800e01c <__sprint_r>
 8007b54:	103c681e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 8007b58:	d8c02017 	ldw	r3,128(sp)
 8007b5c:	da000404 	addi	r8,sp,16
 8007b60:	003da106 	br	80071e8 <___vfprintf_internal_r+0x900>
 8007b64:	d9402a17 	ldw	r5,168(sp)
 8007b68:	d8002785 	stb	zero,158(sp)
 8007b6c:	283f0616 	blt	r5,zero,8007788 <___vfprintf_internal_r+0xea0>
 8007b70:	00ffdfc4 	movi	r3,-129
 8007b74:	9d84b03a 	or	r2,r19,r22
 8007b78:	90e4703a 	and	r18,r18,r3
 8007b7c:	103c3b26 	beq	r2,zero,8006c6c <___vfprintf_internal_r+0x384>
 8007b80:	0039883a 	mov	fp,zero
 8007b84:	003e5806 	br	80074e8 <___vfprintf_internal_r+0xc00>
 8007b88:	9080040c 	andi	r2,r18,16
 8007b8c:	1001b326 	beq	r2,zero,800825c <___vfprintf_internal_r+0x1974>
 8007b90:	d8c02e17 	ldw	r3,184(sp)
 8007b94:	d9002a17 	ldw	r4,168(sp)
 8007b98:	d8002785 	stb	zero,158(sp)
 8007b9c:	18800104 	addi	r2,r3,4
 8007ba0:	1cc00017 	ldw	r19,0(r3)
 8007ba4:	002d883a 	mov	r22,zero
 8007ba8:	2001b516 	blt	r4,zero,8008280 <___vfprintf_internal_r+0x1998>
 8007bac:	00ffdfc4 	movi	r3,-129
 8007bb0:	d8802e15 	stw	r2,184(sp)
 8007bb4:	90e4703a 	and	r18,r18,r3
 8007bb8:	983d0526 	beq	r19,zero,8006fd0 <___vfprintf_internal_r+0x6e8>
 8007bbc:	0039883a 	mov	fp,zero
 8007bc0:	003d0806 	br	8006fe4 <___vfprintf_internal_r+0x6fc>
 8007bc4:	dc402617 	ldw	r17,152(sp)
 8007bc8:	0441d30e 	bge	zero,r17,8008318 <___vfprintf_internal_r+0x1a30>
 8007bcc:	dc403217 	ldw	r17,200(sp)
 8007bd0:	d8803317 	ldw	r2,204(sp)
 8007bd4:	1440010e 	bge	r2,r17,8007bdc <___vfprintf_internal_r+0x12f4>
 8007bd8:	1023883a 	mov	r17,r2
 8007bdc:	04400a0e 	bge	zero,r17,8007c08 <___vfprintf_internal_r+0x1320>
 8007be0:	d8801f17 	ldw	r2,124(sp)
 8007be4:	1c47883a 	add	r3,r3,r17
 8007be8:	44000015 	stw	r16,0(r8)
 8007bec:	10800044 	addi	r2,r2,1
 8007bf0:	44400115 	stw	r17,4(r8)
 8007bf4:	d8c02015 	stw	r3,128(sp)
 8007bf8:	d8801f15 	stw	r2,124(sp)
 8007bfc:	010001c4 	movi	r4,7
 8007c00:	20826516 	blt	r4,r2,8008598 <___vfprintf_internal_r+0x1cb0>
 8007c04:	42000204 	addi	r8,r8,8
 8007c08:	88026116 	blt	r17,zero,8008590 <___vfprintf_internal_r+0x1ca8>
 8007c0c:	d9003217 	ldw	r4,200(sp)
 8007c10:	2463c83a 	sub	r17,r4,r17
 8007c14:	04407b0e 	bge	zero,r17,8007e04 <___vfprintf_internal_r+0x151c>
 8007c18:	05800404 	movi	r22,16
 8007c1c:	d8801f17 	ldw	r2,124(sp)
 8007c20:	b4419d0e 	bge	r22,r17,8008298 <___vfprintf_internal_r+0x19b0>
 8007c24:	01020074 	movhi	r4,2049
 8007c28:	2116f484 	addi	r4,r4,23506
 8007c2c:	d9002c15 	stw	r4,176(sp)
 8007c30:	070001c4 	movi	fp,7
 8007c34:	dcc02d17 	ldw	r19,180(sp)
 8007c38:	00000306 	br	8007c48 <___vfprintf_internal_r+0x1360>
 8007c3c:	42000204 	addi	r8,r8,8
 8007c40:	8c7ffc04 	addi	r17,r17,-16
 8007c44:	b441970e 	bge	r22,r17,80082a4 <___vfprintf_internal_r+0x19bc>
 8007c48:	18c00404 	addi	r3,r3,16
 8007c4c:	10800044 	addi	r2,r2,1
 8007c50:	45000015 	stw	r20,0(r8)
 8007c54:	45800115 	stw	r22,4(r8)
 8007c58:	d8c02015 	stw	r3,128(sp)
 8007c5c:	d8801f15 	stw	r2,124(sp)
 8007c60:	e0bff60e 	bge	fp,r2,8007c3c <___vfprintf_internal_r+0x1354>
 8007c64:	d9801e04 	addi	r6,sp,120
 8007c68:	b80b883a 	mov	r5,r23
 8007c6c:	9809883a 	mov	r4,r19
 8007c70:	800e01c0 	call	800e01c <__sprint_r>
 8007c74:	103c201e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 8007c78:	d8c02017 	ldw	r3,128(sp)
 8007c7c:	d8801f17 	ldw	r2,124(sp)
 8007c80:	da000404 	addi	r8,sp,16
 8007c84:	003fee06 	br	8007c40 <___vfprintf_internal_r+0x1358>
 8007c88:	d9002d17 	ldw	r4,180(sp)
 8007c8c:	d9801e04 	addi	r6,sp,120
 8007c90:	b80b883a 	mov	r5,r23
 8007c94:	800e01c0 	call	800e01c <__sprint_r>
 8007c98:	103c171e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 8007c9c:	d8c02017 	ldw	r3,128(sp)
 8007ca0:	df002787 	ldb	fp,158(sp)
 8007ca4:	da000404 	addi	r8,sp,16
 8007ca8:	003d3406 	br	800717c <___vfprintf_internal_r+0x894>
 8007cac:	9080040c 	andi	r2,r18,16
 8007cb0:	10016126 	beq	r2,zero,8008238 <___vfprintf_internal_r+0x1950>
 8007cb4:	d9402e17 	ldw	r5,184(sp)
 8007cb8:	2cc00017 	ldw	r19,0(r5)
 8007cbc:	29400104 	addi	r5,r5,4
 8007cc0:	d9402e15 	stw	r5,184(sp)
 8007cc4:	982dd7fa 	srai	r22,r19,31
 8007cc8:	b005883a 	mov	r2,r22
 8007ccc:	003c5a06 	br	8006e38 <___vfprintf_internal_r+0x550>
 8007cd0:	9080040c 	andi	r2,r18,16
 8007cd4:	10003526 	beq	r2,zero,8007dac <___vfprintf_internal_r+0x14c4>
 8007cd8:	d8c02e17 	ldw	r3,184(sp)
 8007cdc:	d9002a17 	ldw	r4,168(sp)
 8007ce0:	d8002785 	stb	zero,158(sp)
 8007ce4:	18800104 	addi	r2,r3,4
 8007ce8:	1cc00017 	ldw	r19,0(r3)
 8007cec:	002d883a 	mov	r22,zero
 8007cf0:	20003716 	blt	r4,zero,8007dd0 <___vfprintf_internal_r+0x14e8>
 8007cf4:	00ffdfc4 	movi	r3,-129
 8007cf8:	d8802e15 	stw	r2,184(sp)
 8007cfc:	90e4703a 	and	r18,r18,r3
 8007d00:	0039883a 	mov	fp,zero
 8007d04:	983dd426 	beq	r19,zero,8007458 <___vfprintf_internal_r+0xb70>
 8007d08:	00800244 	movi	r2,9
 8007d0c:	14fc5336 	bltu	r2,r19,8006e5c <___vfprintf_internal_r+0x574>
 8007d10:	d8c02817 	ldw	r3,160(sp)
 8007d14:	dc001dc4 	addi	r16,sp,119
 8007d18:	9cc00c04 	addi	r19,r19,48
 8007d1c:	1c07c83a 	sub	r3,r3,r16
 8007d20:	dcc01dc5 	stb	r19,119(sp)
 8007d24:	d8c02b15 	stw	r3,172(sp)
 8007d28:	003cc606 	br	8007044 <___vfprintf_internal_r+0x75c>
 8007d2c:	d8803317 	ldw	r2,204(sp)
 8007d30:	143fffc4 	addi	r16,r2,-1
 8007d34:	043f4d0e 	bge	zero,r16,8007a6c <___vfprintf_internal_r+0x1184>
 8007d38:	07000404 	movi	fp,16
 8007d3c:	e400810e 	bge	fp,r16,8007f44 <___vfprintf_internal_r+0x165c>
 8007d40:	01420074 	movhi	r5,2049
 8007d44:	2956f484 	addi	r5,r5,23506
 8007d48:	d9402c15 	stw	r5,176(sp)
 8007d4c:	01c001c4 	movi	r7,7
 8007d50:	dcc02d17 	ldw	r19,180(sp)
 8007d54:	00000306 	br	8007d64 <___vfprintf_internal_r+0x147c>
 8007d58:	b5800204 	addi	r22,r22,8
 8007d5c:	843ffc04 	addi	r16,r16,-16
 8007d60:	e4007b0e 	bge	fp,r16,8007f50 <___vfprintf_internal_r+0x1668>
 8007d64:	18c00404 	addi	r3,r3,16
 8007d68:	8c400044 	addi	r17,r17,1
 8007d6c:	b5000015 	stw	r20,0(r22)
 8007d70:	b7000115 	stw	fp,4(r22)
 8007d74:	d8c02015 	stw	r3,128(sp)
 8007d78:	dc401f15 	stw	r17,124(sp)
 8007d7c:	3c7ff60e 	bge	r7,r17,8007d58 <___vfprintf_internal_r+0x1470>
 8007d80:	d9801e04 	addi	r6,sp,120
 8007d84:	b80b883a 	mov	r5,r23
 8007d88:	9809883a 	mov	r4,r19
 8007d8c:	d9c03c15 	stw	r7,240(sp)
 8007d90:	800e01c0 	call	800e01c <__sprint_r>
 8007d94:	d9c03c17 	ldw	r7,240(sp)
 8007d98:	103bd71e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 8007d9c:	d8c02017 	ldw	r3,128(sp)
 8007da0:	dc401f17 	ldw	r17,124(sp)
 8007da4:	dd800404 	addi	r22,sp,16
 8007da8:	003fec06 	br	8007d5c <___vfprintf_internal_r+0x1474>
 8007dac:	9080100c 	andi	r2,r18,64
 8007db0:	d8002785 	stb	zero,158(sp)
 8007db4:	10010e26 	beq	r2,zero,80081f0 <___vfprintf_internal_r+0x1908>
 8007db8:	d9402e17 	ldw	r5,184(sp)
 8007dbc:	d8c02a17 	ldw	r3,168(sp)
 8007dc0:	002d883a 	mov	r22,zero
 8007dc4:	28800104 	addi	r2,r5,4
 8007dc8:	2cc0000b 	ldhu	r19,0(r5)
 8007dcc:	183fc90e 	bge	r3,zero,8007cf4 <___vfprintf_internal_r+0x140c>
 8007dd0:	d8802e15 	stw	r2,184(sp)
 8007dd4:	0039883a 	mov	fp,zero
 8007dd8:	9d84b03a 	or	r2,r19,r22
 8007ddc:	103c1e1e 	bne	r2,zero,8006e58 <___vfprintf_internal_r+0x570>
 8007de0:	00800044 	movi	r2,1
 8007de4:	003e6c06 	br	8007798 <___vfprintf_internal_r+0xeb0>
 8007de8:	d9002d17 	ldw	r4,180(sp)
 8007dec:	d9801e04 	addi	r6,sp,120
 8007df0:	b80b883a 	mov	r5,r23
 8007df4:	800e01c0 	call	800e01c <__sprint_r>
 8007df8:	103bbf1e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 8007dfc:	d8c02017 	ldw	r3,128(sp)
 8007e00:	da000404 	addi	r8,sp,16
 8007e04:	d9003217 	ldw	r4,200(sp)
 8007e08:	d8802617 	ldw	r2,152(sp)
 8007e0c:	d9403317 	ldw	r5,204(sp)
 8007e10:	8123883a 	add	r17,r16,r4
 8007e14:	11400216 	blt	r2,r5,8007e20 <___vfprintf_internal_r+0x1538>
 8007e18:	9100004c 	andi	r4,r18,1
 8007e1c:	20000d26 	beq	r4,zero,8007e54 <___vfprintf_internal_r+0x156c>
 8007e20:	d9003717 	ldw	r4,220(sp)
 8007e24:	d9403417 	ldw	r5,208(sp)
 8007e28:	1907883a 	add	r3,r3,r4
 8007e2c:	d9001f17 	ldw	r4,124(sp)
 8007e30:	41400015 	stw	r5,0(r8)
 8007e34:	d9403717 	ldw	r5,220(sp)
 8007e38:	21000044 	addi	r4,r4,1
 8007e3c:	d8c02015 	stw	r3,128(sp)
 8007e40:	41400115 	stw	r5,4(r8)
 8007e44:	d9001f15 	stw	r4,124(sp)
 8007e48:	014001c4 	movi	r5,7
 8007e4c:	2901e816 	blt	r5,r4,80085f0 <___vfprintf_internal_r+0x1d08>
 8007e50:	42000204 	addi	r8,r8,8
 8007e54:	d9003317 	ldw	r4,204(sp)
 8007e58:	8121883a 	add	r16,r16,r4
 8007e5c:	2085c83a 	sub	r2,r4,r2
 8007e60:	8461c83a 	sub	r16,r16,r17
 8007e64:	1400010e 	bge	r2,r16,8007e6c <___vfprintf_internal_r+0x1584>
 8007e68:	1021883a 	mov	r16,r2
 8007e6c:	04000a0e 	bge	zero,r16,8007e98 <___vfprintf_internal_r+0x15b0>
 8007e70:	d9001f17 	ldw	r4,124(sp)
 8007e74:	1c07883a 	add	r3,r3,r16
 8007e78:	44400015 	stw	r17,0(r8)
 8007e7c:	21000044 	addi	r4,r4,1
 8007e80:	44000115 	stw	r16,4(r8)
 8007e84:	d8c02015 	stw	r3,128(sp)
 8007e88:	d9001f15 	stw	r4,124(sp)
 8007e8c:	014001c4 	movi	r5,7
 8007e90:	2901fb16 	blt	r5,r4,8008680 <___vfprintf_internal_r+0x1d98>
 8007e94:	42000204 	addi	r8,r8,8
 8007e98:	8001f716 	blt	r16,zero,8008678 <___vfprintf_internal_r+0x1d90>
 8007e9c:	1421c83a 	sub	r16,r2,r16
 8007ea0:	043d160e 	bge	zero,r16,80072fc <___vfprintf_internal_r+0xa14>
 8007ea4:	04400404 	movi	r17,16
 8007ea8:	d8801f17 	ldw	r2,124(sp)
 8007eac:	8c3efb0e 	bge	r17,r16,8007a9c <___vfprintf_internal_r+0x11b4>
 8007eb0:	01420074 	movhi	r5,2049
 8007eb4:	2956f484 	addi	r5,r5,23506
 8007eb8:	d9402c15 	stw	r5,176(sp)
 8007ebc:	058001c4 	movi	r22,7
 8007ec0:	dcc02d17 	ldw	r19,180(sp)
 8007ec4:	00000306 	br	8007ed4 <___vfprintf_internal_r+0x15ec>
 8007ec8:	42000204 	addi	r8,r8,8
 8007ecc:	843ffc04 	addi	r16,r16,-16
 8007ed0:	8c3ef50e 	bge	r17,r16,8007aa8 <___vfprintf_internal_r+0x11c0>
 8007ed4:	18c00404 	addi	r3,r3,16
 8007ed8:	10800044 	addi	r2,r2,1
 8007edc:	45000015 	stw	r20,0(r8)
 8007ee0:	44400115 	stw	r17,4(r8)
 8007ee4:	d8c02015 	stw	r3,128(sp)
 8007ee8:	d8801f15 	stw	r2,124(sp)
 8007eec:	b0bff60e 	bge	r22,r2,8007ec8 <___vfprintf_internal_r+0x15e0>
 8007ef0:	d9801e04 	addi	r6,sp,120
 8007ef4:	b80b883a 	mov	r5,r23
 8007ef8:	9809883a 	mov	r4,r19
 8007efc:	800e01c0 	call	800e01c <__sprint_r>
 8007f00:	103b7d1e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 8007f04:	d8c02017 	ldw	r3,128(sp)
 8007f08:	d8801f17 	ldw	r2,124(sp)
 8007f0c:	da000404 	addi	r8,sp,16
 8007f10:	003fee06 	br	8007ecc <___vfprintf_internal_r+0x15e4>
 8007f14:	9088703a 	and	r4,r18,r2
 8007f18:	203eab1e 	bne	r4,zero,80079c8 <___vfprintf_internal_r+0x10e0>
 8007f1c:	dc401f17 	ldw	r17,124(sp)
 8007f20:	40800115 	stw	r2,4(r8)
 8007f24:	44000015 	stw	r16,0(r8)
 8007f28:	8c400044 	addi	r17,r17,1
 8007f2c:	d8c02015 	stw	r3,128(sp)
 8007f30:	dc401f15 	stw	r17,124(sp)
 8007f34:	008001c4 	movi	r2,7
 8007f38:	14400e16 	blt	r2,r17,8007f74 <___vfprintf_internal_r+0x168c>
 8007f3c:	45800204 	addi	r22,r8,8
 8007f40:	003eca06 	br	8007a6c <___vfprintf_internal_r+0x1184>
 8007f44:	01020074 	movhi	r4,2049
 8007f48:	2116f484 	addi	r4,r4,23506
 8007f4c:	d9002c15 	stw	r4,176(sp)
 8007f50:	d8802c17 	ldw	r2,176(sp)
 8007f54:	1c07883a 	add	r3,r3,r16
 8007f58:	8c400044 	addi	r17,r17,1
 8007f5c:	b0800015 	stw	r2,0(r22)
 8007f60:	b4000115 	stw	r16,4(r22)
 8007f64:	d8c02015 	stw	r3,128(sp)
 8007f68:	dc401f15 	stw	r17,124(sp)
 8007f6c:	008001c4 	movi	r2,7
 8007f70:	147ebd0e 	bge	r2,r17,8007a68 <___vfprintf_internal_r+0x1180>
 8007f74:	d9002d17 	ldw	r4,180(sp)
 8007f78:	d9801e04 	addi	r6,sp,120
 8007f7c:	b80b883a 	mov	r5,r23
 8007f80:	800e01c0 	call	800e01c <__sprint_r>
 8007f84:	103b5c1e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 8007f88:	d8c02017 	ldw	r3,128(sp)
 8007f8c:	dc401f17 	ldw	r17,124(sp)
 8007f90:	dd800404 	addi	r22,sp,16
 8007f94:	003eb506 	br	8007a6c <___vfprintf_internal_r+0x1184>
 8007f98:	d9002d17 	ldw	r4,180(sp)
 8007f9c:	d9801e04 	addi	r6,sp,120
 8007fa0:	b80b883a 	mov	r5,r23
 8007fa4:	800e01c0 	call	800e01c <__sprint_r>
 8007fa8:	103b531e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 8007fac:	d8c02017 	ldw	r3,128(sp)
 8007fb0:	dc401f17 	ldw	r17,124(sp)
 8007fb4:	da000404 	addi	r8,sp,16
 8007fb8:	003e8d06 	br	80079f0 <___vfprintf_internal_r+0x1108>
 8007fbc:	d9002d17 	ldw	r4,180(sp)
 8007fc0:	d9801e04 	addi	r6,sp,120
 8007fc4:	b80b883a 	mov	r5,r23
 8007fc8:	800e01c0 	call	800e01c <__sprint_r>
 8007fcc:	103b4a1e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 8007fd0:	d8c02017 	ldw	r3,128(sp)
 8007fd4:	dc401f17 	ldw	r17,124(sp)
 8007fd8:	dd800404 	addi	r22,sp,16
 8007fdc:	003e8f06 	br	8007a1c <___vfprintf_internal_r+0x1134>
 8007fe0:	0027883a 	mov	r19,zero
 8007fe4:	003f4a06 	br	8007d10 <___vfprintf_internal_r+0x1428>
 8007fe8:	d9002d17 	ldw	r4,180(sp)
 8007fec:	d9801e04 	addi	r6,sp,120
 8007ff0:	b80b883a 	mov	r5,r23
 8007ff4:	800e01c0 	call	800e01c <__sprint_r>
 8007ff8:	103b3f1e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 8007ffc:	d8c02017 	ldw	r3,128(sp)
 8008000:	da000404 	addi	r8,sp,16
 8008004:	003c7b06 	br	80071f4 <___vfprintf_internal_r+0x90c>
 8008008:	d9402a17 	ldw	r5,168(sp)
 800800c:	04e7c83a 	sub	r19,zero,r19
 8008010:	07000b44 	movi	fp,45
 8008014:	9804c03a 	cmpne	r2,r19,zero
 8008018:	05adc83a 	sub	r22,zero,r22
 800801c:	df002785 	stb	fp,158(sp)
 8008020:	b0adc83a 	sub	r22,r22,r2
 8008024:	28017b16 	blt	r5,zero,8008614 <___vfprintf_internal_r+0x1d2c>
 8008028:	00bfdfc4 	movi	r2,-129
 800802c:	90a4703a 	and	r18,r18,r2
 8008030:	003b8906 	br	8006e58 <___vfprintf_internal_r+0x570>
 8008034:	d9003617 	ldw	r4,216(sp)
 8008038:	d9403817 	ldw	r5,224(sp)
 800803c:	da003d15 	stw	r8,244(sp)
 8008040:	800dc400 	call	800dc40 <__fpclassifyd>
 8008044:	da003d17 	ldw	r8,244(sp)
 8008048:	1000f026 	beq	r2,zero,800840c <___vfprintf_internal_r+0x1b24>
 800804c:	d9002a17 	ldw	r4,168(sp)
 8008050:	05bff7c4 	movi	r22,-33
 8008054:	00bfffc4 	movi	r2,-1
 8008058:	8dac703a 	and	r22,r17,r22
 800805c:	20820026 	beq	r4,r2,8008860 <___vfprintf_internal_r+0x1f78>
 8008060:	008011c4 	movi	r2,71
 8008064:	b081f726 	beq	r22,r2,8008844 <___vfprintf_internal_r+0x1f5c>
 8008068:	d9003817 	ldw	r4,224(sp)
 800806c:	90c04014 	ori	r3,r18,256
 8008070:	d8c02c15 	stw	r3,176(sp)
 8008074:	20021516 	blt	r4,zero,80088cc <___vfprintf_internal_r+0x1fe4>
 8008078:	dcc03817 	ldw	r19,224(sp)
 800807c:	d8002905 	stb	zero,164(sp)
 8008080:	00801984 	movi	r2,102
 8008084:	8881f926 	beq	r17,r2,800886c <___vfprintf_internal_r+0x1f84>
 8008088:	00801184 	movi	r2,70
 800808c:	88821c26 	beq	r17,r2,8008900 <___vfprintf_internal_r+0x2018>
 8008090:	00801144 	movi	r2,69
 8008094:	b081ef26 	beq	r22,r2,8008854 <___vfprintf_internal_r+0x1f6c>
 8008098:	d8c02a17 	ldw	r3,168(sp)
 800809c:	d8802104 	addi	r2,sp,132
 80080a0:	d8800315 	stw	r2,12(sp)
 80080a4:	d9403617 	ldw	r5,216(sp)
 80080a8:	d8802504 	addi	r2,sp,148
 80080ac:	d9002d17 	ldw	r4,180(sp)
 80080b0:	d8800215 	stw	r2,8(sp)
 80080b4:	d8802604 	addi	r2,sp,152
 80080b8:	d8c00015 	stw	r3,0(sp)
 80080bc:	d8800115 	stw	r2,4(sp)
 80080c0:	01c00084 	movi	r7,2
 80080c4:	980d883a 	mov	r6,r19
 80080c8:	d8c03c15 	stw	r3,240(sp)
 80080cc:	da003d15 	stw	r8,244(sp)
 80080d0:	80090180 	call	8009018 <_dtoa_r>
 80080d4:	1021883a 	mov	r16,r2
 80080d8:	008019c4 	movi	r2,103
 80080dc:	d8c03c17 	ldw	r3,240(sp)
 80080e0:	da003d17 	ldw	r8,244(sp)
 80080e4:	88817126 	beq	r17,r2,80086ac <___vfprintf_internal_r+0x1dc4>
 80080e8:	008011c4 	movi	r2,71
 80080ec:	88829126 	beq	r17,r2,8008b34 <___vfprintf_internal_r+0x224c>
 80080f0:	80f9883a 	add	fp,r16,r3
 80080f4:	d9003617 	ldw	r4,216(sp)
 80080f8:	000d883a 	mov	r6,zero
 80080fc:	000f883a 	mov	r7,zero
 8008100:	980b883a 	mov	r5,r19
 8008104:	da003d15 	stw	r8,244(sp)
 8008108:	8011f540 	call	8011f54 <__eqdf2>
 800810c:	da003d17 	ldw	r8,244(sp)
 8008110:	10018d26 	beq	r2,zero,8008748 <___vfprintf_internal_r+0x1e60>
 8008114:	d8802117 	ldw	r2,132(sp)
 8008118:	1700062e 	bgeu	r2,fp,8008134 <___vfprintf_internal_r+0x184c>
 800811c:	01000c04 	movi	r4,48
 8008120:	10c00044 	addi	r3,r2,1
 8008124:	d8c02115 	stw	r3,132(sp)
 8008128:	11000005 	stb	r4,0(r2)
 800812c:	d8802117 	ldw	r2,132(sp)
 8008130:	173ffb36 	bltu	r2,fp,8008120 <___vfprintf_internal_r+0x1838>
 8008134:	1405c83a 	sub	r2,r2,r16
 8008138:	d8803315 	stw	r2,204(sp)
 800813c:	008011c4 	movi	r2,71
 8008140:	b0817626 	beq	r22,r2,800871c <___vfprintf_internal_r+0x1e34>
 8008144:	00801944 	movi	r2,101
 8008148:	1442800e 	bge	r2,r17,8008b4c <___vfprintf_internal_r+0x2264>
 800814c:	d8c02617 	ldw	r3,152(sp)
 8008150:	00801984 	movi	r2,102
 8008154:	d8c03215 	stw	r3,200(sp)
 8008158:	8881fe26 	beq	r17,r2,8008954 <___vfprintf_internal_r+0x206c>
 800815c:	d8c03217 	ldw	r3,200(sp)
 8008160:	d9003317 	ldw	r4,204(sp)
 8008164:	1901dd16 	blt	r3,r4,80088dc <___vfprintf_internal_r+0x1ff4>
 8008168:	9480004c 	andi	r18,r18,1
 800816c:	90022b1e 	bne	r18,zero,8008a1c <___vfprintf_internal_r+0x2134>
 8008170:	1805883a 	mov	r2,r3
 8008174:	18028316 	blt	r3,zero,8008b84 <___vfprintf_internal_r+0x229c>
 8008178:	d8c03217 	ldw	r3,200(sp)
 800817c:	044019c4 	movi	r17,103
 8008180:	d8c02b15 	stw	r3,172(sp)
 8008184:	df002907 	ldb	fp,164(sp)
 8008188:	e001531e 	bne	fp,zero,80086d8 <___vfprintf_internal_r+0x1df0>
 800818c:	df002783 	ldbu	fp,158(sp)
 8008190:	d8802915 	stw	r2,164(sp)
 8008194:	dc802c17 	ldw	r18,176(sp)
 8008198:	d8002a15 	stw	zero,168(sp)
 800819c:	003baf06 	br	800705c <___vfprintf_internal_r+0x774>
 80081a0:	d8c02e17 	ldw	r3,184(sp)
 80081a4:	d9002e17 	ldw	r4,184(sp)
 80081a8:	d9402e17 	ldw	r5,184(sp)
 80081ac:	18c00017 	ldw	r3,0(r3)
 80081b0:	21000117 	ldw	r4,4(r4)
 80081b4:	29400204 	addi	r5,r5,8
 80081b8:	d8c03615 	stw	r3,216(sp)
 80081bc:	d9003815 	stw	r4,224(sp)
 80081c0:	d9402e15 	stw	r5,184(sp)
 80081c4:	003b5006 	br	8006f08 <___vfprintf_internal_r+0x620>
 80081c8:	ac400007 	ldb	r17,0(r21)
 80081cc:	003a2806 	br	8006a70 <___vfprintf_internal_r+0x188>
 80081d0:	9080100c 	andi	r2,r18,64
 80081d4:	1000a826 	beq	r2,zero,8008478 <___vfprintf_internal_r+0x1b90>
 80081d8:	d8c02e17 	ldw	r3,184(sp)
 80081dc:	002d883a 	mov	r22,zero
 80081e0:	1cc0000b 	ldhu	r19,0(r3)
 80081e4:	18c00104 	addi	r3,r3,4
 80081e8:	d8c02e15 	stw	r3,184(sp)
 80081ec:	003caf06 	br	80074ac <___vfprintf_internal_r+0xbc4>
 80081f0:	d9002e17 	ldw	r4,184(sp)
 80081f4:	d9402a17 	ldw	r5,168(sp)
 80081f8:	002d883a 	mov	r22,zero
 80081fc:	20800104 	addi	r2,r4,4
 8008200:	24c00017 	ldw	r19,0(r4)
 8008204:	283ebb0e 	bge	r5,zero,8007cf4 <___vfprintf_internal_r+0x140c>
 8008208:	003ef106 	br	8007dd0 <___vfprintf_internal_r+0x14e8>
 800820c:	9080040c 	andi	r2,r18,16
 8008210:	1000921e 	bne	r2,zero,800845c <___vfprintf_internal_r+0x1b74>
 8008214:	9480100c 	andi	r18,r18,64
 8008218:	90013926 	beq	r18,zero,8008700 <___vfprintf_internal_r+0x1e18>
 800821c:	d9402e17 	ldw	r5,184(sp)
 8008220:	d8c02f17 	ldw	r3,188(sp)
 8008224:	28800017 	ldw	r2,0(r5)
 8008228:	29400104 	addi	r5,r5,4
 800822c:	d9402e15 	stw	r5,184(sp)
 8008230:	10c0000d 	sth	r3,0(r2)
 8008234:	0039e406 	br	80069c8 <___vfprintf_internal_r+0xe0>
 8008238:	9080100c 	andi	r2,r18,64
 800823c:	10008026 	beq	r2,zero,8008440 <___vfprintf_internal_r+0x1b58>
 8008240:	d8802e17 	ldw	r2,184(sp)
 8008244:	14c0000f 	ldh	r19,0(r2)
 8008248:	10800104 	addi	r2,r2,4
 800824c:	d8802e15 	stw	r2,184(sp)
 8008250:	982dd7fa 	srai	r22,r19,31
 8008254:	b005883a 	mov	r2,r22
 8008258:	003af706 	br	8006e38 <___vfprintf_internal_r+0x550>
 800825c:	9080100c 	andi	r2,r18,64
 8008260:	d8002785 	stb	zero,158(sp)
 8008264:	10008a1e 	bne	r2,zero,8008490 <___vfprintf_internal_r+0x1ba8>
 8008268:	d9002e17 	ldw	r4,184(sp)
 800826c:	d9402a17 	ldw	r5,168(sp)
 8008270:	002d883a 	mov	r22,zero
 8008274:	20800104 	addi	r2,r4,4
 8008278:	24c00017 	ldw	r19,0(r4)
 800827c:	283e4b0e 	bge	r5,zero,8007bac <___vfprintf_internal_r+0x12c4>
 8008280:	9d86b03a 	or	r3,r19,r22
 8008284:	d8802e15 	stw	r2,184(sp)
 8008288:	183e4c1e 	bne	r3,zero,8007bbc <___vfprintf_internal_r+0x12d4>
 800828c:	0039883a 	mov	fp,zero
 8008290:	0005883a 	mov	r2,zero
 8008294:	003d4006 	br	8007798 <___vfprintf_internal_r+0xeb0>
 8008298:	01420074 	movhi	r5,2049
 800829c:	2956f484 	addi	r5,r5,23506
 80082a0:	d9402c15 	stw	r5,176(sp)
 80082a4:	d9402c17 	ldw	r5,176(sp)
 80082a8:	1c47883a 	add	r3,r3,r17
 80082ac:	10800044 	addi	r2,r2,1
 80082b0:	41400015 	stw	r5,0(r8)
 80082b4:	44400115 	stw	r17,4(r8)
 80082b8:	d8c02015 	stw	r3,128(sp)
 80082bc:	d8801f15 	stw	r2,124(sp)
 80082c0:	010001c4 	movi	r4,7
 80082c4:	20bec816 	blt	r4,r2,8007de8 <___vfprintf_internal_r+0x1500>
 80082c8:	42000204 	addi	r8,r8,8
 80082cc:	003ecd06 	br	8007e04 <___vfprintf_internal_r+0x151c>
 80082d0:	d9002a17 	ldw	r4,168(sp)
 80082d4:	d8002785 	stb	zero,158(sp)
 80082d8:	203d2d16 	blt	r4,zero,8007790 <___vfprintf_internal_r+0xea8>
 80082dc:	00bfdfc4 	movi	r2,-129
 80082e0:	90a4703a 	and	r18,r18,r2
 80082e4:	003a6106 	br	8006c6c <___vfprintf_internal_r+0x384>
 80082e8:	01020074 	movhi	r4,2049
 80082ec:	2116f484 	addi	r4,r4,23506
 80082f0:	d9002c15 	stw	r4,176(sp)
 80082f4:	003bea06 	br	80072a0 <___vfprintf_internal_r+0x9b8>
 80082f8:	d9002d17 	ldw	r4,180(sp)
 80082fc:	d9801e04 	addi	r6,sp,120
 8008300:	b80b883a 	mov	r5,r23
 8008304:	800e01c0 	call	800e01c <__sprint_r>
 8008308:	103a7b1e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 800830c:	d8c02017 	ldw	r3,128(sp)
 8008310:	da000404 	addi	r8,sp,16
 8008314:	003d4106 	br	800781c <___vfprintf_internal_r+0xf34>
 8008318:	d8801f17 	ldw	r2,124(sp)
 800831c:	01420074 	movhi	r5,2049
 8008320:	01000044 	movi	r4,1
 8008324:	18c00044 	addi	r3,r3,1
 8008328:	10800044 	addi	r2,r2,1
 800832c:	2956f404 	addi	r5,r5,23504
 8008330:	41000115 	stw	r4,4(r8)
 8008334:	41400015 	stw	r5,0(r8)
 8008338:	d8c02015 	stw	r3,128(sp)
 800833c:	d8801f15 	stw	r2,124(sp)
 8008340:	010001c4 	movi	r4,7
 8008344:	20805c16 	blt	r4,r2,80084b8 <___vfprintf_internal_r+0x1bd0>
 8008348:	42000204 	addi	r8,r8,8
 800834c:	8800041e 	bne	r17,zero,8008360 <___vfprintf_internal_r+0x1a78>
 8008350:	d8803317 	ldw	r2,204(sp)
 8008354:	1000021e 	bne	r2,zero,8008360 <___vfprintf_internal_r+0x1a78>
 8008358:	9080004c 	andi	r2,r18,1
 800835c:	103be726 	beq	r2,zero,80072fc <___vfprintf_internal_r+0xa14>
 8008360:	d9003717 	ldw	r4,220(sp)
 8008364:	d8801f17 	ldw	r2,124(sp)
 8008368:	d9403417 	ldw	r5,208(sp)
 800836c:	20c7883a 	add	r3,r4,r3
 8008370:	10800044 	addi	r2,r2,1
 8008374:	41000115 	stw	r4,4(r8)
 8008378:	41400015 	stw	r5,0(r8)
 800837c:	d8c02015 	stw	r3,128(sp)
 8008380:	d8801f15 	stw	r2,124(sp)
 8008384:	010001c4 	movi	r4,7
 8008388:	20812116 	blt	r4,r2,8008810 <___vfprintf_internal_r+0x1f28>
 800838c:	42000204 	addi	r8,r8,8
 8008390:	0463c83a 	sub	r17,zero,r17
 8008394:	0440730e 	bge	zero,r17,8008564 <___vfprintf_internal_r+0x1c7c>
 8008398:	05800404 	movi	r22,16
 800839c:	b440860e 	bge	r22,r17,80085b8 <___vfprintf_internal_r+0x1cd0>
 80083a0:	01420074 	movhi	r5,2049
 80083a4:	2956f484 	addi	r5,r5,23506
 80083a8:	d9402c15 	stw	r5,176(sp)
 80083ac:	070001c4 	movi	fp,7
 80083b0:	dcc02d17 	ldw	r19,180(sp)
 80083b4:	00000306 	br	80083c4 <___vfprintf_internal_r+0x1adc>
 80083b8:	42000204 	addi	r8,r8,8
 80083bc:	8c7ffc04 	addi	r17,r17,-16
 80083c0:	b440800e 	bge	r22,r17,80085c4 <___vfprintf_internal_r+0x1cdc>
 80083c4:	18c00404 	addi	r3,r3,16
 80083c8:	10800044 	addi	r2,r2,1
 80083cc:	45000015 	stw	r20,0(r8)
 80083d0:	45800115 	stw	r22,4(r8)
 80083d4:	d8c02015 	stw	r3,128(sp)
 80083d8:	d8801f15 	stw	r2,124(sp)
 80083dc:	e0bff60e 	bge	fp,r2,80083b8 <___vfprintf_internal_r+0x1ad0>
 80083e0:	d9801e04 	addi	r6,sp,120
 80083e4:	b80b883a 	mov	r5,r23
 80083e8:	9809883a 	mov	r4,r19
 80083ec:	800e01c0 	call	800e01c <__sprint_r>
 80083f0:	103a411e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 80083f4:	d8c02017 	ldw	r3,128(sp)
 80083f8:	d8801f17 	ldw	r2,124(sp)
 80083fc:	da000404 	addi	r8,sp,16
 8008400:	003fee06 	br	80083bc <___vfprintf_internal_r+0x1ad4>
 8008404:	00bfffc4 	movi	r2,-1
 8008408:	003a3f06 	br	8006d08 <___vfprintf_internal_r+0x420>
 800840c:	008011c4 	movi	r2,71
 8008410:	1440b816 	blt	r2,r17,80086f4 <___vfprintf_internal_r+0x1e0c>
 8008414:	04020074 	movhi	r16,2049
 8008418:	8416e604 	addi	r16,r16,23448
 800841c:	00c000c4 	movi	r3,3
 8008420:	00bfdfc4 	movi	r2,-129
 8008424:	d8c02915 	stw	r3,164(sp)
 8008428:	90a4703a 	and	r18,r18,r2
 800842c:	df002783 	ldbu	fp,158(sp)
 8008430:	d8c02b15 	stw	r3,172(sp)
 8008434:	d8002a15 	stw	zero,168(sp)
 8008438:	d8003215 	stw	zero,200(sp)
 800843c:	003b0706 	br	800705c <___vfprintf_internal_r+0x774>
 8008440:	d8c02e17 	ldw	r3,184(sp)
 8008444:	1cc00017 	ldw	r19,0(r3)
 8008448:	18c00104 	addi	r3,r3,4
 800844c:	d8c02e15 	stw	r3,184(sp)
 8008450:	982dd7fa 	srai	r22,r19,31
 8008454:	b005883a 	mov	r2,r22
 8008458:	003a7706 	br	8006e38 <___vfprintf_internal_r+0x550>
 800845c:	d8c02e17 	ldw	r3,184(sp)
 8008460:	d9002f17 	ldw	r4,188(sp)
 8008464:	18800017 	ldw	r2,0(r3)
 8008468:	18c00104 	addi	r3,r3,4
 800846c:	d8c02e15 	stw	r3,184(sp)
 8008470:	11000015 	stw	r4,0(r2)
 8008474:	00395406 	br	80069c8 <___vfprintf_internal_r+0xe0>
 8008478:	d9002e17 	ldw	r4,184(sp)
 800847c:	002d883a 	mov	r22,zero
 8008480:	24c00017 	ldw	r19,0(r4)
 8008484:	21000104 	addi	r4,r4,4
 8008488:	d9002e15 	stw	r4,184(sp)
 800848c:	003c0706 	br	80074ac <___vfprintf_internal_r+0xbc4>
 8008490:	d9402e17 	ldw	r5,184(sp)
 8008494:	d8c02a17 	ldw	r3,168(sp)
 8008498:	002d883a 	mov	r22,zero
 800849c:	28800104 	addi	r2,r5,4
 80084a0:	2cc0000b 	ldhu	r19,0(r5)
 80084a4:	183dc10e 	bge	r3,zero,8007bac <___vfprintf_internal_r+0x12c4>
 80084a8:	003f7506 	br	8008280 <___vfprintf_internal_r+0x1998>
 80084ac:	04020074 	movhi	r16,2049
 80084b0:	8416e404 	addi	r16,r16,23440
 80084b4:	003aa706 	br	8006f54 <___vfprintf_internal_r+0x66c>
 80084b8:	d9002d17 	ldw	r4,180(sp)
 80084bc:	d9801e04 	addi	r6,sp,120
 80084c0:	b80b883a 	mov	r5,r23
 80084c4:	800e01c0 	call	800e01c <__sprint_r>
 80084c8:	103a0b1e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 80084cc:	dc402617 	ldw	r17,152(sp)
 80084d0:	d8c02017 	ldw	r3,128(sp)
 80084d4:	da000404 	addi	r8,sp,16
 80084d8:	003f9c06 	br	800834c <___vfprintf_internal_r+0x1a64>
 80084dc:	ac400043 	ldbu	r17,1(r21)
 80084e0:	84000814 	ori	r16,r16,32
 80084e4:	ad400044 	addi	r21,r21,1
 80084e8:	8c403fcc 	andi	r17,r17,255
 80084ec:	8c40201c 	xori	r17,r17,128
 80084f0:	8c7fe004 	addi	r17,r17,-128
 80084f4:	00395e06 	br	8006a70 <___vfprintf_internal_r+0x188>
 80084f8:	d8c02e15 	stw	r3,184(sp)
 80084fc:	0039883a 	mov	fp,zero
 8008500:	003e3506 	br	8007dd8 <___vfprintf_internal_r+0x14f0>
 8008504:	d9002d17 	ldw	r4,180(sp)
 8008508:	d9801e04 	addi	r6,sp,120
 800850c:	b80b883a 	mov	r5,r23
 8008510:	800e01c0 	call	800e01c <__sprint_r>
 8008514:	1039f81e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 8008518:	d8c02017 	ldw	r3,128(sp)
 800851c:	da000404 	addi	r8,sp,16
 8008520:	003cd006 	br	8007864 <___vfprintf_internal_r+0xf7c>
 8008524:	8009883a 	mov	r4,r16
 8008528:	df003d15 	stw	fp,244(sp)
 800852c:	800663c0 	call	800663c <strlen>
 8008530:	d8802b15 	stw	r2,172(sp)
 8008534:	da003d17 	ldw	r8,244(sp)
 8008538:	103c200e 	bge	r2,zero,80075bc <___vfprintf_internal_r+0xcd4>
 800853c:	0005883a 	mov	r2,zero
 8008540:	003c1e06 	br	80075bc <___vfprintf_internal_r+0xcd4>
 8008544:	d9002d17 	ldw	r4,180(sp)
 8008548:	d9801e04 	addi	r6,sp,120
 800854c:	b80b883a 	mov	r5,r23
 8008550:	800e01c0 	call	800e01c <__sprint_r>
 8008554:	1039e81e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 8008558:	d8c02017 	ldw	r3,128(sp)
 800855c:	d8801f17 	ldw	r2,124(sp)
 8008560:	da000404 	addi	r8,sp,16
 8008564:	d9403317 	ldw	r5,204(sp)
 8008568:	10800044 	addi	r2,r2,1
 800856c:	44000015 	stw	r16,0(r8)
 8008570:	28c7883a 	add	r3,r5,r3
 8008574:	003b5b06 	br	80072e4 <___vfprintf_internal_r+0x9fc>
 8008578:	01020074 	movhi	r4,2049
 800857c:	2116f884 	addi	r4,r4,23522
 8008580:	d9003515 	stw	r4,212(sp)
 8008584:	003af206 	br	8007150 <___vfprintf_internal_r+0x868>
 8008588:	013fffc4 	movi	r4,-1
 800858c:	003a0806 	br	8006db0 <___vfprintf_internal_r+0x4c8>
 8008590:	0023883a 	mov	r17,zero
 8008594:	003d9d06 	br	8007c0c <___vfprintf_internal_r+0x1324>
 8008598:	d9002d17 	ldw	r4,180(sp)
 800859c:	d9801e04 	addi	r6,sp,120
 80085a0:	b80b883a 	mov	r5,r23
 80085a4:	800e01c0 	call	800e01c <__sprint_r>
 80085a8:	1039d31e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 80085ac:	d8c02017 	ldw	r3,128(sp)
 80085b0:	da000404 	addi	r8,sp,16
 80085b4:	003d9406 	br	8007c08 <___vfprintf_internal_r+0x1320>
 80085b8:	01020074 	movhi	r4,2049
 80085bc:	2116f484 	addi	r4,r4,23506
 80085c0:	d9002c15 	stw	r4,176(sp)
 80085c4:	d9002c17 	ldw	r4,176(sp)
 80085c8:	1c47883a 	add	r3,r3,r17
 80085cc:	10800044 	addi	r2,r2,1
 80085d0:	41000015 	stw	r4,0(r8)
 80085d4:	44400115 	stw	r17,4(r8)
 80085d8:	d8c02015 	stw	r3,128(sp)
 80085dc:	d8801f15 	stw	r2,124(sp)
 80085e0:	010001c4 	movi	r4,7
 80085e4:	20bfd716 	blt	r4,r2,8008544 <___vfprintf_internal_r+0x1c5c>
 80085e8:	42000204 	addi	r8,r8,8
 80085ec:	003fdd06 	br	8008564 <___vfprintf_internal_r+0x1c7c>
 80085f0:	d9002d17 	ldw	r4,180(sp)
 80085f4:	d9801e04 	addi	r6,sp,120
 80085f8:	b80b883a 	mov	r5,r23
 80085fc:	800e01c0 	call	800e01c <__sprint_r>
 8008600:	1039bd1e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 8008604:	d8802617 	ldw	r2,152(sp)
 8008608:	d8c02017 	ldw	r3,128(sp)
 800860c:	da000404 	addi	r8,sp,16
 8008610:	003e1006 	br	8007e54 <___vfprintf_internal_r+0x156c>
 8008614:	00800044 	movi	r2,1
 8008618:	10803fcc 	andi	r2,r2,255
 800861c:	00c00044 	movi	r3,1
 8008620:	10fa0d26 	beq	r2,r3,8006e58 <___vfprintf_internal_r+0x570>
 8008624:	00c00084 	movi	r3,2
 8008628:	10fbaf26 	beq	r2,r3,80074e8 <___vfprintf_internal_r+0xc00>
 800862c:	003a6d06 	br	8006fe4 <___vfprintf_internal_r+0x6fc>
 8008630:	01020074 	movhi	r4,2049
 8008634:	2116f884 	addi	r4,r4,23522
 8008638:	d9003515 	stw	r4,212(sp)
 800863c:	003b5406 	br	8007390 <___vfprintf_internal_r+0xaa8>
 8008640:	d8802a17 	ldw	r2,168(sp)
 8008644:	00c00184 	movi	r3,6
 8008648:	1880012e 	bgeu	r3,r2,8008650 <___vfprintf_internal_r+0x1d68>
 800864c:	1805883a 	mov	r2,r3
 8008650:	d8802b15 	stw	r2,172(sp)
 8008654:	1000ef16 	blt	r2,zero,8008a14 <___vfprintf_internal_r+0x212c>
 8008658:	04020074 	movhi	r16,2049
 800865c:	d8802915 	stw	r2,164(sp)
 8008660:	dcc02e15 	stw	r19,184(sp)
 8008664:	d8002a15 	stw	zero,168(sp)
 8008668:	d8003215 	stw	zero,200(sp)
 800866c:	8416f204 	addi	r16,r16,23496
 8008670:	0039883a 	mov	fp,zero
 8008674:	003a8006 	br	8007078 <___vfprintf_internal_r+0x790>
 8008678:	0021883a 	mov	r16,zero
 800867c:	003e0706 	br	8007e9c <___vfprintf_internal_r+0x15b4>
 8008680:	d9002d17 	ldw	r4,180(sp)
 8008684:	d9801e04 	addi	r6,sp,120
 8008688:	b80b883a 	mov	r5,r23
 800868c:	800e01c0 	call	800e01c <__sprint_r>
 8008690:	1039991e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 8008694:	d8802617 	ldw	r2,152(sp)
 8008698:	d9403317 	ldw	r5,204(sp)
 800869c:	d8c02017 	ldw	r3,128(sp)
 80086a0:	da000404 	addi	r8,sp,16
 80086a4:	2885c83a 	sub	r2,r5,r2
 80086a8:	003dfb06 	br	8007e98 <___vfprintf_internal_r+0x15b0>
 80086ac:	9080004c 	andi	r2,r18,1
 80086b0:	103e8f1e 	bne	r2,zero,80080f0 <___vfprintf_internal_r+0x1808>
 80086b4:	d8802117 	ldw	r2,132(sp)
 80086b8:	003e9e06 	br	8008134 <___vfprintf_internal_r+0x184c>
 80086bc:	1025883a 	mov	r18,r2
 80086c0:	0039883a 	mov	fp,zero
 80086c4:	00800084 	movi	r2,2
 80086c8:	003fd306 	br	8008618 <___vfprintf_internal_r+0x1d30>
 80086cc:	07000b44 	movi	fp,45
 80086d0:	df002785 	stb	fp,158(sp)
 80086d4:	003a1b06 	br	8006f44 <___vfprintf_internal_r+0x65c>
 80086d8:	00c00b44 	movi	r3,45
 80086dc:	d8c02785 	stb	r3,158(sp)
 80086e0:	d8802915 	stw	r2,164(sp)
 80086e4:	dc802c17 	ldw	r18,176(sp)
 80086e8:	d8002a15 	stw	zero,168(sp)
 80086ec:	07000b44 	movi	fp,45
 80086f0:	003a5e06 	br	800706c <___vfprintf_internal_r+0x784>
 80086f4:	04020074 	movhi	r16,2049
 80086f8:	8416e704 	addi	r16,r16,23452
 80086fc:	003f4706 	br	800841c <___vfprintf_internal_r+0x1b34>
 8008700:	d9002e17 	ldw	r4,184(sp)
 8008704:	d9402f17 	ldw	r5,188(sp)
 8008708:	20800017 	ldw	r2,0(r4)
 800870c:	21000104 	addi	r4,r4,4
 8008710:	d9002e15 	stw	r4,184(sp)
 8008714:	11400015 	stw	r5,0(r2)
 8008718:	0038ab06 	br	80069c8 <___vfprintf_internal_r+0xe0>
 800871c:	dd802617 	ldw	r22,152(sp)
 8008720:	00bfff44 	movi	r2,-3
 8008724:	b0801c16 	blt	r22,r2,8008798 <___vfprintf_internal_r+0x1eb0>
 8008728:	d9402a17 	ldw	r5,168(sp)
 800872c:	2d801a16 	blt	r5,r22,8008798 <___vfprintf_internal_r+0x1eb0>
 8008730:	dd803215 	stw	r22,200(sp)
 8008734:	003e8906 	br	800815c <___vfprintf_internal_r+0x1874>
 8008738:	01020074 	movhi	r4,2049
 800873c:	2116f484 	addi	r4,r4,23506
 8008740:	d9002c15 	stw	r4,176(sp)
 8008744:	003c9106 	br	800798c <___vfprintf_internal_r+0x10a4>
 8008748:	e005883a 	mov	r2,fp
 800874c:	003e7906 	br	8008134 <___vfprintf_internal_r+0x184c>
 8008750:	d9002a17 	ldw	r4,168(sp)
 8008754:	df002783 	ldbu	fp,158(sp)
 8008758:	dcc02e15 	stw	r19,184(sp)
 800875c:	d9002915 	stw	r4,164(sp)
 8008760:	d9002b15 	stw	r4,172(sp)
 8008764:	d8002a15 	stw	zero,168(sp)
 8008768:	d8003215 	stw	zero,200(sp)
 800876c:	003a3b06 	br	800705c <___vfprintf_internal_r+0x774>
 8008770:	9080004c 	andi	r2,r18,1
 8008774:	0039883a 	mov	fp,zero
 8008778:	10000426 	beq	r2,zero,800878c <___vfprintf_internal_r+0x1ea4>
 800877c:	00800c04 	movi	r2,48
 8008780:	dc001dc4 	addi	r16,sp,119
 8008784:	d8801dc5 	stb	r2,119(sp)
 8008788:	003b6406 	br	800751c <___vfprintf_internal_r+0xc34>
 800878c:	d8002b15 	stw	zero,172(sp)
 8008790:	dc001e04 	addi	r16,sp,120
 8008794:	003a2b06 	br	8007044 <___vfprintf_internal_r+0x75c>
 8008798:	8c7fff84 	addi	r17,r17,-2
 800879c:	b5bfffc4 	addi	r22,r22,-1
 80087a0:	dd802615 	stw	r22,152(sp)
 80087a4:	dc4022c5 	stb	r17,139(sp)
 80087a8:	b000bf16 	blt	r22,zero,8008aa8 <___vfprintf_internal_r+0x21c0>
 80087ac:	00800ac4 	movi	r2,43
 80087b0:	d8802305 	stb	r2,140(sp)
 80087b4:	00800244 	movi	r2,9
 80087b8:	15807016 	blt	r2,r22,800897c <___vfprintf_internal_r+0x2094>
 80087bc:	00800c04 	movi	r2,48
 80087c0:	b5800c04 	addi	r22,r22,48
 80087c4:	d8802345 	stb	r2,141(sp)
 80087c8:	dd802385 	stb	r22,142(sp)
 80087cc:	d88023c4 	addi	r2,sp,143
 80087d0:	df0022c4 	addi	fp,sp,139
 80087d4:	d8c03317 	ldw	r3,204(sp)
 80087d8:	1739c83a 	sub	fp,r2,fp
 80087dc:	d9003317 	ldw	r4,204(sp)
 80087e0:	e0c7883a 	add	r3,fp,r3
 80087e4:	df003a15 	stw	fp,232(sp)
 80087e8:	d8c02b15 	stw	r3,172(sp)
 80087ec:	00800044 	movi	r2,1
 80087f0:	1100b30e 	bge	r2,r4,8008ac0 <___vfprintf_internal_r+0x21d8>
 80087f4:	d8c02b17 	ldw	r3,172(sp)
 80087f8:	18c00044 	addi	r3,r3,1
 80087fc:	d8c02b15 	stw	r3,172(sp)
 8008800:	1805883a 	mov	r2,r3
 8008804:	1800ac16 	blt	r3,zero,8008ab8 <___vfprintf_internal_r+0x21d0>
 8008808:	d8003215 	stw	zero,200(sp)
 800880c:	003e5d06 	br	8008184 <___vfprintf_internal_r+0x189c>
 8008810:	d9002d17 	ldw	r4,180(sp)
 8008814:	d9801e04 	addi	r6,sp,120
 8008818:	b80b883a 	mov	r5,r23
 800881c:	800e01c0 	call	800e01c <__sprint_r>
 8008820:	1039351e 	bne	r2,zero,8006cf8 <___vfprintf_internal_r+0x410>
 8008824:	dc402617 	ldw	r17,152(sp)
 8008828:	d8c02017 	ldw	r3,128(sp)
 800882c:	d8801f17 	ldw	r2,124(sp)
 8008830:	da000404 	addi	r8,sp,16
 8008834:	003ed606 	br	8008390 <___vfprintf_internal_r+0x1aa8>
 8008838:	182b883a 	mov	r21,r3
 800883c:	d8002a15 	stw	zero,168(sp)
 8008840:	00388c06 	br	8006a74 <___vfprintf_internal_r+0x18c>
 8008844:	d8802a17 	ldw	r2,168(sp)
 8008848:	103e071e 	bne	r2,zero,8008068 <___vfprintf_internal_r+0x1780>
 800884c:	dc002a15 	stw	r16,168(sp)
 8008850:	003e0506 	br	8008068 <___vfprintf_internal_r+0x1780>
 8008854:	d9002a17 	ldw	r4,168(sp)
 8008858:	20c00044 	addi	r3,r4,1
 800885c:	003e0f06 	br	800809c <___vfprintf_internal_r+0x17b4>
 8008860:	01400184 	movi	r5,6
 8008864:	d9402a15 	stw	r5,168(sp)
 8008868:	003dff06 	br	8008068 <___vfprintf_internal_r+0x1780>
 800886c:	d8802104 	addi	r2,sp,132
 8008870:	d8800315 	stw	r2,12(sp)
 8008874:	d8802504 	addi	r2,sp,148
 8008878:	d8800215 	stw	r2,8(sp)
 800887c:	d8802604 	addi	r2,sp,152
 8008880:	d8800115 	stw	r2,4(sp)
 8008884:	d8802a17 	ldw	r2,168(sp)
 8008888:	d9403617 	ldw	r5,216(sp)
 800888c:	d9002d17 	ldw	r4,180(sp)
 8008890:	d8800015 	stw	r2,0(sp)
 8008894:	01c000c4 	movi	r7,3
 8008898:	980d883a 	mov	r6,r19
 800889c:	da003d15 	stw	r8,244(sp)
 80088a0:	80090180 	call	8009018 <_dtoa_r>
 80088a4:	d8c02a17 	ldw	r3,168(sp)
 80088a8:	da003d17 	ldw	r8,244(sp)
 80088ac:	1021883a 	mov	r16,r2
 80088b0:	10f9883a 	add	fp,r2,r3
 80088b4:	81000007 	ldb	r4,0(r16)
 80088b8:	00800c04 	movi	r2,48
 80088bc:	20805e26 	beq	r4,r2,8008a38 <___vfprintf_internal_r+0x2150>
 80088c0:	d8c02617 	ldw	r3,152(sp)
 80088c4:	e0f9883a 	add	fp,fp,r3
 80088c8:	003e0a06 	br	80080f4 <___vfprintf_internal_r+0x180c>
 80088cc:	00c00b44 	movi	r3,45
 80088d0:	24e0003c 	xorhi	r19,r4,32768
 80088d4:	d8c02905 	stb	r3,164(sp)
 80088d8:	003de906 	br	8008080 <___vfprintf_internal_r+0x1798>
 80088dc:	d8c03217 	ldw	r3,200(sp)
 80088e0:	00c07a0e 	bge	zero,r3,8008acc <___vfprintf_internal_r+0x21e4>
 80088e4:	00800044 	movi	r2,1
 80088e8:	d9003317 	ldw	r4,204(sp)
 80088ec:	1105883a 	add	r2,r2,r4
 80088f0:	d8802b15 	stw	r2,172(sp)
 80088f4:	10004e16 	blt	r2,zero,8008a30 <___vfprintf_internal_r+0x2148>
 80088f8:	044019c4 	movi	r17,103
 80088fc:	003e2106 	br	8008184 <___vfprintf_internal_r+0x189c>
 8008900:	d9002a17 	ldw	r4,168(sp)
 8008904:	d8802104 	addi	r2,sp,132
 8008908:	d8800315 	stw	r2,12(sp)
 800890c:	d9000015 	stw	r4,0(sp)
 8008910:	d8802504 	addi	r2,sp,148
 8008914:	d9403617 	ldw	r5,216(sp)
 8008918:	d9002d17 	ldw	r4,180(sp)
 800891c:	d8800215 	stw	r2,8(sp)
 8008920:	d8802604 	addi	r2,sp,152
 8008924:	d8800115 	stw	r2,4(sp)
 8008928:	01c000c4 	movi	r7,3
 800892c:	980d883a 	mov	r6,r19
 8008930:	da003d15 	stw	r8,244(sp)
 8008934:	80090180 	call	8009018 <_dtoa_r>
 8008938:	d8c02a17 	ldw	r3,168(sp)
 800893c:	da003d17 	ldw	r8,244(sp)
 8008940:	1021883a 	mov	r16,r2
 8008944:	00801184 	movi	r2,70
 8008948:	80f9883a 	add	fp,r16,r3
 800894c:	88bfd926 	beq	r17,r2,80088b4 <___vfprintf_internal_r+0x1fcc>
 8008950:	003de806 	br	80080f4 <___vfprintf_internal_r+0x180c>
 8008954:	d9002a17 	ldw	r4,168(sp)
 8008958:	00c04d0e 	bge	zero,r3,8008a90 <___vfprintf_internal_r+0x21a8>
 800895c:	2000441e 	bne	r4,zero,8008a70 <___vfprintf_internal_r+0x2188>
 8008960:	9480004c 	andi	r18,r18,1
 8008964:	9000421e 	bne	r18,zero,8008a70 <___vfprintf_internal_r+0x2188>
 8008968:	1805883a 	mov	r2,r3
 800896c:	18006f16 	blt	r3,zero,8008b2c <___vfprintf_internal_r+0x2244>
 8008970:	d8c03217 	ldw	r3,200(sp)
 8008974:	d8c02b15 	stw	r3,172(sp)
 8008978:	003e0206 	br	8008184 <___vfprintf_internal_r+0x189c>
 800897c:	df0022c4 	addi	fp,sp,139
 8008980:	dc002a15 	stw	r16,168(sp)
 8008984:	4027883a 	mov	r19,r8
 8008988:	e021883a 	mov	r16,fp
 800898c:	b009883a 	mov	r4,r22
 8008990:	01400284 	movi	r5,10
 8008994:	8010ba80 	call	8010ba8 <__modsi3>
 8008998:	10800c04 	addi	r2,r2,48
 800899c:	843fffc4 	addi	r16,r16,-1
 80089a0:	b009883a 	mov	r4,r22
 80089a4:	01400284 	movi	r5,10
 80089a8:	80800005 	stb	r2,0(r16)
 80089ac:	8010b240 	call	8010b24 <__divsi3>
 80089b0:	102d883a 	mov	r22,r2
 80089b4:	00800244 	movi	r2,9
 80089b8:	15bff416 	blt	r2,r22,800898c <___vfprintf_internal_r+0x20a4>
 80089bc:	9811883a 	mov	r8,r19
 80089c0:	b0800c04 	addi	r2,r22,48
 80089c4:	8027883a 	mov	r19,r16
 80089c8:	997fffc4 	addi	r5,r19,-1
 80089cc:	98bfffc5 	stb	r2,-1(r19)
 80089d0:	dc002a17 	ldw	r16,168(sp)
 80089d4:	2f006d2e 	bgeu	r5,fp,8008b8c <___vfprintf_internal_r+0x22a4>
 80089d8:	d9c02384 	addi	r7,sp,142
 80089dc:	3ccfc83a 	sub	r7,r7,r19
 80089e0:	d9002344 	addi	r4,sp,141
 80089e4:	e1cf883a 	add	r7,fp,r7
 80089e8:	00000106 	br	80089f0 <___vfprintf_internal_r+0x2108>
 80089ec:	28800003 	ldbu	r2,0(r5)
 80089f0:	20800005 	stb	r2,0(r4)
 80089f4:	21000044 	addi	r4,r4,1
 80089f8:	29400044 	addi	r5,r5,1
 80089fc:	393ffb1e 	bne	r7,r4,80089ec <___vfprintf_internal_r+0x2104>
 8008a00:	d8802304 	addi	r2,sp,140
 8008a04:	14c5c83a 	sub	r2,r2,r19
 8008a08:	d8c02344 	addi	r3,sp,141
 8008a0c:	1885883a 	add	r2,r3,r2
 8008a10:	003f7006 	br	80087d4 <___vfprintf_internal_r+0x1eec>
 8008a14:	0005883a 	mov	r2,zero
 8008a18:	003f0f06 	br	8008658 <___vfprintf_internal_r+0x1d70>
 8008a1c:	d8c03217 	ldw	r3,200(sp)
 8008a20:	18c00044 	addi	r3,r3,1
 8008a24:	d8c02b15 	stw	r3,172(sp)
 8008a28:	1805883a 	mov	r2,r3
 8008a2c:	183fb20e 	bge	r3,zero,80088f8 <___vfprintf_internal_r+0x2010>
 8008a30:	0005883a 	mov	r2,zero
 8008a34:	003fb006 	br	80088f8 <___vfprintf_internal_r+0x2010>
 8008a38:	d9003617 	ldw	r4,216(sp)
 8008a3c:	000d883a 	mov	r6,zero
 8008a40:	000f883a 	mov	r7,zero
 8008a44:	980b883a 	mov	r5,r19
 8008a48:	d8c03c15 	stw	r3,240(sp)
 8008a4c:	da003d15 	stw	r8,244(sp)
 8008a50:	8011f540 	call	8011f54 <__eqdf2>
 8008a54:	d8c03c17 	ldw	r3,240(sp)
 8008a58:	da003d17 	ldw	r8,244(sp)
 8008a5c:	103f9826 	beq	r2,zero,80088c0 <___vfprintf_internal_r+0x1fd8>
 8008a60:	00800044 	movi	r2,1
 8008a64:	10c7c83a 	sub	r3,r2,r3
 8008a68:	d8c02615 	stw	r3,152(sp)
 8008a6c:	003f9506 	br	80088c4 <___vfprintf_internal_r+0x1fdc>
 8008a70:	d9002a17 	ldw	r4,168(sp)
 8008a74:	d8c03217 	ldw	r3,200(sp)
 8008a78:	20800044 	addi	r2,r4,1
 8008a7c:	1885883a 	add	r2,r3,r2
 8008a80:	d8802b15 	stw	r2,172(sp)
 8008a84:	103dbf0e 	bge	r2,zero,8008184 <___vfprintf_internal_r+0x189c>
 8008a88:	0005883a 	mov	r2,zero
 8008a8c:	003dbd06 	br	8008184 <___vfprintf_internal_r+0x189c>
 8008a90:	2000201e 	bne	r4,zero,8008b14 <___vfprintf_internal_r+0x222c>
 8008a94:	9480004c 	andi	r18,r18,1
 8008a98:	90001e1e 	bne	r18,zero,8008b14 <___vfprintf_internal_r+0x222c>
 8008a9c:	00800044 	movi	r2,1
 8008aa0:	d8802b15 	stw	r2,172(sp)
 8008aa4:	003db706 	br	8008184 <___vfprintf_internal_r+0x189c>
 8008aa8:	00800b44 	movi	r2,45
 8008aac:	05adc83a 	sub	r22,zero,r22
 8008ab0:	d8802305 	stb	r2,140(sp)
 8008ab4:	003f3f06 	br	80087b4 <___vfprintf_internal_r+0x1ecc>
 8008ab8:	0005883a 	mov	r2,zero
 8008abc:	003f5206 	br	8008808 <___vfprintf_internal_r+0x1f20>
 8008ac0:	90a4703a 	and	r18,r18,r2
 8008ac4:	903f4e26 	beq	r18,zero,8008800 <___vfprintf_internal_r+0x1f18>
 8008ac8:	003f4a06 	br	80087f4 <___vfprintf_internal_r+0x1f0c>
 8008acc:	00800084 	movi	r2,2
 8008ad0:	10c5c83a 	sub	r2,r2,r3
 8008ad4:	003f8406 	br	80088e8 <___vfprintf_internal_r+0x2000>
 8008ad8:	d9402e17 	ldw	r5,184(sp)
 8008adc:	d9002e17 	ldw	r4,184(sp)
 8008ae0:	ac400043 	ldbu	r17,1(r21)
 8008ae4:	29400017 	ldw	r5,0(r5)
 8008ae8:	20800104 	addi	r2,r4,4
 8008aec:	d8802e15 	stw	r2,184(sp)
 8008af0:	d9402a15 	stw	r5,168(sp)
 8008af4:	182b883a 	mov	r21,r3
 8008af8:	283e7b0e 	bge	r5,zero,80084e8 <___vfprintf_internal_r+0x1c00>
 8008afc:	8c403fcc 	andi	r17,r17,255
 8008b00:	017fffc4 	movi	r5,-1
 8008b04:	8c40201c 	xori	r17,r17,128
 8008b08:	d9402a15 	stw	r5,168(sp)
 8008b0c:	8c7fe004 	addi	r17,r17,-128
 8008b10:	0037d706 	br	8006a70 <___vfprintf_internal_r+0x188>
 8008b14:	d8c02a17 	ldw	r3,168(sp)
 8008b18:	18c00084 	addi	r3,r3,2
 8008b1c:	d8c02b15 	stw	r3,172(sp)
 8008b20:	1805883a 	mov	r2,r3
 8008b24:	183d970e 	bge	r3,zero,8008184 <___vfprintf_internal_r+0x189c>
 8008b28:	003fd706 	br	8008a88 <___vfprintf_internal_r+0x21a0>
 8008b2c:	0005883a 	mov	r2,zero
 8008b30:	003f8f06 	br	8008970 <___vfprintf_internal_r+0x2088>
 8008b34:	9080004c 	andi	r2,r18,1
 8008b38:	103f821e 	bne	r2,zero,8008944 <___vfprintf_internal_r+0x205c>
 8008b3c:	d8802117 	ldw	r2,132(sp)
 8008b40:	1405c83a 	sub	r2,r2,r16
 8008b44:	d8803315 	stw	r2,204(sp)
 8008b48:	b47ef426 	beq	r22,r17,800871c <___vfprintf_internal_r+0x1e34>
 8008b4c:	dd802617 	ldw	r22,152(sp)
 8008b50:	003f1206 	br	800879c <___vfprintf_internal_r+0x1eb4>
 8008b54:	d8c02b03 	ldbu	r3,172(sp)
 8008b58:	d8c02785 	stb	r3,158(sp)
 8008b5c:	0038df06 	br	8006edc <___vfprintf_internal_r+0x5f4>
 8008b60:	d8c02b03 	ldbu	r3,172(sp)
 8008b64:	d8c02785 	stb	r3,158(sp)
 8008b68:	0038aa06 	br	8006e14 <___vfprintf_internal_r+0x52c>
 8008b6c:	d8c02b03 	ldbu	r3,172(sp)
 8008b70:	d8c02785 	stb	r3,158(sp)
 8008b74:	003a4306 	br	8007484 <___vfprintf_internal_r+0xb9c>
 8008b78:	d8c02b03 	ldbu	r3,172(sp)
 8008b7c:	d8c02785 	stb	r3,158(sp)
 8008b80:	003af506 	br	8007758 <___vfprintf_internal_r+0xe70>
 8008b84:	0005883a 	mov	r2,zero
 8008b88:	003d7b06 	br	8008178 <___vfprintf_internal_r+0x1890>
 8008b8c:	d8802344 	addi	r2,sp,141
 8008b90:	003f1006 	br	80087d4 <___vfprintf_internal_r+0x1eec>
 8008b94:	d8c02b03 	ldbu	r3,172(sp)
 8008b98:	d8c02785 	stb	r3,158(sp)
 8008b9c:	0038fd06 	br	8006f94 <___vfprintf_internal_r+0x6ac>
 8008ba0:	d8c02b03 	ldbu	r3,172(sp)
 8008ba4:	d8c02785 	stb	r3,158(sp)
 8008ba8:	003a9706 	br	8007608 <___vfprintf_internal_r+0xd20>
 8008bac:	d8c02b03 	ldbu	r3,172(sp)
 8008bb0:	d8c02785 	stb	r3,158(sp)
 8008bb4:	003a1806 	br	8007418 <___vfprintf_internal_r+0xb30>
 8008bb8:	d8c02b03 	ldbu	r3,172(sp)
 8008bbc:	d8c02785 	stb	r3,158(sp)
 8008bc0:	003abe06 	br	80076bc <___vfprintf_internal_r+0xdd4>

08008bc4 <__vfprintf_internal>:
 8008bc4:	00820074 	movhi	r2,2049
 8008bc8:	109e2204 	addi	r2,r2,30856
 8008bcc:	300f883a 	mov	r7,r6
 8008bd0:	280d883a 	mov	r6,r5
 8008bd4:	200b883a 	mov	r5,r4
 8008bd8:	11000017 	ldw	r4,0(r2)
 8008bdc:	80068e81 	jmpi	80068e8 <___vfprintf_internal_r>

08008be0 <__sbprintf>:
 8008be0:	2880030b 	ldhu	r2,12(r5)
 8008be4:	2ac01917 	ldw	r11,100(r5)
 8008be8:	2a80038b 	ldhu	r10,14(r5)
 8008bec:	2a400717 	ldw	r9,28(r5)
 8008bf0:	2a000917 	ldw	r8,36(r5)
 8008bf4:	defee204 	addi	sp,sp,-1144
 8008bf8:	00c10004 	movi	r3,1024
 8008bfc:	dc011a15 	stw	r16,1128(sp)
 8008c00:	10bfff4c 	andi	r2,r2,65533
 8008c04:	2821883a 	mov	r16,r5
 8008c08:	d8cb883a 	add	r5,sp,r3
 8008c0c:	dc811c15 	stw	r18,1136(sp)
 8008c10:	dc411b15 	stw	r17,1132(sp)
 8008c14:	dfc11d15 	stw	ra,1140(sp)
 8008c18:	2025883a 	mov	r18,r4
 8008c1c:	d881030d 	sth	r2,1036(sp)
 8008c20:	dac11915 	stw	r11,1124(sp)
 8008c24:	da81038d 	sth	r10,1038(sp)
 8008c28:	da410715 	stw	r9,1052(sp)
 8008c2c:	da010915 	stw	r8,1060(sp)
 8008c30:	dec10015 	stw	sp,1024(sp)
 8008c34:	dec10415 	stw	sp,1040(sp)
 8008c38:	d8c10215 	stw	r3,1032(sp)
 8008c3c:	d8c10515 	stw	r3,1044(sp)
 8008c40:	d8010615 	stw	zero,1048(sp)
 8008c44:	80068e80 	call	80068e8 <___vfprintf_internal_r>
 8008c48:	1023883a 	mov	r17,r2
 8008c4c:	10000416 	blt	r2,zero,8008c60 <__sbprintf+0x80>
 8008c50:	d9410004 	addi	r5,sp,1024
 8008c54:	9009883a 	mov	r4,r18
 8008c58:	800a8bc0 	call	800a8bc <_fflush_r>
 8008c5c:	10000d1e 	bne	r2,zero,8008c94 <__sbprintf+0xb4>
 8008c60:	d881030b 	ldhu	r2,1036(sp)
 8008c64:	1080100c 	andi	r2,r2,64
 8008c68:	10000326 	beq	r2,zero,8008c78 <__sbprintf+0x98>
 8008c6c:	8080030b 	ldhu	r2,12(r16)
 8008c70:	10801014 	ori	r2,r2,64
 8008c74:	8080030d 	sth	r2,12(r16)
 8008c78:	8805883a 	mov	r2,r17
 8008c7c:	dfc11d17 	ldw	ra,1140(sp)
 8008c80:	dc811c17 	ldw	r18,1136(sp)
 8008c84:	dc411b17 	ldw	r17,1132(sp)
 8008c88:	dc011a17 	ldw	r16,1128(sp)
 8008c8c:	dec11e04 	addi	sp,sp,1144
 8008c90:	f800283a 	ret
 8008c94:	047fffc4 	movi	r17,-1
 8008c98:	003ff106 	br	8008c60 <__sbprintf+0x80>

08008c9c <__swsetup_r>:
 8008c9c:	00820074 	movhi	r2,2049
 8008ca0:	defffd04 	addi	sp,sp,-12
 8008ca4:	109e2204 	addi	r2,r2,30856
 8008ca8:	dc400115 	stw	r17,4(sp)
 8008cac:	2023883a 	mov	r17,r4
 8008cb0:	11000017 	ldw	r4,0(r2)
 8008cb4:	dc000015 	stw	r16,0(sp)
 8008cb8:	dfc00215 	stw	ra,8(sp)
 8008cbc:	2821883a 	mov	r16,r5
 8008cc0:	20000226 	beq	r4,zero,8008ccc <__swsetup_r+0x30>
 8008cc4:	20800e17 	ldw	r2,56(r4)
 8008cc8:	10003126 	beq	r2,zero,8008d90 <__swsetup_r+0xf4>
 8008ccc:	8080030b 	ldhu	r2,12(r16)
 8008cd0:	10c0020c 	andi	r3,r2,8
 8008cd4:	1009883a 	mov	r4,r2
 8008cd8:	18000f26 	beq	r3,zero,8008d18 <__swsetup_r+0x7c>
 8008cdc:	80c00417 	ldw	r3,16(r16)
 8008ce0:	18001526 	beq	r3,zero,8008d38 <__swsetup_r+0x9c>
 8008ce4:	1100004c 	andi	r4,r2,1
 8008ce8:	20001c1e 	bne	r4,zero,8008d5c <__swsetup_r+0xc0>
 8008cec:	1080008c 	andi	r2,r2,2
 8008cf0:	1000291e 	bne	r2,zero,8008d98 <__swsetup_r+0xfc>
 8008cf4:	80800517 	ldw	r2,20(r16)
 8008cf8:	80800215 	stw	r2,8(r16)
 8008cfc:	18001c26 	beq	r3,zero,8008d70 <__swsetup_r+0xd4>
 8008d00:	0005883a 	mov	r2,zero
 8008d04:	dfc00217 	ldw	ra,8(sp)
 8008d08:	dc400117 	ldw	r17,4(sp)
 8008d0c:	dc000017 	ldw	r16,0(sp)
 8008d10:	dec00304 	addi	sp,sp,12
 8008d14:	f800283a 	ret
 8008d18:	2080040c 	andi	r2,r4,16
 8008d1c:	10002e26 	beq	r2,zero,8008dd8 <__swsetup_r+0x13c>
 8008d20:	2080010c 	andi	r2,r4,4
 8008d24:	10001e1e 	bne	r2,zero,8008da0 <__swsetup_r+0x104>
 8008d28:	80c00417 	ldw	r3,16(r16)
 8008d2c:	20800214 	ori	r2,r4,8
 8008d30:	8080030d 	sth	r2,12(r16)
 8008d34:	183feb1e 	bne	r3,zero,8008ce4 <__swsetup_r+0x48>
 8008d38:	1100a00c 	andi	r4,r2,640
 8008d3c:	01408004 	movi	r5,512
 8008d40:	217fe826 	beq	r4,r5,8008ce4 <__swsetup_r+0x48>
 8008d44:	800b883a 	mov	r5,r16
 8008d48:	8809883a 	mov	r4,r17
 8008d4c:	800b8b40 	call	800b8b4 <__smakebuf_r>
 8008d50:	8080030b 	ldhu	r2,12(r16)
 8008d54:	80c00417 	ldw	r3,16(r16)
 8008d58:	003fe206 	br	8008ce4 <__swsetup_r+0x48>
 8008d5c:	80800517 	ldw	r2,20(r16)
 8008d60:	80000215 	stw	zero,8(r16)
 8008d64:	0085c83a 	sub	r2,zero,r2
 8008d68:	80800615 	stw	r2,24(r16)
 8008d6c:	183fe41e 	bne	r3,zero,8008d00 <__swsetup_r+0x64>
 8008d70:	80c0030b 	ldhu	r3,12(r16)
 8008d74:	0005883a 	mov	r2,zero
 8008d78:	1900200c 	andi	r4,r3,128
 8008d7c:	203fe126 	beq	r4,zero,8008d04 <__swsetup_r+0x68>
 8008d80:	18c01014 	ori	r3,r3,64
 8008d84:	80c0030d 	sth	r3,12(r16)
 8008d88:	00bfffc4 	movi	r2,-1
 8008d8c:	003fdd06 	br	8008d04 <__swsetup_r+0x68>
 8008d90:	800aca80 	call	800aca8 <__sinit>
 8008d94:	003fcd06 	br	8008ccc <__swsetup_r+0x30>
 8008d98:	0005883a 	mov	r2,zero
 8008d9c:	003fd606 	br	8008cf8 <__swsetup_r+0x5c>
 8008da0:	81400c17 	ldw	r5,48(r16)
 8008da4:	28000626 	beq	r5,zero,8008dc0 <__swsetup_r+0x124>
 8008da8:	80801004 	addi	r2,r16,64
 8008dac:	28800326 	beq	r5,r2,8008dbc <__swsetup_r+0x120>
 8008db0:	8809883a 	mov	r4,r17
 8008db4:	800ae1c0 	call	800ae1c <_free_r>
 8008db8:	8100030b 	ldhu	r4,12(r16)
 8008dbc:	80000c15 	stw	zero,48(r16)
 8008dc0:	80c00417 	ldw	r3,16(r16)
 8008dc4:	00bff6c4 	movi	r2,-37
 8008dc8:	1108703a 	and	r4,r2,r4
 8008dcc:	80000115 	stw	zero,4(r16)
 8008dd0:	80c00015 	stw	r3,0(r16)
 8008dd4:	003fd506 	br	8008d2c <__swsetup_r+0x90>
 8008dd8:	00800244 	movi	r2,9
 8008ddc:	88800015 	stw	r2,0(r17)
 8008de0:	20801014 	ori	r2,r4,64
 8008de4:	8080030d 	sth	r2,12(r16)
 8008de8:	00bfffc4 	movi	r2,-1
 8008dec:	003fc506 	br	8008d04 <__swsetup_r+0x68>

08008df0 <quorem>:
 8008df0:	defff204 	addi	sp,sp,-56
 8008df4:	ddc00b15 	stw	r23,44(sp)
 8008df8:	20800417 	ldw	r2,16(r4)
 8008dfc:	2dc00417 	ldw	r23,16(r5)
 8008e00:	dfc00d15 	stw	ra,52(sp)
 8008e04:	df000c15 	stw	fp,48(sp)
 8008e08:	dd800a15 	stw	r22,40(sp)
 8008e0c:	dd400915 	stw	r21,36(sp)
 8008e10:	dd000815 	stw	r20,32(sp)
 8008e14:	dcc00715 	stw	r19,28(sp)
 8008e18:	dc800615 	stw	r18,24(sp)
 8008e1c:	dc400515 	stw	r17,20(sp)
 8008e20:	dc000415 	stw	r16,16(sp)
 8008e24:	15c07a16 	blt	r2,r23,8009010 <quorem+0x220>
 8008e28:	bdffffc4 	addi	r23,r23,-1
 8008e2c:	bde9883a 	add	r20,r23,r23
 8008e30:	28c00504 	addi	r3,r5,20
 8008e34:	a529883a 	add	r20,r20,r20
 8008e38:	1d39883a 	add	fp,r3,r20
 8008e3c:	24c00504 	addi	r19,r4,20
 8008e40:	d9400215 	stw	r5,8(sp)
 8008e44:	9d29883a 	add	r20,r19,r20
 8008e48:	e1400017 	ldw	r5,0(fp)
 8008e4c:	d9000015 	stw	r4,0(sp)
 8008e50:	a1000017 	ldw	r4,0(r20)
 8008e54:	29400044 	addi	r5,r5,1
 8008e58:	d8c00115 	stw	r3,4(sp)
 8008e5c:	dd000315 	stw	r20,12(sp)
 8008e60:	8010c1c0 	call	8010c1c <__udivsi3>
 8008e64:	1025883a 	mov	r18,r2
 8008e68:	10003026 	beq	r2,zero,8008f2c <quorem+0x13c>
 8008e6c:	dc400117 	ldw	r17,4(sp)
 8008e70:	9829883a 	mov	r20,r19
 8008e74:	002d883a 	mov	r22,zero
 8008e78:	0021883a 	mov	r16,zero
 8008e7c:	8d400017 	ldw	r21,0(r17)
 8008e80:	900b883a 	mov	r5,r18
 8008e84:	8c400104 	addi	r17,r17,4
 8008e88:	a93fffcc 	andi	r4,r21,65535
 8008e8c:	80057b40 	call	80057b4 <__mulsi3>
 8008e90:	a808d43a 	srli	r4,r21,16
 8008e94:	900b883a 	mov	r5,r18
 8008e98:	15ad883a 	add	r22,r2,r22
 8008e9c:	80057b40 	call	80057b4 <__mulsi3>
 8008ea0:	a1000017 	ldw	r4,0(r20)
 8008ea4:	b00cd43a 	srli	r6,r22,16
 8008ea8:	b0ffffcc 	andi	r3,r22,65535
 8008eac:	217fffcc 	andi	r5,r4,65535
 8008eb0:	2c21883a 	add	r16,r5,r16
 8008eb4:	80c7c83a 	sub	r3,r16,r3
 8008eb8:	2008d43a 	srli	r4,r4,16
 8008ebc:	1185883a 	add	r2,r2,r6
 8008ec0:	1821d43a 	srai	r16,r3,16
 8008ec4:	117fffcc 	andi	r5,r2,65535
 8008ec8:	2149c83a 	sub	r4,r4,r5
 8008ecc:	2421883a 	add	r16,r4,r16
 8008ed0:	8008943a 	slli	r4,r16,16
 8008ed4:	18ffffcc 	andi	r3,r3,65535
 8008ed8:	102cd43a 	srli	r22,r2,16
 8008edc:	20c8b03a 	or	r4,r4,r3
 8008ee0:	a1000015 	stw	r4,0(r20)
 8008ee4:	8021d43a 	srai	r16,r16,16
 8008ee8:	a5000104 	addi	r20,r20,4
 8008eec:	e47fe32e 	bgeu	fp,r17,8008e7c <quorem+0x8c>
 8008ef0:	d8c00317 	ldw	r3,12(sp)
 8008ef4:	18800017 	ldw	r2,0(r3)
 8008ef8:	10000c1e 	bne	r2,zero,8008f2c <quorem+0x13c>
 8008efc:	18bfff04 	addi	r2,r3,-4
 8008f00:	9880082e 	bgeu	r19,r2,8008f24 <quorem+0x134>
 8008f04:	18ffff17 	ldw	r3,-4(r3)
 8008f08:	18000326 	beq	r3,zero,8008f18 <quorem+0x128>
 8008f0c:	00000506 	br	8008f24 <quorem+0x134>
 8008f10:	10c00017 	ldw	r3,0(r2)
 8008f14:	1800031e 	bne	r3,zero,8008f24 <quorem+0x134>
 8008f18:	10bfff04 	addi	r2,r2,-4
 8008f1c:	bdffffc4 	addi	r23,r23,-1
 8008f20:	98bffb36 	bltu	r19,r2,8008f10 <quorem+0x120>
 8008f24:	d8c00017 	ldw	r3,0(sp)
 8008f28:	1dc00415 	stw	r23,16(r3)
 8008f2c:	d9400217 	ldw	r5,8(sp)
 8008f30:	d9000017 	ldw	r4,0(sp)
 8008f34:	800ce400 	call	800ce40 <__mcmp>
 8008f38:	10002816 	blt	r2,zero,8008fdc <quorem+0x1ec>
 8008f3c:	dc400117 	ldw	r17,4(sp)
 8008f40:	94800044 	addi	r18,r18,1
 8008f44:	980d883a 	mov	r6,r19
 8008f48:	0007883a 	mov	r3,zero
 8008f4c:	31000017 	ldw	r4,0(r6)
 8008f50:	89400017 	ldw	r5,0(r17)
 8008f54:	31800104 	addi	r6,r6,4
 8008f58:	20bfffcc 	andi	r2,r4,65535
 8008f5c:	10c7883a 	add	r3,r2,r3
 8008f60:	28bfffcc 	andi	r2,r5,65535
 8008f64:	1885c83a 	sub	r2,r3,r2
 8008f68:	280ad43a 	srli	r5,r5,16
 8008f6c:	2008d43a 	srli	r4,r4,16
 8008f70:	1007d43a 	srai	r3,r2,16
 8008f74:	10bfffcc 	andi	r2,r2,65535
 8008f78:	2149c83a 	sub	r4,r4,r5
 8008f7c:	20c9883a 	add	r4,r4,r3
 8008f80:	200a943a 	slli	r5,r4,16
 8008f84:	8c400104 	addi	r17,r17,4
 8008f88:	2007d43a 	srai	r3,r4,16
 8008f8c:	2884b03a 	or	r2,r5,r2
 8008f90:	30bfff15 	stw	r2,-4(r6)
 8008f94:	e47fed2e 	bgeu	fp,r17,8008f4c <quorem+0x15c>
 8008f98:	bdc5883a 	add	r2,r23,r23
 8008f9c:	1085883a 	add	r2,r2,r2
 8008fa0:	9887883a 	add	r3,r19,r2
 8008fa4:	18800017 	ldw	r2,0(r3)
 8008fa8:	10000c1e 	bne	r2,zero,8008fdc <quorem+0x1ec>
 8008fac:	18bfff04 	addi	r2,r3,-4
 8008fb0:	9880082e 	bgeu	r19,r2,8008fd4 <quorem+0x1e4>
 8008fb4:	18ffff17 	ldw	r3,-4(r3)
 8008fb8:	18000326 	beq	r3,zero,8008fc8 <quorem+0x1d8>
 8008fbc:	00000506 	br	8008fd4 <quorem+0x1e4>
 8008fc0:	10c00017 	ldw	r3,0(r2)
 8008fc4:	1800031e 	bne	r3,zero,8008fd4 <quorem+0x1e4>
 8008fc8:	10bfff04 	addi	r2,r2,-4
 8008fcc:	bdffffc4 	addi	r23,r23,-1
 8008fd0:	98bffb36 	bltu	r19,r2,8008fc0 <quorem+0x1d0>
 8008fd4:	d8c00017 	ldw	r3,0(sp)
 8008fd8:	1dc00415 	stw	r23,16(r3)
 8008fdc:	9005883a 	mov	r2,r18
 8008fe0:	dfc00d17 	ldw	ra,52(sp)
 8008fe4:	df000c17 	ldw	fp,48(sp)
 8008fe8:	ddc00b17 	ldw	r23,44(sp)
 8008fec:	dd800a17 	ldw	r22,40(sp)
 8008ff0:	dd400917 	ldw	r21,36(sp)
 8008ff4:	dd000817 	ldw	r20,32(sp)
 8008ff8:	dcc00717 	ldw	r19,28(sp)
 8008ffc:	dc800617 	ldw	r18,24(sp)
 8009000:	dc400517 	ldw	r17,20(sp)
 8009004:	dc000417 	ldw	r16,16(sp)
 8009008:	dec00e04 	addi	sp,sp,56
 800900c:	f800283a 	ret
 8009010:	0005883a 	mov	r2,zero
 8009014:	003ff206 	br	8008fe0 <quorem+0x1f0>

08009018 <_dtoa_r>:
 8009018:	20801017 	ldw	r2,64(r4)
 800901c:	deffde04 	addi	sp,sp,-136
 8009020:	df002015 	stw	fp,128(sp)
 8009024:	dcc01b15 	stw	r19,108(sp)
 8009028:	dc801a15 	stw	r18,104(sp)
 800902c:	dc401915 	stw	r17,100(sp)
 8009030:	dc001815 	stw	r16,96(sp)
 8009034:	dfc02115 	stw	ra,132(sp)
 8009038:	ddc01f15 	stw	r23,124(sp)
 800903c:	dd801e15 	stw	r22,120(sp)
 8009040:	dd401d15 	stw	r21,116(sp)
 8009044:	dd001c15 	stw	r20,112(sp)
 8009048:	d9c00315 	stw	r7,12(sp)
 800904c:	2039883a 	mov	fp,r4
 8009050:	3023883a 	mov	r17,r6
 8009054:	2825883a 	mov	r18,r5
 8009058:	dc002417 	ldw	r16,144(sp)
 800905c:	3027883a 	mov	r19,r6
 8009060:	10000826 	beq	r2,zero,8009084 <_dtoa_r+0x6c>
 8009064:	21801117 	ldw	r6,68(r4)
 8009068:	00c00044 	movi	r3,1
 800906c:	100b883a 	mov	r5,r2
 8009070:	1986983a 	sll	r3,r3,r6
 8009074:	11800115 	stw	r6,4(r2)
 8009078:	10c00215 	stw	r3,8(r2)
 800907c:	800c5640 	call	800c564 <_Bfree>
 8009080:	e0001015 	stw	zero,64(fp)
 8009084:	88002e16 	blt	r17,zero,8009140 <_dtoa_r+0x128>
 8009088:	80000015 	stw	zero,0(r16)
 800908c:	889ffc2c 	andhi	r2,r17,32752
 8009090:	00dffc34 	movhi	r3,32752
 8009094:	10c01c26 	beq	r2,r3,8009108 <_dtoa_r+0xf0>
 8009098:	000d883a 	mov	r6,zero
 800909c:	000f883a 	mov	r7,zero
 80090a0:	9009883a 	mov	r4,r18
 80090a4:	980b883a 	mov	r5,r19
 80090a8:	8011f540 	call	8011f54 <__eqdf2>
 80090ac:	10002b1e 	bne	r2,zero,800915c <_dtoa_r+0x144>
 80090b0:	d9c02317 	ldw	r7,140(sp)
 80090b4:	00800044 	movi	r2,1
 80090b8:	38800015 	stw	r2,0(r7)
 80090bc:	d8802517 	ldw	r2,148(sp)
 80090c0:	10019e26 	beq	r2,zero,800973c <_dtoa_r+0x724>
 80090c4:	d8c02517 	ldw	r3,148(sp)
 80090c8:	00820074 	movhi	r2,2049
 80090cc:	1096f444 	addi	r2,r2,23505
 80090d0:	18800015 	stw	r2,0(r3)
 80090d4:	10bfffc4 	addi	r2,r2,-1
 80090d8:	dfc02117 	ldw	ra,132(sp)
 80090dc:	df002017 	ldw	fp,128(sp)
 80090e0:	ddc01f17 	ldw	r23,124(sp)
 80090e4:	dd801e17 	ldw	r22,120(sp)
 80090e8:	dd401d17 	ldw	r21,116(sp)
 80090ec:	dd001c17 	ldw	r20,112(sp)
 80090f0:	dcc01b17 	ldw	r19,108(sp)
 80090f4:	dc801a17 	ldw	r18,104(sp)
 80090f8:	dc401917 	ldw	r17,100(sp)
 80090fc:	dc001817 	ldw	r16,96(sp)
 8009100:	dec02204 	addi	sp,sp,136
 8009104:	f800283a 	ret
 8009108:	d8c02317 	ldw	r3,140(sp)
 800910c:	0089c3c4 	movi	r2,9999
 8009110:	18800015 	stw	r2,0(r3)
 8009114:	90017726 	beq	r18,zero,80096f4 <_dtoa_r+0x6dc>
 8009118:	00820074 	movhi	r2,2049
 800911c:	10970004 	addi	r2,r2,23552
 8009120:	d9002517 	ldw	r4,148(sp)
 8009124:	203fec26 	beq	r4,zero,80090d8 <_dtoa_r+0xc0>
 8009128:	10c000c7 	ldb	r3,3(r2)
 800912c:	1801781e 	bne	r3,zero,8009710 <_dtoa_r+0x6f8>
 8009130:	10c000c4 	addi	r3,r2,3
 8009134:	d9802517 	ldw	r6,148(sp)
 8009138:	30c00015 	stw	r3,0(r6)
 800913c:	003fe606 	br	80090d8 <_dtoa_r+0xc0>
 8009140:	04e00034 	movhi	r19,32768
 8009144:	9cffffc4 	addi	r19,r19,-1
 8009148:	00800044 	movi	r2,1
 800914c:	8ce6703a 	and	r19,r17,r19
 8009150:	80800015 	stw	r2,0(r16)
 8009154:	9823883a 	mov	r17,r19
 8009158:	003fcc06 	br	800908c <_dtoa_r+0x74>
 800915c:	d8800204 	addi	r2,sp,8
 8009160:	d8800015 	stw	r2,0(sp)
 8009164:	d9c00104 	addi	r7,sp,4
 8009168:	900b883a 	mov	r5,r18
 800916c:	980d883a 	mov	r6,r19
 8009170:	e009883a 	mov	r4,fp
 8009174:	8820d53a 	srli	r16,r17,20
 8009178:	800d20c0 	call	800d20c <__d2b>
 800917c:	d8800915 	stw	r2,36(sp)
 8009180:	8001651e 	bne	r16,zero,8009718 <_dtoa_r+0x700>
 8009184:	dd800217 	ldw	r22,8(sp)
 8009188:	dc000117 	ldw	r16,4(sp)
 800918c:	00800804 	movi	r2,32
 8009190:	b421883a 	add	r16,r22,r16
 8009194:	80c10c84 	addi	r3,r16,1074
 8009198:	10c2d10e 	bge	r2,r3,8009ce0 <_dtoa_r+0xcc8>
 800919c:	00801004 	movi	r2,64
 80091a0:	81010484 	addi	r4,r16,1042
 80091a4:	10c7c83a 	sub	r3,r2,r3
 80091a8:	9108d83a 	srl	r4,r18,r4
 80091ac:	88e2983a 	sll	r17,r17,r3
 80091b0:	2448b03a 	or	r4,r4,r17
 80091b4:	8012b280 	call	8012b28 <__floatunsidf>
 80091b8:	017f8434 	movhi	r5,65040
 80091bc:	01800044 	movi	r6,1
 80091c0:	1009883a 	mov	r4,r2
 80091c4:	194b883a 	add	r5,r3,r5
 80091c8:	843fffc4 	addi	r16,r16,-1
 80091cc:	d9801115 	stw	r6,68(sp)
 80091d0:	000d883a 	mov	r6,zero
 80091d4:	01cffe34 	movhi	r7,16376
 80091d8:	80120d00 	call	80120d0 <__subdf3>
 80091dc:	0198dbf4 	movhi	r6,25455
 80091e0:	01cff4f4 	movhi	r7,16339
 80091e4:	3190d844 	addi	r6,r6,17249
 80091e8:	39e1e9c4 	addi	r7,r7,-30809
 80091ec:	1009883a 	mov	r4,r2
 80091f0:	180b883a 	mov	r5,r3
 80091f4:	80058b80 	call	80058b8 <__muldf3>
 80091f8:	01a2d874 	movhi	r6,35681
 80091fc:	01cff1f4 	movhi	r7,16327
 8009200:	31b22cc4 	addi	r6,r6,-14157
 8009204:	39e28a04 	addi	r7,r7,-30168
 8009208:	180b883a 	mov	r5,r3
 800920c:	1009883a 	mov	r4,r2
 8009210:	8010cd80 	call	8010cd8 <__adddf3>
 8009214:	8009883a 	mov	r4,r16
 8009218:	1029883a 	mov	r20,r2
 800921c:	1823883a 	mov	r17,r3
 8009220:	8012a4c0 	call	8012a4c <__floatsidf>
 8009224:	019427f4 	movhi	r6,20639
 8009228:	01cff4f4 	movhi	r7,16339
 800922c:	319e7ec4 	addi	r6,r6,31227
 8009230:	39d104c4 	addi	r7,r7,17427
 8009234:	1009883a 	mov	r4,r2
 8009238:	180b883a 	mov	r5,r3
 800923c:	80058b80 	call	80058b8 <__muldf3>
 8009240:	100d883a 	mov	r6,r2
 8009244:	180f883a 	mov	r7,r3
 8009248:	a009883a 	mov	r4,r20
 800924c:	880b883a 	mov	r5,r17
 8009250:	8010cd80 	call	8010cd8 <__adddf3>
 8009254:	1009883a 	mov	r4,r2
 8009258:	180b883a 	mov	r5,r3
 800925c:	1029883a 	mov	r20,r2
 8009260:	1823883a 	mov	r17,r3
 8009264:	80129cc0 	call	80129cc <__fixdfsi>
 8009268:	000d883a 	mov	r6,zero
 800926c:	000f883a 	mov	r7,zero
 8009270:	a009883a 	mov	r4,r20
 8009274:	880b883a 	mov	r5,r17
 8009278:	d8800515 	stw	r2,20(sp)
 800927c:	8011fdc0 	call	8011fdc <__ledf2>
 8009280:	10028716 	blt	r2,zero,8009ca0 <_dtoa_r+0xc88>
 8009284:	d8c00517 	ldw	r3,20(sp)
 8009288:	00800584 	movi	r2,22
 800928c:	10c27536 	bltu	r2,r3,8009c64 <_dtoa_r+0xc4c>
 8009290:	180490fa 	slli	r2,r3,3
 8009294:	00c20074 	movhi	r3,2049
 8009298:	18d71b04 	addi	r3,r3,23660
 800929c:	1885883a 	add	r2,r3,r2
 80092a0:	11000017 	ldw	r4,0(r2)
 80092a4:	11400117 	ldw	r5,4(r2)
 80092a8:	900d883a 	mov	r6,r18
 80092ac:	980f883a 	mov	r7,r19
 80092b0:	80057dc0 	call	80057dc <__gedf2>
 80092b4:	00828d0e 	bge	zero,r2,8009cec <_dtoa_r+0xcd4>
 80092b8:	d9000517 	ldw	r4,20(sp)
 80092bc:	d8000e15 	stw	zero,56(sp)
 80092c0:	213fffc4 	addi	r4,r4,-1
 80092c4:	d9000515 	stw	r4,20(sp)
 80092c8:	b42dc83a 	sub	r22,r22,r16
 80092cc:	b5bfffc4 	addi	r22,r22,-1
 80092d0:	b0026f16 	blt	r22,zero,8009c90 <_dtoa_r+0xc78>
 80092d4:	d8000815 	stw	zero,32(sp)
 80092d8:	d9c00517 	ldw	r7,20(sp)
 80092dc:	38026416 	blt	r7,zero,8009c70 <_dtoa_r+0xc58>
 80092e0:	b1ed883a 	add	r22,r22,r7
 80092e4:	d9c00d15 	stw	r7,52(sp)
 80092e8:	d8000a15 	stw	zero,40(sp)
 80092ec:	d9800317 	ldw	r6,12(sp)
 80092f0:	00800244 	movi	r2,9
 80092f4:	11811436 	bltu	r2,r6,8009748 <_dtoa_r+0x730>
 80092f8:	00800144 	movi	r2,5
 80092fc:	1184e10e 	bge	r2,r6,800a684 <_dtoa_r+0x166c>
 8009300:	31bfff04 	addi	r6,r6,-4
 8009304:	d9800315 	stw	r6,12(sp)
 8009308:	0023883a 	mov	r17,zero
 800930c:	d9800317 	ldw	r6,12(sp)
 8009310:	008000c4 	movi	r2,3
 8009314:	30836726 	beq	r6,r2,800a0b4 <_dtoa_r+0x109c>
 8009318:	1183410e 	bge	r2,r6,800a020 <_dtoa_r+0x1008>
 800931c:	d9c00317 	ldw	r7,12(sp)
 8009320:	00800104 	movi	r2,4
 8009324:	38827c26 	beq	r7,r2,8009d18 <_dtoa_r+0xd00>
 8009328:	00800144 	movi	r2,5
 800932c:	3884c41e 	bne	r7,r2,800a640 <_dtoa_r+0x1628>
 8009330:	00800044 	movi	r2,1
 8009334:	d8800b15 	stw	r2,44(sp)
 8009338:	d8c00517 	ldw	r3,20(sp)
 800933c:	d9002217 	ldw	r4,136(sp)
 8009340:	1907883a 	add	r3,r3,r4
 8009344:	19800044 	addi	r6,r3,1
 8009348:	d8c00c15 	stw	r3,48(sp)
 800934c:	d9800615 	stw	r6,24(sp)
 8009350:	0183a40e 	bge	zero,r6,800a1e4 <_dtoa_r+0x11cc>
 8009354:	d9800617 	ldw	r6,24(sp)
 8009358:	3021883a 	mov	r16,r6
 800935c:	e0001115 	stw	zero,68(fp)
 8009360:	008005c4 	movi	r2,23
 8009364:	1184c92e 	bgeu	r2,r6,800a68c <_dtoa_r+0x1674>
 8009368:	00c00044 	movi	r3,1
 800936c:	00800104 	movi	r2,4
 8009370:	1085883a 	add	r2,r2,r2
 8009374:	11000504 	addi	r4,r2,20
 8009378:	180b883a 	mov	r5,r3
 800937c:	18c00044 	addi	r3,r3,1
 8009380:	313ffb2e 	bgeu	r6,r4,8009370 <_dtoa_r+0x358>
 8009384:	e1401115 	stw	r5,68(fp)
 8009388:	e009883a 	mov	r4,fp
 800938c:	800c4bc0 	call	800c4bc <_Balloc>
 8009390:	d8800715 	stw	r2,28(sp)
 8009394:	e0801015 	stw	r2,64(fp)
 8009398:	00800384 	movi	r2,14
 800939c:	1400f736 	bltu	r2,r16,800977c <_dtoa_r+0x764>
 80093a0:	8800f626 	beq	r17,zero,800977c <_dtoa_r+0x764>
 80093a4:	d9c00517 	ldw	r7,20(sp)
 80093a8:	01c39a0e 	bge	zero,r7,800a214 <_dtoa_r+0x11fc>
 80093ac:	388003cc 	andi	r2,r7,15
 80093b0:	100490fa 	slli	r2,r2,3
 80093b4:	382bd13a 	srai	r21,r7,4
 80093b8:	00c20074 	movhi	r3,2049
 80093bc:	18d71b04 	addi	r3,r3,23660
 80093c0:	1885883a 	add	r2,r3,r2
 80093c4:	a8c0040c 	andi	r3,r21,16
 80093c8:	12400017 	ldw	r9,0(r2)
 80093cc:	12000117 	ldw	r8,4(r2)
 80093d0:	18037926 	beq	r3,zero,800a1b8 <_dtoa_r+0x11a0>
 80093d4:	00820074 	movhi	r2,2049
 80093d8:	10971104 	addi	r2,r2,23620
 80093dc:	11800817 	ldw	r6,32(r2)
 80093e0:	11c00917 	ldw	r7,36(r2)
 80093e4:	9009883a 	mov	r4,r18
 80093e8:	980b883a 	mov	r5,r19
 80093ec:	da001715 	stw	r8,92(sp)
 80093f0:	da401615 	stw	r9,88(sp)
 80093f4:	80115840 	call	8011584 <__divdf3>
 80093f8:	da001717 	ldw	r8,92(sp)
 80093fc:	da401617 	ldw	r9,88(sp)
 8009400:	ad4003cc 	andi	r21,r21,15
 8009404:	040000c4 	movi	r16,3
 8009408:	1023883a 	mov	r17,r2
 800940c:	1829883a 	mov	r20,r3
 8009410:	a8001126 	beq	r21,zero,8009458 <_dtoa_r+0x440>
 8009414:	05c20074 	movhi	r23,2049
 8009418:	bdd71104 	addi	r23,r23,23620
 800941c:	4805883a 	mov	r2,r9
 8009420:	4007883a 	mov	r3,r8
 8009424:	a980004c 	andi	r6,r21,1
 8009428:	1009883a 	mov	r4,r2
 800942c:	a82bd07a 	srai	r21,r21,1
 8009430:	180b883a 	mov	r5,r3
 8009434:	30000426 	beq	r6,zero,8009448 <_dtoa_r+0x430>
 8009438:	b9800017 	ldw	r6,0(r23)
 800943c:	b9c00117 	ldw	r7,4(r23)
 8009440:	84000044 	addi	r16,r16,1
 8009444:	80058b80 	call	80058b8 <__muldf3>
 8009448:	bdc00204 	addi	r23,r23,8
 800944c:	a83ff51e 	bne	r21,zero,8009424 <_dtoa_r+0x40c>
 8009450:	1013883a 	mov	r9,r2
 8009454:	1811883a 	mov	r8,r3
 8009458:	480d883a 	mov	r6,r9
 800945c:	400f883a 	mov	r7,r8
 8009460:	8809883a 	mov	r4,r17
 8009464:	a00b883a 	mov	r5,r20
 8009468:	80115840 	call	8011584 <__divdf3>
 800946c:	d8800f15 	stw	r2,60(sp)
 8009470:	d8c01015 	stw	r3,64(sp)
 8009474:	d8c00e17 	ldw	r3,56(sp)
 8009478:	18000626 	beq	r3,zero,8009494 <_dtoa_r+0x47c>
 800947c:	d9000f17 	ldw	r4,60(sp)
 8009480:	d9401017 	ldw	r5,64(sp)
 8009484:	000d883a 	mov	r6,zero
 8009488:	01cffc34 	movhi	r7,16368
 800948c:	8011fdc0 	call	8011fdc <__ledf2>
 8009490:	10040b16 	blt	r2,zero,800a4c0 <_dtoa_r+0x14a8>
 8009494:	8009883a 	mov	r4,r16
 8009498:	8012a4c0 	call	8012a4c <__floatsidf>
 800949c:	d9800f17 	ldw	r6,60(sp)
 80094a0:	d9c01017 	ldw	r7,64(sp)
 80094a4:	1009883a 	mov	r4,r2
 80094a8:	180b883a 	mov	r5,r3
 80094ac:	80058b80 	call	80058b8 <__muldf3>
 80094b0:	000d883a 	mov	r6,zero
 80094b4:	01d00734 	movhi	r7,16412
 80094b8:	1009883a 	mov	r4,r2
 80094bc:	180b883a 	mov	r5,r3
 80094c0:	8010cd80 	call	8010cd8 <__adddf3>
 80094c4:	1021883a 	mov	r16,r2
 80094c8:	d8800617 	ldw	r2,24(sp)
 80094cc:	047f3034 	movhi	r17,64704
 80094d0:	1c63883a 	add	r17,r3,r17
 80094d4:	10031826 	beq	r2,zero,800a138 <_dtoa_r+0x1120>
 80094d8:	d8c00517 	ldw	r3,20(sp)
 80094dc:	db000617 	ldw	r12,24(sp)
 80094e0:	d8c01315 	stw	r3,76(sp)
 80094e4:	d9000b17 	ldw	r4,44(sp)
 80094e8:	20038f26 	beq	r4,zero,800a328 <_dtoa_r+0x1310>
 80094ec:	60bfffc4 	addi	r2,r12,-1
 80094f0:	100490fa 	slli	r2,r2,3
 80094f4:	00c20074 	movhi	r3,2049
 80094f8:	18d71b04 	addi	r3,r3,23660
 80094fc:	1885883a 	add	r2,r3,r2
 8009500:	11800017 	ldw	r6,0(r2)
 8009504:	11c00117 	ldw	r7,4(r2)
 8009508:	d8800717 	ldw	r2,28(sp)
 800950c:	0009883a 	mov	r4,zero
 8009510:	014ff834 	movhi	r5,16352
 8009514:	db001615 	stw	r12,88(sp)
 8009518:	15c00044 	addi	r23,r2,1
 800951c:	80115840 	call	8011584 <__divdf3>
 8009520:	800d883a 	mov	r6,r16
 8009524:	880f883a 	mov	r7,r17
 8009528:	1009883a 	mov	r4,r2
 800952c:	180b883a 	mov	r5,r3
 8009530:	80120d00 	call	80120d0 <__subdf3>
 8009534:	d9401017 	ldw	r5,64(sp)
 8009538:	d9000f17 	ldw	r4,60(sp)
 800953c:	102b883a 	mov	r21,r2
 8009540:	d8c01215 	stw	r3,72(sp)
 8009544:	80129cc0 	call	80129cc <__fixdfsi>
 8009548:	1009883a 	mov	r4,r2
 800954c:	1029883a 	mov	r20,r2
 8009550:	8012a4c0 	call	8012a4c <__floatsidf>
 8009554:	d9000f17 	ldw	r4,60(sp)
 8009558:	d9401017 	ldw	r5,64(sp)
 800955c:	100d883a 	mov	r6,r2
 8009560:	180f883a 	mov	r7,r3
 8009564:	80120d00 	call	80120d0 <__subdf3>
 8009568:	1823883a 	mov	r17,r3
 800956c:	d8c00717 	ldw	r3,28(sp)
 8009570:	d9401217 	ldw	r5,72(sp)
 8009574:	a2000c04 	addi	r8,r20,48
 8009578:	1021883a 	mov	r16,r2
 800957c:	1a000005 	stb	r8,0(r3)
 8009580:	800d883a 	mov	r6,r16
 8009584:	880f883a 	mov	r7,r17
 8009588:	a809883a 	mov	r4,r21
 800958c:	4029883a 	mov	r20,r8
 8009590:	80057dc0 	call	80057dc <__gedf2>
 8009594:	00841d16 	blt	zero,r2,800a60c <_dtoa_r+0x15f4>
 8009598:	800d883a 	mov	r6,r16
 800959c:	880f883a 	mov	r7,r17
 80095a0:	0009883a 	mov	r4,zero
 80095a4:	014ffc34 	movhi	r5,16368
 80095a8:	80120d00 	call	80120d0 <__subdf3>
 80095ac:	d9401217 	ldw	r5,72(sp)
 80095b0:	100d883a 	mov	r6,r2
 80095b4:	180f883a 	mov	r7,r3
 80095b8:	a809883a 	mov	r4,r21
 80095bc:	80057dc0 	call	80057dc <__gedf2>
 80095c0:	db001617 	ldw	r12,88(sp)
 80095c4:	00840e16 	blt	zero,r2,800a600 <_dtoa_r+0x15e8>
 80095c8:	00800044 	movi	r2,1
 80095cc:	13006b0e 	bge	r2,r12,800977c <_dtoa_r+0x764>
 80095d0:	d9000717 	ldw	r4,28(sp)
 80095d4:	dd800f15 	stw	r22,60(sp)
 80095d8:	dcc01015 	stw	r19,64(sp)
 80095dc:	2319883a 	add	r12,r4,r12
 80095e0:	dcc01217 	ldw	r19,72(sp)
 80095e4:	602d883a 	mov	r22,r12
 80095e8:	dc801215 	stw	r18,72(sp)
 80095ec:	b825883a 	mov	r18,r23
 80095f0:	00000906 	br	8009618 <_dtoa_r+0x600>
 80095f4:	80120d00 	call	80120d0 <__subdf3>
 80095f8:	a80d883a 	mov	r6,r21
 80095fc:	980f883a 	mov	r7,r19
 8009600:	1009883a 	mov	r4,r2
 8009604:	180b883a 	mov	r5,r3
 8009608:	8011fdc0 	call	8011fdc <__ledf2>
 800960c:	1003e816 	blt	r2,zero,800a5b0 <_dtoa_r+0x1598>
 8009610:	b825883a 	mov	r18,r23
 8009614:	bd83e926 	beq	r23,r22,800a5bc <_dtoa_r+0x15a4>
 8009618:	a809883a 	mov	r4,r21
 800961c:	980b883a 	mov	r5,r19
 8009620:	000d883a 	mov	r6,zero
 8009624:	01d00934 	movhi	r7,16420
 8009628:	80058b80 	call	80058b8 <__muldf3>
 800962c:	000d883a 	mov	r6,zero
 8009630:	01d00934 	movhi	r7,16420
 8009634:	8009883a 	mov	r4,r16
 8009638:	880b883a 	mov	r5,r17
 800963c:	102b883a 	mov	r21,r2
 8009640:	1827883a 	mov	r19,r3
 8009644:	80058b80 	call	80058b8 <__muldf3>
 8009648:	180b883a 	mov	r5,r3
 800964c:	1009883a 	mov	r4,r2
 8009650:	1821883a 	mov	r16,r3
 8009654:	1023883a 	mov	r17,r2
 8009658:	80129cc0 	call	80129cc <__fixdfsi>
 800965c:	1009883a 	mov	r4,r2
 8009660:	1029883a 	mov	r20,r2
 8009664:	8012a4c0 	call	8012a4c <__floatsidf>
 8009668:	8809883a 	mov	r4,r17
 800966c:	800b883a 	mov	r5,r16
 8009670:	100d883a 	mov	r6,r2
 8009674:	180f883a 	mov	r7,r3
 8009678:	80120d00 	call	80120d0 <__subdf3>
 800967c:	a5000c04 	addi	r20,r20,48
 8009680:	a80d883a 	mov	r6,r21
 8009684:	980f883a 	mov	r7,r19
 8009688:	1009883a 	mov	r4,r2
 800968c:	180b883a 	mov	r5,r3
 8009690:	95000005 	stb	r20,0(r18)
 8009694:	1021883a 	mov	r16,r2
 8009698:	1823883a 	mov	r17,r3
 800969c:	8011fdc0 	call	8011fdc <__ledf2>
 80096a0:	bdc00044 	addi	r23,r23,1
 80096a4:	800d883a 	mov	r6,r16
 80096a8:	880f883a 	mov	r7,r17
 80096ac:	0009883a 	mov	r4,zero
 80096b0:	014ffc34 	movhi	r5,16368
 80096b4:	103fcf0e 	bge	r2,zero,80095f4 <_dtoa_r+0x5dc>
 80096b8:	d8c01317 	ldw	r3,76(sp)
 80096bc:	d8c00515 	stw	r3,20(sp)
 80096c0:	d9400917 	ldw	r5,36(sp)
 80096c4:	e009883a 	mov	r4,fp
 80096c8:	800c5640 	call	800c564 <_Bfree>
 80096cc:	d9000517 	ldw	r4,20(sp)
 80096d0:	d9802317 	ldw	r6,140(sp)
 80096d4:	d9c02517 	ldw	r7,148(sp)
 80096d8:	b8000005 	stb	zero,0(r23)
 80096dc:	20800044 	addi	r2,r4,1
 80096e0:	30800015 	stw	r2,0(r6)
 80096e4:	3802aa26 	beq	r7,zero,800a190 <_dtoa_r+0x1178>
 80096e8:	3dc00015 	stw	r23,0(r7)
 80096ec:	d8800717 	ldw	r2,28(sp)
 80096f0:	003e7906 	br	80090d8 <_dtoa_r+0xc0>
 80096f4:	00800434 	movhi	r2,16
 80096f8:	10bfffc4 	addi	r2,r2,-1
 80096fc:	88a2703a 	and	r17,r17,r2
 8009700:	883e851e 	bne	r17,zero,8009118 <_dtoa_r+0x100>
 8009704:	00820074 	movhi	r2,2049
 8009708:	1096fd04 	addi	r2,r2,23540
 800970c:	003e8406 	br	8009120 <_dtoa_r+0x108>
 8009710:	10c00204 	addi	r3,r2,8
 8009714:	003e8706 	br	8009134 <_dtoa_r+0x11c>
 8009718:	01400434 	movhi	r5,16
 800971c:	297fffc4 	addi	r5,r5,-1
 8009720:	994a703a 	and	r5,r19,r5
 8009724:	9009883a 	mov	r4,r18
 8009728:	843f0044 	addi	r16,r16,-1023
 800972c:	294ffc34 	orhi	r5,r5,16368
 8009730:	dd800217 	ldw	r22,8(sp)
 8009734:	d8001115 	stw	zero,68(sp)
 8009738:	003ea506 	br	80091d0 <_dtoa_r+0x1b8>
 800973c:	00820074 	movhi	r2,2049
 8009740:	1096f404 	addi	r2,r2,23504
 8009744:	003e6406 	br	80090d8 <_dtoa_r+0xc0>
 8009748:	e0001115 	stw	zero,68(fp)
 800974c:	000b883a 	mov	r5,zero
 8009750:	e009883a 	mov	r4,fp
 8009754:	800c4bc0 	call	800c4bc <_Balloc>
 8009758:	01bfffc4 	movi	r6,-1
 800975c:	01c00044 	movi	r7,1
 8009760:	d8800715 	stw	r2,28(sp)
 8009764:	d9800c15 	stw	r6,48(sp)
 8009768:	e0801015 	stw	r2,64(fp)
 800976c:	d8000315 	stw	zero,12(sp)
 8009770:	d9c00b15 	stw	r7,44(sp)
 8009774:	d9800615 	stw	r6,24(sp)
 8009778:	d8002215 	stw	zero,136(sp)
 800977c:	d8800117 	ldw	r2,4(sp)
 8009780:	10008916 	blt	r2,zero,80099a8 <_dtoa_r+0x990>
 8009784:	d9000517 	ldw	r4,20(sp)
 8009788:	00c00384 	movi	r3,14
 800978c:	19008616 	blt	r3,r4,80099a8 <_dtoa_r+0x990>
 8009790:	200490fa 	slli	r2,r4,3
 8009794:	00c20074 	movhi	r3,2049
 8009798:	d9802217 	ldw	r6,136(sp)
 800979c:	18d71b04 	addi	r3,r3,23660
 80097a0:	1885883a 	add	r2,r3,r2
 80097a4:	14000017 	ldw	r16,0(r2)
 80097a8:	14400117 	ldw	r17,4(r2)
 80097ac:	30016316 	blt	r6,zero,8009d3c <_dtoa_r+0xd24>
 80097b0:	800d883a 	mov	r6,r16
 80097b4:	880f883a 	mov	r7,r17
 80097b8:	9009883a 	mov	r4,r18
 80097bc:	980b883a 	mov	r5,r19
 80097c0:	80115840 	call	8011584 <__divdf3>
 80097c4:	180b883a 	mov	r5,r3
 80097c8:	1009883a 	mov	r4,r2
 80097cc:	80129cc0 	call	80129cc <__fixdfsi>
 80097d0:	1009883a 	mov	r4,r2
 80097d4:	102b883a 	mov	r21,r2
 80097d8:	8012a4c0 	call	8012a4c <__floatsidf>
 80097dc:	800d883a 	mov	r6,r16
 80097e0:	880f883a 	mov	r7,r17
 80097e4:	1009883a 	mov	r4,r2
 80097e8:	180b883a 	mov	r5,r3
 80097ec:	80058b80 	call	80058b8 <__muldf3>
 80097f0:	100d883a 	mov	r6,r2
 80097f4:	180f883a 	mov	r7,r3
 80097f8:	9009883a 	mov	r4,r18
 80097fc:	980b883a 	mov	r5,r19
 8009800:	80120d00 	call	80120d0 <__subdf3>
 8009804:	d9c00717 	ldw	r7,28(sp)
 8009808:	1009883a 	mov	r4,r2
 800980c:	a8800c04 	addi	r2,r21,48
 8009810:	38800005 	stb	r2,0(r7)
 8009814:	3dc00044 	addi	r23,r7,1
 8009818:	d9c00617 	ldw	r7,24(sp)
 800981c:	01800044 	movi	r6,1
 8009820:	180b883a 	mov	r5,r3
 8009824:	2005883a 	mov	r2,r4
 8009828:	39803826 	beq	r7,r6,800990c <_dtoa_r+0x8f4>
 800982c:	000d883a 	mov	r6,zero
 8009830:	01d00934 	movhi	r7,16420
 8009834:	80058b80 	call	80058b8 <__muldf3>
 8009838:	000d883a 	mov	r6,zero
 800983c:	000f883a 	mov	r7,zero
 8009840:	1009883a 	mov	r4,r2
 8009844:	180b883a 	mov	r5,r3
 8009848:	1025883a 	mov	r18,r2
 800984c:	1827883a 	mov	r19,r3
 8009850:	8011f540 	call	8011f54 <__eqdf2>
 8009854:	103f9a26 	beq	r2,zero,80096c0 <_dtoa_r+0x6a8>
 8009858:	d9c00617 	ldw	r7,24(sp)
 800985c:	d8c00717 	ldw	r3,28(sp)
 8009860:	b829883a 	mov	r20,r23
 8009864:	38bfffc4 	addi	r2,r7,-1
 8009868:	18ad883a 	add	r22,r3,r2
 800986c:	00000a06 	br	8009898 <_dtoa_r+0x880>
 8009870:	80058b80 	call	80058b8 <__muldf3>
 8009874:	000d883a 	mov	r6,zero
 8009878:	000f883a 	mov	r7,zero
 800987c:	1009883a 	mov	r4,r2
 8009880:	180b883a 	mov	r5,r3
 8009884:	1025883a 	mov	r18,r2
 8009888:	1827883a 	mov	r19,r3
 800988c:	b829883a 	mov	r20,r23
 8009890:	8011f540 	call	8011f54 <__eqdf2>
 8009894:	103f8a26 	beq	r2,zero,80096c0 <_dtoa_r+0x6a8>
 8009898:	800d883a 	mov	r6,r16
 800989c:	880f883a 	mov	r7,r17
 80098a0:	9009883a 	mov	r4,r18
 80098a4:	980b883a 	mov	r5,r19
 80098a8:	80115840 	call	8011584 <__divdf3>
 80098ac:	180b883a 	mov	r5,r3
 80098b0:	1009883a 	mov	r4,r2
 80098b4:	80129cc0 	call	80129cc <__fixdfsi>
 80098b8:	1009883a 	mov	r4,r2
 80098bc:	102b883a 	mov	r21,r2
 80098c0:	8012a4c0 	call	8012a4c <__floatsidf>
 80098c4:	800d883a 	mov	r6,r16
 80098c8:	880f883a 	mov	r7,r17
 80098cc:	1009883a 	mov	r4,r2
 80098d0:	180b883a 	mov	r5,r3
 80098d4:	80058b80 	call	80058b8 <__muldf3>
 80098d8:	100d883a 	mov	r6,r2
 80098dc:	180f883a 	mov	r7,r3
 80098e0:	9009883a 	mov	r4,r18
 80098e4:	980b883a 	mov	r5,r19
 80098e8:	80120d00 	call	80120d0 <__subdf3>
 80098ec:	aa000c04 	addi	r8,r21,48
 80098f0:	a2000005 	stb	r8,0(r20)
 80098f4:	000d883a 	mov	r6,zero
 80098f8:	01d00934 	movhi	r7,16420
 80098fc:	1009883a 	mov	r4,r2
 8009900:	180b883a 	mov	r5,r3
 8009904:	a5c00044 	addi	r23,r20,1
 8009908:	b53fd91e 	bne	r22,r20,8009870 <_dtoa_r+0x858>
 800990c:	100d883a 	mov	r6,r2
 8009910:	180f883a 	mov	r7,r3
 8009914:	1009883a 	mov	r4,r2
 8009918:	180b883a 	mov	r5,r3
 800991c:	8010cd80 	call	8010cd8 <__adddf3>
 8009920:	100d883a 	mov	r6,r2
 8009924:	180f883a 	mov	r7,r3
 8009928:	8009883a 	mov	r4,r16
 800992c:	880b883a 	mov	r5,r17
 8009930:	1027883a 	mov	r19,r2
 8009934:	1825883a 	mov	r18,r3
 8009938:	8011fdc0 	call	8011fdc <__ledf2>
 800993c:	10000816 	blt	r2,zero,8009960 <_dtoa_r+0x948>
 8009940:	980d883a 	mov	r6,r19
 8009944:	900f883a 	mov	r7,r18
 8009948:	8009883a 	mov	r4,r16
 800994c:	880b883a 	mov	r5,r17
 8009950:	8011f540 	call	8011f54 <__eqdf2>
 8009954:	103f5a1e 	bne	r2,zero,80096c0 <_dtoa_r+0x6a8>
 8009958:	ad40004c 	andi	r21,r21,1
 800995c:	a83f5826 	beq	r21,zero,80096c0 <_dtoa_r+0x6a8>
 8009960:	bd3fffc3 	ldbu	r20,-1(r23)
 8009964:	b8bfffc4 	addi	r2,r23,-1
 8009968:	1007883a 	mov	r3,r2
 800996c:	01400e44 	movi	r5,57
 8009970:	d9800717 	ldw	r6,28(sp)
 8009974:	00000506 	br	800998c <_dtoa_r+0x974>
 8009978:	18ffffc4 	addi	r3,r3,-1
 800997c:	11824726 	beq	r2,r6,800a29c <_dtoa_r+0x1284>
 8009980:	1d000003 	ldbu	r20,0(r3)
 8009984:	102f883a 	mov	r23,r2
 8009988:	10bfffc4 	addi	r2,r2,-1
 800998c:	a1003fcc 	andi	r4,r20,255
 8009990:	2100201c 	xori	r4,r4,128
 8009994:	213fe004 	addi	r4,r4,-128
 8009998:	217ff726 	beq	r4,r5,8009978 <_dtoa_r+0x960>
 800999c:	a2000044 	addi	r8,r20,1
 80099a0:	12000005 	stb	r8,0(r2)
 80099a4:	003f4606 	br	80096c0 <_dtoa_r+0x6a8>
 80099a8:	d9000b17 	ldw	r4,44(sp)
 80099ac:	2000c826 	beq	r4,zero,8009cd0 <_dtoa_r+0xcb8>
 80099b0:	d9800317 	ldw	r6,12(sp)
 80099b4:	00c00044 	movi	r3,1
 80099b8:	1980f90e 	bge	r3,r6,8009da0 <_dtoa_r+0xd88>
 80099bc:	d8800617 	ldw	r2,24(sp)
 80099c0:	d8c00a17 	ldw	r3,40(sp)
 80099c4:	157fffc4 	addi	r21,r2,-1
 80099c8:	1d41f316 	blt	r3,r21,800a198 <_dtoa_r+0x1180>
 80099cc:	1d6bc83a 	sub	r21,r3,r21
 80099d0:	d9c00617 	ldw	r7,24(sp)
 80099d4:	3802aa16 	blt	r7,zero,800a480 <_dtoa_r+0x1468>
 80099d8:	dd000817 	ldw	r20,32(sp)
 80099dc:	d8800617 	ldw	r2,24(sp)
 80099e0:	d8c00817 	ldw	r3,32(sp)
 80099e4:	01400044 	movi	r5,1
 80099e8:	e009883a 	mov	r4,fp
 80099ec:	1887883a 	add	r3,r3,r2
 80099f0:	d8c00815 	stw	r3,32(sp)
 80099f4:	b0ad883a 	add	r22,r22,r2
 80099f8:	800c8f00 	call	800c8f0 <__i2b>
 80099fc:	1023883a 	mov	r17,r2
 8009a00:	a0000826 	beq	r20,zero,8009a24 <_dtoa_r+0xa0c>
 8009a04:	0580070e 	bge	zero,r22,8009a24 <_dtoa_r+0xa0c>
 8009a08:	a005883a 	mov	r2,r20
 8009a0c:	b500b916 	blt	r22,r20,8009cf4 <_dtoa_r+0xcdc>
 8009a10:	d9000817 	ldw	r4,32(sp)
 8009a14:	a0a9c83a 	sub	r20,r20,r2
 8009a18:	b0adc83a 	sub	r22,r22,r2
 8009a1c:	2089c83a 	sub	r4,r4,r2
 8009a20:	d9000815 	stw	r4,32(sp)
 8009a24:	d9800a17 	ldw	r6,40(sp)
 8009a28:	0181810e 	bge	zero,r6,800a030 <_dtoa_r+0x1018>
 8009a2c:	d9c00b17 	ldw	r7,44(sp)
 8009a30:	3800b326 	beq	r7,zero,8009d00 <_dtoa_r+0xce8>
 8009a34:	a800b226 	beq	r21,zero,8009d00 <_dtoa_r+0xce8>
 8009a38:	880b883a 	mov	r5,r17
 8009a3c:	a80d883a 	mov	r6,r21
 8009a40:	e009883a 	mov	r4,fp
 8009a44:	800cbb80 	call	800cbb8 <__pow5mult>
 8009a48:	d9800917 	ldw	r6,36(sp)
 8009a4c:	100b883a 	mov	r5,r2
 8009a50:	e009883a 	mov	r4,fp
 8009a54:	1023883a 	mov	r17,r2
 8009a58:	800c92c0 	call	800c92c <__multiply>
 8009a5c:	1021883a 	mov	r16,r2
 8009a60:	d8800a17 	ldw	r2,40(sp)
 8009a64:	d9400917 	ldw	r5,36(sp)
 8009a68:	e009883a 	mov	r4,fp
 8009a6c:	1545c83a 	sub	r2,r2,r21
 8009a70:	d8800a15 	stw	r2,40(sp)
 8009a74:	800c5640 	call	800c564 <_Bfree>
 8009a78:	d8c00a17 	ldw	r3,40(sp)
 8009a7c:	18009f1e 	bne	r3,zero,8009cfc <_dtoa_r+0xce4>
 8009a80:	05c00044 	movi	r23,1
 8009a84:	e009883a 	mov	r4,fp
 8009a88:	b80b883a 	mov	r5,r23
 8009a8c:	800c8f00 	call	800c8f0 <__i2b>
 8009a90:	d9000d17 	ldw	r4,52(sp)
 8009a94:	102b883a 	mov	r21,r2
 8009a98:	2000ce26 	beq	r4,zero,8009dd4 <_dtoa_r+0xdbc>
 8009a9c:	200d883a 	mov	r6,r4
 8009aa0:	100b883a 	mov	r5,r2
 8009aa4:	e009883a 	mov	r4,fp
 8009aa8:	800cbb80 	call	800cbb8 <__pow5mult>
 8009aac:	d9800317 	ldw	r6,12(sp)
 8009ab0:	102b883a 	mov	r21,r2
 8009ab4:	b981810e 	bge	r23,r6,800a0bc <_dtoa_r+0x10a4>
 8009ab8:	0027883a 	mov	r19,zero
 8009abc:	a8800417 	ldw	r2,16(r21)
 8009ac0:	05c00804 	movi	r23,32
 8009ac4:	10800104 	addi	r2,r2,4
 8009ac8:	1085883a 	add	r2,r2,r2
 8009acc:	1085883a 	add	r2,r2,r2
 8009ad0:	a885883a 	add	r2,r21,r2
 8009ad4:	11000017 	ldw	r4,0(r2)
 8009ad8:	800c7d80 	call	800c7d8 <__hi0bits>
 8009adc:	b885c83a 	sub	r2,r23,r2
 8009ae0:	1585883a 	add	r2,r2,r22
 8009ae4:	108007cc 	andi	r2,r2,31
 8009ae8:	1000b326 	beq	r2,zero,8009db8 <_dtoa_r+0xda0>
 8009aec:	00c00804 	movi	r3,32
 8009af0:	1887c83a 	sub	r3,r3,r2
 8009af4:	01000104 	movi	r4,4
 8009af8:	20c2cd0e 	bge	r4,r3,800a630 <_dtoa_r+0x1618>
 8009afc:	00c00704 	movi	r3,28
 8009b00:	1885c83a 	sub	r2,r3,r2
 8009b04:	d8c00817 	ldw	r3,32(sp)
 8009b08:	a0a9883a 	add	r20,r20,r2
 8009b0c:	b0ad883a 	add	r22,r22,r2
 8009b10:	1887883a 	add	r3,r3,r2
 8009b14:	d8c00815 	stw	r3,32(sp)
 8009b18:	d9800817 	ldw	r6,32(sp)
 8009b1c:	0180040e 	bge	zero,r6,8009b30 <_dtoa_r+0xb18>
 8009b20:	800b883a 	mov	r5,r16
 8009b24:	e009883a 	mov	r4,fp
 8009b28:	800ccf80 	call	800ccf8 <__lshift>
 8009b2c:	1021883a 	mov	r16,r2
 8009b30:	0580050e 	bge	zero,r22,8009b48 <_dtoa_r+0xb30>
 8009b34:	a80b883a 	mov	r5,r21
 8009b38:	b00d883a 	mov	r6,r22
 8009b3c:	e009883a 	mov	r4,fp
 8009b40:	800ccf80 	call	800ccf8 <__lshift>
 8009b44:	102b883a 	mov	r21,r2
 8009b48:	d9c00e17 	ldw	r7,56(sp)
 8009b4c:	3801211e 	bne	r7,zero,8009fd4 <_dtoa_r+0xfbc>
 8009b50:	d9800617 	ldw	r6,24(sp)
 8009b54:	0181380e 	bge	zero,r6,800a038 <_dtoa_r+0x1020>
 8009b58:	d8c00b17 	ldw	r3,44(sp)
 8009b5c:	1800ab1e 	bne	r3,zero,8009e0c <_dtoa_r+0xdf4>
 8009b60:	dc800717 	ldw	r18,28(sp)
 8009b64:	dcc00617 	ldw	r19,24(sp)
 8009b68:	9029883a 	mov	r20,r18
 8009b6c:	00000206 	br	8009b78 <_dtoa_r+0xb60>
 8009b70:	800c58c0 	call	800c58c <__multadd>
 8009b74:	1021883a 	mov	r16,r2
 8009b78:	a80b883a 	mov	r5,r21
 8009b7c:	8009883a 	mov	r4,r16
 8009b80:	8008df00 	call	8008df0 <quorem>
 8009b84:	10800c04 	addi	r2,r2,48
 8009b88:	90800005 	stb	r2,0(r18)
 8009b8c:	94800044 	addi	r18,r18,1
 8009b90:	9507c83a 	sub	r3,r18,r20
 8009b94:	000f883a 	mov	r7,zero
 8009b98:	01800284 	movi	r6,10
 8009b9c:	800b883a 	mov	r5,r16
 8009ba0:	e009883a 	mov	r4,fp
 8009ba4:	1cfff216 	blt	r3,r19,8009b70 <_dtoa_r+0xb58>
 8009ba8:	1011883a 	mov	r8,r2
 8009bac:	d8800617 	ldw	r2,24(sp)
 8009bb0:	0082370e 	bge	zero,r2,800a490 <_dtoa_r+0x1478>
 8009bb4:	d9000717 	ldw	r4,28(sp)
 8009bb8:	0025883a 	mov	r18,zero
 8009bbc:	20af883a 	add	r23,r4,r2
 8009bc0:	01800044 	movi	r6,1
 8009bc4:	800b883a 	mov	r5,r16
 8009bc8:	e009883a 	mov	r4,fp
 8009bcc:	da001715 	stw	r8,92(sp)
 8009bd0:	800ccf80 	call	800ccf8 <__lshift>
 8009bd4:	a80b883a 	mov	r5,r21
 8009bd8:	1009883a 	mov	r4,r2
 8009bdc:	d8800915 	stw	r2,36(sp)
 8009be0:	800ce400 	call	800ce40 <__mcmp>
 8009be4:	da001717 	ldw	r8,92(sp)
 8009be8:	0081800e 	bge	zero,r2,800a1ec <_dtoa_r+0x11d4>
 8009bec:	b93fffc3 	ldbu	r4,-1(r23)
 8009bf0:	b8bfffc4 	addi	r2,r23,-1
 8009bf4:	1007883a 	mov	r3,r2
 8009bf8:	01800e44 	movi	r6,57
 8009bfc:	d9c00717 	ldw	r7,28(sp)
 8009c00:	00000506 	br	8009c18 <_dtoa_r+0xc00>
 8009c04:	18ffffc4 	addi	r3,r3,-1
 8009c08:	11c12326 	beq	r2,r7,800a098 <_dtoa_r+0x1080>
 8009c0c:	19000003 	ldbu	r4,0(r3)
 8009c10:	102f883a 	mov	r23,r2
 8009c14:	10bfffc4 	addi	r2,r2,-1
 8009c18:	21403fcc 	andi	r5,r4,255
 8009c1c:	2940201c 	xori	r5,r5,128
 8009c20:	297fe004 	addi	r5,r5,-128
 8009c24:	29bff726 	beq	r5,r6,8009c04 <_dtoa_r+0xbec>
 8009c28:	21000044 	addi	r4,r4,1
 8009c2c:	11000005 	stb	r4,0(r2)
 8009c30:	a80b883a 	mov	r5,r21
 8009c34:	e009883a 	mov	r4,fp
 8009c38:	800c5640 	call	800c564 <_Bfree>
 8009c3c:	883ea026 	beq	r17,zero,80096c0 <_dtoa_r+0x6a8>
 8009c40:	90000426 	beq	r18,zero,8009c54 <_dtoa_r+0xc3c>
 8009c44:	94400326 	beq	r18,r17,8009c54 <_dtoa_r+0xc3c>
 8009c48:	900b883a 	mov	r5,r18
 8009c4c:	e009883a 	mov	r4,fp
 8009c50:	800c5640 	call	800c564 <_Bfree>
 8009c54:	880b883a 	mov	r5,r17
 8009c58:	e009883a 	mov	r4,fp
 8009c5c:	800c5640 	call	800c564 <_Bfree>
 8009c60:	003e9706 	br	80096c0 <_dtoa_r+0x6a8>
 8009c64:	01800044 	movi	r6,1
 8009c68:	d9800e15 	stw	r6,56(sp)
 8009c6c:	003d9606 	br	80092c8 <_dtoa_r+0x2b0>
 8009c70:	d8800817 	ldw	r2,32(sp)
 8009c74:	d8c00517 	ldw	r3,20(sp)
 8009c78:	d8000d15 	stw	zero,52(sp)
 8009c7c:	10c5c83a 	sub	r2,r2,r3
 8009c80:	00c9c83a 	sub	r4,zero,r3
 8009c84:	d8800815 	stw	r2,32(sp)
 8009c88:	d9000a15 	stw	r4,40(sp)
 8009c8c:	003d9706 	br	80092ec <_dtoa_r+0x2d4>
 8009c90:	05adc83a 	sub	r22,zero,r22
 8009c94:	dd800815 	stw	r22,32(sp)
 8009c98:	002d883a 	mov	r22,zero
 8009c9c:	003d8e06 	br	80092d8 <_dtoa_r+0x2c0>
 8009ca0:	d9000517 	ldw	r4,20(sp)
 8009ca4:	8012a4c0 	call	8012a4c <__floatsidf>
 8009ca8:	100d883a 	mov	r6,r2
 8009cac:	180f883a 	mov	r7,r3
 8009cb0:	a009883a 	mov	r4,r20
 8009cb4:	880b883a 	mov	r5,r17
 8009cb8:	8011f540 	call	8011f54 <__eqdf2>
 8009cbc:	103d7126 	beq	r2,zero,8009284 <_dtoa_r+0x26c>
 8009cc0:	d9c00517 	ldw	r7,20(sp)
 8009cc4:	39ffffc4 	addi	r7,r7,-1
 8009cc8:	d9c00515 	stw	r7,20(sp)
 8009ccc:	003d6d06 	br	8009284 <_dtoa_r+0x26c>
 8009cd0:	dd400a17 	ldw	r21,40(sp)
 8009cd4:	dd000817 	ldw	r20,32(sp)
 8009cd8:	0023883a 	mov	r17,zero
 8009cdc:	003f4806 	br	8009a00 <_dtoa_r+0x9e8>
 8009ce0:	10e3c83a 	sub	r17,r2,r3
 8009ce4:	9448983a 	sll	r4,r18,r17
 8009ce8:	003d3206 	br	80091b4 <_dtoa_r+0x19c>
 8009cec:	d8000e15 	stw	zero,56(sp)
 8009cf0:	003d7506 	br	80092c8 <_dtoa_r+0x2b0>
 8009cf4:	b005883a 	mov	r2,r22
 8009cf8:	003f4506 	br	8009a10 <_dtoa_r+0x9f8>
 8009cfc:	dc000915 	stw	r16,36(sp)
 8009d00:	d9800a17 	ldw	r6,40(sp)
 8009d04:	d9400917 	ldw	r5,36(sp)
 8009d08:	e009883a 	mov	r4,fp
 8009d0c:	800cbb80 	call	800cbb8 <__pow5mult>
 8009d10:	1021883a 	mov	r16,r2
 8009d14:	003f5a06 	br	8009a80 <_dtoa_r+0xa68>
 8009d18:	01c00044 	movi	r7,1
 8009d1c:	d9c00b15 	stw	r7,44(sp)
 8009d20:	d8802217 	ldw	r2,136(sp)
 8009d24:	0081280e 	bge	zero,r2,800a1c8 <_dtoa_r+0x11b0>
 8009d28:	100d883a 	mov	r6,r2
 8009d2c:	1021883a 	mov	r16,r2
 8009d30:	d8800c15 	stw	r2,48(sp)
 8009d34:	d8800615 	stw	r2,24(sp)
 8009d38:	003d8806 	br	800935c <_dtoa_r+0x344>
 8009d3c:	d8800617 	ldw	r2,24(sp)
 8009d40:	00be9b16 	blt	zero,r2,80097b0 <_dtoa_r+0x798>
 8009d44:	10010f1e 	bne	r2,zero,800a184 <_dtoa_r+0x116c>
 8009d48:	880b883a 	mov	r5,r17
 8009d4c:	000d883a 	mov	r6,zero
 8009d50:	01d00534 	movhi	r7,16404
 8009d54:	8009883a 	mov	r4,r16
 8009d58:	80058b80 	call	80058b8 <__muldf3>
 8009d5c:	900d883a 	mov	r6,r18
 8009d60:	980f883a 	mov	r7,r19
 8009d64:	1009883a 	mov	r4,r2
 8009d68:	180b883a 	mov	r5,r3
 8009d6c:	80057dc0 	call	80057dc <__gedf2>
 8009d70:	002b883a 	mov	r21,zero
 8009d74:	0023883a 	mov	r17,zero
 8009d78:	1000bf16 	blt	r2,zero,800a078 <_dtoa_r+0x1060>
 8009d7c:	d9802217 	ldw	r6,136(sp)
 8009d80:	ddc00717 	ldw	r23,28(sp)
 8009d84:	018c303a 	nor	r6,zero,r6
 8009d88:	d9800515 	stw	r6,20(sp)
 8009d8c:	a80b883a 	mov	r5,r21
 8009d90:	e009883a 	mov	r4,fp
 8009d94:	800c5640 	call	800c564 <_Bfree>
 8009d98:	883e4926 	beq	r17,zero,80096c0 <_dtoa_r+0x6a8>
 8009d9c:	003fad06 	br	8009c54 <_dtoa_r+0xc3c>
 8009da0:	d9c01117 	ldw	r7,68(sp)
 8009da4:	3801bc26 	beq	r7,zero,800a498 <_dtoa_r+0x1480>
 8009da8:	10810cc4 	addi	r2,r2,1075
 8009dac:	dd400a17 	ldw	r21,40(sp)
 8009db0:	dd000817 	ldw	r20,32(sp)
 8009db4:	003f0a06 	br	80099e0 <_dtoa_r+0x9c8>
 8009db8:	00800704 	movi	r2,28
 8009dbc:	d9000817 	ldw	r4,32(sp)
 8009dc0:	a0a9883a 	add	r20,r20,r2
 8009dc4:	b0ad883a 	add	r22,r22,r2
 8009dc8:	2089883a 	add	r4,r4,r2
 8009dcc:	d9000815 	stw	r4,32(sp)
 8009dd0:	003f5106 	br	8009b18 <_dtoa_r+0xb00>
 8009dd4:	d8c00317 	ldw	r3,12(sp)
 8009dd8:	b8c1fc0e 	bge	r23,r3,800a5cc <_dtoa_r+0x15b4>
 8009ddc:	0027883a 	mov	r19,zero
 8009de0:	b805883a 	mov	r2,r23
 8009de4:	003f3e06 	br	8009ae0 <_dtoa_r+0xac8>
 8009de8:	880b883a 	mov	r5,r17
 8009dec:	e009883a 	mov	r4,fp
 8009df0:	000f883a 	mov	r7,zero
 8009df4:	01800284 	movi	r6,10
 8009df8:	800c58c0 	call	800c58c <__multadd>
 8009dfc:	d9000c17 	ldw	r4,48(sp)
 8009e00:	1023883a 	mov	r17,r2
 8009e04:	0102040e 	bge	zero,r4,800a618 <_dtoa_r+0x1600>
 8009e08:	d9000615 	stw	r4,24(sp)
 8009e0c:	0500050e 	bge	zero,r20,8009e24 <_dtoa_r+0xe0c>
 8009e10:	880b883a 	mov	r5,r17
 8009e14:	a00d883a 	mov	r6,r20
 8009e18:	e009883a 	mov	r4,fp
 8009e1c:	800ccf80 	call	800ccf8 <__lshift>
 8009e20:	1023883a 	mov	r17,r2
 8009e24:	9801241e 	bne	r19,zero,800a2b8 <_dtoa_r+0x12a0>
 8009e28:	8829883a 	mov	r20,r17
 8009e2c:	d9000617 	ldw	r4,24(sp)
 8009e30:	dcc00717 	ldw	r19,28(sp)
 8009e34:	9480004c 	andi	r18,r18,1
 8009e38:	20bfffc4 	addi	r2,r4,-1
 8009e3c:	9885883a 	add	r2,r19,r2
 8009e40:	d8800415 	stw	r2,16(sp)
 8009e44:	dc800615 	stw	r18,24(sp)
 8009e48:	a80b883a 	mov	r5,r21
 8009e4c:	8009883a 	mov	r4,r16
 8009e50:	8008df00 	call	8008df0 <quorem>
 8009e54:	880b883a 	mov	r5,r17
 8009e58:	8009883a 	mov	r4,r16
 8009e5c:	102f883a 	mov	r23,r2
 8009e60:	800ce400 	call	800ce40 <__mcmp>
 8009e64:	a80b883a 	mov	r5,r21
 8009e68:	a00d883a 	mov	r6,r20
 8009e6c:	e009883a 	mov	r4,fp
 8009e70:	102d883a 	mov	r22,r2
 8009e74:	800cea00 	call	800cea0 <__mdiff>
 8009e78:	1007883a 	mov	r3,r2
 8009e7c:	10800317 	ldw	r2,12(r2)
 8009e80:	bc800c04 	addi	r18,r23,48
 8009e84:	180b883a 	mov	r5,r3
 8009e88:	10004e1e 	bne	r2,zero,8009fc4 <_dtoa_r+0xfac>
 8009e8c:	8009883a 	mov	r4,r16
 8009e90:	d8c01615 	stw	r3,88(sp)
 8009e94:	800ce400 	call	800ce40 <__mcmp>
 8009e98:	d8c01617 	ldw	r3,88(sp)
 8009e9c:	e009883a 	mov	r4,fp
 8009ea0:	d8801615 	stw	r2,88(sp)
 8009ea4:	180b883a 	mov	r5,r3
 8009ea8:	800c5640 	call	800c564 <_Bfree>
 8009eac:	d8801617 	ldw	r2,88(sp)
 8009eb0:	1000041e 	bne	r2,zero,8009ec4 <_dtoa_r+0xeac>
 8009eb4:	d9800317 	ldw	r6,12(sp)
 8009eb8:	3000021e 	bne	r6,zero,8009ec4 <_dtoa_r+0xeac>
 8009ebc:	d8c00617 	ldw	r3,24(sp)
 8009ec0:	18003726 	beq	r3,zero,8009fa0 <_dtoa_r+0xf88>
 8009ec4:	b0002016 	blt	r22,zero,8009f48 <_dtoa_r+0xf30>
 8009ec8:	b000041e 	bne	r22,zero,8009edc <_dtoa_r+0xec4>
 8009ecc:	d9000317 	ldw	r4,12(sp)
 8009ed0:	2000021e 	bne	r4,zero,8009edc <_dtoa_r+0xec4>
 8009ed4:	d8c00617 	ldw	r3,24(sp)
 8009ed8:	18001b26 	beq	r3,zero,8009f48 <_dtoa_r+0xf30>
 8009edc:	00810716 	blt	zero,r2,800a2fc <_dtoa_r+0x12e4>
 8009ee0:	d8c00417 	ldw	r3,16(sp)
 8009ee4:	9d800044 	addi	r22,r19,1
 8009ee8:	9c800005 	stb	r18,0(r19)
 8009eec:	b02f883a 	mov	r23,r22
 8009ef0:	98c10626 	beq	r19,r3,800a30c <_dtoa_r+0x12f4>
 8009ef4:	800b883a 	mov	r5,r16
 8009ef8:	000f883a 	mov	r7,zero
 8009efc:	01800284 	movi	r6,10
 8009f00:	e009883a 	mov	r4,fp
 8009f04:	800c58c0 	call	800c58c <__multadd>
 8009f08:	1021883a 	mov	r16,r2
 8009f0c:	000f883a 	mov	r7,zero
 8009f10:	01800284 	movi	r6,10
 8009f14:	880b883a 	mov	r5,r17
 8009f18:	e009883a 	mov	r4,fp
 8009f1c:	8d002526 	beq	r17,r20,8009fb4 <_dtoa_r+0xf9c>
 8009f20:	800c58c0 	call	800c58c <__multadd>
 8009f24:	a00b883a 	mov	r5,r20
 8009f28:	000f883a 	mov	r7,zero
 8009f2c:	01800284 	movi	r6,10
 8009f30:	e009883a 	mov	r4,fp
 8009f34:	1023883a 	mov	r17,r2
 8009f38:	800c58c0 	call	800c58c <__multadd>
 8009f3c:	1029883a 	mov	r20,r2
 8009f40:	b027883a 	mov	r19,r22
 8009f44:	003fc006 	br	8009e48 <_dtoa_r+0xe30>
 8009f48:	9011883a 	mov	r8,r18
 8009f4c:	00800e0e 	bge	zero,r2,8009f88 <_dtoa_r+0xf70>
 8009f50:	800b883a 	mov	r5,r16
 8009f54:	01800044 	movi	r6,1
 8009f58:	e009883a 	mov	r4,fp
 8009f5c:	da001715 	stw	r8,92(sp)
 8009f60:	800ccf80 	call	800ccf8 <__lshift>
 8009f64:	a80b883a 	mov	r5,r21
 8009f68:	1009883a 	mov	r4,r2
 8009f6c:	1021883a 	mov	r16,r2
 8009f70:	800ce400 	call	800ce40 <__mcmp>
 8009f74:	da001717 	ldw	r8,92(sp)
 8009f78:	0081960e 	bge	zero,r2,800a5d4 <_dtoa_r+0x15bc>
 8009f7c:	00800e44 	movi	r2,57
 8009f80:	40817026 	beq	r8,r2,800a544 <_dtoa_r+0x152c>
 8009f84:	ba000c44 	addi	r8,r23,49
 8009f88:	8825883a 	mov	r18,r17
 8009f8c:	9dc00044 	addi	r23,r19,1
 8009f90:	9a000005 	stb	r8,0(r19)
 8009f94:	a023883a 	mov	r17,r20
 8009f98:	dc000915 	stw	r16,36(sp)
 8009f9c:	003f2406 	br	8009c30 <_dtoa_r+0xc18>
 8009fa0:	00800e44 	movi	r2,57
 8009fa4:	9011883a 	mov	r8,r18
 8009fa8:	90816626 	beq	r18,r2,800a544 <_dtoa_r+0x152c>
 8009fac:	05bff516 	blt	zero,r22,8009f84 <_dtoa_r+0xf6c>
 8009fb0:	003ff506 	br	8009f88 <_dtoa_r+0xf70>
 8009fb4:	800c58c0 	call	800c58c <__multadd>
 8009fb8:	1023883a 	mov	r17,r2
 8009fbc:	1029883a 	mov	r20,r2
 8009fc0:	003fdf06 	br	8009f40 <_dtoa_r+0xf28>
 8009fc4:	e009883a 	mov	r4,fp
 8009fc8:	800c5640 	call	800c564 <_Bfree>
 8009fcc:	00800044 	movi	r2,1
 8009fd0:	003fbc06 	br	8009ec4 <_dtoa_r+0xeac>
 8009fd4:	a80b883a 	mov	r5,r21
 8009fd8:	8009883a 	mov	r4,r16
 8009fdc:	800ce400 	call	800ce40 <__mcmp>
 8009fe0:	103edb0e 	bge	r2,zero,8009b50 <_dtoa_r+0xb38>
 8009fe4:	800b883a 	mov	r5,r16
 8009fe8:	000f883a 	mov	r7,zero
 8009fec:	01800284 	movi	r6,10
 8009ff0:	e009883a 	mov	r4,fp
 8009ff4:	800c58c0 	call	800c58c <__multadd>
 8009ff8:	1021883a 	mov	r16,r2
 8009ffc:	d8800517 	ldw	r2,20(sp)
 800a000:	d8c00b17 	ldw	r3,44(sp)
 800a004:	10bfffc4 	addi	r2,r2,-1
 800a008:	d8800515 	stw	r2,20(sp)
 800a00c:	183f761e 	bne	r3,zero,8009de8 <_dtoa_r+0xdd0>
 800a010:	d9000c17 	ldw	r4,48(sp)
 800a014:	0101730e 	bge	zero,r4,800a5e4 <_dtoa_r+0x15cc>
 800a018:	d9000615 	stw	r4,24(sp)
 800a01c:	003ed006 	br	8009b60 <_dtoa_r+0xb48>
 800a020:	00800084 	movi	r2,2
 800a024:	3081861e 	bne	r6,r2,800a640 <_dtoa_r+0x1628>
 800a028:	d8000b15 	stw	zero,44(sp)
 800a02c:	003f3c06 	br	8009d20 <_dtoa_r+0xd08>
 800a030:	dc000917 	ldw	r16,36(sp)
 800a034:	003e9206 	br	8009a80 <_dtoa_r+0xa68>
 800a038:	d9c00317 	ldw	r7,12(sp)
 800a03c:	00800084 	movi	r2,2
 800a040:	11fec50e 	bge	r2,r7,8009b58 <_dtoa_r+0xb40>
 800a044:	d9000617 	ldw	r4,24(sp)
 800a048:	20013c1e 	bne	r4,zero,800a53c <_dtoa_r+0x1524>
 800a04c:	a80b883a 	mov	r5,r21
 800a050:	000f883a 	mov	r7,zero
 800a054:	01800144 	movi	r6,5
 800a058:	e009883a 	mov	r4,fp
 800a05c:	800c58c0 	call	800c58c <__multadd>
 800a060:	100b883a 	mov	r5,r2
 800a064:	8009883a 	mov	r4,r16
 800a068:	102b883a 	mov	r21,r2
 800a06c:	800ce400 	call	800ce40 <__mcmp>
 800a070:	dc000915 	stw	r16,36(sp)
 800a074:	00bf410e 	bge	zero,r2,8009d7c <_dtoa_r+0xd64>
 800a078:	d9c00717 	ldw	r7,28(sp)
 800a07c:	00800c44 	movi	r2,49
 800a080:	38800005 	stb	r2,0(r7)
 800a084:	d8800517 	ldw	r2,20(sp)
 800a088:	3dc00044 	addi	r23,r7,1
 800a08c:	10800044 	addi	r2,r2,1
 800a090:	d8800515 	stw	r2,20(sp)
 800a094:	003f3d06 	br	8009d8c <_dtoa_r+0xd74>
 800a098:	d9800517 	ldw	r6,20(sp)
 800a09c:	d9c00717 	ldw	r7,28(sp)
 800a0a0:	00800c44 	movi	r2,49
 800a0a4:	31800044 	addi	r6,r6,1
 800a0a8:	d9800515 	stw	r6,20(sp)
 800a0ac:	38800005 	stb	r2,0(r7)
 800a0b0:	003edf06 	br	8009c30 <_dtoa_r+0xc18>
 800a0b4:	d8000b15 	stw	zero,44(sp)
 800a0b8:	003c9f06 	br	8009338 <_dtoa_r+0x320>
 800a0bc:	903e7e1e 	bne	r18,zero,8009ab8 <_dtoa_r+0xaa0>
 800a0c0:	00800434 	movhi	r2,16
 800a0c4:	10bfffc4 	addi	r2,r2,-1
 800a0c8:	9884703a 	and	r2,r19,r2
 800a0cc:	1000ea1e 	bne	r2,zero,800a478 <_dtoa_r+0x1460>
 800a0d0:	9cdffc2c 	andhi	r19,r19,32752
 800a0d4:	9800e826 	beq	r19,zero,800a478 <_dtoa_r+0x1460>
 800a0d8:	d9c00817 	ldw	r7,32(sp)
 800a0dc:	b5800044 	addi	r22,r22,1
 800a0e0:	04c00044 	movi	r19,1
 800a0e4:	39c00044 	addi	r7,r7,1
 800a0e8:	d9c00815 	stw	r7,32(sp)
 800a0ec:	d8800d17 	ldw	r2,52(sp)
 800a0f0:	103e721e 	bne	r2,zero,8009abc <_dtoa_r+0xaa4>
 800a0f4:	00800044 	movi	r2,1
 800a0f8:	003e7906 	br	8009ae0 <_dtoa_r+0xac8>
 800a0fc:	8009883a 	mov	r4,r16
 800a100:	8012a4c0 	call	8012a4c <__floatsidf>
 800a104:	d9800f17 	ldw	r6,60(sp)
 800a108:	d9c01017 	ldw	r7,64(sp)
 800a10c:	1009883a 	mov	r4,r2
 800a110:	180b883a 	mov	r5,r3
 800a114:	80058b80 	call	80058b8 <__muldf3>
 800a118:	000d883a 	mov	r6,zero
 800a11c:	01d00734 	movhi	r7,16412
 800a120:	1009883a 	mov	r4,r2
 800a124:	180b883a 	mov	r5,r3
 800a128:	8010cd80 	call	8010cd8 <__adddf3>
 800a12c:	047f3034 	movhi	r17,64704
 800a130:	1021883a 	mov	r16,r2
 800a134:	1c63883a 	add	r17,r3,r17
 800a138:	d9000f17 	ldw	r4,60(sp)
 800a13c:	d9401017 	ldw	r5,64(sp)
 800a140:	000d883a 	mov	r6,zero
 800a144:	01d00534 	movhi	r7,16404
 800a148:	80120d00 	call	80120d0 <__subdf3>
 800a14c:	800d883a 	mov	r6,r16
 800a150:	880f883a 	mov	r7,r17
 800a154:	1009883a 	mov	r4,r2
 800a158:	180b883a 	mov	r5,r3
 800a15c:	102b883a 	mov	r21,r2
 800a160:	1829883a 	mov	r20,r3
 800a164:	80057dc0 	call	80057dc <__gedf2>
 800a168:	00806c16 	blt	zero,r2,800a31c <_dtoa_r+0x1304>
 800a16c:	89e0003c 	xorhi	r7,r17,32768
 800a170:	800d883a 	mov	r6,r16
 800a174:	a809883a 	mov	r4,r21
 800a178:	a00b883a 	mov	r5,r20
 800a17c:	8011fdc0 	call	8011fdc <__ledf2>
 800a180:	103d7e0e 	bge	r2,zero,800977c <_dtoa_r+0x764>
 800a184:	002b883a 	mov	r21,zero
 800a188:	0023883a 	mov	r17,zero
 800a18c:	003efb06 	br	8009d7c <_dtoa_r+0xd64>
 800a190:	d8800717 	ldw	r2,28(sp)
 800a194:	003bd006 	br	80090d8 <_dtoa_r+0xc0>
 800a198:	d9000a17 	ldw	r4,40(sp)
 800a19c:	d9800d17 	ldw	r6,52(sp)
 800a1a0:	dd400a15 	stw	r21,40(sp)
 800a1a4:	a905c83a 	sub	r2,r21,r4
 800a1a8:	308d883a 	add	r6,r6,r2
 800a1ac:	d9800d15 	stw	r6,52(sp)
 800a1b0:	002b883a 	mov	r21,zero
 800a1b4:	003e0606 	br	80099d0 <_dtoa_r+0x9b8>
 800a1b8:	9023883a 	mov	r17,r18
 800a1bc:	9829883a 	mov	r20,r19
 800a1c0:	04000084 	movi	r16,2
 800a1c4:	003c9206 	br	8009410 <_dtoa_r+0x3f8>
 800a1c8:	04000044 	movi	r16,1
 800a1cc:	dc000c15 	stw	r16,48(sp)
 800a1d0:	dc000615 	stw	r16,24(sp)
 800a1d4:	dc002215 	stw	r16,136(sp)
 800a1d8:	e0001115 	stw	zero,68(fp)
 800a1dc:	000b883a 	mov	r5,zero
 800a1e0:	003c6906 	br	8009388 <_dtoa_r+0x370>
 800a1e4:	3021883a 	mov	r16,r6
 800a1e8:	003ffb06 	br	800a1d8 <_dtoa_r+0x11c0>
 800a1ec:	1000021e 	bne	r2,zero,800a1f8 <_dtoa_r+0x11e0>
 800a1f0:	4200004c 	andi	r8,r8,1
 800a1f4:	403e7d1e 	bne	r8,zero,8009bec <_dtoa_r+0xbd4>
 800a1f8:	01000c04 	movi	r4,48
 800a1fc:	00000106 	br	800a204 <_dtoa_r+0x11ec>
 800a200:	102f883a 	mov	r23,r2
 800a204:	b8bfffc4 	addi	r2,r23,-1
 800a208:	10c00007 	ldb	r3,0(r2)
 800a20c:	193ffc26 	beq	r3,r4,800a200 <_dtoa_r+0x11e8>
 800a210:	003e8706 	br	8009c30 <_dtoa_r+0xc18>
 800a214:	d8800517 	ldw	r2,20(sp)
 800a218:	00a3c83a 	sub	r17,zero,r2
 800a21c:	8800a426 	beq	r17,zero,800a4b0 <_dtoa_r+0x1498>
 800a220:	888003cc 	andi	r2,r17,15
 800a224:	100490fa 	slli	r2,r2,3
 800a228:	00c20074 	movhi	r3,2049
 800a22c:	18d71b04 	addi	r3,r3,23660
 800a230:	1885883a 	add	r2,r3,r2
 800a234:	11800017 	ldw	r6,0(r2)
 800a238:	11c00117 	ldw	r7,4(r2)
 800a23c:	9009883a 	mov	r4,r18
 800a240:	980b883a 	mov	r5,r19
 800a244:	8823d13a 	srai	r17,r17,4
 800a248:	80058b80 	call	80058b8 <__muldf3>
 800a24c:	d8800f15 	stw	r2,60(sp)
 800a250:	d8c01015 	stw	r3,64(sp)
 800a254:	8800e826 	beq	r17,zero,800a5f8 <_dtoa_r+0x15e0>
 800a258:	05020074 	movhi	r20,2049
 800a25c:	a5171104 	addi	r20,r20,23620
 800a260:	04000084 	movi	r16,2
 800a264:	8980004c 	andi	r6,r17,1
 800a268:	1009883a 	mov	r4,r2
 800a26c:	8823d07a 	srai	r17,r17,1
 800a270:	180b883a 	mov	r5,r3
 800a274:	30000426 	beq	r6,zero,800a288 <_dtoa_r+0x1270>
 800a278:	a1800017 	ldw	r6,0(r20)
 800a27c:	a1c00117 	ldw	r7,4(r20)
 800a280:	84000044 	addi	r16,r16,1
 800a284:	80058b80 	call	80058b8 <__muldf3>
 800a288:	a5000204 	addi	r20,r20,8
 800a28c:	883ff51e 	bne	r17,zero,800a264 <_dtoa_r+0x124c>
 800a290:	d8800f15 	stw	r2,60(sp)
 800a294:	d8c01015 	stw	r3,64(sp)
 800a298:	003c7606 	br	8009474 <_dtoa_r+0x45c>
 800a29c:	00c00c04 	movi	r3,48
 800a2a0:	10c00005 	stb	r3,0(r2)
 800a2a4:	d8c00517 	ldw	r3,20(sp)
 800a2a8:	bd3fffc3 	ldbu	r20,-1(r23)
 800a2ac:	18c00044 	addi	r3,r3,1
 800a2b0:	d8c00515 	stw	r3,20(sp)
 800a2b4:	003db906 	br	800999c <_dtoa_r+0x984>
 800a2b8:	89400117 	ldw	r5,4(r17)
 800a2bc:	e009883a 	mov	r4,fp
 800a2c0:	800c4bc0 	call	800c4bc <_Balloc>
 800a2c4:	89800417 	ldw	r6,16(r17)
 800a2c8:	89400304 	addi	r5,r17,12
 800a2cc:	11000304 	addi	r4,r2,12
 800a2d0:	31800084 	addi	r6,r6,2
 800a2d4:	318d883a 	add	r6,r6,r6
 800a2d8:	318d883a 	add	r6,r6,r6
 800a2dc:	1027883a 	mov	r19,r2
 800a2e0:	800626c0 	call	800626c <memcpy>
 800a2e4:	01800044 	movi	r6,1
 800a2e8:	980b883a 	mov	r5,r19
 800a2ec:	e009883a 	mov	r4,fp
 800a2f0:	800ccf80 	call	800ccf8 <__lshift>
 800a2f4:	1029883a 	mov	r20,r2
 800a2f8:	003ecc06 	br	8009e2c <_dtoa_r+0xe14>
 800a2fc:	00800e44 	movi	r2,57
 800a300:	90809026 	beq	r18,r2,800a544 <_dtoa_r+0x152c>
 800a304:	92000044 	addi	r8,r18,1
 800a308:	003f1f06 	br	8009f88 <_dtoa_r+0xf70>
 800a30c:	9011883a 	mov	r8,r18
 800a310:	8825883a 	mov	r18,r17
 800a314:	a023883a 	mov	r17,r20
 800a318:	003e2906 	br	8009bc0 <_dtoa_r+0xba8>
 800a31c:	002b883a 	mov	r21,zero
 800a320:	0023883a 	mov	r17,zero
 800a324:	003f5406 	br	800a078 <_dtoa_r+0x1060>
 800a328:	61bfffc4 	addi	r6,r12,-1
 800a32c:	300490fa 	slli	r2,r6,3
 800a330:	00c20074 	movhi	r3,2049
 800a334:	18d71b04 	addi	r3,r3,23660
 800a338:	1885883a 	add	r2,r3,r2
 800a33c:	11000017 	ldw	r4,0(r2)
 800a340:	11400117 	ldw	r5,4(r2)
 800a344:	d8800717 	ldw	r2,28(sp)
 800a348:	880f883a 	mov	r7,r17
 800a34c:	d9801215 	stw	r6,72(sp)
 800a350:	800d883a 	mov	r6,r16
 800a354:	db001615 	stw	r12,88(sp)
 800a358:	15c00044 	addi	r23,r2,1
 800a35c:	80058b80 	call	80058b8 <__muldf3>
 800a360:	d9401017 	ldw	r5,64(sp)
 800a364:	d9000f17 	ldw	r4,60(sp)
 800a368:	d8c01515 	stw	r3,84(sp)
 800a36c:	d8801415 	stw	r2,80(sp)
 800a370:	80129cc0 	call	80129cc <__fixdfsi>
 800a374:	1009883a 	mov	r4,r2
 800a378:	1021883a 	mov	r16,r2
 800a37c:	8012a4c0 	call	8012a4c <__floatsidf>
 800a380:	d9000f17 	ldw	r4,60(sp)
 800a384:	d9401017 	ldw	r5,64(sp)
 800a388:	100d883a 	mov	r6,r2
 800a38c:	180f883a 	mov	r7,r3
 800a390:	80120d00 	call	80120d0 <__subdf3>
 800a394:	1829883a 	mov	r20,r3
 800a398:	d8c00717 	ldw	r3,28(sp)
 800a39c:	84000c04 	addi	r16,r16,48
 800a3a0:	1023883a 	mov	r17,r2
 800a3a4:	1c000005 	stb	r16,0(r3)
 800a3a8:	db001617 	ldw	r12,88(sp)
 800a3ac:	00800044 	movi	r2,1
 800a3b0:	60802226 	beq	r12,r2,800a43c <_dtoa_r+0x1424>
 800a3b4:	d9c00717 	ldw	r7,28(sp)
 800a3b8:	8805883a 	mov	r2,r17
 800a3bc:	b82b883a 	mov	r21,r23
 800a3c0:	3b19883a 	add	r12,r7,r12
 800a3c4:	6023883a 	mov	r17,r12
 800a3c8:	a007883a 	mov	r3,r20
 800a3cc:	dc800f15 	stw	r18,60(sp)
 800a3d0:	000d883a 	mov	r6,zero
 800a3d4:	01d00934 	movhi	r7,16420
 800a3d8:	1009883a 	mov	r4,r2
 800a3dc:	180b883a 	mov	r5,r3
 800a3e0:	80058b80 	call	80058b8 <__muldf3>
 800a3e4:	180b883a 	mov	r5,r3
 800a3e8:	1009883a 	mov	r4,r2
 800a3ec:	1829883a 	mov	r20,r3
 800a3f0:	1025883a 	mov	r18,r2
 800a3f4:	80129cc0 	call	80129cc <__fixdfsi>
 800a3f8:	1009883a 	mov	r4,r2
 800a3fc:	1021883a 	mov	r16,r2
 800a400:	8012a4c0 	call	8012a4c <__floatsidf>
 800a404:	100d883a 	mov	r6,r2
 800a408:	180f883a 	mov	r7,r3
 800a40c:	9009883a 	mov	r4,r18
 800a410:	a00b883a 	mov	r5,r20
 800a414:	84000c04 	addi	r16,r16,48
 800a418:	80120d00 	call	80120d0 <__subdf3>
 800a41c:	ad400044 	addi	r21,r21,1
 800a420:	ac3fffc5 	stb	r16,-1(r21)
 800a424:	ac7fea1e 	bne	r21,r17,800a3d0 <_dtoa_r+0x13b8>
 800a428:	1023883a 	mov	r17,r2
 800a42c:	d8801217 	ldw	r2,72(sp)
 800a430:	dc800f17 	ldw	r18,60(sp)
 800a434:	1829883a 	mov	r20,r3
 800a438:	b8af883a 	add	r23,r23,r2
 800a43c:	d9001417 	ldw	r4,80(sp)
 800a440:	d9401517 	ldw	r5,84(sp)
 800a444:	000d883a 	mov	r6,zero
 800a448:	01cff834 	movhi	r7,16352
 800a44c:	8010cd80 	call	8010cd8 <__adddf3>
 800a450:	880d883a 	mov	r6,r17
 800a454:	a00f883a 	mov	r7,r20
 800a458:	1009883a 	mov	r4,r2
 800a45c:	180b883a 	mov	r5,r3
 800a460:	8011fdc0 	call	8011fdc <__ledf2>
 800a464:	10003e0e 	bge	r2,zero,800a560 <_dtoa_r+0x1548>
 800a468:	d9001317 	ldw	r4,76(sp)
 800a46c:	bd3fffc3 	ldbu	r20,-1(r23)
 800a470:	d9000515 	stw	r4,20(sp)
 800a474:	003d3b06 	br	8009964 <_dtoa_r+0x94c>
 800a478:	0027883a 	mov	r19,zero
 800a47c:	003f1b06 	br	800a0ec <_dtoa_r+0x10d4>
 800a480:	d8800817 	ldw	r2,32(sp)
 800a484:	11e9c83a 	sub	r20,r2,r7
 800a488:	0005883a 	mov	r2,zero
 800a48c:	003d5406 	br	80099e0 <_dtoa_r+0x9c8>
 800a490:	00800044 	movi	r2,1
 800a494:	003dc706 	br	8009bb4 <_dtoa_r+0xb9c>
 800a498:	d8c00217 	ldw	r3,8(sp)
 800a49c:	00800d84 	movi	r2,54
 800a4a0:	dd400a17 	ldw	r21,40(sp)
 800a4a4:	10c5c83a 	sub	r2,r2,r3
 800a4a8:	dd000817 	ldw	r20,32(sp)
 800a4ac:	003d4c06 	br	80099e0 <_dtoa_r+0x9c8>
 800a4b0:	dc800f15 	stw	r18,60(sp)
 800a4b4:	dcc01015 	stw	r19,64(sp)
 800a4b8:	04000084 	movi	r16,2
 800a4bc:	003bed06 	br	8009474 <_dtoa_r+0x45c>
 800a4c0:	d9000617 	ldw	r4,24(sp)
 800a4c4:	203f0d26 	beq	r4,zero,800a0fc <_dtoa_r+0x10e4>
 800a4c8:	d9800c17 	ldw	r6,48(sp)
 800a4cc:	01bcab0e 	bge	zero,r6,800977c <_dtoa_r+0x764>
 800a4d0:	d9401017 	ldw	r5,64(sp)
 800a4d4:	d9000f17 	ldw	r4,60(sp)
 800a4d8:	000d883a 	mov	r6,zero
 800a4dc:	01d00934 	movhi	r7,16420
 800a4e0:	80058b80 	call	80058b8 <__muldf3>
 800a4e4:	81000044 	addi	r4,r16,1
 800a4e8:	d8800f15 	stw	r2,60(sp)
 800a4ec:	d8c01015 	stw	r3,64(sp)
 800a4f0:	8012a4c0 	call	8012a4c <__floatsidf>
 800a4f4:	d9800f17 	ldw	r6,60(sp)
 800a4f8:	d9c01017 	ldw	r7,64(sp)
 800a4fc:	1009883a 	mov	r4,r2
 800a500:	180b883a 	mov	r5,r3
 800a504:	80058b80 	call	80058b8 <__muldf3>
 800a508:	01d00734 	movhi	r7,16412
 800a50c:	000d883a 	mov	r6,zero
 800a510:	1009883a 	mov	r4,r2
 800a514:	180b883a 	mov	r5,r3
 800a518:	8010cd80 	call	8010cd8 <__adddf3>
 800a51c:	d9c00517 	ldw	r7,20(sp)
 800a520:	047f3034 	movhi	r17,64704
 800a524:	1021883a 	mov	r16,r2
 800a528:	39ffffc4 	addi	r7,r7,-1
 800a52c:	d9c01315 	stw	r7,76(sp)
 800a530:	1c63883a 	add	r17,r3,r17
 800a534:	db000c17 	ldw	r12,48(sp)
 800a538:	003bea06 	br	80094e4 <_dtoa_r+0x4cc>
 800a53c:	dc000915 	stw	r16,36(sp)
 800a540:	003e0e06 	br	8009d7c <_dtoa_r+0xd64>
 800a544:	01000e44 	movi	r4,57
 800a548:	8825883a 	mov	r18,r17
 800a54c:	9dc00044 	addi	r23,r19,1
 800a550:	99000005 	stb	r4,0(r19)
 800a554:	a023883a 	mov	r17,r20
 800a558:	dc000915 	stw	r16,36(sp)
 800a55c:	003da406 	br	8009bf0 <_dtoa_r+0xbd8>
 800a560:	d9801417 	ldw	r6,80(sp)
 800a564:	d9c01517 	ldw	r7,84(sp)
 800a568:	0009883a 	mov	r4,zero
 800a56c:	014ff834 	movhi	r5,16352
 800a570:	80120d00 	call	80120d0 <__subdf3>
 800a574:	880d883a 	mov	r6,r17
 800a578:	a00f883a 	mov	r7,r20
 800a57c:	1009883a 	mov	r4,r2
 800a580:	180b883a 	mov	r5,r3
 800a584:	80057dc0 	call	80057dc <__gedf2>
 800a588:	00bc7c0e 	bge	zero,r2,800977c <_dtoa_r+0x764>
 800a58c:	01000c04 	movi	r4,48
 800a590:	00000106 	br	800a598 <_dtoa_r+0x1580>
 800a594:	102f883a 	mov	r23,r2
 800a598:	b8bfffc4 	addi	r2,r23,-1
 800a59c:	10c00007 	ldb	r3,0(r2)
 800a5a0:	193ffc26 	beq	r3,r4,800a594 <_dtoa_r+0x157c>
 800a5a4:	d9801317 	ldw	r6,76(sp)
 800a5a8:	d9800515 	stw	r6,20(sp)
 800a5ac:	003c4406 	br	80096c0 <_dtoa_r+0x6a8>
 800a5b0:	d9801317 	ldw	r6,76(sp)
 800a5b4:	d9800515 	stw	r6,20(sp)
 800a5b8:	003cea06 	br	8009964 <_dtoa_r+0x94c>
 800a5bc:	dd800f17 	ldw	r22,60(sp)
 800a5c0:	dcc01017 	ldw	r19,64(sp)
 800a5c4:	dc801217 	ldw	r18,72(sp)
 800a5c8:	003c6c06 	br	800977c <_dtoa_r+0x764>
 800a5cc:	903e031e 	bne	r18,zero,8009ddc <_dtoa_r+0xdc4>
 800a5d0:	003ebb06 	br	800a0c0 <_dtoa_r+0x10a8>
 800a5d4:	103e6c1e 	bne	r2,zero,8009f88 <_dtoa_r+0xf70>
 800a5d8:	4080004c 	andi	r2,r8,1
 800a5dc:	103e6a26 	beq	r2,zero,8009f88 <_dtoa_r+0xf70>
 800a5e0:	003e6606 	br	8009f7c <_dtoa_r+0xf64>
 800a5e4:	d8c00317 	ldw	r3,12(sp)
 800a5e8:	00800084 	movi	r2,2
 800a5ec:	10c02916 	blt	r2,r3,800a694 <_dtoa_r+0x167c>
 800a5f0:	d9000c17 	ldw	r4,48(sp)
 800a5f4:	003e8806 	br	800a018 <_dtoa_r+0x1000>
 800a5f8:	04000084 	movi	r16,2
 800a5fc:	003b9d06 	br	8009474 <_dtoa_r+0x45c>
 800a600:	d9001317 	ldw	r4,76(sp)
 800a604:	d9000515 	stw	r4,20(sp)
 800a608:	003cd606 	br	8009964 <_dtoa_r+0x94c>
 800a60c:	d8801317 	ldw	r2,76(sp)
 800a610:	d8800515 	stw	r2,20(sp)
 800a614:	003c2a06 	br	80096c0 <_dtoa_r+0x6a8>
 800a618:	d9800317 	ldw	r6,12(sp)
 800a61c:	00800084 	movi	r2,2
 800a620:	11801516 	blt	r2,r6,800a678 <_dtoa_r+0x1660>
 800a624:	d9c00c17 	ldw	r7,48(sp)
 800a628:	d9c00615 	stw	r7,24(sp)
 800a62c:	003df706 	br	8009e0c <_dtoa_r+0xdf4>
 800a630:	193d3926 	beq	r3,r4,8009b18 <_dtoa_r+0xb00>
 800a634:	00c00f04 	movi	r3,60
 800a638:	1885c83a 	sub	r2,r3,r2
 800a63c:	003ddf06 	br	8009dbc <_dtoa_r+0xda4>
 800a640:	e009883a 	mov	r4,fp
 800a644:	e0001115 	stw	zero,68(fp)
 800a648:	000b883a 	mov	r5,zero
 800a64c:	800c4bc0 	call	800c4bc <_Balloc>
 800a650:	d8800715 	stw	r2,28(sp)
 800a654:	d8c00717 	ldw	r3,28(sp)
 800a658:	00bfffc4 	movi	r2,-1
 800a65c:	01000044 	movi	r4,1
 800a660:	d8800c15 	stw	r2,48(sp)
 800a664:	e0c01015 	stw	r3,64(fp)
 800a668:	d9000b15 	stw	r4,44(sp)
 800a66c:	d8800615 	stw	r2,24(sp)
 800a670:	d8002215 	stw	zero,136(sp)
 800a674:	003c4106 	br	800977c <_dtoa_r+0x764>
 800a678:	d8c00c17 	ldw	r3,48(sp)
 800a67c:	d8c00615 	stw	r3,24(sp)
 800a680:	003e7006 	br	800a044 <_dtoa_r+0x102c>
 800a684:	04400044 	movi	r17,1
 800a688:	003b2006 	br	800930c <_dtoa_r+0x2f4>
 800a68c:	000b883a 	mov	r5,zero
 800a690:	003b3d06 	br	8009388 <_dtoa_r+0x370>
 800a694:	d8800c17 	ldw	r2,48(sp)
 800a698:	d8800615 	stw	r2,24(sp)
 800a69c:	003e6906 	br	800a044 <_dtoa_r+0x102c>

0800a6a0 <__sflush_r>:
 800a6a0:	2880030b 	ldhu	r2,12(r5)
 800a6a4:	defffb04 	addi	sp,sp,-20
 800a6a8:	dcc00315 	stw	r19,12(sp)
 800a6ac:	dc400115 	stw	r17,4(sp)
 800a6b0:	dfc00415 	stw	ra,16(sp)
 800a6b4:	dc800215 	stw	r18,8(sp)
 800a6b8:	dc000015 	stw	r16,0(sp)
 800a6bc:	10c0020c 	andi	r3,r2,8
 800a6c0:	2823883a 	mov	r17,r5
 800a6c4:	2027883a 	mov	r19,r4
 800a6c8:	1800311e 	bne	r3,zero,800a790 <__sflush_r+0xf0>
 800a6cc:	28c00117 	ldw	r3,4(r5)
 800a6d0:	10820014 	ori	r2,r2,2048
 800a6d4:	2880030d 	sth	r2,12(r5)
 800a6d8:	00c04b0e 	bge	zero,r3,800a808 <__sflush_r+0x168>
 800a6dc:	8a000a17 	ldw	r8,40(r17)
 800a6e0:	40002326 	beq	r8,zero,800a770 <__sflush_r+0xd0>
 800a6e4:	9c000017 	ldw	r16,0(r19)
 800a6e8:	10c4000c 	andi	r3,r2,4096
 800a6ec:	98000015 	stw	zero,0(r19)
 800a6f0:	18004826 	beq	r3,zero,800a814 <__sflush_r+0x174>
 800a6f4:	89801417 	ldw	r6,80(r17)
 800a6f8:	10c0010c 	andi	r3,r2,4
 800a6fc:	18000626 	beq	r3,zero,800a718 <__sflush_r+0x78>
 800a700:	88c00117 	ldw	r3,4(r17)
 800a704:	88800c17 	ldw	r2,48(r17)
 800a708:	30cdc83a 	sub	r6,r6,r3
 800a70c:	10000226 	beq	r2,zero,800a718 <__sflush_r+0x78>
 800a710:	88800f17 	ldw	r2,60(r17)
 800a714:	308dc83a 	sub	r6,r6,r2
 800a718:	89400717 	ldw	r5,28(r17)
 800a71c:	000f883a 	mov	r7,zero
 800a720:	9809883a 	mov	r4,r19
 800a724:	403ee83a 	callr	r8
 800a728:	00ffffc4 	movi	r3,-1
 800a72c:	10c04426 	beq	r2,r3,800a840 <__sflush_r+0x1a0>
 800a730:	88c0030b 	ldhu	r3,12(r17)
 800a734:	89000417 	ldw	r4,16(r17)
 800a738:	88000115 	stw	zero,4(r17)
 800a73c:	197dffcc 	andi	r5,r3,63487
 800a740:	8940030d 	sth	r5,12(r17)
 800a744:	89000015 	stw	r4,0(r17)
 800a748:	18c4000c 	andi	r3,r3,4096
 800a74c:	18002c1e 	bne	r3,zero,800a800 <__sflush_r+0x160>
 800a750:	89400c17 	ldw	r5,48(r17)
 800a754:	9c000015 	stw	r16,0(r19)
 800a758:	28000526 	beq	r5,zero,800a770 <__sflush_r+0xd0>
 800a75c:	88801004 	addi	r2,r17,64
 800a760:	28800226 	beq	r5,r2,800a76c <__sflush_r+0xcc>
 800a764:	9809883a 	mov	r4,r19
 800a768:	800ae1c0 	call	800ae1c <_free_r>
 800a76c:	88000c15 	stw	zero,48(r17)
 800a770:	0005883a 	mov	r2,zero
 800a774:	dfc00417 	ldw	ra,16(sp)
 800a778:	dcc00317 	ldw	r19,12(sp)
 800a77c:	dc800217 	ldw	r18,8(sp)
 800a780:	dc400117 	ldw	r17,4(sp)
 800a784:	dc000017 	ldw	r16,0(sp)
 800a788:	dec00504 	addi	sp,sp,20
 800a78c:	f800283a 	ret
 800a790:	2c800417 	ldw	r18,16(r5)
 800a794:	903ff626 	beq	r18,zero,800a770 <__sflush_r+0xd0>
 800a798:	2c000017 	ldw	r16,0(r5)
 800a79c:	108000cc 	andi	r2,r2,3
 800a7a0:	2c800015 	stw	r18,0(r5)
 800a7a4:	84a1c83a 	sub	r16,r16,r18
 800a7a8:	1000131e 	bne	r2,zero,800a7f8 <__sflush_r+0x158>
 800a7ac:	28800517 	ldw	r2,20(r5)
 800a7b0:	88800215 	stw	r2,8(r17)
 800a7b4:	04000316 	blt	zero,r16,800a7c4 <__sflush_r+0x124>
 800a7b8:	003fed06 	br	800a770 <__sflush_r+0xd0>
 800a7bc:	90a5883a 	add	r18,r18,r2
 800a7c0:	043feb0e 	bge	zero,r16,800a770 <__sflush_r+0xd0>
 800a7c4:	88800917 	ldw	r2,36(r17)
 800a7c8:	89400717 	ldw	r5,28(r17)
 800a7cc:	800f883a 	mov	r7,r16
 800a7d0:	900d883a 	mov	r6,r18
 800a7d4:	9809883a 	mov	r4,r19
 800a7d8:	103ee83a 	callr	r2
 800a7dc:	80a1c83a 	sub	r16,r16,r2
 800a7e0:	00bff616 	blt	zero,r2,800a7bc <__sflush_r+0x11c>
 800a7e4:	88c0030b 	ldhu	r3,12(r17)
 800a7e8:	00bfffc4 	movi	r2,-1
 800a7ec:	18c01014 	ori	r3,r3,64
 800a7f0:	88c0030d 	sth	r3,12(r17)
 800a7f4:	003fdf06 	br	800a774 <__sflush_r+0xd4>
 800a7f8:	0005883a 	mov	r2,zero
 800a7fc:	003fec06 	br	800a7b0 <__sflush_r+0x110>
 800a800:	88801415 	stw	r2,80(r17)
 800a804:	003fd206 	br	800a750 <__sflush_r+0xb0>
 800a808:	28c00f17 	ldw	r3,60(r5)
 800a80c:	00ffb316 	blt	zero,r3,800a6dc <__sflush_r+0x3c>
 800a810:	003fd706 	br	800a770 <__sflush_r+0xd0>
 800a814:	89400717 	ldw	r5,28(r17)
 800a818:	000d883a 	mov	r6,zero
 800a81c:	01c00044 	movi	r7,1
 800a820:	9809883a 	mov	r4,r19
 800a824:	403ee83a 	callr	r8
 800a828:	100d883a 	mov	r6,r2
 800a82c:	00bfffc4 	movi	r2,-1
 800a830:	30801426 	beq	r6,r2,800a884 <__sflush_r+0x1e4>
 800a834:	8880030b 	ldhu	r2,12(r17)
 800a838:	8a000a17 	ldw	r8,40(r17)
 800a83c:	003fae06 	br	800a6f8 <__sflush_r+0x58>
 800a840:	98c00017 	ldw	r3,0(r19)
 800a844:	183fba26 	beq	r3,zero,800a730 <__sflush_r+0x90>
 800a848:	01000744 	movi	r4,29
 800a84c:	19000626 	beq	r3,r4,800a868 <__sflush_r+0x1c8>
 800a850:	01000584 	movi	r4,22
 800a854:	19000426 	beq	r3,r4,800a868 <__sflush_r+0x1c8>
 800a858:	88c0030b 	ldhu	r3,12(r17)
 800a85c:	18c01014 	ori	r3,r3,64
 800a860:	88c0030d 	sth	r3,12(r17)
 800a864:	003fc306 	br	800a774 <__sflush_r+0xd4>
 800a868:	8880030b 	ldhu	r2,12(r17)
 800a86c:	88c00417 	ldw	r3,16(r17)
 800a870:	88000115 	stw	zero,4(r17)
 800a874:	10bdffcc 	andi	r2,r2,63487
 800a878:	8880030d 	sth	r2,12(r17)
 800a87c:	88c00015 	stw	r3,0(r17)
 800a880:	003fb306 	br	800a750 <__sflush_r+0xb0>
 800a884:	98800017 	ldw	r2,0(r19)
 800a888:	103fea26 	beq	r2,zero,800a834 <__sflush_r+0x194>
 800a88c:	00c00744 	movi	r3,29
 800a890:	10c00226 	beq	r2,r3,800a89c <__sflush_r+0x1fc>
 800a894:	00c00584 	movi	r3,22
 800a898:	10c0031e 	bne	r2,r3,800a8a8 <__sflush_r+0x208>
 800a89c:	9c000015 	stw	r16,0(r19)
 800a8a0:	0005883a 	mov	r2,zero
 800a8a4:	003fb306 	br	800a774 <__sflush_r+0xd4>
 800a8a8:	88c0030b 	ldhu	r3,12(r17)
 800a8ac:	3005883a 	mov	r2,r6
 800a8b0:	18c01014 	ori	r3,r3,64
 800a8b4:	88c0030d 	sth	r3,12(r17)
 800a8b8:	003fae06 	br	800a774 <__sflush_r+0xd4>

0800a8bc <_fflush_r>:
 800a8bc:	defffd04 	addi	sp,sp,-12
 800a8c0:	dc000115 	stw	r16,4(sp)
 800a8c4:	dfc00215 	stw	ra,8(sp)
 800a8c8:	2021883a 	mov	r16,r4
 800a8cc:	20000226 	beq	r4,zero,800a8d8 <_fflush_r+0x1c>
 800a8d0:	20800e17 	ldw	r2,56(r4)
 800a8d4:	10000c26 	beq	r2,zero,800a908 <_fflush_r+0x4c>
 800a8d8:	2880030f 	ldh	r2,12(r5)
 800a8dc:	1000051e 	bne	r2,zero,800a8f4 <_fflush_r+0x38>
 800a8e0:	0005883a 	mov	r2,zero
 800a8e4:	dfc00217 	ldw	ra,8(sp)
 800a8e8:	dc000117 	ldw	r16,4(sp)
 800a8ec:	dec00304 	addi	sp,sp,12
 800a8f0:	f800283a 	ret
 800a8f4:	8009883a 	mov	r4,r16
 800a8f8:	dfc00217 	ldw	ra,8(sp)
 800a8fc:	dc000117 	ldw	r16,4(sp)
 800a900:	dec00304 	addi	sp,sp,12
 800a904:	800a6a01 	jmpi	800a6a0 <__sflush_r>
 800a908:	d9400015 	stw	r5,0(sp)
 800a90c:	800aca80 	call	800aca8 <__sinit>
 800a910:	d9400017 	ldw	r5,0(sp)
 800a914:	003ff006 	br	800a8d8 <_fflush_r+0x1c>

0800a918 <fflush>:
 800a918:	20000526 	beq	r4,zero,800a930 <fflush+0x18>
 800a91c:	00820074 	movhi	r2,2049
 800a920:	109e2204 	addi	r2,r2,30856
 800a924:	200b883a 	mov	r5,r4
 800a928:	11000017 	ldw	r4,0(r2)
 800a92c:	800a8bc1 	jmpi	800a8bc <_fflush_r>
 800a930:	00820074 	movhi	r2,2049
 800a934:	109e2104 	addi	r2,r2,30852
 800a938:	11000017 	ldw	r4,0(r2)
 800a93c:	01420074 	movhi	r5,2049
 800a940:	296a2f04 	addi	r5,r5,-22340
 800a944:	800b6b81 	jmpi	800b6b8 <_fwalk_reent>

0800a948 <__fp_unlock>:
 800a948:	0005883a 	mov	r2,zero
 800a94c:	f800283a 	ret

0800a950 <_cleanup_r>:
 800a950:	01420074 	movhi	r5,2049
 800a954:	297e4004 	addi	r5,r5,-1792
 800a958:	800b6b81 	jmpi	800b6b8 <_fwalk_reent>

0800a95c <__sinit.part.1>:
 800a95c:	defff704 	addi	sp,sp,-36
 800a960:	00c20074 	movhi	r3,2049
 800a964:	dfc00815 	stw	ra,32(sp)
 800a968:	ddc00715 	stw	r23,28(sp)
 800a96c:	dd800615 	stw	r22,24(sp)
 800a970:	dd400515 	stw	r21,20(sp)
 800a974:	dd000415 	stw	r20,16(sp)
 800a978:	dcc00315 	stw	r19,12(sp)
 800a97c:	dc800215 	stw	r18,8(sp)
 800a980:	dc400115 	stw	r17,4(sp)
 800a984:	dc000015 	stw	r16,0(sp)
 800a988:	18ea5404 	addi	r3,r3,-22192
 800a98c:	24000117 	ldw	r16,4(r4)
 800a990:	20c00f15 	stw	r3,60(r4)
 800a994:	2080bb04 	addi	r2,r4,748
 800a998:	00c000c4 	movi	r3,3
 800a99c:	20c0b915 	stw	r3,740(r4)
 800a9a0:	2080ba15 	stw	r2,744(r4)
 800a9a4:	2000b815 	stw	zero,736(r4)
 800a9a8:	05c00204 	movi	r23,8
 800a9ac:	00800104 	movi	r2,4
 800a9b0:	2025883a 	mov	r18,r4
 800a9b4:	b80d883a 	mov	r6,r23
 800a9b8:	81001704 	addi	r4,r16,92
 800a9bc:	000b883a 	mov	r5,zero
 800a9c0:	80000015 	stw	zero,0(r16)
 800a9c4:	80000115 	stw	zero,4(r16)
 800a9c8:	80000215 	stw	zero,8(r16)
 800a9cc:	8080030d 	sth	r2,12(r16)
 800a9d0:	80001915 	stw	zero,100(r16)
 800a9d4:	8000038d 	sth	zero,14(r16)
 800a9d8:	80000415 	stw	zero,16(r16)
 800a9dc:	80000515 	stw	zero,20(r16)
 800a9e0:	80000615 	stw	zero,24(r16)
 800a9e4:	80063b40 	call	80063b4 <memset>
 800a9e8:	05820074 	movhi	r22,2049
 800a9ec:	94400217 	ldw	r17,8(r18)
 800a9f0:	05420074 	movhi	r21,2049
 800a9f4:	05020074 	movhi	r20,2049
 800a9f8:	04c20074 	movhi	r19,2049
 800a9fc:	b5b74204 	addi	r22,r22,-8952
 800aa00:	ad775904 	addi	r21,r21,-8860
 800aa04:	a5377804 	addi	r20,r20,-8736
 800aa08:	9cf78f04 	addi	r19,r19,-8644
 800aa0c:	85800815 	stw	r22,32(r16)
 800aa10:	85400915 	stw	r21,36(r16)
 800aa14:	85000a15 	stw	r20,40(r16)
 800aa18:	84c00b15 	stw	r19,44(r16)
 800aa1c:	84000715 	stw	r16,28(r16)
 800aa20:	00800284 	movi	r2,10
 800aa24:	8880030d 	sth	r2,12(r17)
 800aa28:	00800044 	movi	r2,1
 800aa2c:	b80d883a 	mov	r6,r23
 800aa30:	89001704 	addi	r4,r17,92
 800aa34:	000b883a 	mov	r5,zero
 800aa38:	88000015 	stw	zero,0(r17)
 800aa3c:	88000115 	stw	zero,4(r17)
 800aa40:	88000215 	stw	zero,8(r17)
 800aa44:	88001915 	stw	zero,100(r17)
 800aa48:	8880038d 	sth	r2,14(r17)
 800aa4c:	88000415 	stw	zero,16(r17)
 800aa50:	88000515 	stw	zero,20(r17)
 800aa54:	88000615 	stw	zero,24(r17)
 800aa58:	80063b40 	call	80063b4 <memset>
 800aa5c:	94000317 	ldw	r16,12(r18)
 800aa60:	00800484 	movi	r2,18
 800aa64:	8c400715 	stw	r17,28(r17)
 800aa68:	8d800815 	stw	r22,32(r17)
 800aa6c:	8d400915 	stw	r21,36(r17)
 800aa70:	8d000a15 	stw	r20,40(r17)
 800aa74:	8cc00b15 	stw	r19,44(r17)
 800aa78:	8080030d 	sth	r2,12(r16)
 800aa7c:	00800084 	movi	r2,2
 800aa80:	80000015 	stw	zero,0(r16)
 800aa84:	80000115 	stw	zero,4(r16)
 800aa88:	80000215 	stw	zero,8(r16)
 800aa8c:	80001915 	stw	zero,100(r16)
 800aa90:	8080038d 	sth	r2,14(r16)
 800aa94:	80000415 	stw	zero,16(r16)
 800aa98:	80000515 	stw	zero,20(r16)
 800aa9c:	80000615 	stw	zero,24(r16)
 800aaa0:	b80d883a 	mov	r6,r23
 800aaa4:	000b883a 	mov	r5,zero
 800aaa8:	81001704 	addi	r4,r16,92
 800aaac:	80063b40 	call	80063b4 <memset>
 800aab0:	00800044 	movi	r2,1
 800aab4:	84000715 	stw	r16,28(r16)
 800aab8:	85800815 	stw	r22,32(r16)
 800aabc:	85400915 	stw	r21,36(r16)
 800aac0:	85000a15 	stw	r20,40(r16)
 800aac4:	84c00b15 	stw	r19,44(r16)
 800aac8:	90800e15 	stw	r2,56(r18)
 800aacc:	dfc00817 	ldw	ra,32(sp)
 800aad0:	ddc00717 	ldw	r23,28(sp)
 800aad4:	dd800617 	ldw	r22,24(sp)
 800aad8:	dd400517 	ldw	r21,20(sp)
 800aadc:	dd000417 	ldw	r20,16(sp)
 800aae0:	dcc00317 	ldw	r19,12(sp)
 800aae4:	dc800217 	ldw	r18,8(sp)
 800aae8:	dc400117 	ldw	r17,4(sp)
 800aaec:	dc000017 	ldw	r16,0(sp)
 800aaf0:	dec00904 	addi	sp,sp,36
 800aaf4:	f800283a 	ret

0800aaf8 <__fp_lock>:
 800aaf8:	0005883a 	mov	r2,zero
 800aafc:	f800283a 	ret

0800ab00 <__sfmoreglue>:
 800ab00:	defffc04 	addi	sp,sp,-16
 800ab04:	dc800215 	stw	r18,8(sp)
 800ab08:	2825883a 	mov	r18,r5
 800ab0c:	dc000015 	stw	r16,0(sp)
 800ab10:	01401a04 	movi	r5,104
 800ab14:	2021883a 	mov	r16,r4
 800ab18:	913fffc4 	addi	r4,r18,-1
 800ab1c:	dfc00315 	stw	ra,12(sp)
 800ab20:	dc400115 	stw	r17,4(sp)
 800ab24:	80057b40 	call	80057b4 <__mulsi3>
 800ab28:	8009883a 	mov	r4,r16
 800ab2c:	11401d04 	addi	r5,r2,116
 800ab30:	1023883a 	mov	r17,r2
 800ab34:	800ba700 	call	800ba70 <_malloc_r>
 800ab38:	1021883a 	mov	r16,r2
 800ab3c:	10000726 	beq	r2,zero,800ab5c <__sfmoreglue+0x5c>
 800ab40:	11000304 	addi	r4,r2,12
 800ab44:	10000015 	stw	zero,0(r2)
 800ab48:	14800115 	stw	r18,4(r2)
 800ab4c:	11000215 	stw	r4,8(r2)
 800ab50:	89801a04 	addi	r6,r17,104
 800ab54:	000b883a 	mov	r5,zero
 800ab58:	80063b40 	call	80063b4 <memset>
 800ab5c:	8005883a 	mov	r2,r16
 800ab60:	dfc00317 	ldw	ra,12(sp)
 800ab64:	dc800217 	ldw	r18,8(sp)
 800ab68:	dc400117 	ldw	r17,4(sp)
 800ab6c:	dc000017 	ldw	r16,0(sp)
 800ab70:	dec00404 	addi	sp,sp,16
 800ab74:	f800283a 	ret

0800ab78 <__sfp>:
 800ab78:	defffb04 	addi	sp,sp,-20
 800ab7c:	dc000015 	stw	r16,0(sp)
 800ab80:	04020074 	movhi	r16,2049
 800ab84:	841e2104 	addi	r16,r16,30852
 800ab88:	dcc00315 	stw	r19,12(sp)
 800ab8c:	2027883a 	mov	r19,r4
 800ab90:	81000017 	ldw	r4,0(r16)
 800ab94:	dfc00415 	stw	ra,16(sp)
 800ab98:	dc800215 	stw	r18,8(sp)
 800ab9c:	20800e17 	ldw	r2,56(r4)
 800aba0:	dc400115 	stw	r17,4(sp)
 800aba4:	1000021e 	bne	r2,zero,800abb0 <__sfp+0x38>
 800aba8:	800a95c0 	call	800a95c <__sinit.part.1>
 800abac:	81000017 	ldw	r4,0(r16)
 800abb0:	2480b804 	addi	r18,r4,736
 800abb4:	047fffc4 	movi	r17,-1
 800abb8:	91000117 	ldw	r4,4(r18)
 800abbc:	94000217 	ldw	r16,8(r18)
 800abc0:	213fffc4 	addi	r4,r4,-1
 800abc4:	20000a16 	blt	r4,zero,800abf0 <__sfp+0x78>
 800abc8:	8080030f 	ldh	r2,12(r16)
 800abcc:	10000c26 	beq	r2,zero,800ac00 <__sfp+0x88>
 800abd0:	80c01d04 	addi	r3,r16,116
 800abd4:	00000206 	br	800abe0 <__sfp+0x68>
 800abd8:	18bfe60f 	ldh	r2,-104(r3)
 800abdc:	10000826 	beq	r2,zero,800ac00 <__sfp+0x88>
 800abe0:	213fffc4 	addi	r4,r4,-1
 800abe4:	1c3ffd04 	addi	r16,r3,-12
 800abe8:	18c01a04 	addi	r3,r3,104
 800abec:	247ffa1e 	bne	r4,r17,800abd8 <__sfp+0x60>
 800abf0:	90800017 	ldw	r2,0(r18)
 800abf4:	10001d26 	beq	r2,zero,800ac6c <__sfp+0xf4>
 800abf8:	1025883a 	mov	r18,r2
 800abfc:	003fee06 	br	800abb8 <__sfp+0x40>
 800ac00:	00bfffc4 	movi	r2,-1
 800ac04:	8080038d 	sth	r2,14(r16)
 800ac08:	00800044 	movi	r2,1
 800ac0c:	8080030d 	sth	r2,12(r16)
 800ac10:	80001915 	stw	zero,100(r16)
 800ac14:	80000015 	stw	zero,0(r16)
 800ac18:	80000215 	stw	zero,8(r16)
 800ac1c:	80000115 	stw	zero,4(r16)
 800ac20:	80000415 	stw	zero,16(r16)
 800ac24:	80000515 	stw	zero,20(r16)
 800ac28:	80000615 	stw	zero,24(r16)
 800ac2c:	01800204 	movi	r6,8
 800ac30:	000b883a 	mov	r5,zero
 800ac34:	81001704 	addi	r4,r16,92
 800ac38:	80063b40 	call	80063b4 <memset>
 800ac3c:	8005883a 	mov	r2,r16
 800ac40:	80000c15 	stw	zero,48(r16)
 800ac44:	80000d15 	stw	zero,52(r16)
 800ac48:	80001115 	stw	zero,68(r16)
 800ac4c:	80001215 	stw	zero,72(r16)
 800ac50:	dfc00417 	ldw	ra,16(sp)
 800ac54:	dcc00317 	ldw	r19,12(sp)
 800ac58:	dc800217 	ldw	r18,8(sp)
 800ac5c:	dc400117 	ldw	r17,4(sp)
 800ac60:	dc000017 	ldw	r16,0(sp)
 800ac64:	dec00504 	addi	sp,sp,20
 800ac68:	f800283a 	ret
 800ac6c:	01400104 	movi	r5,4
 800ac70:	9809883a 	mov	r4,r19
 800ac74:	800ab000 	call	800ab00 <__sfmoreglue>
 800ac78:	90800015 	stw	r2,0(r18)
 800ac7c:	103fde1e 	bne	r2,zero,800abf8 <__sfp+0x80>
 800ac80:	00800304 	movi	r2,12
 800ac84:	98800015 	stw	r2,0(r19)
 800ac88:	0005883a 	mov	r2,zero
 800ac8c:	003ff006 	br	800ac50 <__sfp+0xd8>

0800ac90 <_cleanup>:
 800ac90:	00820074 	movhi	r2,2049
 800ac94:	109e2104 	addi	r2,r2,30852
 800ac98:	11000017 	ldw	r4,0(r2)
 800ac9c:	01420074 	movhi	r5,2049
 800aca0:	297e4004 	addi	r5,r5,-1792
 800aca4:	800b6b81 	jmpi	800b6b8 <_fwalk_reent>

0800aca8 <__sinit>:
 800aca8:	20800e17 	ldw	r2,56(r4)
 800acac:	10000126 	beq	r2,zero,800acb4 <__sinit+0xc>
 800acb0:	f800283a 	ret
 800acb4:	800a95c1 	jmpi	800a95c <__sinit.part.1>

0800acb8 <__sfp_lock_acquire>:
 800acb8:	f800283a 	ret

0800acbc <__sfp_lock_release>:
 800acbc:	f800283a 	ret

0800acc0 <__sinit_lock_acquire>:
 800acc0:	f800283a 	ret

0800acc4 <__sinit_lock_release>:
 800acc4:	f800283a 	ret

0800acc8 <__fp_lock_all>:
 800acc8:	00820074 	movhi	r2,2049
 800accc:	109e2204 	addi	r2,r2,30856
 800acd0:	11000017 	ldw	r4,0(r2)
 800acd4:	01420074 	movhi	r5,2049
 800acd8:	296abe04 	addi	r5,r5,-21768
 800acdc:	800b5f41 	jmpi	800b5f4 <_fwalk>

0800ace0 <__fp_unlock_all>:
 800ace0:	00820074 	movhi	r2,2049
 800ace4:	109e2204 	addi	r2,r2,30856
 800ace8:	11000017 	ldw	r4,0(r2)
 800acec:	01420074 	movhi	r5,2049
 800acf0:	296a5204 	addi	r5,r5,-22200
 800acf4:	800b5f41 	jmpi	800b5f4 <_fwalk>

0800acf8 <_malloc_trim_r>:
 800acf8:	defffb04 	addi	sp,sp,-20
 800acfc:	dcc00315 	stw	r19,12(sp)
 800ad00:	04c20074 	movhi	r19,2049
 800ad04:	dc800215 	stw	r18,8(sp)
 800ad08:	dc400115 	stw	r17,4(sp)
 800ad0c:	dc000015 	stw	r16,0(sp)
 800ad10:	dfc00415 	stw	ra,16(sp)
 800ad14:	2821883a 	mov	r16,r5
 800ad18:	9cd89104 	addi	r19,r19,25156
 800ad1c:	2025883a 	mov	r18,r4
 800ad20:	80133600 	call	8013360 <__malloc_lock>
 800ad24:	98800217 	ldw	r2,8(r19)
 800ad28:	14400117 	ldw	r17,4(r2)
 800ad2c:	00bfff04 	movi	r2,-4
 800ad30:	88a2703a 	and	r17,r17,r2
 800ad34:	8c21c83a 	sub	r16,r17,r16
 800ad38:	8403fbc4 	addi	r16,r16,4079
 800ad3c:	8020d33a 	srli	r16,r16,12
 800ad40:	0083ffc4 	movi	r2,4095
 800ad44:	843fffc4 	addi	r16,r16,-1
 800ad48:	8020933a 	slli	r16,r16,12
 800ad4c:	1400060e 	bge	r2,r16,800ad68 <_malloc_trim_r+0x70>
 800ad50:	000b883a 	mov	r5,zero
 800ad54:	9009883a 	mov	r4,r18
 800ad58:	800dcb40 	call	800dcb4 <_sbrk_r>
 800ad5c:	98c00217 	ldw	r3,8(r19)
 800ad60:	1c47883a 	add	r3,r3,r17
 800ad64:	10c00a26 	beq	r2,r3,800ad90 <_malloc_trim_r+0x98>
 800ad68:	9009883a 	mov	r4,r18
 800ad6c:	80133840 	call	8013384 <__malloc_unlock>
 800ad70:	0005883a 	mov	r2,zero
 800ad74:	dfc00417 	ldw	ra,16(sp)
 800ad78:	dcc00317 	ldw	r19,12(sp)
 800ad7c:	dc800217 	ldw	r18,8(sp)
 800ad80:	dc400117 	ldw	r17,4(sp)
 800ad84:	dc000017 	ldw	r16,0(sp)
 800ad88:	dec00504 	addi	sp,sp,20
 800ad8c:	f800283a 	ret
 800ad90:	040bc83a 	sub	r5,zero,r16
 800ad94:	9009883a 	mov	r4,r18
 800ad98:	800dcb40 	call	800dcb4 <_sbrk_r>
 800ad9c:	00ffffc4 	movi	r3,-1
 800ada0:	10c00d26 	beq	r2,r3,800add8 <_malloc_trim_r+0xe0>
 800ada4:	00c200b4 	movhi	r3,2050
 800ada8:	18e5fa04 	addi	r3,r3,-26648
 800adac:	18800017 	ldw	r2,0(r3)
 800adb0:	99000217 	ldw	r4,8(r19)
 800adb4:	8c23c83a 	sub	r17,r17,r16
 800adb8:	8c400054 	ori	r17,r17,1
 800adbc:	1421c83a 	sub	r16,r2,r16
 800adc0:	24400115 	stw	r17,4(r4)
 800adc4:	9009883a 	mov	r4,r18
 800adc8:	1c000015 	stw	r16,0(r3)
 800adcc:	80133840 	call	8013384 <__malloc_unlock>
 800add0:	00800044 	movi	r2,1
 800add4:	003fe706 	br	800ad74 <_malloc_trim_r+0x7c>
 800add8:	000b883a 	mov	r5,zero
 800addc:	9009883a 	mov	r4,r18
 800ade0:	800dcb40 	call	800dcb4 <_sbrk_r>
 800ade4:	99000217 	ldw	r4,8(r19)
 800ade8:	014003c4 	movi	r5,15
 800adec:	1107c83a 	sub	r3,r2,r4
 800adf0:	28ffdd0e 	bge	r5,r3,800ad68 <_malloc_trim_r+0x70>
 800adf4:	01420074 	movhi	r5,2049
 800adf8:	295e2404 	addi	r5,r5,30864
 800adfc:	29400017 	ldw	r5,0(r5)
 800ae00:	18c00054 	ori	r3,r3,1
 800ae04:	20c00115 	stw	r3,4(r4)
 800ae08:	00c200b4 	movhi	r3,2050
 800ae0c:	1145c83a 	sub	r2,r2,r5
 800ae10:	18e5fa04 	addi	r3,r3,-26648
 800ae14:	18800015 	stw	r2,0(r3)
 800ae18:	003fd306 	br	800ad68 <_malloc_trim_r+0x70>

0800ae1c <_free_r>:
 800ae1c:	28004126 	beq	r5,zero,800af24 <_free_r+0x108>
 800ae20:	defffd04 	addi	sp,sp,-12
 800ae24:	dc400115 	stw	r17,4(sp)
 800ae28:	dc000015 	stw	r16,0(sp)
 800ae2c:	2023883a 	mov	r17,r4
 800ae30:	2821883a 	mov	r16,r5
 800ae34:	dfc00215 	stw	ra,8(sp)
 800ae38:	80133600 	call	8013360 <__malloc_lock>
 800ae3c:	81ffff17 	ldw	r7,-4(r16)
 800ae40:	00bfff84 	movi	r2,-2
 800ae44:	01020074 	movhi	r4,2049
 800ae48:	81bffe04 	addi	r6,r16,-8
 800ae4c:	3884703a 	and	r2,r7,r2
 800ae50:	21189104 	addi	r4,r4,25156
 800ae54:	308b883a 	add	r5,r6,r2
 800ae58:	2a400117 	ldw	r9,4(r5)
 800ae5c:	22000217 	ldw	r8,8(r4)
 800ae60:	00ffff04 	movi	r3,-4
 800ae64:	48c6703a 	and	r3,r9,r3
 800ae68:	2a005726 	beq	r5,r8,800afc8 <_free_r+0x1ac>
 800ae6c:	28c00115 	stw	r3,4(r5)
 800ae70:	39c0004c 	andi	r7,r7,1
 800ae74:	3800091e 	bne	r7,zero,800ae9c <_free_r+0x80>
 800ae78:	823ffe17 	ldw	r8,-8(r16)
 800ae7c:	22400204 	addi	r9,r4,8
 800ae80:	320dc83a 	sub	r6,r6,r8
 800ae84:	31c00217 	ldw	r7,8(r6)
 800ae88:	1205883a 	add	r2,r2,r8
 800ae8c:	3a406526 	beq	r7,r9,800b024 <_free_r+0x208>
 800ae90:	32000317 	ldw	r8,12(r6)
 800ae94:	3a000315 	stw	r8,12(r7)
 800ae98:	41c00215 	stw	r7,8(r8)
 800ae9c:	28cf883a 	add	r7,r5,r3
 800aea0:	39c00117 	ldw	r7,4(r7)
 800aea4:	39c0004c 	andi	r7,r7,1
 800aea8:	38003a26 	beq	r7,zero,800af94 <_free_r+0x178>
 800aeac:	10c00054 	ori	r3,r2,1
 800aeb0:	30c00115 	stw	r3,4(r6)
 800aeb4:	3087883a 	add	r3,r6,r2
 800aeb8:	18800015 	stw	r2,0(r3)
 800aebc:	00c07fc4 	movi	r3,511
 800aec0:	18801936 	bltu	r3,r2,800af28 <_free_r+0x10c>
 800aec4:	1004d0fa 	srli	r2,r2,3
 800aec8:	01c00044 	movi	r7,1
 800aecc:	21400117 	ldw	r5,4(r4)
 800aed0:	10c00044 	addi	r3,r2,1
 800aed4:	18c7883a 	add	r3,r3,r3
 800aed8:	1005d0ba 	srai	r2,r2,2
 800aedc:	18c7883a 	add	r3,r3,r3
 800aee0:	18c7883a 	add	r3,r3,r3
 800aee4:	1907883a 	add	r3,r3,r4
 800aee8:	3884983a 	sll	r2,r7,r2
 800aeec:	19c00017 	ldw	r7,0(r3)
 800aef0:	1a3ffe04 	addi	r8,r3,-8
 800aef4:	1144b03a 	or	r2,r2,r5
 800aef8:	32000315 	stw	r8,12(r6)
 800aefc:	31c00215 	stw	r7,8(r6)
 800af00:	20800115 	stw	r2,4(r4)
 800af04:	19800015 	stw	r6,0(r3)
 800af08:	39800315 	stw	r6,12(r7)
 800af0c:	8809883a 	mov	r4,r17
 800af10:	dfc00217 	ldw	ra,8(sp)
 800af14:	dc400117 	ldw	r17,4(sp)
 800af18:	dc000017 	ldw	r16,0(sp)
 800af1c:	dec00304 	addi	sp,sp,12
 800af20:	80133841 	jmpi	8013384 <__malloc_unlock>
 800af24:	f800283a 	ret
 800af28:	100ad27a 	srli	r5,r2,9
 800af2c:	00c00104 	movi	r3,4
 800af30:	19404a36 	bltu	r3,r5,800b05c <_free_r+0x240>
 800af34:	100ad1ba 	srli	r5,r2,6
 800af38:	28c00e44 	addi	r3,r5,57
 800af3c:	18c7883a 	add	r3,r3,r3
 800af40:	29400e04 	addi	r5,r5,56
 800af44:	18c7883a 	add	r3,r3,r3
 800af48:	18c7883a 	add	r3,r3,r3
 800af4c:	1909883a 	add	r4,r3,r4
 800af50:	20c00017 	ldw	r3,0(r4)
 800af54:	01c20074 	movhi	r7,2049
 800af58:	213ffe04 	addi	r4,r4,-8
 800af5c:	39d89104 	addi	r7,r7,25156
 800af60:	20c04426 	beq	r4,r3,800b074 <_free_r+0x258>
 800af64:	01ffff04 	movi	r7,-4
 800af68:	19400117 	ldw	r5,4(r3)
 800af6c:	29ca703a 	and	r5,r5,r7
 800af70:	1140022e 	bgeu	r2,r5,800af7c <_free_r+0x160>
 800af74:	18c00217 	ldw	r3,8(r3)
 800af78:	20fffb1e 	bne	r4,r3,800af68 <_free_r+0x14c>
 800af7c:	19000317 	ldw	r4,12(r3)
 800af80:	31000315 	stw	r4,12(r6)
 800af84:	30c00215 	stw	r3,8(r6)
 800af88:	21800215 	stw	r6,8(r4)
 800af8c:	19800315 	stw	r6,12(r3)
 800af90:	003fde06 	br	800af0c <_free_r+0xf0>
 800af94:	29c00217 	ldw	r7,8(r5)
 800af98:	10c5883a 	add	r2,r2,r3
 800af9c:	00c20074 	movhi	r3,2049
 800afa0:	18d89304 	addi	r3,r3,25164
 800afa4:	38c03b26 	beq	r7,r3,800b094 <_free_r+0x278>
 800afa8:	2a000317 	ldw	r8,12(r5)
 800afac:	11400054 	ori	r5,r2,1
 800afb0:	3087883a 	add	r3,r6,r2
 800afb4:	3a000315 	stw	r8,12(r7)
 800afb8:	41c00215 	stw	r7,8(r8)
 800afbc:	31400115 	stw	r5,4(r6)
 800afc0:	18800015 	stw	r2,0(r3)
 800afc4:	003fbd06 	br	800aebc <_free_r+0xa0>
 800afc8:	39c0004c 	andi	r7,r7,1
 800afcc:	10c5883a 	add	r2,r2,r3
 800afd0:	3800071e 	bne	r7,zero,800aff0 <_free_r+0x1d4>
 800afd4:	81fffe17 	ldw	r7,-8(r16)
 800afd8:	31cdc83a 	sub	r6,r6,r7
 800afdc:	30c00317 	ldw	r3,12(r6)
 800afe0:	31400217 	ldw	r5,8(r6)
 800afe4:	11c5883a 	add	r2,r2,r7
 800afe8:	28c00315 	stw	r3,12(r5)
 800afec:	19400215 	stw	r5,8(r3)
 800aff0:	10c00054 	ori	r3,r2,1
 800aff4:	30c00115 	stw	r3,4(r6)
 800aff8:	00c20074 	movhi	r3,2049
 800affc:	18de2504 	addi	r3,r3,30868
 800b000:	18c00017 	ldw	r3,0(r3)
 800b004:	21800215 	stw	r6,8(r4)
 800b008:	10ffc036 	bltu	r2,r3,800af0c <_free_r+0xf0>
 800b00c:	008200b4 	movhi	r2,2050
 800b010:	10a52f04 	addi	r2,r2,-27460
 800b014:	11400017 	ldw	r5,0(r2)
 800b018:	8809883a 	mov	r4,r17
 800b01c:	800acf80 	call	800acf8 <_malloc_trim_r>
 800b020:	003fba06 	br	800af0c <_free_r+0xf0>
 800b024:	28c9883a 	add	r4,r5,r3
 800b028:	21000117 	ldw	r4,4(r4)
 800b02c:	2100004c 	andi	r4,r4,1
 800b030:	2000391e 	bne	r4,zero,800b118 <_free_r+0x2fc>
 800b034:	29c00217 	ldw	r7,8(r5)
 800b038:	29000317 	ldw	r4,12(r5)
 800b03c:	1885883a 	add	r2,r3,r2
 800b040:	10c00054 	ori	r3,r2,1
 800b044:	39000315 	stw	r4,12(r7)
 800b048:	21c00215 	stw	r7,8(r4)
 800b04c:	30c00115 	stw	r3,4(r6)
 800b050:	308d883a 	add	r6,r6,r2
 800b054:	30800015 	stw	r2,0(r6)
 800b058:	003fac06 	br	800af0c <_free_r+0xf0>
 800b05c:	00c00504 	movi	r3,20
 800b060:	19401536 	bltu	r3,r5,800b0b8 <_free_r+0x29c>
 800b064:	28c01704 	addi	r3,r5,92
 800b068:	18c7883a 	add	r3,r3,r3
 800b06c:	294016c4 	addi	r5,r5,91
 800b070:	003fb406 	br	800af44 <_free_r+0x128>
 800b074:	280bd0ba 	srai	r5,r5,2
 800b078:	00c00044 	movi	r3,1
 800b07c:	38800117 	ldw	r2,4(r7)
 800b080:	194a983a 	sll	r5,r3,r5
 800b084:	2007883a 	mov	r3,r4
 800b088:	2884b03a 	or	r2,r5,r2
 800b08c:	38800115 	stw	r2,4(r7)
 800b090:	003fbb06 	br	800af80 <_free_r+0x164>
 800b094:	21800515 	stw	r6,20(r4)
 800b098:	21800415 	stw	r6,16(r4)
 800b09c:	10c00054 	ori	r3,r2,1
 800b0a0:	31c00315 	stw	r7,12(r6)
 800b0a4:	31c00215 	stw	r7,8(r6)
 800b0a8:	30c00115 	stw	r3,4(r6)
 800b0ac:	308d883a 	add	r6,r6,r2
 800b0b0:	30800015 	stw	r2,0(r6)
 800b0b4:	003f9506 	br	800af0c <_free_r+0xf0>
 800b0b8:	00c01504 	movi	r3,84
 800b0bc:	19400536 	bltu	r3,r5,800b0d4 <_free_r+0x2b8>
 800b0c0:	100ad33a 	srli	r5,r2,12
 800b0c4:	28c01bc4 	addi	r3,r5,111
 800b0c8:	18c7883a 	add	r3,r3,r3
 800b0cc:	29401b84 	addi	r5,r5,110
 800b0d0:	003f9c06 	br	800af44 <_free_r+0x128>
 800b0d4:	00c05504 	movi	r3,340
 800b0d8:	19400536 	bltu	r3,r5,800b0f0 <_free_r+0x2d4>
 800b0dc:	100ad3fa 	srli	r5,r2,15
 800b0e0:	28c01e04 	addi	r3,r5,120
 800b0e4:	18c7883a 	add	r3,r3,r3
 800b0e8:	29401dc4 	addi	r5,r5,119
 800b0ec:	003f9506 	br	800af44 <_free_r+0x128>
 800b0f0:	00c15504 	movi	r3,1364
 800b0f4:	19400536 	bltu	r3,r5,800b10c <_free_r+0x2f0>
 800b0f8:	100ad4ba 	srli	r5,r2,18
 800b0fc:	28c01f44 	addi	r3,r5,125
 800b100:	18c7883a 	add	r3,r3,r3
 800b104:	29401f04 	addi	r5,r5,124
 800b108:	003f8e06 	br	800af44 <_free_r+0x128>
 800b10c:	00c03f84 	movi	r3,254
 800b110:	01401f84 	movi	r5,126
 800b114:	003f8b06 	br	800af44 <_free_r+0x128>
 800b118:	10c00054 	ori	r3,r2,1
 800b11c:	30c00115 	stw	r3,4(r6)
 800b120:	308d883a 	add	r6,r6,r2
 800b124:	30800015 	stw	r2,0(r6)
 800b128:	003f7806 	br	800af0c <_free_r+0xf0>

0800b12c <__sfvwrite_r>:
 800b12c:	30800217 	ldw	r2,8(r6)
 800b130:	10006726 	beq	r2,zero,800b2d0 <__sfvwrite_r+0x1a4>
 800b134:	28c0030b 	ldhu	r3,12(r5)
 800b138:	defff404 	addi	sp,sp,-48
 800b13c:	dd400715 	stw	r21,28(sp)
 800b140:	dd000615 	stw	r20,24(sp)
 800b144:	dc000215 	stw	r16,8(sp)
 800b148:	dfc00b15 	stw	ra,44(sp)
 800b14c:	df000a15 	stw	fp,40(sp)
 800b150:	ddc00915 	stw	r23,36(sp)
 800b154:	dd800815 	stw	r22,32(sp)
 800b158:	dcc00515 	stw	r19,20(sp)
 800b15c:	dc800415 	stw	r18,16(sp)
 800b160:	dc400315 	stw	r17,12(sp)
 800b164:	1880020c 	andi	r2,r3,8
 800b168:	2821883a 	mov	r16,r5
 800b16c:	202b883a 	mov	r21,r4
 800b170:	3029883a 	mov	r20,r6
 800b174:	10002726 	beq	r2,zero,800b214 <__sfvwrite_r+0xe8>
 800b178:	28800417 	ldw	r2,16(r5)
 800b17c:	10002526 	beq	r2,zero,800b214 <__sfvwrite_r+0xe8>
 800b180:	1880008c 	andi	r2,r3,2
 800b184:	a4400017 	ldw	r17,0(r20)
 800b188:	10002a26 	beq	r2,zero,800b234 <__sfvwrite_r+0x108>
 800b18c:	05a00034 	movhi	r22,32768
 800b190:	0027883a 	mov	r19,zero
 800b194:	0025883a 	mov	r18,zero
 800b198:	b5bf0004 	addi	r22,r22,-1024
 800b19c:	980d883a 	mov	r6,r19
 800b1a0:	a809883a 	mov	r4,r21
 800b1a4:	90004626 	beq	r18,zero,800b2c0 <__sfvwrite_r+0x194>
 800b1a8:	900f883a 	mov	r7,r18
 800b1ac:	b480022e 	bgeu	r22,r18,800b1b8 <__sfvwrite_r+0x8c>
 800b1b0:	01e00034 	movhi	r7,32768
 800b1b4:	39ff0004 	addi	r7,r7,-1024
 800b1b8:	80800917 	ldw	r2,36(r16)
 800b1bc:	81400717 	ldw	r5,28(r16)
 800b1c0:	103ee83a 	callr	r2
 800b1c4:	00805a0e 	bge	zero,r2,800b330 <__sfvwrite_r+0x204>
 800b1c8:	a0c00217 	ldw	r3,8(r20)
 800b1cc:	98a7883a 	add	r19,r19,r2
 800b1d0:	90a5c83a 	sub	r18,r18,r2
 800b1d4:	1885c83a 	sub	r2,r3,r2
 800b1d8:	a0800215 	stw	r2,8(r20)
 800b1dc:	103fef1e 	bne	r2,zero,800b19c <__sfvwrite_r+0x70>
 800b1e0:	0005883a 	mov	r2,zero
 800b1e4:	dfc00b17 	ldw	ra,44(sp)
 800b1e8:	df000a17 	ldw	fp,40(sp)
 800b1ec:	ddc00917 	ldw	r23,36(sp)
 800b1f0:	dd800817 	ldw	r22,32(sp)
 800b1f4:	dd400717 	ldw	r21,28(sp)
 800b1f8:	dd000617 	ldw	r20,24(sp)
 800b1fc:	dcc00517 	ldw	r19,20(sp)
 800b200:	dc800417 	ldw	r18,16(sp)
 800b204:	dc400317 	ldw	r17,12(sp)
 800b208:	dc000217 	ldw	r16,8(sp)
 800b20c:	dec00c04 	addi	sp,sp,48
 800b210:	f800283a 	ret
 800b214:	800b883a 	mov	r5,r16
 800b218:	a809883a 	mov	r4,r21
 800b21c:	8008c9c0 	call	8008c9c <__swsetup_r>
 800b220:	1000ee1e 	bne	r2,zero,800b5dc <__sfvwrite_r+0x4b0>
 800b224:	80c0030b 	ldhu	r3,12(r16)
 800b228:	a4400017 	ldw	r17,0(r20)
 800b22c:	1880008c 	andi	r2,r3,2
 800b230:	103fd61e 	bne	r2,zero,800b18c <__sfvwrite_r+0x60>
 800b234:	1880004c 	andi	r2,r3,1
 800b238:	1000421e 	bne	r2,zero,800b344 <__sfvwrite_r+0x218>
 800b23c:	0039883a 	mov	fp,zero
 800b240:	0025883a 	mov	r18,zero
 800b244:	90001a26 	beq	r18,zero,800b2b0 <__sfvwrite_r+0x184>
 800b248:	1880800c 	andi	r2,r3,512
 800b24c:	84c00217 	ldw	r19,8(r16)
 800b250:	10002126 	beq	r2,zero,800b2d8 <__sfvwrite_r+0x1ac>
 800b254:	982f883a 	mov	r23,r19
 800b258:	94c09636 	bltu	r18,r19,800b4b4 <__sfvwrite_r+0x388>
 800b25c:	1881200c 	andi	r2,r3,1152
 800b260:	1000a11e 	bne	r2,zero,800b4e8 <__sfvwrite_r+0x3bc>
 800b264:	81000017 	ldw	r4,0(r16)
 800b268:	b80d883a 	mov	r6,r23
 800b26c:	e00b883a 	mov	r5,fp
 800b270:	800c3600 	call	800c360 <memmove>
 800b274:	80c00217 	ldw	r3,8(r16)
 800b278:	81000017 	ldw	r4,0(r16)
 800b27c:	9005883a 	mov	r2,r18
 800b280:	1ce7c83a 	sub	r19,r3,r19
 800b284:	25cf883a 	add	r7,r4,r23
 800b288:	84c00215 	stw	r19,8(r16)
 800b28c:	81c00015 	stw	r7,0(r16)
 800b290:	a0c00217 	ldw	r3,8(r20)
 800b294:	e0b9883a 	add	fp,fp,r2
 800b298:	90a5c83a 	sub	r18,r18,r2
 800b29c:	18a7c83a 	sub	r19,r3,r2
 800b2a0:	a4c00215 	stw	r19,8(r20)
 800b2a4:	983fce26 	beq	r19,zero,800b1e0 <__sfvwrite_r+0xb4>
 800b2a8:	80c0030b 	ldhu	r3,12(r16)
 800b2ac:	903fe61e 	bne	r18,zero,800b248 <__sfvwrite_r+0x11c>
 800b2b0:	8f000017 	ldw	fp,0(r17)
 800b2b4:	8c800117 	ldw	r18,4(r17)
 800b2b8:	8c400204 	addi	r17,r17,8
 800b2bc:	003fe106 	br	800b244 <__sfvwrite_r+0x118>
 800b2c0:	8cc00017 	ldw	r19,0(r17)
 800b2c4:	8c800117 	ldw	r18,4(r17)
 800b2c8:	8c400204 	addi	r17,r17,8
 800b2cc:	003fb306 	br	800b19c <__sfvwrite_r+0x70>
 800b2d0:	0005883a 	mov	r2,zero
 800b2d4:	f800283a 	ret
 800b2d8:	81000017 	ldw	r4,0(r16)
 800b2dc:	80800417 	ldw	r2,16(r16)
 800b2e0:	11005a36 	bltu	r2,r4,800b44c <__sfvwrite_r+0x320>
 800b2e4:	85c00517 	ldw	r23,20(r16)
 800b2e8:	95c05836 	bltu	r18,r23,800b44c <__sfvwrite_r+0x320>
 800b2ec:	00a00034 	movhi	r2,32768
 800b2f0:	10bfffc4 	addi	r2,r2,-1
 800b2f4:	9009883a 	mov	r4,r18
 800b2f8:	1480012e 	bgeu	r2,r18,800b300 <__sfvwrite_r+0x1d4>
 800b2fc:	1009883a 	mov	r4,r2
 800b300:	b80b883a 	mov	r5,r23
 800b304:	8010b240 	call	8010b24 <__divsi3>
 800b308:	b80b883a 	mov	r5,r23
 800b30c:	1009883a 	mov	r4,r2
 800b310:	80057b40 	call	80057b4 <__mulsi3>
 800b314:	81400717 	ldw	r5,28(r16)
 800b318:	80c00917 	ldw	r3,36(r16)
 800b31c:	100f883a 	mov	r7,r2
 800b320:	e00d883a 	mov	r6,fp
 800b324:	a809883a 	mov	r4,r21
 800b328:	183ee83a 	callr	r3
 800b32c:	00bfd816 	blt	zero,r2,800b290 <__sfvwrite_r+0x164>
 800b330:	8080030b 	ldhu	r2,12(r16)
 800b334:	10801014 	ori	r2,r2,64
 800b338:	8080030d 	sth	r2,12(r16)
 800b33c:	00bfffc4 	movi	r2,-1
 800b340:	003fa806 	br	800b1e4 <__sfvwrite_r+0xb8>
 800b344:	0027883a 	mov	r19,zero
 800b348:	0011883a 	mov	r8,zero
 800b34c:	0039883a 	mov	fp,zero
 800b350:	0025883a 	mov	r18,zero
 800b354:	90001f26 	beq	r18,zero,800b3d4 <__sfvwrite_r+0x2a8>
 800b358:	40005a26 	beq	r8,zero,800b4c4 <__sfvwrite_r+0x398>
 800b35c:	982d883a 	mov	r22,r19
 800b360:	94c0012e 	bgeu	r18,r19,800b368 <__sfvwrite_r+0x23c>
 800b364:	902d883a 	mov	r22,r18
 800b368:	81000017 	ldw	r4,0(r16)
 800b36c:	80800417 	ldw	r2,16(r16)
 800b370:	b02f883a 	mov	r23,r22
 800b374:	81c00517 	ldw	r7,20(r16)
 800b378:	1100032e 	bgeu	r2,r4,800b388 <__sfvwrite_r+0x25c>
 800b37c:	80c00217 	ldw	r3,8(r16)
 800b380:	38c7883a 	add	r3,r7,r3
 800b384:	1d801816 	blt	r3,r22,800b3e8 <__sfvwrite_r+0x2bc>
 800b388:	b1c03e16 	blt	r22,r7,800b484 <__sfvwrite_r+0x358>
 800b38c:	80800917 	ldw	r2,36(r16)
 800b390:	81400717 	ldw	r5,28(r16)
 800b394:	e00d883a 	mov	r6,fp
 800b398:	da000115 	stw	r8,4(sp)
 800b39c:	a809883a 	mov	r4,r21
 800b3a0:	103ee83a 	callr	r2
 800b3a4:	102f883a 	mov	r23,r2
 800b3a8:	da000117 	ldw	r8,4(sp)
 800b3ac:	00bfe00e 	bge	zero,r2,800b330 <__sfvwrite_r+0x204>
 800b3b0:	9de7c83a 	sub	r19,r19,r23
 800b3b4:	98001f26 	beq	r19,zero,800b434 <__sfvwrite_r+0x308>
 800b3b8:	a0800217 	ldw	r2,8(r20)
 800b3bc:	e5f9883a 	add	fp,fp,r23
 800b3c0:	95e5c83a 	sub	r18,r18,r23
 800b3c4:	15efc83a 	sub	r23,r2,r23
 800b3c8:	a5c00215 	stw	r23,8(r20)
 800b3cc:	b83f8426 	beq	r23,zero,800b1e0 <__sfvwrite_r+0xb4>
 800b3d0:	903fe11e 	bne	r18,zero,800b358 <__sfvwrite_r+0x22c>
 800b3d4:	8f000017 	ldw	fp,0(r17)
 800b3d8:	8c800117 	ldw	r18,4(r17)
 800b3dc:	0011883a 	mov	r8,zero
 800b3e0:	8c400204 	addi	r17,r17,8
 800b3e4:	003fdb06 	br	800b354 <__sfvwrite_r+0x228>
 800b3e8:	180d883a 	mov	r6,r3
 800b3ec:	e00b883a 	mov	r5,fp
 800b3f0:	da000115 	stw	r8,4(sp)
 800b3f4:	d8c00015 	stw	r3,0(sp)
 800b3f8:	800c3600 	call	800c360 <memmove>
 800b3fc:	d8c00017 	ldw	r3,0(sp)
 800b400:	80800017 	ldw	r2,0(r16)
 800b404:	800b883a 	mov	r5,r16
 800b408:	a809883a 	mov	r4,r21
 800b40c:	10c5883a 	add	r2,r2,r3
 800b410:	80800015 	stw	r2,0(r16)
 800b414:	d8c00015 	stw	r3,0(sp)
 800b418:	800a8bc0 	call	800a8bc <_fflush_r>
 800b41c:	d8c00017 	ldw	r3,0(sp)
 800b420:	da000117 	ldw	r8,4(sp)
 800b424:	103fc21e 	bne	r2,zero,800b330 <__sfvwrite_r+0x204>
 800b428:	182f883a 	mov	r23,r3
 800b42c:	9de7c83a 	sub	r19,r19,r23
 800b430:	983fe11e 	bne	r19,zero,800b3b8 <__sfvwrite_r+0x28c>
 800b434:	800b883a 	mov	r5,r16
 800b438:	a809883a 	mov	r4,r21
 800b43c:	800a8bc0 	call	800a8bc <_fflush_r>
 800b440:	103fbb1e 	bne	r2,zero,800b330 <__sfvwrite_r+0x204>
 800b444:	0011883a 	mov	r8,zero
 800b448:	003fdb06 	br	800b3b8 <__sfvwrite_r+0x28c>
 800b44c:	94c0012e 	bgeu	r18,r19,800b454 <__sfvwrite_r+0x328>
 800b450:	9027883a 	mov	r19,r18
 800b454:	980d883a 	mov	r6,r19
 800b458:	e00b883a 	mov	r5,fp
 800b45c:	800c3600 	call	800c360 <memmove>
 800b460:	80800217 	ldw	r2,8(r16)
 800b464:	80c00017 	ldw	r3,0(r16)
 800b468:	14c5c83a 	sub	r2,r2,r19
 800b46c:	1cc7883a 	add	r3,r3,r19
 800b470:	80800215 	stw	r2,8(r16)
 800b474:	80c00015 	stw	r3,0(r16)
 800b478:	10004326 	beq	r2,zero,800b588 <__sfvwrite_r+0x45c>
 800b47c:	9805883a 	mov	r2,r19
 800b480:	003f8306 	br	800b290 <__sfvwrite_r+0x164>
 800b484:	b00d883a 	mov	r6,r22
 800b488:	e00b883a 	mov	r5,fp
 800b48c:	da000115 	stw	r8,4(sp)
 800b490:	800c3600 	call	800c360 <memmove>
 800b494:	80800217 	ldw	r2,8(r16)
 800b498:	80c00017 	ldw	r3,0(r16)
 800b49c:	da000117 	ldw	r8,4(sp)
 800b4a0:	1585c83a 	sub	r2,r2,r22
 800b4a4:	1dad883a 	add	r22,r3,r22
 800b4a8:	80800215 	stw	r2,8(r16)
 800b4ac:	85800015 	stw	r22,0(r16)
 800b4b0:	003fbf06 	br	800b3b0 <__sfvwrite_r+0x284>
 800b4b4:	81000017 	ldw	r4,0(r16)
 800b4b8:	9027883a 	mov	r19,r18
 800b4bc:	902f883a 	mov	r23,r18
 800b4c0:	003f6906 	br	800b268 <__sfvwrite_r+0x13c>
 800b4c4:	900d883a 	mov	r6,r18
 800b4c8:	01400284 	movi	r5,10
 800b4cc:	e009883a 	mov	r4,fp
 800b4d0:	800c27c0 	call	800c27c <memchr>
 800b4d4:	10003e26 	beq	r2,zero,800b5d0 <__sfvwrite_r+0x4a4>
 800b4d8:	10800044 	addi	r2,r2,1
 800b4dc:	1727c83a 	sub	r19,r2,fp
 800b4e0:	02000044 	movi	r8,1
 800b4e4:	003f9d06 	br	800b35c <__sfvwrite_r+0x230>
 800b4e8:	80800517 	ldw	r2,20(r16)
 800b4ec:	81400417 	ldw	r5,16(r16)
 800b4f0:	81c00017 	ldw	r7,0(r16)
 800b4f4:	10a7883a 	add	r19,r2,r2
 800b4f8:	9885883a 	add	r2,r19,r2
 800b4fc:	1026d7fa 	srli	r19,r2,31
 800b500:	396dc83a 	sub	r22,r7,r5
 800b504:	b1000044 	addi	r4,r22,1
 800b508:	9885883a 	add	r2,r19,r2
 800b50c:	1027d07a 	srai	r19,r2,1
 800b510:	2485883a 	add	r2,r4,r18
 800b514:	980d883a 	mov	r6,r19
 800b518:	9880022e 	bgeu	r19,r2,800b524 <__sfvwrite_r+0x3f8>
 800b51c:	1027883a 	mov	r19,r2
 800b520:	100d883a 	mov	r6,r2
 800b524:	18c1000c 	andi	r3,r3,1024
 800b528:	18001c26 	beq	r3,zero,800b59c <__sfvwrite_r+0x470>
 800b52c:	300b883a 	mov	r5,r6
 800b530:	a809883a 	mov	r4,r21
 800b534:	800ba700 	call	800ba70 <_malloc_r>
 800b538:	102f883a 	mov	r23,r2
 800b53c:	10002926 	beq	r2,zero,800b5e4 <__sfvwrite_r+0x4b8>
 800b540:	81400417 	ldw	r5,16(r16)
 800b544:	b00d883a 	mov	r6,r22
 800b548:	1009883a 	mov	r4,r2
 800b54c:	800626c0 	call	800626c <memcpy>
 800b550:	8080030b 	ldhu	r2,12(r16)
 800b554:	00fedfc4 	movi	r3,-1153
 800b558:	10c4703a 	and	r2,r2,r3
 800b55c:	10802014 	ori	r2,r2,128
 800b560:	8080030d 	sth	r2,12(r16)
 800b564:	bd89883a 	add	r4,r23,r22
 800b568:	9d8fc83a 	sub	r7,r19,r22
 800b56c:	85c00415 	stw	r23,16(r16)
 800b570:	84c00515 	stw	r19,20(r16)
 800b574:	81000015 	stw	r4,0(r16)
 800b578:	9027883a 	mov	r19,r18
 800b57c:	81c00215 	stw	r7,8(r16)
 800b580:	902f883a 	mov	r23,r18
 800b584:	003f3806 	br	800b268 <__sfvwrite_r+0x13c>
 800b588:	800b883a 	mov	r5,r16
 800b58c:	a809883a 	mov	r4,r21
 800b590:	800a8bc0 	call	800a8bc <_fflush_r>
 800b594:	103fb926 	beq	r2,zero,800b47c <__sfvwrite_r+0x350>
 800b598:	003f6506 	br	800b330 <__sfvwrite_r+0x204>
 800b59c:	a809883a 	mov	r4,r21
 800b5a0:	800d6dc0 	call	800d6dc <_realloc_r>
 800b5a4:	102f883a 	mov	r23,r2
 800b5a8:	103fee1e 	bne	r2,zero,800b564 <__sfvwrite_r+0x438>
 800b5ac:	81400417 	ldw	r5,16(r16)
 800b5b0:	a809883a 	mov	r4,r21
 800b5b4:	800ae1c0 	call	800ae1c <_free_r>
 800b5b8:	8080030b 	ldhu	r2,12(r16)
 800b5bc:	00ffdfc4 	movi	r3,-129
 800b5c0:	1884703a 	and	r2,r3,r2
 800b5c4:	00c00304 	movi	r3,12
 800b5c8:	a8c00015 	stw	r3,0(r21)
 800b5cc:	003f5906 	br	800b334 <__sfvwrite_r+0x208>
 800b5d0:	94c00044 	addi	r19,r18,1
 800b5d4:	02000044 	movi	r8,1
 800b5d8:	003f6006 	br	800b35c <__sfvwrite_r+0x230>
 800b5dc:	00bfffc4 	movi	r2,-1
 800b5e0:	003f0006 	br	800b1e4 <__sfvwrite_r+0xb8>
 800b5e4:	00800304 	movi	r2,12
 800b5e8:	a8800015 	stw	r2,0(r21)
 800b5ec:	8080030b 	ldhu	r2,12(r16)
 800b5f0:	003f5006 	br	800b334 <__sfvwrite_r+0x208>

0800b5f4 <_fwalk>:
 800b5f4:	defff704 	addi	sp,sp,-36
 800b5f8:	dd000415 	stw	r20,16(sp)
 800b5fc:	dfc00815 	stw	ra,32(sp)
 800b600:	ddc00715 	stw	r23,28(sp)
 800b604:	dd800615 	stw	r22,24(sp)
 800b608:	dd400515 	stw	r21,20(sp)
 800b60c:	dcc00315 	stw	r19,12(sp)
 800b610:	dc800215 	stw	r18,8(sp)
 800b614:	dc400115 	stw	r17,4(sp)
 800b618:	dc000015 	stw	r16,0(sp)
 800b61c:	2500b804 	addi	r20,r4,736
 800b620:	a0002326 	beq	r20,zero,800b6b0 <_fwalk+0xbc>
 800b624:	282b883a 	mov	r21,r5
 800b628:	002f883a 	mov	r23,zero
 800b62c:	05800044 	movi	r22,1
 800b630:	04ffffc4 	movi	r19,-1
 800b634:	a4400117 	ldw	r17,4(r20)
 800b638:	a4800217 	ldw	r18,8(r20)
 800b63c:	8c7fffc4 	addi	r17,r17,-1
 800b640:	88000d16 	blt	r17,zero,800b678 <_fwalk+0x84>
 800b644:	94000304 	addi	r16,r18,12
 800b648:	94800384 	addi	r18,r18,14
 800b64c:	8080000b 	ldhu	r2,0(r16)
 800b650:	8c7fffc4 	addi	r17,r17,-1
 800b654:	813ffd04 	addi	r4,r16,-12
 800b658:	b080042e 	bgeu	r22,r2,800b66c <_fwalk+0x78>
 800b65c:	9080000f 	ldh	r2,0(r18)
 800b660:	14c00226 	beq	r2,r19,800b66c <_fwalk+0x78>
 800b664:	a83ee83a 	callr	r21
 800b668:	b8aeb03a 	or	r23,r23,r2
 800b66c:	84001a04 	addi	r16,r16,104
 800b670:	94801a04 	addi	r18,r18,104
 800b674:	8cfff51e 	bne	r17,r19,800b64c <_fwalk+0x58>
 800b678:	a5000017 	ldw	r20,0(r20)
 800b67c:	a03fed1e 	bne	r20,zero,800b634 <_fwalk+0x40>
 800b680:	b805883a 	mov	r2,r23
 800b684:	dfc00817 	ldw	ra,32(sp)
 800b688:	ddc00717 	ldw	r23,28(sp)
 800b68c:	dd800617 	ldw	r22,24(sp)
 800b690:	dd400517 	ldw	r21,20(sp)
 800b694:	dd000417 	ldw	r20,16(sp)
 800b698:	dcc00317 	ldw	r19,12(sp)
 800b69c:	dc800217 	ldw	r18,8(sp)
 800b6a0:	dc400117 	ldw	r17,4(sp)
 800b6a4:	dc000017 	ldw	r16,0(sp)
 800b6a8:	dec00904 	addi	sp,sp,36
 800b6ac:	f800283a 	ret
 800b6b0:	002f883a 	mov	r23,zero
 800b6b4:	003ff206 	br	800b680 <_fwalk+0x8c>

0800b6b8 <_fwalk_reent>:
 800b6b8:	defff704 	addi	sp,sp,-36
 800b6bc:	dd000415 	stw	r20,16(sp)
 800b6c0:	dfc00815 	stw	ra,32(sp)
 800b6c4:	ddc00715 	stw	r23,28(sp)
 800b6c8:	dd800615 	stw	r22,24(sp)
 800b6cc:	dd400515 	stw	r21,20(sp)
 800b6d0:	dcc00315 	stw	r19,12(sp)
 800b6d4:	dc800215 	stw	r18,8(sp)
 800b6d8:	dc400115 	stw	r17,4(sp)
 800b6dc:	dc000015 	stw	r16,0(sp)
 800b6e0:	2500b804 	addi	r20,r4,736
 800b6e4:	a0002326 	beq	r20,zero,800b774 <_fwalk_reent+0xbc>
 800b6e8:	282b883a 	mov	r21,r5
 800b6ec:	2027883a 	mov	r19,r4
 800b6f0:	002f883a 	mov	r23,zero
 800b6f4:	05800044 	movi	r22,1
 800b6f8:	04bfffc4 	movi	r18,-1
 800b6fc:	a4400117 	ldw	r17,4(r20)
 800b700:	a4000217 	ldw	r16,8(r20)
 800b704:	8c7fffc4 	addi	r17,r17,-1
 800b708:	88000c16 	blt	r17,zero,800b73c <_fwalk_reent+0x84>
 800b70c:	84000304 	addi	r16,r16,12
 800b710:	8080000b 	ldhu	r2,0(r16)
 800b714:	8c7fffc4 	addi	r17,r17,-1
 800b718:	817ffd04 	addi	r5,r16,-12
 800b71c:	b080052e 	bgeu	r22,r2,800b734 <_fwalk_reent+0x7c>
 800b720:	8080008f 	ldh	r2,2(r16)
 800b724:	9809883a 	mov	r4,r19
 800b728:	14800226 	beq	r2,r18,800b734 <_fwalk_reent+0x7c>
 800b72c:	a83ee83a 	callr	r21
 800b730:	b8aeb03a 	or	r23,r23,r2
 800b734:	84001a04 	addi	r16,r16,104
 800b738:	8cbff51e 	bne	r17,r18,800b710 <_fwalk_reent+0x58>
 800b73c:	a5000017 	ldw	r20,0(r20)
 800b740:	a03fee1e 	bne	r20,zero,800b6fc <_fwalk_reent+0x44>
 800b744:	b805883a 	mov	r2,r23
 800b748:	dfc00817 	ldw	ra,32(sp)
 800b74c:	ddc00717 	ldw	r23,28(sp)
 800b750:	dd800617 	ldw	r22,24(sp)
 800b754:	dd400517 	ldw	r21,20(sp)
 800b758:	dd000417 	ldw	r20,16(sp)
 800b75c:	dcc00317 	ldw	r19,12(sp)
 800b760:	dc800217 	ldw	r18,8(sp)
 800b764:	dc400117 	ldw	r17,4(sp)
 800b768:	dc000017 	ldw	r16,0(sp)
 800b76c:	dec00904 	addi	sp,sp,36
 800b770:	f800283a 	ret
 800b774:	002f883a 	mov	r23,zero
 800b778:	003ff206 	br	800b744 <_fwalk_reent+0x8c>

0800b77c <_gettimeofday_r>:
 800b77c:	defffd04 	addi	sp,sp,-12
 800b780:	2805883a 	mov	r2,r5
 800b784:	dc000015 	stw	r16,0(sp)
 800b788:	040200b4 	movhi	r16,2050
 800b78c:	dc400115 	stw	r17,4(sp)
 800b790:	84252904 	addi	r16,r16,-27484
 800b794:	2023883a 	mov	r17,r4
 800b798:	300b883a 	mov	r5,r6
 800b79c:	1009883a 	mov	r4,r2
 800b7a0:	dfc00215 	stw	ra,8(sp)
 800b7a4:	80000015 	stw	zero,0(r16)
 800b7a8:	8012e040 	call	8012e04 <gettimeofday>
 800b7ac:	00ffffc4 	movi	r3,-1
 800b7b0:	10c00526 	beq	r2,r3,800b7c8 <_gettimeofday_r+0x4c>
 800b7b4:	dfc00217 	ldw	ra,8(sp)
 800b7b8:	dc400117 	ldw	r17,4(sp)
 800b7bc:	dc000017 	ldw	r16,0(sp)
 800b7c0:	dec00304 	addi	sp,sp,12
 800b7c4:	f800283a 	ret
 800b7c8:	80c00017 	ldw	r3,0(r16)
 800b7cc:	183ff926 	beq	r3,zero,800b7b4 <_gettimeofday_r+0x38>
 800b7d0:	88c00015 	stw	r3,0(r17)
 800b7d4:	003ff706 	br	800b7b4 <_gettimeofday_r+0x38>

0800b7d8 <_setlocale_r>:
 800b7d8:	30001b26 	beq	r6,zero,800b848 <_setlocale_r+0x70>
 800b7dc:	01420074 	movhi	r5,2049
 800b7e0:	defffe04 	addi	sp,sp,-8
 800b7e4:	29570104 	addi	r5,r5,23556
 800b7e8:	3009883a 	mov	r4,r6
 800b7ec:	dc000015 	stw	r16,0(sp)
 800b7f0:	dfc00115 	stw	ra,4(sp)
 800b7f4:	3021883a 	mov	r16,r6
 800b7f8:	800de440 	call	800de44 <strcmp>
 800b7fc:	1000061e 	bne	r2,zero,800b818 <_setlocale_r+0x40>
 800b800:	00820074 	movhi	r2,2049
 800b804:	1096e204 	addi	r2,r2,23432
 800b808:	dfc00117 	ldw	ra,4(sp)
 800b80c:	dc000017 	ldw	r16,0(sp)
 800b810:	dec00204 	addi	sp,sp,8
 800b814:	f800283a 	ret
 800b818:	01420074 	movhi	r5,2049
 800b81c:	2956e204 	addi	r5,r5,23432
 800b820:	8009883a 	mov	r4,r16
 800b824:	800de440 	call	800de44 <strcmp>
 800b828:	103ff526 	beq	r2,zero,800b800 <_setlocale_r+0x28>
 800b82c:	01420074 	movhi	r5,2049
 800b830:	2956ec04 	addi	r5,r5,23472
 800b834:	8009883a 	mov	r4,r16
 800b838:	800de440 	call	800de44 <strcmp>
 800b83c:	103ff026 	beq	r2,zero,800b800 <_setlocale_r+0x28>
 800b840:	0005883a 	mov	r2,zero
 800b844:	003ff006 	br	800b808 <_setlocale_r+0x30>
 800b848:	00820074 	movhi	r2,2049
 800b84c:	1096e204 	addi	r2,r2,23432
 800b850:	f800283a 	ret

0800b854 <__locale_charset>:
 800b854:	00820074 	movhi	r2,2049
 800b858:	10987b04 	addi	r2,r2,25068
 800b85c:	f800283a 	ret

0800b860 <__locale_mb_cur_max>:
 800b860:	00820074 	movhi	r2,2049
 800b864:	109e2304 	addi	r2,r2,30860
 800b868:	10800017 	ldw	r2,0(r2)
 800b86c:	f800283a 	ret

0800b870 <__locale_msgcharset>:
 800b870:	00820074 	movhi	r2,2049
 800b874:	10987304 	addi	r2,r2,25036
 800b878:	f800283a 	ret

0800b87c <__locale_cjk_lang>:
 800b87c:	0005883a 	mov	r2,zero
 800b880:	f800283a 	ret

0800b884 <_localeconv_r>:
 800b884:	00820074 	movhi	r2,2049
 800b888:	10988304 	addi	r2,r2,25100
 800b88c:	f800283a 	ret

0800b890 <setlocale>:
 800b890:	00820074 	movhi	r2,2049
 800b894:	109e2204 	addi	r2,r2,30856
 800b898:	280d883a 	mov	r6,r5
 800b89c:	200b883a 	mov	r5,r4
 800b8a0:	11000017 	ldw	r4,0(r2)
 800b8a4:	800b7d81 	jmpi	800b7d8 <_setlocale_r>

0800b8a8 <localeconv>:
 800b8a8:	00820074 	movhi	r2,2049
 800b8ac:	10988304 	addi	r2,r2,25100
 800b8b0:	f800283a 	ret

0800b8b4 <__smakebuf_r>:
 800b8b4:	2880030b 	ldhu	r2,12(r5)
 800b8b8:	10c0008c 	andi	r3,r2,2
 800b8bc:	1800411e 	bne	r3,zero,800b9c4 <__smakebuf_r+0x110>
 800b8c0:	deffec04 	addi	sp,sp,-80
 800b8c4:	dc000f15 	stw	r16,60(sp)
 800b8c8:	2821883a 	mov	r16,r5
 800b8cc:	2940038f 	ldh	r5,14(r5)
 800b8d0:	dc401015 	stw	r17,64(sp)
 800b8d4:	dfc01315 	stw	ra,76(sp)
 800b8d8:	dcc01215 	stw	r19,72(sp)
 800b8dc:	dc801115 	stw	r18,68(sp)
 800b8e0:	2023883a 	mov	r17,r4
 800b8e4:	28001c16 	blt	r5,zero,800b958 <__smakebuf_r+0xa4>
 800b8e8:	d80d883a 	mov	r6,sp
 800b8ec:	800fc0c0 	call	800fc0c <_fstat_r>
 800b8f0:	10001816 	blt	r2,zero,800b954 <__smakebuf_r+0xa0>
 800b8f4:	d8800117 	ldw	r2,4(sp)
 800b8f8:	00e00014 	movui	r3,32768
 800b8fc:	10bc000c 	andi	r2,r2,61440
 800b900:	14c80020 	cmpeqi	r19,r2,8192
 800b904:	10c03726 	beq	r2,r3,800b9e4 <__smakebuf_r+0x130>
 800b908:	80c0030b 	ldhu	r3,12(r16)
 800b90c:	18c20014 	ori	r3,r3,2048
 800b910:	80c0030d 	sth	r3,12(r16)
 800b914:	00c80004 	movi	r3,8192
 800b918:	10c0521e 	bne	r2,r3,800ba64 <__smakebuf_r+0x1b0>
 800b91c:	8140038f 	ldh	r5,14(r16)
 800b920:	8809883a 	mov	r4,r17
 800b924:	800fc680 	call	800fc68 <_isatty_r>
 800b928:	10004c26 	beq	r2,zero,800ba5c <__smakebuf_r+0x1a8>
 800b92c:	8080030b 	ldhu	r2,12(r16)
 800b930:	80c010c4 	addi	r3,r16,67
 800b934:	80c00015 	stw	r3,0(r16)
 800b938:	10800054 	ori	r2,r2,1
 800b93c:	8080030d 	sth	r2,12(r16)
 800b940:	00800044 	movi	r2,1
 800b944:	80c00415 	stw	r3,16(r16)
 800b948:	80800515 	stw	r2,20(r16)
 800b94c:	04810004 	movi	r18,1024
 800b950:	00000706 	br	800b970 <__smakebuf_r+0xbc>
 800b954:	8080030b 	ldhu	r2,12(r16)
 800b958:	10c0200c 	andi	r3,r2,128
 800b95c:	18001f1e 	bne	r3,zero,800b9dc <__smakebuf_r+0x128>
 800b960:	04810004 	movi	r18,1024
 800b964:	10820014 	ori	r2,r2,2048
 800b968:	8080030d 	sth	r2,12(r16)
 800b96c:	0027883a 	mov	r19,zero
 800b970:	900b883a 	mov	r5,r18
 800b974:	8809883a 	mov	r4,r17
 800b978:	800ba700 	call	800ba70 <_malloc_r>
 800b97c:	10002c26 	beq	r2,zero,800ba30 <__smakebuf_r+0x17c>
 800b980:	80c0030b 	ldhu	r3,12(r16)
 800b984:	01020074 	movhi	r4,2049
 800b988:	212a5404 	addi	r4,r4,-22192
 800b98c:	89000f15 	stw	r4,60(r17)
 800b990:	18c02014 	ori	r3,r3,128
 800b994:	80c0030d 	sth	r3,12(r16)
 800b998:	80800015 	stw	r2,0(r16)
 800b99c:	80800415 	stw	r2,16(r16)
 800b9a0:	84800515 	stw	r18,20(r16)
 800b9a4:	98001a1e 	bne	r19,zero,800ba10 <__smakebuf_r+0x15c>
 800b9a8:	dfc01317 	ldw	ra,76(sp)
 800b9ac:	dcc01217 	ldw	r19,72(sp)
 800b9b0:	dc801117 	ldw	r18,68(sp)
 800b9b4:	dc401017 	ldw	r17,64(sp)
 800b9b8:	dc000f17 	ldw	r16,60(sp)
 800b9bc:	dec01404 	addi	sp,sp,80
 800b9c0:	f800283a 	ret
 800b9c4:	288010c4 	addi	r2,r5,67
 800b9c8:	28800015 	stw	r2,0(r5)
 800b9cc:	28800415 	stw	r2,16(r5)
 800b9d0:	00800044 	movi	r2,1
 800b9d4:	28800515 	stw	r2,20(r5)
 800b9d8:	f800283a 	ret
 800b9dc:	04801004 	movi	r18,64
 800b9e0:	003fe006 	br	800b964 <__smakebuf_r+0xb0>
 800b9e4:	81000a17 	ldw	r4,40(r16)
 800b9e8:	00c20074 	movhi	r3,2049
 800b9ec:	18f77804 	addi	r3,r3,-8736
 800b9f0:	20ffc51e 	bne	r4,r3,800b908 <__smakebuf_r+0x54>
 800b9f4:	8080030b 	ldhu	r2,12(r16)
 800b9f8:	04810004 	movi	r18,1024
 800b9fc:	84801315 	stw	r18,76(r16)
 800ba00:	1484b03a 	or	r2,r2,r18
 800ba04:	8080030d 	sth	r2,12(r16)
 800ba08:	0027883a 	mov	r19,zero
 800ba0c:	003fd806 	br	800b970 <__smakebuf_r+0xbc>
 800ba10:	8140038f 	ldh	r5,14(r16)
 800ba14:	8809883a 	mov	r4,r17
 800ba18:	800fc680 	call	800fc68 <_isatty_r>
 800ba1c:	103fe226 	beq	r2,zero,800b9a8 <__smakebuf_r+0xf4>
 800ba20:	8080030b 	ldhu	r2,12(r16)
 800ba24:	10800054 	ori	r2,r2,1
 800ba28:	8080030d 	sth	r2,12(r16)
 800ba2c:	003fde06 	br	800b9a8 <__smakebuf_r+0xf4>
 800ba30:	8080030b 	ldhu	r2,12(r16)
 800ba34:	10c0800c 	andi	r3,r2,512
 800ba38:	183fdb1e 	bne	r3,zero,800b9a8 <__smakebuf_r+0xf4>
 800ba3c:	10800094 	ori	r2,r2,2
 800ba40:	80c010c4 	addi	r3,r16,67
 800ba44:	8080030d 	sth	r2,12(r16)
 800ba48:	00800044 	movi	r2,1
 800ba4c:	80c00015 	stw	r3,0(r16)
 800ba50:	80c00415 	stw	r3,16(r16)
 800ba54:	80800515 	stw	r2,20(r16)
 800ba58:	003fd306 	br	800b9a8 <__smakebuf_r+0xf4>
 800ba5c:	04810004 	movi	r18,1024
 800ba60:	003fc306 	br	800b970 <__smakebuf_r+0xbc>
 800ba64:	0027883a 	mov	r19,zero
 800ba68:	04810004 	movi	r18,1024
 800ba6c:	003fc006 	br	800b970 <__smakebuf_r+0xbc>

0800ba70 <_malloc_r>:
 800ba70:	defff504 	addi	sp,sp,-44
 800ba74:	dc800315 	stw	r18,12(sp)
 800ba78:	dfc00a15 	stw	ra,40(sp)
 800ba7c:	df000915 	stw	fp,36(sp)
 800ba80:	ddc00815 	stw	r23,32(sp)
 800ba84:	dd800715 	stw	r22,28(sp)
 800ba88:	dd400615 	stw	r21,24(sp)
 800ba8c:	dd000515 	stw	r20,20(sp)
 800ba90:	dcc00415 	stw	r19,16(sp)
 800ba94:	dc400215 	stw	r17,8(sp)
 800ba98:	dc000115 	stw	r16,4(sp)
 800ba9c:	288002c4 	addi	r2,r5,11
 800baa0:	00c00584 	movi	r3,22
 800baa4:	2025883a 	mov	r18,r4
 800baa8:	18807f2e 	bgeu	r3,r2,800bca8 <_malloc_r+0x238>
 800baac:	047ffe04 	movi	r17,-8
 800bab0:	1462703a 	and	r17,r2,r17
 800bab4:	8800a316 	blt	r17,zero,800bd44 <_malloc_r+0x2d4>
 800bab8:	8940a236 	bltu	r17,r5,800bd44 <_malloc_r+0x2d4>
 800babc:	80133600 	call	8013360 <__malloc_lock>
 800bac0:	00807dc4 	movi	r2,503
 800bac4:	1441e92e 	bgeu	r2,r17,800c26c <_malloc_r+0x7fc>
 800bac8:	8804d27a 	srli	r2,r17,9
 800bacc:	1000a126 	beq	r2,zero,800bd54 <_malloc_r+0x2e4>
 800bad0:	00c00104 	movi	r3,4
 800bad4:	18811e36 	bltu	r3,r2,800bf50 <_malloc_r+0x4e0>
 800bad8:	8804d1ba 	srli	r2,r17,6
 800badc:	12000e44 	addi	r8,r2,57
 800bae0:	11c00e04 	addi	r7,r2,56
 800bae4:	4209883a 	add	r4,r8,r8
 800bae8:	04c20074 	movhi	r19,2049
 800baec:	2109883a 	add	r4,r4,r4
 800baf0:	9cd89104 	addi	r19,r19,25156
 800baf4:	2109883a 	add	r4,r4,r4
 800baf8:	9909883a 	add	r4,r19,r4
 800bafc:	24000117 	ldw	r16,4(r4)
 800bb00:	213ffe04 	addi	r4,r4,-8
 800bb04:	24009726 	beq	r4,r16,800bd64 <_malloc_r+0x2f4>
 800bb08:	80800117 	ldw	r2,4(r16)
 800bb0c:	01bfff04 	movi	r6,-4
 800bb10:	014003c4 	movi	r5,15
 800bb14:	1184703a 	and	r2,r2,r6
 800bb18:	1447c83a 	sub	r3,r2,r17
 800bb1c:	28c00716 	blt	r5,r3,800bb3c <_malloc_r+0xcc>
 800bb20:	1800920e 	bge	r3,zero,800bd6c <_malloc_r+0x2fc>
 800bb24:	84000317 	ldw	r16,12(r16)
 800bb28:	24008e26 	beq	r4,r16,800bd64 <_malloc_r+0x2f4>
 800bb2c:	80800117 	ldw	r2,4(r16)
 800bb30:	1184703a 	and	r2,r2,r6
 800bb34:	1447c83a 	sub	r3,r2,r17
 800bb38:	28fff90e 	bge	r5,r3,800bb20 <_malloc_r+0xb0>
 800bb3c:	3809883a 	mov	r4,r7
 800bb40:	01820074 	movhi	r6,2049
 800bb44:	9c000417 	ldw	r16,16(r19)
 800bb48:	31989104 	addi	r6,r6,25156
 800bb4c:	32000204 	addi	r8,r6,8
 800bb50:	82013426 	beq	r16,r8,800c024 <_malloc_r+0x5b4>
 800bb54:	80c00117 	ldw	r3,4(r16)
 800bb58:	00bfff04 	movi	r2,-4
 800bb5c:	188e703a 	and	r7,r3,r2
 800bb60:	3c45c83a 	sub	r2,r7,r17
 800bb64:	00c003c4 	movi	r3,15
 800bb68:	18811f16 	blt	r3,r2,800bfe8 <_malloc_r+0x578>
 800bb6c:	32000515 	stw	r8,20(r6)
 800bb70:	32000415 	stw	r8,16(r6)
 800bb74:	10007f0e 	bge	r2,zero,800bd74 <_malloc_r+0x304>
 800bb78:	00807fc4 	movi	r2,511
 800bb7c:	11c0fd36 	bltu	r2,r7,800bf74 <_malloc_r+0x504>
 800bb80:	3806d0fa 	srli	r3,r7,3
 800bb84:	01c00044 	movi	r7,1
 800bb88:	30800117 	ldw	r2,4(r6)
 800bb8c:	19400044 	addi	r5,r3,1
 800bb90:	294b883a 	add	r5,r5,r5
 800bb94:	1807d0ba 	srai	r3,r3,2
 800bb98:	294b883a 	add	r5,r5,r5
 800bb9c:	294b883a 	add	r5,r5,r5
 800bba0:	298b883a 	add	r5,r5,r6
 800bba4:	38c6983a 	sll	r3,r7,r3
 800bba8:	29c00017 	ldw	r7,0(r5)
 800bbac:	2a7ffe04 	addi	r9,r5,-8
 800bbb0:	1886b03a 	or	r3,r3,r2
 800bbb4:	82400315 	stw	r9,12(r16)
 800bbb8:	81c00215 	stw	r7,8(r16)
 800bbbc:	30c00115 	stw	r3,4(r6)
 800bbc0:	2c000015 	stw	r16,0(r5)
 800bbc4:	3c000315 	stw	r16,12(r7)
 800bbc8:	2005d0ba 	srai	r2,r4,2
 800bbcc:	01400044 	movi	r5,1
 800bbd0:	288a983a 	sll	r5,r5,r2
 800bbd4:	19406f36 	bltu	r3,r5,800bd94 <_malloc_r+0x324>
 800bbd8:	28c4703a 	and	r2,r5,r3
 800bbdc:	10000a1e 	bne	r2,zero,800bc08 <_malloc_r+0x198>
 800bbe0:	00bfff04 	movi	r2,-4
 800bbe4:	294b883a 	add	r5,r5,r5
 800bbe8:	2088703a 	and	r4,r4,r2
 800bbec:	28c4703a 	and	r2,r5,r3
 800bbf0:	21000104 	addi	r4,r4,4
 800bbf4:	1000041e 	bne	r2,zero,800bc08 <_malloc_r+0x198>
 800bbf8:	294b883a 	add	r5,r5,r5
 800bbfc:	28c4703a 	and	r2,r5,r3
 800bc00:	21000104 	addi	r4,r4,4
 800bc04:	103ffc26 	beq	r2,zero,800bbf8 <_malloc_r+0x188>
 800bc08:	02bfff04 	movi	r10,-4
 800bc0c:	024003c4 	movi	r9,15
 800bc10:	21800044 	addi	r6,r4,1
 800bc14:	318d883a 	add	r6,r6,r6
 800bc18:	318d883a 	add	r6,r6,r6
 800bc1c:	318d883a 	add	r6,r6,r6
 800bc20:	998d883a 	add	r6,r19,r6
 800bc24:	333ffe04 	addi	r12,r6,-8
 800bc28:	2017883a 	mov	r11,r4
 800bc2c:	31800104 	addi	r6,r6,4
 800bc30:	34000017 	ldw	r16,0(r6)
 800bc34:	31fffd04 	addi	r7,r6,-12
 800bc38:	81c0041e 	bne	r16,r7,800bc4c <_malloc_r+0x1dc>
 800bc3c:	0000fb06 	br	800c02c <_malloc_r+0x5bc>
 800bc40:	1801030e 	bge	r3,zero,800c050 <_malloc_r+0x5e0>
 800bc44:	84000317 	ldw	r16,12(r16)
 800bc48:	81c0f826 	beq	r16,r7,800c02c <_malloc_r+0x5bc>
 800bc4c:	80800117 	ldw	r2,4(r16)
 800bc50:	1284703a 	and	r2,r2,r10
 800bc54:	1447c83a 	sub	r3,r2,r17
 800bc58:	48fff90e 	bge	r9,r3,800bc40 <_malloc_r+0x1d0>
 800bc5c:	80800317 	ldw	r2,12(r16)
 800bc60:	81000217 	ldw	r4,8(r16)
 800bc64:	89400054 	ori	r5,r17,1
 800bc68:	81400115 	stw	r5,4(r16)
 800bc6c:	20800315 	stw	r2,12(r4)
 800bc70:	11000215 	stw	r4,8(r2)
 800bc74:	8463883a 	add	r17,r16,r17
 800bc78:	9c400515 	stw	r17,20(r19)
 800bc7c:	9c400415 	stw	r17,16(r19)
 800bc80:	18800054 	ori	r2,r3,1
 800bc84:	88800115 	stw	r2,4(r17)
 800bc88:	8a000315 	stw	r8,12(r17)
 800bc8c:	8a000215 	stw	r8,8(r17)
 800bc90:	88e3883a 	add	r17,r17,r3
 800bc94:	88c00015 	stw	r3,0(r17)
 800bc98:	9009883a 	mov	r4,r18
 800bc9c:	80133840 	call	8013384 <__malloc_unlock>
 800bca0:	80800204 	addi	r2,r16,8
 800bca4:	00001b06 	br	800bd14 <_malloc_r+0x2a4>
 800bca8:	04400404 	movi	r17,16
 800bcac:	89402536 	bltu	r17,r5,800bd44 <_malloc_r+0x2d4>
 800bcb0:	80133600 	call	8013360 <__malloc_lock>
 800bcb4:	00800184 	movi	r2,6
 800bcb8:	01000084 	movi	r4,2
 800bcbc:	04c20074 	movhi	r19,2049
 800bcc0:	1085883a 	add	r2,r2,r2
 800bcc4:	9cd89104 	addi	r19,r19,25156
 800bcc8:	1085883a 	add	r2,r2,r2
 800bccc:	9885883a 	add	r2,r19,r2
 800bcd0:	14000117 	ldw	r16,4(r2)
 800bcd4:	10fffe04 	addi	r3,r2,-8
 800bcd8:	80c0d926 	beq	r16,r3,800c040 <_malloc_r+0x5d0>
 800bcdc:	80c00117 	ldw	r3,4(r16)
 800bce0:	81000317 	ldw	r4,12(r16)
 800bce4:	00bfff04 	movi	r2,-4
 800bce8:	1884703a 	and	r2,r3,r2
 800bcec:	81400217 	ldw	r5,8(r16)
 800bcf0:	8085883a 	add	r2,r16,r2
 800bcf4:	10c00117 	ldw	r3,4(r2)
 800bcf8:	29000315 	stw	r4,12(r5)
 800bcfc:	21400215 	stw	r5,8(r4)
 800bd00:	18c00054 	ori	r3,r3,1
 800bd04:	10c00115 	stw	r3,4(r2)
 800bd08:	9009883a 	mov	r4,r18
 800bd0c:	80133840 	call	8013384 <__malloc_unlock>
 800bd10:	80800204 	addi	r2,r16,8
 800bd14:	dfc00a17 	ldw	ra,40(sp)
 800bd18:	df000917 	ldw	fp,36(sp)
 800bd1c:	ddc00817 	ldw	r23,32(sp)
 800bd20:	dd800717 	ldw	r22,28(sp)
 800bd24:	dd400617 	ldw	r21,24(sp)
 800bd28:	dd000517 	ldw	r20,20(sp)
 800bd2c:	dcc00417 	ldw	r19,16(sp)
 800bd30:	dc800317 	ldw	r18,12(sp)
 800bd34:	dc400217 	ldw	r17,8(sp)
 800bd38:	dc000117 	ldw	r16,4(sp)
 800bd3c:	dec00b04 	addi	sp,sp,44
 800bd40:	f800283a 	ret
 800bd44:	00800304 	movi	r2,12
 800bd48:	90800015 	stw	r2,0(r18)
 800bd4c:	0005883a 	mov	r2,zero
 800bd50:	003ff006 	br	800bd14 <_malloc_r+0x2a4>
 800bd54:	01002004 	movi	r4,128
 800bd58:	02001004 	movi	r8,64
 800bd5c:	01c00fc4 	movi	r7,63
 800bd60:	003f6106 	br	800bae8 <_malloc_r+0x78>
 800bd64:	4009883a 	mov	r4,r8
 800bd68:	003f7506 	br	800bb40 <_malloc_r+0xd0>
 800bd6c:	81000317 	ldw	r4,12(r16)
 800bd70:	003fde06 	br	800bcec <_malloc_r+0x27c>
 800bd74:	81c5883a 	add	r2,r16,r7
 800bd78:	11400117 	ldw	r5,4(r2)
 800bd7c:	9009883a 	mov	r4,r18
 800bd80:	29400054 	ori	r5,r5,1
 800bd84:	11400115 	stw	r5,4(r2)
 800bd88:	80133840 	call	8013384 <__malloc_unlock>
 800bd8c:	80800204 	addi	r2,r16,8
 800bd90:	003fe006 	br	800bd14 <_malloc_r+0x2a4>
 800bd94:	9c000217 	ldw	r16,8(r19)
 800bd98:	00bfff04 	movi	r2,-4
 800bd9c:	85800117 	ldw	r22,4(r16)
 800bda0:	b0ac703a 	and	r22,r22,r2
 800bda4:	b4400336 	bltu	r22,r17,800bdb4 <_malloc_r+0x344>
 800bda8:	b445c83a 	sub	r2,r22,r17
 800bdac:	00c003c4 	movi	r3,15
 800bdb0:	18805d16 	blt	r3,r2,800bf28 <_malloc_r+0x4b8>
 800bdb4:	05c20074 	movhi	r23,2049
 800bdb8:	008200b4 	movhi	r2,2050
 800bdbc:	10a52f04 	addi	r2,r2,-27460
 800bdc0:	bdde2404 	addi	r23,r23,30864
 800bdc4:	15400017 	ldw	r21,0(r2)
 800bdc8:	b8c00017 	ldw	r3,0(r23)
 800bdcc:	00bfffc4 	movi	r2,-1
 800bdd0:	858d883a 	add	r6,r16,r22
 800bdd4:	8d6b883a 	add	r21,r17,r21
 800bdd8:	1880ea26 	beq	r3,r2,800c184 <_malloc_r+0x714>
 800bddc:	ad4403c4 	addi	r21,r21,4111
 800bde0:	00bc0004 	movi	r2,-4096
 800bde4:	a8aa703a 	and	r21,r21,r2
 800bde8:	a80b883a 	mov	r5,r21
 800bdec:	9009883a 	mov	r4,r18
 800bdf0:	d9800015 	stw	r6,0(sp)
 800bdf4:	800dcb40 	call	800dcb4 <_sbrk_r>
 800bdf8:	1029883a 	mov	r20,r2
 800bdfc:	00bfffc4 	movi	r2,-1
 800be00:	d9800017 	ldw	r6,0(sp)
 800be04:	a080e826 	beq	r20,r2,800c1a8 <_malloc_r+0x738>
 800be08:	a180a636 	bltu	r20,r6,800c0a4 <_malloc_r+0x634>
 800be0c:	070200b4 	movhi	fp,2050
 800be10:	e725fa04 	addi	fp,fp,-26648
 800be14:	e0800017 	ldw	r2,0(fp)
 800be18:	a887883a 	add	r3,r21,r2
 800be1c:	e0c00015 	stw	r3,0(fp)
 800be20:	3500e626 	beq	r6,r20,800c1bc <_malloc_r+0x74c>
 800be24:	b9000017 	ldw	r4,0(r23)
 800be28:	00bfffc4 	movi	r2,-1
 800be2c:	2080ee26 	beq	r4,r2,800c1e8 <_malloc_r+0x778>
 800be30:	a185c83a 	sub	r2,r20,r6
 800be34:	10c5883a 	add	r2,r2,r3
 800be38:	e0800015 	stw	r2,0(fp)
 800be3c:	a0c001cc 	andi	r3,r20,7
 800be40:	1800bc26 	beq	r3,zero,800c134 <_malloc_r+0x6c4>
 800be44:	a0e9c83a 	sub	r20,r20,r3
 800be48:	00840204 	movi	r2,4104
 800be4c:	a5000204 	addi	r20,r20,8
 800be50:	10c7c83a 	sub	r3,r2,r3
 800be54:	a545883a 	add	r2,r20,r21
 800be58:	1083ffcc 	andi	r2,r2,4095
 800be5c:	18abc83a 	sub	r21,r3,r2
 800be60:	a80b883a 	mov	r5,r21
 800be64:	9009883a 	mov	r4,r18
 800be68:	800dcb40 	call	800dcb4 <_sbrk_r>
 800be6c:	00ffffc4 	movi	r3,-1
 800be70:	10c0e126 	beq	r2,r3,800c1f8 <_malloc_r+0x788>
 800be74:	1505c83a 	sub	r2,r2,r20
 800be78:	1545883a 	add	r2,r2,r21
 800be7c:	10800054 	ori	r2,r2,1
 800be80:	e0c00017 	ldw	r3,0(fp)
 800be84:	9d000215 	stw	r20,8(r19)
 800be88:	a0800115 	stw	r2,4(r20)
 800be8c:	a8c7883a 	add	r3,r21,r3
 800be90:	e0c00015 	stw	r3,0(fp)
 800be94:	84c00e26 	beq	r16,r19,800bed0 <_malloc_r+0x460>
 800be98:	018003c4 	movi	r6,15
 800be9c:	3580a72e 	bgeu	r6,r22,800c13c <_malloc_r+0x6cc>
 800bea0:	81400117 	ldw	r5,4(r16)
 800bea4:	013ffe04 	movi	r4,-8
 800bea8:	b0bffd04 	addi	r2,r22,-12
 800beac:	1104703a 	and	r2,r2,r4
 800beb0:	2900004c 	andi	r4,r5,1
 800beb4:	2088b03a 	or	r4,r4,r2
 800beb8:	81000115 	stw	r4,4(r16)
 800bebc:	01400144 	movi	r5,5
 800bec0:	8089883a 	add	r4,r16,r2
 800bec4:	21400115 	stw	r5,4(r4)
 800bec8:	21400215 	stw	r5,8(r4)
 800becc:	3080cd36 	bltu	r6,r2,800c204 <_malloc_r+0x794>
 800bed0:	008200b4 	movhi	r2,2050
 800bed4:	10a52e04 	addi	r2,r2,-27464
 800bed8:	11000017 	ldw	r4,0(r2)
 800bedc:	20c0012e 	bgeu	r4,r3,800bee4 <_malloc_r+0x474>
 800bee0:	10c00015 	stw	r3,0(r2)
 800bee4:	008200b4 	movhi	r2,2050
 800bee8:	10a52d04 	addi	r2,r2,-27468
 800beec:	11000017 	ldw	r4,0(r2)
 800bef0:	9c000217 	ldw	r16,8(r19)
 800bef4:	20c0012e 	bgeu	r4,r3,800befc <_malloc_r+0x48c>
 800bef8:	10c00015 	stw	r3,0(r2)
 800befc:	80c00117 	ldw	r3,4(r16)
 800bf00:	00bfff04 	movi	r2,-4
 800bf04:	1886703a 	and	r3,r3,r2
 800bf08:	1c45c83a 	sub	r2,r3,r17
 800bf0c:	1c400236 	bltu	r3,r17,800bf18 <_malloc_r+0x4a8>
 800bf10:	00c003c4 	movi	r3,15
 800bf14:	18800416 	blt	r3,r2,800bf28 <_malloc_r+0x4b8>
 800bf18:	9009883a 	mov	r4,r18
 800bf1c:	80133840 	call	8013384 <__malloc_unlock>
 800bf20:	0005883a 	mov	r2,zero
 800bf24:	003f7b06 	br	800bd14 <_malloc_r+0x2a4>
 800bf28:	88c00054 	ori	r3,r17,1
 800bf2c:	80c00115 	stw	r3,4(r16)
 800bf30:	8463883a 	add	r17,r16,r17
 800bf34:	10800054 	ori	r2,r2,1
 800bf38:	9c400215 	stw	r17,8(r19)
 800bf3c:	88800115 	stw	r2,4(r17)
 800bf40:	9009883a 	mov	r4,r18
 800bf44:	80133840 	call	8013384 <__malloc_unlock>
 800bf48:	80800204 	addi	r2,r16,8
 800bf4c:	003f7106 	br	800bd14 <_malloc_r+0x2a4>
 800bf50:	00c00504 	movi	r3,20
 800bf54:	18804a2e 	bgeu	r3,r2,800c080 <_malloc_r+0x610>
 800bf58:	00c01504 	movi	r3,84
 800bf5c:	18806e36 	bltu	r3,r2,800c118 <_malloc_r+0x6a8>
 800bf60:	8804d33a 	srli	r2,r17,12
 800bf64:	12001bc4 	addi	r8,r2,111
 800bf68:	11c01b84 	addi	r7,r2,110
 800bf6c:	4209883a 	add	r4,r8,r8
 800bf70:	003edd06 	br	800bae8 <_malloc_r+0x78>
 800bf74:	3804d27a 	srli	r2,r7,9
 800bf78:	00c00104 	movi	r3,4
 800bf7c:	1880442e 	bgeu	r3,r2,800c090 <_malloc_r+0x620>
 800bf80:	00c00504 	movi	r3,20
 800bf84:	18808136 	bltu	r3,r2,800c18c <_malloc_r+0x71c>
 800bf88:	11401704 	addi	r5,r2,92
 800bf8c:	10c016c4 	addi	r3,r2,91
 800bf90:	294b883a 	add	r5,r5,r5
 800bf94:	294b883a 	add	r5,r5,r5
 800bf98:	294b883a 	add	r5,r5,r5
 800bf9c:	994b883a 	add	r5,r19,r5
 800bfa0:	28800017 	ldw	r2,0(r5)
 800bfa4:	01820074 	movhi	r6,2049
 800bfa8:	297ffe04 	addi	r5,r5,-8
 800bfac:	31989104 	addi	r6,r6,25156
 800bfb0:	28806526 	beq	r5,r2,800c148 <_malloc_r+0x6d8>
 800bfb4:	01bfff04 	movi	r6,-4
 800bfb8:	10c00117 	ldw	r3,4(r2)
 800bfbc:	1986703a 	and	r3,r3,r6
 800bfc0:	38c0022e 	bgeu	r7,r3,800bfcc <_malloc_r+0x55c>
 800bfc4:	10800217 	ldw	r2,8(r2)
 800bfc8:	28bffb1e 	bne	r5,r2,800bfb8 <_malloc_r+0x548>
 800bfcc:	11400317 	ldw	r5,12(r2)
 800bfd0:	98c00117 	ldw	r3,4(r19)
 800bfd4:	81400315 	stw	r5,12(r16)
 800bfd8:	80800215 	stw	r2,8(r16)
 800bfdc:	2c000215 	stw	r16,8(r5)
 800bfe0:	14000315 	stw	r16,12(r2)
 800bfe4:	003ef806 	br	800bbc8 <_malloc_r+0x158>
 800bfe8:	88c00054 	ori	r3,r17,1
 800bfec:	80c00115 	stw	r3,4(r16)
 800bff0:	8463883a 	add	r17,r16,r17
 800bff4:	34400515 	stw	r17,20(r6)
 800bff8:	34400415 	stw	r17,16(r6)
 800bffc:	10c00054 	ori	r3,r2,1
 800c000:	8a000315 	stw	r8,12(r17)
 800c004:	8a000215 	stw	r8,8(r17)
 800c008:	88c00115 	stw	r3,4(r17)
 800c00c:	88a3883a 	add	r17,r17,r2
 800c010:	88800015 	stw	r2,0(r17)
 800c014:	9009883a 	mov	r4,r18
 800c018:	80133840 	call	8013384 <__malloc_unlock>
 800c01c:	80800204 	addi	r2,r16,8
 800c020:	003f3c06 	br	800bd14 <_malloc_r+0x2a4>
 800c024:	30c00117 	ldw	r3,4(r6)
 800c028:	003ee706 	br	800bbc8 <_malloc_r+0x158>
 800c02c:	5ac00044 	addi	r11,r11,1
 800c030:	588000cc 	andi	r2,r11,3
 800c034:	31800204 	addi	r6,r6,8
 800c038:	103efd1e 	bne	r2,zero,800bc30 <_malloc_r+0x1c0>
 800c03c:	00002406 	br	800c0d0 <_malloc_r+0x660>
 800c040:	14000317 	ldw	r16,12(r2)
 800c044:	143f251e 	bne	r2,r16,800bcdc <_malloc_r+0x26c>
 800c048:	21000084 	addi	r4,r4,2
 800c04c:	003ebc06 	br	800bb40 <_malloc_r+0xd0>
 800c050:	8085883a 	add	r2,r16,r2
 800c054:	10c00117 	ldw	r3,4(r2)
 800c058:	81000317 	ldw	r4,12(r16)
 800c05c:	81400217 	ldw	r5,8(r16)
 800c060:	18c00054 	ori	r3,r3,1
 800c064:	10c00115 	stw	r3,4(r2)
 800c068:	29000315 	stw	r4,12(r5)
 800c06c:	21400215 	stw	r5,8(r4)
 800c070:	9009883a 	mov	r4,r18
 800c074:	80133840 	call	8013384 <__malloc_unlock>
 800c078:	80800204 	addi	r2,r16,8
 800c07c:	003f2506 	br	800bd14 <_malloc_r+0x2a4>
 800c080:	12001704 	addi	r8,r2,92
 800c084:	11c016c4 	addi	r7,r2,91
 800c088:	4209883a 	add	r4,r8,r8
 800c08c:	003e9606 	br	800bae8 <_malloc_r+0x78>
 800c090:	3804d1ba 	srli	r2,r7,6
 800c094:	11400e44 	addi	r5,r2,57
 800c098:	10c00e04 	addi	r3,r2,56
 800c09c:	294b883a 	add	r5,r5,r5
 800c0a0:	003fbc06 	br	800bf94 <_malloc_r+0x524>
 800c0a4:	84ff5926 	beq	r16,r19,800be0c <_malloc_r+0x39c>
 800c0a8:	00820074 	movhi	r2,2049
 800c0ac:	10989104 	addi	r2,r2,25156
 800c0b0:	14000217 	ldw	r16,8(r2)
 800c0b4:	00bfff04 	movi	r2,-4
 800c0b8:	80c00117 	ldw	r3,4(r16)
 800c0bc:	1886703a 	and	r3,r3,r2
 800c0c0:	003f9106 	br	800bf08 <_malloc_r+0x498>
 800c0c4:	60800217 	ldw	r2,8(r12)
 800c0c8:	213fffc4 	addi	r4,r4,-1
 800c0cc:	1300651e 	bne	r2,r12,800c264 <_malloc_r+0x7f4>
 800c0d0:	208000cc 	andi	r2,r4,3
 800c0d4:	633ffe04 	addi	r12,r12,-8
 800c0d8:	103ffa1e 	bne	r2,zero,800c0c4 <_malloc_r+0x654>
 800c0dc:	98800117 	ldw	r2,4(r19)
 800c0e0:	0146303a 	nor	r3,zero,r5
 800c0e4:	1884703a 	and	r2,r3,r2
 800c0e8:	98800115 	stw	r2,4(r19)
 800c0ec:	294b883a 	add	r5,r5,r5
 800c0f0:	117f2836 	bltu	r2,r5,800bd94 <_malloc_r+0x324>
 800c0f4:	283f2726 	beq	r5,zero,800bd94 <_malloc_r+0x324>
 800c0f8:	2886703a 	and	r3,r5,r2
 800c0fc:	5809883a 	mov	r4,r11
 800c100:	183ec31e 	bne	r3,zero,800bc10 <_malloc_r+0x1a0>
 800c104:	294b883a 	add	r5,r5,r5
 800c108:	2886703a 	and	r3,r5,r2
 800c10c:	21000104 	addi	r4,r4,4
 800c110:	183ffc26 	beq	r3,zero,800c104 <_malloc_r+0x694>
 800c114:	003ebe06 	br	800bc10 <_malloc_r+0x1a0>
 800c118:	00c05504 	movi	r3,340
 800c11c:	18801236 	bltu	r3,r2,800c168 <_malloc_r+0x6f8>
 800c120:	8804d3fa 	srli	r2,r17,15
 800c124:	12001e04 	addi	r8,r2,120
 800c128:	11c01dc4 	addi	r7,r2,119
 800c12c:	4209883a 	add	r4,r8,r8
 800c130:	003e6d06 	br	800bae8 <_malloc_r+0x78>
 800c134:	00c40004 	movi	r3,4096
 800c138:	003f4606 	br	800be54 <_malloc_r+0x3e4>
 800c13c:	00800044 	movi	r2,1
 800c140:	a0800115 	stw	r2,4(r20)
 800c144:	003f7406 	br	800bf18 <_malloc_r+0x4a8>
 800c148:	1805d0ba 	srai	r2,r3,2
 800c14c:	01c00044 	movi	r7,1
 800c150:	30c00117 	ldw	r3,4(r6)
 800c154:	388e983a 	sll	r7,r7,r2
 800c158:	2805883a 	mov	r2,r5
 800c15c:	38c6b03a 	or	r3,r7,r3
 800c160:	30c00115 	stw	r3,4(r6)
 800c164:	003f9b06 	br	800bfd4 <_malloc_r+0x564>
 800c168:	00c15504 	movi	r3,1364
 800c16c:	18801a36 	bltu	r3,r2,800c1d8 <_malloc_r+0x768>
 800c170:	8804d4ba 	srli	r2,r17,18
 800c174:	12001f44 	addi	r8,r2,125
 800c178:	11c01f04 	addi	r7,r2,124
 800c17c:	4209883a 	add	r4,r8,r8
 800c180:	003e5906 	br	800bae8 <_malloc_r+0x78>
 800c184:	ad400404 	addi	r21,r21,16
 800c188:	003f1706 	br	800bde8 <_malloc_r+0x378>
 800c18c:	00c01504 	movi	r3,84
 800c190:	18802336 	bltu	r3,r2,800c220 <_malloc_r+0x7b0>
 800c194:	3804d33a 	srli	r2,r7,12
 800c198:	11401bc4 	addi	r5,r2,111
 800c19c:	10c01b84 	addi	r3,r2,110
 800c1a0:	294b883a 	add	r5,r5,r5
 800c1a4:	003f7b06 	br	800bf94 <_malloc_r+0x524>
 800c1a8:	9c000217 	ldw	r16,8(r19)
 800c1ac:	00bfff04 	movi	r2,-4
 800c1b0:	80c00117 	ldw	r3,4(r16)
 800c1b4:	1886703a 	and	r3,r3,r2
 800c1b8:	003f5306 	br	800bf08 <_malloc_r+0x498>
 800c1bc:	3083ffcc 	andi	r2,r6,4095
 800c1c0:	103f181e 	bne	r2,zero,800be24 <_malloc_r+0x3b4>
 800c1c4:	99000217 	ldw	r4,8(r19)
 800c1c8:	b545883a 	add	r2,r22,r21
 800c1cc:	10800054 	ori	r2,r2,1
 800c1d0:	20800115 	stw	r2,4(r4)
 800c1d4:	003f3e06 	br	800bed0 <_malloc_r+0x460>
 800c1d8:	01003f84 	movi	r4,254
 800c1dc:	02001fc4 	movi	r8,127
 800c1e0:	01c01f84 	movi	r7,126
 800c1e4:	003e4006 	br	800bae8 <_malloc_r+0x78>
 800c1e8:	00820074 	movhi	r2,2049
 800c1ec:	109e2404 	addi	r2,r2,30864
 800c1f0:	15000015 	stw	r20,0(r2)
 800c1f4:	003f1106 	br	800be3c <_malloc_r+0x3cc>
 800c1f8:	00800044 	movi	r2,1
 800c1fc:	002b883a 	mov	r21,zero
 800c200:	003f1f06 	br	800be80 <_malloc_r+0x410>
 800c204:	81400204 	addi	r5,r16,8
 800c208:	9009883a 	mov	r4,r18
 800c20c:	800ae1c0 	call	800ae1c <_free_r>
 800c210:	008200b4 	movhi	r2,2050
 800c214:	10a5fa04 	addi	r2,r2,-26648
 800c218:	10c00017 	ldw	r3,0(r2)
 800c21c:	003f2c06 	br	800bed0 <_malloc_r+0x460>
 800c220:	00c05504 	movi	r3,340
 800c224:	18800536 	bltu	r3,r2,800c23c <_malloc_r+0x7cc>
 800c228:	3804d3fa 	srli	r2,r7,15
 800c22c:	11401e04 	addi	r5,r2,120
 800c230:	10c01dc4 	addi	r3,r2,119
 800c234:	294b883a 	add	r5,r5,r5
 800c238:	003f5606 	br	800bf94 <_malloc_r+0x524>
 800c23c:	00c15504 	movi	r3,1364
 800c240:	18800536 	bltu	r3,r2,800c258 <_malloc_r+0x7e8>
 800c244:	3804d4ba 	srli	r2,r7,18
 800c248:	11401f44 	addi	r5,r2,125
 800c24c:	10c01f04 	addi	r3,r2,124
 800c250:	294b883a 	add	r5,r5,r5
 800c254:	003f4f06 	br	800bf94 <_malloc_r+0x524>
 800c258:	01403f84 	movi	r5,254
 800c25c:	00c01f84 	movi	r3,126
 800c260:	003f4c06 	br	800bf94 <_malloc_r+0x524>
 800c264:	98800117 	ldw	r2,4(r19)
 800c268:	003fa006 	br	800c0ec <_malloc_r+0x67c>
 800c26c:	8808d0fa 	srli	r4,r17,3
 800c270:	20800044 	addi	r2,r4,1
 800c274:	1085883a 	add	r2,r2,r2
 800c278:	003e9006 	br	800bcbc <_malloc_r+0x24c>

0800c27c <memchr>:
 800c27c:	208000cc 	andi	r2,r4,3
 800c280:	280f883a 	mov	r7,r5
 800c284:	10003426 	beq	r2,zero,800c358 <memchr+0xdc>
 800c288:	30bfffc4 	addi	r2,r6,-1
 800c28c:	30001a26 	beq	r6,zero,800c2f8 <memchr+0x7c>
 800c290:	20c00003 	ldbu	r3,0(r4)
 800c294:	29803fcc 	andi	r6,r5,255
 800c298:	30c0051e 	bne	r6,r3,800c2b0 <memchr+0x34>
 800c29c:	00001806 	br	800c300 <memchr+0x84>
 800c2a0:	10001526 	beq	r2,zero,800c2f8 <memchr+0x7c>
 800c2a4:	20c00003 	ldbu	r3,0(r4)
 800c2a8:	10bfffc4 	addi	r2,r2,-1
 800c2ac:	30c01426 	beq	r6,r3,800c300 <memchr+0x84>
 800c2b0:	21000044 	addi	r4,r4,1
 800c2b4:	20c000cc 	andi	r3,r4,3
 800c2b8:	183ff91e 	bne	r3,zero,800c2a0 <memchr+0x24>
 800c2bc:	020000c4 	movi	r8,3
 800c2c0:	40801136 	bltu	r8,r2,800c308 <memchr+0x8c>
 800c2c4:	10000c26 	beq	r2,zero,800c2f8 <memchr+0x7c>
 800c2c8:	20c00003 	ldbu	r3,0(r4)
 800c2cc:	29403fcc 	andi	r5,r5,255
 800c2d0:	28c00b26 	beq	r5,r3,800c300 <memchr+0x84>
 800c2d4:	20c00044 	addi	r3,r4,1
 800c2d8:	39803fcc 	andi	r6,r7,255
 800c2dc:	2089883a 	add	r4,r4,r2
 800c2e0:	00000306 	br	800c2f0 <memchr+0x74>
 800c2e4:	18c00044 	addi	r3,r3,1
 800c2e8:	197fffc3 	ldbu	r5,-1(r3)
 800c2ec:	31400526 	beq	r6,r5,800c304 <memchr+0x88>
 800c2f0:	1805883a 	mov	r2,r3
 800c2f4:	20fffb1e 	bne	r4,r3,800c2e4 <memchr+0x68>
 800c2f8:	0005883a 	mov	r2,zero
 800c2fc:	f800283a 	ret
 800c300:	2005883a 	mov	r2,r4
 800c304:	f800283a 	ret
 800c308:	28c03fcc 	andi	r3,r5,255
 800c30c:	1812923a 	slli	r9,r3,8
 800c310:	02ffbff4 	movhi	r11,65279
 800c314:	02a02074 	movhi	r10,32897
 800c318:	48d2b03a 	or	r9,r9,r3
 800c31c:	4806943a 	slli	r3,r9,16
 800c320:	5affbfc4 	addi	r11,r11,-257
 800c324:	52a02004 	addi	r10,r10,-32640
 800c328:	48d2b03a 	or	r9,r9,r3
 800c32c:	20c00017 	ldw	r3,0(r4)
 800c330:	48c6f03a 	xor	r3,r9,r3
 800c334:	1acd883a 	add	r6,r3,r11
 800c338:	00c6303a 	nor	r3,zero,r3
 800c33c:	30c6703a 	and	r3,r6,r3
 800c340:	1a86703a 	and	r3,r3,r10
 800c344:	183fe01e 	bne	r3,zero,800c2c8 <memchr+0x4c>
 800c348:	10bfff04 	addi	r2,r2,-4
 800c34c:	21000104 	addi	r4,r4,4
 800c350:	40bff636 	bltu	r8,r2,800c32c <memchr+0xb0>
 800c354:	003fdb06 	br	800c2c4 <memchr+0x48>
 800c358:	3005883a 	mov	r2,r6
 800c35c:	003fd706 	br	800c2bc <memchr+0x40>

0800c360 <memmove>:
 800c360:	2005883a 	mov	r2,r4
 800c364:	29000b2e 	bgeu	r5,r4,800c394 <memmove+0x34>
 800c368:	298f883a 	add	r7,r5,r6
 800c36c:	21c0092e 	bgeu	r4,r7,800c394 <memmove+0x34>
 800c370:	2187883a 	add	r3,r4,r6
 800c374:	198bc83a 	sub	r5,r3,r6
 800c378:	30004826 	beq	r6,zero,800c49c <memmove+0x13c>
 800c37c:	39ffffc4 	addi	r7,r7,-1
 800c380:	39000003 	ldbu	r4,0(r7)
 800c384:	18ffffc4 	addi	r3,r3,-1
 800c388:	19000005 	stb	r4,0(r3)
 800c38c:	28fffb1e 	bne	r5,r3,800c37c <memmove+0x1c>
 800c390:	f800283a 	ret
 800c394:	00c003c4 	movi	r3,15
 800c398:	1980412e 	bgeu	r3,r6,800c4a0 <memmove+0x140>
 800c39c:	2886b03a 	or	r3,r5,r2
 800c3a0:	18c000cc 	andi	r3,r3,3
 800c3a4:	1800401e 	bne	r3,zero,800c4a8 <memmove+0x148>
 800c3a8:	33fffc04 	addi	r15,r6,-16
 800c3ac:	781ed13a 	srli	r15,r15,4
 800c3b0:	28c00104 	addi	r3,r5,4
 800c3b4:	13400104 	addi	r13,r2,4
 800c3b8:	781c913a 	slli	r14,r15,4
 800c3bc:	2b000204 	addi	r12,r5,8
 800c3c0:	12c00204 	addi	r11,r2,8
 800c3c4:	73800504 	addi	r14,r14,20
 800c3c8:	2a800304 	addi	r10,r5,12
 800c3cc:	12400304 	addi	r9,r2,12
 800c3d0:	2b9d883a 	add	r14,r5,r14
 800c3d4:	2811883a 	mov	r8,r5
 800c3d8:	100f883a 	mov	r7,r2
 800c3dc:	41000017 	ldw	r4,0(r8)
 800c3e0:	39c00404 	addi	r7,r7,16
 800c3e4:	18c00404 	addi	r3,r3,16
 800c3e8:	393ffc15 	stw	r4,-16(r7)
 800c3ec:	193ffc17 	ldw	r4,-16(r3)
 800c3f0:	6b400404 	addi	r13,r13,16
 800c3f4:	5ac00404 	addi	r11,r11,16
 800c3f8:	693ffc15 	stw	r4,-16(r13)
 800c3fc:	61000017 	ldw	r4,0(r12)
 800c400:	4a400404 	addi	r9,r9,16
 800c404:	42000404 	addi	r8,r8,16
 800c408:	593ffc15 	stw	r4,-16(r11)
 800c40c:	51000017 	ldw	r4,0(r10)
 800c410:	63000404 	addi	r12,r12,16
 800c414:	52800404 	addi	r10,r10,16
 800c418:	493ffc15 	stw	r4,-16(r9)
 800c41c:	1bbfef1e 	bne	r3,r14,800c3dc <memmove+0x7c>
 800c420:	79000044 	addi	r4,r15,1
 800c424:	2008913a 	slli	r4,r4,4
 800c428:	328003cc 	andi	r10,r6,15
 800c42c:	02c000c4 	movi	r11,3
 800c430:	1107883a 	add	r3,r2,r4
 800c434:	290b883a 	add	r5,r5,r4
 800c438:	5a801e2e 	bgeu	r11,r10,800c4b4 <memmove+0x154>
 800c43c:	1813883a 	mov	r9,r3
 800c440:	2811883a 	mov	r8,r5
 800c444:	500f883a 	mov	r7,r10
 800c448:	41000017 	ldw	r4,0(r8)
 800c44c:	4a400104 	addi	r9,r9,4
 800c450:	39ffff04 	addi	r7,r7,-4
 800c454:	493fff15 	stw	r4,-4(r9)
 800c458:	42000104 	addi	r8,r8,4
 800c45c:	59fffa36 	bltu	r11,r7,800c448 <memmove+0xe8>
 800c460:	513fff04 	addi	r4,r10,-4
 800c464:	2008d0ba 	srli	r4,r4,2
 800c468:	318000cc 	andi	r6,r6,3
 800c46c:	21000044 	addi	r4,r4,1
 800c470:	2109883a 	add	r4,r4,r4
 800c474:	2109883a 	add	r4,r4,r4
 800c478:	1907883a 	add	r3,r3,r4
 800c47c:	290b883a 	add	r5,r5,r4
 800c480:	30000b26 	beq	r6,zero,800c4b0 <memmove+0x150>
 800c484:	198d883a 	add	r6,r3,r6
 800c488:	29c00003 	ldbu	r7,0(r5)
 800c48c:	18c00044 	addi	r3,r3,1
 800c490:	29400044 	addi	r5,r5,1
 800c494:	19ffffc5 	stb	r7,-1(r3)
 800c498:	19bffb1e 	bne	r3,r6,800c488 <memmove+0x128>
 800c49c:	f800283a 	ret
 800c4a0:	1007883a 	mov	r3,r2
 800c4a4:	003ff606 	br	800c480 <memmove+0x120>
 800c4a8:	1007883a 	mov	r3,r2
 800c4ac:	003ff506 	br	800c484 <memmove+0x124>
 800c4b0:	f800283a 	ret
 800c4b4:	500d883a 	mov	r6,r10
 800c4b8:	003ff106 	br	800c480 <memmove+0x120>

0800c4bc <_Balloc>:
 800c4bc:	20801317 	ldw	r2,76(r4)
 800c4c0:	defffc04 	addi	sp,sp,-16
 800c4c4:	dc400115 	stw	r17,4(sp)
 800c4c8:	dc000015 	stw	r16,0(sp)
 800c4cc:	dfc00315 	stw	ra,12(sp)
 800c4d0:	dc800215 	stw	r18,8(sp)
 800c4d4:	2023883a 	mov	r17,r4
 800c4d8:	2821883a 	mov	r16,r5
 800c4dc:	10000f26 	beq	r2,zero,800c51c <_Balloc+0x60>
 800c4e0:	8407883a 	add	r3,r16,r16
 800c4e4:	18c7883a 	add	r3,r3,r3
 800c4e8:	10c7883a 	add	r3,r2,r3
 800c4ec:	18800017 	ldw	r2,0(r3)
 800c4f0:	10001126 	beq	r2,zero,800c538 <_Balloc+0x7c>
 800c4f4:	11000017 	ldw	r4,0(r2)
 800c4f8:	19000015 	stw	r4,0(r3)
 800c4fc:	10000415 	stw	zero,16(r2)
 800c500:	10000315 	stw	zero,12(r2)
 800c504:	dfc00317 	ldw	ra,12(sp)
 800c508:	dc800217 	ldw	r18,8(sp)
 800c50c:	dc400117 	ldw	r17,4(sp)
 800c510:	dc000017 	ldw	r16,0(sp)
 800c514:	dec00404 	addi	sp,sp,16
 800c518:	f800283a 	ret
 800c51c:	01800844 	movi	r6,33
 800c520:	01400104 	movi	r5,4
 800c524:	800f8240 	call	800f824 <_calloc_r>
 800c528:	88801315 	stw	r2,76(r17)
 800c52c:	103fec1e 	bne	r2,zero,800c4e0 <_Balloc+0x24>
 800c530:	0005883a 	mov	r2,zero
 800c534:	003ff306 	br	800c504 <_Balloc+0x48>
 800c538:	01400044 	movi	r5,1
 800c53c:	2c24983a 	sll	r18,r5,r16
 800c540:	8809883a 	mov	r4,r17
 800c544:	91800144 	addi	r6,r18,5
 800c548:	318d883a 	add	r6,r6,r6
 800c54c:	318d883a 	add	r6,r6,r6
 800c550:	800f8240 	call	800f824 <_calloc_r>
 800c554:	103ff626 	beq	r2,zero,800c530 <_Balloc+0x74>
 800c558:	14000115 	stw	r16,4(r2)
 800c55c:	14800215 	stw	r18,8(r2)
 800c560:	003fe606 	br	800c4fc <_Balloc+0x40>

0800c564 <_Bfree>:
 800c564:	28000826 	beq	r5,zero,800c588 <_Bfree+0x24>
 800c568:	28c00117 	ldw	r3,4(r5)
 800c56c:	20801317 	ldw	r2,76(r4)
 800c570:	18c7883a 	add	r3,r3,r3
 800c574:	18c7883a 	add	r3,r3,r3
 800c578:	10c5883a 	add	r2,r2,r3
 800c57c:	10c00017 	ldw	r3,0(r2)
 800c580:	28c00015 	stw	r3,0(r5)
 800c584:	11400015 	stw	r5,0(r2)
 800c588:	f800283a 	ret

0800c58c <__multadd>:
 800c58c:	defff704 	addi	sp,sp,-36
 800c590:	dc800215 	stw	r18,8(sp)
 800c594:	2c800417 	ldw	r18,16(r5)
 800c598:	dd800615 	stw	r22,24(sp)
 800c59c:	dd400515 	stw	r21,20(sp)
 800c5a0:	dd000415 	stw	r20,16(sp)
 800c5a4:	dcc00315 	stw	r19,12(sp)
 800c5a8:	dc400115 	stw	r17,4(sp)
 800c5ac:	dc000015 	stw	r16,0(sp)
 800c5b0:	dfc00815 	stw	ra,32(sp)
 800c5b4:	ddc00715 	stw	r23,28(sp)
 800c5b8:	2827883a 	mov	r19,r5
 800c5bc:	2029883a 	mov	r20,r4
 800c5c0:	3023883a 	mov	r17,r6
 800c5c4:	3821883a 	mov	r16,r7
 800c5c8:	2d400504 	addi	r21,r5,20
 800c5cc:	002d883a 	mov	r22,zero
 800c5d0:	adc00017 	ldw	r23,0(r21)
 800c5d4:	880b883a 	mov	r5,r17
 800c5d8:	ad400104 	addi	r21,r21,4
 800c5dc:	b93fffcc 	andi	r4,r23,65535
 800c5e0:	80057b40 	call	80057b4 <__mulsi3>
 800c5e4:	b808d43a 	srli	r4,r23,16
 800c5e8:	880b883a 	mov	r5,r17
 800c5ec:	1421883a 	add	r16,r2,r16
 800c5f0:	80057b40 	call	80057b4 <__mulsi3>
 800c5f4:	800ed43a 	srli	r7,r16,16
 800c5f8:	80ffffcc 	andi	r3,r16,65535
 800c5fc:	b5800044 	addi	r22,r22,1
 800c600:	11c5883a 	add	r2,r2,r7
 800c604:	100e943a 	slli	r7,r2,16
 800c608:	1020d43a 	srli	r16,r2,16
 800c60c:	38c7883a 	add	r3,r7,r3
 800c610:	a8ffff15 	stw	r3,-4(r21)
 800c614:	b4bfee16 	blt	r22,r18,800c5d0 <__multadd+0x44>
 800c618:	80000926 	beq	r16,zero,800c640 <__multadd+0xb4>
 800c61c:	98800217 	ldw	r2,8(r19)
 800c620:	9080130e 	bge	r18,r2,800c670 <__multadd+0xe4>
 800c624:	90800144 	addi	r2,r18,5
 800c628:	1085883a 	add	r2,r2,r2
 800c62c:	1085883a 	add	r2,r2,r2
 800c630:	9885883a 	add	r2,r19,r2
 800c634:	14000015 	stw	r16,0(r2)
 800c638:	94800044 	addi	r18,r18,1
 800c63c:	9c800415 	stw	r18,16(r19)
 800c640:	9805883a 	mov	r2,r19
 800c644:	dfc00817 	ldw	ra,32(sp)
 800c648:	ddc00717 	ldw	r23,28(sp)
 800c64c:	dd800617 	ldw	r22,24(sp)
 800c650:	dd400517 	ldw	r21,20(sp)
 800c654:	dd000417 	ldw	r20,16(sp)
 800c658:	dcc00317 	ldw	r19,12(sp)
 800c65c:	dc800217 	ldw	r18,8(sp)
 800c660:	dc400117 	ldw	r17,4(sp)
 800c664:	dc000017 	ldw	r16,0(sp)
 800c668:	dec00904 	addi	sp,sp,36
 800c66c:	f800283a 	ret
 800c670:	99400117 	ldw	r5,4(r19)
 800c674:	a009883a 	mov	r4,r20
 800c678:	29400044 	addi	r5,r5,1
 800c67c:	800c4bc0 	call	800c4bc <_Balloc>
 800c680:	99800417 	ldw	r6,16(r19)
 800c684:	99400304 	addi	r5,r19,12
 800c688:	11000304 	addi	r4,r2,12
 800c68c:	31800084 	addi	r6,r6,2
 800c690:	318d883a 	add	r6,r6,r6
 800c694:	318d883a 	add	r6,r6,r6
 800c698:	1023883a 	mov	r17,r2
 800c69c:	800626c0 	call	800626c <memcpy>
 800c6a0:	98000a26 	beq	r19,zero,800c6cc <__multadd+0x140>
 800c6a4:	98c00117 	ldw	r3,4(r19)
 800c6a8:	a0801317 	ldw	r2,76(r20)
 800c6ac:	18c7883a 	add	r3,r3,r3
 800c6b0:	18c7883a 	add	r3,r3,r3
 800c6b4:	10c5883a 	add	r2,r2,r3
 800c6b8:	10c00017 	ldw	r3,0(r2)
 800c6bc:	98c00015 	stw	r3,0(r19)
 800c6c0:	14c00015 	stw	r19,0(r2)
 800c6c4:	8827883a 	mov	r19,r17
 800c6c8:	003fd606 	br	800c624 <__multadd+0x98>
 800c6cc:	8827883a 	mov	r19,r17
 800c6d0:	003fd406 	br	800c624 <__multadd+0x98>

0800c6d4 <__s2b>:
 800c6d4:	defff904 	addi	sp,sp,-28
 800c6d8:	dc400115 	stw	r17,4(sp)
 800c6dc:	dc000015 	stw	r16,0(sp)
 800c6e0:	2023883a 	mov	r17,r4
 800c6e4:	2821883a 	mov	r16,r5
 800c6e8:	39000204 	addi	r4,r7,8
 800c6ec:	01400244 	movi	r5,9
 800c6f0:	dcc00315 	stw	r19,12(sp)
 800c6f4:	dc800215 	stw	r18,8(sp)
 800c6f8:	dfc00615 	stw	ra,24(sp)
 800c6fc:	dd400515 	stw	r21,20(sp)
 800c700:	dd000415 	stw	r20,16(sp)
 800c704:	3825883a 	mov	r18,r7
 800c708:	3027883a 	mov	r19,r6
 800c70c:	8010b240 	call	8010b24 <__divsi3>
 800c710:	00c00044 	movi	r3,1
 800c714:	000b883a 	mov	r5,zero
 800c718:	1880030e 	bge	r3,r2,800c728 <__s2b+0x54>
 800c71c:	18c7883a 	add	r3,r3,r3
 800c720:	29400044 	addi	r5,r5,1
 800c724:	18bffd16 	blt	r3,r2,800c71c <__s2b+0x48>
 800c728:	8809883a 	mov	r4,r17
 800c72c:	800c4bc0 	call	800c4bc <_Balloc>
 800c730:	d8c00717 	ldw	r3,28(sp)
 800c734:	10c00515 	stw	r3,20(r2)
 800c738:	00c00044 	movi	r3,1
 800c73c:	10c00415 	stw	r3,16(r2)
 800c740:	00c00244 	movi	r3,9
 800c744:	1cc0210e 	bge	r3,r19,800c7cc <__s2b+0xf8>
 800c748:	80eb883a 	add	r21,r16,r3
 800c74c:	a829883a 	mov	r20,r21
 800c750:	84e1883a 	add	r16,r16,r19
 800c754:	a1c00007 	ldb	r7,0(r20)
 800c758:	01800284 	movi	r6,10
 800c75c:	a5000044 	addi	r20,r20,1
 800c760:	100b883a 	mov	r5,r2
 800c764:	39fff404 	addi	r7,r7,-48
 800c768:	8809883a 	mov	r4,r17
 800c76c:	800c58c0 	call	800c58c <__multadd>
 800c770:	a43ff81e 	bne	r20,r16,800c754 <__s2b+0x80>
 800c774:	ace1883a 	add	r16,r21,r19
 800c778:	843ffe04 	addi	r16,r16,-8
 800c77c:	9c800a0e 	bge	r19,r18,800c7a8 <__s2b+0xd4>
 800c780:	94e5c83a 	sub	r18,r18,r19
 800c784:	84a5883a 	add	r18,r16,r18
 800c788:	81c00007 	ldb	r7,0(r16)
 800c78c:	01800284 	movi	r6,10
 800c790:	84000044 	addi	r16,r16,1
 800c794:	100b883a 	mov	r5,r2
 800c798:	39fff404 	addi	r7,r7,-48
 800c79c:	8809883a 	mov	r4,r17
 800c7a0:	800c58c0 	call	800c58c <__multadd>
 800c7a4:	84bff81e 	bne	r16,r18,800c788 <__s2b+0xb4>
 800c7a8:	dfc00617 	ldw	ra,24(sp)
 800c7ac:	dd400517 	ldw	r21,20(sp)
 800c7b0:	dd000417 	ldw	r20,16(sp)
 800c7b4:	dcc00317 	ldw	r19,12(sp)
 800c7b8:	dc800217 	ldw	r18,8(sp)
 800c7bc:	dc400117 	ldw	r17,4(sp)
 800c7c0:	dc000017 	ldw	r16,0(sp)
 800c7c4:	dec00704 	addi	sp,sp,28
 800c7c8:	f800283a 	ret
 800c7cc:	84000284 	addi	r16,r16,10
 800c7d0:	1827883a 	mov	r19,r3
 800c7d4:	003fe906 	br	800c77c <__s2b+0xa8>

0800c7d8 <__hi0bits>:
 800c7d8:	20bfffec 	andhi	r2,r4,65535
 800c7dc:	1000141e 	bne	r2,zero,800c830 <__hi0bits+0x58>
 800c7e0:	2008943a 	slli	r4,r4,16
 800c7e4:	00800404 	movi	r2,16
 800c7e8:	20ffc02c 	andhi	r3,r4,65280
 800c7ec:	1800021e 	bne	r3,zero,800c7f8 <__hi0bits+0x20>
 800c7f0:	2008923a 	slli	r4,r4,8
 800c7f4:	10800204 	addi	r2,r2,8
 800c7f8:	20fc002c 	andhi	r3,r4,61440
 800c7fc:	1800021e 	bne	r3,zero,800c808 <__hi0bits+0x30>
 800c800:	2008913a 	slli	r4,r4,4
 800c804:	10800104 	addi	r2,r2,4
 800c808:	20f0002c 	andhi	r3,r4,49152
 800c80c:	1800031e 	bne	r3,zero,800c81c <__hi0bits+0x44>
 800c810:	2109883a 	add	r4,r4,r4
 800c814:	10800084 	addi	r2,r2,2
 800c818:	2109883a 	add	r4,r4,r4
 800c81c:	20000316 	blt	r4,zero,800c82c <__hi0bits+0x54>
 800c820:	2110002c 	andhi	r4,r4,16384
 800c824:	2000041e 	bne	r4,zero,800c838 <__hi0bits+0x60>
 800c828:	00800804 	movi	r2,32
 800c82c:	f800283a 	ret
 800c830:	0005883a 	mov	r2,zero
 800c834:	003fec06 	br	800c7e8 <__hi0bits+0x10>
 800c838:	10800044 	addi	r2,r2,1
 800c83c:	f800283a 	ret

0800c840 <__lo0bits>:
 800c840:	20c00017 	ldw	r3,0(r4)
 800c844:	188001cc 	andi	r2,r3,7
 800c848:	10000826 	beq	r2,zero,800c86c <__lo0bits+0x2c>
 800c84c:	1880004c 	andi	r2,r3,1
 800c850:	1000211e 	bne	r2,zero,800c8d8 <__lo0bits+0x98>
 800c854:	1880008c 	andi	r2,r3,2
 800c858:	1000211e 	bne	r2,zero,800c8e0 <__lo0bits+0xa0>
 800c85c:	1806d0ba 	srli	r3,r3,2
 800c860:	00800084 	movi	r2,2
 800c864:	20c00015 	stw	r3,0(r4)
 800c868:	f800283a 	ret
 800c86c:	18bfffcc 	andi	r2,r3,65535
 800c870:	10001326 	beq	r2,zero,800c8c0 <__lo0bits+0x80>
 800c874:	0005883a 	mov	r2,zero
 800c878:	19403fcc 	andi	r5,r3,255
 800c87c:	2800021e 	bne	r5,zero,800c888 <__lo0bits+0x48>
 800c880:	1806d23a 	srli	r3,r3,8
 800c884:	10800204 	addi	r2,r2,8
 800c888:	194003cc 	andi	r5,r3,15
 800c88c:	2800021e 	bne	r5,zero,800c898 <__lo0bits+0x58>
 800c890:	1806d13a 	srli	r3,r3,4
 800c894:	10800104 	addi	r2,r2,4
 800c898:	194000cc 	andi	r5,r3,3
 800c89c:	2800021e 	bne	r5,zero,800c8a8 <__lo0bits+0x68>
 800c8a0:	1806d0ba 	srli	r3,r3,2
 800c8a4:	10800084 	addi	r2,r2,2
 800c8a8:	1940004c 	andi	r5,r3,1
 800c8ac:	2800081e 	bne	r5,zero,800c8d0 <__lo0bits+0x90>
 800c8b0:	1806d07a 	srli	r3,r3,1
 800c8b4:	1800051e 	bne	r3,zero,800c8cc <__lo0bits+0x8c>
 800c8b8:	00800804 	movi	r2,32
 800c8bc:	f800283a 	ret
 800c8c0:	1806d43a 	srli	r3,r3,16
 800c8c4:	00800404 	movi	r2,16
 800c8c8:	003feb06 	br	800c878 <__lo0bits+0x38>
 800c8cc:	10800044 	addi	r2,r2,1
 800c8d0:	20c00015 	stw	r3,0(r4)
 800c8d4:	f800283a 	ret
 800c8d8:	0005883a 	mov	r2,zero
 800c8dc:	f800283a 	ret
 800c8e0:	1806d07a 	srli	r3,r3,1
 800c8e4:	00800044 	movi	r2,1
 800c8e8:	20c00015 	stw	r3,0(r4)
 800c8ec:	f800283a 	ret

0800c8f0 <__i2b>:
 800c8f0:	defffd04 	addi	sp,sp,-12
 800c8f4:	dc000015 	stw	r16,0(sp)
 800c8f8:	04000044 	movi	r16,1
 800c8fc:	dc400115 	stw	r17,4(sp)
 800c900:	2823883a 	mov	r17,r5
 800c904:	800b883a 	mov	r5,r16
 800c908:	dfc00215 	stw	ra,8(sp)
 800c90c:	800c4bc0 	call	800c4bc <_Balloc>
 800c910:	14400515 	stw	r17,20(r2)
 800c914:	14000415 	stw	r16,16(r2)
 800c918:	dfc00217 	ldw	ra,8(sp)
 800c91c:	dc400117 	ldw	r17,4(sp)
 800c920:	dc000017 	ldw	r16,0(sp)
 800c924:	dec00304 	addi	sp,sp,12
 800c928:	f800283a 	ret

0800c92c <__multiply>:
 800c92c:	deffef04 	addi	sp,sp,-68
 800c930:	dc400815 	stw	r17,32(sp)
 800c934:	dc000715 	stw	r16,28(sp)
 800c938:	34400417 	ldw	r17,16(r6)
 800c93c:	2c000417 	ldw	r16,16(r5)
 800c940:	dd800d15 	stw	r22,52(sp)
 800c944:	dc800915 	stw	r18,36(sp)
 800c948:	dfc01015 	stw	ra,64(sp)
 800c94c:	df000f15 	stw	fp,60(sp)
 800c950:	ddc00e15 	stw	r23,56(sp)
 800c954:	dd400c15 	stw	r21,48(sp)
 800c958:	dd000b15 	stw	r20,44(sp)
 800c95c:	dcc00a15 	stw	r19,40(sp)
 800c960:	2825883a 	mov	r18,r5
 800c964:	302d883a 	mov	r22,r6
 800c968:	8440050e 	bge	r16,r17,800c980 <__multiply+0x54>
 800c96c:	8007883a 	mov	r3,r16
 800c970:	3025883a 	mov	r18,r6
 800c974:	8821883a 	mov	r16,r17
 800c978:	282d883a 	mov	r22,r5
 800c97c:	1823883a 	mov	r17,r3
 800c980:	90800217 	ldw	r2,8(r18)
 800c984:	8447883a 	add	r3,r16,r17
 800c988:	d8c00215 	stw	r3,8(sp)
 800c98c:	91400117 	ldw	r5,4(r18)
 800c990:	10c0010e 	bge	r2,r3,800c998 <__multiply+0x6c>
 800c994:	29400044 	addi	r5,r5,1
 800c998:	800c4bc0 	call	800c4bc <_Balloc>
 800c99c:	d8c00217 	ldw	r3,8(sp)
 800c9a0:	d8800615 	stw	r2,24(sp)
 800c9a4:	18eb883a 	add	r21,r3,r3
 800c9a8:	ad6b883a 	add	r21,r21,r21
 800c9ac:	10c00504 	addi	r3,r2,20
 800c9b0:	1d6b883a 	add	r21,r3,r21
 800c9b4:	d8c00115 	stw	r3,4(sp)
 800c9b8:	dd400315 	stw	r21,12(sp)
 800c9bc:	1805883a 	mov	r2,r3
 800c9c0:	1d40042e 	bgeu	r3,r21,800c9d4 <__multiply+0xa8>
 800c9c4:	d8c00317 	ldw	r3,12(sp)
 800c9c8:	10000015 	stw	zero,0(r2)
 800c9cc:	10800104 	addi	r2,r2,4
 800c9d0:	10fffc36 	bltu	r2,r3,800c9c4 <__multiply+0x98>
 800c9d4:	8c63883a 	add	r17,r17,r17
 800c9d8:	b5800504 	addi	r22,r22,20
 800c9dc:	8c63883a 	add	r17,r17,r17
 800c9e0:	94800504 	addi	r18,r18,20
 800c9e4:	8421883a 	add	r16,r16,r16
 800c9e8:	b463883a 	add	r17,r22,r17
 800c9ec:	8421883a 	add	r16,r16,r16
 800c9f0:	dd800015 	stw	r22,0(sp)
 800c9f4:	dc800415 	stw	r18,16(sp)
 800c9f8:	dc400515 	stw	r17,20(sp)
 800c9fc:	9429883a 	add	r20,r18,r16
 800ca00:	b4404f2e 	bgeu	r22,r17,800cb40 <__multiply+0x214>
 800ca04:	d8c00017 	ldw	r3,0(sp)
 800ca08:	1c800017 	ldw	r18,0(r3)
 800ca0c:	947fffcc 	andi	r17,r18,65535
 800ca10:	88001e26 	beq	r17,zero,800ca8c <__multiply+0x160>
 800ca14:	dd800117 	ldw	r22,4(sp)
 800ca18:	dd400417 	ldw	r21,16(sp)
 800ca1c:	0027883a 	mov	r19,zero
 800ca20:	ac800017 	ldw	r18,0(r21)
 800ca24:	b4000017 	ldw	r16,0(r22)
 800ca28:	880b883a 	mov	r5,r17
 800ca2c:	913fffcc 	andi	r4,r18,65535
 800ca30:	80057b40 	call	80057b4 <__mulsi3>
 800ca34:	9008d43a 	srli	r4,r18,16
 800ca38:	84bfffcc 	andi	r18,r16,65535
 800ca3c:	1485883a 	add	r2,r2,r18
 800ca40:	14e5883a 	add	r18,r2,r19
 800ca44:	8020d43a 	srli	r16,r16,16
 800ca48:	9026d43a 	srli	r19,r18,16
 800ca4c:	880b883a 	mov	r5,r17
 800ca50:	80057b40 	call	80057b4 <__mulsi3>
 800ca54:	1405883a 	add	r2,r2,r16
 800ca58:	14e1883a 	add	r16,r2,r19
 800ca5c:	90ffffcc 	andi	r3,r18,65535
 800ca60:	8024943a 	slli	r18,r16,16
 800ca64:	ad400104 	addi	r21,r21,4
 800ca68:	b005883a 	mov	r2,r22
 800ca6c:	90c6b03a 	or	r3,r18,r3
 800ca70:	b0c00015 	stw	r3,0(r22)
 800ca74:	8026d43a 	srli	r19,r16,16
 800ca78:	b5800104 	addi	r22,r22,4
 800ca7c:	ad3fe836 	bltu	r21,r20,800ca20 <__multiply+0xf4>
 800ca80:	d8c00017 	ldw	r3,0(sp)
 800ca84:	14c00115 	stw	r19,4(r2)
 800ca88:	1c800017 	ldw	r18,0(r3)
 800ca8c:	9024d43a 	srli	r18,r18,16
 800ca90:	90002226 	beq	r18,zero,800cb1c <__multiply+0x1f0>
 800ca94:	d8c00117 	ldw	r3,4(sp)
 800ca98:	dd800417 	ldw	r22,16(sp)
 800ca9c:	002f883a 	mov	r23,zero
 800caa0:	1f000017 	ldw	fp,0(r3)
 800caa4:	1823883a 	mov	r17,r3
 800caa8:	182b883a 	mov	r21,r3
 800caac:	e021883a 	mov	r16,fp
 800cab0:	00000106 	br	800cab8 <__multiply+0x18c>
 800cab4:	982b883a 	mov	r21,r19
 800cab8:	b100000b 	ldhu	r4,0(r22)
 800cabc:	8020d43a 	srli	r16,r16,16
 800cac0:	900b883a 	mov	r5,r18
 800cac4:	80057b40 	call	80057b4 <__mulsi3>
 800cac8:	1405883a 	add	r2,r2,r16
 800cacc:	15ef883a 	add	r23,r2,r23
 800cad0:	b804943a 	slli	r2,r23,16
 800cad4:	e0ffffcc 	andi	r3,fp,65535
 800cad8:	8c400104 	addi	r17,r17,4
 800cadc:	10c6b03a 	or	r3,r2,r3
 800cae0:	88ffff15 	stw	r3,-4(r17)
 800cae4:	b5800104 	addi	r22,r22,4
 800cae8:	b13fff17 	ldw	r4,-4(r22)
 800caec:	acc00104 	addi	r19,r21,4
 800caf0:	900b883a 	mov	r5,r18
 800caf4:	2008d43a 	srli	r4,r4,16
 800caf8:	9c000017 	ldw	r16,0(r19)
 800cafc:	80057b40 	call	80057b4 <__mulsi3>
 800cb00:	b806d43a 	srli	r3,r23,16
 800cb04:	813fffcc 	andi	r4,r16,65535
 800cb08:	1105883a 	add	r2,r2,r4
 800cb0c:	10f9883a 	add	fp,r2,r3
 800cb10:	e02ed43a 	srli	r23,fp,16
 800cb14:	b53fe736 	bltu	r22,r20,800cab4 <__multiply+0x188>
 800cb18:	af000115 	stw	fp,4(r21)
 800cb1c:	d8c00017 	ldw	r3,0(sp)
 800cb20:	d9000517 	ldw	r4,20(sp)
 800cb24:	18c00104 	addi	r3,r3,4
 800cb28:	d8c00015 	stw	r3,0(sp)
 800cb2c:	d8c00117 	ldw	r3,4(sp)
 800cb30:	18c00104 	addi	r3,r3,4
 800cb34:	d8c00115 	stw	r3,4(sp)
 800cb38:	d8c00017 	ldw	r3,0(sp)
 800cb3c:	193fb136 	bltu	r3,r4,800ca04 <__multiply+0xd8>
 800cb40:	d8c00217 	ldw	r3,8(sp)
 800cb44:	00c00c0e 	bge	zero,r3,800cb78 <__multiply+0x24c>
 800cb48:	d8c00317 	ldw	r3,12(sp)
 800cb4c:	18bfff17 	ldw	r2,-4(r3)
 800cb50:	1d7fff04 	addi	r21,r3,-4
 800cb54:	10000326 	beq	r2,zero,800cb64 <__multiply+0x238>
 800cb58:	00000706 	br	800cb78 <__multiply+0x24c>
 800cb5c:	a8800017 	ldw	r2,0(r21)
 800cb60:	1000051e 	bne	r2,zero,800cb78 <__multiply+0x24c>
 800cb64:	d8c00217 	ldw	r3,8(sp)
 800cb68:	ad7fff04 	addi	r21,r21,-4
 800cb6c:	18ffffc4 	addi	r3,r3,-1
 800cb70:	d8c00215 	stw	r3,8(sp)
 800cb74:	183ff91e 	bne	r3,zero,800cb5c <__multiply+0x230>
 800cb78:	d8c00617 	ldw	r3,24(sp)
 800cb7c:	d9000217 	ldw	r4,8(sp)
 800cb80:	1805883a 	mov	r2,r3
 800cb84:	19000415 	stw	r4,16(r3)
 800cb88:	dfc01017 	ldw	ra,64(sp)
 800cb8c:	df000f17 	ldw	fp,60(sp)
 800cb90:	ddc00e17 	ldw	r23,56(sp)
 800cb94:	dd800d17 	ldw	r22,52(sp)
 800cb98:	dd400c17 	ldw	r21,48(sp)
 800cb9c:	dd000b17 	ldw	r20,44(sp)
 800cba0:	dcc00a17 	ldw	r19,40(sp)
 800cba4:	dc800917 	ldw	r18,36(sp)
 800cba8:	dc400817 	ldw	r17,32(sp)
 800cbac:	dc000717 	ldw	r16,28(sp)
 800cbb0:	dec01104 	addi	sp,sp,68
 800cbb4:	f800283a 	ret

0800cbb8 <__pow5mult>:
 800cbb8:	defffa04 	addi	sp,sp,-24
 800cbbc:	dcc00315 	stw	r19,12(sp)
 800cbc0:	dc000015 	stw	r16,0(sp)
 800cbc4:	dfc00515 	stw	ra,20(sp)
 800cbc8:	dd000415 	stw	r20,16(sp)
 800cbcc:	dc800215 	stw	r18,8(sp)
 800cbd0:	dc400115 	stw	r17,4(sp)
 800cbd4:	308000cc 	andi	r2,r6,3
 800cbd8:	3021883a 	mov	r16,r6
 800cbdc:	2027883a 	mov	r19,r4
 800cbe0:	10002f1e 	bne	r2,zero,800cca0 <__pow5mult+0xe8>
 800cbe4:	2825883a 	mov	r18,r5
 800cbe8:	8021d0ba 	srai	r16,r16,2
 800cbec:	80001a26 	beq	r16,zero,800cc58 <__pow5mult+0xa0>
 800cbf0:	9c401217 	ldw	r17,72(r19)
 800cbf4:	8800061e 	bne	r17,zero,800cc10 <__pow5mult+0x58>
 800cbf8:	00003406 	br	800cccc <__pow5mult+0x114>
 800cbfc:	8021d07a 	srai	r16,r16,1
 800cc00:	80001526 	beq	r16,zero,800cc58 <__pow5mult+0xa0>
 800cc04:	88800017 	ldw	r2,0(r17)
 800cc08:	10001c26 	beq	r2,zero,800cc7c <__pow5mult+0xc4>
 800cc0c:	1023883a 	mov	r17,r2
 800cc10:	8080004c 	andi	r2,r16,1
 800cc14:	103ff926 	beq	r2,zero,800cbfc <__pow5mult+0x44>
 800cc18:	880d883a 	mov	r6,r17
 800cc1c:	900b883a 	mov	r5,r18
 800cc20:	9809883a 	mov	r4,r19
 800cc24:	800c92c0 	call	800c92c <__multiply>
 800cc28:	90001b26 	beq	r18,zero,800cc98 <__pow5mult+0xe0>
 800cc2c:	91000117 	ldw	r4,4(r18)
 800cc30:	98c01317 	ldw	r3,76(r19)
 800cc34:	8021d07a 	srai	r16,r16,1
 800cc38:	2109883a 	add	r4,r4,r4
 800cc3c:	2109883a 	add	r4,r4,r4
 800cc40:	1907883a 	add	r3,r3,r4
 800cc44:	19000017 	ldw	r4,0(r3)
 800cc48:	91000015 	stw	r4,0(r18)
 800cc4c:	1c800015 	stw	r18,0(r3)
 800cc50:	1025883a 	mov	r18,r2
 800cc54:	803feb1e 	bne	r16,zero,800cc04 <__pow5mult+0x4c>
 800cc58:	9005883a 	mov	r2,r18
 800cc5c:	dfc00517 	ldw	ra,20(sp)
 800cc60:	dd000417 	ldw	r20,16(sp)
 800cc64:	dcc00317 	ldw	r19,12(sp)
 800cc68:	dc800217 	ldw	r18,8(sp)
 800cc6c:	dc400117 	ldw	r17,4(sp)
 800cc70:	dc000017 	ldw	r16,0(sp)
 800cc74:	dec00604 	addi	sp,sp,24
 800cc78:	f800283a 	ret
 800cc7c:	880d883a 	mov	r6,r17
 800cc80:	880b883a 	mov	r5,r17
 800cc84:	9809883a 	mov	r4,r19
 800cc88:	800c92c0 	call	800c92c <__multiply>
 800cc8c:	88800015 	stw	r2,0(r17)
 800cc90:	10000015 	stw	zero,0(r2)
 800cc94:	003fdd06 	br	800cc0c <__pow5mult+0x54>
 800cc98:	1025883a 	mov	r18,r2
 800cc9c:	003fd706 	br	800cbfc <__pow5mult+0x44>
 800cca0:	10bfffc4 	addi	r2,r2,-1
 800cca4:	1085883a 	add	r2,r2,r2
 800cca8:	00c20074 	movhi	r3,2049
 800ccac:	18d70404 	addi	r3,r3,23568
 800ccb0:	1085883a 	add	r2,r2,r2
 800ccb4:	1885883a 	add	r2,r3,r2
 800ccb8:	11800017 	ldw	r6,0(r2)
 800ccbc:	000f883a 	mov	r7,zero
 800ccc0:	800c58c0 	call	800c58c <__multadd>
 800ccc4:	1025883a 	mov	r18,r2
 800ccc8:	003fc706 	br	800cbe8 <__pow5mult+0x30>
 800cccc:	05000044 	movi	r20,1
 800ccd0:	a00b883a 	mov	r5,r20
 800ccd4:	9809883a 	mov	r4,r19
 800ccd8:	800c4bc0 	call	800c4bc <_Balloc>
 800ccdc:	1023883a 	mov	r17,r2
 800cce0:	00809c44 	movi	r2,625
 800cce4:	88800515 	stw	r2,20(r17)
 800cce8:	8d000415 	stw	r20,16(r17)
 800ccec:	9c401215 	stw	r17,72(r19)
 800ccf0:	88000015 	stw	zero,0(r17)
 800ccf4:	003fc606 	br	800cc10 <__pow5mult+0x58>

0800ccf8 <__lshift>:
 800ccf8:	defff904 	addi	sp,sp,-28
 800ccfc:	dd400515 	stw	r21,20(sp)
 800cd00:	dcc00315 	stw	r19,12(sp)
 800cd04:	302bd17a 	srai	r21,r6,5
 800cd08:	2cc00417 	ldw	r19,16(r5)
 800cd0c:	28800217 	ldw	r2,8(r5)
 800cd10:	dd000415 	stw	r20,16(sp)
 800cd14:	ace7883a 	add	r19,r21,r19
 800cd18:	dc800215 	stw	r18,8(sp)
 800cd1c:	dc400115 	stw	r17,4(sp)
 800cd20:	dc000015 	stw	r16,0(sp)
 800cd24:	dfc00615 	stw	ra,24(sp)
 800cd28:	9c000044 	addi	r16,r19,1
 800cd2c:	2823883a 	mov	r17,r5
 800cd30:	3029883a 	mov	r20,r6
 800cd34:	2025883a 	mov	r18,r4
 800cd38:	29400117 	ldw	r5,4(r5)
 800cd3c:	1400030e 	bge	r2,r16,800cd4c <__lshift+0x54>
 800cd40:	1085883a 	add	r2,r2,r2
 800cd44:	29400044 	addi	r5,r5,1
 800cd48:	143ffd16 	blt	r2,r16,800cd40 <__lshift+0x48>
 800cd4c:	9009883a 	mov	r4,r18
 800cd50:	800c4bc0 	call	800c4bc <_Balloc>
 800cd54:	10c00504 	addi	r3,r2,20
 800cd58:	0540070e 	bge	zero,r21,800cd78 <__lshift+0x80>
 800cd5c:	ad6b883a 	add	r21,r21,r21
 800cd60:	ad6b883a 	add	r21,r21,r21
 800cd64:	1809883a 	mov	r4,r3
 800cd68:	1d47883a 	add	r3,r3,r21
 800cd6c:	20000015 	stw	zero,0(r4)
 800cd70:	21000104 	addi	r4,r4,4
 800cd74:	193ffd1e 	bne	r3,r4,800cd6c <__lshift+0x74>
 800cd78:	8a000417 	ldw	r8,16(r17)
 800cd7c:	89000504 	addi	r4,r17,20
 800cd80:	a18007cc 	andi	r6,r20,31
 800cd84:	4211883a 	add	r8,r8,r8
 800cd88:	4211883a 	add	r8,r8,r8
 800cd8c:	2211883a 	add	r8,r4,r8
 800cd90:	30002326 	beq	r6,zero,800ce20 <__lshift+0x128>
 800cd94:	02400804 	movi	r9,32
 800cd98:	4993c83a 	sub	r9,r9,r6
 800cd9c:	000b883a 	mov	r5,zero
 800cda0:	21c00017 	ldw	r7,0(r4)
 800cda4:	1815883a 	mov	r10,r3
 800cda8:	18c00104 	addi	r3,r3,4
 800cdac:	398e983a 	sll	r7,r7,r6
 800cdb0:	21000104 	addi	r4,r4,4
 800cdb4:	394ab03a 	or	r5,r7,r5
 800cdb8:	197fff15 	stw	r5,-4(r3)
 800cdbc:	217fff17 	ldw	r5,-4(r4)
 800cdc0:	2a4ad83a 	srl	r5,r5,r9
 800cdc4:	223ff636 	bltu	r4,r8,800cda0 <__lshift+0xa8>
 800cdc8:	51400115 	stw	r5,4(r10)
 800cdcc:	28001a1e 	bne	r5,zero,800ce38 <__lshift+0x140>
 800cdd0:	843fffc4 	addi	r16,r16,-1
 800cdd4:	14000415 	stw	r16,16(r2)
 800cdd8:	88000826 	beq	r17,zero,800cdfc <__lshift+0x104>
 800cddc:	89000117 	ldw	r4,4(r17)
 800cde0:	90c01317 	ldw	r3,76(r18)
 800cde4:	2109883a 	add	r4,r4,r4
 800cde8:	2109883a 	add	r4,r4,r4
 800cdec:	1907883a 	add	r3,r3,r4
 800cdf0:	19000017 	ldw	r4,0(r3)
 800cdf4:	89000015 	stw	r4,0(r17)
 800cdf8:	1c400015 	stw	r17,0(r3)
 800cdfc:	dfc00617 	ldw	ra,24(sp)
 800ce00:	dd400517 	ldw	r21,20(sp)
 800ce04:	dd000417 	ldw	r20,16(sp)
 800ce08:	dcc00317 	ldw	r19,12(sp)
 800ce0c:	dc800217 	ldw	r18,8(sp)
 800ce10:	dc400117 	ldw	r17,4(sp)
 800ce14:	dc000017 	ldw	r16,0(sp)
 800ce18:	dec00704 	addi	sp,sp,28
 800ce1c:	f800283a 	ret
 800ce20:	21400017 	ldw	r5,0(r4)
 800ce24:	18c00104 	addi	r3,r3,4
 800ce28:	21000104 	addi	r4,r4,4
 800ce2c:	197fff15 	stw	r5,-4(r3)
 800ce30:	223ffb36 	bltu	r4,r8,800ce20 <__lshift+0x128>
 800ce34:	003fe606 	br	800cdd0 <__lshift+0xd8>
 800ce38:	9c000084 	addi	r16,r19,2
 800ce3c:	003fe406 	br	800cdd0 <__lshift+0xd8>

0800ce40 <__mcmp>:
 800ce40:	20800417 	ldw	r2,16(r4)
 800ce44:	28c00417 	ldw	r3,16(r5)
 800ce48:	10c5c83a 	sub	r2,r2,r3
 800ce4c:	1000111e 	bne	r2,zero,800ce94 <__mcmp+0x54>
 800ce50:	18c7883a 	add	r3,r3,r3
 800ce54:	18c7883a 	add	r3,r3,r3
 800ce58:	21000504 	addi	r4,r4,20
 800ce5c:	29400504 	addi	r5,r5,20
 800ce60:	20c5883a 	add	r2,r4,r3
 800ce64:	28cb883a 	add	r5,r5,r3
 800ce68:	00000106 	br	800ce70 <__mcmp+0x30>
 800ce6c:	20800a2e 	bgeu	r4,r2,800ce98 <__mcmp+0x58>
 800ce70:	10bfff04 	addi	r2,r2,-4
 800ce74:	297fff04 	addi	r5,r5,-4
 800ce78:	11800017 	ldw	r6,0(r2)
 800ce7c:	28c00017 	ldw	r3,0(r5)
 800ce80:	30fffa26 	beq	r6,r3,800ce6c <__mcmp+0x2c>
 800ce84:	30c00236 	bltu	r6,r3,800ce90 <__mcmp+0x50>
 800ce88:	00800044 	movi	r2,1
 800ce8c:	f800283a 	ret
 800ce90:	00bfffc4 	movi	r2,-1
 800ce94:	f800283a 	ret
 800ce98:	0005883a 	mov	r2,zero
 800ce9c:	f800283a 	ret

0800cea0 <__mdiff>:
 800cea0:	28c00417 	ldw	r3,16(r5)
 800cea4:	30800417 	ldw	r2,16(r6)
 800cea8:	defffa04 	addi	sp,sp,-24
 800ceac:	dcc00315 	stw	r19,12(sp)
 800ceb0:	dc800215 	stw	r18,8(sp)
 800ceb4:	dfc00515 	stw	ra,20(sp)
 800ceb8:	dd000415 	stw	r20,16(sp)
 800cebc:	dc400115 	stw	r17,4(sp)
 800cec0:	dc000015 	stw	r16,0(sp)
 800cec4:	1887c83a 	sub	r3,r3,r2
 800cec8:	2825883a 	mov	r18,r5
 800cecc:	3027883a 	mov	r19,r6
 800ced0:	1800141e 	bne	r3,zero,800cf24 <__mdiff+0x84>
 800ced4:	1085883a 	add	r2,r2,r2
 800ced8:	1085883a 	add	r2,r2,r2
 800cedc:	2a000504 	addi	r8,r5,20
 800cee0:	34000504 	addi	r16,r6,20
 800cee4:	4087883a 	add	r3,r8,r2
 800cee8:	8085883a 	add	r2,r16,r2
 800ceec:	00000106 	br	800cef4 <__mdiff+0x54>
 800cef0:	40c0592e 	bgeu	r8,r3,800d058 <__mdiff+0x1b8>
 800cef4:	18ffff04 	addi	r3,r3,-4
 800cef8:	10bfff04 	addi	r2,r2,-4
 800cefc:	19c00017 	ldw	r7,0(r3)
 800cf00:	11400017 	ldw	r5,0(r2)
 800cf04:	397ffa26 	beq	r7,r5,800cef0 <__mdiff+0x50>
 800cf08:	3940592e 	bgeu	r7,r5,800d070 <__mdiff+0x1d0>
 800cf0c:	9005883a 	mov	r2,r18
 800cf10:	4023883a 	mov	r17,r8
 800cf14:	9825883a 	mov	r18,r19
 800cf18:	05000044 	movi	r20,1
 800cf1c:	1027883a 	mov	r19,r2
 800cf20:	00000406 	br	800cf34 <__mdiff+0x94>
 800cf24:	18005616 	blt	r3,zero,800d080 <__mdiff+0x1e0>
 800cf28:	34400504 	addi	r17,r6,20
 800cf2c:	2c000504 	addi	r16,r5,20
 800cf30:	0029883a 	mov	r20,zero
 800cf34:	91400117 	ldw	r5,4(r18)
 800cf38:	800c4bc0 	call	800c4bc <_Balloc>
 800cf3c:	92400417 	ldw	r9,16(r18)
 800cf40:	9b000417 	ldw	r12,16(r19)
 800cf44:	12c00504 	addi	r11,r2,20
 800cf48:	4a51883a 	add	r8,r9,r9
 800cf4c:	6319883a 	add	r12,r12,r12
 800cf50:	4211883a 	add	r8,r8,r8
 800cf54:	6319883a 	add	r12,r12,r12
 800cf58:	15000315 	stw	r20,12(r2)
 800cf5c:	8211883a 	add	r8,r16,r8
 800cf60:	8b19883a 	add	r12,r17,r12
 800cf64:	0007883a 	mov	r3,zero
 800cf68:	81400017 	ldw	r5,0(r16)
 800cf6c:	89c00017 	ldw	r7,0(r17)
 800cf70:	59800104 	addi	r6,r11,4
 800cf74:	293fffcc 	andi	r4,r5,65535
 800cf78:	20c7883a 	add	r3,r4,r3
 800cf7c:	393fffcc 	andi	r4,r7,65535
 800cf80:	1909c83a 	sub	r4,r3,r4
 800cf84:	280ad43a 	srli	r5,r5,16
 800cf88:	380ed43a 	srli	r7,r7,16
 800cf8c:	2007d43a 	srai	r3,r4,16
 800cf90:	213fffcc 	andi	r4,r4,65535
 800cf94:	29cbc83a 	sub	r5,r5,r7
 800cf98:	28c7883a 	add	r3,r5,r3
 800cf9c:	180a943a 	slli	r5,r3,16
 800cfa0:	8c400104 	addi	r17,r17,4
 800cfa4:	84000104 	addi	r16,r16,4
 800cfa8:	2908b03a 	or	r4,r5,r4
 800cfac:	59000015 	stw	r4,0(r11)
 800cfb0:	1807d43a 	srai	r3,r3,16
 800cfb4:	3015883a 	mov	r10,r6
 800cfb8:	3017883a 	mov	r11,r6
 800cfbc:	8b3fea36 	bltu	r17,r12,800cf68 <__mdiff+0xc8>
 800cfc0:	8200162e 	bgeu	r16,r8,800d01c <__mdiff+0x17c>
 800cfc4:	8017883a 	mov	r11,r16
 800cfc8:	59400017 	ldw	r5,0(r11)
 800cfcc:	31800104 	addi	r6,r6,4
 800cfd0:	5ac00104 	addi	r11,r11,4
 800cfd4:	293fffcc 	andi	r4,r5,65535
 800cfd8:	20c7883a 	add	r3,r4,r3
 800cfdc:	280ed43a 	srli	r7,r5,16
 800cfe0:	180bd43a 	srai	r5,r3,16
 800cfe4:	193fffcc 	andi	r4,r3,65535
 800cfe8:	3947883a 	add	r3,r7,r5
 800cfec:	180a943a 	slli	r5,r3,16
 800cff0:	1807d43a 	srai	r3,r3,16
 800cff4:	2908b03a 	or	r4,r5,r4
 800cff8:	313fff15 	stw	r4,-4(r6)
 800cffc:	5a3ff236 	bltu	r11,r8,800cfc8 <__mdiff+0x128>
 800d000:	0406303a 	nor	r3,zero,r16
 800d004:	1a07883a 	add	r3,r3,r8
 800d008:	1806d0ba 	srli	r3,r3,2
 800d00c:	18c00044 	addi	r3,r3,1
 800d010:	18c7883a 	add	r3,r3,r3
 800d014:	18c7883a 	add	r3,r3,r3
 800d018:	50d5883a 	add	r10,r10,r3
 800d01c:	50ffff04 	addi	r3,r10,-4
 800d020:	2000041e 	bne	r4,zero,800d034 <__mdiff+0x194>
 800d024:	18ffff04 	addi	r3,r3,-4
 800d028:	19000017 	ldw	r4,0(r3)
 800d02c:	4a7fffc4 	addi	r9,r9,-1
 800d030:	203ffc26 	beq	r4,zero,800d024 <__mdiff+0x184>
 800d034:	12400415 	stw	r9,16(r2)
 800d038:	dfc00517 	ldw	ra,20(sp)
 800d03c:	dd000417 	ldw	r20,16(sp)
 800d040:	dcc00317 	ldw	r19,12(sp)
 800d044:	dc800217 	ldw	r18,8(sp)
 800d048:	dc400117 	ldw	r17,4(sp)
 800d04c:	dc000017 	ldw	r16,0(sp)
 800d050:	dec00604 	addi	sp,sp,24
 800d054:	f800283a 	ret
 800d058:	000b883a 	mov	r5,zero
 800d05c:	800c4bc0 	call	800c4bc <_Balloc>
 800d060:	00c00044 	movi	r3,1
 800d064:	10c00415 	stw	r3,16(r2)
 800d068:	10000515 	stw	zero,20(r2)
 800d06c:	003ff206 	br	800d038 <__mdiff+0x198>
 800d070:	8023883a 	mov	r17,r16
 800d074:	0029883a 	mov	r20,zero
 800d078:	4021883a 	mov	r16,r8
 800d07c:	003fad06 	br	800cf34 <__mdiff+0x94>
 800d080:	9005883a 	mov	r2,r18
 800d084:	94400504 	addi	r17,r18,20
 800d088:	9c000504 	addi	r16,r19,20
 800d08c:	9825883a 	mov	r18,r19
 800d090:	05000044 	movi	r20,1
 800d094:	1027883a 	mov	r19,r2
 800d098:	003fa606 	br	800cf34 <__mdiff+0x94>

0800d09c <__ulp>:
 800d09c:	295ffc2c 	andhi	r5,r5,32752
 800d0a0:	00bf3034 	movhi	r2,64704
 800d0a4:	2887883a 	add	r3,r5,r2
 800d0a8:	00c0020e 	bge	zero,r3,800d0b4 <__ulp+0x18>
 800d0ac:	0005883a 	mov	r2,zero
 800d0b0:	f800283a 	ret
 800d0b4:	00c7c83a 	sub	r3,zero,r3
 800d0b8:	1807d53a 	srai	r3,r3,20
 800d0bc:	008004c4 	movi	r2,19
 800d0c0:	10c00b0e 	bge	r2,r3,800d0f0 <__ulp+0x54>
 800d0c4:	18bffb04 	addi	r2,r3,-20
 800d0c8:	01000784 	movi	r4,30
 800d0cc:	0007883a 	mov	r3,zero
 800d0d0:	20800516 	blt	r4,r2,800d0e8 <__ulp+0x4c>
 800d0d4:	010007c4 	movi	r4,31
 800d0d8:	2089c83a 	sub	r4,r4,r2
 800d0dc:	00800044 	movi	r2,1
 800d0e0:	1104983a 	sll	r2,r2,r4
 800d0e4:	f800283a 	ret
 800d0e8:	00800044 	movi	r2,1
 800d0ec:	f800283a 	ret
 800d0f0:	01400234 	movhi	r5,8
 800d0f4:	28c7d83a 	sra	r3,r5,r3
 800d0f8:	0005883a 	mov	r2,zero
 800d0fc:	f800283a 	ret

0800d100 <__b2d>:
 800d100:	defffa04 	addi	sp,sp,-24
 800d104:	dc000015 	stw	r16,0(sp)
 800d108:	24000417 	ldw	r16,16(r4)
 800d10c:	dc400115 	stw	r17,4(sp)
 800d110:	24400504 	addi	r17,r4,20
 800d114:	8421883a 	add	r16,r16,r16
 800d118:	8421883a 	add	r16,r16,r16
 800d11c:	8c21883a 	add	r16,r17,r16
 800d120:	dc800215 	stw	r18,8(sp)
 800d124:	84bfff17 	ldw	r18,-4(r16)
 800d128:	dd000415 	stw	r20,16(sp)
 800d12c:	dcc00315 	stw	r19,12(sp)
 800d130:	9009883a 	mov	r4,r18
 800d134:	2829883a 	mov	r20,r5
 800d138:	dfc00515 	stw	ra,20(sp)
 800d13c:	800c7d80 	call	800c7d8 <__hi0bits>
 800d140:	00c00804 	movi	r3,32
 800d144:	1889c83a 	sub	r4,r3,r2
 800d148:	a1000015 	stw	r4,0(r20)
 800d14c:	01000284 	movi	r4,10
 800d150:	84ffff04 	addi	r19,r16,-4
 800d154:	20801216 	blt	r4,r2,800d1a0 <__b2d+0xa0>
 800d158:	018002c4 	movi	r6,11
 800d15c:	308dc83a 	sub	r6,r6,r2
 800d160:	9186d83a 	srl	r3,r18,r6
 800d164:	18cffc34 	orhi	r3,r3,16368
 800d168:	8cc0212e 	bgeu	r17,r19,800d1f0 <__b2d+0xf0>
 800d16c:	813ffe17 	ldw	r4,-8(r16)
 800d170:	218cd83a 	srl	r6,r4,r6
 800d174:	10800544 	addi	r2,r2,21
 800d178:	9084983a 	sll	r2,r18,r2
 800d17c:	1184b03a 	or	r2,r2,r6
 800d180:	dfc00517 	ldw	ra,20(sp)
 800d184:	dd000417 	ldw	r20,16(sp)
 800d188:	dcc00317 	ldw	r19,12(sp)
 800d18c:	dc800217 	ldw	r18,8(sp)
 800d190:	dc400117 	ldw	r17,4(sp)
 800d194:	dc000017 	ldw	r16,0(sp)
 800d198:	dec00604 	addi	sp,sp,24
 800d19c:	f800283a 	ret
 800d1a0:	8cc00f2e 	bgeu	r17,r19,800d1e0 <__b2d+0xe0>
 800d1a4:	117ffd44 	addi	r5,r2,-11
 800d1a8:	80bffe17 	ldw	r2,-8(r16)
 800d1ac:	28000e26 	beq	r5,zero,800d1e8 <__b2d+0xe8>
 800d1b0:	1949c83a 	sub	r4,r3,r5
 800d1b4:	9164983a 	sll	r18,r18,r5
 800d1b8:	1106d83a 	srl	r3,r2,r4
 800d1bc:	81bffe04 	addi	r6,r16,-8
 800d1c0:	948ffc34 	orhi	r18,r18,16368
 800d1c4:	90c6b03a 	or	r3,r18,r3
 800d1c8:	89800e2e 	bgeu	r17,r6,800d204 <__b2d+0x104>
 800d1cc:	81bffd17 	ldw	r6,-12(r16)
 800d1d0:	1144983a 	sll	r2,r2,r5
 800d1d4:	310ad83a 	srl	r5,r6,r4
 800d1d8:	2884b03a 	or	r2,r5,r2
 800d1dc:	003fe806 	br	800d180 <__b2d+0x80>
 800d1e0:	10bffd44 	addi	r2,r2,-11
 800d1e4:	1000041e 	bne	r2,zero,800d1f8 <__b2d+0xf8>
 800d1e8:	90cffc34 	orhi	r3,r18,16368
 800d1ec:	003fe406 	br	800d180 <__b2d+0x80>
 800d1f0:	000d883a 	mov	r6,zero
 800d1f4:	003fdf06 	br	800d174 <__b2d+0x74>
 800d1f8:	90a4983a 	sll	r18,r18,r2
 800d1fc:	0005883a 	mov	r2,zero
 800d200:	003ff906 	br	800d1e8 <__b2d+0xe8>
 800d204:	1144983a 	sll	r2,r2,r5
 800d208:	003fdd06 	br	800d180 <__b2d+0x80>

0800d20c <__d2b>:
 800d20c:	defff804 	addi	sp,sp,-32
 800d210:	dc000215 	stw	r16,8(sp)
 800d214:	3021883a 	mov	r16,r6
 800d218:	dc400315 	stw	r17,12(sp)
 800d21c:	8022907a 	slli	r17,r16,1
 800d220:	dd000615 	stw	r20,24(sp)
 800d224:	2829883a 	mov	r20,r5
 800d228:	01400044 	movi	r5,1
 800d22c:	dcc00515 	stw	r19,20(sp)
 800d230:	dc800415 	stw	r18,16(sp)
 800d234:	dfc00715 	stw	ra,28(sp)
 800d238:	3825883a 	mov	r18,r7
 800d23c:	8822d57a 	srli	r17,r17,21
 800d240:	800c4bc0 	call	800c4bc <_Balloc>
 800d244:	1027883a 	mov	r19,r2
 800d248:	00800434 	movhi	r2,16
 800d24c:	10bfffc4 	addi	r2,r2,-1
 800d250:	808c703a 	and	r6,r16,r2
 800d254:	88000126 	beq	r17,zero,800d25c <__d2b+0x50>
 800d258:	31800434 	orhi	r6,r6,16
 800d25c:	d9800015 	stw	r6,0(sp)
 800d260:	a0002426 	beq	r20,zero,800d2f4 <__d2b+0xe8>
 800d264:	d9000104 	addi	r4,sp,4
 800d268:	dd000115 	stw	r20,4(sp)
 800d26c:	800c8400 	call	800c840 <__lo0bits>
 800d270:	d8c00017 	ldw	r3,0(sp)
 800d274:	10002f1e 	bne	r2,zero,800d334 <__d2b+0x128>
 800d278:	d9000117 	ldw	r4,4(sp)
 800d27c:	99000515 	stw	r4,20(r19)
 800d280:	1821003a 	cmpeq	r16,r3,zero
 800d284:	01000084 	movi	r4,2
 800d288:	2421c83a 	sub	r16,r4,r16
 800d28c:	98c00615 	stw	r3,24(r19)
 800d290:	9c000415 	stw	r16,16(r19)
 800d294:	88001f1e 	bne	r17,zero,800d314 <__d2b+0x108>
 800d298:	10bef384 	addi	r2,r2,-1074
 800d29c:	90800015 	stw	r2,0(r18)
 800d2a0:	00900034 	movhi	r2,16384
 800d2a4:	10bfffc4 	addi	r2,r2,-1
 800d2a8:	8085883a 	add	r2,r16,r2
 800d2ac:	1085883a 	add	r2,r2,r2
 800d2b0:	1085883a 	add	r2,r2,r2
 800d2b4:	9885883a 	add	r2,r19,r2
 800d2b8:	11000517 	ldw	r4,20(r2)
 800d2bc:	8020917a 	slli	r16,r16,5
 800d2c0:	800c7d80 	call	800c7d8 <__hi0bits>
 800d2c4:	d8c00817 	ldw	r3,32(sp)
 800d2c8:	8085c83a 	sub	r2,r16,r2
 800d2cc:	18800015 	stw	r2,0(r3)
 800d2d0:	9805883a 	mov	r2,r19
 800d2d4:	dfc00717 	ldw	ra,28(sp)
 800d2d8:	dd000617 	ldw	r20,24(sp)
 800d2dc:	dcc00517 	ldw	r19,20(sp)
 800d2e0:	dc800417 	ldw	r18,16(sp)
 800d2e4:	dc400317 	ldw	r17,12(sp)
 800d2e8:	dc000217 	ldw	r16,8(sp)
 800d2ec:	dec00804 	addi	sp,sp,32
 800d2f0:	f800283a 	ret
 800d2f4:	d809883a 	mov	r4,sp
 800d2f8:	800c8400 	call	800c840 <__lo0bits>
 800d2fc:	d8c00017 	ldw	r3,0(sp)
 800d300:	04000044 	movi	r16,1
 800d304:	9c000415 	stw	r16,16(r19)
 800d308:	98c00515 	stw	r3,20(r19)
 800d30c:	10800804 	addi	r2,r2,32
 800d310:	883fe126 	beq	r17,zero,800d298 <__d2b+0x8c>
 800d314:	00c00d44 	movi	r3,53
 800d318:	8c7ef344 	addi	r17,r17,-1075
 800d31c:	88a3883a 	add	r17,r17,r2
 800d320:	1885c83a 	sub	r2,r3,r2
 800d324:	d8c00817 	ldw	r3,32(sp)
 800d328:	94400015 	stw	r17,0(r18)
 800d32c:	18800015 	stw	r2,0(r3)
 800d330:	003fe706 	br	800d2d0 <__d2b+0xc4>
 800d334:	01000804 	movi	r4,32
 800d338:	2089c83a 	sub	r4,r4,r2
 800d33c:	1908983a 	sll	r4,r3,r4
 800d340:	d9400117 	ldw	r5,4(sp)
 800d344:	1886d83a 	srl	r3,r3,r2
 800d348:	2148b03a 	or	r4,r4,r5
 800d34c:	99000515 	stw	r4,20(r19)
 800d350:	d8c00015 	stw	r3,0(sp)
 800d354:	003fca06 	br	800d280 <__d2b+0x74>

0800d358 <__ratio>:
 800d358:	defff904 	addi	sp,sp,-28
 800d35c:	dc400315 	stw	r17,12(sp)
 800d360:	2823883a 	mov	r17,r5
 800d364:	d9400104 	addi	r5,sp,4
 800d368:	dfc00615 	stw	ra,24(sp)
 800d36c:	dcc00515 	stw	r19,20(sp)
 800d370:	dc800415 	stw	r18,16(sp)
 800d374:	2027883a 	mov	r19,r4
 800d378:	dc000215 	stw	r16,8(sp)
 800d37c:	800d1000 	call	800d100 <__b2d>
 800d380:	d80b883a 	mov	r5,sp
 800d384:	8809883a 	mov	r4,r17
 800d388:	1025883a 	mov	r18,r2
 800d38c:	1821883a 	mov	r16,r3
 800d390:	800d1000 	call	800d100 <__b2d>
 800d394:	8a000417 	ldw	r8,16(r17)
 800d398:	99000417 	ldw	r4,16(r19)
 800d39c:	d9400117 	ldw	r5,4(sp)
 800d3a0:	2209c83a 	sub	r4,r4,r8
 800d3a4:	2010917a 	slli	r8,r4,5
 800d3a8:	d9000017 	ldw	r4,0(sp)
 800d3ac:	2909c83a 	sub	r4,r5,r4
 800d3b0:	4109883a 	add	r4,r8,r4
 800d3b4:	01000e0e 	bge	zero,r4,800d3f0 <__ratio+0x98>
 800d3b8:	2008953a 	slli	r4,r4,20
 800d3bc:	2421883a 	add	r16,r4,r16
 800d3c0:	100d883a 	mov	r6,r2
 800d3c4:	180f883a 	mov	r7,r3
 800d3c8:	9009883a 	mov	r4,r18
 800d3cc:	800b883a 	mov	r5,r16
 800d3d0:	80115840 	call	8011584 <__divdf3>
 800d3d4:	dfc00617 	ldw	ra,24(sp)
 800d3d8:	dcc00517 	ldw	r19,20(sp)
 800d3dc:	dc800417 	ldw	r18,16(sp)
 800d3e0:	dc400317 	ldw	r17,12(sp)
 800d3e4:	dc000217 	ldw	r16,8(sp)
 800d3e8:	dec00704 	addi	sp,sp,28
 800d3ec:	f800283a 	ret
 800d3f0:	2008953a 	slli	r4,r4,20
 800d3f4:	1907c83a 	sub	r3,r3,r4
 800d3f8:	003ff106 	br	800d3c0 <__ratio+0x68>

0800d3fc <_mprec_log10>:
 800d3fc:	defffe04 	addi	sp,sp,-8
 800d400:	dc000015 	stw	r16,0(sp)
 800d404:	dfc00115 	stw	ra,4(sp)
 800d408:	008005c4 	movi	r2,23
 800d40c:	2021883a 	mov	r16,r4
 800d410:	11000d0e 	bge	r2,r4,800d448 <_mprec_log10+0x4c>
 800d414:	0005883a 	mov	r2,zero
 800d418:	00cffc34 	movhi	r3,16368
 800d41c:	843fffc4 	addi	r16,r16,-1
 800d420:	000d883a 	mov	r6,zero
 800d424:	01d00934 	movhi	r7,16420
 800d428:	1009883a 	mov	r4,r2
 800d42c:	180b883a 	mov	r5,r3
 800d430:	80058b80 	call	80058b8 <__muldf3>
 800d434:	803ff91e 	bne	r16,zero,800d41c <_mprec_log10+0x20>
 800d438:	dfc00117 	ldw	ra,4(sp)
 800d43c:	dc000017 	ldw	r16,0(sp)
 800d440:	dec00204 	addi	sp,sp,8
 800d444:	f800283a 	ret
 800d448:	202090fa 	slli	r16,r4,3
 800d44c:	00820074 	movhi	r2,2049
 800d450:	10971b04 	addi	r2,r2,23660
 800d454:	1421883a 	add	r16,r2,r16
 800d458:	80800017 	ldw	r2,0(r16)
 800d45c:	80c00117 	ldw	r3,4(r16)
 800d460:	dfc00117 	ldw	ra,4(sp)
 800d464:	dc000017 	ldw	r16,0(sp)
 800d468:	dec00204 	addi	sp,sp,8
 800d46c:	f800283a 	ret

0800d470 <__copybits>:
 800d470:	297fffc4 	addi	r5,r5,-1
 800d474:	280fd17a 	srai	r7,r5,5
 800d478:	30c00417 	ldw	r3,16(r6)
 800d47c:	30800504 	addi	r2,r6,20
 800d480:	39c00044 	addi	r7,r7,1
 800d484:	18c7883a 	add	r3,r3,r3
 800d488:	39cf883a 	add	r7,r7,r7
 800d48c:	18c7883a 	add	r3,r3,r3
 800d490:	39cf883a 	add	r7,r7,r7
 800d494:	10c7883a 	add	r3,r2,r3
 800d498:	21cf883a 	add	r7,r4,r7
 800d49c:	10c00d2e 	bgeu	r2,r3,800d4d4 <__copybits+0x64>
 800d4a0:	200b883a 	mov	r5,r4
 800d4a4:	12000017 	ldw	r8,0(r2)
 800d4a8:	29400104 	addi	r5,r5,4
 800d4ac:	10800104 	addi	r2,r2,4
 800d4b0:	2a3fff15 	stw	r8,-4(r5)
 800d4b4:	10fffb36 	bltu	r2,r3,800d4a4 <__copybits+0x34>
 800d4b8:	1985c83a 	sub	r2,r3,r6
 800d4bc:	10bffac4 	addi	r2,r2,-21
 800d4c0:	1004d0ba 	srli	r2,r2,2
 800d4c4:	10800044 	addi	r2,r2,1
 800d4c8:	1085883a 	add	r2,r2,r2
 800d4cc:	1085883a 	add	r2,r2,r2
 800d4d0:	2089883a 	add	r4,r4,r2
 800d4d4:	21c0032e 	bgeu	r4,r7,800d4e4 <__copybits+0x74>
 800d4d8:	20000015 	stw	zero,0(r4)
 800d4dc:	21000104 	addi	r4,r4,4
 800d4e0:	21fffd36 	bltu	r4,r7,800d4d8 <__copybits+0x68>
 800d4e4:	f800283a 	ret

0800d4e8 <__any_on>:
 800d4e8:	20c00417 	ldw	r3,16(r4)
 800d4ec:	2805d17a 	srai	r2,r5,5
 800d4f0:	21000504 	addi	r4,r4,20
 800d4f4:	18800d0e 	bge	r3,r2,800d52c <__any_on+0x44>
 800d4f8:	18c7883a 	add	r3,r3,r3
 800d4fc:	18c7883a 	add	r3,r3,r3
 800d500:	20c7883a 	add	r3,r4,r3
 800d504:	20c0192e 	bgeu	r4,r3,800d56c <__any_on+0x84>
 800d508:	18bfff17 	ldw	r2,-4(r3)
 800d50c:	18ffff04 	addi	r3,r3,-4
 800d510:	1000041e 	bne	r2,zero,800d524 <__any_on+0x3c>
 800d514:	20c0142e 	bgeu	r4,r3,800d568 <__any_on+0x80>
 800d518:	18ffff04 	addi	r3,r3,-4
 800d51c:	19400017 	ldw	r5,0(r3)
 800d520:	283ffc26 	beq	r5,zero,800d514 <__any_on+0x2c>
 800d524:	00800044 	movi	r2,1
 800d528:	f800283a 	ret
 800d52c:	10c00a0e 	bge	r2,r3,800d558 <__any_on+0x70>
 800d530:	1085883a 	add	r2,r2,r2
 800d534:	1085883a 	add	r2,r2,r2
 800d538:	294007cc 	andi	r5,r5,31
 800d53c:	2087883a 	add	r3,r4,r2
 800d540:	283ff026 	beq	r5,zero,800d504 <__any_on+0x1c>
 800d544:	19800017 	ldw	r6,0(r3)
 800d548:	3144d83a 	srl	r2,r6,r5
 800d54c:	114a983a 	sll	r5,r2,r5
 800d550:	317ff41e 	bne	r6,r5,800d524 <__any_on+0x3c>
 800d554:	003feb06 	br	800d504 <__any_on+0x1c>
 800d558:	1085883a 	add	r2,r2,r2
 800d55c:	1085883a 	add	r2,r2,r2
 800d560:	2087883a 	add	r3,r4,r2
 800d564:	003fe706 	br	800d504 <__any_on+0x1c>
 800d568:	f800283a 	ret
 800d56c:	0005883a 	mov	r2,zero
 800d570:	f800283a 	ret

0800d574 <_putc_r>:
 800d574:	defffc04 	addi	sp,sp,-16
 800d578:	dc000215 	stw	r16,8(sp)
 800d57c:	dfc00315 	stw	ra,12(sp)
 800d580:	2021883a 	mov	r16,r4
 800d584:	20000226 	beq	r4,zero,800d590 <_putc_r+0x1c>
 800d588:	20800e17 	ldw	r2,56(r4)
 800d58c:	10001b26 	beq	r2,zero,800d5fc <_putc_r+0x88>
 800d590:	30800217 	ldw	r2,8(r6)
 800d594:	10bfffc4 	addi	r2,r2,-1
 800d598:	30800215 	stw	r2,8(r6)
 800d59c:	10000a16 	blt	r2,zero,800d5c8 <_putc_r+0x54>
 800d5a0:	30800017 	ldw	r2,0(r6)
 800d5a4:	11400005 	stb	r5,0(r2)
 800d5a8:	30800017 	ldw	r2,0(r6)
 800d5ac:	10c00044 	addi	r3,r2,1
 800d5b0:	30c00015 	stw	r3,0(r6)
 800d5b4:	10800003 	ldbu	r2,0(r2)
 800d5b8:	dfc00317 	ldw	ra,12(sp)
 800d5bc:	dc000217 	ldw	r16,8(sp)
 800d5c0:	dec00404 	addi	sp,sp,16
 800d5c4:	f800283a 	ret
 800d5c8:	30c00617 	ldw	r3,24(r6)
 800d5cc:	10c00616 	blt	r2,r3,800d5e8 <_putc_r+0x74>
 800d5d0:	30800017 	ldw	r2,0(r6)
 800d5d4:	00c00284 	movi	r3,10
 800d5d8:	11400005 	stb	r5,0(r2)
 800d5dc:	30800017 	ldw	r2,0(r6)
 800d5e0:	11400003 	ldbu	r5,0(r2)
 800d5e4:	28fff11e 	bne	r5,r3,800d5ac <_putc_r+0x38>
 800d5e8:	8009883a 	mov	r4,r16
 800d5ec:	dfc00317 	ldw	ra,12(sp)
 800d5f0:	dc000217 	ldw	r16,8(sp)
 800d5f4:	dec00404 	addi	sp,sp,16
 800d5f8:	800f6181 	jmpi	800f618 <__swbuf_r>
 800d5fc:	d9400015 	stw	r5,0(sp)
 800d600:	d9800115 	stw	r6,4(sp)
 800d604:	800aca80 	call	800aca8 <__sinit>
 800d608:	d9800117 	ldw	r6,4(sp)
 800d60c:	d9400017 	ldw	r5,0(sp)
 800d610:	003fdf06 	br	800d590 <_putc_r+0x1c>

0800d614 <putc>:
 800d614:	00820074 	movhi	r2,2049
 800d618:	defffc04 	addi	sp,sp,-16
 800d61c:	109e2204 	addi	r2,r2,30856
 800d620:	dc000115 	stw	r16,4(sp)
 800d624:	14000017 	ldw	r16,0(r2)
 800d628:	dc400215 	stw	r17,8(sp)
 800d62c:	dfc00315 	stw	ra,12(sp)
 800d630:	2023883a 	mov	r17,r4
 800d634:	80000226 	beq	r16,zero,800d640 <putc+0x2c>
 800d638:	80800e17 	ldw	r2,56(r16)
 800d63c:	10001a26 	beq	r2,zero,800d6a8 <putc+0x94>
 800d640:	28800217 	ldw	r2,8(r5)
 800d644:	10bfffc4 	addi	r2,r2,-1
 800d648:	28800215 	stw	r2,8(r5)
 800d64c:	10000b16 	blt	r2,zero,800d67c <putc+0x68>
 800d650:	28800017 	ldw	r2,0(r5)
 800d654:	14400005 	stb	r17,0(r2)
 800d658:	28800017 	ldw	r2,0(r5)
 800d65c:	10c00044 	addi	r3,r2,1
 800d660:	28c00015 	stw	r3,0(r5)
 800d664:	10800003 	ldbu	r2,0(r2)
 800d668:	dfc00317 	ldw	ra,12(sp)
 800d66c:	dc400217 	ldw	r17,8(sp)
 800d670:	dc000117 	ldw	r16,4(sp)
 800d674:	dec00404 	addi	sp,sp,16
 800d678:	f800283a 	ret
 800d67c:	28c00617 	ldw	r3,24(r5)
 800d680:	10c00e16 	blt	r2,r3,800d6bc <putc+0xa8>
 800d684:	28800017 	ldw	r2,0(r5)
 800d688:	01000284 	movi	r4,10
 800d68c:	14400005 	stb	r17,0(r2)
 800d690:	28800017 	ldw	r2,0(r5)
 800d694:	10c00003 	ldbu	r3,0(r2)
 800d698:	193ff01e 	bne	r3,r4,800d65c <putc+0x48>
 800d69c:	280d883a 	mov	r6,r5
 800d6a0:	180b883a 	mov	r5,r3
 800d6a4:	00000706 	br	800d6c4 <putc+0xb0>
 800d6a8:	8009883a 	mov	r4,r16
 800d6ac:	d9400015 	stw	r5,0(sp)
 800d6b0:	800aca80 	call	800aca8 <__sinit>
 800d6b4:	d9400017 	ldw	r5,0(sp)
 800d6b8:	003fe106 	br	800d640 <putc+0x2c>
 800d6bc:	280d883a 	mov	r6,r5
 800d6c0:	880b883a 	mov	r5,r17
 800d6c4:	8009883a 	mov	r4,r16
 800d6c8:	dfc00317 	ldw	ra,12(sp)
 800d6cc:	dc400217 	ldw	r17,8(sp)
 800d6d0:	dc000117 	ldw	r16,4(sp)
 800d6d4:	dec00404 	addi	sp,sp,16
 800d6d8:	800f6181 	jmpi	800f618 <__swbuf_r>

0800d6dc <_realloc_r>:
 800d6dc:	defff604 	addi	sp,sp,-40
 800d6e0:	dc800215 	stw	r18,8(sp)
 800d6e4:	dfc00915 	stw	ra,36(sp)
 800d6e8:	df000815 	stw	fp,32(sp)
 800d6ec:	ddc00715 	stw	r23,28(sp)
 800d6f0:	dd800615 	stw	r22,24(sp)
 800d6f4:	dd400515 	stw	r21,20(sp)
 800d6f8:	dd000415 	stw	r20,16(sp)
 800d6fc:	dcc00315 	stw	r19,12(sp)
 800d700:	dc400115 	stw	r17,4(sp)
 800d704:	dc000015 	stw	r16,0(sp)
 800d708:	3025883a 	mov	r18,r6
 800d70c:	2800b726 	beq	r5,zero,800d9ec <_realloc_r+0x310>
 800d710:	282b883a 	mov	r21,r5
 800d714:	2029883a 	mov	r20,r4
 800d718:	80133600 	call	8013360 <__malloc_lock>
 800d71c:	a8bfff17 	ldw	r2,-4(r21)
 800d720:	043fff04 	movi	r16,-4
 800d724:	90c002c4 	addi	r3,r18,11
 800d728:	01000584 	movi	r4,22
 800d72c:	acfffe04 	addi	r19,r21,-8
 800d730:	1420703a 	and	r16,r2,r16
 800d734:	20c0332e 	bgeu	r4,r3,800d804 <_realloc_r+0x128>
 800d738:	047ffe04 	movi	r17,-8
 800d73c:	1c62703a 	and	r17,r3,r17
 800d740:	8807883a 	mov	r3,r17
 800d744:	88005816 	blt	r17,zero,800d8a8 <_realloc_r+0x1cc>
 800d748:	8c805736 	bltu	r17,r18,800d8a8 <_realloc_r+0x1cc>
 800d74c:	80c0300e 	bge	r16,r3,800d810 <_realloc_r+0x134>
 800d750:	07020074 	movhi	fp,2049
 800d754:	e7189104 	addi	fp,fp,25156
 800d758:	e1c00217 	ldw	r7,8(fp)
 800d75c:	9c09883a 	add	r4,r19,r16
 800d760:	22000117 	ldw	r8,4(r4)
 800d764:	21c06326 	beq	r4,r7,800d8f4 <_realloc_r+0x218>
 800d768:	017fff84 	movi	r5,-2
 800d76c:	414a703a 	and	r5,r8,r5
 800d770:	214b883a 	add	r5,r4,r5
 800d774:	29800117 	ldw	r6,4(r5)
 800d778:	3180004c 	andi	r6,r6,1
 800d77c:	30003f26 	beq	r6,zero,800d87c <_realloc_r+0x1a0>
 800d780:	1080004c 	andi	r2,r2,1
 800d784:	10008326 	beq	r2,zero,800d994 <_realloc_r+0x2b8>
 800d788:	900b883a 	mov	r5,r18
 800d78c:	a009883a 	mov	r4,r20
 800d790:	800ba700 	call	800ba70 <_malloc_r>
 800d794:	1025883a 	mov	r18,r2
 800d798:	10011e26 	beq	r2,zero,800dc14 <_realloc_r+0x538>
 800d79c:	a93fff17 	ldw	r4,-4(r21)
 800d7a0:	10fffe04 	addi	r3,r2,-8
 800d7a4:	00bfff84 	movi	r2,-2
 800d7a8:	2084703a 	and	r2,r4,r2
 800d7ac:	9885883a 	add	r2,r19,r2
 800d7b0:	1880ee26 	beq	r3,r2,800db6c <_realloc_r+0x490>
 800d7b4:	81bfff04 	addi	r6,r16,-4
 800d7b8:	00800904 	movi	r2,36
 800d7bc:	1180b836 	bltu	r2,r6,800daa0 <_realloc_r+0x3c4>
 800d7c0:	00c004c4 	movi	r3,19
 800d7c4:	19809636 	bltu	r3,r6,800da20 <_realloc_r+0x344>
 800d7c8:	9005883a 	mov	r2,r18
 800d7cc:	a807883a 	mov	r3,r21
 800d7d0:	19000017 	ldw	r4,0(r3)
 800d7d4:	11000015 	stw	r4,0(r2)
 800d7d8:	19000117 	ldw	r4,4(r3)
 800d7dc:	11000115 	stw	r4,4(r2)
 800d7e0:	18c00217 	ldw	r3,8(r3)
 800d7e4:	10c00215 	stw	r3,8(r2)
 800d7e8:	a80b883a 	mov	r5,r21
 800d7ec:	a009883a 	mov	r4,r20
 800d7f0:	800ae1c0 	call	800ae1c <_free_r>
 800d7f4:	a009883a 	mov	r4,r20
 800d7f8:	80133840 	call	8013384 <__malloc_unlock>
 800d7fc:	9005883a 	mov	r2,r18
 800d800:	00001206 	br	800d84c <_realloc_r+0x170>
 800d804:	00c00404 	movi	r3,16
 800d808:	1823883a 	mov	r17,r3
 800d80c:	003fce06 	br	800d748 <_realloc_r+0x6c>
 800d810:	a825883a 	mov	r18,r21
 800d814:	8445c83a 	sub	r2,r16,r17
 800d818:	00c003c4 	movi	r3,15
 800d81c:	18802636 	bltu	r3,r2,800d8b8 <_realloc_r+0x1dc>
 800d820:	99800117 	ldw	r6,4(r19)
 800d824:	9c07883a 	add	r3,r19,r16
 800d828:	3180004c 	andi	r6,r6,1
 800d82c:	3420b03a 	or	r16,r6,r16
 800d830:	9c000115 	stw	r16,4(r19)
 800d834:	18800117 	ldw	r2,4(r3)
 800d838:	10800054 	ori	r2,r2,1
 800d83c:	18800115 	stw	r2,4(r3)
 800d840:	a009883a 	mov	r4,r20
 800d844:	80133840 	call	8013384 <__malloc_unlock>
 800d848:	9005883a 	mov	r2,r18
 800d84c:	dfc00917 	ldw	ra,36(sp)
 800d850:	df000817 	ldw	fp,32(sp)
 800d854:	ddc00717 	ldw	r23,28(sp)
 800d858:	dd800617 	ldw	r22,24(sp)
 800d85c:	dd400517 	ldw	r21,20(sp)
 800d860:	dd000417 	ldw	r20,16(sp)
 800d864:	dcc00317 	ldw	r19,12(sp)
 800d868:	dc800217 	ldw	r18,8(sp)
 800d86c:	dc400117 	ldw	r17,4(sp)
 800d870:	dc000017 	ldw	r16,0(sp)
 800d874:	dec00a04 	addi	sp,sp,40
 800d878:	f800283a 	ret
 800d87c:	017fff04 	movi	r5,-4
 800d880:	414a703a 	and	r5,r8,r5
 800d884:	814d883a 	add	r6,r16,r5
 800d888:	30c01f16 	blt	r6,r3,800d908 <_realloc_r+0x22c>
 800d88c:	20800317 	ldw	r2,12(r4)
 800d890:	20c00217 	ldw	r3,8(r4)
 800d894:	a825883a 	mov	r18,r21
 800d898:	3021883a 	mov	r16,r6
 800d89c:	18800315 	stw	r2,12(r3)
 800d8a0:	10c00215 	stw	r3,8(r2)
 800d8a4:	003fdb06 	br	800d814 <_realloc_r+0x138>
 800d8a8:	00800304 	movi	r2,12
 800d8ac:	a0800015 	stw	r2,0(r20)
 800d8b0:	0005883a 	mov	r2,zero
 800d8b4:	003fe506 	br	800d84c <_realloc_r+0x170>
 800d8b8:	98c00117 	ldw	r3,4(r19)
 800d8bc:	9c4b883a 	add	r5,r19,r17
 800d8c0:	11000054 	ori	r4,r2,1
 800d8c4:	18c0004c 	andi	r3,r3,1
 800d8c8:	1c62b03a 	or	r17,r3,r17
 800d8cc:	9c400115 	stw	r17,4(r19)
 800d8d0:	29000115 	stw	r4,4(r5)
 800d8d4:	2885883a 	add	r2,r5,r2
 800d8d8:	10c00117 	ldw	r3,4(r2)
 800d8dc:	29400204 	addi	r5,r5,8
 800d8e0:	a009883a 	mov	r4,r20
 800d8e4:	18c00054 	ori	r3,r3,1
 800d8e8:	10c00115 	stw	r3,4(r2)
 800d8ec:	800ae1c0 	call	800ae1c <_free_r>
 800d8f0:	003fd306 	br	800d840 <_realloc_r+0x164>
 800d8f4:	017fff04 	movi	r5,-4
 800d8f8:	414a703a 	and	r5,r8,r5
 800d8fc:	89800404 	addi	r6,r17,16
 800d900:	8151883a 	add	r8,r16,r5
 800d904:	4180590e 	bge	r8,r6,800da6c <_realloc_r+0x390>
 800d908:	1080004c 	andi	r2,r2,1
 800d90c:	103f9e1e 	bne	r2,zero,800d788 <_realloc_r+0xac>
 800d910:	adbffe17 	ldw	r22,-8(r21)
 800d914:	00bfff04 	movi	r2,-4
 800d918:	9dadc83a 	sub	r22,r19,r22
 800d91c:	b1800117 	ldw	r6,4(r22)
 800d920:	3084703a 	and	r2,r6,r2
 800d924:	20002026 	beq	r4,zero,800d9a8 <_realloc_r+0x2cc>
 800d928:	80af883a 	add	r23,r16,r2
 800d92c:	b96f883a 	add	r23,r23,r5
 800d930:	21c05f26 	beq	r4,r7,800dab0 <_realloc_r+0x3d4>
 800d934:	b8c01c16 	blt	r23,r3,800d9a8 <_realloc_r+0x2cc>
 800d938:	20800317 	ldw	r2,12(r4)
 800d93c:	20c00217 	ldw	r3,8(r4)
 800d940:	81bfff04 	addi	r6,r16,-4
 800d944:	01000904 	movi	r4,36
 800d948:	18800315 	stw	r2,12(r3)
 800d94c:	10c00215 	stw	r3,8(r2)
 800d950:	b0c00217 	ldw	r3,8(r22)
 800d954:	b0800317 	ldw	r2,12(r22)
 800d958:	b4800204 	addi	r18,r22,8
 800d95c:	18800315 	stw	r2,12(r3)
 800d960:	10c00215 	stw	r3,8(r2)
 800d964:	21801b36 	bltu	r4,r6,800d9d4 <_realloc_r+0x2f8>
 800d968:	008004c4 	movi	r2,19
 800d96c:	1180352e 	bgeu	r2,r6,800da44 <_realloc_r+0x368>
 800d970:	a8800017 	ldw	r2,0(r21)
 800d974:	b0800215 	stw	r2,8(r22)
 800d978:	a8800117 	ldw	r2,4(r21)
 800d97c:	b0800315 	stw	r2,12(r22)
 800d980:	008006c4 	movi	r2,27
 800d984:	11807f36 	bltu	r2,r6,800db84 <_realloc_r+0x4a8>
 800d988:	b0800404 	addi	r2,r22,16
 800d98c:	ad400204 	addi	r21,r21,8
 800d990:	00002d06 	br	800da48 <_realloc_r+0x36c>
 800d994:	adbffe17 	ldw	r22,-8(r21)
 800d998:	00bfff04 	movi	r2,-4
 800d99c:	9dadc83a 	sub	r22,r19,r22
 800d9a0:	b1000117 	ldw	r4,4(r22)
 800d9a4:	2084703a 	and	r2,r4,r2
 800d9a8:	b03f7726 	beq	r22,zero,800d788 <_realloc_r+0xac>
 800d9ac:	80af883a 	add	r23,r16,r2
 800d9b0:	b8ff7516 	blt	r23,r3,800d788 <_realloc_r+0xac>
 800d9b4:	b0800317 	ldw	r2,12(r22)
 800d9b8:	b0c00217 	ldw	r3,8(r22)
 800d9bc:	81bfff04 	addi	r6,r16,-4
 800d9c0:	01000904 	movi	r4,36
 800d9c4:	18800315 	stw	r2,12(r3)
 800d9c8:	10c00215 	stw	r3,8(r2)
 800d9cc:	b4800204 	addi	r18,r22,8
 800d9d0:	21bfe52e 	bgeu	r4,r6,800d968 <_realloc_r+0x28c>
 800d9d4:	a80b883a 	mov	r5,r21
 800d9d8:	9009883a 	mov	r4,r18
 800d9dc:	800c3600 	call	800c360 <memmove>
 800d9e0:	b821883a 	mov	r16,r23
 800d9e4:	b027883a 	mov	r19,r22
 800d9e8:	003f8a06 	br	800d814 <_realloc_r+0x138>
 800d9ec:	300b883a 	mov	r5,r6
 800d9f0:	dfc00917 	ldw	ra,36(sp)
 800d9f4:	df000817 	ldw	fp,32(sp)
 800d9f8:	ddc00717 	ldw	r23,28(sp)
 800d9fc:	dd800617 	ldw	r22,24(sp)
 800da00:	dd400517 	ldw	r21,20(sp)
 800da04:	dd000417 	ldw	r20,16(sp)
 800da08:	dcc00317 	ldw	r19,12(sp)
 800da0c:	dc800217 	ldw	r18,8(sp)
 800da10:	dc400117 	ldw	r17,4(sp)
 800da14:	dc000017 	ldw	r16,0(sp)
 800da18:	dec00a04 	addi	sp,sp,40
 800da1c:	800ba701 	jmpi	800ba70 <_malloc_r>
 800da20:	a8c00017 	ldw	r3,0(r21)
 800da24:	90c00015 	stw	r3,0(r18)
 800da28:	a8c00117 	ldw	r3,4(r21)
 800da2c:	90c00115 	stw	r3,4(r18)
 800da30:	00c006c4 	movi	r3,27
 800da34:	19804536 	bltu	r3,r6,800db4c <_realloc_r+0x470>
 800da38:	90800204 	addi	r2,r18,8
 800da3c:	a8c00204 	addi	r3,r21,8
 800da40:	003f6306 	br	800d7d0 <_realloc_r+0xf4>
 800da44:	9005883a 	mov	r2,r18
 800da48:	a8c00017 	ldw	r3,0(r21)
 800da4c:	b821883a 	mov	r16,r23
 800da50:	b027883a 	mov	r19,r22
 800da54:	10c00015 	stw	r3,0(r2)
 800da58:	a8c00117 	ldw	r3,4(r21)
 800da5c:	10c00115 	stw	r3,4(r2)
 800da60:	a8c00217 	ldw	r3,8(r21)
 800da64:	10c00215 	stw	r3,8(r2)
 800da68:	003f6a06 	br	800d814 <_realloc_r+0x138>
 800da6c:	9c67883a 	add	r19,r19,r17
 800da70:	4445c83a 	sub	r2,r8,r17
 800da74:	e4c00215 	stw	r19,8(fp)
 800da78:	10800054 	ori	r2,r2,1
 800da7c:	98800115 	stw	r2,4(r19)
 800da80:	a8bfff17 	ldw	r2,-4(r21)
 800da84:	a009883a 	mov	r4,r20
 800da88:	1080004c 	andi	r2,r2,1
 800da8c:	1462b03a 	or	r17,r2,r17
 800da90:	ac7fff15 	stw	r17,-4(r21)
 800da94:	80133840 	call	8013384 <__malloc_unlock>
 800da98:	a805883a 	mov	r2,r21
 800da9c:	003f6b06 	br	800d84c <_realloc_r+0x170>
 800daa0:	a80b883a 	mov	r5,r21
 800daa4:	9009883a 	mov	r4,r18
 800daa8:	800c3600 	call	800c360 <memmove>
 800daac:	003f4e06 	br	800d7e8 <_realloc_r+0x10c>
 800dab0:	89000404 	addi	r4,r17,16
 800dab4:	b93fbc16 	blt	r23,r4,800d9a8 <_realloc_r+0x2cc>
 800dab8:	b0800317 	ldw	r2,12(r22)
 800dabc:	b0c00217 	ldw	r3,8(r22)
 800dac0:	81bfff04 	addi	r6,r16,-4
 800dac4:	01000904 	movi	r4,36
 800dac8:	18800315 	stw	r2,12(r3)
 800dacc:	10c00215 	stw	r3,8(r2)
 800dad0:	b4800204 	addi	r18,r22,8
 800dad4:	21804336 	bltu	r4,r6,800dbe4 <_realloc_r+0x508>
 800dad8:	008004c4 	movi	r2,19
 800dadc:	11803f2e 	bgeu	r2,r6,800dbdc <_realloc_r+0x500>
 800dae0:	a8800017 	ldw	r2,0(r21)
 800dae4:	b0800215 	stw	r2,8(r22)
 800dae8:	a8800117 	ldw	r2,4(r21)
 800daec:	b0800315 	stw	r2,12(r22)
 800daf0:	008006c4 	movi	r2,27
 800daf4:	11803f36 	bltu	r2,r6,800dbf4 <_realloc_r+0x518>
 800daf8:	b0800404 	addi	r2,r22,16
 800dafc:	ad400204 	addi	r21,r21,8
 800db00:	a8c00017 	ldw	r3,0(r21)
 800db04:	10c00015 	stw	r3,0(r2)
 800db08:	a8c00117 	ldw	r3,4(r21)
 800db0c:	10c00115 	stw	r3,4(r2)
 800db10:	a8c00217 	ldw	r3,8(r21)
 800db14:	10c00215 	stw	r3,8(r2)
 800db18:	b447883a 	add	r3,r22,r17
 800db1c:	bc45c83a 	sub	r2,r23,r17
 800db20:	e0c00215 	stw	r3,8(fp)
 800db24:	10800054 	ori	r2,r2,1
 800db28:	18800115 	stw	r2,4(r3)
 800db2c:	b0800117 	ldw	r2,4(r22)
 800db30:	a009883a 	mov	r4,r20
 800db34:	1080004c 	andi	r2,r2,1
 800db38:	1462b03a 	or	r17,r2,r17
 800db3c:	b4400115 	stw	r17,4(r22)
 800db40:	80133840 	call	8013384 <__malloc_unlock>
 800db44:	9005883a 	mov	r2,r18
 800db48:	003f4006 	br	800d84c <_realloc_r+0x170>
 800db4c:	a8c00217 	ldw	r3,8(r21)
 800db50:	90c00215 	stw	r3,8(r18)
 800db54:	a8c00317 	ldw	r3,12(r21)
 800db58:	90c00315 	stw	r3,12(r18)
 800db5c:	30801126 	beq	r6,r2,800dba4 <_realloc_r+0x4c8>
 800db60:	90800404 	addi	r2,r18,16
 800db64:	a8c00404 	addi	r3,r21,16
 800db68:	003f1906 	br	800d7d0 <_realloc_r+0xf4>
 800db6c:	90ffff17 	ldw	r3,-4(r18)
 800db70:	00bfff04 	movi	r2,-4
 800db74:	a825883a 	mov	r18,r21
 800db78:	1884703a 	and	r2,r3,r2
 800db7c:	80a1883a 	add	r16,r16,r2
 800db80:	003f2406 	br	800d814 <_realloc_r+0x138>
 800db84:	a8800217 	ldw	r2,8(r21)
 800db88:	b0800415 	stw	r2,16(r22)
 800db8c:	a8800317 	ldw	r2,12(r21)
 800db90:	b0800515 	stw	r2,20(r22)
 800db94:	31000a26 	beq	r6,r4,800dbc0 <_realloc_r+0x4e4>
 800db98:	b0800604 	addi	r2,r22,24
 800db9c:	ad400404 	addi	r21,r21,16
 800dba0:	003fa906 	br	800da48 <_realloc_r+0x36c>
 800dba4:	a9000417 	ldw	r4,16(r21)
 800dba8:	90800604 	addi	r2,r18,24
 800dbac:	a8c00604 	addi	r3,r21,24
 800dbb0:	91000415 	stw	r4,16(r18)
 800dbb4:	a9000517 	ldw	r4,20(r21)
 800dbb8:	91000515 	stw	r4,20(r18)
 800dbbc:	003f0406 	br	800d7d0 <_realloc_r+0xf4>
 800dbc0:	a8c00417 	ldw	r3,16(r21)
 800dbc4:	ad400604 	addi	r21,r21,24
 800dbc8:	b0800804 	addi	r2,r22,32
 800dbcc:	b0c00615 	stw	r3,24(r22)
 800dbd0:	a8ffff17 	ldw	r3,-4(r21)
 800dbd4:	b0c00715 	stw	r3,28(r22)
 800dbd8:	003f9b06 	br	800da48 <_realloc_r+0x36c>
 800dbdc:	9005883a 	mov	r2,r18
 800dbe0:	003fc706 	br	800db00 <_realloc_r+0x424>
 800dbe4:	a80b883a 	mov	r5,r21
 800dbe8:	9009883a 	mov	r4,r18
 800dbec:	800c3600 	call	800c360 <memmove>
 800dbf0:	003fc906 	br	800db18 <_realloc_r+0x43c>
 800dbf4:	a8800217 	ldw	r2,8(r21)
 800dbf8:	b0800415 	stw	r2,16(r22)
 800dbfc:	a8800317 	ldw	r2,12(r21)
 800dc00:	b0800515 	stw	r2,20(r22)
 800dc04:	31000726 	beq	r6,r4,800dc24 <_realloc_r+0x548>
 800dc08:	b0800604 	addi	r2,r22,24
 800dc0c:	ad400404 	addi	r21,r21,16
 800dc10:	003fbb06 	br	800db00 <_realloc_r+0x424>
 800dc14:	a009883a 	mov	r4,r20
 800dc18:	80133840 	call	8013384 <__malloc_unlock>
 800dc1c:	0005883a 	mov	r2,zero
 800dc20:	003f0a06 	br	800d84c <_realloc_r+0x170>
 800dc24:	a8c00417 	ldw	r3,16(r21)
 800dc28:	ad400604 	addi	r21,r21,24
 800dc2c:	b0800804 	addi	r2,r22,32
 800dc30:	b0c00615 	stw	r3,24(r22)
 800dc34:	a8ffff17 	ldw	r3,-4(r21)
 800dc38:	b0c00715 	stw	r3,28(r22)
 800dc3c:	003fb006 	br	800db00 <_realloc_r+0x424>

0800dc40 <__fpclassifyd>:
 800dc40:	00a00034 	movhi	r2,32768
 800dc44:	10bfffc4 	addi	r2,r2,-1
 800dc48:	2884703a 	and	r2,r5,r2
 800dc4c:	10000726 	beq	r2,zero,800dc6c <__fpclassifyd+0x2c>
 800dc50:	00fffc34 	movhi	r3,65520
 800dc54:	019ff834 	movhi	r6,32736
 800dc58:	28c7883a 	add	r3,r5,r3
 800dc5c:	31bfffc4 	addi	r6,r6,-1
 800dc60:	30c00536 	bltu	r6,r3,800dc78 <__fpclassifyd+0x38>
 800dc64:	00800104 	movi	r2,4
 800dc68:	f800283a 	ret
 800dc6c:	2000021e 	bne	r4,zero,800dc78 <__fpclassifyd+0x38>
 800dc70:	00800084 	movi	r2,2
 800dc74:	f800283a 	ret
 800dc78:	00dffc34 	movhi	r3,32752
 800dc7c:	019ff834 	movhi	r6,32736
 800dc80:	28cb883a 	add	r5,r5,r3
 800dc84:	31bfffc4 	addi	r6,r6,-1
 800dc88:	317ff62e 	bgeu	r6,r5,800dc64 <__fpclassifyd+0x24>
 800dc8c:	01400434 	movhi	r5,16
 800dc90:	297fffc4 	addi	r5,r5,-1
 800dc94:	28800236 	bltu	r5,r2,800dca0 <__fpclassifyd+0x60>
 800dc98:	008000c4 	movi	r2,3
 800dc9c:	f800283a 	ret
 800dca0:	10c00226 	beq	r2,r3,800dcac <__fpclassifyd+0x6c>
 800dca4:	0005883a 	mov	r2,zero
 800dca8:	f800283a 	ret
 800dcac:	2005003a 	cmpeq	r2,r4,zero
 800dcb0:	f800283a 	ret

0800dcb4 <_sbrk_r>:
 800dcb4:	defffd04 	addi	sp,sp,-12
 800dcb8:	dc000015 	stw	r16,0(sp)
 800dcbc:	040200b4 	movhi	r16,2050
 800dcc0:	dc400115 	stw	r17,4(sp)
 800dcc4:	84252904 	addi	r16,r16,-27484
 800dcc8:	2023883a 	mov	r17,r4
 800dccc:	2809883a 	mov	r4,r5
 800dcd0:	dfc00215 	stw	ra,8(sp)
 800dcd4:	80000015 	stw	zero,0(r16)
 800dcd8:	801356c0 	call	801356c <sbrk>
 800dcdc:	00ffffc4 	movi	r3,-1
 800dce0:	10c00526 	beq	r2,r3,800dcf8 <_sbrk_r+0x44>
 800dce4:	dfc00217 	ldw	ra,8(sp)
 800dce8:	dc400117 	ldw	r17,4(sp)
 800dcec:	dc000017 	ldw	r16,0(sp)
 800dcf0:	dec00304 	addi	sp,sp,12
 800dcf4:	f800283a 	ret
 800dcf8:	80c00017 	ldw	r3,0(r16)
 800dcfc:	183ff926 	beq	r3,zero,800dce4 <_sbrk_r+0x30>
 800dd00:	88c00015 	stw	r3,0(r17)
 800dd04:	003ff706 	br	800dce4 <_sbrk_r+0x30>

0800dd08 <__sread>:
 800dd08:	defffe04 	addi	sp,sp,-8
 800dd0c:	dc000015 	stw	r16,0(sp)
 800dd10:	2821883a 	mov	r16,r5
 800dd14:	2940038f 	ldh	r5,14(r5)
 800dd18:	dfc00115 	stw	ra,4(sp)
 800dd1c:	800fd1c0 	call	800fd1c <_read_r>
 800dd20:	10000716 	blt	r2,zero,800dd40 <__sread+0x38>
 800dd24:	80c01417 	ldw	r3,80(r16)
 800dd28:	1887883a 	add	r3,r3,r2
 800dd2c:	80c01415 	stw	r3,80(r16)
 800dd30:	dfc00117 	ldw	ra,4(sp)
 800dd34:	dc000017 	ldw	r16,0(sp)
 800dd38:	dec00204 	addi	sp,sp,8
 800dd3c:	f800283a 	ret
 800dd40:	80c0030b 	ldhu	r3,12(r16)
 800dd44:	18fbffcc 	andi	r3,r3,61439
 800dd48:	80c0030d 	sth	r3,12(r16)
 800dd4c:	dfc00117 	ldw	ra,4(sp)
 800dd50:	dc000017 	ldw	r16,0(sp)
 800dd54:	dec00204 	addi	sp,sp,8
 800dd58:	f800283a 	ret

0800dd5c <__seofread>:
 800dd5c:	0005883a 	mov	r2,zero
 800dd60:	f800283a 	ret

0800dd64 <__swrite>:
 800dd64:	2880030b 	ldhu	r2,12(r5)
 800dd68:	defffb04 	addi	sp,sp,-20
 800dd6c:	dcc00315 	stw	r19,12(sp)
 800dd70:	dc800215 	stw	r18,8(sp)
 800dd74:	dc400115 	stw	r17,4(sp)
 800dd78:	dc000015 	stw	r16,0(sp)
 800dd7c:	dfc00415 	stw	ra,16(sp)
 800dd80:	10c0400c 	andi	r3,r2,256
 800dd84:	2821883a 	mov	r16,r5
 800dd88:	2023883a 	mov	r17,r4
 800dd8c:	3025883a 	mov	r18,r6
 800dd90:	3827883a 	mov	r19,r7
 800dd94:	18000526 	beq	r3,zero,800ddac <__swrite+0x48>
 800dd98:	2940038f 	ldh	r5,14(r5)
 800dd9c:	01c00084 	movi	r7,2
 800dda0:	000d883a 	mov	r6,zero
 800dda4:	800fcbc0 	call	800fcbc <_lseek_r>
 800dda8:	8080030b 	ldhu	r2,12(r16)
 800ddac:	8140038f 	ldh	r5,14(r16)
 800ddb0:	10bbffcc 	andi	r2,r2,61439
 800ddb4:	980f883a 	mov	r7,r19
 800ddb8:	900d883a 	mov	r6,r18
 800ddbc:	8809883a 	mov	r4,r17
 800ddc0:	8080030d 	sth	r2,12(r16)
 800ddc4:	dfc00417 	ldw	ra,16(sp)
 800ddc8:	dcc00317 	ldw	r19,12(sp)
 800ddcc:	dc800217 	ldw	r18,8(sp)
 800ddd0:	dc400117 	ldw	r17,4(sp)
 800ddd4:	dc000017 	ldw	r16,0(sp)
 800ddd8:	dec00504 	addi	sp,sp,20
 800dddc:	800f7701 	jmpi	800f770 <_write_r>

0800dde0 <__sseek>:
 800dde0:	defffe04 	addi	sp,sp,-8
 800dde4:	dc000015 	stw	r16,0(sp)
 800dde8:	2821883a 	mov	r16,r5
 800ddec:	2940038f 	ldh	r5,14(r5)
 800ddf0:	dfc00115 	stw	ra,4(sp)
 800ddf4:	800fcbc0 	call	800fcbc <_lseek_r>
 800ddf8:	00ffffc4 	movi	r3,-1
 800ddfc:	10c00826 	beq	r2,r3,800de20 <__sseek+0x40>
 800de00:	80c0030b 	ldhu	r3,12(r16)
 800de04:	80801415 	stw	r2,80(r16)
 800de08:	18c40014 	ori	r3,r3,4096
 800de0c:	80c0030d 	sth	r3,12(r16)
 800de10:	dfc00117 	ldw	ra,4(sp)
 800de14:	dc000017 	ldw	r16,0(sp)
 800de18:	dec00204 	addi	sp,sp,8
 800de1c:	f800283a 	ret
 800de20:	80c0030b 	ldhu	r3,12(r16)
 800de24:	18fbffcc 	andi	r3,r3,61439
 800de28:	80c0030d 	sth	r3,12(r16)
 800de2c:	dfc00117 	ldw	ra,4(sp)
 800de30:	dc000017 	ldw	r16,0(sp)
 800de34:	dec00204 	addi	sp,sp,8
 800de38:	f800283a 	ret

0800de3c <__sclose>:
 800de3c:	2940038f 	ldh	r5,14(r5)
 800de40:	800f7d01 	jmpi	800f7d0 <_close_r>

0800de44 <strcmp>:
 800de44:	2144b03a 	or	r2,r4,r5
 800de48:	108000cc 	andi	r2,r2,3
 800de4c:	1000171e 	bne	r2,zero,800deac <strcmp+0x68>
 800de50:	20800017 	ldw	r2,0(r4)
 800de54:	28c00017 	ldw	r3,0(r5)
 800de58:	10c0141e 	bne	r2,r3,800deac <strcmp+0x68>
 800de5c:	027fbff4 	movhi	r9,65279
 800de60:	4a7fbfc4 	addi	r9,r9,-257
 800de64:	0086303a 	nor	r3,zero,r2
 800de68:	02202074 	movhi	r8,32897
 800de6c:	1245883a 	add	r2,r2,r9
 800de70:	42202004 	addi	r8,r8,-32640
 800de74:	10c4703a 	and	r2,r2,r3
 800de78:	1204703a 	and	r2,r2,r8
 800de7c:	10000226 	beq	r2,zero,800de88 <strcmp+0x44>
 800de80:	00002306 	br	800df10 <strcmp+0xcc>
 800de84:	1000221e 	bne	r2,zero,800df10 <strcmp+0xcc>
 800de88:	21000104 	addi	r4,r4,4
 800de8c:	20c00017 	ldw	r3,0(r4)
 800de90:	29400104 	addi	r5,r5,4
 800de94:	29800017 	ldw	r6,0(r5)
 800de98:	1a4f883a 	add	r7,r3,r9
 800de9c:	00c4303a 	nor	r2,zero,r3
 800dea0:	3884703a 	and	r2,r7,r2
 800dea4:	1204703a 	and	r2,r2,r8
 800dea8:	19bff626 	beq	r3,r6,800de84 <strcmp+0x40>
 800deac:	20800003 	ldbu	r2,0(r4)
 800deb0:	10c03fcc 	andi	r3,r2,255
 800deb4:	18c0201c 	xori	r3,r3,128
 800deb8:	18ffe004 	addi	r3,r3,-128
 800debc:	18000c26 	beq	r3,zero,800def0 <strcmp+0xac>
 800dec0:	29800007 	ldb	r6,0(r5)
 800dec4:	19800326 	beq	r3,r6,800ded4 <strcmp+0x90>
 800dec8:	00001306 	br	800df18 <strcmp+0xd4>
 800decc:	29800007 	ldb	r6,0(r5)
 800ded0:	11800b1e 	bne	r2,r6,800df00 <strcmp+0xbc>
 800ded4:	21000044 	addi	r4,r4,1
 800ded8:	20c00003 	ldbu	r3,0(r4)
 800dedc:	29400044 	addi	r5,r5,1
 800dee0:	18803fcc 	andi	r2,r3,255
 800dee4:	1080201c 	xori	r2,r2,128
 800dee8:	10bfe004 	addi	r2,r2,-128
 800deec:	103ff71e 	bne	r2,zero,800decc <strcmp+0x88>
 800def0:	0007883a 	mov	r3,zero
 800def4:	28800003 	ldbu	r2,0(r5)
 800def8:	1885c83a 	sub	r2,r3,r2
 800defc:	f800283a 	ret
 800df00:	28800003 	ldbu	r2,0(r5)
 800df04:	18c03fcc 	andi	r3,r3,255
 800df08:	1885c83a 	sub	r2,r3,r2
 800df0c:	f800283a 	ret
 800df10:	0005883a 	mov	r2,zero
 800df14:	f800283a 	ret
 800df18:	10c03fcc 	andi	r3,r2,255
 800df1c:	003ff506 	br	800def4 <strcmp+0xb0>

0800df20 <__sprint_r.part.0>:
 800df20:	28801917 	ldw	r2,100(r5)
 800df24:	defff604 	addi	sp,sp,-40
 800df28:	dd400515 	stw	r21,20(sp)
 800df2c:	dfc00915 	stw	ra,36(sp)
 800df30:	df000815 	stw	fp,32(sp)
 800df34:	ddc00715 	stw	r23,28(sp)
 800df38:	dd800615 	stw	r22,24(sp)
 800df3c:	dd000415 	stw	r20,16(sp)
 800df40:	dcc00315 	stw	r19,12(sp)
 800df44:	dc800215 	stw	r18,8(sp)
 800df48:	dc400115 	stw	r17,4(sp)
 800df4c:	dc000015 	stw	r16,0(sp)
 800df50:	1088000c 	andi	r2,r2,8192
 800df54:	302b883a 	mov	r21,r6
 800df58:	10002e26 	beq	r2,zero,800e014 <__sprint_r.part.0+0xf4>
 800df5c:	30800217 	ldw	r2,8(r6)
 800df60:	35800017 	ldw	r22,0(r6)
 800df64:	10002926 	beq	r2,zero,800e00c <__sprint_r.part.0+0xec>
 800df68:	2827883a 	mov	r19,r5
 800df6c:	2029883a 	mov	r20,r4
 800df70:	b5c00104 	addi	r23,r22,4
 800df74:	04bfffc4 	movi	r18,-1
 800df78:	bc400017 	ldw	r17,0(r23)
 800df7c:	b4000017 	ldw	r16,0(r22)
 800df80:	0039883a 	mov	fp,zero
 800df84:	8822d0ba 	srli	r17,r17,2
 800df88:	8800031e 	bne	r17,zero,800df98 <__sprint_r.part.0+0x78>
 800df8c:	00001806 	br	800dff0 <__sprint_r.part.0+0xd0>
 800df90:	84000104 	addi	r16,r16,4
 800df94:	8f001526 	beq	r17,fp,800dfec <__sprint_r.part.0+0xcc>
 800df98:	81400017 	ldw	r5,0(r16)
 800df9c:	980d883a 	mov	r6,r19
 800dfa0:	a009883a 	mov	r4,r20
 800dfa4:	800fb680 	call	800fb68 <_fputwc_r>
 800dfa8:	e7000044 	addi	fp,fp,1
 800dfac:	14bff81e 	bne	r2,r18,800df90 <__sprint_r.part.0+0x70>
 800dfb0:	9005883a 	mov	r2,r18
 800dfb4:	a8000215 	stw	zero,8(r21)
 800dfb8:	a8000115 	stw	zero,4(r21)
 800dfbc:	dfc00917 	ldw	ra,36(sp)
 800dfc0:	df000817 	ldw	fp,32(sp)
 800dfc4:	ddc00717 	ldw	r23,28(sp)
 800dfc8:	dd800617 	ldw	r22,24(sp)
 800dfcc:	dd400517 	ldw	r21,20(sp)
 800dfd0:	dd000417 	ldw	r20,16(sp)
 800dfd4:	dcc00317 	ldw	r19,12(sp)
 800dfd8:	dc800217 	ldw	r18,8(sp)
 800dfdc:	dc400117 	ldw	r17,4(sp)
 800dfe0:	dc000017 	ldw	r16,0(sp)
 800dfe4:	dec00a04 	addi	sp,sp,40
 800dfe8:	f800283a 	ret
 800dfec:	a8800217 	ldw	r2,8(r21)
 800dff0:	8c63883a 	add	r17,r17,r17
 800dff4:	8c63883a 	add	r17,r17,r17
 800dff8:	1445c83a 	sub	r2,r2,r17
 800dffc:	a8800215 	stw	r2,8(r21)
 800e000:	b5800204 	addi	r22,r22,8
 800e004:	bdc00204 	addi	r23,r23,8
 800e008:	103fdb1e 	bne	r2,zero,800df78 <__sprint_r.part.0+0x58>
 800e00c:	0005883a 	mov	r2,zero
 800e010:	003fe806 	br	800dfb4 <__sprint_r.part.0+0x94>
 800e014:	800b12c0 	call	800b12c <__sfvwrite_r>
 800e018:	003fe606 	br	800dfb4 <__sprint_r.part.0+0x94>

0800e01c <__sprint_r>:
 800e01c:	30c00217 	ldw	r3,8(r6)
 800e020:	18000126 	beq	r3,zero,800e028 <__sprint_r+0xc>
 800e024:	800df201 	jmpi	800df20 <__sprint_r.part.0>
 800e028:	30000115 	stw	zero,4(r6)
 800e02c:	0005883a 	mov	r2,zero
 800e030:	f800283a 	ret

0800e034 <___vfiprintf_internal_r>:
 800e034:	deffca04 	addi	sp,sp,-216
 800e038:	dd403115 	stw	r21,196(sp)
 800e03c:	dfc03515 	stw	ra,212(sp)
 800e040:	df003415 	stw	fp,208(sp)
 800e044:	ddc03315 	stw	r23,204(sp)
 800e048:	dd803215 	stw	r22,200(sp)
 800e04c:	dd003015 	stw	r20,192(sp)
 800e050:	dcc02f15 	stw	r19,188(sp)
 800e054:	dc802e15 	stw	r18,184(sp)
 800e058:	dc402d15 	stw	r17,180(sp)
 800e05c:	dc002c15 	stw	r16,176(sp)
 800e060:	d9002115 	stw	r4,132(sp)
 800e064:	d9402015 	stw	r5,128(sp)
 800e068:	d9c02215 	stw	r7,136(sp)
 800e06c:	302b883a 	mov	r21,r6
 800e070:	20000226 	beq	r4,zero,800e07c <___vfiprintf_internal_r+0x48>
 800e074:	20800e17 	ldw	r2,56(r4)
 800e078:	1000cf26 	beq	r2,zero,800e3b8 <___vfiprintf_internal_r+0x384>
 800e07c:	d8c02017 	ldw	r3,128(sp)
 800e080:	1880030b 	ldhu	r2,12(r3)
 800e084:	10c8000c 	andi	r3,r2,8192
 800e088:	1800071e 	bne	r3,zero,800e0a8 <___vfiprintf_internal_r+0x74>
 800e08c:	d9402017 	ldw	r5,128(sp)
 800e090:	00f7ffc4 	movi	r3,-8193
 800e094:	10880014 	ori	r2,r2,8192
 800e098:	29001917 	ldw	r4,100(r5)
 800e09c:	2880030d 	sth	r2,12(r5)
 800e0a0:	20c6703a 	and	r3,r4,r3
 800e0a4:	28c01915 	stw	r3,100(r5)
 800e0a8:	10c0020c 	andi	r3,r2,8
 800e0ac:	1800a526 	beq	r3,zero,800e344 <___vfiprintf_internal_r+0x310>
 800e0b0:	d9002017 	ldw	r4,128(sp)
 800e0b4:	20c00417 	ldw	r3,16(r4)
 800e0b8:	1800a226 	beq	r3,zero,800e344 <___vfiprintf_internal_r+0x310>
 800e0bc:	1080068c 	andi	r2,r2,26
 800e0c0:	00c00284 	movi	r3,10
 800e0c4:	10c0a826 	beq	r2,r3,800e368 <___vfiprintf_internal_r+0x334>
 800e0c8:	d9001a04 	addi	r4,sp,104
 800e0cc:	d94019c4 	addi	r5,sp,103
 800e0d0:	04820074 	movhi	r18,2049
 800e0d4:	2145c83a 	sub	r2,r4,r5
 800e0d8:	94974d04 	addi	r18,r18,23860
 800e0dc:	d9001e15 	stw	r4,120(sp)
 800e0e0:	d9401f15 	stw	r5,124(sp)
 800e0e4:	dec01a15 	stw	sp,104(sp)
 800e0e8:	d8001c15 	stw	zero,112(sp)
 800e0ec:	d8001b15 	stw	zero,108(sp)
 800e0f0:	d811883a 	mov	r8,sp
 800e0f4:	d8002615 	stw	zero,152(sp)
 800e0f8:	d8002415 	stw	zero,144(sp)
 800e0fc:	d8802815 	stw	r2,160(sp)
 800e100:	a82d883a 	mov	r22,r21
 800e104:	b0800007 	ldb	r2,0(r22)
 800e108:	10040d26 	beq	r2,zero,800f140 <___vfiprintf_internal_r+0x110c>
 800e10c:	00c00944 	movi	r3,37
 800e110:	b029883a 	mov	r20,r22
 800e114:	10c0021e 	bne	r2,r3,800e120 <___vfiprintf_internal_r+0xec>
 800e118:	00001606 	br	800e174 <___vfiprintf_internal_r+0x140>
 800e11c:	10c00326 	beq	r2,r3,800e12c <___vfiprintf_internal_r+0xf8>
 800e120:	a5000044 	addi	r20,r20,1
 800e124:	a0800007 	ldb	r2,0(r20)
 800e128:	103ffc1e 	bne	r2,zero,800e11c <___vfiprintf_internal_r+0xe8>
 800e12c:	a5a1c83a 	sub	r16,r20,r22
 800e130:	80001026 	beq	r16,zero,800e174 <___vfiprintf_internal_r+0x140>
 800e134:	d8c01c17 	ldw	r3,112(sp)
 800e138:	d8801b17 	ldw	r2,108(sp)
 800e13c:	45800015 	stw	r22,0(r8)
 800e140:	80c7883a 	add	r3,r16,r3
 800e144:	10800044 	addi	r2,r2,1
 800e148:	44000115 	stw	r16,4(r8)
 800e14c:	d8c01c15 	stw	r3,112(sp)
 800e150:	d8801b15 	stw	r2,108(sp)
 800e154:	010001c4 	movi	r4,7
 800e158:	2080750e 	bge	r4,r2,800e330 <___vfiprintf_internal_r+0x2fc>
 800e15c:	1803951e 	bne	r3,zero,800efb4 <___vfiprintf_internal_r+0xf80>
 800e160:	d8c02417 	ldw	r3,144(sp)
 800e164:	d8001b15 	stw	zero,108(sp)
 800e168:	d811883a 	mov	r8,sp
 800e16c:	1c07883a 	add	r3,r3,r16
 800e170:	d8c02415 	stw	r3,144(sp)
 800e174:	a0800007 	ldb	r2,0(r20)
 800e178:	1002e026 	beq	r2,zero,800ecfc <___vfiprintf_internal_r+0xcc8>
 800e17c:	a5800044 	addi	r22,r20,1
 800e180:	a0c00047 	ldb	r3,1(r20)
 800e184:	d8001d85 	stb	zero,118(sp)
 800e188:	0027883a 	mov	r19,zero
 800e18c:	d8002305 	stb	zero,140(sp)
 800e190:	043fffc4 	movi	r16,-1
 800e194:	d8002515 	stw	zero,148(sp)
 800e198:	0023883a 	mov	r17,zero
 800e19c:	05001604 	movi	r20,88
 800e1a0:	05400244 	movi	r21,9
 800e1a4:	402f883a 	mov	r23,r8
 800e1a8:	b5800044 	addi	r22,r22,1
 800e1ac:	18bff804 	addi	r2,r3,-32
 800e1b0:	a0827736 	bltu	r20,r2,800eb90 <___vfiprintf_internal_r+0xb5c>
 800e1b4:	100490ba 	slli	r2,r2,2
 800e1b8:	01020074 	movhi	r4,2049
 800e1bc:	21387304 	addi	r4,r4,-7732
 800e1c0:	1105883a 	add	r2,r2,r4
 800e1c4:	10800017 	ldw	r2,0(r2)
 800e1c8:	1000683a 	jmp	r2
 800e1cc:	0800e890 	cmplti	zero,at,930
 800e1d0:	0800eb90 	cmplti	zero,at,942
 800e1d4:	0800eb90 	cmplti	zero,at,942
 800e1d8:	0800e8ac 	andhi	zero,at,930
 800e1dc:	0800eb90 	cmplti	zero,at,942
 800e1e0:	0800eb90 	cmplti	zero,at,942
 800e1e4:	0800eb90 	cmplti	zero,at,942
 800e1e8:	0800eb90 	cmplti	zero,at,942
 800e1ec:	0800eb90 	cmplti	zero,at,942
 800e1f0:	0800eb90 	cmplti	zero,at,942
 800e1f4:	0800eab4 	orhi	zero,at,938
 800e1f8:	0800ead8 	cmpnei	zero,at,939
 800e1fc:	0800eb90 	cmplti	zero,at,942
 800e200:	0800e3d0 	cmplti	zero,at,911
 800e204:	0800eaec 	andhi	zero,at,939
 800e208:	0800eb90 	cmplti	zero,at,942
 800e20c:	0800e8b8 	rdprs	zero,at,930
 800e210:	0800e8c4 	addi	zero,at,931
 800e214:	0800e8c4 	addi	zero,at,931
 800e218:	0800e8c4 	addi	zero,at,931
 800e21c:	0800e8c4 	addi	zero,at,931
 800e220:	0800e8c4 	addi	zero,at,931
 800e224:	0800e8c4 	addi	zero,at,931
 800e228:	0800e8c4 	addi	zero,at,931
 800e22c:	0800e8c4 	addi	zero,at,931
 800e230:	0800e8c4 	addi	zero,at,931
 800e234:	0800eb90 	cmplti	zero,at,942
 800e238:	0800eb90 	cmplti	zero,at,942
 800e23c:	0800eb90 	cmplti	zero,at,942
 800e240:	0800eb90 	cmplti	zero,at,942
 800e244:	0800eb90 	cmplti	zero,at,942
 800e248:	0800eb90 	cmplti	zero,at,942
 800e24c:	0800eb90 	cmplti	zero,at,942
 800e250:	0800eb90 	cmplti	zero,at,942
 800e254:	0800eb90 	cmplti	zero,at,942
 800e258:	0800eb90 	cmplti	zero,at,942
 800e25c:	0800e904 	addi	zero,at,932
 800e260:	0800eb90 	cmplti	zero,at,942
 800e264:	0800eb90 	cmplti	zero,at,942
 800e268:	0800eb90 	cmplti	zero,at,942
 800e26c:	0800eb90 	cmplti	zero,at,942
 800e270:	0800eb90 	cmplti	zero,at,942
 800e274:	0800eb90 	cmplti	zero,at,942
 800e278:	0800eb90 	cmplti	zero,at,942
 800e27c:	0800eb90 	cmplti	zero,at,942
 800e280:	0800eb90 	cmplti	zero,at,942
 800e284:	0800eb90 	cmplti	zero,at,942
 800e288:	0800e940 	call	800e94 <__alt_mem_onchip_memory2_0+0x800e94>
 800e28c:	0800eb90 	cmplti	zero,at,942
 800e290:	0800eb90 	cmplti	zero,at,942
 800e294:	0800eb90 	cmplti	zero,at,942
 800e298:	0800eb90 	cmplti	zero,at,942
 800e29c:	0800eb90 	cmplti	zero,at,942
 800e2a0:	0800e99c 	xori	zero,at,934
 800e2a4:	0800eb90 	cmplti	zero,at,942
 800e2a8:	0800eb90 	cmplti	zero,at,942
 800e2ac:	0800ea10 	cmplti	zero,at,936
 800e2b0:	0800eb90 	cmplti	zero,at,942
 800e2b4:	0800eb90 	cmplti	zero,at,942
 800e2b8:	0800eb90 	cmplti	zero,at,942
 800e2bc:	0800eb90 	cmplti	zero,at,942
 800e2c0:	0800eb90 	cmplti	zero,at,942
 800e2c4:	0800eb90 	cmplti	zero,at,942
 800e2c8:	0800eb90 	cmplti	zero,at,942
 800e2cc:	0800eb90 	cmplti	zero,at,942
 800e2d0:	0800eb90 	cmplti	zero,at,942
 800e2d4:	0800eb90 	cmplti	zero,at,942
 800e2d8:	0800e7b8 	rdprs	zero,at,926
 800e2dc:	0800e7e8 	cmpgeui	zero,at,927
 800e2e0:	0800eb90 	cmplti	zero,at,942
 800e2e4:	0800eb90 	cmplti	zero,at,942
 800e2e8:	0800eb90 	cmplti	zero,at,942
 800e2ec:	0800eb38 	rdprs	zero,at,940
 800e2f0:	0800e7e8 	cmpgeui	zero,at,927
 800e2f4:	0800eb90 	cmplti	zero,at,942
 800e2f8:	0800eb90 	cmplti	zero,at,942
 800e2fc:	0800e690 	cmplti	zero,at,922
 800e300:	0800eb90 	cmplti	zero,at,942
 800e304:	0800e6a4 	muli	zero,at,922
 800e308:	0800e6dc 	xori	zero,at,923
 800e30c:	0800e3dc 	xori	zero,at,911
 800e310:	0800e684 	addi	zero,at,922
 800e314:	0800eb90 	cmplti	zero,at,942
 800e318:	0800ea50 	cmplti	zero,at,937
 800e31c:	0800eb90 	cmplti	zero,at,942
 800e320:	0800ea9c 	xori	zero,at,938
 800e324:	0800eb90 	cmplti	zero,at,942
 800e328:	0800eb90 	cmplti	zero,at,942
 800e32c:	0800e760 	cmpeqi	zero,at,925
 800e330:	42000204 	addi	r8,r8,8
 800e334:	d8c02417 	ldw	r3,144(sp)
 800e338:	1c07883a 	add	r3,r3,r16
 800e33c:	d8c02415 	stw	r3,144(sp)
 800e340:	003f8c06 	br	800e174 <___vfiprintf_internal_r+0x140>
 800e344:	d9402017 	ldw	r5,128(sp)
 800e348:	d9002117 	ldw	r4,132(sp)
 800e34c:	8008c9c0 	call	8008c9c <__swsetup_r>
 800e350:	1003c11e 	bne	r2,zero,800f258 <___vfiprintf_internal_r+0x1224>
 800e354:	d9402017 	ldw	r5,128(sp)
 800e358:	00c00284 	movi	r3,10
 800e35c:	2880030b 	ldhu	r2,12(r5)
 800e360:	1080068c 	andi	r2,r2,26
 800e364:	10ff581e 	bne	r2,r3,800e0c8 <___vfiprintf_internal_r+0x94>
 800e368:	d8c02017 	ldw	r3,128(sp)
 800e36c:	1880038f 	ldh	r2,14(r3)
 800e370:	103f5516 	blt	r2,zero,800e0c8 <___vfiprintf_internal_r+0x94>
 800e374:	d9c02217 	ldw	r7,136(sp)
 800e378:	d9002117 	ldw	r4,132(sp)
 800e37c:	a80d883a 	mov	r6,r21
 800e380:	180b883a 	mov	r5,r3
 800e384:	800f55c0 	call	800f55c <__sbprintf>
 800e388:	dfc03517 	ldw	ra,212(sp)
 800e38c:	df003417 	ldw	fp,208(sp)
 800e390:	ddc03317 	ldw	r23,204(sp)
 800e394:	dd803217 	ldw	r22,200(sp)
 800e398:	dd403117 	ldw	r21,196(sp)
 800e39c:	dd003017 	ldw	r20,192(sp)
 800e3a0:	dcc02f17 	ldw	r19,188(sp)
 800e3a4:	dc802e17 	ldw	r18,184(sp)
 800e3a8:	dc402d17 	ldw	r17,180(sp)
 800e3ac:	dc002c17 	ldw	r16,176(sp)
 800e3b0:	dec03604 	addi	sp,sp,216
 800e3b4:	f800283a 	ret
 800e3b8:	800aca80 	call	800aca8 <__sinit>
 800e3bc:	003f2f06 	br	800e07c <___vfiprintf_internal_r+0x48>
 800e3c0:	d8c02517 	ldw	r3,148(sp)
 800e3c4:	d8802215 	stw	r2,136(sp)
 800e3c8:	00c7c83a 	sub	r3,zero,r3
 800e3cc:	d8c02515 	stw	r3,148(sp)
 800e3d0:	8c400114 	ori	r17,r17,4
 800e3d4:	b0c00007 	ldb	r3,0(r22)
 800e3d8:	003f7306 	br	800e1a8 <___vfiprintf_internal_r+0x174>
 800e3dc:	00800c04 	movi	r2,48
 800e3e0:	d9402217 	ldw	r5,136(sp)
 800e3e4:	d8801d05 	stb	r2,116(sp)
 800e3e8:	00801e04 	movi	r2,120
 800e3ec:	d8801d45 	stb	r2,117(sp)
 800e3f0:	d8001d85 	stb	zero,118(sp)
 800e3f4:	b811883a 	mov	r8,r23
 800e3f8:	28c00104 	addi	r3,r5,4
 800e3fc:	2cc00017 	ldw	r19,0(r5)
 800e400:	0029883a 	mov	r20,zero
 800e404:	88800094 	ori	r2,r17,2
 800e408:	80032516 	blt	r16,zero,800f0a0 <___vfiprintf_internal_r+0x106c>
 800e40c:	00bfdfc4 	movi	r2,-129
 800e410:	88a2703a 	and	r17,r17,r2
 800e414:	d8c02215 	stw	r3,136(sp)
 800e418:	8c400094 	ori	r17,r17,2
 800e41c:	98032a1e 	bne	r19,zero,800f0c8 <___vfiprintf_internal_r+0x1094>
 800e420:	00820074 	movhi	r2,2049
 800e424:	1096ed04 	addi	r2,r2,23476
 800e428:	d8802615 	stw	r2,152(sp)
 800e42c:	002b883a 	mov	r21,zero
 800e430:	8001741e 	bne	r16,zero,800ea04 <___vfiprintf_internal_r+0x9d0>
 800e434:	0021883a 	mov	r16,zero
 800e438:	0029883a 	mov	r20,zero
 800e43c:	ddc01a04 	addi	r23,sp,104
 800e440:	8027883a 	mov	r19,r16
 800e444:	8500010e 	bge	r16,r20,800e44c <___vfiprintf_internal_r+0x418>
 800e448:	a027883a 	mov	r19,r20
 800e44c:	ad403fcc 	andi	r21,r21,255
 800e450:	ad40201c 	xori	r21,r21,128
 800e454:	ad7fe004 	addi	r21,r21,-128
 800e458:	a8000126 	beq	r21,zero,800e460 <___vfiprintf_internal_r+0x42c>
 800e45c:	9cc00044 	addi	r19,r19,1
 800e460:	89c0008c 	andi	r7,r17,2
 800e464:	38000126 	beq	r7,zero,800e46c <___vfiprintf_internal_r+0x438>
 800e468:	9cc00084 	addi	r19,r19,2
 800e46c:	88c0210c 	andi	r3,r17,132
 800e470:	1801dd1e 	bne	r3,zero,800ebe8 <___vfiprintf_internal_r+0xbb4>
 800e474:	d9402517 	ldw	r5,148(sp)
 800e478:	2cebc83a 	sub	r21,r5,r19
 800e47c:	0541da0e 	bge	zero,r21,800ebe8 <___vfiprintf_internal_r+0xbb4>
 800e480:	07000404 	movi	fp,16
 800e484:	d8801c17 	ldw	r2,112(sp)
 800e488:	e543be0e 	bge	fp,r21,800f384 <___vfiprintf_internal_r+0x1350>
 800e48c:	01420074 	movhi	r5,2049
 800e490:	29575104 	addi	r5,r5,23876
 800e494:	dc002715 	stw	r16,156(sp)
 800e498:	d9801b17 	ldw	r6,108(sp)
 800e49c:	a821883a 	mov	r16,r21
 800e4a0:	d9402315 	stw	r5,140(sp)
 800e4a4:	028001c4 	movi	r10,7
 800e4a8:	d9c02915 	stw	r7,164(sp)
 800e4ac:	182b883a 	mov	r21,r3
 800e4b0:	00000506 	br	800e4c8 <___vfiprintf_internal_r+0x494>
 800e4b4:	31000084 	addi	r4,r6,2
 800e4b8:	42000204 	addi	r8,r8,8
 800e4bc:	180d883a 	mov	r6,r3
 800e4c0:	843ffc04 	addi	r16,r16,-16
 800e4c4:	e4000f0e 	bge	fp,r16,800e504 <___vfiprintf_internal_r+0x4d0>
 800e4c8:	01020074 	movhi	r4,2049
 800e4cc:	10800404 	addi	r2,r2,16
 800e4d0:	30c00044 	addi	r3,r6,1
 800e4d4:	21175104 	addi	r4,r4,23876
 800e4d8:	41000015 	stw	r4,0(r8)
 800e4dc:	47000115 	stw	fp,4(r8)
 800e4e0:	d8801c15 	stw	r2,112(sp)
 800e4e4:	d8c01b15 	stw	r3,108(sp)
 800e4e8:	50fff20e 	bge	r10,r3,800e4b4 <___vfiprintf_internal_r+0x480>
 800e4ec:	1001b21e 	bne	r2,zero,800ebb8 <___vfiprintf_internal_r+0xb84>
 800e4f0:	843ffc04 	addi	r16,r16,-16
 800e4f4:	000d883a 	mov	r6,zero
 800e4f8:	01000044 	movi	r4,1
 800e4fc:	d811883a 	mov	r8,sp
 800e500:	e43ff116 	blt	fp,r16,800e4c8 <___vfiprintf_internal_r+0x494>
 800e504:	a807883a 	mov	r3,r21
 800e508:	d9c02917 	ldw	r7,164(sp)
 800e50c:	802b883a 	mov	r21,r16
 800e510:	dc002717 	ldw	r16,156(sp)
 800e514:	d9402317 	ldw	r5,140(sp)
 800e518:	a885883a 	add	r2,r21,r2
 800e51c:	45400115 	stw	r21,4(r8)
 800e520:	41400015 	stw	r5,0(r8)
 800e524:	d8801c15 	stw	r2,112(sp)
 800e528:	d9001b15 	stw	r4,108(sp)
 800e52c:	014001c4 	movi	r5,7
 800e530:	29026216 	blt	r5,r4,800eebc <___vfiprintf_internal_r+0xe88>
 800e534:	d9801d87 	ldb	r6,118(sp)
 800e538:	42000204 	addi	r8,r8,8
 800e53c:	21400044 	addi	r5,r4,1
 800e540:	3001ae1e 	bne	r6,zero,800ebfc <___vfiprintf_internal_r+0xbc8>
 800e544:	3801bb26 	beq	r7,zero,800ec34 <___vfiprintf_internal_r+0xc00>
 800e548:	d9001d04 	addi	r4,sp,116
 800e54c:	10800084 	addi	r2,r2,2
 800e550:	41000015 	stw	r4,0(r8)
 800e554:	01000084 	movi	r4,2
 800e558:	41000115 	stw	r4,4(r8)
 800e55c:	d8801c15 	stw	r2,112(sp)
 800e560:	d9401b15 	stw	r5,108(sp)
 800e564:	010001c4 	movi	r4,7
 800e568:	2142680e 	bge	r4,r5,800ef0c <___vfiprintf_internal_r+0xed8>
 800e56c:	1002b11e 	bne	r2,zero,800f034 <___vfiprintf_internal_r+0x1000>
 800e570:	01802004 	movi	r6,128
 800e574:	01400044 	movi	r5,1
 800e578:	0009883a 	mov	r4,zero
 800e57c:	d811883a 	mov	r8,sp
 800e580:	1981ae1e 	bne	r3,r6,800ec3c <___vfiprintf_internal_r+0xc08>
 800e584:	d8c02517 	ldw	r3,148(sp)
 800e588:	1cf9c83a 	sub	fp,r3,r19
 800e58c:	0701ab0e 	bge	zero,fp,800ec3c <___vfiprintf_internal_r+0xc08>
 800e590:	05400404 	movi	r21,16
 800e594:	af03a90e 	bge	r21,fp,800f43c <___vfiprintf_internal_r+0x1408>
 800e598:	01420074 	movhi	r5,2049
 800e59c:	29574d04 	addi	r5,r5,23860
 800e5a0:	d9402315 	stw	r5,140(sp)
 800e5a4:	01c001c4 	movi	r7,7
 800e5a8:	00000506 	br	800e5c0 <___vfiprintf_internal_r+0x58c>
 800e5ac:	21800084 	addi	r6,r4,2
 800e5b0:	42000204 	addi	r8,r8,8
 800e5b4:	1809883a 	mov	r4,r3
 800e5b8:	e73ffc04 	addi	fp,fp,-16
 800e5bc:	af000d0e 	bge	r21,fp,800e5f4 <___vfiprintf_internal_r+0x5c0>
 800e5c0:	10800404 	addi	r2,r2,16
 800e5c4:	20c00044 	addi	r3,r4,1
 800e5c8:	44800015 	stw	r18,0(r8)
 800e5cc:	45400115 	stw	r21,4(r8)
 800e5d0:	d8801c15 	stw	r2,112(sp)
 800e5d4:	d8c01b15 	stw	r3,108(sp)
 800e5d8:	38fff40e 	bge	r7,r3,800e5ac <___vfiprintf_internal_r+0x578>
 800e5dc:	10022b1e 	bne	r2,zero,800ee8c <___vfiprintf_internal_r+0xe58>
 800e5e0:	e73ffc04 	addi	fp,fp,-16
 800e5e4:	01800044 	movi	r6,1
 800e5e8:	0009883a 	mov	r4,zero
 800e5ec:	d811883a 	mov	r8,sp
 800e5f0:	af3ff316 	blt	r21,fp,800e5c0 <___vfiprintf_internal_r+0x58c>
 800e5f4:	d8c02317 	ldw	r3,140(sp)
 800e5f8:	1705883a 	add	r2,r2,fp
 800e5fc:	47000115 	stw	fp,4(r8)
 800e600:	40c00015 	stw	r3,0(r8)
 800e604:	d8801c15 	stw	r2,112(sp)
 800e608:	d9801b15 	stw	r6,108(sp)
 800e60c:	00c001c4 	movi	r3,7
 800e610:	19829416 	blt	r3,r6,800f064 <___vfiprintf_internal_r+0x1030>
 800e614:	8521c83a 	sub	r16,r16,r20
 800e618:	42000204 	addi	r8,r8,8
 800e61c:	31400044 	addi	r5,r6,1
 800e620:	3009883a 	mov	r4,r6
 800e624:	04018716 	blt	zero,r16,800ec44 <___vfiprintf_internal_r+0xc10>
 800e628:	a085883a 	add	r2,r20,r2
 800e62c:	45c00015 	stw	r23,0(r8)
 800e630:	45000115 	stw	r20,4(r8)
 800e634:	d8801c15 	stw	r2,112(sp)
 800e638:	d9401b15 	stw	r5,108(sp)
 800e63c:	00c001c4 	movi	r3,7
 800e640:	1941c20e 	bge	r3,r5,800ed4c <___vfiprintf_internal_r+0xd18>
 800e644:	1002531e 	bne	r2,zero,800ef94 <___vfiprintf_internal_r+0xf60>
 800e648:	d8001b15 	stw	zero,108(sp)
 800e64c:	8c40010c 	andi	r17,r17,4
 800e650:	88023226 	beq	r17,zero,800ef1c <___vfiprintf_internal_r+0xee8>
 800e654:	d9002517 	ldw	r4,148(sp)
 800e658:	24e3c83a 	sub	r17,r4,r19
 800e65c:	04432916 	blt	zero,r17,800f304 <___vfiprintf_internal_r+0x12d0>
 800e660:	d8802517 	ldw	r2,148(sp)
 800e664:	14c0010e 	bge	r2,r19,800e66c <___vfiprintf_internal_r+0x638>
 800e668:	9805883a 	mov	r2,r19
 800e66c:	d8c02417 	ldw	r3,144(sp)
 800e670:	1887883a 	add	r3,r3,r2
 800e674:	d8c02415 	stw	r3,144(sp)
 800e678:	d8001b15 	stw	zero,108(sp)
 800e67c:	d811883a 	mov	r8,sp
 800e680:	003ea006 	br	800e104 <___vfiprintf_internal_r+0xd0>
 800e684:	8c400814 	ori	r17,r17,32
 800e688:	b0c00007 	ldb	r3,0(r22)
 800e68c:	003ec606 	br	800e1a8 <___vfiprintf_internal_r+0x174>
 800e690:	b0c00007 	ldb	r3,0(r22)
 800e694:	00801b04 	movi	r2,108
 800e698:	18832026 	beq	r3,r2,800f31c <___vfiprintf_internal_r+0x12e8>
 800e69c:	8c400414 	ori	r17,r17,16
 800e6a0:	003ec106 	br	800e1a8 <___vfiprintf_internal_r+0x174>
 800e6a4:	9cc03fcc 	andi	r19,r19,255
 800e6a8:	b811883a 	mov	r8,r23
 800e6ac:	9803981e 	bne	r19,zero,800f510 <___vfiprintf_internal_r+0x14dc>
 800e6b0:	8880080c 	andi	r2,r17,32
 800e6b4:	1002be26 	beq	r2,zero,800f1b0 <___vfiprintf_internal_r+0x117c>
 800e6b8:	d9002217 	ldw	r4,136(sp)
 800e6bc:	d9402417 	ldw	r5,144(sp)
 800e6c0:	20800017 	ldw	r2,0(r4)
 800e6c4:	2807d7fa 	srai	r3,r5,31
 800e6c8:	21000104 	addi	r4,r4,4
 800e6cc:	d9002215 	stw	r4,136(sp)
 800e6d0:	11400015 	stw	r5,0(r2)
 800e6d4:	10c00115 	stw	r3,4(r2)
 800e6d8:	003e8a06 	br	800e104 <___vfiprintf_internal_r+0xd0>
 800e6dc:	9cc03fcc 	andi	r19,r19,255
 800e6e0:	b811883a 	mov	r8,r23
 800e6e4:	9803871e 	bne	r19,zero,800f504 <___vfiprintf_internal_r+0x14d0>
 800e6e8:	8880080c 	andi	r2,r17,32
 800e6ec:	10009a26 	beq	r2,zero,800e958 <___vfiprintf_internal_r+0x924>
 800e6f0:	d9002217 	ldw	r4,136(sp)
 800e6f4:	d8001d85 	stb	zero,118(sp)
 800e6f8:	20800204 	addi	r2,r4,8
 800e6fc:	24c00017 	ldw	r19,0(r4)
 800e700:	25000117 	ldw	r20,4(r4)
 800e704:	8002a416 	blt	r16,zero,800f198 <___vfiprintf_internal_r+0x1164>
 800e708:	013fdfc4 	movi	r4,-129
 800e70c:	9d06b03a 	or	r3,r19,r20
 800e710:	d8802215 	stw	r2,136(sp)
 800e714:	8922703a 	and	r17,r17,r4
 800e718:	18009b26 	beq	r3,zero,800e988 <___vfiprintf_internal_r+0x954>
 800e71c:	002b883a 	mov	r21,zero
 800e720:	ddc01a04 	addi	r23,sp,104
 800e724:	9806d0fa 	srli	r3,r19,3
 800e728:	a008977a 	slli	r4,r20,29
 800e72c:	a028d0fa 	srli	r20,r20,3
 800e730:	9cc001cc 	andi	r19,r19,7
 800e734:	98800c04 	addi	r2,r19,48
 800e738:	bdffffc4 	addi	r23,r23,-1
 800e73c:	20e6b03a 	or	r19,r4,r3
 800e740:	b8800005 	stb	r2,0(r23)
 800e744:	9d06b03a 	or	r3,r19,r20
 800e748:	183ff61e 	bne	r3,zero,800e724 <___vfiprintf_internal_r+0x6f0>
 800e74c:	88c0004c 	andi	r3,r17,1
 800e750:	18021f1e 	bne	r3,zero,800efd0 <___vfiprintf_internal_r+0xf9c>
 800e754:	d9401e17 	ldw	r5,120(sp)
 800e758:	2de9c83a 	sub	r20,r5,r23
 800e75c:	003f3806 	br	800e440 <___vfiprintf_internal_r+0x40c>
 800e760:	9cc03fcc 	andi	r19,r19,255
 800e764:	b811883a 	mov	r8,r23
 800e768:	98034f1e 	bne	r19,zero,800f4a8 <___vfiprintf_internal_r+0x1474>
 800e76c:	00820074 	movhi	r2,2049
 800e770:	1096ed04 	addi	r2,r2,23476
 800e774:	d8802615 	stw	r2,152(sp)
 800e778:	8880080c 	andi	r2,r17,32
 800e77c:	1000ac26 	beq	r2,zero,800ea30 <___vfiprintf_internal_r+0x9fc>
 800e780:	d9002217 	ldw	r4,136(sp)
 800e784:	24c00017 	ldw	r19,0(r4)
 800e788:	25000117 	ldw	r20,4(r4)
 800e78c:	21000204 	addi	r4,r4,8
 800e790:	d9002215 	stw	r4,136(sp)
 800e794:	8880004c 	andi	r2,r17,1
 800e798:	1001e726 	beq	r2,zero,800ef38 <___vfiprintf_internal_r+0xf04>
 800e79c:	9d04b03a 	or	r2,r19,r20
 800e7a0:	10025c1e 	bne	r2,zero,800f114 <___vfiprintf_internal_r+0x10e0>
 800e7a4:	d8001d85 	stb	zero,118(sp)
 800e7a8:	80024416 	blt	r16,zero,800f0bc <___vfiprintf_internal_r+0x1088>
 800e7ac:	00bfdfc4 	movi	r2,-129
 800e7b0:	88a2703a 	and	r17,r17,r2
 800e7b4:	003f1d06 	br	800e42c <___vfiprintf_internal_r+0x3f8>
 800e7b8:	d8c02217 	ldw	r3,136(sp)
 800e7bc:	04c00044 	movi	r19,1
 800e7c0:	b811883a 	mov	r8,r23
 800e7c4:	18800017 	ldw	r2,0(r3)
 800e7c8:	18c00104 	addi	r3,r3,4
 800e7cc:	d8001d85 	stb	zero,118(sp)
 800e7d0:	d8801005 	stb	r2,64(sp)
 800e7d4:	d8c02215 	stw	r3,136(sp)
 800e7d8:	9829883a 	mov	r20,r19
 800e7dc:	ddc01004 	addi	r23,sp,64
 800e7e0:	0021883a 	mov	r16,zero
 800e7e4:	003f1e06 	br	800e460 <___vfiprintf_internal_r+0x42c>
 800e7e8:	9cc03fcc 	andi	r19,r19,255
 800e7ec:	b811883a 	mov	r8,r23
 800e7f0:	9803331e 	bne	r19,zero,800f4c0 <___vfiprintf_internal_r+0x148c>
 800e7f4:	8880080c 	andi	r2,r17,32
 800e7f8:	10004826 	beq	r2,zero,800e91c <___vfiprintf_internal_r+0x8e8>
 800e7fc:	d9002217 	ldw	r4,136(sp)
 800e800:	20800117 	ldw	r2,4(r4)
 800e804:	24c00017 	ldw	r19,0(r4)
 800e808:	21000204 	addi	r4,r4,8
 800e80c:	d9002215 	stw	r4,136(sp)
 800e810:	1029883a 	mov	r20,r2
 800e814:	10024c16 	blt	r2,zero,800f148 <___vfiprintf_internal_r+0x1114>
 800e818:	dd401d83 	ldbu	r21,118(sp)
 800e81c:	80007116 	blt	r16,zero,800e9e4 <___vfiprintf_internal_r+0x9b0>
 800e820:	00ffdfc4 	movi	r3,-129
 800e824:	9d04b03a 	or	r2,r19,r20
 800e828:	88e2703a 	and	r17,r17,r3
 800e82c:	1000d126 	beq	r2,zero,800eb74 <___vfiprintf_internal_r+0xb40>
 800e830:	a0023526 	beq	r20,zero,800f108 <___vfiprintf_internal_r+0x10d4>
 800e834:	ddc01a04 	addi	r23,sp,104
 800e838:	4039883a 	mov	fp,r8
 800e83c:	9809883a 	mov	r4,r19
 800e840:	a00b883a 	mov	r5,r20
 800e844:	01800284 	movi	r6,10
 800e848:	000f883a 	mov	r7,zero
 800e84c:	80105600 	call	8010560 <__umoddi3>
 800e850:	10800c04 	addi	r2,r2,48
 800e854:	bdffffc4 	addi	r23,r23,-1
 800e858:	9809883a 	mov	r4,r19
 800e85c:	a00b883a 	mov	r5,r20
 800e860:	b8800005 	stb	r2,0(r23)
 800e864:	01800284 	movi	r6,10
 800e868:	000f883a 	mov	r7,zero
 800e86c:	800ff640 	call	800ff64 <__udivdi3>
 800e870:	1027883a 	mov	r19,r2
 800e874:	10c4b03a 	or	r2,r2,r3
 800e878:	1829883a 	mov	r20,r3
 800e87c:	103fef1e 	bne	r2,zero,800e83c <___vfiprintf_internal_r+0x808>
 800e880:	d9001e17 	ldw	r4,120(sp)
 800e884:	e011883a 	mov	r8,fp
 800e888:	25e9c83a 	sub	r20,r4,r23
 800e88c:	003eec06 	br	800e440 <___vfiprintf_internal_r+0x40c>
 800e890:	d8802307 	ldb	r2,140(sp)
 800e894:	1002361e 	bne	r2,zero,800f170 <___vfiprintf_internal_r+0x113c>
 800e898:	00c00804 	movi	r3,32
 800e89c:	d8c02305 	stb	r3,140(sp)
 800e8a0:	04c00044 	movi	r19,1
 800e8a4:	b0c00007 	ldb	r3,0(r22)
 800e8a8:	003e3f06 	br	800e1a8 <___vfiprintf_internal_r+0x174>
 800e8ac:	8c400054 	ori	r17,r17,1
 800e8b0:	b0c00007 	ldb	r3,0(r22)
 800e8b4:	003e3c06 	br	800e1a8 <___vfiprintf_internal_r+0x174>
 800e8b8:	8c402014 	ori	r17,r17,128
 800e8bc:	b0c00007 	ldb	r3,0(r22)
 800e8c0:	003e3906 	br	800e1a8 <___vfiprintf_internal_r+0x174>
 800e8c4:	dc002715 	stw	r16,156(sp)
 800e8c8:	d8002515 	stw	zero,148(sp)
 800e8cc:	1f3ff404 	addi	fp,r3,-48
 800e8d0:	0009883a 	mov	r4,zero
 800e8d4:	b021883a 	mov	r16,r22
 800e8d8:	01400284 	movi	r5,10
 800e8dc:	80057b40 	call	80057b4 <__mulsi3>
 800e8e0:	80c00007 	ldb	r3,0(r16)
 800e8e4:	e089883a 	add	r4,fp,r2
 800e8e8:	b5800044 	addi	r22,r22,1
 800e8ec:	1f3ff404 	addi	fp,r3,-48
 800e8f0:	b021883a 	mov	r16,r22
 800e8f4:	af3ff82e 	bgeu	r21,fp,800e8d8 <___vfiprintf_internal_r+0x8a4>
 800e8f8:	d9002515 	stw	r4,148(sp)
 800e8fc:	dc002717 	ldw	r16,156(sp)
 800e900:	003e2a06 	br	800e1ac <___vfiprintf_internal_r+0x178>
 800e904:	9cc03fcc 	andi	r19,r19,255
 800e908:	b811883a 	mov	r8,r23
 800e90c:	9802e91e 	bne	r19,zero,800f4b4 <___vfiprintf_internal_r+0x1480>
 800e910:	8c400414 	ori	r17,r17,16
 800e914:	8880080c 	andi	r2,r17,32
 800e918:	103fb81e 	bne	r2,zero,800e7fc <___vfiprintf_internal_r+0x7c8>
 800e91c:	8880040c 	andi	r2,r17,16
 800e920:	10022e26 	beq	r2,zero,800f1dc <___vfiprintf_internal_r+0x11a8>
 800e924:	d9402217 	ldw	r5,136(sp)
 800e928:	2cc00017 	ldw	r19,0(r5)
 800e92c:	29400104 	addi	r5,r5,4
 800e930:	d9402215 	stw	r5,136(sp)
 800e934:	9829d7fa 	srai	r20,r19,31
 800e938:	a005883a 	mov	r2,r20
 800e93c:	003fb506 	br	800e814 <___vfiprintf_internal_r+0x7e0>
 800e940:	9cc03fcc 	andi	r19,r19,255
 800e944:	b811883a 	mov	r8,r23
 800e948:	9802fa1e 	bne	r19,zero,800f534 <___vfiprintf_internal_r+0x1500>
 800e94c:	8c400414 	ori	r17,r17,16
 800e950:	8880080c 	andi	r2,r17,32
 800e954:	103f661e 	bne	r2,zero,800e6f0 <___vfiprintf_internal_r+0x6bc>
 800e958:	8880040c 	andi	r2,r17,16
 800e95c:	10020626 	beq	r2,zero,800f178 <___vfiprintf_internal_r+0x1144>
 800e960:	d9402217 	ldw	r5,136(sp)
 800e964:	d8001d85 	stb	zero,118(sp)
 800e968:	0029883a 	mov	r20,zero
 800e96c:	28800104 	addi	r2,r5,4
 800e970:	2cc00017 	ldw	r19,0(r5)
 800e974:	80020816 	blt	r16,zero,800f198 <___vfiprintf_internal_r+0x1164>
 800e978:	00ffdfc4 	movi	r3,-129
 800e97c:	d8802215 	stw	r2,136(sp)
 800e980:	88e2703a 	and	r17,r17,r3
 800e984:	983f651e 	bne	r19,zero,800e71c <___vfiprintf_internal_r+0x6e8>
 800e988:	002b883a 	mov	r21,zero
 800e98c:	8002cf26 	beq	r16,zero,800f4cc <___vfiprintf_internal_r+0x1498>
 800e990:	0027883a 	mov	r19,zero
 800e994:	0029883a 	mov	r20,zero
 800e998:	003f6106 	br	800e720 <___vfiprintf_internal_r+0x6ec>
 800e99c:	9cc03fcc 	andi	r19,r19,255
 800e9a0:	b811883a 	mov	r8,r23
 800e9a4:	9802e01e 	bne	r19,zero,800f528 <___vfiprintf_internal_r+0x14f4>
 800e9a8:	8c400414 	ori	r17,r17,16
 800e9ac:	8880080c 	andi	r2,r17,32
 800e9b0:	1000641e 	bne	r2,zero,800eb44 <___vfiprintf_internal_r+0xb10>
 800e9b4:	8880040c 	andi	r2,r17,16
 800e9b8:	1001c81e 	bne	r2,zero,800f0dc <___vfiprintf_internal_r+0x10a8>
 800e9bc:	8880100c 	andi	r2,r17,64
 800e9c0:	d8001d85 	stb	zero,118(sp)
 800e9c4:	1002281e 	bne	r2,zero,800f268 <___vfiprintf_internal_r+0x1234>
 800e9c8:	d9002217 	ldw	r4,136(sp)
 800e9cc:	0029883a 	mov	r20,zero
 800e9d0:	20800104 	addi	r2,r4,4
 800e9d4:	24c00017 	ldw	r19,0(r4)
 800e9d8:	8001c60e 	bge	r16,zero,800f0f4 <___vfiprintf_internal_r+0x10c0>
 800e9dc:	d8802215 	stw	r2,136(sp)
 800e9e0:	002b883a 	mov	r21,zero
 800e9e4:	9d04b03a 	or	r2,r19,r20
 800e9e8:	103f911e 	bne	r2,zero,800e830 <___vfiprintf_internal_r+0x7fc>
 800e9ec:	00800044 	movi	r2,1
 800e9f0:	10803fcc 	andi	r2,r2,255
 800e9f4:	00c00044 	movi	r3,1
 800e9f8:	10c05f26 	beq	r2,r3,800eb78 <___vfiprintf_internal_r+0xb44>
 800e9fc:	00c00084 	movi	r3,2
 800ea00:	10ffe31e 	bne	r2,r3,800e990 <___vfiprintf_internal_r+0x95c>
 800ea04:	0027883a 	mov	r19,zero
 800ea08:	0029883a 	mov	r20,zero
 800ea0c:	00015106 	br	800ef54 <___vfiprintf_internal_r+0xf20>
 800ea10:	9cc03fcc 	andi	r19,r19,255
 800ea14:	b811883a 	mov	r8,r23
 800ea18:	9802c01e 	bne	r19,zero,800f51c <___vfiprintf_internal_r+0x14e8>
 800ea1c:	01420074 	movhi	r5,2049
 800ea20:	2956e804 	addi	r5,r5,23456
 800ea24:	d9402615 	stw	r5,152(sp)
 800ea28:	8880080c 	andi	r2,r17,32
 800ea2c:	103f541e 	bne	r2,zero,800e780 <___vfiprintf_internal_r+0x74c>
 800ea30:	8880040c 	andi	r2,r17,16
 800ea34:	1001f226 	beq	r2,zero,800f200 <___vfiprintf_internal_r+0x11cc>
 800ea38:	d9402217 	ldw	r5,136(sp)
 800ea3c:	0029883a 	mov	r20,zero
 800ea40:	2cc00017 	ldw	r19,0(r5)
 800ea44:	29400104 	addi	r5,r5,4
 800ea48:	d9402215 	stw	r5,136(sp)
 800ea4c:	003f5106 	br	800e794 <___vfiprintf_internal_r+0x760>
 800ea50:	d8c02217 	ldw	r3,136(sp)
 800ea54:	b811883a 	mov	r8,r23
 800ea58:	d8001d85 	stb	zero,118(sp)
 800ea5c:	1dc00017 	ldw	r23,0(r3)
 800ea60:	1f000104 	addi	fp,r3,4
 800ea64:	b8025926 	beq	r23,zero,800f3cc <___vfiprintf_internal_r+0x1398>
 800ea68:	80023316 	blt	r16,zero,800f338 <___vfiprintf_internal_r+0x1304>
 800ea6c:	800d883a 	mov	r6,r16
 800ea70:	000b883a 	mov	r5,zero
 800ea74:	b809883a 	mov	r4,r23
 800ea78:	da002a15 	stw	r8,168(sp)
 800ea7c:	800c27c0 	call	800c27c <memchr>
 800ea80:	da002a17 	ldw	r8,168(sp)
 800ea84:	10026826 	beq	r2,zero,800f428 <___vfiprintf_internal_r+0x13f4>
 800ea88:	15e9c83a 	sub	r20,r2,r23
 800ea8c:	dd401d83 	ldbu	r21,118(sp)
 800ea90:	df002215 	stw	fp,136(sp)
 800ea94:	0021883a 	mov	r16,zero
 800ea98:	003e6906 	br	800e440 <___vfiprintf_internal_r+0x40c>
 800ea9c:	9cc03fcc 	andi	r19,r19,255
 800eaa0:	b811883a 	mov	r8,r23
 800eaa4:	983fc126 	beq	r19,zero,800e9ac <___vfiprintf_internal_r+0x978>
 800eaa8:	d8c02303 	ldbu	r3,140(sp)
 800eaac:	d8c01d85 	stb	r3,118(sp)
 800eab0:	003fbe06 	br	800e9ac <___vfiprintf_internal_r+0x978>
 800eab4:	d9002217 	ldw	r4,136(sp)
 800eab8:	d9402217 	ldw	r5,136(sp)
 800eabc:	21000017 	ldw	r4,0(r4)
 800eac0:	28800104 	addi	r2,r5,4
 800eac4:	d9002515 	stw	r4,148(sp)
 800eac8:	203e3d16 	blt	r4,zero,800e3c0 <___vfiprintf_internal_r+0x38c>
 800eacc:	d8802215 	stw	r2,136(sp)
 800ead0:	b0c00007 	ldb	r3,0(r22)
 800ead4:	003db406 	br	800e1a8 <___vfiprintf_internal_r+0x174>
 800ead8:	00c00ac4 	movi	r3,43
 800eadc:	d8c02305 	stb	r3,140(sp)
 800eae0:	04c00044 	movi	r19,1
 800eae4:	b0c00007 	ldb	r3,0(r22)
 800eae8:	003daf06 	br	800e1a8 <___vfiprintf_internal_r+0x174>
 800eaec:	b0c00007 	ldb	r3,0(r22)
 800eaf0:	01000a84 	movi	r4,42
 800eaf4:	b4000044 	addi	r16,r22,1
 800eaf8:	19025e26 	beq	r3,r4,800f474 <___vfiprintf_internal_r+0x1440>
 800eafc:	1f3ff404 	addi	fp,r3,-48
 800eb00:	0009883a 	mov	r4,zero
 800eb04:	af025236 	bltu	r21,fp,800f450 <___vfiprintf_internal_r+0x141c>
 800eb08:	01400284 	movi	r5,10
 800eb0c:	80057b40 	call	80057b4 <__mulsi3>
 800eb10:	80c00007 	ldb	r3,0(r16)
 800eb14:	1709883a 	add	r4,r2,fp
 800eb18:	85800044 	addi	r22,r16,1
 800eb1c:	1f3ff404 	addi	fp,r3,-48
 800eb20:	b021883a 	mov	r16,r22
 800eb24:	af3ff82e 	bgeu	r21,fp,800eb08 <___vfiprintf_internal_r+0xad4>
 800eb28:	2021883a 	mov	r16,r4
 800eb2c:	203d9f0e 	bge	r4,zero,800e1ac <___vfiprintf_internal_r+0x178>
 800eb30:	043fffc4 	movi	r16,-1
 800eb34:	003d9d06 	br	800e1ac <___vfiprintf_internal_r+0x178>
 800eb38:	8c401014 	ori	r17,r17,64
 800eb3c:	b0c00007 	ldb	r3,0(r22)
 800eb40:	003d9906 	br	800e1a8 <___vfiprintf_internal_r+0x174>
 800eb44:	d9002217 	ldw	r4,136(sp)
 800eb48:	d8001d85 	stb	zero,118(sp)
 800eb4c:	20c00204 	addi	r3,r4,8
 800eb50:	24c00017 	ldw	r19,0(r4)
 800eb54:	25000117 	ldw	r20,4(r4)
 800eb58:	8001e716 	blt	r16,zero,800f2f8 <___vfiprintf_internal_r+0x12c4>
 800eb5c:	013fdfc4 	movi	r4,-129
 800eb60:	9d04b03a 	or	r2,r19,r20
 800eb64:	d8c02215 	stw	r3,136(sp)
 800eb68:	8922703a 	and	r17,r17,r4
 800eb6c:	002b883a 	mov	r21,zero
 800eb70:	103f2f1e 	bne	r2,zero,800e830 <___vfiprintf_internal_r+0x7fc>
 800eb74:	803e2f26 	beq	r16,zero,800e434 <___vfiprintf_internal_r+0x400>
 800eb78:	0027883a 	mov	r19,zero
 800eb7c:	9cc00c04 	addi	r19,r19,48
 800eb80:	dcc019c5 	stb	r19,103(sp)
 800eb84:	dd002817 	ldw	r20,160(sp)
 800eb88:	ddc019c4 	addi	r23,sp,103
 800eb8c:	003e2c06 	br	800e440 <___vfiprintf_internal_r+0x40c>
 800eb90:	9cc03fcc 	andi	r19,r19,255
 800eb94:	b811883a 	mov	r8,r23
 800eb98:	9802571e 	bne	r19,zero,800f4f8 <___vfiprintf_internal_r+0x14c4>
 800eb9c:	18005726 	beq	r3,zero,800ecfc <___vfiprintf_internal_r+0xcc8>
 800eba0:	04c00044 	movi	r19,1
 800eba4:	d8c01005 	stb	r3,64(sp)
 800eba8:	d8001d85 	stb	zero,118(sp)
 800ebac:	9829883a 	mov	r20,r19
 800ebb0:	ddc01004 	addi	r23,sp,64
 800ebb4:	003f0a06 	br	800e7e0 <___vfiprintf_internal_r+0x7ac>
 800ebb8:	d9402017 	ldw	r5,128(sp)
 800ebbc:	d9002117 	ldw	r4,132(sp)
 800ebc0:	d9801a04 	addi	r6,sp,104
 800ebc4:	da802a15 	stw	r10,168(sp)
 800ebc8:	800df200 	call	800df20 <__sprint_r.part.0>
 800ebcc:	da802a17 	ldw	r10,168(sp)
 800ebd0:	1000501e 	bne	r2,zero,800ed14 <___vfiprintf_internal_r+0xce0>
 800ebd4:	d9801b17 	ldw	r6,108(sp)
 800ebd8:	d8801c17 	ldw	r2,112(sp)
 800ebdc:	d811883a 	mov	r8,sp
 800ebe0:	31000044 	addi	r4,r6,1
 800ebe4:	003e3606 	br	800e4c0 <___vfiprintf_internal_r+0x48c>
 800ebe8:	d9001b17 	ldw	r4,108(sp)
 800ebec:	d8801c17 	ldw	r2,112(sp)
 800ebf0:	21400044 	addi	r5,r4,1
 800ebf4:	d9801d87 	ldb	r6,118(sp)
 800ebf8:	303e5226 	beq	r6,zero,800e544 <___vfiprintf_internal_r+0x510>
 800ebfc:	01800044 	movi	r6,1
 800ec00:	d9001d84 	addi	r4,sp,118
 800ec04:	1185883a 	add	r2,r2,r6
 800ec08:	41000015 	stw	r4,0(r8)
 800ec0c:	41800115 	stw	r6,4(r8)
 800ec10:	d8801c15 	stw	r2,112(sp)
 800ec14:	d9401b15 	stw	r5,108(sp)
 800ec18:	010001c4 	movi	r4,7
 800ec1c:	2140b00e 	bge	r4,r5,800eee0 <___vfiprintf_internal_r+0xeac>
 800ec20:	1000f61e 	bne	r2,zero,800effc <___vfiprintf_internal_r+0xfc8>
 800ec24:	3800b31e 	bne	r7,zero,800eef4 <___vfiprintf_internal_r+0xec0>
 800ec28:	0009883a 	mov	r4,zero
 800ec2c:	300b883a 	mov	r5,r6
 800ec30:	d811883a 	mov	r8,sp
 800ec34:	01802004 	movi	r6,128
 800ec38:	19be5226 	beq	r3,r6,800e584 <___vfiprintf_internal_r+0x550>
 800ec3c:	8521c83a 	sub	r16,r16,r20
 800ec40:	043e790e 	bge	zero,r16,800e628 <___vfiprintf_internal_r+0x5f4>
 800ec44:	05400404 	movi	r21,16
 800ec48:	ac01b00e 	bge	r21,r16,800f30c <___vfiprintf_internal_r+0x12d8>
 800ec4c:	01420074 	movhi	r5,2049
 800ec50:	29574d04 	addi	r5,r5,23860
 800ec54:	d9402315 	stw	r5,140(sp)
 800ec58:	070001c4 	movi	fp,7
 800ec5c:	00000506 	br	800ec74 <___vfiprintf_internal_r+0xc40>
 800ec60:	21400084 	addi	r5,r4,2
 800ec64:	42000204 	addi	r8,r8,8
 800ec68:	1809883a 	mov	r4,r3
 800ec6c:	843ffc04 	addi	r16,r16,-16
 800ec70:	ac000d0e 	bge	r21,r16,800eca8 <___vfiprintf_internal_r+0xc74>
 800ec74:	10800404 	addi	r2,r2,16
 800ec78:	20c00044 	addi	r3,r4,1
 800ec7c:	44800015 	stw	r18,0(r8)
 800ec80:	45400115 	stw	r21,4(r8)
 800ec84:	d8801c15 	stw	r2,112(sp)
 800ec88:	d8c01b15 	stw	r3,108(sp)
 800ec8c:	e0fff40e 	bge	fp,r3,800ec60 <___vfiprintf_internal_r+0xc2c>
 800ec90:	1000101e 	bne	r2,zero,800ecd4 <___vfiprintf_internal_r+0xca0>
 800ec94:	843ffc04 	addi	r16,r16,-16
 800ec98:	01400044 	movi	r5,1
 800ec9c:	0009883a 	mov	r4,zero
 800eca0:	d811883a 	mov	r8,sp
 800eca4:	ac3ff316 	blt	r21,r16,800ec74 <___vfiprintf_internal_r+0xc40>
 800eca8:	d8c02317 	ldw	r3,140(sp)
 800ecac:	1405883a 	add	r2,r2,r16
 800ecb0:	44000115 	stw	r16,4(r8)
 800ecb4:	40c00015 	stw	r3,0(r8)
 800ecb8:	d8801c15 	stw	r2,112(sp)
 800ecbc:	d9401b15 	stw	r5,108(sp)
 800ecc0:	00c001c4 	movi	r3,7
 800ecc4:	19401916 	blt	r3,r5,800ed2c <___vfiprintf_internal_r+0xcf8>
 800ecc8:	42000204 	addi	r8,r8,8
 800eccc:	29400044 	addi	r5,r5,1
 800ecd0:	003e5506 	br	800e628 <___vfiprintf_internal_r+0x5f4>
 800ecd4:	d9402017 	ldw	r5,128(sp)
 800ecd8:	d9002117 	ldw	r4,132(sp)
 800ecdc:	d9801a04 	addi	r6,sp,104
 800ece0:	800df200 	call	800df20 <__sprint_r.part.0>
 800ece4:	10000b1e 	bne	r2,zero,800ed14 <___vfiprintf_internal_r+0xce0>
 800ece8:	d9001b17 	ldw	r4,108(sp)
 800ecec:	d8801c17 	ldw	r2,112(sp)
 800ecf0:	d811883a 	mov	r8,sp
 800ecf4:	21400044 	addi	r5,r4,1
 800ecf8:	003fdc06 	br	800ec6c <___vfiprintf_internal_r+0xc38>
 800ecfc:	d8801c17 	ldw	r2,112(sp)
 800ed00:	10000426 	beq	r2,zero,800ed14 <___vfiprintf_internal_r+0xce0>
 800ed04:	d9402017 	ldw	r5,128(sp)
 800ed08:	d9002117 	ldw	r4,132(sp)
 800ed0c:	d9801a04 	addi	r6,sp,104
 800ed10:	800df200 	call	800df20 <__sprint_r.part.0>
 800ed14:	d9402017 	ldw	r5,128(sp)
 800ed18:	2880030b 	ldhu	r2,12(r5)
 800ed1c:	1080100c 	andi	r2,r2,64
 800ed20:	10014d1e 	bne	r2,zero,800f258 <___vfiprintf_internal_r+0x1224>
 800ed24:	d8802417 	ldw	r2,144(sp)
 800ed28:	003d9706 	br	800e388 <___vfiprintf_internal_r+0x354>
 800ed2c:	1000d21e 	bne	r2,zero,800f078 <___vfiprintf_internal_r+0x1044>
 800ed30:	00c00044 	movi	r3,1
 800ed34:	a005883a 	mov	r2,r20
 800ed38:	ddc00015 	stw	r23,0(sp)
 800ed3c:	dd000115 	stw	r20,4(sp)
 800ed40:	dd001c15 	stw	r20,112(sp)
 800ed44:	d8c01b15 	stw	r3,108(sp)
 800ed48:	d811883a 	mov	r8,sp
 800ed4c:	42000204 	addi	r8,r8,8
 800ed50:	8c40010c 	andi	r17,r17,4
 800ed54:	88004026 	beq	r17,zero,800ee58 <___vfiprintf_internal_r+0xe24>
 800ed58:	d9002517 	ldw	r4,148(sp)
 800ed5c:	24e3c83a 	sub	r17,r4,r19
 800ed60:	04403d0e 	bge	zero,r17,800ee58 <___vfiprintf_internal_r+0xe24>
 800ed64:	04000404 	movi	r16,16
 800ed68:	8441a90e 	bge	r16,r17,800f410 <___vfiprintf_internal_r+0x13dc>
 800ed6c:	00c20074 	movhi	r3,2049
 800ed70:	18d75104 	addi	r3,r3,23876
 800ed74:	d9001b17 	ldw	r4,108(sp)
 800ed78:	d8c02315 	stw	r3,140(sp)
 800ed7c:	050001c4 	movi	r20,7
 800ed80:	dd402117 	ldw	r21,132(sp)
 800ed84:	ddc02017 	ldw	r23,128(sp)
 800ed88:	00000506 	br	800eda0 <___vfiprintf_internal_r+0xd6c>
 800ed8c:	21400084 	addi	r5,r4,2
 800ed90:	42000204 	addi	r8,r8,8
 800ed94:	1809883a 	mov	r4,r3
 800ed98:	8c7ffc04 	addi	r17,r17,-16
 800ed9c:	84400f0e 	bge	r16,r17,800eddc <___vfiprintf_internal_r+0xda8>
 800eda0:	01420074 	movhi	r5,2049
 800eda4:	10800404 	addi	r2,r2,16
 800eda8:	20c00044 	addi	r3,r4,1
 800edac:	29575104 	addi	r5,r5,23876
 800edb0:	41400015 	stw	r5,0(r8)
 800edb4:	44000115 	stw	r16,4(r8)
 800edb8:	d8801c15 	stw	r2,112(sp)
 800edbc:	d8c01b15 	stw	r3,108(sp)
 800edc0:	a0fff20e 	bge	r20,r3,800ed8c <___vfiprintf_internal_r+0xd58>
 800edc4:	1000141e 	bne	r2,zero,800ee18 <___vfiprintf_internal_r+0xde4>
 800edc8:	8c7ffc04 	addi	r17,r17,-16
 800edcc:	01400044 	movi	r5,1
 800edd0:	0009883a 	mov	r4,zero
 800edd4:	d811883a 	mov	r8,sp
 800edd8:	847ff116 	blt	r16,r17,800eda0 <___vfiprintf_internal_r+0xd6c>
 800eddc:	d8c02317 	ldw	r3,140(sp)
 800ede0:	1445883a 	add	r2,r2,r17
 800ede4:	44400115 	stw	r17,4(r8)
 800ede8:	40c00015 	stw	r3,0(r8)
 800edec:	d8801c15 	stw	r2,112(sp)
 800edf0:	d9401b15 	stw	r5,108(sp)
 800edf4:	00c001c4 	movi	r3,7
 800edf8:	1940170e 	bge	r3,r5,800ee58 <___vfiprintf_internal_r+0xe24>
 800edfc:	1000101e 	bne	r2,zero,800ee40 <___vfiprintf_internal_r+0xe0c>
 800ee00:	d8802517 	ldw	r2,148(sp)
 800ee04:	14c11616 	blt	r2,r19,800f260 <___vfiprintf_internal_r+0x122c>
 800ee08:	d9002417 	ldw	r4,144(sp)
 800ee0c:	2089883a 	add	r4,r4,r2
 800ee10:	d9002415 	stw	r4,144(sp)
 800ee14:	003e1806 	br	800e678 <___vfiprintf_internal_r+0x644>
 800ee18:	d9801a04 	addi	r6,sp,104
 800ee1c:	b80b883a 	mov	r5,r23
 800ee20:	a809883a 	mov	r4,r21
 800ee24:	800df200 	call	800df20 <__sprint_r.part.0>
 800ee28:	103fba1e 	bne	r2,zero,800ed14 <___vfiprintf_internal_r+0xce0>
 800ee2c:	d9001b17 	ldw	r4,108(sp)
 800ee30:	d8801c17 	ldw	r2,112(sp)
 800ee34:	d811883a 	mov	r8,sp
 800ee38:	21400044 	addi	r5,r4,1
 800ee3c:	003fd606 	br	800ed98 <___vfiprintf_internal_r+0xd64>
 800ee40:	d9402017 	ldw	r5,128(sp)
 800ee44:	d9002117 	ldw	r4,132(sp)
 800ee48:	d9801a04 	addi	r6,sp,104
 800ee4c:	800df200 	call	800df20 <__sprint_r.part.0>
 800ee50:	103fb01e 	bne	r2,zero,800ed14 <___vfiprintf_internal_r+0xce0>
 800ee54:	d8801c17 	ldw	r2,112(sp)
 800ee58:	d8c02517 	ldw	r3,148(sp)
 800ee5c:	1cc0010e 	bge	r3,r19,800ee64 <___vfiprintf_internal_r+0xe30>
 800ee60:	9807883a 	mov	r3,r19
 800ee64:	d9002417 	ldw	r4,144(sp)
 800ee68:	20c9883a 	add	r4,r4,r3
 800ee6c:	d9002415 	stw	r4,144(sp)
 800ee70:	103e0126 	beq	r2,zero,800e678 <___vfiprintf_internal_r+0x644>
 800ee74:	d9402017 	ldw	r5,128(sp)
 800ee78:	d9002117 	ldw	r4,132(sp)
 800ee7c:	d9801a04 	addi	r6,sp,104
 800ee80:	800df200 	call	800df20 <__sprint_r.part.0>
 800ee84:	103dfc26 	beq	r2,zero,800e678 <___vfiprintf_internal_r+0x644>
 800ee88:	003fa206 	br	800ed14 <___vfiprintf_internal_r+0xce0>
 800ee8c:	d9402017 	ldw	r5,128(sp)
 800ee90:	d9002117 	ldw	r4,132(sp)
 800ee94:	d9801a04 	addi	r6,sp,104
 800ee98:	d9c02b15 	stw	r7,172(sp)
 800ee9c:	800df200 	call	800df20 <__sprint_r.part.0>
 800eea0:	d9c02b17 	ldw	r7,172(sp)
 800eea4:	103f9b1e 	bne	r2,zero,800ed14 <___vfiprintf_internal_r+0xce0>
 800eea8:	d9001b17 	ldw	r4,108(sp)
 800eeac:	d8801c17 	ldw	r2,112(sp)
 800eeb0:	d811883a 	mov	r8,sp
 800eeb4:	21800044 	addi	r6,r4,1
 800eeb8:	003dbf06 	br	800e5b8 <___vfiprintf_internal_r+0x584>
 800eebc:	1000d81e 	bne	r2,zero,800f220 <___vfiprintf_internal_r+0x11ec>
 800eec0:	d9001d87 	ldb	r4,118(sp)
 800eec4:	20000a26 	beq	r4,zero,800eef0 <___vfiprintf_internal_r+0xebc>
 800eec8:	00800044 	movi	r2,1
 800eecc:	d9001d84 	addi	r4,sp,118
 800eed0:	100b883a 	mov	r5,r2
 800eed4:	d9000015 	stw	r4,0(sp)
 800eed8:	d8800115 	stw	r2,4(sp)
 800eedc:	d811883a 	mov	r8,sp
 800eee0:	2809883a 	mov	r4,r5
 800eee4:	42000204 	addi	r8,r8,8
 800eee8:	29400044 	addi	r5,r5,1
 800eeec:	003d9506 	br	800e544 <___vfiprintf_internal_r+0x510>
 800eef0:	3800fd26 	beq	r7,zero,800f2e8 <___vfiprintf_internal_r+0x12b4>
 800eef4:	00800084 	movi	r2,2
 800eef8:	d9001d04 	addi	r4,sp,116
 800eefc:	d9000015 	stw	r4,0(sp)
 800ef00:	d8800115 	stw	r2,4(sp)
 800ef04:	01400044 	movi	r5,1
 800ef08:	d811883a 	mov	r8,sp
 800ef0c:	2809883a 	mov	r4,r5
 800ef10:	42000204 	addi	r8,r8,8
 800ef14:	29400044 	addi	r5,r5,1
 800ef18:	003f4606 	br	800ec34 <___vfiprintf_internal_r+0xc00>
 800ef1c:	d8802517 	ldw	r2,148(sp)
 800ef20:	14c0010e 	bge	r2,r19,800ef28 <___vfiprintf_internal_r+0xef4>
 800ef24:	9805883a 	mov	r2,r19
 800ef28:	d9402417 	ldw	r5,144(sp)
 800ef2c:	288b883a 	add	r5,r5,r2
 800ef30:	d9402415 	stw	r5,144(sp)
 800ef34:	003dd006 	br	800e678 <___vfiprintf_internal_r+0x644>
 800ef38:	d8001d85 	stb	zero,118(sp)
 800ef3c:	80005d16 	blt	r16,zero,800f0b4 <___vfiprintf_internal_r+0x1080>
 800ef40:	00ffdfc4 	movi	r3,-129
 800ef44:	9d04b03a 	or	r2,r19,r20
 800ef48:	88e2703a 	and	r17,r17,r3
 800ef4c:	103d3726 	beq	r2,zero,800e42c <___vfiprintf_internal_r+0x3f8>
 800ef50:	002b883a 	mov	r21,zero
 800ef54:	d9002617 	ldw	r4,152(sp)
 800ef58:	ddc01a04 	addi	r23,sp,104
 800ef5c:	988003cc 	andi	r2,r19,15
 800ef60:	a006973a 	slli	r3,r20,28
 800ef64:	2085883a 	add	r2,r4,r2
 800ef68:	9826d13a 	srli	r19,r19,4
 800ef6c:	10800003 	ldbu	r2,0(r2)
 800ef70:	a028d13a 	srli	r20,r20,4
 800ef74:	bdffffc4 	addi	r23,r23,-1
 800ef78:	1ce6b03a 	or	r19,r3,r19
 800ef7c:	b8800005 	stb	r2,0(r23)
 800ef80:	9d04b03a 	or	r2,r19,r20
 800ef84:	103ff51e 	bne	r2,zero,800ef5c <___vfiprintf_internal_r+0xf28>
 800ef88:	d8801e17 	ldw	r2,120(sp)
 800ef8c:	15e9c83a 	sub	r20,r2,r23
 800ef90:	003d2b06 	br	800e440 <___vfiprintf_internal_r+0x40c>
 800ef94:	d9402017 	ldw	r5,128(sp)
 800ef98:	d9002117 	ldw	r4,132(sp)
 800ef9c:	d9801a04 	addi	r6,sp,104
 800efa0:	800df200 	call	800df20 <__sprint_r.part.0>
 800efa4:	103f5b1e 	bne	r2,zero,800ed14 <___vfiprintf_internal_r+0xce0>
 800efa8:	d8801c17 	ldw	r2,112(sp)
 800efac:	d811883a 	mov	r8,sp
 800efb0:	003f6706 	br	800ed50 <___vfiprintf_internal_r+0xd1c>
 800efb4:	d9402017 	ldw	r5,128(sp)
 800efb8:	d9002117 	ldw	r4,132(sp)
 800efbc:	d9801a04 	addi	r6,sp,104
 800efc0:	800df200 	call	800df20 <__sprint_r.part.0>
 800efc4:	103f531e 	bne	r2,zero,800ed14 <___vfiprintf_internal_r+0xce0>
 800efc8:	d811883a 	mov	r8,sp
 800efcc:	003cd906 	br	800e334 <___vfiprintf_internal_r+0x300>
 800efd0:	10803fcc 	andi	r2,r2,255
 800efd4:	1080201c 	xori	r2,r2,128
 800efd8:	10bfe004 	addi	r2,r2,-128
 800efdc:	00c00c04 	movi	r3,48
 800efe0:	10ffe926 	beq	r2,r3,800ef88 <___vfiprintf_internal_r+0xf54>
 800efe4:	b8ffffc5 	stb	r3,-1(r23)
 800efe8:	d8c01e17 	ldw	r3,120(sp)
 800efec:	b8bfffc4 	addi	r2,r23,-1
 800eff0:	102f883a 	mov	r23,r2
 800eff4:	18a9c83a 	sub	r20,r3,r2
 800eff8:	003d1106 	br	800e440 <___vfiprintf_internal_r+0x40c>
 800effc:	d9402017 	ldw	r5,128(sp)
 800f000:	d9002117 	ldw	r4,132(sp)
 800f004:	d9801a04 	addi	r6,sp,104
 800f008:	d8c02a15 	stw	r3,168(sp)
 800f00c:	d9c02b15 	stw	r7,172(sp)
 800f010:	800df200 	call	800df20 <__sprint_r.part.0>
 800f014:	d8c02a17 	ldw	r3,168(sp)
 800f018:	d9c02b17 	ldw	r7,172(sp)
 800f01c:	103f3d1e 	bne	r2,zero,800ed14 <___vfiprintf_internal_r+0xce0>
 800f020:	d9001b17 	ldw	r4,108(sp)
 800f024:	d8801c17 	ldw	r2,112(sp)
 800f028:	d811883a 	mov	r8,sp
 800f02c:	21400044 	addi	r5,r4,1
 800f030:	003d4406 	br	800e544 <___vfiprintf_internal_r+0x510>
 800f034:	d9402017 	ldw	r5,128(sp)
 800f038:	d9002117 	ldw	r4,132(sp)
 800f03c:	d9801a04 	addi	r6,sp,104
 800f040:	d8c02a15 	stw	r3,168(sp)
 800f044:	800df200 	call	800df20 <__sprint_r.part.0>
 800f048:	d8c02a17 	ldw	r3,168(sp)
 800f04c:	103f311e 	bne	r2,zero,800ed14 <___vfiprintf_internal_r+0xce0>
 800f050:	d9001b17 	ldw	r4,108(sp)
 800f054:	d8801c17 	ldw	r2,112(sp)
 800f058:	d811883a 	mov	r8,sp
 800f05c:	21400044 	addi	r5,r4,1
 800f060:	003ef406 	br	800ec34 <___vfiprintf_internal_r+0xc00>
 800f064:	1000bd1e 	bne	r2,zero,800f35c <___vfiprintf_internal_r+0x1328>
 800f068:	01400044 	movi	r5,1
 800f06c:	0009883a 	mov	r4,zero
 800f070:	d811883a 	mov	r8,sp
 800f074:	003ef106 	br	800ec3c <___vfiprintf_internal_r+0xc08>
 800f078:	d9402017 	ldw	r5,128(sp)
 800f07c:	d9002117 	ldw	r4,132(sp)
 800f080:	d9801a04 	addi	r6,sp,104
 800f084:	800df200 	call	800df20 <__sprint_r.part.0>
 800f088:	103f221e 	bne	r2,zero,800ed14 <___vfiprintf_internal_r+0xce0>
 800f08c:	d9401b17 	ldw	r5,108(sp)
 800f090:	d8801c17 	ldw	r2,112(sp)
 800f094:	d811883a 	mov	r8,sp
 800f098:	29400044 	addi	r5,r5,1
 800f09c:	003d6206 	br	800e628 <___vfiprintf_internal_r+0x5f4>
 800f0a0:	01420074 	movhi	r5,2049
 800f0a4:	2956ed04 	addi	r5,r5,23476
 800f0a8:	d9402615 	stw	r5,152(sp)
 800f0ac:	d8c02215 	stw	r3,136(sp)
 800f0b0:	1023883a 	mov	r17,r2
 800f0b4:	9d04b03a 	or	r2,r19,r20
 800f0b8:	103fa51e 	bne	r2,zero,800ef50 <___vfiprintf_internal_r+0xf1c>
 800f0bc:	002b883a 	mov	r21,zero
 800f0c0:	00800084 	movi	r2,2
 800f0c4:	003e4a06 	br	800e9f0 <___vfiprintf_internal_r+0x9bc>
 800f0c8:	01420074 	movhi	r5,2049
 800f0cc:	2956ed04 	addi	r5,r5,23476
 800f0d0:	002b883a 	mov	r21,zero
 800f0d4:	d9402615 	stw	r5,152(sp)
 800f0d8:	003f9e06 	br	800ef54 <___vfiprintf_internal_r+0xf20>
 800f0dc:	d9402217 	ldw	r5,136(sp)
 800f0e0:	d8001d85 	stb	zero,118(sp)
 800f0e4:	0029883a 	mov	r20,zero
 800f0e8:	28800104 	addi	r2,r5,4
 800f0ec:	2cc00017 	ldw	r19,0(r5)
 800f0f0:	803e3a16 	blt	r16,zero,800e9dc <___vfiprintf_internal_r+0x9a8>
 800f0f4:	00ffdfc4 	movi	r3,-129
 800f0f8:	d8802215 	stw	r2,136(sp)
 800f0fc:	88e2703a 	and	r17,r17,r3
 800f100:	002b883a 	mov	r21,zero
 800f104:	983e9b26 	beq	r19,zero,800eb74 <___vfiprintf_internal_r+0xb40>
 800f108:	00800244 	movi	r2,9
 800f10c:	14fdc936 	bltu	r2,r19,800e834 <___vfiprintf_internal_r+0x800>
 800f110:	003e9a06 	br	800eb7c <___vfiprintf_internal_r+0xb48>
 800f114:	00800c04 	movi	r2,48
 800f118:	d8c01d45 	stb	r3,117(sp)
 800f11c:	d8801d05 	stb	r2,116(sp)
 800f120:	d8001d85 	stb	zero,118(sp)
 800f124:	88c00094 	ori	r3,r17,2
 800f128:	80009c16 	blt	r16,zero,800f39c <___vfiprintf_internal_r+0x1368>
 800f12c:	00bfdfc4 	movi	r2,-129
 800f130:	88a2703a 	and	r17,r17,r2
 800f134:	8c400094 	ori	r17,r17,2
 800f138:	002b883a 	mov	r21,zero
 800f13c:	003f8506 	br	800ef54 <___vfiprintf_internal_r+0xf20>
 800f140:	b029883a 	mov	r20,r22
 800f144:	003c0b06 	br	800e174 <___vfiprintf_internal_r+0x140>
 800f148:	04e7c83a 	sub	r19,zero,r19
 800f14c:	05400b44 	movi	r21,45
 800f150:	9804c03a 	cmpne	r2,r19,zero
 800f154:	0529c83a 	sub	r20,zero,r20
 800f158:	dd401d85 	stb	r21,118(sp)
 800f15c:	a0a9c83a 	sub	r20,r20,r2
 800f160:	80009716 	blt	r16,zero,800f3c0 <___vfiprintf_internal_r+0x138c>
 800f164:	00bfdfc4 	movi	r2,-129
 800f168:	88a2703a 	and	r17,r17,r2
 800f16c:	003db006 	br	800e830 <___vfiprintf_internal_r+0x7fc>
 800f170:	b0c00007 	ldb	r3,0(r22)
 800f174:	003c0c06 	br	800e1a8 <___vfiprintf_internal_r+0x174>
 800f178:	8880100c 	andi	r2,r17,64
 800f17c:	d8001d85 	stb	zero,118(sp)
 800f180:	1000461e 	bne	r2,zero,800f29c <___vfiprintf_internal_r+0x1268>
 800f184:	d9002217 	ldw	r4,136(sp)
 800f188:	0029883a 	mov	r20,zero
 800f18c:	20800104 	addi	r2,r4,4
 800f190:	24c00017 	ldw	r19,0(r4)
 800f194:	803df80e 	bge	r16,zero,800e978 <___vfiprintf_internal_r+0x944>
 800f198:	9d06b03a 	or	r3,r19,r20
 800f19c:	d8802215 	stw	r2,136(sp)
 800f1a0:	183d5e1e 	bne	r3,zero,800e71c <___vfiprintf_internal_r+0x6e8>
 800f1a4:	002b883a 	mov	r21,zero
 800f1a8:	0005883a 	mov	r2,zero
 800f1ac:	003e1006 	br	800e9f0 <___vfiprintf_internal_r+0x9bc>
 800f1b0:	8880040c 	andi	r2,r17,16
 800f1b4:	1000321e 	bne	r2,zero,800f280 <___vfiprintf_internal_r+0x124c>
 800f1b8:	8c40100c 	andi	r17,r17,64
 800f1bc:	88008d26 	beq	r17,zero,800f3f4 <___vfiprintf_internal_r+0x13c0>
 800f1c0:	d9402217 	ldw	r5,136(sp)
 800f1c4:	d8c02417 	ldw	r3,144(sp)
 800f1c8:	28800017 	ldw	r2,0(r5)
 800f1cc:	29400104 	addi	r5,r5,4
 800f1d0:	d9402215 	stw	r5,136(sp)
 800f1d4:	10c0000d 	sth	r3,0(r2)
 800f1d8:	003bca06 	br	800e104 <___vfiprintf_internal_r+0xd0>
 800f1dc:	8880100c 	andi	r2,r17,64
 800f1e0:	10003a26 	beq	r2,zero,800f2cc <___vfiprintf_internal_r+0x1298>
 800f1e4:	d8802217 	ldw	r2,136(sp)
 800f1e8:	14c0000f 	ldh	r19,0(r2)
 800f1ec:	10800104 	addi	r2,r2,4
 800f1f0:	d8802215 	stw	r2,136(sp)
 800f1f4:	9829d7fa 	srai	r20,r19,31
 800f1f8:	a005883a 	mov	r2,r20
 800f1fc:	003d8506 	br	800e814 <___vfiprintf_internal_r+0x7e0>
 800f200:	8880100c 	andi	r2,r17,64
 800f204:	10002b26 	beq	r2,zero,800f2b4 <___vfiprintf_internal_r+0x1280>
 800f208:	d8802217 	ldw	r2,136(sp)
 800f20c:	0029883a 	mov	r20,zero
 800f210:	14c0000b 	ldhu	r19,0(r2)
 800f214:	10800104 	addi	r2,r2,4
 800f218:	d8802215 	stw	r2,136(sp)
 800f21c:	003d5d06 	br	800e794 <___vfiprintf_internal_r+0x760>
 800f220:	d9402017 	ldw	r5,128(sp)
 800f224:	d9002117 	ldw	r4,132(sp)
 800f228:	d9801a04 	addi	r6,sp,104
 800f22c:	d8c02a15 	stw	r3,168(sp)
 800f230:	d9c02b15 	stw	r7,172(sp)
 800f234:	800df200 	call	800df20 <__sprint_r.part.0>
 800f238:	d8c02a17 	ldw	r3,168(sp)
 800f23c:	d9c02b17 	ldw	r7,172(sp)
 800f240:	103eb41e 	bne	r2,zero,800ed14 <___vfiprintf_internal_r+0xce0>
 800f244:	d9001b17 	ldw	r4,108(sp)
 800f248:	d8801c17 	ldw	r2,112(sp)
 800f24c:	d811883a 	mov	r8,sp
 800f250:	21400044 	addi	r5,r4,1
 800f254:	003e6706 	br	800ebf4 <___vfiprintf_internal_r+0xbc0>
 800f258:	00bfffc4 	movi	r2,-1
 800f25c:	003c4a06 	br	800e388 <___vfiprintf_internal_r+0x354>
 800f260:	9805883a 	mov	r2,r19
 800f264:	003ee806 	br	800ee08 <___vfiprintf_internal_r+0xdd4>
 800f268:	d8c02217 	ldw	r3,136(sp)
 800f26c:	0029883a 	mov	r20,zero
 800f270:	18800104 	addi	r2,r3,4
 800f274:	1cc0000b 	ldhu	r19,0(r3)
 800f278:	803f9e0e 	bge	r16,zero,800f0f4 <___vfiprintf_internal_r+0x10c0>
 800f27c:	003dd706 	br	800e9dc <___vfiprintf_internal_r+0x9a8>
 800f280:	d8c02217 	ldw	r3,136(sp)
 800f284:	d9002417 	ldw	r4,144(sp)
 800f288:	18800017 	ldw	r2,0(r3)
 800f28c:	18c00104 	addi	r3,r3,4
 800f290:	d8c02215 	stw	r3,136(sp)
 800f294:	11000015 	stw	r4,0(r2)
 800f298:	003b9a06 	br	800e104 <___vfiprintf_internal_r+0xd0>
 800f29c:	d8c02217 	ldw	r3,136(sp)
 800f2a0:	0029883a 	mov	r20,zero
 800f2a4:	18800104 	addi	r2,r3,4
 800f2a8:	1cc0000b 	ldhu	r19,0(r3)
 800f2ac:	803db20e 	bge	r16,zero,800e978 <___vfiprintf_internal_r+0x944>
 800f2b0:	003fb906 	br	800f198 <___vfiprintf_internal_r+0x1164>
 800f2b4:	d9002217 	ldw	r4,136(sp)
 800f2b8:	0029883a 	mov	r20,zero
 800f2bc:	24c00017 	ldw	r19,0(r4)
 800f2c0:	21000104 	addi	r4,r4,4
 800f2c4:	d9002215 	stw	r4,136(sp)
 800f2c8:	003d3206 	br	800e794 <___vfiprintf_internal_r+0x760>
 800f2cc:	d8c02217 	ldw	r3,136(sp)
 800f2d0:	1cc00017 	ldw	r19,0(r3)
 800f2d4:	18c00104 	addi	r3,r3,4
 800f2d8:	d8c02215 	stw	r3,136(sp)
 800f2dc:	9829d7fa 	srai	r20,r19,31
 800f2e0:	a005883a 	mov	r2,r20
 800f2e4:	003d4b06 	br	800e814 <___vfiprintf_internal_r+0x7e0>
 800f2e8:	0009883a 	mov	r4,zero
 800f2ec:	01400044 	movi	r5,1
 800f2f0:	d811883a 	mov	r8,sp
 800f2f4:	003e4f06 	br	800ec34 <___vfiprintf_internal_r+0xc00>
 800f2f8:	d8c02215 	stw	r3,136(sp)
 800f2fc:	002b883a 	mov	r21,zero
 800f300:	003db806 	br	800e9e4 <___vfiprintf_internal_r+0x9b0>
 800f304:	d811883a 	mov	r8,sp
 800f308:	003e9606 	br	800ed64 <___vfiprintf_internal_r+0xd30>
 800f30c:	01020074 	movhi	r4,2049
 800f310:	21174d04 	addi	r4,r4,23860
 800f314:	d9002315 	stw	r4,140(sp)
 800f318:	003e6306 	br	800eca8 <___vfiprintf_internal_r+0xc74>
 800f31c:	b0c00043 	ldbu	r3,1(r22)
 800f320:	8c400814 	ori	r17,r17,32
 800f324:	b5800044 	addi	r22,r22,1
 800f328:	18c03fcc 	andi	r3,r3,255
 800f32c:	18c0201c 	xori	r3,r3,128
 800f330:	18ffe004 	addi	r3,r3,-128
 800f334:	003b9c06 	br	800e1a8 <___vfiprintf_internal_r+0x174>
 800f338:	b809883a 	mov	r4,r23
 800f33c:	da002a15 	stw	r8,168(sp)
 800f340:	800663c0 	call	800663c <strlen>
 800f344:	1029883a 	mov	r20,r2
 800f348:	dd401d83 	ldbu	r21,118(sp)
 800f34c:	df002215 	stw	fp,136(sp)
 800f350:	0021883a 	mov	r16,zero
 800f354:	da002a17 	ldw	r8,168(sp)
 800f358:	003c3906 	br	800e440 <___vfiprintf_internal_r+0x40c>
 800f35c:	d9402017 	ldw	r5,128(sp)
 800f360:	d9002117 	ldw	r4,132(sp)
 800f364:	d9801a04 	addi	r6,sp,104
 800f368:	800df200 	call	800df20 <__sprint_r.part.0>
 800f36c:	103e691e 	bne	r2,zero,800ed14 <___vfiprintf_internal_r+0xce0>
 800f370:	d9001b17 	ldw	r4,108(sp)
 800f374:	d8801c17 	ldw	r2,112(sp)
 800f378:	d811883a 	mov	r8,sp
 800f37c:	21400044 	addi	r5,r4,1
 800f380:	003e2e06 	br	800ec3c <___vfiprintf_internal_r+0xc08>
 800f384:	01020074 	movhi	r4,2049
 800f388:	21175104 	addi	r4,r4,23876
 800f38c:	d9002315 	stw	r4,140(sp)
 800f390:	d9001b17 	ldw	r4,108(sp)
 800f394:	21000044 	addi	r4,r4,1
 800f398:	003c5e06 	br	800e514 <___vfiprintf_internal_r+0x4e0>
 800f39c:	002b883a 	mov	r21,zero
 800f3a0:	00800084 	movi	r2,2
 800f3a4:	10803fcc 	andi	r2,r2,255
 800f3a8:	01000044 	movi	r4,1
 800f3ac:	11002b26 	beq	r2,r4,800f45c <___vfiprintf_internal_r+0x1428>
 800f3b0:	01000084 	movi	r4,2
 800f3b4:	11002b1e 	bne	r2,r4,800f464 <___vfiprintf_internal_r+0x1430>
 800f3b8:	1823883a 	mov	r17,r3
 800f3bc:	003ee506 	br	800ef54 <___vfiprintf_internal_r+0xf20>
 800f3c0:	8807883a 	mov	r3,r17
 800f3c4:	00800044 	movi	r2,1
 800f3c8:	003ff606 	br	800f3a4 <___vfiprintf_internal_r+0x1370>
 800f3cc:	00800184 	movi	r2,6
 800f3d0:	1400012e 	bgeu	r2,r16,800f3d8 <___vfiprintf_internal_r+0x13a4>
 800f3d4:	1021883a 	mov	r16,r2
 800f3d8:	8029883a 	mov	r20,r16
 800f3dc:	8027883a 	mov	r19,r16
 800f3e0:	80002216 	blt	r16,zero,800f46c <___vfiprintf_internal_r+0x1438>
 800f3e4:	05c20074 	movhi	r23,2049
 800f3e8:	df002215 	stw	fp,136(sp)
 800f3ec:	bdd6f204 	addi	r23,r23,23496
 800f3f0:	003cfb06 	br	800e7e0 <___vfiprintf_internal_r+0x7ac>
 800f3f4:	d9002217 	ldw	r4,136(sp)
 800f3f8:	d9402417 	ldw	r5,144(sp)
 800f3fc:	20800017 	ldw	r2,0(r4)
 800f400:	21000104 	addi	r4,r4,4
 800f404:	d9002215 	stw	r4,136(sp)
 800f408:	11400015 	stw	r5,0(r2)
 800f40c:	003b3d06 	br	800e104 <___vfiprintf_internal_r+0xd0>
 800f410:	01420074 	movhi	r5,2049
 800f414:	29575104 	addi	r5,r5,23876
 800f418:	d9402315 	stw	r5,140(sp)
 800f41c:	d9401b17 	ldw	r5,108(sp)
 800f420:	29400044 	addi	r5,r5,1
 800f424:	003e6d06 	br	800eddc <___vfiprintf_internal_r+0xda8>
 800f428:	8029883a 	mov	r20,r16
 800f42c:	dd401d83 	ldbu	r21,118(sp)
 800f430:	df002215 	stw	fp,136(sp)
 800f434:	0021883a 	mov	r16,zero
 800f438:	003c0106 	br	800e440 <___vfiprintf_internal_r+0x40c>
 800f43c:	00c20074 	movhi	r3,2049
 800f440:	18d74d04 	addi	r3,r3,23860
 800f444:	d8c02315 	stw	r3,140(sp)
 800f448:	280d883a 	mov	r6,r5
 800f44c:	003c6906 	br	800e5f4 <___vfiprintf_internal_r+0x5c0>
 800f450:	802d883a 	mov	r22,r16
 800f454:	0021883a 	mov	r16,zero
 800f458:	003b5406 	br	800e1ac <___vfiprintf_internal_r+0x178>
 800f45c:	1823883a 	mov	r17,r3
 800f460:	003cf306 	br	800e830 <___vfiprintf_internal_r+0x7fc>
 800f464:	1823883a 	mov	r17,r3
 800f468:	003cad06 	br	800e720 <___vfiprintf_internal_r+0x6ec>
 800f46c:	0027883a 	mov	r19,zero
 800f470:	003fdc06 	br	800f3e4 <___vfiprintf_internal_r+0x13b0>
 800f474:	d9402217 	ldw	r5,136(sp)
 800f478:	8005883a 	mov	r2,r16
 800f47c:	b0c00043 	ldbu	r3,1(r22)
 800f480:	2c000017 	ldw	r16,0(r5)
 800f484:	29000104 	addi	r4,r5,4
 800f488:	d9002215 	stw	r4,136(sp)
 800f48c:	102d883a 	mov	r22,r2
 800f490:	803fa50e 	bge	r16,zero,800f328 <___vfiprintf_internal_r+0x12f4>
 800f494:	18c03fcc 	andi	r3,r3,255
 800f498:	18c0201c 	xori	r3,r3,128
 800f49c:	043fffc4 	movi	r16,-1
 800f4a0:	18ffe004 	addi	r3,r3,-128
 800f4a4:	003b4006 	br	800e1a8 <___vfiprintf_internal_r+0x174>
 800f4a8:	d9402303 	ldbu	r5,140(sp)
 800f4ac:	d9401d85 	stb	r5,118(sp)
 800f4b0:	003cae06 	br	800e76c <___vfiprintf_internal_r+0x738>
 800f4b4:	d8c02303 	ldbu	r3,140(sp)
 800f4b8:	d8c01d85 	stb	r3,118(sp)
 800f4bc:	003d1406 	br	800e910 <___vfiprintf_internal_r+0x8dc>
 800f4c0:	d8c02303 	ldbu	r3,140(sp)
 800f4c4:	d8c01d85 	stb	r3,118(sp)
 800f4c8:	003cca06 	br	800e7f4 <___vfiprintf_internal_r+0x7c0>
 800f4cc:	8880004c 	andi	r2,r17,1
 800f4d0:	002b883a 	mov	r21,zero
 800f4d4:	10000526 	beq	r2,zero,800f4ec <___vfiprintf_internal_r+0x14b8>
 800f4d8:	00800c04 	movi	r2,48
 800f4dc:	d88019c5 	stb	r2,103(sp)
 800f4e0:	dd002817 	ldw	r20,160(sp)
 800f4e4:	ddc019c4 	addi	r23,sp,103
 800f4e8:	003bd506 	br	800e440 <___vfiprintf_internal_r+0x40c>
 800f4ec:	0029883a 	mov	r20,zero
 800f4f0:	ddc01a04 	addi	r23,sp,104
 800f4f4:	003bd206 	br	800e440 <___vfiprintf_internal_r+0x40c>
 800f4f8:	d9002303 	ldbu	r4,140(sp)
 800f4fc:	d9001d85 	stb	r4,118(sp)
 800f500:	003da606 	br	800eb9c <___vfiprintf_internal_r+0xb68>
 800f504:	d8c02303 	ldbu	r3,140(sp)
 800f508:	d8c01d85 	stb	r3,118(sp)
 800f50c:	003c7606 	br	800e6e8 <___vfiprintf_internal_r+0x6b4>
 800f510:	d8c02303 	ldbu	r3,140(sp)
 800f514:	d8c01d85 	stb	r3,118(sp)
 800f518:	003c6506 	br	800e6b0 <___vfiprintf_internal_r+0x67c>
 800f51c:	d9002303 	ldbu	r4,140(sp)
 800f520:	d9001d85 	stb	r4,118(sp)
 800f524:	003d3d06 	br	800ea1c <___vfiprintf_internal_r+0x9e8>
 800f528:	d8c02303 	ldbu	r3,140(sp)
 800f52c:	d8c01d85 	stb	r3,118(sp)
 800f530:	003d1d06 	br	800e9a8 <___vfiprintf_internal_r+0x974>
 800f534:	d8c02303 	ldbu	r3,140(sp)
 800f538:	d8c01d85 	stb	r3,118(sp)
 800f53c:	003d0306 	br	800e94c <___vfiprintf_internal_r+0x918>

0800f540 <__vfiprintf_internal>:
 800f540:	00820074 	movhi	r2,2049
 800f544:	109e2204 	addi	r2,r2,30856
 800f548:	300f883a 	mov	r7,r6
 800f54c:	280d883a 	mov	r6,r5
 800f550:	200b883a 	mov	r5,r4
 800f554:	11000017 	ldw	r4,0(r2)
 800f558:	800e0341 	jmpi	800e034 <___vfiprintf_internal_r>

0800f55c <__sbprintf>:
 800f55c:	2880030b 	ldhu	r2,12(r5)
 800f560:	2ac01917 	ldw	r11,100(r5)
 800f564:	2a80038b 	ldhu	r10,14(r5)
 800f568:	2a400717 	ldw	r9,28(r5)
 800f56c:	2a000917 	ldw	r8,36(r5)
 800f570:	defee204 	addi	sp,sp,-1144
 800f574:	00c10004 	movi	r3,1024
 800f578:	dc011a15 	stw	r16,1128(sp)
 800f57c:	10bfff4c 	andi	r2,r2,65533
 800f580:	2821883a 	mov	r16,r5
 800f584:	d8cb883a 	add	r5,sp,r3
 800f588:	dc811c15 	stw	r18,1136(sp)
 800f58c:	dc411b15 	stw	r17,1132(sp)
 800f590:	dfc11d15 	stw	ra,1140(sp)
 800f594:	2025883a 	mov	r18,r4
 800f598:	d881030d 	sth	r2,1036(sp)
 800f59c:	dac11915 	stw	r11,1124(sp)
 800f5a0:	da81038d 	sth	r10,1038(sp)
 800f5a4:	da410715 	stw	r9,1052(sp)
 800f5a8:	da010915 	stw	r8,1060(sp)
 800f5ac:	dec10015 	stw	sp,1024(sp)
 800f5b0:	dec10415 	stw	sp,1040(sp)
 800f5b4:	d8c10215 	stw	r3,1032(sp)
 800f5b8:	d8c10515 	stw	r3,1044(sp)
 800f5bc:	d8010615 	stw	zero,1048(sp)
 800f5c0:	800e0340 	call	800e034 <___vfiprintf_internal_r>
 800f5c4:	1023883a 	mov	r17,r2
 800f5c8:	10000416 	blt	r2,zero,800f5dc <__sbprintf+0x80>
 800f5cc:	d9410004 	addi	r5,sp,1024
 800f5d0:	9009883a 	mov	r4,r18
 800f5d4:	800a8bc0 	call	800a8bc <_fflush_r>
 800f5d8:	10000d1e 	bne	r2,zero,800f610 <__sbprintf+0xb4>
 800f5dc:	d881030b 	ldhu	r2,1036(sp)
 800f5e0:	1080100c 	andi	r2,r2,64
 800f5e4:	10000326 	beq	r2,zero,800f5f4 <__sbprintf+0x98>
 800f5e8:	8080030b 	ldhu	r2,12(r16)
 800f5ec:	10801014 	ori	r2,r2,64
 800f5f0:	8080030d 	sth	r2,12(r16)
 800f5f4:	8805883a 	mov	r2,r17
 800f5f8:	dfc11d17 	ldw	ra,1140(sp)
 800f5fc:	dc811c17 	ldw	r18,1136(sp)
 800f600:	dc411b17 	ldw	r17,1132(sp)
 800f604:	dc011a17 	ldw	r16,1128(sp)
 800f608:	dec11e04 	addi	sp,sp,1144
 800f60c:	f800283a 	ret
 800f610:	047fffc4 	movi	r17,-1
 800f614:	003ff106 	br	800f5dc <__sbprintf+0x80>

0800f618 <__swbuf_r>:
 800f618:	defffb04 	addi	sp,sp,-20
 800f61c:	dcc00315 	stw	r19,12(sp)
 800f620:	dc800215 	stw	r18,8(sp)
 800f624:	dc000015 	stw	r16,0(sp)
 800f628:	dfc00415 	stw	ra,16(sp)
 800f62c:	dc400115 	stw	r17,4(sp)
 800f630:	2025883a 	mov	r18,r4
 800f634:	2827883a 	mov	r19,r5
 800f638:	3021883a 	mov	r16,r6
 800f63c:	20000226 	beq	r4,zero,800f648 <__swbuf_r+0x30>
 800f640:	20800e17 	ldw	r2,56(r4)
 800f644:	10004226 	beq	r2,zero,800f750 <__swbuf_r+0x138>
 800f648:	80800617 	ldw	r2,24(r16)
 800f64c:	8100030b 	ldhu	r4,12(r16)
 800f650:	80800215 	stw	r2,8(r16)
 800f654:	2080020c 	andi	r2,r4,8
 800f658:	10003626 	beq	r2,zero,800f734 <__swbuf_r+0x11c>
 800f65c:	80c00417 	ldw	r3,16(r16)
 800f660:	18003426 	beq	r3,zero,800f734 <__swbuf_r+0x11c>
 800f664:	2088000c 	andi	r2,r4,8192
 800f668:	9c403fcc 	andi	r17,r19,255
 800f66c:	10001a26 	beq	r2,zero,800f6d8 <__swbuf_r+0xc0>
 800f670:	80800017 	ldw	r2,0(r16)
 800f674:	81000517 	ldw	r4,20(r16)
 800f678:	10c7c83a 	sub	r3,r2,r3
 800f67c:	1900200e 	bge	r3,r4,800f700 <__swbuf_r+0xe8>
 800f680:	18c00044 	addi	r3,r3,1
 800f684:	81000217 	ldw	r4,8(r16)
 800f688:	11400044 	addi	r5,r2,1
 800f68c:	81400015 	stw	r5,0(r16)
 800f690:	213fffc4 	addi	r4,r4,-1
 800f694:	81000215 	stw	r4,8(r16)
 800f698:	14c00005 	stb	r19,0(r2)
 800f69c:	80800517 	ldw	r2,20(r16)
 800f6a0:	10c01e26 	beq	r2,r3,800f71c <__swbuf_r+0x104>
 800f6a4:	8080030b 	ldhu	r2,12(r16)
 800f6a8:	1080004c 	andi	r2,r2,1
 800f6ac:	10000226 	beq	r2,zero,800f6b8 <__swbuf_r+0xa0>
 800f6b0:	00800284 	movi	r2,10
 800f6b4:	88801926 	beq	r17,r2,800f71c <__swbuf_r+0x104>
 800f6b8:	8805883a 	mov	r2,r17
 800f6bc:	dfc00417 	ldw	ra,16(sp)
 800f6c0:	dcc00317 	ldw	r19,12(sp)
 800f6c4:	dc800217 	ldw	r18,8(sp)
 800f6c8:	dc400117 	ldw	r17,4(sp)
 800f6cc:	dc000017 	ldw	r16,0(sp)
 800f6d0:	dec00504 	addi	sp,sp,20
 800f6d4:	f800283a 	ret
 800f6d8:	81401917 	ldw	r5,100(r16)
 800f6dc:	00b7ffc4 	movi	r2,-8193
 800f6e0:	21080014 	ori	r4,r4,8192
 800f6e4:	2884703a 	and	r2,r5,r2
 800f6e8:	80801915 	stw	r2,100(r16)
 800f6ec:	80800017 	ldw	r2,0(r16)
 800f6f0:	8100030d 	sth	r4,12(r16)
 800f6f4:	81000517 	ldw	r4,20(r16)
 800f6f8:	10c7c83a 	sub	r3,r2,r3
 800f6fc:	193fe016 	blt	r3,r4,800f680 <__swbuf_r+0x68>
 800f700:	800b883a 	mov	r5,r16
 800f704:	9009883a 	mov	r4,r18
 800f708:	800a8bc0 	call	800a8bc <_fflush_r>
 800f70c:	1000071e 	bne	r2,zero,800f72c <__swbuf_r+0x114>
 800f710:	80800017 	ldw	r2,0(r16)
 800f714:	00c00044 	movi	r3,1
 800f718:	003fda06 	br	800f684 <__swbuf_r+0x6c>
 800f71c:	800b883a 	mov	r5,r16
 800f720:	9009883a 	mov	r4,r18
 800f724:	800a8bc0 	call	800a8bc <_fflush_r>
 800f728:	103fe326 	beq	r2,zero,800f6b8 <__swbuf_r+0xa0>
 800f72c:	00bfffc4 	movi	r2,-1
 800f730:	003fe206 	br	800f6bc <__swbuf_r+0xa4>
 800f734:	800b883a 	mov	r5,r16
 800f738:	9009883a 	mov	r4,r18
 800f73c:	8008c9c0 	call	8008c9c <__swsetup_r>
 800f740:	103ffa1e 	bne	r2,zero,800f72c <__swbuf_r+0x114>
 800f744:	8100030b 	ldhu	r4,12(r16)
 800f748:	80c00417 	ldw	r3,16(r16)
 800f74c:	003fc506 	br	800f664 <__swbuf_r+0x4c>
 800f750:	800aca80 	call	800aca8 <__sinit>
 800f754:	003fbc06 	br	800f648 <__swbuf_r+0x30>

0800f758 <__swbuf>:
 800f758:	00820074 	movhi	r2,2049
 800f75c:	109e2204 	addi	r2,r2,30856
 800f760:	280d883a 	mov	r6,r5
 800f764:	200b883a 	mov	r5,r4
 800f768:	11000017 	ldw	r4,0(r2)
 800f76c:	800f6181 	jmpi	800f618 <__swbuf_r>

0800f770 <_write_r>:
 800f770:	defffd04 	addi	sp,sp,-12
 800f774:	2805883a 	mov	r2,r5
 800f778:	dc000015 	stw	r16,0(sp)
 800f77c:	040200b4 	movhi	r16,2050
 800f780:	dc400115 	stw	r17,4(sp)
 800f784:	300b883a 	mov	r5,r6
 800f788:	84252904 	addi	r16,r16,-27484
 800f78c:	2023883a 	mov	r17,r4
 800f790:	380d883a 	mov	r6,r7
 800f794:	1009883a 	mov	r4,r2
 800f798:	dfc00215 	stw	ra,8(sp)
 800f79c:	80000015 	stw	zero,0(r16)
 800f7a0:	80138b00 	call	80138b0 <write>
 800f7a4:	00ffffc4 	movi	r3,-1
 800f7a8:	10c00526 	beq	r2,r3,800f7c0 <_write_r+0x50>
 800f7ac:	dfc00217 	ldw	ra,8(sp)
 800f7b0:	dc400117 	ldw	r17,4(sp)
 800f7b4:	dc000017 	ldw	r16,0(sp)
 800f7b8:	dec00304 	addi	sp,sp,12
 800f7bc:	f800283a 	ret
 800f7c0:	80c00017 	ldw	r3,0(r16)
 800f7c4:	183ff926 	beq	r3,zero,800f7ac <_write_r+0x3c>
 800f7c8:	88c00015 	stw	r3,0(r17)
 800f7cc:	003ff706 	br	800f7ac <_write_r+0x3c>

0800f7d0 <_close_r>:
 800f7d0:	defffd04 	addi	sp,sp,-12
 800f7d4:	dc000015 	stw	r16,0(sp)
 800f7d8:	040200b4 	movhi	r16,2050
 800f7dc:	dc400115 	stw	r17,4(sp)
 800f7e0:	84252904 	addi	r16,r16,-27484
 800f7e4:	2023883a 	mov	r17,r4
 800f7e8:	2809883a 	mov	r4,r5
 800f7ec:	dfc00215 	stw	ra,8(sp)
 800f7f0:	80000015 	stw	zero,0(r16)
 800f7f4:	8012c0c0 	call	8012c0c <close>
 800f7f8:	00ffffc4 	movi	r3,-1
 800f7fc:	10c00526 	beq	r2,r3,800f814 <_close_r+0x44>
 800f800:	dfc00217 	ldw	ra,8(sp)
 800f804:	dc400117 	ldw	r17,4(sp)
 800f808:	dc000017 	ldw	r16,0(sp)
 800f80c:	dec00304 	addi	sp,sp,12
 800f810:	f800283a 	ret
 800f814:	80c00017 	ldw	r3,0(r16)
 800f818:	183ff926 	beq	r3,zero,800f800 <_close_r+0x30>
 800f81c:	88c00015 	stw	r3,0(r17)
 800f820:	003ff706 	br	800f800 <_close_r+0x30>

0800f824 <_calloc_r>:
 800f824:	defffe04 	addi	sp,sp,-8
 800f828:	2805883a 	mov	r2,r5
 800f82c:	dc000015 	stw	r16,0(sp)
 800f830:	300b883a 	mov	r5,r6
 800f834:	2021883a 	mov	r16,r4
 800f838:	1009883a 	mov	r4,r2
 800f83c:	dfc00115 	stw	ra,4(sp)
 800f840:	80057b40 	call	80057b4 <__mulsi3>
 800f844:	100b883a 	mov	r5,r2
 800f848:	8009883a 	mov	r4,r16
 800f84c:	800ba700 	call	800ba70 <_malloc_r>
 800f850:	10002926 	beq	r2,zero,800f8f8 <_calloc_r+0xd4>
 800f854:	11bfff17 	ldw	r6,-4(r2)
 800f858:	1021883a 	mov	r16,r2
 800f85c:	00bfff04 	movi	r2,-4
 800f860:	308c703a 	and	r6,r6,r2
 800f864:	00c00904 	movi	r3,36
 800f868:	308d883a 	add	r6,r6,r2
 800f86c:	19801636 	bltu	r3,r6,800f8c8 <_calloc_r+0xa4>
 800f870:	008004c4 	movi	r2,19
 800f874:	11800b2e 	bgeu	r2,r6,800f8a4 <_calloc_r+0x80>
 800f878:	80000015 	stw	zero,0(r16)
 800f87c:	80000115 	stw	zero,4(r16)
 800f880:	008006c4 	movi	r2,27
 800f884:	11801a2e 	bgeu	r2,r6,800f8f0 <_calloc_r+0xcc>
 800f888:	80000215 	stw	zero,8(r16)
 800f88c:	80000315 	stw	zero,12(r16)
 800f890:	30c0151e 	bne	r6,r3,800f8e8 <_calloc_r+0xc4>
 800f894:	80000415 	stw	zero,16(r16)
 800f898:	80800604 	addi	r2,r16,24
 800f89c:	80000515 	stw	zero,20(r16)
 800f8a0:	00000106 	br	800f8a8 <_calloc_r+0x84>
 800f8a4:	8005883a 	mov	r2,r16
 800f8a8:	10000015 	stw	zero,0(r2)
 800f8ac:	10000115 	stw	zero,4(r2)
 800f8b0:	10000215 	stw	zero,8(r2)
 800f8b4:	8005883a 	mov	r2,r16
 800f8b8:	dfc00117 	ldw	ra,4(sp)
 800f8bc:	dc000017 	ldw	r16,0(sp)
 800f8c0:	dec00204 	addi	sp,sp,8
 800f8c4:	f800283a 	ret
 800f8c8:	000b883a 	mov	r5,zero
 800f8cc:	8009883a 	mov	r4,r16
 800f8d0:	80063b40 	call	80063b4 <memset>
 800f8d4:	8005883a 	mov	r2,r16
 800f8d8:	dfc00117 	ldw	ra,4(sp)
 800f8dc:	dc000017 	ldw	r16,0(sp)
 800f8e0:	dec00204 	addi	sp,sp,8
 800f8e4:	f800283a 	ret
 800f8e8:	80800404 	addi	r2,r16,16
 800f8ec:	003fee06 	br	800f8a8 <_calloc_r+0x84>
 800f8f0:	80800204 	addi	r2,r16,8
 800f8f4:	003fec06 	br	800f8a8 <_calloc_r+0x84>
 800f8f8:	0005883a 	mov	r2,zero
 800f8fc:	003fee06 	br	800f8b8 <_calloc_r+0x94>

0800f900 <_fclose_r>:
 800f900:	28003926 	beq	r5,zero,800f9e8 <_fclose_r+0xe8>
 800f904:	defffc04 	addi	sp,sp,-16
 800f908:	dc400115 	stw	r17,4(sp)
 800f90c:	dc000015 	stw	r16,0(sp)
 800f910:	dfc00315 	stw	ra,12(sp)
 800f914:	dc800215 	stw	r18,8(sp)
 800f918:	2023883a 	mov	r17,r4
 800f91c:	2821883a 	mov	r16,r5
 800f920:	20000226 	beq	r4,zero,800f92c <_fclose_r+0x2c>
 800f924:	20800e17 	ldw	r2,56(r4)
 800f928:	10002726 	beq	r2,zero,800f9c8 <_fclose_r+0xc8>
 800f92c:	8080030f 	ldh	r2,12(r16)
 800f930:	1000071e 	bne	r2,zero,800f950 <_fclose_r+0x50>
 800f934:	0005883a 	mov	r2,zero
 800f938:	dfc00317 	ldw	ra,12(sp)
 800f93c:	dc800217 	ldw	r18,8(sp)
 800f940:	dc400117 	ldw	r17,4(sp)
 800f944:	dc000017 	ldw	r16,0(sp)
 800f948:	dec00404 	addi	sp,sp,16
 800f94c:	f800283a 	ret
 800f950:	800b883a 	mov	r5,r16
 800f954:	8809883a 	mov	r4,r17
 800f958:	800a6a00 	call	800a6a0 <__sflush_r>
 800f95c:	1025883a 	mov	r18,r2
 800f960:	80800b17 	ldw	r2,44(r16)
 800f964:	10000426 	beq	r2,zero,800f978 <_fclose_r+0x78>
 800f968:	81400717 	ldw	r5,28(r16)
 800f96c:	8809883a 	mov	r4,r17
 800f970:	103ee83a 	callr	r2
 800f974:	10001616 	blt	r2,zero,800f9d0 <_fclose_r+0xd0>
 800f978:	8080030b 	ldhu	r2,12(r16)
 800f97c:	1080200c 	andi	r2,r2,128
 800f980:	1000151e 	bne	r2,zero,800f9d8 <_fclose_r+0xd8>
 800f984:	81400c17 	ldw	r5,48(r16)
 800f988:	28000526 	beq	r5,zero,800f9a0 <_fclose_r+0xa0>
 800f98c:	80801004 	addi	r2,r16,64
 800f990:	28800226 	beq	r5,r2,800f99c <_fclose_r+0x9c>
 800f994:	8809883a 	mov	r4,r17
 800f998:	800ae1c0 	call	800ae1c <_free_r>
 800f99c:	80000c15 	stw	zero,48(r16)
 800f9a0:	81401117 	ldw	r5,68(r16)
 800f9a4:	28000326 	beq	r5,zero,800f9b4 <_fclose_r+0xb4>
 800f9a8:	8809883a 	mov	r4,r17
 800f9ac:	800ae1c0 	call	800ae1c <_free_r>
 800f9b0:	80001115 	stw	zero,68(r16)
 800f9b4:	800acb80 	call	800acb8 <__sfp_lock_acquire>
 800f9b8:	8000030d 	sth	zero,12(r16)
 800f9bc:	800acbc0 	call	800acbc <__sfp_lock_release>
 800f9c0:	9005883a 	mov	r2,r18
 800f9c4:	003fdc06 	br	800f938 <_fclose_r+0x38>
 800f9c8:	800aca80 	call	800aca8 <__sinit>
 800f9cc:	003fd706 	br	800f92c <_fclose_r+0x2c>
 800f9d0:	04bfffc4 	movi	r18,-1
 800f9d4:	003fe806 	br	800f978 <_fclose_r+0x78>
 800f9d8:	81400417 	ldw	r5,16(r16)
 800f9dc:	8809883a 	mov	r4,r17
 800f9e0:	800ae1c0 	call	800ae1c <_free_r>
 800f9e4:	003fe706 	br	800f984 <_fclose_r+0x84>
 800f9e8:	0005883a 	mov	r2,zero
 800f9ec:	f800283a 	ret

0800f9f0 <fclose>:
 800f9f0:	00820074 	movhi	r2,2049
 800f9f4:	109e2204 	addi	r2,r2,30856
 800f9f8:	200b883a 	mov	r5,r4
 800f9fc:	11000017 	ldw	r4,0(r2)
 800fa00:	800f9001 	jmpi	800f900 <_fclose_r>

0800fa04 <__fputwc>:
 800fa04:	defff804 	addi	sp,sp,-32
 800fa08:	dcc00415 	stw	r19,16(sp)
 800fa0c:	dc800315 	stw	r18,12(sp)
 800fa10:	dc000115 	stw	r16,4(sp)
 800fa14:	dfc00715 	stw	ra,28(sp)
 800fa18:	dd400615 	stw	r21,24(sp)
 800fa1c:	dd000515 	stw	r20,20(sp)
 800fa20:	dc400215 	stw	r17,8(sp)
 800fa24:	2027883a 	mov	r19,r4
 800fa28:	2825883a 	mov	r18,r5
 800fa2c:	3021883a 	mov	r16,r6
 800fa30:	800b8600 	call	800b860 <__locale_mb_cur_max>
 800fa34:	00c00044 	movi	r3,1
 800fa38:	10c03e26 	beq	r2,r3,800fb34 <__fputwc+0x130>
 800fa3c:	81c01704 	addi	r7,r16,92
 800fa40:	900d883a 	mov	r6,r18
 800fa44:	d80b883a 	mov	r5,sp
 800fa48:	9809883a 	mov	r4,r19
 800fa4c:	800fd7c0 	call	800fd7c <_wcrtomb_r>
 800fa50:	1029883a 	mov	r20,r2
 800fa54:	00bfffc4 	movi	r2,-1
 800fa58:	a0802026 	beq	r20,r2,800fadc <__fputwc+0xd8>
 800fa5c:	d9400003 	ldbu	r5,0(sp)
 800fa60:	a0001c26 	beq	r20,zero,800fad4 <__fputwc+0xd0>
 800fa64:	0023883a 	mov	r17,zero
 800fa68:	05400284 	movi	r21,10
 800fa6c:	00000906 	br	800fa94 <__fputwc+0x90>
 800fa70:	80800017 	ldw	r2,0(r16)
 800fa74:	11400005 	stb	r5,0(r2)
 800fa78:	80c00017 	ldw	r3,0(r16)
 800fa7c:	18c00044 	addi	r3,r3,1
 800fa80:	80c00015 	stw	r3,0(r16)
 800fa84:	8c400044 	addi	r17,r17,1
 800fa88:	dc45883a 	add	r2,sp,r17
 800fa8c:	8d00112e 	bgeu	r17,r20,800fad4 <__fputwc+0xd0>
 800fa90:	11400003 	ldbu	r5,0(r2)
 800fa94:	80c00217 	ldw	r3,8(r16)
 800fa98:	18ffffc4 	addi	r3,r3,-1
 800fa9c:	80c00215 	stw	r3,8(r16)
 800faa0:	183ff30e 	bge	r3,zero,800fa70 <__fputwc+0x6c>
 800faa4:	80800617 	ldw	r2,24(r16)
 800faa8:	18801916 	blt	r3,r2,800fb10 <__fputwc+0x10c>
 800faac:	80800017 	ldw	r2,0(r16)
 800fab0:	11400005 	stb	r5,0(r2)
 800fab4:	80800017 	ldw	r2,0(r16)
 800fab8:	10c00003 	ldbu	r3,0(r2)
 800fabc:	10800044 	addi	r2,r2,1
 800fac0:	1d402326 	beq	r3,r21,800fb50 <__fputwc+0x14c>
 800fac4:	80800015 	stw	r2,0(r16)
 800fac8:	8c400044 	addi	r17,r17,1
 800facc:	dc45883a 	add	r2,sp,r17
 800fad0:	8d3fef36 	bltu	r17,r20,800fa90 <__fputwc+0x8c>
 800fad4:	9005883a 	mov	r2,r18
 800fad8:	00000406 	br	800faec <__fputwc+0xe8>
 800fadc:	80c0030b 	ldhu	r3,12(r16)
 800fae0:	a005883a 	mov	r2,r20
 800fae4:	18c01014 	ori	r3,r3,64
 800fae8:	80c0030d 	sth	r3,12(r16)
 800faec:	dfc00717 	ldw	ra,28(sp)
 800faf0:	dd400617 	ldw	r21,24(sp)
 800faf4:	dd000517 	ldw	r20,20(sp)
 800faf8:	dcc00417 	ldw	r19,16(sp)
 800fafc:	dc800317 	ldw	r18,12(sp)
 800fb00:	dc400217 	ldw	r17,8(sp)
 800fb04:	dc000117 	ldw	r16,4(sp)
 800fb08:	dec00804 	addi	sp,sp,32
 800fb0c:	f800283a 	ret
 800fb10:	800d883a 	mov	r6,r16
 800fb14:	29403fcc 	andi	r5,r5,255
 800fb18:	9809883a 	mov	r4,r19
 800fb1c:	800f6180 	call	800f618 <__swbuf_r>
 800fb20:	10bfffe0 	cmpeqi	r2,r2,-1
 800fb24:	10803fcc 	andi	r2,r2,255
 800fb28:	103fd626 	beq	r2,zero,800fa84 <__fputwc+0x80>
 800fb2c:	00bfffc4 	movi	r2,-1
 800fb30:	003fee06 	br	800faec <__fputwc+0xe8>
 800fb34:	90ffffc4 	addi	r3,r18,-1
 800fb38:	01003f84 	movi	r4,254
 800fb3c:	20ffbf36 	bltu	r4,r3,800fa3c <__fputwc+0x38>
 800fb40:	900b883a 	mov	r5,r18
 800fb44:	dc800005 	stb	r18,0(sp)
 800fb48:	1029883a 	mov	r20,r2
 800fb4c:	003fc506 	br	800fa64 <__fputwc+0x60>
 800fb50:	800d883a 	mov	r6,r16
 800fb54:	a80b883a 	mov	r5,r21
 800fb58:	9809883a 	mov	r4,r19
 800fb5c:	800f6180 	call	800f618 <__swbuf_r>
 800fb60:	10bfffe0 	cmpeqi	r2,r2,-1
 800fb64:	003fef06 	br	800fb24 <__fputwc+0x120>

0800fb68 <_fputwc_r>:
 800fb68:	3080030b 	ldhu	r2,12(r6)
 800fb6c:	10c8000c 	andi	r3,r2,8192
 800fb70:	1800051e 	bne	r3,zero,800fb88 <_fputwc_r+0x20>
 800fb74:	30c01917 	ldw	r3,100(r6)
 800fb78:	10880014 	ori	r2,r2,8192
 800fb7c:	3080030d 	sth	r2,12(r6)
 800fb80:	18880014 	ori	r2,r3,8192
 800fb84:	30801915 	stw	r2,100(r6)
 800fb88:	800fa041 	jmpi	800fa04 <__fputwc>

0800fb8c <fputwc>:
 800fb8c:	00820074 	movhi	r2,2049
 800fb90:	defffc04 	addi	sp,sp,-16
 800fb94:	109e2204 	addi	r2,r2,30856
 800fb98:	dc000115 	stw	r16,4(sp)
 800fb9c:	14000017 	ldw	r16,0(r2)
 800fba0:	dc400215 	stw	r17,8(sp)
 800fba4:	dfc00315 	stw	ra,12(sp)
 800fba8:	2023883a 	mov	r17,r4
 800fbac:	80000226 	beq	r16,zero,800fbb8 <fputwc+0x2c>
 800fbb0:	80800e17 	ldw	r2,56(r16)
 800fbb4:	10001026 	beq	r2,zero,800fbf8 <fputwc+0x6c>
 800fbb8:	2880030b 	ldhu	r2,12(r5)
 800fbbc:	10c8000c 	andi	r3,r2,8192
 800fbc0:	1800051e 	bne	r3,zero,800fbd8 <fputwc+0x4c>
 800fbc4:	28c01917 	ldw	r3,100(r5)
 800fbc8:	10880014 	ori	r2,r2,8192
 800fbcc:	2880030d 	sth	r2,12(r5)
 800fbd0:	18880014 	ori	r2,r3,8192
 800fbd4:	28801915 	stw	r2,100(r5)
 800fbd8:	280d883a 	mov	r6,r5
 800fbdc:	8009883a 	mov	r4,r16
 800fbe0:	880b883a 	mov	r5,r17
 800fbe4:	dfc00317 	ldw	ra,12(sp)
 800fbe8:	dc400217 	ldw	r17,8(sp)
 800fbec:	dc000117 	ldw	r16,4(sp)
 800fbf0:	dec00404 	addi	sp,sp,16
 800fbf4:	800fa041 	jmpi	800fa04 <__fputwc>
 800fbf8:	8009883a 	mov	r4,r16
 800fbfc:	d9400015 	stw	r5,0(sp)
 800fc00:	800aca80 	call	800aca8 <__sinit>
 800fc04:	d9400017 	ldw	r5,0(sp)
 800fc08:	003feb06 	br	800fbb8 <fputwc+0x2c>

0800fc0c <_fstat_r>:
 800fc0c:	defffd04 	addi	sp,sp,-12
 800fc10:	2805883a 	mov	r2,r5
 800fc14:	dc000015 	stw	r16,0(sp)
 800fc18:	040200b4 	movhi	r16,2050
 800fc1c:	dc400115 	stw	r17,4(sp)
 800fc20:	84252904 	addi	r16,r16,-27484
 800fc24:	2023883a 	mov	r17,r4
 800fc28:	300b883a 	mov	r5,r6
 800fc2c:	1009883a 	mov	r4,r2
 800fc30:	dfc00215 	stw	ra,8(sp)
 800fc34:	80000015 	stw	zero,0(r16)
 800fc38:	8012d4c0 	call	8012d4c <fstat>
 800fc3c:	00ffffc4 	movi	r3,-1
 800fc40:	10c00526 	beq	r2,r3,800fc58 <_fstat_r+0x4c>
 800fc44:	dfc00217 	ldw	ra,8(sp)
 800fc48:	dc400117 	ldw	r17,4(sp)
 800fc4c:	dc000017 	ldw	r16,0(sp)
 800fc50:	dec00304 	addi	sp,sp,12
 800fc54:	f800283a 	ret
 800fc58:	80c00017 	ldw	r3,0(r16)
 800fc5c:	183ff926 	beq	r3,zero,800fc44 <_fstat_r+0x38>
 800fc60:	88c00015 	stw	r3,0(r17)
 800fc64:	003ff706 	br	800fc44 <_fstat_r+0x38>

0800fc68 <_isatty_r>:
 800fc68:	defffd04 	addi	sp,sp,-12
 800fc6c:	dc000015 	stw	r16,0(sp)
 800fc70:	040200b4 	movhi	r16,2050
 800fc74:	dc400115 	stw	r17,4(sp)
 800fc78:	84252904 	addi	r16,r16,-27484
 800fc7c:	2023883a 	mov	r17,r4
 800fc80:	2809883a 	mov	r4,r5
 800fc84:	dfc00215 	stw	ra,8(sp)
 800fc88:	80000015 	stw	zero,0(r16)
 800fc8c:	80130340 	call	8013034 <isatty>
 800fc90:	00ffffc4 	movi	r3,-1
 800fc94:	10c00526 	beq	r2,r3,800fcac <_isatty_r+0x44>
 800fc98:	dfc00217 	ldw	ra,8(sp)
 800fc9c:	dc400117 	ldw	r17,4(sp)
 800fca0:	dc000017 	ldw	r16,0(sp)
 800fca4:	dec00304 	addi	sp,sp,12
 800fca8:	f800283a 	ret
 800fcac:	80c00017 	ldw	r3,0(r16)
 800fcb0:	183ff926 	beq	r3,zero,800fc98 <_isatty_r+0x30>
 800fcb4:	88c00015 	stw	r3,0(r17)
 800fcb8:	003ff706 	br	800fc98 <_isatty_r+0x30>

0800fcbc <_lseek_r>:
 800fcbc:	defffd04 	addi	sp,sp,-12
 800fcc0:	2805883a 	mov	r2,r5
 800fcc4:	dc000015 	stw	r16,0(sp)
 800fcc8:	040200b4 	movhi	r16,2050
 800fccc:	dc400115 	stw	r17,4(sp)
 800fcd0:	300b883a 	mov	r5,r6
 800fcd4:	84252904 	addi	r16,r16,-27484
 800fcd8:	2023883a 	mov	r17,r4
 800fcdc:	380d883a 	mov	r6,r7
 800fce0:	1009883a 	mov	r4,r2
 800fce4:	dfc00215 	stw	ra,8(sp)
 800fce8:	80000015 	stw	zero,0(r16)
 800fcec:	80132080 	call	8013208 <lseek>
 800fcf0:	00ffffc4 	movi	r3,-1
 800fcf4:	10c00526 	beq	r2,r3,800fd0c <_lseek_r+0x50>
 800fcf8:	dfc00217 	ldw	ra,8(sp)
 800fcfc:	dc400117 	ldw	r17,4(sp)
 800fd00:	dc000017 	ldw	r16,0(sp)
 800fd04:	dec00304 	addi	sp,sp,12
 800fd08:	f800283a 	ret
 800fd0c:	80c00017 	ldw	r3,0(r16)
 800fd10:	183ff926 	beq	r3,zero,800fcf8 <_lseek_r+0x3c>
 800fd14:	88c00015 	stw	r3,0(r17)
 800fd18:	003ff706 	br	800fcf8 <_lseek_r+0x3c>

0800fd1c <_read_r>:
 800fd1c:	defffd04 	addi	sp,sp,-12
 800fd20:	2805883a 	mov	r2,r5
 800fd24:	dc000015 	stw	r16,0(sp)
 800fd28:	040200b4 	movhi	r16,2050
 800fd2c:	dc400115 	stw	r17,4(sp)
 800fd30:	300b883a 	mov	r5,r6
 800fd34:	84252904 	addi	r16,r16,-27484
 800fd38:	2023883a 	mov	r17,r4
 800fd3c:	380d883a 	mov	r6,r7
 800fd40:	1009883a 	mov	r4,r2
 800fd44:	dfc00215 	stw	ra,8(sp)
 800fd48:	80000015 	stw	zero,0(r16)
 800fd4c:	80133e40 	call	80133e4 <read>
 800fd50:	00ffffc4 	movi	r3,-1
 800fd54:	10c00526 	beq	r2,r3,800fd6c <_read_r+0x50>
 800fd58:	dfc00217 	ldw	ra,8(sp)
 800fd5c:	dc400117 	ldw	r17,4(sp)
 800fd60:	dc000017 	ldw	r16,0(sp)
 800fd64:	dec00304 	addi	sp,sp,12
 800fd68:	f800283a 	ret
 800fd6c:	80c00017 	ldw	r3,0(r16)
 800fd70:	183ff926 	beq	r3,zero,800fd58 <_read_r+0x3c>
 800fd74:	88c00015 	stw	r3,0(r17)
 800fd78:	003ff706 	br	800fd58 <_read_r+0x3c>

0800fd7c <_wcrtomb_r>:
 800fd7c:	defff604 	addi	sp,sp,-40
 800fd80:	00820074 	movhi	r2,2049
 800fd84:	dc800815 	stw	r18,32(sp)
 800fd88:	dc400715 	stw	r17,28(sp)
 800fd8c:	dc000615 	stw	r16,24(sp)
 800fd90:	109e2604 	addi	r2,r2,30872
 800fd94:	dfc00915 	stw	ra,36(sp)
 800fd98:	2021883a 	mov	r16,r4
 800fd9c:	3823883a 	mov	r17,r7
 800fda0:	14800017 	ldw	r18,0(r2)
 800fda4:	28001426 	beq	r5,zero,800fdf8 <_wcrtomb_r+0x7c>
 800fda8:	d9400415 	stw	r5,16(sp)
 800fdac:	d9800515 	stw	r6,20(sp)
 800fdb0:	800b8540 	call	800b854 <__locale_charset>
 800fdb4:	d9800517 	ldw	r6,20(sp)
 800fdb8:	d9400417 	ldw	r5,16(sp)
 800fdbc:	100f883a 	mov	r7,r2
 800fdc0:	dc400015 	stw	r17,0(sp)
 800fdc4:	8009883a 	mov	r4,r16
 800fdc8:	903ee83a 	callr	r18
 800fdcc:	00ffffc4 	movi	r3,-1
 800fdd0:	10c0031e 	bne	r2,r3,800fde0 <_wcrtomb_r+0x64>
 800fdd4:	88000015 	stw	zero,0(r17)
 800fdd8:	00c02284 	movi	r3,138
 800fddc:	80c00015 	stw	r3,0(r16)
 800fde0:	dfc00917 	ldw	ra,36(sp)
 800fde4:	dc800817 	ldw	r18,32(sp)
 800fde8:	dc400717 	ldw	r17,28(sp)
 800fdec:	dc000617 	ldw	r16,24(sp)
 800fdf0:	dec00a04 	addi	sp,sp,40
 800fdf4:	f800283a 	ret
 800fdf8:	800b8540 	call	800b854 <__locale_charset>
 800fdfc:	100f883a 	mov	r7,r2
 800fe00:	dc400015 	stw	r17,0(sp)
 800fe04:	000d883a 	mov	r6,zero
 800fe08:	d9400104 	addi	r5,sp,4
 800fe0c:	8009883a 	mov	r4,r16
 800fe10:	903ee83a 	callr	r18
 800fe14:	003fed06 	br	800fdcc <_wcrtomb_r+0x50>

0800fe18 <wcrtomb>:
 800fe18:	defff604 	addi	sp,sp,-40
 800fe1c:	00820074 	movhi	r2,2049
 800fe20:	dc800615 	stw	r18,24(sp)
 800fe24:	dc400515 	stw	r17,20(sp)
 800fe28:	109e2204 	addi	r2,r2,30856
 800fe2c:	dfc00915 	stw	ra,36(sp)
 800fe30:	dd000815 	stw	r20,32(sp)
 800fe34:	dcc00715 	stw	r19,28(sp)
 800fe38:	dc000415 	stw	r16,16(sp)
 800fe3c:	3025883a 	mov	r18,r6
 800fe40:	14400017 	ldw	r17,0(r2)
 800fe44:	20001926 	beq	r4,zero,800feac <wcrtomb+0x94>
 800fe48:	00820074 	movhi	r2,2049
 800fe4c:	109e2604 	addi	r2,r2,30872
 800fe50:	15000017 	ldw	r20,0(r2)
 800fe54:	2021883a 	mov	r16,r4
 800fe58:	2827883a 	mov	r19,r5
 800fe5c:	800b8540 	call	800b854 <__locale_charset>
 800fe60:	100f883a 	mov	r7,r2
 800fe64:	dc800015 	stw	r18,0(sp)
 800fe68:	980d883a 	mov	r6,r19
 800fe6c:	800b883a 	mov	r5,r16
 800fe70:	8809883a 	mov	r4,r17
 800fe74:	a03ee83a 	callr	r20
 800fe78:	00ffffc4 	movi	r3,-1
 800fe7c:	10c0031e 	bne	r2,r3,800fe8c <wcrtomb+0x74>
 800fe80:	90000015 	stw	zero,0(r18)
 800fe84:	00c02284 	movi	r3,138
 800fe88:	88c00015 	stw	r3,0(r17)
 800fe8c:	dfc00917 	ldw	ra,36(sp)
 800fe90:	dd000817 	ldw	r20,32(sp)
 800fe94:	dcc00717 	ldw	r19,28(sp)
 800fe98:	dc800617 	ldw	r18,24(sp)
 800fe9c:	dc400517 	ldw	r17,20(sp)
 800fea0:	dc000417 	ldw	r16,16(sp)
 800fea4:	dec00a04 	addi	sp,sp,40
 800fea8:	f800283a 	ret
 800feac:	00820074 	movhi	r2,2049
 800feb0:	109e2604 	addi	r2,r2,30872
 800feb4:	14000017 	ldw	r16,0(r2)
 800feb8:	800b8540 	call	800b854 <__locale_charset>
 800febc:	100f883a 	mov	r7,r2
 800fec0:	dc800015 	stw	r18,0(sp)
 800fec4:	000d883a 	mov	r6,zero
 800fec8:	d9400104 	addi	r5,sp,4
 800fecc:	8809883a 	mov	r4,r17
 800fed0:	803ee83a 	callr	r16
 800fed4:	003fe806 	br	800fe78 <wcrtomb+0x60>

0800fed8 <__ascii_wctomb>:
 800fed8:	28000526 	beq	r5,zero,800fef0 <__ascii_wctomb+0x18>
 800fedc:	00803fc4 	movi	r2,255
 800fee0:	11800536 	bltu	r2,r6,800fef8 <__ascii_wctomb+0x20>
 800fee4:	29800005 	stb	r6,0(r5)
 800fee8:	00800044 	movi	r2,1
 800feec:	f800283a 	ret
 800fef0:	0005883a 	mov	r2,zero
 800fef4:	f800283a 	ret
 800fef8:	00802284 	movi	r2,138
 800fefc:	20800015 	stw	r2,0(r4)
 800ff00:	00bfffc4 	movi	r2,-1
 800ff04:	f800283a 	ret

0800ff08 <_wctomb_r>:
 800ff08:	00820074 	movhi	r2,2049
 800ff0c:	defff904 	addi	sp,sp,-28
 800ff10:	109e2604 	addi	r2,r2,30872
 800ff14:	dfc00615 	stw	ra,24(sp)
 800ff18:	dc400515 	stw	r17,20(sp)
 800ff1c:	dc000415 	stw	r16,16(sp)
 800ff20:	3823883a 	mov	r17,r7
 800ff24:	14000017 	ldw	r16,0(r2)
 800ff28:	d9000115 	stw	r4,4(sp)
 800ff2c:	d9400215 	stw	r5,8(sp)
 800ff30:	d9800315 	stw	r6,12(sp)
 800ff34:	800b8540 	call	800b854 <__locale_charset>
 800ff38:	d9800317 	ldw	r6,12(sp)
 800ff3c:	d9400217 	ldw	r5,8(sp)
 800ff40:	d9000117 	ldw	r4,4(sp)
 800ff44:	100f883a 	mov	r7,r2
 800ff48:	dc400015 	stw	r17,0(sp)
 800ff4c:	803ee83a 	callr	r16
 800ff50:	dfc00617 	ldw	ra,24(sp)
 800ff54:	dc400517 	ldw	r17,20(sp)
 800ff58:	dc000417 	ldw	r16,16(sp)
 800ff5c:	dec00704 	addi	sp,sp,28
 800ff60:	f800283a 	ret

0800ff64 <__udivdi3>:
 800ff64:	defff404 	addi	sp,sp,-48
 800ff68:	dcc00515 	stw	r19,20(sp)
 800ff6c:	dc000215 	stw	r16,8(sp)
 800ff70:	dfc00b15 	stw	ra,44(sp)
 800ff74:	df000a15 	stw	fp,40(sp)
 800ff78:	ddc00915 	stw	r23,36(sp)
 800ff7c:	dd800815 	stw	r22,32(sp)
 800ff80:	dd400715 	stw	r21,28(sp)
 800ff84:	dd000615 	stw	r20,24(sp)
 800ff88:	dc800415 	stw	r18,16(sp)
 800ff8c:	dc400315 	stw	r17,12(sp)
 800ff90:	2027883a 	mov	r19,r4
 800ff94:	2821883a 	mov	r16,r5
 800ff98:	3800461e 	bne	r7,zero,80100b4 <__udivdi3+0x150>
 800ff9c:	3023883a 	mov	r17,r6
 800ffa0:	2025883a 	mov	r18,r4
 800ffa4:	2980572e 	bgeu	r5,r6,8010104 <__udivdi3+0x1a0>
 800ffa8:	00bfffd4 	movui	r2,65535
 800ffac:	282d883a 	mov	r22,r5
 800ffb0:	1180b236 	bltu	r2,r6,801027c <__udivdi3+0x318>
 800ffb4:	00803fc4 	movi	r2,255
 800ffb8:	1185803a 	cmpltu	r2,r2,r6
 800ffbc:	100490fa 	slli	r2,r2,3
 800ffc0:	3086d83a 	srl	r3,r6,r2
 800ffc4:	01020074 	movhi	r4,2049
 800ffc8:	2116a184 	addi	r4,r4,23174
 800ffcc:	20c7883a 	add	r3,r4,r3
 800ffd0:	18c00003 	ldbu	r3,0(r3)
 800ffd4:	1885883a 	add	r2,r3,r2
 800ffd8:	00c00804 	movi	r3,32
 800ffdc:	1887c83a 	sub	r3,r3,r2
 800ffe0:	18000526 	beq	r3,zero,800fff8 <__udivdi3+0x94>
 800ffe4:	80e0983a 	sll	r16,r16,r3
 800ffe8:	9884d83a 	srl	r2,r19,r2
 800ffec:	30e2983a 	sll	r17,r6,r3
 800fff0:	98e4983a 	sll	r18,r19,r3
 800fff4:	142cb03a 	or	r22,r2,r16
 800fff8:	882ad43a 	srli	r21,r17,16
 800fffc:	b009883a 	mov	r4,r22
 8010000:	8d3fffcc 	andi	r20,r17,65535
 8010004:	a80b883a 	mov	r5,r21
 8010008:	8010c800 	call	8010c80 <__umodsi3>
 801000c:	b009883a 	mov	r4,r22
 8010010:	a80b883a 	mov	r5,r21
 8010014:	1027883a 	mov	r19,r2
 8010018:	8010c1c0 	call	8010c1c <__udivsi3>
 801001c:	100b883a 	mov	r5,r2
 8010020:	a009883a 	mov	r4,r20
 8010024:	102d883a 	mov	r22,r2
 8010028:	80057b40 	call	80057b4 <__mulsi3>
 801002c:	9826943a 	slli	r19,r19,16
 8010030:	9006d43a 	srli	r3,r18,16
 8010034:	1cc6b03a 	or	r3,r3,r19
 8010038:	1880052e 	bgeu	r3,r2,8010050 <__udivdi3+0xec>
 801003c:	1c47883a 	add	r3,r3,r17
 8010040:	b13fffc4 	addi	r4,r22,-1
 8010044:	1c400136 	bltu	r3,r17,801004c <__udivdi3+0xe8>
 8010048:	18814236 	bltu	r3,r2,8010554 <__udivdi3+0x5f0>
 801004c:	202d883a 	mov	r22,r4
 8010050:	18a1c83a 	sub	r16,r3,r2
 8010054:	8009883a 	mov	r4,r16
 8010058:	a80b883a 	mov	r5,r21
 801005c:	8010c800 	call	8010c80 <__umodsi3>
 8010060:	1027883a 	mov	r19,r2
 8010064:	8009883a 	mov	r4,r16
 8010068:	a80b883a 	mov	r5,r21
 801006c:	9826943a 	slli	r19,r19,16
 8010070:	8010c1c0 	call	8010c1c <__udivsi3>
 8010074:	100b883a 	mov	r5,r2
 8010078:	a009883a 	mov	r4,r20
 801007c:	94bfffcc 	andi	r18,r18,65535
 8010080:	1021883a 	mov	r16,r2
 8010084:	94e4b03a 	or	r18,r18,r19
 8010088:	80057b40 	call	80057b4 <__mulsi3>
 801008c:	9080052e 	bgeu	r18,r2,80100a4 <__udivdi3+0x140>
 8010090:	8ca5883a 	add	r18,r17,r18
 8010094:	80ffffc4 	addi	r3,r16,-1
 8010098:	94410c36 	bltu	r18,r17,80104cc <__udivdi3+0x568>
 801009c:	90810b2e 	bgeu	r18,r2,80104cc <__udivdi3+0x568>
 80100a0:	843fff84 	addi	r16,r16,-2
 80100a4:	b004943a 	slli	r2,r22,16
 80100a8:	0007883a 	mov	r3,zero
 80100ac:	1404b03a 	or	r2,r2,r16
 80100b0:	00005e06 	br	801022c <__udivdi3+0x2c8>
 80100b4:	29c05b36 	bltu	r5,r7,8010224 <__udivdi3+0x2c0>
 80100b8:	00bfffd4 	movui	r2,65535
 80100bc:	11c0672e 	bgeu	r2,r7,801025c <__udivdi3+0x2f8>
 80100c0:	00804034 	movhi	r2,256
 80100c4:	10bfffc4 	addi	r2,r2,-1
 80100c8:	11c10a36 	bltu	r2,r7,80104f4 <__udivdi3+0x590>
 80100cc:	00800404 	movi	r2,16
 80100d0:	3886d83a 	srl	r3,r7,r2
 80100d4:	01020074 	movhi	r4,2049
 80100d8:	2116a184 	addi	r4,r4,23174
 80100dc:	20c7883a 	add	r3,r4,r3
 80100e0:	18c00003 	ldbu	r3,0(r3)
 80100e4:	05c00804 	movi	r23,32
 80100e8:	1885883a 	add	r2,r3,r2
 80100ec:	b8afc83a 	sub	r23,r23,r2
 80100f0:	b800671e 	bne	r23,zero,8010290 <__udivdi3+0x32c>
 80100f4:	3c010536 	bltu	r7,r16,801050c <__udivdi3+0x5a8>
 80100f8:	9985403a 	cmpgeu	r2,r19,r6
 80100fc:	0007883a 	mov	r3,zero
 8010100:	00004a06 	br	801022c <__udivdi3+0x2c8>
 8010104:	3000041e 	bne	r6,zero,8010118 <__udivdi3+0x1b4>
 8010108:	000b883a 	mov	r5,zero
 801010c:	01000044 	movi	r4,1
 8010110:	8010c1c0 	call	8010c1c <__udivsi3>
 8010114:	1023883a 	mov	r17,r2
 8010118:	00bfffd4 	movui	r2,65535
 801011c:	1440532e 	bgeu	r2,r17,801026c <__udivdi3+0x308>
 8010120:	00804034 	movhi	r2,256
 8010124:	10bfffc4 	addi	r2,r2,-1
 8010128:	1440f436 	bltu	r2,r17,80104fc <__udivdi3+0x598>
 801012c:	00800404 	movi	r2,16
 8010130:	8886d83a 	srl	r3,r17,r2
 8010134:	01020074 	movhi	r4,2049
 8010138:	2116a184 	addi	r4,r4,23174
 801013c:	20c7883a 	add	r3,r4,r3
 8010140:	18c00003 	ldbu	r3,0(r3)
 8010144:	1885883a 	add	r2,r3,r2
 8010148:	00c00804 	movi	r3,32
 801014c:	1887c83a 	sub	r3,r3,r2
 8010150:	1800a51e 	bne	r3,zero,80103e8 <__udivdi3+0x484>
 8010154:	882ad43a 	srli	r21,r17,16
 8010158:	8461c83a 	sub	r16,r16,r17
 801015c:	8d3fffcc 	andi	r20,r17,65535
 8010160:	00c00044 	movi	r3,1
 8010164:	a80b883a 	mov	r5,r21
 8010168:	8009883a 	mov	r4,r16
 801016c:	d8c00115 	stw	r3,4(sp)
 8010170:	8010c800 	call	8010c80 <__umodsi3>
 8010174:	a80b883a 	mov	r5,r21
 8010178:	8009883a 	mov	r4,r16
 801017c:	1027883a 	mov	r19,r2
 8010180:	8010c1c0 	call	8010c1c <__udivsi3>
 8010184:	a00b883a 	mov	r5,r20
 8010188:	1009883a 	mov	r4,r2
 801018c:	102d883a 	mov	r22,r2
 8010190:	80057b40 	call	80057b4 <__mulsi3>
 8010194:	9826943a 	slli	r19,r19,16
 8010198:	900ed43a 	srli	r7,r18,16
 801019c:	d8c00117 	ldw	r3,4(sp)
 80101a0:	3cceb03a 	or	r7,r7,r19
 80101a4:	3880052e 	bgeu	r7,r2,80101bc <__udivdi3+0x258>
 80101a8:	3c4f883a 	add	r7,r7,r17
 80101ac:	b13fffc4 	addi	r4,r22,-1
 80101b0:	3c400136 	bltu	r7,r17,80101b8 <__udivdi3+0x254>
 80101b4:	3880e436 	bltu	r7,r2,8010548 <__udivdi3+0x5e4>
 80101b8:	202d883a 	mov	r22,r4
 80101bc:	38a1c83a 	sub	r16,r7,r2
 80101c0:	8009883a 	mov	r4,r16
 80101c4:	a80b883a 	mov	r5,r21
 80101c8:	d8c00115 	stw	r3,4(sp)
 80101cc:	8010c800 	call	8010c80 <__umodsi3>
 80101d0:	1027883a 	mov	r19,r2
 80101d4:	8009883a 	mov	r4,r16
 80101d8:	a80b883a 	mov	r5,r21
 80101dc:	9826943a 	slli	r19,r19,16
 80101e0:	8010c1c0 	call	8010c1c <__udivsi3>
 80101e4:	a00b883a 	mov	r5,r20
 80101e8:	1009883a 	mov	r4,r2
 80101ec:	94bfffcc 	andi	r18,r18,65535
 80101f0:	1021883a 	mov	r16,r2
 80101f4:	94e4b03a 	or	r18,r18,r19
 80101f8:	80057b40 	call	80057b4 <__mulsi3>
 80101fc:	d8c00117 	ldw	r3,4(sp)
 8010200:	9080052e 	bgeu	r18,r2,8010218 <__udivdi3+0x2b4>
 8010204:	8ca5883a 	add	r18,r17,r18
 8010208:	813fffc4 	addi	r4,r16,-1
 801020c:	9440ad36 	bltu	r18,r17,80104c4 <__udivdi3+0x560>
 8010210:	9080ac2e 	bgeu	r18,r2,80104c4 <__udivdi3+0x560>
 8010214:	843fff84 	addi	r16,r16,-2
 8010218:	b004943a 	slli	r2,r22,16
 801021c:	1404b03a 	or	r2,r2,r16
 8010220:	00000206 	br	801022c <__udivdi3+0x2c8>
 8010224:	0007883a 	mov	r3,zero
 8010228:	0005883a 	mov	r2,zero
 801022c:	dfc00b17 	ldw	ra,44(sp)
 8010230:	df000a17 	ldw	fp,40(sp)
 8010234:	ddc00917 	ldw	r23,36(sp)
 8010238:	dd800817 	ldw	r22,32(sp)
 801023c:	dd400717 	ldw	r21,28(sp)
 8010240:	dd000617 	ldw	r20,24(sp)
 8010244:	dcc00517 	ldw	r19,20(sp)
 8010248:	dc800417 	ldw	r18,16(sp)
 801024c:	dc400317 	ldw	r17,12(sp)
 8010250:	dc000217 	ldw	r16,8(sp)
 8010254:	dec00c04 	addi	sp,sp,48
 8010258:	f800283a 	ret
 801025c:	00803fc4 	movi	r2,255
 8010260:	11c5803a 	cmpltu	r2,r2,r7
 8010264:	100490fa 	slli	r2,r2,3
 8010268:	003f9906 	br	80100d0 <__udivdi3+0x16c>
 801026c:	00803fc4 	movi	r2,255
 8010270:	1445803a 	cmpltu	r2,r2,r17
 8010274:	100490fa 	slli	r2,r2,3
 8010278:	003fad06 	br	8010130 <__udivdi3+0x1cc>
 801027c:	00804034 	movhi	r2,256
 8010280:	10bfffc4 	addi	r2,r2,-1
 8010284:	11809f36 	bltu	r2,r6,8010504 <__udivdi3+0x5a0>
 8010288:	00800404 	movi	r2,16
 801028c:	003f4c06 	br	800ffc0 <__udivdi3+0x5c>
 8010290:	3dce983a 	sll	r7,r7,r23
 8010294:	30b8d83a 	srl	fp,r6,r2
 8010298:	80a2d83a 	srl	r17,r16,r2
 801029c:	35cc983a 	sll	r6,r6,r23
 80102a0:	3f38b03a 	or	fp,r7,fp
 80102a4:	e024d43a 	srli	r18,fp,16
 80102a8:	9884d83a 	srl	r2,r19,r2
 80102ac:	85e0983a 	sll	r16,r16,r23
 80102b0:	8809883a 	mov	r4,r17
 80102b4:	900b883a 	mov	r5,r18
 80102b8:	d9800015 	stw	r6,0(sp)
 80102bc:	1420b03a 	or	r16,r2,r16
 80102c0:	8010c800 	call	8010c80 <__umodsi3>
 80102c4:	900b883a 	mov	r5,r18
 80102c8:	8809883a 	mov	r4,r17
 80102cc:	1029883a 	mov	r20,r2
 80102d0:	e5bfffcc 	andi	r22,fp,65535
 80102d4:	8010c1c0 	call	8010c1c <__udivsi3>
 80102d8:	100b883a 	mov	r5,r2
 80102dc:	b009883a 	mov	r4,r22
 80102e0:	102b883a 	mov	r21,r2
 80102e4:	80057b40 	call	80057b4 <__mulsi3>
 80102e8:	a028943a 	slli	r20,r20,16
 80102ec:	8006d43a 	srli	r3,r16,16
 80102f0:	1d06b03a 	or	r3,r3,r20
 80102f4:	1880042e 	bgeu	r3,r2,8010308 <__udivdi3+0x3a4>
 80102f8:	1f07883a 	add	r3,r3,fp
 80102fc:	a93fffc4 	addi	r4,r21,-1
 8010300:	1f00892e 	bgeu	r3,fp,8010528 <__udivdi3+0x5c4>
 8010304:	202b883a 	mov	r21,r4
 8010308:	18a3c83a 	sub	r17,r3,r2
 801030c:	8809883a 	mov	r4,r17
 8010310:	900b883a 	mov	r5,r18
 8010314:	8010c800 	call	8010c80 <__umodsi3>
 8010318:	1029883a 	mov	r20,r2
 801031c:	8809883a 	mov	r4,r17
 8010320:	900b883a 	mov	r5,r18
 8010324:	a028943a 	slli	r20,r20,16
 8010328:	8010c1c0 	call	8010c1c <__udivsi3>
 801032c:	100b883a 	mov	r5,r2
 8010330:	b009883a 	mov	r4,r22
 8010334:	843fffcc 	andi	r16,r16,65535
 8010338:	1023883a 	mov	r17,r2
 801033c:	8520b03a 	or	r16,r16,r20
 8010340:	80057b40 	call	80057b4 <__mulsi3>
 8010344:	8080042e 	bgeu	r16,r2,8010358 <__udivdi3+0x3f4>
 8010348:	8721883a 	add	r16,r16,fp
 801034c:	88ffffc4 	addi	r3,r17,-1
 8010350:	8700712e 	bgeu	r16,fp,8010518 <__udivdi3+0x5b4>
 8010354:	1823883a 	mov	r17,r3
 8010358:	a80e943a 	slli	r7,r21,16
 801035c:	d8c00017 	ldw	r3,0(sp)
 8010360:	80a1c83a 	sub	r16,r16,r2
 8010364:	3c64b03a 	or	r18,r7,r17
 8010368:	1d3fffcc 	andi	r20,r3,65535
 801036c:	9022d43a 	srli	r17,r18,16
 8010370:	95bfffcc 	andi	r22,r18,65535
 8010374:	a00b883a 	mov	r5,r20
 8010378:	b009883a 	mov	r4,r22
 801037c:	182ad43a 	srli	r21,r3,16
 8010380:	80057b40 	call	80057b4 <__mulsi3>
 8010384:	a00b883a 	mov	r5,r20
 8010388:	8809883a 	mov	r4,r17
 801038c:	1039883a 	mov	fp,r2
 8010390:	80057b40 	call	80057b4 <__mulsi3>
 8010394:	8809883a 	mov	r4,r17
 8010398:	a80b883a 	mov	r5,r21
 801039c:	1029883a 	mov	r20,r2
 80103a0:	80057b40 	call	80057b4 <__mulsi3>
 80103a4:	a80b883a 	mov	r5,r21
 80103a8:	b009883a 	mov	r4,r22
 80103ac:	1023883a 	mov	r17,r2
 80103b0:	80057b40 	call	80057b4 <__mulsi3>
 80103b4:	e006d43a 	srli	r3,fp,16
 80103b8:	1505883a 	add	r2,r2,r20
 80103bc:	1887883a 	add	r3,r3,r2
 80103c0:	1d00022e 	bgeu	r3,r20,80103cc <__udivdi3+0x468>
 80103c4:	00800074 	movhi	r2,1
 80103c8:	88a3883a 	add	r17,r17,r2
 80103cc:	1804d43a 	srli	r2,r3,16
 80103d0:	1463883a 	add	r17,r2,r17
 80103d4:	84404436 	bltu	r16,r17,80104e8 <__udivdi3+0x584>
 80103d8:	84403e26 	beq	r16,r17,80104d4 <__udivdi3+0x570>
 80103dc:	9005883a 	mov	r2,r18
 80103e0:	0007883a 	mov	r3,zero
 80103e4:	003f9106 	br	801022c <__udivdi3+0x2c8>
 80103e8:	88e2983a 	sll	r17,r17,r3
 80103ec:	80aed83a 	srl	r23,r16,r2
 80103f0:	80e0983a 	sll	r16,r16,r3
 80103f4:	882ad43a 	srli	r21,r17,16
 80103f8:	9884d83a 	srl	r2,r19,r2
 80103fc:	b809883a 	mov	r4,r23
 8010400:	a80b883a 	mov	r5,r21
 8010404:	98e4983a 	sll	r18,r19,r3
 8010408:	142cb03a 	or	r22,r2,r16
 801040c:	8010c800 	call	8010c80 <__umodsi3>
 8010410:	b809883a 	mov	r4,r23
 8010414:	a80b883a 	mov	r5,r21
 8010418:	1027883a 	mov	r19,r2
 801041c:	8d3fffcc 	andi	r20,r17,65535
 8010420:	8010c1c0 	call	8010c1c <__udivsi3>
 8010424:	a009883a 	mov	r4,r20
 8010428:	100b883a 	mov	r5,r2
 801042c:	102f883a 	mov	r23,r2
 8010430:	80057b40 	call	80057b4 <__mulsi3>
 8010434:	9826943a 	slli	r19,r19,16
 8010438:	b008d43a 	srli	r4,r22,16
 801043c:	24c8b03a 	or	r4,r4,r19
 8010440:	2080062e 	bgeu	r4,r2,801045c <__udivdi3+0x4f8>
 8010444:	2449883a 	add	r4,r4,r17
 8010448:	b8ffffc4 	addi	r3,r23,-1
 801044c:	24403c36 	bltu	r4,r17,8010540 <__udivdi3+0x5dc>
 8010450:	20803b2e 	bgeu	r4,r2,8010540 <__udivdi3+0x5dc>
 8010454:	bdffff84 	addi	r23,r23,-2
 8010458:	2449883a 	add	r4,r4,r17
 801045c:	20a1c83a 	sub	r16,r4,r2
 8010460:	a80b883a 	mov	r5,r21
 8010464:	8009883a 	mov	r4,r16
 8010468:	8010c800 	call	8010c80 <__umodsi3>
 801046c:	a80b883a 	mov	r5,r21
 8010470:	8009883a 	mov	r4,r16
 8010474:	1027883a 	mov	r19,r2
 8010478:	8010c1c0 	call	8010c1c <__udivsi3>
 801047c:	a009883a 	mov	r4,r20
 8010480:	100b883a 	mov	r5,r2
 8010484:	9826943a 	slli	r19,r19,16
 8010488:	1039883a 	mov	fp,r2
 801048c:	80057b40 	call	80057b4 <__mulsi3>
 8010490:	b13fffcc 	andi	r4,r22,65535
 8010494:	24c8b03a 	or	r4,r4,r19
 8010498:	2080062e 	bgeu	r4,r2,80104b4 <__udivdi3+0x550>
 801049c:	2449883a 	add	r4,r4,r17
 80104a0:	e0ffffc4 	addi	r3,fp,-1
 80104a4:	24402436 	bltu	r4,r17,8010538 <__udivdi3+0x5d4>
 80104a8:	2080232e 	bgeu	r4,r2,8010538 <__udivdi3+0x5d4>
 80104ac:	e73fff84 	addi	fp,fp,-2
 80104b0:	2449883a 	add	r4,r4,r17
 80104b4:	b82e943a 	slli	r23,r23,16
 80104b8:	20a1c83a 	sub	r16,r4,r2
 80104bc:	bf06b03a 	or	r3,r23,fp
 80104c0:	003f2806 	br	8010164 <__udivdi3+0x200>
 80104c4:	2021883a 	mov	r16,r4
 80104c8:	003f5306 	br	8010218 <__udivdi3+0x2b4>
 80104cc:	1821883a 	mov	r16,r3
 80104d0:	003ef406 	br	80100a4 <__udivdi3+0x140>
 80104d4:	1806943a 	slli	r3,r3,16
 80104d8:	9de6983a 	sll	r19,r19,r23
 80104dc:	e73fffcc 	andi	fp,fp,65535
 80104e0:	1f07883a 	add	r3,r3,fp
 80104e4:	98ffbd2e 	bgeu	r19,r3,80103dc <__udivdi3+0x478>
 80104e8:	90bfffc4 	addi	r2,r18,-1
 80104ec:	0007883a 	mov	r3,zero
 80104f0:	003f4e06 	br	801022c <__udivdi3+0x2c8>
 80104f4:	00800604 	movi	r2,24
 80104f8:	003ef506 	br	80100d0 <__udivdi3+0x16c>
 80104fc:	00800604 	movi	r2,24
 8010500:	003f0b06 	br	8010130 <__udivdi3+0x1cc>
 8010504:	00800604 	movi	r2,24
 8010508:	003ead06 	br	800ffc0 <__udivdi3+0x5c>
 801050c:	0007883a 	mov	r3,zero
 8010510:	00800044 	movi	r2,1
 8010514:	003f4506 	br	801022c <__udivdi3+0x2c8>
 8010518:	80bf8e2e 	bgeu	r16,r2,8010354 <__udivdi3+0x3f0>
 801051c:	8c7fff84 	addi	r17,r17,-2
 8010520:	8721883a 	add	r16,r16,fp
 8010524:	003f8c06 	br	8010358 <__udivdi3+0x3f4>
 8010528:	18bf762e 	bgeu	r3,r2,8010304 <__udivdi3+0x3a0>
 801052c:	ad7fff84 	addi	r21,r21,-2
 8010530:	1f07883a 	add	r3,r3,fp
 8010534:	003f7406 	br	8010308 <__udivdi3+0x3a4>
 8010538:	1839883a 	mov	fp,r3
 801053c:	003fdd06 	br	80104b4 <__udivdi3+0x550>
 8010540:	182f883a 	mov	r23,r3
 8010544:	003fc506 	br	801045c <__udivdi3+0x4f8>
 8010548:	b5bfff84 	addi	r22,r22,-2
 801054c:	3c4f883a 	add	r7,r7,r17
 8010550:	003f1a06 	br	80101bc <__udivdi3+0x258>
 8010554:	b5bfff84 	addi	r22,r22,-2
 8010558:	1c47883a 	add	r3,r3,r17
 801055c:	003ebc06 	br	8010050 <__udivdi3+0xec>

08010560 <__umoddi3>:
 8010560:	defff304 	addi	sp,sp,-52
 8010564:	df000b15 	stw	fp,44(sp)
 8010568:	dc400415 	stw	r17,16(sp)
 801056c:	dc000315 	stw	r16,12(sp)
 8010570:	dfc00c15 	stw	ra,48(sp)
 8010574:	ddc00a15 	stw	r23,40(sp)
 8010578:	dd800915 	stw	r22,36(sp)
 801057c:	dd400815 	stw	r21,32(sp)
 8010580:	dd000715 	stw	r20,28(sp)
 8010584:	dcc00615 	stw	r19,24(sp)
 8010588:	dc800515 	stw	r18,20(sp)
 801058c:	2021883a 	mov	r16,r4
 8010590:	2823883a 	mov	r17,r5
 8010594:	2839883a 	mov	fp,r5
 8010598:	3800401e 	bne	r7,zero,801069c <__umoddi3+0x13c>
 801059c:	3027883a 	mov	r19,r6
 80105a0:	2029883a 	mov	r20,r4
 80105a4:	2980552e 	bgeu	r5,r6,80106fc <__umoddi3+0x19c>
 80105a8:	00bfffd4 	movui	r2,65535
 80105ac:	1180a236 	bltu	r2,r6,8010838 <__umoddi3+0x2d8>
 80105b0:	01003fc4 	movi	r4,255
 80105b4:	2189803a 	cmpltu	r4,r4,r6
 80105b8:	200890fa 	slli	r4,r4,3
 80105bc:	3104d83a 	srl	r2,r6,r4
 80105c0:	00c20074 	movhi	r3,2049
 80105c4:	18d6a184 	addi	r3,r3,23174
 80105c8:	1885883a 	add	r2,r3,r2
 80105cc:	10c00003 	ldbu	r3,0(r2)
 80105d0:	00800804 	movi	r2,32
 80105d4:	1909883a 	add	r4,r3,r4
 80105d8:	1125c83a 	sub	r18,r2,r4
 80105dc:	90000526 	beq	r18,zero,80105f4 <__umoddi3+0x94>
 80105e0:	8ca2983a 	sll	r17,r17,r18
 80105e4:	8108d83a 	srl	r4,r16,r4
 80105e8:	34a6983a 	sll	r19,r6,r18
 80105ec:	84a8983a 	sll	r20,r16,r18
 80105f0:	2478b03a 	or	fp,r4,r17
 80105f4:	982cd43a 	srli	r22,r19,16
 80105f8:	e009883a 	mov	r4,fp
 80105fc:	9dffffcc 	andi	r23,r19,65535
 8010600:	b00b883a 	mov	r5,r22
 8010604:	8010c800 	call	8010c80 <__umodsi3>
 8010608:	b00b883a 	mov	r5,r22
 801060c:	e009883a 	mov	r4,fp
 8010610:	102b883a 	mov	r21,r2
 8010614:	8010c1c0 	call	8010c1c <__udivsi3>
 8010618:	100b883a 	mov	r5,r2
 801061c:	b809883a 	mov	r4,r23
 8010620:	80057b40 	call	80057b4 <__mulsi3>
 8010624:	a82a943a 	slli	r21,r21,16
 8010628:	a006d43a 	srli	r3,r20,16
 801062c:	1d46b03a 	or	r3,r3,r21
 8010630:	1880032e 	bgeu	r3,r2,8010640 <__umoddi3+0xe0>
 8010634:	1cc7883a 	add	r3,r3,r19
 8010638:	1cc00136 	bltu	r3,r19,8010640 <__umoddi3+0xe0>
 801063c:	18813136 	bltu	r3,r2,8010b04 <__umoddi3+0x5a4>
 8010640:	18a1c83a 	sub	r16,r3,r2
 8010644:	b00b883a 	mov	r5,r22
 8010648:	8009883a 	mov	r4,r16
 801064c:	8010c800 	call	8010c80 <__umodsi3>
 8010650:	b00b883a 	mov	r5,r22
 8010654:	8009883a 	mov	r4,r16
 8010658:	1023883a 	mov	r17,r2
 801065c:	8010c1c0 	call	8010c1c <__udivsi3>
 8010660:	100b883a 	mov	r5,r2
 8010664:	b809883a 	mov	r4,r23
 8010668:	8822943a 	slli	r17,r17,16
 801066c:	80057b40 	call	80057b4 <__mulsi3>
 8010670:	a0ffffcc 	andi	r3,r20,65535
 8010674:	1c46b03a 	or	r3,r3,r17
 8010678:	1880042e 	bgeu	r3,r2,801068c <__umoddi3+0x12c>
 801067c:	1cc7883a 	add	r3,r3,r19
 8010680:	1cc00236 	bltu	r3,r19,801068c <__umoddi3+0x12c>
 8010684:	1880012e 	bgeu	r3,r2,801068c <__umoddi3+0x12c>
 8010688:	1cc7883a 	add	r3,r3,r19
 801068c:	1885c83a 	sub	r2,r3,r2
 8010690:	1484d83a 	srl	r2,r2,r18
 8010694:	0007883a 	mov	r3,zero
 8010698:	00005306 	br	80107e8 <__umoddi3+0x288>
 801069c:	29c05036 	bltu	r5,r7,80107e0 <__umoddi3+0x280>
 80106a0:	00bfffd4 	movui	r2,65535
 80106a4:	11c05c2e 	bgeu	r2,r7,8010818 <__umoddi3+0x2b8>
 80106a8:	00804034 	movhi	r2,256
 80106ac:	10bfffc4 	addi	r2,r2,-1
 80106b0:	11c10636 	bltu	r2,r7,8010acc <__umoddi3+0x56c>
 80106b4:	01000404 	movi	r4,16
 80106b8:	3904d83a 	srl	r2,r7,r4
 80106bc:	00c20074 	movhi	r3,2049
 80106c0:	18d6a184 	addi	r3,r3,23174
 80106c4:	1885883a 	add	r2,r3,r2
 80106c8:	14c00003 	ldbu	r19,0(r2)
 80106cc:	00c00804 	movi	r3,32
 80106d0:	9927883a 	add	r19,r19,r4
 80106d4:	1ce9c83a 	sub	r20,r3,r19
 80106d8:	a0005c1e 	bne	r20,zero,801084c <__umoddi3+0x2ec>
 80106dc:	3c400136 	bltu	r7,r17,80106e4 <__umoddi3+0x184>
 80106e0:	81810a36 	bltu	r16,r6,8010b0c <__umoddi3+0x5ac>
 80106e4:	8185c83a 	sub	r2,r16,r6
 80106e8:	89e3c83a 	sub	r17,r17,r7
 80106ec:	8089803a 	cmpltu	r4,r16,r2
 80106f0:	8939c83a 	sub	fp,r17,r4
 80106f4:	e007883a 	mov	r3,fp
 80106f8:	00003b06 	br	80107e8 <__umoddi3+0x288>
 80106fc:	3000041e 	bne	r6,zero,8010710 <__umoddi3+0x1b0>
 8010700:	000b883a 	mov	r5,zero
 8010704:	01000044 	movi	r4,1
 8010708:	8010c1c0 	call	8010c1c <__udivsi3>
 801070c:	1027883a 	mov	r19,r2
 8010710:	00bfffd4 	movui	r2,65535
 8010714:	14c0442e 	bgeu	r2,r19,8010828 <__umoddi3+0x2c8>
 8010718:	00804034 	movhi	r2,256
 801071c:	10bfffc4 	addi	r2,r2,-1
 8010720:	14c0ec36 	bltu	r2,r19,8010ad4 <__umoddi3+0x574>
 8010724:	00800404 	movi	r2,16
 8010728:	9886d83a 	srl	r3,r19,r2
 801072c:	01020074 	movhi	r4,2049
 8010730:	2116a184 	addi	r4,r4,23174
 8010734:	20c7883a 	add	r3,r4,r3
 8010738:	18c00003 	ldbu	r3,0(r3)
 801073c:	1887883a 	add	r3,r3,r2
 8010740:	00800804 	movi	r2,32
 8010744:	10e5c83a 	sub	r18,r2,r3
 8010748:	9000ab1e 	bne	r18,zero,80109f8 <__umoddi3+0x498>
 801074c:	982cd43a 	srli	r22,r19,16
 8010750:	8ce3c83a 	sub	r17,r17,r19
 8010754:	9dffffcc 	andi	r23,r19,65535
 8010758:	b00b883a 	mov	r5,r22
 801075c:	8809883a 	mov	r4,r17
 8010760:	8010c800 	call	8010c80 <__umodsi3>
 8010764:	b00b883a 	mov	r5,r22
 8010768:	8809883a 	mov	r4,r17
 801076c:	102b883a 	mov	r21,r2
 8010770:	8010c1c0 	call	8010c1c <__udivsi3>
 8010774:	b80b883a 	mov	r5,r23
 8010778:	1009883a 	mov	r4,r2
 801077c:	80057b40 	call	80057b4 <__mulsi3>
 8010780:	a82a943a 	slli	r21,r21,16
 8010784:	a006d43a 	srli	r3,r20,16
 8010788:	1d46b03a 	or	r3,r3,r21
 801078c:	1880042e 	bgeu	r3,r2,80107a0 <__umoddi3+0x240>
 8010790:	1cc7883a 	add	r3,r3,r19
 8010794:	1cc00236 	bltu	r3,r19,80107a0 <__umoddi3+0x240>
 8010798:	1880012e 	bgeu	r3,r2,80107a0 <__umoddi3+0x240>
 801079c:	1cc7883a 	add	r3,r3,r19
 80107a0:	18a1c83a 	sub	r16,r3,r2
 80107a4:	b00b883a 	mov	r5,r22
 80107a8:	8009883a 	mov	r4,r16
 80107ac:	8010c800 	call	8010c80 <__umodsi3>
 80107b0:	1023883a 	mov	r17,r2
 80107b4:	b00b883a 	mov	r5,r22
 80107b8:	8009883a 	mov	r4,r16
 80107bc:	8010c1c0 	call	8010c1c <__udivsi3>
 80107c0:	8822943a 	slli	r17,r17,16
 80107c4:	b80b883a 	mov	r5,r23
 80107c8:	1009883a 	mov	r4,r2
 80107cc:	80057b40 	call	80057b4 <__mulsi3>
 80107d0:	a53fffcc 	andi	r20,r20,65535
 80107d4:	a446b03a 	or	r3,r20,r17
 80107d8:	18bfac2e 	bgeu	r3,r2,801068c <__umoddi3+0x12c>
 80107dc:	003fa706 	br	801067c <__umoddi3+0x11c>
 80107e0:	2005883a 	mov	r2,r4
 80107e4:	2807883a 	mov	r3,r5
 80107e8:	dfc00c17 	ldw	ra,48(sp)
 80107ec:	df000b17 	ldw	fp,44(sp)
 80107f0:	ddc00a17 	ldw	r23,40(sp)
 80107f4:	dd800917 	ldw	r22,36(sp)
 80107f8:	dd400817 	ldw	r21,32(sp)
 80107fc:	dd000717 	ldw	r20,28(sp)
 8010800:	dcc00617 	ldw	r19,24(sp)
 8010804:	dc800517 	ldw	r18,20(sp)
 8010808:	dc400417 	ldw	r17,16(sp)
 801080c:	dc000317 	ldw	r16,12(sp)
 8010810:	dec00d04 	addi	sp,sp,52
 8010814:	f800283a 	ret
 8010818:	04c03fc4 	movi	r19,255
 801081c:	99c9803a 	cmpltu	r4,r19,r7
 8010820:	200890fa 	slli	r4,r4,3
 8010824:	003fa406 	br	80106b8 <__umoddi3+0x158>
 8010828:	00803fc4 	movi	r2,255
 801082c:	14c5803a 	cmpltu	r2,r2,r19
 8010830:	100490fa 	slli	r2,r2,3
 8010834:	003fbc06 	br	8010728 <__umoddi3+0x1c8>
 8010838:	00804034 	movhi	r2,256
 801083c:	10bfffc4 	addi	r2,r2,-1
 8010840:	1180a636 	bltu	r2,r6,8010adc <__umoddi3+0x57c>
 8010844:	01000404 	movi	r4,16
 8010848:	003f5c06 	br	80105bc <__umoddi3+0x5c>
 801084c:	3d0e983a 	sll	r7,r7,r20
 8010850:	34ead83a 	srl	r21,r6,r19
 8010854:	8cc6d83a 	srl	r3,r17,r19
 8010858:	8d10983a 	sll	r8,r17,r20
 801085c:	3d6ab03a 	or	r21,r7,r21
 8010860:	a82cd43a 	srli	r22,r21,16
 8010864:	84e2d83a 	srl	r17,r16,r19
 8010868:	1809883a 	mov	r4,r3
 801086c:	b00b883a 	mov	r5,r22
 8010870:	8a22b03a 	or	r17,r17,r8
 8010874:	3524983a 	sll	r18,r6,r20
 8010878:	dc400015 	stw	r17,0(sp)
 801087c:	d8c00115 	stw	r3,4(sp)
 8010880:	8010c800 	call	8010c80 <__umodsi3>
 8010884:	d8c00117 	ldw	r3,4(sp)
 8010888:	b00b883a 	mov	r5,r22
 801088c:	1039883a 	mov	fp,r2
 8010890:	1809883a 	mov	r4,r3
 8010894:	8010c1c0 	call	8010c1c <__udivsi3>
 8010898:	adffffcc 	andi	r23,r21,65535
 801089c:	100b883a 	mov	r5,r2
 80108a0:	b809883a 	mov	r4,r23
 80108a4:	1023883a 	mov	r17,r2
 80108a8:	80057b40 	call	80057b4 <__mulsi3>
 80108ac:	d9400017 	ldw	r5,0(sp)
 80108b0:	e008943a 	slli	r4,fp,16
 80108b4:	8520983a 	sll	r16,r16,r20
 80108b8:	2806d43a 	srli	r3,r5,16
 80108bc:	1906b03a 	or	r3,r3,r4
 80108c0:	1880042e 	bgeu	r3,r2,80108d4 <__umoddi3+0x374>
 80108c4:	1d47883a 	add	r3,r3,r21
 80108c8:	893fffc4 	addi	r4,r17,-1
 80108cc:	1d40892e 	bgeu	r3,r21,8010af4 <__umoddi3+0x594>
 80108d0:	2023883a 	mov	r17,r4
 80108d4:	18b9c83a 	sub	fp,r3,r2
 80108d8:	b00b883a 	mov	r5,r22
 80108dc:	e009883a 	mov	r4,fp
 80108e0:	8010c800 	call	8010c80 <__umodsi3>
 80108e4:	b00b883a 	mov	r5,r22
 80108e8:	e009883a 	mov	r4,fp
 80108ec:	d8800215 	stw	r2,8(sp)
 80108f0:	8010c1c0 	call	8010c1c <__udivsi3>
 80108f4:	100b883a 	mov	r5,r2
 80108f8:	b809883a 	mov	r4,r23
 80108fc:	102d883a 	mov	r22,r2
 8010900:	80057b40 	call	80057b4 <__mulsi3>
 8010904:	d9800217 	ldw	r6,8(sp)
 8010908:	d8c00017 	ldw	r3,0(sp)
 801090c:	300c943a 	slli	r6,r6,16
 8010910:	1a3fffcc 	andi	r8,r3,65535
 8010914:	4190b03a 	or	r8,r8,r6
 8010918:	4080042e 	bgeu	r8,r2,801092c <__umoddi3+0x3cc>
 801091c:	4551883a 	add	r8,r8,r21
 8010920:	b0ffffc4 	addi	r3,r22,-1
 8010924:	45406f2e 	bgeu	r8,r21,8010ae4 <__umoddi3+0x584>
 8010928:	182d883a 	mov	r22,r3
 801092c:	880e943a 	slli	r7,r17,16
 8010930:	9006d43a 	srli	r3,r18,16
 8010934:	91bfffcc 	andi	r6,r18,65535
 8010938:	3dacb03a 	or	r22,r7,r22
 801093c:	b02ed43a 	srli	r23,r22,16
 8010940:	b5bfffcc 	andi	r22,r22,65535
 8010944:	300b883a 	mov	r5,r6
 8010948:	b009883a 	mov	r4,r22
 801094c:	40a3c83a 	sub	r17,r8,r2
 8010950:	d8c00115 	stw	r3,4(sp)
 8010954:	d9800215 	stw	r6,8(sp)
 8010958:	80057b40 	call	80057b4 <__mulsi3>
 801095c:	d9800217 	ldw	r6,8(sp)
 8010960:	b809883a 	mov	r4,r23
 8010964:	1039883a 	mov	fp,r2
 8010968:	300b883a 	mov	r5,r6
 801096c:	80057b40 	call	80057b4 <__mulsi3>
 8010970:	d8c00117 	ldw	r3,4(sp)
 8010974:	b809883a 	mov	r4,r23
 8010978:	d8800215 	stw	r2,8(sp)
 801097c:	180b883a 	mov	r5,r3
 8010980:	80057b40 	call	80057b4 <__mulsi3>
 8010984:	d8c00117 	ldw	r3,4(sp)
 8010988:	b009883a 	mov	r4,r22
 801098c:	102f883a 	mov	r23,r2
 8010990:	180b883a 	mov	r5,r3
 8010994:	80057b40 	call	80057b4 <__mulsi3>
 8010998:	d9800217 	ldw	r6,8(sp)
 801099c:	e006d43a 	srli	r3,fp,16
 80109a0:	1185883a 	add	r2,r2,r6
 80109a4:	1885883a 	add	r2,r3,r2
 80109a8:	1180022e 	bgeu	r2,r6,80109b4 <__umoddi3+0x454>
 80109ac:	00c00074 	movhi	r3,1
 80109b0:	b8ef883a 	add	r23,r23,r3
 80109b4:	1006d43a 	srli	r3,r2,16
 80109b8:	1004943a 	slli	r2,r2,16
 80109bc:	e73fffcc 	andi	fp,fp,65535
 80109c0:	1dc7883a 	add	r3,r3,r23
 80109c4:	1739883a 	add	fp,r2,fp
 80109c8:	88c03a36 	bltu	r17,r3,8010ab4 <__umoddi3+0x554>
 80109cc:	88c05126 	beq	r17,r3,8010b14 <__umoddi3+0x5b4>
 80109d0:	88c9c83a 	sub	r4,r17,r3
 80109d4:	e00f883a 	mov	r7,fp
 80109d8:	81cfc83a 	sub	r7,r16,r7
 80109dc:	81c7803a 	cmpltu	r3,r16,r7
 80109e0:	20c7c83a 	sub	r3,r4,r3
 80109e4:	1cc4983a 	sll	r2,r3,r19
 80109e8:	3d0ed83a 	srl	r7,r7,r20
 80109ec:	1d06d83a 	srl	r3,r3,r20
 80109f0:	11c4b03a 	or	r2,r2,r7
 80109f4:	003f7c06 	br	80107e8 <__umoddi3+0x288>
 80109f8:	9ca6983a 	sll	r19,r19,r18
 80109fc:	88f8d83a 	srl	fp,r17,r3
 8010a00:	80c4d83a 	srl	r2,r16,r3
 8010a04:	982cd43a 	srli	r22,r19,16
 8010a08:	8ca2983a 	sll	r17,r17,r18
 8010a0c:	e009883a 	mov	r4,fp
 8010a10:	b00b883a 	mov	r5,r22
 8010a14:	146ab03a 	or	r21,r2,r17
 8010a18:	8010c800 	call	8010c80 <__umodsi3>
 8010a1c:	b00b883a 	mov	r5,r22
 8010a20:	e009883a 	mov	r4,fp
 8010a24:	1029883a 	mov	r20,r2
 8010a28:	9dffffcc 	andi	r23,r19,65535
 8010a2c:	8010c1c0 	call	8010c1c <__udivsi3>
 8010a30:	b809883a 	mov	r4,r23
 8010a34:	100b883a 	mov	r5,r2
 8010a38:	80057b40 	call	80057b4 <__mulsi3>
 8010a3c:	a008943a 	slli	r4,r20,16
 8010a40:	a806d43a 	srli	r3,r21,16
 8010a44:	84a8983a 	sll	r20,r16,r18
 8010a48:	1906b03a 	or	r3,r3,r4
 8010a4c:	1880042e 	bgeu	r3,r2,8010a60 <__umoddi3+0x500>
 8010a50:	1cc7883a 	add	r3,r3,r19
 8010a54:	1cc00236 	bltu	r3,r19,8010a60 <__umoddi3+0x500>
 8010a58:	1880012e 	bgeu	r3,r2,8010a60 <__umoddi3+0x500>
 8010a5c:	1cc7883a 	add	r3,r3,r19
 8010a60:	18a3c83a 	sub	r17,r3,r2
 8010a64:	b00b883a 	mov	r5,r22
 8010a68:	8809883a 	mov	r4,r17
 8010a6c:	8010c800 	call	8010c80 <__umodsi3>
 8010a70:	b00b883a 	mov	r5,r22
 8010a74:	8809883a 	mov	r4,r17
 8010a78:	1021883a 	mov	r16,r2
 8010a7c:	8010c1c0 	call	8010c1c <__udivsi3>
 8010a80:	100b883a 	mov	r5,r2
 8010a84:	b809883a 	mov	r4,r23
 8010a88:	8020943a 	slli	r16,r16,16
 8010a8c:	80057b40 	call	80057b4 <__mulsi3>
 8010a90:	a8ffffcc 	andi	r3,r21,65535
 8010a94:	1c06b03a 	or	r3,r3,r16
 8010a98:	1880042e 	bgeu	r3,r2,8010aac <__umoddi3+0x54c>
 8010a9c:	1cc7883a 	add	r3,r3,r19
 8010aa0:	1cc00236 	bltu	r3,r19,8010aac <__umoddi3+0x54c>
 8010aa4:	1880012e 	bgeu	r3,r2,8010aac <__umoddi3+0x54c>
 8010aa8:	1cc7883a 	add	r3,r3,r19
 8010aac:	18a3c83a 	sub	r17,r3,r2
 8010ab0:	003f2906 	br	8010758 <__umoddi3+0x1f8>
 8010ab4:	e48fc83a 	sub	r7,fp,r18
 8010ab8:	1d49c83a 	sub	r4,r3,r21
 8010abc:	e1f9803a 	cmpltu	fp,fp,r7
 8010ac0:	2739c83a 	sub	fp,r4,fp
 8010ac4:	8f09c83a 	sub	r4,r17,fp
 8010ac8:	003fc306 	br	80109d8 <__umoddi3+0x478>
 8010acc:	01000604 	movi	r4,24
 8010ad0:	003ef906 	br	80106b8 <__umoddi3+0x158>
 8010ad4:	00800604 	movi	r2,24
 8010ad8:	003f1306 	br	8010728 <__umoddi3+0x1c8>
 8010adc:	01000604 	movi	r4,24
 8010ae0:	003eb606 	br	80105bc <__umoddi3+0x5c>
 8010ae4:	40bf902e 	bgeu	r8,r2,8010928 <__umoddi3+0x3c8>
 8010ae8:	b5bfff84 	addi	r22,r22,-2
 8010aec:	4551883a 	add	r8,r8,r21
 8010af0:	003f8e06 	br	801092c <__umoddi3+0x3cc>
 8010af4:	18bf762e 	bgeu	r3,r2,80108d0 <__umoddi3+0x370>
 8010af8:	8c7fff84 	addi	r17,r17,-2
 8010afc:	1d47883a 	add	r3,r3,r21
 8010b00:	003f7406 	br	80108d4 <__umoddi3+0x374>
 8010b04:	1cc7883a 	add	r3,r3,r19
 8010b08:	003ecd06 	br	8010640 <__umoddi3+0xe0>
 8010b0c:	8005883a 	mov	r2,r16
 8010b10:	003ef806 	br	80106f4 <__umoddi3+0x194>
 8010b14:	873fe736 	bltu	r16,fp,8010ab4 <__umoddi3+0x554>
 8010b18:	e00f883a 	mov	r7,fp
 8010b1c:	0009883a 	mov	r4,zero
 8010b20:	003fad06 	br	80109d8 <__umoddi3+0x478>

08010b24 <__divsi3>:
 8010b24:	20001b16 	blt	r4,zero,8010b94 <__divsi3+0x70>
 8010b28:	000f883a 	mov	r7,zero
 8010b2c:	28001616 	blt	r5,zero,8010b88 <__divsi3+0x64>
 8010b30:	200d883a 	mov	r6,r4
 8010b34:	29001a2e 	bgeu	r5,r4,8010ba0 <__divsi3+0x7c>
 8010b38:	00800804 	movi	r2,32
 8010b3c:	00c00044 	movi	r3,1
 8010b40:	00000106 	br	8010b48 <__divsi3+0x24>
 8010b44:	10000d26 	beq	r2,zero,8010b7c <__divsi3+0x58>
 8010b48:	294b883a 	add	r5,r5,r5
 8010b4c:	10bfffc4 	addi	r2,r2,-1
 8010b50:	18c7883a 	add	r3,r3,r3
 8010b54:	293ffb36 	bltu	r5,r4,8010b44 <__divsi3+0x20>
 8010b58:	0005883a 	mov	r2,zero
 8010b5c:	18000726 	beq	r3,zero,8010b7c <__divsi3+0x58>
 8010b60:	0005883a 	mov	r2,zero
 8010b64:	31400236 	bltu	r6,r5,8010b70 <__divsi3+0x4c>
 8010b68:	314dc83a 	sub	r6,r6,r5
 8010b6c:	10c4b03a 	or	r2,r2,r3
 8010b70:	1806d07a 	srli	r3,r3,1
 8010b74:	280ad07a 	srli	r5,r5,1
 8010b78:	183ffa1e 	bne	r3,zero,8010b64 <__divsi3+0x40>
 8010b7c:	38000126 	beq	r7,zero,8010b84 <__divsi3+0x60>
 8010b80:	0085c83a 	sub	r2,zero,r2
 8010b84:	f800283a 	ret
 8010b88:	014bc83a 	sub	r5,zero,r5
 8010b8c:	39c0005c 	xori	r7,r7,1
 8010b90:	003fe706 	br	8010b30 <__divsi3+0xc>
 8010b94:	0109c83a 	sub	r4,zero,r4
 8010b98:	01c00044 	movi	r7,1
 8010b9c:	003fe306 	br	8010b2c <__divsi3+0x8>
 8010ba0:	00c00044 	movi	r3,1
 8010ba4:	003fee06 	br	8010b60 <__divsi3+0x3c>

08010ba8 <__modsi3>:
 8010ba8:	20001716 	blt	r4,zero,8010c08 <__modsi3+0x60>
 8010bac:	000f883a 	mov	r7,zero
 8010bb0:	2005883a 	mov	r2,r4
 8010bb4:	28001216 	blt	r5,zero,8010c00 <__modsi3+0x58>
 8010bb8:	2900162e 	bgeu	r5,r4,8010c14 <__modsi3+0x6c>
 8010bbc:	01800804 	movi	r6,32
 8010bc0:	00c00044 	movi	r3,1
 8010bc4:	00000106 	br	8010bcc <__modsi3+0x24>
 8010bc8:	30000a26 	beq	r6,zero,8010bf4 <__modsi3+0x4c>
 8010bcc:	294b883a 	add	r5,r5,r5
 8010bd0:	31bfffc4 	addi	r6,r6,-1
 8010bd4:	18c7883a 	add	r3,r3,r3
 8010bd8:	293ffb36 	bltu	r5,r4,8010bc8 <__modsi3+0x20>
 8010bdc:	18000526 	beq	r3,zero,8010bf4 <__modsi3+0x4c>
 8010be0:	1806d07a 	srli	r3,r3,1
 8010be4:	11400136 	bltu	r2,r5,8010bec <__modsi3+0x44>
 8010be8:	1145c83a 	sub	r2,r2,r5
 8010bec:	280ad07a 	srli	r5,r5,1
 8010bf0:	183ffb1e 	bne	r3,zero,8010be0 <__modsi3+0x38>
 8010bf4:	38000126 	beq	r7,zero,8010bfc <__modsi3+0x54>
 8010bf8:	0085c83a 	sub	r2,zero,r2
 8010bfc:	f800283a 	ret
 8010c00:	014bc83a 	sub	r5,zero,r5
 8010c04:	003fec06 	br	8010bb8 <__modsi3+0x10>
 8010c08:	0109c83a 	sub	r4,zero,r4
 8010c0c:	01c00044 	movi	r7,1
 8010c10:	003fe706 	br	8010bb0 <__modsi3+0x8>
 8010c14:	00c00044 	movi	r3,1
 8010c18:	003ff106 	br	8010be0 <__modsi3+0x38>

08010c1c <__udivsi3>:
 8010c1c:	200d883a 	mov	r6,r4
 8010c20:	2900152e 	bgeu	r5,r4,8010c78 <__udivsi3+0x5c>
 8010c24:	28001416 	blt	r5,zero,8010c78 <__udivsi3+0x5c>
 8010c28:	00800804 	movi	r2,32
 8010c2c:	00c00044 	movi	r3,1
 8010c30:	00000206 	br	8010c3c <__udivsi3+0x20>
 8010c34:	10000e26 	beq	r2,zero,8010c70 <__udivsi3+0x54>
 8010c38:	28000516 	blt	r5,zero,8010c50 <__udivsi3+0x34>
 8010c3c:	294b883a 	add	r5,r5,r5
 8010c40:	10bfffc4 	addi	r2,r2,-1
 8010c44:	18c7883a 	add	r3,r3,r3
 8010c48:	293ffa36 	bltu	r5,r4,8010c34 <__udivsi3+0x18>
 8010c4c:	18000826 	beq	r3,zero,8010c70 <__udivsi3+0x54>
 8010c50:	0005883a 	mov	r2,zero
 8010c54:	31400236 	bltu	r6,r5,8010c60 <__udivsi3+0x44>
 8010c58:	314dc83a 	sub	r6,r6,r5
 8010c5c:	10c4b03a 	or	r2,r2,r3
 8010c60:	1806d07a 	srli	r3,r3,1
 8010c64:	280ad07a 	srli	r5,r5,1
 8010c68:	183ffa1e 	bne	r3,zero,8010c54 <__udivsi3+0x38>
 8010c6c:	f800283a 	ret
 8010c70:	0005883a 	mov	r2,zero
 8010c74:	f800283a 	ret
 8010c78:	00c00044 	movi	r3,1
 8010c7c:	003ff406 	br	8010c50 <__udivsi3+0x34>

08010c80 <__umodsi3>:
 8010c80:	2005883a 	mov	r2,r4
 8010c84:	2900122e 	bgeu	r5,r4,8010cd0 <__umodsi3+0x50>
 8010c88:	28001116 	blt	r5,zero,8010cd0 <__umodsi3+0x50>
 8010c8c:	01800804 	movi	r6,32
 8010c90:	00c00044 	movi	r3,1
 8010c94:	00000206 	br	8010ca0 <__umodsi3+0x20>
 8010c98:	30000c26 	beq	r6,zero,8010ccc <__umodsi3+0x4c>
 8010c9c:	28000516 	blt	r5,zero,8010cb4 <__umodsi3+0x34>
 8010ca0:	294b883a 	add	r5,r5,r5
 8010ca4:	31bfffc4 	addi	r6,r6,-1
 8010ca8:	18c7883a 	add	r3,r3,r3
 8010cac:	293ffa36 	bltu	r5,r4,8010c98 <__umodsi3+0x18>
 8010cb0:	18000626 	beq	r3,zero,8010ccc <__umodsi3+0x4c>
 8010cb4:	1806d07a 	srli	r3,r3,1
 8010cb8:	11400136 	bltu	r2,r5,8010cc0 <__umodsi3+0x40>
 8010cbc:	1145c83a 	sub	r2,r2,r5
 8010cc0:	280ad07a 	srli	r5,r5,1
 8010cc4:	183ffb1e 	bne	r3,zero,8010cb4 <__umodsi3+0x34>
 8010cc8:	f800283a 	ret
 8010ccc:	f800283a 	ret
 8010cd0:	00c00044 	movi	r3,1
 8010cd4:	003ff706 	br	8010cb4 <__umodsi3+0x34>

08010cd8 <__adddf3>:
 8010cd8:	02c00434 	movhi	r11,16
 8010cdc:	5affffc4 	addi	r11,r11,-1
 8010ce0:	2806d7fa 	srli	r3,r5,31
 8010ce4:	2ad4703a 	and	r10,r5,r11
 8010ce8:	3ad2703a 	and	r9,r7,r11
 8010cec:	3804d53a 	srli	r2,r7,20
 8010cf0:	3018d77a 	srli	r12,r6,29
 8010cf4:	280ad53a 	srli	r5,r5,20
 8010cf8:	501490fa 	slli	r10,r10,3
 8010cfc:	2010d77a 	srli	r8,r4,29
 8010d00:	481290fa 	slli	r9,r9,3
 8010d04:	380ed7fa 	srli	r7,r7,31
 8010d08:	defffb04 	addi	sp,sp,-20
 8010d0c:	dc800215 	stw	r18,8(sp)
 8010d10:	dc400115 	stw	r17,4(sp)
 8010d14:	dc000015 	stw	r16,0(sp)
 8010d18:	dfc00415 	stw	ra,16(sp)
 8010d1c:	dcc00315 	stw	r19,12(sp)
 8010d20:	1c803fcc 	andi	r18,r3,255
 8010d24:	2c01ffcc 	andi	r16,r5,2047
 8010d28:	5210b03a 	or	r8,r10,r8
 8010d2c:	202290fa 	slli	r17,r4,3
 8010d30:	1081ffcc 	andi	r2,r2,2047
 8010d34:	4b12b03a 	or	r9,r9,r12
 8010d38:	300c90fa 	slli	r6,r6,3
 8010d3c:	91c07526 	beq	r18,r7,8010f14 <__adddf3+0x23c>
 8010d40:	8087c83a 	sub	r3,r16,r2
 8010d44:	00c0ab0e 	bge	zero,r3,8010ff4 <__adddf3+0x31c>
 8010d48:	10002a1e 	bne	r2,zero,8010df4 <__adddf3+0x11c>
 8010d4c:	4984b03a 	or	r2,r9,r6
 8010d50:	1000961e 	bne	r2,zero,8010fac <__adddf3+0x2d4>
 8010d54:	888001cc 	andi	r2,r17,7
 8010d58:	10000726 	beq	r2,zero,8010d78 <__adddf3+0xa0>
 8010d5c:	888003cc 	andi	r2,r17,15
 8010d60:	00c00104 	movi	r3,4
 8010d64:	10c00426 	beq	r2,r3,8010d78 <__adddf3+0xa0>
 8010d68:	88c7883a 	add	r3,r17,r3
 8010d6c:	1c63803a 	cmpltu	r17,r3,r17
 8010d70:	4451883a 	add	r8,r8,r17
 8010d74:	1823883a 	mov	r17,r3
 8010d78:	4080202c 	andhi	r2,r8,128
 8010d7c:	10005926 	beq	r2,zero,8010ee4 <__adddf3+0x20c>
 8010d80:	84000044 	addi	r16,r16,1
 8010d84:	0081ffc4 	movi	r2,2047
 8010d88:	8080ba26 	beq	r16,r2,8011074 <__adddf3+0x39c>
 8010d8c:	00bfe034 	movhi	r2,65408
 8010d90:	10bfffc4 	addi	r2,r2,-1
 8010d94:	4090703a 	and	r8,r8,r2
 8010d98:	4004977a 	slli	r2,r8,29
 8010d9c:	4010927a 	slli	r8,r8,9
 8010da0:	8822d0fa 	srli	r17,r17,3
 8010da4:	8401ffcc 	andi	r16,r16,2047
 8010da8:	4010d33a 	srli	r8,r8,12
 8010dac:	9007883a 	mov	r3,r18
 8010db0:	1444b03a 	or	r2,r2,r17
 8010db4:	8401ffcc 	andi	r16,r16,2047
 8010db8:	8020953a 	slli	r16,r16,20
 8010dbc:	18c03fcc 	andi	r3,r3,255
 8010dc0:	01000434 	movhi	r4,16
 8010dc4:	213fffc4 	addi	r4,r4,-1
 8010dc8:	180697fa 	slli	r3,r3,31
 8010dcc:	4110703a 	and	r8,r8,r4
 8010dd0:	4410b03a 	or	r8,r8,r16
 8010dd4:	40c6b03a 	or	r3,r8,r3
 8010dd8:	dfc00417 	ldw	ra,16(sp)
 8010ddc:	dcc00317 	ldw	r19,12(sp)
 8010de0:	dc800217 	ldw	r18,8(sp)
 8010de4:	dc400117 	ldw	r17,4(sp)
 8010de8:	dc000017 	ldw	r16,0(sp)
 8010dec:	dec00504 	addi	sp,sp,20
 8010df0:	f800283a 	ret
 8010df4:	0081ffc4 	movi	r2,2047
 8010df8:	80bfd626 	beq	r16,r2,8010d54 <__adddf3+0x7c>
 8010dfc:	4a402034 	orhi	r9,r9,128
 8010e00:	00800e04 	movi	r2,56
 8010e04:	10c09f16 	blt	r2,r3,8011084 <__adddf3+0x3ac>
 8010e08:	008007c4 	movi	r2,31
 8010e0c:	10c0c216 	blt	r2,r3,8011118 <__adddf3+0x440>
 8010e10:	00800804 	movi	r2,32
 8010e14:	10c5c83a 	sub	r2,r2,r3
 8010e18:	488a983a 	sll	r5,r9,r2
 8010e1c:	30c8d83a 	srl	r4,r6,r3
 8010e20:	3084983a 	sll	r2,r6,r2
 8010e24:	48c6d83a 	srl	r3,r9,r3
 8010e28:	290cb03a 	or	r6,r5,r4
 8010e2c:	1004c03a 	cmpne	r2,r2,zero
 8010e30:	308cb03a 	or	r6,r6,r2
 8010e34:	898dc83a 	sub	r6,r17,r6
 8010e38:	89a3803a 	cmpltu	r17,r17,r6
 8010e3c:	40d1c83a 	sub	r8,r8,r3
 8010e40:	4451c83a 	sub	r8,r8,r17
 8010e44:	3023883a 	mov	r17,r6
 8010e48:	4080202c 	andhi	r2,r8,128
 8010e4c:	10002326 	beq	r2,zero,8010edc <__adddf3+0x204>
 8010e50:	04c02034 	movhi	r19,128
 8010e54:	9cffffc4 	addi	r19,r19,-1
 8010e58:	44e6703a 	and	r19,r8,r19
 8010e5c:	98007626 	beq	r19,zero,8011038 <__adddf3+0x360>
 8010e60:	9809883a 	mov	r4,r19
 8010e64:	80061240 	call	8006124 <__clzsi2>
 8010e68:	10fffe04 	addi	r3,r2,-8
 8010e6c:	010007c4 	movi	r4,31
 8010e70:	20c07716 	blt	r4,r3,8011050 <__adddf3+0x378>
 8010e74:	00800804 	movi	r2,32
 8010e78:	10c5c83a 	sub	r2,r2,r3
 8010e7c:	8884d83a 	srl	r2,r17,r2
 8010e80:	98d0983a 	sll	r8,r19,r3
 8010e84:	88e2983a 	sll	r17,r17,r3
 8010e88:	1204b03a 	or	r2,r2,r8
 8010e8c:	1c007416 	blt	r3,r16,8011060 <__adddf3+0x388>
 8010e90:	1c21c83a 	sub	r16,r3,r16
 8010e94:	82000044 	addi	r8,r16,1
 8010e98:	00c007c4 	movi	r3,31
 8010e9c:	1a009116 	blt	r3,r8,80110e4 <__adddf3+0x40c>
 8010ea0:	00c00804 	movi	r3,32
 8010ea4:	1a07c83a 	sub	r3,r3,r8
 8010ea8:	8a08d83a 	srl	r4,r17,r8
 8010eac:	88e2983a 	sll	r17,r17,r3
 8010eb0:	10c6983a 	sll	r3,r2,r3
 8010eb4:	1210d83a 	srl	r8,r2,r8
 8010eb8:	8804c03a 	cmpne	r2,r17,zero
 8010ebc:	1906b03a 	or	r3,r3,r4
 8010ec0:	18a2b03a 	or	r17,r3,r2
 8010ec4:	0021883a 	mov	r16,zero
 8010ec8:	003fa206 	br	8010d54 <__adddf3+0x7c>
 8010ecc:	1890b03a 	or	r8,r3,r2
 8010ed0:	40017d26 	beq	r8,zero,80114c8 <__adddf3+0x7f0>
 8010ed4:	1011883a 	mov	r8,r2
 8010ed8:	1823883a 	mov	r17,r3
 8010edc:	888001cc 	andi	r2,r17,7
 8010ee0:	103f9e1e 	bne	r2,zero,8010d5c <__adddf3+0x84>
 8010ee4:	4004977a 	slli	r2,r8,29
 8010ee8:	8822d0fa 	srli	r17,r17,3
 8010eec:	4010d0fa 	srli	r8,r8,3
 8010ef0:	9007883a 	mov	r3,r18
 8010ef4:	1444b03a 	or	r2,r2,r17
 8010ef8:	0101ffc4 	movi	r4,2047
 8010efc:	81002426 	beq	r16,r4,8010f90 <__adddf3+0x2b8>
 8010f00:	8120703a 	and	r16,r16,r4
 8010f04:	01000434 	movhi	r4,16
 8010f08:	213fffc4 	addi	r4,r4,-1
 8010f0c:	4110703a 	and	r8,r8,r4
 8010f10:	003fa806 	br	8010db4 <__adddf3+0xdc>
 8010f14:	8089c83a 	sub	r4,r16,r2
 8010f18:	01005e0e 	bge	zero,r4,8011094 <__adddf3+0x3bc>
 8010f1c:	10002b26 	beq	r2,zero,8010fcc <__adddf3+0x2f4>
 8010f20:	0081ffc4 	movi	r2,2047
 8010f24:	80bf8b26 	beq	r16,r2,8010d54 <__adddf3+0x7c>
 8010f28:	4a402034 	orhi	r9,r9,128
 8010f2c:	00800e04 	movi	r2,56
 8010f30:	1100a40e 	bge	r2,r4,80111c4 <__adddf3+0x4ec>
 8010f34:	498cb03a 	or	r6,r9,r6
 8010f38:	300ac03a 	cmpne	r5,r6,zero
 8010f3c:	0013883a 	mov	r9,zero
 8010f40:	2c4b883a 	add	r5,r5,r17
 8010f44:	2c63803a 	cmpltu	r17,r5,r17
 8010f48:	4a11883a 	add	r8,r9,r8
 8010f4c:	8a11883a 	add	r8,r17,r8
 8010f50:	2823883a 	mov	r17,r5
 8010f54:	4080202c 	andhi	r2,r8,128
 8010f58:	103fe026 	beq	r2,zero,8010edc <__adddf3+0x204>
 8010f5c:	84000044 	addi	r16,r16,1
 8010f60:	0081ffc4 	movi	r2,2047
 8010f64:	8080d226 	beq	r16,r2,80112b0 <__adddf3+0x5d8>
 8010f68:	00bfe034 	movhi	r2,65408
 8010f6c:	10bfffc4 	addi	r2,r2,-1
 8010f70:	4090703a 	and	r8,r8,r2
 8010f74:	880ad07a 	srli	r5,r17,1
 8010f78:	400897fa 	slli	r4,r8,31
 8010f7c:	88c0004c 	andi	r3,r17,1
 8010f80:	28e2b03a 	or	r17,r5,r3
 8010f84:	4010d07a 	srli	r8,r8,1
 8010f88:	2462b03a 	or	r17,r4,r17
 8010f8c:	003f7106 	br	8010d54 <__adddf3+0x7c>
 8010f90:	4088b03a 	or	r4,r8,r2
 8010f94:	20014526 	beq	r4,zero,80114ac <__adddf3+0x7d4>
 8010f98:	01000434 	movhi	r4,16
 8010f9c:	42000234 	orhi	r8,r8,8
 8010fa0:	213fffc4 	addi	r4,r4,-1
 8010fa4:	4110703a 	and	r8,r8,r4
 8010fa8:	003f8206 	br	8010db4 <__adddf3+0xdc>
 8010fac:	18ffffc4 	addi	r3,r3,-1
 8010fb0:	1800491e 	bne	r3,zero,80110d8 <__adddf3+0x400>
 8010fb4:	898bc83a 	sub	r5,r17,r6
 8010fb8:	8963803a 	cmpltu	r17,r17,r5
 8010fbc:	4251c83a 	sub	r8,r8,r9
 8010fc0:	4451c83a 	sub	r8,r8,r17
 8010fc4:	2823883a 	mov	r17,r5
 8010fc8:	003f9f06 	br	8010e48 <__adddf3+0x170>
 8010fcc:	4984b03a 	or	r2,r9,r6
 8010fd0:	103f6026 	beq	r2,zero,8010d54 <__adddf3+0x7c>
 8010fd4:	213fffc4 	addi	r4,r4,-1
 8010fd8:	2000931e 	bne	r4,zero,8011228 <__adddf3+0x550>
 8010fdc:	898d883a 	add	r6,r17,r6
 8010fe0:	3463803a 	cmpltu	r17,r6,r17
 8010fe4:	4251883a 	add	r8,r8,r9
 8010fe8:	8a11883a 	add	r8,r17,r8
 8010fec:	3023883a 	mov	r17,r6
 8010ff0:	003fd806 	br	8010f54 <__adddf3+0x27c>
 8010ff4:	1800541e 	bne	r3,zero,8011148 <__adddf3+0x470>
 8010ff8:	80800044 	addi	r2,r16,1
 8010ffc:	1081ffcc 	andi	r2,r2,2047
 8011000:	00c00044 	movi	r3,1
 8011004:	1880a00e 	bge	r3,r2,8011288 <__adddf3+0x5b0>
 8011008:	8989c83a 	sub	r4,r17,r6
 801100c:	8905803a 	cmpltu	r2,r17,r4
 8011010:	4267c83a 	sub	r19,r8,r9
 8011014:	98a7c83a 	sub	r19,r19,r2
 8011018:	9880202c 	andhi	r2,r19,128
 801101c:	10006326 	beq	r2,zero,80111ac <__adddf3+0x4d4>
 8011020:	3463c83a 	sub	r17,r6,r17
 8011024:	4a07c83a 	sub	r3,r9,r8
 8011028:	344d803a 	cmpltu	r6,r6,r17
 801102c:	19a7c83a 	sub	r19,r3,r6
 8011030:	3825883a 	mov	r18,r7
 8011034:	983f8a1e 	bne	r19,zero,8010e60 <__adddf3+0x188>
 8011038:	8809883a 	mov	r4,r17
 801103c:	80061240 	call	8006124 <__clzsi2>
 8011040:	10800804 	addi	r2,r2,32
 8011044:	10fffe04 	addi	r3,r2,-8
 8011048:	010007c4 	movi	r4,31
 801104c:	20ff890e 	bge	r4,r3,8010e74 <__adddf3+0x19c>
 8011050:	10bff604 	addi	r2,r2,-40
 8011054:	8884983a 	sll	r2,r17,r2
 8011058:	0023883a 	mov	r17,zero
 801105c:	1c3f8c0e 	bge	r3,r16,8010e90 <__adddf3+0x1b8>
 8011060:	023fe034 	movhi	r8,65408
 8011064:	423fffc4 	addi	r8,r8,-1
 8011068:	80e1c83a 	sub	r16,r16,r3
 801106c:	1210703a 	and	r8,r2,r8
 8011070:	003f3806 	br	8010d54 <__adddf3+0x7c>
 8011074:	9007883a 	mov	r3,r18
 8011078:	0011883a 	mov	r8,zero
 801107c:	0005883a 	mov	r2,zero
 8011080:	003f4c06 	br	8010db4 <__adddf3+0xdc>
 8011084:	498cb03a 	or	r6,r9,r6
 8011088:	300cc03a 	cmpne	r6,r6,zero
 801108c:	0007883a 	mov	r3,zero
 8011090:	003f6806 	br	8010e34 <__adddf3+0x15c>
 8011094:	20009c1e 	bne	r4,zero,8011308 <__adddf3+0x630>
 8011098:	80800044 	addi	r2,r16,1
 801109c:	1141ffcc 	andi	r5,r2,2047
 80110a0:	01000044 	movi	r4,1
 80110a4:	2140670e 	bge	r4,r5,8011244 <__adddf3+0x56c>
 80110a8:	0101ffc4 	movi	r4,2047
 80110ac:	11007f26 	beq	r2,r4,80112ac <__adddf3+0x5d4>
 80110b0:	898d883a 	add	r6,r17,r6
 80110b4:	4247883a 	add	r3,r8,r9
 80110b8:	3451803a 	cmpltu	r8,r6,r17
 80110bc:	40d1883a 	add	r8,r8,r3
 80110c0:	402297fa 	slli	r17,r8,31
 80110c4:	300cd07a 	srli	r6,r6,1
 80110c8:	4010d07a 	srli	r8,r8,1
 80110cc:	1021883a 	mov	r16,r2
 80110d0:	89a2b03a 	or	r17,r17,r6
 80110d4:	003f1f06 	br	8010d54 <__adddf3+0x7c>
 80110d8:	0081ffc4 	movi	r2,2047
 80110dc:	80bf481e 	bne	r16,r2,8010e00 <__adddf3+0x128>
 80110e0:	003f1c06 	br	8010d54 <__adddf3+0x7c>
 80110e4:	843ff844 	addi	r16,r16,-31
 80110e8:	01000804 	movi	r4,32
 80110ec:	1406d83a 	srl	r3,r2,r16
 80110f0:	41005026 	beq	r8,r4,8011234 <__adddf3+0x55c>
 80110f4:	01001004 	movi	r4,64
 80110f8:	2211c83a 	sub	r8,r4,r8
 80110fc:	1204983a 	sll	r2,r2,r8
 8011100:	88a2b03a 	or	r17,r17,r2
 8011104:	8822c03a 	cmpne	r17,r17,zero
 8011108:	1c62b03a 	or	r17,r3,r17
 801110c:	0011883a 	mov	r8,zero
 8011110:	0021883a 	mov	r16,zero
 8011114:	003f7106 	br	8010edc <__adddf3+0x204>
 8011118:	193ff804 	addi	r4,r3,-32
 801111c:	00800804 	movi	r2,32
 8011120:	4908d83a 	srl	r4,r9,r4
 8011124:	18804526 	beq	r3,r2,801123c <__adddf3+0x564>
 8011128:	00801004 	movi	r2,64
 801112c:	10c5c83a 	sub	r2,r2,r3
 8011130:	4886983a 	sll	r3,r9,r2
 8011134:	198cb03a 	or	r6,r3,r6
 8011138:	300cc03a 	cmpne	r6,r6,zero
 801113c:	218cb03a 	or	r6,r4,r6
 8011140:	0007883a 	mov	r3,zero
 8011144:	003f3b06 	br	8010e34 <__adddf3+0x15c>
 8011148:	80002a26 	beq	r16,zero,80111f4 <__adddf3+0x51c>
 801114c:	0101ffc4 	movi	r4,2047
 8011150:	11006826 	beq	r2,r4,80112f4 <__adddf3+0x61c>
 8011154:	00c7c83a 	sub	r3,zero,r3
 8011158:	42002034 	orhi	r8,r8,128
 801115c:	01000e04 	movi	r4,56
 8011160:	20c07c16 	blt	r4,r3,8011354 <__adddf3+0x67c>
 8011164:	010007c4 	movi	r4,31
 8011168:	20c0da16 	blt	r4,r3,80114d4 <__adddf3+0x7fc>
 801116c:	01000804 	movi	r4,32
 8011170:	20c9c83a 	sub	r4,r4,r3
 8011174:	4114983a 	sll	r10,r8,r4
 8011178:	88cad83a 	srl	r5,r17,r3
 801117c:	8908983a 	sll	r4,r17,r4
 8011180:	40c6d83a 	srl	r3,r8,r3
 8011184:	5162b03a 	or	r17,r10,r5
 8011188:	2008c03a 	cmpne	r4,r4,zero
 801118c:	8922b03a 	or	r17,r17,r4
 8011190:	3463c83a 	sub	r17,r6,r17
 8011194:	48c7c83a 	sub	r3,r9,r3
 8011198:	344d803a 	cmpltu	r6,r6,r17
 801119c:	1991c83a 	sub	r8,r3,r6
 80111a0:	1021883a 	mov	r16,r2
 80111a4:	3825883a 	mov	r18,r7
 80111a8:	003f2706 	br	8010e48 <__adddf3+0x170>
 80111ac:	24d0b03a 	or	r8,r4,r19
 80111b0:	40001b1e 	bne	r8,zero,8011220 <__adddf3+0x548>
 80111b4:	0005883a 	mov	r2,zero
 80111b8:	0007883a 	mov	r3,zero
 80111bc:	0021883a 	mov	r16,zero
 80111c0:	003f4d06 	br	8010ef8 <__adddf3+0x220>
 80111c4:	008007c4 	movi	r2,31
 80111c8:	11003c16 	blt	r2,r4,80112bc <__adddf3+0x5e4>
 80111cc:	00800804 	movi	r2,32
 80111d0:	1105c83a 	sub	r2,r2,r4
 80111d4:	488e983a 	sll	r7,r9,r2
 80111d8:	310ad83a 	srl	r5,r6,r4
 80111dc:	3084983a 	sll	r2,r6,r2
 80111e0:	4912d83a 	srl	r9,r9,r4
 80111e4:	394ab03a 	or	r5,r7,r5
 80111e8:	1004c03a 	cmpne	r2,r2,zero
 80111ec:	288ab03a 	or	r5,r5,r2
 80111f0:	003f5306 	br	8010f40 <__adddf3+0x268>
 80111f4:	4448b03a 	or	r4,r8,r17
 80111f8:	20003e26 	beq	r4,zero,80112f4 <__adddf3+0x61c>
 80111fc:	00c6303a 	nor	r3,zero,r3
 8011200:	18003a1e 	bne	r3,zero,80112ec <__adddf3+0x614>
 8011204:	3463c83a 	sub	r17,r6,r17
 8011208:	4a07c83a 	sub	r3,r9,r8
 801120c:	344d803a 	cmpltu	r6,r6,r17
 8011210:	1991c83a 	sub	r8,r3,r6
 8011214:	1021883a 	mov	r16,r2
 8011218:	3825883a 	mov	r18,r7
 801121c:	003f0a06 	br	8010e48 <__adddf3+0x170>
 8011220:	2023883a 	mov	r17,r4
 8011224:	003f0d06 	br	8010e5c <__adddf3+0x184>
 8011228:	0081ffc4 	movi	r2,2047
 801122c:	80bf3f1e 	bne	r16,r2,8010f2c <__adddf3+0x254>
 8011230:	003ec806 	br	8010d54 <__adddf3+0x7c>
 8011234:	0005883a 	mov	r2,zero
 8011238:	003fb106 	br	8011100 <__adddf3+0x428>
 801123c:	0007883a 	mov	r3,zero
 8011240:	003fbc06 	br	8011134 <__adddf3+0x45c>
 8011244:	4444b03a 	or	r2,r8,r17
 8011248:	8000871e 	bne	r16,zero,8011468 <__adddf3+0x790>
 801124c:	1000ba26 	beq	r2,zero,8011538 <__adddf3+0x860>
 8011250:	4984b03a 	or	r2,r9,r6
 8011254:	103ebf26 	beq	r2,zero,8010d54 <__adddf3+0x7c>
 8011258:	8985883a 	add	r2,r17,r6
 801125c:	4247883a 	add	r3,r8,r9
 8011260:	1451803a 	cmpltu	r8,r2,r17
 8011264:	40d1883a 	add	r8,r8,r3
 8011268:	40c0202c 	andhi	r3,r8,128
 801126c:	1023883a 	mov	r17,r2
 8011270:	183f1a26 	beq	r3,zero,8010edc <__adddf3+0x204>
 8011274:	00bfe034 	movhi	r2,65408
 8011278:	10bfffc4 	addi	r2,r2,-1
 801127c:	2021883a 	mov	r16,r4
 8011280:	4090703a 	and	r8,r8,r2
 8011284:	003eb306 	br	8010d54 <__adddf3+0x7c>
 8011288:	4444b03a 	or	r2,r8,r17
 801128c:	8000291e 	bne	r16,zero,8011334 <__adddf3+0x65c>
 8011290:	10004b1e 	bne	r2,zero,80113c0 <__adddf3+0x6e8>
 8011294:	4990b03a 	or	r8,r9,r6
 8011298:	40008b26 	beq	r8,zero,80114c8 <__adddf3+0x7f0>
 801129c:	4811883a 	mov	r8,r9
 80112a0:	3023883a 	mov	r17,r6
 80112a4:	3825883a 	mov	r18,r7
 80112a8:	003eaa06 	br	8010d54 <__adddf3+0x7c>
 80112ac:	1021883a 	mov	r16,r2
 80112b0:	0011883a 	mov	r8,zero
 80112b4:	0005883a 	mov	r2,zero
 80112b8:	003f0f06 	br	8010ef8 <__adddf3+0x220>
 80112bc:	217ff804 	addi	r5,r4,-32
 80112c0:	00800804 	movi	r2,32
 80112c4:	494ad83a 	srl	r5,r9,r5
 80112c8:	20807d26 	beq	r4,r2,80114c0 <__adddf3+0x7e8>
 80112cc:	00801004 	movi	r2,64
 80112d0:	1109c83a 	sub	r4,r2,r4
 80112d4:	4912983a 	sll	r9,r9,r4
 80112d8:	498cb03a 	or	r6,r9,r6
 80112dc:	300cc03a 	cmpne	r6,r6,zero
 80112e0:	298ab03a 	or	r5,r5,r6
 80112e4:	0013883a 	mov	r9,zero
 80112e8:	003f1506 	br	8010f40 <__adddf3+0x268>
 80112ec:	0101ffc4 	movi	r4,2047
 80112f0:	113f9a1e 	bne	r2,r4,801115c <__adddf3+0x484>
 80112f4:	4811883a 	mov	r8,r9
 80112f8:	3023883a 	mov	r17,r6
 80112fc:	1021883a 	mov	r16,r2
 8011300:	3825883a 	mov	r18,r7
 8011304:	003e9306 	br	8010d54 <__adddf3+0x7c>
 8011308:	8000161e 	bne	r16,zero,8011364 <__adddf3+0x68c>
 801130c:	444ab03a 	or	r5,r8,r17
 8011310:	28005126 	beq	r5,zero,8011458 <__adddf3+0x780>
 8011314:	0108303a 	nor	r4,zero,r4
 8011318:	20004d1e 	bne	r4,zero,8011450 <__adddf3+0x778>
 801131c:	89a3883a 	add	r17,r17,r6
 8011320:	4253883a 	add	r9,r8,r9
 8011324:	898d803a 	cmpltu	r6,r17,r6
 8011328:	3251883a 	add	r8,r6,r9
 801132c:	1021883a 	mov	r16,r2
 8011330:	003f0806 	br	8010f54 <__adddf3+0x27c>
 8011334:	1000301e 	bne	r2,zero,80113f8 <__adddf3+0x720>
 8011338:	4984b03a 	or	r2,r9,r6
 801133c:	10007126 	beq	r2,zero,8011504 <__adddf3+0x82c>
 8011340:	4811883a 	mov	r8,r9
 8011344:	3023883a 	mov	r17,r6
 8011348:	3825883a 	mov	r18,r7
 801134c:	0401ffc4 	movi	r16,2047
 8011350:	003e8006 	br	8010d54 <__adddf3+0x7c>
 8011354:	4462b03a 	or	r17,r8,r17
 8011358:	8822c03a 	cmpne	r17,r17,zero
 801135c:	0007883a 	mov	r3,zero
 8011360:	003f8b06 	br	8011190 <__adddf3+0x4b8>
 8011364:	0141ffc4 	movi	r5,2047
 8011368:	11403b26 	beq	r2,r5,8011458 <__adddf3+0x780>
 801136c:	0109c83a 	sub	r4,zero,r4
 8011370:	42002034 	orhi	r8,r8,128
 8011374:	01400e04 	movi	r5,56
 8011378:	29006716 	blt	r5,r4,8011518 <__adddf3+0x840>
 801137c:	014007c4 	movi	r5,31
 8011380:	29007016 	blt	r5,r4,8011544 <__adddf3+0x86c>
 8011384:	01400804 	movi	r5,32
 8011388:	290bc83a 	sub	r5,r5,r4
 801138c:	4154983a 	sll	r10,r8,r5
 8011390:	890ed83a 	srl	r7,r17,r4
 8011394:	894a983a 	sll	r5,r17,r5
 8011398:	4108d83a 	srl	r4,r8,r4
 801139c:	51e2b03a 	or	r17,r10,r7
 80113a0:	280ac03a 	cmpne	r5,r5,zero
 80113a4:	8962b03a 	or	r17,r17,r5
 80113a8:	89a3883a 	add	r17,r17,r6
 80113ac:	2253883a 	add	r9,r4,r9
 80113b0:	898d803a 	cmpltu	r6,r17,r6
 80113b4:	3251883a 	add	r8,r6,r9
 80113b8:	1021883a 	mov	r16,r2
 80113bc:	003ee506 	br	8010f54 <__adddf3+0x27c>
 80113c0:	4984b03a 	or	r2,r9,r6
 80113c4:	103e6326 	beq	r2,zero,8010d54 <__adddf3+0x7c>
 80113c8:	8987c83a 	sub	r3,r17,r6
 80113cc:	88c9803a 	cmpltu	r4,r17,r3
 80113d0:	4245c83a 	sub	r2,r8,r9
 80113d4:	1105c83a 	sub	r2,r2,r4
 80113d8:	1100202c 	andhi	r4,r2,128
 80113dc:	203ebb26 	beq	r4,zero,8010ecc <__adddf3+0x1f4>
 80113e0:	3463c83a 	sub	r17,r6,r17
 80113e4:	4a07c83a 	sub	r3,r9,r8
 80113e8:	344d803a 	cmpltu	r6,r6,r17
 80113ec:	1991c83a 	sub	r8,r3,r6
 80113f0:	3825883a 	mov	r18,r7
 80113f4:	003e5706 	br	8010d54 <__adddf3+0x7c>
 80113f8:	4984b03a 	or	r2,r9,r6
 80113fc:	10002e26 	beq	r2,zero,80114b8 <__adddf3+0x7e0>
 8011400:	4004d0fa 	srli	r2,r8,3
 8011404:	8822d0fa 	srli	r17,r17,3
 8011408:	4010977a 	slli	r8,r8,29
 801140c:	10c0022c 	andhi	r3,r2,8
 8011410:	4462b03a 	or	r17,r8,r17
 8011414:	18000826 	beq	r3,zero,8011438 <__adddf3+0x760>
 8011418:	4808d0fa 	srli	r4,r9,3
 801141c:	20c0022c 	andhi	r3,r4,8
 8011420:	1800051e 	bne	r3,zero,8011438 <__adddf3+0x760>
 8011424:	300cd0fa 	srli	r6,r6,3
 8011428:	4806977a 	slli	r3,r9,29
 801142c:	2005883a 	mov	r2,r4
 8011430:	3825883a 	mov	r18,r7
 8011434:	19a2b03a 	or	r17,r3,r6
 8011438:	8810d77a 	srli	r8,r17,29
 801143c:	100490fa 	slli	r2,r2,3
 8011440:	882290fa 	slli	r17,r17,3
 8011444:	0401ffc4 	movi	r16,2047
 8011448:	4090b03a 	or	r8,r8,r2
 801144c:	003e4106 	br	8010d54 <__adddf3+0x7c>
 8011450:	0141ffc4 	movi	r5,2047
 8011454:	117fc71e 	bne	r2,r5,8011374 <__adddf3+0x69c>
 8011458:	4811883a 	mov	r8,r9
 801145c:	3023883a 	mov	r17,r6
 8011460:	1021883a 	mov	r16,r2
 8011464:	003e3b06 	br	8010d54 <__adddf3+0x7c>
 8011468:	10002f26 	beq	r2,zero,8011528 <__adddf3+0x850>
 801146c:	4984b03a 	or	r2,r9,r6
 8011470:	10001126 	beq	r2,zero,80114b8 <__adddf3+0x7e0>
 8011474:	4004d0fa 	srli	r2,r8,3
 8011478:	8822d0fa 	srli	r17,r17,3
 801147c:	4010977a 	slli	r8,r8,29
 8011480:	10c0022c 	andhi	r3,r2,8
 8011484:	4462b03a 	or	r17,r8,r17
 8011488:	183feb26 	beq	r3,zero,8011438 <__adddf3+0x760>
 801148c:	4808d0fa 	srli	r4,r9,3
 8011490:	20c0022c 	andhi	r3,r4,8
 8011494:	183fe81e 	bne	r3,zero,8011438 <__adddf3+0x760>
 8011498:	300cd0fa 	srli	r6,r6,3
 801149c:	4806977a 	slli	r3,r9,29
 80114a0:	2005883a 	mov	r2,r4
 80114a4:	19a2b03a 	or	r17,r3,r6
 80114a8:	003fe306 	br	8011438 <__adddf3+0x760>
 80114ac:	0011883a 	mov	r8,zero
 80114b0:	0005883a 	mov	r2,zero
 80114b4:	003e3f06 	br	8010db4 <__adddf3+0xdc>
 80114b8:	0401ffc4 	movi	r16,2047
 80114bc:	003e2506 	br	8010d54 <__adddf3+0x7c>
 80114c0:	0013883a 	mov	r9,zero
 80114c4:	003f8406 	br	80112d8 <__adddf3+0x600>
 80114c8:	0005883a 	mov	r2,zero
 80114cc:	0007883a 	mov	r3,zero
 80114d0:	003e8906 	br	8010ef8 <__adddf3+0x220>
 80114d4:	197ff804 	addi	r5,r3,-32
 80114d8:	01000804 	movi	r4,32
 80114dc:	414ad83a 	srl	r5,r8,r5
 80114e0:	19002426 	beq	r3,r4,8011574 <__adddf3+0x89c>
 80114e4:	01001004 	movi	r4,64
 80114e8:	20c7c83a 	sub	r3,r4,r3
 80114ec:	40c6983a 	sll	r3,r8,r3
 80114f0:	1c46b03a 	or	r3,r3,r17
 80114f4:	1806c03a 	cmpne	r3,r3,zero
 80114f8:	28e2b03a 	or	r17,r5,r3
 80114fc:	0007883a 	mov	r3,zero
 8011500:	003f2306 	br	8011190 <__adddf3+0x4b8>
 8011504:	0007883a 	mov	r3,zero
 8011508:	5811883a 	mov	r8,r11
 801150c:	00bfffc4 	movi	r2,-1
 8011510:	0401ffc4 	movi	r16,2047
 8011514:	003e7806 	br	8010ef8 <__adddf3+0x220>
 8011518:	4462b03a 	or	r17,r8,r17
 801151c:	8822c03a 	cmpne	r17,r17,zero
 8011520:	0009883a 	mov	r4,zero
 8011524:	003fa006 	br	80113a8 <__adddf3+0x6d0>
 8011528:	4811883a 	mov	r8,r9
 801152c:	3023883a 	mov	r17,r6
 8011530:	0401ffc4 	movi	r16,2047
 8011534:	003e0706 	br	8010d54 <__adddf3+0x7c>
 8011538:	4811883a 	mov	r8,r9
 801153c:	3023883a 	mov	r17,r6
 8011540:	003e0406 	br	8010d54 <__adddf3+0x7c>
 8011544:	21fff804 	addi	r7,r4,-32
 8011548:	01400804 	movi	r5,32
 801154c:	41ced83a 	srl	r7,r8,r7
 8011550:	21400a26 	beq	r4,r5,801157c <__adddf3+0x8a4>
 8011554:	01401004 	movi	r5,64
 8011558:	2909c83a 	sub	r4,r5,r4
 801155c:	4108983a 	sll	r4,r8,r4
 8011560:	2448b03a 	or	r4,r4,r17
 8011564:	2008c03a 	cmpne	r4,r4,zero
 8011568:	3922b03a 	or	r17,r7,r4
 801156c:	0009883a 	mov	r4,zero
 8011570:	003f8d06 	br	80113a8 <__adddf3+0x6d0>
 8011574:	0007883a 	mov	r3,zero
 8011578:	003fdd06 	br	80114f0 <__adddf3+0x818>
 801157c:	0009883a 	mov	r4,zero
 8011580:	003ff706 	br	8011560 <__adddf3+0x888>

08011584 <__divdf3>:
 8011584:	defff004 	addi	sp,sp,-64
 8011588:	dc800815 	stw	r18,32(sp)
 801158c:	2824d53a 	srli	r18,r5,20
 8011590:	dd800c15 	stw	r22,48(sp)
 8011594:	282cd7fa 	srli	r22,r5,31
 8011598:	dc000615 	stw	r16,24(sp)
 801159c:	04000434 	movhi	r16,16
 80115a0:	843fffc4 	addi	r16,r16,-1
 80115a4:	dfc00f15 	stw	ra,60(sp)
 80115a8:	df000e15 	stw	fp,56(sp)
 80115ac:	ddc00d15 	stw	r23,52(sp)
 80115b0:	dd400b15 	stw	r21,44(sp)
 80115b4:	dd000a15 	stw	r20,40(sp)
 80115b8:	dcc00915 	stw	r19,36(sp)
 80115bc:	dc400715 	stw	r17,28(sp)
 80115c0:	9481ffcc 	andi	r18,r18,2047
 80115c4:	2c20703a 	and	r16,r5,r16
 80115c8:	b2003fcc 	andi	r8,r22,255
 80115cc:	90006126 	beq	r18,zero,8011754 <__divdf3+0x1d0>
 80115d0:	0081ffc4 	movi	r2,2047
 80115d4:	202b883a 	mov	r21,r4
 80115d8:	90803726 	beq	r18,r2,80116b8 <__divdf3+0x134>
 80115dc:	80800434 	orhi	r2,r16,16
 80115e0:	100490fa 	slli	r2,r2,3
 80115e4:	2020d77a 	srli	r16,r4,29
 80115e8:	202a90fa 	slli	r21,r4,3
 80115ec:	94bf0044 	addi	r18,r18,-1023
 80115f0:	80a0b03a 	or	r16,r16,r2
 80115f4:	0013883a 	mov	r9,zero
 80115f8:	000b883a 	mov	r5,zero
 80115fc:	3806d53a 	srli	r3,r7,20
 8011600:	382ed7fa 	srli	r23,r7,31
 8011604:	04400434 	movhi	r17,16
 8011608:	8c7fffc4 	addi	r17,r17,-1
 801160c:	18c1ffcc 	andi	r3,r3,2047
 8011610:	3029883a 	mov	r20,r6
 8011614:	3c62703a 	and	r17,r7,r17
 8011618:	bf003fcc 	andi	fp,r23,255
 801161c:	18006e26 	beq	r3,zero,80117d8 <__divdf3+0x254>
 8011620:	0081ffc4 	movi	r2,2047
 8011624:	18806626 	beq	r3,r2,80117c0 <__divdf3+0x23c>
 8011628:	88800434 	orhi	r2,r17,16
 801162c:	100490fa 	slli	r2,r2,3
 8011630:	3022d77a 	srli	r17,r6,29
 8011634:	302890fa 	slli	r20,r6,3
 8011638:	18ff0044 	addi	r3,r3,-1023
 801163c:	88a2b03a 	or	r17,r17,r2
 8011640:	000f883a 	mov	r7,zero
 8011644:	b5e6f03a 	xor	r19,r22,r23
 8011648:	3a4cb03a 	or	r6,r7,r9
 801164c:	008003c4 	movi	r2,15
 8011650:	9809883a 	mov	r4,r19
 8011654:	90c7c83a 	sub	r3,r18,r3
 8011658:	9cc03fcc 	andi	r19,r19,255
 801165c:	11809636 	bltu	r2,r6,80118b8 <__divdf3+0x334>
 8011660:	300c90ba 	slli	r6,r6,2
 8011664:	00820074 	movhi	r2,2049
 8011668:	10859e04 	addi	r2,r2,5752
 801166c:	308d883a 	add	r6,r6,r2
 8011670:	30800017 	ldw	r2,0(r6)
 8011674:	1000683a 	jmp	r2
 8011678:	080118b8 	rdprs	zero,at,1122
 801167c:	080116f0 	cmpltui	zero,at,1115
 8011680:	080118a8 	cmpgeui	zero,at,1122
 8011684:	080116e4 	muli	zero,at,1115
 8011688:	080118a8 	cmpgeui	zero,at,1122
 801168c:	0801187c 	xorhi	zero,at,1121
 8011690:	080118a8 	cmpgeui	zero,at,1122
 8011694:	080116e4 	muli	zero,at,1115
 8011698:	080116f0 	cmpltui	zero,at,1115
 801169c:	080116f0 	cmpltui	zero,at,1115
 80116a0:	0801187c 	xorhi	zero,at,1121
 80116a4:	080116e4 	muli	zero,at,1115
 80116a8:	080116d4 	ori	zero,at,1115
 80116ac:	080116d4 	ori	zero,at,1115
 80116b0:	080116d4 	ori	zero,at,1115
 80116b4:	08011c40 	call	8011c4 <__alt_mem_onchip_memory2_0+0x8011c4>
 80116b8:	2404b03a 	or	r2,r4,r16
 80116bc:	10006c1e 	bne	r2,zero,8011870 <__divdf3+0x2ec>
 80116c0:	02400204 	movi	r9,8
 80116c4:	0021883a 	mov	r16,zero
 80116c8:	002b883a 	mov	r21,zero
 80116cc:	01400084 	movi	r5,2
 80116d0:	003fca06 	br	80115fc <__divdf3+0x78>
 80116d4:	8023883a 	mov	r17,r16
 80116d8:	a829883a 	mov	r20,r21
 80116dc:	4039883a 	mov	fp,r8
 80116e0:	280f883a 	mov	r7,r5
 80116e4:	00800084 	movi	r2,2
 80116e8:	3881601e 	bne	r7,r2,8011c6c <__divdf3+0x6e8>
 80116ec:	e027883a 	mov	r19,fp
 80116f0:	9900004c 	andi	r4,r19,1
 80116f4:	0081ffc4 	movi	r2,2047
 80116f8:	0021883a 	mov	r16,zero
 80116fc:	002b883a 	mov	r21,zero
 8011700:	1004953a 	slli	r2,r2,20
 8011704:	20c03fcc 	andi	r3,r4,255
 8011708:	01400434 	movhi	r5,16
 801170c:	297fffc4 	addi	r5,r5,-1
 8011710:	180697fa 	slli	r3,r3,31
 8011714:	8160703a 	and	r16,r16,r5
 8011718:	80a0b03a 	or	r16,r16,r2
 801171c:	80c6b03a 	or	r3,r16,r3
 8011720:	a805883a 	mov	r2,r21
 8011724:	dfc00f17 	ldw	ra,60(sp)
 8011728:	df000e17 	ldw	fp,56(sp)
 801172c:	ddc00d17 	ldw	r23,52(sp)
 8011730:	dd800c17 	ldw	r22,48(sp)
 8011734:	dd400b17 	ldw	r21,44(sp)
 8011738:	dd000a17 	ldw	r20,40(sp)
 801173c:	dcc00917 	ldw	r19,36(sp)
 8011740:	dc800817 	ldw	r18,32(sp)
 8011744:	dc400717 	ldw	r17,28(sp)
 8011748:	dc000617 	ldw	r16,24(sp)
 801174c:	dec01004 	addi	sp,sp,64
 8011750:	f800283a 	ret
 8011754:	2404b03a 	or	r2,r4,r16
 8011758:	2023883a 	mov	r17,r4
 801175c:	10003f26 	beq	r2,zero,801185c <__divdf3+0x2d8>
 8011760:	80015e26 	beq	r16,zero,8011cdc <__divdf3+0x758>
 8011764:	8009883a 	mov	r4,r16
 8011768:	d9800215 	stw	r6,8(sp)
 801176c:	d9c00515 	stw	r7,20(sp)
 8011770:	da000415 	stw	r8,16(sp)
 8011774:	80061240 	call	8006124 <__clzsi2>
 8011778:	d9800217 	ldw	r6,8(sp)
 801177c:	d9c00517 	ldw	r7,20(sp)
 8011780:	da000417 	ldw	r8,16(sp)
 8011784:	113ffd44 	addi	r4,r2,-11
 8011788:	00c00704 	movi	r3,28
 801178c:	19014f16 	blt	r3,r4,8011ccc <__divdf3+0x748>
 8011790:	00c00744 	movi	r3,29
 8011794:	157ffe04 	addi	r21,r2,-8
 8011798:	1907c83a 	sub	r3,r3,r4
 801179c:	8560983a 	sll	r16,r16,r21
 80117a0:	88c6d83a 	srl	r3,r17,r3
 80117a4:	8d6a983a 	sll	r21,r17,r21
 80117a8:	1c20b03a 	or	r16,r3,r16
 80117ac:	1080fcc4 	addi	r2,r2,1011
 80117b0:	00a5c83a 	sub	r18,zero,r2
 80117b4:	0013883a 	mov	r9,zero
 80117b8:	000b883a 	mov	r5,zero
 80117bc:	003f8f06 	br	80115fc <__divdf3+0x78>
 80117c0:	3444b03a 	or	r2,r6,r17
 80117c4:	1000231e 	bne	r2,zero,8011854 <__divdf3+0x2d0>
 80117c8:	0023883a 	mov	r17,zero
 80117cc:	0029883a 	mov	r20,zero
 80117d0:	01c00084 	movi	r7,2
 80117d4:	003f9b06 	br	8011644 <__divdf3+0xc0>
 80117d8:	3444b03a 	or	r2,r6,r17
 80117dc:	10001926 	beq	r2,zero,8011844 <__divdf3+0x2c0>
 80117e0:	88014b26 	beq	r17,zero,8011d10 <__divdf3+0x78c>
 80117e4:	8809883a 	mov	r4,r17
 80117e8:	d9400115 	stw	r5,4(sp)
 80117ec:	d9800215 	stw	r6,8(sp)
 80117f0:	da000415 	stw	r8,16(sp)
 80117f4:	da400315 	stw	r9,12(sp)
 80117f8:	80061240 	call	8006124 <__clzsi2>
 80117fc:	d9400117 	ldw	r5,4(sp)
 8011800:	d9800217 	ldw	r6,8(sp)
 8011804:	da000417 	ldw	r8,16(sp)
 8011808:	da400317 	ldw	r9,12(sp)
 801180c:	113ffd44 	addi	r4,r2,-11
 8011810:	00c00704 	movi	r3,28
 8011814:	19013a16 	blt	r3,r4,8011d00 <__divdf3+0x77c>
 8011818:	00c00744 	movi	r3,29
 801181c:	153ffe04 	addi	r20,r2,-8
 8011820:	1907c83a 	sub	r3,r3,r4
 8011824:	8d22983a 	sll	r17,r17,r20
 8011828:	30c6d83a 	srl	r3,r6,r3
 801182c:	3528983a 	sll	r20,r6,r20
 8011830:	1c62b03a 	or	r17,r3,r17
 8011834:	1080fcc4 	addi	r2,r2,1011
 8011838:	0087c83a 	sub	r3,zero,r2
 801183c:	000f883a 	mov	r7,zero
 8011840:	003f8006 	br	8011644 <__divdf3+0xc0>
 8011844:	0023883a 	mov	r17,zero
 8011848:	0029883a 	mov	r20,zero
 801184c:	01c00044 	movi	r7,1
 8011850:	003f7c06 	br	8011644 <__divdf3+0xc0>
 8011854:	01c000c4 	movi	r7,3
 8011858:	003f7a06 	br	8011644 <__divdf3+0xc0>
 801185c:	02400104 	movi	r9,4
 8011860:	0021883a 	mov	r16,zero
 8011864:	002b883a 	mov	r21,zero
 8011868:	01400044 	movi	r5,1
 801186c:	003f6306 	br	80115fc <__divdf3+0x78>
 8011870:	02400304 	movi	r9,12
 8011874:	014000c4 	movi	r5,3
 8011878:	003f6006 	br	80115fc <__divdf3+0x78>
 801187c:	04000434 	movhi	r16,16
 8011880:	0009883a 	mov	r4,zero
 8011884:	843fffc4 	addi	r16,r16,-1
 8011888:	057fffc4 	movi	r21,-1
 801188c:	0081ffc4 	movi	r2,2047
 8011890:	003f9b06 	br	8011700 <__divdf3+0x17c>
 8011894:	00c00044 	movi	r3,1
 8011898:	1887c83a 	sub	r3,r3,r2
 801189c:	01000e04 	movi	r4,56
 80118a0:	20c1530e 	bge	r4,r3,8011df0 <__divdf3+0x86c>
 80118a4:	9900004c 	andi	r4,r19,1
 80118a8:	0005883a 	mov	r2,zero
 80118ac:	0021883a 	mov	r16,zero
 80118b0:	002b883a 	mov	r21,zero
 80118b4:	003f9206 	br	8011700 <__divdf3+0x17c>
 80118b8:	8c012e36 	bltu	r17,r16,8011d74 <__divdf3+0x7f0>
 80118bc:	84412c26 	beq	r16,r17,8011d70 <__divdf3+0x7ec>
 80118c0:	a82f883a 	mov	r23,r21
 80118c4:	18ffffc4 	addi	r3,r3,-1
 80118c8:	002b883a 	mov	r21,zero
 80118cc:	a004d63a 	srli	r2,r20,24
 80118d0:	8822923a 	slli	r17,r17,8
 80118d4:	a028923a 	slli	r20,r20,8
 80118d8:	8009883a 	mov	r4,r16
 80118dc:	88acb03a 	or	r22,r17,r2
 80118e0:	dd000015 	stw	r20,0(sp)
 80118e4:	b028d43a 	srli	r20,r22,16
 80118e8:	d8c00215 	stw	r3,8(sp)
 80118ec:	b4bfffcc 	andi	r18,r22,65535
 80118f0:	a00b883a 	mov	r5,r20
 80118f4:	8010c1c0 	call	8010c1c <__udivsi3>
 80118f8:	100b883a 	mov	r5,r2
 80118fc:	9009883a 	mov	r4,r18
 8011900:	1023883a 	mov	r17,r2
 8011904:	80057b40 	call	80057b4 <__mulsi3>
 8011908:	8009883a 	mov	r4,r16
 801190c:	a00b883a 	mov	r5,r20
 8011910:	1039883a 	mov	fp,r2
 8011914:	8010c800 	call	8010c80 <__umodsi3>
 8011918:	1004943a 	slli	r2,r2,16
 801191c:	b808d43a 	srli	r4,r23,16
 8011920:	d8c00217 	ldw	r3,8(sp)
 8011924:	2084b03a 	or	r2,r4,r2
 8011928:	1700062e 	bgeu	r2,fp,8011944 <__divdf3+0x3c0>
 801192c:	1585883a 	add	r2,r2,r22
 8011930:	893fffc4 	addi	r4,r17,-1
 8011934:	15811d36 	bltu	r2,r22,8011dac <__divdf3+0x828>
 8011938:	17011c2e 	bgeu	r2,fp,8011dac <__divdf3+0x828>
 801193c:	8c7fff84 	addi	r17,r17,-2
 8011940:	1585883a 	add	r2,r2,r22
 8011944:	1739c83a 	sub	fp,r2,fp
 8011948:	a00b883a 	mov	r5,r20
 801194c:	e009883a 	mov	r4,fp
 8011950:	d8c00215 	stw	r3,8(sp)
 8011954:	8010c1c0 	call	8010c1c <__udivsi3>
 8011958:	100b883a 	mov	r5,r2
 801195c:	9009883a 	mov	r4,r18
 8011960:	1021883a 	mov	r16,r2
 8011964:	80057b40 	call	80057b4 <__mulsi3>
 8011968:	a00b883a 	mov	r5,r20
 801196c:	e009883a 	mov	r4,fp
 8011970:	d8800415 	stw	r2,16(sp)
 8011974:	8010c800 	call	8010c80 <__umodsi3>
 8011978:	1004943a 	slli	r2,r2,16
 801197c:	da000417 	ldw	r8,16(sp)
 8011980:	bdffffcc 	andi	r23,r23,65535
 8011984:	b884b03a 	or	r2,r23,r2
 8011988:	d8c00217 	ldw	r3,8(sp)
 801198c:	1200062e 	bgeu	r2,r8,80119a8 <__divdf3+0x424>
 8011990:	1585883a 	add	r2,r2,r22
 8011994:	813fffc4 	addi	r4,r16,-1
 8011998:	15810236 	bltu	r2,r22,8011da4 <__divdf3+0x820>
 801199c:	1201012e 	bgeu	r2,r8,8011da4 <__divdf3+0x820>
 80119a0:	843fff84 	addi	r16,r16,-2
 80119a4:	1585883a 	add	r2,r2,r22
 80119a8:	8822943a 	slli	r17,r17,16
 80119ac:	d9800017 	ldw	r6,0(sp)
 80119b0:	1211c83a 	sub	r8,r2,r8
 80119b4:	8c22b03a 	or	r17,r17,r16
 80119b8:	373fffcc 	andi	fp,r6,65535
 80119bc:	8abfffcc 	andi	r10,r17,65535
 80119c0:	8820d43a 	srli	r16,r17,16
 80119c4:	5009883a 	mov	r4,r10
 80119c8:	e00b883a 	mov	r5,fp
 80119cc:	302ed43a 	srli	r23,r6,16
 80119d0:	d8c00215 	stw	r3,8(sp)
 80119d4:	da000415 	stw	r8,16(sp)
 80119d8:	da800115 	stw	r10,4(sp)
 80119dc:	80057b40 	call	80057b4 <__mulsi3>
 80119e0:	800b883a 	mov	r5,r16
 80119e4:	e009883a 	mov	r4,fp
 80119e8:	d8800515 	stw	r2,20(sp)
 80119ec:	80057b40 	call	80057b4 <__mulsi3>
 80119f0:	8009883a 	mov	r4,r16
 80119f4:	b80b883a 	mov	r5,r23
 80119f8:	d8800315 	stw	r2,12(sp)
 80119fc:	80057b40 	call	80057b4 <__mulsi3>
 8011a00:	da800117 	ldw	r10,4(sp)
 8011a04:	b80b883a 	mov	r5,r23
 8011a08:	1021883a 	mov	r16,r2
 8011a0c:	5009883a 	mov	r4,r10
 8011a10:	80057b40 	call	80057b4 <__mulsi3>
 8011a14:	d9c00517 	ldw	r7,20(sp)
 8011a18:	da400317 	ldw	r9,12(sp)
 8011a1c:	d8c00217 	ldw	r3,8(sp)
 8011a20:	3808d43a 	srli	r4,r7,16
 8011a24:	1245883a 	add	r2,r2,r9
 8011a28:	da000417 	ldw	r8,16(sp)
 8011a2c:	2085883a 	add	r2,r4,r2
 8011a30:	1240022e 	bgeu	r2,r9,8011a3c <__divdf3+0x4b8>
 8011a34:	01000074 	movhi	r4,1
 8011a38:	8121883a 	add	r16,r16,r4
 8011a3c:	1008d43a 	srli	r4,r2,16
 8011a40:	1004943a 	slli	r2,r2,16
 8011a44:	39ffffcc 	andi	r7,r7,65535
 8011a48:	2409883a 	add	r4,r4,r16
 8011a4c:	11c5883a 	add	r2,r2,r7
 8011a50:	4100bb36 	bltu	r8,r4,8011d40 <__divdf3+0x7bc>
 8011a54:	4100d726 	beq	r8,r4,8011db4 <__divdf3+0x830>
 8011a58:	4109c83a 	sub	r4,r8,r4
 8011a5c:	a8a1c83a 	sub	r16,r21,r2
 8011a60:	ac2b803a 	cmpltu	r21,r21,r16
 8011a64:	256bc83a 	sub	r21,r4,r21
 8011a68:	b540d926 	beq	r22,r21,8011dd0 <__divdf3+0x84c>
 8011a6c:	a00b883a 	mov	r5,r20
 8011a70:	a809883a 	mov	r4,r21
 8011a74:	d8c00215 	stw	r3,8(sp)
 8011a78:	8010c1c0 	call	8010c1c <__udivsi3>
 8011a7c:	100b883a 	mov	r5,r2
 8011a80:	9009883a 	mov	r4,r18
 8011a84:	d8800515 	stw	r2,20(sp)
 8011a88:	80057b40 	call	80057b4 <__mulsi3>
 8011a8c:	a809883a 	mov	r4,r21
 8011a90:	a00b883a 	mov	r5,r20
 8011a94:	d8800415 	stw	r2,16(sp)
 8011a98:	8010c800 	call	8010c80 <__umodsi3>
 8011a9c:	1004943a 	slli	r2,r2,16
 8011aa0:	8008d43a 	srli	r4,r16,16
 8011aa4:	da000417 	ldw	r8,16(sp)
 8011aa8:	d8c00217 	ldw	r3,8(sp)
 8011aac:	2084b03a 	or	r2,r4,r2
 8011ab0:	d9c00517 	ldw	r7,20(sp)
 8011ab4:	1200062e 	bgeu	r2,r8,8011ad0 <__divdf3+0x54c>
 8011ab8:	1585883a 	add	r2,r2,r22
 8011abc:	393fffc4 	addi	r4,r7,-1
 8011ac0:	1580c536 	bltu	r2,r22,8011dd8 <__divdf3+0x854>
 8011ac4:	1200c42e 	bgeu	r2,r8,8011dd8 <__divdf3+0x854>
 8011ac8:	39ffff84 	addi	r7,r7,-2
 8011acc:	1585883a 	add	r2,r2,r22
 8011ad0:	122bc83a 	sub	r21,r2,r8
 8011ad4:	a00b883a 	mov	r5,r20
 8011ad8:	a809883a 	mov	r4,r21
 8011adc:	d8c00215 	stw	r3,8(sp)
 8011ae0:	d9c00515 	stw	r7,20(sp)
 8011ae4:	8010c1c0 	call	8010c1c <__udivsi3>
 8011ae8:	9009883a 	mov	r4,r18
 8011aec:	100b883a 	mov	r5,r2
 8011af0:	d8800415 	stw	r2,16(sp)
 8011af4:	80057b40 	call	80057b4 <__mulsi3>
 8011af8:	a809883a 	mov	r4,r21
 8011afc:	a00b883a 	mov	r5,r20
 8011b00:	1025883a 	mov	r18,r2
 8011b04:	8010c800 	call	8010c80 <__umodsi3>
 8011b08:	1004943a 	slli	r2,r2,16
 8011b0c:	813fffcc 	andi	r4,r16,65535
 8011b10:	d8c00217 	ldw	r3,8(sp)
 8011b14:	20a0b03a 	or	r16,r4,r2
 8011b18:	d9c00517 	ldw	r7,20(sp)
 8011b1c:	da000417 	ldw	r8,16(sp)
 8011b20:	8480062e 	bgeu	r16,r18,8011b3c <__divdf3+0x5b8>
 8011b24:	85a1883a 	add	r16,r16,r22
 8011b28:	40bfffc4 	addi	r2,r8,-1
 8011b2c:	8580ac36 	bltu	r16,r22,8011de0 <__divdf3+0x85c>
 8011b30:	8480ab2e 	bgeu	r16,r18,8011de0 <__divdf3+0x85c>
 8011b34:	423fff84 	addi	r8,r8,-2
 8011b38:	85a1883a 	add	r16,r16,r22
 8011b3c:	3804943a 	slli	r2,r7,16
 8011b40:	84a1c83a 	sub	r16,r16,r18
 8011b44:	e009883a 	mov	r4,fp
 8011b48:	1228b03a 	or	r20,r2,r8
 8011b4c:	a1ffffcc 	andi	r7,r20,65535
 8011b50:	a024d43a 	srli	r18,r20,16
 8011b54:	380b883a 	mov	r5,r7
 8011b58:	d8c00215 	stw	r3,8(sp)
 8011b5c:	d9c00515 	stw	r7,20(sp)
 8011b60:	80057b40 	call	80057b4 <__mulsi3>
 8011b64:	900b883a 	mov	r5,r18
 8011b68:	e009883a 	mov	r4,fp
 8011b6c:	102b883a 	mov	r21,r2
 8011b70:	80057b40 	call	80057b4 <__mulsi3>
 8011b74:	900b883a 	mov	r5,r18
 8011b78:	b809883a 	mov	r4,r23
 8011b7c:	1039883a 	mov	fp,r2
 8011b80:	80057b40 	call	80057b4 <__mulsi3>
 8011b84:	d9c00517 	ldw	r7,20(sp)
 8011b88:	b80b883a 	mov	r5,r23
 8011b8c:	1025883a 	mov	r18,r2
 8011b90:	3809883a 	mov	r4,r7
 8011b94:	80057b40 	call	80057b4 <__mulsi3>
 8011b98:	a808d43a 	srli	r4,r21,16
 8011b9c:	1705883a 	add	r2,r2,fp
 8011ba0:	d8c00217 	ldw	r3,8(sp)
 8011ba4:	2085883a 	add	r2,r4,r2
 8011ba8:	1700022e 	bgeu	r2,fp,8011bb4 <__divdf3+0x630>
 8011bac:	01000074 	movhi	r4,1
 8011bb0:	9125883a 	add	r18,r18,r4
 8011bb4:	1008d43a 	srli	r4,r2,16
 8011bb8:	1004943a 	slli	r2,r2,16
 8011bbc:	ad7fffcc 	andi	r21,r21,65535
 8011bc0:	2489883a 	add	r4,r4,r18
 8011bc4:	1545883a 	add	r2,r2,r21
 8011bc8:	81003836 	bltu	r16,r4,8011cac <__divdf3+0x728>
 8011bcc:	81003626 	beq	r16,r4,8011ca8 <__divdf3+0x724>
 8011bd0:	a5000054 	ori	r20,r20,1
 8011bd4:	1880ffc4 	addi	r2,r3,1023
 8011bd8:	00bf2e0e 	bge	zero,r2,8011894 <__divdf3+0x310>
 8011bdc:	a10001cc 	andi	r4,r20,7
 8011be0:	20000726 	beq	r4,zero,8011c00 <__divdf3+0x67c>
 8011be4:	a10003cc 	andi	r4,r20,15
 8011be8:	01400104 	movi	r5,4
 8011bec:	21400426 	beq	r4,r5,8011c00 <__divdf3+0x67c>
 8011bf0:	a149883a 	add	r4,r20,r5
 8011bf4:	2529803a 	cmpltu	r20,r4,r20
 8011bf8:	8d23883a 	add	r17,r17,r20
 8011bfc:	2029883a 	mov	r20,r4
 8011c00:	8900402c 	andhi	r4,r17,256
 8011c04:	20000426 	beq	r4,zero,8011c18 <__divdf3+0x694>
 8011c08:	18810004 	addi	r2,r3,1024
 8011c0c:	00ffc034 	movhi	r3,65280
 8011c10:	18ffffc4 	addi	r3,r3,-1
 8011c14:	88e2703a 	and	r17,r17,r3
 8011c18:	00c1ff84 	movi	r3,2046
 8011c1c:	18beb416 	blt	r3,r2,80116f0 <__divdf3+0x16c>
 8011c20:	a028d0fa 	srli	r20,r20,3
 8011c24:	882a977a 	slli	r21,r17,29
 8011c28:	8820927a 	slli	r16,r17,9
 8011c2c:	1081ffcc 	andi	r2,r2,2047
 8011c30:	ad2ab03a 	or	r21,r21,r20
 8011c34:	8020d33a 	srli	r16,r16,12
 8011c38:	9900004c 	andi	r4,r19,1
 8011c3c:	003eb006 	br	8011700 <__divdf3+0x17c>
 8011c40:	8080022c 	andhi	r2,r16,8
 8011c44:	10001226 	beq	r2,zero,8011c90 <__divdf3+0x70c>
 8011c48:	8880022c 	andhi	r2,r17,8
 8011c4c:	1000101e 	bne	r2,zero,8011c90 <__divdf3+0x70c>
 8011c50:	00800434 	movhi	r2,16
 8011c54:	8c000234 	orhi	r16,r17,8
 8011c58:	10bfffc4 	addi	r2,r2,-1
 8011c5c:	b809883a 	mov	r4,r23
 8011c60:	80a0703a 	and	r16,r16,r2
 8011c64:	a02b883a 	mov	r21,r20
 8011c68:	003f0806 	br	801188c <__divdf3+0x308>
 8011c6c:	008000c4 	movi	r2,3
 8011c70:	3880b126 	beq	r7,r2,8011f38 <__divdf3+0x9b4>
 8011c74:	00800044 	movi	r2,1
 8011c78:	38805b1e 	bne	r7,r2,8011de8 <__divdf3+0x864>
 8011c7c:	e009883a 	mov	r4,fp
 8011c80:	0005883a 	mov	r2,zero
 8011c84:	0021883a 	mov	r16,zero
 8011c88:	002b883a 	mov	r21,zero
 8011c8c:	003e9c06 	br	8011700 <__divdf3+0x17c>
 8011c90:	00800434 	movhi	r2,16
 8011c94:	84000234 	orhi	r16,r16,8
 8011c98:	10bfffc4 	addi	r2,r2,-1
 8011c9c:	b009883a 	mov	r4,r22
 8011ca0:	80a0703a 	and	r16,r16,r2
 8011ca4:	003ef906 	br	801188c <__divdf3+0x308>
 8011ca8:	103fca26 	beq	r2,zero,8011bd4 <__divdf3+0x650>
 8011cac:	b421883a 	add	r16,r22,r16
 8011cb0:	a17fffc4 	addi	r5,r20,-1
 8011cb4:	8580422e 	bgeu	r16,r22,8011dc0 <__divdf3+0x83c>
 8011cb8:	2829883a 	mov	r20,r5
 8011cbc:	813fc41e 	bne	r16,r4,8011bd0 <__divdf3+0x64c>
 8011cc0:	d9800017 	ldw	r6,0(sp)
 8011cc4:	30bfc21e 	bne	r6,r2,8011bd0 <__divdf3+0x64c>
 8011cc8:	003fc206 	br	8011bd4 <__divdf3+0x650>
 8011ccc:	143ff604 	addi	r16,r2,-40
 8011cd0:	8c20983a 	sll	r16,r17,r16
 8011cd4:	002b883a 	mov	r21,zero
 8011cd8:	003eb406 	br	80117ac <__divdf3+0x228>
 8011cdc:	d9800215 	stw	r6,8(sp)
 8011ce0:	d9c00515 	stw	r7,20(sp)
 8011ce4:	da000415 	stw	r8,16(sp)
 8011ce8:	80061240 	call	8006124 <__clzsi2>
 8011cec:	10800804 	addi	r2,r2,32
 8011cf0:	da000417 	ldw	r8,16(sp)
 8011cf4:	d9c00517 	ldw	r7,20(sp)
 8011cf8:	d9800217 	ldw	r6,8(sp)
 8011cfc:	003ea106 	br	8011784 <__divdf3+0x200>
 8011d00:	147ff604 	addi	r17,r2,-40
 8011d04:	3462983a 	sll	r17,r6,r17
 8011d08:	0029883a 	mov	r20,zero
 8011d0c:	003ec906 	br	8011834 <__divdf3+0x2b0>
 8011d10:	3009883a 	mov	r4,r6
 8011d14:	d9400115 	stw	r5,4(sp)
 8011d18:	d9800215 	stw	r6,8(sp)
 8011d1c:	da000415 	stw	r8,16(sp)
 8011d20:	da400315 	stw	r9,12(sp)
 8011d24:	80061240 	call	8006124 <__clzsi2>
 8011d28:	10800804 	addi	r2,r2,32
 8011d2c:	da400317 	ldw	r9,12(sp)
 8011d30:	da000417 	ldw	r8,16(sp)
 8011d34:	d9800217 	ldw	r6,8(sp)
 8011d38:	d9400117 	ldw	r5,4(sp)
 8011d3c:	003eb306 	br	801180c <__divdf3+0x288>
 8011d40:	d9800017 	ldw	r6,0(sp)
 8011d44:	a9ab883a 	add	r21,r21,r6
 8011d48:	a98b803a 	cmpltu	r5,r21,r6
 8011d4c:	2d8b883a 	add	r5,r5,r22
 8011d50:	2a11883a 	add	r8,r5,r8
 8011d54:	897fffc4 	addi	r5,r17,-1
 8011d58:	b2000c2e 	bgeu	r22,r8,8011d8c <__divdf3+0x808>
 8011d5c:	41003f36 	bltu	r8,r4,8011e5c <__divdf3+0x8d8>
 8011d60:	22006c26 	beq	r4,r8,8011f14 <__divdf3+0x990>
 8011d64:	4109c83a 	sub	r4,r8,r4
 8011d68:	2823883a 	mov	r17,r5
 8011d6c:	003f3b06 	br	8011a5c <__divdf3+0x4d8>
 8011d70:	ad3ed336 	bltu	r21,r20,80118c0 <__divdf3+0x33c>
 8011d74:	a804d07a 	srli	r2,r21,1
 8011d78:	802e97fa 	slli	r23,r16,31
 8011d7c:	a82a97fa 	slli	r21,r21,31
 8011d80:	8020d07a 	srli	r16,r16,1
 8011d84:	b8aeb03a 	or	r23,r23,r2
 8011d88:	003ed006 	br	80118cc <__divdf3+0x348>
 8011d8c:	b23ff51e 	bne	r22,r8,8011d64 <__divdf3+0x7e0>
 8011d90:	d9800017 	ldw	r6,0(sp)
 8011d94:	a9bff12e 	bgeu	r21,r6,8011d5c <__divdf3+0x7d8>
 8011d98:	b109c83a 	sub	r4,r22,r4
 8011d9c:	2823883a 	mov	r17,r5
 8011da0:	003f2e06 	br	8011a5c <__divdf3+0x4d8>
 8011da4:	2021883a 	mov	r16,r4
 8011da8:	003eff06 	br	80119a8 <__divdf3+0x424>
 8011dac:	2023883a 	mov	r17,r4
 8011db0:	003ee406 	br	8011944 <__divdf3+0x3c0>
 8011db4:	a8bfe236 	bltu	r21,r2,8011d40 <__divdf3+0x7bc>
 8011db8:	0009883a 	mov	r4,zero
 8011dbc:	003f2706 	br	8011a5c <__divdf3+0x4d8>
 8011dc0:	81002d36 	bltu	r16,r4,8011e78 <__divdf3+0x8f4>
 8011dc4:	24005626 	beq	r4,r16,8011f20 <__divdf3+0x99c>
 8011dc8:	2829883a 	mov	r20,r5
 8011dcc:	003f8006 	br	8011bd0 <__divdf3+0x64c>
 8011dd0:	053fffc4 	movi	r20,-1
 8011dd4:	003f7f06 	br	8011bd4 <__divdf3+0x650>
 8011dd8:	200f883a 	mov	r7,r4
 8011ddc:	003f3c06 	br	8011ad0 <__divdf3+0x54c>
 8011de0:	1011883a 	mov	r8,r2
 8011de4:	003f5506 	br	8011b3c <__divdf3+0x5b8>
 8011de8:	e027883a 	mov	r19,fp
 8011dec:	003f7906 	br	8011bd4 <__divdf3+0x650>
 8011df0:	010007c4 	movi	r4,31
 8011df4:	20c02816 	blt	r4,r3,8011e98 <__divdf3+0x914>
 8011df8:	00800804 	movi	r2,32
 8011dfc:	10c5c83a 	sub	r2,r2,r3
 8011e00:	888a983a 	sll	r5,r17,r2
 8011e04:	a0c8d83a 	srl	r4,r20,r3
 8011e08:	a084983a 	sll	r2,r20,r2
 8011e0c:	88e2d83a 	srl	r17,r17,r3
 8011e10:	2906b03a 	or	r3,r5,r4
 8011e14:	1004c03a 	cmpne	r2,r2,zero
 8011e18:	1886b03a 	or	r3,r3,r2
 8011e1c:	188001cc 	andi	r2,r3,7
 8011e20:	10000726 	beq	r2,zero,8011e40 <__divdf3+0x8bc>
 8011e24:	188003cc 	andi	r2,r3,15
 8011e28:	01000104 	movi	r4,4
 8011e2c:	11000426 	beq	r2,r4,8011e40 <__divdf3+0x8bc>
 8011e30:	1805883a 	mov	r2,r3
 8011e34:	10c00104 	addi	r3,r2,4
 8011e38:	1885803a 	cmpltu	r2,r3,r2
 8011e3c:	88a3883a 	add	r17,r17,r2
 8011e40:	8880202c 	andhi	r2,r17,128
 8011e44:	10002926 	beq	r2,zero,8011eec <__divdf3+0x968>
 8011e48:	9900004c 	andi	r4,r19,1
 8011e4c:	00800044 	movi	r2,1
 8011e50:	0021883a 	mov	r16,zero
 8011e54:	002b883a 	mov	r21,zero
 8011e58:	003e2906 	br	8011700 <__divdf3+0x17c>
 8011e5c:	d9800017 	ldw	r6,0(sp)
 8011e60:	8c7fff84 	addi	r17,r17,-2
 8011e64:	a9ab883a 	add	r21,r21,r6
 8011e68:	a98b803a 	cmpltu	r5,r21,r6
 8011e6c:	2d8b883a 	add	r5,r5,r22
 8011e70:	2a11883a 	add	r8,r5,r8
 8011e74:	003ef806 	br	8011a58 <__divdf3+0x4d4>
 8011e78:	d9800017 	ldw	r6,0(sp)
 8011e7c:	318f883a 	add	r7,r6,r6
 8011e80:	398b803a 	cmpltu	r5,r7,r6
 8011e84:	2d8d883a 	add	r6,r5,r22
 8011e88:	81a1883a 	add	r16,r16,r6
 8011e8c:	a17fff84 	addi	r5,r20,-2
 8011e90:	d9c00015 	stw	r7,0(sp)
 8011e94:	003f8806 	br	8011cb8 <__divdf3+0x734>
 8011e98:	013ff844 	movi	r4,-31
 8011e9c:	2085c83a 	sub	r2,r4,r2
 8011ea0:	8888d83a 	srl	r4,r17,r2
 8011ea4:	00800804 	movi	r2,32
 8011ea8:	18802126 	beq	r3,r2,8011f30 <__divdf3+0x9ac>
 8011eac:	04001004 	movi	r16,64
 8011eb0:	80c7c83a 	sub	r3,r16,r3
 8011eb4:	88e0983a 	sll	r16,r17,r3
 8011eb8:	8504b03a 	or	r2,r16,r20
 8011ebc:	1004c03a 	cmpne	r2,r2,zero
 8011ec0:	2084b03a 	or	r2,r4,r2
 8011ec4:	144001cc 	andi	r17,r2,7
 8011ec8:	88000d1e 	bne	r17,zero,8011f00 <__divdf3+0x97c>
 8011ecc:	0021883a 	mov	r16,zero
 8011ed0:	102ad0fa 	srli	r21,r2,3
 8011ed4:	9900004c 	andi	r4,r19,1
 8011ed8:	0005883a 	mov	r2,zero
 8011edc:	ac6ab03a 	or	r21,r21,r17
 8011ee0:	003e0706 	br	8011700 <__divdf3+0x17c>
 8011ee4:	1007883a 	mov	r3,r2
 8011ee8:	0023883a 	mov	r17,zero
 8011eec:	8820927a 	slli	r16,r17,9
 8011ef0:	1805883a 	mov	r2,r3
 8011ef4:	8822977a 	slli	r17,r17,29
 8011ef8:	8020d33a 	srli	r16,r16,12
 8011efc:	003ff406 	br	8011ed0 <__divdf3+0x94c>
 8011f00:	10c003cc 	andi	r3,r2,15
 8011f04:	01000104 	movi	r4,4
 8011f08:	193ff626 	beq	r3,r4,8011ee4 <__divdf3+0x960>
 8011f0c:	0023883a 	mov	r17,zero
 8011f10:	003fc806 	br	8011e34 <__divdf3+0x8b0>
 8011f14:	a8bfd136 	bltu	r21,r2,8011e5c <__divdf3+0x8d8>
 8011f18:	2823883a 	mov	r17,r5
 8011f1c:	003fa606 	br	8011db8 <__divdf3+0x834>
 8011f20:	d9800017 	ldw	r6,0(sp)
 8011f24:	30bfd436 	bltu	r6,r2,8011e78 <__divdf3+0x8f4>
 8011f28:	2829883a 	mov	r20,r5
 8011f2c:	003f6406 	br	8011cc0 <__divdf3+0x73c>
 8011f30:	0021883a 	mov	r16,zero
 8011f34:	003fe006 	br	8011eb8 <__divdf3+0x934>
 8011f38:	00800434 	movhi	r2,16
 8011f3c:	8c000234 	orhi	r16,r17,8
 8011f40:	10bfffc4 	addi	r2,r2,-1
 8011f44:	e009883a 	mov	r4,fp
 8011f48:	80a0703a 	and	r16,r16,r2
 8011f4c:	a02b883a 	mov	r21,r20
 8011f50:	003e4e06 	br	801188c <__divdf3+0x308>

08011f54 <__eqdf2>:
 8011f54:	2804d53a 	srli	r2,r5,20
 8011f58:	3806d53a 	srli	r3,r7,20
 8011f5c:	02000434 	movhi	r8,16
 8011f60:	423fffc4 	addi	r8,r8,-1
 8011f64:	1081ffcc 	andi	r2,r2,2047
 8011f68:	0281ffc4 	movi	r10,2047
 8011f6c:	2a12703a 	and	r9,r5,r8
 8011f70:	18c1ffcc 	andi	r3,r3,2047
 8011f74:	3a10703a 	and	r8,r7,r8
 8011f78:	280ad7fa 	srli	r5,r5,31
 8011f7c:	380ed7fa 	srli	r7,r7,31
 8011f80:	12801026 	beq	r2,r10,8011fc4 <__eqdf2+0x70>
 8011f84:	0281ffc4 	movi	r10,2047
 8011f88:	1a800a26 	beq	r3,r10,8011fb4 <__eqdf2+0x60>
 8011f8c:	10c00226 	beq	r2,r3,8011f98 <__eqdf2+0x44>
 8011f90:	00800044 	movi	r2,1
 8011f94:	f800283a 	ret
 8011f98:	4a3ffd1e 	bne	r9,r8,8011f90 <__eqdf2+0x3c>
 8011f9c:	21bffc1e 	bne	r4,r6,8011f90 <__eqdf2+0x3c>
 8011fa0:	29c00c26 	beq	r5,r7,8011fd4 <__eqdf2+0x80>
 8011fa4:	103ffa1e 	bne	r2,zero,8011f90 <__eqdf2+0x3c>
 8011fa8:	2244b03a 	or	r2,r4,r9
 8011fac:	1004c03a 	cmpne	r2,r2,zero
 8011fb0:	f800283a 	ret
 8011fb4:	3214b03a 	or	r10,r6,r8
 8011fb8:	503ff426 	beq	r10,zero,8011f8c <__eqdf2+0x38>
 8011fbc:	00800044 	movi	r2,1
 8011fc0:	f800283a 	ret
 8011fc4:	2254b03a 	or	r10,r4,r9
 8011fc8:	503fee26 	beq	r10,zero,8011f84 <__eqdf2+0x30>
 8011fcc:	00800044 	movi	r2,1
 8011fd0:	f800283a 	ret
 8011fd4:	0005883a 	mov	r2,zero
 8011fd8:	f800283a 	ret

08011fdc <__ledf2>:
 8011fdc:	2804d53a 	srli	r2,r5,20
 8011fe0:	3810d53a 	srli	r8,r7,20
 8011fe4:	00c00434 	movhi	r3,16
 8011fe8:	18ffffc4 	addi	r3,r3,-1
 8011fec:	1081ffcc 	andi	r2,r2,2047
 8011ff0:	0241ffc4 	movi	r9,2047
 8011ff4:	28d4703a 	and	r10,r5,r3
 8011ff8:	4201ffcc 	andi	r8,r8,2047
 8011ffc:	38c6703a 	and	r3,r7,r3
 8012000:	280ad7fa 	srli	r5,r5,31
 8012004:	380ed7fa 	srli	r7,r7,31
 8012008:	12401f26 	beq	r2,r9,8012088 <__ledf2+0xac>
 801200c:	0241ffc4 	movi	r9,2047
 8012010:	42401426 	beq	r8,r9,8012064 <__ledf2+0x88>
 8012014:	1000091e 	bne	r2,zero,801203c <__ledf2+0x60>
 8012018:	2296b03a 	or	r11,r4,r10
 801201c:	5813003a 	cmpeq	r9,r11,zero
 8012020:	29403fcc 	andi	r5,r5,255
 8012024:	40000a1e 	bne	r8,zero,8012050 <__ledf2+0x74>
 8012028:	30d8b03a 	or	r12,r6,r3
 801202c:	6000081e 	bne	r12,zero,8012050 <__ledf2+0x74>
 8012030:	0005883a 	mov	r2,zero
 8012034:	5800111e 	bne	r11,zero,801207c <__ledf2+0xa0>
 8012038:	f800283a 	ret
 801203c:	29403fcc 	andi	r5,r5,255
 8012040:	40000c1e 	bne	r8,zero,8012074 <__ledf2+0x98>
 8012044:	30d2b03a 	or	r9,r6,r3
 8012048:	48000c26 	beq	r9,zero,801207c <__ledf2+0xa0>
 801204c:	0013883a 	mov	r9,zero
 8012050:	39c03fcc 	andi	r7,r7,255
 8012054:	48000826 	beq	r9,zero,8012078 <__ledf2+0x9c>
 8012058:	38001126 	beq	r7,zero,80120a0 <__ledf2+0xc4>
 801205c:	00800044 	movi	r2,1
 8012060:	f800283a 	ret
 8012064:	30d2b03a 	or	r9,r6,r3
 8012068:	483fea26 	beq	r9,zero,8012014 <__ledf2+0x38>
 801206c:	00800084 	movi	r2,2
 8012070:	f800283a 	ret
 8012074:	39c03fcc 	andi	r7,r7,255
 8012078:	39400726 	beq	r7,r5,8012098 <__ledf2+0xbc>
 801207c:	2800081e 	bne	r5,zero,80120a0 <__ledf2+0xc4>
 8012080:	00800044 	movi	r2,1
 8012084:	f800283a 	ret
 8012088:	2292b03a 	or	r9,r4,r10
 801208c:	483fdf26 	beq	r9,zero,801200c <__ledf2+0x30>
 8012090:	00800084 	movi	r2,2
 8012094:	f800283a 	ret
 8012098:	4080030e 	bge	r8,r2,80120a8 <__ledf2+0xcc>
 801209c:	383fef26 	beq	r7,zero,801205c <__ledf2+0x80>
 80120a0:	00bfffc4 	movi	r2,-1
 80120a4:	f800283a 	ret
 80120a8:	123feb16 	blt	r2,r8,8012058 <__ledf2+0x7c>
 80120ac:	1abff336 	bltu	r3,r10,801207c <__ledf2+0xa0>
 80120b0:	50c00326 	beq	r10,r3,80120c0 <__ledf2+0xe4>
 80120b4:	50c0042e 	bgeu	r10,r3,80120c8 <__ledf2+0xec>
 80120b8:	283fe81e 	bne	r5,zero,801205c <__ledf2+0x80>
 80120bc:	003ff806 	br	80120a0 <__ledf2+0xc4>
 80120c0:	313fee36 	bltu	r6,r4,801207c <__ledf2+0xa0>
 80120c4:	21bffc36 	bltu	r4,r6,80120b8 <__ledf2+0xdc>
 80120c8:	0005883a 	mov	r2,zero
 80120cc:	f800283a 	ret

080120d0 <__subdf3>:
 80120d0:	02000434 	movhi	r8,16
 80120d4:	423fffc4 	addi	r8,r8,-1
 80120d8:	defffb04 	addi	sp,sp,-20
 80120dc:	2a14703a 	and	r10,r5,r8
 80120e0:	3812d53a 	srli	r9,r7,20
 80120e4:	3a10703a 	and	r8,r7,r8
 80120e8:	2006d77a 	srli	r3,r4,29
 80120ec:	3004d77a 	srli	r2,r6,29
 80120f0:	dc000015 	stw	r16,0(sp)
 80120f4:	501490fa 	slli	r10,r10,3
 80120f8:	2820d53a 	srli	r16,r5,20
 80120fc:	401090fa 	slli	r8,r8,3
 8012100:	dc800215 	stw	r18,8(sp)
 8012104:	dc400115 	stw	r17,4(sp)
 8012108:	dfc00415 	stw	ra,16(sp)
 801210c:	202290fa 	slli	r17,r4,3
 8012110:	dcc00315 	stw	r19,12(sp)
 8012114:	4a41ffcc 	andi	r9,r9,2047
 8012118:	0101ffc4 	movi	r4,2047
 801211c:	2824d7fa 	srli	r18,r5,31
 8012120:	8401ffcc 	andi	r16,r16,2047
 8012124:	50c6b03a 	or	r3,r10,r3
 8012128:	380ed7fa 	srli	r7,r7,31
 801212c:	408ab03a 	or	r5,r8,r2
 8012130:	300c90fa 	slli	r6,r6,3
 8012134:	49009626 	beq	r9,r4,8012390 <__subdf3+0x2c0>
 8012138:	39c0005c 	xori	r7,r7,1
 801213c:	8245c83a 	sub	r2,r16,r9
 8012140:	3c807426 	beq	r7,r18,8012314 <__subdf3+0x244>
 8012144:	0080af0e 	bge	zero,r2,8012404 <__subdf3+0x334>
 8012148:	48002a1e 	bne	r9,zero,80121f4 <__subdf3+0x124>
 801214c:	2988b03a 	or	r4,r5,r6
 8012150:	20009a1e 	bne	r4,zero,80123bc <__subdf3+0x2ec>
 8012154:	888001cc 	andi	r2,r17,7
 8012158:	10000726 	beq	r2,zero,8012178 <__subdf3+0xa8>
 801215c:	888003cc 	andi	r2,r17,15
 8012160:	01000104 	movi	r4,4
 8012164:	11000426 	beq	r2,r4,8012178 <__subdf3+0xa8>
 8012168:	890b883a 	add	r5,r17,r4
 801216c:	2c63803a 	cmpltu	r17,r5,r17
 8012170:	1c47883a 	add	r3,r3,r17
 8012174:	2823883a 	mov	r17,r5
 8012178:	1880202c 	andhi	r2,r3,128
 801217c:	10005926 	beq	r2,zero,80122e4 <__subdf3+0x214>
 8012180:	84000044 	addi	r16,r16,1
 8012184:	0081ffc4 	movi	r2,2047
 8012188:	8080be26 	beq	r16,r2,8012484 <__subdf3+0x3b4>
 801218c:	017fe034 	movhi	r5,65408
 8012190:	297fffc4 	addi	r5,r5,-1
 8012194:	1946703a 	and	r3,r3,r5
 8012198:	1804977a 	slli	r2,r3,29
 801219c:	1806927a 	slli	r3,r3,9
 80121a0:	8822d0fa 	srli	r17,r17,3
 80121a4:	8401ffcc 	andi	r16,r16,2047
 80121a8:	180ad33a 	srli	r5,r3,12
 80121ac:	9100004c 	andi	r4,r18,1
 80121b0:	1444b03a 	or	r2,r2,r17
 80121b4:	80c1ffcc 	andi	r3,r16,2047
 80121b8:	1820953a 	slli	r16,r3,20
 80121bc:	20c03fcc 	andi	r3,r4,255
 80121c0:	180897fa 	slli	r4,r3,31
 80121c4:	00c00434 	movhi	r3,16
 80121c8:	18ffffc4 	addi	r3,r3,-1
 80121cc:	28c6703a 	and	r3,r5,r3
 80121d0:	1c06b03a 	or	r3,r3,r16
 80121d4:	1906b03a 	or	r3,r3,r4
 80121d8:	dfc00417 	ldw	ra,16(sp)
 80121dc:	dcc00317 	ldw	r19,12(sp)
 80121e0:	dc800217 	ldw	r18,8(sp)
 80121e4:	dc400117 	ldw	r17,4(sp)
 80121e8:	dc000017 	ldw	r16,0(sp)
 80121ec:	dec00504 	addi	sp,sp,20
 80121f0:	f800283a 	ret
 80121f4:	0101ffc4 	movi	r4,2047
 80121f8:	813fd626 	beq	r16,r4,8012154 <__subdf3+0x84>
 80121fc:	29402034 	orhi	r5,r5,128
 8012200:	01000e04 	movi	r4,56
 8012204:	2080a316 	blt	r4,r2,8012494 <__subdf3+0x3c4>
 8012208:	010007c4 	movi	r4,31
 801220c:	2080c616 	blt	r4,r2,8012528 <__subdf3+0x458>
 8012210:	01000804 	movi	r4,32
 8012214:	2089c83a 	sub	r4,r4,r2
 8012218:	2910983a 	sll	r8,r5,r4
 801221c:	308ed83a 	srl	r7,r6,r2
 8012220:	3108983a 	sll	r4,r6,r4
 8012224:	2884d83a 	srl	r2,r5,r2
 8012228:	41ccb03a 	or	r6,r8,r7
 801222c:	2008c03a 	cmpne	r4,r4,zero
 8012230:	310cb03a 	or	r6,r6,r4
 8012234:	898dc83a 	sub	r6,r17,r6
 8012238:	89a3803a 	cmpltu	r17,r17,r6
 801223c:	1887c83a 	sub	r3,r3,r2
 8012240:	1c47c83a 	sub	r3,r3,r17
 8012244:	3023883a 	mov	r17,r6
 8012248:	1880202c 	andhi	r2,r3,128
 801224c:	10002326 	beq	r2,zero,80122dc <__subdf3+0x20c>
 8012250:	04c02034 	movhi	r19,128
 8012254:	9cffffc4 	addi	r19,r19,-1
 8012258:	1ce6703a 	and	r19,r3,r19
 801225c:	98007a26 	beq	r19,zero,8012448 <__subdf3+0x378>
 8012260:	9809883a 	mov	r4,r19
 8012264:	80061240 	call	8006124 <__clzsi2>
 8012268:	113ffe04 	addi	r4,r2,-8
 801226c:	00c007c4 	movi	r3,31
 8012270:	19007b16 	blt	r3,r4,8012460 <__subdf3+0x390>
 8012274:	00800804 	movi	r2,32
 8012278:	1105c83a 	sub	r2,r2,r4
 801227c:	8884d83a 	srl	r2,r17,r2
 8012280:	9906983a 	sll	r3,r19,r4
 8012284:	8922983a 	sll	r17,r17,r4
 8012288:	10c4b03a 	or	r2,r2,r3
 801228c:	24007816 	blt	r4,r16,8012470 <__subdf3+0x3a0>
 8012290:	2421c83a 	sub	r16,r4,r16
 8012294:	80c00044 	addi	r3,r16,1
 8012298:	010007c4 	movi	r4,31
 801229c:	20c09516 	blt	r4,r3,80124f4 <__subdf3+0x424>
 80122a0:	01400804 	movi	r5,32
 80122a4:	28cbc83a 	sub	r5,r5,r3
 80122a8:	88c8d83a 	srl	r4,r17,r3
 80122ac:	8962983a 	sll	r17,r17,r5
 80122b0:	114a983a 	sll	r5,r2,r5
 80122b4:	10c6d83a 	srl	r3,r2,r3
 80122b8:	8804c03a 	cmpne	r2,r17,zero
 80122bc:	290ab03a 	or	r5,r5,r4
 80122c0:	28a2b03a 	or	r17,r5,r2
 80122c4:	0021883a 	mov	r16,zero
 80122c8:	003fa206 	br	8012154 <__subdf3+0x84>
 80122cc:	2090b03a 	or	r8,r4,r2
 80122d0:	40018e26 	beq	r8,zero,801290c <__subdf3+0x83c>
 80122d4:	1007883a 	mov	r3,r2
 80122d8:	2023883a 	mov	r17,r4
 80122dc:	888001cc 	andi	r2,r17,7
 80122e0:	103f9e1e 	bne	r2,zero,801215c <__subdf3+0x8c>
 80122e4:	1804977a 	slli	r2,r3,29
 80122e8:	8822d0fa 	srli	r17,r17,3
 80122ec:	1810d0fa 	srli	r8,r3,3
 80122f0:	9100004c 	andi	r4,r18,1
 80122f4:	1444b03a 	or	r2,r2,r17
 80122f8:	00c1ffc4 	movi	r3,2047
 80122fc:	80c02826 	beq	r16,r3,80123a0 <__subdf3+0x2d0>
 8012300:	01400434 	movhi	r5,16
 8012304:	297fffc4 	addi	r5,r5,-1
 8012308:	80e0703a 	and	r16,r16,r3
 801230c:	414a703a 	and	r5,r8,r5
 8012310:	003fa806 	br	80121b4 <__subdf3+0xe4>
 8012314:	0080630e 	bge	zero,r2,80124a4 <__subdf3+0x3d4>
 8012318:	48003026 	beq	r9,zero,80123dc <__subdf3+0x30c>
 801231c:	0101ffc4 	movi	r4,2047
 8012320:	813f8c26 	beq	r16,r4,8012154 <__subdf3+0x84>
 8012324:	29402034 	orhi	r5,r5,128
 8012328:	01000e04 	movi	r4,56
 801232c:	2080a90e 	bge	r4,r2,80125d4 <__subdf3+0x504>
 8012330:	298cb03a 	or	r6,r5,r6
 8012334:	3012c03a 	cmpne	r9,r6,zero
 8012338:	0005883a 	mov	r2,zero
 801233c:	4c53883a 	add	r9,r9,r17
 8012340:	4c63803a 	cmpltu	r17,r9,r17
 8012344:	10c7883a 	add	r3,r2,r3
 8012348:	88c7883a 	add	r3,r17,r3
 801234c:	4823883a 	mov	r17,r9
 8012350:	1880202c 	andhi	r2,r3,128
 8012354:	1000d026 	beq	r2,zero,8012698 <__subdf3+0x5c8>
 8012358:	84000044 	addi	r16,r16,1
 801235c:	0081ffc4 	movi	r2,2047
 8012360:	8080fe26 	beq	r16,r2,801275c <__subdf3+0x68c>
 8012364:	00bfe034 	movhi	r2,65408
 8012368:	10bfffc4 	addi	r2,r2,-1
 801236c:	1886703a 	and	r3,r3,r2
 8012370:	880ad07a 	srli	r5,r17,1
 8012374:	180497fa 	slli	r2,r3,31
 8012378:	8900004c 	andi	r4,r17,1
 801237c:	2922b03a 	or	r17,r5,r4
 8012380:	1806d07a 	srli	r3,r3,1
 8012384:	1462b03a 	or	r17,r2,r17
 8012388:	3825883a 	mov	r18,r7
 801238c:	003f7106 	br	8012154 <__subdf3+0x84>
 8012390:	2984b03a 	or	r2,r5,r6
 8012394:	103f6826 	beq	r2,zero,8012138 <__subdf3+0x68>
 8012398:	39c03fcc 	andi	r7,r7,255
 801239c:	003f6706 	br	801213c <__subdf3+0x6c>
 80123a0:	4086b03a 	or	r3,r8,r2
 80123a4:	18015226 	beq	r3,zero,80128f0 <__subdf3+0x820>
 80123a8:	00c00434 	movhi	r3,16
 80123ac:	41400234 	orhi	r5,r8,8
 80123b0:	18ffffc4 	addi	r3,r3,-1
 80123b4:	28ca703a 	and	r5,r5,r3
 80123b8:	003f7e06 	br	80121b4 <__subdf3+0xe4>
 80123bc:	10bfffc4 	addi	r2,r2,-1
 80123c0:	1000491e 	bne	r2,zero,80124e8 <__subdf3+0x418>
 80123c4:	898fc83a 	sub	r7,r17,r6
 80123c8:	89e3803a 	cmpltu	r17,r17,r7
 80123cc:	1947c83a 	sub	r3,r3,r5
 80123d0:	1c47c83a 	sub	r3,r3,r17
 80123d4:	3823883a 	mov	r17,r7
 80123d8:	003f9b06 	br	8012248 <__subdf3+0x178>
 80123dc:	2988b03a 	or	r4,r5,r6
 80123e0:	203f5c26 	beq	r4,zero,8012154 <__subdf3+0x84>
 80123e4:	10bfffc4 	addi	r2,r2,-1
 80123e8:	1000931e 	bne	r2,zero,8012638 <__subdf3+0x568>
 80123ec:	898d883a 	add	r6,r17,r6
 80123f0:	3463803a 	cmpltu	r17,r6,r17
 80123f4:	1947883a 	add	r3,r3,r5
 80123f8:	88c7883a 	add	r3,r17,r3
 80123fc:	3023883a 	mov	r17,r6
 8012400:	003fd306 	br	8012350 <__subdf3+0x280>
 8012404:	1000541e 	bne	r2,zero,8012558 <__subdf3+0x488>
 8012408:	80800044 	addi	r2,r16,1
 801240c:	1081ffcc 	andi	r2,r2,2047
 8012410:	01000044 	movi	r4,1
 8012414:	2080a20e 	bge	r4,r2,80126a0 <__subdf3+0x5d0>
 8012418:	8989c83a 	sub	r4,r17,r6
 801241c:	8905803a 	cmpltu	r2,r17,r4
 8012420:	1967c83a 	sub	r19,r3,r5
 8012424:	98a7c83a 	sub	r19,r19,r2
 8012428:	9880202c 	andhi	r2,r19,128
 801242c:	10006326 	beq	r2,zero,80125bc <__subdf3+0x4ec>
 8012430:	3463c83a 	sub	r17,r6,r17
 8012434:	28c7c83a 	sub	r3,r5,r3
 8012438:	344d803a 	cmpltu	r6,r6,r17
 801243c:	19a7c83a 	sub	r19,r3,r6
 8012440:	3825883a 	mov	r18,r7
 8012444:	983f861e 	bne	r19,zero,8012260 <__subdf3+0x190>
 8012448:	8809883a 	mov	r4,r17
 801244c:	80061240 	call	8006124 <__clzsi2>
 8012450:	10800804 	addi	r2,r2,32
 8012454:	113ffe04 	addi	r4,r2,-8
 8012458:	00c007c4 	movi	r3,31
 801245c:	193f850e 	bge	r3,r4,8012274 <__subdf3+0x1a4>
 8012460:	10bff604 	addi	r2,r2,-40
 8012464:	8884983a 	sll	r2,r17,r2
 8012468:	0023883a 	mov	r17,zero
 801246c:	243f880e 	bge	r4,r16,8012290 <__subdf3+0x1c0>
 8012470:	00ffe034 	movhi	r3,65408
 8012474:	18ffffc4 	addi	r3,r3,-1
 8012478:	8121c83a 	sub	r16,r16,r4
 801247c:	10c6703a 	and	r3,r2,r3
 8012480:	003f3406 	br	8012154 <__subdf3+0x84>
 8012484:	9100004c 	andi	r4,r18,1
 8012488:	000b883a 	mov	r5,zero
 801248c:	0005883a 	mov	r2,zero
 8012490:	003f4806 	br	80121b4 <__subdf3+0xe4>
 8012494:	298cb03a 	or	r6,r5,r6
 8012498:	300cc03a 	cmpne	r6,r6,zero
 801249c:	0005883a 	mov	r2,zero
 80124a0:	003f6406 	br	8012234 <__subdf3+0x164>
 80124a4:	10009a1e 	bne	r2,zero,8012710 <__subdf3+0x640>
 80124a8:	82400044 	addi	r9,r16,1
 80124ac:	4881ffcc 	andi	r2,r9,2047
 80124b0:	02800044 	movi	r10,1
 80124b4:	5080670e 	bge	r10,r2,8012654 <__subdf3+0x584>
 80124b8:	0081ffc4 	movi	r2,2047
 80124bc:	4880af26 	beq	r9,r2,801277c <__subdf3+0x6ac>
 80124c0:	898d883a 	add	r6,r17,r6
 80124c4:	1945883a 	add	r2,r3,r5
 80124c8:	3447803a 	cmpltu	r3,r6,r17
 80124cc:	1887883a 	add	r3,r3,r2
 80124d0:	182297fa 	slli	r17,r3,31
 80124d4:	300cd07a 	srli	r6,r6,1
 80124d8:	1806d07a 	srli	r3,r3,1
 80124dc:	4821883a 	mov	r16,r9
 80124e0:	89a2b03a 	or	r17,r17,r6
 80124e4:	003f1b06 	br	8012154 <__subdf3+0x84>
 80124e8:	0101ffc4 	movi	r4,2047
 80124ec:	813f441e 	bne	r16,r4,8012200 <__subdf3+0x130>
 80124f0:	003f1806 	br	8012154 <__subdf3+0x84>
 80124f4:	843ff844 	addi	r16,r16,-31
 80124f8:	01400804 	movi	r5,32
 80124fc:	1408d83a 	srl	r4,r2,r16
 8012500:	19405026 	beq	r3,r5,8012644 <__subdf3+0x574>
 8012504:	01401004 	movi	r5,64
 8012508:	28c7c83a 	sub	r3,r5,r3
 801250c:	10c4983a 	sll	r2,r2,r3
 8012510:	88a2b03a 	or	r17,r17,r2
 8012514:	8822c03a 	cmpne	r17,r17,zero
 8012518:	2462b03a 	or	r17,r4,r17
 801251c:	0007883a 	mov	r3,zero
 8012520:	0021883a 	mov	r16,zero
 8012524:	003f6d06 	br	80122dc <__subdf3+0x20c>
 8012528:	11fff804 	addi	r7,r2,-32
 801252c:	01000804 	movi	r4,32
 8012530:	29ced83a 	srl	r7,r5,r7
 8012534:	11004526 	beq	r2,r4,801264c <__subdf3+0x57c>
 8012538:	01001004 	movi	r4,64
 801253c:	2089c83a 	sub	r4,r4,r2
 8012540:	2904983a 	sll	r2,r5,r4
 8012544:	118cb03a 	or	r6,r2,r6
 8012548:	300cc03a 	cmpne	r6,r6,zero
 801254c:	398cb03a 	or	r6,r7,r6
 8012550:	0005883a 	mov	r2,zero
 8012554:	003f3706 	br	8012234 <__subdf3+0x164>
 8012558:	80002a26 	beq	r16,zero,8012604 <__subdf3+0x534>
 801255c:	0101ffc4 	movi	r4,2047
 8012560:	49006626 	beq	r9,r4,80126fc <__subdf3+0x62c>
 8012564:	0085c83a 	sub	r2,zero,r2
 8012568:	18c02034 	orhi	r3,r3,128
 801256c:	01000e04 	movi	r4,56
 8012570:	20807e16 	blt	r4,r2,801276c <__subdf3+0x69c>
 8012574:	010007c4 	movi	r4,31
 8012578:	2080e716 	blt	r4,r2,8012918 <__subdf3+0x848>
 801257c:	01000804 	movi	r4,32
 8012580:	2089c83a 	sub	r4,r4,r2
 8012584:	1914983a 	sll	r10,r3,r4
 8012588:	8890d83a 	srl	r8,r17,r2
 801258c:	8908983a 	sll	r4,r17,r4
 8012590:	1884d83a 	srl	r2,r3,r2
 8012594:	5222b03a 	or	r17,r10,r8
 8012598:	2006c03a 	cmpne	r3,r4,zero
 801259c:	88e2b03a 	or	r17,r17,r3
 80125a0:	3463c83a 	sub	r17,r6,r17
 80125a4:	2885c83a 	sub	r2,r5,r2
 80125a8:	344d803a 	cmpltu	r6,r6,r17
 80125ac:	1187c83a 	sub	r3,r2,r6
 80125b0:	4821883a 	mov	r16,r9
 80125b4:	3825883a 	mov	r18,r7
 80125b8:	003f2306 	br	8012248 <__subdf3+0x178>
 80125bc:	24d0b03a 	or	r8,r4,r19
 80125c0:	40001b1e 	bne	r8,zero,8012630 <__subdf3+0x560>
 80125c4:	0005883a 	mov	r2,zero
 80125c8:	0009883a 	mov	r4,zero
 80125cc:	0021883a 	mov	r16,zero
 80125d0:	003f4906 	br	80122f8 <__subdf3+0x228>
 80125d4:	010007c4 	movi	r4,31
 80125d8:	20803a16 	blt	r4,r2,80126c4 <__subdf3+0x5f4>
 80125dc:	01000804 	movi	r4,32
 80125e0:	2089c83a 	sub	r4,r4,r2
 80125e4:	2912983a 	sll	r9,r5,r4
 80125e8:	3090d83a 	srl	r8,r6,r2
 80125ec:	3108983a 	sll	r4,r6,r4
 80125f0:	2884d83a 	srl	r2,r5,r2
 80125f4:	4a12b03a 	or	r9,r9,r8
 80125f8:	2008c03a 	cmpne	r4,r4,zero
 80125fc:	4912b03a 	or	r9,r9,r4
 8012600:	003f4e06 	br	801233c <__subdf3+0x26c>
 8012604:	1c48b03a 	or	r4,r3,r17
 8012608:	20003c26 	beq	r4,zero,80126fc <__subdf3+0x62c>
 801260c:	0084303a 	nor	r2,zero,r2
 8012610:	1000381e 	bne	r2,zero,80126f4 <__subdf3+0x624>
 8012614:	3463c83a 	sub	r17,r6,r17
 8012618:	28c5c83a 	sub	r2,r5,r3
 801261c:	344d803a 	cmpltu	r6,r6,r17
 8012620:	1187c83a 	sub	r3,r2,r6
 8012624:	4821883a 	mov	r16,r9
 8012628:	3825883a 	mov	r18,r7
 801262c:	003f0606 	br	8012248 <__subdf3+0x178>
 8012630:	2023883a 	mov	r17,r4
 8012634:	003f0906 	br	801225c <__subdf3+0x18c>
 8012638:	0101ffc4 	movi	r4,2047
 801263c:	813f3a1e 	bne	r16,r4,8012328 <__subdf3+0x258>
 8012640:	003ec406 	br	8012154 <__subdf3+0x84>
 8012644:	0005883a 	mov	r2,zero
 8012648:	003fb106 	br	8012510 <__subdf3+0x440>
 801264c:	0005883a 	mov	r2,zero
 8012650:	003fbc06 	br	8012544 <__subdf3+0x474>
 8012654:	1c44b03a 	or	r2,r3,r17
 8012658:	80008e1e 	bne	r16,zero,8012894 <__subdf3+0x7c4>
 801265c:	1000c826 	beq	r2,zero,8012980 <__subdf3+0x8b0>
 8012660:	2984b03a 	or	r2,r5,r6
 8012664:	103ebb26 	beq	r2,zero,8012154 <__subdf3+0x84>
 8012668:	8989883a 	add	r4,r17,r6
 801266c:	1945883a 	add	r2,r3,r5
 8012670:	2447803a 	cmpltu	r3,r4,r17
 8012674:	1887883a 	add	r3,r3,r2
 8012678:	1880202c 	andhi	r2,r3,128
 801267c:	2023883a 	mov	r17,r4
 8012680:	103f1626 	beq	r2,zero,80122dc <__subdf3+0x20c>
 8012684:	00bfe034 	movhi	r2,65408
 8012688:	10bfffc4 	addi	r2,r2,-1
 801268c:	5021883a 	mov	r16,r10
 8012690:	1886703a 	and	r3,r3,r2
 8012694:	003eaf06 	br	8012154 <__subdf3+0x84>
 8012698:	3825883a 	mov	r18,r7
 801269c:	003f0f06 	br	80122dc <__subdf3+0x20c>
 80126a0:	1c44b03a 	or	r2,r3,r17
 80126a4:	8000251e 	bne	r16,zero,801273c <__subdf3+0x66c>
 80126a8:	1000661e 	bne	r2,zero,8012844 <__subdf3+0x774>
 80126ac:	2990b03a 	or	r8,r5,r6
 80126b0:	40009626 	beq	r8,zero,801290c <__subdf3+0x83c>
 80126b4:	2807883a 	mov	r3,r5
 80126b8:	3023883a 	mov	r17,r6
 80126bc:	3825883a 	mov	r18,r7
 80126c0:	003ea406 	br	8012154 <__subdf3+0x84>
 80126c4:	127ff804 	addi	r9,r2,-32
 80126c8:	01000804 	movi	r4,32
 80126cc:	2a52d83a 	srl	r9,r5,r9
 80126d0:	11008c26 	beq	r2,r4,8012904 <__subdf3+0x834>
 80126d4:	01001004 	movi	r4,64
 80126d8:	2085c83a 	sub	r2,r4,r2
 80126dc:	2884983a 	sll	r2,r5,r2
 80126e0:	118cb03a 	or	r6,r2,r6
 80126e4:	300cc03a 	cmpne	r6,r6,zero
 80126e8:	4992b03a 	or	r9,r9,r6
 80126ec:	0005883a 	mov	r2,zero
 80126f0:	003f1206 	br	801233c <__subdf3+0x26c>
 80126f4:	0101ffc4 	movi	r4,2047
 80126f8:	493f9c1e 	bne	r9,r4,801256c <__subdf3+0x49c>
 80126fc:	2807883a 	mov	r3,r5
 8012700:	3023883a 	mov	r17,r6
 8012704:	4821883a 	mov	r16,r9
 8012708:	3825883a 	mov	r18,r7
 801270c:	003e9106 	br	8012154 <__subdf3+0x84>
 8012710:	80001f1e 	bne	r16,zero,8012790 <__subdf3+0x6c0>
 8012714:	1c48b03a 	or	r4,r3,r17
 8012718:	20005a26 	beq	r4,zero,8012884 <__subdf3+0x7b4>
 801271c:	0084303a 	nor	r2,zero,r2
 8012720:	1000561e 	bne	r2,zero,801287c <__subdf3+0x7ac>
 8012724:	89a3883a 	add	r17,r17,r6
 8012728:	1945883a 	add	r2,r3,r5
 801272c:	898d803a 	cmpltu	r6,r17,r6
 8012730:	3087883a 	add	r3,r6,r2
 8012734:	4821883a 	mov	r16,r9
 8012738:	003f0506 	br	8012350 <__subdf3+0x280>
 801273c:	10002b1e 	bne	r2,zero,80127ec <__subdf3+0x71c>
 8012740:	2984b03a 	or	r2,r5,r6
 8012744:	10008026 	beq	r2,zero,8012948 <__subdf3+0x878>
 8012748:	2807883a 	mov	r3,r5
 801274c:	3023883a 	mov	r17,r6
 8012750:	3825883a 	mov	r18,r7
 8012754:	0401ffc4 	movi	r16,2047
 8012758:	003e7e06 	br	8012154 <__subdf3+0x84>
 801275c:	3809883a 	mov	r4,r7
 8012760:	0011883a 	mov	r8,zero
 8012764:	0005883a 	mov	r2,zero
 8012768:	003ee306 	br	80122f8 <__subdf3+0x228>
 801276c:	1c62b03a 	or	r17,r3,r17
 8012770:	8822c03a 	cmpne	r17,r17,zero
 8012774:	0005883a 	mov	r2,zero
 8012778:	003f8906 	br	80125a0 <__subdf3+0x4d0>
 801277c:	3809883a 	mov	r4,r7
 8012780:	4821883a 	mov	r16,r9
 8012784:	0011883a 	mov	r8,zero
 8012788:	0005883a 	mov	r2,zero
 801278c:	003eda06 	br	80122f8 <__subdf3+0x228>
 8012790:	0101ffc4 	movi	r4,2047
 8012794:	49003b26 	beq	r9,r4,8012884 <__subdf3+0x7b4>
 8012798:	0085c83a 	sub	r2,zero,r2
 801279c:	18c02034 	orhi	r3,r3,128
 80127a0:	01000e04 	movi	r4,56
 80127a4:	20806e16 	blt	r4,r2,8012960 <__subdf3+0x890>
 80127a8:	010007c4 	movi	r4,31
 80127ac:	20807716 	blt	r4,r2,801298c <__subdf3+0x8bc>
 80127b0:	01000804 	movi	r4,32
 80127b4:	2089c83a 	sub	r4,r4,r2
 80127b8:	1914983a 	sll	r10,r3,r4
 80127bc:	8890d83a 	srl	r8,r17,r2
 80127c0:	8908983a 	sll	r4,r17,r4
 80127c4:	1884d83a 	srl	r2,r3,r2
 80127c8:	5222b03a 	or	r17,r10,r8
 80127cc:	2006c03a 	cmpne	r3,r4,zero
 80127d0:	88e2b03a 	or	r17,r17,r3
 80127d4:	89a3883a 	add	r17,r17,r6
 80127d8:	1145883a 	add	r2,r2,r5
 80127dc:	898d803a 	cmpltu	r6,r17,r6
 80127e0:	3087883a 	add	r3,r6,r2
 80127e4:	4821883a 	mov	r16,r9
 80127e8:	003ed906 	br	8012350 <__subdf3+0x280>
 80127ec:	2984b03a 	or	r2,r5,r6
 80127f0:	10004226 	beq	r2,zero,80128fc <__subdf3+0x82c>
 80127f4:	1808d0fa 	srli	r4,r3,3
 80127f8:	8822d0fa 	srli	r17,r17,3
 80127fc:	1806977a 	slli	r3,r3,29
 8012800:	2080022c 	andhi	r2,r4,8
 8012804:	1c62b03a 	or	r17,r3,r17
 8012808:	10000826 	beq	r2,zero,801282c <__subdf3+0x75c>
 801280c:	2812d0fa 	srli	r9,r5,3
 8012810:	4880022c 	andhi	r2,r9,8
 8012814:	1000051e 	bne	r2,zero,801282c <__subdf3+0x75c>
 8012818:	300cd0fa 	srli	r6,r6,3
 801281c:	2804977a 	slli	r2,r5,29
 8012820:	4809883a 	mov	r4,r9
 8012824:	3825883a 	mov	r18,r7
 8012828:	11a2b03a 	or	r17,r2,r6
 801282c:	8806d77a 	srli	r3,r17,29
 8012830:	200890fa 	slli	r4,r4,3
 8012834:	882290fa 	slli	r17,r17,3
 8012838:	0401ffc4 	movi	r16,2047
 801283c:	1906b03a 	or	r3,r3,r4
 8012840:	003e4406 	br	8012154 <__subdf3+0x84>
 8012844:	2984b03a 	or	r2,r5,r6
 8012848:	103e4226 	beq	r2,zero,8012154 <__subdf3+0x84>
 801284c:	8989c83a 	sub	r4,r17,r6
 8012850:	8911803a 	cmpltu	r8,r17,r4
 8012854:	1945c83a 	sub	r2,r3,r5
 8012858:	1205c83a 	sub	r2,r2,r8
 801285c:	1200202c 	andhi	r8,r2,128
 8012860:	403e9a26 	beq	r8,zero,80122cc <__subdf3+0x1fc>
 8012864:	3463c83a 	sub	r17,r6,r17
 8012868:	28c5c83a 	sub	r2,r5,r3
 801286c:	344d803a 	cmpltu	r6,r6,r17
 8012870:	1187c83a 	sub	r3,r2,r6
 8012874:	3825883a 	mov	r18,r7
 8012878:	003e3606 	br	8012154 <__subdf3+0x84>
 801287c:	0101ffc4 	movi	r4,2047
 8012880:	493fc71e 	bne	r9,r4,80127a0 <__subdf3+0x6d0>
 8012884:	2807883a 	mov	r3,r5
 8012888:	3023883a 	mov	r17,r6
 801288c:	4821883a 	mov	r16,r9
 8012890:	003e3006 	br	8012154 <__subdf3+0x84>
 8012894:	10003626 	beq	r2,zero,8012970 <__subdf3+0x8a0>
 8012898:	2984b03a 	or	r2,r5,r6
 801289c:	10001726 	beq	r2,zero,80128fc <__subdf3+0x82c>
 80128a0:	1808d0fa 	srli	r4,r3,3
 80128a4:	8822d0fa 	srli	r17,r17,3
 80128a8:	1806977a 	slli	r3,r3,29
 80128ac:	2080022c 	andhi	r2,r4,8
 80128b0:	1c62b03a 	or	r17,r3,r17
 80128b4:	10000726 	beq	r2,zero,80128d4 <__subdf3+0x804>
 80128b8:	2812d0fa 	srli	r9,r5,3
 80128bc:	4880022c 	andhi	r2,r9,8
 80128c0:	1000041e 	bne	r2,zero,80128d4 <__subdf3+0x804>
 80128c4:	300cd0fa 	srli	r6,r6,3
 80128c8:	2804977a 	slli	r2,r5,29
 80128cc:	4809883a 	mov	r4,r9
 80128d0:	11a2b03a 	or	r17,r2,r6
 80128d4:	8806d77a 	srli	r3,r17,29
 80128d8:	200890fa 	slli	r4,r4,3
 80128dc:	882290fa 	slli	r17,r17,3
 80128e0:	3825883a 	mov	r18,r7
 80128e4:	1906b03a 	or	r3,r3,r4
 80128e8:	0401ffc4 	movi	r16,2047
 80128ec:	003e1906 	br	8012154 <__subdf3+0x84>
 80128f0:	000b883a 	mov	r5,zero
 80128f4:	0005883a 	mov	r2,zero
 80128f8:	003e2e06 	br	80121b4 <__subdf3+0xe4>
 80128fc:	0401ffc4 	movi	r16,2047
 8012900:	003e1406 	br	8012154 <__subdf3+0x84>
 8012904:	0005883a 	mov	r2,zero
 8012908:	003f7506 	br	80126e0 <__subdf3+0x610>
 801290c:	0005883a 	mov	r2,zero
 8012910:	0009883a 	mov	r4,zero
 8012914:	003e7806 	br	80122f8 <__subdf3+0x228>
 8012918:	123ff804 	addi	r8,r2,-32
 801291c:	01000804 	movi	r4,32
 8012920:	1a10d83a 	srl	r8,r3,r8
 8012924:	11002526 	beq	r2,r4,80129bc <__subdf3+0x8ec>
 8012928:	01001004 	movi	r4,64
 801292c:	2085c83a 	sub	r2,r4,r2
 8012930:	1884983a 	sll	r2,r3,r2
 8012934:	1444b03a 	or	r2,r2,r17
 8012938:	1004c03a 	cmpne	r2,r2,zero
 801293c:	40a2b03a 	or	r17,r8,r2
 8012940:	0005883a 	mov	r2,zero
 8012944:	003f1606 	br	80125a0 <__subdf3+0x4d0>
 8012948:	02000434 	movhi	r8,16
 801294c:	0009883a 	mov	r4,zero
 8012950:	423fffc4 	addi	r8,r8,-1
 8012954:	00bfffc4 	movi	r2,-1
 8012958:	0401ffc4 	movi	r16,2047
 801295c:	003e6606 	br	80122f8 <__subdf3+0x228>
 8012960:	1c62b03a 	or	r17,r3,r17
 8012964:	8822c03a 	cmpne	r17,r17,zero
 8012968:	0005883a 	mov	r2,zero
 801296c:	003f9906 	br	80127d4 <__subdf3+0x704>
 8012970:	2807883a 	mov	r3,r5
 8012974:	3023883a 	mov	r17,r6
 8012978:	0401ffc4 	movi	r16,2047
 801297c:	003df506 	br	8012154 <__subdf3+0x84>
 8012980:	2807883a 	mov	r3,r5
 8012984:	3023883a 	mov	r17,r6
 8012988:	003df206 	br	8012154 <__subdf3+0x84>
 801298c:	123ff804 	addi	r8,r2,-32
 8012990:	01000804 	movi	r4,32
 8012994:	1a10d83a 	srl	r8,r3,r8
 8012998:	11000a26 	beq	r2,r4,80129c4 <__subdf3+0x8f4>
 801299c:	01001004 	movi	r4,64
 80129a0:	2085c83a 	sub	r2,r4,r2
 80129a4:	1884983a 	sll	r2,r3,r2
 80129a8:	1444b03a 	or	r2,r2,r17
 80129ac:	1004c03a 	cmpne	r2,r2,zero
 80129b0:	40a2b03a 	or	r17,r8,r2
 80129b4:	0005883a 	mov	r2,zero
 80129b8:	003f8606 	br	80127d4 <__subdf3+0x704>
 80129bc:	0005883a 	mov	r2,zero
 80129c0:	003fdc06 	br	8012934 <__subdf3+0x864>
 80129c4:	0005883a 	mov	r2,zero
 80129c8:	003ff706 	br	80129a8 <__subdf3+0x8d8>

080129cc <__fixdfsi>:
 80129cc:	280cd53a 	srli	r6,r5,20
 80129d0:	00c00434 	movhi	r3,16
 80129d4:	18ffffc4 	addi	r3,r3,-1
 80129d8:	3181ffcc 	andi	r6,r6,2047
 80129dc:	01c0ff84 	movi	r7,1022
 80129e0:	28c6703a 	and	r3,r5,r3
 80129e4:	280ad7fa 	srli	r5,r5,31
 80129e8:	3980120e 	bge	r7,r6,8012a34 <__fixdfsi+0x68>
 80129ec:	00810744 	movi	r2,1053
 80129f0:	11800c16 	blt	r2,r6,8012a24 <__fixdfsi+0x58>
 80129f4:	00810cc4 	movi	r2,1075
 80129f8:	1185c83a 	sub	r2,r2,r6
 80129fc:	01c007c4 	movi	r7,31
 8012a00:	18c00434 	orhi	r3,r3,16
 8012a04:	38800d16 	blt	r7,r2,8012a3c <__fixdfsi+0x70>
 8012a08:	31befb44 	addi	r6,r6,-1043
 8012a0c:	2084d83a 	srl	r2,r4,r2
 8012a10:	1986983a 	sll	r3,r3,r6
 8012a14:	1884b03a 	or	r2,r3,r2
 8012a18:	28000726 	beq	r5,zero,8012a38 <__fixdfsi+0x6c>
 8012a1c:	0085c83a 	sub	r2,zero,r2
 8012a20:	f800283a 	ret
 8012a24:	00a00034 	movhi	r2,32768
 8012a28:	10bfffc4 	addi	r2,r2,-1
 8012a2c:	2885883a 	add	r2,r5,r2
 8012a30:	f800283a 	ret
 8012a34:	0005883a 	mov	r2,zero
 8012a38:	f800283a 	ret
 8012a3c:	008104c4 	movi	r2,1043
 8012a40:	1185c83a 	sub	r2,r2,r6
 8012a44:	1884d83a 	srl	r2,r3,r2
 8012a48:	003ff306 	br	8012a18 <__fixdfsi+0x4c>

08012a4c <__floatsidf>:
 8012a4c:	defffd04 	addi	sp,sp,-12
 8012a50:	dfc00215 	stw	ra,8(sp)
 8012a54:	dc400115 	stw	r17,4(sp)
 8012a58:	dc000015 	stw	r16,0(sp)
 8012a5c:	20002b26 	beq	r4,zero,8012b0c <__floatsidf+0xc0>
 8012a60:	2023883a 	mov	r17,r4
 8012a64:	2020d7fa 	srli	r16,r4,31
 8012a68:	20002d16 	blt	r4,zero,8012b20 <__floatsidf+0xd4>
 8012a6c:	8809883a 	mov	r4,r17
 8012a70:	80061240 	call	8006124 <__clzsi2>
 8012a74:	01410784 	movi	r5,1054
 8012a78:	288bc83a 	sub	r5,r5,r2
 8012a7c:	01010cc4 	movi	r4,1075
 8012a80:	2149c83a 	sub	r4,r4,r5
 8012a84:	00c007c4 	movi	r3,31
 8012a88:	1900160e 	bge	r3,r4,8012ae4 <__floatsidf+0x98>
 8012a8c:	00c104c4 	movi	r3,1043
 8012a90:	1947c83a 	sub	r3,r3,r5
 8012a94:	88c6983a 	sll	r3,r17,r3
 8012a98:	00800434 	movhi	r2,16
 8012a9c:	10bfffc4 	addi	r2,r2,-1
 8012aa0:	1886703a 	and	r3,r3,r2
 8012aa4:	2941ffcc 	andi	r5,r5,2047
 8012aa8:	800d883a 	mov	r6,r16
 8012aac:	0005883a 	mov	r2,zero
 8012ab0:	280a953a 	slli	r5,r5,20
 8012ab4:	31803fcc 	andi	r6,r6,255
 8012ab8:	01000434 	movhi	r4,16
 8012abc:	300c97fa 	slli	r6,r6,31
 8012ac0:	213fffc4 	addi	r4,r4,-1
 8012ac4:	1906703a 	and	r3,r3,r4
 8012ac8:	1946b03a 	or	r3,r3,r5
 8012acc:	1986b03a 	or	r3,r3,r6
 8012ad0:	dfc00217 	ldw	ra,8(sp)
 8012ad4:	dc400117 	ldw	r17,4(sp)
 8012ad8:	dc000017 	ldw	r16,0(sp)
 8012adc:	dec00304 	addi	sp,sp,12
 8012ae0:	f800283a 	ret
 8012ae4:	00c002c4 	movi	r3,11
 8012ae8:	1887c83a 	sub	r3,r3,r2
 8012aec:	88c6d83a 	srl	r3,r17,r3
 8012af0:	8904983a 	sll	r2,r17,r4
 8012af4:	01000434 	movhi	r4,16
 8012af8:	213fffc4 	addi	r4,r4,-1
 8012afc:	2941ffcc 	andi	r5,r5,2047
 8012b00:	1906703a 	and	r3,r3,r4
 8012b04:	800d883a 	mov	r6,r16
 8012b08:	003fe906 	br	8012ab0 <__floatsidf+0x64>
 8012b0c:	000d883a 	mov	r6,zero
 8012b10:	000b883a 	mov	r5,zero
 8012b14:	0007883a 	mov	r3,zero
 8012b18:	0005883a 	mov	r2,zero
 8012b1c:	003fe406 	br	8012ab0 <__floatsidf+0x64>
 8012b20:	0123c83a 	sub	r17,zero,r4
 8012b24:	003fd106 	br	8012a6c <__floatsidf+0x20>

08012b28 <__floatunsidf>:
 8012b28:	defffe04 	addi	sp,sp,-8
 8012b2c:	dc000015 	stw	r16,0(sp)
 8012b30:	dfc00115 	stw	ra,4(sp)
 8012b34:	2021883a 	mov	r16,r4
 8012b38:	20002226 	beq	r4,zero,8012bc4 <__floatunsidf+0x9c>
 8012b3c:	80061240 	call	8006124 <__clzsi2>
 8012b40:	01010784 	movi	r4,1054
 8012b44:	2089c83a 	sub	r4,r4,r2
 8012b48:	01810cc4 	movi	r6,1075
 8012b4c:	310dc83a 	sub	r6,r6,r4
 8012b50:	00c007c4 	movi	r3,31
 8012b54:	1980120e 	bge	r3,r6,8012ba0 <__floatunsidf+0x78>
 8012b58:	00c104c4 	movi	r3,1043
 8012b5c:	1907c83a 	sub	r3,r3,r4
 8012b60:	80ca983a 	sll	r5,r16,r3
 8012b64:	00800434 	movhi	r2,16
 8012b68:	10bfffc4 	addi	r2,r2,-1
 8012b6c:	2101ffcc 	andi	r4,r4,2047
 8012b70:	0021883a 	mov	r16,zero
 8012b74:	288a703a 	and	r5,r5,r2
 8012b78:	2008953a 	slli	r4,r4,20
 8012b7c:	00c00434 	movhi	r3,16
 8012b80:	18ffffc4 	addi	r3,r3,-1
 8012b84:	28c6703a 	and	r3,r5,r3
 8012b88:	8005883a 	mov	r2,r16
 8012b8c:	1906b03a 	or	r3,r3,r4
 8012b90:	dfc00117 	ldw	ra,4(sp)
 8012b94:	dc000017 	ldw	r16,0(sp)
 8012b98:	dec00204 	addi	sp,sp,8
 8012b9c:	f800283a 	ret
 8012ba0:	00c002c4 	movi	r3,11
 8012ba4:	188bc83a 	sub	r5,r3,r2
 8012ba8:	814ad83a 	srl	r5,r16,r5
 8012bac:	00c00434 	movhi	r3,16
 8012bb0:	18ffffc4 	addi	r3,r3,-1
 8012bb4:	81a0983a 	sll	r16,r16,r6
 8012bb8:	2101ffcc 	andi	r4,r4,2047
 8012bbc:	28ca703a 	and	r5,r5,r3
 8012bc0:	003fed06 	br	8012b78 <__floatunsidf+0x50>
 8012bc4:	0009883a 	mov	r4,zero
 8012bc8:	000b883a 	mov	r5,zero
 8012bcc:	003fea06 	br	8012b78 <__floatunsidf+0x50>

08012bd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8012bd0:	defffe04 	addi	sp,sp,-8
 8012bd4:	dfc00115 	stw	ra,4(sp)
 8012bd8:	df000015 	stw	fp,0(sp)
 8012bdc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8012be0:	d0a01717 	ldw	r2,-32676(gp)
 8012be4:	10000326 	beq	r2,zero,8012bf4 <alt_get_errno+0x24>
 8012be8:	d0a01717 	ldw	r2,-32676(gp)
 8012bec:	103ee83a 	callr	r2
 8012bf0:	00000106 	br	8012bf8 <alt_get_errno+0x28>
 8012bf4:	d0a71404 	addi	r2,gp,-25520
}
 8012bf8:	e037883a 	mov	sp,fp
 8012bfc:	dfc00117 	ldw	ra,4(sp)
 8012c00:	df000017 	ldw	fp,0(sp)
 8012c04:	dec00204 	addi	sp,sp,8
 8012c08:	f800283a 	ret

08012c0c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8012c0c:	defffb04 	addi	sp,sp,-20
 8012c10:	dfc00415 	stw	ra,16(sp)
 8012c14:	df000315 	stw	fp,12(sp)
 8012c18:	df000304 	addi	fp,sp,12
 8012c1c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8012c20:	e0bfff17 	ldw	r2,-4(fp)
 8012c24:	10000816 	blt	r2,zero,8012c48 <close+0x3c>
 8012c28:	01400304 	movi	r5,12
 8012c2c:	e13fff17 	ldw	r4,-4(fp)
 8012c30:	80057b40 	call	80057b4 <__mulsi3>
 8012c34:	1007883a 	mov	r3,r2
 8012c38:	00820074 	movhi	r2,2049
 8012c3c:	10999d04 	addi	r2,r2,26228
 8012c40:	1885883a 	add	r2,r3,r2
 8012c44:	00000106 	br	8012c4c <close+0x40>
 8012c48:	0005883a 	mov	r2,zero
 8012c4c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8012c50:	e0bffd17 	ldw	r2,-12(fp)
 8012c54:	10001926 	beq	r2,zero,8012cbc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8012c58:	e0bffd17 	ldw	r2,-12(fp)
 8012c5c:	10800017 	ldw	r2,0(r2)
 8012c60:	10800417 	ldw	r2,16(r2)
 8012c64:	10000626 	beq	r2,zero,8012c80 <close+0x74>
 8012c68:	e0bffd17 	ldw	r2,-12(fp)
 8012c6c:	10800017 	ldw	r2,0(r2)
 8012c70:	10800417 	ldw	r2,16(r2)
 8012c74:	e13ffd17 	ldw	r4,-12(fp)
 8012c78:	103ee83a 	callr	r2
 8012c7c:	00000106 	br	8012c84 <close+0x78>
 8012c80:	0005883a 	mov	r2,zero
 8012c84:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8012c88:	e13fff17 	ldw	r4,-4(fp)
 8012c8c:	80134e80 	call	80134e8 <alt_release_fd>
    if (rval < 0)
 8012c90:	e0bffe17 	ldw	r2,-8(fp)
 8012c94:	1000070e 	bge	r2,zero,8012cb4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 8012c98:	8012bd00 	call	8012bd0 <alt_get_errno>
 8012c9c:	1007883a 	mov	r3,r2
 8012ca0:	e0bffe17 	ldw	r2,-8(fp)
 8012ca4:	0085c83a 	sub	r2,zero,r2
 8012ca8:	18800015 	stw	r2,0(r3)
      return -1;
 8012cac:	00bfffc4 	movi	r2,-1
 8012cb0:	00000706 	br	8012cd0 <close+0xc4>
    }
    return 0;
 8012cb4:	0005883a 	mov	r2,zero
 8012cb8:	00000506 	br	8012cd0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8012cbc:	8012bd00 	call	8012bd0 <alt_get_errno>
 8012cc0:	1007883a 	mov	r3,r2
 8012cc4:	00801444 	movi	r2,81
 8012cc8:	18800015 	stw	r2,0(r3)
    return -1;
 8012ccc:	00bfffc4 	movi	r2,-1
  }
}
 8012cd0:	e037883a 	mov	sp,fp
 8012cd4:	dfc00117 	ldw	ra,4(sp)
 8012cd8:	df000017 	ldw	fp,0(sp)
 8012cdc:	dec00204 	addi	sp,sp,8
 8012ce0:	f800283a 	ret

08012ce4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8012ce4:	defffc04 	addi	sp,sp,-16
 8012ce8:	df000315 	stw	fp,12(sp)
 8012cec:	df000304 	addi	fp,sp,12
 8012cf0:	e13ffd15 	stw	r4,-12(fp)
 8012cf4:	e17ffe15 	stw	r5,-8(fp)
 8012cf8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8012cfc:	e0bfff17 	ldw	r2,-4(fp)
}
 8012d00:	e037883a 	mov	sp,fp
 8012d04:	df000017 	ldw	fp,0(sp)
 8012d08:	dec00104 	addi	sp,sp,4
 8012d0c:	f800283a 	ret

08012d10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8012d10:	defffe04 	addi	sp,sp,-8
 8012d14:	dfc00115 	stw	ra,4(sp)
 8012d18:	df000015 	stw	fp,0(sp)
 8012d1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8012d20:	d0a01717 	ldw	r2,-32676(gp)
 8012d24:	10000326 	beq	r2,zero,8012d34 <alt_get_errno+0x24>
 8012d28:	d0a01717 	ldw	r2,-32676(gp)
 8012d2c:	103ee83a 	callr	r2
 8012d30:	00000106 	br	8012d38 <alt_get_errno+0x28>
 8012d34:	d0a71404 	addi	r2,gp,-25520
}
 8012d38:	e037883a 	mov	sp,fp
 8012d3c:	dfc00117 	ldw	ra,4(sp)
 8012d40:	df000017 	ldw	fp,0(sp)
 8012d44:	dec00204 	addi	sp,sp,8
 8012d48:	f800283a 	ret

08012d4c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8012d4c:	defffb04 	addi	sp,sp,-20
 8012d50:	dfc00415 	stw	ra,16(sp)
 8012d54:	df000315 	stw	fp,12(sp)
 8012d58:	df000304 	addi	fp,sp,12
 8012d5c:	e13ffe15 	stw	r4,-8(fp)
 8012d60:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8012d64:	e0bffe17 	ldw	r2,-8(fp)
 8012d68:	10000816 	blt	r2,zero,8012d8c <fstat+0x40>
 8012d6c:	01400304 	movi	r5,12
 8012d70:	e13ffe17 	ldw	r4,-8(fp)
 8012d74:	80057b40 	call	80057b4 <__mulsi3>
 8012d78:	1007883a 	mov	r3,r2
 8012d7c:	00820074 	movhi	r2,2049
 8012d80:	10999d04 	addi	r2,r2,26228
 8012d84:	1885883a 	add	r2,r3,r2
 8012d88:	00000106 	br	8012d90 <fstat+0x44>
 8012d8c:	0005883a 	mov	r2,zero
 8012d90:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8012d94:	e0bffd17 	ldw	r2,-12(fp)
 8012d98:	10001026 	beq	r2,zero,8012ddc <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8012d9c:	e0bffd17 	ldw	r2,-12(fp)
 8012da0:	10800017 	ldw	r2,0(r2)
 8012da4:	10800817 	ldw	r2,32(r2)
 8012da8:	10000726 	beq	r2,zero,8012dc8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 8012dac:	e0bffd17 	ldw	r2,-12(fp)
 8012db0:	10800017 	ldw	r2,0(r2)
 8012db4:	10800817 	ldw	r2,32(r2)
 8012db8:	e17fff17 	ldw	r5,-4(fp)
 8012dbc:	e13ffd17 	ldw	r4,-12(fp)
 8012dc0:	103ee83a 	callr	r2
 8012dc4:	00000a06 	br	8012df0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8012dc8:	e0bfff17 	ldw	r2,-4(fp)
 8012dcc:	00c80004 	movi	r3,8192
 8012dd0:	10c00115 	stw	r3,4(r2)
      return 0;
 8012dd4:	0005883a 	mov	r2,zero
 8012dd8:	00000506 	br	8012df0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8012ddc:	8012d100 	call	8012d10 <alt_get_errno>
 8012de0:	1007883a 	mov	r3,r2
 8012de4:	00801444 	movi	r2,81
 8012de8:	18800015 	stw	r2,0(r3)
    return -1;
 8012dec:	00bfffc4 	movi	r2,-1
  }
}
 8012df0:	e037883a 	mov	sp,fp
 8012df4:	dfc00117 	ldw	ra,4(sp)
 8012df8:	df000017 	ldw	fp,0(sp)
 8012dfc:	dec00204 	addi	sp,sp,8
 8012e00:	f800283a 	ret

08012e04 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
 8012e04:	defff404 	addi	sp,sp,-48
 8012e08:	dfc00b15 	stw	ra,44(sp)
 8012e0c:	df000a15 	stw	fp,40(sp)
 8012e10:	dd000915 	stw	r20,36(sp)
 8012e14:	dcc00815 	stw	r19,32(sp)
 8012e18:	dc800715 	stw	r18,28(sp)
 8012e1c:	dc400615 	stw	r17,24(sp)
 8012e20:	dc000515 	stw	r16,20(sp)
 8012e24:	df000a04 	addi	fp,sp,40
 8012e28:	e13ff915 	stw	r4,-28(fp)
 8012e2c:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
 8012e30:	e0bffa17 	ldw	r2,-24(fp)
 8012e34:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8012e38:	d0a72317 	ldw	r2,-25460(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
 8012e3c:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8012e40:	d0a72217 	ldw	r2,-25464(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
 8012e44:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
 8012e48:	e0bff817 	ldw	r2,-32(fp)
 8012e4c:	10005f26 	beq	r2,zero,8012fcc <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 8012e50:	d0a71d17 	ldw	r2,-25484(gp)
 8012e54:	1029883a 	mov	r20,r2
 8012e58:	e17ff817 	ldw	r5,-32(fp)
 8012e5c:	e13ff717 	ldw	r4,-36(fp)
 8012e60:	8010c1c0 	call	8010c1c <__udivsi3>
 8012e64:	a085883a 	add	r2,r20,r2
 8012e68:	1007883a 	mov	r3,r2
 8012e6c:	e0bff917 	ldw	r2,-28(fp)
 8012e70:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
 8012e74:	d0a71e17 	ldw	r2,-25480(gp)
 8012e78:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
 8012e7c:	e0bff717 	ldw	r2,-36(fp)
 8012e80:	1021883a 	mov	r16,r2
 8012e84:	0023883a 	mov	r17,zero
 8012e88:	e17ff817 	ldw	r5,-32(fp)
 8012e8c:	010003f4 	movhi	r4,15
 8012e90:	21109004 	addi	r4,r4,16960
 8012e94:	8010c1c0 	call	8010c1c <__udivsi3>
 8012e98:	1025883a 	mov	r18,r2
 8012e9c:	0027883a 	mov	r19,zero
 8012ea0:	900d883a 	mov	r6,r18
 8012ea4:	980f883a 	mov	r7,r19
 8012ea8:	8009883a 	mov	r4,r16
 8012eac:	880b883a 	mov	r5,r17
 8012eb0:	801576c0 	call	801576c <__muldi3>
 8012eb4:	1009883a 	mov	r4,r2
 8012eb8:	180b883a 	mov	r5,r3
 8012ebc:	2005883a 	mov	r2,r4
 8012ec0:	2807883a 	mov	r3,r5
 8012ec4:	018003f4 	movhi	r6,15
 8012ec8:	31909004 	addi	r6,r6,16960
 8012ecc:	000f883a 	mov	r7,zero
 8012ed0:	1009883a 	mov	r4,r2
 8012ed4:	180b883a 	mov	r5,r3
 8012ed8:	80105600 	call	8010560 <__umoddi3>
 8012edc:	1009883a 	mov	r4,r2
 8012ee0:	180b883a 	mov	r5,r3
 8012ee4:	2005883a 	mov	r2,r4
 8012ee8:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
 8012eec:	a085883a 	add	r2,r20,r2
 8012ef0:	1007883a 	mov	r3,r2
 8012ef4:	e0bff917 	ldw	r2,-28(fp)
 8012ef8:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 8012efc:	00001406 	br	8012f50 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
 8012f00:	e0bff917 	ldw	r2,-28(fp)
 8012f04:	10800017 	ldw	r2,0(r2)
 8012f08:	00800516 	blt	zero,r2,8012f20 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
 8012f0c:	e0bff917 	ldw	r2,-28(fp)
 8012f10:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
 8012f14:	e0bff917 	ldw	r2,-28(fp)
 8012f18:	10000115 	stw	zero,4(r2)
          break;
 8012f1c:	00000f06 	br	8012f5c <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
 8012f20:	e0bff917 	ldw	r2,-28(fp)
 8012f24:	10800017 	ldw	r2,0(r2)
 8012f28:	10ffffc4 	addi	r3,r2,-1
 8012f2c:	e0bff917 	ldw	r2,-28(fp)
 8012f30:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
 8012f34:	e0bff917 	ldw	r2,-28(fp)
 8012f38:	10c00117 	ldw	r3,4(r2)
 8012f3c:	008003f4 	movhi	r2,15
 8012f40:	10909004 	addi	r2,r2,16960
 8012f44:	1887883a 	add	r3,r3,r2
 8012f48:	e0bff917 	ldw	r2,-28(fp)
 8012f4c:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 8012f50:	e0bff917 	ldw	r2,-28(fp)
 8012f54:	10800117 	ldw	r2,4(r2)
 8012f58:	103fe916 	blt	r2,zero,8012f00 <gettimeofday+0xfc>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 8012f5c:	00000c06 	br	8012f90 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
 8012f60:	e0bff917 	ldw	r2,-28(fp)
 8012f64:	10800017 	ldw	r2,0(r2)
 8012f68:	10c00044 	addi	r3,r2,1
 8012f6c:	e0bff917 	ldw	r2,-28(fp)
 8012f70:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
 8012f74:	e0bff917 	ldw	r2,-28(fp)
 8012f78:	10c00117 	ldw	r3,4(r2)
 8012f7c:	00bffc74 	movhi	r2,65521
 8012f80:	10af7004 	addi	r2,r2,-16960
 8012f84:	1887883a 	add	r3,r3,r2
 8012f88:	e0bff917 	ldw	r2,-28(fp)
 8012f8c:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 8012f90:	e0bff917 	ldw	r2,-28(fp)
 8012f94:	10c00117 	ldw	r3,4(r2)
 8012f98:	008003f4 	movhi	r2,15
 8012f9c:	10908fc4 	addi	r2,r2,16959
 8012fa0:	10ffef16 	blt	r2,r3,8012f60 <gettimeofday+0x15c>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
 8012fa4:	e0bff617 	ldw	r2,-40(fp)
 8012fa8:	10000626 	beq	r2,zero,8012fc4 <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
 8012fac:	d0e71b17 	ldw	r3,-25492(gp)
 8012fb0:	e0bff617 	ldw	r2,-40(fp)
 8012fb4:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
 8012fb8:	d0e71c17 	ldw	r3,-25488(gp)
 8012fbc:	e0bff617 	ldw	r2,-40(fp)
 8012fc0:	10c00115 	stw	r3,4(r2)
    }

    return 0;
 8012fc4:	0005883a 	mov	r2,zero
 8012fc8:	00000106 	br	8012fd0 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
 8012fcc:	00bfde84 	movi	r2,-134
}
 8012fd0:	e6fffb04 	addi	sp,fp,-20
 8012fd4:	dfc00617 	ldw	ra,24(sp)
 8012fd8:	df000517 	ldw	fp,20(sp)
 8012fdc:	dd000417 	ldw	r20,16(sp)
 8012fe0:	dcc00317 	ldw	r19,12(sp)
 8012fe4:	dc800217 	ldw	r18,8(sp)
 8012fe8:	dc400117 	ldw	r17,4(sp)
 8012fec:	dc000017 	ldw	r16,0(sp)
 8012ff0:	dec00704 	addi	sp,sp,28
 8012ff4:	f800283a 	ret

08012ff8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8012ff8:	defffe04 	addi	sp,sp,-8
 8012ffc:	dfc00115 	stw	ra,4(sp)
 8013000:	df000015 	stw	fp,0(sp)
 8013004:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8013008:	d0a01717 	ldw	r2,-32676(gp)
 801300c:	10000326 	beq	r2,zero,801301c <alt_get_errno+0x24>
 8013010:	d0a01717 	ldw	r2,-32676(gp)
 8013014:	103ee83a 	callr	r2
 8013018:	00000106 	br	8013020 <alt_get_errno+0x28>
 801301c:	d0a71404 	addi	r2,gp,-25520
}
 8013020:	e037883a 	mov	sp,fp
 8013024:	dfc00117 	ldw	ra,4(sp)
 8013028:	df000017 	ldw	fp,0(sp)
 801302c:	dec00204 	addi	sp,sp,8
 8013030:	f800283a 	ret

08013034 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8013034:	deffed04 	addi	sp,sp,-76
 8013038:	dfc01215 	stw	ra,72(sp)
 801303c:	df001115 	stw	fp,68(sp)
 8013040:	df001104 	addi	fp,sp,68
 8013044:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8013048:	e0bfff17 	ldw	r2,-4(fp)
 801304c:	10000816 	blt	r2,zero,8013070 <isatty+0x3c>
 8013050:	01400304 	movi	r5,12
 8013054:	e13fff17 	ldw	r4,-4(fp)
 8013058:	80057b40 	call	80057b4 <__mulsi3>
 801305c:	1007883a 	mov	r3,r2
 8013060:	00820074 	movhi	r2,2049
 8013064:	10999d04 	addi	r2,r2,26228
 8013068:	1885883a 	add	r2,r3,r2
 801306c:	00000106 	br	8013074 <isatty+0x40>
 8013070:	0005883a 	mov	r2,zero
 8013074:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8013078:	e0bfef17 	ldw	r2,-68(fp)
 801307c:	10000e26 	beq	r2,zero,80130b8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8013080:	e0bfef17 	ldw	r2,-68(fp)
 8013084:	10800017 	ldw	r2,0(r2)
 8013088:	10800817 	ldw	r2,32(r2)
 801308c:	1000021e 	bne	r2,zero,8013098 <isatty+0x64>
    {
      return 1;
 8013090:	00800044 	movi	r2,1
 8013094:	00000d06 	br	80130cc <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8013098:	e0bff004 	addi	r2,fp,-64
 801309c:	100b883a 	mov	r5,r2
 80130a0:	e13fff17 	ldw	r4,-4(fp)
 80130a4:	8012d4c0 	call	8012d4c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 80130a8:	e0bff117 	ldw	r2,-60(fp)
 80130ac:	10880020 	cmpeqi	r2,r2,8192
 80130b0:	10803fcc 	andi	r2,r2,255
 80130b4:	00000506 	br	80130cc <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80130b8:	8012ff80 	call	8012ff8 <alt_get_errno>
 80130bc:	1007883a 	mov	r3,r2
 80130c0:	00801444 	movi	r2,81
 80130c4:	18800015 	stw	r2,0(r3)
    return 0;
 80130c8:	0005883a 	mov	r2,zero
  }
}
 80130cc:	e037883a 	mov	sp,fp
 80130d0:	dfc00117 	ldw	ra,4(sp)
 80130d4:	df000017 	ldw	fp,0(sp)
 80130d8:	dec00204 	addi	sp,sp,8
 80130dc:	f800283a 	ret

080130e0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 80130e0:	defffc04 	addi	sp,sp,-16
 80130e4:	df000315 	stw	fp,12(sp)
 80130e8:	df000304 	addi	fp,sp,12
 80130ec:	e13ffd15 	stw	r4,-12(fp)
 80130f0:	e17ffe15 	stw	r5,-8(fp)
 80130f4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 80130f8:	e0fffe17 	ldw	r3,-8(fp)
 80130fc:	e0bffd17 	ldw	r2,-12(fp)
 8013100:	18800c26 	beq	r3,r2,8013134 <alt_load_section+0x54>
  {
    while( to != end )
 8013104:	00000806 	br	8013128 <alt_load_section+0x48>
    {
      *to++ = *from++;
 8013108:	e0bffe17 	ldw	r2,-8(fp)
 801310c:	10c00104 	addi	r3,r2,4
 8013110:	e0fffe15 	stw	r3,-8(fp)
 8013114:	e0fffd17 	ldw	r3,-12(fp)
 8013118:	19000104 	addi	r4,r3,4
 801311c:	e13ffd15 	stw	r4,-12(fp)
 8013120:	18c00017 	ldw	r3,0(r3)
 8013124:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8013128:	e0fffe17 	ldw	r3,-8(fp)
 801312c:	e0bfff17 	ldw	r2,-4(fp)
 8013130:	18bff51e 	bne	r3,r2,8013108 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 8013134:	0001883a 	nop
 8013138:	e037883a 	mov	sp,fp
 801313c:	df000017 	ldw	fp,0(sp)
 8013140:	dec00104 	addi	sp,sp,4
 8013144:	f800283a 	ret

08013148 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8013148:	defffe04 	addi	sp,sp,-8
 801314c:	dfc00115 	stw	ra,4(sp)
 8013150:	df000015 	stw	fp,0(sp)
 8013154:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8013158:	01820074 	movhi	r6,2049
 801315c:	319e3104 	addi	r6,r6,30916
 8013160:	01420074 	movhi	r5,2049
 8013164:	29576204 	addi	r5,r5,23944
 8013168:	01020074 	movhi	r4,2049
 801316c:	211e3104 	addi	r4,r4,30916
 8013170:	80130e00 	call	80130e0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8013174:	01820034 	movhi	r6,2048
 8013178:	31808c04 	addi	r6,r6,560
 801317c:	01420034 	movhi	r5,2048
 8013180:	29400804 	addi	r5,r5,32
 8013184:	01020034 	movhi	r4,2048
 8013188:	21000804 	addi	r4,r4,32
 801318c:	80130e00 	call	80130e0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8013190:	01820074 	movhi	r6,2049
 8013194:	31976204 	addi	r6,r6,23944
 8013198:	01420074 	movhi	r5,2049
 801319c:	29562b04 	addi	r5,r5,22700
 80131a0:	01020074 	movhi	r4,2049
 80131a4:	21162b04 	addi	r4,r4,22700
 80131a8:	80130e00 	call	80130e0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 80131ac:	80149080 	call	8014908 <alt_dcache_flush_all>
  alt_icache_flush_all();
 80131b0:	8014ac80 	call	8014ac8 <alt_icache_flush_all>
}
 80131b4:	0001883a 	nop
 80131b8:	e037883a 	mov	sp,fp
 80131bc:	dfc00117 	ldw	ra,4(sp)
 80131c0:	df000017 	ldw	fp,0(sp)
 80131c4:	dec00204 	addi	sp,sp,8
 80131c8:	f800283a 	ret

080131cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80131cc:	defffe04 	addi	sp,sp,-8
 80131d0:	dfc00115 	stw	ra,4(sp)
 80131d4:	df000015 	stw	fp,0(sp)
 80131d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80131dc:	d0a01717 	ldw	r2,-32676(gp)
 80131e0:	10000326 	beq	r2,zero,80131f0 <alt_get_errno+0x24>
 80131e4:	d0a01717 	ldw	r2,-32676(gp)
 80131e8:	103ee83a 	callr	r2
 80131ec:	00000106 	br	80131f4 <alt_get_errno+0x28>
 80131f0:	d0a71404 	addi	r2,gp,-25520
}
 80131f4:	e037883a 	mov	sp,fp
 80131f8:	dfc00117 	ldw	ra,4(sp)
 80131fc:	df000017 	ldw	fp,0(sp)
 8013200:	dec00204 	addi	sp,sp,8
 8013204:	f800283a 	ret

08013208 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8013208:	defff904 	addi	sp,sp,-28
 801320c:	dfc00615 	stw	ra,24(sp)
 8013210:	df000515 	stw	fp,20(sp)
 8013214:	df000504 	addi	fp,sp,20
 8013218:	e13ffd15 	stw	r4,-12(fp)
 801321c:	e17ffe15 	stw	r5,-8(fp)
 8013220:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8013224:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8013228:	e0bffd17 	ldw	r2,-12(fp)
 801322c:	10000816 	blt	r2,zero,8013250 <lseek+0x48>
 8013230:	01400304 	movi	r5,12
 8013234:	e13ffd17 	ldw	r4,-12(fp)
 8013238:	80057b40 	call	80057b4 <__mulsi3>
 801323c:	1007883a 	mov	r3,r2
 8013240:	00820074 	movhi	r2,2049
 8013244:	10999d04 	addi	r2,r2,26228
 8013248:	1885883a 	add	r2,r3,r2
 801324c:	00000106 	br	8013254 <lseek+0x4c>
 8013250:	0005883a 	mov	r2,zero
 8013254:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8013258:	e0bffc17 	ldw	r2,-16(fp)
 801325c:	10001026 	beq	r2,zero,80132a0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8013260:	e0bffc17 	ldw	r2,-16(fp)
 8013264:	10800017 	ldw	r2,0(r2)
 8013268:	10800717 	ldw	r2,28(r2)
 801326c:	10000926 	beq	r2,zero,8013294 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8013270:	e0bffc17 	ldw	r2,-16(fp)
 8013274:	10800017 	ldw	r2,0(r2)
 8013278:	10800717 	ldw	r2,28(r2)
 801327c:	e1bfff17 	ldw	r6,-4(fp)
 8013280:	e17ffe17 	ldw	r5,-8(fp)
 8013284:	e13ffc17 	ldw	r4,-16(fp)
 8013288:	103ee83a 	callr	r2
 801328c:	e0bffb15 	stw	r2,-20(fp)
 8013290:	00000506 	br	80132a8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8013294:	00bfde84 	movi	r2,-134
 8013298:	e0bffb15 	stw	r2,-20(fp)
 801329c:	00000206 	br	80132a8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 80132a0:	00bfebc4 	movi	r2,-81
 80132a4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 80132a8:	e0bffb17 	ldw	r2,-20(fp)
 80132ac:	1000070e 	bge	r2,zero,80132cc <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 80132b0:	80131cc0 	call	80131cc <alt_get_errno>
 80132b4:	1007883a 	mov	r3,r2
 80132b8:	e0bffb17 	ldw	r2,-20(fp)
 80132bc:	0085c83a 	sub	r2,zero,r2
 80132c0:	18800015 	stw	r2,0(r3)
    rc = -1;
 80132c4:	00bfffc4 	movi	r2,-1
 80132c8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 80132cc:	e0bffb17 	ldw	r2,-20(fp)
}
 80132d0:	e037883a 	mov	sp,fp
 80132d4:	dfc00117 	ldw	ra,4(sp)
 80132d8:	df000017 	ldw	fp,0(sp)
 80132dc:	dec00204 	addi	sp,sp,8
 80132e0:	f800283a 	ret

080132e4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 80132e4:	defffd04 	addi	sp,sp,-12
 80132e8:	dfc00215 	stw	ra,8(sp)
 80132ec:	df000115 	stw	fp,4(sp)
 80132f0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 80132f4:	0009883a 	mov	r4,zero
 80132f8:	80139e40 	call	80139e4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 80132fc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8013300:	8013a1c0 	call	8013a1c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8013304:	01820074 	movhi	r6,2049
 8013308:	31975804 	addi	r6,r6,23904
 801330c:	01420074 	movhi	r5,2049
 8013310:	29575804 	addi	r5,r5,23904
 8013314:	01020074 	movhi	r4,2049
 8013318:	21175804 	addi	r4,r4,23904
 801331c:	8014e6c0 	call	8014e6c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8013320:	8014a080 	call	8014a08 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8013324:	01020074 	movhi	r4,2049
 8013328:	21129a04 	addi	r4,r4,19048
 801332c:	80154880 	call	8015488 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8013330:	d0a71f17 	ldw	r2,-25476(gp)
 8013334:	d0e72017 	ldw	r3,-25472(gp)
 8013338:	d1272117 	ldw	r4,-25468(gp)
 801333c:	200d883a 	mov	r6,r4
 8013340:	180b883a 	mov	r5,r3
 8013344:	1009883a 	mov	r4,r2
 8013348:	80055a80 	call	80055a8 <main>
 801334c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8013350:	01000044 	movi	r4,1
 8013354:	8012c0c0 	call	8012c0c <close>
  exit (result);
 8013358:	e13fff17 	ldw	r4,-4(fp)
 801335c:	801549c0 	call	801549c <exit>

08013360 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8013360:	defffe04 	addi	sp,sp,-8
 8013364:	df000115 	stw	fp,4(sp)
 8013368:	df000104 	addi	fp,sp,4
 801336c:	e13fff15 	stw	r4,-4(fp)
}
 8013370:	0001883a 	nop
 8013374:	e037883a 	mov	sp,fp
 8013378:	df000017 	ldw	fp,0(sp)
 801337c:	dec00104 	addi	sp,sp,4
 8013380:	f800283a 	ret

08013384 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8013384:	defffe04 	addi	sp,sp,-8
 8013388:	df000115 	stw	fp,4(sp)
 801338c:	df000104 	addi	fp,sp,4
 8013390:	e13fff15 	stw	r4,-4(fp)
}
 8013394:	0001883a 	nop
 8013398:	e037883a 	mov	sp,fp
 801339c:	df000017 	ldw	fp,0(sp)
 80133a0:	dec00104 	addi	sp,sp,4
 80133a4:	f800283a 	ret

080133a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80133a8:	defffe04 	addi	sp,sp,-8
 80133ac:	dfc00115 	stw	ra,4(sp)
 80133b0:	df000015 	stw	fp,0(sp)
 80133b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80133b8:	d0a01717 	ldw	r2,-32676(gp)
 80133bc:	10000326 	beq	r2,zero,80133cc <alt_get_errno+0x24>
 80133c0:	d0a01717 	ldw	r2,-32676(gp)
 80133c4:	103ee83a 	callr	r2
 80133c8:	00000106 	br	80133d0 <alt_get_errno+0x28>
 80133cc:	d0a71404 	addi	r2,gp,-25520
}
 80133d0:	e037883a 	mov	sp,fp
 80133d4:	dfc00117 	ldw	ra,4(sp)
 80133d8:	df000017 	ldw	fp,0(sp)
 80133dc:	dec00204 	addi	sp,sp,8
 80133e0:	f800283a 	ret

080133e4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 80133e4:	defff904 	addi	sp,sp,-28
 80133e8:	dfc00615 	stw	ra,24(sp)
 80133ec:	df000515 	stw	fp,20(sp)
 80133f0:	df000504 	addi	fp,sp,20
 80133f4:	e13ffd15 	stw	r4,-12(fp)
 80133f8:	e17ffe15 	stw	r5,-8(fp)
 80133fc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8013400:	e0bffd17 	ldw	r2,-12(fp)
 8013404:	10000816 	blt	r2,zero,8013428 <read+0x44>
 8013408:	01400304 	movi	r5,12
 801340c:	e13ffd17 	ldw	r4,-12(fp)
 8013410:	80057b40 	call	80057b4 <__mulsi3>
 8013414:	1007883a 	mov	r3,r2
 8013418:	00820074 	movhi	r2,2049
 801341c:	10999d04 	addi	r2,r2,26228
 8013420:	1885883a 	add	r2,r3,r2
 8013424:	00000106 	br	801342c <read+0x48>
 8013428:	0005883a 	mov	r2,zero
 801342c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8013430:	e0bffb17 	ldw	r2,-20(fp)
 8013434:	10002226 	beq	r2,zero,80134c0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8013438:	e0bffb17 	ldw	r2,-20(fp)
 801343c:	10800217 	ldw	r2,8(r2)
 8013440:	108000cc 	andi	r2,r2,3
 8013444:	10800060 	cmpeqi	r2,r2,1
 8013448:	1000181e 	bne	r2,zero,80134ac <read+0xc8>
        (fd->dev->read))
 801344c:	e0bffb17 	ldw	r2,-20(fp)
 8013450:	10800017 	ldw	r2,0(r2)
 8013454:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8013458:	10001426 	beq	r2,zero,80134ac <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 801345c:	e0bffb17 	ldw	r2,-20(fp)
 8013460:	10800017 	ldw	r2,0(r2)
 8013464:	10800517 	ldw	r2,20(r2)
 8013468:	e0ffff17 	ldw	r3,-4(fp)
 801346c:	180d883a 	mov	r6,r3
 8013470:	e17ffe17 	ldw	r5,-8(fp)
 8013474:	e13ffb17 	ldw	r4,-20(fp)
 8013478:	103ee83a 	callr	r2
 801347c:	e0bffc15 	stw	r2,-16(fp)
 8013480:	e0bffc17 	ldw	r2,-16(fp)
 8013484:	1000070e 	bge	r2,zero,80134a4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 8013488:	80133a80 	call	80133a8 <alt_get_errno>
 801348c:	1007883a 	mov	r3,r2
 8013490:	e0bffc17 	ldw	r2,-16(fp)
 8013494:	0085c83a 	sub	r2,zero,r2
 8013498:	18800015 	stw	r2,0(r3)
          return -1;
 801349c:	00bfffc4 	movi	r2,-1
 80134a0:	00000c06 	br	80134d4 <read+0xf0>
        }
        return rval;
 80134a4:	e0bffc17 	ldw	r2,-16(fp)
 80134a8:	00000a06 	br	80134d4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 80134ac:	80133a80 	call	80133a8 <alt_get_errno>
 80134b0:	1007883a 	mov	r3,r2
 80134b4:	00800344 	movi	r2,13
 80134b8:	18800015 	stw	r2,0(r3)
 80134bc:	00000406 	br	80134d0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 80134c0:	80133a80 	call	80133a8 <alt_get_errno>
 80134c4:	1007883a 	mov	r3,r2
 80134c8:	00801444 	movi	r2,81
 80134cc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 80134d0:	00bfffc4 	movi	r2,-1
}
 80134d4:	e037883a 	mov	sp,fp
 80134d8:	dfc00117 	ldw	ra,4(sp)
 80134dc:	df000017 	ldw	fp,0(sp)
 80134e0:	dec00204 	addi	sp,sp,8
 80134e4:	f800283a 	ret

080134e8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 80134e8:	defffc04 	addi	sp,sp,-16
 80134ec:	dfc00315 	stw	ra,12(sp)
 80134f0:	df000215 	stw	fp,8(sp)
 80134f4:	dc000115 	stw	r16,4(sp)
 80134f8:	df000204 	addi	fp,sp,8
 80134fc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 8013500:	e0bffe17 	ldw	r2,-8(fp)
 8013504:	108000d0 	cmplti	r2,r2,3
 8013508:	1000111e 	bne	r2,zero,8013550 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 801350c:	04020074 	movhi	r16,2049
 8013510:	84199d04 	addi	r16,r16,26228
 8013514:	e0bffe17 	ldw	r2,-8(fp)
 8013518:	01400304 	movi	r5,12
 801351c:	1009883a 	mov	r4,r2
 8013520:	80057b40 	call	80057b4 <__mulsi3>
 8013524:	8085883a 	add	r2,r16,r2
 8013528:	10800204 	addi	r2,r2,8
 801352c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8013530:	04020074 	movhi	r16,2049
 8013534:	84199d04 	addi	r16,r16,26228
 8013538:	e0bffe17 	ldw	r2,-8(fp)
 801353c:	01400304 	movi	r5,12
 8013540:	1009883a 	mov	r4,r2
 8013544:	80057b40 	call	80057b4 <__mulsi3>
 8013548:	8085883a 	add	r2,r16,r2
 801354c:	10000015 	stw	zero,0(r2)
  }
}
 8013550:	0001883a 	nop
 8013554:	e6ffff04 	addi	sp,fp,-4
 8013558:	dfc00217 	ldw	ra,8(sp)
 801355c:	df000117 	ldw	fp,4(sp)
 8013560:	dc000017 	ldw	r16,0(sp)
 8013564:	dec00304 	addi	sp,sp,12
 8013568:	f800283a 	ret

0801356c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 801356c:	defff904 	addi	sp,sp,-28
 8013570:	df000615 	stw	fp,24(sp)
 8013574:	df000604 	addi	fp,sp,24
 8013578:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801357c:	0005303a 	rdctl	r2,status
 8013580:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013584:	e0fffe17 	ldw	r3,-8(fp)
 8013588:	00bfff84 	movi	r2,-2
 801358c:	1884703a 	and	r2,r3,r2
 8013590:	1001703a 	wrctl	status,r2
  
  return context;
 8013594:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8013598:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 801359c:	d0a01817 	ldw	r2,-32672(gp)
 80135a0:	10c000c4 	addi	r3,r2,3
 80135a4:	00bfff04 	movi	r2,-4
 80135a8:	1884703a 	and	r2,r3,r2
 80135ac:	d0a01815 	stw	r2,-32672(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 80135b0:	d0e01817 	ldw	r3,-32672(gp)
 80135b4:	e0bfff17 	ldw	r2,-4(fp)
 80135b8:	1887883a 	add	r3,r3,r2
 80135bc:	00830034 	movhi	r2,3072
 80135c0:	10800004 	addi	r2,r2,0
 80135c4:	10c0062e 	bgeu	r2,r3,80135e0 <sbrk+0x74>
 80135c8:	e0bffb17 	ldw	r2,-20(fp)
 80135cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80135d0:	e0bffa17 	ldw	r2,-24(fp)
 80135d4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 80135d8:	00bfffc4 	movi	r2,-1
 80135dc:	00000b06 	br	801360c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 80135e0:	d0a01817 	ldw	r2,-32672(gp)
 80135e4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 80135e8:	d0e01817 	ldw	r3,-32672(gp)
 80135ec:	e0bfff17 	ldw	r2,-4(fp)
 80135f0:	1885883a 	add	r2,r3,r2
 80135f4:	d0a01815 	stw	r2,-32672(gp)
 80135f8:	e0bffb17 	ldw	r2,-20(fp)
 80135fc:	e0bffc15 	stw	r2,-16(fp)
 8013600:	e0bffc17 	ldw	r2,-16(fp)
 8013604:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8013608:	e0bffd17 	ldw	r2,-12(fp)
} 
 801360c:	e037883a 	mov	sp,fp
 8013610:	df000017 	ldw	fp,0(sp)
 8013614:	dec00104 	addi	sp,sp,4
 8013618:	f800283a 	ret

0801361c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 801361c:	defffa04 	addi	sp,sp,-24
 8013620:	df000515 	stw	fp,20(sp)
 8013624:	df000504 	addi	fp,sp,20
 8013628:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801362c:	0005303a 	rdctl	r2,status
 8013630:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013634:	e0fffc17 	ldw	r3,-16(fp)
 8013638:	00bfff84 	movi	r2,-2
 801363c:	1884703a 	and	r2,r3,r2
 8013640:	1001703a 	wrctl	status,r2
  
  return context;
 8013644:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8013648:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 801364c:	e0bfff17 	ldw	r2,-4(fp)
 8013650:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8013654:	e0bffd17 	ldw	r2,-12(fp)
 8013658:	10800017 	ldw	r2,0(r2)
 801365c:	e0fffd17 	ldw	r3,-12(fp)
 8013660:	18c00117 	ldw	r3,4(r3)
 8013664:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8013668:	e0bffd17 	ldw	r2,-12(fp)
 801366c:	10800117 	ldw	r2,4(r2)
 8013670:	e0fffd17 	ldw	r3,-12(fp)
 8013674:	18c00017 	ldw	r3,0(r3)
 8013678:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 801367c:	e0bffd17 	ldw	r2,-12(fp)
 8013680:	e0fffd17 	ldw	r3,-12(fp)
 8013684:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8013688:	e0bffd17 	ldw	r2,-12(fp)
 801368c:	e0fffd17 	ldw	r3,-12(fp)
 8013690:	10c00015 	stw	r3,0(r2)
 8013694:	e0bffb17 	ldw	r2,-20(fp)
 8013698:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801369c:	e0bffe17 	ldw	r2,-8(fp)
 80136a0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 80136a4:	0001883a 	nop
 80136a8:	e037883a 	mov	sp,fp
 80136ac:	df000017 	ldw	fp,0(sp)
 80136b0:	dec00104 	addi	sp,sp,4
 80136b4:	f800283a 	ret

080136b8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 80136b8:	defffb04 	addi	sp,sp,-20
 80136bc:	dfc00415 	stw	ra,16(sp)
 80136c0:	df000315 	stw	fp,12(sp)
 80136c4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 80136c8:	d0a01917 	ldw	r2,-32668(gp)
 80136cc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 80136d0:	d0a72317 	ldw	r2,-25460(gp)
 80136d4:	10800044 	addi	r2,r2,1
 80136d8:	d0a72315 	stw	r2,-25460(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80136dc:	00002e06 	br	8013798 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 80136e0:	e0bffd17 	ldw	r2,-12(fp)
 80136e4:	10800017 	ldw	r2,0(r2)
 80136e8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 80136ec:	e0bffd17 	ldw	r2,-12(fp)
 80136f0:	10800403 	ldbu	r2,16(r2)
 80136f4:	10803fcc 	andi	r2,r2,255
 80136f8:	10000426 	beq	r2,zero,801370c <alt_tick+0x54>
 80136fc:	d0a72317 	ldw	r2,-25460(gp)
 8013700:	1000021e 	bne	r2,zero,801370c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8013704:	e0bffd17 	ldw	r2,-12(fp)
 8013708:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 801370c:	e0bffd17 	ldw	r2,-12(fp)
 8013710:	10800217 	ldw	r2,8(r2)
 8013714:	d0e72317 	ldw	r3,-25460(gp)
 8013718:	18801d36 	bltu	r3,r2,8013790 <alt_tick+0xd8>
 801371c:	e0bffd17 	ldw	r2,-12(fp)
 8013720:	10800403 	ldbu	r2,16(r2)
 8013724:	10803fcc 	andi	r2,r2,255
 8013728:	1000191e 	bne	r2,zero,8013790 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 801372c:	e0bffd17 	ldw	r2,-12(fp)
 8013730:	10800317 	ldw	r2,12(r2)
 8013734:	e0fffd17 	ldw	r3,-12(fp)
 8013738:	18c00517 	ldw	r3,20(r3)
 801373c:	1809883a 	mov	r4,r3
 8013740:	103ee83a 	callr	r2
 8013744:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8013748:	e0bfff17 	ldw	r2,-4(fp)
 801374c:	1000031e 	bne	r2,zero,801375c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8013750:	e13ffd17 	ldw	r4,-12(fp)
 8013754:	801361c0 	call	801361c <alt_alarm_stop>
 8013758:	00000d06 	br	8013790 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 801375c:	e0bffd17 	ldw	r2,-12(fp)
 8013760:	10c00217 	ldw	r3,8(r2)
 8013764:	e0bfff17 	ldw	r2,-4(fp)
 8013768:	1887883a 	add	r3,r3,r2
 801376c:	e0bffd17 	ldw	r2,-12(fp)
 8013770:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8013774:	e0bffd17 	ldw	r2,-12(fp)
 8013778:	10c00217 	ldw	r3,8(r2)
 801377c:	d0a72317 	ldw	r2,-25460(gp)
 8013780:	1880032e 	bgeu	r3,r2,8013790 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8013784:	e0bffd17 	ldw	r2,-12(fp)
 8013788:	00c00044 	movi	r3,1
 801378c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8013790:	e0bffe17 	ldw	r2,-8(fp)
 8013794:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8013798:	e0fffd17 	ldw	r3,-12(fp)
 801379c:	d0a01904 	addi	r2,gp,-32668
 80137a0:	18bfcf1e 	bne	r3,r2,80136e0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 80137a4:	0001883a 	nop
}
 80137a8:	0001883a 	nop
 80137ac:	e037883a 	mov	sp,fp
 80137b0:	dfc00117 	ldw	ra,4(sp)
 80137b4:	df000017 	ldw	fp,0(sp)
 80137b8:	dec00204 	addi	sp,sp,8
 80137bc:	f800283a 	ret

080137c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80137c0:	defffe04 	addi	sp,sp,-8
 80137c4:	dfc00115 	stw	ra,4(sp)
 80137c8:	df000015 	stw	fp,0(sp)
 80137cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80137d0:	d0a01717 	ldw	r2,-32676(gp)
 80137d4:	10000326 	beq	r2,zero,80137e4 <alt_get_errno+0x24>
 80137d8:	d0a01717 	ldw	r2,-32676(gp)
 80137dc:	103ee83a 	callr	r2
 80137e0:	00000106 	br	80137e8 <alt_get_errno+0x28>
 80137e4:	d0a71404 	addi	r2,gp,-25520
}
 80137e8:	e037883a 	mov	sp,fp
 80137ec:	dfc00117 	ldw	ra,4(sp)
 80137f0:	df000017 	ldw	fp,0(sp)
 80137f4:	dec00204 	addi	sp,sp,8
 80137f8:	f800283a 	ret

080137fc <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
 80137fc:	defffc04 	addi	sp,sp,-16
 8013800:	dfc00315 	stw	ra,12(sp)
 8013804:	df000215 	stw	fp,8(sp)
 8013808:	df000204 	addi	fp,sp,8
 801380c:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8013810:	d0a72317 	ldw	r2,-25460(gp)
  clock_t ticks = alt_nticks(); 
 8013814:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8013818:	d0a72217 	ldw	r2,-25464(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
 801381c:	1000061e 	bne	r2,zero,8013838 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
 8013820:	80137c00 	call	80137c0 <alt_get_errno>
 8013824:	1007883a 	mov	r3,r2
 8013828:	00801604 	movi	r2,88
 801382c:	18800015 	stw	r2,0(r3)
    return 0;
 8013830:	0005883a 	mov	r2,zero
 8013834:	00000a06 	br	8013860 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
 8013838:	e0bfff17 	ldw	r2,-4(fp)
 801383c:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
 8013840:	e0bfff17 	ldw	r2,-4(fp)
 8013844:	e0fffe17 	ldw	r3,-8(fp)
 8013848:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
 801384c:	e0bfff17 	ldw	r2,-4(fp)
 8013850:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
 8013854:	e0bfff17 	ldw	r2,-4(fp)
 8013858:	10000315 	stw	zero,12(r2)

  return ticks;
 801385c:	e0bffe17 	ldw	r2,-8(fp)
}
 8013860:	e037883a 	mov	sp,fp
 8013864:	dfc00117 	ldw	ra,4(sp)
 8013868:	df000017 	ldw	fp,0(sp)
 801386c:	dec00204 	addi	sp,sp,8
 8013870:	f800283a 	ret

08013874 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8013874:	defffe04 	addi	sp,sp,-8
 8013878:	dfc00115 	stw	ra,4(sp)
 801387c:	df000015 	stw	fp,0(sp)
 8013880:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8013884:	d0a01717 	ldw	r2,-32676(gp)
 8013888:	10000326 	beq	r2,zero,8013898 <alt_get_errno+0x24>
 801388c:	d0a01717 	ldw	r2,-32676(gp)
 8013890:	103ee83a 	callr	r2
 8013894:	00000106 	br	801389c <alt_get_errno+0x28>
 8013898:	d0a71404 	addi	r2,gp,-25520
}
 801389c:	e037883a 	mov	sp,fp
 80138a0:	dfc00117 	ldw	ra,4(sp)
 80138a4:	df000017 	ldw	fp,0(sp)
 80138a8:	dec00204 	addi	sp,sp,8
 80138ac:	f800283a 	ret

080138b0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 80138b0:	defff904 	addi	sp,sp,-28
 80138b4:	dfc00615 	stw	ra,24(sp)
 80138b8:	df000515 	stw	fp,20(sp)
 80138bc:	df000504 	addi	fp,sp,20
 80138c0:	e13ffd15 	stw	r4,-12(fp)
 80138c4:	e17ffe15 	stw	r5,-8(fp)
 80138c8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80138cc:	e0bffd17 	ldw	r2,-12(fp)
 80138d0:	10000816 	blt	r2,zero,80138f4 <write+0x44>
 80138d4:	01400304 	movi	r5,12
 80138d8:	e13ffd17 	ldw	r4,-12(fp)
 80138dc:	80057b40 	call	80057b4 <__mulsi3>
 80138e0:	1007883a 	mov	r3,r2
 80138e4:	00820074 	movhi	r2,2049
 80138e8:	10999d04 	addi	r2,r2,26228
 80138ec:	1885883a 	add	r2,r3,r2
 80138f0:	00000106 	br	80138f8 <write+0x48>
 80138f4:	0005883a 	mov	r2,zero
 80138f8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 80138fc:	e0bffb17 	ldw	r2,-20(fp)
 8013900:	10002126 	beq	r2,zero,8013988 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8013904:	e0bffb17 	ldw	r2,-20(fp)
 8013908:	10800217 	ldw	r2,8(r2)
 801390c:	108000cc 	andi	r2,r2,3
 8013910:	10001826 	beq	r2,zero,8013974 <write+0xc4>
 8013914:	e0bffb17 	ldw	r2,-20(fp)
 8013918:	10800017 	ldw	r2,0(r2)
 801391c:	10800617 	ldw	r2,24(r2)
 8013920:	10001426 	beq	r2,zero,8013974 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8013924:	e0bffb17 	ldw	r2,-20(fp)
 8013928:	10800017 	ldw	r2,0(r2)
 801392c:	10800617 	ldw	r2,24(r2)
 8013930:	e0ffff17 	ldw	r3,-4(fp)
 8013934:	180d883a 	mov	r6,r3
 8013938:	e17ffe17 	ldw	r5,-8(fp)
 801393c:	e13ffb17 	ldw	r4,-20(fp)
 8013940:	103ee83a 	callr	r2
 8013944:	e0bffc15 	stw	r2,-16(fp)
 8013948:	e0bffc17 	ldw	r2,-16(fp)
 801394c:	1000070e 	bge	r2,zero,801396c <write+0xbc>
      {
        ALT_ERRNO = -rval;
 8013950:	80138740 	call	8013874 <alt_get_errno>
 8013954:	1007883a 	mov	r3,r2
 8013958:	e0bffc17 	ldw	r2,-16(fp)
 801395c:	0085c83a 	sub	r2,zero,r2
 8013960:	18800015 	stw	r2,0(r3)
        return -1;
 8013964:	00bfffc4 	movi	r2,-1
 8013968:	00000c06 	br	801399c <write+0xec>
      }
      return rval;
 801396c:	e0bffc17 	ldw	r2,-16(fp)
 8013970:	00000a06 	br	801399c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8013974:	80138740 	call	8013874 <alt_get_errno>
 8013978:	1007883a 	mov	r3,r2
 801397c:	00800344 	movi	r2,13
 8013980:	18800015 	stw	r2,0(r3)
 8013984:	00000406 	br	8013998 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8013988:	80138740 	call	8013874 <alt_get_errno>
 801398c:	1007883a 	mov	r3,r2
 8013990:	00801444 	movi	r2,81
 8013994:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8013998:	00bfffc4 	movi	r2,-1
}
 801399c:	e037883a 	mov	sp,fp
 80139a0:	dfc00117 	ldw	ra,4(sp)
 80139a4:	df000017 	ldw	fp,0(sp)
 80139a8:	dec00204 	addi	sp,sp,8
 80139ac:	f800283a 	ret

080139b0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 80139b0:	defffd04 	addi	sp,sp,-12
 80139b4:	dfc00215 	stw	ra,8(sp)
 80139b8:	df000115 	stw	fp,4(sp)
 80139bc:	df000104 	addi	fp,sp,4
 80139c0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 80139c4:	d1601404 	addi	r5,gp,-32688
 80139c8:	e13fff17 	ldw	r4,-4(fp)
 80139cc:	80149640 	call	8014964 <alt_dev_llist_insert>
}
 80139d0:	e037883a 	mov	sp,fp
 80139d4:	dfc00117 	ldw	ra,4(sp)
 80139d8:	df000017 	ldw	fp,0(sp)
 80139dc:	dec00204 	addi	sp,sp,8
 80139e0:	f800283a 	ret

080139e4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 80139e4:	defffd04 	addi	sp,sp,-12
 80139e8:	dfc00215 	stw	ra,8(sp)
 80139ec:	df000115 	stw	fp,4(sp)
 80139f0:	df000104 	addi	fp,sp,4
 80139f4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 80139f8:	801516c0 	call	801516c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 80139fc:	00800044 	movi	r2,1
 8013a00:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8013a04:	0001883a 	nop
 8013a08:	e037883a 	mov	sp,fp
 8013a0c:	dfc00117 	ldw	ra,4(sp)
 8013a10:	df000017 	ldw	fp,0(sp)
 8013a14:	dec00204 	addi	sp,sp,8
 8013a18:	f800283a 	ret

08013a1c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8013a1c:	defffe04 	addi	sp,sp,-8
 8013a20:	dfc00115 	stw	ra,4(sp)
 8013a24:	df000015 	stw	fp,0(sp)
 8013a28:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 8013a2c:	01c0fa04 	movi	r7,1000
 8013a30:	018000c4 	movi	r6,3
 8013a34:	000b883a 	mov	r5,zero
 8013a38:	01000074 	movhi	r4,1
 8013a3c:	21041004 	addi	r4,r4,4160
 8013a40:	80147600 	call	8014760 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8013a44:	01800084 	movi	r6,2
 8013a48:	000b883a 	mov	r5,zero
 8013a4c:	01020074 	movhi	r4,2049
 8013a50:	211a0704 	addi	r4,r4,26652
 8013a54:	8013be80 	call	8013be8 <altera_avalon_jtag_uart_init>
 8013a58:	01020074 	movhi	r4,2049
 8013a5c:	2119fd04 	addi	r4,r4,26612
 8013a60:	80139b00 	call	80139b0 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 8013a64:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 8013a68:	0001883a 	nop
}
 8013a6c:	0001883a 	nop
 8013a70:	e037883a 	mov	sp,fp
 8013a74:	dfc00117 	ldw	ra,4(sp)
 8013a78:	df000017 	ldw	fp,0(sp)
 8013a7c:	dec00204 	addi	sp,sp,8
 8013a80:	f800283a 	ret

08013a84 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8013a84:	defffa04 	addi	sp,sp,-24
 8013a88:	dfc00515 	stw	ra,20(sp)
 8013a8c:	df000415 	stw	fp,16(sp)
 8013a90:	df000404 	addi	fp,sp,16
 8013a94:	e13ffd15 	stw	r4,-12(fp)
 8013a98:	e17ffe15 	stw	r5,-8(fp)
 8013a9c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8013aa0:	e0bffd17 	ldw	r2,-12(fp)
 8013aa4:	10800017 	ldw	r2,0(r2)
 8013aa8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8013aac:	e0bffc17 	ldw	r2,-16(fp)
 8013ab0:	10c00a04 	addi	r3,r2,40
 8013ab4:	e0bffd17 	ldw	r2,-12(fp)
 8013ab8:	10800217 	ldw	r2,8(r2)
 8013abc:	100f883a 	mov	r7,r2
 8013ac0:	e1bfff17 	ldw	r6,-4(fp)
 8013ac4:	e17ffe17 	ldw	r5,-8(fp)
 8013ac8:	1809883a 	mov	r4,r3
 8013acc:	80140ac0 	call	80140ac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8013ad0:	e037883a 	mov	sp,fp
 8013ad4:	dfc00117 	ldw	ra,4(sp)
 8013ad8:	df000017 	ldw	fp,0(sp)
 8013adc:	dec00204 	addi	sp,sp,8
 8013ae0:	f800283a 	ret

08013ae4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8013ae4:	defffa04 	addi	sp,sp,-24
 8013ae8:	dfc00515 	stw	ra,20(sp)
 8013aec:	df000415 	stw	fp,16(sp)
 8013af0:	df000404 	addi	fp,sp,16
 8013af4:	e13ffd15 	stw	r4,-12(fp)
 8013af8:	e17ffe15 	stw	r5,-8(fp)
 8013afc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8013b00:	e0bffd17 	ldw	r2,-12(fp)
 8013b04:	10800017 	ldw	r2,0(r2)
 8013b08:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8013b0c:	e0bffc17 	ldw	r2,-16(fp)
 8013b10:	10c00a04 	addi	r3,r2,40
 8013b14:	e0bffd17 	ldw	r2,-12(fp)
 8013b18:	10800217 	ldw	r2,8(r2)
 8013b1c:	100f883a 	mov	r7,r2
 8013b20:	e1bfff17 	ldw	r6,-4(fp)
 8013b24:	e17ffe17 	ldw	r5,-8(fp)
 8013b28:	1809883a 	mov	r4,r3
 8013b2c:	80142c80 	call	80142c8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8013b30:	e037883a 	mov	sp,fp
 8013b34:	dfc00117 	ldw	ra,4(sp)
 8013b38:	df000017 	ldw	fp,0(sp)
 8013b3c:	dec00204 	addi	sp,sp,8
 8013b40:	f800283a 	ret

08013b44 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8013b44:	defffc04 	addi	sp,sp,-16
 8013b48:	dfc00315 	stw	ra,12(sp)
 8013b4c:	df000215 	stw	fp,8(sp)
 8013b50:	df000204 	addi	fp,sp,8
 8013b54:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8013b58:	e0bfff17 	ldw	r2,-4(fp)
 8013b5c:	10800017 	ldw	r2,0(r2)
 8013b60:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8013b64:	e0bffe17 	ldw	r2,-8(fp)
 8013b68:	10c00a04 	addi	r3,r2,40
 8013b6c:	e0bfff17 	ldw	r2,-4(fp)
 8013b70:	10800217 	ldw	r2,8(r2)
 8013b74:	100b883a 	mov	r5,r2
 8013b78:	1809883a 	mov	r4,r3
 8013b7c:	8013f540 	call	8013f54 <altera_avalon_jtag_uart_close>
}
 8013b80:	e037883a 	mov	sp,fp
 8013b84:	dfc00117 	ldw	ra,4(sp)
 8013b88:	df000017 	ldw	fp,0(sp)
 8013b8c:	dec00204 	addi	sp,sp,8
 8013b90:	f800283a 	ret

08013b94 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8013b94:	defffa04 	addi	sp,sp,-24
 8013b98:	dfc00515 	stw	ra,20(sp)
 8013b9c:	df000415 	stw	fp,16(sp)
 8013ba0:	df000404 	addi	fp,sp,16
 8013ba4:	e13ffd15 	stw	r4,-12(fp)
 8013ba8:	e17ffe15 	stw	r5,-8(fp)
 8013bac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8013bb0:	e0bffd17 	ldw	r2,-12(fp)
 8013bb4:	10800017 	ldw	r2,0(r2)
 8013bb8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8013bbc:	e0bffc17 	ldw	r2,-16(fp)
 8013bc0:	10800a04 	addi	r2,r2,40
 8013bc4:	e1bfff17 	ldw	r6,-4(fp)
 8013bc8:	e17ffe17 	ldw	r5,-8(fp)
 8013bcc:	1009883a 	mov	r4,r2
 8013bd0:	8013fbc0 	call	8013fbc <altera_avalon_jtag_uart_ioctl>
}
 8013bd4:	e037883a 	mov	sp,fp
 8013bd8:	dfc00117 	ldw	ra,4(sp)
 8013bdc:	df000017 	ldw	fp,0(sp)
 8013be0:	dec00204 	addi	sp,sp,8
 8013be4:	f800283a 	ret

08013be8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8013be8:	defffa04 	addi	sp,sp,-24
 8013bec:	dfc00515 	stw	ra,20(sp)
 8013bf0:	df000415 	stw	fp,16(sp)
 8013bf4:	df000404 	addi	fp,sp,16
 8013bf8:	e13ffd15 	stw	r4,-12(fp)
 8013bfc:	e17ffe15 	stw	r5,-8(fp)
 8013c00:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8013c04:	e0bffd17 	ldw	r2,-12(fp)
 8013c08:	00c00044 	movi	r3,1
 8013c0c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8013c10:	e0bffd17 	ldw	r2,-12(fp)
 8013c14:	10800017 	ldw	r2,0(r2)
 8013c18:	10800104 	addi	r2,r2,4
 8013c1c:	1007883a 	mov	r3,r2
 8013c20:	e0bffd17 	ldw	r2,-12(fp)
 8013c24:	10800817 	ldw	r2,32(r2)
 8013c28:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8013c2c:	e0bffe17 	ldw	r2,-8(fp)
 8013c30:	e0ffff17 	ldw	r3,-4(fp)
 8013c34:	d8000015 	stw	zero,0(sp)
 8013c38:	e1fffd17 	ldw	r7,-12(fp)
 8013c3c:	01820074 	movhi	r6,2049
 8013c40:	318f2a04 	addi	r6,r6,15528
 8013c44:	180b883a 	mov	r5,r3
 8013c48:	1009883a 	mov	r4,r2
 8013c4c:	8014ae80 	call	8014ae8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8013c50:	e0bffd17 	ldw	r2,-12(fp)
 8013c54:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8013c58:	e0bffd17 	ldw	r2,-12(fp)
 8013c5c:	10800204 	addi	r2,r2,8
 8013c60:	d0e72217 	ldw	r3,-25464(gp)
 8013c64:	e1fffd17 	ldw	r7,-12(fp)
 8013c68:	01820074 	movhi	r6,2049
 8013c6c:	318fad04 	addi	r6,r6,16052
 8013c70:	180b883a 	mov	r5,r3
 8013c74:	1009883a 	mov	r4,r2
 8013c78:	80147dc0 	call	80147dc <alt_alarm_start>
 8013c7c:	1000040e 	bge	r2,zero,8013c90 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8013c80:	e0fffd17 	ldw	r3,-12(fp)
 8013c84:	00a00034 	movhi	r2,32768
 8013c88:	10bfffc4 	addi	r2,r2,-1
 8013c8c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8013c90:	0001883a 	nop
 8013c94:	e037883a 	mov	sp,fp
 8013c98:	dfc00117 	ldw	ra,4(sp)
 8013c9c:	df000017 	ldw	fp,0(sp)
 8013ca0:	dec00204 	addi	sp,sp,8
 8013ca4:	f800283a 	ret

08013ca8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8013ca8:	defff804 	addi	sp,sp,-32
 8013cac:	df000715 	stw	fp,28(sp)
 8013cb0:	df000704 	addi	fp,sp,28
 8013cb4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8013cb8:	e0bfff17 	ldw	r2,-4(fp)
 8013cbc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8013cc0:	e0bffb17 	ldw	r2,-20(fp)
 8013cc4:	10800017 	ldw	r2,0(r2)
 8013cc8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8013ccc:	e0bffc17 	ldw	r2,-16(fp)
 8013cd0:	10800104 	addi	r2,r2,4
 8013cd4:	10800037 	ldwio	r2,0(r2)
 8013cd8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8013cdc:	e0bffd17 	ldw	r2,-12(fp)
 8013ce0:	1080c00c 	andi	r2,r2,768
 8013ce4:	10006d26 	beq	r2,zero,8013e9c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8013ce8:	e0bffd17 	ldw	r2,-12(fp)
 8013cec:	1080400c 	andi	r2,r2,256
 8013cf0:	10003526 	beq	r2,zero,8013dc8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8013cf4:	00800074 	movhi	r2,1
 8013cf8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8013cfc:	e0bffb17 	ldw	r2,-20(fp)
 8013d00:	10800a17 	ldw	r2,40(r2)
 8013d04:	10800044 	addi	r2,r2,1
 8013d08:	1081ffcc 	andi	r2,r2,2047
 8013d0c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8013d10:	e0bffb17 	ldw	r2,-20(fp)
 8013d14:	10c00b17 	ldw	r3,44(r2)
 8013d18:	e0bffe17 	ldw	r2,-8(fp)
 8013d1c:	18801526 	beq	r3,r2,8013d74 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8013d20:	e0bffc17 	ldw	r2,-16(fp)
 8013d24:	10800037 	ldwio	r2,0(r2)
 8013d28:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8013d2c:	e0bff917 	ldw	r2,-28(fp)
 8013d30:	10a0000c 	andi	r2,r2,32768
 8013d34:	10001126 	beq	r2,zero,8013d7c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8013d38:	e0bffb17 	ldw	r2,-20(fp)
 8013d3c:	10800a17 	ldw	r2,40(r2)
 8013d40:	e0fff917 	ldw	r3,-28(fp)
 8013d44:	1809883a 	mov	r4,r3
 8013d48:	e0fffb17 	ldw	r3,-20(fp)
 8013d4c:	1885883a 	add	r2,r3,r2
 8013d50:	10800e04 	addi	r2,r2,56
 8013d54:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8013d58:	e0bffb17 	ldw	r2,-20(fp)
 8013d5c:	10800a17 	ldw	r2,40(r2)
 8013d60:	10800044 	addi	r2,r2,1
 8013d64:	10c1ffcc 	andi	r3,r2,2047
 8013d68:	e0bffb17 	ldw	r2,-20(fp)
 8013d6c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8013d70:	003fe206 	br	8013cfc <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8013d74:	0001883a 	nop
 8013d78:	00000106 	br	8013d80 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8013d7c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8013d80:	e0bff917 	ldw	r2,-28(fp)
 8013d84:	10bfffec 	andhi	r2,r2,65535
 8013d88:	10000f26 	beq	r2,zero,8013dc8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8013d8c:	e0bffb17 	ldw	r2,-20(fp)
 8013d90:	10c00817 	ldw	r3,32(r2)
 8013d94:	00bfff84 	movi	r2,-2
 8013d98:	1886703a 	and	r3,r3,r2
 8013d9c:	e0bffb17 	ldw	r2,-20(fp)
 8013da0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8013da4:	e0bffc17 	ldw	r2,-16(fp)
 8013da8:	10800104 	addi	r2,r2,4
 8013dac:	1007883a 	mov	r3,r2
 8013db0:	e0bffb17 	ldw	r2,-20(fp)
 8013db4:	10800817 	ldw	r2,32(r2)
 8013db8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8013dbc:	e0bffc17 	ldw	r2,-16(fp)
 8013dc0:	10800104 	addi	r2,r2,4
 8013dc4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8013dc8:	e0bffd17 	ldw	r2,-12(fp)
 8013dcc:	1080800c 	andi	r2,r2,512
 8013dd0:	103fbe26 	beq	r2,zero,8013ccc <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8013dd4:	e0bffd17 	ldw	r2,-12(fp)
 8013dd8:	1004d43a 	srli	r2,r2,16
 8013ddc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8013de0:	00001406 	br	8013e34 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8013de4:	e0bffc17 	ldw	r2,-16(fp)
 8013de8:	e0fffb17 	ldw	r3,-20(fp)
 8013dec:	18c00d17 	ldw	r3,52(r3)
 8013df0:	e13ffb17 	ldw	r4,-20(fp)
 8013df4:	20c7883a 	add	r3,r4,r3
 8013df8:	18c20e04 	addi	r3,r3,2104
 8013dfc:	18c00003 	ldbu	r3,0(r3)
 8013e00:	18c03fcc 	andi	r3,r3,255
 8013e04:	18c0201c 	xori	r3,r3,128
 8013e08:	18ffe004 	addi	r3,r3,-128
 8013e0c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8013e10:	e0bffb17 	ldw	r2,-20(fp)
 8013e14:	10800d17 	ldw	r2,52(r2)
 8013e18:	10800044 	addi	r2,r2,1
 8013e1c:	10c1ffcc 	andi	r3,r2,2047
 8013e20:	e0bffb17 	ldw	r2,-20(fp)
 8013e24:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8013e28:	e0bffa17 	ldw	r2,-24(fp)
 8013e2c:	10bfffc4 	addi	r2,r2,-1
 8013e30:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8013e34:	e0bffa17 	ldw	r2,-24(fp)
 8013e38:	10000526 	beq	r2,zero,8013e50 <altera_avalon_jtag_uart_irq+0x1a8>
 8013e3c:	e0bffb17 	ldw	r2,-20(fp)
 8013e40:	10c00d17 	ldw	r3,52(r2)
 8013e44:	e0bffb17 	ldw	r2,-20(fp)
 8013e48:	10800c17 	ldw	r2,48(r2)
 8013e4c:	18bfe51e 	bne	r3,r2,8013de4 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8013e50:	e0bffa17 	ldw	r2,-24(fp)
 8013e54:	103f9d26 	beq	r2,zero,8013ccc <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8013e58:	e0bffb17 	ldw	r2,-20(fp)
 8013e5c:	10c00817 	ldw	r3,32(r2)
 8013e60:	00bfff44 	movi	r2,-3
 8013e64:	1886703a 	and	r3,r3,r2
 8013e68:	e0bffb17 	ldw	r2,-20(fp)
 8013e6c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8013e70:	e0bffb17 	ldw	r2,-20(fp)
 8013e74:	10800017 	ldw	r2,0(r2)
 8013e78:	10800104 	addi	r2,r2,4
 8013e7c:	1007883a 	mov	r3,r2
 8013e80:	e0bffb17 	ldw	r2,-20(fp)
 8013e84:	10800817 	ldw	r2,32(r2)
 8013e88:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8013e8c:	e0bffc17 	ldw	r2,-16(fp)
 8013e90:	10800104 	addi	r2,r2,4
 8013e94:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8013e98:	003f8c06 	br	8013ccc <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 8013e9c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8013ea0:	0001883a 	nop
 8013ea4:	e037883a 	mov	sp,fp
 8013ea8:	df000017 	ldw	fp,0(sp)
 8013eac:	dec00104 	addi	sp,sp,4
 8013eb0:	f800283a 	ret

08013eb4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8013eb4:	defff804 	addi	sp,sp,-32
 8013eb8:	df000715 	stw	fp,28(sp)
 8013ebc:	df000704 	addi	fp,sp,28
 8013ec0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8013ec4:	e0bffb17 	ldw	r2,-20(fp)
 8013ec8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8013ecc:	e0bff917 	ldw	r2,-28(fp)
 8013ed0:	10800017 	ldw	r2,0(r2)
 8013ed4:	10800104 	addi	r2,r2,4
 8013ed8:	10800037 	ldwio	r2,0(r2)
 8013edc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8013ee0:	e0bffa17 	ldw	r2,-24(fp)
 8013ee4:	1081000c 	andi	r2,r2,1024
 8013ee8:	10000b26 	beq	r2,zero,8013f18 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8013eec:	e0bff917 	ldw	r2,-28(fp)
 8013ef0:	10800017 	ldw	r2,0(r2)
 8013ef4:	10800104 	addi	r2,r2,4
 8013ef8:	1007883a 	mov	r3,r2
 8013efc:	e0bff917 	ldw	r2,-28(fp)
 8013f00:	10800817 	ldw	r2,32(r2)
 8013f04:	10810014 	ori	r2,r2,1024
 8013f08:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8013f0c:	e0bff917 	ldw	r2,-28(fp)
 8013f10:	10000915 	stw	zero,36(r2)
 8013f14:	00000a06 	br	8013f40 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8013f18:	e0bff917 	ldw	r2,-28(fp)
 8013f1c:	10c00917 	ldw	r3,36(r2)
 8013f20:	00a00034 	movhi	r2,32768
 8013f24:	10bfff04 	addi	r2,r2,-4
 8013f28:	10c00536 	bltu	r2,r3,8013f40 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8013f2c:	e0bff917 	ldw	r2,-28(fp)
 8013f30:	10800917 	ldw	r2,36(r2)
 8013f34:	10c00044 	addi	r3,r2,1
 8013f38:	e0bff917 	ldw	r2,-28(fp)
 8013f3c:	10c00915 	stw	r3,36(r2)
 8013f40:	d0a72217 	ldw	r2,-25464(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8013f44:	e037883a 	mov	sp,fp
 8013f48:	df000017 	ldw	fp,0(sp)
 8013f4c:	dec00104 	addi	sp,sp,4
 8013f50:	f800283a 	ret

08013f54 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8013f54:	defffd04 	addi	sp,sp,-12
 8013f58:	df000215 	stw	fp,8(sp)
 8013f5c:	df000204 	addi	fp,sp,8
 8013f60:	e13ffe15 	stw	r4,-8(fp)
 8013f64:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8013f68:	00000506 	br	8013f80 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8013f6c:	e0bfff17 	ldw	r2,-4(fp)
 8013f70:	1090000c 	andi	r2,r2,16384
 8013f74:	10000226 	beq	r2,zero,8013f80 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8013f78:	00bffd44 	movi	r2,-11
 8013f7c:	00000b06 	br	8013fac <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8013f80:	e0bffe17 	ldw	r2,-8(fp)
 8013f84:	10c00d17 	ldw	r3,52(r2)
 8013f88:	e0bffe17 	ldw	r2,-8(fp)
 8013f8c:	10800c17 	ldw	r2,48(r2)
 8013f90:	18800526 	beq	r3,r2,8013fa8 <altera_avalon_jtag_uart_close+0x54>
 8013f94:	e0bffe17 	ldw	r2,-8(fp)
 8013f98:	10c00917 	ldw	r3,36(r2)
 8013f9c:	e0bffe17 	ldw	r2,-8(fp)
 8013fa0:	10800117 	ldw	r2,4(r2)
 8013fa4:	18bff136 	bltu	r3,r2,8013f6c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8013fa8:	0005883a 	mov	r2,zero
}
 8013fac:	e037883a 	mov	sp,fp
 8013fb0:	df000017 	ldw	fp,0(sp)
 8013fb4:	dec00104 	addi	sp,sp,4
 8013fb8:	f800283a 	ret

08013fbc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8013fbc:	defffa04 	addi	sp,sp,-24
 8013fc0:	df000515 	stw	fp,20(sp)
 8013fc4:	df000504 	addi	fp,sp,20
 8013fc8:	e13ffd15 	stw	r4,-12(fp)
 8013fcc:	e17ffe15 	stw	r5,-8(fp)
 8013fd0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8013fd4:	00bff9c4 	movi	r2,-25
 8013fd8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8013fdc:	e0bffe17 	ldw	r2,-8(fp)
 8013fe0:	10da8060 	cmpeqi	r3,r2,27137
 8013fe4:	1800031e 	bne	r3,zero,8013ff4 <altera_avalon_jtag_uart_ioctl+0x38>
 8013fe8:	109a80a0 	cmpeqi	r2,r2,27138
 8013fec:	1000181e 	bne	r2,zero,8014050 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8013ff0:	00002906 	br	8014098 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8013ff4:	e0bffd17 	ldw	r2,-12(fp)
 8013ff8:	10c00117 	ldw	r3,4(r2)
 8013ffc:	00a00034 	movhi	r2,32768
 8014000:	10bfffc4 	addi	r2,r2,-1
 8014004:	18802126 	beq	r3,r2,801408c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 8014008:	e0bfff17 	ldw	r2,-4(fp)
 801400c:	10800017 	ldw	r2,0(r2)
 8014010:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8014014:	e0bffc17 	ldw	r2,-16(fp)
 8014018:	10800090 	cmplti	r2,r2,2
 801401c:	1000061e 	bne	r2,zero,8014038 <altera_avalon_jtag_uart_ioctl+0x7c>
 8014020:	e0fffc17 	ldw	r3,-16(fp)
 8014024:	00a00034 	movhi	r2,32768
 8014028:	10bfffc4 	addi	r2,r2,-1
 801402c:	18800226 	beq	r3,r2,8014038 <altera_avalon_jtag_uart_ioctl+0x7c>
 8014030:	e0bffc17 	ldw	r2,-16(fp)
 8014034:	00000206 	br	8014040 <altera_avalon_jtag_uart_ioctl+0x84>
 8014038:	00a00034 	movhi	r2,32768
 801403c:	10bfff84 	addi	r2,r2,-2
 8014040:	e0fffd17 	ldw	r3,-12(fp)
 8014044:	18800115 	stw	r2,4(r3)
      rc = 0;
 8014048:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 801404c:	00000f06 	br	801408c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8014050:	e0bffd17 	ldw	r2,-12(fp)
 8014054:	10c00117 	ldw	r3,4(r2)
 8014058:	00a00034 	movhi	r2,32768
 801405c:	10bfffc4 	addi	r2,r2,-1
 8014060:	18800c26 	beq	r3,r2,8014094 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8014064:	e0bffd17 	ldw	r2,-12(fp)
 8014068:	10c00917 	ldw	r3,36(r2)
 801406c:	e0bffd17 	ldw	r2,-12(fp)
 8014070:	10800117 	ldw	r2,4(r2)
 8014074:	1885803a 	cmpltu	r2,r3,r2
 8014078:	10c03fcc 	andi	r3,r2,255
 801407c:	e0bfff17 	ldw	r2,-4(fp)
 8014080:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8014084:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8014088:	00000206 	br	8014094 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 801408c:	0001883a 	nop
 8014090:	00000106 	br	8014098 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 8014094:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8014098:	e0bffb17 	ldw	r2,-20(fp)
}
 801409c:	e037883a 	mov	sp,fp
 80140a0:	df000017 	ldw	fp,0(sp)
 80140a4:	dec00104 	addi	sp,sp,4
 80140a8:	f800283a 	ret

080140ac <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 80140ac:	defff304 	addi	sp,sp,-52
 80140b0:	dfc00c15 	stw	ra,48(sp)
 80140b4:	df000b15 	stw	fp,44(sp)
 80140b8:	df000b04 	addi	fp,sp,44
 80140bc:	e13ffc15 	stw	r4,-16(fp)
 80140c0:	e17ffd15 	stw	r5,-12(fp)
 80140c4:	e1bffe15 	stw	r6,-8(fp)
 80140c8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 80140cc:	e0bffd17 	ldw	r2,-12(fp)
 80140d0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80140d4:	00004706 	br	80141f4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 80140d8:	e0bffc17 	ldw	r2,-16(fp)
 80140dc:	10800a17 	ldw	r2,40(r2)
 80140e0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 80140e4:	e0bffc17 	ldw	r2,-16(fp)
 80140e8:	10800b17 	ldw	r2,44(r2)
 80140ec:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 80140f0:	e0fff717 	ldw	r3,-36(fp)
 80140f4:	e0bff817 	ldw	r2,-32(fp)
 80140f8:	18800536 	bltu	r3,r2,8014110 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 80140fc:	e0fff717 	ldw	r3,-36(fp)
 8014100:	e0bff817 	ldw	r2,-32(fp)
 8014104:	1885c83a 	sub	r2,r3,r2
 8014108:	e0bff615 	stw	r2,-40(fp)
 801410c:	00000406 	br	8014120 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8014110:	00c20004 	movi	r3,2048
 8014114:	e0bff817 	ldw	r2,-32(fp)
 8014118:	1885c83a 	sub	r2,r3,r2
 801411c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8014120:	e0bff617 	ldw	r2,-40(fp)
 8014124:	10001e26 	beq	r2,zero,80141a0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8014128:	e0fffe17 	ldw	r3,-8(fp)
 801412c:	e0bff617 	ldw	r2,-40(fp)
 8014130:	1880022e 	bgeu	r3,r2,801413c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8014134:	e0bffe17 	ldw	r2,-8(fp)
 8014138:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 801413c:	e0bffc17 	ldw	r2,-16(fp)
 8014140:	10c00e04 	addi	r3,r2,56
 8014144:	e0bff817 	ldw	r2,-32(fp)
 8014148:	1885883a 	add	r2,r3,r2
 801414c:	e1bff617 	ldw	r6,-40(fp)
 8014150:	100b883a 	mov	r5,r2
 8014154:	e13ff517 	ldw	r4,-44(fp)
 8014158:	800626c0 	call	800626c <memcpy>
      ptr   += n;
 801415c:	e0fff517 	ldw	r3,-44(fp)
 8014160:	e0bff617 	ldw	r2,-40(fp)
 8014164:	1885883a 	add	r2,r3,r2
 8014168:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 801416c:	e0fffe17 	ldw	r3,-8(fp)
 8014170:	e0bff617 	ldw	r2,-40(fp)
 8014174:	1885c83a 	sub	r2,r3,r2
 8014178:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801417c:	e0fff817 	ldw	r3,-32(fp)
 8014180:	e0bff617 	ldw	r2,-40(fp)
 8014184:	1885883a 	add	r2,r3,r2
 8014188:	10c1ffcc 	andi	r3,r2,2047
 801418c:	e0bffc17 	ldw	r2,-16(fp)
 8014190:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8014194:	e0bffe17 	ldw	r2,-8(fp)
 8014198:	00bfcf16 	blt	zero,r2,80140d8 <altera_avalon_jtag_uart_read+0x2c>
 801419c:	00000106 	br	80141a4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 80141a0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 80141a4:	e0fff517 	ldw	r3,-44(fp)
 80141a8:	e0bffd17 	ldw	r2,-12(fp)
 80141ac:	1880141e 	bne	r3,r2,8014200 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 80141b0:	e0bfff17 	ldw	r2,-4(fp)
 80141b4:	1090000c 	andi	r2,r2,16384
 80141b8:	1000131e 	bne	r2,zero,8014208 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 80141bc:	0001883a 	nop
 80141c0:	e0bffc17 	ldw	r2,-16(fp)
 80141c4:	10c00a17 	ldw	r3,40(r2)
 80141c8:	e0bff717 	ldw	r2,-36(fp)
 80141cc:	1880051e 	bne	r3,r2,80141e4 <altera_avalon_jtag_uart_read+0x138>
 80141d0:	e0bffc17 	ldw	r2,-16(fp)
 80141d4:	10c00917 	ldw	r3,36(r2)
 80141d8:	e0bffc17 	ldw	r2,-16(fp)
 80141dc:	10800117 	ldw	r2,4(r2)
 80141e0:	18bff736 	bltu	r3,r2,80141c0 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 80141e4:	e0bffc17 	ldw	r2,-16(fp)
 80141e8:	10c00a17 	ldw	r3,40(r2)
 80141ec:	e0bff717 	ldw	r2,-36(fp)
 80141f0:	18800726 	beq	r3,r2,8014210 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80141f4:	e0bffe17 	ldw	r2,-8(fp)
 80141f8:	00bfb716 	blt	zero,r2,80140d8 <altera_avalon_jtag_uart_read+0x2c>
 80141fc:	00000506 	br	8014214 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8014200:	0001883a 	nop
 8014204:	00000306 	br	8014214 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 8014208:	0001883a 	nop
 801420c:	00000106 	br	8014214 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8014210:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8014214:	e0fff517 	ldw	r3,-44(fp)
 8014218:	e0bffd17 	ldw	r2,-12(fp)
 801421c:	18801826 	beq	r3,r2,8014280 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014220:	0005303a 	rdctl	r2,status
 8014224:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014228:	e0fffb17 	ldw	r3,-20(fp)
 801422c:	00bfff84 	movi	r2,-2
 8014230:	1884703a 	and	r2,r3,r2
 8014234:	1001703a 	wrctl	status,r2
  
  return context;
 8014238:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 801423c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8014240:	e0bffc17 	ldw	r2,-16(fp)
 8014244:	10800817 	ldw	r2,32(r2)
 8014248:	10c00054 	ori	r3,r2,1
 801424c:	e0bffc17 	ldw	r2,-16(fp)
 8014250:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8014254:	e0bffc17 	ldw	r2,-16(fp)
 8014258:	10800017 	ldw	r2,0(r2)
 801425c:	10800104 	addi	r2,r2,4
 8014260:	1007883a 	mov	r3,r2
 8014264:	e0bffc17 	ldw	r2,-16(fp)
 8014268:	10800817 	ldw	r2,32(r2)
 801426c:	18800035 	stwio	r2,0(r3)
 8014270:	e0bffa17 	ldw	r2,-24(fp)
 8014274:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014278:	e0bff917 	ldw	r2,-28(fp)
 801427c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8014280:	e0fff517 	ldw	r3,-44(fp)
 8014284:	e0bffd17 	ldw	r2,-12(fp)
 8014288:	18800426 	beq	r3,r2,801429c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 801428c:	e0fff517 	ldw	r3,-44(fp)
 8014290:	e0bffd17 	ldw	r2,-12(fp)
 8014294:	1885c83a 	sub	r2,r3,r2
 8014298:	00000606 	br	80142b4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 801429c:	e0bfff17 	ldw	r2,-4(fp)
 80142a0:	1090000c 	andi	r2,r2,16384
 80142a4:	10000226 	beq	r2,zero,80142b0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 80142a8:	00bffd44 	movi	r2,-11
 80142ac:	00000106 	br	80142b4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 80142b0:	00bffec4 	movi	r2,-5
}
 80142b4:	e037883a 	mov	sp,fp
 80142b8:	dfc00117 	ldw	ra,4(sp)
 80142bc:	df000017 	ldw	fp,0(sp)
 80142c0:	dec00204 	addi	sp,sp,8
 80142c4:	f800283a 	ret

080142c8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80142c8:	defff304 	addi	sp,sp,-52
 80142cc:	dfc00c15 	stw	ra,48(sp)
 80142d0:	df000b15 	stw	fp,44(sp)
 80142d4:	df000b04 	addi	fp,sp,44
 80142d8:	e13ffc15 	stw	r4,-16(fp)
 80142dc:	e17ffd15 	stw	r5,-12(fp)
 80142e0:	e1bffe15 	stw	r6,-8(fp)
 80142e4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 80142e8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 80142ec:	e0bffd17 	ldw	r2,-12(fp)
 80142f0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80142f4:	00003706 	br	80143d4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 80142f8:	e0bffc17 	ldw	r2,-16(fp)
 80142fc:	10800c17 	ldw	r2,48(r2)
 8014300:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 8014304:	e0bffc17 	ldw	r2,-16(fp)
 8014308:	10800d17 	ldw	r2,52(r2)
 801430c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8014310:	e0fff917 	ldw	r3,-28(fp)
 8014314:	e0bff517 	ldw	r2,-44(fp)
 8014318:	1880062e 	bgeu	r3,r2,8014334 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 801431c:	e0fff517 	ldw	r3,-44(fp)
 8014320:	e0bff917 	ldw	r2,-28(fp)
 8014324:	1885c83a 	sub	r2,r3,r2
 8014328:	10bfffc4 	addi	r2,r2,-1
 801432c:	e0bff615 	stw	r2,-40(fp)
 8014330:	00000b06 	br	8014360 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8014334:	e0bff517 	ldw	r2,-44(fp)
 8014338:	10000526 	beq	r2,zero,8014350 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 801433c:	00c20004 	movi	r3,2048
 8014340:	e0bff917 	ldw	r2,-28(fp)
 8014344:	1885c83a 	sub	r2,r3,r2
 8014348:	e0bff615 	stw	r2,-40(fp)
 801434c:	00000406 	br	8014360 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8014350:	00c1ffc4 	movi	r3,2047
 8014354:	e0bff917 	ldw	r2,-28(fp)
 8014358:	1885c83a 	sub	r2,r3,r2
 801435c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8014360:	e0bff617 	ldw	r2,-40(fp)
 8014364:	10001e26 	beq	r2,zero,80143e0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8014368:	e0fffe17 	ldw	r3,-8(fp)
 801436c:	e0bff617 	ldw	r2,-40(fp)
 8014370:	1880022e 	bgeu	r3,r2,801437c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8014374:	e0bffe17 	ldw	r2,-8(fp)
 8014378:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 801437c:	e0bffc17 	ldw	r2,-16(fp)
 8014380:	10c20e04 	addi	r3,r2,2104
 8014384:	e0bff917 	ldw	r2,-28(fp)
 8014388:	1885883a 	add	r2,r3,r2
 801438c:	e1bff617 	ldw	r6,-40(fp)
 8014390:	e17ffd17 	ldw	r5,-12(fp)
 8014394:	1009883a 	mov	r4,r2
 8014398:	800626c0 	call	800626c <memcpy>
      ptr   += n;
 801439c:	e0fffd17 	ldw	r3,-12(fp)
 80143a0:	e0bff617 	ldw	r2,-40(fp)
 80143a4:	1885883a 	add	r2,r3,r2
 80143a8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 80143ac:	e0fffe17 	ldw	r3,-8(fp)
 80143b0:	e0bff617 	ldw	r2,-40(fp)
 80143b4:	1885c83a 	sub	r2,r3,r2
 80143b8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80143bc:	e0fff917 	ldw	r3,-28(fp)
 80143c0:	e0bff617 	ldw	r2,-40(fp)
 80143c4:	1885883a 	add	r2,r3,r2
 80143c8:	10c1ffcc 	andi	r3,r2,2047
 80143cc:	e0bffc17 	ldw	r2,-16(fp)
 80143d0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80143d4:	e0bffe17 	ldw	r2,-8(fp)
 80143d8:	00bfc716 	blt	zero,r2,80142f8 <altera_avalon_jtag_uart_write+0x30>
 80143dc:	00000106 	br	80143e4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 80143e0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80143e4:	0005303a 	rdctl	r2,status
 80143e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80143ec:	e0fffb17 	ldw	r3,-20(fp)
 80143f0:	00bfff84 	movi	r2,-2
 80143f4:	1884703a 	and	r2,r3,r2
 80143f8:	1001703a 	wrctl	status,r2
  
  return context;
 80143fc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8014400:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8014404:	e0bffc17 	ldw	r2,-16(fp)
 8014408:	10800817 	ldw	r2,32(r2)
 801440c:	10c00094 	ori	r3,r2,2
 8014410:	e0bffc17 	ldw	r2,-16(fp)
 8014414:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8014418:	e0bffc17 	ldw	r2,-16(fp)
 801441c:	10800017 	ldw	r2,0(r2)
 8014420:	10800104 	addi	r2,r2,4
 8014424:	1007883a 	mov	r3,r2
 8014428:	e0bffc17 	ldw	r2,-16(fp)
 801442c:	10800817 	ldw	r2,32(r2)
 8014430:	18800035 	stwio	r2,0(r3)
 8014434:	e0bffa17 	ldw	r2,-24(fp)
 8014438:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801443c:	e0bff817 	ldw	r2,-32(fp)
 8014440:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8014444:	e0bffe17 	ldw	r2,-8(fp)
 8014448:	0080100e 	bge	zero,r2,801448c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 801444c:	e0bfff17 	ldw	r2,-4(fp)
 8014450:	1090000c 	andi	r2,r2,16384
 8014454:	1000101e 	bne	r2,zero,8014498 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8014458:	0001883a 	nop
 801445c:	e0bffc17 	ldw	r2,-16(fp)
 8014460:	10c00d17 	ldw	r3,52(r2)
 8014464:	e0bff517 	ldw	r2,-44(fp)
 8014468:	1880051e 	bne	r3,r2,8014480 <altera_avalon_jtag_uart_write+0x1b8>
 801446c:	e0bffc17 	ldw	r2,-16(fp)
 8014470:	10c00917 	ldw	r3,36(r2)
 8014474:	e0bffc17 	ldw	r2,-16(fp)
 8014478:	10800117 	ldw	r2,4(r2)
 801447c:	18bff736 	bltu	r3,r2,801445c <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8014480:	e0bffc17 	ldw	r2,-16(fp)
 8014484:	10800917 	ldw	r2,36(r2)
 8014488:	1000051e 	bne	r2,zero,80144a0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 801448c:	e0bffe17 	ldw	r2,-8(fp)
 8014490:	00bfd016 	blt	zero,r2,80143d4 <altera_avalon_jtag_uart_write+0x10c>
 8014494:	00000306 	br	80144a4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8014498:	0001883a 	nop
 801449c:	00000106 	br	80144a4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 80144a0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80144a4:	e0fffd17 	ldw	r3,-12(fp)
 80144a8:	e0bff717 	ldw	r2,-36(fp)
 80144ac:	18800426 	beq	r3,r2,80144c0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 80144b0:	e0fffd17 	ldw	r3,-12(fp)
 80144b4:	e0bff717 	ldw	r2,-36(fp)
 80144b8:	1885c83a 	sub	r2,r3,r2
 80144bc:	00000606 	br	80144d8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 80144c0:	e0bfff17 	ldw	r2,-4(fp)
 80144c4:	1090000c 	andi	r2,r2,16384
 80144c8:	10000226 	beq	r2,zero,80144d4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 80144cc:	00bffd44 	movi	r2,-11
 80144d0:	00000106 	br	80144d8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 80144d4:	00bffec4 	movi	r2,-5
}
 80144d8:	e037883a 	mov	sp,fp
 80144dc:	dfc00117 	ldw	ra,4(sp)
 80144e0:	df000017 	ldw	fp,0(sp)
 80144e4:	dec00204 	addi	sp,sp,8
 80144e8:	f800283a 	ret

080144ec <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 80144ec:	defff404 	addi	sp,sp,-48
 80144f0:	df000b15 	stw	fp,44(sp)
 80144f4:	df000b04 	addi	fp,sp,44
 80144f8:	e13ffc15 	stw	r4,-16(fp)
 80144fc:	e17ffd15 	stw	r5,-12(fp)
 8014500:	e1bffe15 	stw	r6,-8(fp)
 8014504:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 8014508:	e0ffff17 	ldw	r3,-4(fp)
 801450c:	e0bffe17 	ldw	r2,-8(fp)
 8014510:	1885883a 	add	r2,r3,r2
 8014514:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 8014518:	e0c00217 	ldw	r3,8(fp)
 801451c:	e0800117 	ldw	r2,4(fp)
 8014520:	1885883a 	add	r2,r3,r2
 8014524:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 8014528:	e0800117 	ldw	r2,4(fp)
 801452c:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 8014530:	e0bffe17 	ldw	r2,-8(fp)
 8014534:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 8014538:	00800044 	movi	r2,1
 801453c:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 8014540:	e0bffc17 	ldw	r2,-16(fp)
 8014544:	10800504 	addi	r2,r2,20
 8014548:	1009883a 	mov	r4,r2
 801454c:	00c00044 	movi	r3,1
 8014550:	e0bffd17 	ldw	r2,-12(fp)
 8014554:	1884983a 	sll	r2,r3,r2
 8014558:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 801455c:	e0800317 	ldw	r2,12(fp)
 8014560:	1080008c 	andi	r2,r2,2
 8014564:	1000051e 	bne	r2,zero,801457c <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 8014568:	e0bffc17 	ldw	r2,-16(fp)
 801456c:	10800304 	addi	r2,r2,12
 8014570:	1007883a 	mov	r3,r2
 8014574:	00810004 	movi	r2,1024
 8014578:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 801457c:	e0bffc17 	ldw	r2,-16(fp)
 8014580:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 8014584:	e0bffc17 	ldw	r2,-16(fp)
 8014588:	10800204 	addi	r2,r2,8
 801458c:	10800037 	ldwio	r2,0(r2)
 8014590:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 8014594:	e0bffa17 	ldw	r2,-24(fp)
 8014598:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 801459c:	10000226 	beq	r2,zero,80145a8 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 80145a0:	e0bff717 	ldw	r2,-36(fp)
 80145a4:	1000031e 	bne	r2,zero,80145b4 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 80145a8:	e0bffa17 	ldw	r2,-24(fp)
 80145ac:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 80145b0:	103ff426 	beq	r2,zero,8014584 <alt_avalon_spi_command+0x98>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 80145b4:	e0bffa17 	ldw	r2,-24(fp)
 80145b8:	1080100c 	andi	r2,r2,64
 80145bc:	10001e26 	beq	r2,zero,8014638 <alt_avalon_spi_command+0x14c>
 80145c0:	e0bff717 	ldw	r2,-36(fp)
 80145c4:	00801c0e 	bge	zero,r2,8014638 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 80145c8:	e0bff717 	ldw	r2,-36(fp)
 80145cc:	10bfffc4 	addi	r2,r2,-1
 80145d0:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 80145d4:	e0ffff17 	ldw	r3,-4(fp)
 80145d8:	e0bff817 	ldw	r2,-32(fp)
 80145dc:	18800a2e 	bgeu	r3,r2,8014608 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 80145e0:	e0bffc17 	ldw	r2,-16(fp)
 80145e4:	10800104 	addi	r2,r2,4
 80145e8:	1009883a 	mov	r4,r2
 80145ec:	e0bfff17 	ldw	r2,-4(fp)
 80145f0:	10c00044 	addi	r3,r2,1
 80145f4:	e0ffff15 	stw	r3,-4(fp)
 80145f8:	10800003 	ldbu	r2,0(r2)
 80145fc:	10803fcc 	andi	r2,r2,255
 8014600:	20800035 	stwio	r2,0(r4)
 8014604:	00000c06 	br	8014638 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 8014608:	e0bff517 	ldw	r2,-44(fp)
 801460c:	10000826 	beq	r2,zero,8014630 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 8014610:	e0bff517 	ldw	r2,-44(fp)
 8014614:	10bfffc4 	addi	r2,r2,-1
 8014618:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 801461c:	e0bffc17 	ldw	r2,-16(fp)
 8014620:	10800104 	addi	r2,r2,4
 8014624:	0007883a 	mov	r3,zero
 8014628:	10c00035 	stwio	r3,0(r2)
 801462c:	00000206 	br	8014638 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 8014630:	00bf0004 	movi	r2,-1024
 8014634:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 8014638:	e0bffa17 	ldw	r2,-24(fp)
 801463c:	1080200c 	andi	r2,r2,128
 8014640:	103fd026 	beq	r2,zero,8014584 <alt_avalon_spi_command+0x98>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 8014644:	e0bffc17 	ldw	r2,-16(fp)
 8014648:	10800037 	ldwio	r2,0(r2)
 801464c:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 8014650:	e0bff617 	ldw	r2,-40(fp)
 8014654:	10000426 	beq	r2,zero,8014668 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 8014658:	e0bff617 	ldw	r2,-40(fp)
 801465c:	10bfffc4 	addi	r2,r2,-1
 8014660:	e0bff615 	stw	r2,-40(fp)
 8014664:	00000506 	br	801467c <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 8014668:	e0800217 	ldw	r2,8(fp)
 801466c:	10c00044 	addi	r3,r2,1
 8014670:	e0c00215 	stw	r3,8(fp)
 8014674:	e0fffb17 	ldw	r3,-20(fp)
 8014678:	10c00005 	stb	r3,0(r2)
      credits++;
 801467c:	e0bff717 	ldw	r2,-36(fp)
 8014680:	10800044 	addi	r2,r2,1
 8014684:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 8014688:	e0bff617 	ldw	r2,-40(fp)
 801468c:	103fbd1e 	bne	r2,zero,8014584 <alt_avalon_spi_command+0x98>
 8014690:	e0c00217 	ldw	r3,8(fp)
 8014694:	e0bff917 	ldw	r2,-28(fp)
 8014698:	18bfba1e 	bne	r3,r2,8014584 <alt_avalon_spi_command+0x98>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 801469c:	e0bffc17 	ldw	r2,-16(fp)
 80146a0:	10800204 	addi	r2,r2,8
 80146a4:	10800037 	ldwio	r2,0(r2)
 80146a8:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 80146ac:	e0bffa17 	ldw	r2,-24(fp)
 80146b0:	1080080c 	andi	r2,r2,32
 80146b4:	103ff926 	beq	r2,zero,801469c <alt_avalon_spi_command+0x1b0>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 80146b8:	e0800317 	ldw	r2,12(fp)
 80146bc:	1080004c 	andi	r2,r2,1
 80146c0:	1000041e 	bne	r2,zero,80146d4 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 80146c4:	e0bffc17 	ldw	r2,-16(fp)
 80146c8:	10800304 	addi	r2,r2,12
 80146cc:	0007883a 	mov	r3,zero
 80146d0:	10c00035 	stwio	r3,0(r2)

  return read_length;
 80146d4:	e0800117 	ldw	r2,4(fp)
}
 80146d8:	e037883a 	mov	sp,fp
 80146dc:	df000017 	ldw	fp,0(sp)
 80146e0:	dec00104 	addi	sp,sp,4
 80146e4:	f800283a 	ret

080146e8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 80146e8:	defffa04 	addi	sp,sp,-24
 80146ec:	dfc00515 	stw	ra,20(sp)
 80146f0:	df000415 	stw	fp,16(sp)
 80146f4:	df000404 	addi	fp,sp,16
 80146f8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 80146fc:	0007883a 	mov	r3,zero
 8014700:	e0bfff17 	ldw	r2,-4(fp)
 8014704:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8014708:	e0bfff17 	ldw	r2,-4(fp)
 801470c:	10800104 	addi	r2,r2,4
 8014710:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014714:	0005303a 	rdctl	r2,status
 8014718:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801471c:	e0fffd17 	ldw	r3,-12(fp)
 8014720:	00bfff84 	movi	r2,-2
 8014724:	1884703a 	and	r2,r3,r2
 8014728:	1001703a 	wrctl	status,r2
  
  return context;
 801472c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8014730:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8014734:	80136b80 	call	80136b8 <alt_tick>
 8014738:	e0bffc17 	ldw	r2,-16(fp)
 801473c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014740:	e0bffe17 	ldw	r2,-8(fp)
 8014744:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8014748:	0001883a 	nop
 801474c:	e037883a 	mov	sp,fp
 8014750:	dfc00117 	ldw	ra,4(sp)
 8014754:	df000017 	ldw	fp,0(sp)
 8014758:	dec00204 	addi	sp,sp,8
 801475c:	f800283a 	ret

08014760 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8014760:	defff804 	addi	sp,sp,-32
 8014764:	dfc00715 	stw	ra,28(sp)
 8014768:	df000615 	stw	fp,24(sp)
 801476c:	df000604 	addi	fp,sp,24
 8014770:	e13ffc15 	stw	r4,-16(fp)
 8014774:	e17ffd15 	stw	r5,-12(fp)
 8014778:	e1bffe15 	stw	r6,-8(fp)
 801477c:	e1ffff15 	stw	r7,-4(fp)
 8014780:	e0bfff17 	ldw	r2,-4(fp)
 8014784:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8014788:	d0a72217 	ldw	r2,-25464(gp)
 801478c:	1000021e 	bne	r2,zero,8014798 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 8014790:	e0bffb17 	ldw	r2,-20(fp)
 8014794:	d0a72215 	stw	r2,-25464(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8014798:	e0bffc17 	ldw	r2,-16(fp)
 801479c:	10800104 	addi	r2,r2,4
 80147a0:	00c001c4 	movi	r3,7
 80147a4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 80147a8:	d8000015 	stw	zero,0(sp)
 80147ac:	e1fffc17 	ldw	r7,-16(fp)
 80147b0:	01820074 	movhi	r6,2049
 80147b4:	3191ba04 	addi	r6,r6,18152
 80147b8:	e17ffe17 	ldw	r5,-8(fp)
 80147bc:	e13ffd17 	ldw	r4,-12(fp)
 80147c0:	8014ae80 	call	8014ae8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 80147c4:	0001883a 	nop
 80147c8:	e037883a 	mov	sp,fp
 80147cc:	dfc00117 	ldw	ra,4(sp)
 80147d0:	df000017 	ldw	fp,0(sp)
 80147d4:	dec00204 	addi	sp,sp,8
 80147d8:	f800283a 	ret

080147dc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 80147dc:	defff504 	addi	sp,sp,-44
 80147e0:	df000a15 	stw	fp,40(sp)
 80147e4:	df000a04 	addi	fp,sp,40
 80147e8:	e13ffc15 	stw	r4,-16(fp)
 80147ec:	e17ffd15 	stw	r5,-12(fp)
 80147f0:	e1bffe15 	stw	r6,-8(fp)
 80147f4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 80147f8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80147fc:	d0a72217 	ldw	r2,-25464(gp)
  
  if (alt_ticks_per_second ())
 8014800:	10003c26 	beq	r2,zero,80148f4 <alt_alarm_start+0x118>
  {
    if (alarm)
 8014804:	e0bffc17 	ldw	r2,-16(fp)
 8014808:	10003826 	beq	r2,zero,80148ec <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 801480c:	e0bffc17 	ldw	r2,-16(fp)
 8014810:	e0fffe17 	ldw	r3,-8(fp)
 8014814:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8014818:	e0bffc17 	ldw	r2,-16(fp)
 801481c:	e0ffff17 	ldw	r3,-4(fp)
 8014820:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014824:	0005303a 	rdctl	r2,status
 8014828:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801482c:	e0fff917 	ldw	r3,-28(fp)
 8014830:	00bfff84 	movi	r2,-2
 8014834:	1884703a 	and	r2,r3,r2
 8014838:	1001703a 	wrctl	status,r2
  
  return context;
 801483c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8014840:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8014844:	d0a72317 	ldw	r2,-25460(gp)
      
      current_nticks = alt_nticks();
 8014848:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 801484c:	e0fffd17 	ldw	r3,-12(fp)
 8014850:	e0bff617 	ldw	r2,-40(fp)
 8014854:	1885883a 	add	r2,r3,r2
 8014858:	10c00044 	addi	r3,r2,1
 801485c:	e0bffc17 	ldw	r2,-16(fp)
 8014860:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8014864:	e0bffc17 	ldw	r2,-16(fp)
 8014868:	10c00217 	ldw	r3,8(r2)
 801486c:	e0bff617 	ldw	r2,-40(fp)
 8014870:	1880042e 	bgeu	r3,r2,8014884 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8014874:	e0bffc17 	ldw	r2,-16(fp)
 8014878:	00c00044 	movi	r3,1
 801487c:	10c00405 	stb	r3,16(r2)
 8014880:	00000206 	br	801488c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8014884:	e0bffc17 	ldw	r2,-16(fp)
 8014888:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 801488c:	e0bffc17 	ldw	r2,-16(fp)
 8014890:	d0e01904 	addi	r3,gp,-32668
 8014894:	e0fffa15 	stw	r3,-24(fp)
 8014898:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 801489c:	e0bffb17 	ldw	r2,-20(fp)
 80148a0:	e0fffa17 	ldw	r3,-24(fp)
 80148a4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80148a8:	e0bffa17 	ldw	r2,-24(fp)
 80148ac:	10c00017 	ldw	r3,0(r2)
 80148b0:	e0bffb17 	ldw	r2,-20(fp)
 80148b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80148b8:	e0bffa17 	ldw	r2,-24(fp)
 80148bc:	10800017 	ldw	r2,0(r2)
 80148c0:	e0fffb17 	ldw	r3,-20(fp)
 80148c4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80148c8:	e0bffa17 	ldw	r2,-24(fp)
 80148cc:	e0fffb17 	ldw	r3,-20(fp)
 80148d0:	10c00015 	stw	r3,0(r2)
 80148d4:	e0bff817 	ldw	r2,-32(fp)
 80148d8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80148dc:	e0bff717 	ldw	r2,-36(fp)
 80148e0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 80148e4:	0005883a 	mov	r2,zero
 80148e8:	00000306 	br	80148f8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 80148ec:	00bffa84 	movi	r2,-22
 80148f0:	00000106 	br	80148f8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 80148f4:	00bfde84 	movi	r2,-134
  }
}
 80148f8:	e037883a 	mov	sp,fp
 80148fc:	df000017 	ldw	fp,0(sp)
 8014900:	dec00104 	addi	sp,sp,4
 8014904:	f800283a 	ret

08014908 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8014908:	deffff04 	addi	sp,sp,-4
 801490c:	df000015 	stw	fp,0(sp)
 8014910:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8014914:	0001883a 	nop
 8014918:	e037883a 	mov	sp,fp
 801491c:	df000017 	ldw	fp,0(sp)
 8014920:	dec00104 	addi	sp,sp,4
 8014924:	f800283a 	ret

08014928 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8014928:	defffe04 	addi	sp,sp,-8
 801492c:	dfc00115 	stw	ra,4(sp)
 8014930:	df000015 	stw	fp,0(sp)
 8014934:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8014938:	d0a01717 	ldw	r2,-32676(gp)
 801493c:	10000326 	beq	r2,zero,801494c <alt_get_errno+0x24>
 8014940:	d0a01717 	ldw	r2,-32676(gp)
 8014944:	103ee83a 	callr	r2
 8014948:	00000106 	br	8014950 <alt_get_errno+0x28>
 801494c:	d0a71404 	addi	r2,gp,-25520
}
 8014950:	e037883a 	mov	sp,fp
 8014954:	dfc00117 	ldw	ra,4(sp)
 8014958:	df000017 	ldw	fp,0(sp)
 801495c:	dec00204 	addi	sp,sp,8
 8014960:	f800283a 	ret

08014964 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8014964:	defffa04 	addi	sp,sp,-24
 8014968:	dfc00515 	stw	ra,20(sp)
 801496c:	df000415 	stw	fp,16(sp)
 8014970:	df000404 	addi	fp,sp,16
 8014974:	e13ffe15 	stw	r4,-8(fp)
 8014978:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 801497c:	e0bffe17 	ldw	r2,-8(fp)
 8014980:	10000326 	beq	r2,zero,8014990 <alt_dev_llist_insert+0x2c>
 8014984:	e0bffe17 	ldw	r2,-8(fp)
 8014988:	10800217 	ldw	r2,8(r2)
 801498c:	1000061e 	bne	r2,zero,80149a8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8014990:	80149280 	call	8014928 <alt_get_errno>
 8014994:	1007883a 	mov	r3,r2
 8014998:	00800584 	movi	r2,22
 801499c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 80149a0:	00bffa84 	movi	r2,-22
 80149a4:	00001306 	br	80149f4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 80149a8:	e0bffe17 	ldw	r2,-8(fp)
 80149ac:	e0ffff17 	ldw	r3,-4(fp)
 80149b0:	e0fffc15 	stw	r3,-16(fp)
 80149b4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80149b8:	e0bffd17 	ldw	r2,-12(fp)
 80149bc:	e0fffc17 	ldw	r3,-16(fp)
 80149c0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80149c4:	e0bffc17 	ldw	r2,-16(fp)
 80149c8:	10c00017 	ldw	r3,0(r2)
 80149cc:	e0bffd17 	ldw	r2,-12(fp)
 80149d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80149d4:	e0bffc17 	ldw	r2,-16(fp)
 80149d8:	10800017 	ldw	r2,0(r2)
 80149dc:	e0fffd17 	ldw	r3,-12(fp)
 80149e0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80149e4:	e0bffc17 	ldw	r2,-16(fp)
 80149e8:	e0fffd17 	ldw	r3,-12(fp)
 80149ec:	10c00015 	stw	r3,0(r2)

  return 0;  
 80149f0:	0005883a 	mov	r2,zero
}
 80149f4:	e037883a 	mov	sp,fp
 80149f8:	dfc00117 	ldw	ra,4(sp)
 80149fc:	df000017 	ldw	fp,0(sp)
 8014a00:	dec00204 	addi	sp,sp,8
 8014a04:	f800283a 	ret

08014a08 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8014a08:	defffd04 	addi	sp,sp,-12
 8014a0c:	dfc00215 	stw	ra,8(sp)
 8014a10:	df000115 	stw	fp,4(sp)
 8014a14:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8014a18:	00820074 	movhi	r2,2049
 8014a1c:	10962a04 	addi	r2,r2,22696
 8014a20:	e0bfff15 	stw	r2,-4(fp)
 8014a24:	00000606 	br	8014a40 <_do_ctors+0x38>
        (*ctor) (); 
 8014a28:	e0bfff17 	ldw	r2,-4(fp)
 8014a2c:	10800017 	ldw	r2,0(r2)
 8014a30:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8014a34:	e0bfff17 	ldw	r2,-4(fp)
 8014a38:	10bfff04 	addi	r2,r2,-4
 8014a3c:	e0bfff15 	stw	r2,-4(fp)
 8014a40:	e0ffff17 	ldw	r3,-4(fp)
 8014a44:	00820074 	movhi	r2,2049
 8014a48:	10962b04 	addi	r2,r2,22700
 8014a4c:	18bff62e 	bgeu	r3,r2,8014a28 <_do_ctors+0x20>
        (*ctor) (); 
}
 8014a50:	0001883a 	nop
 8014a54:	e037883a 	mov	sp,fp
 8014a58:	dfc00117 	ldw	ra,4(sp)
 8014a5c:	df000017 	ldw	fp,0(sp)
 8014a60:	dec00204 	addi	sp,sp,8
 8014a64:	f800283a 	ret

08014a68 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8014a68:	defffd04 	addi	sp,sp,-12
 8014a6c:	dfc00215 	stw	ra,8(sp)
 8014a70:	df000115 	stw	fp,4(sp)
 8014a74:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8014a78:	00820074 	movhi	r2,2049
 8014a7c:	10962a04 	addi	r2,r2,22696
 8014a80:	e0bfff15 	stw	r2,-4(fp)
 8014a84:	00000606 	br	8014aa0 <_do_dtors+0x38>
        (*dtor) (); 
 8014a88:	e0bfff17 	ldw	r2,-4(fp)
 8014a8c:	10800017 	ldw	r2,0(r2)
 8014a90:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8014a94:	e0bfff17 	ldw	r2,-4(fp)
 8014a98:	10bfff04 	addi	r2,r2,-4
 8014a9c:	e0bfff15 	stw	r2,-4(fp)
 8014aa0:	e0ffff17 	ldw	r3,-4(fp)
 8014aa4:	00820074 	movhi	r2,2049
 8014aa8:	10962b04 	addi	r2,r2,22700
 8014aac:	18bff62e 	bgeu	r3,r2,8014a88 <_do_dtors+0x20>
        (*dtor) (); 
}
 8014ab0:	0001883a 	nop
 8014ab4:	e037883a 	mov	sp,fp
 8014ab8:	dfc00117 	ldw	ra,4(sp)
 8014abc:	df000017 	ldw	fp,0(sp)
 8014ac0:	dec00204 	addi	sp,sp,8
 8014ac4:	f800283a 	ret

08014ac8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8014ac8:	deffff04 	addi	sp,sp,-4
 8014acc:	df000015 	stw	fp,0(sp)
 8014ad0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8014ad4:	0001883a 	nop
 8014ad8:	e037883a 	mov	sp,fp
 8014adc:	df000017 	ldw	fp,0(sp)
 8014ae0:	dec00104 	addi	sp,sp,4
 8014ae4:	f800283a 	ret

08014ae8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8014ae8:	defff904 	addi	sp,sp,-28
 8014aec:	dfc00615 	stw	ra,24(sp)
 8014af0:	df000515 	stw	fp,20(sp)
 8014af4:	df000504 	addi	fp,sp,20
 8014af8:	e13ffc15 	stw	r4,-16(fp)
 8014afc:	e17ffd15 	stw	r5,-12(fp)
 8014b00:	e1bffe15 	stw	r6,-8(fp)
 8014b04:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8014b08:	e0800217 	ldw	r2,8(fp)
 8014b0c:	d8800015 	stw	r2,0(sp)
 8014b10:	e1ffff17 	ldw	r7,-4(fp)
 8014b14:	e1bffe17 	ldw	r6,-8(fp)
 8014b18:	e17ffd17 	ldw	r5,-12(fp)
 8014b1c:	e13ffc17 	ldw	r4,-16(fp)
 8014b20:	8014c980 	call	8014c98 <alt_iic_isr_register>
}  
 8014b24:	e037883a 	mov	sp,fp
 8014b28:	dfc00117 	ldw	ra,4(sp)
 8014b2c:	df000017 	ldw	fp,0(sp)
 8014b30:	dec00204 	addi	sp,sp,8
 8014b34:	f800283a 	ret

08014b38 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8014b38:	defff904 	addi	sp,sp,-28
 8014b3c:	df000615 	stw	fp,24(sp)
 8014b40:	df000604 	addi	fp,sp,24
 8014b44:	e13ffe15 	stw	r4,-8(fp)
 8014b48:	e17fff15 	stw	r5,-4(fp)
 8014b4c:	e0bfff17 	ldw	r2,-4(fp)
 8014b50:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014b54:	0005303a 	rdctl	r2,status
 8014b58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014b5c:	e0fffb17 	ldw	r3,-20(fp)
 8014b60:	00bfff84 	movi	r2,-2
 8014b64:	1884703a 	and	r2,r3,r2
 8014b68:	1001703a 	wrctl	status,r2
  
  return context;
 8014b6c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8014b70:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8014b74:	00c00044 	movi	r3,1
 8014b78:	e0bffa17 	ldw	r2,-24(fp)
 8014b7c:	1884983a 	sll	r2,r3,r2
 8014b80:	1007883a 	mov	r3,r2
 8014b84:	d0a72417 	ldw	r2,-25456(gp)
 8014b88:	1884b03a 	or	r2,r3,r2
 8014b8c:	d0a72415 	stw	r2,-25456(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8014b90:	d0a72417 	ldw	r2,-25456(gp)
 8014b94:	100170fa 	wrctl	ienable,r2
 8014b98:	e0bffc17 	ldw	r2,-16(fp)
 8014b9c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014ba0:	e0bffd17 	ldw	r2,-12(fp)
 8014ba4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8014ba8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8014bac:	0001883a 	nop
}
 8014bb0:	e037883a 	mov	sp,fp
 8014bb4:	df000017 	ldw	fp,0(sp)
 8014bb8:	dec00104 	addi	sp,sp,4
 8014bbc:	f800283a 	ret

08014bc0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8014bc0:	defff904 	addi	sp,sp,-28
 8014bc4:	df000615 	stw	fp,24(sp)
 8014bc8:	df000604 	addi	fp,sp,24
 8014bcc:	e13ffe15 	stw	r4,-8(fp)
 8014bd0:	e17fff15 	stw	r5,-4(fp)
 8014bd4:	e0bfff17 	ldw	r2,-4(fp)
 8014bd8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014bdc:	0005303a 	rdctl	r2,status
 8014be0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014be4:	e0fffb17 	ldw	r3,-20(fp)
 8014be8:	00bfff84 	movi	r2,-2
 8014bec:	1884703a 	and	r2,r3,r2
 8014bf0:	1001703a 	wrctl	status,r2
  
  return context;
 8014bf4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8014bf8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8014bfc:	00c00044 	movi	r3,1
 8014c00:	e0bffa17 	ldw	r2,-24(fp)
 8014c04:	1884983a 	sll	r2,r3,r2
 8014c08:	0084303a 	nor	r2,zero,r2
 8014c0c:	1007883a 	mov	r3,r2
 8014c10:	d0a72417 	ldw	r2,-25456(gp)
 8014c14:	1884703a 	and	r2,r3,r2
 8014c18:	d0a72415 	stw	r2,-25456(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8014c1c:	d0a72417 	ldw	r2,-25456(gp)
 8014c20:	100170fa 	wrctl	ienable,r2
 8014c24:	e0bffc17 	ldw	r2,-16(fp)
 8014c28:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014c2c:	e0bffd17 	ldw	r2,-12(fp)
 8014c30:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8014c34:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8014c38:	0001883a 	nop
}
 8014c3c:	e037883a 	mov	sp,fp
 8014c40:	df000017 	ldw	fp,0(sp)
 8014c44:	dec00104 	addi	sp,sp,4
 8014c48:	f800283a 	ret

08014c4c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8014c4c:	defffc04 	addi	sp,sp,-16
 8014c50:	df000315 	stw	fp,12(sp)
 8014c54:	df000304 	addi	fp,sp,12
 8014c58:	e13ffe15 	stw	r4,-8(fp)
 8014c5c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8014c60:	000530fa 	rdctl	r2,ienable
 8014c64:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8014c68:	00c00044 	movi	r3,1
 8014c6c:	e0bfff17 	ldw	r2,-4(fp)
 8014c70:	1884983a 	sll	r2,r3,r2
 8014c74:	1007883a 	mov	r3,r2
 8014c78:	e0bffd17 	ldw	r2,-12(fp)
 8014c7c:	1884703a 	and	r2,r3,r2
 8014c80:	1004c03a 	cmpne	r2,r2,zero
 8014c84:	10803fcc 	andi	r2,r2,255
}
 8014c88:	e037883a 	mov	sp,fp
 8014c8c:	df000017 	ldw	fp,0(sp)
 8014c90:	dec00104 	addi	sp,sp,4
 8014c94:	f800283a 	ret

08014c98 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8014c98:	defff504 	addi	sp,sp,-44
 8014c9c:	dfc00a15 	stw	ra,40(sp)
 8014ca0:	df000915 	stw	fp,36(sp)
 8014ca4:	df000904 	addi	fp,sp,36
 8014ca8:	e13ffc15 	stw	r4,-16(fp)
 8014cac:	e17ffd15 	stw	r5,-12(fp)
 8014cb0:	e1bffe15 	stw	r6,-8(fp)
 8014cb4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8014cb8:	00bffa84 	movi	r2,-22
 8014cbc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8014cc0:	e0bffd17 	ldw	r2,-12(fp)
 8014cc4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8014cc8:	e0bff817 	ldw	r2,-32(fp)
 8014ccc:	10800808 	cmpgei	r2,r2,32
 8014cd0:	1000271e 	bne	r2,zero,8014d70 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014cd4:	0005303a 	rdctl	r2,status
 8014cd8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014cdc:	e0fffb17 	ldw	r3,-20(fp)
 8014ce0:	00bfff84 	movi	r2,-2
 8014ce4:	1884703a 	and	r2,r3,r2
 8014ce8:	1001703a 	wrctl	status,r2
  
  return context;
 8014cec:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8014cf0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8014cf4:	008200b4 	movhi	r2,2050
 8014cf8:	10a60404 	addi	r2,r2,-26608
 8014cfc:	e0fff817 	ldw	r3,-32(fp)
 8014d00:	180690fa 	slli	r3,r3,3
 8014d04:	10c5883a 	add	r2,r2,r3
 8014d08:	e0fffe17 	ldw	r3,-8(fp)
 8014d0c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8014d10:	008200b4 	movhi	r2,2050
 8014d14:	10a60404 	addi	r2,r2,-26608
 8014d18:	e0fff817 	ldw	r3,-32(fp)
 8014d1c:	180690fa 	slli	r3,r3,3
 8014d20:	10c5883a 	add	r2,r2,r3
 8014d24:	10800104 	addi	r2,r2,4
 8014d28:	e0ffff17 	ldw	r3,-4(fp)
 8014d2c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8014d30:	e0bffe17 	ldw	r2,-8(fp)
 8014d34:	10000526 	beq	r2,zero,8014d4c <alt_iic_isr_register+0xb4>
 8014d38:	e0bff817 	ldw	r2,-32(fp)
 8014d3c:	100b883a 	mov	r5,r2
 8014d40:	e13ffc17 	ldw	r4,-16(fp)
 8014d44:	8014b380 	call	8014b38 <alt_ic_irq_enable>
 8014d48:	00000406 	br	8014d5c <alt_iic_isr_register+0xc4>
 8014d4c:	e0bff817 	ldw	r2,-32(fp)
 8014d50:	100b883a 	mov	r5,r2
 8014d54:	e13ffc17 	ldw	r4,-16(fp)
 8014d58:	8014bc00 	call	8014bc0 <alt_ic_irq_disable>
 8014d5c:	e0bff715 	stw	r2,-36(fp)
 8014d60:	e0bffa17 	ldw	r2,-24(fp)
 8014d64:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014d68:	e0bff917 	ldw	r2,-28(fp)
 8014d6c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8014d70:	e0bff717 	ldw	r2,-36(fp)
}
 8014d74:	e037883a 	mov	sp,fp
 8014d78:	dfc00117 	ldw	ra,4(sp)
 8014d7c:	df000017 	ldw	fp,0(sp)
 8014d80:	dec00204 	addi	sp,sp,8
 8014d84:	f800283a 	ret

08014d88 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8014d88:	defff804 	addi	sp,sp,-32
 8014d8c:	dfc00715 	stw	ra,28(sp)
 8014d90:	df000615 	stw	fp,24(sp)
 8014d94:	dc000515 	stw	r16,20(sp)
 8014d98:	df000604 	addi	fp,sp,24
 8014d9c:	e13ffb15 	stw	r4,-20(fp)
 8014da0:	e17ffc15 	stw	r5,-16(fp)
 8014da4:	e1bffd15 	stw	r6,-12(fp)
 8014da8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 8014dac:	e1bffe17 	ldw	r6,-8(fp)
 8014db0:	e17ffd17 	ldw	r5,-12(fp)
 8014db4:	e13ffc17 	ldw	r4,-16(fp)
 8014db8:	80150100 	call	8015010 <open>
 8014dbc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 8014dc0:	e0bffa17 	ldw	r2,-24(fp)
 8014dc4:	10002216 	blt	r2,zero,8014e50 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 8014dc8:	04020074 	movhi	r16,2049
 8014dcc:	84199d04 	addi	r16,r16,26228
 8014dd0:	e0bffa17 	ldw	r2,-24(fp)
 8014dd4:	01400304 	movi	r5,12
 8014dd8:	1009883a 	mov	r4,r2
 8014ddc:	80057b40 	call	80057b4 <__mulsi3>
 8014de0:	8085883a 	add	r2,r16,r2
 8014de4:	10c00017 	ldw	r3,0(r2)
 8014de8:	e0bffb17 	ldw	r2,-20(fp)
 8014dec:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8014df0:	04020074 	movhi	r16,2049
 8014df4:	84199d04 	addi	r16,r16,26228
 8014df8:	e0bffa17 	ldw	r2,-24(fp)
 8014dfc:	01400304 	movi	r5,12
 8014e00:	1009883a 	mov	r4,r2
 8014e04:	80057b40 	call	80057b4 <__mulsi3>
 8014e08:	8085883a 	add	r2,r16,r2
 8014e0c:	10800104 	addi	r2,r2,4
 8014e10:	10c00017 	ldw	r3,0(r2)
 8014e14:	e0bffb17 	ldw	r2,-20(fp)
 8014e18:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8014e1c:	04020074 	movhi	r16,2049
 8014e20:	84199d04 	addi	r16,r16,26228
 8014e24:	e0bffa17 	ldw	r2,-24(fp)
 8014e28:	01400304 	movi	r5,12
 8014e2c:	1009883a 	mov	r4,r2
 8014e30:	80057b40 	call	80057b4 <__mulsi3>
 8014e34:	8085883a 	add	r2,r16,r2
 8014e38:	10800204 	addi	r2,r2,8
 8014e3c:	10c00017 	ldw	r3,0(r2)
 8014e40:	e0bffb17 	ldw	r2,-20(fp)
 8014e44:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8014e48:	e13ffa17 	ldw	r4,-24(fp)
 8014e4c:	80134e80 	call	80134e8 <alt_release_fd>
  }
} 
 8014e50:	0001883a 	nop
 8014e54:	e6ffff04 	addi	sp,fp,-4
 8014e58:	dfc00217 	ldw	ra,8(sp)
 8014e5c:	df000117 	ldw	fp,4(sp)
 8014e60:	dc000017 	ldw	r16,0(sp)
 8014e64:	dec00304 	addi	sp,sp,12
 8014e68:	f800283a 	ret

08014e6c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8014e6c:	defffb04 	addi	sp,sp,-20
 8014e70:	dfc00415 	stw	ra,16(sp)
 8014e74:	df000315 	stw	fp,12(sp)
 8014e78:	df000304 	addi	fp,sp,12
 8014e7c:	e13ffd15 	stw	r4,-12(fp)
 8014e80:	e17ffe15 	stw	r5,-8(fp)
 8014e84:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8014e88:	01c07fc4 	movi	r7,511
 8014e8c:	01800044 	movi	r6,1
 8014e90:	e17ffd17 	ldw	r5,-12(fp)
 8014e94:	01020074 	movhi	r4,2049
 8014e98:	2119a004 	addi	r4,r4,26240
 8014e9c:	8014d880 	call	8014d88 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8014ea0:	01c07fc4 	movi	r7,511
 8014ea4:	000d883a 	mov	r6,zero
 8014ea8:	e17ffe17 	ldw	r5,-8(fp)
 8014eac:	01020074 	movhi	r4,2049
 8014eb0:	21199d04 	addi	r4,r4,26228
 8014eb4:	8014d880 	call	8014d88 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8014eb8:	01c07fc4 	movi	r7,511
 8014ebc:	01800044 	movi	r6,1
 8014ec0:	e17fff17 	ldw	r5,-4(fp)
 8014ec4:	01020074 	movhi	r4,2049
 8014ec8:	2119a304 	addi	r4,r4,26252
 8014ecc:	8014d880 	call	8014d88 <alt_open_fd>
}  
 8014ed0:	0001883a 	nop
 8014ed4:	e037883a 	mov	sp,fp
 8014ed8:	dfc00117 	ldw	ra,4(sp)
 8014edc:	df000017 	ldw	fp,0(sp)
 8014ee0:	dec00204 	addi	sp,sp,8
 8014ee4:	f800283a 	ret

08014ee8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8014ee8:	defffe04 	addi	sp,sp,-8
 8014eec:	dfc00115 	stw	ra,4(sp)
 8014ef0:	df000015 	stw	fp,0(sp)
 8014ef4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8014ef8:	d0a01717 	ldw	r2,-32676(gp)
 8014efc:	10000326 	beq	r2,zero,8014f0c <alt_get_errno+0x24>
 8014f00:	d0a01717 	ldw	r2,-32676(gp)
 8014f04:	103ee83a 	callr	r2
 8014f08:	00000106 	br	8014f10 <alt_get_errno+0x28>
 8014f0c:	d0a71404 	addi	r2,gp,-25520
}
 8014f10:	e037883a 	mov	sp,fp
 8014f14:	dfc00117 	ldw	ra,4(sp)
 8014f18:	df000017 	ldw	fp,0(sp)
 8014f1c:	dec00204 	addi	sp,sp,8
 8014f20:	f800283a 	ret

08014f24 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8014f24:	defffb04 	addi	sp,sp,-20
 8014f28:	dfc00415 	stw	ra,16(sp)
 8014f2c:	df000315 	stw	fp,12(sp)
 8014f30:	dc000215 	stw	r16,8(sp)
 8014f34:	df000304 	addi	fp,sp,12
 8014f38:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8014f3c:	e0bffe17 	ldw	r2,-8(fp)
 8014f40:	10800217 	ldw	r2,8(r2)
 8014f44:	10d00034 	orhi	r3,r2,16384
 8014f48:	e0bffe17 	ldw	r2,-8(fp)
 8014f4c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8014f50:	e03ffd15 	stw	zero,-12(fp)
 8014f54:	00002306 	br	8014fe4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8014f58:	04020074 	movhi	r16,2049
 8014f5c:	84199d04 	addi	r16,r16,26228
 8014f60:	e0bffd17 	ldw	r2,-12(fp)
 8014f64:	01400304 	movi	r5,12
 8014f68:	1009883a 	mov	r4,r2
 8014f6c:	80057b40 	call	80057b4 <__mulsi3>
 8014f70:	8085883a 	add	r2,r16,r2
 8014f74:	10c00017 	ldw	r3,0(r2)
 8014f78:	e0bffe17 	ldw	r2,-8(fp)
 8014f7c:	10800017 	ldw	r2,0(r2)
 8014f80:	1880151e 	bne	r3,r2,8014fd8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8014f84:	04020074 	movhi	r16,2049
 8014f88:	84199d04 	addi	r16,r16,26228
 8014f8c:	e0bffd17 	ldw	r2,-12(fp)
 8014f90:	01400304 	movi	r5,12
 8014f94:	1009883a 	mov	r4,r2
 8014f98:	80057b40 	call	80057b4 <__mulsi3>
 8014f9c:	8085883a 	add	r2,r16,r2
 8014fa0:	10800204 	addi	r2,r2,8
 8014fa4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8014fa8:	10000b0e 	bge	r2,zero,8014fd8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8014fac:	01400304 	movi	r5,12
 8014fb0:	e13ffd17 	ldw	r4,-12(fp)
 8014fb4:	80057b40 	call	80057b4 <__mulsi3>
 8014fb8:	1007883a 	mov	r3,r2
 8014fbc:	00820074 	movhi	r2,2049
 8014fc0:	10999d04 	addi	r2,r2,26228
 8014fc4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8014fc8:	e0bffe17 	ldw	r2,-8(fp)
 8014fcc:	18800226 	beq	r3,r2,8014fd8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8014fd0:	00bffcc4 	movi	r2,-13
 8014fd4:	00000806 	br	8014ff8 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8014fd8:	e0bffd17 	ldw	r2,-12(fp)
 8014fdc:	10800044 	addi	r2,r2,1
 8014fe0:	e0bffd15 	stw	r2,-12(fp)
 8014fe4:	d0a01617 	ldw	r2,-32680(gp)
 8014fe8:	1007883a 	mov	r3,r2
 8014fec:	e0bffd17 	ldw	r2,-12(fp)
 8014ff0:	18bfd92e 	bgeu	r3,r2,8014f58 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8014ff4:	0005883a 	mov	r2,zero
}
 8014ff8:	e6ffff04 	addi	sp,fp,-4
 8014ffc:	dfc00217 	ldw	ra,8(sp)
 8015000:	df000117 	ldw	fp,4(sp)
 8015004:	dc000017 	ldw	r16,0(sp)
 8015008:	dec00304 	addi	sp,sp,12
 801500c:	f800283a 	ret

08015010 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8015010:	defff604 	addi	sp,sp,-40
 8015014:	dfc00915 	stw	ra,36(sp)
 8015018:	df000815 	stw	fp,32(sp)
 801501c:	df000804 	addi	fp,sp,32
 8015020:	e13ffd15 	stw	r4,-12(fp)
 8015024:	e17ffe15 	stw	r5,-8(fp)
 8015028:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 801502c:	00bfffc4 	movi	r2,-1
 8015030:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8015034:	00bffb44 	movi	r2,-19
 8015038:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 801503c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8015040:	d1601404 	addi	r5,gp,-32688
 8015044:	e13ffd17 	ldw	r4,-12(fp)
 8015048:	80151900 	call	8015190 <alt_find_dev>
 801504c:	e0bff815 	stw	r2,-32(fp)
 8015050:	e0bff817 	ldw	r2,-32(fp)
 8015054:	1000051e 	bne	r2,zero,801506c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8015058:	e13ffd17 	ldw	r4,-12(fp)
 801505c:	80152200 	call	8015220 <alt_find_file>
 8015060:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8015064:	00800044 	movi	r2,1
 8015068:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 801506c:	e0bff817 	ldw	r2,-32(fp)
 8015070:	10002b26 	beq	r2,zero,8015120 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8015074:	e13ff817 	ldw	r4,-32(fp)
 8015078:	80153280 	call	8015328 <alt_get_fd>
 801507c:	e0bff915 	stw	r2,-28(fp)
 8015080:	e0bff917 	ldw	r2,-28(fp)
 8015084:	1000030e 	bge	r2,zero,8015094 <open+0x84>
    {
      status = index;
 8015088:	e0bff917 	ldw	r2,-28(fp)
 801508c:	e0bffa15 	stw	r2,-24(fp)
 8015090:	00002506 	br	8015128 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 8015094:	01400304 	movi	r5,12
 8015098:	e13ff917 	ldw	r4,-28(fp)
 801509c:	80057b40 	call	80057b4 <__mulsi3>
 80150a0:	1007883a 	mov	r3,r2
 80150a4:	00820074 	movhi	r2,2049
 80150a8:	10999d04 	addi	r2,r2,26228
 80150ac:	1885883a 	add	r2,r3,r2
 80150b0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 80150b4:	e0fffe17 	ldw	r3,-8(fp)
 80150b8:	00900034 	movhi	r2,16384
 80150bc:	10bfffc4 	addi	r2,r2,-1
 80150c0:	1886703a 	and	r3,r3,r2
 80150c4:	e0bffc17 	ldw	r2,-16(fp)
 80150c8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 80150cc:	e0bffb17 	ldw	r2,-20(fp)
 80150d0:	1000051e 	bne	r2,zero,80150e8 <open+0xd8>
 80150d4:	e13ffc17 	ldw	r4,-16(fp)
 80150d8:	8014f240 	call	8014f24 <alt_file_locked>
 80150dc:	e0bffa15 	stw	r2,-24(fp)
 80150e0:	e0bffa17 	ldw	r2,-24(fp)
 80150e4:	10001016 	blt	r2,zero,8015128 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 80150e8:	e0bff817 	ldw	r2,-32(fp)
 80150ec:	10800317 	ldw	r2,12(r2)
 80150f0:	10000826 	beq	r2,zero,8015114 <open+0x104>
 80150f4:	e0bff817 	ldw	r2,-32(fp)
 80150f8:	10800317 	ldw	r2,12(r2)
 80150fc:	e1ffff17 	ldw	r7,-4(fp)
 8015100:	e1bffe17 	ldw	r6,-8(fp)
 8015104:	e17ffd17 	ldw	r5,-12(fp)
 8015108:	e13ffc17 	ldw	r4,-16(fp)
 801510c:	103ee83a 	callr	r2
 8015110:	00000106 	br	8015118 <open+0x108>
 8015114:	0005883a 	mov	r2,zero
 8015118:	e0bffa15 	stw	r2,-24(fp)
 801511c:	00000206 	br	8015128 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8015120:	00bffb44 	movi	r2,-19
 8015124:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8015128:	e0bffa17 	ldw	r2,-24(fp)
 801512c:	1000090e 	bge	r2,zero,8015154 <open+0x144>
  {
    alt_release_fd (index);  
 8015130:	e13ff917 	ldw	r4,-28(fp)
 8015134:	80134e80 	call	80134e8 <alt_release_fd>
    ALT_ERRNO = -status;
 8015138:	8014ee80 	call	8014ee8 <alt_get_errno>
 801513c:	1007883a 	mov	r3,r2
 8015140:	e0bffa17 	ldw	r2,-24(fp)
 8015144:	0085c83a 	sub	r2,zero,r2
 8015148:	18800015 	stw	r2,0(r3)
    return -1;
 801514c:	00bfffc4 	movi	r2,-1
 8015150:	00000106 	br	8015158 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 8015154:	e0bff917 	ldw	r2,-28(fp)
}
 8015158:	e037883a 	mov	sp,fp
 801515c:	dfc00117 	ldw	ra,4(sp)
 8015160:	df000017 	ldw	fp,0(sp)
 8015164:	dec00204 	addi	sp,sp,8
 8015168:	f800283a 	ret

0801516c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 801516c:	deffff04 	addi	sp,sp,-4
 8015170:	df000015 	stw	fp,0(sp)
 8015174:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8015178:	000170fa 	wrctl	ienable,zero
}
 801517c:	0001883a 	nop
 8015180:	e037883a 	mov	sp,fp
 8015184:	df000017 	ldw	fp,0(sp)
 8015188:	dec00104 	addi	sp,sp,4
 801518c:	f800283a 	ret

08015190 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8015190:	defffa04 	addi	sp,sp,-24
 8015194:	dfc00515 	stw	ra,20(sp)
 8015198:	df000415 	stw	fp,16(sp)
 801519c:	df000404 	addi	fp,sp,16
 80151a0:	e13ffe15 	stw	r4,-8(fp)
 80151a4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 80151a8:	e0bfff17 	ldw	r2,-4(fp)
 80151ac:	10800017 	ldw	r2,0(r2)
 80151b0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 80151b4:	e13ffe17 	ldw	r4,-8(fp)
 80151b8:	800663c0 	call	800663c <strlen>
 80151bc:	10800044 	addi	r2,r2,1
 80151c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80151c4:	00000d06 	br	80151fc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 80151c8:	e0bffc17 	ldw	r2,-16(fp)
 80151cc:	10800217 	ldw	r2,8(r2)
 80151d0:	e0fffd17 	ldw	r3,-12(fp)
 80151d4:	180d883a 	mov	r6,r3
 80151d8:	e17ffe17 	ldw	r5,-8(fp)
 80151dc:	1009883a 	mov	r4,r2
 80151e0:	80061f00 	call	80061f0 <memcmp>
 80151e4:	1000021e 	bne	r2,zero,80151f0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 80151e8:	e0bffc17 	ldw	r2,-16(fp)
 80151ec:	00000706 	br	801520c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 80151f0:	e0bffc17 	ldw	r2,-16(fp)
 80151f4:	10800017 	ldw	r2,0(r2)
 80151f8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80151fc:	e0fffc17 	ldw	r3,-16(fp)
 8015200:	e0bfff17 	ldw	r2,-4(fp)
 8015204:	18bff01e 	bne	r3,r2,80151c8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8015208:	0005883a 	mov	r2,zero
}
 801520c:	e037883a 	mov	sp,fp
 8015210:	dfc00117 	ldw	ra,4(sp)
 8015214:	df000017 	ldw	fp,0(sp)
 8015218:	dec00204 	addi	sp,sp,8
 801521c:	f800283a 	ret

08015220 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8015220:	defffb04 	addi	sp,sp,-20
 8015224:	dfc00415 	stw	ra,16(sp)
 8015228:	df000315 	stw	fp,12(sp)
 801522c:	df000304 	addi	fp,sp,12
 8015230:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8015234:	d0a01217 	ldw	r2,-32696(gp)
 8015238:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 801523c:	00003106 	br	8015304 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8015240:	e0bffd17 	ldw	r2,-12(fp)
 8015244:	10800217 	ldw	r2,8(r2)
 8015248:	1009883a 	mov	r4,r2
 801524c:	800663c0 	call	800663c <strlen>
 8015250:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8015254:	e0bffd17 	ldw	r2,-12(fp)
 8015258:	10c00217 	ldw	r3,8(r2)
 801525c:	e0bffe17 	ldw	r2,-8(fp)
 8015260:	10bfffc4 	addi	r2,r2,-1
 8015264:	1885883a 	add	r2,r3,r2
 8015268:	10800003 	ldbu	r2,0(r2)
 801526c:	10803fcc 	andi	r2,r2,255
 8015270:	1080201c 	xori	r2,r2,128
 8015274:	10bfe004 	addi	r2,r2,-128
 8015278:	10800bd8 	cmpnei	r2,r2,47
 801527c:	1000031e 	bne	r2,zero,801528c <alt_find_file+0x6c>
    {
      len -= 1;
 8015280:	e0bffe17 	ldw	r2,-8(fp)
 8015284:	10bfffc4 	addi	r2,r2,-1
 8015288:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 801528c:	e0bffe17 	ldw	r2,-8(fp)
 8015290:	e0ffff17 	ldw	r3,-4(fp)
 8015294:	1885883a 	add	r2,r3,r2
 8015298:	10800003 	ldbu	r2,0(r2)
 801529c:	10803fcc 	andi	r2,r2,255
 80152a0:	1080201c 	xori	r2,r2,128
 80152a4:	10bfe004 	addi	r2,r2,-128
 80152a8:	10800be0 	cmpeqi	r2,r2,47
 80152ac:	1000081e 	bne	r2,zero,80152d0 <alt_find_file+0xb0>
 80152b0:	e0bffe17 	ldw	r2,-8(fp)
 80152b4:	e0ffff17 	ldw	r3,-4(fp)
 80152b8:	1885883a 	add	r2,r3,r2
 80152bc:	10800003 	ldbu	r2,0(r2)
 80152c0:	10803fcc 	andi	r2,r2,255
 80152c4:	1080201c 	xori	r2,r2,128
 80152c8:	10bfe004 	addi	r2,r2,-128
 80152cc:	10000a1e 	bne	r2,zero,80152f8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 80152d0:	e0bffd17 	ldw	r2,-12(fp)
 80152d4:	10800217 	ldw	r2,8(r2)
 80152d8:	e0fffe17 	ldw	r3,-8(fp)
 80152dc:	180d883a 	mov	r6,r3
 80152e0:	e17fff17 	ldw	r5,-4(fp)
 80152e4:	1009883a 	mov	r4,r2
 80152e8:	80061f00 	call	80061f0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80152ec:	1000021e 	bne	r2,zero,80152f8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 80152f0:	e0bffd17 	ldw	r2,-12(fp)
 80152f4:	00000706 	br	8015314 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 80152f8:	e0bffd17 	ldw	r2,-12(fp)
 80152fc:	10800017 	ldw	r2,0(r2)
 8015300:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8015304:	e0fffd17 	ldw	r3,-12(fp)
 8015308:	d0a01204 	addi	r2,gp,-32696
 801530c:	18bfcc1e 	bne	r3,r2,8015240 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8015310:	0005883a 	mov	r2,zero
}
 8015314:	e037883a 	mov	sp,fp
 8015318:	dfc00117 	ldw	ra,4(sp)
 801531c:	df000017 	ldw	fp,0(sp)
 8015320:	dec00204 	addi	sp,sp,8
 8015324:	f800283a 	ret

08015328 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8015328:	defffa04 	addi	sp,sp,-24
 801532c:	dfc00515 	stw	ra,20(sp)
 8015330:	df000415 	stw	fp,16(sp)
 8015334:	dc000315 	stw	r16,12(sp)
 8015338:	df000404 	addi	fp,sp,16
 801533c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8015340:	00bffa04 	movi	r2,-24
 8015344:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8015348:	e03ffc15 	stw	zero,-16(fp)
 801534c:	00001d06 	br	80153c4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 8015350:	04020074 	movhi	r16,2049
 8015354:	84199d04 	addi	r16,r16,26228
 8015358:	e0bffc17 	ldw	r2,-16(fp)
 801535c:	01400304 	movi	r5,12
 8015360:	1009883a 	mov	r4,r2
 8015364:	80057b40 	call	80057b4 <__mulsi3>
 8015368:	8085883a 	add	r2,r16,r2
 801536c:	10800017 	ldw	r2,0(r2)
 8015370:	1000111e 	bne	r2,zero,80153b8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 8015374:	04020074 	movhi	r16,2049
 8015378:	84199d04 	addi	r16,r16,26228
 801537c:	e0bffc17 	ldw	r2,-16(fp)
 8015380:	01400304 	movi	r5,12
 8015384:	1009883a 	mov	r4,r2
 8015388:	80057b40 	call	80057b4 <__mulsi3>
 801538c:	8085883a 	add	r2,r16,r2
 8015390:	e0fffe17 	ldw	r3,-8(fp)
 8015394:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8015398:	d0e01617 	ldw	r3,-32680(gp)
 801539c:	e0bffc17 	ldw	r2,-16(fp)
 80153a0:	1880020e 	bge	r3,r2,80153ac <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 80153a4:	e0bffc17 	ldw	r2,-16(fp)
 80153a8:	d0a01615 	stw	r2,-32680(gp)
      }
      rc = i;
 80153ac:	e0bffc17 	ldw	r2,-16(fp)
 80153b0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 80153b4:	00000606 	br	80153d0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80153b8:	e0bffc17 	ldw	r2,-16(fp)
 80153bc:	10800044 	addi	r2,r2,1
 80153c0:	e0bffc15 	stw	r2,-16(fp)
 80153c4:	e0bffc17 	ldw	r2,-16(fp)
 80153c8:	10800810 	cmplti	r2,r2,32
 80153cc:	103fe01e 	bne	r2,zero,8015350 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 80153d0:	e0bffd17 	ldw	r2,-12(fp)
}
 80153d4:	e6ffff04 	addi	sp,fp,-4
 80153d8:	dfc00217 	ldw	ra,8(sp)
 80153dc:	df000117 	ldw	fp,4(sp)
 80153e0:	dc000017 	ldw	r16,0(sp)
 80153e4:	dec00304 	addi	sp,sp,12
 80153e8:	f800283a 	ret

080153ec <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 80153ec:	defffe04 	addi	sp,sp,-8
 80153f0:	df000115 	stw	fp,4(sp)
 80153f4:	df000104 	addi	fp,sp,4
 80153f8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 80153fc:	e0bfff17 	ldw	r2,-4(fp)
 8015400:	10bffe84 	addi	r2,r2,-6
 8015404:	10c00428 	cmpgeui	r3,r2,16
 8015408:	18001a1e 	bne	r3,zero,8015474 <alt_exception_cause_generated_bad_addr+0x88>
 801540c:	100690ba 	slli	r3,r2,2
 8015410:	00820074 	movhi	r2,2049
 8015414:	10950904 	addi	r2,r2,21540
 8015418:	1885883a 	add	r2,r3,r2
 801541c:	10800017 	ldw	r2,0(r2)
 8015420:	1000683a 	jmp	r2
 8015424:	08015464 	muli	zero,at,1361
 8015428:	08015464 	muli	zero,at,1361
 801542c:	08015474 	orhi	zero,at,1361
 8015430:	08015474 	orhi	zero,at,1361
 8015434:	08015474 	orhi	zero,at,1361
 8015438:	08015464 	muli	zero,at,1361
 801543c:	0801546c 	andhi	zero,at,1361
 8015440:	08015474 	orhi	zero,at,1361
 8015444:	08015464 	muli	zero,at,1361
 8015448:	08015464 	muli	zero,at,1361
 801544c:	08015474 	orhi	zero,at,1361
 8015450:	08015464 	muli	zero,at,1361
 8015454:	0801546c 	andhi	zero,at,1361
 8015458:	08015474 	orhi	zero,at,1361
 801545c:	08015474 	orhi	zero,at,1361
 8015460:	08015464 	muli	zero,at,1361
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8015464:	00800044 	movi	r2,1
 8015468:	00000306 	br	8015478 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 801546c:	0005883a 	mov	r2,zero
 8015470:	00000106 	br	8015478 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8015474:	0005883a 	mov	r2,zero
  }
}
 8015478:	e037883a 	mov	sp,fp
 801547c:	df000017 	ldw	fp,0(sp)
 8015480:	dec00104 	addi	sp,sp,4
 8015484:	f800283a 	ret

08015488 <atexit>:
 8015488:	200b883a 	mov	r5,r4
 801548c:	000f883a 	mov	r7,zero
 8015490:	000d883a 	mov	r6,zero
 8015494:	0009883a 	mov	r4,zero
 8015498:	80154d41 	jmpi	80154d4 <__register_exitproc>

0801549c <exit>:
 801549c:	defffe04 	addi	sp,sp,-8
 80154a0:	000b883a 	mov	r5,zero
 80154a4:	dc000015 	stw	r16,0(sp)
 80154a8:	dfc00115 	stw	ra,4(sp)
 80154ac:	2021883a 	mov	r16,r4
 80154b0:	80155ec0 	call	80155ec <__call_exitprocs>
 80154b4:	00820074 	movhi	r2,2049
 80154b8:	109e2104 	addi	r2,r2,30852
 80154bc:	11000017 	ldw	r4,0(r2)
 80154c0:	20800f17 	ldw	r2,60(r4)
 80154c4:	10000126 	beq	r2,zero,80154cc <exit+0x30>
 80154c8:	103ee83a 	callr	r2
 80154cc:	8009883a 	mov	r4,r16
 80154d0:	80158780 	call	8015878 <_exit>

080154d4 <__register_exitproc>:
 80154d4:	defffa04 	addi	sp,sp,-24
 80154d8:	dc000315 	stw	r16,12(sp)
 80154dc:	04020074 	movhi	r16,2049
 80154e0:	841e2104 	addi	r16,r16,30852
 80154e4:	80c00017 	ldw	r3,0(r16)
 80154e8:	dc400415 	stw	r17,16(sp)
 80154ec:	dfc00515 	stw	ra,20(sp)
 80154f0:	18805217 	ldw	r2,328(r3)
 80154f4:	2023883a 	mov	r17,r4
 80154f8:	10003726 	beq	r2,zero,80155d8 <__register_exitproc+0x104>
 80154fc:	10c00117 	ldw	r3,4(r2)
 8015500:	010007c4 	movi	r4,31
 8015504:	20c00e16 	blt	r4,r3,8015540 <__register_exitproc+0x6c>
 8015508:	1a000044 	addi	r8,r3,1
 801550c:	8800221e 	bne	r17,zero,8015598 <__register_exitproc+0xc4>
 8015510:	18c00084 	addi	r3,r3,2
 8015514:	18c7883a 	add	r3,r3,r3
 8015518:	18c7883a 	add	r3,r3,r3
 801551c:	12000115 	stw	r8,4(r2)
 8015520:	10c7883a 	add	r3,r2,r3
 8015524:	19400015 	stw	r5,0(r3)
 8015528:	0005883a 	mov	r2,zero
 801552c:	dfc00517 	ldw	ra,20(sp)
 8015530:	dc400417 	ldw	r17,16(sp)
 8015534:	dc000317 	ldw	r16,12(sp)
 8015538:	dec00604 	addi	sp,sp,24
 801553c:	f800283a 	ret
 8015540:	00800034 	movhi	r2,0
 8015544:	10800004 	addi	r2,r2,0
 8015548:	10002626 	beq	r2,zero,80155e4 <__register_exitproc+0x110>
 801554c:	01006404 	movi	r4,400
 8015550:	d9400015 	stw	r5,0(sp)
 8015554:	d9800115 	stw	r6,4(sp)
 8015558:	d9c00215 	stw	r7,8(sp)
 801555c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8015560:	d9400017 	ldw	r5,0(sp)
 8015564:	d9800117 	ldw	r6,4(sp)
 8015568:	d9c00217 	ldw	r7,8(sp)
 801556c:	10001d26 	beq	r2,zero,80155e4 <__register_exitproc+0x110>
 8015570:	81000017 	ldw	r4,0(r16)
 8015574:	10000115 	stw	zero,4(r2)
 8015578:	02000044 	movi	r8,1
 801557c:	22405217 	ldw	r9,328(r4)
 8015580:	0007883a 	mov	r3,zero
 8015584:	12400015 	stw	r9,0(r2)
 8015588:	20805215 	stw	r2,328(r4)
 801558c:	10006215 	stw	zero,392(r2)
 8015590:	10006315 	stw	zero,396(r2)
 8015594:	883fde26 	beq	r17,zero,8015510 <__register_exitproc+0x3c>
 8015598:	18c9883a 	add	r4,r3,r3
 801559c:	2109883a 	add	r4,r4,r4
 80155a0:	1109883a 	add	r4,r2,r4
 80155a4:	21802215 	stw	r6,136(r4)
 80155a8:	01800044 	movi	r6,1
 80155ac:	12406217 	ldw	r9,392(r2)
 80155b0:	30cc983a 	sll	r6,r6,r3
 80155b4:	4992b03a 	or	r9,r9,r6
 80155b8:	12406215 	stw	r9,392(r2)
 80155bc:	21c04215 	stw	r7,264(r4)
 80155c0:	01000084 	movi	r4,2
 80155c4:	893fd21e 	bne	r17,r4,8015510 <__register_exitproc+0x3c>
 80155c8:	11006317 	ldw	r4,396(r2)
 80155cc:	218cb03a 	or	r6,r4,r6
 80155d0:	11806315 	stw	r6,396(r2)
 80155d4:	003fce06 	br	8015510 <__register_exitproc+0x3c>
 80155d8:	18805304 	addi	r2,r3,332
 80155dc:	18805215 	stw	r2,328(r3)
 80155e0:	003fc606 	br	80154fc <__register_exitproc+0x28>
 80155e4:	00bfffc4 	movi	r2,-1
 80155e8:	003fd006 	br	801552c <__register_exitproc+0x58>

080155ec <__call_exitprocs>:
 80155ec:	defff504 	addi	sp,sp,-44
 80155f0:	df000915 	stw	fp,36(sp)
 80155f4:	dd400615 	stw	r21,24(sp)
 80155f8:	dc800315 	stw	r18,12(sp)
 80155fc:	dfc00a15 	stw	ra,40(sp)
 8015600:	ddc00815 	stw	r23,32(sp)
 8015604:	dd800715 	stw	r22,28(sp)
 8015608:	dd000515 	stw	r20,20(sp)
 801560c:	dcc00415 	stw	r19,16(sp)
 8015610:	dc400215 	stw	r17,8(sp)
 8015614:	dc000115 	stw	r16,4(sp)
 8015618:	d9000015 	stw	r4,0(sp)
 801561c:	2839883a 	mov	fp,r5
 8015620:	04800044 	movi	r18,1
 8015624:	057fffc4 	movi	r21,-1
 8015628:	00820074 	movhi	r2,2049
 801562c:	109e2104 	addi	r2,r2,30852
 8015630:	12000017 	ldw	r8,0(r2)
 8015634:	45005217 	ldw	r20,328(r8)
 8015638:	44c05204 	addi	r19,r8,328
 801563c:	a0001c26 	beq	r20,zero,80156b0 <__call_exitprocs+0xc4>
 8015640:	a0800117 	ldw	r2,4(r20)
 8015644:	15ffffc4 	addi	r23,r2,-1
 8015648:	b8000d16 	blt	r23,zero,8015680 <__call_exitprocs+0x94>
 801564c:	14000044 	addi	r16,r2,1
 8015650:	8421883a 	add	r16,r16,r16
 8015654:	8421883a 	add	r16,r16,r16
 8015658:	84402004 	addi	r17,r16,128
 801565c:	a463883a 	add	r17,r20,r17
 8015660:	a421883a 	add	r16,r20,r16
 8015664:	e0001e26 	beq	fp,zero,80156e0 <__call_exitprocs+0xf4>
 8015668:	80804017 	ldw	r2,256(r16)
 801566c:	e0801c26 	beq	fp,r2,80156e0 <__call_exitprocs+0xf4>
 8015670:	bdffffc4 	addi	r23,r23,-1
 8015674:	843fff04 	addi	r16,r16,-4
 8015678:	8c7fff04 	addi	r17,r17,-4
 801567c:	bd7ff91e 	bne	r23,r21,8015664 <__call_exitprocs+0x78>
 8015680:	00800034 	movhi	r2,0
 8015684:	10800004 	addi	r2,r2,0
 8015688:	10000926 	beq	r2,zero,80156b0 <__call_exitprocs+0xc4>
 801568c:	a0800117 	ldw	r2,4(r20)
 8015690:	1000301e 	bne	r2,zero,8015754 <__call_exitprocs+0x168>
 8015694:	a0800017 	ldw	r2,0(r20)
 8015698:	10003226 	beq	r2,zero,8015764 <__call_exitprocs+0x178>
 801569c:	a009883a 	mov	r4,r20
 80156a0:	98800015 	stw	r2,0(r19)
 80156a4:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 80156a8:	9d000017 	ldw	r20,0(r19)
 80156ac:	a03fe41e 	bne	r20,zero,8015640 <__call_exitprocs+0x54>
 80156b0:	dfc00a17 	ldw	ra,40(sp)
 80156b4:	df000917 	ldw	fp,36(sp)
 80156b8:	ddc00817 	ldw	r23,32(sp)
 80156bc:	dd800717 	ldw	r22,28(sp)
 80156c0:	dd400617 	ldw	r21,24(sp)
 80156c4:	dd000517 	ldw	r20,20(sp)
 80156c8:	dcc00417 	ldw	r19,16(sp)
 80156cc:	dc800317 	ldw	r18,12(sp)
 80156d0:	dc400217 	ldw	r17,8(sp)
 80156d4:	dc000117 	ldw	r16,4(sp)
 80156d8:	dec00b04 	addi	sp,sp,44
 80156dc:	f800283a 	ret
 80156e0:	a0800117 	ldw	r2,4(r20)
 80156e4:	80c00017 	ldw	r3,0(r16)
 80156e8:	10bfffc4 	addi	r2,r2,-1
 80156ec:	15c01426 	beq	r2,r23,8015740 <__call_exitprocs+0x154>
 80156f0:	80000015 	stw	zero,0(r16)
 80156f4:	183fde26 	beq	r3,zero,8015670 <__call_exitprocs+0x84>
 80156f8:	95c8983a 	sll	r4,r18,r23
 80156fc:	a0806217 	ldw	r2,392(r20)
 8015700:	a5800117 	ldw	r22,4(r20)
 8015704:	2084703a 	and	r2,r4,r2
 8015708:	10000b26 	beq	r2,zero,8015738 <__call_exitprocs+0x14c>
 801570c:	a0806317 	ldw	r2,396(r20)
 8015710:	2088703a 	and	r4,r4,r2
 8015714:	20000c1e 	bne	r4,zero,8015748 <__call_exitprocs+0x15c>
 8015718:	89400017 	ldw	r5,0(r17)
 801571c:	d9000017 	ldw	r4,0(sp)
 8015720:	183ee83a 	callr	r3
 8015724:	a0800117 	ldw	r2,4(r20)
 8015728:	15bfbf1e 	bne	r2,r22,8015628 <__call_exitprocs+0x3c>
 801572c:	98800017 	ldw	r2,0(r19)
 8015730:	153fcf26 	beq	r2,r20,8015670 <__call_exitprocs+0x84>
 8015734:	003fbc06 	br	8015628 <__call_exitprocs+0x3c>
 8015738:	183ee83a 	callr	r3
 801573c:	003ff906 	br	8015724 <__call_exitprocs+0x138>
 8015740:	a5c00115 	stw	r23,4(r20)
 8015744:	003feb06 	br	80156f4 <__call_exitprocs+0x108>
 8015748:	89000017 	ldw	r4,0(r17)
 801574c:	183ee83a 	callr	r3
 8015750:	003ff406 	br	8015724 <__call_exitprocs+0x138>
 8015754:	a0800017 	ldw	r2,0(r20)
 8015758:	a027883a 	mov	r19,r20
 801575c:	1029883a 	mov	r20,r2
 8015760:	003fb606 	br	801563c <__call_exitprocs+0x50>
 8015764:	0005883a 	mov	r2,zero
 8015768:	003ffb06 	br	8015758 <__call_exitprocs+0x16c>

0801576c <__muldi3>:
 801576c:	defff604 	addi	sp,sp,-40
 8015770:	dd800615 	stw	r22,24(sp)
 8015774:	dd400515 	stw	r21,20(sp)
 8015778:	dc400115 	stw	r17,4(sp)
 801577c:	357fffcc 	andi	r21,r6,65535
 8015780:	2022d43a 	srli	r17,r4,16
 8015784:	25bfffcc 	andi	r22,r4,65535
 8015788:	dcc00315 	stw	r19,12(sp)
 801578c:	dc800215 	stw	r18,8(sp)
 8015790:	2027883a 	mov	r19,r4
 8015794:	2825883a 	mov	r18,r5
 8015798:	b009883a 	mov	r4,r22
 801579c:	a80b883a 	mov	r5,r21
 80157a0:	dfc00915 	stw	ra,36(sp)
 80157a4:	df000815 	stw	fp,32(sp)
 80157a8:	ddc00715 	stw	r23,28(sp)
 80157ac:	3839883a 	mov	fp,r7
 80157b0:	302ed43a 	srli	r23,r6,16
 80157b4:	dd000415 	stw	r20,16(sp)
 80157b8:	dc000015 	stw	r16,0(sp)
 80157bc:	3029883a 	mov	r20,r6
 80157c0:	80057b40 	call	80057b4 <__mulsi3>
 80157c4:	a80b883a 	mov	r5,r21
 80157c8:	8809883a 	mov	r4,r17
 80157cc:	1021883a 	mov	r16,r2
 80157d0:	80057b40 	call	80057b4 <__mulsi3>
 80157d4:	8809883a 	mov	r4,r17
 80157d8:	b80b883a 	mov	r5,r23
 80157dc:	102b883a 	mov	r21,r2
 80157e0:	80057b40 	call	80057b4 <__mulsi3>
 80157e4:	b80b883a 	mov	r5,r23
 80157e8:	b009883a 	mov	r4,r22
 80157ec:	1023883a 	mov	r17,r2
 80157f0:	80057b40 	call	80057b4 <__mulsi3>
 80157f4:	8006d43a 	srli	r3,r16,16
 80157f8:	1545883a 	add	r2,r2,r21
 80157fc:	1885883a 	add	r2,r3,r2
 8015800:	1540022e 	bgeu	r2,r21,801580c <__muldi3+0xa0>
 8015804:	00c00074 	movhi	r3,1
 8015808:	88e3883a 	add	r17,r17,r3
 801580c:	1006d43a 	srli	r3,r2,16
 8015810:	1004943a 	slli	r2,r2,16
 8015814:	e00b883a 	mov	r5,fp
 8015818:	9809883a 	mov	r4,r19
 801581c:	843fffcc 	andi	r16,r16,65535
 8015820:	1c63883a 	add	r17,r3,r17
 8015824:	1421883a 	add	r16,r2,r16
 8015828:	80057b40 	call	80057b4 <__mulsi3>
 801582c:	900b883a 	mov	r5,r18
 8015830:	a009883a 	mov	r4,r20
 8015834:	1027883a 	mov	r19,r2
 8015838:	80057b40 	call	80057b4 <__mulsi3>
 801583c:	9885883a 	add	r2,r19,r2
 8015840:	1447883a 	add	r3,r2,r17
 8015844:	8005883a 	mov	r2,r16
 8015848:	dfc00917 	ldw	ra,36(sp)
 801584c:	df000817 	ldw	fp,32(sp)
 8015850:	ddc00717 	ldw	r23,28(sp)
 8015854:	dd800617 	ldw	r22,24(sp)
 8015858:	dd400517 	ldw	r21,20(sp)
 801585c:	dd000417 	ldw	r20,16(sp)
 8015860:	dcc00317 	ldw	r19,12(sp)
 8015864:	dc800217 	ldw	r18,8(sp)
 8015868:	dc400117 	ldw	r17,4(sp)
 801586c:	dc000017 	ldw	r16,0(sp)
 8015870:	dec00a04 	addi	sp,sp,40
 8015874:	f800283a 	ret

08015878 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8015878:	defffd04 	addi	sp,sp,-12
 801587c:	df000215 	stw	fp,8(sp)
 8015880:	df000204 	addi	fp,sp,8
 8015884:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8015888:	0001883a 	nop
 801588c:	e0bfff17 	ldw	r2,-4(fp)
 8015890:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8015894:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8015898:	10000226 	beq	r2,zero,80158a4 <_exit+0x2c>
    ALT_SIM_FAIL();
 801589c:	002af070 	cmpltui	zero,zero,43969
 80158a0:	00000106 	br	80158a8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 80158a4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80158a8:	003fff06 	br	80158a8 <_exit+0x30>
