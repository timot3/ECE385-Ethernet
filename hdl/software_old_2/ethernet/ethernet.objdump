
ethernet.elf:     file format elf32-littlenios2
ethernet.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000230

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00018604 memsz 0x00018604 flags r-x
    LOAD off    0x00019624 vaddr 0x08018624 paddr 0x0801a19c align 2**12
         filesz 0x00001b78 memsz 0x00001b78 flags rw-
    LOAD off    0x0001bd14 vaddr 0x0801bd14 paddr 0x0801bd14 align 2**12
         filesz 0x00000000 memsz 0x00000698 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00017dc4  08000230  08000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000630  08017ff4  08017ff4  00018ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b78  08018624  0801a19c  00019624  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000698  0801bd14  0801bd14  0001bd14  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0001b19c  2**0
                  CONTENTS
  7 .sdram        00000000  0801c3ac  0801c3ac  0001b19c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001b19c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001228  00000000  00000000  0001b1c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00030b22  00000000  00000000  0001c3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000be79  00000000  00000000  0004cf0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ebeb  00000000  00000000  00058d83  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003ae4  00000000  00000000  00067970  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00006057  00000000  00000000  0006b454  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00018201  00000000  00000000  000714ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000896ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001a40  00000000  00000000  000896f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00090932  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00090935  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00090941  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00090942  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00090943  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00090947  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0009094b  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0009094f  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0009095a  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00090965  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  00090970  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000027  00000000  00000000  00090978  2**0
                  CONTENTS, READONLY
 30 .jdi          00004e82  00000000  00000000  0009099f  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00083df0  00000000  00000000  00095821  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000230 l    d  .text	00000000 .text
08017ff4 l    d  .rodata	00000000 .rodata
08018624 l    d  .rwdata	00000000 .rwdata
0801bd14 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
0801c3ac l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ethernet_bsp//obj/HAL/src/crt0.o
08000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
0801bd24 l     O .bss	00000004 usb_delay.2608
0801bd28 l     O .bss	00000001 tmp_addr.2609
00000000 l    df *ABS*	00000000 EtherCard.cpp
00000000 l    df *ABS*	00000000 bufferfiller.cpp
00000000 l    df *ABS*	00000000 dhcp.cpp
0801bd54 l     O .bss	00000001 _ZL9dhcpState
08018654 l     O .rwdata	00000020 _ZL8hostname
0801bd58 l     O .bss	00000004 _ZL10currentXid
0801bd5c l     O .bss	00000004 _ZL10stateTimer
0801bd60 l     O .bss	00000004 _ZL10leaseStart
0801bd64 l     O .bss	00000004 _ZL9leaseTime
0801bd68 l     O .bss	00000004 _ZL6bufPtr
0801bd6c l     O .bss	00000004 _ZL20dhcpCustomOptionList
0801bd70 l     O .bss	00000004 _ZL24dhcpCustomOptionCallback
08002984 l     F .text	0000003c _ZL8addToBufh
080029c0 l     F .text	00000070 _ZL8addByteshPKh
08002a30 l     F .text	00000064 _ZL9addOptionhhPKh
08002a94 l     F .text	000002f0 _ZL17send_dhcp_messagePh
0801a12c l     O .rwdata	00000004 _ZZL17send_dhcp_messagePhE6cookie
08002d84 l     F .text	000000d4 _ZL18process_dhcp_offertPh
08002e58 l     F .text	00000210 _ZL16process_dhcp_ackt
08003068 l     F .text	00000130 _ZL26dhcp_received_message_typeth
08003198 l     F .text	00000058 _ZL10toAsciiHexh
0801bd74 l     O .bss	00000002 _ZZN9EtherCard21dhcpAddOptionCallbackEhPFvhPKhhEE10optionList
00000000 l    df *ABS*	00000000 dns.cpp
0801bd76 l     O .bss	00000001 _ZL8dnstid_l
080035f0 l     F .text	000001f0 _ZL10dnsRequestPKcb
080037e0 l     F .text	000001e8 _ZL17checkForDnsAnswert
00000000 l    df *ABS*	00000000 enc28j60.cpp
0801bd7c l     O .bss	00000001 _ZL12Enc28j60Bank
0801bd7d l     O .bss	00000001 _ZL9selectPin
08003bc4 l     F .text	00000080 _ZL7writeOphhh
08003c44 l     F .text	000000c4 _ZL6readOphh
08003d08 l     F .text	00000080 _ZL7SetBankh
08003d88 l     F .text	0000005c _ZL12writeRegBytehh
08003de4 l     F .text	00000074 _ZL8writeReght
08003e58 l     F .text	00000048 _ZL11readRegByteh
08003ea0 l     F .text	00000064 _ZL7readRegh
08003f04 l     F .text	00000078 _ZL8writePhyht
08003f7c l     F .text	00000080 _ZL11readPhyByteh
08004034 l     F .text	000000b4 _ZL10getMacAddrv
08004374 l     F .text	00000108 _ZL7readBuftPh
0800447c l     F .text	00000150 _ZL8writeBuftPKh
0801bd7e l     O .bss	00000001 _ZZN8ENC28J6013packetReceiveEvE16unreleasedPacket
0801bd80 l     O .bss	00000002 _ZZN8ENC28J6013packetReceiveEvE14gNextPacketPtr
00000000 l    df *ABS*	00000000 tcpip.cpp
0801a134 l     O .rwdata	00000001 _ZL20tcpclient_src_port_l
0801bd84 l     O .bss	00000001 _ZL6tcp_fd
0801bd85 l     O .bss	00000001 _ZL16tcp_client_state
0801bd86 l     O .bss	00000001 _ZL17tcp_client_port_h
0801bd87 l     O .bss	00000001 _ZL17tcp_client_port_l
0801bd88 l     O .bss	00000004 _ZL20client_tcp_result_cb
0801bd8c l     O .bss	00000004 _ZL22client_tcp_datafill_cb
0801bd90 l     O .bss	00000001 _ZL6www_fd
0801bd94 l     O .bss	00000004 _ZL17client_browser_cb
0801bd98 l     O .bss	00000004 _ZL27client_additionalheaderline
0801bd9c l     O .bss	00000004 _ZL14client_postval
0801bda0 l     O .bss	00000004 _ZL13client_urlbuf
0801bda4 l     O .bss	00000004 _ZL17client_urlbuf_var
0801bda8 l     O .bss	00000004 _ZL14client_hoststr
0801bdac l     O .bss	00000004 _ZL7icmp_cb
0801bdb0 l     O .bss	00000006 _ZL11destmacaddr
0801bdb6 l     O .bss	00000001 _ZL19waiting_for_dns_mac
0801bdb7 l     O .bss	00000001 _ZL11has_dns_mac
0801bdb8 l     O .bss	00000001 _ZL20waiting_for_dest_mac
0801bdb9 l     O .bss	00000001 _ZL12has_dest_mac
0801bdba l     O .bss	00000006 _ZL9gwmacaddr
0801bdc0 l     O .bss	00000001 _ZL9waitgwmac
0801bdc2 l     O .bss	00000002 _ZL13info_data_len
0801a135 l     O .rwdata	00000001 _ZL6seqnum
0801a136 l     O .rwdata	00000001 _ZL9result_fd
0801bdc4 l     O .bss	00000004 _ZL10result_ptr
0801bdc8 l     O .bss	00000004 _ZL3SEQ
0801a13d l     O .rwdata	00000008 _ZL9arpreqhdr
08018208 l     O .rodata	00000009 _ZL5iphdr
08018211 l     O .rodata	0000000a _ZL9ntpreqhdr
08004998 l     F .text	00000184 _ZL13fill_checksumhhth
08004b1c l     F .text	00000050 _ZL7setMACsPKh
08004b6c l     F .text	00000060 _ZL12setMACandIPsPKhS0_
08004bcc l     F .text	00000044 _ZL24check_ip_message_is_fromPKh
08004c10 l     F .text	000000bc _ZL6is_lanPKhS0_
08004ccc l     F .text	00000090 _ZL25eth_type_is_arp_and_my_ipt
08004d5c l     F .text	000000dc _ZL24eth_type_is_ip_and_my_ipt
08004e38 l     F .text	00000080 _ZL20fill_ip_hdr_checksumv
08004eb8 l     F .text	0000006c _ZL11make_eth_ipv
08004f24 l     F .text	00000100 _ZL8step_seqth
08005024 l     F .text	000000e4 _ZL12make_tcpheadth
08005108 l     F .text	000000c8 _ZL28make_arp_answer_from_requestv
080051d0 l     F .text	000000a4 _ZL28make_echo_reply_from_requestt
080053f4 l     F .text	0000012c _ZL24make_tcp_synack_from_synv
080055b0 l     F .text	000000f0 _ZL21make_tcp_ack_from_anysh
080056a0 l     F .text	000000b8 _ZL30make_tcp_ack_with_data_noflagst
080057c0 l     F .text	000000a8 _ZL16getBigEndianLongh
08005868 l     F .text	00000088 _ZL17setSequenceNumberm
0800622c l     F .text	000000d4 _ZL17client_arp_whohasPh
08006380 l     F .text	00000068 _ZL16client_store_macPhS_
080064ac l     F .text	00000204 _ZL10client_synhhh
0800671c l     F .text	00000028 _ZL31www_client_internal_datafill_cbh
08006744 l     F .text	000000f8 _ZL29www_client_internal_result_cbhhtt
080069ac l     F .text	00000028 _ZL15tcp_datafill_cbh
080069d4 l     F .text	00000064 _ZL13tcp_result_cbhhtt
00000000 l    df *ABS*	00000000 udpserver.cpp
00000000 l    df *ABS*	00000000 webutil.cpp
00000000 l    df *ABS*	00000000 main.cpp
0801a145 l     O .rwdata	00000006 _ZL5mymac
080079bc l     F .text	0000003c _ZL9gotPingedPh
0801a157 l     O .rwdata	00000004 _ZZ4mainE4mask
0801a153 l     O .rwdata	00000004 _ZZ4mainE3dns
0801a14f l     O .rwdata	00000004 _ZZ4mainE2gw
0801a14b l     O .rwdata	00000004 _ZZ4mainE2ip
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
08018674 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 ldiv.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0801836e l     O .rodata	00000010 zeroes.4404
0800a9a8 l     F .text	000000bc __sbprintf
0801837e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0800abb8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800c710 l     F .text	00000008 __fp_unlock
0800c724 l     F .text	0000019c __sinit.part.1
0800c8c0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
08018ab8 l     O .rwdata	00000020 lc_ctype_charset
08018a98 l     O .rwdata	00000020 lc_message_charset
08018ad8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
080183ac l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800fce8 l     F .text	000000fc __sprint_r.part.0
080184d0 l     O .rodata	00000010 zeroes.4349
08011324 l     F .text	000000bc __sbprintf
080184e0 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
08015190 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
080152a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
080152d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
080155b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
080156a0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0801578c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08015968 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0801a18c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_times.c
08015d80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08015e64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08015fa0 l     F .text	00000034 alt_dev_reg
080190c0 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08016298 l     F .text	0000020c altera_avalon_jtag_uart_irq
080164a4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08016cd8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08017070 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
080174d0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08017630 l     F .text	0000003c alt_get_errno
0801766c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
0801be14 g     O .bss	00000004 alt_instruction_exception_handler
08007688 g     F .text	00000028 _ZN9EtherCard18udpServerListeningEv
08008288 g     F .text	00000018 putchar
080023f8 g     F .text	000000a0 _ZN9EtherCard4wtoaEtPc
0800f1c4 g     F .text	00000074 _mprec_log10
0800f2b0 g     F .text	0000008c __any_on
08011a30 g     F .text	00000054 _isatty_r
080183b8 g     O .rodata	00000028 __mprec_tinytens
080158a4 g     F .text	0000007c alt_main
08008374 g     F .text	00000090 strcpy
0801a120 g     O .rwdata	00000008 ctrl_xfers
080082a0 g     F .text	000000c0 _puts_r
0801c2ac g     O .bss	00000100 alt_irq
08011a84 g     F .text	00000060 _lseek_r
08006928 g     F .text	00000084 _ZN9EtherCard8httpPostEPKcS1_S1_S1_PFvhttE
08001a48 g     F .text	00000644 USB_Task
0800793c g     F .text	00000040 _ZN9EtherCard7copyMacEPhPKh
0801a19c g       *ABS*	00000000 __flash_rwdata_start
08013b68 g     F .text	00000088 .hidden __eqdf2
0800d544 g     F .text	0000005c _gettimeofday_r
0801c3ac g       *ABS*	00000000 __alt_heap_start
08008244 g     F .text	0000003c printf
08011b44 g     F .text	0000009c _wcrtomb_r
08000b44 g     F .text	00000088 kbdPoll
0800433c g     F .text	00000038 _ZN8ENC28J608isLinkUpEv
0800fba8 g     F .text	0000005c __sseek
0800ca70 g     F .text	00000010 __sinit
080113e0 g     F .text	00000140 __swbuf_r
0800d5a0 g     F .text	0000007c _setlocale_r
0800c8c8 g     F .text	00000078 __sfmoreglue
08015944 g     F .text	00000024 __malloc_unlock
0801bdcc g     O .bss	00000001 numListeners
0800e128 g     F .text	0000015c memmove
0800ca58 g     F .text	00000018 _cleanup
0800e284 g     F .text	000000a8 _Balloc
08000c98 g     F .text	0000008c MAXreg_wr
08018624 g     O .rwdata	00000030 ClientDriverTable
08006af8 g     F .text	00000088 _ZN9EtherCard24packetLoopIcmpCheckReplyEPKh
08013bf0 g     F .text	000000dc .hidden __gtdf2
080178b4 g     F .text	00000024 altera_nios2_gen2_irq_init
0800208c g     F .text	0000002c MSDProbe
08000000 g     F .entry	0000000c __reset
08015dbc g     F .text	00000078 times
080068a0 g     F .text	00000088 _ZN9EtherCard9browseUrlEPKcS1_S1_S1_PFvhttE
08001548 g     F .text	000000e8 XferCtrlData
08000020 g       *ABS*	00000000 __flash_exceptions_start
0801be18 g     O .bss	00000010 hid_ep
080119d4 g     F .text	0000005c _fstat_r
0801bdd0 g     O .bss	00000004 errno
080039c8 g     F .text	00000168 _ZN9EtherCard9dnsLookupEPKcb
0800fb24 g     F .text	00000008 __seofread
08003400 g     F .text	000001f0 _ZN9EtherCard16DhcpStateMachineEt
0801be00 g     O .bss	00000004 alt_argv
08022120 g       *ABS*	00000000 _gp
08015e34 g     F .text	00000030 usleep
0801bd41 g     O .bss	00000004 _ZN9EtherCard6dhcpipE
08000e94 g     F .text	00000080 MAXreg_rd
08018f40 g     O .rwdata	00000180 alt_fd_list
08000a7c g     F .text	00000040 HID_init
08008280 g     F .text	00000008 _putchar_r
080178d8 g     F .text	00000090 alt_find_dev
080086a8 g     F .text	00000008 _times_r
08007fa4 g     F .text	00000148 memcpy
0800c718 g     F .text	0000000c _cleanup_r
08014fa8 g     F .text	000000dc .hidden __floatsidf
080175b4 g     F .text	0000007c alt_io_redirect
08013ccc g     F .text	000000f4 .hidden __ltdf2
08017ff4 g       *ABS*	00000000 __DTOR_END__
08008360 g     F .text	00000014 puts
08017b34 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0800fa08 g     F .text	00000074 __fpclassifyd
080076b0 g     F .text	000001b8 _ZN9EtherCard27udpServerHasProcessedPacketEt
0800743c g     F .text	000000a0 _ZN9EtherCard21udpServerListenOnPortEPFvtPhtPKctEt
0800f120 g     F .text	000000a4 __ratio
08011308 g     F .text	0000001c __vfiprintf_internal
0801bd2a g     O .bss	00000001 ether
0801669c g     F .text	0000021c altera_avalon_jtag_uart_read
08008214 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08007d84 g     F .text	00000064 .hidden __udivsi3
080155f4 g     F .text	000000ac isatty
08018408 g     O .rodata	000000c8 __mprec_tens
0801be40 g     O .bss	00000040 listeners
0800632c g     F .text	00000054 _ZN9EtherCard16clientWaitingDnsEv
0800d61c g     F .text	0000000c __locale_charset
0801bdec g     O .bss	00000008 alt_timezone
08002610 g     F .text	0000034c _ZN12BufferFiller6emit_pEPKcz
0801bde8 g     O .bss	00000004 __malloc_top_pad
080079f8 g     F .text	000000d0 _Z15printSignedHex0a
0801a128 g     O .rwdata	00000001 usb_task_state
0801a164 g     O .rwdata	00000004 __mb_cur_max
0800d64c g     F .text	0000000c _localeconv_r
08005cb4 g     F .text	000000f4 _ZN9EtherCard16ntpProcessAnswerEPmh
0800e6b8 g     F .text	0000003c __i2b
0800cef4 g     F .text	000004c8 __sfvwrite_r
0801a130 g     O .rwdata	00000004 GPIO_PIO
0800fa7c g     F .text	00000054 _sbrk_r
08005520 g     F .text	00000090 _ZN9EtherCard19getTcpPayloadLengthEv
08011ae4 g     F .text	00000060 _read_r
080011fc g     F .text	00000094 MAX3421E_init
0801a184 g     O .rwdata	00000004 alt_max_fd
080116c8 g     F .text	000000f0 _fclose_r
0800c6e0 g     F .text	00000030 fflush
0801bde4 g     O .bss	00000004 __malloc_max_sbrked_mem
080040e8 g     F .text	00000254 _ZN8ENC28J6010initializeEtPKhh
080128ec g     F .text	000008ac .hidden __adddf3
08002364 g     F .text	00000094 _ZN9EtherCard11staticSetupEPKhS1_S1_S1_
0800eec8 g     F .text	0000010c __b2d
08012328 g     F .text	000005c4 .hidden __umoddi3
080157c8 g     F .text	000000dc lseek
0801a15c g     O .rwdata	00000004 _global_impure_ptr
0800f4a4 g     F .text	00000564 _realloc_r
0801c3ac g       *ABS*	00000000 __bss_end
080173e0 g     F .text	000000f0 alt_iic_isr_register
08015c78 g     F .text	00000108 alt_tick
08011d2c g     F .text	000005fc .hidden __udivdi3
08011930 g     F .text	00000024 _fputwc_r
080183e0 g     O .rodata	00000028 __mprec_bigtens
0800e49c g     F .text	00000104 __s2b
08015084 g     F .text	000000a8 .hidden __floatunsidf
0800ec08 g     F .text	00000060 __mcmp
0800295c g     F .text	00000028 _Z6millisv
08003b30 g     F .text	00000058 _Z5delayi
0800ca90 g     F .text	00000018 __fp_lock_all
08017394 g     F .text	0000004c alt_ic_irq_enabled
08005968 g     F .text	00000070 _ZN9EtherCard26httpServerReply_with_flagsEth
08015bdc g     F .text	0000009c alt_alarm_stop
0801be10 g     O .bss	00000004 alt_irq_active
08002154 g     F .text	0000002c DummyProbe
08005da8 g     F .text	00000188 _ZN9EtherCard10udpPrepareEtPKht
080000fc g     F .exceptions	000000d4 alt_irq_handler
08018f18 g     O .rwdata	00000028 alt_dev_null
0801bd50 g     O .bss	00000002 _ZN9EtherCard8delaycntE
0801bd49 g     O .bss	00000004 _ZN9EtherCard5hisipE
08000abc g     F .text	00000088 mousePoll
08003ffc g     F .text	00000038 _Z8getThingh
08001050 g     F .text	00000024 Vbus_power
08017050 g     F .text	00000020 alt_dcache_flush_all
0800e5a0 g     F .text	00000068 __hi0bits
08014f28 g     F .text	00000080 .hidden __fixdfsi
0801a19c g       *ABS*	00000000 __ram_rwdata_end
0801bd39 g     O .bss	00000004 _ZN9EtherCard11broadcastipE
0801a17c g     O .rwdata	00000008 alt_dev_list
08015ea0 g     F .text	00000100 write
0800f33c g     F .text	000000a0 _putc_r
08018624 g       *ABS*	00000000 __ram_rodata_end
0801bd29 g     O .bss	00000001 usb_error
0801530c g     F .text	000000b8 fstat
08013ccc g     F .text	000000f4 .hidden __ledf2
08007868 g     F .text	00000050 _ZN9EtherCard7printIpEPKcPKh
080059d8 g     F .text	0000015c _ZN9EtherCard17clientIcmpRequestEPKh
0800e980 g     F .text	00000140 __pow5mult
0800fdfc g     F .text	0000150c ___vfiprintf_internal_r
0801bddc g     O .bss	00000004 __nlocale_changed
08007de8 g     F .text	00000058 .hidden __umodsi3
08004958 g     F .text	00000040 _Z8memcpy_PPvPKvj
08006acc g     F .text	0000002c _ZN9EtherCard20registerPingCallbackEPFvPhE
0801c3ac g       *ABS*	00000000 end
0800609c g     F .text	00000190 _ZN9EtherCard7sendWolEPh
080161d8 g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
080016a4 g     F .text	0000017c XferDispatchPkt
08017ff4 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0801bd7b g     O .bss	00000001 _ZN8ENC28J6019promiscuous_enabledE
08016d50 g     F .text	0000007c alt_avalon_timer_sc_init
0801512c g     F .text	00000064 .hidden __clzsi2
080066b0 g     F .text	0000006c _ZN9EtherCard12clientTcpReqEPFhhhttEPFthEt
080168b8 g     F .text	00000224 altera_avalon_jtag_uart_write
0800ca80 g     F .text	00000004 __sfp_lock_acquire
0800e044 g     F .text	000000e4 memchr
080086b0 g     F .text	000022dc ___vfprintf_internal_r
080013c8 g     F .text	00000034 MaxGpxHandler
0800cbe4 g     F .text	00000310 _free_r
0800d628 g     F .text	00000010 __locale_mb_cur_max
080048c4 g     F .text	00000070 _ZN8ENC28J6016disableBroadcastEb
0801bd35 g     O .bss	00000004 _ZN9EtherCard7netmaskE
08003380 g     F .text	00000048 _ZN9EtherCard21dhcpAddOptionCallbackEhPFvhPKhhE
08017d34 g     F .text	00000180 __call_exitprocs
08005758 g     F .text	00000068 _ZN9EtherCard15httpServerReplyEt
0800683c g     F .text	00000064 _ZN9EtherCard9browseUrlEPKcS1_S1_PFvhttE
0801bd31 g     O .bss	00000004 _ZN9EtherCard4myipE
0801bdd8 g     O .bss	00000004 __mlocale_changed
0801a168 g     O .rwdata	00000004 __malloc_sbrk_base
08000230 g     F .text	0000003c _start
0801be08 g     O .bss	00000004 _alt_tick_rate
08000f14 g     F .text	00000094 MAXbytes_rd
0800eac0 g     F .text	00000148 __lshift
08016adc g     F .text	000001fc alt_avalon_spi_command
0801be0c g     O .bss	00000004 _alt_nticks
080159a4 g     F .text	00000104 read
0801600c g     F .text	00000068 alt_sys_init
0801c264 g     O .bss	00000048 devtable
08017c1c g     F .text	00000118 __register_exitproc
08000674 g     F .text	00000408 HIDKProbe
080033c8 g     F .text	00000038 _ZN9EtherCard21dhcpAddOptionCallbackEPhPFvhPKhhE
0801be28 g     O .bss	00000018 msd_ep
0800849c g     F .text	000000d0 strncmp
08006b80 g     F .text	0000011c _ZN9EtherCard6acceptEtt
080045cc g     F .text	0000013c _ZN8ENC28J6013packetReceiveEv
0800e6f4 g     F .text	0000028c __multiply
08016544 g     F .text	00000068 altera_avalon_jtag_uart_close
080019b0 g     F .text	00000098 USB_init
08007e40 g     F .text	00000028 .hidden __mulsi3
0801c164 g     O .bss	00000100 bigbuf
08018624 g       *ABS*	00000000 __ram_rwdata_start
08017ff4 g       *ABS*	00000000 __ram_rodata_start
0800856c g     F .text	000000ec strncpy
0801c13c g     O .bss	00000028 __malloc_current_mallinfo
0801bd20 g     O .bss	00000001 last_usb_task_state
0800efd4 g     F .text	0000014c __d2b
0801bd18 g     O .bss	00000008 dev0ep
08016074 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08017a70 g     F .text	000000c4 alt_get_fd
08016ef8 g     F .text	00000158 alt_busy_sleep
080020b8 g     F .text	00000038 MSDEventHandler
08011598 g     F .text	00000054 _close_r
0801bd7a g     O .bss	00000001 _ZN8ENC28J6017broadcast_enabledE
08007f28 g     F .text	0000007c memcmp
08016134 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0801c3ac g       *ABS*	00000000 __alt_stack_base
08016184 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0801a12a g     O .rwdata	00000002 _ZN9EtherCard7hisportE
08006c9c g     F .text	00000770 _ZN9EtherCard10packetLoopEt
08004708 g     F .text	00000158 _ZN8ENC28J6010packetSendEt
0800aa64 g     F .text	00000154 __swsetup_r
08013198 g     F .text	000009d0 .hidden __divdf3
0800c940 g     F .text	00000118 __sfp
0800f238 g     F .text	00000078 __copybits
08018b10 g     O .rwdata	00000408 __malloc_av_
0800ca8c g     F .text	00000004 __sinit_lock_release
0800211c g     F .text	00000038 CDCEventHandler
08013dc0 g     F .text	0000086c .hidden __muldf3
08002180 g     F .text	00000038 DummyEventHandler
0800fad0 g     F .text	00000054 __sread
080058f0 g     F .text	0000002c _ZN9EtherCard17getSequenceNumberEv
08017968 g     F .text	00000108 alt_find_file
0801be80 g     O .bss	000002bc _ZN8ENC28J606bufferE
080170ac g     F .text	000000a4 alt_dev_llist_insert
08015920 g     F .text	00000024 __malloc_lock
08015b2c g     F .text	000000b0 sbrk
08006a38 g     F .text	0000004c _ZN9EtherCard7tcpSendEv
0800c684 g     F .text	0000005c _fflush_r
080115ec g     F .text	000000dc _calloc_r
080153c4 g     F .text	000001f4 gettimeofday
0801bd14 g       *ABS*	00000000 __bss_start
08005274 g     F .text	00000180 _ZN9EtherCard12makeUdpReplyEPKcht
08001074 g     F .text	00000188 MAX_busprobe
0801bd14 g     O .bss	00000002 hid_device
080080ec g     F .text	00000128 memset
08007ac8 g     F .text	000001c4 main
0800591c g     F .text	0000004c _ZN9EtherCard18httpServerReplyAckEv
08001290 g     F .text	0000006c MAX3421E_Task
0801be04 g     O .bss	00000004 alt_envp
0801bde0 g     O .bss	00000004 __malloc_max_total_mem
080160d4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08003b88 g     F .text	0000003c _Z7bitReadhh
08011520 g     F .text	00000018 __swbuf
08002210 g     F .text	00000084 ConvUTF8ToStr
0800fc04 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
080117b8 g     F .text	00000014 fclose
0800ade0 g     F .text	00001688 _dtoa_r
0800d838 g     F .text	0000080c _malloc_r
08011ca0 g     F .text	00000030 __ascii_wctomb
08008658 g     F .text	00000050 time
0801a188 g     O .rwdata	00000004 alt_errno
08004860 g     F .text	00000064 _ZN8ENC28J6015enableBroadcastEb
0800d3bc g     F .text	000000c4 _fwalk
0801bd2b g     O .bss	00000006 _ZN9EtherCard5mymacE
0800f3dc g     F .text	000000c8 putc
08007c8c g     F .text	00000084 .hidden __divsi3
08001820 g     F .text	00000190 XferInTransfer
0800cac0 g     F .text	00000124 _malloc_trim_r
08017ff4 g       *ABS*	00000000 __CTOR_END__
080021d8 g     F .text	00000038 GetDevtable
0800fc0c g     F .text	000000dc strcmp
08017ff4 g       *ABS*	00000000 __flash_rodata_start
08017ff4 g       *ABS*	00000000 __DTOR_LIST__
0801bd78 g     O .bss	00000002 _ZN8ENC28J6010bufferSizeE
08001630 g     F .text	00000074 XferCtrlND
0801bd45 g     O .bss	00000004 _ZN9EtherCard5dnsipE
08013b68 g     F .text	00000088 .hidden __nedf2
08000fa8 g     F .text	000000a8 MAX3421E_reset
08015fd4 g     F .text	00000038 alt_irq_init
08015aa8 g     F .text	00000084 alt_release_fd
08005f30 g     F .text	000000d0 _ZN9EtherCard11udpTransmitEt
080184f0 g     O .rodata	00000100 .hidden __clz_tab
0801bdd4 g     O .bss	00000004 _PathLocale
08017bd0 g     F .text	00000014 atexit
08011538 g     F .text	00000060 _write_r
0800d658 g     F .text	00000018 setlocale
080063e8 g     F .text	00000044 _ZN9EtherCard7setGwIpEPKh
0801a160 g     O .rwdata	00000004 _impure_ptr
0801bdfc g     O .bss	00000004 alt_argc
0800c468 g     F .text	0000021c __sflush_r
080171b0 g     F .text	00000060 _do_dtors
0800d644 g     F .text	00000008 __locale_cjk_lang
08006a84 g     F .text	00000048 _ZN9EtherCard8tcpReplyEh
08000d24 g     F .text	00000170 MAXbytes_wr
0800797c g     F .text	00000040 _ZN9EtherCard6copyIpEPhPKh
080074dc g     F .text	000000d4 _ZN9EtherCard26udpServerPauseListenOnPortEt
08007eb4 g     F .text	00000074 ldiv
080075b0 g     F .text	000000d8 _ZN9EtherCard27udpServerResumeListenOnPortEt
08000020 g       .exceptions	00000000 alt_irq_entry
0800ee64 g     F .text	00000064 __ulp
0800caa8 g     F .text	00000018 __fp_unlock_all
0801a174 g     O .rwdata	00000008 alt_fs_list
08004934 g     F .text	00000024 _Z4PSTRPc
080020f0 g     F .text	0000002c CDCProbe
0801bdf4 g     O .bss	00000008 alt_resettime
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800d670 g     F .text	0000000c localeconv
08002294 g     F .text	000000d0 _ZN9EtherCard5beginEtPKhh
080021b8 g     F .text	00000020 GetUsbTaskState
0801a137 g     O .rwdata	00000006 allOnes
08017230 g     F .text	00000050 alt_ic_isr_register
0801a19c g       *ABS*	00000000 _edata
08000c04 g     F .text	00000038 HIDKEventHandler
0801c3ac g       *ABS*	00000000 _end
080012fc g     F .text	000000cc MaxIntHandler
080117cc g     F .text	00000164 __fputwc
08000230 g       *ABS*	00000000 __ram_exceptions_end
080165ac g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08000c3c g     F .text	00000034 SPI_init
08017308 g     F .text	0000008c alt_ic_irq_disable
0801bd3d g     O .bss	00000004 _ZN9EtherCard4gwipE
0800fb2c g     F .text	0000007c __swrite
0801a16c g     O .rwdata	00000004 __malloc_trim_threshold
0800d638 g     F .text	0000000c __locale_msgcharset
08017be4 g     F .text	00000038 exit
0800d480 g     F .text	000000c4 _fwalk_reent
0800ec68 g     F .text	000001fc __mdiff
0800740c g     F .text	00000030 _ZN9EtherCard20persistTcpConnectionEb
08006300 g     F .text	0000002c _ZN9EtherCard15clientWaitingGwEv
08007d10 g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
0800ca84 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
08005b34 g     F .text	00000180 _ZN9EtherCard10ntpRequestEPhh
08000bcc g     F .text	00000038 HIDMEventHandler
08017fc0 g     F .text	00000034 _exit
08002498 g     F .text	00000178 _Z4ltoalPci
08016dcc g     F .text	0000012c alt_alarm_start
08017eb4 g     F .text	0000010c .hidden __muldi3
0800d67c g     F .text	000001bc __smakebuf_r
08008404 g     F .text	00000098 strlen
08017758 g     F .text	0000015c open
08013bf0 g     F .text	000000dc .hidden __gedf2
08007e68 g     F .text	0000004c clock
0801bd4e g     O .bss	00000001 _ZN9EtherCard22persist_tcp_connectionE
0801a170 g     O .rwdata	00000004 __wctomb
0800fde4 g     F .text	00000018 __sprint_r
08017210 g     F .text	00000020 alt_icache_flush_all
0801a198 g     O .rwdata	00000004 alt_priority_mask
0801bd4d g     O .bss	00000001 _ZN9EtherCard10using_dhcpE
08017280 g     F .text	00000088 alt_ic_irq_enable
0800a98c g     F .text	0000001c __vfprintf_internal
0800026c g     F .text	00000408 HIDMProbe
08011cd0 g     F .text	0000005c _wctomb_r
08000c70 g     F .text	00000028 SPI_wr
0801462c g     F .text	000008fc .hidden __subdf3
0800e608 g     F .text	000000b0 __lo0bits
0801a190 g     O .rwdata	00000008 alt_alarm_list
08017150 g     F .text	00000060 _do_ctors
08006000 g     F .text	0000009c _ZN9EtherCard7sendUdpEPKchtPKht
080078b8 g     F .text	00000084 _ZN9EtherCard7printIpEPKh
08011be0 g     F .text	000000c0 wcrtomb
080151cc g     F .text	000000d8 close
080031f0 g     F .text	00000190 _ZN9EtherCard9dhcpSetupEPKcb
08015708 g     F .text	00000084 alt_load
0800642c g     F .text	00000080 _ZN9EtherCard22updateBroadcastAddressEv
08011954 g     F .text	00000080 fputwc
0800ca88 g     F .text	00000004 __sinit_lock_acquire
080013fc g     F .text	0000014c XferCtrlReq
0800e354 g     F .text	00000148 __multadd
0800e32c g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408c14 	ori	at,at,560
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	008200b4 	movhi	r2,2050
 8000140:	10b0ab04 	addi	r2,r2,-15700
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	008200b4 	movhi	r2,2050
 8000158:	10b0ab04 	addi	r2,r2,-15700
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e4:	00bfffc4 	movi	r2,-1
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001f0:	d0a73d17 	ldw	r2,-25356(gp)
 80001f4:	10000726 	beq	r2,zero,8000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f8:	d0a73d17 	ldw	r2,-25356(gp)
 80001fc:	e0fffd17 	ldw	r3,-12(fp)
 8000200:	e1bffe17 	ldw	r6,-8(fp)
 8000204:	e17fff17 	ldw	r5,-4(fp)
 8000208:	1809883a 	mov	r4,r3
 800020c:	103ee83a 	callr	r2
 8000210:	00000206 	br	800021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000218:	0005883a 	mov	r2,zero
}
 800021c:	e037883a 	mov	sp,fp
 8000220:	dfc00117 	ldw	ra,4(sp)
 8000224:	df000017 	ldw	fp,0(sp)
 8000228:	dec00204 	addi	sp,sp,8
 800022c:	f800283a 	ret

Disassembly of section .text:

08000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000230:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000238:	068200b4 	movhi	gp,2050
    ori gp, gp, %lo(_gp)
 800023c:	d6884814 	ori	gp,gp,8480
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000240:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000244:	10af4514 	ori	r2,r2,48404

    movhi r3, %hi(__bss_end)
 8000248:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 800024c:	18f0eb14 	ori	r3,r3,50092

    beq r2, r3, 1f
 8000250:	10c00326 	beq	r2,r3,8000260 <_start+0x30>

0:
    stw zero, (r2)
 8000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800025c:	10fffd36 	bltu	r2,r3,8000254 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000260:	80157080 	call	8015708 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000264:	80158a40 	call	80158a4 <alt_main>

08000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000268:	003fff06 	br	8000268 <alt_after_alt_main>

0800026c <HIDMProbe>:
/* HID Mouse probe. Called from USB state machine.                          */
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe(BYTE addr, DWORD flags) {
 800026c:	defff204 	addi	sp,sp,-56
 8000270:	dfc00d15 	stw	ra,52(sp)
 8000274:	df000c15 	stw	fp,48(sp)
 8000278:	df000c04 	addi	fp,sp,48
 800027c:	2005883a 	mov	r2,r4
 8000280:	e17fff15 	stw	r5,-4(fp)
 8000284:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 8000288:	008200b4 	movhi	r2,2050
 800028c:	10b05904 	addi	r2,r2,-16028
 8000290:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 8000294:	008200b4 	movhi	r2,2050
 8000298:	10b05904 	addi	r2,r2,-16028
 800029c:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 80002a0:	e0fffe03 	ldbu	r3,-8(fp)
 80002a4:	008200b4 	movhi	r2,2050
 80002a8:	10b05904 	addi	r2,r2,-16028
 80002ac:	d8800415 	stw	r2,16(sp)
 80002b0:	00800244 	movi	r2,9
 80002b4:	d8800315 	stw	r2,12(sp)
 80002b8:	d8000215 	stw	zero,8(sp)
 80002bc:	00800084 	movi	r2,2
 80002c0:	d8800115 	stw	r2,4(sp)
 80002c4:	d8000015 	stw	zero,0(sp)
 80002c8:	01c00184 	movi	r7,6
 80002cc:	01802004 	movi	r6,128
 80002d0:	000b883a 	mov	r5,zero
 80002d4:	1809883a 	mov	r4,r3
 80002d8:	80013fc0 	call	80013fc <XferCtrlReq>
 80002dc:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 80002e0:	e0bffc03 	ldbu	r2,-16(fp)
 80002e4:	10000226 	beq	r2,zero,80002f0 <HIDMProbe+0x84>
		//printf("unable to get configuration descriptor");
		return (FALSE);
 80002e8:	0005883a 	mov	r2,zero
 80002ec:	0000dc06 	br	8000660 <HIDMProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 80002f0:	e0bffa17 	ldw	r2,-24(fp)
 80002f4:	1080008b 	ldhu	r2,2(r2)
 80002f8:	10bfffcc 	andi	r2,r2,65535
 80002fc:	10804070 	cmpltui	r2,r2,257
 8000300:	1000031e 	bne	r2,zero,8000310 <HIDMProbe+0xa4>
		total_length = 256;
 8000304:	00804004 	movi	r2,256
 8000308:	e0bff90d 	sth	r2,-28(fp)
 800030c:	00000306 	br	800031c <HIDMProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 8000310:	e0bffa17 	ldw	r2,-24(fp)
 8000314:	1080008b 	ldhu	r2,2(r2)
 8000318:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 800031c:	e13ffe03 	ldbu	r4,-8(fp)
 8000320:	e0fff90b 	ldhu	r3,-28(fp)
 8000324:	008200b4 	movhi	r2,2050
 8000328:	10b05904 	addi	r2,r2,-16028
 800032c:	d8800415 	stw	r2,16(sp)
 8000330:	d8c00315 	stw	r3,12(sp)
 8000334:	d8000215 	stw	zero,8(sp)
 8000338:	00800084 	movi	r2,2
 800033c:	d8800115 	stw	r2,4(sp)
 8000340:	d8000015 	stw	zero,0(sp)
 8000344:	01c00184 	movi	r7,6
 8000348:	01802004 	movi	r6,128
 800034c:	000b883a 	mov	r5,zero
 8000350:	80013fc0 	call	80013fc <XferCtrlReq>
 8000354:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 8000358:	e0bffc03 	ldbu	r2,-16(fp)
 800035c:	10000226 	beq	r2,zero,8000368 <HIDMProbe+0xfc>
		//printf("unable to get configuration");
		return (FALSE);
 8000360:	0005883a 	mov	r2,zero
 8000364:	0000be06 	br	8000660 <HIDMProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue;
 8000368:	e0bffa17 	ldw	r2,-24(fp)
 800036c:	10800143 	ldbu	r2,5(r2)
 8000370:	e0bffc45 	stb	r2,-15(fp)
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 8000374:	0000b306 	br	8000644 <HIDMProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) {
 8000378:	e0bffa17 	ldw	r2,-24(fp)
 800037c:	10800043 	ldbu	r2,1(r2)
 8000380:	10803fcc 	andi	r2,r2,255
 8000384:	10800120 	cmpeqi	r2,r2,4
 8000388:	1000091e 	bne	r2,zero,80003b0 <HIDMProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 800038c:	e0bffa17 	ldw	r2,-24(fp)
 8000390:	10800003 	ldbu	r2,0(r2)
 8000394:	10803fcc 	andi	r2,r2,255
 8000398:	e0fffb17 	ldw	r3,-20(fp)
 800039c:	1885883a 	add	r2,r3,r2
 80003a0:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 80003a4:	e0bffb17 	ldw	r2,-20(fp)
 80003a8:	e0bffa15 	stw	r2,-24(fp)
 80003ac:	0000a506 	br	8000644 <HIDMProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 80003b0:	e0bffa17 	ldw	r2,-24(fp)
 80003b4:	10800143 	ldbu	r2,5(r2)
 80003b8:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 80003bc:	e0bffa17 	ldw	r2,-24(fp)
 80003c0:	10800183 	ldbu	r2,6(r2)
 80003c4:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 80003c8:	e0bffa17 	ldw	r2,-24(fp)
 80003cc:	108001c3 	ldbu	r2,7(r2)
 80003d0:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 80003d4:	e0bffc83 	ldbu	r2,-14(fp)
 80003d8:	108000d8 	cmpnei	r2,r2,3
 80003dc:	1000971e 	bne	r2,zero,800063c <HIDMProbe+0x3d0>
 80003e0:	e0bffcc3 	ldbu	r2,-13(fp)
 80003e4:	10800058 	cmpnei	r2,r2,1
 80003e8:	1000941e 	bne	r2,zero,800063c <HIDMProbe+0x3d0>
					&& protocol == HID_PROTOCOL_MOUSE) {
 80003ec:	e0bffd03 	ldbu	r2,-12(fp)
 80003f0:	10800098 	cmpnei	r2,r2,2
 80003f4:	1000911e 	bne	r2,zero,800063c <HIDMProbe+0x3d0>
				//detected a mouse
				devtable[addr].devclass = HID_M;                  //device class
 80003f8:	e0fffe03 	ldbu	r3,-8(fp)
 80003fc:	008200b4 	movhi	r2,2050
 8000400:	10b09904 	addi	r2,r2,-15772
 8000404:	180690fa 	slli	r3,r3,3
 8000408:	10c5883a 	add	r2,r2,r3
 800040c:	10800104 	addi	r2,r2,4
 8000410:	00c00084 	movi	r3,2
 8000414:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
 8000418:	e0fffe03 	ldbu	r3,-8(fp)
 800041c:	008200b4 	movhi	r2,2050
 8000420:	10b09904 	addi	r2,r2,-15772
 8000424:	180690fa 	slli	r3,r3,3
 8000428:	10c5883a 	add	r2,r2,r3
 800042c:	10800017 	ldw	r2,0(r2)
 8000430:	1080008b 	ldhu	r2,2(r2)
 8000434:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 8000438:	8000a7c0 	call	8000a7c <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 800043c:	e0fffe03 	ldbu	r3,-8(fp)
 8000440:	008200b4 	movhi	r2,2050
 8000444:	10b09904 	addi	r2,r2,-15772
 8000448:	180690fa 	slli	r3,r3,3
 800044c:	10c7883a 	add	r3,r2,r3
 8000450:	008200b4 	movhi	r2,2050
 8000454:	10af8604 	addi	r2,r2,-16872
 8000458:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
 800045c:	e0fffe03 	ldbu	r3,-8(fp)
 8000460:	008200b4 	movhi	r2,2050
 8000464:	10b09904 	addi	r2,r2,-15772
 8000468:	180690fa 	slli	r3,r3,3
 800046c:	10c5883a 	add	r2,r2,r3
 8000470:	10800017 	ldw	r2,0(r2)
 8000474:	e0fffd43 	ldbu	r3,-11(fp)
 8000478:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
 800047c:	e0bffa17 	ldw	r2,-24(fp)
 8000480:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_M;                  //device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
				hid_device.interface =
 8000484:	d0a6fd45 	stb	r2,-25611(gp)
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
 8000488:	e0bffe03 	ldbu	r2,-8(fp)
 800048c:	d0a6fd05 	stb	r2,-25612(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8000490:	e0bffa17 	ldw	r2,-24(fp)
 8000494:	10800003 	ldbu	r2,0(r2)
 8000498:	10803fcc 	andi	r2,r2,255
 800049c:	e0fffb17 	ldw	r3,-20(fp)
 80004a0:	1885883a 	add	r2,r3,r2
 80004a4:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 80004a8:	e0bffb17 	ldw	r2,-20(fp)
 80004ac:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 80004b0:	00005b06 	br	8000620 <HIDMProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 80004b4:	e0bffa17 	ldw	r2,-24(fp)
 80004b8:	10800043 	ldbu	r2,1(r2)
 80004bc:	10803fcc 	andi	r2,r2,255
 80004c0:	10800160 	cmpeqi	r2,r2,5
 80004c4:	1000091e 	bne	r2,zero,80004ec <HIDMProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 80004c8:	e0bffa17 	ldw	r2,-24(fp)
 80004cc:	10800003 	ldbu	r2,0(r2)
 80004d0:	10803fcc 	andi	r2,r2,255
 80004d4:	e0fffb17 	ldw	r3,-20(fp)
 80004d8:	1885883a 	add	r2,r3,r2
 80004dc:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 80004e0:	e0bffb17 	ldw	r2,-20(fp)
 80004e4:	e0bffa15 	stw	r2,-24(fp)
 80004e8:	00004d06 	br	8000620 <HIDMProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 80004ec:	e0fffe03 	ldbu	r3,-8(fp)
 80004f0:	008200b4 	movhi	r2,2050
 80004f4:	10b09904 	addi	r2,r2,-15772
 80004f8:	180690fa 	slli	r3,r3,3
 80004fc:	10c5883a 	add	r2,r2,r3
 8000500:	10800017 	ldw	r2,0(r2)
 8000504:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 8000508:	e0fffa17 	ldw	r3,-24(fp)
 800050c:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8000510:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 8000514:	e0fffe03 	ldbu	r3,-8(fp)
 8000518:	008200b4 	movhi	r2,2050
 800051c:	10b09904 	addi	r2,r2,-15772
 8000520:	180690fa 	slli	r3,r3,3
 8000524:	10c5883a 	add	r2,r2,r3
 8000528:	10800017 	ldw	r2,0(r2)
 800052c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 8000530:	e0fffa17 	ldw	r3,-24(fp)
 8000534:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 8000538:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 800053c:	e0fffe03 	ldbu	r3,-8(fp)
 8000540:	008200b4 	movhi	r2,2050
 8000544:	10b09904 	addi	r2,r2,-15772
 8000548:	180690fa 	slli	r3,r3,3
 800054c:	10c5883a 	add	r2,r2,r3
 8000550:	10800017 	ldw	r2,0(r2)
 8000554:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 8000558:	e0fffa17 	ldw	r3,-24(fp)
 800055c:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 8000560:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 8000564:	e0fffe03 	ldbu	r3,-8(fp)
 8000568:	008200b4 	movhi	r2,2050
 800056c:	10b09904 	addi	r2,r2,-15772
 8000570:	180690fa 	slli	r3,r3,3
 8000574:	10c5883a 	add	r2,r2,r3
 8000578:	10800017 	ldw	r2,0(r2)
 800057c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 8000580:	e0fffa17 	ldw	r3,-24(fp)
 8000584:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 8000588:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						// devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 800058c:	e0fffe03 	ldbu	r3,-8(fp)
 8000590:	e0bffc43 	ldbu	r2,-15(fp)
 8000594:	d8000415 	stw	zero,16(sp)
 8000598:	d8000315 	stw	zero,12(sp)
 800059c:	d8000215 	stw	zero,8(sp)
 80005a0:	d8000115 	stw	zero,4(sp)
 80005a4:	d8800015 	stw	r2,0(sp)
 80005a8:	01c00244 	movi	r7,9
 80005ac:	000d883a 	mov	r6,zero
 80005b0:	000b883a 	mov	r5,zero
 80005b4:	1809883a 	mov	r4,r3
 80005b8:	80013fc0 	call	80013fc <XferCtrlReq>
 80005bc:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 80005c0:	e0bffc03 	ldbu	r2,-16(fp)
 80005c4:	10000226 	beq	r2,zero,80005d0 <HIDMProbe+0x364>
							return (FALSE);
 80005c8:	0005883a 	mov	r2,zero
 80005cc:	00002406 	br	8000660 <HIDMProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 80005d0:	e0fffe03 	ldbu	r3,-8(fp)
 80005d4:	d0a6fd43 	ldbu	r2,-25611(gp)
 80005d8:	10803fcc 	andi	r2,r2,255
 80005dc:	d8000415 	stw	zero,16(sp)
 80005e0:	d8000315 	stw	zero,12(sp)
 80005e4:	d8800215 	stw	r2,8(sp)
 80005e8:	d8000115 	stw	zero,4(sp)
 80005ec:	d8000015 	stw	zero,0(sp)
 80005f0:	01c002c4 	movi	r7,11
 80005f4:	01800844 	movi	r6,33
 80005f8:	000b883a 	mov	r5,zero
 80005fc:	1809883a 	mov	r4,r3
 8000600:	80013fc0 	call	80013fc <XferCtrlReq>
 8000604:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 8000608:	e0bffc03 	ldbu	r2,-16(fp)
 800060c:	10000226 	beq	r2,zero,8000618 <HIDMProbe+0x3ac>
							return (FALSE);
 8000610:	0005883a 	mov	r2,zero
 8000614:	00001206 	br	8000660 <HIDMProbe+0x3f4>
						} else {
							return (TRUE);
 8000618:	00800044 	movi	r2,1
 800061c:	00001006 	br	8000660 <HIDMProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 8000620:	e0fff90b 	ldhu	r3,-28(fp)
 8000624:	008200b4 	movhi	r2,2050
 8000628:	10b05904 	addi	r2,r2,-16028
 800062c:	1885883a 	add	r2,r3,r2
 8000630:	e0fffb17 	ldw	r3,-20(fp)
 8000634:	18bf9f36 	bltu	r3,r2,80004b4 <HIDMProbe+0x248>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8000638:	00000206 	br	8000644 <HIDMProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
 800063c:	0005883a 	mov	r2,zero
 8000640:	00000706 	br	8000660 <HIDMProbe+0x3f4>
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 8000644:	e0fff90b 	ldhu	r3,-28(fp)
 8000648:	008200b4 	movhi	r2,2050
 800064c:	10b05904 	addi	r2,r2,-16028
 8000650:	1885883a 	add	r2,r3,r2
 8000654:	e0fffb17 	ldw	r3,-20(fp)
 8000658:	18bf4736 	bltu	r3,r2,8000378 <HIDMProbe+0x10c>
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 800065c:	0005883a 	mov	r2,zero
}
 8000660:	e037883a 	mov	sp,fp
 8000664:	dfc00117 	ldw	ra,4(sp)
 8000668:	df000017 	ldw	fp,0(sp)
 800066c:	dec00204 	addi	sp,sp,8
 8000670:	f800283a 	ret

08000674 <HIDKProbe>:
/* HID Keyboard probe. Called from USB state machine.                           */
/* assumes configuration length is less than 256 bytes                          */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor       */
/* sets keyboard in boot protocol                                               */
/* assumes single configuration, single endpoint, and interface configuration 0 */
BOOL HIDKProbe(BYTE addr, DWORD flags) {
 8000674:	defff204 	addi	sp,sp,-56
 8000678:	dfc00d15 	stw	ra,52(sp)
 800067c:	df000c15 	stw	fp,48(sp)
 8000680:	df000c04 	addi	fp,sp,48
 8000684:	2005883a 	mov	r2,r4
 8000688:	e17fff15 	stw	r5,-4(fp)
 800068c:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 8000690:	008200b4 	movhi	r2,2050
 8000694:	10b05904 	addi	r2,r2,-16028
 8000698:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 800069c:	008200b4 	movhi	r2,2050
 80006a0:	10b05904 	addi	r2,r2,-16028
 80006a4:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 80006a8:	e0fffe03 	ldbu	r3,-8(fp)
 80006ac:	008200b4 	movhi	r2,2050
 80006b0:	10b05904 	addi	r2,r2,-16028
 80006b4:	d8800415 	stw	r2,16(sp)
 80006b8:	00800244 	movi	r2,9
 80006bc:	d8800315 	stw	r2,12(sp)
 80006c0:	d8000215 	stw	zero,8(sp)
 80006c4:	00800084 	movi	r2,2
 80006c8:	d8800115 	stw	r2,4(sp)
 80006cc:	d8000015 	stw	zero,0(sp)
 80006d0:	01c00184 	movi	r7,6
 80006d4:	01802004 	movi	r6,128
 80006d8:	000b883a 	mov	r5,zero
 80006dc:	1809883a 	mov	r4,r3
 80006e0:	80013fc0 	call	80013fc <XferCtrlReq>
 80006e4:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling           
 80006e8:	e0bffc03 	ldbu	r2,-16(fp)
 80006ec:	10000226 	beq	r2,zero,80006f8 <HIDKProbe+0x84>
		return (FALSE);
 80006f0:	0005883a 	mov	r2,zero
 80006f4:	0000dc06 	br	8000a68 <HIDKProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 80006f8:	e0bffa17 	ldw	r2,-24(fp)
 80006fc:	1080008b 	ldhu	r2,2(r2)
 8000700:	10bfffcc 	andi	r2,r2,65535
 8000704:	10804070 	cmpltui	r2,r2,257
 8000708:	1000031e 	bne	r2,zero,8000718 <HIDKProbe+0xa4>
		total_length = 256;
 800070c:	00804004 	movi	r2,256
 8000710:	e0bff90d 	sth	r2,-28(fp)
 8000714:	00000306 	br	8000724 <HIDKProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 8000718:	e0bffa17 	ldw	r2,-24(fp)
 800071c:	1080008b 	ldhu	r2,2(r2)
 8000720:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 8000724:	e13ffe03 	ldbu	r4,-8(fp)
 8000728:	e0fff90b 	ldhu	r3,-28(fp)
 800072c:	008200b4 	movhi	r2,2050
 8000730:	10b05904 	addi	r2,r2,-16028
 8000734:	d8800415 	stw	r2,16(sp)
 8000738:	d8c00315 	stw	r3,12(sp)
 800073c:	d8000215 	stw	zero,8(sp)
 8000740:	00800084 	movi	r2,2
 8000744:	d8800115 	stw	r2,4(sp)
 8000748:	d8000015 	stw	zero,0(sp)
 800074c:	01c00184 	movi	r7,6
 8000750:	01802004 	movi	r6,128
 8000754:	000b883a 	mov	r5,zero
 8000758:	80013fc0 	call	80013fc <XferCtrlReq>
 800075c:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 8000760:	e0bffc03 	ldbu	r2,-16(fp)
 8000764:	10000226 	beq	r2,zero,8000770 <HIDKProbe+0xfc>
		return (FALSE);
 8000768:	0005883a 	mov	r2,zero
 800076c:	0000be06 	br	8000a68 <HIDKProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
 8000770:	e0bffa17 	ldw	r2,-24(fp)
 8000774:	10800143 	ldbu	r2,5(r2)
 8000778:	e0bffc45 	stb	r2,-15(fp)
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 800077c:	0000b306 	br	8000a4c <HIDKProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) { //skip to the next descriptor
 8000780:	e0bffa17 	ldw	r2,-24(fp)
 8000784:	10800043 	ldbu	r2,1(r2)
 8000788:	10803fcc 	andi	r2,r2,255
 800078c:	10800120 	cmpeqi	r2,r2,4
 8000790:	1000091e 	bne	r2,zero,80007b8 <HIDKProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8000794:	e0bffa17 	ldw	r2,-24(fp)
 8000798:	10800003 	ldbu	r2,0(r2)
 800079c:	10803fcc 	andi	r2,r2,255
 80007a0:	e0fffb17 	ldw	r3,-20(fp)
 80007a4:	1885883a 	add	r2,r3,r2
 80007a8:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 80007ac:	e0bffb17 	ldw	r2,-20(fp)
 80007b0:	e0bffa15 	stw	r2,-24(fp)
 80007b4:	0000a506 	br	8000a4c <HIDKProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 80007b8:	e0bffa17 	ldw	r2,-24(fp)
 80007bc:	10800143 	ldbu	r2,5(r2)
 80007c0:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 80007c4:	e0bffa17 	ldw	r2,-24(fp)
 80007c8:	10800183 	ldbu	r2,6(r2)
 80007cc:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 80007d0:	e0bffa17 	ldw	r2,-24(fp)
 80007d4:	108001c3 	ldbu	r2,7(r2)
 80007d8:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 80007dc:	e0bffc83 	ldbu	r2,-14(fp)
 80007e0:	108000d8 	cmpnei	r2,r2,3
 80007e4:	1000971e 	bne	r2,zero,8000a44 <HIDKProbe+0x3d0>
 80007e8:	e0bffcc3 	ldbu	r2,-13(fp)
 80007ec:	10800058 	cmpnei	r2,r2,1
 80007f0:	1000941e 	bne	r2,zero,8000a44 <HIDKProbe+0x3d0>
					&& protocol == HID_PROTOCOL_KEYBOARD) {
 80007f4:	e0bffd03 	ldbu	r2,-12(fp)
 80007f8:	10800058 	cmpnei	r2,r2,1
 80007fc:	1000911e 	bne	r2,zero,8000a44 <HIDKProbe+0x3d0>
				//detected a keyboard
				devtable[addr].devclass = HID_K;             //fill device class
 8000800:	e0fffe03 	ldbu	r3,-8(fp)
 8000804:	008200b4 	movhi	r2,2050
 8000808:	10b09904 	addi	r2,r2,-15772
 800080c:	180690fa 	slli	r3,r3,3
 8000810:	10c5883a 	add	r2,r2,r3
 8000814:	10800104 	addi	r2,r2,4
 8000818:	00c00044 	movi	r3,1
 800081c:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
 8000820:	e0fffe03 	ldbu	r3,-8(fp)
 8000824:	008200b4 	movhi	r2,2050
 8000828:	10b09904 	addi	r2,r2,-15772
 800082c:	180690fa 	slli	r3,r3,3
 8000830:	10c5883a 	add	r2,r2,r3
 8000834:	10800017 	ldw	r2,0(r2)
 8000838:	1080008b 	ldhu	r2,2(r2)
 800083c:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 8000840:	8000a7c0 	call	8000a7c <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 8000844:	e0fffe03 	ldbu	r3,-8(fp)
 8000848:	008200b4 	movhi	r2,2050
 800084c:	10b09904 	addi	r2,r2,-15772
 8000850:	180690fa 	slli	r3,r3,3
 8000854:	10c7883a 	add	r3,r2,r3
 8000858:	008200b4 	movhi	r2,2050
 800085c:	10af8604 	addi	r2,r2,-16872
 8000860:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
 8000864:	e0fffe03 	ldbu	r3,-8(fp)
 8000868:	008200b4 	movhi	r2,2050
 800086c:	10b09904 	addi	r2,r2,-15772
 8000870:	180690fa 	slli	r3,r3,3
 8000874:	10c5883a 	add	r2,r2,r3
 8000878:	10800017 	ldw	r2,0(r2)
 800087c:	e0fffd43 	ldbu	r3,-11(fp)
 8000880:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
 8000884:	e0bffa17 	ldw	r2,-24(fp)
 8000888:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_K;             //fill device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
				hid_device.interface =
 800088c:	d0a6fd45 	stb	r2,-25611(gp)
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
 8000890:	e0bffe03 	ldbu	r2,-8(fp)
 8000894:	d0a6fd05 	stb	r2,-25612(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
 8000898:	e0bffa17 	ldw	r2,-24(fp)
 800089c:	10800003 	ldbu	r2,0(r2)
 80008a0:	10803fcc 	andi	r2,r2,255
 80008a4:	e0fffb17 	ldw	r3,-20(fp)
 80008a8:	1885883a 	add	r2,r3,r2
 80008ac:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 80008b0:	e0bffb17 	ldw	r2,-20(fp)
 80008b4:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 80008b8:	00005b06 	br	8000a28 <HIDKProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 80008bc:	e0bffa17 	ldw	r2,-24(fp)
 80008c0:	10800043 	ldbu	r2,1(r2)
 80008c4:	10803fcc 	andi	r2,r2,255
 80008c8:	10800160 	cmpeqi	r2,r2,5
 80008cc:	1000091e 	bne	r2,zero,80008f4 <HIDKProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 80008d0:	e0bffa17 	ldw	r2,-24(fp)
 80008d4:	10800003 	ldbu	r2,0(r2)
 80008d8:	10803fcc 	andi	r2,r2,255
 80008dc:	e0fffb17 	ldw	r3,-20(fp)
 80008e0:	1885883a 	add	r2,r3,r2
 80008e4:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 80008e8:	e0bffb17 	ldw	r2,-20(fp)
 80008ec:	e0bffa15 	stw	r2,-24(fp)
 80008f0:	00004d06 	br	8000a28 <HIDKProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 80008f4:	e0fffe03 	ldbu	r3,-8(fp)
 80008f8:	008200b4 	movhi	r2,2050
 80008fc:	10b09904 	addi	r2,r2,-15772
 8000900:	180690fa 	slli	r3,r3,3
 8000904:	10c5883a 	add	r2,r2,r3
 8000908:	10800017 	ldw	r2,0(r2)
 800090c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 8000910:	e0fffa17 	ldw	r3,-24(fp)
 8000914:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8000918:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 800091c:	e0fffe03 	ldbu	r3,-8(fp)
 8000920:	008200b4 	movhi	r2,2050
 8000924:	10b09904 	addi	r2,r2,-15772
 8000928:	180690fa 	slli	r3,r3,3
 800092c:	10c5883a 	add	r2,r2,r3
 8000930:	10800017 	ldw	r2,0(r2)
 8000934:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 8000938:	e0fffa17 	ldw	r3,-24(fp)
 800093c:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 8000940:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 8000944:	e0fffe03 	ldbu	r3,-8(fp)
 8000948:	008200b4 	movhi	r2,2050
 800094c:	10b09904 	addi	r2,r2,-15772
 8000950:	180690fa 	slli	r3,r3,3
 8000954:	10c5883a 	add	r2,r2,r3
 8000958:	10800017 	ldw	r2,0(r2)
 800095c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 8000960:	e0fffa17 	ldw	r3,-24(fp)
 8000964:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 8000968:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 800096c:	e0fffe03 	ldbu	r3,-8(fp)
 8000970:	008200b4 	movhi	r2,2050
 8000974:	10b09904 	addi	r2,r2,-15772
 8000978:	180690fa 	slli	r3,r3,3
 800097c:	10c5883a 	add	r2,r2,r3
 8000980:	10800017 	ldw	r2,0(r2)
 8000984:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 8000988:	e0fffa17 	ldw	r3,-24(fp)
 800098c:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 8000990:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 8000994:	e0fffe03 	ldbu	r3,-8(fp)
 8000998:	e0bffc43 	ldbu	r2,-15(fp)
 800099c:	d8000415 	stw	zero,16(sp)
 80009a0:	d8000315 	stw	zero,12(sp)
 80009a4:	d8000215 	stw	zero,8(sp)
 80009a8:	d8000115 	stw	zero,4(sp)
 80009ac:	d8800015 	stw	r2,0(sp)
 80009b0:	01c00244 	movi	r7,9
 80009b4:	000d883a 	mov	r6,zero
 80009b8:	000b883a 	mov	r5,zero
 80009bc:	1809883a 	mov	r4,r3
 80009c0:	80013fc0 	call	80013fc <XferCtrlReq>
 80009c4:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 80009c8:	e0bffc03 	ldbu	r2,-16(fp)
 80009cc:	10000226 	beq	r2,zero,80009d8 <HIDKProbe+0x364>
							return (FALSE);
 80009d0:	0005883a 	mov	r2,zero
 80009d4:	00002406 	br	8000a68 <HIDKProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 80009d8:	e0fffe03 	ldbu	r3,-8(fp)
 80009dc:	d0a6fd43 	ldbu	r2,-25611(gp)
 80009e0:	10803fcc 	andi	r2,r2,255
 80009e4:	d8000415 	stw	zero,16(sp)
 80009e8:	d8000315 	stw	zero,12(sp)
 80009ec:	d8800215 	stw	r2,8(sp)
 80009f0:	d8000115 	stw	zero,4(sp)
 80009f4:	d8000015 	stw	zero,0(sp)
 80009f8:	01c002c4 	movi	r7,11
 80009fc:	01800844 	movi	r6,33
 8000a00:	000b883a 	mov	r5,zero
 8000a04:	1809883a 	mov	r4,r3
 8000a08:	80013fc0 	call	80013fc <XferCtrlReq>
 8000a0c:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 8000a10:	e0bffc03 	ldbu	r2,-16(fp)
 8000a14:	10000226 	beq	r2,zero,8000a20 <HIDKProbe+0x3ac>
							return (FALSE);
 8000a18:	0005883a 	mov	r2,zero
 8000a1c:	00001206 	br	8000a68 <HIDKProbe+0x3f4>
						} else {
							return (TRUE);
 8000a20:	00800044 	movi	r2,1
 8000a24:	00001006 	br	8000a68 <HIDKProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 8000a28:	e0fff90b 	ldhu	r3,-28(fp)
 8000a2c:	008200b4 	movhi	r2,2050
 8000a30:	10b05904 	addi	r2,r2,-16028
 8000a34:	1885883a 	add	r2,r3,r2
 8000a38:	e0fffb17 	ldw	r3,-20(fp)
 8000a3c:	18bf9f36 	bltu	r3,r2,80008bc <HIDKProbe+0x248>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8000a40:	00000206 	br	8000a4c <HIDKProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
 8000a44:	0005883a 	mov	r2,zero
 8000a48:	00000706 	br	8000a68 <HIDKProbe+0x3f4>
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
	if (rcode) {   //error handling
		return (FALSE);
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 8000a4c:	e0fff90b 	ldhu	r3,-28(fp)
 8000a50:	008200b4 	movhi	r2,2050
 8000a54:	10b05904 	addi	r2,r2,-16028
 8000a58:	1885883a 	add	r2,r3,r2
 8000a5c:	e0fffb17 	ldw	r3,-20(fp)
 8000a60:	18bf4736 	bltu	r3,r2,8000780 <HIDKProbe+0x10c>
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 8000a64:	0005883a 	mov	r2,zero
}
 8000a68:	e037883a 	mov	sp,fp
 8000a6c:	dfc00117 	ldw	ra,4(sp)
 8000a70:	df000017 	ldw	fp,0(sp)
 8000a74:	dec00204 	addi	sp,sp,8
 8000a78:	f800283a 	ret

08000a7c <HID_init>:
/* HID data structures initialization */
void HID_init(void) {
 8000a7c:	deffff04 	addi	sp,sp,-4
 8000a80:	df000015 	stw	fp,0(sp)
 8000a84:	d839883a 	mov	fp,sp
	hid_ep[1].sndToggle = bmSNDTOG0;
 8000a88:	008200b4 	movhi	r2,2050
 8000a8c:	10af8604 	addi	r2,r2,-16872
 8000a90:	00c01004 	movi	r3,64
 8000a94:	10c00345 	stb	r3,13(r2)
	hid_ep[1].rcvToggle = bmRCVTOG0;
 8000a98:	008200b4 	movhi	r2,2050
 8000a9c:	10af8604 	addi	r2,r2,-16872
 8000aa0:	00c00404 	movi	r3,16
 8000aa4:	10c00385 	stb	r3,14(r2)
}
 8000aa8:	0001883a 	nop
 8000aac:	e037883a 	mov	sp,fp
 8000ab0:	df000017 	ldw	fp,0(sp)
 8000ab4:	dec00104 	addi	sp,sp,4
 8000ab8:	f800283a 	ret

08000abc <mousePoll>:
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
 8000abc:	defffb04 	addi	sp,sp,-20
 8000ac0:	dfc00415 	stw	ra,16(sp)
 8000ac4:	df000315 	stw	fp,12(sp)
 8000ac8:	df000304 	addi	fp,sp,12
 8000acc:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 8000ad0:	d0a6fd03 	ldbu	r2,-25612(gp)
 8000ad4:	10803fcc 	andi	r2,r2,255
 8000ad8:	100b883a 	mov	r5,r2
 8000adc:	01003804 	movi	r4,224
 8000ae0:	8000c980 	call	8000c98 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8000ae4:	d0a6fd03 	ldbu	r2,-25612(gp)
 8000ae8:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 8000aec:	d0a6fd03 	ldbu	r2,-25612(gp)
 8000af0:	10c03fcc 	andi	r3,r2,255
 8000af4:	008200b4 	movhi	r2,2050
 8000af8:	10b09904 	addi	r2,r2,-15772
 8000afc:	180690fa 	slli	r3,r3,3
 8000b00:	10c5883a 	add	r2,r2,r3
 8000b04:	10800017 	ldw	r2,0(r2)
 8000b08:	10800204 	addi	r2,r2,8
 8000b0c:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8000b10:	10803fcc 	andi	r2,r2,255
 8000b14:	d8800015 	stw	r2,0(sp)
 8000b18:	e1ffff17 	ldw	r7,-4(fp)
 8000b1c:	01800204 	movi	r6,8
 8000b20:	01400044 	movi	r5,1
 8000b24:	80018200 	call	8001820 <XferInTransfer>
 8000b28:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 8000b2c:	e0bffe03 	ldbu	r2,-8(fp)
}
 8000b30:	e037883a 	mov	sp,fp
 8000b34:	dfc00117 	ldw	ra,4(sp)
 8000b38:	df000017 	ldw	fp,0(sp)
 8000b3c:	dec00204 	addi	sp,sp,8
 8000b40:	f800283a 	ret

08000b44 <kbdPoll>:
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
 8000b44:	defffb04 	addi	sp,sp,-20
 8000b48:	dfc00415 	stw	ra,16(sp)
 8000b4c:	df000315 	stw	fp,12(sp)
 8000b50:	df000304 	addi	fp,sp,12
 8000b54:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 8000b58:	d0a6fd03 	ldbu	r2,-25612(gp)
 8000b5c:	10803fcc 	andi	r2,r2,255
 8000b60:	100b883a 	mov	r5,r2
 8000b64:	01003804 	movi	r4,224
 8000b68:	8000c980 	call	8000c98 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8000b6c:	d0a6fd03 	ldbu	r2,-25612(gp)
 8000b70:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 8000b74:	d0a6fd03 	ldbu	r2,-25612(gp)
 8000b78:	10c03fcc 	andi	r3,r2,255
 8000b7c:	008200b4 	movhi	r2,2050
 8000b80:	10b09904 	addi	r2,r2,-15772
 8000b84:	180690fa 	slli	r3,r3,3
 8000b88:	10c5883a 	add	r2,r2,r3
 8000b8c:	10800017 	ldw	r2,0(r2)
 8000b90:	10800204 	addi	r2,r2,8
 8000b94:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8000b98:	10803fcc 	andi	r2,r2,255
 8000b9c:	d8800015 	stw	r2,0(sp)
 8000ba0:	e1ffff17 	ldw	r7,-4(fp)
 8000ba4:	01800204 	movi	r6,8
 8000ba8:	01400044 	movi	r5,1
 8000bac:	80018200 	call	8001820 <XferInTransfer>
 8000bb0:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 8000bb4:	e0bffe03 	ldbu	r2,-8(fp)
}
 8000bb8:	e037883a 	mov	sp,fp
 8000bbc:	dfc00117 	ldw	ra,4(sp)
 8000bc0:	df000017 	ldw	fp,0(sp)
 8000bc4:	dec00204 	addi	sp,sp,8
 8000bc8:	f800283a 	ret

08000bcc <HIDMEventHandler>:
BOOL HIDMEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 8000bcc:	defffb04 	addi	sp,sp,-20
 8000bd0:	df000415 	stw	fp,16(sp)
 8000bd4:	df000404 	addi	fp,sp,16
 8000bd8:	2007883a 	mov	r3,r4
 8000bdc:	2805883a 	mov	r2,r5
 8000be0:	e1bffe15 	stw	r6,-8(fp)
 8000be4:	e1ffff15 	stw	r7,-4(fp)
 8000be8:	e0fffc05 	stb	r3,-16(fp)
 8000bec:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 8000bf0:	0005883a 	mov	r2,zero
}
 8000bf4:	e037883a 	mov	sp,fp
 8000bf8:	df000017 	ldw	fp,0(sp)
 8000bfc:	dec00104 	addi	sp,sp,4
 8000c00:	f800283a 	ret

08000c04 <HIDKEventHandler>:
BOOL HIDKEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 8000c04:	defffb04 	addi	sp,sp,-20
 8000c08:	df000415 	stw	fp,16(sp)
 8000c0c:	df000404 	addi	fp,sp,16
 8000c10:	2007883a 	mov	r3,r4
 8000c14:	2805883a 	mov	r2,r5
 8000c18:	e1bffe15 	stw	r6,-8(fp)
 8000c1c:	e1ffff15 	stw	r7,-4(fp)
 8000c20:	e0fffc05 	stb	r3,-16(fp)
 8000c24:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 8000c28:	0005883a 	mov	r2,zero
}
 8000c2c:	e037883a 	mov	sp,fp
 8000c30:	df000017 	ldw	fp,0(sp)
 8000c34:	dec00104 	addi	sp,sp,4
 8000c38:	f800283a 	ret

08000c3c <SPI_init>:
//variables and data structures
//External variables
extern BYTE usb_task_state;

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
 8000c3c:	defffc04 	addi	sp,sp,-16
 8000c40:	df000315 	stw	fp,12(sp)
 8000c44:	df000304 	addi	fp,sp,12
 8000c48:	2807883a 	mov	r3,r5
 8000c4c:	3005883a 	mov	r2,r6
 8000c50:	e13ffd05 	stb	r4,-12(fp)
 8000c54:	e0fffe05 	stb	r3,-8(fp)
 8000c58:	e0bfff05 	stb	r2,-4(fp)
	//Don't need to initialize SPI port, already ready to go with BSP
}
 8000c5c:	0001883a 	nop
 8000c60:	e037883a 	mov	sp,fp
 8000c64:	df000017 	ldw	fp,0(sp)
 8000c68:	dec00104 	addi	sp,sp,4
 8000c6c:	f800283a 	ret

08000c70 <SPI_wr>:

//writes single byte to MAX3421E via SPI, simultanously reads status register and returns it
BYTE SPI_wr(BYTE data) {
 8000c70:	defffe04 	addi	sp,sp,-8
 8000c74:	df000115 	stw	fp,4(sp)
 8000c78:	df000104 	addi	fp,sp,4
 8000c7c:	2005883a 	mov	r2,r4
 8000c80:	e0bfff05 	stb	r2,-4(fp)
	//This function is never used by the code, so you do not need to fill it in
}
 8000c84:	0001883a 	nop
 8000c88:	e037883a 	mov	sp,fp
 8000c8c:	df000017 	ldw	fp,0(sp)
 8000c90:	dec00104 	addi	sp,sp,4
 8000c94:	f800283a 	ret

08000c98 <MAXreg_wr>:
//writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
 8000c98:	defff704 	addi	sp,sp,-36
 8000c9c:	dfc00815 	stw	ra,32(sp)
 8000ca0:	df000715 	stw	fp,28(sp)
 8000ca4:	df000704 	addi	fp,sp,28
 8000ca8:	2007883a 	mov	r3,r4
 8000cac:	2805883a 	mov	r2,r5
 8000cb0:	e0fffe05 	stb	r3,-8(fp)
 8000cb4:	e0bfff05 	stb	r2,-4(fp)
    //                        const alt_u8* wdata,
    //                        alt_u32 read_length,
    //                        alt_u8* read_data,
    //                        alt_u32 flags)
	//write reg + 2 via SPI
	alt_u8 sendData[2] = {reg + 2, val}; 
 8000cb8:	e0bffe03 	ldbu	r2,-8(fp)
 8000cbc:	10800084 	addi	r2,r2,2
 8000cc0:	e0bffd05 	stb	r2,-12(fp)
 8000cc4:	e0bfff03 	ldbu	r2,-4(fp)
 8000cc8:	e0bffd45 	stb	r2,-11(fp)
	int ret = alt_avalon_spi_command(SPI_0_BASE, 0, 2, sendData, 0, NULL, 0);
 8000ccc:	e0bffd04 	addi	r2,fp,-12
 8000cd0:	d8000215 	stw	zero,8(sp)
 8000cd4:	d8000115 	stw	zero,4(sp)
 8000cd8:	d8000015 	stw	zero,0(sp)
 8000cdc:	100f883a 	mov	r7,r2
 8000ce0:	01800084 	movi	r6,2
 8000ce4:	000b883a 	mov	r5,zero
 8000ce8:	01000074 	movhi	r4,1
 8000cec:	21042804 	addi	r4,r4,4256
 8000cf0:	8016adc0 	call	8016adc <alt_avalon_spi_command>
 8000cf4:	e0bffc15 	stw	r2,-16(fp)
	//write val via SPI
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0 print an error
	if(ret < 0)
 8000cf8:	e0bffc17 	ldw	r2,-16(fp)
 8000cfc:	1000030e 	bge	r2,zero,8000d0c <MAXreg_wr+0x74>
		printf("error in MAXreg_wr - readData less than 0");
 8000d00:	01020074 	movhi	r4,2049
 8000d04:	211ffd04 	addi	r4,r4,32756
 8000d08:	80082440 	call	8008244 <printf>
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
}
 8000d0c:	0001883a 	nop
 8000d10:	e037883a 	mov	sp,fp
 8000d14:	dfc00117 	ldw	ra,4(sp)
 8000d18:	df000017 	ldw	fp,0(sp)
 8000d1c:	dec00204 	addi	sp,sp,8
 8000d20:	f800283a 	ret

08000d24 <MAXbytes_wr>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
 8000d24:	defff304 	addi	sp,sp,-52
 8000d28:	dfc00c15 	stw	ra,48(sp)
 8000d2c:	df000b15 	stw	fp,44(sp)
 8000d30:	dc000a15 	stw	r16,40(sp)
 8000d34:	df000b04 	addi	fp,sp,44
 8000d38:	201b883a 	mov	r13,r4
 8000d3c:	2809883a 	mov	r4,r5
 8000d40:	e1bffe15 	stw	r6,-8(fp)
 8000d44:	e37ffc05 	stb	r13,-16(fp)
 8000d48:	e13ffd05 	stb	r4,-12(fp)
 8000d4c:	d809883a 	mov	r4,sp
 8000d50:	2021883a 	mov	r16,r4
	//psuedocode:
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	//write reg + 2 via SPI
	alt_u8 sendData[nbytes + 1];
 8000d54:	e13ffd03 	ldbu	r4,-12(fp)
 8000d58:	21000044 	addi	r4,r4,1
 8000d5c:	217fffc4 	addi	r5,r4,-1
 8000d60:	e17ff915 	stw	r5,-28(fp)
 8000d64:	200b883a 	mov	r5,r4
 8000d68:	2817883a 	mov	r11,r5
 8000d6c:	0019883a 	mov	r12,zero
 8000d70:	580ad77a 	srli	r5,r11,29
 8000d74:	601090fa 	slli	r8,r12,3
 8000d78:	2a10b03a 	or	r8,r5,r8
 8000d7c:	580e90fa 	slli	r7,r11,3
 8000d80:	200b883a 	mov	r5,r4
 8000d84:	2813883a 	mov	r9,r5
 8000d88:	0015883a 	mov	r10,zero
 8000d8c:	480ad77a 	srli	r5,r9,29
 8000d90:	500690fa 	slli	r3,r10,3
 8000d94:	28c6b03a 	or	r3,r5,r3
 8000d98:	480490fa 	slli	r2,r9,3
 8000d9c:	2005883a 	mov	r2,r4
 8000da0:	108000c4 	addi	r2,r2,3
 8000da4:	1004d0ba 	srli	r2,r2,2
 8000da8:	1085883a 	add	r2,r2,r2
 8000dac:	1085883a 	add	r2,r2,r2
 8000db0:	d8b7c83a 	sub	sp,sp,r2
 8000db4:	d8800304 	addi	r2,sp,12
 8000db8:	1005883a 	mov	r2,r2
 8000dbc:	e0bffa15 	stw	r2,-24(fp)
	sendData[0] = reg + 2;
 8000dc0:	e0bffc03 	ldbu	r2,-16(fp)
 8000dc4:	10800084 	addi	r2,r2,2
 8000dc8:	1007883a 	mov	r3,r2
 8000dcc:	e0bffa17 	ldw	r2,-24(fp)
 8000dd0:	10c00005 	stb	r3,0(r2)

	for(int i = 1; i < nbytes + 1; i++)
 8000dd4:	00800044 	movi	r2,1
 8000dd8:	e0bff815 	stw	r2,-32(fp)
 8000ddc:	00000c06 	br	8000e10 <MAXbytes_wr+0xec>
		sendData[i] = data[i - 1];
 8000de0:	e0bff817 	ldw	r2,-32(fp)
 8000de4:	10bfffc4 	addi	r2,r2,-1
 8000de8:	e0fffe17 	ldw	r3,-8(fp)
 8000dec:	1885883a 	add	r2,r3,r2
 8000df0:	10c00003 	ldbu	r3,0(r2)
 8000df4:	e13ffa17 	ldw	r4,-24(fp)
 8000df8:	e0bff817 	ldw	r2,-32(fp)
 8000dfc:	2085883a 	add	r2,r4,r2
 8000e00:	10c00005 	stb	r3,0(r2)
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	//write reg + 2 via SPI
	alt_u8 sendData[nbytes + 1];
	sendData[0] = reg + 2;

	for(int i = 1; i < nbytes + 1; i++)
 8000e04:	e0bff817 	ldw	r2,-32(fp)
 8000e08:	10800044 	addi	r2,r2,1
 8000e0c:	e0bff815 	stw	r2,-32(fp)
 8000e10:	e0bffd03 	ldbu	r2,-12(fp)
 8000e14:	10800044 	addi	r2,r2,1
 8000e18:	e0fff817 	ldw	r3,-32(fp)
 8000e1c:	18bff016 	blt	r3,r2,8000de0 <MAXbytes_wr+0xbc>
		sendData[i] = data[i - 1];
	
	//write data[n] via SPI, where n goes from 0 to nbytes-1
	int ret = alt_avalon_spi_command(SPI_0_BASE, 0, nbytes + 1, sendData, 0, NULL, 0);
 8000e20:	e0bffd03 	ldbu	r2,-12(fp)
 8000e24:	10800044 	addi	r2,r2,1
 8000e28:	1007883a 	mov	r3,r2
 8000e2c:	e0bffa17 	ldw	r2,-24(fp)
 8000e30:	d8000215 	stw	zero,8(sp)
 8000e34:	d8000115 	stw	zero,4(sp)
 8000e38:	d8000015 	stw	zero,0(sp)
 8000e3c:	100f883a 	mov	r7,r2
 8000e40:	180d883a 	mov	r6,r3
 8000e44:	000b883a 	mov	r5,zero
 8000e48:	01000074 	movhi	r4,1
 8000e4c:	21042804 	addi	r4,r4,4256
 8000e50:	8016adc0 	call	8016adc <alt_avalon_spi_command>
 8000e54:	e0bffb15 	stw	r2,-20(fp)
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0  print an error
	if(ret < 0) {
 8000e58:	e0bffb17 	ldw	r2,-20(fp)
 8000e5c:	1000030e 	bge	r2,zero,8000e6c <MAXbytes_wr+0x148>
		printf("error in MAXbytes_wr - readData less than 0");
 8000e60:	010200b4 	movhi	r4,2050
 8000e64:	21200804 	addi	r4,r4,-32736
 8000e68:	80082440 	call	8008244 <printf>
		// return (BYTE)-1;
	}
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	return (data + nbytes);
 8000e6c:	e0bffd03 	ldbu	r2,-12(fp)
 8000e70:	e0fffe17 	ldw	r3,-8(fp)
 8000e74:	1885883a 	add	r2,r3,r2
 8000e78:	8037883a 	mov	sp,r16
}
 8000e7c:	e6ffff04 	addi	sp,fp,-4
 8000e80:	dfc00217 	ldw	ra,8(sp)
 8000e84:	df000117 	ldw	fp,4(sp)
 8000e88:	dc000017 	ldw	r16,0(sp)
 8000e8c:	dec00304 	addi	sp,sp,12
 8000e90:	f800283a 	ret

08000e94 <MAXreg_rd>:

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
 8000e94:	defff804 	addi	sp,sp,-32
 8000e98:	dfc00715 	stw	ra,28(sp)
 8000e9c:	df000615 	stw	fp,24(sp)
 8000ea0:	df000604 	addi	fp,sp,24
 8000ea4:	2005883a 	mov	r2,r4
 8000ea8:	e0bfff05 	stb	r2,-4(fp)
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	// - Device driver does this
	//write reg via SPI
	alt_u8 readData[1];
	alt_u8 send[1];
	send[0] = reg;
 8000eac:	e0bfff03 	ldbu	r2,-4(fp)
 8000eb0:	e0bffe45 	stb	r2,-7(fp)
	int ret = alt_avalon_spi_command(SPI_0_BASE, 0, 1, send, 1, readData, 0);
 8000eb4:	e0fffe44 	addi	r3,fp,-7
 8000eb8:	d8000215 	stw	zero,8(sp)
 8000ebc:	e0bffe04 	addi	r2,fp,-8
 8000ec0:	d8800115 	stw	r2,4(sp)
 8000ec4:	00800044 	movi	r2,1
 8000ec8:	d8800015 	stw	r2,0(sp)
 8000ecc:	180f883a 	mov	r7,r3
 8000ed0:	01800044 	movi	r6,1
 8000ed4:	000b883a 	mov	r5,zero
 8000ed8:	01000074 	movhi	r4,1
 8000edc:	21042804 	addi	r4,r4,4256
 8000ee0:	8016adc0 	call	8016adc <alt_avalon_spi_command>
 8000ee4:	e0bffd15 	stw	r2,-12(fp)
	//read val via SPI
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	if(ret < 0) {
 8000ee8:	e0bffd17 	ldw	r2,-12(fp)
 8000eec:	1000030e 	bge	r2,zero,8000efc <MAXreg_rd+0x68>
		printf("error in MAXreg_rd - readData less than 0");
 8000ef0:	010200b4 	movhi	r4,2050
 8000ef4:	21201304 	addi	r4,r4,-32692
 8000ef8:	80082440 	call	8008244 <printf>
	}

	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	// - Device driver does this
	//return val
	return readData[0];
 8000efc:	e0bffe03 	ldbu	r2,-8(fp)
}
 8000f00:	e037883a 	mov	sp,fp
 8000f04:	dfc00117 	ldw	ra,4(sp)
 8000f08:	df000017 	ldw	fp,0(sp)
 8000f0c:	dec00204 	addi	sp,sp,8
 8000f10:	f800283a 	ret

08000f14 <MAXbytes_rd>:

//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
 8000f14:	defff604 	addi	sp,sp,-40
 8000f18:	dfc00915 	stw	ra,36(sp)
 8000f1c:	df000815 	stw	fp,32(sp)
 8000f20:	df000804 	addi	fp,sp,32
 8000f24:	2007883a 	mov	r3,r4
 8000f28:	2805883a 	mov	r2,r5
 8000f2c:	e1bfff15 	stw	r6,-4(fp)
 8000f30:	e0fffd05 	stb	r3,-12(fp)
 8000f34:	e0bffe05 	stb	r2,-8(fp)
	//psuedocode:
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	//write reg via SPI
	// alt_u8 readData; 
	alt_u8 send[1] = {reg};
 8000f38:	e0bffd03 	ldbu	r2,-12(fp)
 8000f3c:	e0bffc05 	stb	r2,-16(fp)
	int ret = alt_avalon_spi_command(SPI_0_BASE, 0, 1, send, nbytes, data, 0);
 8000f40:	e0bffe03 	ldbu	r2,-8(fp)
 8000f44:	e13ffc04 	addi	r4,fp,-16
 8000f48:	d8000215 	stw	zero,8(sp)
 8000f4c:	e0ffff17 	ldw	r3,-4(fp)
 8000f50:	d8c00115 	stw	r3,4(sp)
 8000f54:	d8800015 	stw	r2,0(sp)
 8000f58:	200f883a 	mov	r7,r4
 8000f5c:	01800044 	movi	r6,1
 8000f60:	000b883a 	mov	r5,zero
 8000f64:	01000074 	movhi	r4,1
 8000f68:	21042804 	addi	r4,r4,4256
 8000f6c:	8016adc0 	call	8016adc <alt_avalon_spi_command>
 8000f70:	e0bffb15 	stw	r2,-20(fp)
	//read data[n] from SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	if(ret < 0) {
 8000f74:	e0bffb17 	ldw	r2,-20(fp)
 8000f78:	1000030e 	bge	r2,zero,8000f88 <MAXbytes_rd+0x74>
		printf("error in MAXbytes_rd - readData less than 0");
 8000f7c:	010200b4 	movhi	r4,2050
 8000f80:	21201e04 	addi	r4,r4,-32648
 8000f84:	80082440 	call	8008244 <printf>
		// return (BYTE)-1;
	}

	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	return (data + nbytes);
 8000f88:	e0bffe03 	ldbu	r2,-8(fp)
 8000f8c:	e0ffff17 	ldw	r3,-4(fp)
 8000f90:	1885883a 	add	r2,r3,r2
}
 8000f94:	e037883a 	mov	sp,fp
 8000f98:	dfc00117 	ldw	ra,4(sp)
 8000f9c:	df000017 	ldw	fp,0(sp)
 8000fa0:	dec00204 	addi	sp,sp,8
 8000fa4:	f800283a 	ret

08000fa8 <MAX3421E_reset>:
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
 8000fa8:	defffd04 	addi	sp,sp,-12
 8000fac:	dfc00215 	stw	ra,8(sp)
 8000fb0:	df000115 	stw	fp,4(sp)
 8000fb4:	df000104 	addi	fp,sp,4
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 8000fb8:	0007883a 	mov	r3,zero
 8000fbc:	00800074 	movhi	r2,1
 8000fc0:	10845404 	addi	r2,r2,4432
 8000fc4:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
 8000fc8:	010003f4 	movhi	r4,15
 8000fcc:	21109004 	addi	r4,r4,16960
 8000fd0:	8015e340 	call	8015e34 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 8000fd4:	00c00044 	movi	r3,1
 8000fd8:	00800074 	movhi	r2,1
 8000fdc:	10845404 	addi	r2,r2,4432
 8000fe0:	10c00035 	stwio	r3,0(r2)
	BYTE tmp = 0;
 8000fe4:	e03fff05 	stb	zero,-4(fp)
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
 8000fe8:	01400804 	movi	r5,32
 8000fec:	01001e04 	movi	r4,120
 8000ff0:	8000c980 	call	8000c98 <MAXreg_wr>
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
 8000ff4:	000b883a 	mov	r5,zero
 8000ff8:	01001e04 	movi	r4,120
 8000ffc:	8000c980 	call	8000c98 <MAXreg_wr>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 8001000:	00000806 	br	8001024 <MAX3421E_reset+0x7c>
		tmp++;                                      //timeout after 256 attempts
 8001004:	e0bfff03 	ldbu	r2,-4(fp)
 8001008:	10800044 	addi	r2,r2,1
 800100c:	e0bfff05 	stb	r2,-4(fp)
		if (tmp == 0) {
 8001010:	e0bfff03 	ldbu	r2,-4(fp)
 8001014:	1000031e 	bne	r2,zero,8001024 <MAX3421E_reset+0x7c>
			printf("reset timeout!");
 8001018:	010200b4 	movhi	r4,2050
 800101c:	21202904 	addi	r4,r4,-32604
 8001020:	80082440 	call	8008244 <printf>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	BYTE tmp = 0;
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 8001024:	01001a04 	movi	r4,104
 8001028:	8000e940 	call	8000e94 <MAXreg_rd>
 800102c:	10803fcc 	andi	r2,r2,255
 8001030:	1080004c 	andi	r2,r2,1
 8001034:	103ff326 	beq	r2,zero,8001004 <MAX3421E_reset+0x5c>
		tmp++;                                      //timeout after 256 attempts
		if (tmp == 0) {
			printf("reset timeout!");
		}
	}
}
 8001038:	0001883a 	nop
 800103c:	e037883a 	mov	sp,fp
 8001040:	dfc00117 	ldw	ra,4(sp)
 8001044:	df000017 	ldw	fp,0(sp)
 8001048:	dec00204 	addi	sp,sp,8
 800104c:	f800283a 	ret

08001050 <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
 8001050:	defffe04 	addi	sp,sp,-8
 8001054:	df000115 	stw	fp,4(sp)
 8001058:	df000104 	addi	fp,sp,4
 800105c:	e13fff15 	stw	r4,-4(fp)
	// power on/off successful
	return (1);
 8001060:	00800044 	movi	r2,1
}
 8001064:	e037883a 	mov	sp,fp
 8001068:	df000017 	ldw	fp,0(sp)
 800106c:	dec00104 	addi	sp,sp,4
 8001070:	f800283a 	ret

08001074 <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
 8001074:	defffd04 	addi	sp,sp,-12
 8001078:	dfc00215 	stw	ra,8(sp)
 800107c:	df000115 	stw	fp,4(sp)
 8001080:	df000104 	addi	fp,sp,4
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
 8001084:	01003e04 	movi	r4,248
 8001088:	8000e940 	call	8000e94 <MAXreg_rd>
 800108c:	e0bfff05 	stb	r2,-4(fp)
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte
 8001090:	e0ffff03 	ldbu	r3,-4(fp)
 8001094:	00bff004 	movi	r2,-64
 8001098:	1884703a 	and	r2,r3,r2
 800109c:	e0bfff05 	stb	r2,-4(fp)

	switch (bus_sample) {                   //start full-speed or low-speed host
 80010a0:	e0bfff03 	ldbu	r2,-4(fp)
 80010a4:	10c01020 	cmpeqi	r3,r2,64
 80010a8:	1800221e 	bne	r3,zero,8001134 <MAX_busprobe+0xc0>
 80010ac:	10c01048 	cmpgei	r3,r2,65
 80010b0:	1800021e 	bne	r3,zero,80010bc <MAX_busprobe+0x48>
 80010b4:	10003b26 	beq	r2,zero,80011a4 <MAX_busprobe+0x130>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 80010b8:	00004a06 	br	80011e4 <MAX_busprobe+0x170>

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
 80010bc:	10c02020 	cmpeqi	r3,r2,128
 80010c0:	1800031e 	bne	r3,zero,80010d0 <MAX_busprobe+0x5c>
 80010c4:	10803020 	cmpeqi	r2,r2,192
 80010c8:	1000331e 	bne	r2,zero,8001198 <MAX_busprobe+0x124>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 80010cc:	00004506 	br	80011e4 <MAX_busprobe+0x170>
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
	case ( bmJSTATUS):
		/*kludgy*/
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 80010d0:	d0a00203 	ldbu	r2,-32760(gp)
 80010d4:	10803fcc 	andi	r2,r2,255
 80010d8:	108004e0 	cmpeqi	r2,r2,19
 80010dc:	10003e1e 	bne	r2,zero,80011d8 <MAX_busprobe+0x164>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 80010e0:	01003604 	movi	r4,216
 80010e4:	8000e940 	call	8000e94 <MAXreg_rd>
 80010e8:	10803fcc 	andi	r2,r2,255
 80010ec:	1080008c 	andi	r2,r2,2
 80010f0:	1000071e 	bne	r2,zero,8001110 <MAX_busprobe+0x9c>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 80010f4:	01403244 	movi	r5,201
 80010f8:	01003604 	movi	r4,216
 80010fc:	8000c980 	call	8000c98 <MAXreg_wr>
				printf("Starting in full speed\n");
 8001100:	010200b4 	movhi	r4,2050
 8001104:	21202d04 	addi	r4,r4,-32588
 8001108:	80083600 	call	8008360 <puts>
 800110c:	00000606 	br	8001128 <MAX_busprobe+0xb4>
			} else {
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
 8001110:	014032c4 	movi	r5,203
 8001114:	01003604 	movi	r4,216
 8001118:	8000c980 	call	8000c98 <MAXreg_wr>
				printf("Starting in low speed\n");
 800111c:	010200b4 	movhi	r4,2050
 8001120:	21203304 	addi	r4,r4,-32564
 8001124:	80083600 	call	8008360 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 8001128:	00800404 	movi	r2,16
 800112c:	d0a00205 	stb	r2,-32760(gp)
		}
		break;
 8001130:	00002906 	br	80011d8 <MAX_busprobe+0x164>
	case ( bmKSTATUS):
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 8001134:	d0a00203 	ldbu	r2,-32760(gp)
 8001138:	10803fcc 	andi	r2,r2,255
 800113c:	108004e0 	cmpeqi	r2,r2,19
 8001140:	1000271e 	bne	r2,zero,80011e0 <MAX_busprobe+0x16c>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 8001144:	01003604 	movi	r4,216
 8001148:	8000e940 	call	8000e94 <MAXreg_rd>
 800114c:	10803fcc 	andi	r2,r2,255
 8001150:	1080008c 	andi	r2,r2,2
 8001154:	1000071e 	bne	r2,zero,8001174 <MAX_busprobe+0x100>
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
 8001158:	014032c4 	movi	r5,203
 800115c:	01003604 	movi	r4,216
 8001160:	8000c980 	call	8000c98 <MAXreg_wr>
				printf("Starting in low speed\n");
 8001164:	010200b4 	movhi	r4,2050
 8001168:	21203304 	addi	r4,r4,-32564
 800116c:	80083600 	call	8008360 <puts>
 8001170:	00000606 	br	800118c <MAX_busprobe+0x118>
			} else {
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 8001174:	01403244 	movi	r5,201
 8001178:	01003604 	movi	r4,216
 800117c:	8000c980 	call	8000c98 <MAXreg_wr>
				printf("Starting in full speed\n");
 8001180:	010200b4 	movhi	r4,2050
 8001184:	21202d04 	addi	r4,r4,-32588
 8001188:	80083600 	call	8008360 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 800118c:	00800404 	movi	r2,16
 8001190:	d0a00205 	stb	r2,-32760(gp)
		}
		break;
 8001194:	00001206 	br	80011e0 <MAX_busprobe+0x16c>
	case ( bmSE1):              //illegal state
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
 8001198:	00800104 	movi	r2,4
 800119c:	d0a00205 	stb	r2,-32760(gp)
		break;
 80011a0:	00001006 	br	80011e4 <MAX_busprobe+0x170>
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
 80011a4:	d0a00203 	ldbu	r2,-32760(gp)
 80011a8:	10803fcc 	andi	r2,r2,255
 80011ac:	10803c0c 	andi	r2,r2,240
 80011b0:	10000326 	beq	r2,zero,80011c0 <MAX_busprobe+0x14c>
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
 80011b4:	00800044 	movi	r2,1
 80011b8:	d0a00205 	stb	r2,-32760(gp)
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
 80011bc:	00000906 	br	80011e4 <MAX_busprobe+0x170>
		break;
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
 80011c0:	01403244 	movi	r5,201
 80011c4:	01003604 	movi	r4,216
 80011c8:	8000c980 	call	8000c98 <MAXreg_wr>
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
 80011cc:	008000c4 	movi	r2,3
 80011d0:	d0a00205 	stb	r2,-32760(gp)
		}
		break;
 80011d4:	00000306 	br	80011e4 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
				printf("Starting in low speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 80011d8:	0001883a 	nop
 80011dc:	00000106 	br	80011e4 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
				printf("Starting in full speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 80011e0:	0001883a 	nop
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 80011e4:	0001883a 	nop
 80011e8:	e037883a 	mov	sp,fp
 80011ec:	dfc00117 	ldw	ra,4(sp)
 80011f0:	df000017 	ldw	fp,0(sp)
 80011f4:	dec00204 	addi	sp,sp,8
 80011f8:	f800283a 	ret

080011fc <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
 80011fc:	defffe04 	addi	sp,sp,-8
 8001200:	dfc00115 	stw	ra,4(sp)
 8001204:	df000015 	stw	fp,0(sp)
 8001208:	d839883a 	mov	fp,sp
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
 800120c:	01400684 	movi	r5,26
 8001210:	01002204 	movi	r4,136
 8001214:	8000c980 	call	8000c98 <MAXreg_wr>
	MAX3421E_reset();                                //stop/start the oscillator
 8001218:	8000fa80 	call	8000fa8 <MAX3421E_reset>
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
 800121c:	0009883a 	mov	r4,zero
 8001220:	80010500 	call	8001050 <Vbus_power>
	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
 8001224:	01402004 	movi	r5,128
 8001228:	01002e04 	movi	r4,184
 800122c:	8000c980 	call	8000c98 <MAXreg_wr>
	Vbus_power( ON);
 8001230:	01000044 	movi	r4,1
 8001234:	80010500 	call	8001050 <Vbus_power>
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
 8001238:	01403444 	movi	r5,209
 800123c:	01003604 	movi	r4,216
 8001240:	8000c980 	call	8000c98 <MAXreg_wr>
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
 8001244:	01400804 	movi	r5,32
 8001248:	01003404 	movi	r4,208
 800124c:	8000c980 	call	8000c98 <MAXreg_wr>
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
 8001250:	01400104 	movi	r5,4
 8001254:	01003a04 	movi	r4,232
 8001258:	8000c980 	call	8000c98 <MAXreg_wr>
	MAX_busprobe();                             //check if anything is connected
 800125c:	80010740 	call	8001074 <MAX_busprobe>
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt                 
 8001260:	01400804 	movi	r5,32
 8001264:	01003204 	movi	r4,200
 8001268:	8000c980 	call	8000c98 <MAXreg_wr>
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
 800126c:	01400044 	movi	r5,1
 8001270:	01002004 	movi	r4,128
 8001274:	8000c980 	call	8000c98 <MAXreg_wr>
}
 8001278:	0001883a 	nop
 800127c:	e037883a 	mov	sp,fp
 8001280:	dfc00117 	ldw	ra,4(sp)
 8001284:	df000017 	ldw	fp,0(sp)
 8001288:	dec00204 	addi	sp,sp,8
 800128c:	f800283a 	ret

08001290 <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
 8001290:	defffe04 	addi	sp,sp,-8
 8001294:	dfc00115 	stw	ra,4(sp)
 8001298:	df000015 	stw	fp,0(sp)
 800129c:	d839883a 	mov	fp,sp
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 80012a0:	00800074 	movhi	r2,1
 80012a4:	10845c04 	addi	r2,r2,4464
 80012a8:	10800037 	ldwio	r2,0(r2)
 80012ac:	1000041e 	bne	r2,zero,80012c0 <MAX3421E_Task+0x30>
		printf("MAX interrupt\n\r");
 80012b0:	010200b4 	movhi	r4,2050
 80012b4:	21203904 	addi	r4,r4,-32540
 80012b8:	80082440 	call	8008244 <printf>
		MaxIntHandler();
 80012bc:	80012fc0 	call	80012fc <MaxIntHandler>
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
 80012c0:	00800074 	movhi	r2,1
 80012c4:	10845804 	addi	r2,r2,4448
 80012c8:	10800037 	ldwio	r2,0(r2)
 80012cc:	10800058 	cmpnei	r2,r2,1
 80012d0:	1000041e 	bne	r2,zero,80012e4 <MAX3421E_Task+0x54>
		printf("GPX interrupt\n\r");
 80012d4:	010200b4 	movhi	r4,2050
 80012d8:	21203d04 	addi	r4,r4,-32524
 80012dc:	80082440 	call	8008244 <printf>
		MaxGpxHandler();
 80012e0:	80013c80 	call	80013c8 <MaxGpxHandler>
	}
}
 80012e4:	0001883a 	nop
 80012e8:	e037883a 	mov	sp,fp
 80012ec:	dfc00117 	ldw	ra,4(sp)
 80012f0:	df000017 	ldw	fp,0(sp)
 80012f4:	dec00204 	addi	sp,sp,8
 80012f8:	f800283a 	ret

080012fc <MaxIntHandler>:

void MaxIntHandler(void) {
 80012fc:	defffd04 	addi	sp,sp,-12
 8001300:	dfc00215 	stw	ra,8(sp)
 8001304:	df000115 	stw	fp,4(sp)
 8001308:	df000104 	addi	fp,sp,4
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
 800130c:	e03fff05 	stb	zero,-4(fp)
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
 8001310:	01003204 	movi	r4,200
 8001314:	8000e940 	call	8000e94 <MAXreg_rd>
 8001318:	e0bfff45 	stb	r2,-3(fp)
	printf("IRQ: %x\n", HIRQ);
 800131c:	e0bfff43 	ldbu	r2,-3(fp)
 8001320:	100b883a 	mov	r5,r2
 8001324:	010200b4 	movhi	r4,2050
 8001328:	21204104 	addi	r4,r4,-32508
 800132c:	80082440 	call	8008244 <printf>
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
 8001330:	e0bfff43 	ldbu	r2,-3(fp)
 8001334:	1080100c 	andi	r2,r2,64
 8001338:	10000326 	beq	r2,zero,8001348 <MaxIntHandler+0x4c>
		HIRQ_sendback |= bmFRAMEIRQ;
 800133c:	e0bfff03 	ldbu	r2,-4(fp)
 8001340:	10801014 	ori	r2,r2,64
 8001344:	e0bfff05 	stb	r2,-4(fp)
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
 8001348:	e0bfff43 	ldbu	r2,-3(fp)
 800134c:	1080080c 	andi	r2,r2,32
 8001350:	10000426 	beq	r2,zero,8001364 <MaxIntHandler+0x68>
		MAX_busprobe();
 8001354:	80010740 	call	8001074 <MAX_busprobe>
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
 8001358:	e0bfff03 	ldbu	r2,-4(fp)
 800135c:	10800814 	ori	r2,r2,32
 8001360:	e0bfff05 	stb	r2,-4(fp)
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
 8001364:	e0bfff43 	ldbu	r2,-3(fp)
 8001368:	1080020c 	andi	r2,r2,8
 800136c:	10000326 	beq	r2,zero,800137c <MaxIntHandler+0x80>
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
 8001370:	000b883a 	mov	r5,zero
 8001374:	01000e04 	movi	r4,56
 8001378:	8000c980 	call	8000c98 <MAXreg_wr>
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
 800137c:	e0bfff43 	ldbu	r2,-3(fp)
 8001380:	1080004c 	andi	r2,r2,1
 8001384:	10000626 	beq	r2,zero,80013a0 <MaxIntHandler+0xa4>
		usb_task_state++;                       //advance USB task state machine
 8001388:	d0a00203 	ldbu	r2,-32760(gp)
 800138c:	10800044 	addi	r2,r2,1
 8001390:	d0a00205 	stb	r2,-32760(gp)
		HIRQ_sendback |= bmBUSEVENTIRQ;
 8001394:	e0bfff03 	ldbu	r2,-4(fp)
 8001398:	10800054 	ori	r2,r2,1
 800139c:	e0bfff05 	stb	r2,-4(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
 80013a0:	e0bfff03 	ldbu	r2,-4(fp)
 80013a4:	100b883a 	mov	r5,r2
 80013a8:	01003204 	movi	r4,200
 80013ac:	8000c980 	call	8000c98 <MAXreg_wr>
}
 80013b0:	0001883a 	nop
 80013b4:	e037883a 	mov	sp,fp
 80013b8:	dfc00117 	ldw	ra,4(sp)
 80013bc:	df000017 	ldw	fp,0(sp)
 80013c0:	dec00204 	addi	sp,sp,8
 80013c4:	f800283a 	ret

080013c8 <MaxGpxHandler>:

void MaxGpxHandler(void) {
 80013c8:	defffd04 	addi	sp,sp,-12
 80013cc:	dfc00215 	stw	ra,8(sp)
 80013d0:	df000115 	stw	fp,4(sp)
 80013d4:	df000104 	addi	fp,sp,4
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
 80013d8:	01002c04 	movi	r4,176
 80013dc:	8000e940 	call	8000e94 <MAXreg_rd>
 80013e0:	e0bfff05 	stb	r2,-4(fp)
}
 80013e4:	0001883a 	nop
 80013e8:	e037883a 	mov	sp,fp
 80013ec:	dfc00117 	ldw	ra,4(sp)
 80013f0:	df000017 	ldw	fp,0(sp)
 80013f4:	dec00204 	addi	sp,sp,8
 80013f8:	f800283a 	ret

080013fc <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
 80013fc:	defff104 	addi	sp,sp,-60
 8001400:	dfc00e15 	stw	ra,56(sp)
 8001404:	df000d15 	stw	fp,52(sp)
 8001408:	df000d04 	addi	fp,sp,52
 800140c:	2015883a 	mov	r10,r4
 8001410:	2813883a 	mov	r9,r5
 8001414:	3011883a 	mov	r8,r6
 8001418:	380d883a 	mov	r6,r7
 800141c:	e1400217 	ldw	r5,8(fp)
 8001420:	e1000317 	ldw	r4,12(fp)
 8001424:	e0c00417 	ldw	r3,16(fp)
 8001428:	e0800517 	ldw	r2,20(fp)
 800142c:	e2bff805 	stb	r10,-32(fp)
 8001430:	e27ff905 	stb	r9,-28(fp)
 8001434:	e23ffa05 	stb	r8,-24(fp)
 8001438:	e1bffb05 	stb	r6,-20(fp)
 800143c:	e17ffc05 	stb	r5,-16(fp)
 8001440:	e13ffd05 	stb	r4,-12(fp)
 8001444:	e0fffe0d 	sth	r3,-8(fp)
 8001448:	e0bfff0d 	sth	r2,-4(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
 800144c:	e03ff415 	stw	zero,-48(fp)
 BYTE datastage = 1; //request data stage present or absent
 8001450:	00800044 	movi	r2,1
 8001454:	e0bff505 	stb	r2,-44(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
 8001458:	e0800617 	ldw	r2,24(fp)
 800145c:	1000011e 	bne	r2,zero,8001464 <XferCtrlReq+0x68>
        datastage = 0;
 8001460:	e03ff505 	stb	zero,-44(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
 8001464:	e0bff803 	ldbu	r2,-32(fp)
 8001468:	100b883a 	mov	r5,r2
 800146c:	01003804 	movi	r4,224
 8001470:	8000c980 	call	8000c98 <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
 8001474:	e0bffa03 	ldbu	r2,-24(fp)
 8001478:	10803fcc 	andi	r2,r2,255
 800147c:	1080201c 	xori	r2,r2,128
 8001480:	10bfe004 	addi	r2,r2,-128
 8001484:	1000020e 	bge	r2,zero,8001490 <XferCtrlReq+0x94>
        direction = TRUE;                   		//determine request direction
 8001488:	00800044 	movi	r2,1
 800148c:	e0bff415 	stw	r2,-48(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
 8001490:	e0bffa03 	ldbu	r2,-24(fp)
 8001494:	e0bff585 	stb	r2,-42(fp)
    setup_pkt.bRequest = bRequest;
 8001498:	e0bffb03 	ldbu	r2,-20(fp)
 800149c:	e0bff5c5 	stb	r2,-41(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
 80014a0:	e0bffc03 	ldbu	r2,-16(fp)
 80014a4:	e0bff605 	stb	r2,-40(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
 80014a8:	e0bffd03 	ldbu	r2,-12(fp)
 80014ac:	e0bff645 	stb	r2,-39(fp)
    setup_pkt.wIndex = wInd;
 80014b0:	e0bffe0b 	ldhu	r2,-8(fp)
 80014b4:	e0bff68d 	sth	r2,-38(fp)
    setup_pkt.wLength = nbytes;
 80014b8:	e0bfff0b 	ldhu	r2,-4(fp)
 80014bc:	e0bff70d 	sth	r2,-36(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
 80014c0:	e0bff584 	addi	r2,fp,-42
 80014c4:	100d883a 	mov	r6,r2
 80014c8:	01400204 	movi	r5,8
 80014cc:	01000804 	movi	r4,32
 80014d0:	8000d240 	call	8000d24 <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
 80014d4:	e0bff903 	ldbu	r2,-28(fp)
 80014d8:	100b883a 	mov	r5,r2
 80014dc:	01000404 	movi	r4,16
 80014e0:	80016a40 	call	80016a4 <XferDispatchPkt>
 80014e4:	e0bff545 	stb	r2,-43(fp)
    if( rcode ) {                                       //return HRSLT if not zero
 80014e8:	e0bff543 	ldbu	r2,-43(fp)
 80014ec:	10000226 	beq	r2,zero,80014f8 <XferCtrlReq+0xfc>
        return( rcode );
 80014f0:	e0bff543 	ldbu	r2,-43(fp)
 80014f4:	00000f06 	br	8001534 <XferCtrlReq+0x138>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
 80014f8:	e0bff503 	ldbu	r2,-44(fp)
 80014fc:	1085883a 	add	r2,r2,r2
 8001500:	1087883a 	add	r3,r2,r2
 8001504:	d0a00004 	addi	r2,gp,-32768
 8001508:	1885883a 	add	r2,r3,r2
 800150c:	10800017 	ldw	r2,0(r2)
 8001510:	e13ff803 	ldbu	r4,-32(fp)
 8001514:	e17ff903 	ldbu	r5,-28(fp)
 8001518:	e1bfff0b 	ldhu	r6,-4(fp)
 800151c:	e0fff417 	ldw	r3,-48(fp)
 8001520:	d8c00015 	stw	r3,0(sp)
 8001524:	e1c00617 	ldw	r7,24(fp)
 8001528:	103ee83a 	callr	r2
 800152c:	e0bff545 	stb	r2,-43(fp)
    return( rcode );
 8001530:	e0bff543 	ldbu	r2,-43(fp)
}
 8001534:	e037883a 	mov	sp,fp
 8001538:	dfc00117 	ldw	ra,4(sp)
 800153c:	df000017 	ldw	fp,0(sp)
 8001540:	dec00204 	addi	sp,sp,8
 8001544:	f800283a 	ret

08001548 <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 8001548:	defff804 	addi	sp,sp,-32
 800154c:	dfc00715 	stw	ra,28(sp)
 8001550:	df000615 	stw	fp,24(sp)
 8001554:	df000604 	addi	fp,sp,24
 8001558:	2807883a 	mov	r3,r5
 800155c:	3005883a 	mov	r2,r6
 8001560:	e1ffff15 	stw	r7,-4(fp)
 8001564:	e13ffc05 	stb	r4,-16(fp)
 8001568:	e0fffd05 	stb	r3,-12(fp)
 800156c:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
 8001570:	e0800217 	ldw	r2,8(fp)
 8001574:	10002826 	beq	r2,zero,8001618 <XferCtrlData+0xd0>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 8001578:	e0fffc03 	ldbu	r3,-16(fp)
 800157c:	008200b4 	movhi	r2,2050
 8001580:	10b09904 	addi	r2,r2,-15772
 8001584:	180690fa 	slli	r3,r3,3
 8001588:	10c5883a 	add	r2,r2,r3
 800158c:	10c00017 	ldw	r3,0(r2)
 8001590:	e0bffd03 	ldbu	r2,-12(fp)
 8001594:	100490fa 	slli	r2,r2,3
 8001598:	1885883a 	add	r2,r3,r2
 800159c:	00c00804 	movi	r3,32
 80015a0:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize );
 80015a4:	e13ffc03 	ldbu	r4,-16(fp)
 80015a8:	e17ffd03 	ldbu	r5,-12(fp)
 80015ac:	e1bffe0b 	ldhu	r6,-8(fp)
 80015b0:	e0fffc03 	ldbu	r3,-16(fp)
 80015b4:	008200b4 	movhi	r2,2050
 80015b8:	10b09904 	addi	r2,r2,-15772
 80015bc:	180690fa 	slli	r3,r3,3
 80015c0:	10c5883a 	add	r2,r2,r3
 80015c4:	10c00017 	ldw	r3,0(r2)
 80015c8:	e0bffd03 	ldbu	r2,-12(fp)
 80015cc:	100490fa 	slli	r2,r2,3
 80015d0:	1885883a 	add	r2,r3,r2
 80015d4:	1080008b 	ldhu	r2,2(r2)
 80015d8:	10803fcc 	andi	r2,r2,255
 80015dc:	d8800015 	stw	r2,0(sp)
 80015e0:	e1ffff17 	ldw	r7,-4(fp)
 80015e4:	80018200 	call	8001820 <XferInTransfer>
 80015e8:	e0bffb05 	stb	r2,-20(fp)
        if( rcode ) {
 80015ec:	e0bffb03 	ldbu	r2,-20(fp)
 80015f0:	10000226 	beq	r2,zero,80015fc <XferCtrlData+0xb4>
        return( rcode );
 80015f4:	e0bffb03 	ldbu	r2,-20(fp)
 80015f8:	00000806 	br	800161c <XferCtrlData+0xd4>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
 80015fc:	e0bffd03 	ldbu	r2,-12(fp)
 8001600:	100b883a 	mov	r5,r2
 8001604:	01002804 	movi	r4,160
 8001608:	80016a40 	call	80016a4 <XferDispatchPkt>
 800160c:	e0bffb05 	stb	r2,-20(fp)
        return( rcode );
 8001610:	e0bffb03 	ldbu	r2,-20(fp)
 8001614:	00000106 	br	800161c <XferCtrlData+0xd4>
    }
    else {              //OUT not implemented
        return( 0xff );
 8001618:	00bfffc4 	movi	r2,-1
    }
}
 800161c:	e037883a 	mov	sp,fp
 8001620:	dfc00117 	ldw	ra,4(sp)
 8001624:	df000017 	ldw	fp,0(sp)
 8001628:	dec00204 	addi	sp,sp,8
 800162c:	f800283a 	ret

08001630 <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 8001630:	defff904 	addi	sp,sp,-28
 8001634:	dfc00615 	stw	ra,24(sp)
 8001638:	df000515 	stw	fp,20(sp)
 800163c:	df000504 	addi	fp,sp,20
 8001640:	2807883a 	mov	r3,r5
 8001644:	3005883a 	mov	r2,r6
 8001648:	e1ffff15 	stw	r7,-4(fp)
 800164c:	e13ffc05 	stb	r4,-16(fp)
 8001650:	e0fffd05 	stb	r3,-12(fp)
 8001654:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;
    if( direction ) { //GET
 8001658:	e0800217 	ldw	r2,8(fp)
 800165c:	10000626 	beq	r2,zero,8001678 <XferCtrlND+0x48>
        rcode = XferDispatchPkt( tokOUTHS, ep );
 8001660:	e0bffd03 	ldbu	r2,-12(fp)
 8001664:	100b883a 	mov	r5,r2
 8001668:	01002804 	movi	r4,160
 800166c:	80016a40 	call	80016a4 <XferDispatchPkt>
 8001670:	e0bffb05 	stb	r2,-20(fp)
 8001674:	00000506 	br	800168c <XferCtrlND+0x5c>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
 8001678:	e0bffd03 	ldbu	r2,-12(fp)
 800167c:	100b883a 	mov	r5,r2
 8001680:	01002004 	movi	r4,128
 8001684:	80016a40 	call	80016a4 <XferDispatchPkt>
 8001688:	e0bffb05 	stb	r2,-20(fp)
    }
    return( rcode );
 800168c:	e0bffb03 	ldbu	r2,-20(fp)
}
 8001690:	e037883a 	mov	sp,fp
 8001694:	dfc00117 	ldw	ra,4(sp)
 8001698:	df000017 	ldw	fp,0(sp)
 800169c:	dec00204 	addi	sp,sp,8
 80016a0:	f800283a 	ret

080016a4 <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
 80016a4:	defff904 	addi	sp,sp,-28
 80016a8:	dfc00615 	stw	ra,24(sp)
 80016ac:	df000515 	stw	fp,20(sp)
 80016b0:	df000504 	addi	fp,sp,20
 80016b4:	2007883a 	mov	r3,r4
 80016b8:	2805883a 	mov	r2,r5
 80016bc:	e0fffe05 	stb	r3,-8(fp)
 80016c0:	e0bfff05 	stb	r2,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80016c4:	d0a73b17 	ldw	r2,-25364(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
 80016c8:	0140fa04 	movi	r5,1000
 80016cc:	1009883a 	mov	r4,r2
 80016d0:	8007e400 	call	8007e40 <__mulsi3>
 80016d4:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80016d8:	d0a73a17 	ldw	r2,-25368(gp)
 80016dc:	100b883a 	mov	r5,r2
 80016e0:	1809883a 	mov	r4,r3
 80016e4:	8007d840 	call	8007d84 <__udivsi3>
 80016e8:	1084e204 	addi	r2,r2,5000
 80016ec:	e0bffc15 	stw	r2,-16(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
 80016f0:	e03ffb45 	stb	zero,-19(fp)
 BYTE nak_count = 0;
 80016f4:	e03ffb85 	stb	zero,-18(fp)

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
 80016f8:	e0fffe03 	ldbu	r3,-8(fp)
 80016fc:	e0bfff03 	ldbu	r2,-4(fp)
 8001700:	1884b03a 	or	r2,r3,r2
 8001704:	10803fcc 	andi	r2,r2,255
 8001708:	100b883a 	mov	r5,r2
 800170c:	01003c04 	movi	r4,240
 8001710:	8000c980 	call	8000c98 <MAXreg_wr>
        rcode = 0xff;
 8001714:	00bfffc4 	movi	r2,-1
 8001718:	e0bffb05 	stb	r2,-20(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 800171c:	00000d06 	br	8001754 <XferDispatchPkt+0xb0>
            tmpdata = MAXreg_rd( rHIRQ );
 8001720:	01003204 	movi	r4,200
 8001724:	8000e940 	call	8000e94 <MAXreg_rd>
 8001728:	e0bffd05 	stb	r2,-12(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
 800172c:	e0bffd03 	ldbu	r2,-12(fp)
 8001730:	10803fcc 	andi	r2,r2,255
 8001734:	1080201c 	xori	r2,r2,128
 8001738:	10bfe004 	addi	r2,r2,-128
 800173c:	1000050e 	bge	r2,zero,8001754 <XferDispatchPkt+0xb0>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
 8001740:	01402004 	movi	r5,128
 8001744:	01003204 	movi	r4,200
 8001748:	8000c980 	call	8000c98 <MAXreg_wr>
                rcode = 0x00;
 800174c:	e03ffb05 	stb	zero,-20(fp)
                break;
 8001750:	00000c06 	br	8001784 <XferDispatchPkt+0xe0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8001754:	d0a73b17 	ldw	r2,-25364(gp)
 BYTE nak_count = 0;

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
        rcode = 0xff;
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 8001758:	0140fa04 	movi	r5,1000
 800175c:	1009883a 	mov	r4,r2
 8001760:	8007e400 	call	8007e40 <__mulsi3>
 8001764:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8001768:	d0a73a17 	ldw	r2,-25368(gp)
 800176c:	100b883a 	mov	r5,r2
 8001770:	1809883a 	mov	r4,r3
 8001774:	8007d840 	call	8007d84 <__udivsi3>
 8001778:	1007883a 	mov	r3,r2
 800177c:	e0bffc17 	ldw	r2,-16(fp)
 8001780:	18bfe736 	bltu	r3,r2,8001720 <XferDispatchPkt+0x7c>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
                rcode = 0x00;
                break;
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
 8001784:	e0bffb03 	ldbu	r2,-20(fp)
 8001788:	10000226 	beq	r2,zero,8001794 <XferDispatchPkt+0xf0>
            return( rcode );
 800178c:	e0bffb03 	ldbu	r2,-20(fp)
 8001790:	00001e06 	br	800180c <XferDispatchPkt+0x168>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
 8001794:	01003e04 	movi	r4,248
 8001798:	8000e940 	call	8000e94 <MAXreg_rd>
 800179c:	108003cc 	andi	r2,r2,15
 80017a0:	e0bffb05 	stb	r2,-20(fp)
        if( rcode == hrNAK ) {
 80017a4:	e0bffb03 	ldbu	r2,-20(fp)
 80017a8:	10800118 	cmpnei	r2,r2,4
 80017ac:	1000071e 	bne	r2,zero,80017cc <XferDispatchPkt+0x128>
            nak_count++;
 80017b0:	e0bffb83 	ldbu	r2,-18(fp)
 80017b4:	10800044 	addi	r2,r2,1
 80017b8:	e0bffb85 	stb	r2,-18(fp)
            if( nak_count == USB_NAK_LIMIT ) {
 80017bc:	e0bffb83 	ldbu	r2,-18(fp)
 80017c0:	10803218 	cmpnei	r2,r2,200
 80017c4:	10000b1e 	bne	r2,zero,80017f4 <XferDispatchPkt+0x150>
                break;
 80017c8:	00000f06 	br	8001808 <XferDispatchPkt+0x164>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
 80017cc:	e0bffb03 	ldbu	r2,-20(fp)
 80017d0:	10800398 	cmpnei	r2,r2,14
 80017d4:	1000091e 	bne	r2,zero,80017fc <XferDispatchPkt+0x158>
            retry_count++;
 80017d8:	e0bffb43 	ldbu	r2,-19(fp)
 80017dc:	10800044 	addi	r2,r2,1
 80017e0:	e0bffb45 	stb	r2,-19(fp)
            if( retry_count == USB_RETRY_LIMIT ) {
 80017e4:	e0bffb47 	ldb	r2,-19(fp)
 80017e8:	108000d8 	cmpnei	r2,r2,3
 80017ec:	10000526 	beq	r2,zero,8001804 <XferDispatchPkt+0x160>
                break;
            }
            else {
                continue;
 80017f0:	00000106 	br	80017f8 <XferDispatchPkt+0x154>
            nak_count++;
            if( nak_count == USB_NAK_LIMIT ) {
                break;
            }
            else {
                continue;
 80017f4:	0001883a 	nop
            else {
                continue;
            }
        }
        else break;
    }//while( 1 )
 80017f8:	003fbf06 	br	80016f8 <XferDispatchPkt+0x54>
            }
            else {
                continue;
            }
        }
        else break;
 80017fc:	0001883a 	nop
 8001800:	00000106 	br	8001808 <XferDispatchPkt+0x164>
            }
        }
        if( rcode == hrTIMEOUT ) {
            retry_count++;
            if( retry_count == USB_RETRY_LIMIT ) {
                break;
 8001804:	0001883a 	nop
                continue;
            }
        }
        else break;
    }//while( 1 )
    return( rcode );
 8001808:	e0bffb03 	ldbu	r2,-20(fp)
}
 800180c:	e037883a 	mov	sp,fp
 8001810:	dfc00117 	ldw	ra,4(sp)
 8001814:	df000017 	ldw	fp,0(sp)
 8001818:	dec00204 	addi	sp,sp,8
 800181c:	f800283a 	ret

08001820 <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize )
{
 8001820:	defff804 	addi	sp,sp,-32
 8001824:	dfc00715 	stw	ra,28(sp)
 8001828:	df000615 	stw	fp,24(sp)
 800182c:	df000604 	addi	fp,sp,24
 8001830:	2011883a 	mov	r8,r4
 8001834:	2809883a 	mov	r4,r5
 8001838:	3007883a 	mov	r3,r6
 800183c:	e1fffe15 	stw	r7,-8(fp)
 8001840:	e0800217 	ldw	r2,8(fp)
 8001844:	e23ffb05 	stb	r8,-20(fp)
 8001848:	e13ffc05 	stb	r4,-16(fp)
 800184c:	e0fffd0d 	sth	r3,-12(fp)
 8001850:	e0bfff05 	stb	r2,-4(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
 8001854:	e03ffa0d 	sth	zero,-24(fp)
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
 8001858:	e0fffb03 	ldbu	r3,-20(fp)
 800185c:	008200b4 	movhi	r2,2050
 8001860:	10b09904 	addi	r2,r2,-15772
 8001864:	180690fa 	slli	r3,r3,3
 8001868:	10c5883a 	add	r2,r2,r3
 800186c:	10c00017 	ldw	r3,0(r2)
 8001870:	e0bffc03 	ldbu	r2,-16(fp)
 8001874:	100490fa 	slli	r2,r2,3
 8001878:	1885883a 	add	r2,r3,r2
 800187c:	10800183 	ldbu	r2,6(r2)
 8001880:	10803fcc 	andi	r2,r2,255
 8001884:	100b883a 	mov	r5,r2
 8001888:	01003a04 	movi	r4,232
 800188c:	8000c980 	call	8000c98 <MAXreg_wr>
    while( 1 ) { // use a 'return' to exit this loop
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
 8001890:	e0bffc03 	ldbu	r2,-16(fp)
 8001894:	100b883a 	mov	r5,r2
 8001898:	0009883a 	mov	r4,zero
 800189c:	80016a40 	call	80016a4 <XferDispatchPkt>
 80018a0:	e0bffa85 	stb	r2,-22(fp)
        if( rcode ) {
 80018a4:	e0bffa83 	ldbu	r2,-22(fp)
 80018a8:	10000226 	beq	r2,zero,80018b4 <XferInTransfer+0x94>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
 80018ac:	e0bffa83 	ldbu	r2,-22(fp)
 80018b0:	00003a06 	br	800199c <XferInTransfer+0x17c>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
 80018b4:	01003204 	movi	r4,200
 80018b8:	8000e940 	call	8000e94 <MAXreg_rd>
 80018bc:	10803fcc 	andi	r2,r2,255
 80018c0:	1080010c 	andi	r2,r2,4
 80018c4:	1000021e 	bne	r2,zero,80018d0 <XferInTransfer+0xb0>
            return ( 0xf0 );                            //receive error
 80018c8:	00bffc04 	movi	r2,-16
 80018cc:	00003306 	br	800199c <XferInTransfer+0x17c>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
 80018d0:	01000c04 	movi	r4,48
 80018d4:	8000e940 	call	8000e94 <MAXreg_rd>
 80018d8:	e0bffac5 	stb	r2,-21(fp)
        //printf ("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
 80018dc:	e0bffac3 	ldbu	r2,-21(fp)
 80018e0:	e1bffe17 	ldw	r6,-8(fp)
 80018e4:	100b883a 	mov	r5,r2
 80018e8:	01000204 	movi	r4,8
 80018ec:	8000f140 	call	8000f14 <MAXbytes_rd>
 80018f0:	e0bffe15 	stw	r2,-8(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
 80018f4:	01400104 	movi	r5,4
 80018f8:	01003204 	movi	r4,200
 80018fc:	8000c980 	call	8000c98 <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
 8001900:	e0fffac3 	ldbu	r3,-21(fp)
 8001904:	e0bffa0b 	ldhu	r2,-24(fp)
 8001908:	1885883a 	add	r2,r3,r2
 800190c:	e0bffa0d 	sth	r2,-24(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
 8001910:	e0fffac3 	ldbu	r3,-21(fp)
 8001914:	e0bfff03 	ldbu	r2,-4(fp)
 8001918:	18800336 	bltu	r3,r2,8001928 <XferInTransfer+0x108>
 800191c:	e0fffa0b 	ldhu	r3,-24(fp)
 8001920:	e0bffd0b 	ldhu	r2,-12(fp)
 8001924:	18bfda36 	bltu	r3,r2,8001890 <XferInTransfer+0x70>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
 8001928:	01003e04 	movi	r4,248
 800192c:	8000e940 	call	8000e94 <MAXreg_rd>
 8001930:	10803fcc 	andi	r2,r2,255
 8001934:	1080040c 	andi	r2,r2,16
 8001938:	10000c26 	beq	r2,zero,800196c <XferInTransfer+0x14c>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 800193c:	e0fffb03 	ldbu	r3,-20(fp)
 8001940:	008200b4 	movhi	r2,2050
 8001944:	10b09904 	addi	r2,r2,-15772
 8001948:	180690fa 	slli	r3,r3,3
 800194c:	10c5883a 	add	r2,r2,r3
 8001950:	10c00017 	ldw	r3,0(r2)
 8001954:	e0bffc03 	ldbu	r2,-16(fp)
 8001958:	100490fa 	slli	r2,r2,3
 800195c:	1885883a 	add	r2,r3,r2
 8001960:	00c00804 	movi	r3,32
 8001964:	10c00185 	stb	r3,6(r2)
 8001968:	00000b06 	br	8001998 <XferInTransfer+0x178>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
 800196c:	e0fffb03 	ldbu	r3,-20(fp)
 8001970:	008200b4 	movhi	r2,2050
 8001974:	10b09904 	addi	r2,r2,-15772
 8001978:	180690fa 	slli	r3,r3,3
 800197c:	10c5883a 	add	r2,r2,r3
 8001980:	10c00017 	ldw	r3,0(r2)
 8001984:	e0bffc03 	ldbu	r2,-16(fp)
 8001988:	100490fa 	slli	r2,r2,3
 800198c:	1885883a 	add	r2,r3,r2
 8001990:	00c00404 	movi	r3,16
 8001994:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
 8001998:	0005883a 	mov	r2,zero
        }
  }//while( 1 )
}
 800199c:	e037883a 	mov	sp,fp
 80019a0:	dfc00117 	ldw	ra,4(sp)
 80019a4:	df000017 	ldw	fp,0(sp)
 80019a8:	dec00204 	addi	sp,sp,8
 80019ac:	f800283a 	ret

080019b0 <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
 80019b0:	defffe04 	addi	sp,sp,-8
 80019b4:	df000115 	stw	fp,4(sp)
 80019b8:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 80019bc:	e03fff05 	stb	zero,-4(fp)
 80019c0:	00001006 	br	8001a04 <USB_init+0x54>
        devtable[ i ].epinfo = NULL;       //clear device table
 80019c4:	e0ffff03 	ldbu	r3,-4(fp)
 80019c8:	008200b4 	movhi	r2,2050
 80019cc:	10b09904 	addi	r2,r2,-15772
 80019d0:	180690fa 	slli	r3,r3,3
 80019d4:	10c5883a 	add	r2,r2,r3
 80019d8:	10000015 	stw	zero,0(r2)
        devtable[ i ].devclass = 0;
 80019dc:	e0ffff03 	ldbu	r3,-4(fp)
 80019e0:	008200b4 	movhi	r2,2050
 80019e4:	10b09904 	addi	r2,r2,-15772
 80019e8:	180690fa 	slli	r3,r3,3
 80019ec:	10c5883a 	add	r2,r2,r3
 80019f0:	10800104 	addi	r2,r2,4
 80019f4:	10000005 	stb	zero,0(r2)
}
/* initialization of USB data structures */
void USB_init( void )
{
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 80019f8:	e0bfff03 	ldbu	r2,-4(fp)
 80019fc:	10800044 	addi	r2,r2,1
 8001a00:	e0bfff05 	stb	r2,-4(fp)
 8001a04:	e0bfff03 	ldbu	r2,-4(fp)
 8001a08:	10800270 	cmpltui	r2,r2,9
 8001a0c:	103fed1e 	bne	r2,zero,80019c4 <USB_init+0x14>
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
 8001a10:	008200b4 	movhi	r2,2050
 8001a14:	10b09904 	addi	r2,r2,-15772
 8001a18:	d0e6fe04 	addi	r3,gp,-25608
 8001a1c:	10c00015 	stw	r3,0(r2)
    dev0ep.MaxPktSize = 0;
 8001a20:	d026fe8d 	sth	zero,-25606(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
 8001a24:	00801004 	movi	r2,64
 8001a28:	d0a6ff45 	stb	r2,-25603(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
 8001a2c:	00800404 	movi	r2,16
 8001a30:	d0a6ff85 	stb	r2,-25602(gp)
}
 8001a34:	0001883a 	nop
 8001a38:	e037883a 	mov	sp,fp
 8001a3c:	df000017 	ldw	fp,0(sp)
 8001a40:	dec00104 	addi	sp,sp,4
 8001a44:	f800283a 	ret

08001a48 <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
 8001a48:	deffb204 	addi	sp,sp,-312
 8001a4c:	dfc04d15 	stw	ra,308(sp)
 8001a50:	df004c15 	stw	fp,304(sp)
 8001a54:	dc004b15 	stw	r16,300(sp)
 8001a58:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 8001a5c:	d0a00203 	ldbu	r2,-32760(gp)
 8001a60:	10803fcc 	andi	r2,r2,255
 8001a64:	10803c0c 	andi	r2,r2,240
 8001a68:	10c00820 	cmpeqi	r3,r2,32
 8001a6c:	1801121e 	bne	r3,zero,8001eb8 <USB_Task+0x470>
 8001a70:	10c00848 	cmpgei	r3,r2,33
 8001a74:	1800041e 	bne	r3,zero,8001a88 <USB_Task+0x40>
 8001a78:	10000a26 	beq	r2,zero,8001aa4 <USB_Task+0x5c>
 8001a7c:	10800420 	cmpeqi	r2,r2,16
 8001a80:	10001b1e 	bne	r2,zero,8001af0 <USB_Task+0xa8>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 8001a84:	00017a06 	br	8002070 <USB_Task+0x628>
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 8001a88:	10c01020 	cmpeqi	r3,r2,64
 8001a8c:	18016f1e 	bne	r3,zero,800204c <USB_Task+0x604>
 8001a90:	10c03fe0 	cmpeqi	r3,r2,255
 8001a94:	18016f1e 	bne	r3,zero,8002054 <USB_Task+0x60c>
 8001a98:	10800c20 	cmpeqi	r2,r2,48
 8001a9c:	1001441e 	bne	r2,zero,8001fb0 <USB_Task+0x568>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 8001aa0:	00017306 	br	8002070 <USB_Task+0x628>
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
 8001aa4:	d0a00203 	ldbu	r2,-32760(gp)
 8001aa8:	10803fcc 	andi	r2,r2,255
 8001aac:	10c000e0 	cmpeqi	r3,r2,3
 8001ab0:	1800091e 	bne	r3,zero,8001ad8 <USB_Task+0x90>
 8001ab4:	10c00120 	cmpeqi	r3,r2,4
 8001ab8:	18000b1e 	bne	r3,zero,8001ae8 <USB_Task+0xa0>
 8001abc:	10800060 	cmpeqi	r2,r2,1
 8001ac0:	1000011e 	bne	r2,zero,8001ac8 <USB_Task+0x80>
                    break;
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 8001ac4:	00016a06 	br	8002070 <USB_Task+0x628>
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
                case( USB_DETACHED_SUBSTATE_INITIALIZE ):
                    /* cleanup device data structures */
                    USB_init();
 8001ac8:	80019b00 	call	80019b0 <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 8001acc:	008000c4 	movi	r2,3
 8001ad0:	d0a00205 	stb	r2,-32760(gp)
                    break;
 8001ad4:	00000506 	br	8001aec <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE ):
                    /* Do nothing */
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
 8001ad8:	01400104 	movi	r5,4
 8001adc:	01003a04 	movi	r4,232
 8001ae0:	8000c980 	call	8000c98 <MAXreg_wr>
                    break;
 8001ae4:	00000106 	br	8001aec <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
 8001ae8:	0001883a 	nop
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 8001aec:	00016006 	br	8002070 <USB_Task+0x628>
            /**/
        case( USB_STATE_ATTACHED ):                     //prepare for enumeration
            switch( usb_task_state ) {
 8001af0:	d0a00203 	ldbu	r2,-32760(gp)
 8001af4:	10803fcc 	andi	r2,r2,255
 8001af8:	10bffc04 	addi	r2,r2,-16
 8001afc:	10c001a8 	cmpgeui	r3,r2,6
 8001b00:	1801561e 	bne	r3,zero,800205c <USB_Task+0x614>
 8001b04:	100690ba 	slli	r3,r2,2
 8001b08:	00820034 	movhi	r2,2048
 8001b0c:	1086c704 	addi	r2,r2,6940
 8001b10:	1885883a 	add	r2,r3,r2
 8001b14:	10800017 	ldw	r2,0(r2)
 8001b18:	1000683a 	jmp	r2
 8001b1c:	08001b34 	orhi	zero,at,108
 8001b20:	08001b6c 	andhi	zero,at,109
 8001b24:	08001ba8 	cmpgeui	zero,at,110
 8001b28:	08001bcc 	andi	zero,at,111
 8001b2c:	08001c0c 	andi	zero,at,112
 8001b30:	08001c20 	cmpeqi	zero,at,112
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8001b34:	d0a73b17 	ldw	r2,-25364(gp)
                case( USB_STATE_ATTACHED ):
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
 8001b38:	0140fa04 	movi	r5,1000
 8001b3c:	1009883a 	mov	r4,r2
 8001b40:	8007e400 	call	8007e40 <__mulsi3>
 8001b44:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8001b48:	d0a73a17 	ldw	r2,-25368(gp)
 8001b4c:	100b883a 	mov	r5,r2
 8001b50:	1809883a 	mov	r4,r3
 8001b54:	8007d840 	call	8007d84 <__udivsi3>
 8001b58:	10803204 	addi	r2,r2,200
 8001b5c:	d0a70115 	stw	r2,-25596(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 8001b60:	00800444 	movi	r2,17
 8001b64:	d0a00205 	stb	r2,-32760(gp)
                    break;//case( USB_STATE_ATTACHED )
 8001b68:	0000d206 	br	8001eb4 <USB_Task+0x46c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8001b6c:	d0a73b17 	ldw	r2,-25364(gp)
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
 8001b70:	0140fa04 	movi	r5,1000
 8001b74:	1009883a 	mov	r4,r2
 8001b78:	8007e400 	call	8007e40 <__mulsi3>
 8001b7c:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8001b80:	d0a73a17 	ldw	r2,-25368(gp)
 8001b84:	100b883a 	mov	r5,r2
 8001b88:	1809883a 	mov	r4,r3
 8001b8c:	8007d840 	call	8007d84 <__udivsi3>
 8001b90:	1007883a 	mov	r3,r2
 8001b94:	d0a70117 	ldw	r2,-25596(gp)
 8001b98:	10c0c32e 	bgeu	r2,r3,8001ea8 <USB_Task+0x460>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 8001b9c:	00800484 	movi	r2,18
 8001ba0:	d0a00205 	stb	r2,-32760(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 8001ba4:	0000c006 	br	8001ea8 <USB_Task+0x460>
                case( USB_ATTACHED_SUBSTATE_RESET_DEVICE ):
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
 8001ba8:	01400044 	movi	r5,1
 8001bac:	01003204 	movi	r4,200
 8001bb0:	8000c980 	call	8000c98 <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
 8001bb4:	01400044 	movi	r5,1
 8001bb8:	01003a04 	movi	r4,232
 8001bbc:	8000c980 	call	8000c98 <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 8001bc0:	008004c4 	movi	r2,19
 8001bc4:	d0a00205 	stb	r2,-32760(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
 8001bc8:	0000ba06 	br	8001eb4 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE ):                  //wait for bus reset and first SOF
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
 8001bcc:	01003a04 	movi	r4,232
 8001bd0:	8000e940 	call	8000e94 <MAXreg_rd>
 8001bd4:	10803fcc 	andi	r2,r2,255
 8001bd8:	1080004c 	andi	r2,r2,1
 8001bdc:	1000b41e 	bne	r2,zero,8001eb0 <USB_Task+0x468>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
 8001be0:	01003604 	movi	r4,216
 8001be4:	8000e940 	call	8000e94 <MAXreg_rd>
 8001be8:	10800214 	ori	r2,r2,8
 8001bec:	e0bfb945 	stb	r2,-283(fp)
                        MAXreg_wr( rMODE, tmpdata );
 8001bf0:	e0bfb943 	ldbu	r2,-283(fp)
 8001bf4:	100b883a 	mov	r5,r2
 8001bf8:	01003604 	movi	r4,216
 8001bfc:	8000c980 	call	8000c98 <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 8001c00:	00800504 	movi	r2,20
 8001c04:	d0a00205 	stb	r2,-32760(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 8001c08:	0000a906 	br	8001eb0 <USB_Task+0x468>
                case( USB_ATTACHED_SUBSTATE_WAIT_SOF ):
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
 8001c0c:	01003204 	movi	r4,200
 8001c10:	8000e940 	call	8000e94 <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
 8001c14:	00800544 	movi	r2,21
 8001c18:	d0a00205 	stb	r2,-32760(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
 8001c1c:	0000a506 	br	8001eb4 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):   //send request for first 8 bytes of device descriptor
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
 8001c20:	008200b4 	movhi	r2,2050
 8001c24:	10b09904 	addi	r2,r2,-15772
 8001c28:	10800017 	ldw	r2,0(r2)
 8001c2c:	00c00204 	movi	r3,8
 8001c30:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
 8001c34:	e0bfba04 	addi	r2,fp,-280
 8001c38:	d8800415 	stw	r2,16(sp)
 8001c3c:	00800204 	movi	r2,8
 8001c40:	d8800315 	stw	r2,12(sp)
 8001c44:	d8000215 	stw	zero,8(sp)
 8001c48:	00800044 	movi	r2,1
 8001c4c:	d8800115 	stw	r2,4(sp)
 8001c50:	d8000015 	stw	zero,0(sp)
 8001c54:	01c00184 	movi	r7,6
 8001c58:	01802004 	movi	r6,128
 8001c5c:	000b883a 	mov	r5,zero
 8001c60:	0009883a 	mov	r4,zero
 8001c64:	80013fc0 	call	80013fc <XferCtrlReq>
 8001c68:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 8001c6c:	e0bfb983 	ldbu	r2,-282(fp)
 8001c70:	1000861e 	bne	r2,zero,8001e8c <USB_Task+0x444>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
 8001c74:	008200b4 	movhi	r2,2050
 8001c78:	10b09904 	addi	r2,r2,-15772
 8001c7c:	10800017 	ldw	r2,0(r2)
 8001c80:	e0ffbbc3 	ldbu	r3,-273(fp)
 8001c84:	18c03fcc 	andi	r3,r3,255
 8001c88:	10c0008d 	sth	r3,2(r2)

                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
 8001c8c:	e0bfba03 	ldbu	r2,-280(fp)
 8001c90:	10803fcc 	andi	r2,r2,255
 8001c94:	e0ffba04 	addi	r3,fp,-280
 8001c98:	d8c00415 	stw	r3,16(sp)
 8001c9c:	d8800315 	stw	r2,12(sp)
 8001ca0:	d8000215 	stw	zero,8(sp)
 8001ca4:	00800044 	movi	r2,1
 8001ca8:	d8800115 	stw	r2,4(sp)
 8001cac:	d8000015 	stw	zero,0(sp)
 8001cb0:	01c00184 	movi	r7,6
 8001cb4:	01802004 	movi	r6,128
 8001cb8:	000b883a 	mov	r5,zero
 8001cbc:	0009883a 	mov	r4,zero
 8001cc0:	80013fc0 	call	80013fc <XferCtrlReq>
 8001cc4:	e0bfb985 	stb	r2,-282(fp)
                        //pull the string descriptor for the product if it exists
            			//hackish, store this somewhere
                        if (buf.iManufacturer != 0)
 8001cc8:	e0bfbd83 	ldbu	r2,-266(fp)
 8001ccc:	10803fcc 	andi	r2,r2,255
 8001cd0:	10003426 	beq	r2,zero,8001da4 <USB_Task+0x35c>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 8001cd4:	e0bfbd83 	ldbu	r2,-266(fp)
 8001cd8:	10803fcc 	andi	r2,r2,255
 8001cdc:	e0ffbe84 	addi	r3,fp,-262
 8001ce0:	d8c00415 	stw	r3,16(sp)
 8001ce4:	00c00084 	movi	r3,2
 8001ce8:	d8c00315 	stw	r3,12(sp)
 8001cec:	00c10244 	movi	r3,1033
 8001cf0:	d8c00215 	stw	r3,8(sp)
 8001cf4:	00c000c4 	movi	r3,3
 8001cf8:	d8c00115 	stw	r3,4(sp)
 8001cfc:	d8800015 	stw	r2,0(sp)
 8001d00:	01c00184 	movi	r7,6
 8001d04:	01802004 	movi	r6,128
 8001d08:	000b883a 	mov	r5,zero
 8001d0c:	0009883a 	mov	r4,zero
 8001d10:	80013fc0 	call	80013fc <XferCtrlReq>
 8001d14:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 8001d18:	e0bfbd83 	ldbu	r2,-266(fp)
 8001d1c:	10803fcc 	andi	r2,r2,255
 8001d20:	e0ffbe83 	ldbu	r3,-262(fp)
 8001d24:	18c03fcc 	andi	r3,r3,255
 8001d28:	e13fbe84 	addi	r4,fp,-262
 8001d2c:	d9000415 	stw	r4,16(sp)
 8001d30:	d8c00315 	stw	r3,12(sp)
 8001d34:	00c10244 	movi	r3,1033
 8001d38:	d8c00215 	stw	r3,8(sp)
 8001d3c:	00c000c4 	movi	r3,3
 8001d40:	d8c00115 	stw	r3,4(sp)
 8001d44:	d8800015 	stw	r2,0(sp)
 8001d48:	01c00184 	movi	r7,6
 8001d4c:	01802004 	movi	r6,128
 8001d50:	000b883a 	mov	r5,zero
 8001d54:	0009883a 	mov	r4,zero
 8001d58:	80013fc0 	call	80013fc <XferCtrlReq>
 8001d5c:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 8001d60:	e0bfbd83 	ldbu	r2,-266(fp)
 8001d64:	14003fcc 	andi	r16,r2,255
 8001d68:	e0bfbe83 	ldbu	r2,-262(fp)
 8001d6c:	10803fcc 	andi	r2,r2,255
 8001d70:	1004d07a 	srli	r2,r2,1
 8001d74:	10bfffc4 	addi	r2,r2,-1
 8001d78:	10c03fcc 	andi	r3,r2,255
 8001d7c:	e0bfbe84 	addi	r2,fp,-262
 8001d80:	10800084 	addi	r2,r2,2
 8001d84:	180b883a 	mov	r5,r3
 8001d88:	1009883a 	mov	r4,r2
 8001d8c:	80022100 	call	8002210 <ConvUTF8ToStr>
 8001d90:	100d883a 	mov	r6,r2
 8001d94:	800b883a 	mov	r5,r16
 8001d98:	010200b4 	movhi	r4,2050
 8001d9c:	21204404 	addi	r4,r4,-32496
 8001da0:	80082440 	call	8008244 <printf>
                		}
                		if (buf.iProduct != 0)
 8001da4:	e0bfbdc3 	ldbu	r2,-265(fp)
 8001da8:	10803fcc 	andi	r2,r2,255
 8001dac:	10003426 	beq	r2,zero,8001e80 <USB_Task+0x438>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 8001db0:	e0bfbdc3 	ldbu	r2,-265(fp)
 8001db4:	10803fcc 	andi	r2,r2,255
 8001db8:	e0ffbe84 	addi	r3,fp,-262
 8001dbc:	d8c00415 	stw	r3,16(sp)
 8001dc0:	00c00084 	movi	r3,2
 8001dc4:	d8c00315 	stw	r3,12(sp)
 8001dc8:	00c10244 	movi	r3,1033
 8001dcc:	d8c00215 	stw	r3,8(sp)
 8001dd0:	00c000c4 	movi	r3,3
 8001dd4:	d8c00115 	stw	r3,4(sp)
 8001dd8:	d8800015 	stw	r2,0(sp)
 8001ddc:	01c00184 	movi	r7,6
 8001de0:	01802004 	movi	r6,128
 8001de4:	000b883a 	mov	r5,zero
 8001de8:	0009883a 	mov	r4,zero
 8001dec:	80013fc0 	call	80013fc <XferCtrlReq>
 8001df0:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 8001df4:	e0bfbdc3 	ldbu	r2,-265(fp)
 8001df8:	10803fcc 	andi	r2,r2,255
 8001dfc:	e0ffbe83 	ldbu	r3,-262(fp)
 8001e00:	18c03fcc 	andi	r3,r3,255
 8001e04:	e13fbe84 	addi	r4,fp,-262
 8001e08:	d9000415 	stw	r4,16(sp)
 8001e0c:	d8c00315 	stw	r3,12(sp)
 8001e10:	00c10244 	movi	r3,1033
 8001e14:	d8c00215 	stw	r3,8(sp)
 8001e18:	00c000c4 	movi	r3,3
 8001e1c:	d8c00115 	stw	r3,4(sp)
 8001e20:	d8800015 	stw	r2,0(sp)
 8001e24:	01c00184 	movi	r7,6
 8001e28:	01802004 	movi	r6,128
 8001e2c:	000b883a 	mov	r5,zero
 8001e30:	0009883a 	mov	r4,zero
 8001e34:	80013fc0 	call	80013fc <XferCtrlReq>
 8001e38:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 8001e3c:	e0bfbdc3 	ldbu	r2,-265(fp)
 8001e40:	14003fcc 	andi	r16,r2,255
 8001e44:	e0bfbe83 	ldbu	r2,-262(fp)
 8001e48:	10803fcc 	andi	r2,r2,255
 8001e4c:	1004d07a 	srli	r2,r2,1
 8001e50:	10bfffc4 	addi	r2,r2,-1
 8001e54:	10c03fcc 	andi	r3,r2,255
 8001e58:	e0bfbe84 	addi	r2,fp,-262
 8001e5c:	10800084 	addi	r2,r2,2
 8001e60:	180b883a 	mov	r5,r3
 8001e64:	1009883a 	mov	r4,r2
 8001e68:	80022100 	call	8002210 <ConvUTF8ToStr>
 8001e6c:	100d883a 	mov	r6,r2
 8001e70:	800b883a 	mov	r5,r16
 8001e74:	010200b4 	movhi	r4,2050
 8001e78:	21204a04 	addi	r4,r4,-32472
 8001e7c:	80082440 	call	8008244 <printf>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;
 8001e80:	00800804 	movi	r2,32
 8001e84:	d0a00205 	stb	r2,-32760(gp)
                    else {
                        usb_error = rcode;
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 8001e88:	00000a06 	br	8001eb4 <USB_Task+0x46c>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;

                    }
                    else {
                        usb_error = rcode;
 8001e8c:	e0bfb983 	ldbu	r2,-282(fp)
 8001e90:	d0a70245 	stb	r2,-25591(gp)
                        last_usb_task_state = usb_task_state;
 8001e94:	d0a00203 	ldbu	r2,-32760(gp)
 8001e98:	d0a70005 	stb	r2,-25600(gp)
                        usb_task_state = USB_STATE_ERROR;
 8001e9c:	00bfffc4 	movi	r2,-1
 8001ea0:	d0a00205 	stb	r2,-32760(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 8001ea4:	00000306 	br	8001eb4 <USB_Task+0x46c>
                    break;//case( USB_STATE_ATTACHED )
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 8001ea8:	0001883a 	nop
 8001eac:	00006b06 	br	800205c <USB_Task+0x614>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
                        MAXreg_wr( rMODE, tmpdata );
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 8001eb0:	0001883a 	nop
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 8001eb4:	00006906 	br	800205c <USB_Task+0x614>
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 8001eb8:	00800044 	movi	r2,1
 8001ebc:	e0bfb905 	stb	r2,-284(fp)
 8001ec0:	00002d06 	br	8001f78 <USB_Task+0x530>
                if( devtable[ i ].epinfo == NULL ) {
 8001ec4:	e0ffb903 	ldbu	r3,-284(fp)
 8001ec8:	008200b4 	movhi	r2,2050
 8001ecc:	10b09904 	addi	r2,r2,-15772
 8001ed0:	180690fa 	slli	r3,r3,3
 8001ed4:	10c5883a 	add	r2,r2,r3
 8001ed8:	10800017 	ldw	r2,0(r2)
 8001edc:	1000231e 	bne	r2,zero,8001f6c <USB_Task+0x524>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
 8001ee0:	e13fb903 	ldbu	r4,-284(fp)
 8001ee4:	008200b4 	movhi	r2,2050
 8001ee8:	10b09904 	addi	r2,r2,-15772
 8001eec:	10c00017 	ldw	r3,0(r2)
 8001ef0:	008200b4 	movhi	r2,2050
 8001ef4:	10b09904 	addi	r2,r2,-15772
 8001ef8:	200890fa 	slli	r4,r4,3
 8001efc:	1105883a 	add	r2,r2,r4
 8001f00:	10c00015 	stw	r3,0(r2)
                    //devtable[ i ].epinfo->MaxPktSize = devtable[ 0 ].epinfo->MaxPktSize;  //copy uninitialized device record to have correct MaxPktSize
                    rcode = XferSetAddr( 0, 0, i );
 8001f04:	e0bfb903 	ldbu	r2,-284(fp)
 8001f08:	d8000415 	stw	zero,16(sp)
 8001f0c:	d8000315 	stw	zero,12(sp)
 8001f10:	d8000215 	stw	zero,8(sp)
 8001f14:	d8000115 	stw	zero,4(sp)
 8001f18:	d8800015 	stw	r2,0(sp)
 8001f1c:	01c00144 	movi	r7,5
 8001f20:	000d883a 	mov	r6,zero
 8001f24:	000b883a 	mov	r5,zero
 8001f28:	0009883a 	mov	r4,zero
 8001f2c:	80013fc0 	call	80013fc <XferCtrlReq>
 8001f30:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 8001f34:	e0bfb983 	ldbu	r2,-282(fp)
 8001f38:	1000051e 	bne	r2,zero,8001f50 <USB_Task+0x508>
                        tmp_addr = i;
 8001f3c:	e0bfb903 	ldbu	r2,-284(fp)
 8001f40:	d0a70205 	stb	r2,-25592(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
 8001f44:	00800c04 	movi	r2,48
 8001f48:	d0a00205 	stb	r2,-32760(gp)
                    else {
                        usb_error = rcode;          //set address error
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 8001f4c:	00000d06 	br	8001f84 <USB_Task+0x53c>
                    if( rcode == 0 ) {
                        tmp_addr = i;
                        usb_task_state = USB_STATE_CONFIGURING;
                    }
                    else {
                        usb_error = rcode;          //set address error
 8001f50:	e0bfb983 	ldbu	r2,-282(fp)
 8001f54:	d0a70245 	stb	r2,-25591(gp)
                        last_usb_task_state = usb_task_state;
 8001f58:	d0a00203 	ldbu	r2,-32760(gp)
 8001f5c:	d0a70005 	stb	r2,-25600(gp)
                        usb_task_state = USB_STATE_ERROR;
 8001f60:	00bfffc4 	movi	r2,-1
 8001f64:	d0a00205 	stb	r2,-32760(gp)
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 8001f68:	00000606 	br	8001f84 <USB_Task+0x53c>
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 8001f6c:	e0bfb903 	ldbu	r2,-284(fp)
 8001f70:	10800044 	addi	r2,r2,1
 8001f74:	e0bfb905 	stb	r2,-284(fp)
 8001f78:	e0bfb903 	ldbu	r2,-284(fp)
 8001f7c:	10800230 	cmpltui	r2,r2,8
 8001f80:	103fd01e 	bne	r2,zero,8001ec4 <USB_Task+0x47c>
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
                }
            }
            if( usb_task_state == USB_STATE_ADDRESSING ) {
 8001f84:	d0a00203 	ldbu	r2,-32760(gp)
 8001f88:	10803fcc 	andi	r2,r2,255
 8001f8c:	10800818 	cmpnei	r2,r2,32
 8001f90:	1000341e 	bne	r2,zero,8002064 <USB_Task+0x61c>
                usb_error = 0xfe;
 8001f94:	00bfff84 	movi	r2,-2
 8001f98:	d0a70245 	stb	r2,-25591(gp)
                last_usb_task_state = usb_task_state;
 8001f9c:	d0a00203 	ldbu	r2,-32760(gp)
 8001fa0:	d0a70005 	stb	r2,-25600(gp)
                usb_task_state = USB_STATE_ERROR;
 8001fa4:	00bfffc4 	movi	r2,-1
 8001fa8:	d0a00205 	stb	r2,-32760(gp)
            }
            break;//case ( USB_STATE_ADDRESSING )
 8001fac:	00002d06 	br	8002064 <USB_Task+0x61c>
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 8001fb0:	e03fb905 	stb	zero,-284(fp)
 8001fb4:	00001706 	br	8002014 <USB_Task+0x5cc>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
 8001fb8:	e0bfb903 	ldbu	r2,-284(fp)
 8001fbc:	040200b4 	movhi	r16,2050
 8001fc0:	84218904 	addi	r16,r16,-31196
 8001fc4:	01400304 	movi	r5,12
 8001fc8:	1009883a 	mov	r4,r2
 8001fcc:	8007e400 	call	8007e40 <__mulsi3>
 8001fd0:	8085883a 	add	r2,r16,r2
 8001fd4:	10800017 	ldw	r2,0(r2)
 8001fd8:	d0e70203 	ldbu	r3,-25592(gp)
 8001fdc:	18c03fcc 	andi	r3,r3,255
 8001fe0:	000b883a 	mov	r5,zero
 8001fe4:	1809883a 	mov	r4,r3
 8001fe8:	103ee83a 	callr	r2
 8001fec:	e0bfb985 	stb	r2,-282(fp)
                if( rcode == TRUE ) {
 8001ff0:	e0bfb983 	ldbu	r2,-282(fp)
 8001ff4:	10800058 	cmpnei	r2,r2,1
 8001ff8:	1000031e 	bne	r2,zero,8002008 <USB_Task+0x5c0>
			        usb_task_state = USB_STATE_RUNNING;
 8001ffc:	00801004 	movi	r2,64
 8002000:	d0a00205 	stb	r2,-32760(gp)
                    break;
 8002004:	00000606 	br	8002020 <USB_Task+0x5d8>
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 8002008:	e0bfb903 	ldbu	r2,-284(fp)
 800200c:	10800044 	addi	r2,r2,1
 8002010:	e0bfb905 	stb	r2,-284(fp)
 8002014:	e0bfb903 	ldbu	r2,-284(fp)
 8002018:	10800130 	cmpltui	r2,r2,4
 800201c:	103fe61e 	bne	r2,zero,8001fb8 <USB_Task+0x570>
                if( rcode == TRUE ) {
			        usb_task_state = USB_STATE_RUNNING;
                    break;
                }
            }
            if( usb_task_state == USB_STATE_CONFIGURING ) {
 8002020:	d0a00203 	ldbu	r2,-32760(gp)
 8002024:	10803fcc 	andi	r2,r2,255
 8002028:	10800c18 	cmpnei	r2,r2,48
 800202c:	10000f1e 	bne	r2,zero,800206c <USB_Task+0x624>
                usb_error = 0xfd;
 8002030:	00bfff44 	movi	r2,-3
 8002034:	d0a70245 	stb	r2,-25591(gp)
                last_usb_task_state = usb_task_state;
 8002038:	d0a00203 	ldbu	r2,-32760(gp)
 800203c:	d0a70005 	stb	r2,-25600(gp)
                usb_task_state = USB_STATE_ERROR;
 8002040:	00bfffc4 	movi	r2,-1
 8002044:	d0a00205 	stb	r2,-32760(gp)
            }
            break;//( USB_STATE_CONFIGURING )
 8002048:	00000806 	br	800206c <USB_Task+0x624>
        case( USB_STATE_RUNNING ):
          //vTaskDelay( LED_RATE );
            break;//( USB_STATE_RUNNING )
 800204c:	0001883a 	nop
 8002050:	00000706 	br	8002070 <USB_Task+0x628>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
 8002054:	0001883a 	nop
 8002058:	00000506 	br	8002070 <USB_Task+0x628>
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 800205c:	0001883a 	nop
 8002060:	00000306 	br	8002070 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
                usb_error = 0xfe;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
 8002064:	0001883a 	nop
 8002068:	00000106 	br	8002070 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
                usb_error = 0xfd;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//( USB_STATE_CONFIGURING )
 800206c:	0001883a 	nop
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
    }//switch( usb_task_state & STATE_MASK )
}
 8002070:	0001883a 	nop
 8002074:	e6ffff04 	addi	sp,fp,-4
 8002078:	dfc00217 	ldw	ra,8(sp)
 800207c:	df000117 	ldw	fp,4(sp)
 8002080:	dc000017 	ldw	r16,0(sp)
 8002084:	dec00304 	addi	sp,sp,12
 8002088:	f800283a 	ret

0800208c <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
 800208c:	defffd04 	addi	sp,sp,-12
 8002090:	df000215 	stw	fp,8(sp)
 8002094:	df000204 	addi	fp,sp,8
 8002098:	2005883a 	mov	r2,r4
 800209c:	e17fff15 	stw	r5,-4(fp)
 80020a0:	e0bffe05 	stb	r2,-8(fp)
    return( FALSE );
 80020a4:	0005883a 	mov	r2,zero
}
 80020a8:	e037883a 	mov	sp,fp
 80020ac:	df000017 	ldw	fp,0(sp)
 80020b0:	dec00104 	addi	sp,sp,4
 80020b4:	f800283a 	ret

080020b8 <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 80020b8:	defffb04 	addi	sp,sp,-20
 80020bc:	df000415 	stw	fp,16(sp)
 80020c0:	df000404 	addi	fp,sp,16
 80020c4:	2007883a 	mov	r3,r4
 80020c8:	2805883a 	mov	r2,r5
 80020cc:	e1bffe15 	stw	r6,-8(fp)
 80020d0:	e1ffff15 	stw	r7,-4(fp)
 80020d4:	e0fffc05 	stb	r3,-16(fp)
 80020d8:	e0bffd05 	stb	r2,-12(fp)

	return( FALSE );
 80020dc:	0005883a 	mov	r2,zero

}
 80020e0:	e037883a 	mov	sp,fp
 80020e4:	df000017 	ldw	fp,0(sp)
 80020e8:	dec00104 	addi	sp,sp,4
 80020ec:	f800283a 	ret

080020f0 <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
 80020f0:	defffd04 	addi	sp,sp,-12
 80020f4:	df000215 	stw	fp,8(sp)
 80020f8:	df000204 	addi	fp,sp,8
 80020fc:	2005883a 	mov	r2,r4
 8002100:	e17fff15 	stw	r5,-4(fp)
 8002104:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
 8002108:	0005883a 	mov	r2,zero

}
 800210c:	e037883a 	mov	sp,fp
 8002110:	df000017 	ldw	fp,0(sp)
 8002114:	dec00104 	addi	sp,sp,4
 8002118:	f800283a 	ret

0800211c <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 800211c:	defffb04 	addi	sp,sp,-20
 8002120:	df000415 	stw	fp,16(sp)
 8002124:	df000404 	addi	fp,sp,16
 8002128:	2007883a 	mov	r3,r4
 800212c:	2805883a 	mov	r2,r5
 8002130:	e1bffe15 	stw	r6,-8(fp)
 8002134:	e1ffff15 	stw	r7,-4(fp)
 8002138:	e0fffc05 	stb	r3,-16(fp)
 800213c:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 8002140:	0005883a 	mov	r2,zero
}
 8002144:	e037883a 	mov	sp,fp
 8002148:	df000017 	ldw	fp,0(sp)
 800214c:	dec00104 	addi	sp,sp,4
 8002150:	f800283a 	ret

08002154 <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
 8002154:	defffd04 	addi	sp,sp,-12
 8002158:	df000215 	stw	fp,8(sp)
 800215c:	df000204 	addi	fp,sp,8
 8002160:	2005883a 	mov	r2,r4
 8002164:	e17fff15 	stw	r5,-4(fp)
 8002168:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
 800216c:	0005883a 	mov	r2,zero
}
 8002170:	e037883a 	mov	sp,fp
 8002174:	df000017 	ldw	fp,0(sp)
 8002178:	dec00104 	addi	sp,sp,4
 800217c:	f800283a 	ret

08002180 <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 8002180:	defffb04 	addi	sp,sp,-20
 8002184:	df000415 	stw	fp,16(sp)
 8002188:	df000404 	addi	fp,sp,16
 800218c:	2007883a 	mov	r3,r4
 8002190:	2805883a 	mov	r2,r5
 8002194:	e1bffe15 	stw	r6,-8(fp)
 8002198:	e1ffff15 	stw	r7,-4(fp)
 800219c:	e0fffc05 	stb	r3,-16(fp)
 80021a0:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 80021a4:	0005883a 	mov	r2,zero
}
 80021a8:	e037883a 	mov	sp,fp
 80021ac:	df000017 	ldw	fp,0(sp)
 80021b0:	dec00104 	addi	sp,sp,4
 80021b4:	f800283a 	ret

080021b8 <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
 80021b8:	deffff04 	addi	sp,sp,-4
 80021bc:	df000015 	stw	fp,0(sp)
 80021c0:	d839883a 	mov	fp,sp
    return( usb_task_state );
 80021c4:	d0a00203 	ldbu	r2,-32760(gp)
}
 80021c8:	e037883a 	mov	sp,fp
 80021cc:	df000017 	ldw	fp,0(sp)
 80021d0:	dec00104 	addi	sp,sp,4
 80021d4:	f800283a 	ret

080021d8 <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
 80021d8:	defffe04 	addi	sp,sp,-8
 80021dc:	df000115 	stw	fp,4(sp)
 80021e0:	df000104 	addi	fp,sp,4
 80021e4:	2005883a 	mov	r2,r4
 80021e8:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
 80021ec:	e0bfff03 	ldbu	r2,-4(fp)
 80021f0:	100690fa 	slli	r3,r2,3
 80021f4:	008200b4 	movhi	r2,2050
 80021f8:	10b09904 	addi	r2,r2,-15772
 80021fc:	1885883a 	add	r2,r3,r2
}
 8002200:	e037883a 	mov	sp,fp
 8002204:	df000017 	ldw	fp,0(sp)
 8002208:	dec00104 	addi	sp,sp,4
 800220c:	f800283a 	ret

08002210 <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
 8002210:	defffc04 	addi	sp,sp,-16
 8002214:	df000315 	stw	fp,12(sp)
 8002218:	df000304 	addi	fp,sp,12
 800221c:	e13ffe15 	stw	r4,-8(fp)
 8002220:	2805883a 	mov	r2,r5
 8002224:	e0bfff05 	stb	r2,-4(fp)
	BYTE i;
	for (i = 0; i < length; i++)
 8002228:	e03ffd05 	stb	zero,-12(fp)
 800222c:	00000d06 	br	8002264 <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
 8002230:	e0bffd03 	ldbu	r2,-12(fp)
 8002234:	e0fffe17 	ldw	r3,-8(fp)
 8002238:	1887883a 	add	r3,r3,r2
 800223c:	e0bffd03 	ldbu	r2,-12(fp)
 8002240:	1085883a 	add	r2,r2,r2
 8002244:	1009883a 	mov	r4,r2
 8002248:	e0bffe17 	ldw	r2,-8(fp)
 800224c:	1105883a 	add	r2,r2,r4
 8002250:	10800003 	ldbu	r2,0(r2)
 8002254:	18800005 	stb	r2,0(r3)
}

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
	BYTE i;
	for (i = 0; i < length; i++)
 8002258:	e0bffd03 	ldbu	r2,-12(fp)
 800225c:	10800044 	addi	r2,r2,1
 8002260:	e0bffd05 	stb	r2,-12(fp)
 8002264:	e0fffd03 	ldbu	r3,-12(fp)
 8002268:	e0bfff03 	ldbu	r2,-4(fp)
 800226c:	18bff036 	bltu	r3,r2,8002230 <ConvUTF8ToStr+0x20>
	{
		utf8[i] = utf8[2*i];
	}
	utf8[length] = 0x00;
 8002270:	e0bfff03 	ldbu	r2,-4(fp)
 8002274:	e0fffe17 	ldw	r3,-8(fp)
 8002278:	1885883a 	add	r2,r3,r2
 800227c:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
 8002280:	e0bffe17 	ldw	r2,-8(fp)
}
 8002284:	e037883a 	mov	sp,fp
 8002288:	df000017 	ldw	fp,0(sp)
 800228c:	dec00104 	addi	sp,sp,4
 8002290:	f800283a 	ret

08002294 <_ZN9EtherCard5beginEtPKhh>:
bool EtherCard::using_dhcp = false;
bool EtherCard::persist_tcp_connection = false;
uint16_t EtherCard::delaycnt = 0; //request gateway ARP lookup

uint8_t EtherCard::begin(const uint16_t size, const uint8_t *macaddr,
                         uint8_t csPin) {
 8002294:	defff904 	addi	sp,sp,-28
 8002298:	dfc00615 	stw	ra,24(sp)
 800229c:	df000515 	stw	fp,20(sp)
 80022a0:	df000504 	addi	fp,sp,20
 80022a4:	2007883a 	mov	r3,r4
 80022a8:	e17ffe15 	stw	r5,-8(fp)
 80022ac:	3005883a 	mov	r2,r6
 80022b0:	e0fffd0d 	sth	r3,-12(fp)
 80022b4:	e0bfff05 	stb	r2,-4(fp)
  using_dhcp = true;
 80022b8:	00800044 	movi	r2,1
 80022bc:	d0a70b45 	stb	r2,-25555(gp)
  copyMac(mymac, macaddr);
 80022c0:	e17ffe17 	ldw	r5,-8(fp)
 80022c4:	d12702c4 	addi	r4,gp,-25589
 80022c8:	800793c0 	call	800793c <_ZN9EtherCard7copyMacEPhPKh>
  uint8_t ret = initialize(size, mymac, csPin);
 80022cc:	e0bffd0b 	ldhu	r2,-12(fp)
 80022d0:	e0ffff03 	ldbu	r3,-4(fp)
 80022d4:	180d883a 	mov	r6,r3
 80022d8:	d16702c4 	addi	r5,gp,-25589
 80022dc:	1009883a 	mov	r4,r2
 80022e0:	80040e80 	call	80040e8 <_ZN8ENC28J6010initializeEtPKhh>
 80022e4:	e0bffc05 	stb	r2,-16(fp)
  printf("mymac: ");
 80022e8:	010200b4 	movhi	r4,2050
 80022ec:	21205004 	addi	r4,r4,-32448
 80022f0:	80082440 	call	8008244 <printf>
  for(int i = 0; i < 6; i++)
 80022f4:	e03ffb15 	stw	zero,-20(fp)
 80022f8:	e0bffb17 	ldw	r2,-20(fp)
 80022fc:	10800188 	cmpgei	r2,r2,6
 8002300:	10000d1e 	bne	r2,zero,8002338 <_ZN9EtherCard5beginEtPKhh+0xa4>
	  printf("%x, ", mymac[i]);
 8002304:	e0fffb17 	ldw	r3,-20(fp)
 8002308:	d0a702c4 	addi	r2,gp,-25589
 800230c:	1885883a 	add	r2,r3,r2
 8002310:	10800003 	ldbu	r2,0(r2)
 8002314:	10803fcc 	andi	r2,r2,255
 8002318:	100b883a 	mov	r5,r2
 800231c:	010200b4 	movhi	r4,2050
 8002320:	21205204 	addi	r4,r4,-32440
 8002324:	80082440 	call	8008244 <printf>
                         uint8_t csPin) {
  using_dhcp = true;
  copyMac(mymac, macaddr);
  uint8_t ret = initialize(size, mymac, csPin);
  printf("mymac: ");
  for(int i = 0; i < 6; i++)
 8002328:	e0bffb17 	ldw	r2,-20(fp)
 800232c:	10800044 	addi	r2,r2,1
 8002330:	e0bffb15 	stw	r2,-20(fp)
 8002334:	003ff006 	br	80022f8 <_ZN9EtherCard5beginEtPKhh+0x64>
	  printf("%x, ", mymac[i]);
  printf("\nfinished init (ret: %x)\n", ret);
 8002338:	e0bffc03 	ldbu	r2,-16(fp)
 800233c:	100b883a 	mov	r5,r2
 8002340:	010200b4 	movhi	r4,2050
 8002344:	21205404 	addi	r4,r4,-32432
 8002348:	80082440 	call	8008244 <printf>
  return ret;
 800234c:	e0bffc03 	ldbu	r2,-16(fp)
}
 8002350:	e037883a 	mov	sp,fp
 8002354:	dfc00117 	ldw	ra,4(sp)
 8002358:	df000017 	ldw	fp,0(sp)
 800235c:	dec00204 	addi	sp,sp,8
 8002360:	f800283a 	ret

08002364 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>:

bool EtherCard::staticSetup (const uint8_t* my_ip,
                             const uint8_t* gw_ip,
                             const uint8_t* dns_ip,
                             const uint8_t* mask) {
 8002364:	defffa04 	addi	sp,sp,-24
 8002368:	dfc00515 	stw	ra,20(sp)
 800236c:	df000415 	stw	fp,16(sp)
 8002370:	df000404 	addi	fp,sp,16
 8002374:	e13ffc15 	stw	r4,-16(fp)
 8002378:	e17ffd15 	stw	r5,-12(fp)
 800237c:	e1bffe15 	stw	r6,-8(fp)
 8002380:	e1ffff15 	stw	r7,-4(fp)
    using_dhcp = true;
 8002384:	00800044 	movi	r2,1
 8002388:	d0a70b45 	stb	r2,-25555(gp)

    if (my_ip != 0)
 800238c:	e0bffc17 	ldw	r2,-16(fp)
 8002390:	10000326 	beq	r2,zero,80023a0 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x3c>
        copyIp(myip, my_ip);
 8002394:	e17ffc17 	ldw	r5,-16(fp)
 8002398:	d1270444 	addi	r4,gp,-25583
 800239c:	800797c0 	call	800797c <_ZN9EtherCard6copyIpEPhPKh>
    if (gw_ip != 0)
 80023a0:	e0bffd17 	ldw	r2,-12(fp)
 80023a4:	10000226 	beq	r2,zero,80023b0 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x4c>
        setGwIp(gw_ip);
 80023a8:	e13ffd17 	ldw	r4,-12(fp)
 80023ac:	80063e80 	call	80063e8 <_ZN9EtherCard7setGwIpEPKh>
    if (dns_ip != 0)
 80023b0:	e0bffe17 	ldw	r2,-8(fp)
 80023b4:	10000326 	beq	r2,zero,80023c4 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x60>
        copyIp(dnsip, dns_ip);
 80023b8:	e17ffe17 	ldw	r5,-8(fp)
 80023bc:	d1270944 	addi	r4,gp,-25563
 80023c0:	800797c0 	call	800797c <_ZN9EtherCard6copyIpEPhPKh>
    if(mask != 0)
 80023c4:	e0bfff17 	ldw	r2,-4(fp)
 80023c8:	10000326 	beq	r2,zero,80023d8 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_+0x74>
        copyIp(netmask, mask);
 80023cc:	e17fff17 	ldw	r5,-4(fp)
 80023d0:	d1270544 	addi	r4,gp,-25579
 80023d4:	800797c0 	call	800797c <_ZN9EtherCard6copyIpEPhPKh>
    updateBroadcastAddress();
 80023d8:	800642c0 	call	800642c <_ZN9EtherCard22updateBroadcastAddressEv>
    delaycnt = 0; //request gateway ARP lookup
 80023dc:	d0270c0d 	sth	zero,-25552(gp)
    return true;
 80023e0:	00800044 	movi	r2,1
}
 80023e4:	e037883a 	mov	sp,fp
 80023e8:	dfc00117 	ldw	ra,4(sp)
 80023ec:	df000017 	ldw	fp,0(sp)
 80023f0:	dec00204 	addi	sp,sp,8
 80023f4:	f800283a 	ret

080023f8 <_ZN9EtherCard4wtoaEtPc>:

char* EtherCard::wtoa(uint16_t value, char* ptr)
{
 80023f8:	defffb04 	addi	sp,sp,-20
 80023fc:	dfc00415 	stw	ra,16(sp)
 8002400:	df000315 	stw	fp,12(sp)
 8002404:	df000304 	addi	fp,sp,12
 8002408:	e13ffd15 	stw	r4,-12(fp)
 800240c:	2805883a 	mov	r2,r5
 8002410:	e1bfff15 	stw	r6,-4(fp)
 8002414:	e0bffe0d 	sth	r2,-8(fp)
    if (value > 9)
 8002418:	e0bffe0b 	ldhu	r2,-8(fp)
 800241c:	108002b0 	cmpltui	r2,r2,10
 8002420:	10000a1e 	bne	r2,zero,800244c <_ZN9EtherCard4wtoaEtPc+0x54>
        ptr = wtoa(value / 10, ptr);
 8002424:	e0bffe0b 	ldhu	r2,-8(fp)
 8002428:	01400284 	movi	r5,10
 800242c:	1009883a 	mov	r4,r2
 8002430:	8007d840 	call	8007d84 <__udivsi3>
 8002434:	10bfffcc 	andi	r2,r2,65535
 8002438:	e1bfff17 	ldw	r6,-4(fp)
 800243c:	100b883a 	mov	r5,r2
 8002440:	e13ffd17 	ldw	r4,-12(fp)
 8002444:	80023f80 	call	80023f8 <_ZN9EtherCard4wtoaEtPc>
 8002448:	e0bfff15 	stw	r2,-4(fp)
    *ptr = '0' + value % 10;
 800244c:	e0bffe0b 	ldhu	r2,-8(fp)
 8002450:	01400284 	movi	r5,10
 8002454:	1009883a 	mov	r4,r2
 8002458:	8007de80 	call	8007de8 <__umodsi3>
 800245c:	10800c04 	addi	r2,r2,48
 8002460:	1007883a 	mov	r3,r2
 8002464:	e0bfff17 	ldw	r2,-4(fp)
 8002468:	10c00005 	stb	r3,0(r2)
    *++ptr = 0;
 800246c:	e0bfff17 	ldw	r2,-4(fp)
 8002470:	10800044 	addi	r2,r2,1
 8002474:	e0bfff15 	stw	r2,-4(fp)
 8002478:	e0bfff17 	ldw	r2,-4(fp)
 800247c:	10000005 	stb	zero,0(r2)
    return ptr;
 8002480:	e0bfff17 	ldw	r2,-4(fp)
}
 8002484:	e037883a 	mov	sp,fp
 8002488:	dfc00117 	ldw	ra,4(sp)
 800248c:	df000017 	ldw	fp,0(sp)
 8002490:	dec00204 	addi	sp,sp,8
 8002494:	f800283a 	ret

08002498 <_Z4ltoalPci>:
// ltoa stolen from the internet (https://gist.github.com/boatilus/11305304)

#define BUFSIZE (sizeof(long) * 8 + 1)

char *ltoa(long N, char *str, int base)
{
 8002498:	deffec04 	addi	sp,sp,-80
 800249c:	dfc01315 	stw	ra,76(sp)
 80024a0:	df001215 	stw	fp,72(sp)
 80024a4:	df001204 	addi	fp,sp,72
 80024a8:	e13ffd15 	stw	r4,-12(fp)
 80024ac:	e17ffe15 	stw	r5,-8(fp)
 80024b0:	e1bfff15 	stw	r6,-4(fp)
    int i = 2;
 80024b4:	00800084 	movi	r2,2
 80024b8:	e0bfee15 	stw	r2,-72(fp)
    long uarg;
    char *tail, *head = str, buf[BUFSIZE];
 80024bc:	e0bffe17 	ldw	r2,-8(fp)
 80024c0:	e0bff115 	stw	r2,-60(fp)

    if (36 < base || 2 > base)
 80024c4:	e0bfff17 	ldw	r2,-4(fp)
 80024c8:	10800948 	cmpgei	r2,r2,37
 80024cc:	1000031e 	bne	r2,zero,80024dc <_Z4ltoalPci+0x44>
 80024d0:	e0bfff17 	ldw	r2,-4(fp)
 80024d4:	10800088 	cmpgei	r2,r2,2
 80024d8:	1000021e 	bne	r2,zero,80024e4 <_Z4ltoalPci+0x4c>
        base = 10;                    /* can only use 0-9, A-Z        */
 80024dc:	00800284 	movi	r2,10
 80024e0:	e0bfff15 	stw	r2,-4(fp)
    tail = &buf[BUFSIZE - 1];           /* last character position      */
 80024e4:	00800804 	movi	r2,32
 80024e8:	e0fff204 	addi	r3,fp,-56
 80024ec:	1885883a 	add	r2,r3,r2
 80024f0:	e0bff015 	stw	r2,-64(fp)
    *tail-- = '\0';
 80024f4:	e0bff017 	ldw	r2,-64(fp)
 80024f8:	10ffffc4 	addi	r3,r2,-1
 80024fc:	e0fff015 	stw	r3,-64(fp)
 8002500:	10000005 	stb	zero,0(r2)

    if (10 == base && N < 0L)
 8002504:	e0bfff17 	ldw	r2,-4(fp)
 8002508:	10800298 	cmpnei	r2,r2,10
 800250c:	10000b1e 	bne	r2,zero,800253c <_Z4ltoalPci+0xa4>
 8002510:	e0bffd17 	ldw	r2,-12(fp)
 8002514:	1000090e 	bge	r2,zero,800253c <_Z4ltoalPci+0xa4>
    {
        *head++ = '-';
 8002518:	e0bff117 	ldw	r2,-60(fp)
 800251c:	10c00044 	addi	r3,r2,1
 8002520:	e0fff115 	stw	r3,-60(fp)
 8002524:	00c00b44 	movi	r3,45
 8002528:	10c00005 	stb	r3,0(r2)
        uarg    = -N;
 800252c:	e0bffd17 	ldw	r2,-12(fp)
 8002530:	0085c83a 	sub	r2,zero,r2
 8002534:	e0bfef15 	stw	r2,-68(fp)
 8002538:	00000206 	br	8002544 <_Z4ltoalPci+0xac>
    }
    else  uarg = N;
 800253c:	e0bffd17 	ldw	r2,-12(fp)
 8002540:	e0bfef15 	stw	r2,-68(fp)

    if (uarg)
 8002544:	e0bfef17 	ldw	r2,-68(fp)
 8002548:	10001e26 	beq	r2,zero,80025c4 <_Z4ltoalPci+0x12c>
    {
        for (i = 1; uarg; ++i)
 800254c:	00800044 	movi	r2,1
 8002550:	e0bfee15 	stw	r2,-72(fp)
 8002554:	e0bfef17 	ldw	r2,-68(fp)
 8002558:	10001f26 	beq	r2,zero,80025d8 <_Z4ltoalPci+0x140>
        {
            ldiv_t r;
            r       = ldiv(uarg, base);
 800255c:	e17fff17 	ldw	r5,-4(fp)
 8002560:	e13fef17 	ldw	r4,-68(fp)
 8002564:	8007eb40 	call	8007eb4 <ldiv>
 8002568:	1009883a 	mov	r4,r2
 800256c:	180b883a 	mov	r5,r3
 8002570:	e13ffb15 	stw	r4,-20(fp)
 8002574:	e17ffc15 	stw	r5,-16(fp)
            *tail-- = (char)(r.rem + ((9L < r.rem) ?
                            ('A' - 10L) : '0'));
 8002578:	e0bff017 	ldw	r2,-64(fp)
 800257c:	10ffffc4 	addi	r3,r2,-1
 8002580:	e0fff015 	stw	r3,-64(fp)
    {
        for (i = 1; uarg; ++i)
        {
            ldiv_t r;
            r       = ldiv(uarg, base);
            *tail-- = (char)(r.rem + ((9L < r.rem) ?
 8002584:	e0fffc17 	ldw	r3,-16(fp)
                            ('A' - 10L) : '0'));
 8002588:	1809883a 	mov	r4,r3
    {
        for (i = 1; uarg; ++i)
        {
            ldiv_t r;
            r       = ldiv(uarg, base);
            *tail-- = (char)(r.rem + ((9L < r.rem) ?
 800258c:	e0fffc17 	ldw	r3,-16(fp)
                            ('A' - 10L) : '0'));
 8002590:	18c00290 	cmplti	r3,r3,10
 8002594:	1800021e 	bne	r3,zero,80025a0 <_Z4ltoalPci+0x108>
 8002598:	00c00dc4 	movi	r3,55
 800259c:	00000106 	br	80025a4 <_Z4ltoalPci+0x10c>
 80025a0:	00c00c04 	movi	r3,48
 80025a4:	20c7883a 	add	r3,r4,r3
 80025a8:	10c00005 	stb	r3,0(r2)
            uarg    = r.quot;
 80025ac:	e0bffb17 	ldw	r2,-20(fp)
 80025b0:	e0bfef15 	stw	r2,-68(fp)
    }
    else  uarg = N;

    if (uarg)
    {
        for (i = 1; uarg; ++i)
 80025b4:	e0bfee17 	ldw	r2,-72(fp)
 80025b8:	10800044 	addi	r2,r2,1
 80025bc:	e0bfee15 	stw	r2,-72(fp)
 80025c0:	003fe406 	br	8002554 <_Z4ltoalPci+0xbc>
            *tail-- = (char)(r.rem + ((9L < r.rem) ?
                            ('A' - 10L) : '0'));
            uarg    = r.quot;
        }
    }
    else  *tail-- = '0';
 80025c4:	e0bff017 	ldw	r2,-64(fp)
 80025c8:	10ffffc4 	addi	r3,r2,-1
 80025cc:	e0fff015 	stw	r3,-64(fp)
 80025d0:	00c00c04 	movi	r3,48
 80025d4:	10c00005 	stb	r3,0(r2)

    memcpy(head, ++tail, i);
 80025d8:	e0bff017 	ldw	r2,-64(fp)
 80025dc:	10800044 	addi	r2,r2,1
 80025e0:	e0bff015 	stw	r2,-64(fp)
 80025e4:	e0bfee17 	ldw	r2,-72(fp)
 80025e8:	100d883a 	mov	r6,r2
 80025ec:	e17ff017 	ldw	r5,-64(fp)
 80025f0:	e13ff117 	ldw	r4,-60(fp)
 80025f4:	8007fa40 	call	8007fa4 <memcpy>
    return str;
 80025f8:	e0bffe17 	ldw	r2,-8(fp)
}
 80025fc:	e037883a 	mov	sp,fp
 8002600:	dfc00117 	ldw	ra,4(sp)
 8002604:	df000017 	ldw	fp,0(sp)
 8002608:	dec00204 	addi	sp,sp,8
 800260c:	f800283a 	ret

08002610 <_ZN12BufferFiller6emit_pEPKcz>:


void BufferFiller::emit_p(const char* fmt, ...) {
 8002610:	defff404 	addi	sp,sp,-48
 8002614:	dfc00915 	stw	ra,36(sp)
 8002618:	df000815 	stw	fp,32(sp)
 800261c:	dc000715 	stw	r16,28(sp)
 8002620:	df000804 	addi	fp,sp,32
 8002624:	e13ffd15 	stw	r4,-12(fp)
 8002628:	e17ffe15 	stw	r5,-8(fp)
 800262c:	e1800215 	stw	r6,8(fp)
 8002630:	e1c00315 	stw	r7,12(fp)
    va_list ap;
    va_start(ap, fmt);
 8002634:	e0800204 	addi	r2,fp,8
 8002638:	e0bffc15 	stw	r2,-16(fp)
    for (;;) {
        char c = *fmt++;
 800263c:	e0bffe17 	ldw	r2,-8(fp)
 8002640:	10c00044 	addi	r3,r2,1
 8002644:	e0fffe15 	stw	r3,-8(fp)
 8002648:	10800003 	ldbu	r2,0(r2)
 800264c:	e0bffb05 	stb	r2,-20(fp)
        if (c == 0)
 8002650:	e0bffb07 	ldb	r2,-20(fp)
 8002654:	1000b926 	beq	r2,zero,800293c <_ZN12BufferFiller6emit_pEPKcz+0x32c>
            break;
        if (c != '$') {
 8002658:	e0bffb07 	ldb	r2,-20(fp)
 800265c:	10800920 	cmpeqi	r2,r2,36
 8002660:	1000081e 	bne	r2,zero,8002684 <_ZN12BufferFiller6emit_pEPKcz+0x74>
            *ptr++ = c;
 8002664:	e0bffd17 	ldw	r2,-12(fp)
 8002668:	10800117 	ldw	r2,4(r2)
 800266c:	11000044 	addi	r4,r2,1
 8002670:	e0fffd17 	ldw	r3,-12(fp)
 8002674:	19000115 	stw	r4,4(r3)
 8002678:	e0fffb03 	ldbu	r3,-20(fp)
 800267c:	10c00005 	stb	r3,0(r2)
            continue;
 8002680:	0000ad06 	br	8002938 <_ZN12BufferFiller6emit_pEPKcz+0x328>
        }
        c = *fmt++;
 8002684:	e0bffe17 	ldw	r2,-8(fp)
 8002688:	10c00044 	addi	r3,r2,1
 800268c:	e0fffe15 	stw	r3,-8(fp)
 8002690:	10800003 	ldbu	r2,0(r2)
 8002694:	e0bffb05 	stb	r2,-20(fp)
        switch (c) {
 8002698:	e0bffb07 	ldb	r2,-20(fp)
 800269c:	10bfef04 	addi	r2,r2,-68
 80026a0:	10c00428 	cmpgeui	r3,r2,16
 80026a4:	18008f1e 	bne	r3,zero,80028e4 <_ZN12BufferFiller6emit_pEPKcz+0x2d4>
 80026a8:	100690ba 	slli	r3,r2,2
 80026ac:	00820034 	movhi	r2,2048
 80026b0:	1089b004 	addi	r2,r2,9920
 80026b4:	1885883a 	add	r2,r3,r2
 80026b8:	10800017 	ldw	r2,0(r2)
 80026bc:	1000683a 	jmp	r2
 80026c0:	08002700 	call	800270 <__alt_mem_onchip_memory2_0+0x800270>
 80026c4:	0800288c 	andi	zero,at,162
 80026c8:	08002834 	orhi	zero,at,160
 80026cc:	080028e4 	muli	zero,at,163
 80026d0:	08002730 	cmpltui	zero,at,156
 80026d4:	080028e4 	muli	zero,at,163
 80026d8:	080028e4 	muli	zero,at,163
 80026dc:	080028e4 	muli	zero,at,163
 80026e0:	080027e4 	muli	zero,at,159
 80026e4:	080028e4 	muli	zero,at,163
 80026e8:	080028e4 	muli	zero,at,163
 80026ec:	080028e4 	muli	zero,at,163
 80026f0:	080028e4 	muli	zero,at,163
 80026f4:	080028e4 	muli	zero,at,163
 80026f8:	080028e4 	muli	zero,at,163
 80026fc:	08002810 	cmplti	zero,at,160
        case 'D':

            ether.wtoa(va_arg(ap, int), (char*) ptr);
 8002700:	e0bffc17 	ldw	r2,-16(fp)
 8002704:	10c00104 	addi	r3,r2,4
 8002708:	e0fffc15 	stw	r3,-16(fp)
 800270c:	10800017 	ldw	r2,0(r2)
 8002710:	10ffffcc 	andi	r3,r2,65535
 8002714:	e0bffd17 	ldw	r2,-12(fp)
 8002718:	10800117 	ldw	r2,4(r2)
 800271c:	100d883a 	mov	r6,r2
 8002720:	180b883a 	mov	r5,r3
 8002724:	d1270284 	addi	r4,gp,-25590
 8002728:	80023f80 	call	80023f8 <_ZN9EtherCard4wtoaEtPc>

            break;
 800272c:	00007506 	br	8002904 <_ZN12BufferFiller6emit_pEPKcz+0x2f4>
            dtostrf    (    va_arg(ap, double), 10, 3, (char*)ptr );
            break;
#endif
        case 'H': {

            char p1 =  va_arg(ap, int);
 8002730:	e0bffc17 	ldw	r2,-16(fp)
 8002734:	10c00104 	addi	r3,r2,4
 8002738:	e0fffc15 	stw	r3,-16(fp)
 800273c:	10800017 	ldw	r2,0(r2)
 8002740:	e0bff805 	stb	r2,-32(fp)

            char p2;
            p2 = (p1 >> 4) & 0x0F;
 8002744:	e0bff807 	ldb	r2,-32(fp)
 8002748:	1005d13a 	srai	r2,r2,4
 800274c:	108003cc 	andi	r2,r2,15
 8002750:	e0bff845 	stb	r2,-31(fp)
            p1 = p1 & 0x0F;
 8002754:	e0bff803 	ldbu	r2,-32(fp)
 8002758:	108003cc 	andi	r2,r2,15
 800275c:	e0bff805 	stb	r2,-32(fp)
            if (p1 > 9) p1 += 0x07; // adjust 0x0a-0x0f to come out 'a'-'f'
 8002760:	e0bff807 	ldb	r2,-32(fp)
 8002764:	10800290 	cmplti	r2,r2,10
 8002768:	1000031e 	bne	r2,zero,8002778 <_ZN12BufferFiller6emit_pEPKcz+0x168>
 800276c:	e0bff803 	ldbu	r2,-32(fp)
 8002770:	108001c4 	addi	r2,r2,7
 8002774:	e0bff805 	stb	r2,-32(fp)
            p1 += 0x30;             // and complete
 8002778:	e0bff803 	ldbu	r2,-32(fp)
 800277c:	10800c04 	addi	r2,r2,48
 8002780:	e0bff805 	stb	r2,-32(fp)
            if (p2 > 9) p2 += 0x07; // adjust 0x0a-0x0f to come out 'a'-'f'
 8002784:	e0bff847 	ldb	r2,-31(fp)
 8002788:	10800290 	cmplti	r2,r2,10
 800278c:	1000031e 	bne	r2,zero,800279c <_ZN12BufferFiller6emit_pEPKcz+0x18c>
 8002790:	e0bff843 	ldbu	r2,-31(fp)
 8002794:	108001c4 	addi	r2,r2,7
 8002798:	e0bff845 	stb	r2,-31(fp)
            p2 += 0x30;             // and complete
 800279c:	e0bff843 	ldbu	r2,-31(fp)
 80027a0:	10800c04 	addi	r2,r2,48
 80027a4:	e0bff845 	stb	r2,-31(fp)
            *ptr++ = p2;
 80027a8:	e0bffd17 	ldw	r2,-12(fp)
 80027ac:	10800117 	ldw	r2,4(r2)
 80027b0:	11000044 	addi	r4,r2,1
 80027b4:	e0fffd17 	ldw	r3,-12(fp)
 80027b8:	19000115 	stw	r4,4(r3)
 80027bc:	e0fff843 	ldbu	r3,-31(fp)
 80027c0:	10c00005 	stb	r3,0(r2)
            *ptr++ = p1;
 80027c4:	e0bffd17 	ldw	r2,-12(fp)
 80027c8:	10800117 	ldw	r2,4(r2)
 80027cc:	11000044 	addi	r4,r2,1
 80027d0:	e0fffd17 	ldw	r3,-12(fp)
 80027d4:	19000115 	stw	r4,4(r3)
 80027d8:	e0fff803 	ldbu	r3,-32(fp)
 80027dc:	10c00005 	stb	r3,0(r2)
            continue;
 80027e0:	00005506 	br	8002938 <_ZN12BufferFiller6emit_pEPKcz+0x328>
        }
        case 'L':
            ltoa(va_arg(ap, long), (char*) ptr, 10);
 80027e4:	e0bffc17 	ldw	r2,-16(fp)
 80027e8:	10c00104 	addi	r3,r2,4
 80027ec:	e0fffc15 	stw	r3,-16(fp)
 80027f0:	10c00017 	ldw	r3,0(r2)
 80027f4:	e0bffd17 	ldw	r2,-12(fp)
 80027f8:	10800117 	ldw	r2,4(r2)
 80027fc:	01800284 	movi	r6,10
 8002800:	100b883a 	mov	r5,r2
 8002804:	1809883a 	mov	r4,r3
 8002808:	80024980 	call	8002498 <_Z4ltoalPci>
            break;
 800280c:	00003d06 	br	8002904 <_ZN12BufferFiller6emit_pEPKcz+0x2f4>
        case 'S':
            strcpy((char*) ptr, va_arg(ap, const char*));
 8002810:	e0bffd17 	ldw	r2,-12(fp)
 8002814:	11000117 	ldw	r4,4(r2)
 8002818:	e0bffc17 	ldw	r2,-16(fp)
 800281c:	10c00104 	addi	r3,r2,4
 8002820:	e0fffc15 	stw	r3,-16(fp)
 8002824:	10800017 	ldw	r2,0(r2)
 8002828:	100b883a 	mov	r5,r2
 800282c:	80083740 	call	8008374 <strcpy>
            break;
 8002830:	00003406 	br	8002904 <_ZN12BufferFiller6emit_pEPKcz+0x2f4>
        case 'F': {
            const char* s = va_arg(ap, const char*);
 8002834:	e0bffc17 	ldw	r2,-16(fp)
 8002838:	10c00104 	addi	r3,r2,4
 800283c:	e0fffc15 	stw	r3,-16(fp)
 8002840:	10800017 	ldw	r2,0(r2)
 8002844:	e0bff915 	stw	r2,-28(fp)
            char d;
            while ((d = *s++) != 0)
 8002848:	e0bff917 	ldw	r2,-28(fp)
 800284c:	10c00044 	addi	r3,r2,1
 8002850:	e0fff915 	stw	r3,-28(fp)
 8002854:	10800003 	ldbu	r2,0(r2)
 8002858:	e0bffb45 	stb	r2,-19(fp)
 800285c:	e0bffb47 	ldb	r2,-19(fp)
 8002860:	1004c03a 	cmpne	r2,r2,zero
 8002864:	10803fcc 	andi	r2,r2,255
 8002868:	10003026 	beq	r2,zero,800292c <_ZN12BufferFiller6emit_pEPKcz+0x31c>
                *ptr++ = d;
 800286c:	e0bffd17 	ldw	r2,-12(fp)
 8002870:	10800117 	ldw	r2,4(r2)
 8002874:	11000044 	addi	r4,r2,1
 8002878:	e0fffd17 	ldw	r3,-12(fp)
 800287c:	19000115 	stw	r4,4(r3)
 8002880:	e0fffb43 	ldbu	r3,-19(fp)
 8002884:	10c00005 	stb	r3,0(r2)
            strcpy((char*) ptr, va_arg(ap, const char*));
            break;
        case 'F': {
            const char* s = va_arg(ap, const char*);
            char d;
            while ((d = *s++) != 0)
 8002888:	003fef06 	br	8002848 <_ZN12BufferFiller6emit_pEPKcz+0x238>
                *ptr++ = d;
            continue;
        }
        case 'E': {
            byte* s = va_arg(ap, byte*);
 800288c:	e0bffc17 	ldw	r2,-16(fp)
 8002890:	10c00104 	addi	r3,r2,4
 8002894:	e0fffc15 	stw	r3,-16(fp)
 8002898:	10800017 	ldw	r2,0(r2)
 800289c:	e0bffa15 	stw	r2,-24(fp)
            char d;
            while ((d = *s++) != 0)
 80028a0:	e0bffa17 	ldw	r2,-24(fp)
 80028a4:	10c00044 	addi	r3,r2,1
 80028a8:	e0fffa15 	stw	r3,-24(fp)
 80028ac:	10800003 	ldbu	r2,0(r2)
 80028b0:	e0bffb85 	stb	r2,-18(fp)
 80028b4:	e0bffb87 	ldb	r2,-18(fp)
 80028b8:	1004c03a 	cmpne	r2,r2,zero
 80028bc:	10803fcc 	andi	r2,r2,255
 80028c0:	10001c26 	beq	r2,zero,8002934 <_ZN12BufferFiller6emit_pEPKcz+0x324>
                *ptr++ = d;
 80028c4:	e0bffd17 	ldw	r2,-12(fp)
 80028c8:	10800117 	ldw	r2,4(r2)
 80028cc:	11000044 	addi	r4,r2,1
 80028d0:	e0fffd17 	ldw	r3,-12(fp)
 80028d4:	19000115 	stw	r4,4(r3)
 80028d8:	e0fffb83 	ldbu	r3,-18(fp)
 80028dc:	10c00005 	stb	r3,0(r2)
            continue;
        }
        case 'E': {
            byte* s = va_arg(ap, byte*);
            char d;
            while ((d = *s++) != 0)
 80028e0:	003fef06 	br	80028a0 <_ZN12BufferFiller6emit_pEPKcz+0x290>
                *ptr++ = d;
            continue;
        }
        default:
            *ptr++ = c;
 80028e4:	e0bffd17 	ldw	r2,-12(fp)
 80028e8:	10800117 	ldw	r2,4(r2)
 80028ec:	11000044 	addi	r4,r2,1
 80028f0:	e0fffd17 	ldw	r3,-12(fp)
 80028f4:	19000115 	stw	r4,4(r3)
 80028f8:	e0fffb03 	ldbu	r3,-20(fp)
 80028fc:	10c00005 	stb	r3,0(r2)
            continue;
 8002900:	00000d06 	br	8002938 <_ZN12BufferFiller6emit_pEPKcz+0x328>
        }
        ptr += strlen((char*) ptr);
 8002904:	e0bffd17 	ldw	r2,-12(fp)
 8002908:	14000117 	ldw	r16,4(r2)
 800290c:	e0bffd17 	ldw	r2,-12(fp)
 8002910:	10800117 	ldw	r2,4(r2)
 8002914:	1009883a 	mov	r4,r2
 8002918:	80084040 	call	8008404 <strlen>
 800291c:	8087883a 	add	r3,r16,r2
 8002920:	e0bffd17 	ldw	r2,-12(fp)
 8002924:	10c00115 	stw	r3,4(r2)
 8002928:	003f4406 	br	800263c <_ZN12BufferFiller6emit_pEPKcz+0x2c>
        case 'F': {
            const char* s = va_arg(ap, const char*);
            char d;
            while ((d = *s++) != 0)
                *ptr++ = d;
            continue;
 800292c:	0001883a 	nop
 8002930:	003f4206 	br	800263c <_ZN12BufferFiller6emit_pEPKcz+0x2c>
        case 'E': {
            byte* s = va_arg(ap, byte*);
            char d;
            while ((d = *s++) != 0)
                *ptr++ = d;
            continue;
 8002934:	0001883a 	nop


void BufferFiller::emit_p(const char* fmt, ...) {
    va_list ap;
    va_start(ap, fmt);
    for (;;) {
 8002938:	003f4006 	br	800263c <_ZN12BufferFiller6emit_pEPKcz+0x2c>
        char c = *fmt++;
        if (c == 0)
            break;
 800293c:	0001883a 	nop
            continue;
        }
        ptr += strlen((char*) ptr);
    }
    va_end(ap);
}
 8002940:	0001883a 	nop
 8002944:	e6ffff04 	addi	sp,fp,-4
 8002948:	dfc00217 	ldw	ra,8(sp)
 800294c:	df000117 	ldw	fp,4(sp)
 8002950:	dc000017 	ldw	r16,0(sp)
 8002954:	dec00504 	addi	sp,sp,20
 8002958:	f800283a 	ret

0800295c <_Z6millisv>:
static uint8_t* dhcpCustomOptionList = NULL;
static DhcpOptionCallback dhcpCustomOptionCallback = NULL;

extern uint8_t allOnes[];// = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

uint32_t millis() {
 800295c:	defffe04 	addi	sp,sp,-8
 8002960:	dfc00115 	stw	ra,4(sp)
 8002964:	df000015 	stw	fp,0(sp)
 8002968:	d839883a 	mov	fp,sp
	return (uint32_t) clock();
 800296c:	8007e680 	call	8007e68 <clock>
}
 8002970:	e037883a 	mov	sp,fp
 8002974:	dfc00117 	ldw	ra,4(sp)
 8002978:	df000017 	ldw	fp,0(sp)
 800297c:	dec00204 	addi	sp,sp,8
 8002980:	f800283a 	ret

08002984 <_ZL8addToBufh>:

static void addToBuf (byte b) {
 8002984:	defffe04 	addi	sp,sp,-8
 8002988:	df000115 	stw	fp,4(sp)
 800298c:	df000104 	addi	fp,sp,4
 8002990:	2005883a 	mov	r2,r4
 8002994:	e0bfff05 	stb	r2,-4(fp)
    *bufPtr++ = b;
 8002998:	d0a71217 	ldw	r2,-25528(gp)
 800299c:	10c00044 	addi	r3,r2,1
 80029a0:	d0e71215 	stw	r3,-25528(gp)
 80029a4:	e0ffff03 	ldbu	r3,-4(fp)
 80029a8:	10c00005 	stb	r3,0(r2)
}
 80029ac:	0001883a 	nop
 80029b0:	e037883a 	mov	sp,fp
 80029b4:	df000017 	ldw	fp,0(sp)
 80029b8:	dec00104 	addi	sp,sp,4
 80029bc:	f800283a 	ret

080029c0 <_ZL8addByteshPKh>:

static void addBytes (byte len, const byte* data) {
 80029c0:	defffc04 	addi	sp,sp,-16
 80029c4:	dfc00315 	stw	ra,12(sp)
 80029c8:	df000215 	stw	fp,8(sp)
 80029cc:	df000204 	addi	fp,sp,8
 80029d0:	2005883a 	mov	r2,r4
 80029d4:	e17fff15 	stw	r5,-4(fp)
 80029d8:	e0bffe05 	stb	r2,-8(fp)
    while (len-- > 0)
 80029dc:	e0bffe03 	ldbu	r2,-8(fp)
 80029e0:	10ffffc4 	addi	r3,r2,-1
 80029e4:	e0fffe05 	stb	r3,-8(fp)
 80029e8:	10803fcc 	andi	r2,r2,255
 80029ec:	1004c03a 	cmpne	r2,r2,zero
 80029f0:	10803fcc 	andi	r2,r2,255
 80029f4:	10000826 	beq	r2,zero,8002a18 <_ZL8addByteshPKh+0x58>
        addToBuf(*data++);
 80029f8:	e0bfff17 	ldw	r2,-4(fp)
 80029fc:	10c00044 	addi	r3,r2,1
 8002a00:	e0ffff15 	stw	r3,-4(fp)
 8002a04:	10800003 	ldbu	r2,0(r2)
 8002a08:	10803fcc 	andi	r2,r2,255
 8002a0c:	1009883a 	mov	r4,r2
 8002a10:	80029840 	call	8002984 <_ZL8addToBufh>
static void addToBuf (byte b) {
    *bufPtr++ = b;
}

static void addBytes (byte len, const byte* data) {
    while (len-- > 0)
 8002a14:	003ff106 	br	80029dc <_ZL8addByteshPKh+0x1c>
        addToBuf(*data++);
}
 8002a18:	0001883a 	nop
 8002a1c:	e037883a 	mov	sp,fp
 8002a20:	dfc00117 	ldw	ra,4(sp)
 8002a24:	df000017 	ldw	fp,0(sp)
 8002a28:	dec00204 	addi	sp,sp,8
 8002a2c:	f800283a 	ret

08002a30 <_ZL9addOptionhhPKh>:

static void addOption (byte opt, byte len, const byte* data) {
 8002a30:	defffb04 	addi	sp,sp,-20
 8002a34:	dfc00415 	stw	ra,16(sp)
 8002a38:	df000315 	stw	fp,12(sp)
 8002a3c:	df000304 	addi	fp,sp,12
 8002a40:	2007883a 	mov	r3,r4
 8002a44:	2805883a 	mov	r2,r5
 8002a48:	e1bfff15 	stw	r6,-4(fp)
 8002a4c:	e0fffd05 	stb	r3,-12(fp)
 8002a50:	e0bffe05 	stb	r2,-8(fp)
    addToBuf(opt);
 8002a54:	e0bffd03 	ldbu	r2,-12(fp)
 8002a58:	1009883a 	mov	r4,r2
 8002a5c:	80029840 	call	8002984 <_ZL8addToBufh>
    addToBuf(len);
 8002a60:	e0bffe03 	ldbu	r2,-8(fp)
 8002a64:	1009883a 	mov	r4,r2
 8002a68:	80029840 	call	8002984 <_ZL8addToBufh>
    addBytes(len, data);
 8002a6c:	e0bffe03 	ldbu	r2,-8(fp)
 8002a70:	e17fff17 	ldw	r5,-4(fp)
 8002a74:	1009883a 	mov	r4,r2
 8002a78:	80029c00 	call	80029c0 <_ZL8addByteshPKh>
}
 8002a7c:	0001883a 	nop
 8002a80:	e037883a 	mov	sp,fp
 8002a84:	dfc00117 	ldw	ra,4(sp)
 8002a88:	df000017 	ldw	fp,0(sp)
 8002a8c:	dec00204 	addi	sp,sp,8
 8002a90:	f800283a 	ret

08002a94 <_ZL17send_dhcp_messagePh>:
#define DHCP_OPT_CLIENT_IDENTIFIER      61
#define DHCP_OPT_END                    255

#define DHCP_HTYPE_ETHER 1

static void send_dhcp_message(uint8_t *requestip) {
 8002a94:	defff904 	addi	sp,sp,-28
 8002a98:	dfc00615 	stw	ra,24(sp)
 8002a9c:	df000515 	stw	fp,20(sp)
 8002aa0:	df000504 	addi	fp,sp,20
 8002aa4:	e13fff15 	stw	r4,-4(fp)

    memset(gPB, 0, UDP_DATA_P + sizeof( DHCPdata ));
 8002aa8:	00804584 	movi	r2,278
 8002aac:	100d883a 	mov	r6,r2
 8002ab0:	000b883a 	mov	r5,zero
 8002ab4:	010200b4 	movhi	r4,2050
 8002ab8:	212fa004 	addi	r4,r4,-16768
 8002abc:	80080ec0 	call	80080ec <memset>

    EtherCard::udpPrepare(DHCP_CLIENT_PORT,
                          (dhcpState == DHCP_STATE_BOUND ? EtherCard::dhcpip : allOnes),
 8002ac0:	d0a70d03 	ldbu	r2,-25548(gp)

static void send_dhcp_message(uint8_t *requestip) {

    memset(gPB, 0, UDP_DATA_P + sizeof( DHCPdata ));

    EtherCard::udpPrepare(DHCP_CLIENT_PORT,
 8002ac4:	10803fcc 	andi	r2,r2,255
 8002ac8:	108000d8 	cmpnei	r2,r2,3
 8002acc:	1000021e 	bne	r2,zero,8002ad8 <_ZL17send_dhcp_messagePh+0x44>
 8002ad0:	d0a70844 	addi	r2,gp,-25567
 8002ad4:	00000206 	br	8002ae0 <_ZL17send_dhcp_messagePh+0x4c>
 8002ad8:	008200b4 	movhi	r2,2050
 8002adc:	10a84dc4 	addi	r2,r2,-24265
                          (dhcpState == DHCP_STATE_BOUND ? EtherCard::dhcpip : allOnes),
                          DHCP_SERVER_PORT);
 8002ae0:	018010c4 	movi	r6,67
 8002ae4:	100b883a 	mov	r5,r2
 8002ae8:	01001104 	movi	r4,68
 8002aec:	8005da80 	call	8005da8 <_ZN9EtherCard10udpPrepareEtPKht>

    // If we ever don't do this, the DHCP renewal gets sent to whatever random
    // destmacaddr was used by other code. Rather than cache the MAC address of
    // the DHCP server, just force a broadcast here in all cases.
    EtherCard::copyMac(gPB + ETH_DST_MAC, allOnes); //force broadcast mac
 8002af0:	014200b4 	movhi	r5,2050
 8002af4:	29684dc4 	addi	r5,r5,-24265
 8002af8:	010200b4 	movhi	r4,2050
 8002afc:	212fa004 	addi	r4,r4,-16768
 8002b00:	800793c0 	call	800793c <_ZN9EtherCard7copyMacEPhPKh>

    // Build DHCP Packet from buf[UDP_DATA_P]
    DHCPdata *dhcpPtr = (DHCPdata*) (gPB + UDP_DATA_P);
 8002b04:	008200b4 	movhi	r2,2050
 8002b08:	10afaa84 	addi	r2,r2,-16726
 8002b0c:	e0bffe15 	stw	r2,-8(fp)
    dhcpPtr->op = DHCP_BOOTREQUEST;
 8002b10:	e0bffe17 	ldw	r2,-8(fp)
 8002b14:	00c00044 	movi	r3,1
 8002b18:	10c00005 	stb	r3,0(r2)
    dhcpPtr->htype = 1;
 8002b1c:	e0bffe17 	ldw	r2,-8(fp)
 8002b20:	00c00044 	movi	r3,1
 8002b24:	10c00045 	stb	r3,1(r2)
    dhcpPtr->hlen = 6;
 8002b28:	e0bffe17 	ldw	r2,-8(fp)
 8002b2c:	00c00184 	movi	r3,6
 8002b30:	10c00085 	stb	r3,2(r2)
    dhcpPtr->xid = currentXid;
 8002b34:	d0e70e17 	ldw	r3,-25544(gp)
 8002b38:	e0bffe17 	ldw	r2,-8(fp)
 8002b3c:	10c00115 	stw	r3,4(r2)
    if (dhcpState == DHCP_STATE_BOUND) {
 8002b40:	d0a70d03 	ldbu	r2,-25548(gp)
 8002b44:	10803fcc 	andi	r2,r2,255
 8002b48:	108000d8 	cmpnei	r2,r2,3
 8002b4c:	1000051e 	bne	r2,zero,8002b64 <_ZL17send_dhcp_messagePh+0xd0>
        EtherCard::copyIp(dhcpPtr->ciaddr, EtherCard::myip);
 8002b50:	e0bffe17 	ldw	r2,-8(fp)
 8002b54:	10800304 	addi	r2,r2,12
 8002b58:	d1670444 	addi	r5,gp,-25583
 8002b5c:	1009883a 	mov	r4,r2
 8002b60:	800797c0 	call	800797c <_ZN9EtherCard6copyIpEPhPKh>
    }
    EtherCard::copyMac(dhcpPtr->chaddr, EtherCard::mymac);
 8002b64:	e0bffe17 	ldw	r2,-8(fp)
 8002b68:	10800704 	addi	r2,r2,28
 8002b6c:	d16702c4 	addi	r5,gp,-25589
 8002b70:	1009883a 	mov	r4,r2
 8002b74:	800793c0 	call	800793c <_ZN9EtherCard7copyMacEPhPKh>

    // options defined as option, length, value
    bufPtr = gPB + UDP_DATA_P + sizeof( DHCPdata );
 8002b78:	00c04584 	movi	r3,278
 8002b7c:	008200b4 	movhi	r2,2050
 8002b80:	10afa004 	addi	r2,r2,-16768
 8002b84:	1885883a 	add	r2,r3,r2
 8002b88:	d0a71215 	stw	r2,-25528(gp)
    // DHCP magic cookie
    static const uint8_t cookie[] = { 0x63,0x82,0x53,0x63 };
    for (byte i = 0; i < sizeof(cookie); i++)
 8002b8c:	e03ffb05 	stb	zero,-20(fp)
 8002b90:	e0bffb03 	ldbu	r2,-20(fp)
 8002b94:	10800128 	cmpgeui	r2,r2,4
 8002b98:	10000b1e 	bne	r2,zero,8002bc8 <_ZL17send_dhcp_messagePh+0x134>
        addToBuf((unsigned char)cookie[i]);
 8002b9c:	e0fffb03 	ldbu	r3,-20(fp)
 8002ba0:	d0a00304 	addi	r2,gp,-32756
 8002ba4:	1885883a 	add	r2,r3,r2
 8002ba8:	10800003 	ldbu	r2,0(r2)
 8002bac:	10803fcc 	andi	r2,r2,255
 8002bb0:	1009883a 	mov	r4,r2
 8002bb4:	80029840 	call	8002984 <_ZL8addToBufh>

    // options defined as option, length, value
    bufPtr = gPB + UDP_DATA_P + sizeof( DHCPdata );
    // DHCP magic cookie
    static const uint8_t cookie[] = { 0x63,0x82,0x53,0x63 };
    for (byte i = 0; i < sizeof(cookie); i++)
 8002bb8:	e0bffb03 	ldbu	r2,-20(fp)
 8002bbc:	10800044 	addi	r2,r2,1
 8002bc0:	e0bffb05 	stb	r2,-20(fp)
 8002bc4:	003ff206 	br	8002b90 <_ZL17send_dhcp_messagePh+0xfc>
        addToBuf((unsigned char)cookie[i]);
    addToBuf(DHCP_OPT_MESSAGE_TYPE); // DHCP_STATE_SELECTING, DHCP_STATE_REQUESTING
 8002bc8:	01000d44 	movi	r4,53
 8002bcc:	80029840 	call	8002984 <_ZL8addToBufh>
    addToBuf(1);   // Length
 8002bd0:	01000044 	movi	r4,1
 8002bd4:	80029840 	call	8002984 <_ZL8addToBufh>
    addToBuf(dhcpState == DHCP_STATE_INIT ? DHCP_DISCOVER : DHCP_REQUEST);
 8002bd8:	d0a70d03 	ldbu	r2,-25548(gp)
 8002bdc:	10803fcc 	andi	r2,r2,255
 8002be0:	1000021e 	bne	r2,zero,8002bec <_ZL17send_dhcp_messagePh+0x158>
 8002be4:	00800044 	movi	r2,1
 8002be8:	00000106 	br	8002bf0 <_ZL17send_dhcp_messagePh+0x15c>
 8002bec:	008000c4 	movi	r2,3
 8002bf0:	1009883a 	mov	r4,r2
 8002bf4:	80029840 	call	8002984 <_ZL8addToBufh>

    // Client Identifier Option, this is the client mac address
    addToBuf(DHCP_OPT_CLIENT_IDENTIFIER);
 8002bf8:	01000f44 	movi	r4,61
 8002bfc:	80029840 	call	8002984 <_ZL8addToBufh>
    addToBuf(1 + ETH_LEN); // Length (hardware type + client MAC)
 8002c00:	010001c4 	movi	r4,7
 8002c04:	80029840 	call	8002984 <_ZL8addToBufh>
    addToBuf(DHCP_HTYPE_ETHER);
 8002c08:	01000044 	movi	r4,1
 8002c0c:	80029840 	call	8002984 <_ZL8addToBufh>
    addBytes(ETH_LEN, EtherCard::mymac);
 8002c10:	d16702c4 	addi	r5,gp,-25589
 8002c14:	01000184 	movi	r4,6
 8002c18:	80029c00 	call	80029c0 <_ZL8addByteshPKh>

    if (hostname[0]) {
 8002c1c:	008200b4 	movhi	r2,2050
 8002c20:	10a19504 	addi	r2,r2,-31148
 8002c24:	10800003 	ldbu	r2,0(r2)
 8002c28:	10803fcc 	andi	r2,r2,255
 8002c2c:	1080201c 	xori	r2,r2,128
 8002c30:	10bfe004 	addi	r2,r2,-128
 8002c34:	10000926 	beq	r2,zero,8002c5c <_ZL17send_dhcp_messagePh+0x1c8>
        addOption(DHCP_OPT_HOSTNAME, strlen(hostname), (byte*) hostname);
 8002c38:	010200b4 	movhi	r4,2050
 8002c3c:	21219504 	addi	r4,r4,-31148
 8002c40:	80084040 	call	8008404 <strlen>
 8002c44:	10803fcc 	andi	r2,r2,255
 8002c48:	018200b4 	movhi	r6,2050
 8002c4c:	31a19504 	addi	r6,r6,-31148
 8002c50:	100b883a 	mov	r5,r2
 8002c54:	01000304 	movi	r4,12
 8002c58:	8002a300 	call	8002a30 <_ZL9addOptionhhPKh>
    }

    if (requestip != NULL) {
 8002c5c:	e0bfff17 	ldw	r2,-4(fp)
 8002c60:	10000826 	beq	r2,zero,8002c84 <_ZL17send_dhcp_messagePh+0x1f0>
        addOption(DHCP_OPT_REQUESTED_ADDRESS, IP_LEN, requestip);
 8002c64:	e1bfff17 	ldw	r6,-4(fp)
 8002c68:	01400104 	movi	r5,4
 8002c6c:	01000c84 	movi	r4,50
 8002c70:	8002a300 	call	8002a30 <_ZL9addOptionhhPKh>
        addOption(DHCP_OPT_SERVER_IDENTIFIER, IP_LEN, EtherCard::dhcpip);
 8002c74:	d1a70844 	addi	r6,gp,-25567
 8002c78:	01400104 	movi	r5,4
 8002c7c:	01000d84 	movi	r4,54
 8002c80:	8002a300 	call	8002a30 <_ZL9addOptionhhPKh>
    }

    // Additional info in parameter list - minimal list for what we need
    byte len = 3;
 8002c84:	008000c4 	movi	r2,3
 8002c88:	e0bffb45 	stb	r2,-19(fp)
    if (dhcpCustomOptionList) {
 8002c8c:	d0a71317 	ldw	r2,-25524(gp)
 8002c90:	10000e26 	beq	r2,zero,8002ccc <_ZL17send_dhcp_messagePh+0x238>
        uint8_t *p = dhcpCustomOptionList;
 8002c94:	d0a71317 	ldw	r2,-25524(gp)
 8002c98:	e0bffc15 	stw	r2,-16(fp)
        while (*p++ != 0) len++;
 8002c9c:	e0bffc17 	ldw	r2,-16(fp)
 8002ca0:	10c00044 	addi	r3,r2,1
 8002ca4:	e0fffc15 	stw	r3,-16(fp)
 8002ca8:	10800003 	ldbu	r2,0(r2)
 8002cac:	10803fcc 	andi	r2,r2,255
 8002cb0:	1004c03a 	cmpne	r2,r2,zero
 8002cb4:	10803fcc 	andi	r2,r2,255
 8002cb8:	10000426 	beq	r2,zero,8002ccc <_ZL17send_dhcp_messagePh+0x238>
 8002cbc:	e0bffb43 	ldbu	r2,-19(fp)
 8002cc0:	10800044 	addi	r2,r2,1
 8002cc4:	e0bffb45 	stb	r2,-19(fp)
 8002cc8:	003ff406 	br	8002c9c <_ZL17send_dhcp_messagePh+0x208>
    }
    addToBuf(DHCP_OPT_PARAMETER_REQUEST_LIST);
 8002ccc:	01000dc4 	movi	r4,55
 8002cd0:	80029840 	call	8002984 <_ZL8addToBufh>
    addToBuf(len);    // Length
 8002cd4:	e0bffb43 	ldbu	r2,-19(fp)
 8002cd8:	1009883a 	mov	r4,r2
 8002cdc:	80029840 	call	8002984 <_ZL8addToBufh>
    addToBuf(DHCP_OPT_SUBNET_MASK);
 8002ce0:	01000044 	movi	r4,1
 8002ce4:	80029840 	call	8002984 <_ZL8addToBufh>
    addToBuf(DHCP_OPT_ROUTERS);
 8002ce8:	010000c4 	movi	r4,3
 8002cec:	80029840 	call	8002984 <_ZL8addToBufh>
    addToBuf(DHCP_OPT_DOMAIN_NAME_SERVERS);
 8002cf0:	01000184 	movi	r4,6
 8002cf4:	80029840 	call	8002984 <_ZL8addToBufh>
    if (dhcpCustomOptionList) {
 8002cf8:	d0a71317 	ldw	r2,-25524(gp)
 8002cfc:	10000e26 	beq	r2,zero,8002d38 <_ZL17send_dhcp_messagePh+0x2a4>
        uint8_t *p = dhcpCustomOptionList; // Custom option list
 8002d00:	d0a71317 	ldw	r2,-25524(gp)
 8002d04:	e0bffd15 	stw	r2,-12(fp)
        while (*p != 0) {
 8002d08:	e0bffd17 	ldw	r2,-12(fp)
 8002d0c:	10800003 	ldbu	r2,0(r2)
 8002d10:	10803fcc 	andi	r2,r2,255
 8002d14:	10000826 	beq	r2,zero,8002d38 <_ZL17send_dhcp_messagePh+0x2a4>
            addToBuf(*p++);
 8002d18:	e0bffd17 	ldw	r2,-12(fp)
 8002d1c:	10c00044 	addi	r3,r2,1
 8002d20:	e0fffd15 	stw	r3,-12(fp)
 8002d24:	10800003 	ldbu	r2,0(r2)
 8002d28:	10803fcc 	andi	r2,r2,255
 8002d2c:	1009883a 	mov	r4,r2
 8002d30:	80029840 	call	8002984 <_ZL8addToBufh>
    addToBuf(DHCP_OPT_SUBNET_MASK);
    addToBuf(DHCP_OPT_ROUTERS);
    addToBuf(DHCP_OPT_DOMAIN_NAME_SERVERS);
    if (dhcpCustomOptionList) {
        uint8_t *p = dhcpCustomOptionList; // Custom option list
        while (*p != 0) {
 8002d34:	003ff406 	br	8002d08 <_ZL17send_dhcp_messagePh+0x274>
            addToBuf(*p++);
        }
    }
    addToBuf(DHCP_OPT_END);
 8002d38:	01003fc4 	movi	r4,255
 8002d3c:	80029840 	call	8002984 <_ZL8addToBufh>

    // packet size will be under 300 bytes
    EtherCard::udpTransmit((bufPtr - gPB) - UDP_DATA_P);
 8002d40:	d0a71217 	ldw	r2,-25528(gp)
 8002d44:	1007883a 	mov	r3,r2
 8002d48:	008200b4 	movhi	r2,2050
 8002d4c:	10afa004 	addi	r2,r2,-16768
 8002d50:	1009883a 	mov	r4,r2
 8002d54:	00bff584 	movi	r2,-42
 8002d58:	1105c83a 	sub	r2,r2,r4
 8002d5c:	1885883a 	add	r2,r3,r2
 8002d60:	10bfffcc 	andi	r2,r2,65535
 8002d64:	1009883a 	mov	r4,r2
 8002d68:	8005f300 	call	8005f30 <_ZN9EtherCard11udpTransmitEt>
}
 8002d6c:	0001883a 	nop
 8002d70:	e037883a 	mov	sp,fp
 8002d74:	dfc00117 	ldw	ra,4(sp)
 8002d78:	df000017 	ldw	fp,0(sp)
 8002d7c:	dec00204 	addi	sp,sp,8
 8002d80:	f800283a 	ret

08002d84 <_ZL18process_dhcp_offertPh>:

static void process_dhcp_offer(uint16_t len, uint8_t *offeredip) {
 8002d84:	defff904 	addi	sp,sp,-28
 8002d88:	dfc00615 	stw	ra,24(sp)
 8002d8c:	df000515 	stw	fp,20(sp)
 8002d90:	df000504 	addi	fp,sp,20
 8002d94:	2005883a 	mov	r2,r4
 8002d98:	e17fff15 	stw	r5,-4(fp)
 8002d9c:	e0bffe0d 	sth	r2,-8(fp)
    // Map struct onto payload
    DHCPdata *dhcpPtr = (DHCPdata*) (gPB + UDP_DATA_P);
 8002da0:	008200b4 	movhi	r2,2050
 8002da4:	10afaa84 	addi	r2,r2,-16726
 8002da8:	e0bffc15 	stw	r2,-16(fp)

    // Offered IP address is in yiaddr
    EtherCard::copyIp(offeredip, dhcpPtr->yiaddr);
 8002dac:	e0bffc17 	ldw	r2,-16(fp)
 8002db0:	10800404 	addi	r2,r2,16
 8002db4:	100b883a 	mov	r5,r2
 8002db8:	e13fff17 	ldw	r4,-4(fp)
 8002dbc:	800797c0 	call	800797c <_ZN9EtherCard6copyIpEPhPKh>

    // Search for the server IP
    byte *ptr = (byte*) (dhcpPtr + 1) + 4;
 8002dc0:	e0bffc17 	ldw	r2,-16(fp)
 8002dc4:	10803c04 	addi	r2,r2,240
 8002dc8:	e0bffb15 	stw	r2,-20(fp)
    do {
        byte option = *ptr++;
 8002dcc:	e0bffb17 	ldw	r2,-20(fp)
 8002dd0:	10c00044 	addi	r3,r2,1
 8002dd4:	e0fffb15 	stw	r3,-20(fp)
 8002dd8:	10800003 	ldbu	r2,0(r2)
 8002ddc:	e0bffd05 	stb	r2,-12(fp)
        byte optionLen = *ptr++;
 8002de0:	e0bffb17 	ldw	r2,-20(fp)
 8002de4:	10c00044 	addi	r3,r2,1
 8002de8:	e0fffb15 	stw	r3,-20(fp)
 8002dec:	10800003 	ldbu	r2,0(r2)
 8002df0:	e0bffd45 	stb	r2,-11(fp)
        if (option == DHCP_OPT_SERVER_IDENTIFIER) {
 8002df4:	e0bffd03 	ldbu	r2,-12(fp)
 8002df8:	10800d98 	cmpnei	r2,r2,54
 8002dfc:	1000051e 	bne	r2,zero,8002e14 <_ZL18process_dhcp_offertPh+0x90>
            EtherCard::copyIp(EtherCard::dhcpip, ptr);
 8002e00:	e17ffb17 	ldw	r5,-20(fp)
 8002e04:	d1270844 	addi	r4,gp,-25567
 8002e08:	800797c0 	call	800797c <_ZN9EtherCard6copyIpEPhPKh>
            break;
 8002e0c:	0001883a 	nop
        }
        ptr += optionLen;
    } while (ptr < gPB + len);
}
 8002e10:	00000b06 	br	8002e40 <_ZL18process_dhcp_offertPh+0xbc>
        byte optionLen = *ptr++;
        if (option == DHCP_OPT_SERVER_IDENTIFIER) {
            EtherCard::copyIp(EtherCard::dhcpip, ptr);
            break;
        }
        ptr += optionLen;
 8002e14:	e0bffd43 	ldbu	r2,-11(fp)
 8002e18:	e0fffb17 	ldw	r3,-20(fp)
 8002e1c:	1885883a 	add	r2,r3,r2
 8002e20:	e0bffb15 	stw	r2,-20(fp)
    } while (ptr < gPB + len);
 8002e24:	e0fffe0b 	ldhu	r3,-8(fp)
 8002e28:	008200b4 	movhi	r2,2050
 8002e2c:	10afa004 	addi	r2,r2,-16768
 8002e30:	1885883a 	add	r2,r3,r2
 8002e34:	e0fffb17 	ldw	r3,-20(fp)
 8002e38:	1880012e 	bgeu	r3,r2,8002e40 <_ZL18process_dhcp_offertPh+0xbc>
    // Offered IP address is in yiaddr
    EtherCard::copyIp(offeredip, dhcpPtr->yiaddr);

    // Search for the server IP
    byte *ptr = (byte*) (dhcpPtr + 1) + 4;
    do {
 8002e3c:	003fe306 	br	8002dcc <_ZL18process_dhcp_offertPh+0x48>
            EtherCard::copyIp(EtherCard::dhcpip, ptr);
            break;
        }
        ptr += optionLen;
    } while (ptr < gPB + len);
}
 8002e40:	0001883a 	nop
 8002e44:	e037883a 	mov	sp,fp
 8002e48:	dfc00117 	ldw	ra,4(sp)
 8002e4c:	df000017 	ldw	fp,0(sp)
 8002e50:	dec00204 	addi	sp,sp,8
 8002e54:	f800283a 	ret

08002e58 <_ZL16process_dhcp_ackt>:

static void process_dhcp_ack(uint16_t len) {
 8002e58:	defff804 	addi	sp,sp,-32
 8002e5c:	dfc00715 	stw	ra,28(sp)
 8002e60:	df000615 	stw	fp,24(sp)
 8002e64:	df000604 	addi	fp,sp,24
 8002e68:	2005883a 	mov	r2,r4
 8002e6c:	e0bfff0d 	sth	r2,-4(fp)
    // Map struct onto payload
    DHCPdata *dhcpPtr = (DHCPdata*) (gPB + UDP_DATA_P);
 8002e70:	008200b4 	movhi	r2,2050
 8002e74:	10afaa84 	addi	r2,r2,-16726
 8002e78:	e0bffd15 	stw	r2,-12(fp)

    // Allocated IP address is in yiaddr
    EtherCard::copyIp(EtherCard::myip, dhcpPtr->yiaddr);
 8002e7c:	e0bffd17 	ldw	r2,-12(fp)
 8002e80:	10800404 	addi	r2,r2,16
 8002e84:	100b883a 	mov	r5,r2
 8002e88:	d1270444 	addi	r4,gp,-25583
 8002e8c:	800797c0 	call	800797c <_ZN9EtherCard6copyIpEPhPKh>

    // Scan through variable length option list identifying options we want
    byte *ptr = (byte*) (dhcpPtr + 1) + 4;
 8002e90:	e0bffd17 	ldw	r2,-12(fp)
 8002e94:	10803c04 	addi	r2,r2,240
 8002e98:	e0bffa15 	stw	r2,-24(fp)
    bool done = false;
 8002e9c:	e03ffb05 	stb	zero,-20(fp)
    do {
        byte option = *ptr++;
 8002ea0:	e0bffa17 	ldw	r2,-24(fp)
 8002ea4:	10c00044 	addi	r3,r2,1
 8002ea8:	e0fffa15 	stw	r3,-24(fp)
 8002eac:	10800003 	ldbu	r2,0(r2)
 8002eb0:	e0bffe05 	stb	r2,-8(fp)
        byte optionLen = *ptr++;
 8002eb4:	e0bffa17 	ldw	r2,-24(fp)
 8002eb8:	10c00044 	addi	r3,r2,1
 8002ebc:	e0fffa15 	stw	r3,-24(fp)
 8002ec0:	10800003 	ldbu	r2,0(r2)
 8002ec4:	e0bffe45 	stb	r2,-7(fp)
        switch (option) {
 8002ec8:	e0bffe03 	ldbu	r2,-8(fp)
 8002ecc:	10c001a0 	cmpeqi	r3,r2,6
 8002ed0:	1800161e 	bne	r3,zero,8002f2c <_ZL16process_dhcp_ackt+0xd4>
 8002ed4:	10c001c8 	cmpgei	r3,r2,7
 8002ed8:	1800051e 	bne	r3,zero,8002ef0 <_ZL16process_dhcp_ackt+0x98>
 8002edc:	10c00060 	cmpeqi	r3,r2,1
 8002ee0:	18000a1e 	bne	r3,zero,8002f0c <_ZL16process_dhcp_ackt+0xb4>
 8002ee4:	108000e0 	cmpeqi	r2,r2,3
 8002ee8:	10000c1e 	bne	r2,zero,8002f1c <_ZL16process_dhcp_ackt+0xc4>
 8002eec:	00003106 	br	8002fb4 <_ZL16process_dhcp_ackt+0x15c>
 8002ef0:	10c00ea0 	cmpeqi	r3,r2,58
 8002ef4:	1800111e 	bne	r3,zero,8002f3c <_ZL16process_dhcp_ackt+0xe4>
 8002ef8:	10c03fe0 	cmpeqi	r3,r2,255
 8002efc:	18002a1e 	bne	r3,zero,8002fa8 <_ZL16process_dhcp_ackt+0x150>
 8002f00:	10800ce0 	cmpeqi	r2,r2,51
 8002f04:	10000d1e 	bne	r2,zero,8002f3c <_ZL16process_dhcp_ackt+0xe4>
 8002f08:	00002a06 	br	8002fb4 <_ZL16process_dhcp_ackt+0x15c>
        case DHCP_OPT_SUBNET_MASK:
            EtherCard::copyIp(EtherCard::netmask, ptr);
 8002f0c:	e17ffa17 	ldw	r5,-24(fp)
 8002f10:	d1270544 	addi	r4,gp,-25579
 8002f14:	800797c0 	call	800797c <_ZN9EtherCard6copyIpEPhPKh>
            break;
 8002f18:	00004006 	br	800301c <_ZL16process_dhcp_ackt+0x1c4>
        case DHCP_OPT_ROUTERS:
            EtherCard::copyIp(EtherCard::gwip, ptr);
 8002f1c:	e17ffa17 	ldw	r5,-24(fp)
 8002f20:	d1270744 	addi	r4,gp,-25571
 8002f24:	800797c0 	call	800797c <_ZN9EtherCard6copyIpEPhPKh>
            break;
 8002f28:	00003c06 	br	800301c <_ZL16process_dhcp_ackt+0x1c4>
        case DHCP_OPT_DOMAIN_NAME_SERVERS:
            EtherCard::copyIp(EtherCard::dnsip, ptr);
 8002f2c:	e17ffa17 	ldw	r5,-24(fp)
 8002f30:	d1270944 	addi	r4,gp,-25563
 8002f34:	800797c0 	call	800797c <_ZN9EtherCard6copyIpEPhPKh>
            break;
 8002f38:	00003806 	br	800301c <_ZL16process_dhcp_ackt+0x1c4>
        case DHCP_OPT_LEASE_TIME:
        case DHCP_OPT_RENEWAL_TIME:
            leaseTime = 0;
 8002f3c:	d0271115 	stw	zero,-25532(gp)
            for (byte i = 0; i<4; i++)
 8002f40:	e03ffb45 	stb	zero,-19(fp)
 8002f44:	e0bffb43 	ldbu	r2,-19(fp)
 8002f48:	10800128 	cmpgeui	r2,r2,4
 8002f4c:	10000d1e 	bne	r2,zero,8002f84 <_ZL16process_dhcp_ackt+0x12c>
                leaseTime = (leaseTime << 8) + ptr[i];
 8002f50:	d0a71117 	ldw	r2,-25532(gp)
 8002f54:	1006923a 	slli	r3,r2,8
 8002f58:	e0bffb43 	ldbu	r2,-19(fp)
 8002f5c:	e13ffa17 	ldw	r4,-24(fp)
 8002f60:	2085883a 	add	r2,r4,r2
 8002f64:	10800003 	ldbu	r2,0(r2)
 8002f68:	10803fcc 	andi	r2,r2,255
 8002f6c:	1885883a 	add	r2,r3,r2
 8002f70:	d0a71115 	stw	r2,-25532(gp)
            EtherCard::copyIp(EtherCard::dnsip, ptr);
            break;
        case DHCP_OPT_LEASE_TIME:
        case DHCP_OPT_RENEWAL_TIME:
            leaseTime = 0;
            for (byte i = 0; i<4; i++)
 8002f74:	e0bffb43 	ldbu	r2,-19(fp)
 8002f78:	10800044 	addi	r2,r2,1
 8002f7c:	e0bffb45 	stb	r2,-19(fp)
 8002f80:	003ff006 	br	8002f44 <_ZL16process_dhcp_ackt+0xec>
                leaseTime = (leaseTime << 8) + ptr[i];
            if (leaseTime != DHCP_INFINITE_LEASE) {
 8002f84:	d0a71117 	ldw	r2,-25532(gp)
 8002f88:	10bfffe0 	cmpeqi	r2,r2,-1
 8002f8c:	1000221e 	bne	r2,zero,8003018 <_ZL16process_dhcp_ackt+0x1c0>
                leaseTime *= 1000;      // milliseconds
 8002f90:	d0a71117 	ldw	r2,-25532(gp)
 8002f94:	0140fa04 	movi	r5,1000
 8002f98:	1009883a 	mov	r4,r2
 8002f9c:	8007e400 	call	8007e40 <__mulsi3>
 8002fa0:	d0a71115 	stw	r2,-25532(gp)
            }
            break;
 8002fa4:	00001c06 	br	8003018 <_ZL16process_dhcp_ackt+0x1c0>
        case DHCP_OPT_END:
            done = true;
 8002fa8:	00800044 	movi	r2,1
 8002fac:	e0bffb05 	stb	r2,-20(fp)
            break;
 8002fb0:	00001a06 	br	800301c <_ZL16process_dhcp_ackt+0x1c4>
        default: {
            // Is is a custom configured option?
            if (dhcpCustomOptionList) {
 8002fb4:	d0a71317 	ldw	r2,-25524(gp)
 8002fb8:	10001826 	beq	r2,zero,800301c <_ZL16process_dhcp_ackt+0x1c4>
                uint8_t *p = dhcpCustomOptionList;
 8002fbc:	d0a71317 	ldw	r2,-25524(gp)
 8002fc0:	e0bffc15 	stw	r2,-16(fp)
                while (*p != 0) {
 8002fc4:	e0bffc17 	ldw	r2,-16(fp)
 8002fc8:	10800003 	ldbu	r2,0(r2)
 8002fcc:	10803fcc 	andi	r2,r2,255
 8002fd0:	10001226 	beq	r2,zero,800301c <_ZL16process_dhcp_ackt+0x1c4>
                    if (option == *p) {
 8002fd4:	e0bffc17 	ldw	r2,-16(fp)
 8002fd8:	10800003 	ldbu	r2,0(r2)
 8002fdc:	10c03fcc 	andi	r3,r2,255
 8002fe0:	e0bffe03 	ldbu	r2,-8(fp)
 8002fe4:	1880081e 	bne	r3,r2,8003008 <_ZL16process_dhcp_ackt+0x1b0>
                        dhcpCustomOptionCallback(option, ptr, optionLen);
 8002fe8:	d0a71417 	ldw	r2,-25520(gp)
 8002fec:	e0fffe03 	ldbu	r3,-8(fp)
 8002ff0:	e13ffe43 	ldbu	r4,-7(fp)
 8002ff4:	200d883a 	mov	r6,r4
 8002ff8:	e17ffa17 	ldw	r5,-24(fp)
 8002ffc:	1809883a 	mov	r4,r3
 8003000:	103ee83a 	callr	r2
                        break;
 8003004:	00000506 	br	800301c <_ZL16process_dhcp_ackt+0x1c4>
                    }
                    p++;
 8003008:	e0bffc17 	ldw	r2,-16(fp)
 800300c:	10800044 	addi	r2,r2,1
 8003010:	e0bffc15 	stw	r2,-16(fp)
            break;
        default: {
            // Is is a custom configured option?
            if (dhcpCustomOptionList) {
                uint8_t *p = dhcpCustomOptionList;
                while (*p != 0) {
 8003014:	003feb06 	br	8002fc4 <_ZL16process_dhcp_ackt+0x16c>
            for (byte i = 0; i<4; i++)
                leaseTime = (leaseTime << 8) + ptr[i];
            if (leaseTime != DHCP_INFINITE_LEASE) {
                leaseTime *= 1000;      // milliseconds
            }
            break;
 8003018:	0001883a 	nop
                    p++;
                }
            }
        }
    }
    ptr += optionLen;
 800301c:	e0bffe43 	ldbu	r2,-7(fp)
 8003020:	e0fffa17 	ldw	r3,-24(fp)
 8003024:	1885883a 	add	r2,r3,r2
 8003028:	e0bffa15 	stw	r2,-24(fp)
}
while (!done && ptr < gPB + len);
 800302c:	e0bffb03 	ldbu	r2,-20(fp)
 8003030:	1000071e 	bne	r2,zero,8003050 <_ZL16process_dhcp_ackt+0x1f8>
 8003034:	e0ffff0b 	ldhu	r3,-4(fp)
 8003038:	008200b4 	movhi	r2,2050
 800303c:	10afa004 	addi	r2,r2,-16768
 8003040:	1885883a 	add	r2,r3,r2
 8003044:	e0fffa17 	ldw	r3,-24(fp)
 8003048:	1880012e 	bgeu	r3,r2,8003050 <_ZL16process_dhcp_ackt+0x1f8>
    EtherCard::copyIp(EtherCard::myip, dhcpPtr->yiaddr);

    // Scan through variable length option list identifying options we want
    byte *ptr = (byte*) (dhcpPtr + 1) + 4;
    bool done = false;
    do {
 800304c:	003f9406 	br	8002ea0 <_ZL16process_dhcp_ackt+0x48>
        }
    }
    ptr += optionLen;
}
while (!done && ptr < gPB + len);
}
 8003050:	0001883a 	nop
 8003054:	e037883a 	mov	sp,fp
 8003058:	dfc00117 	ldw	ra,4(sp)
 800305c:	df000017 	ldw	fp,0(sp)
 8003060:	dec00204 	addi	sp,sp,8
 8003064:	f800283a 	ret

08003068 <_ZL26dhcp_received_message_typeth>:

static bool dhcp_received_message_type (uint16_t len, byte msgType) {
 8003068:	defff904 	addi	sp,sp,-28
 800306c:	dfc00615 	stw	ra,24(sp)
 8003070:	df000515 	stw	fp,20(sp)
 8003074:	df000504 	addi	fp,sp,20
 8003078:	2007883a 	mov	r3,r4
 800307c:	2805883a 	mov	r2,r5
 8003080:	e0fffe0d 	sth	r3,-8(fp)
 8003084:	e0bfff05 	stb	r2,-4(fp)
    // Map struct onto payload
    DHCPdata *dhcpPtr = (DHCPdata*) (gPB + UDP_DATA_P);
 8003088:	008200b4 	movhi	r2,2050
 800308c:	10afaa84 	addi	r2,r2,-16726
 8003090:	e0bffc15 	stw	r2,-16(fp)
//    	for(int i = 0; i < len; i++)
//    		printf("%d (%x), ", gPB[i], i);
//    	printf("\n");
//    }

    if (len >= 70 && gPB[UDP_SRC_PORT_L_P] == DHCP_SERVER_PORT &&
 8003094:	e0bffe0b 	ldhu	r2,-8(fp)
 8003098:	108011b0 	cmpltui	r2,r2,70
 800309c:	1000381e 	bne	r2,zero,8003180 <_ZL26dhcp_received_message_typeth+0x118>
 80030a0:	008200b4 	movhi	r2,2050
 80030a4:	10afa004 	addi	r2,r2,-16768
 80030a8:	108008c3 	ldbu	r2,35(r2)
 80030ac:	10803fcc 	andi	r2,r2,255
 80030b0:	108010d8 	cmpnei	r2,r2,67
 80030b4:	1000321e 	bne	r2,zero,8003180 <_ZL26dhcp_received_message_typeth+0x118>
            dhcpPtr->xid == currentXid ) {
 80030b8:	e0bffc17 	ldw	r2,-16(fp)
 80030bc:	10c00117 	ldw	r3,4(r2)
 80030c0:	d0a70e17 	ldw	r2,-25544(gp)
//    	for(int i = 0; i < len; i++)
//    		printf("%d (%x), ", gPB[i], i);
//    	printf("\n");
//    }

    if (len >= 70 && gPB[UDP_SRC_PORT_L_P] == DHCP_SERVER_PORT &&
 80030c4:	18802e1e 	bne	r3,r2,8003180 <_ZL26dhcp_received_message_typeth+0x118>
            dhcpPtr->xid == currentXid ) {

        byte *ptr = (byte*) (dhcpPtr + 1) + 4;
 80030c8:	e0bffc17 	ldw	r2,-16(fp)
 80030cc:	10803c04 	addi	r2,r2,240
 80030d0:	e0bffb15 	stw	r2,-20(fp)
        do {
            byte option = *ptr++;
 80030d4:	e0bffb17 	ldw	r2,-20(fp)
 80030d8:	10c00044 	addi	r3,r2,1
 80030dc:	e0fffb15 	stw	r3,-20(fp)
 80030e0:	10800003 	ldbu	r2,0(r2)
 80030e4:	e0bffd05 	stb	r2,-12(fp)
            byte optionLen = *ptr++;
 80030e8:	e0bffb17 	ldw	r2,-20(fp)
 80030ec:	10c00044 	addi	r3,r2,1
 80030f0:	e0fffb15 	stw	r3,-20(fp)
 80030f4:	10800003 	ldbu	r2,0(r2)
 80030f8:	e0bffd45 	stb	r2,-11(fp)
            printf("option: %x, msg: %x\n", option, *ptr);
 80030fc:	e0fffd03 	ldbu	r3,-12(fp)
 8003100:	e0bffb17 	ldw	r2,-20(fp)
 8003104:	10800003 	ldbu	r2,0(r2)
 8003108:	10803fcc 	andi	r2,r2,255
 800310c:	100d883a 	mov	r6,r2
 8003110:	180b883a 	mov	r5,r3
 8003114:	010200b4 	movhi	r4,2050
 8003118:	21205b04 	addi	r4,r4,-32404
 800311c:	80082440 	call	8008244 <printf>
            if(option == DHCP_OPT_MESSAGE_TYPE && *ptr == msgType ) {
 8003120:	e0bffd03 	ldbu	r2,-12(fp)
 8003124:	10800d58 	cmpnei	r2,r2,53
 8003128:	10000a1e 	bne	r2,zero,8003154 <_ZL26dhcp_received_message_typeth+0xec>
 800312c:	e0bffb17 	ldw	r2,-20(fp)
 8003130:	10800003 	ldbu	r2,0(r2)
 8003134:	10c03fcc 	andi	r3,r2,255
 8003138:	e0bfff03 	ldbu	r2,-4(fp)
 800313c:	1880051e 	bne	r3,r2,8003154 <_ZL26dhcp_received_message_typeth+0xec>
            	printf("returning true in received message\n");
 8003140:	010200b4 	movhi	r4,2050
 8003144:	21206104 	addi	r4,r4,-32380
 8003148:	80083600 	call	8008360 <puts>
                return true;
 800314c:	00800044 	movi	r2,1
 8003150:	00000c06 	br	8003184 <_ZL26dhcp_received_message_typeth+0x11c>
            }
            ptr += optionLen;
 8003154:	e0bffd43 	ldbu	r2,-11(fp)
 8003158:	e0fffb17 	ldw	r3,-20(fp)
 800315c:	1885883a 	add	r2,r3,r2
 8003160:	e0bffb15 	stw	r2,-20(fp)
        } while (ptr < gPB + len);
 8003164:	e0fffe0b 	ldhu	r3,-8(fp)
 8003168:	008200b4 	movhi	r2,2050
 800316c:	10afa004 	addi	r2,r2,-16768
 8003170:	1885883a 	add	r2,r3,r2
 8003174:	e0fffb17 	ldw	r3,-20(fp)
 8003178:	1880012e 	bgeu	r3,r2,8003180 <_ZL26dhcp_received_message_typeth+0x118>

    if (len >= 70 && gPB[UDP_SRC_PORT_L_P] == DHCP_SERVER_PORT &&
            dhcpPtr->xid == currentXid ) {

        byte *ptr = (byte*) (dhcpPtr + 1) + 4;
        do {
 800317c:	003fd506 	br	80030d4 <_ZL26dhcp_received_message_typeth+0x6c>
                return true;
            }
            ptr += optionLen;
        } while (ptr < gPB + len);
    }
    return false;
 8003180:	0005883a 	mov	r2,zero
}
 8003184:	e037883a 	mov	sp,fp
 8003188:	dfc00117 	ldw	ra,4(sp)
 800318c:	df000017 	ldw	fp,0(sp)
 8003190:	dec00204 	addi	sp,sp,8
 8003194:	f800283a 	ret

08003198 <_ZL10toAsciiHexh>:

static char toAsciiHex(byte b) {
 8003198:	defffd04 	addi	sp,sp,-12
 800319c:	df000215 	stw	fp,8(sp)
 80031a0:	df000204 	addi	fp,sp,8
 80031a4:	2005883a 	mov	r2,r4
 80031a8:	e0bfff05 	stb	r2,-4(fp)
    char c = b & 0x0f;
 80031ac:	e0bfff03 	ldbu	r2,-4(fp)
 80031b0:	108003cc 	andi	r2,r2,15
 80031b4:	e0bffe05 	stb	r2,-8(fp)
    c += (c <= 9) ? '0' : 'A'-10;
 80031b8:	e0bffe07 	ldb	r2,-8(fp)
 80031bc:	10800288 	cmpgei	r2,r2,10
 80031c0:	1000021e 	bne	r2,zero,80031cc <_ZL10toAsciiHexh+0x34>
 80031c4:	00800c04 	movi	r2,48
 80031c8:	00000106 	br	80031d0 <_ZL10toAsciiHexh+0x38>
 80031cc:	00800dc4 	movi	r2,55
 80031d0:	e0fffe03 	ldbu	r3,-8(fp)
 80031d4:	10c5883a 	add	r2,r2,r3
 80031d8:	e0bffe05 	stb	r2,-8(fp)
    return c;
 80031dc:	e0bffe03 	ldbu	r2,-8(fp)
}
 80031e0:	e037883a 	mov	sp,fp
 80031e4:	df000017 	ldw	fp,0(sp)
 80031e8:	dec00104 	addi	sp,sp,4
 80031ec:	f800283a 	ret

080031f0 <_ZN9EtherCard9dhcpSetupEPKcb>:

bool EtherCard::dhcpSetup (const char *hname, bool fromRam) {
 80031f0:	defffa04 	addi	sp,sp,-24
 80031f4:	dfc00515 	stw	ra,20(sp)
 80031f8:	df000415 	stw	fp,16(sp)
 80031fc:	dc000315 	stw	r16,12(sp)
 8003200:	df000404 	addi	fp,sp,16
 8003204:	e13ffd15 	stw	r4,-12(fp)
 8003208:	2805883a 	mov	r2,r5
 800320c:	e0bffe05 	stb	r2,-8(fp)
    // Use during setup, as this discards all incoming requests until it returns.
    // That shouldn't be a problem, because we don't have an IPaddress yet.
    // Will try 60 secs to obtain DHCP-lease.

    using_dhcp = true;
 8003210:	00800044 	movi	r2,1
 8003214:	d0a70b45 	stb	r2,-25555(gp)

    if(hname != NULL) {
 8003218:	e0bffd17 	ldw	r2,-12(fp)
 800321c:	10000c26 	beq	r2,zero,8003250 <_ZN9EtherCard9dhcpSetupEPKcb+0x60>
        if(fromRam) {
 8003220:	e0bffe03 	ldbu	r2,-8(fp)
 8003224:	10000626 	beq	r2,zero,8003240 <_ZN9EtherCard9dhcpSetupEPKcb+0x50>
            strncpy(hostname, hname, DHCP_HOSTNAME_MAX_LEN);
 8003228:	01800804 	movi	r6,32
 800322c:	e17ffd17 	ldw	r5,-12(fp)
 8003230:	010200b4 	movhi	r4,2050
 8003234:	21219504 	addi	r4,r4,-31148
 8003238:	800856c0 	call	800856c <strncpy>
 800323c:	00002006 	br	80032c0 <_ZN9EtherCard9dhcpSetupEPKcb+0xd0>
        } else {
            printf("BAD THING HAPPENED IN dhcpSetup\n");
 8003240:	010200b4 	movhi	r4,2050
 8003244:	21206a04 	addi	r4,r4,-32344
 8003248:	80083600 	call	8008360 <puts>
 800324c:	00001c06 	br	80032c0 <_ZN9EtherCard9dhcpSetupEPKcb+0xd0>
        }
    } else {
        // Set a unique hostname, use Arduino-?? with last octet of mac address
        hostname[strlen(hostname) - 2] = toAsciiHex(mymac[5] >> 4);   // Appends mac to last 2 digits of the hostname
 8003250:	010200b4 	movhi	r4,2050
 8003254:	21219504 	addi	r4,r4,-31148
 8003258:	80084040 	call	8008404 <strlen>
 800325c:	143fff84 	addi	r16,r2,-2
 8003260:	d0a70403 	ldbu	r2,-25584(gp)
 8003264:	10803fcc 	andi	r2,r2,255
 8003268:	1005d13a 	srai	r2,r2,4
 800326c:	10803fcc 	andi	r2,r2,255
 8003270:	1009883a 	mov	r4,r2
 8003274:	80031980 	call	8003198 <_ZL10toAsciiHexh>
 8003278:	1007883a 	mov	r3,r2
 800327c:	008200b4 	movhi	r2,2050
 8003280:	10a19504 	addi	r2,r2,-31148
 8003284:	1405883a 	add	r2,r2,r16
 8003288:	10c00005 	stb	r3,0(r2)
        hostname[strlen(hostname) - 1] = toAsciiHex(mymac[5]);   // Even if it's smaller than the maximum <thus, strlen(hostname)>
 800328c:	010200b4 	movhi	r4,2050
 8003290:	21219504 	addi	r4,r4,-31148
 8003294:	80084040 	call	8008404 <strlen>
 8003298:	143fffc4 	addi	r16,r2,-1
 800329c:	d0a70403 	ldbu	r2,-25584(gp)
 80032a0:	10803fcc 	andi	r2,r2,255
 80032a4:	1009883a 	mov	r4,r2
 80032a8:	80031980 	call	8003198 <_ZL10toAsciiHexh>
 80032ac:	1007883a 	mov	r3,r2
 80032b0:	008200b4 	movhi	r2,2050
 80032b4:	10a19504 	addi	r2,r2,-31148
 80032b8:	1405883a 	add	r2,r2,r16
 80032bc:	10c00005 	stb	r3,0(r2)
    }

    dhcpState = DHCP_STATE_INIT;
 80032c0:	d0270d05 	stb	zero,-25548(gp)
    uint16_t start = millis();
 80032c4:	800295c0 	call	800295c <_Z6millisv>
 80032c8:	e0bffc0d 	sth	r2,-16(fp)

    while (dhcpState != DHCP_STATE_BOUND && uint16_t(millis()) - start < 60000) {
 80032cc:	d0a70d03 	ldbu	r2,-25548(gp)
 80032d0:	10803fcc 	andi	r2,r2,255
 80032d4:	108000e0 	cmpeqi	r2,r2,3
 80032d8:	1000081e 	bne	r2,zero,80032fc <_ZN9EtherCard9dhcpSetupEPKcb+0x10c>
 80032dc:	800295c0 	call	800295c <_Z6millisv>
 80032e0:	10ffffcc 	andi	r3,r2,65535
 80032e4:	e0bffc0b 	ldhu	r2,-16(fp)
 80032e8:	1885c83a 	sub	r2,r3,r2
 80032ec:	00fa97d4 	movui	r3,59999
 80032f0:	18800216 	blt	r3,r2,80032fc <_ZN9EtherCard9dhcpSetupEPKcb+0x10c>
 80032f4:	00800044 	movi	r2,1
 80032f8:	00000106 	br	8003300 <_ZN9EtherCard9dhcpSetupEPKcb+0x110>
 80032fc:	0005883a 	mov	r2,zero
 8003300:	10803fcc 	andi	r2,r2,255
 8003304:	10000826 	beq	r2,zero,8003328 <_ZN9EtherCard9dhcpSetupEPKcb+0x138>
        if (isLinkUp()) {
 8003308:	800433c0 	call	800433c <_ZN8ENC28J608isLinkUpEv>
 800330c:	10803fcc 	andi	r2,r2,255
 8003310:	103fee26 	beq	r2,zero,80032cc <_ZN9EtherCard9dhcpSetupEPKcb+0xdc>
        	DhcpStateMachine(packetReceive());
 8003314:	80045cc0 	call	80045cc <_ZN8ENC28J6013packetReceiveEv>
 8003318:	10bfffcc 	andi	r2,r2,65535
 800331c:	1009883a 	mov	r4,r2
 8003320:	80034000 	call	8003400 <_ZN9EtherCard16DhcpStateMachineEt>
    }

    dhcpState = DHCP_STATE_INIT;
    uint16_t start = millis();

    while (dhcpState != DHCP_STATE_BOUND && uint16_t(millis()) - start < 60000) {
 8003324:	003fe906 	br	80032cc <_ZN9EtherCard9dhcpSetupEPKcb+0xdc>
        if (isLinkUp()) {
        	DhcpStateMachine(packetReceive());
        }
    }
    updateBroadcastAddress();
 8003328:	800642c0 	call	800642c <_ZN9EtherCard22updateBroadcastAddressEv>
    delaycnt = 0;
 800332c:	d0270c0d 	sth	zero,-25552(gp)
    printf("Finished dhcpSetup... returning %d (%d)\n", (dhcpState == DHCP_STATE_BOUND), dhcpState);
 8003330:	d0a70d03 	ldbu	r2,-25548(gp)
 8003334:	10803fcc 	andi	r2,r2,255
 8003338:	108000e0 	cmpeqi	r2,r2,3
 800333c:	10803fcc 	andi	r2,r2,255
 8003340:	d0e70d03 	ldbu	r3,-25548(gp)
 8003344:	18c03fcc 	andi	r3,r3,255
 8003348:	180d883a 	mov	r6,r3
 800334c:	100b883a 	mov	r5,r2
 8003350:	010200b4 	movhi	r4,2050
 8003354:	21207204 	addi	r4,r4,-32312
 8003358:	80082440 	call	8008244 <printf>
    return dhcpState == DHCP_STATE_BOUND;
 800335c:	d0a70d03 	ldbu	r2,-25548(gp)
 8003360:	10803fcc 	andi	r2,r2,255
 8003364:	108000e0 	cmpeqi	r2,r2,3
}
 8003368:	e6ffff04 	addi	sp,fp,-4
 800336c:	dfc00217 	ldw	ra,8(sp)
 8003370:	df000117 	ldw	fp,4(sp)
 8003374:	dc000017 	ldw	r16,0(sp)
 8003378:	dec00304 	addi	sp,sp,12
 800337c:	f800283a 	ret

08003380 <_ZN9EtherCard21dhcpAddOptionCallbackEhPFvhPKhhE>:

void EtherCard::dhcpAddOptionCallback(uint8_t option, DhcpOptionCallback callback)
{
 8003380:	defffd04 	addi	sp,sp,-12
 8003384:	df000215 	stw	fp,8(sp)
 8003388:	df000204 	addi	fp,sp,8
 800338c:	2005883a 	mov	r2,r4
 8003390:	e17fff15 	stw	r5,-4(fp)
 8003394:	e0bffe05 	stb	r2,-8(fp)
    static uint8_t optionList[2];
    optionList[0] = option;
 8003398:	e0bffe03 	ldbu	r2,-8(fp)
 800339c:	d0a71505 	stb	r2,-25516(gp)
    optionList[1] = 0;
 80033a0:	d0271545 	stb	zero,-25515(gp)
    dhcpCustomOptionList = optionList;
 80033a4:	d0a71504 	addi	r2,gp,-25516
 80033a8:	d0a71315 	stw	r2,-25524(gp)
    dhcpCustomOptionCallback = callback;
 80033ac:	e0bfff17 	ldw	r2,-4(fp)
 80033b0:	d0a71415 	stw	r2,-25520(gp)
}
 80033b4:	0001883a 	nop
 80033b8:	e037883a 	mov	sp,fp
 80033bc:	df000017 	ldw	fp,0(sp)
 80033c0:	dec00104 	addi	sp,sp,4
 80033c4:	f800283a 	ret

080033c8 <_ZN9EtherCard21dhcpAddOptionCallbackEPhPFvhPKhhE>:

void EtherCard::dhcpAddOptionCallback(uint8_t* optionlist, DhcpOptionCallback callback)
{
 80033c8:	defffd04 	addi	sp,sp,-12
 80033cc:	df000215 	stw	fp,8(sp)
 80033d0:	df000204 	addi	fp,sp,8
 80033d4:	e13ffe15 	stw	r4,-8(fp)
 80033d8:	e17fff15 	stw	r5,-4(fp)
    dhcpCustomOptionList = optionlist;
 80033dc:	e0bffe17 	ldw	r2,-8(fp)
 80033e0:	d0a71315 	stw	r2,-25524(gp)
    dhcpCustomOptionCallback = callback;
 80033e4:	e0bfff17 	ldw	r2,-4(fp)
 80033e8:	d0a71415 	stw	r2,-25520(gp)
}
 80033ec:	0001883a 	nop
 80033f0:	e037883a 	mov	sp,fp
 80033f4:	df000017 	ldw	fp,0(sp)
 80033f8:	dec00104 	addi	sp,sp,4
 80033fc:	f800283a 	ret

08003400 <_ZN9EtherCard16DhcpStateMachineEt>:

void EtherCard::DhcpStateMachine (uint16_t len)
{
 8003400:	defffc04 	addi	sp,sp,-16
 8003404:	dfc00315 	stw	ra,12(sp)
 8003408:	df000215 	stw	fp,8(sp)
 800340c:	df000204 	addi	fp,sp,8
 8003410:	2005883a 	mov	r2,r4
 8003414:	e0bfff0d 	sth	r2,-4(fp)
    	printf("Renew\n");
        break;
    }
#endif

    switch (dhcpState) {
 8003418:	d0a70d03 	ldbu	r2,-25548(gp)
 800341c:	10803fcc 	andi	r2,r2,255
 8003420:	10c00168 	cmpgeui	r3,r2,5
 8003424:	18006c1e 	bne	r3,zero,80035d8 <_ZN9EtherCard16DhcpStateMachineEt+0x1d8>
 8003428:	100690ba 	slli	r3,r2,2
 800342c:	00820034 	movhi	r2,2048
 8003430:	108d1004 	addi	r2,r2,13376
 8003434:	1885883a 	add	r2,r3,r2
 8003438:	10800017 	ldw	r2,0(r2)
 800343c:	1000683a 	jmp	r2
 8003440:	080034a8 	cmpgeui	zero,at,210
 8003444:	080034e4 	muli	zero,at,211
 8003448:	0800354c 	andi	zero,at,213
 800344c:	08003454 	ori	zero,at,209
 8003450:	0800354c 	andi	zero,at,213

    case DHCP_STATE_BOUND:
        //!@todo Due to millis() wrap-around, DHCP renewal may not work if leaseTime is larger than 49days
        if (leaseTime != DHCP_INFINITE_LEASE && millis() - leaseStart >= leaseTime) {
 8003454:	d0a71117 	ldw	r2,-25532(gp)
 8003458:	10bfffe0 	cmpeqi	r2,r2,-1
 800345c:	1000081e 	bne	r2,zero,8003480 <_ZN9EtherCard16DhcpStateMachineEt+0x80>
 8003460:	800295c0 	call	800295c <_Z6millisv>
 8003464:	1007883a 	mov	r3,r2
 8003468:	d0a71017 	ldw	r2,-25536(gp)
 800346c:	1887c83a 	sub	r3,r3,r2
 8003470:	d0a71117 	ldw	r2,-25532(gp)
 8003474:	18800236 	bltu	r3,r2,8003480 <_ZN9EtherCard16DhcpStateMachineEt+0x80>
 8003478:	00800044 	movi	r2,1
 800347c:	00000106 	br	8003484 <_ZN9EtherCard16DhcpStateMachineEt+0x84>
 8003480:	0005883a 	mov	r2,zero
 8003484:	10803fcc 	andi	r2,r2,255
 8003488:	10004e26 	beq	r2,zero,80035c4 <_ZN9EtherCard16DhcpStateMachineEt+0x1c4>
            send_dhcp_message(myip);
 800348c:	d1270444 	addi	r4,gp,-25583
 8003490:	8002a940 	call	8002a94 <_ZL17send_dhcp_messagePh>
            dhcpState = DHCP_STATE_RENEWING;
 8003494:	00800104 	movi	r2,4
 8003498:	d0a70d05 	stb	r2,-25548(gp)
            stateTimer = millis();
 800349c:	800295c0 	call	800295c <_Z6millisv>
 80034a0:	d0a70f15 	stw	r2,-25540(gp)
        }
        break;
 80034a4:	00004706 	br	80035c4 <_ZN9EtherCard16DhcpStateMachineEt+0x1c4>

    case DHCP_STATE_INIT:
        currentXid = millis();
 80034a8:	800295c0 	call	800295c <_Z6millisv>
 80034ac:	d0a70e15 	stw	r2,-25544(gp)
        memset(myip,0,IP_LEN); // force ip 0.0.0.0
 80034b0:	01800104 	movi	r6,4
 80034b4:	000b883a 	mov	r5,zero
 80034b8:	d1270444 	addi	r4,gp,-25583
 80034bc:	80080ec0 	call	80080ec <memset>
        send_dhcp_message(NULL);
 80034c0:	0009883a 	mov	r4,zero
 80034c4:	8002a940 	call	8002a94 <_ZL17send_dhcp_messagePh>
        enableBroadcast(true); //Temporarily enable broadcasts
 80034c8:	01000044 	movi	r4,1
 80034cc:	80048600 	call	8004860 <_ZN8ENC28J6015enableBroadcastEb>
        dhcpState = DHCP_STATE_SELECTING;
 80034d0:	00800044 	movi	r2,1
 80034d4:	d0a70d05 	stb	r2,-25548(gp)
        stateTimer = millis();
 80034d8:	800295c0 	call	800295c <_Z6millisv>
 80034dc:	d0a70f15 	stw	r2,-25540(gp)
        break;
 80034e0:	00003d06 	br	80035d8 <_ZN9EtherCard16DhcpStateMachineEt+0x1d8>

    case DHCP_STATE_SELECTING:
        if (dhcp_received_message_type(len, DHCP_OFFER)) {
 80034e4:	e0bfff0b 	ldhu	r2,-4(fp)
 80034e8:	01400084 	movi	r5,2
 80034ec:	1009883a 	mov	r4,r2
 80034f0:	80030680 	call	8003068 <_ZL26dhcp_received_message_typeth>
 80034f4:	10803fcc 	andi	r2,r2,255
 80034f8:	10000b26 	beq	r2,zero,8003528 <_ZN9EtherCard16DhcpStateMachineEt+0x128>
            uint8_t offeredip[IP_LEN];
            process_dhcp_offer(len, offeredip);
 80034fc:	e0bfff0b 	ldhu	r2,-4(fp)
 8003500:	e17ffe04 	addi	r5,fp,-8
 8003504:	1009883a 	mov	r4,r2
 8003508:	8002d840 	call	8002d84 <_ZL18process_dhcp_offertPh>
            send_dhcp_message(offeredip);
 800350c:	e13ffe04 	addi	r4,fp,-8
 8003510:	8002a940 	call	8002a94 <_ZL17send_dhcp_messagePh>
            dhcpState = DHCP_STATE_REQUESTING;
 8003514:	00800084 	movi	r2,2
 8003518:	d0a70d05 	stb	r2,-25548(gp)
            stateTimer = millis();
 800351c:	800295c0 	call	800295c <_Z6millisv>
 8003520:	d0a70f15 	stw	r2,-25540(gp)
        } else {
            if (millis() - stateTimer > DHCP_REQUEST_TIMEOUT) {
                dhcpState = DHCP_STATE_INIT;
            }
        }
        break;
 8003524:	00002906 	br	80035cc <_ZN9EtherCard16DhcpStateMachineEt+0x1cc>
            process_dhcp_offer(len, offeredip);
            send_dhcp_message(offeredip);
            dhcpState = DHCP_STATE_REQUESTING;
            stateTimer = millis();
        } else {
            if (millis() - stateTimer > DHCP_REQUEST_TIMEOUT) {
 8003528:	800295c0 	call	800295c <_Z6millisv>
 800352c:	1007883a 	mov	r3,r2
 8003530:	d0a70f17 	ldw	r2,-25540(gp)
 8003534:	1885c83a 	sub	r2,r3,r2
 8003538:	1089c468 	cmpgeui	r2,r2,10001
 800353c:	10803fcc 	andi	r2,r2,255
 8003540:	10002226 	beq	r2,zero,80035cc <_ZN9EtherCard16DhcpStateMachineEt+0x1cc>
                dhcpState = DHCP_STATE_INIT;
 8003544:	d0270d05 	stb	zero,-25548(gp)
            }
        }
        break;
 8003548:	00002006 	br	80035cc <_ZN9EtherCard16DhcpStateMachineEt+0x1cc>

    case DHCP_STATE_REQUESTING:
    case DHCP_STATE_RENEWING:
        if (dhcp_received_message_type(len, DHCP_ACK)) {
 800354c:	e0bfff0b 	ldhu	r2,-4(fp)
 8003550:	01400144 	movi	r5,5
 8003554:	1009883a 	mov	r4,r2
 8003558:	80030680 	call	8003068 <_ZL26dhcp_received_message_typeth>
 800355c:	10803fcc 	andi	r2,r2,255
 8003560:	10000f26 	beq	r2,zero,80035a0 <_ZN9EtherCard16DhcpStateMachineEt+0x1a0>
            disableBroadcast(true); //Disable broadcast after temporary enable
 8003564:	01000044 	movi	r4,1
 8003568:	80048c40 	call	80048c4 <_ZN8ENC28J6016disableBroadcastEb>
            process_dhcp_ack(len);
 800356c:	e0bfff0b 	ldhu	r2,-4(fp)
 8003570:	1009883a 	mov	r4,r2
 8003574:	8002e580 	call	8002e58 <_ZL16process_dhcp_ackt>
            leaseStart = millis();
 8003578:	800295c0 	call	800295c <_Z6millisv>
 800357c:	d0a71015 	stw	r2,-25536(gp)
            if (gwip[0] != 0) setGwIp(gwip); // why is this? because it initiates an arp request
 8003580:	d0a70743 	ldbu	r2,-25571(gp)
 8003584:	10803fcc 	andi	r2,r2,255
 8003588:	10000226 	beq	r2,zero,8003594 <_ZN9EtherCard16DhcpStateMachineEt+0x194>
 800358c:	d1270744 	addi	r4,gp,-25571
 8003590:	80063e80 	call	80063e8 <_ZN9EtherCard7setGwIpEPKh>
            dhcpState = DHCP_STATE_BOUND;
 8003594:	008000c4 	movi	r2,3
 8003598:	d0a70d05 	stb	r2,-25548(gp)
        } else {
            if (millis() - stateTimer > DHCP_REQUEST_TIMEOUT) {
                dhcpState = DHCP_STATE_INIT;
            }
        }
        break;
 800359c:	00000d06 	br	80035d4 <_ZN9EtherCard16DhcpStateMachineEt+0x1d4>
            process_dhcp_ack(len);
            leaseStart = millis();
            if (gwip[0] != 0) setGwIp(gwip); // why is this? because it initiates an arp request
            dhcpState = DHCP_STATE_BOUND;
        } else {
            if (millis() - stateTimer > DHCP_REQUEST_TIMEOUT) {
 80035a0:	800295c0 	call	800295c <_Z6millisv>
 80035a4:	1007883a 	mov	r3,r2
 80035a8:	d0a70f17 	ldw	r2,-25540(gp)
 80035ac:	1885c83a 	sub	r2,r3,r2
 80035b0:	1089c468 	cmpgeui	r2,r2,10001
 80035b4:	10803fcc 	andi	r2,r2,255
 80035b8:	10000626 	beq	r2,zero,80035d4 <_ZN9EtherCard16DhcpStateMachineEt+0x1d4>
                dhcpState = DHCP_STATE_INIT;
 80035bc:	d0270d05 	stb	zero,-25548(gp)
            }
        }
        break;
 80035c0:	00000406 	br	80035d4 <_ZN9EtherCard16DhcpStateMachineEt+0x1d4>
        if (leaseTime != DHCP_INFINITE_LEASE && millis() - leaseStart >= leaseTime) {
            send_dhcp_message(myip);
            dhcpState = DHCP_STATE_RENEWING;
            stateTimer = millis();
        }
        break;
 80035c4:	0001883a 	nop
 80035c8:	00000306 	br	80035d8 <_ZN9EtherCard16DhcpStateMachineEt+0x1d8>
        } else {
            if (millis() - stateTimer > DHCP_REQUEST_TIMEOUT) {
                dhcpState = DHCP_STATE_INIT;
            }
        }
        break;
 80035cc:	0001883a 	nop
 80035d0:	00000106 	br	80035d8 <_ZN9EtherCard16DhcpStateMachineEt+0x1d8>
        } else {
            if (millis() - stateTimer > DHCP_REQUEST_TIMEOUT) {
                dhcpState = DHCP_STATE_INIT;
            }
        }
        break;
 80035d4:	0001883a 	nop

    }
}
 80035d8:	0001883a 	nop
 80035dc:	e037883a 	mov	sp,fp
 80035e0:	dfc00117 	ldw	ra,4(sp)
 80035e4:	df000017 	ldw	fp,0(sp)
 80035e8:	dec00204 	addi	sp,sp,8
 80035ec:	f800283a 	ret

080035f0 <_ZL10dnsRequestPKcb>:
#define DNSCLIENT_SRC_PORT_H 0xE0

#define DNS_TYPE_A 1
#define DNS_CLASS_IN 1

static void dnsRequest (const char *hostname, bool fromRam) {
 80035f0:	defffa04 	addi	sp,sp,-24
 80035f4:	dfc00515 	stw	ra,20(sp)
 80035f8:	df000415 	stw	fp,16(sp)
 80035fc:	df000404 	addi	fp,sp,16
 8003600:	e13ffe15 	stw	r4,-8(fp)
 8003604:	2805883a 	mov	r2,r5
 8003608:	e0bfff05 	stb	r2,-4(fp)
    ++dnstid_l; // increment for next request, finally wrap
 800360c:	d0a71583 	ldbu	r2,-25514(gp)
 8003610:	10800044 	addi	r2,r2,1
 8003614:	d0a71585 	stb	r2,-25514(gp)
    if (ether.dnsip[0] == 0)
 8003618:	d0a70943 	ldbu	r2,-25563(gp)
 800361c:	10803fcc 	andi	r2,r2,255
 8003620:	1000041e 	bne	r2,zero,8003634 <_ZL10dnsRequestPKcb+0x44>
        memset(ether.dnsip, 8, IP_LEN); // use 8.8.8.8 Google DNS as default
 8003624:	01800104 	movi	r6,4
 8003628:	01400204 	movi	r5,8
 800362c:	d1270944 	addi	r4,gp,-25563
 8003630:	80080ec0 	call	80080ec <memset>
    ether.udpPrepare((DNSCLIENT_SRC_PORT_H << 8) | dnstid_l, ether.dnsip, DNS_PORT);
 8003634:	d0a71583 	ldbu	r2,-25514(gp)
 8003638:	10c03fcc 	andi	r3,r2,255
 800363c:	00b80004 	movi	r2,-8192
 8003640:	1884b03a 	or	r2,r3,r2
 8003644:	10bfffcc 	andi	r2,r2,65535
 8003648:	01800d44 	movi	r6,53
 800364c:	d1670944 	addi	r5,gp,-25563
 8003650:	1009883a 	mov	r4,r2
 8003654:	8005da80 	call	8005da8 <_ZN9EtherCard10udpPrepareEtPKht>
    memset(gPB + UDP_DATA_P, 0, 12);
 8003658:	008200b4 	movhi	r2,2050
 800365c:	10afaa84 	addi	r2,r2,-16726
 8003660:	01800304 	movi	r6,12
 8003664:	000b883a 	mov	r5,zero
 8003668:	1009883a 	mov	r4,r2
 800366c:	80080ec0 	call	80080ec <memset>

    byte *p = gPB + UDP_DATA_P + 12;
 8003670:	008200b4 	movhi	r2,2050
 8003674:	10afad84 	addi	r2,r2,-16714
 8003678:	e0bffc15 	stw	r2,-16(fp)
    char c;
    do {
        byte n = 0;
 800367c:	e03ffd05 	stb	zero,-12(fp)
        for(;;) {
//            c = fromRam ? *hostname : pgm_read_byte(hostname);
        	c = *hostname;
 8003680:	e0bffe17 	ldw	r2,-8(fp)
 8003684:	10800003 	ldbu	r2,0(r2)
 8003688:	e0bffd45 	stb	r2,-11(fp)
            ++hostname;
 800368c:	e0bffe17 	ldw	r2,-8(fp)
 8003690:	10800044 	addi	r2,r2,1
 8003694:	e0bffe15 	stw	r2,-8(fp)
            if (c == '.' || c == 0)
 8003698:	e0bffd47 	ldb	r2,-11(fp)
 800369c:	10800ba0 	cmpeqi	r2,r2,46
 80036a0:	10000b1e 	bne	r2,zero,80036d0 <_ZL10dnsRequestPKcb+0xe0>
 80036a4:	e0bffd47 	ldb	r2,-11(fp)
 80036a8:	10000926 	beq	r2,zero,80036d0 <_ZL10dnsRequestPKcb+0xe0>
                break;
            p[++n] = c;
 80036ac:	e0bffd03 	ldbu	r2,-12(fp)
 80036b0:	10800044 	addi	r2,r2,1
 80036b4:	e0bffd05 	stb	r2,-12(fp)
 80036b8:	e0bffd03 	ldbu	r2,-12(fp)
 80036bc:	e0fffc17 	ldw	r3,-16(fp)
 80036c0:	1885883a 	add	r2,r3,r2
 80036c4:	e0fffd43 	ldbu	r3,-11(fp)
 80036c8:	10c00005 	stb	r3,0(r2)

    byte *p = gPB + UDP_DATA_P + 12;
    char c;
    do {
        byte n = 0;
        for(;;) {
 80036cc:	003fec06 	br	8003680 <_ZL10dnsRequestPKcb+0x90>
            ++hostname;
            if (c == '.' || c == 0)
                break;
            p[++n] = c;
        }
        *p++ = n;
 80036d0:	e0bffc17 	ldw	r2,-16(fp)
 80036d4:	10c00044 	addi	r3,r2,1
 80036d8:	e0fffc15 	stw	r3,-16(fp)
 80036dc:	e0fffd03 	ldbu	r3,-12(fp)
 80036e0:	10c00005 	stb	r3,0(r2)
        p += n;
 80036e4:	e0bffd03 	ldbu	r2,-12(fp)
 80036e8:	e0fffc17 	ldw	r3,-16(fp)
 80036ec:	1885883a 	add	r2,r3,r2
 80036f0:	e0bffc15 	stw	r2,-16(fp)
    } while (c != 0);
 80036f4:	e0bffd47 	ldb	r2,-11(fp)
 80036f8:	10000126 	beq	r2,zero,8003700 <_ZL10dnsRequestPKcb+0x110>
    ether.udpPrepare((DNSCLIENT_SRC_PORT_H << 8) | dnstid_l, ether.dnsip, DNS_PORT);
    memset(gPB + UDP_DATA_P, 0, 12);

    byte *p = gPB + UDP_DATA_P + 12;
    char c;
    do {
 80036fc:	003fdf06 	br	800367c <_ZL10dnsRequestPKcb+0x8c>
        }
        *p++ = n;
        p += n;
    } while (c != 0);

    *p++ = 0; // terminate with zero, means root domain.
 8003700:	e0bffc17 	ldw	r2,-16(fp)
 8003704:	10c00044 	addi	r3,r2,1
 8003708:	e0fffc15 	stw	r3,-16(fp)
 800370c:	10000005 	stb	zero,0(r2)
    *p++ = 0;
 8003710:	e0bffc17 	ldw	r2,-16(fp)
 8003714:	10c00044 	addi	r3,r2,1
 8003718:	e0fffc15 	stw	r3,-16(fp)
 800371c:	10000005 	stb	zero,0(r2)
    *p++ = DNS_TYPE_A;
 8003720:	e0bffc17 	ldw	r2,-16(fp)
 8003724:	10c00044 	addi	r3,r2,1
 8003728:	e0fffc15 	stw	r3,-16(fp)
 800372c:	00c00044 	movi	r3,1
 8003730:	10c00005 	stb	r3,0(r2)
    *p++ = 0;
 8003734:	e0bffc17 	ldw	r2,-16(fp)
 8003738:	10c00044 	addi	r3,r2,1
 800373c:	e0fffc15 	stw	r3,-16(fp)
 8003740:	10000005 	stb	zero,0(r2)
    *p++ = DNS_CLASS_IN;
 8003744:	e0bffc17 	ldw	r2,-16(fp)
 8003748:	10c00044 	addi	r3,r2,1
 800374c:	e0fffc15 	stw	r3,-16(fp)
 8003750:	00c00044 	movi	r3,1
 8003754:	10c00005 	stb	r3,0(r2)
    byte i = p - gPB - UDP_DATA_P;
 8003758:	e0bffc17 	ldw	r2,-16(fp)
 800375c:	1007883a 	mov	r3,r2
 8003760:	008200b4 	movhi	r2,2050
 8003764:	10afa004 	addi	r2,r2,-16768
 8003768:	1009883a 	mov	r4,r2
 800376c:	00bff584 	movi	r2,-42
 8003770:	1105c83a 	sub	r2,r2,r4
 8003774:	1885883a 	add	r2,r3,r2
 8003778:	e0bffd85 	stb	r2,-10(fp)
    gPB[UDP_DATA_P] = i;
 800377c:	008200b4 	movhi	r2,2050
 8003780:	10afa004 	addi	r2,r2,-16768
 8003784:	e0fffd83 	ldbu	r3,-10(fp)
 8003788:	10c00a85 	stb	r3,42(r2)
    gPB[UDP_DATA_P+1] = dnstid_l;
 800378c:	d0e71583 	ldbu	r3,-25514(gp)
 8003790:	008200b4 	movhi	r2,2050
 8003794:	10afa004 	addi	r2,r2,-16768
 8003798:	10c00ac5 	stb	r3,43(r2)
    gPB[UDP_DATA_P+2] = 1; // flags, standard recursive query
 800379c:	008200b4 	movhi	r2,2050
 80037a0:	10afa004 	addi	r2,r2,-16768
 80037a4:	00c00044 	movi	r3,1
 80037a8:	10c00b05 	stb	r3,44(r2)
    gPB[UDP_DATA_P+5] = 1; // 1 question
 80037ac:	008200b4 	movhi	r2,2050
 80037b0:	10afa004 	addi	r2,r2,-16768
 80037b4:	00c00044 	movi	r3,1
 80037b8:	10c00bc5 	stb	r3,47(r2)
    ether.udpTransmit(i);
 80037bc:	e0bffd83 	ldbu	r2,-10(fp)
 80037c0:	1009883a 	mov	r4,r2
 80037c4:	8005f300 	call	8005f30 <_ZN9EtherCard11udpTransmitEt>
}
 80037c8:	0001883a 	nop
 80037cc:	e037883a 	mov	sp,fp
 80037d0:	dfc00117 	ldw	ra,4(sp)
 80037d4:	df000017 	ldw	fp,0(sp)
 80037d8:	dec00204 	addi	sp,sp,8
 80037dc:	f800283a 	ret

080037e0 <_ZL17checkForDnsAnswert>:

static bool checkForDnsAnswer (uint16_t plen) {
 80037e0:	defffc04 	addi	sp,sp,-16
 80037e4:	dfc00315 	stw	ra,12(sp)
 80037e8:	df000215 	stw	fp,8(sp)
 80037ec:	df000204 	addi	fp,sp,8
 80037f0:	2005883a 	mov	r2,r4
 80037f4:	e0bfff0d 	sth	r2,-4(fp)
    byte *p = gPB + UDP_DATA_P; //start of UDP payload
 80037f8:	008200b4 	movhi	r2,2050
 80037fc:	10afaa84 	addi	r2,r2,-16726
 8003800:	e0bffe15 	stw	r2,-8(fp)
    if (plen < 70 || gPB[UDP_SRC_PORT_L_P] != DNS_PORT || //from DNS source port
 8003804:	e0bfff0b 	ldhu	r2,-4(fp)
 8003808:	108011b0 	cmpltui	r2,r2,70
 800380c:	10001a1e 	bne	r2,zero,8003878 <_ZL17checkForDnsAnswert+0x98>
 8003810:	008200b4 	movhi	r2,2050
 8003814:	10afa004 	addi	r2,r2,-16768
 8003818:	108008c3 	ldbu	r2,35(r2)
 800381c:	10803fcc 	andi	r2,r2,255
 8003820:	10800d58 	cmpnei	r2,r2,53
 8003824:	1000141e 	bne	r2,zero,8003878 <_ZL17checkForDnsAnswert+0x98>
            gPB[UDP_DST_PORT_H_P] != DNSCLIENT_SRC_PORT_H || //response to same port as we sent from (MSB)
 8003828:	008200b4 	movhi	r2,2050
 800382c:	10afa004 	addi	r2,r2,-16768
 8003830:	10800903 	ldbu	r2,36(r2)
    ether.udpTransmit(i);
}

static bool checkForDnsAnswer (uint16_t plen) {
    byte *p = gPB + UDP_DATA_P; //start of UDP payload
    if (plen < 70 || gPB[UDP_SRC_PORT_L_P] != DNS_PORT || //from DNS source port
 8003834:	10803fcc 	andi	r2,r2,255
 8003838:	10803818 	cmpnei	r2,r2,224
 800383c:	10000e1e 	bne	r2,zero,8003878 <_ZL17checkForDnsAnswert+0x98>
            gPB[UDP_DST_PORT_H_P] != DNSCLIENT_SRC_PORT_H || //response to same port as we sent from (MSB)
            gPB[UDP_DST_PORT_L_P] != dnstid_l || //response to same port as we sent from (LSB)
 8003840:	008200b4 	movhi	r2,2050
 8003844:	10afa004 	addi	r2,r2,-16768
 8003848:	10c00943 	ldbu	r3,37(r2)
 800384c:	d0a71583 	ldbu	r2,-25514(gp)
}

static bool checkForDnsAnswer (uint16_t plen) {
    byte *p = gPB + UDP_DATA_P; //start of UDP payload
    if (plen < 70 || gPB[UDP_SRC_PORT_L_P] != DNS_PORT || //from DNS source port
            gPB[UDP_DST_PORT_H_P] != DNSCLIENT_SRC_PORT_H || //response to same port as we sent from (MSB)
 8003850:	18c03fcc 	andi	r3,r3,255
 8003854:	10803fcc 	andi	r2,r2,255
 8003858:	1880071e 	bne	r3,r2,8003878 <_ZL17checkForDnsAnswert+0x98>
            gPB[UDP_DST_PORT_L_P] != dnstid_l || //response to same port as we sent from (LSB)
            p[1] != dnstid_l) //message id same as we sent
 800385c:	e0bffe17 	ldw	r2,-8(fp)
 8003860:	10800044 	addi	r2,r2,1
 8003864:	10c00003 	ldbu	r3,0(r2)
 8003868:	d0a71583 	ldbu	r2,-25514(gp)

static bool checkForDnsAnswer (uint16_t plen) {
    byte *p = gPB + UDP_DATA_P; //start of UDP payload
    if (plen < 70 || gPB[UDP_SRC_PORT_L_P] != DNS_PORT || //from DNS source port
            gPB[UDP_DST_PORT_H_P] != DNSCLIENT_SRC_PORT_H || //response to same port as we sent from (MSB)
            gPB[UDP_DST_PORT_L_P] != dnstid_l || //response to same port as we sent from (LSB)
 800386c:	18c03fcc 	andi	r3,r3,255
 8003870:	10803fcc 	andi	r2,r2,255
 8003874:	18800226 	beq	r3,r2,8003880 <_ZL17checkForDnsAnswert+0xa0>
            p[1] != dnstid_l) //message id same as we sent
        return false; //not our DNS response
 8003878:	0005883a 	mov	r2,zero
 800387c:	00004d06 	br	80039b4 <_ZL17checkForDnsAnswert+0x1d4>
    if((p[3] & 0x0F) != 0)
 8003880:	e0bffe17 	ldw	r2,-8(fp)
 8003884:	108000c4 	addi	r2,r2,3
 8003888:	10800003 	ldbu	r2,0(r2)
 800388c:	10803fcc 	andi	r2,r2,255
 8003890:	108003cc 	andi	r2,r2,15
 8003894:	10000226 	beq	r2,zero,80038a0 <_ZL17checkForDnsAnswert+0xc0>
        return true; //DNS response received with error
 8003898:	00800044 	movi	r2,1
 800389c:	00004506 	br	80039b4 <_ZL17checkForDnsAnswert+0x1d4>

    p += *p; // we encoded the query len into tid
 80038a0:	e0bffe17 	ldw	r2,-8(fp)
 80038a4:	10800003 	ldbu	r2,0(r2)
 80038a8:	10803fcc 	andi	r2,r2,255
 80038ac:	e0fffe17 	ldw	r3,-8(fp)
 80038b0:	1885883a 	add	r2,r3,r2
 80038b4:	e0bffe15 	stw	r2,-8(fp)
    for (;;) {
        if (*p & 0xC0)
 80038b8:	e0bffe17 	ldw	r2,-8(fp)
 80038bc:	10800003 	ldbu	r2,0(r2)
 80038c0:	10803fcc 	andi	r2,r2,255
 80038c4:	1080300c 	andi	r2,r2,192
 80038c8:	10000426 	beq	r2,zero,80038dc <_ZL17checkForDnsAnswert+0xfc>
            p += 2;
 80038cc:	e0bffe17 	ldw	r2,-8(fp)
 80038d0:	10800084 	addi	r2,r2,2
 80038d4:	e0bffe15 	stw	r2,-8(fp)
 80038d8:	00001206 	br	8003924 <_ZL17checkForDnsAnswert+0x144>
        else
            while (++p < gPB + plen) {
 80038dc:	e0bffe17 	ldw	r2,-8(fp)
 80038e0:	10800044 	addi	r2,r2,1
 80038e4:	e0bffe15 	stw	r2,-8(fp)
 80038e8:	e0ffff0b 	ldhu	r3,-4(fp)
 80038ec:	008200b4 	movhi	r2,2050
 80038f0:	10afa004 	addi	r2,r2,-16768
 80038f4:	1885883a 	add	r2,r3,r2
 80038f8:	e0fffe17 	ldw	r3,-8(fp)
 80038fc:	1885803a 	cmpltu	r2,r3,r2
 8003900:	10803fcc 	andi	r2,r2,255
 8003904:	10000726 	beq	r2,zero,8003924 <_ZL17checkForDnsAnswert+0x144>
                if (*p == 0) {
 8003908:	e0bffe17 	ldw	r2,-8(fp)
 800390c:	10800003 	ldbu	r2,0(r2)
 8003910:	10803fcc 	andi	r2,r2,255
 8003914:	103ff11e 	bne	r2,zero,80038dc <_ZL17checkForDnsAnswert+0xfc>
                    ++p;
 8003918:	e0bffe17 	ldw	r2,-8(fp)
 800391c:	10800044 	addi	r2,r2,1
 8003920:	e0bffe15 	stw	r2,-8(fp)
                    break;
                }
            }
        if (p + 14 > gPB + plen)
 8003924:	e0bffe17 	ldw	r2,-8(fp)
 8003928:	10c00384 	addi	r3,r2,14
 800392c:	e13fff0b 	ldhu	r4,-4(fp)
 8003930:	008200b4 	movhi	r2,2050
 8003934:	10afa004 	addi	r2,r2,-16768
 8003938:	2085883a 	add	r2,r4,r2
 800393c:	10c01b36 	bltu	r2,r3,80039ac <_ZL17checkForDnsAnswert+0x1cc>
            break;
        if (p[1] == DNS_TYPE_A && p[9] == 4) { // type "A" and IPv4
 8003940:	e0bffe17 	ldw	r2,-8(fp)
 8003944:	10800044 	addi	r2,r2,1
 8003948:	10800003 	ldbu	r2,0(r2)
 800394c:	10803fcc 	andi	r2,r2,255
 8003950:	10800058 	cmpnei	r2,r2,1
 8003954:	10000c1e 	bne	r2,zero,8003988 <_ZL17checkForDnsAnswert+0x1a8>
 8003958:	e0bffe17 	ldw	r2,-8(fp)
 800395c:	10800244 	addi	r2,r2,9
 8003960:	10800003 	ldbu	r2,0(r2)
 8003964:	10803fcc 	andi	r2,r2,255
 8003968:	10800118 	cmpnei	r2,r2,4
 800396c:	1000061e 	bne	r2,zero,8003988 <_ZL17checkForDnsAnswert+0x1a8>
            ether.copyIp(ether.hisip, p + 10);
 8003970:	e0bffe17 	ldw	r2,-8(fp)
 8003974:	10800284 	addi	r2,r2,10
 8003978:	100b883a 	mov	r5,r2
 800397c:	d1270a44 	addi	r4,gp,-25559
 8003980:	800797c0 	call	800797c <_ZN9EtherCard6copyIpEPhPKh>
            break;
 8003984:	00000a06 	br	80039b0 <_ZL17checkForDnsAnswert+0x1d0>
        }
        p += p[9] + 10;
 8003988:	e0bffe17 	ldw	r2,-8(fp)
 800398c:	10800244 	addi	r2,r2,9
 8003990:	10800003 	ldbu	r2,0(r2)
 8003994:	10803fcc 	andi	r2,r2,255
 8003998:	10800284 	addi	r2,r2,10
 800399c:	e0fffe17 	ldw	r3,-8(fp)
 80039a0:	1885883a 	add	r2,r3,r2
 80039a4:	e0bffe15 	stw	r2,-8(fp)
        return false; //not our DNS response
    if((p[3] & 0x0F) != 0)
        return true; //DNS response received with error

    p += *p; // we encoded the query len into tid
    for (;;) {
 80039a8:	003fc306 	br	80038b8 <_ZL17checkForDnsAnswert+0xd8>
                    ++p;
                    break;
                }
            }
        if (p + 14 > gPB + plen)
            break;
 80039ac:	0001883a 	nop
            ether.copyIp(ether.hisip, p + 10);
            break;
        }
        p += p[9] + 10;
    }
    return false; //No error
 80039b0:	0005883a 	mov	r2,zero
}
 80039b4:	e037883a 	mov	sp,fp
 80039b8:	dfc00117 	ldw	ra,4(sp)
 80039bc:	df000017 	ldw	fp,0(sp)
 80039c0:	dec00204 	addi	sp,sp,8
 80039c4:	f800283a 	ret

080039c8 <_ZN9EtherCard9dnsLookupEPKcb>:

bool EtherCard::dnsLookup (const char* name, bool fromRam) {
 80039c8:	defffb04 	addi	sp,sp,-20
 80039cc:	dfc00415 	stw	ra,16(sp)
 80039d0:	df000315 	stw	fp,12(sp)
 80039d4:	df000304 	addi	fp,sp,12
 80039d8:	e13ffe15 	stw	r4,-8(fp)
 80039dc:	2805883a 	mov	r2,r5
 80039e0:	e0bfff05 	stb	r2,-4(fp)
    uint16_t start = clock();
 80039e4:	8007e680 	call	8007e68 <clock>
 80039e8:	e0bffd0d 	sth	r2,-12(fp)

    while(!isLinkUp())
 80039ec:	800433c0 	call	800433c <_ZN8ENC28J608isLinkUpEv>
 80039f0:	1080005c 	xori	r2,r2,1
 80039f4:	10803fcc 	andi	r2,r2,255
 80039f8:	10000926 	beq	r2,zero,8003a20 <_ZN9EtherCard9dnsLookupEPKcb+0x58>
    {
        if (uint16_t(clock()) - start >= 30000) {
 80039fc:	8007e680 	call	8007e68 <clock>
 8003a00:	10ffffcc 	andi	r3,r2,65535
 8003a04:	e0bffd0b 	ldhu	r2,-12(fp)
 8003a08:	1885c83a 	sub	r2,r3,r2
 8003a0c:	109d4c08 	cmpgei	r2,r2,30000
 8003a10:	10803fcc 	andi	r2,r2,255
 8003a14:	103ff526 	beq	r2,zero,80039ec <_ZN9EtherCard9dnsLookupEPKcb+0x24>
            return false; //timeout waiting for link
 8003a18:	0005883a 	mov	r2,zero
 8003a1c:	00003f06 	br	8003b1c <_ZN9EtherCard9dnsLookupEPKcb+0x154>
        }
    }
    while(clientWaitingDns())
 8003a20:	800632c0 	call	800632c <_ZN9EtherCard16clientWaitingDnsEv>
 8003a24:	10803fcc 	andi	r2,r2,255
 8003a28:	1004c03a 	cmpne	r2,r2,zero
 8003a2c:	10803fcc 	andi	r2,r2,255
 8003a30:	10000d26 	beq	r2,zero,8003a68 <_ZN9EtherCard9dnsLookupEPKcb+0xa0>
    {
        packetLoop(packetReceive());
 8003a34:	80045cc0 	call	80045cc <_ZN8ENC28J6013packetReceiveEv>
 8003a38:	10bfffcc 	andi	r2,r2,65535
 8003a3c:	1009883a 	mov	r4,r2
 8003a40:	8006c9c0 	call	8006c9c <_ZN9EtherCard10packetLoopEt>
        if (uint16_t(clock()) - start >= 30000) {
 8003a44:	8007e680 	call	8007e68 <clock>
 8003a48:	10ffffcc 	andi	r3,r2,65535
 8003a4c:	e0bffd0b 	ldhu	r2,-12(fp)
 8003a50:	1885c83a 	sub	r2,r3,r2
 8003a54:	109d4c08 	cmpgei	r2,r2,30000
 8003a58:	10803fcc 	andi	r2,r2,255
 8003a5c:	103ff026 	beq	r2,zero,8003a20 <_ZN9EtherCard9dnsLookupEPKcb+0x58>
            return false; //timeout waiting for gateway ARP
 8003a60:	0005883a 	mov	r2,zero
 8003a64:	00002d06 	br	8003b1c <_ZN9EtherCard9dnsLookupEPKcb+0x154>
        }
    }

    memset(hisip, 0, IP_LEN);
 8003a68:	01800104 	movi	r6,4
 8003a6c:	000b883a 	mov	r5,zero
 8003a70:	d1270a44 	addi	r4,gp,-25559
 8003a74:	80080ec0 	call	80080ec <memset>
    dnsRequest(name, fromRam);
 8003a78:	e0bfff03 	ldbu	r2,-4(fp)
 8003a7c:	100b883a 	mov	r5,r2
 8003a80:	e13ffe17 	ldw	r4,-8(fp)
 8003a84:	80035f00 	call	80035f0 <_ZL10dnsRequestPKcb>

    start = time(NULL);
 8003a88:	0009883a 	mov	r4,zero
 8003a8c:	80086580 	call	8008658 <time>
 8003a90:	e0bffd0d 	sth	r2,-12(fp)
    while (hisip[0] == 0) {
 8003a94:	d0a70a43 	ldbu	r2,-25559(gp)
 8003a98:	10803fcc 	andi	r2,r2,255
 8003a9c:	10001e1e 	bne	r2,zero,8003b18 <_ZN9EtherCard9dnsLookupEPKcb+0x150>
        if (uint16_t(clock()) - start >= 30000)
 8003aa0:	8007e680 	call	8007e68 <clock>
 8003aa4:	10ffffcc 	andi	r3,r2,65535
 8003aa8:	e0bffd0b 	ldhu	r2,-12(fp)
 8003aac:	1885c83a 	sub	r2,r3,r2
 8003ab0:	109d4c08 	cmpgei	r2,r2,30000
 8003ab4:	10803fcc 	andi	r2,r2,255
 8003ab8:	10000226 	beq	r2,zero,8003ac4 <_ZN9EtherCard9dnsLookupEPKcb+0xfc>
            return false; //timeout waiting for dns response
 8003abc:	0005883a 	mov	r2,zero
 8003ac0:	00001606 	br	8003b1c <_ZN9EtherCard9dnsLookupEPKcb+0x154>
        uint16_t len = packetReceive();
 8003ac4:	80045cc0 	call	80045cc <_ZN8ENC28J6013packetReceiveEv>
 8003ac8:	e0bffd8d 	sth	r2,-10(fp)
        if (len > 0 && packetLoop(len) == 0) //packet not handled by tcp/ip packet loop
 8003acc:	e0bffd8b 	ldhu	r2,-10(fp)
 8003ad0:	10000726 	beq	r2,zero,8003af0 <_ZN9EtherCard9dnsLookupEPKcb+0x128>
 8003ad4:	e0bffd8b 	ldhu	r2,-10(fp)
 8003ad8:	1009883a 	mov	r4,r2
 8003adc:	8006c9c0 	call	8006c9c <_ZN9EtherCard10packetLoopEt>
 8003ae0:	10bfffcc 	andi	r2,r2,65535
 8003ae4:	1000021e 	bne	r2,zero,8003af0 <_ZN9EtherCard9dnsLookupEPKcb+0x128>
 8003ae8:	00800044 	movi	r2,1
 8003aec:	00000106 	br	8003af4 <_ZN9EtherCard9dnsLookupEPKcb+0x12c>
 8003af0:	0005883a 	mov	r2,zero
 8003af4:	10803fcc 	andi	r2,r2,255
 8003af8:	103fe626 	beq	r2,zero,8003a94 <_ZN9EtherCard9dnsLookupEPKcb+0xcc>
            if(checkForDnsAnswer(len))
 8003afc:	e0bffd8b 	ldhu	r2,-10(fp)
 8003b00:	1009883a 	mov	r4,r2
 8003b04:	80037e00 	call	80037e0 <_ZL17checkForDnsAnswert>
 8003b08:	10803fcc 	andi	r2,r2,255
 8003b0c:	103fe126 	beq	r2,zero,8003a94 <_ZN9EtherCard9dnsLookupEPKcb+0xcc>
                return false; //DNS response received with error
 8003b10:	0005883a 	mov	r2,zero
 8003b14:	00000106 	br	8003b1c <_ZN9EtherCard9dnsLookupEPKcb+0x154>
    }

    return true;
 8003b18:	00800044 	movi	r2,1
}
 8003b1c:	e037883a 	mov	sp,fp
 8003b20:	dfc00117 	ldw	ra,4(sp)
 8003b24:	df000017 	ldw	fp,0(sp)
 8003b28:	dec00204 	addi	sp,sp,8
 8003b2c:	f800283a 	ret

08003b30 <_Z5delayi>:
struct transmit_status_vector {
    uint8_t bytes[7];
};

void delay(int milli_seconds)
{
 8003b30:	defffc04 	addi	sp,sp,-16
 8003b34:	dfc00315 	stw	ra,12(sp)
 8003b38:	df000215 	stw	fp,8(sp)
 8003b3c:	df000204 	addi	fp,sp,8
 8003b40:	e13fff15 	stw	r4,-4(fp)
    // Converting time into milli_seconds
    // Storing start time
    clock_t start_time = clock();
 8003b44:	8007e680 	call	8007e68 <clock>
 8003b48:	e0bffe15 	stw	r2,-8(fp)

    // looping till required time is not achieved
    while (clock() < start_time + milli_seconds)
 8003b4c:	8007e680 	call	8007e68 <clock>
 8003b50:	1009883a 	mov	r4,r2
 8003b54:	e0ffff17 	ldw	r3,-4(fp)
 8003b58:	e0bffe17 	ldw	r2,-8(fp)
 8003b5c:	1885883a 	add	r2,r3,r2
 8003b60:	2085803a 	cmpltu	r2,r4,r2
 8003b64:	10803fcc 	andi	r2,r2,255
 8003b68:	10000126 	beq	r2,zero,8003b70 <_Z5delayi+0x40>
 8003b6c:	003ff706 	br	8003b4c <_Z5delayi+0x1c>
        ;
}
 8003b70:	0001883a 	nop
 8003b74:	e037883a 	mov	sp,fp
 8003b78:	dfc00117 	ldw	ra,4(sp)
 8003b7c:	df000017 	ldw	fp,0(sp)
 8003b80:	dec00204 	addi	sp,sp,8
 8003b84:	f800283a 	ret

08003b88 <_Z7bitReadhh>:

// Returns nth bit of x
uint8_t bitRead(uint8_t x, uint8_t n) {
 8003b88:	defffd04 	addi	sp,sp,-12
 8003b8c:	df000215 	stw	fp,8(sp)
 8003b90:	df000204 	addi	fp,sp,8
 8003b94:	2007883a 	mov	r3,r4
 8003b98:	2805883a 	mov	r2,r5
 8003b9c:	e0fffe05 	stb	r3,-8(fp)
 8003ba0:	e0bfff05 	stb	r2,-4(fp)
    return (x >> n) & 0x1;
 8003ba4:	e0fffe03 	ldbu	r3,-8(fp)
 8003ba8:	e0bfff03 	ldbu	r2,-4(fp)
 8003bac:	1885d83a 	sra	r2,r3,r2
 8003bb0:	1080004c 	andi	r2,r2,1
}
 8003bb4:	e037883a 	mov	sp,fp
 8003bb8:	df000017 	ldw	fp,0(sp)
 8003bbc:	dec00104 	addi	sp,sp,4
 8003bc0:	f800283a 	ret

08003bc4 <_ZL7writeOphhh>:
//                            SPDR, // read into SPDR
//                            flags); // no flags
//    printf("spdr: (%d) %x", flags, SPDR[0]);
//}

static void writeOp (uint8_t op, uint8_t address, uint8_t data) {
 8003bc4:	defff704 	addi	sp,sp,-36
 8003bc8:	dfc00815 	stw	ra,32(sp)
 8003bcc:	df000715 	stw	fp,28(sp)
 8003bd0:	df000704 	addi	fp,sp,28
 8003bd4:	2807883a 	mov	r3,r5
 8003bd8:	3005883a 	mov	r2,r6
 8003bdc:	e13ffd05 	stb	r4,-12(fp)
 8003be0:	e0fffe05 	stb	r3,-8(fp)
 8003be4:	e0bfff05 	stb	r2,-4(fp)
    uint8_t send_data[2];
    send_data[0] = op | (address & ADDR_MASK);
 8003be8:	e0bffe03 	ldbu	r2,-8(fp)
 8003bec:	108007cc 	andi	r2,r2,31
 8003bf0:	1007883a 	mov	r3,r2
 8003bf4:	e0bffd03 	ldbu	r2,-12(fp)
 8003bf8:	1884b03a 	or	r2,r3,r2
 8003bfc:	e0bffc05 	stb	r2,-16(fp)
    send_data[1] = data;
 8003c00:	e0bfff03 	ldbu	r2,-4(fp)
 8003c04:	e0bffc45 	stb	r2,-15(fp)
							ETHERNET_CHIP_SLAVE,
							2, // write one byte
							send_data, // write data
							0, // Read one byte
							0, // read into SPDR
							0); // no flags
 8003c08:	d8000215 	stw	zero,8(sp)
 8003c0c:	d8000115 	stw	zero,4(sp)
 8003c10:	d8000015 	stw	zero,0(sp)
 8003c14:	e1fffc04 	addi	r7,fp,-16
 8003c18:	01800084 	movi	r6,2
 8003c1c:	000b883a 	mov	r5,zero
 8003c20:	01000074 	movhi	r4,1
 8003c24:	21042804 	addi	r4,r4,4256
 8003c28:	8016adc0 	call	8016adc <alt_avalon_spi_command>
}
 8003c2c:	0001883a 	nop
 8003c30:	e037883a 	mov	sp,fp
 8003c34:	dfc00117 	ldw	ra,4(sp)
 8003c38:	df000017 	ldw	fp,0(sp)
 8003c3c:	dec00204 	addi	sp,sp,8
 8003c40:	f800283a 	ret

08003c44 <_ZL6readOphh>:

static uint8_t readOp (uint8_t op, uint8_t address) {
 8003c44:	defff804 	addi	sp,sp,-32
 8003c48:	dfc00715 	stw	ra,28(sp)
 8003c4c:	df000615 	stw	fp,24(sp)
 8003c50:	df000604 	addi	fp,sp,24
 8003c54:	2007883a 	mov	r3,r4
 8003c58:	2805883a 	mov	r2,r5
 8003c5c:	e0fffe05 	stb	r3,-8(fp)
 8003c60:	e0bfff05 	stb	r2,-4(fp)
    uint8_t send_data[1];
    send_data[0] = op | (address & ADDR_MASK);
 8003c64:	e0bfff03 	ldbu	r2,-4(fp)
 8003c68:	108007cc 	andi	r2,r2,31
 8003c6c:	1007883a 	mov	r3,r2
 8003c70:	e0bffe03 	ldbu	r2,-8(fp)
 8003c74:	1884b03a 	or	r2,r3,r2
 8003c78:	e0bffd05 	stb	r2,-12(fp)
//    uint8_t recieve_data[2];

    if (address & 0x80) {
 8003c7c:	e0bfff03 	ldbu	r2,-4(fp)
 8003c80:	10803fcc 	andi	r2,r2,255
 8003c84:	1080201c 	xori	r2,r2,128
 8003c88:	10bfe004 	addi	r2,r2,-128
 8003c8c:	10000d0e 	bge	r2,zero,8003cc4 <_ZL6readOphh+0x80>
    							ETHERNET_CHIP_SLAVE,
    							1, // write one byte
    							send_data, // write data
    							2, // Read one byte
								recieve_data, // read into SPDR
    							0); // no flags
 8003c90:	d8000215 	stw	zero,8(sp)
 8003c94:	e0bffd44 	addi	r2,fp,-11
 8003c98:	d8800115 	stw	r2,4(sp)
 8003c9c:	00800084 	movi	r2,2
 8003ca0:	d8800015 	stw	r2,0(sp)
 8003ca4:	e1fffd04 	addi	r7,fp,-12
 8003ca8:	01800044 	movi	r6,1
 8003cac:	000b883a 	mov	r5,zero
 8003cb0:	01000074 	movhi	r4,1
 8003cb4:	21042804 	addi	r4,r4,4256
 8003cb8:	8016adc0 	call	8016adc <alt_avalon_spi_command>
    	return recieve_data[1];
 8003cbc:	e0bffd83 	ldbu	r2,-10(fp)
 8003cc0:	00000c06 	br	8003cf4 <_ZL6readOphh+0xb0>
    							ETHERNET_CHIP_SLAVE,
    							1, // write one byte
    							send_data, // write data
    							1, // Read one byte
								recieve_data, // read into SPDR
    							0); // no flags
 8003cc4:	d8000215 	stw	zero,8(sp)
 8003cc8:	e0bffdc4 	addi	r2,fp,-9
 8003ccc:	d8800115 	stw	r2,4(sp)
 8003cd0:	00800044 	movi	r2,1
 8003cd4:	d8800015 	stw	r2,0(sp)
 8003cd8:	e1fffd04 	addi	r7,fp,-12
 8003cdc:	01800044 	movi	r6,1
 8003ce0:	000b883a 	mov	r5,zero
 8003ce4:	01000074 	movhi	r4,1
 8003ce8:	21042804 	addi	r4,r4,4256
 8003cec:	8016adc0 	call	8016adc <alt_avalon_spi_command>
    	return recieve_data[0];
 8003cf0:	e0bffdc3 	ldbu	r2,-9(fp)
    }

    return 0;
}
 8003cf4:	e037883a 	mov	sp,fp
 8003cf8:	dfc00117 	ldw	ra,4(sp)
 8003cfc:	df000017 	ldw	fp,0(sp)
 8003d00:	dec00204 	addi	sp,sp,8
 8003d04:	f800283a 	ret

08003d08 <_ZL7SetBankh>:

static void SetBank (uint8_t address) {
 8003d08:	defffd04 	addi	sp,sp,-12
 8003d0c:	dfc00215 	stw	ra,8(sp)
 8003d10:	df000115 	stw	fp,4(sp)
 8003d14:	df000104 	addi	fp,sp,4
 8003d18:	2005883a 	mov	r2,r4
 8003d1c:	e0bfff05 	stb	r2,-4(fp)
    if ((address & BANK_MASK) != Enc28j60Bank) {
 8003d20:	e0bfff03 	ldbu	r2,-4(fp)
 8003d24:	10c0180c 	andi	r3,r2,96
 8003d28:	d0a71703 	ldbu	r2,-25508(gp)
 8003d2c:	10803fcc 	andi	r2,r2,255
 8003d30:	18800f26 	beq	r3,r2,8003d70 <_ZL7SetBankh+0x68>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
 8003d34:	018000c4 	movi	r6,3
 8003d38:	014007c4 	movi	r5,31
 8003d3c:	01002804 	movi	r4,160
 8003d40:	8003bc40 	call	8003bc4 <_ZL7writeOphhh>
        Enc28j60Bank = address & BANK_MASK;
 8003d44:	e0bfff03 	ldbu	r2,-4(fp)
 8003d48:	1080180c 	andi	r2,r2,96
 8003d4c:	d0a71705 	stb	r2,-25508(gp)
//        printf("bank: %x\n", Enc28j60Bank);
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
 8003d50:	d0a71703 	ldbu	r2,-25508(gp)
 8003d54:	10803fcc 	andi	r2,r2,255
 8003d58:	1005d17a 	srai	r2,r2,5
 8003d5c:	10803fcc 	andi	r2,r2,255
 8003d60:	100d883a 	mov	r6,r2
 8003d64:	014007c4 	movi	r5,31
 8003d68:	01002004 	movi	r4,128
 8003d6c:	8003bc40 	call	8003bc4 <_ZL7writeOphhh>
    }
}
 8003d70:	0001883a 	nop
 8003d74:	e037883a 	mov	sp,fp
 8003d78:	dfc00117 	ldw	ra,4(sp)
 8003d7c:	df000017 	ldw	fp,0(sp)
 8003d80:	dec00204 	addi	sp,sp,8
 8003d84:	f800283a 	ret

08003d88 <_ZL12writeRegBytehh>:

static void writeRegByte (uint8_t address, uint8_t data) {
 8003d88:	defffc04 	addi	sp,sp,-16
 8003d8c:	dfc00315 	stw	ra,12(sp)
 8003d90:	df000215 	stw	fp,8(sp)
 8003d94:	df000204 	addi	fp,sp,8
 8003d98:	2007883a 	mov	r3,r4
 8003d9c:	2805883a 	mov	r2,r5
 8003da0:	e0fffe05 	stb	r3,-8(fp)
 8003da4:	e0bfff05 	stb	r2,-4(fp)
    SetBank(address);
 8003da8:	e0bffe03 	ldbu	r2,-8(fp)
 8003dac:	1009883a 	mov	r4,r2
 8003db0:	8003d080 	call	8003d08 <_ZL7SetBankh>
    writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
 8003db4:	e0bffe03 	ldbu	r2,-8(fp)
 8003db8:	e0ffff03 	ldbu	r3,-4(fp)
 8003dbc:	180d883a 	mov	r6,r3
 8003dc0:	100b883a 	mov	r5,r2
 8003dc4:	01001004 	movi	r4,64
 8003dc8:	8003bc40 	call	8003bc4 <_ZL7writeOphhh>
}
 8003dcc:	0001883a 	nop
 8003dd0:	e037883a 	mov	sp,fp
 8003dd4:	dfc00117 	ldw	ra,4(sp)
 8003dd8:	df000017 	ldw	fp,0(sp)
 8003ddc:	dec00204 	addi	sp,sp,8
 8003de0:	f800283a 	ret

08003de4 <_ZL8writeReght>:

static void writeReg(uint8_t address, uint16_t data) {
 8003de4:	defffc04 	addi	sp,sp,-16
 8003de8:	dfc00315 	stw	ra,12(sp)
 8003dec:	df000215 	stw	fp,8(sp)
 8003df0:	df000204 	addi	fp,sp,8
 8003df4:	2007883a 	mov	r3,r4
 8003df8:	2805883a 	mov	r2,r5
 8003dfc:	e0fffe05 	stb	r3,-8(fp)
 8003e00:	e0bfff0d 	sth	r2,-4(fp)
    writeRegByte(address, data);
 8003e04:	e0bffe03 	ldbu	r2,-8(fp)
 8003e08:	e0ffff0b 	ldhu	r3,-4(fp)
 8003e0c:	18c03fcc 	andi	r3,r3,255
 8003e10:	180b883a 	mov	r5,r3
 8003e14:	1009883a 	mov	r4,r2
 8003e18:	8003d880 	call	8003d88 <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
 8003e1c:	e0bffe03 	ldbu	r2,-8(fp)
 8003e20:	10800044 	addi	r2,r2,1
 8003e24:	10c03fcc 	andi	r3,r2,255
 8003e28:	e0bfff0b 	ldhu	r2,-4(fp)
 8003e2c:	1004d23a 	srli	r2,r2,8
 8003e30:	10bfffcc 	andi	r2,r2,65535
 8003e34:	100b883a 	mov	r5,r2
 8003e38:	1809883a 	mov	r4,r3
 8003e3c:	8003d880 	call	8003d88 <_ZL12writeRegBytehh>
}
 8003e40:	0001883a 	nop
 8003e44:	e037883a 	mov	sp,fp
 8003e48:	dfc00117 	ldw	ra,4(sp)
 8003e4c:	df000017 	ldw	fp,0(sp)
 8003e50:	dec00204 	addi	sp,sp,8
 8003e54:	f800283a 	ret

08003e58 <_ZL11readRegByteh>:

static uint8_t readRegByte (uint8_t address) {
 8003e58:	defffd04 	addi	sp,sp,-12
 8003e5c:	dfc00215 	stw	ra,8(sp)
 8003e60:	df000115 	stw	fp,4(sp)
 8003e64:	df000104 	addi	fp,sp,4
 8003e68:	2005883a 	mov	r2,r4
 8003e6c:	e0bfff05 	stb	r2,-4(fp)
    SetBank(address);
 8003e70:	e0bfff03 	ldbu	r2,-4(fp)
 8003e74:	1009883a 	mov	r4,r2
 8003e78:	8003d080 	call	8003d08 <_ZL7SetBankh>
    return readOp(ENC28J60_READ_CTRL_REG, address);
 8003e7c:	e0bfff03 	ldbu	r2,-4(fp)
 8003e80:	100b883a 	mov	r5,r2
 8003e84:	0009883a 	mov	r4,zero
 8003e88:	8003c440 	call	8003c44 <_ZL6readOphh>
}
 8003e8c:	e037883a 	mov	sp,fp
 8003e90:	dfc00117 	ldw	ra,4(sp)
 8003e94:	df000017 	ldw	fp,0(sp)
 8003e98:	dec00204 	addi	sp,sp,8
 8003e9c:	f800283a 	ret

08003ea0 <_ZL7readRegh>:

static uint16_t readReg(byte address) {
 8003ea0:	defffc04 	addi	sp,sp,-16
 8003ea4:	dfc00315 	stw	ra,12(sp)
 8003ea8:	df000215 	stw	fp,8(sp)
 8003eac:	dc000115 	stw	r16,4(sp)
 8003eb0:	df000204 	addi	fp,sp,8
 8003eb4:	2005883a 	mov	r2,r4
 8003eb8:	e0bffe05 	stb	r2,-8(fp)
    return readRegByte(address) + (readRegByte(address+1) << 8);
 8003ebc:	e0bffe03 	ldbu	r2,-8(fp)
 8003ec0:	1009883a 	mov	r4,r2
 8003ec4:	8003e580 	call	8003e58 <_ZL11readRegByteh>
 8003ec8:	14003fcc 	andi	r16,r2,255
 8003ecc:	e0bffe03 	ldbu	r2,-8(fp)
 8003ed0:	10800044 	addi	r2,r2,1
 8003ed4:	10803fcc 	andi	r2,r2,255
 8003ed8:	1009883a 	mov	r4,r2
 8003edc:	8003e580 	call	8003e58 <_ZL11readRegByteh>
 8003ee0:	10803fcc 	andi	r2,r2,255
 8003ee4:	1004923a 	slli	r2,r2,8
 8003ee8:	8085883a 	add	r2,r16,r2
}
 8003eec:	e6ffff04 	addi	sp,fp,-4
 8003ef0:	dfc00217 	ldw	ra,8(sp)
 8003ef4:	df000117 	ldw	fp,4(sp)
 8003ef8:	dc000017 	ldw	r16,0(sp)
 8003efc:	dec00304 	addi	sp,sp,12
 8003f00:	f800283a 	ret

08003f04 <_ZL8writePhyht>:


static void writePhy (uint8_t address, uint16_t data) {
 8003f04:	defffc04 	addi	sp,sp,-16
 8003f08:	dfc00315 	stw	ra,12(sp)
 8003f0c:	df000215 	stw	fp,8(sp)
 8003f10:	df000204 	addi	fp,sp,8
 8003f14:	2007883a 	mov	r3,r4
 8003f18:	2805883a 	mov	r2,r5
 8003f1c:	e0fffe05 	stb	r3,-8(fp)
 8003f20:	e0bfff0d 	sth	r2,-4(fp)
    writeRegByte(MIREGADR, address);
 8003f24:	e0bffe03 	ldbu	r2,-8(fp)
 8003f28:	100b883a 	mov	r5,r2
 8003f2c:	01003504 	movi	r4,212
 8003f30:	8003d880 	call	8003d88 <_ZL12writeRegBytehh>
    writeReg(MIWR, data);
 8003f34:	e0bfff0b 	ldhu	r2,-4(fp)
 8003f38:	100b883a 	mov	r5,r2
 8003f3c:	01003584 	movi	r4,214
 8003f40:	8003de40 	call	8003de4 <_ZL8writeReght>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
 8003f44:	01003a84 	movi	r4,234
 8003f48:	8003e580 	call	8003e58 <_ZL11readRegByteh>
 8003f4c:	10803fcc 	andi	r2,r2,255
 8003f50:	1080004c 	andi	r2,r2,1
 8003f54:	1004c03a 	cmpne	r2,r2,zero
 8003f58:	10803fcc 	andi	r2,r2,255
 8003f5c:	10000126 	beq	r2,zero,8003f64 <_ZL8writePhyht+0x60>
 8003f60:	003ff806 	br	8003f44 <_ZL8writePhyht+0x40>
        ;
}
 8003f64:	0001883a 	nop
 8003f68:	e037883a 	mov	sp,fp
 8003f6c:	dfc00117 	ldw	ra,4(sp)
 8003f70:	df000017 	ldw	fp,0(sp)
 8003f74:	dec00204 	addi	sp,sp,8
 8003f78:	f800283a 	ret

08003f7c <_ZL11readPhyByteh>:

static uint16_t readPhyByte (uint8_t address) {
 8003f7c:	defffd04 	addi	sp,sp,-12
 8003f80:	dfc00215 	stw	ra,8(sp)
 8003f84:	df000115 	stw	fp,4(sp)
 8003f88:	df000104 	addi	fp,sp,4
 8003f8c:	2005883a 	mov	r2,r4
 8003f90:	e0bfff05 	stb	r2,-4(fp)
    writeRegByte(MIREGADR, address);
 8003f94:	e0bfff03 	ldbu	r2,-4(fp)
 8003f98:	100b883a 	mov	r5,r2
 8003f9c:	01003504 	movi	r4,212
 8003fa0:	8003d880 	call	8003d88 <_ZL12writeRegBytehh>
    writeRegByte(MICMD, MICMD_MIIRD);
 8003fa4:	01400044 	movi	r5,1
 8003fa8:	01003484 	movi	r4,210
 8003fac:	8003d880 	call	8003d88 <_ZL12writeRegBytehh>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
 8003fb0:	01003a84 	movi	r4,234
 8003fb4:	8003e580 	call	8003e58 <_ZL11readRegByteh>
 8003fb8:	10803fcc 	andi	r2,r2,255
 8003fbc:	1080004c 	andi	r2,r2,1
 8003fc0:	1004c03a 	cmpne	r2,r2,zero
 8003fc4:	10803fcc 	andi	r2,r2,255
 8003fc8:	10000126 	beq	r2,zero,8003fd0 <_ZL11readPhyByteh+0x54>
 8003fcc:	003ff806 	br	8003fb0 <_ZL11readPhyByteh+0x34>
        ;
    writeRegByte(MICMD, 0x00);
 8003fd0:	000b883a 	mov	r5,zero
 8003fd4:	01003484 	movi	r4,210
 8003fd8:	8003d880 	call	8003d88 <_ZL12writeRegBytehh>
    return readRegByte(MIRD+1);
 8003fdc:	01003644 	movi	r4,217
 8003fe0:	8003e580 	call	8003e58 <_ZL11readRegByteh>
 8003fe4:	10803fcc 	andi	r2,r2,255
}
 8003fe8:	e037883a 	mov	sp,fp
 8003fec:	dfc00117 	ldw	ra,4(sp)
 8003ff0:	df000017 	ldw	fp,0(sp)
 8003ff4:	dec00204 	addi	sp,sp,8
 8003ff8:	f800283a 	ret

08003ffc <_Z8getThingh>:

uint8_t getThing(unsigned char address) {
 8003ffc:	defffd04 	addi	sp,sp,-12
 8004000:	dfc00215 	stw	ra,8(sp)
 8004004:	df000115 	stw	fp,4(sp)
 8004008:	df000104 	addi	fp,sp,4
 800400c:	2005883a 	mov	r2,r4
 8004010:	e0bfff05 	stb	r2,-4(fp)
	return readRegByte(address);
 8004014:	e0bfff03 	ldbu	r2,-4(fp)
 8004018:	1009883a 	mov	r4,r2
 800401c:	8003e580 	call	8003e58 <_ZL11readRegByteh>
}
 8004020:	e037883a 	mov	sp,fp
 8004024:	dfc00117 	ldw	ra,4(sp)
 8004028:	df000017 	ldw	fp,0(sp)
 800402c:	dec00204 	addi	sp,sp,8
 8004030:	f800283a 	ret

08004034 <_ZL10getMacAddrv>:

static void getMacAddr() {
 8004034:	defffb04 	addi	sp,sp,-20
 8004038:	dfc00415 	stw	ra,16(sp)
 800403c:	df000315 	stw	fp,12(sp)
 8004040:	df000304 	addi	fp,sp,12
	uint8_t arr[6];
	arr[0] = readReg(MAADR5);
 8004044:	01003904 	movi	r4,228
 8004048:	8003ea00 	call	8003ea0 <_ZL7readRegh>
 800404c:	e0bffe05 	stb	r2,-8(fp)
	arr[1] = readReg(MAADR4);
 8004050:	01003944 	movi	r4,229
 8004054:	8003ea00 	call	8003ea0 <_ZL7readRegh>
 8004058:	e0bffe45 	stb	r2,-7(fp)
	arr[2] = readReg(MAADR3);
 800405c:	01003884 	movi	r4,226
 8004060:	8003ea00 	call	8003ea0 <_ZL7readRegh>
 8004064:	e0bffe85 	stb	r2,-6(fp)
	arr[3] = readReg(MAADR2);
 8004068:	010038c4 	movi	r4,227
 800406c:	8003ea00 	call	8003ea0 <_ZL7readRegh>
 8004070:	e0bffec5 	stb	r2,-5(fp)
	arr[4] = readReg(MAADR1);
 8004074:	01003804 	movi	r4,224
 8004078:	8003ea00 	call	8003ea0 <_ZL7readRegh>
 800407c:	e0bfff05 	stb	r2,-4(fp)
	arr[5] = readReg(MAADR0);
 8004080:	01003844 	movi	r4,225
 8004084:	8003ea00 	call	8003ea0 <_ZL7readRegh>
 8004088:	e0bfff45 	stb	r2,-3(fp)

	for(int i = 0; i < 6; i++)
 800408c:	e03ffd15 	stw	zero,-12(fp)
 8004090:	e0bffd17 	ldw	r2,-12(fp)
 8004094:	10800188 	cmpgei	r2,r2,6
 8004098:	10000d1e 	bne	r2,zero,80040d0 <_ZL10getMacAddrv+0x9c>
		printf("%x, ", arr[i]);
 800409c:	e0fffe04 	addi	r3,fp,-8
 80040a0:	e0bffd17 	ldw	r2,-12(fp)
 80040a4:	1885883a 	add	r2,r3,r2
 80040a8:	10800003 	ldbu	r2,0(r2)
 80040ac:	10803fcc 	andi	r2,r2,255
 80040b0:	100b883a 	mov	r5,r2
 80040b4:	010200b4 	movhi	r4,2050
 80040b8:	21207d04 	addi	r4,r4,-32268
 80040bc:	80082440 	call	8008244 <printf>
	arr[2] = readReg(MAADR3);
	arr[3] = readReg(MAADR2);
	arr[4] = readReg(MAADR1);
	arr[5] = readReg(MAADR0);

	for(int i = 0; i < 6; i++)
 80040c0:	e0bffd17 	ldw	r2,-12(fp)
 80040c4:	10800044 	addi	r2,r2,1
 80040c8:	e0bffd15 	stw	r2,-12(fp)
 80040cc:	003ff006 	br	8004090 <_ZL10getMacAddrv+0x5c>
		printf("%x, ", arr[i]);
}
 80040d0:	0001883a 	nop
 80040d4:	e037883a 	mov	sp,fp
 80040d8:	dfc00117 	ldw	ra,4(sp)
 80040dc:	df000017 	ldw	fp,0(sp)
 80040e0:	dec00204 	addi	sp,sp,8
 80040e4:	f800283a 	ret

080040e8 <_ZN8ENC28J6010initializeEtPKhh>:
//		printf("%x, ", arr[i]);
//
//}

uint8_t ENC28J60::initialize(uint16_t size, const uint8_t *macaddr,
                             uint8_t csPin) {
 80040e8:	defffa04 	addi	sp,sp,-24
 80040ec:	dfc00515 	stw	ra,20(sp)
 80040f0:	df000415 	stw	fp,16(sp)
 80040f4:	df000404 	addi	fp,sp,16
 80040f8:	2007883a 	mov	r3,r4
 80040fc:	e17ffe15 	stw	r5,-8(fp)
 8004100:	3005883a 	mov	r2,r6
 8004104:	e0fffd0d 	sth	r3,-12(fp)
 8004108:	e0bfff05 	stb	r2,-4(fp)
//	uint8_t arr2[1];
//	arr2[0] = readReg(0x0A);
//	printf("ar: %x", arr2[0]);
//	return 6;

  bufferSize = size;
 800410c:	e0bffd0b 	ldhu	r2,-12(fp)
 8004110:	d0a7160d 	sth	r2,-25512(gp)

  selectPin = csPin;
 8004114:	e0bfff03 	ldbu	r2,-4(fp)
 8004118:	d0a71745 	stb	r2,-25507(gp)
  //   initSPI();

  // pinMode(selectPin, OUTPUT);
//  disableChip();

  writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
 800411c:	01803fc4 	movi	r6,255
 8004120:	000b883a 	mov	r5,zero
 8004124:	01003fc4 	movi	r4,255
 8004128:	8003bc40 	call	8003bc4 <_ZL7writeOphhh>
  delay(2); // errata B7/2
 800412c:	01000084 	movi	r4,2
 8004130:	8003b300 	call	8003b30 <_Z5delayi>
  while (!(readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY))
 8004134:	01400744 	movi	r5,29
 8004138:	0009883a 	mov	r4,zero
 800413c:	8003c440 	call	8003c44 <_ZL6readOphh>
 8004140:	10803fcc 	andi	r2,r2,255
 8004144:	1080004c 	andi	r2,r2,1
 8004148:	1005003a 	cmpeq	r2,r2,zero
 800414c:	10803fcc 	andi	r2,r2,255
 8004150:	10000126 	beq	r2,zero,8004158 <_ZN8ENC28J6010initializeEtPKhh+0x70>
 8004154:	003ff706 	br	8004134 <_ZN8ENC28J6010initializeEtPKhh+0x4c>
    ;

  writeReg(ERXST, RXSTART_INIT);
 8004158:	000b883a 	mov	r5,zero
 800415c:	01000204 	movi	r4,8
 8004160:	8003de40 	call	8003de4 <_ZL8writeReght>
  writeReg(ERXRDPT, RXSTART_INIT);
 8004164:	000b883a 	mov	r5,zero
 8004168:	01000304 	movi	r4,12
 800416c:	8003de40 	call	8003de4 <_ZL8writeReght>
  writeReg(ERXND, RXSTOP_INIT);
 8004170:	0142ffc4 	movi	r5,3071
 8004174:	01000284 	movi	r4,10
 8004178:	8003de40 	call	8003de4 <_ZL8writeReght>
  writeReg(ETXST, TXSTART_INIT);
 800417c:	01430004 	movi	r5,3072
 8004180:	01000104 	movi	r4,4
 8004184:	8003de40 	call	8003de4 <_ZL8writeReght>
  writeReg(ETXND, TXSTOP_INIT);
 8004188:	01447fc4 	movi	r5,4607
 800418c:	01000184 	movi	r4,6
 8004190:	8003de40 	call	8003de4 <_ZL8writeReght>

  // Stretch pulses for LED, LED_A=Link, LED_B=activity
  writePhy(PHLCON, 0x476);
 8004194:	01411d84 	movi	r5,1142
 8004198:	01000504 	movi	r4,20
 800419c:	8003f040 	call	8003f04 <_ZL8writePhyht>

  writeRegByte(ERXFCON,
               ERXFCON_UCEN | ERXFCON_CRCEN | ERXFCON_PMEN | ERXFCON_BCEN);
 80041a0:	01402c44 	movi	r5,177
 80041a4:	01000e04 	movi	r4,56
 80041a8:	8003d880 	call	8003d88 <_ZL12writeRegBytehh>
  writeReg(EPMM0, 0x303f);
 80041ac:	014c0fc4 	movi	r5,12351
 80041b0:	01000a04 	movi	r4,40
 80041b4:	8003de40 	call	8003de4 <_ZL8writeReght>
  writeReg(EPMCS, 0xf7f9);
 80041b8:	017dfe54 	movui	r5,63481
 80041bc:	01000c04 	movi	r4,48
 80041c0:	8003de40 	call	8003de4 <_ZL8writeReght>
  writeRegByte(MACON1, MACON1_MARXEN);
 80041c4:	01400044 	movi	r5,1
 80041c8:	01003004 	movi	r4,192
 80041cc:	8003d880 	call	8003d88 <_ZL12writeRegBytehh>
  writeOp(ENC28J60_BIT_FIELD_SET, MACON3,
          MACON3_PADCFG0 | MACON3_TXCRCEN | MACON3_FRMLNEN);
 80041d0:	01800c84 	movi	r6,50
 80041d4:	01403084 	movi	r5,194
 80041d8:	01002004 	movi	r4,128
 80041dc:	8003bc40 	call	8003bc4 <_ZL7writeOphhh>
  writeReg(MAIPG, 0x0C12);
 80041e0:	01430484 	movi	r5,3090
 80041e4:	01003184 	movi	r4,198
 80041e8:	8003de40 	call	8003de4 <_ZL8writeReght>
  writeRegByte(MABBIPG, 0x12);
 80041ec:	01400484 	movi	r5,18
 80041f0:	01003104 	movi	r4,196
 80041f4:	8003d880 	call	8003d88 <_ZL12writeRegBytehh>
  writeReg(MAMXFL, MAX_FRAMELEN);
 80041f8:	01417704 	movi	r5,1500
 80041fc:	01003284 	movi	r4,202
 8004200:	8003de40 	call	8003de4 <_ZL8writeReght>
  printf("at 2nd: %x\n", macaddr[1]);
 8004204:	e0bffe17 	ldw	r2,-8(fp)
 8004208:	10800044 	addi	r2,r2,1
 800420c:	10800003 	ldbu	r2,0(r2)
 8004210:	10803fcc 	andi	r2,r2,255
 8004214:	100b883a 	mov	r5,r2
 8004218:	010200b4 	movhi	r4,2050
 800421c:	21207f04 	addi	r4,r4,-32260
 8004220:	80082440 	call	8008244 <printf>

	writeRegByte(MAADR5, macaddr[0]);
 8004224:	e0bffe17 	ldw	r2,-8(fp)
 8004228:	10800003 	ldbu	r2,0(r2)
 800422c:	10803fcc 	andi	r2,r2,255
 8004230:	100b883a 	mov	r5,r2
 8004234:	01003904 	movi	r4,228
 8004238:	8003d880 	call	8003d88 <_ZL12writeRegBytehh>
	writeRegByte(MAADR4, macaddr[1]);
 800423c:	e0bffe17 	ldw	r2,-8(fp)
 8004240:	10800044 	addi	r2,r2,1
 8004244:	10800003 	ldbu	r2,0(r2)
 8004248:	10803fcc 	andi	r2,r2,255
 800424c:	100b883a 	mov	r5,r2
 8004250:	01003944 	movi	r4,229
 8004254:	8003d880 	call	8003d88 <_ZL12writeRegBytehh>
	writeRegByte(MAADR3, macaddr[2]);
 8004258:	e0bffe17 	ldw	r2,-8(fp)
 800425c:	10800084 	addi	r2,r2,2
 8004260:	10800003 	ldbu	r2,0(r2)
 8004264:	10803fcc 	andi	r2,r2,255
 8004268:	100b883a 	mov	r5,r2
 800426c:	01003884 	movi	r4,226
 8004270:	8003d880 	call	8003d88 <_ZL12writeRegBytehh>
	writeRegByte(MAADR2, macaddr[3]);
 8004274:	e0bffe17 	ldw	r2,-8(fp)
 8004278:	108000c4 	addi	r2,r2,3
 800427c:	10800003 	ldbu	r2,0(r2)
 8004280:	10803fcc 	andi	r2,r2,255
 8004284:	100b883a 	mov	r5,r2
 8004288:	010038c4 	movi	r4,227
 800428c:	8003d880 	call	8003d88 <_ZL12writeRegBytehh>
	writeRegByte(MAADR1, macaddr[4]);
 8004290:	e0bffe17 	ldw	r2,-8(fp)
 8004294:	10800104 	addi	r2,r2,4
 8004298:	10800003 	ldbu	r2,0(r2)
 800429c:	10803fcc 	andi	r2,r2,255
 80042a0:	100b883a 	mov	r5,r2
 80042a4:	01003804 	movi	r4,224
 80042a8:	8003d880 	call	8003d88 <_ZL12writeRegBytehh>
	writeRegByte(MAADR0, macaddr[5]);
 80042ac:	e0bffe17 	ldw	r2,-8(fp)
 80042b0:	10800144 	addi	r2,r2,5
 80042b4:	10800003 	ldbu	r2,0(r2)
 80042b8:	10803fcc 	andi	r2,r2,255
 80042bc:	100b883a 	mov	r5,r2
 80042c0:	01003844 	movi	r4,225
 80042c4:	8003d880 	call	8003d88 <_ZL12writeRegBytehh>

	getMacAddr();
 80042c8:	80040340 	call	8004034 <_ZL10getMacAddrv>

  writePhy(PHCON2, PHCON2_HDLDIS);
 80042cc:	01404004 	movi	r5,256
 80042d0:	01000404 	movi	r4,16
 80042d4:	8003f040 	call	8003f04 <_ZL8writePhyht>
  SetBank(ECON1);
 80042d8:	010007c4 	movi	r4,31
 80042dc:	8003d080 	call	8003d08 <_ZL7SetBankh>
  writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE | EIE_PKTIE);
 80042e0:	01803004 	movi	r6,192
 80042e4:	014006c4 	movi	r5,27
 80042e8:	01002004 	movi	r4,128
 80042ec:	8003bc40 	call	8003bc4 <_ZL7writeOphhh>
  writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
 80042f0:	01800104 	movi	r6,4
 80042f4:	014007c4 	movi	r5,31
 80042f8:	01002004 	movi	r4,128
 80042fc:	8003bc40 	call	8003bc4 <_ZL7writeOphhh>

//  SetBank(ECON2);
//  writeOp(ENC28J60_BIT_FIELD_SET, ECON2, 0x80);
//  SetBank(ECON1);

  uint8_t rev = readRegByte(EREVID);
 8004300:	01001c84 	movi	r4,114
 8004304:	8003e580 	call	8003e58 <_ZL11readRegByteh>
 8004308:	e0bffc05 	stb	r2,-16(fp)
  // microchip forgot to step the number on the silicon when they
  // released the revision B7. 6 is now rev B7. We still have
  // to see what they do when they release B8. At the moment
  // there is no B8 out yet
  if (rev > 5)
 800430c:	e0bffc03 	ldbu	r2,-16(fp)
 8004310:	108001b0 	cmpltui	r2,r2,6
 8004314:	1000031e 	bne	r2,zero,8004324 <_ZN8ENC28J6010initializeEtPKhh+0x23c>
    ++rev;
 8004318:	e0bffc03 	ldbu	r2,-16(fp)
 800431c:	10800044 	addi	r2,r2,1
 8004320:	e0bffc05 	stb	r2,-16(fp)



  return rev;
 8004324:	e0bffc03 	ldbu	r2,-16(fp)
}
 8004328:	e037883a 	mov	sp,fp
 800432c:	dfc00117 	ldw	ra,4(sp)
 8004330:	df000017 	ldw	fp,0(sp)
 8004334:	dec00204 	addi	sp,sp,8
 8004338:	f800283a 	ret

0800433c <_ZN8ENC28J608isLinkUpEv>:

bool ENC28J60::isLinkUp() {
 800433c:	defffe04 	addi	sp,sp,-8
 8004340:	dfc00115 	stw	ra,4(sp)
 8004344:	df000015 	stw	fp,0(sp)
 8004348:	d839883a 	mov	fp,sp
    return (readPhyByte(PHSTAT2) >> 2) & 1;
 800434c:	01000444 	movi	r4,17
 8004350:	8003f7c0 	call	8003f7c <_ZL11readPhyByteh>
 8004354:	10bfffcc 	andi	r2,r2,65535
 8004358:	1080010c 	andi	r2,r2,4
 800435c:	1004c03a 	cmpne	r2,r2,zero
}
 8004360:	e037883a 	mov	sp,fp
 8004364:	dfc00117 	ldw	ra,4(sp)
 8004368:	df000017 	ldw	fp,0(sp)
 800436c:	dec00204 	addi	sp,sp,8
 8004370:	f800283a 	ret

08004374 <_ZL7readBuftPh>:


static void readBuf(uint16_t len, byte* data) {
 8004374:	defff504 	addi	sp,sp,-44
 8004378:	dfc00a15 	stw	ra,40(sp)
 800437c:	df000915 	stw	fp,36(sp)
 8004380:	dc000815 	stw	r16,32(sp)
 8004384:	df000904 	addi	fp,sp,36
 8004388:	e17ffe15 	stw	r5,-8(fp)
 800438c:	e13ffd0d 	sth	r4,-12(fp)
    if (len != 0) {
 8004390:	e13ffd0b 	ldhu	r4,-12(fp)
 8004394:	20003226 	beq	r4,zero,8004460 <_ZL7readBuftPh+0xec>
//				printf("%x/%x (%x), ", data[i], data2[i], i);
//			printf("\n");
//    	} else {
//    		printf("packet of len %d\n", len);
//    	}
    	data += len;
 8004398:	d809883a 	mov	r4,sp
 800439c:	2021883a 	mov	r16,r4

static void readBuf(uint16_t len, byte* data) {
    if (len != 0) {
//    	alt_irq_context irqc = alt_irq_disable_all();
//    	alt_irq_disable(1);
    	uint8_t send_data[1], data2[len];
 80043a0:	e13ffd0b 	ldhu	r4,-12(fp)
 80043a4:	213fffc4 	addi	r4,r4,-1
 80043a8:	e13ffa15 	stw	r4,-24(fp)
 80043ac:	200b883a 	mov	r5,r4
 80043b0:	29400044 	addi	r5,r5,1
 80043b4:	2815883a 	mov	r10,r5
 80043b8:	0017883a 	mov	r11,zero
 80043bc:	500ad77a 	srli	r5,r10,29
 80043c0:	580e90fa 	slli	r7,r11,3
 80043c4:	29ceb03a 	or	r7,r5,r7
 80043c8:	500c90fa 	slli	r6,r10,3
 80043cc:	200b883a 	mov	r5,r4
 80043d0:	29400044 	addi	r5,r5,1
 80043d4:	2811883a 	mov	r8,r5
 80043d8:	0013883a 	mov	r9,zero
 80043dc:	400ad77a 	srli	r5,r8,29
 80043e0:	480690fa 	slli	r3,r9,3
 80043e4:	28c6b03a 	or	r3,r5,r3
 80043e8:	400490fa 	slli	r2,r8,3
 80043ec:	2005883a 	mov	r2,r4
 80043f0:	10800044 	addi	r2,r2,1
 80043f4:	108000c4 	addi	r2,r2,3
 80043f8:	1004d0ba 	srli	r2,r2,2
 80043fc:	1085883a 	add	r2,r2,r2
 8004400:	1085883a 	add	r2,r2,r2
 8004404:	d8b7c83a 	sub	sp,sp,r2
 8004408:	d8800304 	addi	r2,sp,12
 800440c:	1005883a 	mov	r2,r2
 8004410:	e0bffb15 	stw	r2,-20(fp)
    	send_data[0] = ENC28J60_READ_BUF_MEM;
 8004414:	00800e84 	movi	r2,58
 8004418:	e0bffc05 	stb	r2,-16(fp)
    	alt_avalon_spi_command( SPI_0_BASE,
 800441c:	e0bffd0b 	ldhu	r2,-12(fp)
    							ETHERNET_CHIP_SLAVE,
    							1, //
								send_data, // write data
    							len, // Read 8 bytes
								data, // read into SPDR
    							0); // no flags
 8004420:	e13ffc04 	addi	r4,fp,-16
 8004424:	d8000215 	stw	zero,8(sp)
 8004428:	e0fffe17 	ldw	r3,-8(fp)
 800442c:	d8c00115 	stw	r3,4(sp)
 8004430:	d8800015 	stw	r2,0(sp)
 8004434:	200f883a 	mov	r7,r4
 8004438:	01800044 	movi	r6,1
 800443c:	000b883a 	mov	r5,zero
 8004440:	01000074 	movhi	r4,1
 8004444:	21042804 	addi	r4,r4,4256
 8004448:	8016adc0 	call	8016adc <alt_avalon_spi_command>
//				printf("%x/%x (%x), ", data[i], data2[i], i);
//			printf("\n");
//    	} else {
//    		printf("packet of len %d\n", len);
//    	}
    	data += len;
 800444c:	e0bffd0b 	ldhu	r2,-12(fp)
 8004450:	e0fffe17 	ldw	r3,-8(fp)
 8004454:	1885883a 	add	r2,r3,r2
 8004458:	e0bffe15 	stw	r2,-8(fp)
 800445c:	8037883a 	mov	sp,r16
//    	alt_irq_enable_all(irqc);
    }
}
 8004460:	0001883a 	nop
 8004464:	e6ffff04 	addi	sp,fp,-4
 8004468:	dfc00217 	ldw	ra,8(sp)
 800446c:	df000117 	ldw	fp,4(sp)
 8004470:	dc000017 	ldw	r16,0(sp)
 8004474:	dec00304 	addi	sp,sp,12
 8004478:	f800283a 	ret

0800447c <_ZL8writeBuftPKh>:

// TODO
static void writeBuf(uint16_t len, const byte* data) {
 800447c:	defff504 	addi	sp,sp,-44
 8004480:	dfc00a15 	stw	ra,40(sp)
 8004484:	df000915 	stw	fp,36(sp)
 8004488:	dc000815 	stw	r16,32(sp)
 800448c:	df000904 	addi	fp,sp,36
 8004490:	e17ffe15 	stw	r5,-8(fp)
 8004494:	e13ffd0d 	sth	r4,-12(fp)
    if (len != 0) {
 8004498:	e13ffd0b 	ldhu	r4,-12(fp)
 800449c:	20004426 	beq	r4,zero,80045b0 <_ZL8writeBuftPKh+0x134>
								send_data, // write data
    							0, // Read 8 bytes
    							0, // read into SPDR
    							0); // no flags

    	data += len;
 80044a0:	d809883a 	mov	r4,sp
 80044a4:	2021883a 	mov	r16,r4
static void writeBuf(uint16_t len, const byte* data) {
    if (len != 0) {
//    	uint8_t send_data[1];
//    	send_data[0] = ENC28J60_WRITE_BUF_MEM;

    	uint8_t send_data[len + 1];
 80044a8:	e13ffd0b 	ldhu	r4,-12(fp)
 80044ac:	e13ffb15 	stw	r4,-20(fp)
 80044b0:	200b883a 	mov	r5,r4
 80044b4:	29400044 	addi	r5,r5,1
 80044b8:	2815883a 	mov	r10,r5
 80044bc:	0017883a 	mov	r11,zero
 80044c0:	500ad77a 	srli	r5,r10,29
 80044c4:	580e90fa 	slli	r7,r11,3
 80044c8:	29ceb03a 	or	r7,r5,r7
 80044cc:	500c90fa 	slli	r6,r10,3
 80044d0:	200b883a 	mov	r5,r4
 80044d4:	29400044 	addi	r5,r5,1
 80044d8:	2811883a 	mov	r8,r5
 80044dc:	0013883a 	mov	r9,zero
 80044e0:	400ad77a 	srli	r5,r8,29
 80044e4:	480690fa 	slli	r3,r9,3
 80044e8:	28c6b03a 	or	r3,r5,r3
 80044ec:	400490fa 	slli	r2,r8,3
 80044f0:	2005883a 	mov	r2,r4
 80044f4:	10800044 	addi	r2,r2,1
 80044f8:	108000c4 	addi	r2,r2,3
 80044fc:	1004d0ba 	srli	r2,r2,2
 8004500:	1085883a 	add	r2,r2,r2
 8004504:	1085883a 	add	r2,r2,r2
 8004508:	d8b7c83a 	sub	sp,sp,r2
 800450c:	d8800304 	addi	r2,sp,12
 8004510:	1005883a 	mov	r2,r2
 8004514:	e0bffc15 	stw	r2,-16(fp)
    	send_data[0] = ENC28J60_WRITE_BUF_MEM;
 8004518:	e0bffc17 	ldw	r2,-16(fp)
 800451c:	00c01e84 	movi	r3,122
 8004520:	10c00005 	stb	r3,0(r2)
    	for(int i = 0; i < len; i++)
 8004524:	e03ffa15 	stw	zero,-24(fp)
 8004528:	e0bffd0b 	ldhu	r2,-12(fp)
 800452c:	e0fffa17 	ldw	r3,-24(fp)
 8004530:	18800d0e 	bge	r3,r2,8004568 <_ZL8writeBuftPKh+0xec>
    		send_data[i+1] = data[i];
 8004534:	e0bffa17 	ldw	r2,-24(fp)
 8004538:	10800044 	addi	r2,r2,1
 800453c:	e0fffa17 	ldw	r3,-24(fp)
 8004540:	e13ffe17 	ldw	r4,-8(fp)
 8004544:	20c7883a 	add	r3,r4,r3
 8004548:	18c00003 	ldbu	r3,0(r3)
 800454c:	e13ffc17 	ldw	r4,-16(fp)
 8004550:	2085883a 	add	r2,r4,r2
 8004554:	10c00005 	stb	r3,0(r2)
//    	uint8_t send_data[1];
//    	send_data[0] = ENC28J60_WRITE_BUF_MEM;

    	uint8_t send_data[len + 1];
    	send_data[0] = ENC28J60_WRITE_BUF_MEM;
    	for(int i = 0; i < len; i++)
 8004558:	e0bffa17 	ldw	r2,-24(fp)
 800455c:	10800044 	addi	r2,r2,1
 8004560:	e0bffa15 	stw	r2,-24(fp)
 8004564:	003ff006 	br	8004528 <_ZL8writeBuftPKh+0xac>
    		send_data[i+1] = data[i];
//    	memcpy(send_data + 1, data, len);

    	alt_avalon_spi_command( SPI_0_BASE,
    							ETHERNET_CHIP_SLAVE,
    							len + 1, //
 8004568:	e0bffd0b 	ldhu	r2,-12(fp)
 800456c:	10800044 	addi	r2,r2,1
    	send_data[0] = ENC28J60_WRITE_BUF_MEM;
    	for(int i = 0; i < len; i++)
    		send_data[i+1] = data[i];
//    	memcpy(send_data + 1, data, len);

    	alt_avalon_spi_command( SPI_0_BASE,
 8004570:	1007883a 	mov	r3,r2
 8004574:	e0bffc17 	ldw	r2,-16(fp)
    							ETHERNET_CHIP_SLAVE,
    							len + 1, //
								send_data, // write data
    							0, // Read 8 bytes
    							0, // read into SPDR
    							0); // no flags
 8004578:	d8000215 	stw	zero,8(sp)
 800457c:	d8000115 	stw	zero,4(sp)
 8004580:	d8000015 	stw	zero,0(sp)
 8004584:	100f883a 	mov	r7,r2
 8004588:	180d883a 	mov	r6,r3
 800458c:	000b883a 	mov	r5,zero
 8004590:	01000074 	movhi	r4,1
 8004594:	21042804 	addi	r4,r4,4256
 8004598:	8016adc0 	call	8016adc <alt_avalon_spi_command>

    	data += len;
 800459c:	e0bffd0b 	ldhu	r2,-12(fp)
 80045a0:	e0fffe17 	ldw	r3,-8(fp)
 80045a4:	1885883a 	add	r2,r3,r2
 80045a8:	e0bffe15 	stw	r2,-8(fp)
 80045ac:	8037883a 	mov	sp,r16
    }
}
 80045b0:	0001883a 	nop
 80045b4:	e6ffff04 	addi	sp,fp,-4
 80045b8:	dfc00217 	ldw	ra,8(sp)
 80045bc:	df000117 	ldw	fp,4(sp)
 80045c0:	dc000017 	ldw	r16,0(sp)
 80045c4:	dec00304 	addi	sp,sp,12
 80045c8:	f800283a 	ret

080045cc <_ZN8ENC28J6013packetReceiveEv>:

uint16_t ENC28J60::packetReceive() {
 80045cc:	defffb04 	addi	sp,sp,-20
 80045d0:	dfc00415 	stw	ra,16(sp)
 80045d4:	df000315 	stw	fp,12(sp)
 80045d8:	df000304 	addi	fp,sp,12
    static uint16_t gNextPacketPtr = RXSTART_INIT;
    static bool     unreleasedPacket = false;
    uint16_t len = 0;
 80045dc:	e03ffd0d 	sth	zero,-12(fp)

    if (unreleasedPacket) {
 80045e0:	d0a71783 	ldbu	r2,-25506(gp)
 80045e4:	10803fcc 	andi	r2,r2,255
 80045e8:	10000e26 	beq	r2,zero,8004624 <_ZN8ENC28J6013packetReceiveEv+0x58>
        if (gNextPacketPtr == 0)
 80045ec:	d0a7180b 	ldhu	r2,-25504(gp)
 80045f0:	10bfffcc 	andi	r2,r2,65535
 80045f4:	1000041e 	bne	r2,zero,8004608 <_ZN8ENC28J6013packetReceiveEv+0x3c>
            writeReg(ERXRDPT, RXSTOP_INIT);
 80045f8:	0142ffc4 	movi	r5,3071
 80045fc:	01000304 	movi	r4,12
 8004600:	8003de40 	call	8003de4 <_ZL8writeReght>
 8004604:	00000606 	br	8004620 <_ZN8ENC28J6013packetReceiveEv+0x54>
        else
            writeReg(ERXRDPT, gNextPacketPtr - 1);
 8004608:	d0a7180b 	ldhu	r2,-25504(gp)
 800460c:	10bfffc4 	addi	r2,r2,-1
 8004610:	10bfffcc 	andi	r2,r2,65535
 8004614:	100b883a 	mov	r5,r2
 8004618:	01000304 	movi	r4,12
 800461c:	8003de40 	call	8003de4 <_ZL8writeReght>
        unreleasedPacket = false;
 8004620:	d0271785 	stb	zero,-25506(gp)
    }

    uint8_t r = readRegByte(EPKTCNT);
 8004624:	01000e44 	movi	r4,57
 8004628:	8003e580 	call	8003e58 <_ZL11readRegByteh>
 800462c:	e0bffd85 	stb	r2,-10(fp)
    if (r > 0) {
 8004630:	e0bffd83 	ldbu	r2,-10(fp)
 8004634:	10002e26 	beq	r2,zero,80046f0 <_ZN8ENC28J6013packetReceiveEv+0x124>
//    	printf("readregbyte %d", r);
        writeReg(ERDPT, gNextPacketPtr);
 8004638:	d0a7180b 	ldhu	r2,-25504(gp)
 800463c:	10bfffcc 	andi	r2,r2,65535
 8004640:	100b883a 	mov	r5,r2
 8004644:	0009883a 	mov	r4,zero
 8004648:	8003de40 	call	8003de4 <_ZL8writeReght>
            uint16_t nextPacket;
            uint16_t byteCount;
            uint16_t status;
        } header;

        readBuf(sizeof header, (byte*) &header);
 800464c:	00800184 	movi	r2,6
 8004650:	10bfffcc 	andi	r2,r2,65535
 8004654:	e0fffe04 	addi	r3,fp,-8
 8004658:	180b883a 	mov	r5,r3
 800465c:	1009883a 	mov	r4,r2
 8004660:	80043740 	call	8004374 <_ZL7readBuftPh>

        gNextPacketPtr  = header.nextPacket;
 8004664:	e0bffe0b 	ldhu	r2,-8(fp)
 8004668:	d0a7180d 	sth	r2,-25504(gp)
        len = header.byteCount - 4; //remove the CRC count
 800466c:	e0bffe8b 	ldhu	r2,-6(fp)
 8004670:	10bfff04 	addi	r2,r2,-4
 8004674:	e0bffd0d 	sth	r2,-12(fp)
        if (len>bufferSize-1)
 8004678:	e0bffd0b 	ldhu	r2,-12(fp)
 800467c:	d0e7160b 	ldhu	r3,-25512(gp)
 8004680:	18ffffcc 	andi	r3,r3,65535
 8004684:	18ffffc4 	addi	r3,r3,-1
 8004688:	1880030e 	bge	r3,r2,8004698 <_ZN8ENC28J6013packetReceiveEv+0xcc>
            len=bufferSize-1;
 800468c:	d0a7160b 	ldhu	r2,-25512(gp)
 8004690:	10bfffc4 	addi	r2,r2,-1
 8004694:	e0bffd0d 	sth	r2,-12(fp)
        if ((header.status & 0x80)==0)
 8004698:	e0bfff0b 	ldhu	r2,-4(fp)
 800469c:	10bfffcc 	andi	r2,r2,65535
 80046a0:	1080200c 	andi	r2,r2,128
 80046a4:	1000021e 	bne	r2,zero,80046b0 <_ZN8ENC28J6013packetReceiveEv+0xe4>
            len = 0;
 80046a8:	e03ffd0d 	sth	zero,-12(fp)
 80046ac:	00000506 	br	80046c4 <_ZN8ENC28J6013packetReceiveEv+0xf8>
        else
            readBuf(len, buffer);
 80046b0:	e0bffd0b 	ldhu	r2,-12(fp)
 80046b4:	014200b4 	movhi	r5,2050
 80046b8:	296fa004 	addi	r5,r5,-16768
 80046bc:	1009883a 	mov	r4,r2
 80046c0:	80043740 	call	8004374 <_ZL7readBuftPh>
        buffer[len] = 0;
 80046c4:	e0fffd0b 	ldhu	r3,-12(fp)
 80046c8:	008200b4 	movhi	r2,2050
 80046cc:	10afa004 	addi	r2,r2,-16768
 80046d0:	10c5883a 	add	r2,r2,r3
 80046d4:	10000005 	stb	zero,0(r2)
        unreleasedPacket = true;
 80046d8:	00800044 	movi	r2,1
 80046dc:	d0a71785 	stb	r2,-25506(gp)

        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
 80046e0:	01801004 	movi	r6,64
 80046e4:	01400784 	movi	r5,30
 80046e8:	01002004 	movi	r4,128
 80046ec:	8003bc40 	call	8003bc4 <_ZL7writeOphhh>

//        printf("len = %d\n", len);
    }
    return len;
 80046f0:	e0bffd0b 	ldhu	r2,-12(fp)
}
 80046f4:	e037883a 	mov	sp,fp
 80046f8:	dfc00117 	ldw	ra,4(sp)
 80046fc:	df000017 	ldw	fp,0(sp)
 8004700:	dec00204 	addi	sp,sp,8
 8004704:	f800283a 	ret

08004708 <_ZN8ENC28J6010packetSendEt>:


void ENC28J60::packetSend(uint16_t len) {
 8004708:	defffa04 	addi	sp,sp,-24
 800470c:	dfc00515 	stw	ra,20(sp)
 8004710:	df000415 	stw	fp,16(sp)
 8004714:	df000404 	addi	fp,sp,16
 8004718:	2005883a 	mov	r2,r4
 800471c:	e0bfff0d 	sth	r2,-4(fp)
    byte retry = 0;
 8004720:	e03ffc85 	stb	zero,-14(fp)
        // the Microchip TCP/IP stack implementation used to first check
        // whether TXERIF is set and only then reset the transmit logic
        // but this has been changed in later versions; possibly they
        // have a reason for this; they don't mention this in the errata
        // sheet
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
 8004724:	01802004 	movi	r6,128
 8004728:	014007c4 	movi	r5,31
 800472c:	01002004 	movi	r4,128
 8004730:	8003bc40 	call	8003bc4 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
 8004734:	01802004 	movi	r6,128
 8004738:	014007c4 	movi	r5,31
 800473c:	01002804 	movi	r4,160
 8004740:	8003bc40 	call	8003bc4 <_ZL7writeOphhh>
        writeOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF|EIR_TXIF);
 8004744:	01800284 	movi	r6,10
 8004748:	01400704 	movi	r5,28
 800474c:	01002804 	movi	r4,160
 8004750:	8003bc40 	call	8003bc4 <_ZL7writeOphhh>

        // prepare new transmission
        if (retry == 0) {
 8004754:	e0bffc83 	ldbu	r2,-14(fp)
 8004758:	1000121e 	bne	r2,zero,80047a4 <_ZN8ENC28J6010packetSendEt+0x9c>
            writeReg(EWRPT, TXSTART_INIT);
 800475c:	01430004 	movi	r5,3072
 8004760:	01000084 	movi	r4,2
 8004764:	8003de40 	call	8003de4 <_ZL8writeReght>
            writeReg(ETXND, TXSTART_INIT+len);
 8004768:	e0bfff0b 	ldhu	r2,-4(fp)
 800476c:	10830004 	addi	r2,r2,3072
 8004770:	10bfffcc 	andi	r2,r2,65535
 8004774:	100b883a 	mov	r5,r2
 8004778:	01000184 	movi	r4,6
 800477c:	8003de40 	call	8003de4 <_ZL8writeReght>
            writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
 8004780:	000d883a 	mov	r6,zero
 8004784:	000b883a 	mov	r5,zero
 8004788:	01001e84 	movi	r4,122
 800478c:	8003bc40 	call	8003bc4 <_ZL7writeOphhh>
            writeBuf(len, buffer);
 8004790:	e0bfff0b 	ldhu	r2,-4(fp)
 8004794:	014200b4 	movhi	r5,2050
 8004798:	296fa004 	addi	r5,r5,-16768
 800479c:	1009883a 	mov	r4,r2
 80047a0:	800447c0 	call	800447c <_ZL8writeBuftPKh>
        }

        // initiate transmission
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
 80047a4:	01800204 	movi	r6,8
 80047a8:	014007c4 	movi	r5,31
 80047ac:	01002004 	movi	r4,128
 80047b0:	8003bc40 	call	8003bc4 <_ZL7writeOphhh>
        // wait until transmission has finished; referring to the data sheet and
        // to the errata (Errata Issue 13; Example 1) you only need to wait until either
        // TXIF or TXERIF gets set; however this leads to hangs; apparently Microchip
        // realized this and in later implementations of their tcp/ip stack they introduced
        // a counter to avoid hangs; of course they didn't update the errata sheet
        uint16_t count = 0;
 80047b4:	e03ffc0d 	sth	zero,-16(fp)
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
 80047b8:	01000704 	movi	r4,28
 80047bc:	8003e580 	call	8003e58 <_ZL11readRegByteh>
 80047c0:	10803fcc 	andi	r2,r2,255
 80047c4:	1080028c 	andi	r2,r2,10
 80047c8:	1000081e 	bne	r2,zero,80047ec <_ZN8ENC28J6010packetSendEt+0xe4>
 80047cc:	e0bffc0b 	ldhu	r2,-16(fp)
 80047d0:	10800044 	addi	r2,r2,1
 80047d4:	e0bffc0d 	sth	r2,-16(fp)
 80047d8:	e0bffc0b 	ldhu	r2,-16(fp)
 80047dc:	1080fa28 	cmpgeui	r2,r2,1000
 80047e0:	1000021e 	bne	r2,zero,80047ec <_ZN8ENC28J6010packetSendEt+0xe4>
 80047e4:	00800044 	movi	r2,1
 80047e8:	00000106 	br	80047f0 <_ZN8ENC28J6010packetSendEt+0xe8>
 80047ec:	0005883a 	mov	r2,zero
 80047f0:	10803fcc 	andi	r2,r2,255
 80047f4:	10000126 	beq	r2,zero,80047fc <_ZN8ENC28J6010packetSendEt+0xf4>
 80047f8:	003fef06 	br	80047b8 <_ZN8ENC28J6010packetSendEt+0xb0>
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
 80047fc:	01000704 	movi	r4,28
 8004800:	8003e580 	call	8003e58 <_ZL11readRegByteh>
 8004804:	10803fcc 	andi	r2,r2,255
 8004808:	1080008c 	andi	r2,r2,2
 800480c:	1000051e 	bne	r2,zero,8004824 <_ZN8ENC28J6010packetSendEt+0x11c>
 8004810:	e0bffc0b 	ldhu	r2,-16(fp)
 8004814:	1080fa28 	cmpgeui	r2,r2,1000
 8004818:	1000021e 	bne	r2,zero,8004824 <_ZN8ENC28J6010packetSendEt+0x11c>
 800481c:	00800044 	movi	r2,1
 8004820:	00000106 	br	8004828 <_ZN8ENC28J6010packetSendEt+0x120>
 8004824:	0005883a 	mov	r2,zero
 8004828:	10803fcc 	andi	r2,r2,255
 800482c:	1000051e 	bne	r2,zero,8004844 <_ZN8ENC28J6010packetSendEt+0x13c>
            // no error; start new transmission
            break;
        }

        // cancel previous transmission if stuck
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
 8004830:	01800204 	movi	r6,8
 8004834:	014007c4 	movi	r5,31
 8004838:	01002804 	movi	r4,160
 800483c:	8003bc40 	call	8003bc4 <_ZL7writeOphhh>

    #if ETHERCARD_RETRY_LATECOLLISIONS == 0
        break;
 8004840:	00000106 	br	8004848 <_ZN8ENC28J6010packetSendEt+0x140>
        while ((readRegByte(EIR) & (EIR_TXIF | EIR_TXERIF)) == 0 && ++count < 1000U)
            ;

        if (!(readRegByte(EIR) & EIR_TXERIF) && count < 1000U) {
            // no error; start new transmission
            break;
 8004844:	0001883a 	nop
            break;
        }

        retry++;
    }
}
 8004848:	0001883a 	nop
 800484c:	e037883a 	mov	sp,fp
 8004850:	dfc00117 	ldw	ra,4(sp)
 8004854:	df000017 	ldw	fp,0(sp)
 8004858:	dec00204 	addi	sp,sp,8
 800485c:	f800283a 	ret

08004860 <_ZN8ENC28J6015enableBroadcastEb>:

void ENC28J60::enableBroadcast (bool temporary) {
 8004860:	defffd04 	addi	sp,sp,-12
 8004864:	dfc00215 	stw	ra,8(sp)
 8004868:	df000115 	stw	fp,4(sp)
 800486c:	df000104 	addi	fp,sp,4
 8004870:	2005883a 	mov	r2,r4
 8004874:	e0bfff05 	stb	r2,-4(fp)
    writeRegByte(ERXFCON, readRegByte(ERXFCON) | ERXFCON_BCEN);
 8004878:	01000e04 	movi	r4,56
 800487c:	8003e580 	call	8003e58 <_ZL11readRegByteh>
 8004880:	10800054 	ori	r2,r2,1
 8004884:	10803fcc 	andi	r2,r2,255
 8004888:	100b883a 	mov	r5,r2
 800488c:	01000e04 	movi	r4,56
 8004890:	8003d880 	call	8003d88 <_ZL12writeRegBytehh>
    if(!temporary)
 8004894:	e0bfff03 	ldbu	r2,-4(fp)
 8004898:	1080005c 	xori	r2,r2,1
 800489c:	10803fcc 	andi	r2,r2,255
 80048a0:	10000226 	beq	r2,zero,80048ac <_ZN8ENC28J6015enableBroadcastEb+0x4c>
        broadcast_enabled = true;
 80048a4:	00800044 	movi	r2,1
 80048a8:	d0a71685 	stb	r2,-25510(gp)
}
 80048ac:	0001883a 	nop
 80048b0:	e037883a 	mov	sp,fp
 80048b4:	dfc00117 	ldw	ra,4(sp)
 80048b8:	df000017 	ldw	fp,0(sp)
 80048bc:	dec00204 	addi	sp,sp,8
 80048c0:	f800283a 	ret

080048c4 <_ZN8ENC28J6016disableBroadcastEb>:

void ENC28J60::disableBroadcast (bool temporary) {
 80048c4:	defffd04 	addi	sp,sp,-12
 80048c8:	dfc00215 	stw	ra,8(sp)
 80048cc:	df000115 	stw	fp,4(sp)
 80048d0:	df000104 	addi	fp,sp,4
 80048d4:	2005883a 	mov	r2,r4
 80048d8:	e0bfff05 	stb	r2,-4(fp)
    if(!temporary)
 80048dc:	e0bfff03 	ldbu	r2,-4(fp)
 80048e0:	1080005c 	xori	r2,r2,1
 80048e4:	10803fcc 	andi	r2,r2,255
 80048e8:	10000126 	beq	r2,zero,80048f0 <_ZN8ENC28J6016disableBroadcastEb+0x2c>
        broadcast_enabled = false;
 80048ec:	d0271685 	stb	zero,-25510(gp)
    if(!broadcast_enabled)
 80048f0:	d0a71683 	ldbu	r2,-25510(gp)
 80048f4:	1080005c 	xori	r2,r2,1
 80048f8:	10803fcc 	andi	r2,r2,255
 80048fc:	10000726 	beq	r2,zero,800491c <_ZN8ENC28J6016disableBroadcastEb+0x58>
        writeRegByte(ERXFCON, readRegByte(ERXFCON) & ~ERXFCON_BCEN);
 8004900:	01000e04 	movi	r4,56
 8004904:	8003e580 	call	8003e58 <_ZL11readRegByteh>
 8004908:	10803fcc 	andi	r2,r2,255
 800490c:	10803f8c 	andi	r2,r2,254
 8004910:	100b883a 	mov	r5,r2
 8004914:	01000e04 	movi	r4,56
 8004918:	8003d880 	call	8003d88 <_ZL12writeRegBytehh>
}
 800491c:	0001883a 	nop
 8004920:	e037883a 	mov	sp,fp
 8004924:	dfc00117 	ldw	ra,4(sp)
 8004928:	df000017 	ldw	fp,0(sp)
 800492c:	dec00204 	addi	sp,sp,8
 8004930:	f800283a 	ret

08004934 <_Z4PSTRPc>:
// const unsigned char arpreqhdr[] PROGMEM = { 0,1,8,0,6,4,0,1 }; // ARP request header
// const unsigned char iphdr[] PROGMEM = { 0x45,0,0,0x82,0,0,0x40,0,0x20 }; //IP header
// const unsigned char ntpreqhdr[] PROGMEM = { 0xE3,0,4,0xFA,0,1,0,0,0,1 }; //NTP request header
extern const uint8_t allOnes[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }; // Used for hardware (MAC) and IP broadcast addresses

char* PSTR(char* str){
 8004934:	defffe04 	addi	sp,sp,-8
 8004938:	df000115 	stw	fp,4(sp)
 800493c:	df000104 	addi	fp,sp,4
 8004940:	e13fff15 	stw	r4,-4(fp)
	return str;
 8004944:	e0bfff17 	ldw	r2,-4(fp)
}
 8004948:	e037883a 	mov	sp,fp
 800494c:	df000017 	ldw	fp,0(sp)
 8004950:	dec00104 	addi	sp,sp,4
 8004954:	f800283a 	ret

08004958 <_Z8memcpy_PPvPKvj>:
const unsigned char arpreqhdr[] = { 0,1,8,0,6,4,0,1 }; // ARP request header
const unsigned char iphdr[] = { 0x45,0,0,0x82,0,0,0x40,0,0x20 }; //IP header
const unsigned char ntpreqhdr[] = { 0xE3,0,4,0xFA,0,1,0,0,0,1 }; //NTP request header


void* memcpy_P(void* dest, const void* src, std::size_t count) {
 8004958:	defffb04 	addi	sp,sp,-20
 800495c:	dfc00415 	stw	ra,16(sp)
 8004960:	df000315 	stw	fp,12(sp)
 8004964:	df000304 	addi	fp,sp,12
 8004968:	e13ffd15 	stw	r4,-12(fp)
 800496c:	e17ffe15 	stw	r5,-8(fp)
 8004970:	e1bfff15 	stw	r6,-4(fp)
	return memcpy(dest, src, count);
 8004974:	e1bfff17 	ldw	r6,-4(fp)
 8004978:	e17ffe17 	ldw	r5,-8(fp)
 800497c:	e13ffd17 	ldw	r4,-12(fp)
 8004980:	8007fa40 	call	8007fa4 <memcpy>
}
 8004984:	e037883a 	mov	sp,fp
 8004988:	dfc00117 	ldw	ra,4(sp)
 800498c:	df000017 	ldw	fp,0(sp)
 8004990:	dec00204 	addi	sp,sp,8
 8004994:	f800283a 	ret

08004998 <_ZL13fill_checksumhhth>:

static void fill_checksum(uint8_t dest, uint8_t off, uint16_t len,uint8_t type) {
 8004998:	defff804 	addi	sp,sp,-32
 800499c:	df000715 	stw	fp,28(sp)
 80049a0:	df000704 	addi	fp,sp,28
 80049a4:	2011883a 	mov	r8,r4
 80049a8:	2809883a 	mov	r4,r5
 80049ac:	3007883a 	mov	r3,r6
 80049b0:	3805883a 	mov	r2,r7
 80049b4:	e23ffc05 	stb	r8,-16(fp)
 80049b8:	e13ffd05 	stb	r4,-12(fp)
 80049bc:	e0fffe0d 	sth	r3,-8(fp)
 80049c0:	e0bfff05 	stb	r2,-4(fp)
    const uint8_t* ptr = gPB + off;
 80049c4:	e0fffd03 	ldbu	r3,-12(fp)
 80049c8:	008200b4 	movhi	r2,2050
 80049cc:	10afa004 	addi	r2,r2,-16768
 80049d0:	1885883a 	add	r2,r3,r2
 80049d4:	e0bff915 	stw	r2,-28(fp)
    uint32_t sum = type==1 ? IP_PROTO_UDP_V+len-8 :
                   type==2 ? IP_PROTO_TCP_V+len-8 : 0;
 80049d8:	e0bfff03 	ldbu	r2,-4(fp)
 80049dc:	10800058 	cmpnei	r2,r2,1
 80049e0:	1000031e 	bne	r2,zero,80049f0 <_ZL13fill_checksumhhth+0x58>
	return memcpy(dest, src, count);
}

static void fill_checksum(uint8_t dest, uint8_t off, uint16_t len,uint8_t type) {
    const uint8_t* ptr = gPB + off;
    uint32_t sum = type==1 ? IP_PROTO_UDP_V+len-8 :
 80049e4:	e0bffe0b 	ldhu	r2,-8(fp)
 80049e8:	10800244 	addi	r2,r2,9
 80049ec:	00000706 	br	8004a0c <_ZL13fill_checksumhhth+0x74>
                   type==2 ? IP_PROTO_TCP_V+len-8 : 0;
 80049f0:	e0bfff03 	ldbu	r2,-4(fp)
 80049f4:	10800098 	cmpnei	r2,r2,2
 80049f8:	1000031e 	bne	r2,zero,8004a08 <_ZL13fill_checksumhhth+0x70>
 80049fc:	e0bffe0b 	ldhu	r2,-8(fp)
 8004a00:	10bfff84 	addi	r2,r2,-2
 8004a04:	00000106 	br	8004a0c <_ZL13fill_checksumhhth+0x74>
 8004a08:	0005883a 	mov	r2,zero
 8004a0c:	e0bffa15 	stw	r2,-24(fp)
    while(len >1) {
 8004a10:	e0bffe0b 	ldhu	r2,-8(fp)
 8004a14:	108000b0 	cmpltui	r2,r2,2
 8004a18:	1000151e 	bne	r2,zero,8004a70 <_ZL13fill_checksumhhth+0xd8>
        sum += (uint16_t) (((uint32_t)*ptr<<8)|*(ptr+1));
 8004a1c:	e0bff917 	ldw	r2,-28(fp)
 8004a20:	10800003 	ldbu	r2,0(r2)
 8004a24:	10803fcc 	andi	r2,r2,255
 8004a28:	1004923a 	slli	r2,r2,8
 8004a2c:	1007883a 	mov	r3,r2
 8004a30:	e0bff917 	ldw	r2,-28(fp)
 8004a34:	10800044 	addi	r2,r2,1
 8004a38:	10800003 	ldbu	r2,0(r2)
 8004a3c:	10803fcc 	andi	r2,r2,255
 8004a40:	1884b03a 	or	r2,r3,r2
 8004a44:	10bfffcc 	andi	r2,r2,65535
 8004a48:	e0fffa17 	ldw	r3,-24(fp)
 8004a4c:	1885883a 	add	r2,r3,r2
 8004a50:	e0bffa15 	stw	r2,-24(fp)
        ptr+=2;
 8004a54:	e0bff917 	ldw	r2,-28(fp)
 8004a58:	10800084 	addi	r2,r2,2
 8004a5c:	e0bff915 	stw	r2,-28(fp)
        len-=2;
 8004a60:	e0bffe0b 	ldhu	r2,-8(fp)
 8004a64:	10bfff84 	addi	r2,r2,-2
 8004a68:	e0bffe0d 	sth	r2,-8(fp)

static void fill_checksum(uint8_t dest, uint8_t off, uint16_t len,uint8_t type) {
    const uint8_t* ptr = gPB + off;
    uint32_t sum = type==1 ? IP_PROTO_UDP_V+len-8 :
                   type==2 ? IP_PROTO_TCP_V+len-8 : 0;
    while(len >1) {
 8004a6c:	003fe806 	br	8004a10 <_ZL13fill_checksumhhth+0x78>
        sum += (uint16_t) (((uint32_t)*ptr<<8)|*(ptr+1));
        ptr+=2;
        len-=2;
    }
    if (len)
 8004a70:	e0bffe0b 	ldhu	r2,-8(fp)
 8004a74:	10000726 	beq	r2,zero,8004a94 <_ZL13fill_checksumhhth+0xfc>
        sum += ((uint32_t)*ptr)<<8;
 8004a78:	e0bff917 	ldw	r2,-28(fp)
 8004a7c:	10800003 	ldbu	r2,0(r2)
 8004a80:	10803fcc 	andi	r2,r2,255
 8004a84:	1004923a 	slli	r2,r2,8
 8004a88:	e0fffa17 	ldw	r3,-24(fp)
 8004a8c:	1885883a 	add	r2,r3,r2
 8004a90:	e0bffa15 	stw	r2,-24(fp)
    while (sum>>16)
 8004a94:	e0bffa17 	ldw	r2,-24(fp)
 8004a98:	1004d43a 	srli	r2,r2,16
 8004a9c:	10000726 	beq	r2,zero,8004abc <_ZL13fill_checksumhhth+0x124>
        sum = (uint16_t) sum + (sum >> 16);
 8004aa0:	e0bffa17 	ldw	r2,-24(fp)
 8004aa4:	10ffffcc 	andi	r3,r2,65535
 8004aa8:	e0bffa17 	ldw	r2,-24(fp)
 8004aac:	1004d43a 	srli	r2,r2,16
 8004ab0:	1885883a 	add	r2,r3,r2
 8004ab4:	e0bffa15 	stw	r2,-24(fp)
        ptr+=2;
        len-=2;
    }
    if (len)
        sum += ((uint32_t)*ptr)<<8;
    while (sum>>16)
 8004ab8:	003ff606 	br	8004a94 <_ZL13fill_checksumhhth+0xfc>
        sum = (uint16_t) sum + (sum >> 16);
    uint16_t ck = ~ (uint16_t) sum;
 8004abc:	e0bffa17 	ldw	r2,-24(fp)
 8004ac0:	0084303a 	nor	r2,zero,r2
 8004ac4:	e0bffb0d 	sth	r2,-20(fp)
    gPB[dest] = ck>>8;
 8004ac8:	e0fffc03 	ldbu	r3,-16(fp)
 8004acc:	e0bffb0b 	ldhu	r2,-20(fp)
 8004ad0:	1005d23a 	srai	r2,r2,8
 8004ad4:	1009883a 	mov	r4,r2
 8004ad8:	008200b4 	movhi	r2,2050
 8004adc:	10afa004 	addi	r2,r2,-16768
 8004ae0:	10c5883a 	add	r2,r2,r3
 8004ae4:	11000005 	stb	r4,0(r2)
    gPB[dest+1] = ck;
 8004ae8:	e0bffc03 	ldbu	r2,-16(fp)
 8004aec:	10c00044 	addi	r3,r2,1
 8004af0:	e0bffb0b 	ldhu	r2,-20(fp)
 8004af4:	1009883a 	mov	r4,r2
 8004af8:	008200b4 	movhi	r2,2050
 8004afc:	10afa004 	addi	r2,r2,-16768
 8004b00:	10c5883a 	add	r2,r2,r3
 8004b04:	11000005 	stb	r4,0(r2)
}
 8004b08:	0001883a 	nop
 8004b0c:	e037883a 	mov	sp,fp
 8004b10:	df000017 	ldw	fp,0(sp)
 8004b14:	dec00104 	addi	sp,sp,4
 8004b18:	f800283a 	ret

08004b1c <_ZL7setMACsPKh>:

static void setMACs (const uint8_t *mac) {
 8004b1c:	defffd04 	addi	sp,sp,-12
 8004b20:	dfc00215 	stw	ra,8(sp)
 8004b24:	df000115 	stw	fp,4(sp)
 8004b28:	df000104 	addi	fp,sp,4
 8004b2c:	e13fff15 	stw	r4,-4(fp)
    EtherCard::copyMac(gPB + ETH_DST_MAC, mac);
 8004b30:	e17fff17 	ldw	r5,-4(fp)
 8004b34:	010200b4 	movhi	r4,2050
 8004b38:	212fa004 	addi	r4,r4,-16768
 8004b3c:	800793c0 	call	800793c <_ZN9EtherCard7copyMacEPhPKh>
    EtherCard::copyMac(gPB + ETH_SRC_MAC, EtherCard::mymac);
 8004b40:	008200b4 	movhi	r2,2050
 8004b44:	10afa184 	addi	r2,r2,-16762
 8004b48:	d16702c4 	addi	r5,gp,-25589
 8004b4c:	1009883a 	mov	r4,r2
 8004b50:	800793c0 	call	800793c <_ZN9EtherCard7copyMacEPhPKh>
}
 8004b54:	0001883a 	nop
 8004b58:	e037883a 	mov	sp,fp
 8004b5c:	dfc00117 	ldw	ra,4(sp)
 8004b60:	df000017 	ldw	fp,0(sp)
 8004b64:	dec00204 	addi	sp,sp,8
 8004b68:	f800283a 	ret

08004b6c <_ZL12setMACandIPsPKhS0_>:

static void setMACandIPs (const uint8_t *mac, const uint8_t *dst) {
 8004b6c:	defffc04 	addi	sp,sp,-16
 8004b70:	dfc00315 	stw	ra,12(sp)
 8004b74:	df000215 	stw	fp,8(sp)
 8004b78:	df000204 	addi	fp,sp,8
 8004b7c:	e13ffe15 	stw	r4,-8(fp)
 8004b80:	e17fff15 	stw	r5,-4(fp)
    setMACs(mac);
 8004b84:	e13ffe17 	ldw	r4,-8(fp)
 8004b88:	8004b1c0 	call	8004b1c <_ZL7setMACsPKh>
    EtherCard::copyIp(gPB + IP_DST_P, dst);
 8004b8c:	008200b4 	movhi	r2,2050
 8004b90:	10afa784 	addi	r2,r2,-16738
 8004b94:	e17fff17 	ldw	r5,-4(fp)
 8004b98:	1009883a 	mov	r4,r2
 8004b9c:	800797c0 	call	800797c <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
 8004ba0:	008200b4 	movhi	r2,2050
 8004ba4:	10afa684 	addi	r2,r2,-16742
 8004ba8:	d1670444 	addi	r5,gp,-25583
 8004bac:	1009883a 	mov	r4,r2
 8004bb0:	800797c0 	call	800797c <_ZN9EtherCard6copyIpEPhPKh>
}
 8004bb4:	0001883a 	nop
 8004bb8:	e037883a 	mov	sp,fp
 8004bbc:	dfc00117 	ldw	ra,4(sp)
 8004bc0:	df000017 	ldw	fp,0(sp)
 8004bc4:	dec00204 	addi	sp,sp,8
 8004bc8:	f800283a 	ret

08004bcc <_ZL24check_ip_message_is_fromPKh>:

static uint8_t check_ip_message_is_from(const uint8_t *ip) {
 8004bcc:	defffd04 	addi	sp,sp,-12
 8004bd0:	dfc00215 	stw	ra,8(sp)
 8004bd4:	df000115 	stw	fp,4(sp)
 8004bd8:	df000104 	addi	fp,sp,4
 8004bdc:	e13fff15 	stw	r4,-4(fp)
    return memcmp(gPB + IP_SRC_P, ip, IP_LEN) == 0;
 8004be0:	008200b4 	movhi	r2,2050
 8004be4:	10afa684 	addi	r2,r2,-16742
 8004be8:	01800104 	movi	r6,4
 8004bec:	e17fff17 	ldw	r5,-4(fp)
 8004bf0:	1009883a 	mov	r4,r2
 8004bf4:	8007f280 	call	8007f28 <memcmp>
 8004bf8:	1005003a 	cmpeq	r2,r2,zero
}
 8004bfc:	e037883a 	mov	sp,fp
 8004c00:	dfc00117 	ldw	ra,4(sp)
 8004c04:	df000017 	ldw	fp,0(sp)
 8004c08:	dec00204 	addi	sp,sp,8
 8004c0c:	f800283a 	ret

08004c10 <_ZL6is_lanPKhS0_>:

static bool is_lan(const uint8_t source[IP_LEN], const uint8_t destination[IP_LEN]) {
 8004c10:	defffc04 	addi	sp,sp,-16
 8004c14:	df000315 	stw	fp,12(sp)
 8004c18:	df000304 	addi	fp,sp,12
 8004c1c:	e13ffe15 	stw	r4,-8(fp)
 8004c20:	e17fff15 	stw	r5,-4(fp)
    if(source[0] == 0 || destination[0] == 0) {
 8004c24:	e0bffe17 	ldw	r2,-8(fp)
 8004c28:	10800003 	ldbu	r2,0(r2)
 8004c2c:	10803fcc 	andi	r2,r2,255
 8004c30:	10000426 	beq	r2,zero,8004c44 <_ZL6is_lanPKhS0_+0x34>
 8004c34:	e0bfff17 	ldw	r2,-4(fp)
 8004c38:	10800003 	ldbu	r2,0(r2)
 8004c3c:	10803fcc 	andi	r2,r2,255
 8004c40:	1000021e 	bne	r2,zero,8004c4c <_ZL6is_lanPKhS0_+0x3c>
        return false;
 8004c44:	0005883a 	mov	r2,zero
 8004c48:	00001c06 	br	8004cbc <_ZL6is_lanPKhS0_+0xac>
    }
    for(int i = 0; i < IP_LEN; i++)
 8004c4c:	e03ffd15 	stw	zero,-12(fp)
 8004c50:	e0bffd17 	ldw	r2,-12(fp)
 8004c54:	10800108 	cmpgei	r2,r2,4
 8004c58:	1000171e 	bne	r2,zero,8004cb8 <_ZL6is_lanPKhS0_+0xa8>
        if((source[i] & EtherCard::netmask[i]) != (destination[i] & EtherCard::netmask[i])) {
 8004c5c:	e0bffd17 	ldw	r2,-12(fp)
 8004c60:	e0fffe17 	ldw	r3,-8(fp)
 8004c64:	1885883a 	add	r2,r3,r2
 8004c68:	10c00003 	ldbu	r3,0(r2)
 8004c6c:	e0bffd17 	ldw	r2,-12(fp)
 8004c70:	e13fff17 	ldw	r4,-4(fp)
 8004c74:	2085883a 	add	r2,r4,r2
 8004c78:	10800003 	ldbu	r2,0(r2)
 8004c7c:	1884f03a 	xor	r2,r3,r2
 8004c80:	1009883a 	mov	r4,r2
 8004c84:	e0fffd17 	ldw	r3,-12(fp)
 8004c88:	d0a70544 	addi	r2,gp,-25579
 8004c8c:	1885883a 	add	r2,r3,r2
 8004c90:	10800003 	ldbu	r2,0(r2)
 8004c94:	2084703a 	and	r2,r4,r2
 8004c98:	10803fcc 	andi	r2,r2,255
 8004c9c:	10000226 	beq	r2,zero,8004ca8 <_ZL6is_lanPKhS0_+0x98>
            return false;
 8004ca0:	0005883a 	mov	r2,zero
 8004ca4:	00000506 	br	8004cbc <_ZL6is_lanPKhS0_+0xac>

static bool is_lan(const uint8_t source[IP_LEN], const uint8_t destination[IP_LEN]) {
    if(source[0] == 0 || destination[0] == 0) {
        return false;
    }
    for(int i = 0; i < IP_LEN; i++)
 8004ca8:	e0bffd17 	ldw	r2,-12(fp)
 8004cac:	10800044 	addi	r2,r2,1
 8004cb0:	e0bffd15 	stw	r2,-12(fp)
 8004cb4:	003fe606 	br	8004c50 <_ZL6is_lanPKhS0_+0x40>
        if((source[i] & EtherCard::netmask[i]) != (destination[i] & EtherCard::netmask[i])) {
            return false;
        }
    return true;
 8004cb8:	00800044 	movi	r2,1
}
 8004cbc:	e037883a 	mov	sp,fp
 8004cc0:	df000017 	ldw	fp,0(sp)
 8004cc4:	dec00104 	addi	sp,sp,4
 8004cc8:	f800283a 	ret

08004ccc <_ZL25eth_type_is_arp_and_my_ipt>:

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
 8004ccc:	defffd04 	addi	sp,sp,-12
 8004cd0:	dfc00215 	stw	ra,8(sp)
 8004cd4:	df000115 	stw	fp,4(sp)
 8004cd8:	df000104 	addi	fp,sp,4
 8004cdc:	2005883a 	mov	r2,r4
 8004ce0:	e0bfff0d 	sth	r2,-4(fp)
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
 8004ce4:	e0bfff0b 	ldhu	r2,-4(fp)
 8004ce8:	10800a70 	cmpltui	r2,r2,41
 8004cec:	1000151e 	bne	r2,zero,8004d44 <_ZL25eth_type_is_arp_and_my_ipt+0x78>
        }
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
 8004cf0:	008200b4 	movhi	r2,2050
 8004cf4:	10afa004 	addi	r2,r2,-16768
 8004cf8:	10800303 	ldbu	r2,12(r2)
 8004cfc:	10803fcc 	andi	r2,r2,255
 8004d00:	10800218 	cmpnei	r2,r2,8
 8004d04:	10000f1e 	bne	r2,zero,8004d44 <_ZL25eth_type_is_arp_and_my_ipt+0x78>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
 8004d08:	008200b4 	movhi	r2,2050
 8004d0c:	10afa004 	addi	r2,r2,-16768
 8004d10:	10800343 	ldbu	r2,13(r2)
        }
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
 8004d14:	10803fcc 	andi	r2,r2,255
 8004d18:	10800198 	cmpnei	r2,r2,6
 8004d1c:	1000091e 	bne	r2,zero,8004d44 <_ZL25eth_type_is_arp_and_my_ipt+0x78>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
 8004d20:	008200b4 	movhi	r2,2050
 8004d24:	10afa984 	addi	r2,r2,-16730
 8004d28:	01800104 	movi	r6,4
 8004d2c:	d1670444 	addi	r5,gp,-25583
 8004d30:	1009883a 	mov	r4,r2
 8004d34:	8007f280 	call	8007f28 <memcmp>
    return true;
}

static uint8_t eth_type_is_arp_and_my_ip(uint16_t len) {
    return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
 8004d38:	1000021e 	bne	r2,zero,8004d44 <_ZL25eth_type_is_arp_and_my_ipt+0x78>
 8004d3c:	00800044 	movi	r2,1
 8004d40:	00000106 	br	8004d48 <_ZL25eth_type_is_arp_and_my_ipt+0x7c>
 8004d44:	0005883a 	mov	r2,zero
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}
 8004d48:	e037883a 	mov	sp,fp
 8004d4c:	dfc00117 	ldw	ra,4(sp)
 8004d50:	df000017 	ldw	fp,0(sp)
 8004d54:	dec00204 	addi	sp,sp,8
 8004d58:	f800283a 	ret

08004d5c <_ZL24eth_type_is_ip_and_my_ipt>:

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
 8004d5c:	defffd04 	addi	sp,sp,-12
 8004d60:	dfc00215 	stw	ra,8(sp)
 8004d64:	df000115 	stw	fp,4(sp)
 8004d68:	df000104 	addi	fp,sp,4
 8004d6c:	2005883a 	mov	r2,r4
 8004d70:	e0bfff0d 	sth	r2,-4(fp)
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
 8004d74:	e0bfff0b 	ldhu	r2,-4(fp)
 8004d78:	10800ab0 	cmpltui	r2,r2,42
 8004d7c:	1000281e 	bne	r2,zero,8004e20 <_ZL24eth_type_is_ip_and_my_ipt+0xc4>
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
 8004d80:	008200b4 	movhi	r2,2050
 8004d84:	10afa004 	addi	r2,r2,-16768
 8004d88:	10800303 	ldbu	r2,12(r2)
 8004d8c:	10803fcc 	andi	r2,r2,255
 8004d90:	10800218 	cmpnei	r2,r2,8
 8004d94:	1000221e 	bne	r2,zero,8004e20 <_ZL24eth_type_is_ip_and_my_ipt+0xc4>
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
 8004d98:	008200b4 	movhi	r2,2050
 8004d9c:	10afa004 	addi	r2,r2,-16768
 8004da0:	10800343 	ldbu	r2,13(r2)
           gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
 8004da4:	10803fcc 	andi	r2,r2,255
 8004da8:	10001d1e 	bne	r2,zero,8004e20 <_ZL24eth_type_is_ip_and_my_ipt+0xc4>
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
 8004dac:	008200b4 	movhi	r2,2050
 8004db0:	10afa004 	addi	r2,r2,-16768
 8004db4:	10800383 	ldbu	r2,14(r2)
           memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, IP_LEN) == 0;
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
 8004db8:	10803fcc 	andi	r2,r2,255
 8004dbc:	10801158 	cmpnei	r2,r2,69
 8004dc0:	1000171e 	bne	r2,zero,8004e20 <_ZL24eth_type_is_ip_and_my_ipt+0xc4>
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
 8004dc4:	008200b4 	movhi	r2,2050
 8004dc8:	10afa784 	addi	r2,r2,-16738
 8004dcc:	01800104 	movi	r6,4
 8004dd0:	d1670444 	addi	r5,gp,-25583
 8004dd4:	1009883a 	mov	r4,r2
 8004dd8:	8007f280 	call	8007f28 <memcmp>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
 8004ddc:	10000e26 	beq	r2,zero,8004e18 <_ZL24eth_type_is_ip_and_my_ipt+0xbc>
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
            || (memcmp(gPB + IP_DST_P, EtherCard::broadcastip, IP_LEN) == 0) //not subnet broadcast
 8004de0:	008200b4 	movhi	r2,2050
 8004de4:	10afa784 	addi	r2,r2,-16738
 8004de8:	01800104 	movi	r6,4
 8004dec:	d1670644 	addi	r5,gp,-25575
 8004df0:	1009883a 	mov	r4,r2
 8004df4:	8007f280 	call	8007f28 <memcmp>
 8004df8:	10000726 	beq	r2,zero,8004e18 <_ZL24eth_type_is_ip_and_my_ipt+0xbc>
            || (memcmp(gPB + IP_DST_P, allOnes, IP_LEN) == 0)); //not global broadcasts
 8004dfc:	008200b4 	movhi	r2,2050
 8004e00:	10afa784 	addi	r2,r2,-16738
 8004e04:	01800104 	movi	r6,4
 8004e08:	d16005c4 	addi	r5,gp,-32745
 8004e0c:	1009883a 	mov	r4,r2
 8004e10:	8007f280 	call	8007f28 <memcmp>
 8004e14:	1000021e 	bne	r2,zero,8004e20 <_ZL24eth_type_is_ip_and_my_ipt+0xc4>
}

static uint8_t eth_type_is_ip_and_my_ip(uint16_t len) {
    return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
           gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
           gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
 8004e18:	00800044 	movi	r2,1
 8004e1c:	00000106 	br	8004e24 <_ZL24eth_type_is_ip_and_my_ipt+0xc8>
 8004e20:	0005883a 	mov	r2,zero
           (memcmp(gPB + IP_DST_P, EtherCard::myip, IP_LEN) == 0  //not my IP
            || (memcmp(gPB + IP_DST_P, EtherCard::broadcastip, IP_LEN) == 0) //not subnet broadcast
            || (memcmp(gPB + IP_DST_P, allOnes, IP_LEN) == 0)); //not global broadcasts
    //!@todo Handle multicast
}
 8004e24:	e037883a 	mov	sp,fp
 8004e28:	dfc00117 	ldw	ra,4(sp)
 8004e2c:	df000017 	ldw	fp,0(sp)
 8004e30:	dec00204 	addi	sp,sp,8
 8004e34:	f800283a 	ret

08004e38 <_ZL20fill_ip_hdr_checksumv>:

static void fill_ip_hdr_checksum() {
 8004e38:	defffe04 	addi	sp,sp,-8
 8004e3c:	dfc00115 	stw	ra,4(sp)
 8004e40:	df000015 	stw	fp,0(sp)
 8004e44:	d839883a 	mov	fp,sp
    gPB[IP_CHECKSUM_P] = 0;
 8004e48:	008200b4 	movhi	r2,2050
 8004e4c:	10afa004 	addi	r2,r2,-16768
 8004e50:	10000605 	stb	zero,24(r2)
    gPB[IP_CHECKSUM_P+1] = 0;
 8004e54:	008200b4 	movhi	r2,2050
 8004e58:	10afa004 	addi	r2,r2,-16768
 8004e5c:	10000645 	stb	zero,25(r2)
    gPB[IP_FLAGS_P] = 0x40; // don't fragment
 8004e60:	008200b4 	movhi	r2,2050
 8004e64:	10afa004 	addi	r2,r2,-16768
 8004e68:	00c01004 	movi	r3,64
 8004e6c:	10c00505 	stb	r3,20(r2)
    gPB[IP_FLAGS_P+1] = 0;  // fragment offset
 8004e70:	008200b4 	movhi	r2,2050
 8004e74:	10afa004 	addi	r2,r2,-16768
 8004e78:	10000545 	stb	zero,21(r2)
    gPB[IP_TTL_P] = 64; // ttl
 8004e7c:	008200b4 	movhi	r2,2050
 8004e80:	10afa004 	addi	r2,r2,-16768
 8004e84:	00c01004 	movi	r3,64
 8004e88:	10c00585 	stb	r3,22(r2)
    fill_checksum(IP_CHECKSUM_P, IP_P, IP_HEADER_LEN,0);
 8004e8c:	000f883a 	mov	r7,zero
 8004e90:	01800504 	movi	r6,20
 8004e94:	01400384 	movi	r5,14
 8004e98:	01000604 	movi	r4,24
 8004e9c:	80049980 	call	8004998 <_ZL13fill_checksumhhth>
}
 8004ea0:	0001883a 	nop
 8004ea4:	e037883a 	mov	sp,fp
 8004ea8:	dfc00117 	ldw	ra,4(sp)
 8004eac:	df000017 	ldw	fp,0(sp)
 8004eb0:	dec00204 	addi	sp,sp,8
 8004eb4:	f800283a 	ret

08004eb8 <_ZL11make_eth_ipv>:

static void make_eth_ip() {
 8004eb8:	defffe04 	addi	sp,sp,-8
 8004ebc:	dfc00115 	stw	ra,4(sp)
 8004ec0:	df000015 	stw	fp,0(sp)
 8004ec4:	d839883a 	mov	fp,sp
    setMACs(gPB + ETH_SRC_MAC);
 8004ec8:	008200b4 	movhi	r2,2050
 8004ecc:	10afa184 	addi	r2,r2,-16762
 8004ed0:	1009883a 	mov	r4,r2
 8004ed4:	8004b1c0 	call	8004b1c <_ZL7setMACsPKh>
    EtherCard::copyIp(gPB + IP_DST_P, gPB + IP_SRC_P);
 8004ed8:	008200b4 	movhi	r2,2050
 8004edc:	10afa784 	addi	r2,r2,-16738
 8004ee0:	00c200b4 	movhi	r3,2050
 8004ee4:	18efa684 	addi	r3,r3,-16742
 8004ee8:	180b883a 	mov	r5,r3
 8004eec:	1009883a 	mov	r4,r2
 8004ef0:	800797c0 	call	800797c <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
 8004ef4:	008200b4 	movhi	r2,2050
 8004ef8:	10afa684 	addi	r2,r2,-16742
 8004efc:	d1670444 	addi	r5,gp,-25583
 8004f00:	1009883a 	mov	r4,r2
 8004f04:	800797c0 	call	800797c <_ZN9EtherCard6copyIpEPhPKh>
    fill_ip_hdr_checksum();
 8004f08:	8004e380 	call	8004e38 <_ZL20fill_ip_hdr_checksumv>
}
 8004f0c:	0001883a 	nop
 8004f10:	e037883a 	mov	sp,fp
 8004f14:	dfc00117 	ldw	ra,4(sp)
 8004f18:	df000017 	ldw	fp,0(sp)
 8004f1c:	dec00204 	addi	sp,sp,8
 8004f20:	f800283a 	ret

08004f24 <_ZL8step_seqth>:

static void step_seq(uint16_t rel_ack_num,uint8_t cp_seq) {
 8004f24:	defffc04 	addi	sp,sp,-16
 8004f28:	df000315 	stw	fp,12(sp)
 8004f2c:	df000304 	addi	fp,sp,12
 8004f30:	2007883a 	mov	r3,r4
 8004f34:	2805883a 	mov	r2,r5
 8004f38:	e0fffe0d 	sth	r3,-8(fp)
 8004f3c:	e0bfff05 	stb	r2,-4(fp)
    uint8_t i;
    uint8_t tseq;
    i = 4;
 8004f40:	00800104 	movi	r2,4
 8004f44:	e0bffd05 	stb	r2,-12(fp)
    while(i>0) {
 8004f48:	e0bffd03 	ldbu	r2,-12(fp)
 8004f4c:	10003026 	beq	r2,zero,8005010 <_ZL8step_seqth+0xec>
        rel_ack_num = gPB[TCP_SEQ_H_P+i-1]+rel_ack_num;
 8004f50:	e0bffd03 	ldbu	r2,-12(fp)
 8004f54:	10c00944 	addi	r3,r2,37
 8004f58:	008200b4 	movhi	r2,2050
 8004f5c:	10afa004 	addi	r2,r2,-16768
 8004f60:	10c5883a 	add	r2,r2,r3
 8004f64:	10800003 	ldbu	r2,0(r2)
 8004f68:	10c03fcc 	andi	r3,r2,255
 8004f6c:	e0bffe0b 	ldhu	r2,-8(fp)
 8004f70:	1885883a 	add	r2,r3,r2
 8004f74:	e0bffe0d 	sth	r2,-8(fp)
        tseq = gPB[TCP_SEQACK_H_P+i-1];
 8004f78:	e0bffd03 	ldbu	r2,-12(fp)
 8004f7c:	10c00a44 	addi	r3,r2,41
 8004f80:	008200b4 	movhi	r2,2050
 8004f84:	10afa004 	addi	r2,r2,-16768
 8004f88:	10c5883a 	add	r2,r2,r3
 8004f8c:	10800003 	ldbu	r2,0(r2)
 8004f90:	e0bffd45 	stb	r2,-11(fp)
        gPB[TCP_SEQACK_H_P+i-1] = rel_ack_num;
 8004f94:	e0bffd03 	ldbu	r2,-12(fp)
 8004f98:	10c00a44 	addi	r3,r2,41
 8004f9c:	e0bffe0b 	ldhu	r2,-8(fp)
 8004fa0:	1009883a 	mov	r4,r2
 8004fa4:	008200b4 	movhi	r2,2050
 8004fa8:	10afa004 	addi	r2,r2,-16768
 8004fac:	10c5883a 	add	r2,r2,r3
 8004fb0:	11000005 	stb	r4,0(r2)
        if (cp_seq)
 8004fb4:	e0bfff03 	ldbu	r2,-4(fp)
 8004fb8:	10000826 	beq	r2,zero,8004fdc <_ZL8step_seqth+0xb8>
            gPB[TCP_SEQ_H_P+i-1] = tseq;
 8004fbc:	e0bffd03 	ldbu	r2,-12(fp)
 8004fc0:	10c00944 	addi	r3,r2,37
 8004fc4:	008200b4 	movhi	r2,2050
 8004fc8:	10afa004 	addi	r2,r2,-16768
 8004fcc:	10c5883a 	add	r2,r2,r3
 8004fd0:	e0fffd43 	ldbu	r3,-11(fp)
 8004fd4:	10c00005 	stb	r3,0(r2)
 8004fd8:	00000606 	br	8004ff4 <_ZL8step_seqth+0xd0>
        else
            gPB[TCP_SEQ_H_P+i-1] = 0; // some preset value
 8004fdc:	e0bffd03 	ldbu	r2,-12(fp)
 8004fe0:	10c00944 	addi	r3,r2,37
 8004fe4:	008200b4 	movhi	r2,2050
 8004fe8:	10afa004 	addi	r2,r2,-16768
 8004fec:	10c5883a 	add	r2,r2,r3
 8004ff0:	10000005 	stb	zero,0(r2)
        rel_ack_num = rel_ack_num>>8;
 8004ff4:	e0bffe0b 	ldhu	r2,-8(fp)
 8004ff8:	1005d23a 	srai	r2,r2,8
 8004ffc:	e0bffe0d 	sth	r2,-8(fp)
        i--;
 8005000:	e0bffd03 	ldbu	r2,-12(fp)
 8005004:	10bfffc4 	addi	r2,r2,-1
 8005008:	e0bffd05 	stb	r2,-12(fp)

static void step_seq(uint16_t rel_ack_num,uint8_t cp_seq) {
    uint8_t i;
    uint8_t tseq;
    i = 4;
    while(i>0) {
 800500c:	003fce06 	br	8004f48 <_ZL8step_seqth+0x24>
        else
            gPB[TCP_SEQ_H_P+i-1] = 0; // some preset value
        rel_ack_num = rel_ack_num>>8;
        i--;
    }
}
 8005010:	0001883a 	nop
 8005014:	e037883a 	mov	sp,fp
 8005018:	df000017 	ldw	fp,0(sp)
 800501c:	dec00104 	addi	sp,sp,4
 8005020:	f800283a 	ret

08005024 <_ZL12make_tcpheadth>:

static void make_tcphead(uint16_t rel_ack_num,uint8_t cp_seq) {
 8005024:	defffb04 	addi	sp,sp,-20
 8005028:	dfc00415 	stw	ra,16(sp)
 800502c:	df000315 	stw	fp,12(sp)
 8005030:	df000304 	addi	fp,sp,12
 8005034:	2007883a 	mov	r3,r4
 8005038:	2805883a 	mov	r2,r5
 800503c:	e0fffe0d 	sth	r3,-8(fp)
 8005040:	e0bfff05 	stb	r2,-4(fp)
    uint8_t i = gPB[TCP_DST_PORT_H_P];
 8005044:	008200b4 	movhi	r2,2050
 8005048:	10afa004 	addi	r2,r2,-16768
 800504c:	10800903 	ldbu	r2,36(r2)
 8005050:	e0bffd05 	stb	r2,-12(fp)
    gPB[TCP_DST_PORT_H_P] = gPB[TCP_SRC_PORT_H_P];
 8005054:	008200b4 	movhi	r2,2050
 8005058:	10afa004 	addi	r2,r2,-16768
 800505c:	10c00883 	ldbu	r3,34(r2)
 8005060:	008200b4 	movhi	r2,2050
 8005064:	10afa004 	addi	r2,r2,-16768
 8005068:	10c00905 	stb	r3,36(r2)
    gPB[TCP_SRC_PORT_H_P] = i;
 800506c:	008200b4 	movhi	r2,2050
 8005070:	10afa004 	addi	r2,r2,-16768
 8005074:	e0fffd03 	ldbu	r3,-12(fp)
 8005078:	10c00885 	stb	r3,34(r2)
    uint8_t j = gPB[TCP_DST_PORT_L_P];
 800507c:	008200b4 	movhi	r2,2050
 8005080:	10afa004 	addi	r2,r2,-16768
 8005084:	10800943 	ldbu	r2,37(r2)
 8005088:	e0bffd45 	stb	r2,-11(fp)
    gPB[TCP_DST_PORT_L_P] = gPB[TCP_SRC_PORT_L_P];
 800508c:	008200b4 	movhi	r2,2050
 8005090:	10afa004 	addi	r2,r2,-16768
 8005094:	10c008c3 	ldbu	r3,35(r2)
 8005098:	008200b4 	movhi	r2,2050
 800509c:	10afa004 	addi	r2,r2,-16768
 80050a0:	10c00945 	stb	r3,37(r2)
    gPB[TCP_SRC_PORT_L_P] = j;
 80050a4:	008200b4 	movhi	r2,2050
 80050a8:	10afa004 	addi	r2,r2,-16768
 80050ac:	e0fffd43 	ldbu	r3,-11(fp)
 80050b0:	10c008c5 	stb	r3,35(r2)
    step_seq(rel_ack_num,cp_seq);
 80050b4:	e0bffe0b 	ldhu	r2,-8(fp)
 80050b8:	e0ffff03 	ldbu	r3,-4(fp)
 80050bc:	180b883a 	mov	r5,r3
 80050c0:	1009883a 	mov	r4,r2
 80050c4:	8004f240 	call	8004f24 <_ZL8step_seqth>
    gPB[TCP_CHECKSUM_H_P] = 0;
 80050c8:	008200b4 	movhi	r2,2050
 80050cc:	10afa004 	addi	r2,r2,-16768
 80050d0:	10000c85 	stb	zero,50(r2)
    gPB[TCP_CHECKSUM_L_P] = 0;
 80050d4:	008200b4 	movhi	r2,2050
 80050d8:	10afa004 	addi	r2,r2,-16768
 80050dc:	10000cc5 	stb	zero,51(r2)
    gPB[TCP_HEADER_LEN_P] = 0x50;
 80050e0:	008200b4 	movhi	r2,2050
 80050e4:	10afa004 	addi	r2,r2,-16768
 80050e8:	00c01404 	movi	r3,80
 80050ec:	10c00b85 	stb	r3,46(r2)
}
 80050f0:	0001883a 	nop
 80050f4:	e037883a 	mov	sp,fp
 80050f8:	dfc00117 	ldw	ra,4(sp)
 80050fc:	df000017 	ldw	fp,0(sp)
 8005100:	dec00204 	addi	sp,sp,8
 8005104:	f800283a 	ret

08005108 <_ZL28make_arp_answer_from_requestv>:

static void make_arp_answer_from_request() {
 8005108:	defffe04 	addi	sp,sp,-8
 800510c:	dfc00115 	stw	ra,4(sp)
 8005110:	df000015 	stw	fp,0(sp)
 8005114:	d839883a 	mov	fp,sp
    printf("In make arp answer form request\n");
 8005118:	010200b4 	movhi	r4,2050
 800511c:	21208704 	addi	r4,r4,-32228
 8005120:	80083600 	call	8008360 <puts>
    setMACs(gPB + ETH_SRC_MAC);
 8005124:	008200b4 	movhi	r2,2050
 8005128:	10afa184 	addi	r2,r2,-16762
 800512c:	1009883a 	mov	r4,r2
 8005130:	8004b1c0 	call	8004b1c <_ZL7setMACsPKh>
    gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
 8005134:	008200b4 	movhi	r2,2050
 8005138:	10afa004 	addi	r2,r2,-16768
 800513c:	10000505 	stb	zero,20(r2)
    gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
 8005140:	008200b4 	movhi	r2,2050
 8005144:	10afa004 	addi	r2,r2,-16768
 8005148:	00c00084 	movi	r3,2
 800514c:	10c00545 	stb	r3,21(r2)
    EtherCard::copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
 8005150:	008200b4 	movhi	r2,2050
 8005154:	10afa804 	addi	r2,r2,-16736
 8005158:	00c200b4 	movhi	r3,2050
 800515c:	18efa584 	addi	r3,r3,-16746
 8005160:	180b883a 	mov	r5,r3
 8005164:	1009883a 	mov	r4,r2
 8005168:	800793c0 	call	800793c <_ZN9EtherCard7copyMacEPhPKh>
    EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
 800516c:	008200b4 	movhi	r2,2050
 8005170:	10afa584 	addi	r2,r2,-16746
 8005174:	d16702c4 	addi	r5,gp,-25589
 8005178:	1009883a 	mov	r4,r2
 800517c:	800793c0 	call	800793c <_ZN9EtherCard7copyMacEPhPKh>
    EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
 8005180:	008200b4 	movhi	r2,2050
 8005184:	10afa984 	addi	r2,r2,-16730
 8005188:	00c200b4 	movhi	r3,2050
 800518c:	18efa704 	addi	r3,r3,-16740
 8005190:	180b883a 	mov	r5,r3
 8005194:	1009883a 	mov	r4,r2
 8005198:	800797c0 	call	800797c <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
 800519c:	008200b4 	movhi	r2,2050
 80051a0:	10afa704 	addi	r2,r2,-16740
 80051a4:	d1670444 	addi	r5,gp,-25583
 80051a8:	1009883a 	mov	r4,r2
 80051ac:	800797c0 	call	800797c <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::packetSend(42);
 80051b0:	01000a84 	movi	r4,42
 80051b4:	80047080 	call	8004708 <_ZN8ENC28J6010packetSendEt>
}
 80051b8:	0001883a 	nop
 80051bc:	e037883a 	mov	sp,fp
 80051c0:	dfc00117 	ldw	ra,4(sp)
 80051c4:	df000017 	ldw	fp,0(sp)
 80051c8:	dec00204 	addi	sp,sp,8
 80051cc:	f800283a 	ret

080051d0 <_ZL28make_echo_reply_from_requestt>:

static void make_echo_reply_from_request(uint16_t len) {
 80051d0:	defffd04 	addi	sp,sp,-12
 80051d4:	dfc00215 	stw	ra,8(sp)
 80051d8:	df000115 	stw	fp,4(sp)
 80051dc:	df000104 	addi	fp,sp,4
 80051e0:	2005883a 	mov	r2,r4
 80051e4:	e0bfff0d 	sth	r2,-4(fp)
    make_eth_ip();
 80051e8:	8004eb80 	call	8004eb8 <_ZL11make_eth_ipv>
    gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
 80051ec:	008200b4 	movhi	r2,2050
 80051f0:	10afa004 	addi	r2,r2,-16768
 80051f4:	10000885 	stb	zero,34(r2)
    if (gPB[ICMP_CHECKSUM_P] > (0xFF-0x08))
 80051f8:	008200b4 	movhi	r2,2050
 80051fc:	10afa004 	addi	r2,r2,-16768
 8005200:	10800903 	ldbu	r2,36(r2)
 8005204:	10803fcc 	andi	r2,r2,255
 8005208:	10803e30 	cmpltui	r2,r2,248
 800520c:	1000081e 	bne	r2,zero,8005230 <_ZL28make_echo_reply_from_requestt+0x60>
        gPB[ICMP_CHECKSUM_P+1]++;
 8005210:	008200b4 	movhi	r2,2050
 8005214:	10afa004 	addi	r2,r2,-16768
 8005218:	10800943 	ldbu	r2,37(r2)
 800521c:	10800044 	addi	r2,r2,1
 8005220:	1007883a 	mov	r3,r2
 8005224:	008200b4 	movhi	r2,2050
 8005228:	10afa004 	addi	r2,r2,-16768
 800522c:	10c00945 	stb	r3,37(r2)
    gPB[ICMP_CHECKSUM_P] += 0x08;
 8005230:	008200b4 	movhi	r2,2050
 8005234:	10afa004 	addi	r2,r2,-16768
 8005238:	10800903 	ldbu	r2,36(r2)
 800523c:	10800204 	addi	r2,r2,8
 8005240:	1007883a 	mov	r3,r2
 8005244:	008200b4 	movhi	r2,2050
 8005248:	10afa004 	addi	r2,r2,-16768
 800524c:	10c00905 	stb	r3,36(r2)
    EtherCard::packetSend(len);
 8005250:	e0bfff0b 	ldhu	r2,-4(fp)
 8005254:	1009883a 	mov	r4,r2
 8005258:	80047080 	call	8004708 <_ZN8ENC28J6010packetSendEt>
}
 800525c:	0001883a 	nop
 8005260:	e037883a 	mov	sp,fp
 8005264:	dfc00117 	ldw	ra,4(sp)
 8005268:	df000017 	ldw	fp,0(sp)
 800526c:	dec00204 	addi	sp,sp,8
 8005270:	f800283a 	ret

08005274 <_ZN9EtherCard12makeUdpReplyEPKcht>:

void EtherCard::makeUdpReply (const char *data,uint8_t datalen,uint16_t port) {
 8005274:	defffb04 	addi	sp,sp,-20
 8005278:	dfc00415 	stw	ra,16(sp)
 800527c:	df000315 	stw	fp,12(sp)
 8005280:	df000304 	addi	fp,sp,12
 8005284:	e13ffd15 	stw	r4,-12(fp)
 8005288:	2807883a 	mov	r3,r5
 800528c:	3005883a 	mov	r2,r6
 8005290:	e0fffe05 	stb	r3,-8(fp)
 8005294:	e0bfff0d 	sth	r2,-4(fp)
    if (datalen>220)
 8005298:	e0bffe03 	ldbu	r2,-8(fp)
 800529c:	10803770 	cmpltui	r2,r2,221
 80052a0:	1000021e 	bne	r2,zero,80052ac <_ZN9EtherCard12makeUdpReplyEPKcht+0x38>
        datalen = 220;
 80052a4:	00bff704 	movi	r2,-36
 80052a8:	e0bffe05 	stb	r2,-8(fp)
    gPB[IP_TOTLEN_H_P] = (IP_HEADER_LEN+UDP_HEADER_LEN+datalen) >>8;
 80052ac:	e0bffe03 	ldbu	r2,-8(fp)
 80052b0:	10800704 	addi	r2,r2,28
 80052b4:	1005d23a 	srai	r2,r2,8
 80052b8:	1007883a 	mov	r3,r2
 80052bc:	008200b4 	movhi	r2,2050
 80052c0:	10afa004 	addi	r2,r2,-16768
 80052c4:	10c00405 	stb	r3,16(r2)
    gPB[IP_TOTLEN_L_P] = IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
 80052c8:	e0bffe03 	ldbu	r2,-8(fp)
 80052cc:	10800704 	addi	r2,r2,28
 80052d0:	1007883a 	mov	r3,r2
 80052d4:	008200b4 	movhi	r2,2050
 80052d8:	10afa004 	addi	r2,r2,-16768
 80052dc:	10c00445 	stb	r3,17(r2)
    make_eth_ip();
 80052e0:	8004eb80 	call	8004eb8 <_ZL11make_eth_ipv>
    gPB[UDP_DST_PORT_H_P] = gPB[UDP_SRC_PORT_H_P];
 80052e4:	008200b4 	movhi	r2,2050
 80052e8:	10afa004 	addi	r2,r2,-16768
 80052ec:	10c00883 	ldbu	r3,34(r2)
 80052f0:	008200b4 	movhi	r2,2050
 80052f4:	10afa004 	addi	r2,r2,-16768
 80052f8:	10c00905 	stb	r3,36(r2)
    gPB[UDP_DST_PORT_L_P] = gPB[UDP_SRC_PORT_L_P];
 80052fc:	008200b4 	movhi	r2,2050
 8005300:	10afa004 	addi	r2,r2,-16768
 8005304:	10c008c3 	ldbu	r3,35(r2)
 8005308:	008200b4 	movhi	r2,2050
 800530c:	10afa004 	addi	r2,r2,-16768
 8005310:	10c00945 	stb	r3,37(r2)
    gPB[UDP_SRC_PORT_H_P] = port>>8;
 8005314:	e0bfff0b 	ldhu	r2,-4(fp)
 8005318:	1005d23a 	srai	r2,r2,8
 800531c:	1007883a 	mov	r3,r2
 8005320:	008200b4 	movhi	r2,2050
 8005324:	10afa004 	addi	r2,r2,-16768
 8005328:	10c00885 	stb	r3,34(r2)
    gPB[UDP_SRC_PORT_L_P] = port;
 800532c:	e0bfff0b 	ldhu	r2,-4(fp)
 8005330:	1007883a 	mov	r3,r2
 8005334:	008200b4 	movhi	r2,2050
 8005338:	10afa004 	addi	r2,r2,-16768
 800533c:	10c008c5 	stb	r3,35(r2)
    gPB[UDP_LEN_H_P] = (UDP_HEADER_LEN+datalen) >> 8;
 8005340:	e0bffe03 	ldbu	r2,-8(fp)
 8005344:	10800204 	addi	r2,r2,8
 8005348:	1005d23a 	srai	r2,r2,8
 800534c:	1007883a 	mov	r3,r2
 8005350:	008200b4 	movhi	r2,2050
 8005354:	10afa004 	addi	r2,r2,-16768
 8005358:	10c00985 	stb	r3,38(r2)
    gPB[UDP_LEN_L_P] = UDP_HEADER_LEN+datalen;
 800535c:	e0bffe03 	ldbu	r2,-8(fp)
 8005360:	10800204 	addi	r2,r2,8
 8005364:	1007883a 	mov	r3,r2
 8005368:	008200b4 	movhi	r2,2050
 800536c:	10afa004 	addi	r2,r2,-16768
 8005370:	10c009c5 	stb	r3,39(r2)
    gPB[UDP_CHECKSUM_H_P] = 0;
 8005374:	008200b4 	movhi	r2,2050
 8005378:	10afa004 	addi	r2,r2,-16768
 800537c:	10000a05 	stb	zero,40(r2)
    gPB[UDP_CHECKSUM_L_P] = 0;
 8005380:	008200b4 	movhi	r2,2050
 8005384:	10afa004 	addi	r2,r2,-16768
 8005388:	10000a45 	stb	zero,41(r2)
    memcpy(gPB + UDP_DATA_P, data, datalen);
 800538c:	008200b4 	movhi	r2,2050
 8005390:	10afaa84 	addi	r2,r2,-16726
 8005394:	e0fffe03 	ldbu	r3,-8(fp)
 8005398:	180d883a 	mov	r6,r3
 800539c:	e17ffd17 	ldw	r5,-12(fp)
 80053a0:	1009883a 	mov	r4,r2
 80053a4:	8007fa40 	call	8007fa4 <memcpy>
    fill_checksum(UDP_CHECKSUM_H_P, IP_SRC_P, 16 + datalen,1);
 80053a8:	e0bffe03 	ldbu	r2,-8(fp)
 80053ac:	10800404 	addi	r2,r2,16
 80053b0:	10bfffcc 	andi	r2,r2,65535
 80053b4:	01c00044 	movi	r7,1
 80053b8:	100d883a 	mov	r6,r2
 80053bc:	01400684 	movi	r5,26
 80053c0:	01000a04 	movi	r4,40
 80053c4:	80049980 	call	8004998 <_ZL13fill_checksumhhth>
    packetSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen);
 80053c8:	e0bffe03 	ldbu	r2,-8(fp)
 80053cc:	10800a84 	addi	r2,r2,42
 80053d0:	10bfffcc 	andi	r2,r2,65535
 80053d4:	1009883a 	mov	r4,r2
 80053d8:	80047080 	call	8004708 <_ZN8ENC28J6010packetSendEt>
}
 80053dc:	0001883a 	nop
 80053e0:	e037883a 	mov	sp,fp
 80053e4:	dfc00117 	ldw	ra,4(sp)
 80053e8:	df000017 	ldw	fp,0(sp)
 80053ec:	dec00204 	addi	sp,sp,8
 80053f0:	f800283a 	ret

080053f4 <_ZL24make_tcp_synack_from_synv>:

static void make_tcp_synack_from_syn() {
 80053f4:	defffe04 	addi	sp,sp,-8
 80053f8:	dfc00115 	stw	ra,4(sp)
 80053fc:	df000015 	stw	fp,0(sp)
 8005400:	d839883a 	mov	fp,sp
    gPB[IP_TOTLEN_H_P] = 0;
 8005404:	008200b4 	movhi	r2,2050
 8005408:	10afa004 	addi	r2,r2,-16768
 800540c:	10000405 	stb	zero,16(r2)
    gPB[IP_TOTLEN_L_P] = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
 8005410:	008200b4 	movhi	r2,2050
 8005414:	10afa004 	addi	r2,r2,-16768
 8005418:	00c00b04 	movi	r3,44
 800541c:	10c00445 	stb	r3,17(r2)
    make_eth_ip();
 8005420:	8004eb80 	call	8004eb8 <_ZL11make_eth_ipv>
    gPB[TCP_FLAGS_P] = TCP_FLAGS_SYNACK_V;
 8005424:	008200b4 	movhi	r2,2050
 8005428:	10afa004 	addi	r2,r2,-16768
 800542c:	00c00484 	movi	r3,18
 8005430:	10c00bc5 	stb	r3,47(r2)
    make_tcphead(1,0);
 8005434:	000b883a 	mov	r5,zero
 8005438:	01000044 	movi	r4,1
 800543c:	80050240 	call	8005024 <_ZL12make_tcpheadth>
    gPB[TCP_SEQ_H_P+0] = 0;
 8005440:	008200b4 	movhi	r2,2050
 8005444:	10afa004 	addi	r2,r2,-16768
 8005448:	10000985 	stb	zero,38(r2)
    gPB[TCP_SEQ_H_P+1] = 0;
 800544c:	008200b4 	movhi	r2,2050
 8005450:	10afa004 	addi	r2,r2,-16768
 8005454:	100009c5 	stb	zero,39(r2)
    gPB[TCP_SEQ_H_P+2] = seqnum;
 8005458:	d0e00543 	ldbu	r3,-32747(gp)
 800545c:	008200b4 	movhi	r2,2050
 8005460:	10afa004 	addi	r2,r2,-16768
 8005464:	10c00a05 	stb	r3,40(r2)
    gPB[TCP_SEQ_H_P+3] = 0;
 8005468:	008200b4 	movhi	r2,2050
 800546c:	10afa004 	addi	r2,r2,-16768
 8005470:	10000a45 	stb	zero,41(r2)
    seqnum += 3;
 8005474:	d0a00543 	ldbu	r2,-32747(gp)
 8005478:	108000c4 	addi	r2,r2,3
 800547c:	d0a00545 	stb	r2,-32747(gp)
    gPB[TCP_OPTIONS_P] = 2;
 8005480:	008200b4 	movhi	r2,2050
 8005484:	10afa004 	addi	r2,r2,-16768
 8005488:	00c00084 	movi	r3,2
 800548c:	10c00d85 	stb	r3,54(r2)
    gPB[TCP_OPTIONS_P+1] = 4;
 8005490:	008200b4 	movhi	r2,2050
 8005494:	10afa004 	addi	r2,r2,-16768
 8005498:	00c00104 	movi	r3,4
 800549c:	10c00dc5 	stb	r3,55(r2)
    gPB[TCP_OPTIONS_P+2] = 0x05;
 80054a0:	008200b4 	movhi	r2,2050
 80054a4:	10afa004 	addi	r2,r2,-16768
 80054a8:	00c00144 	movi	r3,5
 80054ac:	10c00e05 	stb	r3,56(r2)
    gPB[TCP_OPTIONS_P+3] = 0x0;
 80054b0:	008200b4 	movhi	r2,2050
 80054b4:	10afa004 	addi	r2,r2,-16768
 80054b8:	10000e45 	stb	zero,57(r2)
    gPB[TCP_HEADER_LEN_P] = 0x60;
 80054bc:	008200b4 	movhi	r2,2050
 80054c0:	10afa004 	addi	r2,r2,-16768
 80054c4:	00c01804 	movi	r3,96
 80054c8:	10c00b85 	stb	r3,46(r2)
    gPB[TCP_WIN_SIZE] = 0x5; // 1400=0x578
 80054cc:	008200b4 	movhi	r2,2050
 80054d0:	10afa004 	addi	r2,r2,-16768
 80054d4:	00c00144 	movi	r3,5
 80054d8:	10c00c05 	stb	r3,48(r2)
    gPB[TCP_WIN_SIZE+1] = 0x78;
 80054dc:	008200b4 	movhi	r2,2050
 80054e0:	10afa004 	addi	r2,r2,-16768
 80054e4:	00c01e04 	movi	r3,120
 80054e8:	10c00c45 	stb	r3,49(r2)
    fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN+4,2);
 80054ec:	01c00084 	movi	r7,2
 80054f0:	01800804 	movi	r6,32
 80054f4:	01400684 	movi	r5,26
 80054f8:	01000c84 	movi	r4,50
 80054fc:	80049980 	call	8004998 <_ZL13fill_checksumhhth>
    EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN);
 8005500:	01000e84 	movi	r4,58
 8005504:	80047080 	call	8004708 <_ZN8ENC28J6010packetSendEt>
}
 8005508:	0001883a 	nop
 800550c:	e037883a 	mov	sp,fp
 8005510:	dfc00117 	ldw	ra,4(sp)
 8005514:	df000017 	ldw	fp,0(sp)
 8005518:	dec00204 	addi	sp,sp,8
 800551c:	f800283a 	ret

08005520 <_ZN9EtherCard19getTcpPayloadLengthEv>:

uint16_t EtherCard::getTcpPayloadLength() {
 8005520:	defffe04 	addi	sp,sp,-8
 8005524:	df000115 	stw	fp,4(sp)
 8005528:	df000104 	addi	fp,sp,4
    int16_t i = (((int16_t)gPB[IP_TOTLEN_H_P])<<8)|gPB[IP_TOTLEN_L_P];
 800552c:	008200b4 	movhi	r2,2050
 8005530:	10afa004 	addi	r2,r2,-16768
 8005534:	10800403 	ldbu	r2,16(r2)
 8005538:	10803fcc 	andi	r2,r2,255
 800553c:	1004923a 	slli	r2,r2,8
 8005540:	1007883a 	mov	r3,r2
 8005544:	008200b4 	movhi	r2,2050
 8005548:	10afa004 	addi	r2,r2,-16768
 800554c:	10800443 	ldbu	r2,17(r2)
 8005550:	10803fcc 	andi	r2,r2,255
 8005554:	1884b03a 	or	r2,r3,r2
 8005558:	e0bfff0d 	sth	r2,-4(fp)
    i -= IP_HEADER_LEN;
 800555c:	e0bfff0b 	ldhu	r2,-4(fp)
 8005560:	10bffb04 	addi	r2,r2,-20
 8005564:	e0bfff0d 	sth	r2,-4(fp)
    i -= (gPB[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
 8005568:	e0ffff0b 	ldhu	r3,-4(fp)
 800556c:	008200b4 	movhi	r2,2050
 8005570:	10afa004 	addi	r2,r2,-16768
 8005574:	10800b83 	ldbu	r2,46(r2)
 8005578:	10803fcc 	andi	r2,r2,255
 800557c:	1005d13a 	srai	r2,r2,4
 8005580:	1085883a 	add	r2,r2,r2
 8005584:	1085883a 	add	r2,r2,r2
 8005588:	1885c83a 	sub	r2,r3,r2
 800558c:	e0bfff0d 	sth	r2,-4(fp)
    if (i<=0)
 8005590:	e0bfff0f 	ldh	r2,-4(fp)
 8005594:	00800116 	blt	zero,r2,800559c <_ZN9EtherCard19getTcpPayloadLengthEv+0x7c>
        i = 0;
 8005598:	e03fff0d 	sth	zero,-4(fp)
    return (uint16_t)i;
 800559c:	e0bfff0b 	ldhu	r2,-4(fp)
}
 80055a0:	e037883a 	mov	sp,fp
 80055a4:	df000017 	ldw	fp,0(sp)
 80055a8:	dec00104 	addi	sp,sp,4
 80055ac:	f800283a 	ret

080055b0 <_ZL21make_tcp_ack_from_anysh>:

static void make_tcp_ack_from_any(int16_t datlentoack,uint8_t addflags) {
 80055b0:	defffb04 	addi	sp,sp,-20
 80055b4:	dfc00415 	stw	ra,16(sp)
 80055b8:	df000315 	stw	fp,12(sp)
 80055bc:	df000304 	addi	fp,sp,12
 80055c0:	2007883a 	mov	r3,r4
 80055c4:	2805883a 	mov	r2,r5
 80055c8:	e0fffe0d 	sth	r3,-8(fp)
 80055cc:	e0bfff05 	stb	r2,-4(fp)
    gPB[TCP_FLAGS_P] = TCP_FLAGS_ACK_V|addflags;
 80055d0:	e0bfff03 	ldbu	r2,-4(fp)
 80055d4:	10800414 	ori	r2,r2,16
 80055d8:	1007883a 	mov	r3,r2
 80055dc:	008200b4 	movhi	r2,2050
 80055e0:	10afa004 	addi	r2,r2,-16768
 80055e4:	10c00bc5 	stb	r3,47(r2)
    if (addflags!=TCP_FLAGS_RST_V && datlentoack==0)
 80055e8:	e0bfff03 	ldbu	r2,-4(fp)
 80055ec:	10800120 	cmpeqi	r2,r2,4
 80055f0:	1000041e 	bne	r2,zero,8005604 <_ZL21make_tcp_ack_from_anysh+0x54>
 80055f4:	e0bffe0f 	ldh	r2,-8(fp)
 80055f8:	1000021e 	bne	r2,zero,8005604 <_ZL21make_tcp_ack_from_anysh+0x54>
        datlentoack = 1;
 80055fc:	00800044 	movi	r2,1
 8005600:	e0bffe0d 	sth	r2,-8(fp)
    make_tcphead(datlentoack,1); // no options
 8005604:	e0bffe0b 	ldhu	r2,-8(fp)
 8005608:	10bfffcc 	andi	r2,r2,65535
 800560c:	01400044 	movi	r5,1
 8005610:	1009883a 	mov	r4,r2
 8005614:	80050240 	call	8005024 <_ZL12make_tcpheadth>
    uint16_t j = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN;
 8005618:	00800a04 	movi	r2,40
 800561c:	e0bffd0d 	sth	r2,-12(fp)
    gPB[IP_TOTLEN_H_P] = j>>8;
 8005620:	e0bffd0b 	ldhu	r2,-12(fp)
 8005624:	1005d23a 	srai	r2,r2,8
 8005628:	1007883a 	mov	r3,r2
 800562c:	008200b4 	movhi	r2,2050
 8005630:	10afa004 	addi	r2,r2,-16768
 8005634:	10c00405 	stb	r3,16(r2)
    gPB[IP_TOTLEN_L_P] = j;
 8005638:	e0bffd0b 	ldhu	r2,-12(fp)
 800563c:	1007883a 	mov	r3,r2
 8005640:	008200b4 	movhi	r2,2050
 8005644:	10afa004 	addi	r2,r2,-16768
 8005648:	10c00445 	stb	r3,17(r2)
    make_eth_ip();
 800564c:	8004eb80 	call	8004eb8 <_ZL11make_eth_ipv>
    gPB[TCP_WIN_SIZE] = 0x4; // 1024=0x400, 1280=0x500 2048=0x800 768=0x300
 8005650:	008200b4 	movhi	r2,2050
 8005654:	10afa004 	addi	r2,r2,-16768
 8005658:	00c00104 	movi	r3,4
 800565c:	10c00c05 	stb	r3,48(r2)
    gPB[TCP_WIN_SIZE+1] = 0;
 8005660:	008200b4 	movhi	r2,2050
 8005664:	10afa004 	addi	r2,r2,-16768
 8005668:	10000c45 	stb	zero,49(r2)
    fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN,2);
 800566c:	01c00084 	movi	r7,2
 8005670:	01800704 	movi	r6,28
 8005674:	01400684 	movi	r5,26
 8005678:	01000c84 	movi	r4,50
 800567c:	80049980 	call	8004998 <_ZL13fill_checksumhhth>
    EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN);
 8005680:	01000d84 	movi	r4,54
 8005684:	80047080 	call	8004708 <_ZN8ENC28J6010packetSendEt>
}
 8005688:	0001883a 	nop
 800568c:	e037883a 	mov	sp,fp
 8005690:	dfc00117 	ldw	ra,4(sp)
 8005694:	df000017 	ldw	fp,0(sp)
 8005698:	dec00204 	addi	sp,sp,8
 800569c:	f800283a 	ret

080056a0 <_ZL30make_tcp_ack_with_data_noflagst>:

static void make_tcp_ack_with_data_noflags(uint16_t dlen) {
 80056a0:	defffc04 	addi	sp,sp,-16
 80056a4:	dfc00315 	stw	ra,12(sp)
 80056a8:	df000215 	stw	fp,8(sp)
 80056ac:	df000204 	addi	fp,sp,8
 80056b0:	2005883a 	mov	r2,r4
 80056b4:	e0bfff0d 	sth	r2,-4(fp)
    uint16_t j = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen;
 80056b8:	e0bfff0b 	ldhu	r2,-4(fp)
 80056bc:	10800a04 	addi	r2,r2,40
 80056c0:	e0bffe0d 	sth	r2,-8(fp)
    gPB[IP_TOTLEN_H_P] = j>>8;
 80056c4:	e0bffe0b 	ldhu	r2,-8(fp)
 80056c8:	1005d23a 	srai	r2,r2,8
 80056cc:	1007883a 	mov	r3,r2
 80056d0:	008200b4 	movhi	r2,2050
 80056d4:	10afa004 	addi	r2,r2,-16768
 80056d8:	10c00405 	stb	r3,16(r2)
    gPB[IP_TOTLEN_L_P] = j;
 80056dc:	e0bffe0b 	ldhu	r2,-8(fp)
 80056e0:	1007883a 	mov	r3,r2
 80056e4:	008200b4 	movhi	r2,2050
 80056e8:	10afa004 	addi	r2,r2,-16768
 80056ec:	10c00445 	stb	r3,17(r2)
    fill_ip_hdr_checksum();
 80056f0:	8004e380 	call	8004e38 <_ZL20fill_ip_hdr_checksumv>
    gPB[TCP_CHECKSUM_H_P] = 0;
 80056f4:	008200b4 	movhi	r2,2050
 80056f8:	10afa004 	addi	r2,r2,-16768
 80056fc:	10000c85 	stb	zero,50(r2)
    gPB[TCP_CHECKSUM_L_P] = 0;
 8005700:	008200b4 	movhi	r2,2050
 8005704:	10afa004 	addi	r2,r2,-16768
 8005708:	10000cc5 	stb	zero,51(r2)
    fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN+dlen,2);
 800570c:	e0bfff0b 	ldhu	r2,-4(fp)
 8005710:	10800704 	addi	r2,r2,28
 8005714:	10bfffcc 	andi	r2,r2,65535
 8005718:	01c00084 	movi	r7,2
 800571c:	100d883a 	mov	r6,r2
 8005720:	01400684 	movi	r5,26
 8005724:	01000c84 	movi	r4,50
 8005728:	80049980 	call	8004998 <_ZL13fill_checksumhhth>
    EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN);
 800572c:	e0bfff0b 	ldhu	r2,-4(fp)
 8005730:	10800d84 	addi	r2,r2,54
 8005734:	10bfffcc 	andi	r2,r2,65535
 8005738:	1009883a 	mov	r4,r2
 800573c:	80047080 	call	8004708 <_ZN8ENC28J6010packetSendEt>
}
 8005740:	0001883a 	nop
 8005744:	e037883a 	mov	sp,fp
 8005748:	dfc00117 	ldw	ra,4(sp)
 800574c:	df000017 	ldw	fp,0(sp)
 8005750:	dec00204 	addi	sp,sp,8
 8005754:	f800283a 	ret

08005758 <_ZN9EtherCard15httpServerReplyEt>:

void EtherCard::httpServerReply (uint16_t dlen) {
 8005758:	defffd04 	addi	sp,sp,-12
 800575c:	dfc00215 	stw	ra,8(sp)
 8005760:	df000115 	stw	fp,4(sp)
 8005764:	df000104 	addi	fp,sp,4
 8005768:	2005883a 	mov	r2,r4
 800576c:	e0bfff0d 	sth	r2,-4(fp)
    make_tcp_ack_from_any(info_data_len,0); // send ack for http get
 8005770:	d0a7288b 	ldhu	r2,-25438(gp)
 8005774:	10bfffcc 	andi	r2,r2,65535
 8005778:	10a0001c 	xori	r2,r2,32768
 800577c:	10a00004 	addi	r2,r2,-32768
 8005780:	000b883a 	mov	r5,zero
 8005784:	1009883a 	mov	r4,r2
 8005788:	80055b00 	call	80055b0 <_ZL21make_tcp_ack_from_anysh>
    gPB[TCP_FLAGS_P] = TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V;
 800578c:	008200b4 	movhi	r2,2050
 8005790:	10afa004 	addi	r2,r2,-16768
 8005794:	00c00644 	movi	r3,25
 8005798:	10c00bc5 	stb	r3,47(r2)
    make_tcp_ack_with_data_noflags(dlen); // send data
 800579c:	e0bfff0b 	ldhu	r2,-4(fp)
 80057a0:	1009883a 	mov	r4,r2
 80057a4:	80056a00 	call	80056a0 <_ZL30make_tcp_ack_with_data_noflagst>
}
 80057a8:	0001883a 	nop
 80057ac:	e037883a 	mov	sp,fp
 80057b0:	dfc00117 	ldw	ra,4(sp)
 80057b4:	df000017 	ldw	fp,0(sp)
 80057b8:	dec00204 	addi	sp,sp,8
 80057bc:	f800283a 	ret

080057c0 <_ZL16getBigEndianLongh>:

static uint32_t getBigEndianLong(byte offs) { //get the sequence number of packets after an ack from GET
 80057c0:	defffe04 	addi	sp,sp,-8
 80057c4:	df000115 	stw	fp,4(sp)
 80057c8:	df000104 	addi	fp,sp,4
 80057cc:	2005883a 	mov	r2,r4
 80057d0:	e0bfff05 	stb	r2,-4(fp)
    return (((unsigned long)gPB[offs]*256+gPB[offs+1])*256+gPB[offs+2])*256+gPB[offs+3];
 80057d4:	e0ffff03 	ldbu	r3,-4(fp)
 80057d8:	008200b4 	movhi	r2,2050
 80057dc:	10afa004 	addi	r2,r2,-16768
 80057e0:	10c5883a 	add	r2,r2,r3
 80057e4:	10800003 	ldbu	r2,0(r2)
 80057e8:	10803fcc 	andi	r2,r2,255
 80057ec:	1006923a 	slli	r3,r2,8
 80057f0:	e0bfff03 	ldbu	r2,-4(fp)
 80057f4:	11000044 	addi	r4,r2,1
 80057f8:	008200b4 	movhi	r2,2050
 80057fc:	10afa004 	addi	r2,r2,-16768
 8005800:	1105883a 	add	r2,r2,r4
 8005804:	10800003 	ldbu	r2,0(r2)
 8005808:	10803fcc 	andi	r2,r2,255
 800580c:	1885883a 	add	r2,r3,r2
 8005810:	1006923a 	slli	r3,r2,8
 8005814:	e0bfff03 	ldbu	r2,-4(fp)
 8005818:	11000084 	addi	r4,r2,2
 800581c:	008200b4 	movhi	r2,2050
 8005820:	10afa004 	addi	r2,r2,-16768
 8005824:	1105883a 	add	r2,r2,r4
 8005828:	10800003 	ldbu	r2,0(r2)
 800582c:	10803fcc 	andi	r2,r2,255
 8005830:	1885883a 	add	r2,r3,r2
 8005834:	1006923a 	slli	r3,r2,8
 8005838:	e0bfff03 	ldbu	r2,-4(fp)
 800583c:	110000c4 	addi	r4,r2,3
 8005840:	008200b4 	movhi	r2,2050
 8005844:	10afa004 	addi	r2,r2,-16768
 8005848:	1105883a 	add	r2,r2,r4
 800584c:	10800003 	ldbu	r2,0(r2)
 8005850:	10803fcc 	andi	r2,r2,255
 8005854:	1885883a 	add	r2,r3,r2
} //thanks to mstuetz for the missing (unsigned long)
 8005858:	e037883a 	mov	sp,fp
 800585c:	df000017 	ldw	fp,0(sp)
 8005860:	dec00104 	addi	sp,sp,4
 8005864:	f800283a 	ret

08005868 <_ZL17setSequenceNumberm>:

static void setSequenceNumber(uint32_t seq) {
 8005868:	defffe04 	addi	sp,sp,-8
 800586c:	df000115 	stw	fp,4(sp)
 8005870:	df000104 	addi	fp,sp,4
 8005874:	e13fff15 	stw	r4,-4(fp)
    gPB[TCP_SEQ_H_P]   = (seq & 0xff000000 ) >> 24;
 8005878:	e0bfff17 	ldw	r2,-4(fp)
 800587c:	1004d63a 	srli	r2,r2,24
 8005880:	1007883a 	mov	r3,r2
 8005884:	008200b4 	movhi	r2,2050
 8005888:	10afa004 	addi	r2,r2,-16768
 800588c:	10c00985 	stb	r3,38(r2)
    gPB[TCP_SEQ_H_P+1] = (seq & 0xff0000 ) >> 16;
 8005890:	e0bfff17 	ldw	r2,-4(fp)
 8005894:	10803fec 	andhi	r2,r2,255
 8005898:	1004d43a 	srli	r2,r2,16
 800589c:	1007883a 	mov	r3,r2
 80058a0:	008200b4 	movhi	r2,2050
 80058a4:	10afa004 	addi	r2,r2,-16768
 80058a8:	10c009c5 	stb	r3,39(r2)
    gPB[TCP_SEQ_H_P+2] = (seq & 0xff00 ) >> 8;
 80058ac:	e0bfff17 	ldw	r2,-4(fp)
 80058b0:	10bfc00c 	andi	r2,r2,65280
 80058b4:	1004d23a 	srli	r2,r2,8
 80058b8:	1007883a 	mov	r3,r2
 80058bc:	008200b4 	movhi	r2,2050
 80058c0:	10afa004 	addi	r2,r2,-16768
 80058c4:	10c00a05 	stb	r3,40(r2)
    gPB[TCP_SEQ_H_P+3] = (seq & 0xff );
 80058c8:	e0bfff17 	ldw	r2,-4(fp)
 80058cc:	1007883a 	mov	r3,r2
 80058d0:	008200b4 	movhi	r2,2050
 80058d4:	10afa004 	addi	r2,r2,-16768
 80058d8:	10c00a45 	stb	r3,41(r2)
}
 80058dc:	0001883a 	nop
 80058e0:	e037883a 	mov	sp,fp
 80058e4:	df000017 	ldw	fp,0(sp)
 80058e8:	dec00104 	addi	sp,sp,4
 80058ec:	f800283a 	ret

080058f0 <_ZN9EtherCard17getSequenceNumberEv>:

uint32_t EtherCard::getSequenceNumber() {
 80058f0:	defffe04 	addi	sp,sp,-8
 80058f4:	dfc00115 	stw	ra,4(sp)
 80058f8:	df000015 	stw	fp,0(sp)
 80058fc:	d839883a 	mov	fp,sp
    return getBigEndianLong(TCP_SEQ_H_P);
 8005900:	01000984 	movi	r4,38
 8005904:	80057c00 	call	80057c0 <_ZL16getBigEndianLongh>
}
 8005908:	e037883a 	mov	sp,fp
 800590c:	dfc00117 	ldw	ra,4(sp)
 8005910:	df000017 	ldw	fp,0(sp)
 8005914:	dec00204 	addi	sp,sp,8
 8005918:	f800283a 	ret

0800591c <_ZN9EtherCard18httpServerReplyAckEv>:

void EtherCard::httpServerReplyAck () {
 800591c:	defffe04 	addi	sp,sp,-8
 8005920:	dfc00115 	stw	ra,4(sp)
 8005924:	df000015 	stw	fp,0(sp)
 8005928:	d839883a 	mov	fp,sp
    make_tcp_ack_from_any(getTcpPayloadLength(),0); // send ack for http request
 800592c:	80055200 	call	8005520 <_ZN9EtherCard19getTcpPayloadLengthEv>
 8005930:	10bfffcc 	andi	r2,r2,65535
 8005934:	10a0001c 	xori	r2,r2,32768
 8005938:	10a00004 	addi	r2,r2,-32768
 800593c:	000b883a 	mov	r5,zero
 8005940:	1009883a 	mov	r4,r2
 8005944:	80055b00 	call	80055b0 <_ZL21make_tcp_ack_from_anysh>
    SEQ = getSequenceNumber(); //get the sequence number of packets after an ack from GET
 8005948:	80058f00 	call	80058f0 <_ZN9EtherCard17getSequenceNumberEv>
 800594c:	d0a72a15 	stw	r2,-25432(gp)
}
 8005950:	0001883a 	nop
 8005954:	e037883a 	mov	sp,fp
 8005958:	dfc00117 	ldw	ra,4(sp)
 800595c:	df000017 	ldw	fp,0(sp)
 8005960:	dec00204 	addi	sp,sp,8
 8005964:	f800283a 	ret

08005968 <_ZN9EtherCard26httpServerReply_with_flagsEth>:

void EtherCard::httpServerReply_with_flags (uint16_t dlen , uint8_t flags) {
 8005968:	defffc04 	addi	sp,sp,-16
 800596c:	dfc00315 	stw	ra,12(sp)
 8005970:	df000215 	stw	fp,8(sp)
 8005974:	df000204 	addi	fp,sp,8
 8005978:	2007883a 	mov	r3,r4
 800597c:	2805883a 	mov	r2,r5
 8005980:	e0fffe0d 	sth	r3,-8(fp)
 8005984:	e0bfff05 	stb	r2,-4(fp)
    setSequenceNumber(SEQ);
 8005988:	d0a72a17 	ldw	r2,-25432(gp)
 800598c:	1009883a 	mov	r4,r2
 8005990:	80058680 	call	8005868 <_ZL17setSequenceNumberm>
    gPB[TCP_FLAGS_P] = flags; // final packet
 8005994:	008200b4 	movhi	r2,2050
 8005998:	10afa004 	addi	r2,r2,-16768
 800599c:	e0ffff03 	ldbu	r3,-4(fp)
 80059a0:	10c00bc5 	stb	r3,47(r2)
    make_tcp_ack_with_data_noflags(dlen); // send data
 80059a4:	e0bffe0b 	ldhu	r2,-8(fp)
 80059a8:	1009883a 	mov	r4,r2
 80059ac:	80056a00 	call	80056a0 <_ZL30make_tcp_ack_with_data_noflagst>
    SEQ=SEQ+dlen;
 80059b0:	e0fffe0b 	ldhu	r3,-8(fp)
 80059b4:	d0a72a17 	ldw	r2,-25432(gp)
 80059b8:	1885883a 	add	r2,r3,r2
 80059bc:	d0a72a15 	stw	r2,-25432(gp)
}
 80059c0:	0001883a 	nop
 80059c4:	e037883a 	mov	sp,fp
 80059c8:	dfc00117 	ldw	ra,4(sp)
 80059cc:	df000017 	ldw	fp,0(sp)
 80059d0:	dec00204 	addi	sp,sp,8
 80059d4:	f800283a 	ret

080059d8 <_ZN9EtherCard17clientIcmpRequestEPKh>:

void EtherCard::clientIcmpRequest(const uint8_t *destip) {
 80059d8:	defffd04 	addi	sp,sp,-12
 80059dc:	dfc00215 	stw	ra,8(sp)
 80059e0:	df000115 	stw	fp,4(sp)
 80059e4:	df000104 	addi	fp,sp,4
 80059e8:	e13fff15 	stw	r4,-4(fp)
    if(is_lan(EtherCard::myip, destip)) {
 80059ec:	e17fff17 	ldw	r5,-4(fp)
 80059f0:	d1270444 	addi	r4,gp,-25583
 80059f4:	8004c100 	call	8004c10 <_ZL6is_lanPKhS0_>
 80059f8:	10803fcc 	andi	r2,r2,255
 80059fc:	10000426 	beq	r2,zero,8005a10 <_ZN9EtherCard17clientIcmpRequestEPKh+0x38>
        setMACandIPs(destmacaddr, destip);
 8005a00:	e17fff17 	ldw	r5,-4(fp)
 8005a04:	d1272404 	addi	r4,gp,-25456
 8005a08:	8004b6c0 	call	8004b6c <_ZL12setMACandIPsPKhS0_>
 8005a0c:	00000306 	br	8005a1c <_ZN9EtherCard17clientIcmpRequestEPKh+0x44>
    } else {
        setMACandIPs(gwmacaddr, destip);
 8005a10:	e17fff17 	ldw	r5,-4(fp)
 8005a14:	d1272684 	addi	r4,gp,-25446
 8005a18:	8004b6c0 	call	8004b6c <_ZL12setMACandIPsPKhS0_>
    }
    gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 8005a1c:	008200b4 	movhi	r2,2050
 8005a20:	10afa004 	addi	r2,r2,-16768
 8005a24:	00c00204 	movi	r3,8
 8005a28:	10c00305 	stb	r3,12(r2)
    gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 8005a2c:	008200b4 	movhi	r2,2050
 8005a30:	10afa004 	addi	r2,r2,-16768
 8005a34:	10000345 	stb	zero,13(r2)
    memcpy_P(gPB + IP_P,iphdr,sizeof iphdr);
 8005a38:	008200b4 	movhi	r2,2050
 8005a3c:	10afa384 	addi	r2,r2,-16754
 8005a40:	01800244 	movi	r6,9
 8005a44:	014200b4 	movhi	r5,2050
 8005a48:	29608204 	addi	r5,r5,-32248
 8005a4c:	1009883a 	mov	r4,r2
 8005a50:	80049580 	call	8004958 <_Z8memcpy_PPvPKvj>
    gPB[IP_TOTLEN_L_P] = 0x54;
 8005a54:	008200b4 	movhi	r2,2050
 8005a58:	10afa004 	addi	r2,r2,-16768
 8005a5c:	00c01504 	movi	r3,84
 8005a60:	10c00445 	stb	r3,17(r2)
    gPB[IP_PROTO_P] = IP_PROTO_ICMP_V;
 8005a64:	008200b4 	movhi	r2,2050
 8005a68:	10afa004 	addi	r2,r2,-16768
 8005a6c:	00c00044 	movi	r3,1
 8005a70:	10c005c5 	stb	r3,23(r2)
    fill_ip_hdr_checksum();
 8005a74:	8004e380 	call	8004e38 <_ZL20fill_ip_hdr_checksumv>
    gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREQUEST_V;
 8005a78:	008200b4 	movhi	r2,2050
 8005a7c:	10afa004 	addi	r2,r2,-16768
 8005a80:	00c00204 	movi	r3,8
 8005a84:	10c00885 	stb	r3,34(r2)
    gPB[ICMP_TYPE_P+1] = 0; // code
 8005a88:	008200b4 	movhi	r2,2050
 8005a8c:	10afa004 	addi	r2,r2,-16768
 8005a90:	100008c5 	stb	zero,35(r2)
    gPB[ICMP_CHECKSUM_H_P] = 0;
 8005a94:	008200b4 	movhi	r2,2050
 8005a98:	10afa004 	addi	r2,r2,-16768
 8005a9c:	10000905 	stb	zero,36(r2)
    gPB[ICMP_CHECKSUM_L_P] = 0;
 8005aa0:	008200b4 	movhi	r2,2050
 8005aa4:	10afa004 	addi	r2,r2,-16768
 8005aa8:	10000945 	stb	zero,37(r2)
    gPB[ICMP_IDENT_H_P] = 5; // some number
 8005aac:	008200b4 	movhi	r2,2050
 8005ab0:	10afa004 	addi	r2,r2,-16768
 8005ab4:	00c00144 	movi	r3,5
 8005ab8:	10c00985 	stb	r3,38(r2)
    gPB[ICMP_IDENT_L_P] = EtherCard::myip[3]; // last byte of my IP
 8005abc:	d0e70503 	ldbu	r3,-25580(gp)
 8005ac0:	008200b4 	movhi	r2,2050
 8005ac4:	10afa004 	addi	r2,r2,-16768
 8005ac8:	10c009c5 	stb	r3,39(r2)
    gPB[ICMP_IDENT_L_P+1] = 0; // seq number, high byte
 8005acc:	008200b4 	movhi	r2,2050
 8005ad0:	10afa004 	addi	r2,r2,-16768
 8005ad4:	10000a05 	stb	zero,40(r2)
    gPB[ICMP_IDENT_L_P+2] = 1; // seq number, low byte, we send only 1 ping at a time
 8005ad8:	008200b4 	movhi	r2,2050
 8005adc:	10afa004 	addi	r2,r2,-16768
 8005ae0:	00c00044 	movi	r3,1
 8005ae4:	10c00a45 	stb	r3,41(r2)
    memset(gPB + ICMP_DATA_P, PINGPATTERN, 56);
 8005ae8:	008200b4 	movhi	r2,2050
 8005aec:	10afaa84 	addi	r2,r2,-16726
 8005af0:	01800e04 	movi	r6,56
 8005af4:	01401084 	movi	r5,66
 8005af8:	1009883a 	mov	r4,r2
 8005afc:	80080ec0 	call	80080ec <memset>
    fill_checksum(ICMP_CHECKSUM_H_P, ICMP_TYPE_P, 56+8,0);
 8005b00:	000f883a 	mov	r7,zero
 8005b04:	01801004 	movi	r6,64
 8005b08:	01400884 	movi	r5,34
 8005b0c:	01000904 	movi	r4,36
 8005b10:	80049980 	call	8004998 <_ZL13fill_checksumhhth>
    packetSend(98);
 8005b14:	01001884 	movi	r4,98
 8005b18:	80047080 	call	8004708 <_ZN8ENC28J6010packetSendEt>
}
 8005b1c:	0001883a 	nop
 8005b20:	e037883a 	mov	sp,fp
 8005b24:	dfc00117 	ldw	ra,4(sp)
 8005b28:	df000017 	ldw	fp,0(sp)
 8005b2c:	dec00204 	addi	sp,sp,8
 8005b30:	f800283a 	ret

08005b34 <_ZN9EtherCard10ntpRequestEPhh>:

void EtherCard::ntpRequest (uint8_t *ntpip,uint8_t srcport) {
 8005b34:	defffc04 	addi	sp,sp,-16
 8005b38:	dfc00315 	stw	ra,12(sp)
 8005b3c:	df000215 	stw	fp,8(sp)
 8005b40:	df000204 	addi	fp,sp,8
 8005b44:	e13ffe15 	stw	r4,-8(fp)
 8005b48:	2805883a 	mov	r2,r5
 8005b4c:	e0bfff05 	stb	r2,-4(fp)
    if(is_lan(myip, ntpip)) {
 8005b50:	e17ffe17 	ldw	r5,-8(fp)
 8005b54:	d1270444 	addi	r4,gp,-25583
 8005b58:	8004c100 	call	8004c10 <_ZL6is_lanPKhS0_>
 8005b5c:	10803fcc 	andi	r2,r2,255
 8005b60:	10000426 	beq	r2,zero,8005b74 <_ZN9EtherCard10ntpRequestEPhh+0x40>
        setMACandIPs(destmacaddr, ntpip);
 8005b64:	e17ffe17 	ldw	r5,-8(fp)
 8005b68:	d1272404 	addi	r4,gp,-25456
 8005b6c:	8004b6c0 	call	8004b6c <_ZL12setMACandIPsPKhS0_>
 8005b70:	00000306 	br	8005b80 <_ZN9EtherCard10ntpRequestEPhh+0x4c>
    } else {
        setMACandIPs(gwmacaddr, ntpip);
 8005b74:	e17ffe17 	ldw	r5,-8(fp)
 8005b78:	d1272684 	addi	r4,gp,-25446
 8005b7c:	8004b6c0 	call	8004b6c <_ZL12setMACandIPsPKhS0_>
    }
    gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 8005b80:	008200b4 	movhi	r2,2050
 8005b84:	10afa004 	addi	r2,r2,-16768
 8005b88:	00c00204 	movi	r3,8
 8005b8c:	10c00305 	stb	r3,12(r2)
    gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 8005b90:	008200b4 	movhi	r2,2050
 8005b94:	10afa004 	addi	r2,r2,-16768
 8005b98:	10000345 	stb	zero,13(r2)
    memcpy_P(gPB + IP_P,iphdr,sizeof iphdr);
 8005b9c:	008200b4 	movhi	r2,2050
 8005ba0:	10afa384 	addi	r2,r2,-16754
 8005ba4:	01800244 	movi	r6,9
 8005ba8:	014200b4 	movhi	r5,2050
 8005bac:	29608204 	addi	r5,r5,-32248
 8005bb0:	1009883a 	mov	r4,r2
 8005bb4:	80049580 	call	8004958 <_Z8memcpy_PPvPKvj>
    gPB[IP_TOTLEN_L_P] = 0x4c;
 8005bb8:	008200b4 	movhi	r2,2050
 8005bbc:	10afa004 	addi	r2,r2,-16768
 8005bc0:	00c01304 	movi	r3,76
 8005bc4:	10c00445 	stb	r3,17(r2)
    gPB[IP_PROTO_P] = IP_PROTO_UDP_V;
 8005bc8:	008200b4 	movhi	r2,2050
 8005bcc:	10afa004 	addi	r2,r2,-16768
 8005bd0:	00c00444 	movi	r3,17
 8005bd4:	10c005c5 	stb	r3,23(r2)
    fill_ip_hdr_checksum();
 8005bd8:	8004e380 	call	8004e38 <_ZL20fill_ip_hdr_checksumv>
    gPB[UDP_DST_PORT_H_P] = 0;
 8005bdc:	008200b4 	movhi	r2,2050
 8005be0:	10afa004 	addi	r2,r2,-16768
 8005be4:	10000905 	stb	zero,36(r2)
    gPB[UDP_DST_PORT_L_P] = NTP_PORT; // ntp = 123
 8005be8:	008200b4 	movhi	r2,2050
 8005bec:	10afa004 	addi	r2,r2,-16768
 8005bf0:	00c01ec4 	movi	r3,123
 8005bf4:	10c00945 	stb	r3,37(r2)
    gPB[UDP_SRC_PORT_H_P] = 10;
 8005bf8:	008200b4 	movhi	r2,2050
 8005bfc:	10afa004 	addi	r2,r2,-16768
 8005c00:	00c00284 	movi	r3,10
 8005c04:	10c00885 	stb	r3,34(r2)
    gPB[UDP_SRC_PORT_L_P] = srcport; // lower 8 bit of src port
 8005c08:	008200b4 	movhi	r2,2050
 8005c0c:	10afa004 	addi	r2,r2,-16768
 8005c10:	e0ffff03 	ldbu	r3,-4(fp)
 8005c14:	10c008c5 	stb	r3,35(r2)
    gPB[UDP_LEN_H_P] = 0;
 8005c18:	008200b4 	movhi	r2,2050
 8005c1c:	10afa004 	addi	r2,r2,-16768
 8005c20:	10000985 	stb	zero,38(r2)
    gPB[UDP_LEN_L_P] = 56; // fixed len
 8005c24:	008200b4 	movhi	r2,2050
 8005c28:	10afa004 	addi	r2,r2,-16768
 8005c2c:	00c00e04 	movi	r3,56
 8005c30:	10c009c5 	stb	r3,39(r2)
    gPB[UDP_CHECKSUM_H_P] = 0;
 8005c34:	008200b4 	movhi	r2,2050
 8005c38:	10afa004 	addi	r2,r2,-16768
 8005c3c:	10000a05 	stb	zero,40(r2)
    gPB[UDP_CHECKSUM_L_P] = 0;
 8005c40:	008200b4 	movhi	r2,2050
 8005c44:	10afa004 	addi	r2,r2,-16768
 8005c48:	10000a45 	stb	zero,41(r2)
    memset(gPB + UDP_DATA_P, 0, 48);
 8005c4c:	008200b4 	movhi	r2,2050
 8005c50:	10afaa84 	addi	r2,r2,-16726
 8005c54:	01800c04 	movi	r6,48
 8005c58:	000b883a 	mov	r5,zero
 8005c5c:	1009883a 	mov	r4,r2
 8005c60:	80080ec0 	call	80080ec <memset>
    memcpy_P(gPB + UDP_DATA_P,ntpreqhdr,10);
 8005c64:	008200b4 	movhi	r2,2050
 8005c68:	10afaa84 	addi	r2,r2,-16726
 8005c6c:	01800284 	movi	r6,10
 8005c70:	014200b4 	movhi	r5,2050
 8005c74:	29608444 	addi	r5,r5,-32239
 8005c78:	1009883a 	mov	r4,r2
 8005c7c:	80049580 	call	8004958 <_Z8memcpy_PPvPKvj>

    fill_checksum(UDP_CHECKSUM_H_P, IP_SRC_P, 16 + 48,1);
 8005c80:	01c00044 	movi	r7,1
 8005c84:	01801004 	movi	r6,64
 8005c88:	01400684 	movi	r5,26
 8005c8c:	01000a04 	movi	r4,40
 8005c90:	80049980 	call	8004998 <_ZL13fill_checksumhhth>
    packetSend(90);
 8005c94:	01001684 	movi	r4,90
 8005c98:	80047080 	call	8004708 <_ZN8ENC28J6010packetSendEt>
}
 8005c9c:	0001883a 	nop
 8005ca0:	e037883a 	mov	sp,fp
 8005ca4:	dfc00117 	ldw	ra,4(sp)
 8005ca8:	df000017 	ldw	fp,0(sp)
 8005cac:	dec00204 	addi	sp,sp,8
 8005cb0:	f800283a 	ret

08005cb4 <_ZN9EtherCard16ntpProcessAnswerEPmh>:

uint8_t EtherCard::ntpProcessAnswer (uint32_t *time,uint8_t dstport_l) {
 8005cb4:	defffd04 	addi	sp,sp,-12
 8005cb8:	df000215 	stw	fp,8(sp)
 8005cbc:	df000204 	addi	fp,sp,8
 8005cc0:	e13ffe15 	stw	r4,-8(fp)
 8005cc4:	2805883a 	mov	r2,r5
 8005cc8:	e0bfff05 	stb	r2,-4(fp)
    if ((dstport_l && gPB[UDP_DST_PORT_L_P]!=dstport_l) || gPB[UDP_LEN_H_P]!=0 ||
 8005ccc:	e0bfff03 	ldbu	r2,-4(fp)
 8005cd0:	10000626 	beq	r2,zero,8005cec <_ZN9EtherCard16ntpProcessAnswerEPmh+0x38>
 8005cd4:	008200b4 	movhi	r2,2050
 8005cd8:	10afa004 	addi	r2,r2,-16768
 8005cdc:	10800943 	ldbu	r2,37(r2)
 8005ce0:	10c03fcc 	andi	r3,r2,255
 8005ce4:	e0bfff03 	ldbu	r2,-4(fp)
 8005ce8:	1880111e 	bne	r3,r2,8005d30 <_ZN9EtherCard16ntpProcessAnswerEPmh+0x7c>
 8005cec:	008200b4 	movhi	r2,2050
 8005cf0:	10afa004 	addi	r2,r2,-16768
 8005cf4:	10800983 	ldbu	r2,38(r2)
 8005cf8:	10803fcc 	andi	r2,r2,255
 8005cfc:	10000c1e 	bne	r2,zero,8005d30 <_ZN9EtherCard16ntpProcessAnswerEPmh+0x7c>
            gPB[UDP_LEN_L_P]!=56 || gPB[UDP_SRC_PORT_L_P]!=0x7b)
 8005d00:	008200b4 	movhi	r2,2050
 8005d04:	10afa004 	addi	r2,r2,-16768
 8005d08:	108009c3 	ldbu	r2,39(r2)
    fill_checksum(UDP_CHECKSUM_H_P, IP_SRC_P, 16 + 48,1);
    packetSend(90);
}

uint8_t EtherCard::ntpProcessAnswer (uint32_t *time,uint8_t dstport_l) {
    if ((dstport_l && gPB[UDP_DST_PORT_L_P]!=dstport_l) || gPB[UDP_LEN_H_P]!=0 ||
 8005d0c:	10803fcc 	andi	r2,r2,255
 8005d10:	10800e18 	cmpnei	r2,r2,56
 8005d14:	1000061e 	bne	r2,zero,8005d30 <_ZN9EtherCard16ntpProcessAnswerEPmh+0x7c>
            gPB[UDP_LEN_L_P]!=56 || gPB[UDP_SRC_PORT_L_P]!=0x7b)
 8005d18:	008200b4 	movhi	r2,2050
 8005d1c:	10afa004 	addi	r2,r2,-16768
 8005d20:	108008c3 	ldbu	r2,35(r2)
 8005d24:	10803fcc 	andi	r2,r2,255
 8005d28:	10801ee0 	cmpeqi	r2,r2,123
 8005d2c:	1000021e 	bne	r2,zero,8005d38 <_ZN9EtherCard16ntpProcessAnswerEPmh+0x84>
        return 0;
 8005d30:	0005883a 	mov	r2,zero
 8005d34:	00001806 	br	8005d98 <_ZN9EtherCard16ntpProcessAnswerEPmh+0xe4>
    ((uint8_t*) time)[3] = gPB[0x52];
 8005d38:	e0bffe17 	ldw	r2,-8(fp)
 8005d3c:	10c000c4 	addi	r3,r2,3
 8005d40:	008200b4 	movhi	r2,2050
 8005d44:	10afa004 	addi	r2,r2,-16768
 8005d48:	10801483 	ldbu	r2,82(r2)
 8005d4c:	18800005 	stb	r2,0(r3)
    ((uint8_t*) time)[2] = gPB[0x53];
 8005d50:	e0bffe17 	ldw	r2,-8(fp)
 8005d54:	10c00084 	addi	r3,r2,2
 8005d58:	008200b4 	movhi	r2,2050
 8005d5c:	10afa004 	addi	r2,r2,-16768
 8005d60:	108014c3 	ldbu	r2,83(r2)
 8005d64:	18800005 	stb	r2,0(r3)
    ((uint8_t*) time)[1] = gPB[0x54];
 8005d68:	e0bffe17 	ldw	r2,-8(fp)
 8005d6c:	10c00044 	addi	r3,r2,1
 8005d70:	008200b4 	movhi	r2,2050
 8005d74:	10afa004 	addi	r2,r2,-16768
 8005d78:	10801503 	ldbu	r2,84(r2)
 8005d7c:	18800005 	stb	r2,0(r3)
    ((uint8_t*) time)[0] = gPB[0x55];
 8005d80:	008200b4 	movhi	r2,2050
 8005d84:	10afa004 	addi	r2,r2,-16768
 8005d88:	10c01543 	ldbu	r3,85(r2)
 8005d8c:	e0bffe17 	ldw	r2,-8(fp)
 8005d90:	10c00005 	stb	r3,0(r2)
    return 1;
 8005d94:	00800044 	movi	r2,1
}
 8005d98:	e037883a 	mov	sp,fp
 8005d9c:	df000017 	ldw	fp,0(sp)
 8005da0:	dec00104 	addi	sp,sp,4
 8005da4:	f800283a 	ret

08005da8 <_ZN9EtherCard10udpPrepareEtPKht>:

void EtherCard::udpPrepare (uint16_t sport, const uint8_t *dip, uint16_t dport) {
 8005da8:	defffb04 	addi	sp,sp,-20
 8005dac:	dfc00415 	stw	ra,16(sp)
 8005db0:	df000315 	stw	fp,12(sp)
 8005db4:	df000304 	addi	fp,sp,12
 8005db8:	2007883a 	mov	r3,r4
 8005dbc:	e17ffe15 	stw	r5,-8(fp)
 8005dc0:	3005883a 	mov	r2,r6
 8005dc4:	e0fffd0d 	sth	r3,-12(fp)
 8005dc8:	e0bfff0d 	sth	r2,-4(fp)
    if(is_lan(myip, dip)) {                    // this works because both dns mac and destinations mac are stored in same variable - destmacaddr
 8005dcc:	e17ffe17 	ldw	r5,-8(fp)
 8005dd0:	d1270444 	addi	r4,gp,-25583
 8005dd4:	8004c100 	call	8004c10 <_ZL6is_lanPKhS0_>
 8005dd8:	10803fcc 	andi	r2,r2,255
 8005ddc:	10000426 	beq	r2,zero,8005df0 <_ZN9EtherCard10udpPrepareEtPKht+0x48>
        setMACandIPs(destmacaddr, dip);        // at different times. The program could have separate variable for dns mac, then here should be
 8005de0:	e17ffe17 	ldw	r5,-8(fp)
 8005de4:	d1272404 	addi	r4,gp,-25456
 8005de8:	8004b6c0 	call	8004b6c <_ZL12setMACandIPsPKhS0_>
 8005dec:	00000306 	br	8005dfc <_ZN9EtherCard10udpPrepareEtPKht+0x54>
    } else {                                   // checked if dip is dns ip and separately if dip is hisip and then use correct mac.
        setMACandIPs(gwmacaddr, dip);
 8005df0:	e17ffe17 	ldw	r5,-8(fp)
 8005df4:	d1272684 	addi	r4,gp,-25446
 8005df8:	8004b6c0 	call	8004b6c <_ZL12setMACandIPsPKhS0_>
    }
    // see http://tldp.org/HOWTO/Multicast-HOWTO-2.html
    // multicast or broadcast address, https://github.com/njh/EtherCard/issues/59
    if ((dip[0] & 0xF0) == 0xE0 || *((unsigned long*) dip) == 0xFFFFFFFF || !memcmp(broadcastip,dip,IP_LEN))
 8005dfc:	e0bffe17 	ldw	r2,-8(fp)
 8005e00:	10800003 	ldbu	r2,0(r2)
 8005e04:	10803fcc 	andi	r2,r2,255
 8005e08:	10803c0c 	andi	r2,r2,240
 8005e0c:	10803820 	cmpeqi	r2,r2,224
 8005e10:	1000091e 	bne	r2,zero,8005e38 <_ZN9EtherCard10udpPrepareEtPKht+0x90>
 8005e14:	e0bffe17 	ldw	r2,-8(fp)
 8005e18:	10800017 	ldw	r2,0(r2)
 8005e1c:	10bfffe0 	cmpeqi	r2,r2,-1
 8005e20:	1000051e 	bne	r2,zero,8005e38 <_ZN9EtherCard10udpPrepareEtPKht+0x90>
 8005e24:	01800104 	movi	r6,4
 8005e28:	e17ffe17 	ldw	r5,-8(fp)
 8005e2c:	d1270644 	addi	r4,gp,-25575
 8005e30:	8007f280 	call	8007f28 <memcmp>
 8005e34:	1000041e 	bne	r2,zero,8005e48 <_ZN9EtherCard10udpPrepareEtPKht+0xa0>
        EtherCard::copyMac(gPB + ETH_DST_MAC, allOnes);
 8005e38:	d16005c4 	addi	r5,gp,-32745
 8005e3c:	010200b4 	movhi	r4,2050
 8005e40:	212fa004 	addi	r4,r4,-16768
 8005e44:	800793c0 	call	800793c <_ZN9EtherCard7copyMacEPhPKh>
    gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 8005e48:	008200b4 	movhi	r2,2050
 8005e4c:	10afa004 	addi	r2,r2,-16768
 8005e50:	00c00204 	movi	r3,8
 8005e54:	10c00305 	stb	r3,12(r2)
    gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 8005e58:	008200b4 	movhi	r2,2050
 8005e5c:	10afa004 	addi	r2,r2,-16768
 8005e60:	10000345 	stb	zero,13(r2)
    memcpy_P(gPB + IP_P,iphdr,sizeof iphdr);
 8005e64:	008200b4 	movhi	r2,2050
 8005e68:	10afa384 	addi	r2,r2,-16754
 8005e6c:	01800244 	movi	r6,9
 8005e70:	014200b4 	movhi	r5,2050
 8005e74:	29608204 	addi	r5,r5,-32248
 8005e78:	1009883a 	mov	r4,r2
 8005e7c:	80049580 	call	8004958 <_Z8memcpy_PPvPKvj>
    gPB[IP_TOTLEN_H_P] = 0;
 8005e80:	008200b4 	movhi	r2,2050
 8005e84:	10afa004 	addi	r2,r2,-16768
 8005e88:	10000405 	stb	zero,16(r2)
    gPB[IP_PROTO_P] = IP_PROTO_UDP_V;
 8005e8c:	008200b4 	movhi	r2,2050
 8005e90:	10afa004 	addi	r2,r2,-16768
 8005e94:	00c00444 	movi	r3,17
 8005e98:	10c005c5 	stb	r3,23(r2)
    gPB[UDP_DST_PORT_H_P] = (dport>>8);
 8005e9c:	e0bfff0b 	ldhu	r2,-4(fp)
 8005ea0:	1005d23a 	srai	r2,r2,8
 8005ea4:	1007883a 	mov	r3,r2
 8005ea8:	008200b4 	movhi	r2,2050
 8005eac:	10afa004 	addi	r2,r2,-16768
 8005eb0:	10c00905 	stb	r3,36(r2)
    gPB[UDP_DST_PORT_L_P] = dport;
 8005eb4:	e0bfff0b 	ldhu	r2,-4(fp)
 8005eb8:	1007883a 	mov	r3,r2
 8005ebc:	008200b4 	movhi	r2,2050
 8005ec0:	10afa004 	addi	r2,r2,-16768
 8005ec4:	10c00945 	stb	r3,37(r2)
    gPB[UDP_SRC_PORT_H_P] = (sport>>8);
 8005ec8:	e0bffd0b 	ldhu	r2,-12(fp)
 8005ecc:	1005d23a 	srai	r2,r2,8
 8005ed0:	1007883a 	mov	r3,r2
 8005ed4:	008200b4 	movhi	r2,2050
 8005ed8:	10afa004 	addi	r2,r2,-16768
 8005edc:	10c00885 	stb	r3,34(r2)
    gPB[UDP_SRC_PORT_L_P] = sport;
 8005ee0:	e0bffd0b 	ldhu	r2,-12(fp)
 8005ee4:	1007883a 	mov	r3,r2
 8005ee8:	008200b4 	movhi	r2,2050
 8005eec:	10afa004 	addi	r2,r2,-16768
 8005ef0:	10c008c5 	stb	r3,35(r2)
    gPB[UDP_LEN_H_P] = 0;
 8005ef4:	008200b4 	movhi	r2,2050
 8005ef8:	10afa004 	addi	r2,r2,-16768
 8005efc:	10000985 	stb	zero,38(r2)
    gPB[UDP_CHECKSUM_H_P] = 0;
 8005f00:	008200b4 	movhi	r2,2050
 8005f04:	10afa004 	addi	r2,r2,-16768
 8005f08:	10000a05 	stb	zero,40(r2)
    gPB[UDP_CHECKSUM_L_P] = 0;
 8005f0c:	008200b4 	movhi	r2,2050
 8005f10:	10afa004 	addi	r2,r2,-16768
 8005f14:	10000a45 	stb	zero,41(r2)
}
 8005f18:	0001883a 	nop
 8005f1c:	e037883a 	mov	sp,fp
 8005f20:	dfc00117 	ldw	ra,4(sp)
 8005f24:	df000017 	ldw	fp,0(sp)
 8005f28:	dec00204 	addi	sp,sp,8
 8005f2c:	f800283a 	ret

08005f30 <_ZN9EtherCard11udpTransmitEt>:

void EtherCard::udpTransmit (uint16_t datalen) {
 8005f30:	defffd04 	addi	sp,sp,-12
 8005f34:	dfc00215 	stw	ra,8(sp)
 8005f38:	df000115 	stw	fp,4(sp)
 8005f3c:	df000104 	addi	fp,sp,4
 8005f40:	2005883a 	mov	r2,r4
 8005f44:	e0bfff0d 	sth	r2,-4(fp)
    gPB[IP_TOTLEN_H_P] = (IP_HEADER_LEN+UDP_HEADER_LEN+datalen) >> 8;
 8005f48:	e0bfff0b 	ldhu	r2,-4(fp)
 8005f4c:	10800704 	addi	r2,r2,28
 8005f50:	1005d23a 	srai	r2,r2,8
 8005f54:	1007883a 	mov	r3,r2
 8005f58:	008200b4 	movhi	r2,2050
 8005f5c:	10afa004 	addi	r2,r2,-16768
 8005f60:	10c00405 	stb	r3,16(r2)
    gPB[IP_TOTLEN_L_P] = IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
 8005f64:	e0bfff0b 	ldhu	r2,-4(fp)
 8005f68:	10800704 	addi	r2,r2,28
 8005f6c:	1007883a 	mov	r3,r2
 8005f70:	008200b4 	movhi	r2,2050
 8005f74:	10afa004 	addi	r2,r2,-16768
 8005f78:	10c00445 	stb	r3,17(r2)
    fill_ip_hdr_checksum();
 8005f7c:	8004e380 	call	8004e38 <_ZL20fill_ip_hdr_checksumv>
    gPB[UDP_LEN_H_P] = (UDP_HEADER_LEN+datalen) >>8;
 8005f80:	e0bfff0b 	ldhu	r2,-4(fp)
 8005f84:	10800204 	addi	r2,r2,8
 8005f88:	1005d23a 	srai	r2,r2,8
 8005f8c:	1007883a 	mov	r3,r2
 8005f90:	008200b4 	movhi	r2,2050
 8005f94:	10afa004 	addi	r2,r2,-16768
 8005f98:	10c00985 	stb	r3,38(r2)
    gPB[UDP_LEN_L_P] = UDP_HEADER_LEN+datalen;
 8005f9c:	e0bfff0b 	ldhu	r2,-4(fp)
 8005fa0:	10800204 	addi	r2,r2,8
 8005fa4:	1007883a 	mov	r3,r2
 8005fa8:	008200b4 	movhi	r2,2050
 8005fac:	10afa004 	addi	r2,r2,-16768
 8005fb0:	10c009c5 	stb	r3,39(r2)
    fill_checksum(UDP_CHECKSUM_H_P, IP_SRC_P, 16 + datalen,1);
 8005fb4:	e0bfff0b 	ldhu	r2,-4(fp)
 8005fb8:	10800404 	addi	r2,r2,16
 8005fbc:	10bfffcc 	andi	r2,r2,65535
 8005fc0:	01c00044 	movi	r7,1
 8005fc4:	100d883a 	mov	r6,r2
 8005fc8:	01400684 	movi	r5,26
 8005fcc:	01000a04 	movi	r4,40
 8005fd0:	80049980 	call	8004998 <_ZL13fill_checksumhhth>
    packetSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen);
 8005fd4:	e0bfff0b 	ldhu	r2,-4(fp)
 8005fd8:	10800a84 	addi	r2,r2,42
 8005fdc:	10bfffcc 	andi	r2,r2,65535
 8005fe0:	1009883a 	mov	r4,r2
 8005fe4:	80047080 	call	8004708 <_ZN8ENC28J6010packetSendEt>
}
 8005fe8:	0001883a 	nop
 8005fec:	e037883a 	mov	sp,fp
 8005ff0:	dfc00117 	ldw	ra,4(sp)
 8005ff4:	df000017 	ldw	fp,0(sp)
 8005ff8:	dec00204 	addi	sp,sp,8
 8005ffc:	f800283a 	ret

08006000 <_ZN9EtherCard7sendUdpEPKchtPKht>:

void EtherCard::sendUdp (const char *data, uint8_t datalen, uint16_t sport,
                         const uint8_t *dip, uint16_t dport) {
 8006000:	defff904 	addi	sp,sp,-28
 8006004:	dfc00615 	stw	ra,24(sp)
 8006008:	df000515 	stw	fp,20(sp)
 800600c:	df000504 	addi	fp,sp,20
 8006010:	e13ffb15 	stw	r4,-20(fp)
 8006014:	2809883a 	mov	r4,r5
 8006018:	3007883a 	mov	r3,r6
 800601c:	e1fffe15 	stw	r7,-8(fp)
 8006020:	e0800217 	ldw	r2,8(fp)
 8006024:	e13ffc05 	stb	r4,-16(fp)
 8006028:	e0fffd0d 	sth	r3,-12(fp)
 800602c:	e0bfff0d 	sth	r2,-4(fp)
    udpPrepare(sport, dip, dport);
 8006030:	e0bffd0b 	ldhu	r2,-12(fp)
 8006034:	e0ffff0b 	ldhu	r3,-4(fp)
 8006038:	180d883a 	mov	r6,r3
 800603c:	e17ffe17 	ldw	r5,-8(fp)
 8006040:	1009883a 	mov	r4,r2
 8006044:	8005da80 	call	8005da8 <_ZN9EtherCard10udpPrepareEtPKht>
    if (datalen>220)
 8006048:	e0bffc03 	ldbu	r2,-16(fp)
 800604c:	10803770 	cmpltui	r2,r2,221
 8006050:	1000021e 	bne	r2,zero,800605c <_ZN9EtherCard7sendUdpEPKchtPKht+0x5c>
        datalen = 220;
 8006054:	00bff704 	movi	r2,-36
 8006058:	e0bffc05 	stb	r2,-16(fp)
    memcpy(gPB + UDP_DATA_P, data, datalen);
 800605c:	008200b4 	movhi	r2,2050
 8006060:	10afaa84 	addi	r2,r2,-16726
 8006064:	e0fffc03 	ldbu	r3,-16(fp)
 8006068:	180d883a 	mov	r6,r3
 800606c:	e17ffb17 	ldw	r5,-20(fp)
 8006070:	1009883a 	mov	r4,r2
 8006074:	8007fa40 	call	8007fa4 <memcpy>
    udpTransmit(datalen);
 8006078:	e0bffc03 	ldbu	r2,-16(fp)
 800607c:	1009883a 	mov	r4,r2
 8006080:	8005f300 	call	8005f30 <_ZN9EtherCard11udpTransmitEt>
}
 8006084:	0001883a 	nop
 8006088:	e037883a 	mov	sp,fp
 800608c:	dfc00117 	ldw	ra,4(sp)
 8006090:	df000017 	ldw	fp,0(sp)
 8006094:	dec00204 	addi	sp,sp,8
 8006098:	f800283a 	ret

0800609c <_ZN9EtherCard7sendWolEPh>:

void EtherCard::sendWol (uint8_t *wolmac) {
 800609c:	defffc04 	addi	sp,sp,-16
 80060a0:	dfc00315 	stw	ra,12(sp)
 80060a4:	df000215 	stw	fp,8(sp)
 80060a8:	df000204 	addi	fp,sp,8
 80060ac:	e13fff15 	stw	r4,-4(fp)
    setMACandIPs(allOnes, allOnes);
 80060b0:	d16005c4 	addi	r5,gp,-32745
 80060b4:	d12005c4 	addi	r4,gp,-32745
 80060b8:	8004b6c0 	call	8004b6c <_ZL12setMACandIPsPKhS0_>
    gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 80060bc:	008200b4 	movhi	r2,2050
 80060c0:	10afa004 	addi	r2,r2,-16768
 80060c4:	00c00204 	movi	r3,8
 80060c8:	10c00305 	stb	r3,12(r2)
    gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 80060cc:	008200b4 	movhi	r2,2050
 80060d0:	10afa004 	addi	r2,r2,-16768
 80060d4:	10000345 	stb	zero,13(r2)
    memcpy_P(gPB + IP_P,iphdr,9);
 80060d8:	008200b4 	movhi	r2,2050
 80060dc:	10afa384 	addi	r2,r2,-16754
 80060e0:	01800244 	movi	r6,9
 80060e4:	014200b4 	movhi	r5,2050
 80060e8:	29608204 	addi	r5,r5,-32248
 80060ec:	1009883a 	mov	r4,r2
 80060f0:	80049580 	call	8004958 <_Z8memcpy_PPvPKvj>
    gPB[IP_TOTLEN_L_P] = 0x82;
 80060f4:	008200b4 	movhi	r2,2050
 80060f8:	10afa004 	addi	r2,r2,-16768
 80060fc:	00ffe084 	movi	r3,-126
 8006100:	10c00445 	stb	r3,17(r2)
    gPB[IP_PROTO_P] = IP_PROTO_UDP_V;
 8006104:	008200b4 	movhi	r2,2050
 8006108:	10afa004 	addi	r2,r2,-16768
 800610c:	00c00444 	movi	r3,17
 8006110:	10c005c5 	stb	r3,23(r2)
    fill_ip_hdr_checksum();
 8006114:	8004e380 	call	8004e38 <_ZL20fill_ip_hdr_checksumv>
    gPB[UDP_DST_PORT_H_P] = 0;
 8006118:	008200b4 	movhi	r2,2050
 800611c:	10afa004 	addi	r2,r2,-16768
 8006120:	10000905 	stb	zero,36(r2)
    gPB[UDP_DST_PORT_L_P] = 0x9; // wol = normally 9
 8006124:	008200b4 	movhi	r2,2050
 8006128:	10afa004 	addi	r2,r2,-16768
 800612c:	00c00244 	movi	r3,9
 8006130:	10c00945 	stb	r3,37(r2)
    gPB[UDP_SRC_PORT_H_P] = 10;
 8006134:	008200b4 	movhi	r2,2050
 8006138:	10afa004 	addi	r2,r2,-16768
 800613c:	00c00284 	movi	r3,10
 8006140:	10c00885 	stb	r3,34(r2)
    gPB[UDP_SRC_PORT_L_P] = 0x42; // source port does not matter
 8006144:	008200b4 	movhi	r2,2050
 8006148:	10afa004 	addi	r2,r2,-16768
 800614c:	00c01084 	movi	r3,66
 8006150:	10c008c5 	stb	r3,35(r2)
    gPB[UDP_LEN_H_P] = 0;
 8006154:	008200b4 	movhi	r2,2050
 8006158:	10afa004 	addi	r2,r2,-16768
 800615c:	10000985 	stb	zero,38(r2)
    gPB[UDP_LEN_L_P] = 110; // fixed len
 8006160:	008200b4 	movhi	r2,2050
 8006164:	10afa004 	addi	r2,r2,-16768
 8006168:	00c01b84 	movi	r3,110
 800616c:	10c009c5 	stb	r3,39(r2)
    gPB[UDP_CHECKSUM_H_P] = 0;
 8006170:	008200b4 	movhi	r2,2050
 8006174:	10afa004 	addi	r2,r2,-16768
 8006178:	10000a05 	stb	zero,40(r2)
    gPB[UDP_CHECKSUM_L_P] = 0;
 800617c:	008200b4 	movhi	r2,2050
 8006180:	10afa004 	addi	r2,r2,-16768
 8006184:	10000a45 	stb	zero,41(r2)
    copyMac(gPB + UDP_DATA_P, allOnes);
 8006188:	008200b4 	movhi	r2,2050
 800618c:	10afaa84 	addi	r2,r2,-16726
 8006190:	d16005c4 	addi	r5,gp,-32745
 8006194:	1009883a 	mov	r4,r2
 8006198:	800793c0 	call	800793c <_ZN9EtherCard7copyMacEPhPKh>
    uint8_t pos = UDP_DATA_P;
 800619c:	00800a84 	movi	r2,42
 80061a0:	e0bffe05 	stb	r2,-8(fp)
    for (uint8_t m = 0; m < 16; ++m) {
 80061a4:	e03ffe45 	stb	zero,-7(fp)
 80061a8:	e0bffe43 	ldbu	r2,-7(fp)
 80061ac:	10800428 	cmpgeui	r2,r2,16
 80061b0:	10000e1e 	bne	r2,zero,80061ec <_ZN9EtherCard7sendWolEPh+0x150>
        pos += 6;
 80061b4:	e0bffe03 	ldbu	r2,-8(fp)
 80061b8:	10800184 	addi	r2,r2,6
 80061bc:	e0bffe05 	stb	r2,-8(fp)
        copyMac(gPB + pos, wolmac);
 80061c0:	e0fffe03 	ldbu	r3,-8(fp)
 80061c4:	008200b4 	movhi	r2,2050
 80061c8:	10afa004 	addi	r2,r2,-16768
 80061cc:	1885883a 	add	r2,r3,r2
 80061d0:	e17fff17 	ldw	r5,-4(fp)
 80061d4:	1009883a 	mov	r4,r2
 80061d8:	800793c0 	call	800793c <_ZN9EtherCard7copyMacEPhPKh>
    gPB[UDP_LEN_L_P] = 110; // fixed len
    gPB[UDP_CHECKSUM_H_P] = 0;
    gPB[UDP_CHECKSUM_L_P] = 0;
    copyMac(gPB + UDP_DATA_P, allOnes);
    uint8_t pos = UDP_DATA_P;
    for (uint8_t m = 0; m < 16; ++m) {
 80061dc:	e0bffe43 	ldbu	r2,-7(fp)
 80061e0:	10800044 	addi	r2,r2,1
 80061e4:	e0bffe45 	stb	r2,-7(fp)
 80061e8:	003fef06 	br	80061a8 <_ZN9EtherCard7sendWolEPh+0x10c>
        pos += 6;
        copyMac(gPB + pos, wolmac);
    }
    fill_checksum(UDP_CHECKSUM_H_P, IP_SRC_P, 16 + 102,1);
 80061ec:	01c00044 	movi	r7,1
 80061f0:	01801d84 	movi	r6,118
 80061f4:	01400684 	movi	r5,26
 80061f8:	01000a04 	movi	r4,40
 80061fc:	80049980 	call	8004998 <_ZL13fill_checksumhhth>
    packetSend(pos + 6);
 8006200:	e0bffe03 	ldbu	r2,-8(fp)
 8006204:	10800184 	addi	r2,r2,6
 8006208:	10bfffcc 	andi	r2,r2,65535
 800620c:	1009883a 	mov	r4,r2
 8006210:	80047080 	call	8004708 <_ZN8ENC28J6010packetSendEt>
}
 8006214:	0001883a 	nop
 8006218:	e037883a 	mov	sp,fp
 800621c:	dfc00117 	ldw	ra,4(sp)
 8006220:	df000017 	ldw	fp,0(sp)
 8006224:	dec00204 	addi	sp,sp,8
 8006228:	f800283a 	ret

0800622c <_ZL17client_arp_whohasPh>:

// make a arp request
static void client_arp_whohas(uint8_t *ip_we_search) {
 800622c:	defffd04 	addi	sp,sp,-12
 8006230:	dfc00215 	stw	ra,8(sp)
 8006234:	df000115 	stw	fp,4(sp)
 8006238:	df000104 	addi	fp,sp,4
 800623c:	e13fff15 	stw	r4,-4(fp)
    printf("In client arp whohas\n");
 8006240:	010200b4 	movhi	r4,2050
 8006244:	21208f04 	addi	r4,r4,-32196
 8006248:	80083600 	call	8008360 <puts>
    setMACs(allOnes);
 800624c:	d12005c4 	addi	r4,gp,-32745
 8006250:	8004b1c0 	call	8004b1c <_ZL7setMACsPKh>
    gPB[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
 8006254:	008200b4 	movhi	r2,2050
 8006258:	10afa004 	addi	r2,r2,-16768
 800625c:	00c00204 	movi	r3,8
 8006260:	10c00305 	stb	r3,12(r2)
    gPB[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
 8006264:	008200b4 	movhi	r2,2050
 8006268:	10afa004 	addi	r2,r2,-16768
 800626c:	00c00184 	movi	r3,6
 8006270:	10c00345 	stb	r3,13(r2)
    memcpy_P(gPB + ETH_ARP_P, arpreqhdr, sizeof arpreqhdr);
 8006274:	008200b4 	movhi	r2,2050
 8006278:	10afa384 	addi	r2,r2,-16754
 800627c:	01800204 	movi	r6,8
 8006280:	d1600744 	addi	r5,gp,-32739
 8006284:	1009883a 	mov	r4,r2
 8006288:	80049580 	call	8004958 <_Z8memcpy_PPvPKvj>
    memset(gPB + ETH_ARP_DST_MAC_P, 0, ETH_LEN);
 800628c:	008200b4 	movhi	r2,2050
 8006290:	10afa804 	addi	r2,r2,-16736
 8006294:	01800184 	movi	r6,6
 8006298:	000b883a 	mov	r5,zero
 800629c:	1009883a 	mov	r4,r2
 80062a0:	80080ec0 	call	80080ec <memset>
    EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
 80062a4:	008200b4 	movhi	r2,2050
 80062a8:	10afa584 	addi	r2,r2,-16746
 80062ac:	d16702c4 	addi	r5,gp,-25589
 80062b0:	1009883a 	mov	r4,r2
 80062b4:	800793c0 	call	800793c <_ZN9EtherCard7copyMacEPhPKh>
    EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, ip_we_search);
 80062b8:	008200b4 	movhi	r2,2050
 80062bc:	10afa984 	addi	r2,r2,-16730
 80062c0:	e17fff17 	ldw	r5,-4(fp)
 80062c4:	1009883a 	mov	r4,r2
 80062c8:	800797c0 	call	800797c <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
 80062cc:	008200b4 	movhi	r2,2050
 80062d0:	10afa704 	addi	r2,r2,-16740
 80062d4:	d1670444 	addi	r5,gp,-25583
 80062d8:	1009883a 	mov	r4,r2
 80062dc:	800797c0 	call	800797c <_ZN9EtherCard6copyIpEPhPKh>
    EtherCard::packetSend(42);
 80062e0:	01000a84 	movi	r4,42
 80062e4:	80047080 	call	8004708 <_ZN8ENC28J6010packetSendEt>
}
 80062e8:	0001883a 	nop
 80062ec:	e037883a 	mov	sp,fp
 80062f0:	dfc00117 	ldw	ra,4(sp)
 80062f4:	df000017 	ldw	fp,0(sp)
 80062f8:	dec00204 	addi	sp,sp,8
 80062fc:	f800283a 	ret

08006300 <_ZN9EtherCard15clientWaitingGwEv>:

uint8_t EtherCard::clientWaitingGw () {
 8006300:	deffff04 	addi	sp,sp,-4
 8006304:	df000015 	stw	fp,0(sp)
 8006308:	d839883a 	mov	fp,sp
    return !(waitgwmac & WGW_HAVE_GW_MAC);
 800630c:	d0a72803 	ldbu	r2,-25440(gp)
 8006310:	10803fcc 	andi	r2,r2,255
 8006314:	1080008c 	andi	r2,r2,2
 8006318:	1005003a 	cmpeq	r2,r2,zero
}
 800631c:	e037883a 	mov	sp,fp
 8006320:	df000017 	ldw	fp,0(sp)
 8006324:	dec00104 	addi	sp,sp,4
 8006328:	f800283a 	ret

0800632c <_ZN9EtherCard16clientWaitingDnsEv>:

uint8_t EtherCard::clientWaitingDns () {
 800632c:	defffe04 	addi	sp,sp,-8
 8006330:	dfc00115 	stw	ra,4(sp)
 8006334:	df000015 	stw	fp,0(sp)
 8006338:	d839883a 	mov	fp,sp
    if(is_lan(myip, dnsip))
 800633c:	d1670944 	addi	r5,gp,-25563
 8006340:	d1270444 	addi	r4,gp,-25583
 8006344:	8004c100 	call	8004c10 <_ZL6is_lanPKhS0_>
 8006348:	10803fcc 	andi	r2,r2,255
 800634c:	10000326 	beq	r2,zero,800635c <_ZN9EtherCard16clientWaitingDnsEv+0x30>
        return !has_dns_mac;
 8006350:	d0a725c3 	ldbu	r2,-25449(gp)
 8006354:	1080005c 	xori	r2,r2,1
 8006358:	00000406 	br	800636c <_ZN9EtherCard16clientWaitingDnsEv+0x40>
    return !(waitgwmac & WGW_HAVE_GW_MAC);
 800635c:	d0a72803 	ldbu	r2,-25440(gp)
 8006360:	10803fcc 	andi	r2,r2,255
 8006364:	1080008c 	andi	r2,r2,2
 8006368:	1005003a 	cmpeq	r2,r2,zero
}
 800636c:	e037883a 	mov	sp,fp
 8006370:	dfc00117 	ldw	ra,4(sp)
 8006374:	df000017 	ldw	fp,0(sp)
 8006378:	dec00204 	addi	sp,sp,8
 800637c:	f800283a 	ret

08006380 <_ZL16client_store_macPhS_>:

static uint8_t client_store_mac(uint8_t *source_ip, uint8_t *mac) {
 8006380:	defffc04 	addi	sp,sp,-16
 8006384:	dfc00315 	stw	ra,12(sp)
 8006388:	df000215 	stw	fp,8(sp)
 800638c:	df000204 	addi	fp,sp,8
 8006390:	e13ffe15 	stw	r4,-8(fp)
 8006394:	e17fff15 	stw	r5,-4(fp)
    if (memcmp(gPB + ETH_ARP_SRC_IP_P, source_ip, IP_LEN) != 0)
 8006398:	008200b4 	movhi	r2,2050
 800639c:	10afa704 	addi	r2,r2,-16740
 80063a0:	01800104 	movi	r6,4
 80063a4:	e17ffe17 	ldw	r5,-8(fp)
 80063a8:	1009883a 	mov	r4,r2
 80063ac:	8007f280 	call	8007f28 <memcmp>
 80063b0:	10000226 	beq	r2,zero,80063bc <_ZL16client_store_macPhS_+0x3c>
        return 0;
 80063b4:	0005883a 	mov	r2,zero
 80063b8:	00000606 	br	80063d4 <_ZL16client_store_macPhS_+0x54>
    EtherCard::copyMac(mac, gPB + ETH_ARP_SRC_MAC_P);
 80063bc:	008200b4 	movhi	r2,2050
 80063c0:	10afa584 	addi	r2,r2,-16746
 80063c4:	100b883a 	mov	r5,r2
 80063c8:	e13fff17 	ldw	r4,-4(fp)
 80063cc:	800793c0 	call	800793c <_ZN9EtherCard7copyMacEPhPKh>
    return 1;
 80063d0:	00800044 	movi	r2,1
}
 80063d4:	e037883a 	mov	sp,fp
 80063d8:	dfc00117 	ldw	ra,4(sp)
 80063dc:	df000017 	ldw	fp,0(sp)
 80063e0:	dec00204 	addi	sp,sp,8
 80063e4:	f800283a 	ret

080063e8 <_ZN9EtherCard7setGwIpEPKh>:
// static void client_gw_arp_refresh() {
//   if (waitgwmac & WGW_HAVE_GW_MAC)
//     waitgwmac |= WGW_REFRESHING;
// }

void EtherCard::setGwIp (const uint8_t *gwipaddr) {
 80063e8:	defffd04 	addi	sp,sp,-12
 80063ec:	dfc00215 	stw	ra,8(sp)
 80063f0:	df000115 	stw	fp,4(sp)
 80063f4:	df000104 	addi	fp,sp,4
 80063f8:	e13fff15 	stw	r4,-4(fp)
    delaycnt = 0; //request gateway ARP lookup
 80063fc:	d0270c0d 	sth	zero,-25552(gp)
    waitgwmac = WGW_INITIAL_ARP; // causes an arp request in the packet loop
 8006400:	00800044 	movi	r2,1
 8006404:	d0a72805 	stb	r2,-25440(gp)
    copyIp(gwip, gwipaddr);
 8006408:	e17fff17 	ldw	r5,-4(fp)
 800640c:	d1270744 	addi	r4,gp,-25571
 8006410:	800797c0 	call	800797c <_ZN9EtherCard6copyIpEPhPKh>
}
 8006414:	0001883a 	nop
 8006418:	e037883a 	mov	sp,fp
 800641c:	dfc00117 	ldw	ra,4(sp)
 8006420:	df000017 	ldw	fp,0(sp)
 8006424:	dec00204 	addi	sp,sp,8
 8006428:	f800283a 	ret

0800642c <_ZN9EtherCard22updateBroadcastAddressEv>:

void EtherCard::updateBroadcastAddress() {
 800642c:	defffe04 	addi	sp,sp,-8
 8006430:	df000115 	stw	fp,4(sp)
 8006434:	df000104 	addi	fp,sp,4
    for(uint8_t i=0; i<IP_LEN; i++)
 8006438:	e03fff05 	stb	zero,-4(fp)
 800643c:	e0bfff03 	ldbu	r2,-4(fp)
 8006440:	10800128 	cmpgeui	r2,r2,4
 8006444:	1000141e 	bne	r2,zero,8006498 <_ZN9EtherCard22updateBroadcastAddressEv+0x6c>
        broadcastip[i] = myip[i] | ~netmask[i];
 8006448:	e0ffff03 	ldbu	r3,-4(fp)
 800644c:	e13fff03 	ldbu	r4,-4(fp)
 8006450:	d0a70444 	addi	r2,gp,-25583
 8006454:	2085883a 	add	r2,r4,r2
 8006458:	10800003 	ldbu	r2,0(r2)
 800645c:	100b883a 	mov	r5,r2
 8006460:	e13fff03 	ldbu	r4,-4(fp)
 8006464:	d0a70544 	addi	r2,gp,-25579
 8006468:	2085883a 	add	r2,r4,r2
 800646c:	10800003 	ldbu	r2,0(r2)
 8006470:	0084303a 	nor	r2,zero,r2
 8006474:	2884b03a 	or	r2,r5,r2
 8006478:	1009883a 	mov	r4,r2
 800647c:	d0a70644 	addi	r2,gp,-25575
 8006480:	1885883a 	add	r2,r3,r2
 8006484:	11000005 	stb	r4,0(r2)
    waitgwmac = WGW_INITIAL_ARP; // causes an arp request in the packet loop
    copyIp(gwip, gwipaddr);
}

void EtherCard::updateBroadcastAddress() {
    for(uint8_t i=0; i<IP_LEN; i++)
 8006488:	e0bfff03 	ldbu	r2,-4(fp)
 800648c:	10800044 	addi	r2,r2,1
 8006490:	e0bfff05 	stb	r2,-4(fp)
 8006494:	003fe906 	br	800643c <_ZN9EtherCard22updateBroadcastAddressEv+0x10>
        broadcastip[i] = myip[i] | ~netmask[i];
}
 8006498:	0001883a 	nop
 800649c:	e037883a 	mov	sp,fp
 80064a0:	df000017 	ldw	fp,0(sp)
 80064a4:	dec00104 	addi	sp,sp,4
 80064a8:	f800283a 	ret

080064ac <_ZL10client_synhhh>:

static void client_syn(uint8_t srcport,uint8_t dstport_h,uint8_t dstport_l) {
 80064ac:	defffb04 	addi	sp,sp,-20
 80064b0:	dfc00415 	stw	ra,16(sp)
 80064b4:	df000315 	stw	fp,12(sp)
 80064b8:	df000304 	addi	fp,sp,12
 80064bc:	2807883a 	mov	r3,r5
 80064c0:	3005883a 	mov	r2,r6
 80064c4:	e13ffd05 	stb	r4,-12(fp)
 80064c8:	e0fffe05 	stb	r3,-8(fp)
 80064cc:	e0bfff05 	stb	r2,-4(fp)
    if(is_lan(EtherCard::myip, EtherCard::hisip)) {
 80064d0:	d1670a44 	addi	r5,gp,-25559
 80064d4:	d1270444 	addi	r4,gp,-25583
 80064d8:	8004c100 	call	8004c10 <_ZL6is_lanPKhS0_>
 80064dc:	10803fcc 	andi	r2,r2,255
 80064e0:	10000426 	beq	r2,zero,80064f4 <_ZL10client_synhhh+0x48>
        setMACandIPs(destmacaddr, EtherCard::hisip);
 80064e4:	d1670a44 	addi	r5,gp,-25559
 80064e8:	d1272404 	addi	r4,gp,-25456
 80064ec:	8004b6c0 	call	8004b6c <_ZL12setMACandIPsPKhS0_>
 80064f0:	00000306 	br	8006500 <_ZL10client_synhhh+0x54>
    } else {
        setMACandIPs(gwmacaddr, EtherCard::hisip);
 80064f4:	d1670a44 	addi	r5,gp,-25559
 80064f8:	d1272684 	addi	r4,gp,-25446
 80064fc:	8004b6c0 	call	8004b6c <_ZL12setMACandIPsPKhS0_>
    }
    gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 8006500:	008200b4 	movhi	r2,2050
 8006504:	10afa004 	addi	r2,r2,-16768
 8006508:	00c00204 	movi	r3,8
 800650c:	10c00305 	stb	r3,12(r2)
    gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 8006510:	008200b4 	movhi	r2,2050
 8006514:	10afa004 	addi	r2,r2,-16768
 8006518:	10000345 	stb	zero,13(r2)
    memcpy_P(gPB + IP_P,iphdr,sizeof iphdr);
 800651c:	008200b4 	movhi	r2,2050
 8006520:	10afa384 	addi	r2,r2,-16754
 8006524:	01800244 	movi	r6,9
 8006528:	014200b4 	movhi	r5,2050
 800652c:	29608204 	addi	r5,r5,-32248
 8006530:	1009883a 	mov	r4,r2
 8006534:	80049580 	call	8004958 <_Z8memcpy_PPvPKvj>
    gPB[IP_TOTLEN_L_P] = 44; // good for syn
 8006538:	008200b4 	movhi	r2,2050
 800653c:	10afa004 	addi	r2,r2,-16768
 8006540:	00c00b04 	movi	r3,44
 8006544:	10c00445 	stb	r3,17(r2)
    gPB[IP_PROTO_P] = IP_PROTO_TCP_V;
 8006548:	008200b4 	movhi	r2,2050
 800654c:	10afa004 	addi	r2,r2,-16768
 8006550:	00c00184 	movi	r3,6
 8006554:	10c005c5 	stb	r3,23(r2)
    fill_ip_hdr_checksum();
 8006558:	8004e380 	call	8004e38 <_ZL20fill_ip_hdr_checksumv>
    gPB[TCP_DST_PORT_H_P] = dstport_h;
 800655c:	008200b4 	movhi	r2,2050
 8006560:	10afa004 	addi	r2,r2,-16768
 8006564:	e0fffe03 	ldbu	r3,-8(fp)
 8006568:	10c00905 	stb	r3,36(r2)
    gPB[TCP_DST_PORT_L_P] = dstport_l;
 800656c:	008200b4 	movhi	r2,2050
 8006570:	10afa004 	addi	r2,r2,-16768
 8006574:	e0ffff03 	ldbu	r3,-4(fp)
 8006578:	10c00945 	stb	r3,37(r2)
    gPB[TCP_SRC_PORT_H_P] = TCPCLIENT_SRC_PORT_H;
 800657c:	008200b4 	movhi	r2,2050
 8006580:	10afa004 	addi	r2,r2,-16768
 8006584:	00c002c4 	movi	r3,11
 8006588:	10c00885 	stb	r3,34(r2)
    gPB[TCP_SRC_PORT_L_P] = srcport; // lower 8 bit of src port
 800658c:	008200b4 	movhi	r2,2050
 8006590:	10afa004 	addi	r2,r2,-16768
 8006594:	e0fffd03 	ldbu	r3,-12(fp)
 8006598:	10c008c5 	stb	r3,35(r2)
    memset(gPB + TCP_SEQ_H_P, 0, 8);
 800659c:	008200b4 	movhi	r2,2050
 80065a0:	10afa984 	addi	r2,r2,-16730
 80065a4:	01800204 	movi	r6,8
 80065a8:	000b883a 	mov	r5,zero
 80065ac:	1009883a 	mov	r4,r2
 80065b0:	80080ec0 	call	80080ec <memset>
    gPB[TCP_SEQ_H_P+2] = seqnum;
 80065b4:	d0e00543 	ldbu	r3,-32747(gp)
 80065b8:	008200b4 	movhi	r2,2050
 80065bc:	10afa004 	addi	r2,r2,-16768
 80065c0:	10c00a05 	stb	r3,40(r2)
    seqnum += 3;
 80065c4:	d0a00543 	ldbu	r2,-32747(gp)
 80065c8:	108000c4 	addi	r2,r2,3
 80065cc:	d0a00545 	stb	r2,-32747(gp)
    gPB[TCP_HEADER_LEN_P] = 0x60; // 0x60=24 len: (0x60>>4) * 4
 80065d0:	008200b4 	movhi	r2,2050
 80065d4:	10afa004 	addi	r2,r2,-16768
 80065d8:	00c01804 	movi	r3,96
 80065dc:	10c00b85 	stb	r3,46(r2)
    gPB[TCP_FLAGS_P] = TCP_FLAGS_SYN_V;
 80065e0:	008200b4 	movhi	r2,2050
 80065e4:	10afa004 	addi	r2,r2,-16768
 80065e8:	00c00084 	movi	r3,2
 80065ec:	10c00bc5 	stb	r3,47(r2)
    gPB[TCP_WIN_SIZE] = 0x3; // 1024 = 0x400 768 = 0x300, initial window
 80065f0:	008200b4 	movhi	r2,2050
 80065f4:	10afa004 	addi	r2,r2,-16768
 80065f8:	00c000c4 	movi	r3,3
 80065fc:	10c00c05 	stb	r3,48(r2)
    gPB[TCP_WIN_SIZE+1] = 0x0;
 8006600:	008200b4 	movhi	r2,2050
 8006604:	10afa004 	addi	r2,r2,-16768
 8006608:	10000c45 	stb	zero,49(r2)
    gPB[TCP_CHECKSUM_H_P] = 0;
 800660c:	008200b4 	movhi	r2,2050
 8006610:	10afa004 	addi	r2,r2,-16768
 8006614:	10000c85 	stb	zero,50(r2)
    gPB[TCP_CHECKSUM_L_P] = 0;
 8006618:	008200b4 	movhi	r2,2050
 800661c:	10afa004 	addi	r2,r2,-16768
 8006620:	10000cc5 	stb	zero,51(r2)
    gPB[TCP_CHECKSUM_L_P+1] = 0;
 8006624:	008200b4 	movhi	r2,2050
 8006628:	10afa004 	addi	r2,r2,-16768
 800662c:	10000d05 	stb	zero,52(r2)
    gPB[TCP_CHECKSUM_L_P+2] = 0;
 8006630:	008200b4 	movhi	r2,2050
 8006634:	10afa004 	addi	r2,r2,-16768
 8006638:	10000d45 	stb	zero,53(r2)
    gPB[TCP_OPTIONS_P] = 2;
 800663c:	008200b4 	movhi	r2,2050
 8006640:	10afa004 	addi	r2,r2,-16768
 8006644:	00c00084 	movi	r3,2
 8006648:	10c00d85 	stb	r3,54(r2)
    gPB[TCP_OPTIONS_P+1] = 4;
 800664c:	008200b4 	movhi	r2,2050
 8006650:	10afa004 	addi	r2,r2,-16768
 8006654:	00c00104 	movi	r3,4
 8006658:	10c00dc5 	stb	r3,55(r2)
    gPB[TCP_OPTIONS_P+2] = (CLIENTMSS>>8);
 800665c:	008200b4 	movhi	r2,2050
 8006660:	10afa004 	addi	r2,r2,-16768
 8006664:	00c00084 	movi	r3,2
 8006668:	10c00e05 	stb	r3,56(r2)
    gPB[TCP_OPTIONS_P+3] = (uint8_t) CLIENTMSS;
 800666c:	008200b4 	movhi	r2,2050
 8006670:	10afa004 	addi	r2,r2,-16768
 8006674:	00c00984 	movi	r3,38
 8006678:	10c00e45 	stb	r3,57(r2)
    fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8 +TCP_HEADER_LEN_PLAIN+4,2);
 800667c:	01c00084 	movi	r7,2
 8006680:	01800804 	movi	r6,32
 8006684:	01400684 	movi	r5,26
 8006688:	01000c84 	movi	r4,50
 800668c:	80049980 	call	8004998 <_ZL13fill_checksumhhth>
    // 4 is the tcp mss option:
    EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN+4);
 8006690:	01000e84 	movi	r4,58
 8006694:	80047080 	call	8004708 <_ZN8ENC28J6010packetSendEt>
}
 8006698:	0001883a 	nop
 800669c:	e037883a 	mov	sp,fp
 80066a0:	dfc00117 	ldw	ra,4(sp)
 80066a4:	df000017 	ldw	fp,0(sp)
 80066a8:	dec00204 	addi	sp,sp,8
 80066ac:	f800283a 	ret

080066b0 <_ZN9EtherCard12clientTcpReqEPFhhhttEPFthEt>:

uint8_t EtherCard::clientTcpReq (uint8_t (*result_cb)(uint8_t,uint8_t,uint16_t,uint16_t),
                                 uint16_t (*datafill_cb)(uint8_t),uint16_t port) {
 80066b0:	defffc04 	addi	sp,sp,-16
 80066b4:	df000315 	stw	fp,12(sp)
 80066b8:	df000304 	addi	fp,sp,12
 80066bc:	e13ffd15 	stw	r4,-12(fp)
 80066c0:	e17ffe15 	stw	r5,-8(fp)
 80066c4:	3005883a 	mov	r2,r6
 80066c8:	e0bfff0d 	sth	r2,-4(fp)
    client_tcp_result_cb = result_cb;
 80066cc:	e0bffd17 	ldw	r2,-12(fp)
 80066d0:	d0a71a15 	stw	r2,-25496(gp)
    client_tcp_datafill_cb = datafill_cb;
 80066d4:	e0bffe17 	ldw	r2,-8(fp)
 80066d8:	d0a71b15 	stw	r2,-25492(gp)
    tcp_client_port_h = port>>8;
 80066dc:	e0bfff0b 	ldhu	r2,-4(fp)
 80066e0:	1005d23a 	srai	r2,r2,8
 80066e4:	d0a71985 	stb	r2,-25498(gp)
    tcp_client_port_l = port;
 80066e8:	e0bfff0b 	ldhu	r2,-4(fp)
 80066ec:	d0a719c5 	stb	r2,-25497(gp)
    tcp_client_state = TCP_STATE_SENDSYN; // Flag to packetloop to initiate a TCP/IP session by send a syn
 80066f0:	00800044 	movi	r2,1
 80066f4:	d0a71945 	stb	r2,-25499(gp)
    tcp_fd = (tcp_fd + 1) & 7;
 80066f8:	d0a71903 	ldbu	r2,-25500(gp)
 80066fc:	10800044 	addi	r2,r2,1
 8006700:	108001cc 	andi	r2,r2,7
 8006704:	d0a71905 	stb	r2,-25500(gp)
    return tcp_fd;
 8006708:	d0a71903 	ldbu	r2,-25500(gp)
}
 800670c:	e037883a 	mov	sp,fp
 8006710:	df000017 	ldw	fp,0(sp)
 8006714:	dec00104 	addi	sp,sp,4
 8006718:	f800283a 	ret

0800671c <_ZL31www_client_internal_datafill_cbh>:

static uint16_t www_client_internal_datafill_cb(uint8_t fd) {
 800671c:	defffe04 	addi	sp,sp,-8
 8006720:	df000115 	stw	fp,4(sp)
 8006724:	df000104 	addi	fp,sp,4
 8006728:	2005883a 	mov	r2,r4
 800672c:	e0bfff05 	stb	r2,-4(fp)
	return 0;
 8006730:	0005883a 	mov	r2,zero
//                          strlen(client_postval),
//                          client_postval);
//         }
//     }
//     return bfill.position();
}
 8006734:	e037883a 	mov	sp,fp
 8006738:	df000017 	ldw	fp,0(sp)
 800673c:	dec00104 	addi	sp,sp,4
 8006740:	f800283a 	ret

08006744 <_ZL29www_client_internal_result_cbhhtt>:

static uint8_t www_client_internal_result_cb(uint8_t fd, uint8_t statuscode, uint16_t datapos, uint16_t len_of_data) {
 8006744:	defff904 	addi	sp,sp,-28
 8006748:	dfc00615 	stw	ra,24(sp)
 800674c:	df000515 	stw	fp,20(sp)
 8006750:	df000504 	addi	fp,sp,20
 8006754:	2011883a 	mov	r8,r4
 8006758:	2809883a 	mov	r4,r5
 800675c:	3007883a 	mov	r3,r6
 8006760:	3805883a 	mov	r2,r7
 8006764:	e23ffc05 	stb	r8,-16(fp)
 8006768:	e13ffd05 	stb	r4,-12(fp)
 800676c:	e0fffe0d 	sth	r3,-8(fp)
 8006770:	e0bfff0d 	sth	r2,-4(fp)
    if (fd!=www_fd)
 8006774:	d0a71c03 	ldbu	r2,-25488(gp)
 8006778:	e0fffc03 	ldbu	r3,-16(fp)
 800677c:	10803fcc 	andi	r2,r2,255
 8006780:	18800626 	beq	r3,r2,800679c <_ZL29www_client_internal_result_cbhhtt+0x58>
        (*client_browser_cb)(4,0,0);
 8006784:	d0a71d17 	ldw	r2,-25484(gp)
 8006788:	000d883a 	mov	r6,zero
 800678c:	000b883a 	mov	r5,zero
 8006790:	01000104 	movi	r4,4
 8006794:	103ee83a 	callr	r2
 8006798:	00002206 	br	8006824 <_ZL29www_client_internal_result_cbhhtt+0xe0>
    else if (statuscode==0 && len_of_data>12 && client_browser_cb) {
 800679c:	e0bffd03 	ldbu	r2,-12(fp)
 80067a0:	1000201e 	bne	r2,zero,8006824 <_ZL29www_client_internal_result_cbhhtt+0xe0>
 80067a4:	e0bfff0b 	ldhu	r2,-4(fp)
 80067a8:	10800370 	cmpltui	r2,r2,13
 80067ac:	10001d1e 	bne	r2,zero,8006824 <_ZL29www_client_internal_result_cbhhtt+0xe0>
 80067b0:	d0a71d17 	ldw	r2,-25484(gp)
 80067b4:	10001b26 	beq	r2,zero,8006824 <_ZL29www_client_internal_result_cbhhtt+0xe0>
        uint8_t f = strncmp("200",(char *)&(gPB[datapos+9]),3) != 0;
 80067b8:	e0bffe0b 	ldhu	r2,-8(fp)
 80067bc:	10c00244 	addi	r3,r2,9
 80067c0:	008200b4 	movhi	r2,2050
 80067c4:	10afa004 	addi	r2,r2,-16768
 80067c8:	1885883a 	add	r2,r3,r2
 80067cc:	018000c4 	movi	r6,3
 80067d0:	100b883a 	mov	r5,r2
 80067d4:	010200b4 	movhi	r4,2050
 80067d8:	21209504 	addi	r4,r4,-32172
 80067dc:	800849c0 	call	800849c <strncmp>
 80067e0:	1004c03a 	cmpne	r2,r2,zero
 80067e4:	e0bffb05 	stb	r2,-20(fp)
        (*client_browser_cb)(f, ((uint16_t)TCP_SRC_PORT_H_P+(gPB[TCP_HEADER_LEN_P]>>4)*4),len_of_data);
 80067e8:	d0e71d17 	ldw	r3,-25484(gp)
 80067ec:	e13ffb03 	ldbu	r4,-20(fp)
 80067f0:	008200b4 	movhi	r2,2050
 80067f4:	10afa004 	addi	r2,r2,-16768
 80067f8:	10800b83 	ldbu	r2,46(r2)
 80067fc:	10803fcc 	andi	r2,r2,255
 8006800:	1005d13a 	srai	r2,r2,4
 8006804:	1085883a 	add	r2,r2,r2
 8006808:	1085883a 	add	r2,r2,r2
 800680c:	10800884 	addi	r2,r2,34
 8006810:	10bfffcc 	andi	r2,r2,65535
 8006814:	e17fff0b 	ldhu	r5,-4(fp)
 8006818:	280d883a 	mov	r6,r5
 800681c:	100b883a 	mov	r5,r2
 8006820:	183ee83a 	callr	r3
    }
    return 0;
 8006824:	0005883a 	mov	r2,zero
}
 8006828:	e037883a 	mov	sp,fp
 800682c:	dfc00117 	ldw	ra,4(sp)
 8006830:	df000017 	ldw	fp,0(sp)
 8006834:	dec00204 	addi	sp,sp,8
 8006838:	f800283a 	ret

0800683c <_ZN9EtherCard9browseUrlEPKcS1_S1_PFvhttE>:

void EtherCard::browseUrl (const char *urlbuf, const char *urlbuf_varpart, const char *hoststr, void (*callback)(uint8_t,uint16_t,uint16_t)) {
 800683c:	defff904 	addi	sp,sp,-28
 8006840:	dfc00615 	stw	ra,24(sp)
 8006844:	df000515 	stw	fp,20(sp)
 8006848:	df000504 	addi	fp,sp,20
 800684c:	e13ffc15 	stw	r4,-16(fp)
 8006850:	e17ffd15 	stw	r5,-12(fp)
 8006854:	e1bffe15 	stw	r6,-8(fp)
 8006858:	e1ffff15 	stw	r7,-4(fp)
    browseUrl(urlbuf, urlbuf_varpart, hoststr, PSTR("Accept: text/html"), callback);
 800685c:	010200b4 	movhi	r4,2050
 8006860:	21209604 	addi	r4,r4,-32168
 8006864:	80049340 	call	8004934 <_Z4PSTRPc>
 8006868:	1007883a 	mov	r3,r2
 800686c:	e0bfff17 	ldw	r2,-4(fp)
 8006870:	d8800015 	stw	r2,0(sp)
 8006874:	180f883a 	mov	r7,r3
 8006878:	e1bffe17 	ldw	r6,-8(fp)
 800687c:	e17ffd17 	ldw	r5,-12(fp)
 8006880:	e13ffc17 	ldw	r4,-16(fp)
 8006884:	80068a00 	call	80068a0 <_ZN9EtherCard9browseUrlEPKcS1_S1_S1_PFvhttE>
}
 8006888:	0001883a 	nop
 800688c:	e037883a 	mov	sp,fp
 8006890:	dfc00117 	ldw	ra,4(sp)
 8006894:	df000017 	ldw	fp,0(sp)
 8006898:	dec00204 	addi	sp,sp,8
 800689c:	f800283a 	ret

080068a0 <_ZN9EtherCard9browseUrlEPKcS1_S1_S1_PFvhttE>:

void EtherCard::browseUrl (const char *urlbuf, const char *urlbuf_varpart, const char *hoststr, const char *additionalheaderline, void (*callback)(uint8_t,uint16_t,uint16_t)) {
 80068a0:	defffa04 	addi	sp,sp,-24
 80068a4:	dfc00515 	stw	ra,20(sp)
 80068a8:	df000415 	stw	fp,16(sp)
 80068ac:	df000404 	addi	fp,sp,16
 80068b0:	e13ffc15 	stw	r4,-16(fp)
 80068b4:	e17ffd15 	stw	r5,-12(fp)
 80068b8:	e1bffe15 	stw	r6,-8(fp)
 80068bc:	e1ffff15 	stw	r7,-4(fp)
    client_urlbuf = urlbuf;
 80068c0:	e0bffc17 	ldw	r2,-16(fp)
 80068c4:	d0a72015 	stw	r2,-25472(gp)
    client_urlbuf_var = urlbuf_varpart;
 80068c8:	e0bffd17 	ldw	r2,-12(fp)
 80068cc:	d0a72115 	stw	r2,-25468(gp)
    client_hoststr = hoststr;
 80068d0:	e0bffe17 	ldw	r2,-8(fp)
 80068d4:	d0a72215 	stw	r2,-25464(gp)
    client_additionalheaderline = additionalheaderline;
 80068d8:	e0bfff17 	ldw	r2,-4(fp)
 80068dc:	d0a71e15 	stw	r2,-25480(gp)
    client_postval = 0;
 80068e0:	d0271f15 	stw	zero,-25476(gp)
    client_browser_cb = callback;
 80068e4:	e0800217 	ldw	r2,8(fp)
 80068e8:	d0a71d15 	stw	r2,-25484(gp)
    www_fd = clientTcpReq(&www_client_internal_result_cb,&www_client_internal_datafill_cb,hisport);
 80068ec:	d0a0028b 	ldhu	r2,-32758(gp)
 80068f0:	10bfffcc 	andi	r2,r2,65535
 80068f4:	100d883a 	mov	r6,r2
 80068f8:	01420034 	movhi	r5,2048
 80068fc:	2959c704 	addi	r5,r5,26396
 8006900:	01020034 	movhi	r4,2048
 8006904:	2119d104 	addi	r4,r4,26436
 8006908:	80066b00 	call	80066b0 <_ZN9EtherCard12clientTcpReqEPFhhhttEPFthEt>
 800690c:	d0a71c05 	stb	r2,-25488(gp)
}
 8006910:	0001883a 	nop
 8006914:	e037883a 	mov	sp,fp
 8006918:	dfc00117 	ldw	ra,4(sp)
 800691c:	df000017 	ldw	fp,0(sp)
 8006920:	dec00204 	addi	sp,sp,8
 8006924:	f800283a 	ret

08006928 <_ZN9EtherCard8httpPostEPKcS1_S1_S1_PFvhttE>:

void EtherCard::httpPost (const char *urlbuf, const char *hoststr, const char *additionalheaderline, const char *postval, void (*callback)(uint8_t,uint16_t,uint16_t)) {
 8006928:	defffa04 	addi	sp,sp,-24
 800692c:	dfc00515 	stw	ra,20(sp)
 8006930:	df000415 	stw	fp,16(sp)
 8006934:	df000404 	addi	fp,sp,16
 8006938:	e13ffc15 	stw	r4,-16(fp)
 800693c:	e17ffd15 	stw	r5,-12(fp)
 8006940:	e1bffe15 	stw	r6,-8(fp)
 8006944:	e1ffff15 	stw	r7,-4(fp)
    client_urlbuf = urlbuf;
 8006948:	e0bffc17 	ldw	r2,-16(fp)
 800694c:	d0a72015 	stw	r2,-25472(gp)
    client_hoststr = hoststr;
 8006950:	e0bffd17 	ldw	r2,-12(fp)
 8006954:	d0a72215 	stw	r2,-25464(gp)
    client_additionalheaderline = additionalheaderline;
 8006958:	e0bffe17 	ldw	r2,-8(fp)
 800695c:	d0a71e15 	stw	r2,-25480(gp)
    client_postval = postval;
 8006960:	e0bfff17 	ldw	r2,-4(fp)
 8006964:	d0a71f15 	stw	r2,-25476(gp)
    client_browser_cb = callback;
 8006968:	e0800217 	ldw	r2,8(fp)
 800696c:	d0a71d15 	stw	r2,-25484(gp)
    www_fd = clientTcpReq(&www_client_internal_result_cb,&www_client_internal_datafill_cb,hisport);
 8006970:	d0a0028b 	ldhu	r2,-32758(gp)
 8006974:	10bfffcc 	andi	r2,r2,65535
 8006978:	100d883a 	mov	r6,r2
 800697c:	01420034 	movhi	r5,2048
 8006980:	2959c704 	addi	r5,r5,26396
 8006984:	01020034 	movhi	r4,2048
 8006988:	2119d104 	addi	r4,r4,26436
 800698c:	80066b00 	call	80066b0 <_ZN9EtherCard12clientTcpReqEPFhhhttEPFthEt>
 8006990:	d0a71c05 	stb	r2,-25488(gp)
}
 8006994:	0001883a 	nop
 8006998:	e037883a 	mov	sp,fp
 800699c:	dfc00117 	ldw	ra,4(sp)
 80069a0:	df000017 	ldw	fp,0(sp)
 80069a4:	dec00204 	addi	sp,sp,8
 80069a8:	f800283a 	ret

080069ac <_ZL15tcp_datafill_cbh>:

static uint16_t tcp_datafill_cb(uint8_t fd) {
 80069ac:	defffe04 	addi	sp,sp,-8
 80069b0:	df000115 	stw	fp,4(sp)
 80069b4:	df000104 	addi	fp,sp,4
 80069b8:	2005883a 	mov	r2,r4
 80069bc:	e0bfff05 	stb	r2,-4(fp)
//     Serial.println((char*) EtherCard::tcpOffset());
// #endif
//     result_fd = 123; // bogus value
//     return len;

	return 0;
 80069c0:	0005883a 	mov	r2,zero
}
 80069c4:	e037883a 	mov	sp,fp
 80069c8:	df000017 	ldw	fp,0(sp)
 80069cc:	dec00104 	addi	sp,sp,4
 80069d0:	f800283a 	ret

080069d4 <_ZL13tcp_result_cbhhtt>:

static uint8_t tcp_result_cb(uint8_t fd, uint8_t status, uint16_t datapos, uint16_t datalen) {
 80069d4:	defffb04 	addi	sp,sp,-20
 80069d8:	df000415 	stw	fp,16(sp)
 80069dc:	df000404 	addi	fp,sp,16
 80069e0:	2011883a 	mov	r8,r4
 80069e4:	2809883a 	mov	r4,r5
 80069e8:	3007883a 	mov	r3,r6
 80069ec:	3805883a 	mov	r2,r7
 80069f0:	e23ffc05 	stb	r8,-16(fp)
 80069f4:	e13ffd05 	stb	r4,-12(fp)
 80069f8:	e0fffe0d 	sth	r3,-8(fp)
 80069fc:	e0bfff0d 	sth	r2,-4(fp)
    if (status == 0) {
 8006a00:	e0bffd03 	ldbu	r2,-12(fp)
 8006a04:	1000071e 	bne	r2,zero,8006a24 <_ZL13tcp_result_cbhhtt+0x50>
        result_fd = fd; // a valid result has been received, remember its session id
 8006a08:	e0bffc03 	ldbu	r2,-16(fp)
 8006a0c:	d0a00585 	stb	r2,-32746(gp)
        result_ptr = (char*) ether.buffer + datapos;
 8006a10:	e0fffe0b 	ldhu	r3,-8(fp)
 8006a14:	008200b4 	movhi	r2,2050
 8006a18:	10afa004 	addi	r2,r2,-16768
 8006a1c:	1885883a 	add	r2,r3,r2
 8006a20:	d0a72915 	stw	r2,-25436(gp)
        // result_ptr[datalen] = 0;
    }
    return 1;
 8006a24:	00800044 	movi	r2,1
}
 8006a28:	e037883a 	mov	sp,fp
 8006a2c:	df000017 	ldw	fp,0(sp)
 8006a30:	dec00104 	addi	sp,sp,4
 8006a34:	f800283a 	ret

08006a38 <_ZN9EtherCard7tcpSendEv>:

uint8_t EtherCard::tcpSend () {
 8006a38:	defffe04 	addi	sp,sp,-8
 8006a3c:	dfc00115 	stw	ra,4(sp)
 8006a40:	df000015 	stw	fp,0(sp)
 8006a44:	d839883a 	mov	fp,sp
    www_fd = clientTcpReq(&tcp_result_cb, &tcp_datafill_cb, hisport);
 8006a48:	d0a0028b 	ldhu	r2,-32758(gp)
 8006a4c:	10bfffcc 	andi	r2,r2,65535
 8006a50:	100d883a 	mov	r6,r2
 8006a54:	01420034 	movhi	r5,2048
 8006a58:	295a6b04 	addi	r5,r5,27052
 8006a5c:	01020034 	movhi	r4,2048
 8006a60:	211a7504 	addi	r4,r4,27092
 8006a64:	80066b00 	call	80066b0 <_ZN9EtherCard12clientTcpReqEPFhhhttEPFthEt>
 8006a68:	d0a71c05 	stb	r2,-25488(gp)
    return www_fd;
 8006a6c:	d0a71c03 	ldbu	r2,-25488(gp)
}
 8006a70:	e037883a 	mov	sp,fp
 8006a74:	dfc00117 	ldw	ra,4(sp)
 8006a78:	df000017 	ldw	fp,0(sp)
 8006a7c:	dec00204 	addi	sp,sp,8
 8006a80:	f800283a 	ret

08006a84 <_ZN9EtherCard8tcpReplyEh>:

const char* EtherCard::tcpReply (uint8_t fd) {
 8006a84:	defffe04 	addi	sp,sp,-8
 8006a88:	df000115 	stw	fp,4(sp)
 8006a8c:	df000104 	addi	fp,sp,4
 8006a90:	2005883a 	mov	r2,r4
 8006a94:	e0bfff05 	stb	r2,-4(fp)
    if (result_fd != fd)
 8006a98:	d0a00583 	ldbu	r2,-32746(gp)
 8006a9c:	10c03fcc 	andi	r3,r2,255
 8006aa0:	e0bfff03 	ldbu	r2,-4(fp)
 8006aa4:	18800226 	beq	r3,r2,8006ab0 <_ZN9EtherCard8tcpReplyEh+0x2c>
        return 0;
 8006aa8:	0005883a 	mov	r2,zero
 8006aac:	00000306 	br	8006abc <_ZN9EtherCard8tcpReplyEh+0x38>
    result_fd = 123; // set to a bogus value to prevent future match
 8006ab0:	00801ec4 	movi	r2,123
 8006ab4:	d0a00585 	stb	r2,-32746(gp)
    return result_ptr;
 8006ab8:	d0a72917 	ldw	r2,-25436(gp)
}
 8006abc:	e037883a 	mov	sp,fp
 8006ac0:	df000017 	ldw	fp,0(sp)
 8006ac4:	dec00104 	addi	sp,sp,4
 8006ac8:	f800283a 	ret

08006acc <_ZN9EtherCard20registerPingCallbackEPFvPhE>:

void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
 8006acc:	defffe04 	addi	sp,sp,-8
 8006ad0:	df000115 	stw	fp,4(sp)
 8006ad4:	df000104 	addi	fp,sp,4
 8006ad8:	e13fff15 	stw	r4,-4(fp)
    icmp_cb = callback;
 8006adc:	e0bfff17 	ldw	r2,-4(fp)
 8006ae0:	d0a72315 	stw	r2,-25460(gp)
}
 8006ae4:	0001883a 	nop
 8006ae8:	e037883a 	mov	sp,fp
 8006aec:	df000017 	ldw	fp,0(sp)
 8006af0:	dec00104 	addi	sp,sp,4
 8006af4:	f800283a 	ret

08006af8 <_ZN9EtherCard24packetLoopIcmpCheckReplyEPKh>:

uint8_t EtherCard::packetLoopIcmpCheckReply (const uint8_t *ip_monitoredhost) {
 8006af8:	defffd04 	addi	sp,sp,-12
 8006afc:	dfc00215 	stw	ra,8(sp)
 8006b00:	df000115 	stw	fp,4(sp)
 8006b04:	df000104 	addi	fp,sp,4
 8006b08:	e13fff15 	stw	r4,-4(fp)
    return gPB[IP_PROTO_P]==IP_PROTO_ICMP_V &&
 8006b0c:	008200b4 	movhi	r2,2050
 8006b10:	10afa004 	addi	r2,r2,-16768
 8006b14:	108005c3 	ldbu	r2,23(r2)
           gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREPLY_V &&
           gPB[ICMP_DATA_P]== PINGPATTERN &&
 8006b18:	10803fcc 	andi	r2,r2,255
 8006b1c:	10800058 	cmpnei	r2,r2,1
 8006b20:	1000111e 	bne	r2,zero,8006b68 <_ZN9EtherCard24packetLoopIcmpCheckReplyEPKh+0x70>
    icmp_cb = callback;
}

uint8_t EtherCard::packetLoopIcmpCheckReply (const uint8_t *ip_monitoredhost) {
    return gPB[IP_PROTO_P]==IP_PROTO_ICMP_V &&
           gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREPLY_V &&
 8006b24:	008200b4 	movhi	r2,2050
 8006b28:	10afa004 	addi	r2,r2,-16768
 8006b2c:	10800883 	ldbu	r2,34(r2)
void EtherCard::registerPingCallback (void (*callback)(uint8_t *srcip)) {
    icmp_cb = callback;
}

uint8_t EtherCard::packetLoopIcmpCheckReply (const uint8_t *ip_monitoredhost) {
    return gPB[IP_PROTO_P]==IP_PROTO_ICMP_V &&
 8006b30:	10803fcc 	andi	r2,r2,255
 8006b34:	10000c1e 	bne	r2,zero,8006b68 <_ZN9EtherCard24packetLoopIcmpCheckReplyEPKh+0x70>
           gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREPLY_V &&
           gPB[ICMP_DATA_P]== PINGPATTERN &&
 8006b38:	008200b4 	movhi	r2,2050
 8006b3c:	10afa004 	addi	r2,r2,-16768
 8006b40:	10800a83 	ldbu	r2,42(r2)
    icmp_cb = callback;
}

uint8_t EtherCard::packetLoopIcmpCheckReply (const uint8_t *ip_monitoredhost) {
    return gPB[IP_PROTO_P]==IP_PROTO_ICMP_V &&
           gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREPLY_V &&
 8006b44:	10803fcc 	andi	r2,r2,255
 8006b48:	10801098 	cmpnei	r2,r2,66
 8006b4c:	1000061e 	bne	r2,zero,8006b68 <_ZN9EtherCard24packetLoopIcmpCheckReplyEPKh+0x70>
           gPB[ICMP_DATA_P]== PINGPATTERN &&
           check_ip_message_is_from(ip_monitoredhost);
 8006b50:	e13fff17 	ldw	r4,-4(fp)
 8006b54:	8004bcc0 	call	8004bcc <_ZL24check_ip_message_is_fromPKh>
}

uint8_t EtherCard::packetLoopIcmpCheckReply (const uint8_t *ip_monitoredhost) {
    return gPB[IP_PROTO_P]==IP_PROTO_ICMP_V &&
           gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREPLY_V &&
           gPB[ICMP_DATA_P]== PINGPATTERN &&
 8006b58:	10803fcc 	andi	r2,r2,255
 8006b5c:	10000226 	beq	r2,zero,8006b68 <_ZN9EtherCard24packetLoopIcmpCheckReplyEPKh+0x70>
 8006b60:	00800044 	movi	r2,1
 8006b64:	00000106 	br	8006b6c <_ZN9EtherCard24packetLoopIcmpCheckReplyEPKh+0x74>
 8006b68:	0005883a 	mov	r2,zero
           check_ip_message_is_from(ip_monitoredhost);
}
 8006b6c:	e037883a 	mov	sp,fp
 8006b70:	dfc00117 	ldw	ra,4(sp)
 8006b74:	df000017 	ldw	fp,0(sp)
 8006b78:	dec00204 	addi	sp,sp,8
 8006b7c:	f800283a 	ret

08006b80 <_ZN9EtherCard6acceptEtt>:

uint16_t EtherCard::accept(const uint16_t port, uint16_t plen) {
 8006b80:	defffb04 	addi	sp,sp,-20
 8006b84:	dfc00415 	stw	ra,16(sp)
 8006b88:	df000315 	stw	fp,12(sp)
 8006b8c:	df000304 	addi	fp,sp,12
 8006b90:	2007883a 	mov	r3,r4
 8006b94:	2805883a 	mov	r2,r5
 8006b98:	e0fffe0d 	sth	r3,-8(fp)
 8006b9c:	e0bfff0d 	sth	r2,-4(fp)
    uint16_t pos;

    if (gPB[TCP_DST_PORT_H_P] == (port >> 8) &&
 8006ba0:	008200b4 	movhi	r2,2050
 8006ba4:	10afa004 	addi	r2,r2,-16768
 8006ba8:	10800903 	ldbu	r2,36(r2)
 8006bac:	10c03fcc 	andi	r3,r2,255
 8006bb0:	e0bffe0b 	ldhu	r2,-8(fp)
 8006bb4:	1005d23a 	srai	r2,r2,8
 8006bb8:	1880321e 	bne	r3,r2,8006c84 <_ZN9EtherCard6acceptEtt+0x104>
            gPB[TCP_DST_PORT_L_P] == ((uint8_t) port))
 8006bbc:	008200b4 	movhi	r2,2050
 8006bc0:	10afa004 	addi	r2,r2,-16768
 8006bc4:	10800943 	ldbu	r2,37(r2)
 8006bc8:	e0fffe0b 	ldhu	r3,-8(fp)
 8006bcc:	1809883a 	mov	r4,r3
}

uint16_t EtherCard::accept(const uint16_t port, uint16_t plen) {
    uint16_t pos;

    if (gPB[TCP_DST_PORT_H_P] == (port >> 8) &&
 8006bd0:	10c03fcc 	andi	r3,r2,255
 8006bd4:	20803fcc 	andi	r2,r4,255
 8006bd8:	18802a1e 	bne	r3,r2,8006c84 <_ZN9EtherCard6acceptEtt+0x104>
            gPB[TCP_DST_PORT_L_P] == ((uint8_t) port))
    {   //Packet targeted at specified port
        if (gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V)
 8006bdc:	008200b4 	movhi	r2,2050
 8006be0:	10afa004 	addi	r2,r2,-16768
 8006be4:	10800bc3 	ldbu	r2,47(r2)
 8006be8:	10803fcc 	andi	r2,r2,255
 8006bec:	1080008c 	andi	r2,r2,2
 8006bf0:	10000226 	beq	r2,zero,8006bfc <_ZN9EtherCard6acceptEtt+0x7c>
            make_tcp_synack_from_syn(); //send SYN+ACK
 8006bf4:	80053f40 	call	80053f4 <_ZL24make_tcp_synack_from_synv>
 8006bf8:	00002206 	br	8006c84 <_ZN9EtherCard6acceptEtt+0x104>
        else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
 8006bfc:	008200b4 	movhi	r2,2050
 8006c00:	10afa004 	addi	r2,r2,-16768
 8006c04:	10800bc3 	ldbu	r2,47(r2)
 8006c08:	10803fcc 	andi	r2,r2,255
 8006c0c:	1080040c 	andi	r2,r2,16
 8006c10:	10001c26 	beq	r2,zero,8006c84 <_ZN9EtherCard6acceptEtt+0x104>
        {   //This is an acknowledgement to our SYN+ACK so let's start processing that payload
            info_data_len = getTcpPayloadLength();
 8006c14:	80055200 	call	8005520 <_ZN9EtherCard19getTcpPayloadLengthEv>
 8006c18:	d0a7288d 	sth	r2,-25438(gp)
            if (info_data_len > 0)
 8006c1c:	d0a7288b 	ldhu	r2,-25438(gp)
 8006c20:	10bfffcc 	andi	r2,r2,65535
 8006c24:	10000e26 	beq	r2,zero,8006c60 <_ZN9EtherCard6acceptEtt+0xe0>
            {   //Got some data
                pos = TCP_DATA_START; // TCP_DATA_START is a formula
 8006c28:	008200b4 	movhi	r2,2050
 8006c2c:	10afa004 	addi	r2,r2,-16768
 8006c30:	10800b83 	ldbu	r2,46(r2)
 8006c34:	10803fcc 	andi	r2,r2,255
 8006c38:	1005d13a 	srai	r2,r2,4
 8006c3c:	1085883a 	add	r2,r2,r2
 8006c40:	1085883a 	add	r2,r2,r2
 8006c44:	10800884 	addi	r2,r2,34
 8006c48:	e0bffd0d 	sth	r2,-12(fp)
                //!@todo no idea what this check pos<=plen-8 does; changed this to pos<=plen as otw. perfectly valid tcp packets are ignored; still if anybody has any idea please leave a comment
                if (pos <= plen)
 8006c4c:	e0bffd0b 	ldhu	r2,-12(fp)
 8006c50:	e0ffff0b 	ldhu	r3,-4(fp)
 8006c54:	18800b36 	bltu	r3,r2,8006c84 <_ZN9EtherCard6acceptEtt+0x104>
                    return pos;
 8006c58:	e0bffd0b 	ldhu	r2,-12(fp)
 8006c5c:	00000a06 	br	8006c88 <_ZN9EtherCard6acceptEtt+0x108>
            }
            else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V)
 8006c60:	008200b4 	movhi	r2,2050
 8006c64:	10afa004 	addi	r2,r2,-16768
 8006c68:	10800bc3 	ldbu	r2,47(r2)
 8006c6c:	10803fcc 	andi	r2,r2,255
 8006c70:	1080004c 	andi	r2,r2,1
 8006c74:	10000326 	beq	r2,zero,8006c84 <_ZN9EtherCard6acceptEtt+0x104>
                make_tcp_ack_from_any(0,0); //No data so close connection
 8006c78:	000b883a 	mov	r5,zero
 8006c7c:	0009883a 	mov	r4,zero
 8006c80:	80055b00 	call	80055b0 <_ZL21make_tcp_ack_from_anysh>
        }
    }
    return 0;
 8006c84:	0005883a 	mov	r2,zero
}
 8006c88:	e037883a 	mov	sp,fp
 8006c8c:	dfc00117 	ldw	ra,4(sp)
 8006c90:	df000017 	ldw	fp,0(sp)
 8006c94:	dec00204 	addi	sp,sp,8
 8006c98:	f800283a 	ret

08006c9c <_ZN9EtherCard10packetLoopEt>:

uint16_t EtherCard::packetLoop (uint16_t plen) {
 8006c9c:	defffb04 	addi	sp,sp,-20
 8006ca0:	dfc00415 	stw	ra,16(sp)
 8006ca4:	df000315 	stw	fp,12(sp)
 8006ca8:	df000304 	addi	fp,sp,12
 8006cac:	2005883a 	mov	r2,r4
 8006cb0:	e0bfff0d 	sth	r2,-4(fp)
    if(using_dhcp) {
        ether.DhcpStateMachine(plen);
    }
#endif

    if (plen==0) {
 8006cb4:	e0bfff0b 	ldhu	r2,-4(fp)
 8006cb8:	1000661e 	bne	r2,zero,8006e54 <_ZN9EtherCard10packetLoopEt+0x1b8>
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if (((waitgwmac & WGW_INITIAL_ARP) || (waitgwmac & WGW_REFRESHING)) &&
 8006cbc:	d0a72803 	ldbu	r2,-25440(gp)
 8006cc0:	10803fcc 	andi	r2,r2,255
 8006cc4:	1080004c 	andi	r2,r2,1
                delaycnt==0 && isLinkUp()) {
 8006cc8:	1000041e 	bne	r2,zero,8006cdc <_ZN9EtherCard10packetLoopEt+0x40>
    }
#endif

    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if (((waitgwmac & WGW_INITIAL_ARP) || (waitgwmac & WGW_REFRESHING)) &&
 8006ccc:	d0a72803 	ldbu	r2,-25440(gp)
 8006cd0:	10803fcc 	andi	r2,r2,255
 8006cd4:	1080010c 	andi	r2,r2,4
 8006cd8:	10000826 	beq	r2,zero,8006cfc <_ZN9EtherCard10packetLoopEt+0x60>
                delaycnt==0 && isLinkUp()) {
 8006cdc:	d0a70c0b 	ldhu	r2,-25552(gp)
    }
#endif

    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if (((waitgwmac & WGW_INITIAL_ARP) || (waitgwmac & WGW_REFRESHING)) &&
 8006ce0:	10bfffcc 	andi	r2,r2,65535
 8006ce4:	1000051e 	bne	r2,zero,8006cfc <_ZN9EtherCard10packetLoopEt+0x60>
                delaycnt==0 && isLinkUp()) {
 8006ce8:	800433c0 	call	800433c <_ZN8ENC28J608isLinkUpEv>
 8006cec:	10803fcc 	andi	r2,r2,255
 8006cf0:	10000226 	beq	r2,zero,8006cfc <_ZN9EtherCard10packetLoopEt+0x60>
 8006cf4:	00800044 	movi	r2,1
 8006cf8:	00000106 	br	8006d00 <_ZN9EtherCard10packetLoopEt+0x64>
 8006cfc:	0005883a 	mov	r2,zero
    }
#endif

    if (plen==0) {
        //Check every 65536 (no-packet) cycles whether we need to retry ARP request for gateway
        if (((waitgwmac & WGW_INITIAL_ARP) || (waitgwmac & WGW_REFRESHING)) &&
 8006d00:	10803fcc 	andi	r2,r2,255
 8006d04:	10000526 	beq	r2,zero,8006d1c <_ZN9EtherCard10packetLoopEt+0x80>
                delaycnt==0 && isLinkUp()) {
            client_arp_whohas(gwip);
 8006d08:	d1270744 	addi	r4,gp,-25571
 8006d0c:	800622c0 	call	800622c <_ZL17client_arp_whohasPh>
            waitgwmac |= WGW_ACCEPT_ARP_REPLY;
 8006d10:	d0a72803 	ldbu	r2,-25440(gp)
 8006d14:	10800214 	ori	r2,r2,8
 8006d18:	d0a72805 	stb	r2,-25440(gp)
        }
        delaycnt++;
 8006d1c:	d0a70c0b 	ldhu	r2,-25552(gp)
 8006d20:	10800044 	addi	r2,r2,1
 8006d24:	d0a70c0d 	sth	r2,-25552(gp)

#if ETHERCARD_TCPCLIENT
        //Initiate TCP/IP session if pending
        if (tcp_client_state==TCP_STATE_SENDSYN && (waitgwmac & WGW_HAVE_GW_MAC)) { // send a syn
 8006d28:	d0a71943 	ldbu	r2,-25499(gp)
 8006d2c:	10803fcc 	andi	r2,r2,255
 8006d30:	10800058 	cmpnei	r2,r2,1
 8006d34:	1000191e 	bne	r2,zero,8006d9c <_ZN9EtherCard10packetLoopEt+0x100>
 8006d38:	d0a72803 	ldbu	r2,-25440(gp)
 8006d3c:	10803fcc 	andi	r2,r2,255
 8006d40:	1080008c 	andi	r2,r2,2
 8006d44:	10001526 	beq	r2,zero,8006d9c <_ZN9EtherCard10packetLoopEt+0x100>
            tcp_client_state = TCP_STATE_SYNSENT;
 8006d48:	00800084 	movi	r2,2
 8006d4c:	d0a71945 	stb	r2,-25499(gp)
            tcpclient_src_port_l++; // allocate a new port
 8006d50:	d0a00503 	ldbu	r2,-32748(gp)
 8006d54:	10800044 	addi	r2,r2,1
 8006d58:	d0a00505 	stb	r2,-32748(gp)
            client_syn(((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port_h,tcp_client_port_l);
 8006d5c:	d0a71903 	ldbu	r2,-25500(gp)
 8006d60:	10803fcc 	andi	r2,r2,255
 8006d64:	1004917a 	slli	r2,r2,5
 8006d68:	1007883a 	mov	r3,r2
 8006d6c:	d0a00503 	ldbu	r2,-32748(gp)
 8006d70:	108007cc 	andi	r2,r2,31
 8006d74:	1884b03a 	or	r2,r3,r2
 8006d78:	10803fcc 	andi	r2,r2,255
 8006d7c:	d0e71983 	ldbu	r3,-25498(gp)
 8006d80:	18c03fcc 	andi	r3,r3,255
 8006d84:	d12719c3 	ldbu	r4,-25497(gp)
 8006d88:	21003fcc 	andi	r4,r4,255
 8006d8c:	200d883a 	mov	r6,r4
 8006d90:	180b883a 	mov	r5,r3
 8006d94:	1009883a 	mov	r4,r2
 8006d98:	80064ac0 	call	80064ac <_ZL10client_synhhh>
        }
#endif

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, dnsip) && !has_dns_mac && !waiting_for_dns_mac) {
 8006d9c:	d1670944 	addi	r5,gp,-25563
 8006da0:	d1270444 	addi	r4,gp,-25583
 8006da4:	8004c100 	call	8004c10 <_ZL6is_lanPKhS0_>
 8006da8:	10803fcc 	andi	r2,r2,255
 8006dac:	10000a26 	beq	r2,zero,8006dd8 <_ZN9EtherCard10packetLoopEt+0x13c>
 8006db0:	d0a725c3 	ldbu	r2,-25449(gp)
 8006db4:	1080005c 	xori	r2,r2,1
 8006db8:	10803fcc 	andi	r2,r2,255
 8006dbc:	10000626 	beq	r2,zero,8006dd8 <_ZN9EtherCard10packetLoopEt+0x13c>
 8006dc0:	d0a72583 	ldbu	r2,-25450(gp)
 8006dc4:	1080005c 	xori	r2,r2,1
 8006dc8:	10803fcc 	andi	r2,r2,255
 8006dcc:	10000226 	beq	r2,zero,8006dd8 <_ZN9EtherCard10packetLoopEt+0x13c>
 8006dd0:	00800044 	movi	r2,1
 8006dd4:	00000106 	br	8006ddc <_ZN9EtherCard10packetLoopEt+0x140>
 8006dd8:	0005883a 	mov	r2,zero
 8006ddc:	10803fcc 	andi	r2,r2,255
 8006de0:	10000426 	beq	r2,zero,8006df4 <_ZN9EtherCard10packetLoopEt+0x158>
            client_arp_whohas(dnsip);
 8006de4:	d1270944 	addi	r4,gp,-25563
 8006de8:	800622c0 	call	800622c <_ZL17client_arp_whohasPh>
            waiting_for_dns_mac = true;
 8006dec:	00800044 	movi	r2,1
 8006df0:	d0a72585 	stb	r2,-25450(gp)
        }

        //!@todo this is trying to find mac only once. Need some timeout to make another call if first one doesn't succeed.
        if(is_lan(myip, hisip) && !has_dest_mac && !waiting_for_dest_mac) {
 8006df4:	d1670a44 	addi	r5,gp,-25559
 8006df8:	d1270444 	addi	r4,gp,-25583
 8006dfc:	8004c100 	call	8004c10 <_ZL6is_lanPKhS0_>
 8006e00:	10803fcc 	andi	r2,r2,255
 8006e04:	10000a26 	beq	r2,zero,8006e30 <_ZN9EtherCard10packetLoopEt+0x194>
 8006e08:	d0a72643 	ldbu	r2,-25447(gp)
 8006e0c:	1080005c 	xori	r2,r2,1
 8006e10:	10803fcc 	andi	r2,r2,255
 8006e14:	10000626 	beq	r2,zero,8006e30 <_ZN9EtherCard10packetLoopEt+0x194>
 8006e18:	d0a72603 	ldbu	r2,-25448(gp)
 8006e1c:	1080005c 	xori	r2,r2,1
 8006e20:	10803fcc 	andi	r2,r2,255
 8006e24:	10000226 	beq	r2,zero,8006e30 <_ZN9EtherCard10packetLoopEt+0x194>
 8006e28:	00800044 	movi	r2,1
 8006e2c:	00000106 	br	8006e34 <_ZN9EtherCard10packetLoopEt+0x198>
 8006e30:	0005883a 	mov	r2,zero
 8006e34:	10803fcc 	andi	r2,r2,255
 8006e38:	10000426 	beq	r2,zero,8006e4c <_ZN9EtherCard10packetLoopEt+0x1b0>
            client_arp_whohas(hisip);
 8006e3c:	d1270a44 	addi	r4,gp,-25559
 8006e40:	800622c0 	call	800622c <_ZL17client_arp_whohasPh>
            waiting_for_dest_mac = true;
 8006e44:	00800044 	movi	r2,1
 8006e48:	d0a72605 	stb	r2,-25448(gp)
        }

        return 0;
 8006e4c:	0005883a 	mov	r2,zero
 8006e50:	00016906 	br	80073f8 <_ZN9EtherCard10packetLoopEt+0x75c>
    }

    if (eth_type_is_arp_and_my_ip(plen))
 8006e54:	e0bfff0b 	ldhu	r2,-4(fp)
 8006e58:	1009883a 	mov	r4,r2
 8006e5c:	8004ccc0 	call	8004ccc <_ZL25eth_type_is_arp_and_my_ipt>
 8006e60:	10803fcc 	andi	r2,r2,255
 8006e64:	1004c03a 	cmpne	r2,r2,zero
 8006e68:	10803fcc 	andi	r2,r2,255
 8006e6c:	10004726 	beq	r2,zero,8006f8c <_ZN9EtherCard10packetLoopEt+0x2f0>
    {   //Service ARP request
        if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
 8006e70:	008200b4 	movhi	r2,2050
 8006e74:	10afa004 	addi	r2,r2,-16768
 8006e78:	10800543 	ldbu	r2,21(r2)
 8006e7c:	10803fcc 	andi	r2,r2,255
 8006e80:	10800058 	cmpnei	r2,r2,1
 8006e84:	1000011e 	bne	r2,zero,8006e8c <_ZN9EtherCard10packetLoopEt+0x1f0>
            make_arp_answer_from_request();
 8006e88:	80051080 	call	8005108 <_ZL28make_arp_answer_from_requestv>
        if ((waitgwmac & WGW_ACCEPT_ARP_REPLY) && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_mac(gwip, gwmacaddr))
 8006e8c:	d0a72803 	ldbu	r2,-25440(gp)
 8006e90:	10803fcc 	andi	r2,r2,255
 8006e94:	1080020c 	andi	r2,r2,8
 8006e98:	10000d26 	beq	r2,zero,8006ed0 <_ZN9EtherCard10packetLoopEt+0x234>
 8006e9c:	008200b4 	movhi	r2,2050
 8006ea0:	10afa004 	addi	r2,r2,-16768
 8006ea4:	10800543 	ldbu	r2,21(r2)
 8006ea8:	10803fcc 	andi	r2,r2,255
 8006eac:	10800098 	cmpnei	r2,r2,2
 8006eb0:	1000071e 	bne	r2,zero,8006ed0 <_ZN9EtherCard10packetLoopEt+0x234>
 8006eb4:	d1672684 	addi	r5,gp,-25446
 8006eb8:	d1270744 	addi	r4,gp,-25571
 8006ebc:	80063800 	call	8006380 <_ZL16client_store_macPhS_>
 8006ec0:	10803fcc 	andi	r2,r2,255
 8006ec4:	10000226 	beq	r2,zero,8006ed0 <_ZN9EtherCard10packetLoopEt+0x234>
 8006ec8:	00800044 	movi	r2,1
 8006ecc:	00000106 	br	8006ed4 <_ZN9EtherCard10packetLoopEt+0x238>
 8006ed0:	0005883a 	mov	r2,zero
 8006ed4:	10803fcc 	andi	r2,r2,255
 8006ed8:	10000226 	beq	r2,zero,8006ee4 <_ZN9EtherCard10packetLoopEt+0x248>
            waitgwmac = WGW_HAVE_GW_MAC;
 8006edc:	00800084 	movi	r2,2
 8006ee0:	d0a72805 	stb	r2,-25440(gp)
        if (!has_dns_mac && waiting_for_dns_mac && client_store_mac(dnsip, destmacaddr)) {
 8006ee4:	d0a725c3 	ldbu	r2,-25449(gp)
 8006ee8:	1080005c 	xori	r2,r2,1
 8006eec:	10803fcc 	andi	r2,r2,255
 8006ef0:	10000a26 	beq	r2,zero,8006f1c <_ZN9EtherCard10packetLoopEt+0x280>
 8006ef4:	d0a72583 	ldbu	r2,-25450(gp)
 8006ef8:	10803fcc 	andi	r2,r2,255
 8006efc:	10000726 	beq	r2,zero,8006f1c <_ZN9EtherCard10packetLoopEt+0x280>
 8006f00:	d1672404 	addi	r5,gp,-25456
 8006f04:	d1270944 	addi	r4,gp,-25563
 8006f08:	80063800 	call	8006380 <_ZL16client_store_macPhS_>
 8006f0c:	10803fcc 	andi	r2,r2,255
 8006f10:	10000226 	beq	r2,zero,8006f1c <_ZN9EtherCard10packetLoopEt+0x280>
 8006f14:	00800044 	movi	r2,1
 8006f18:	00000106 	br	8006f20 <_ZN9EtherCard10packetLoopEt+0x284>
 8006f1c:	0005883a 	mov	r2,zero
 8006f20:	10803fcc 	andi	r2,r2,255
 8006f24:	10000326 	beq	r2,zero,8006f34 <_ZN9EtherCard10packetLoopEt+0x298>
            has_dns_mac = true;
 8006f28:	00800044 	movi	r2,1
 8006f2c:	d0a725c5 	stb	r2,-25449(gp)
            waiting_for_dns_mac = false;
 8006f30:	d0272585 	stb	zero,-25450(gp)
        }
        if (!has_dest_mac && waiting_for_dest_mac && client_store_mac(hisip, destmacaddr)) {
 8006f34:	d0a72643 	ldbu	r2,-25447(gp)
 8006f38:	1080005c 	xori	r2,r2,1
 8006f3c:	10803fcc 	andi	r2,r2,255
 8006f40:	10000a26 	beq	r2,zero,8006f6c <_ZN9EtherCard10packetLoopEt+0x2d0>
 8006f44:	d0a72603 	ldbu	r2,-25448(gp)
 8006f48:	10803fcc 	andi	r2,r2,255
 8006f4c:	10000726 	beq	r2,zero,8006f6c <_ZN9EtherCard10packetLoopEt+0x2d0>
 8006f50:	d1672404 	addi	r5,gp,-25456
 8006f54:	d1270a44 	addi	r4,gp,-25559
 8006f58:	80063800 	call	8006380 <_ZL16client_store_macPhS_>
 8006f5c:	10803fcc 	andi	r2,r2,255
 8006f60:	10000226 	beq	r2,zero,8006f6c <_ZN9EtherCard10packetLoopEt+0x2d0>
 8006f64:	00800044 	movi	r2,1
 8006f68:	00000106 	br	8006f70 <_ZN9EtherCard10packetLoopEt+0x2d4>
 8006f6c:	0005883a 	mov	r2,zero
 8006f70:	10803fcc 	andi	r2,r2,255
 8006f74:	10000326 	beq	r2,zero,8006f84 <_ZN9EtherCard10packetLoopEt+0x2e8>
            has_dest_mac = true;
 8006f78:	00800044 	movi	r2,1
 8006f7c:	d0a72645 	stb	r2,-25447(gp)
            waiting_for_dest_mac = false;
 8006f80:	d0272605 	stb	zero,-25448(gp)
        }
        return 0;
 8006f84:	0005883a 	mov	r2,zero
 8006f88:	00011b06 	br	80073f8 <_ZN9EtherCard10packetLoopEt+0x75c>
    }

    if (eth_type_is_ip_and_my_ip(plen)==0)
 8006f8c:	e0bfff0b 	ldhu	r2,-4(fp)
 8006f90:	1009883a 	mov	r4,r2
 8006f94:	8004d5c0 	call	8004d5c <_ZL24eth_type_is_ip_and_my_ipt>
 8006f98:	10803fcc 	andi	r2,r2,255
 8006f9c:	1005003a 	cmpeq	r2,r2,zero
 8006fa0:	10803fcc 	andi	r2,r2,255
 8006fa4:	10000226 	beq	r2,zero,8006fb0 <_ZN9EtherCard10packetLoopEt+0x314>
    {   //Not IP so ignoring
        //!@todo Add other protocols (and make each optional at compile time)
        return 0;
 8006fa8:	0005883a 	mov	r2,zero
 8006fac:	00011206 	br	80073f8 <_ZN9EtherCard10packetLoopEt+0x75c>
    }

#if ETHERCARD_ICMP
    if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
 8006fb0:	008200b4 	movhi	r2,2050
 8006fb4:	10afa004 	addi	r2,r2,-16768
 8006fb8:	108005c3 	ldbu	r2,23(r2)
 8006fbc:	10803fcc 	andi	r2,r2,255
 8006fc0:	10800058 	cmpnei	r2,r2,1
 8006fc4:	1000111e 	bne	r2,zero,800700c <_ZN9EtherCard10packetLoopEt+0x370>
 8006fc8:	008200b4 	movhi	r2,2050
 8006fcc:	10afa004 	addi	r2,r2,-16768
 8006fd0:	10800883 	ldbu	r2,34(r2)
 8006fd4:	10803fcc 	andi	r2,r2,255
 8006fd8:	10800218 	cmpnei	r2,r2,8
 8006fdc:	10000b1e 	bne	r2,zero,800700c <_ZN9EtherCard10packetLoopEt+0x370>
    {   //Service ICMP echo request (ping)
        if (icmp_cb)
 8006fe0:	d0a72317 	ldw	r2,-25460(gp)
 8006fe4:	10000426 	beq	r2,zero,8006ff8 <_ZN9EtherCard10packetLoopEt+0x35c>
            (*icmp_cb)(&(gPB[IP_SRC_P]));
 8006fe8:	d0a72317 	ldw	r2,-25460(gp)
 8006fec:	010200b4 	movhi	r4,2050
 8006ff0:	212fa684 	addi	r4,r4,-16742
 8006ff4:	103ee83a 	callr	r2
        make_echo_reply_from_request(plen);
 8006ff8:	e0bfff0b 	ldhu	r2,-4(fp)
 8006ffc:	1009883a 	mov	r4,r2
 8007000:	80051d00 	call	80051d0 <_ZL28make_echo_reply_from_requestt>
        return 0;
 8007004:	0005883a 	mov	r2,zero
 8007008:	0000fb06 	br	80073f8 <_ZN9EtherCard10packetLoopEt+0x75c>
    }
#endif
#if ETHERCARD_UDPSERVER
    if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V)
 800700c:	80076880 	call	8007688 <_ZN9EtherCard18udpServerListeningEv>
 8007010:	10803fcc 	andi	r2,r2,255
 8007014:	10000826 	beq	r2,zero,8007038 <_ZN9EtherCard10packetLoopEt+0x39c>
 8007018:	008200b4 	movhi	r2,2050
 800701c:	10afa004 	addi	r2,r2,-16768
 8007020:	108005c3 	ldbu	r2,23(r2)
 8007024:	10803fcc 	andi	r2,r2,255
 8007028:	10800458 	cmpnei	r2,r2,17
 800702c:	1000021e 	bne	r2,zero,8007038 <_ZN9EtherCard10packetLoopEt+0x39c>
 8007030:	00800044 	movi	r2,1
 8007034:	00000106 	br	800703c <_ZN9EtherCard10packetLoopEt+0x3a0>
 8007038:	0005883a 	mov	r2,zero
 800703c:	10803fcc 	andi	r2,r2,255
 8007040:	10000726 	beq	r2,zero,8007060 <_ZN9EtherCard10packetLoopEt+0x3c4>
    {   //Call UDP server handler (callback) if one is defined for this packet
        if(ether.udpServerHasProcessedPacket(plen))
 8007044:	e0bfff0b 	ldhu	r2,-4(fp)
 8007048:	1009883a 	mov	r4,r2
 800704c:	80076b00 	call	80076b0 <_ZN9EtherCard27udpServerHasProcessedPacketEt>
 8007050:	10803fcc 	andi	r2,r2,255
 8007054:	10000226 	beq	r2,zero,8007060 <_ZN9EtherCard10packetLoopEt+0x3c4>
            return 0; //An UDP server handler (callback) has processed this packet
 8007058:	0005883a 	mov	r2,zero
 800705c:	0000e606 	br	80073f8 <_ZN9EtherCard10packetLoopEt+0x75c>
    }
#endif

    if (plen<54 || gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
 8007060:	e0bfff0b 	ldhu	r2,-4(fp)
 8007064:	10800db0 	cmpltui	r2,r2,54
 8007068:	1000061e 	bne	r2,zero,8007084 <_ZN9EtherCard10packetLoopEt+0x3e8>
 800706c:	008200b4 	movhi	r2,2050
 8007070:	10afa004 	addi	r2,r2,-16768
 8007074:	108005c3 	ldbu	r2,23(r2)
 8007078:	10803fcc 	andi	r2,r2,255
 800707c:	108001a0 	cmpeqi	r2,r2,6
 8007080:	1000021e 	bne	r2,zero,800708c <_ZN9EtherCard10packetLoopEt+0x3f0>
        return 0; //from here on we are only interested in TCP-packets; these are longer than 54 bytes
 8007084:	0005883a 	mov	r2,zero
 8007088:	0000db06 	br	80073f8 <_ZN9EtherCard10packetLoopEt+0x75c>

#if ETHERCARD_TCPCLIENT
    if (gPB[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H)
 800708c:	008200b4 	movhi	r2,2050
 8007090:	10afa004 	addi	r2,r2,-16768
 8007094:	10800903 	ldbu	r2,36(r2)
 8007098:	10803fcc 	andi	r2,r2,255
 800709c:	108002d8 	cmpnei	r2,r2,11
 80070a0:	1000cf1e 	bne	r2,zero,80073e0 <_ZN9EtherCard10packetLoopEt+0x744>
    {   //Source port is in range reserved (by EtherCard) for client TCP/IP connections
        if (check_ip_message_is_from(hisip)==0)
 80070a4:	d1270a44 	addi	r4,gp,-25559
 80070a8:	8004bcc0 	call	8004bcc <_ZL24check_ip_message_is_fromPKh>
 80070ac:	10803fcc 	andi	r2,r2,255
 80070b0:	1005003a 	cmpeq	r2,r2,zero
 80070b4:	10803fcc 	andi	r2,r2,255
 80070b8:	10000226 	beq	r2,zero,80070c4 <_ZN9EtherCard10packetLoopEt+0x428>
            return 0; //Not current TCP/IP connection (only handle one at a time)
 80070bc:	0005883a 	mov	r2,zero
 80070c0:	0000cd06 	br	80073f8 <_ZN9EtherCard10packetLoopEt+0x75c>
        if (gPB[TCP_FLAGS_P] & TCP_FLAGS_RST_V)
 80070c4:	008200b4 	movhi	r2,2050
 80070c8:	10afa004 	addi	r2,r2,-16768
 80070cc:	10800bc3 	ldbu	r2,47(r2)
 80070d0:	10803fcc 	andi	r2,r2,255
 80070d4:	1080010c 	andi	r2,r2,4
 80070d8:	10001226 	beq	r2,zero,8007124 <_ZN9EtherCard10packetLoopEt+0x488>
        {   //TCP reset flagged
            if (client_tcp_result_cb)
 80070dc:	d0a71a17 	ldw	r2,-25496(gp)
 80070e0:	10000c26 	beq	r2,zero,8007114 <_ZN9EtherCard10packetLoopEt+0x478>
                (*client_tcp_result_cb)((gPB[TCP_DST_PORT_L_P]>>5)&0x7,3,0,0);
 80070e4:	d0e71a17 	ldw	r3,-25496(gp)
 80070e8:	008200b4 	movhi	r2,2050
 80070ec:	10afa004 	addi	r2,r2,-16768
 80070f0:	10800943 	ldbu	r2,37(r2)
 80070f4:	10803fcc 	andi	r2,r2,255
 80070f8:	1004d17a 	srli	r2,r2,5
 80070fc:	10803fcc 	andi	r2,r2,255
 8007100:	000f883a 	mov	r7,zero
 8007104:	000d883a 	mov	r6,zero
 8007108:	014000c4 	movi	r5,3
 800710c:	1009883a 	mov	r4,r2
 8007110:	183ee83a 	callr	r3
            tcp_client_state = TCP_STATE_CLOSING;
 8007114:	00800144 	movi	r2,5
 8007118:	d0a71945 	stb	r2,-25499(gp)
            return 0;
 800711c:	0005883a 	mov	r2,zero
 8007120:	0000b506 	br	80073f8 <_ZN9EtherCard10packetLoopEt+0x75c>
        }
        len = getTcpPayloadLength();
 8007124:	80055200 	call	8005520 <_ZN9EtherCard19getTcpPayloadLengthEv>
 8007128:	e0bffd0d 	sth	r2,-12(fp)
        if (tcp_client_state==TCP_STATE_SYNSENT)
 800712c:	d0a71943 	ldbu	r2,-25499(gp)
 8007130:	10803fcc 	andi	r2,r2,255
 8007134:	10800098 	cmpnei	r2,r2,2
 8007138:	10003c1e 	bne	r2,zero,800722c <_ZN9EtherCard10packetLoopEt+0x590>
        {   //Waiting for SYN-ACK
            if ((gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) && (gPB[TCP_FLAGS_P] &TCP_FLAGS_ACK_V))
 800713c:	008200b4 	movhi	r2,2050
 8007140:	10afa004 	addi	r2,r2,-16768
 8007144:	10800bc3 	ldbu	r2,47(r2)
 8007148:	10803fcc 	andi	r2,r2,255
 800714c:	1080008c 	andi	r2,r2,2
 8007150:	10002126 	beq	r2,zero,80071d8 <_ZN9EtherCard10packetLoopEt+0x53c>
 8007154:	008200b4 	movhi	r2,2050
 8007158:	10afa004 	addi	r2,r2,-16768
 800715c:	10800bc3 	ldbu	r2,47(r2)
 8007160:	10803fcc 	andi	r2,r2,255
 8007164:	1080040c 	andi	r2,r2,16
 8007168:	10001b26 	beq	r2,zero,80071d8 <_ZN9EtherCard10packetLoopEt+0x53c>
            {   //SYN and ACK flags set so this is an acknowledgement to our SYN
                make_tcp_ack_from_any(0,0);
 800716c:	000b883a 	mov	r5,zero
 8007170:	0009883a 	mov	r4,zero
 8007174:	80055b00 	call	80055b0 <_ZL21make_tcp_ack_from_anysh>
                gPB[TCP_FLAGS_P] = TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V;
 8007178:	008200b4 	movhi	r2,2050
 800717c:	10afa004 	addi	r2,r2,-16768
 8007180:	00c00604 	movi	r3,24
 8007184:	10c00bc5 	stb	r3,47(r2)
                if (client_tcp_datafill_cb)
 8007188:	d0a71b17 	ldw	r2,-25492(gp)
 800718c:	10000b26 	beq	r2,zero,80071bc <_ZN9EtherCard10packetLoopEt+0x520>
                    len = (*client_tcp_datafill_cb)((gPB[TCP_SRC_PORT_L_P]>>5)&0x7);
 8007190:	d0e71b17 	ldw	r3,-25492(gp)
 8007194:	008200b4 	movhi	r2,2050
 8007198:	10afa004 	addi	r2,r2,-16768
 800719c:	108008c3 	ldbu	r2,35(r2)
 80071a0:	10803fcc 	andi	r2,r2,255
 80071a4:	1004d17a 	srli	r2,r2,5
 80071a8:	10803fcc 	andi	r2,r2,255
 80071ac:	1009883a 	mov	r4,r2
 80071b0:	183ee83a 	callr	r3
 80071b4:	e0bffd0d 	sth	r2,-12(fp)
 80071b8:	00000106 	br	80071c0 <_ZN9EtherCard10packetLoopEt+0x524>
                else
                    len = 0;
 80071bc:	e03ffd0d 	sth	zero,-12(fp)
                tcp_client_state = TCP_STATE_ESTABLISHED;
 80071c0:	008000c4 	movi	r2,3
 80071c4:	d0a71945 	stb	r2,-25499(gp)
                make_tcp_ack_with_data_noflags(len);
 80071c8:	e0bffd0b 	ldhu	r2,-12(fp)
 80071cc:	1009883a 	mov	r4,r2
 80071d0:	80056a00 	call	80056a0 <_ZL30make_tcp_ack_with_data_noflagst>
 80071d4:	00001306 	br	8007224 <_ZN9EtherCard10packetLoopEt+0x588>
            }
            else
            {   //Expecting SYN+ACK so reset and resend SYN
                tcp_client_state = TCP_STATE_SENDSYN; // retry
 80071d8:	00800044 	movi	r2,1
 80071dc:	d0a71945 	stb	r2,-25499(gp)
                len++;
 80071e0:	e0bffd0b 	ldhu	r2,-12(fp)
 80071e4:	10800044 	addi	r2,r2,1
 80071e8:	e0bffd0d 	sth	r2,-12(fp)
                if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
 80071ec:	008200b4 	movhi	r2,2050
 80071f0:	10afa004 	addi	r2,r2,-16768
 80071f4:	10800bc3 	ldbu	r2,47(r2)
 80071f8:	10803fcc 	andi	r2,r2,255
 80071fc:	1080040c 	andi	r2,r2,16
 8007200:	10000126 	beq	r2,zero,8007208 <_ZN9EtherCard10packetLoopEt+0x56c>
                    len = 0;
 8007204:	e03ffd0d 	sth	zero,-12(fp)
                make_tcp_ack_from_any(len,TCP_FLAGS_RST_V);
 8007208:	e0bffd0b 	ldhu	r2,-12(fp)
 800720c:	10bfffcc 	andi	r2,r2,65535
 8007210:	10a0001c 	xori	r2,r2,32768
 8007214:	10a00004 	addi	r2,r2,-32768
 8007218:	01400104 	movi	r5,4
 800721c:	1009883a 	mov	r4,r2
 8007220:	80055b00 	call	80055b0 <_ZL21make_tcp_ack_from_anysh>
            }
            return 0;
 8007224:	0005883a 	mov	r2,zero
 8007228:	00007306 	br	80073f8 <_ZN9EtherCard10packetLoopEt+0x75c>
        }
        if (tcp_client_state==TCP_STATE_ESTABLISHED && len>0)
 800722c:	d0a71943 	ldbu	r2,-25499(gp)
 8007230:	10803fcc 	andi	r2,r2,255
 8007234:	108000d8 	cmpnei	r2,r2,3
 8007238:	1000431e 	bne	r2,zero,8007348 <_ZN9EtherCard10packetLoopEt+0x6ac>
 800723c:	e0bffd0b 	ldhu	r2,-12(fp)
 8007240:	10004126 	beq	r2,zero,8007348 <_ZN9EtherCard10packetLoopEt+0x6ac>
        {   //TCP connection established so read data
            if (client_tcp_result_cb) {
 8007244:	d0a71a17 	ldw	r2,-25496(gp)
 8007248:	10003f26 	beq	r2,zero,8007348 <_ZN9EtherCard10packetLoopEt+0x6ac>
                uint16_t tcpstart = TCP_DATA_START; // TCP_DATA_START is a formula
 800724c:	008200b4 	movhi	r2,2050
 8007250:	10afa004 	addi	r2,r2,-16768
 8007254:	10800b83 	ldbu	r2,46(r2)
 8007258:	10803fcc 	andi	r2,r2,255
 800725c:	1005d13a 	srai	r2,r2,4
 8007260:	1085883a 	add	r2,r2,r2
 8007264:	1085883a 	add	r2,r2,r2
 8007268:	10800884 	addi	r2,r2,34
 800726c:	e0bffd8d 	sth	r2,-10(fp)
                if (tcpstart>plen-8)
 8007270:	e0bffd8b 	ldhu	r2,-10(fp)
 8007274:	e0ffff0b 	ldhu	r3,-4(fp)
 8007278:	18fffe04 	addi	r3,r3,-8
 800727c:	1880030e 	bge	r3,r2,800728c <_ZN9EtherCard10packetLoopEt+0x5f0>
                    tcpstart = plen-8; // dummy but save
 8007280:	e0bfff0b 	ldhu	r2,-4(fp)
 8007284:	10bffe04 	addi	r2,r2,-8
 8007288:	e0bffd8d 	sth	r2,-10(fp)
                uint16_t save_len = len;
 800728c:	e0bffd0b 	ldhu	r2,-12(fp)
 8007290:	e0bffe0d 	sth	r2,-8(fp)
                if (tcpstart+len>plen)
 8007294:	e0fffd8b 	ldhu	r3,-10(fp)
 8007298:	e0bffd0b 	ldhu	r2,-12(fp)
 800729c:	1885883a 	add	r2,r3,r2
 80072a0:	e0ffff0b 	ldhu	r3,-4(fp)
 80072a4:	1880040e 	bge	r3,r2,80072b8 <_ZN9EtherCard10packetLoopEt+0x61c>
                    save_len = plen-tcpstart;
 80072a8:	e0ffff0b 	ldhu	r3,-4(fp)
 80072ac:	e0bffd8b 	ldhu	r2,-10(fp)
 80072b0:	1885c83a 	sub	r2,r3,r2
 80072b4:	e0bffe0d 	sth	r2,-8(fp)
                (*client_tcp_result_cb)((gPB[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len); //Call TCP handler (callback) function
 80072b8:	d0e71a17 	ldw	r3,-25496(gp)
 80072bc:	008200b4 	movhi	r2,2050
 80072c0:	10afa004 	addi	r2,r2,-16768
 80072c4:	10800943 	ldbu	r2,37(r2)
 80072c8:	10803fcc 	andi	r2,r2,255
 80072cc:	1004d17a 	srli	r2,r2,5
 80072d0:	10803fcc 	andi	r2,r2,255
 80072d4:	e13ffd8b 	ldhu	r4,-10(fp)
 80072d8:	e17ffe0b 	ldhu	r5,-8(fp)
 80072dc:	280f883a 	mov	r7,r5
 80072e0:	200d883a 	mov	r6,r4
 80072e4:	000b883a 	mov	r5,zero
 80072e8:	1009883a 	mov	r4,r2
 80072ec:	183ee83a 	callr	r3

                if(persist_tcp_connection)
 80072f0:	d0a70b83 	ldbu	r2,-25554(gp)
 80072f4:	10803fcc 	andi	r2,r2,255
 80072f8:	10000826 	beq	r2,zero,800731c <_ZN9EtherCard10packetLoopEt+0x680>
                {   //Keep connection alive by sending ACK
                    make_tcp_ack_from_any(len,TCP_FLAGS_PUSH_V);
 80072fc:	e0bffd0b 	ldhu	r2,-12(fp)
 8007300:	10bfffcc 	andi	r2,r2,65535
 8007304:	10a0001c 	xori	r2,r2,32768
 8007308:	10a00004 	addi	r2,r2,-32768
 800730c:	01400204 	movi	r5,8
 8007310:	1009883a 	mov	r4,r2
 8007314:	80055b00 	call	80055b0 <_ZL21make_tcp_ack_from_anysh>
 8007318:	00000906 	br	8007340 <_ZN9EtherCard10packetLoopEt+0x6a4>
                }
                else
                {   //Close connection
                    make_tcp_ack_from_any(len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
 800731c:	e0bffd0b 	ldhu	r2,-12(fp)
 8007320:	10bfffcc 	andi	r2,r2,65535
 8007324:	10a0001c 	xori	r2,r2,32768
 8007328:	10a00004 	addi	r2,r2,-32768
 800732c:	01400244 	movi	r5,9
 8007330:	1009883a 	mov	r4,r2
 8007334:	80055b00 	call	80055b0 <_ZL21make_tcp_ack_from_anysh>
                    tcp_client_state = TCP_STATE_CLOSED;
 8007338:	00800184 	movi	r2,6
 800733c:	d0a71945 	stb	r2,-25499(gp)
                }
                return 0;
 8007340:	0005883a 	mov	r2,zero
 8007344:	00002c06 	br	80073f8 <_ZN9EtherCard10packetLoopEt+0x75c>
            }
        }
        if (tcp_client_state != TCP_STATE_CLOSING)
 8007348:	d0a71943 	ldbu	r2,-25499(gp)
 800734c:	10803fcc 	andi	r2,r2,255
 8007350:	10800160 	cmpeqi	r2,r2,5
 8007354:	1000201e 	bne	r2,zero,80073d8 <_ZN9EtherCard10packetLoopEt+0x73c>
        {   //
            if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V) {
 8007358:	008200b4 	movhi	r2,2050
 800735c:	10afa004 	addi	r2,r2,-16768
 8007360:	10800bc3 	ldbu	r2,47(r2)
 8007364:	10803fcc 	andi	r2,r2,255
 8007368:	1080004c 	andi	r2,r2,1
 800736c:	10001126 	beq	r2,zero,80073b4 <_ZN9EtherCard10packetLoopEt+0x718>
                if(tcp_client_state == TCP_STATE_ESTABLISHED) {
 8007370:	d0a71943 	ldbu	r2,-25499(gp)
 8007374:	10803fcc 	andi	r2,r2,255
 8007378:	108000d8 	cmpnei	r2,r2,3
 800737c:	1000021e 	bne	r2,zero,8007388 <_ZN9EtherCard10packetLoopEt+0x6ec>
                    return 0; // In some instances FIN is received *before* DATA.  If that is the case, we just return here and keep looking for the data packet
 8007380:	0005883a 	mov	r2,zero
 8007384:	00001c06 	br	80073f8 <_ZN9EtherCard10packetLoopEt+0x75c>
                }
                make_tcp_ack_from_any(len+1,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
 8007388:	e0bffd0b 	ldhu	r2,-12(fp)
 800738c:	10800044 	addi	r2,r2,1
 8007390:	10bfffcc 	andi	r2,r2,65535
 8007394:	10a0001c 	xori	r2,r2,32768
 8007398:	10a00004 	addi	r2,r2,-32768
 800739c:	01400244 	movi	r5,9
 80073a0:	1009883a 	mov	r4,r2
 80073a4:	80055b00 	call	80055b0 <_ZL21make_tcp_ack_from_anysh>
                tcp_client_state = TCP_STATE_CLOSED; // connection terminated
 80073a8:	00800184 	movi	r2,6
 80073ac:	d0a71945 	stb	r2,-25499(gp)
 80073b0:	00000906 	br	80073d8 <_ZN9EtherCard10packetLoopEt+0x73c>
            } else if (len>0) {
 80073b4:	e0bffd0b 	ldhu	r2,-12(fp)
 80073b8:	10000726 	beq	r2,zero,80073d8 <_ZN9EtherCard10packetLoopEt+0x73c>
                make_tcp_ack_from_any(len,0);
 80073bc:	e0bffd0b 	ldhu	r2,-12(fp)
 80073c0:	10bfffcc 	andi	r2,r2,65535
 80073c4:	10a0001c 	xori	r2,r2,32768
 80073c8:	10a00004 	addi	r2,r2,-32768
 80073cc:	000b883a 	mov	r5,zero
 80073d0:	1009883a 	mov	r4,r2
 80073d4:	80055b00 	call	80055b0 <_ZL21make_tcp_ack_from_anysh>
            }
        }
        return 0;
 80073d8:	0005883a 	mov	r2,zero
 80073dc:	00000606 	br	80073f8 <_ZN9EtherCard10packetLoopEt+0x75c>
    }
#endif

#if ETHERCARD_TCPSERVER
    //If we are here then this is a TCP/IP packet targeted at us and not related to our client connection so accept
    return accept(hisport, plen);
 80073e0:	d0a0028b 	ldhu	r2,-32758(gp)
 80073e4:	10bfffcc 	andi	r2,r2,65535
 80073e8:	e0ffff0b 	ldhu	r3,-4(fp)
 80073ec:	180b883a 	mov	r5,r3
 80073f0:	1009883a 	mov	r4,r2
 80073f4:	8006b800 	call	8006b80 <_ZN9EtherCard6acceptEtt>
#endif
}
 80073f8:	e037883a 	mov	sp,fp
 80073fc:	dfc00117 	ldw	ra,4(sp)
 8007400:	df000017 	ldw	fp,0(sp)
 8007404:	dec00204 	addi	sp,sp,8
 8007408:	f800283a 	ret

0800740c <_ZN9EtherCard20persistTcpConnectionEb>:

void EtherCard::persistTcpConnection(bool persist) {
 800740c:	defffe04 	addi	sp,sp,-8
 8007410:	df000115 	stw	fp,4(sp)
 8007414:	df000104 	addi	fp,sp,4
 8007418:	2005883a 	mov	r2,r4
 800741c:	e0bfff05 	stb	r2,-4(fp)
    persist_tcp_connection = persist;
 8007420:	e0bfff03 	ldbu	r2,-4(fp)
 8007424:	d0a70b85 	stb	r2,-25554(gp)
}
 8007428:	0001883a 	nop
 800742c:	e037883a 	mov	sp,fp
 8007430:	df000017 	ldw	fp,0(sp)
 8007434:	dec00104 	addi	sp,sp,4
 8007438:	f800283a 	ret

0800743c <_ZN9EtherCard21udpServerListenOnPortEPFvtPhtPKctEt>:
} UdpServerListener;

UdpServerListener listeners[UDPSERVER_MAXLISTENERS];
byte numListeners = 0;

void EtherCard::udpServerListenOnPort(UdpServerCallback callback, uint16_t port) {
 800743c:	defffd04 	addi	sp,sp,-12
 8007440:	df000215 	stw	fp,8(sp)
 8007444:	df000204 	addi	fp,sp,8
 8007448:	e13ffe15 	stw	r4,-8(fp)
 800744c:	2805883a 	mov	r2,r5
 8007450:	e0bfff0d 	sth	r2,-4(fp)
    if(numListeners < UDPSERVER_MAXLISTENERS)
 8007454:	d0a72b03 	ldbu	r2,-25428(gp)
 8007458:	10803fcc 	andi	r2,r2,255
 800745c:	10800228 	cmpgeui	r2,r2,8
 8007460:	1000191e 	bne	r2,zero,80074c8 <_ZN9EtherCard21udpServerListenOnPortEPFvtPhtPKctEt+0x8c>
    {
        listeners[numListeners] = (UdpServerListener) {
            callback, port, true
        };
 8007464:	d0a72b03 	ldbu	r2,-25428(gp)
 8007468:	10c03fcc 	andi	r3,r2,255
 800746c:	008200b4 	movhi	r2,2050
 8007470:	10af9004 	addi	r2,r2,-16832
 8007474:	180890fa 	slli	r4,r3,3
 8007478:	1105883a 	add	r2,r2,r4
 800747c:	e13ffe17 	ldw	r4,-8(fp)
 8007480:	11000015 	stw	r4,0(r2)
 8007484:	008200b4 	movhi	r2,2050
 8007488:	10af9004 	addi	r2,r2,-16832
 800748c:	180890fa 	slli	r4,r3,3
 8007490:	1105883a 	add	r2,r2,r4
 8007494:	10800104 	addi	r2,r2,4
 8007498:	e13fff0b 	ldhu	r4,-4(fp)
 800749c:	1100000d 	sth	r4,0(r2)
 80074a0:	008200b4 	movhi	r2,2050
 80074a4:	10af9004 	addi	r2,r2,-16832
 80074a8:	180690fa 	slli	r3,r3,3
 80074ac:	10c5883a 	add	r2,r2,r3
 80074b0:	10800184 	addi	r2,r2,6
 80074b4:	00c00044 	movi	r3,1
 80074b8:	10c00005 	stb	r3,0(r2)
        numListeners++;
 80074bc:	d0a72b03 	ldbu	r2,-25428(gp)
 80074c0:	10800044 	addi	r2,r2,1
 80074c4:	d0a72b05 	stb	r2,-25428(gp)
    }
}
 80074c8:	0001883a 	nop
 80074cc:	e037883a 	mov	sp,fp
 80074d0:	df000017 	ldw	fp,0(sp)
 80074d4:	dec00104 	addi	sp,sp,4
 80074d8:	f800283a 	ret

080074dc <_ZN9EtherCard26udpServerPauseListenOnPortEt>:

void EtherCard::udpServerPauseListenOnPort(uint16_t port) {
 80074dc:	defffd04 	addi	sp,sp,-12
 80074e0:	df000215 	stw	fp,8(sp)
 80074e4:	df000204 	addi	fp,sp,8
 80074e8:	2005883a 	mov	r2,r4
 80074ec:	e0bfff0d 	sth	r2,-4(fp)
    for(int i = 0; i < numListeners; i++)
 80074f0:	e03ffe15 	stw	zero,-8(fp)
 80074f4:	d0a72b03 	ldbu	r2,-25428(gp)
 80074f8:	10803fcc 	andi	r2,r2,255
 80074fc:	e0fffe17 	ldw	r3,-8(fp)
 8007500:	1880260e 	bge	r3,r2,800759c <_ZN9EtherCard26udpServerPauseListenOnPortEt+0xc0>
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((byte) listeners[i].port)) {
 8007504:	008200b4 	movhi	r2,2050
 8007508:	10afa004 	addi	r2,r2,-16768
 800750c:	10800903 	ldbu	r2,36(r2)
 8007510:	10c03fcc 	andi	r3,r2,255
 8007514:	008200b4 	movhi	r2,2050
 8007518:	10af9004 	addi	r2,r2,-16832
 800751c:	e13ffe17 	ldw	r4,-8(fp)
 8007520:	200890fa 	slli	r4,r4,3
 8007524:	1105883a 	add	r2,r2,r4
 8007528:	10800104 	addi	r2,r2,4
 800752c:	1080000b 	ldhu	r2,0(r2)
 8007530:	10bfffcc 	andi	r2,r2,65535
 8007534:	1005d23a 	srai	r2,r2,8
 8007538:	1880141e 	bne	r3,r2,800758c <_ZN9EtherCard26udpServerPauseListenOnPortEt+0xb0>
 800753c:	008200b4 	movhi	r2,2050
 8007540:	10afa004 	addi	r2,r2,-16768
 8007544:	11000943 	ldbu	r4,37(r2)
 8007548:	008200b4 	movhi	r2,2050
 800754c:	10af9004 	addi	r2,r2,-16832
 8007550:	e0fffe17 	ldw	r3,-8(fp)
 8007554:	180690fa 	slli	r3,r3,3
 8007558:	10c5883a 	add	r2,r2,r3
 800755c:	10800104 	addi	r2,r2,4
 8007560:	1080000b 	ldhu	r2,0(r2)
 8007564:	20c03fcc 	andi	r3,r4,255
 8007568:	10803fcc 	andi	r2,r2,255
 800756c:	1880071e 	bne	r3,r2,800758c <_ZN9EtherCard26udpServerPauseListenOnPortEt+0xb0>
            listeners[i].listening = false;
 8007570:	008200b4 	movhi	r2,2050
 8007574:	10af9004 	addi	r2,r2,-16832
 8007578:	e0fffe17 	ldw	r3,-8(fp)
 800757c:	180690fa 	slli	r3,r3,3
 8007580:	10c5883a 	add	r2,r2,r3
 8007584:	10800184 	addi	r2,r2,6
 8007588:	10000005 	stb	zero,0(r2)
        numListeners++;
    }
}

void EtherCard::udpServerPauseListenOnPort(uint16_t port) {
    for(int i = 0; i < numListeners; i++)
 800758c:	e0bffe17 	ldw	r2,-8(fp)
 8007590:	10800044 	addi	r2,r2,1
 8007594:	e0bffe15 	stw	r2,-8(fp)
 8007598:	003fd606 	br	80074f4 <_ZN9EtherCard26udpServerPauseListenOnPortEt+0x18>
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((byte) listeners[i].port)) {
            listeners[i].listening = false;
        }
    }
}
 800759c:	0001883a 	nop
 80075a0:	e037883a 	mov	sp,fp
 80075a4:	df000017 	ldw	fp,0(sp)
 80075a8:	dec00104 	addi	sp,sp,4
 80075ac:	f800283a 	ret

080075b0 <_ZN9EtherCard27udpServerResumeListenOnPortEt>:

void EtherCard::udpServerResumeListenOnPort(uint16_t port) {
 80075b0:	defffd04 	addi	sp,sp,-12
 80075b4:	df000215 	stw	fp,8(sp)
 80075b8:	df000204 	addi	fp,sp,8
 80075bc:	2005883a 	mov	r2,r4
 80075c0:	e0bfff0d 	sth	r2,-4(fp)
    for(int i = 0; i < numListeners; i++)
 80075c4:	e03ffe15 	stw	zero,-8(fp)
 80075c8:	d0a72b03 	ldbu	r2,-25428(gp)
 80075cc:	10803fcc 	andi	r2,r2,255
 80075d0:	e0fffe17 	ldw	r3,-8(fp)
 80075d4:	1880270e 	bge	r3,r2,8007674 <_ZN9EtherCard27udpServerResumeListenOnPortEt+0xc4>
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((byte) listeners[i].port)) {
 80075d8:	008200b4 	movhi	r2,2050
 80075dc:	10afa004 	addi	r2,r2,-16768
 80075e0:	10800903 	ldbu	r2,36(r2)
 80075e4:	10c03fcc 	andi	r3,r2,255
 80075e8:	008200b4 	movhi	r2,2050
 80075ec:	10af9004 	addi	r2,r2,-16832
 80075f0:	e13ffe17 	ldw	r4,-8(fp)
 80075f4:	200890fa 	slli	r4,r4,3
 80075f8:	1105883a 	add	r2,r2,r4
 80075fc:	10800104 	addi	r2,r2,4
 8007600:	1080000b 	ldhu	r2,0(r2)
 8007604:	10bfffcc 	andi	r2,r2,65535
 8007608:	1005d23a 	srai	r2,r2,8
 800760c:	1880151e 	bne	r3,r2,8007664 <_ZN9EtherCard27udpServerResumeListenOnPortEt+0xb4>
 8007610:	008200b4 	movhi	r2,2050
 8007614:	10afa004 	addi	r2,r2,-16768
 8007618:	11000943 	ldbu	r4,37(r2)
 800761c:	008200b4 	movhi	r2,2050
 8007620:	10af9004 	addi	r2,r2,-16832
 8007624:	e0fffe17 	ldw	r3,-8(fp)
 8007628:	180690fa 	slli	r3,r3,3
 800762c:	10c5883a 	add	r2,r2,r3
 8007630:	10800104 	addi	r2,r2,4
 8007634:	1080000b 	ldhu	r2,0(r2)
 8007638:	20c03fcc 	andi	r3,r4,255
 800763c:	10803fcc 	andi	r2,r2,255
 8007640:	1880081e 	bne	r3,r2,8007664 <_ZN9EtherCard27udpServerResumeListenOnPortEt+0xb4>
            listeners[i].listening = true;
 8007644:	008200b4 	movhi	r2,2050
 8007648:	10af9004 	addi	r2,r2,-16832
 800764c:	e0fffe17 	ldw	r3,-8(fp)
 8007650:	180690fa 	slli	r3,r3,3
 8007654:	10c5883a 	add	r2,r2,r3
 8007658:	10800184 	addi	r2,r2,6
 800765c:	00c00044 	movi	r3,1
 8007660:	10c00005 	stb	r3,0(r2)
        }
    }
}

void EtherCard::udpServerResumeListenOnPort(uint16_t port) {
    for(int i = 0; i < numListeners; i++)
 8007664:	e0bffe17 	ldw	r2,-8(fp)
 8007668:	10800044 	addi	r2,r2,1
 800766c:	e0bffe15 	stw	r2,-8(fp)
 8007670:	003fd506 	br	80075c8 <_ZN9EtherCard27udpServerResumeListenOnPortEt+0x18>
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((byte) listeners[i].port)) {
            listeners[i].listening = true;
        }
    }
}
 8007674:	0001883a 	nop
 8007678:	e037883a 	mov	sp,fp
 800767c:	df000017 	ldw	fp,0(sp)
 8007680:	dec00104 	addi	sp,sp,4
 8007684:	f800283a 	ret

08007688 <_ZN9EtherCard18udpServerListeningEv>:

bool EtherCard::udpServerListening() {
 8007688:	deffff04 	addi	sp,sp,-4
 800768c:	df000015 	stw	fp,0(sp)
 8007690:	d839883a 	mov	fp,sp
    return numListeners > 0;
 8007694:	d0a72b03 	ldbu	r2,-25428(gp)
 8007698:	10803fcc 	andi	r2,r2,255
 800769c:	1004c03a 	cmpne	r2,r2,zero
}
 80076a0:	e037883a 	mov	sp,fp
 80076a4:	df000017 	ldw	fp,0(sp)
 80076a8:	dec00104 	addi	sp,sp,4
 80076ac:	f800283a 	ret

080076b0 <_ZN9EtherCard27udpServerHasProcessedPacketEt>:

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
 80076b0:	defff904 	addi	sp,sp,-28
 80076b4:	dfc00615 	stw	ra,24(sp)
 80076b8:	df000515 	stw	fp,20(sp)
 80076bc:	df000504 	addi	fp,sp,20
 80076c0:	2005883a 	mov	r2,r4
 80076c4:	e0bfff0d 	sth	r2,-4(fp)
    bool packetProcessed = false;
 80076c8:	e03ffc05 	stb	zero,-16(fp)
    for(int i = 0; i < numListeners; i++)
 80076cc:	e03ffd15 	stw	zero,-12(fp)
 80076d0:	d0a72b03 	ldbu	r2,-25428(gp)
 80076d4:	10803fcc 	andi	r2,r2,255
 80076d8:	e0fffd17 	ldw	r3,-12(fp)
 80076dc:	18805c0e 	bge	r3,r2,8007850 <_ZN9EtherCard27udpServerHasProcessedPacketEt+0x1a0>
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((byte) listeners[i].port) && listeners[i].listening)
 80076e0:	008200b4 	movhi	r2,2050
 80076e4:	10afa004 	addi	r2,r2,-16768
 80076e8:	10800903 	ldbu	r2,36(r2)
 80076ec:	10c03fcc 	andi	r3,r2,255
 80076f0:	008200b4 	movhi	r2,2050
 80076f4:	10af9004 	addi	r2,r2,-16832
 80076f8:	e13ffd17 	ldw	r4,-12(fp)
 80076fc:	200890fa 	slli	r4,r4,3
 8007700:	1105883a 	add	r2,r2,r4
 8007704:	10800104 	addi	r2,r2,4
 8007708:	1080000b 	ldhu	r2,0(r2)
 800770c:	10bfffcc 	andi	r2,r2,65535
 8007710:	1005d23a 	srai	r2,r2,8
 8007714:	18804a1e 	bne	r3,r2,8007840 <_ZN9EtherCard27udpServerHasProcessedPacketEt+0x190>
 8007718:	008200b4 	movhi	r2,2050
 800771c:	10afa004 	addi	r2,r2,-16768
 8007720:	11000943 	ldbu	r4,37(r2)
 8007724:	008200b4 	movhi	r2,2050
 8007728:	10af9004 	addi	r2,r2,-16832
 800772c:	e0fffd17 	ldw	r3,-12(fp)
 8007730:	180690fa 	slli	r3,r3,3
 8007734:	10c5883a 	add	r2,r2,r3
 8007738:	10800104 	addi	r2,r2,4
 800773c:	1080000b 	ldhu	r2,0(r2)
 8007740:	20c03fcc 	andi	r3,r4,255
 8007744:	10803fcc 	andi	r2,r2,255
 8007748:	18803d1e 	bne	r3,r2,8007840 <_ZN9EtherCard27udpServerHasProcessedPacketEt+0x190>
 800774c:	008200b4 	movhi	r2,2050
 8007750:	10af9004 	addi	r2,r2,-16832
 8007754:	e0fffd17 	ldw	r3,-12(fp)
 8007758:	180690fa 	slli	r3,r3,3
 800775c:	10c5883a 	add	r2,r2,r3
 8007760:	10800184 	addi	r2,r2,6
 8007764:	10800003 	ldbu	r2,0(r2)
 8007768:	10803fcc 	andi	r2,r2,255
 800776c:	10003426 	beq	r2,zero,8007840 <_ZN9EtherCard27udpServerHasProcessedPacketEt+0x190>
        {
            uint16_t datalen = (uint16_t) (gPB[UDP_LEN_H_P] << 8)  + gPB[UDP_LEN_L_P] - UDP_HEADER_LEN;
 8007770:	008200b4 	movhi	r2,2050
 8007774:	10afa004 	addi	r2,r2,-16768
 8007778:	10800983 	ldbu	r2,38(r2)
 800777c:	10803fcc 	andi	r2,r2,255
 8007780:	1004923a 	slli	r2,r2,8
 8007784:	1007883a 	mov	r3,r2
 8007788:	008200b4 	movhi	r2,2050
 800778c:	10afa004 	addi	r2,r2,-16768
 8007790:	108009c3 	ldbu	r2,39(r2)
 8007794:	10803fcc 	andi	r2,r2,255
 8007798:	1885883a 	add	r2,r3,r2
 800779c:	10bffe04 	addi	r2,r2,-8
 80077a0:	e0bffe0d 	sth	r2,-8(fp)
            listeners[i].callback(
 80077a4:	008200b4 	movhi	r2,2050
 80077a8:	10af9004 	addi	r2,r2,-16832
 80077ac:	e0fffd17 	ldw	r3,-12(fp)
 80077b0:	180690fa 	slli	r3,r3,3
 80077b4:	10c5883a 	add	r2,r2,r3
 80077b8:	12000017 	ldw	r8,0(r2)
                listeners[i].port,
 80077bc:	008200b4 	movhi	r2,2050
 80077c0:	10af9004 	addi	r2,r2,-16832
 80077c4:	e0fffd17 	ldw	r3,-12(fp)
 80077c8:	180690fa 	slli	r3,r3,3
 80077cc:	10c5883a 	add	r2,r2,r3
 80077d0:	10800104 	addi	r2,r2,4
 80077d4:	1080000b 	ldhu	r2,0(r2)
    for(int i = 0; i < numListeners; i++)
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((byte) listeners[i].port) && listeners[i].listening)
        {
            uint16_t datalen = (uint16_t) (gPB[UDP_LEN_H_P] << 8)  + gPB[UDP_LEN_L_P] - UDP_HEADER_LEN;
            listeners[i].callback(
 80077d8:	127fffcc 	andi	r9,r2,65535
 80077dc:	00c200b4 	movhi	r3,2050
 80077e0:	18efa684 	addi	r3,r3,-16742
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
 80077e4:	008200b4 	movhi	r2,2050
 80077e8:	10afa004 	addi	r2,r2,-16768
 80077ec:	10800883 	ldbu	r2,34(r2)
 80077f0:	10803fcc 	andi	r2,r2,255
 80077f4:	1004923a 	slli	r2,r2,8
    for(int i = 0; i < numListeners; i++)
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((byte) listeners[i].port) && listeners[i].listening)
        {
            uint16_t datalen = (uint16_t) (gPB[UDP_LEN_H_P] << 8)  + gPB[UDP_LEN_L_P] - UDP_HEADER_LEN;
            listeners[i].callback(
 80077f8:	1009883a 	mov	r4,r2
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
 80077fc:	008200b4 	movhi	r2,2050
 8007800:	10afa004 	addi	r2,r2,-16768
 8007804:	108008c3 	ldbu	r2,35(r2)
    for(int i = 0; i < numListeners; i++)
    {
        if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((byte) listeners[i].port) && listeners[i].listening)
        {
            uint16_t datalen = (uint16_t) (gPB[UDP_LEN_H_P] << 8)  + gPB[UDP_LEN_L_P] - UDP_HEADER_LEN;
            listeners[i].callback(
 8007808:	10803fcc 	andi	r2,r2,255
 800780c:	2084b03a 	or	r2,r4,r2
 8007810:	117fffcc 	andi	r5,r2,65535
 8007814:	008200b4 	movhi	r2,2050
 8007818:	10afaa84 	addi	r2,r2,-16726
 800781c:	e13ffe0b 	ldhu	r4,-8(fp)
                listeners[i].port,
                gPB + IP_SRC_P,
                (gPB[UDP_SRC_PORT_H_P] << 8) | gPB[UDP_SRC_PORT_L_P],
                (const char *) (gPB + UDP_DATA_P),
                datalen);
 8007820:	d9000015 	stw	r4,0(sp)
 8007824:	100f883a 	mov	r7,r2
 8007828:	280d883a 	mov	r6,r5
 800782c:	180b883a 	mov	r5,r3
 8007830:	4809883a 	mov	r4,r9
 8007834:	403ee83a 	callr	r8
            packetProcessed = true;
 8007838:	00800044 	movi	r2,1
 800783c:	e0bffc05 	stb	r2,-16(fp)
    return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(uint16_t plen) {
    bool packetProcessed = false;
    for(int i = 0; i < numListeners; i++)
 8007840:	e0bffd17 	ldw	r2,-12(fp)
 8007844:	10800044 	addi	r2,r2,1
 8007848:	e0bffd15 	stw	r2,-12(fp)
 800784c:	003fa006 	br	80076d0 <_ZN9EtherCard27udpServerHasProcessedPacketEt+0x20>
                (const char *) (gPB + UDP_DATA_P),
                datalen);
            packetProcessed = true;
        }
    }
    return packetProcessed;
 8007850:	e0bffc03 	ldbu	r2,-16(fp)
}
 8007854:	e037883a 	mov	sp,fp
 8007858:	dfc00117 	ldw	ra,4(sp)
 800785c:	df000017 	ldw	fp,0(sp)
 8007860:	dec00204 	addi	sp,sp,8
 8007864:	f800283a 	ret

08007868 <_ZN9EtherCard7printIpEPKcPKh>:
#include "EtherCard.h"
#include <stdio.h>
#include <string.h>

void EtherCard::printIp (const char *msg, const uint8_t *buf) {
 8007868:	defffc04 	addi	sp,sp,-16
 800786c:	dfc00315 	stw	ra,12(sp)
 8007870:	df000215 	stw	fp,8(sp)
 8007874:	df000204 	addi	fp,sp,8
 8007878:	e13ffe15 	stw	r4,-8(fp)
 800787c:	e17fff15 	stw	r5,-4(fp)
    printf("%s", msg);
 8007880:	e17ffe17 	ldw	r5,-8(fp)
 8007884:	010200b4 	movhi	r4,2050
 8007888:	21209b04 	addi	r4,r4,-32148
 800788c:	80082440 	call	8008244 <printf>
    EtherCard::printIp(buf);
 8007890:	e13fff17 	ldw	r4,-4(fp)
 8007894:	80078b80 	call	80078b8 <_ZN9EtherCard7printIpEPKh>
    printf("\n");
 8007898:	01000284 	movi	r4,10
 800789c:	80082880 	call	8008288 <putchar>
}
 80078a0:	0001883a 	nop
 80078a4:	e037883a 	mov	sp,fp
 80078a8:	dfc00117 	ldw	ra,4(sp)
 80078ac:	df000017 	ldw	fp,0(sp)
 80078b0:	dec00204 	addi	sp,sp,8
 80078b4:	f800283a 	ret

080078b8 <_ZN9EtherCard7printIpEPKh>:

void EtherCard::printIp (const uint8_t *buf) {
 80078b8:	defffc04 	addi	sp,sp,-16
 80078bc:	dfc00315 	stw	ra,12(sp)
 80078c0:	df000215 	stw	fp,8(sp)
 80078c4:	df000204 	addi	fp,sp,8
 80078c8:	e13fff15 	stw	r4,-4(fp)
    for (uint8_t i = 0; i < IP_LEN; ++i) {
 80078cc:	e03ffe05 	stb	zero,-8(fp)
 80078d0:	e0bffe03 	ldbu	r2,-8(fp)
 80078d4:	10800128 	cmpgeui	r2,r2,4
 80078d8:	1000121e 	bne	r2,zero,8007924 <_ZN9EtherCard7printIpEPKh+0x6c>
        printf("%d", buf[i]);
 80078dc:	e0bffe03 	ldbu	r2,-8(fp)
 80078e0:	e0ffff17 	ldw	r3,-4(fp)
 80078e4:	1885883a 	add	r2,r3,r2
 80078e8:	10800003 	ldbu	r2,0(r2)
 80078ec:	10803fcc 	andi	r2,r2,255
 80078f0:	100b883a 	mov	r5,r2
 80078f4:	010200b4 	movhi	r4,2050
 80078f8:	21209c04 	addi	r4,r4,-32144
 80078fc:	80082440 	call	8008244 <printf>
        if (i < 3)
 8007900:	e0bffe03 	ldbu	r2,-8(fp)
 8007904:	108000e8 	cmpgeui	r2,r2,3
 8007908:	1000021e 	bne	r2,zero,8007914 <_ZN9EtherCard7printIpEPKh+0x5c>
            printf(".");
 800790c:	01000b84 	movi	r4,46
 8007910:	80082880 	call	8008288 <putchar>
    EtherCard::printIp(buf);
    printf("\n");
}

void EtherCard::printIp (const uint8_t *buf) {
    for (uint8_t i = 0; i < IP_LEN; ++i) {
 8007914:	e0bffe03 	ldbu	r2,-8(fp)
 8007918:	10800044 	addi	r2,r2,1
 800791c:	e0bffe05 	stb	r2,-8(fp)
 8007920:	003feb06 	br	80078d0 <_ZN9EtherCard7printIpEPKh+0x18>
        printf("%d", buf[i]);
        if (i < 3)
            printf(".");
    }
}
 8007924:	0001883a 	nop
 8007928:	e037883a 	mov	sp,fp
 800792c:	dfc00117 	ldw	ra,4(sp)
 8007930:	df000017 	ldw	fp,0(sp)
 8007934:	dec00204 	addi	sp,sp,8
 8007938:	f800283a 	ret

0800793c <_ZN9EtherCard7copyMacEPhPKh>:

void EtherCard::copyMac (uint8_t *dst, const uint8_t *src) {
 800793c:	defffc04 	addi	sp,sp,-16
 8007940:	dfc00315 	stw	ra,12(sp)
 8007944:	df000215 	stw	fp,8(sp)
 8007948:	df000204 	addi	fp,sp,8
 800794c:	e13ffe15 	stw	r4,-8(fp)
 8007950:	e17fff15 	stw	r5,-4(fp)
    memcpy(dst, src, ETH_LEN);
 8007954:	01800184 	movi	r6,6
 8007958:	e17fff17 	ldw	r5,-4(fp)
 800795c:	e13ffe17 	ldw	r4,-8(fp)
 8007960:	8007fa40 	call	8007fa4 <memcpy>
}
 8007964:	0001883a 	nop
 8007968:	e037883a 	mov	sp,fp
 800796c:	dfc00117 	ldw	ra,4(sp)
 8007970:	df000017 	ldw	fp,0(sp)
 8007974:	dec00204 	addi	sp,sp,8
 8007978:	f800283a 	ret

0800797c <_ZN9EtherCard6copyIpEPhPKh>:

void EtherCard::copyIp (uint8_t *dst, const uint8_t *src) {
 800797c:	defffc04 	addi	sp,sp,-16
 8007980:	dfc00315 	stw	ra,12(sp)
 8007984:	df000215 	stw	fp,8(sp)
 8007988:	df000204 	addi	fp,sp,8
 800798c:	e13ffe15 	stw	r4,-8(fp)
 8007990:	e17fff15 	stw	r5,-4(fp)
    memcpy(dst, src, IP_LEN);
 8007994:	01800104 	movi	r6,4
 8007998:	e17fff17 	ldw	r5,-4(fp)
 800799c:	e13ffe17 	ldw	r4,-8(fp)
 80079a0:	8007fa40 	call	8007fa4 <memcpy>
}
 80079a4:	0001883a 	nop
 80079a8:	e037883a 	mov	sp,fp
 80079ac:	dfc00117 	ldw	ra,4(sp)
 80079b0:	df000017 	ldw	fp,0(sp)
 80079b4:	dec00204 	addi	sp,sp,8
 80079b8:	f800283a 	ret

080079bc <_ZL9gotPingedPh>:
uint8_t Ethernet::buffer[700];



// called when a ping comes in (replies to it are automatic)
static void gotPinged(uint8_t *ptr) { ether.printIp(">>> ping from: ", ptr); }
 80079bc:	defffd04 	addi	sp,sp,-12
 80079c0:	dfc00215 	stw	ra,8(sp)
 80079c4:	df000115 	stw	fp,4(sp)
 80079c8:	df000104 	addi	fp,sp,4
 80079cc:	e13fff15 	stw	r4,-4(fp)
 80079d0:	e17fff17 	ldw	r5,-4(fp)
 80079d4:	010200b4 	movhi	r4,2050
 80079d8:	21209d04 	addi	r4,r4,-32140
 80079dc:	80078680 	call	8007868 <_ZN9EtherCard7printIpEPKcPKh>
 80079e0:	0001883a 	nop
 80079e4:	e037883a 	mov	sp,fp
 80079e8:	dfc00117 	ldw	ra,4(sp)
 80079ec:	df000017 	ldw	fp,0(sp)
 80079f0:	dec00204 	addi	sp,sp,8
 80079f4:	f800283a 	ret

080079f8 <_Z15printSignedHex0a>:

void printSignedHex0(signed char value) {
 80079f8:	defffc04 	addi	sp,sp,-16
 80079fc:	dfc00315 	stw	ra,12(sp)
 8007a00:	df000215 	stw	fp,8(sp)
 8007a04:	df000204 	addi	fp,sp,8
 8007a08:	2005883a 	mov	r2,r4
 8007a0c:	e0bfff05 	stb	r2,-4(fp)
	unsigned char tens = 0;
 8007a10:	e03ffe05 	stb	zero,-8(fp)
	unsigned char ones = 0;
 8007a14:	e03ffe45 	stb	zero,-7(fp)
	unsigned short int pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 8007a18:	00800074 	movhi	r2,1
 8007a1c:	10846004 	addi	r2,r2,4480
 8007a20:	10800037 	ldwio	r2,0(r2)
 8007a24:	e0bffe8d 	sth	r2,-6(fp)

	value = value % 100;
 8007a28:	e0bfff07 	ldb	r2,-4(fp)
 8007a2c:	01401904 	movi	r5,100
 8007a30:	1009883a 	mov	r4,r2
 8007a34:	8007d100 	call	8007d10 <__modsi3>
 8007a38:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 8007a3c:	e0bfff07 	ldb	r2,-4(fp)
 8007a40:	01400284 	movi	r5,10
 8007a44:	1009883a 	mov	r4,r2
 8007a48:	8007c8c0 	call	8007c8c <__divsi3>
 8007a4c:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
 8007a50:	e0bfff07 	ldb	r2,-4(fp)
 8007a54:	01400284 	movi	r5,10
 8007a58:	1009883a 	mov	r4,r2
 8007a5c:	8007d100 	call	8007d10 <__modsi3>
 8007a60:	e0bffe45 	stb	r2,-7(fp)

	pio_val &= 0x00FF;
 8007a64:	e0bffe8b 	ldhu	r2,-6(fp)
 8007a68:	10803fcc 	andi	r2,r2,255
 8007a6c:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (tens << 12);
 8007a70:	e0bffe03 	ldbu	r2,-8(fp)
 8007a74:	1004933a 	slli	r2,r2,12
 8007a78:	1007883a 	mov	r3,r2
 8007a7c:	e0bffe8b 	ldhu	r2,-6(fp)
 8007a80:	1884b03a 	or	r2,r3,r2
 8007a84:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (ones << 8);
 8007a88:	e0bffe43 	ldbu	r2,-7(fp)
 8007a8c:	1004923a 	slli	r2,r2,8
 8007a90:	1007883a 	mov	r3,r2
 8007a94:	e0bffe8b 	ldhu	r2,-6(fp)
 8007a98:	1884b03a 	or	r2,r3,r2
 8007a9c:	e0bffe8d 	sth	r2,-6(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 8007aa0:	e0fffe8b 	ldhu	r3,-6(fp)
 8007aa4:	00800074 	movhi	r2,1
 8007aa8:	10846004 	addi	r2,r2,4480
 8007aac:	10c00035 	stwio	r3,0(r2)
}
 8007ab0:	0001883a 	nop
 8007ab4:	e037883a 	mov	sp,fp
 8007ab8:	dfc00117 	ldw	ra,4(sp)
 8007abc:	df000017 	ldw	fp,0(sp)
 8007ac0:	dec00204 	addi	sp,sp,8
 8007ac4:	f800283a 	ret

08007ac8 <main>:

int main() {
 8007ac8:	defffa04 	addi	sp,sp,-24
 8007acc:	dfc00515 	stw	ra,20(sp)
 8007ad0:	df000415 	stw	fp,16(sp)
 8007ad4:	df000404 	addi	fp,sp,16
  printf("\n[pings]");
 8007ad8:	010200b4 	movhi	r4,2050
 8007adc:	2120a104 	addi	r4,r4,-32124
 8007ae0:	80082440 	call	8008244 <printf>

  uint16_t sz = sizeof ether.buffer;
 8007ae4:	0080af04 	movi	r2,700
 8007ae8:	e0bffd0d 	sth	r2,-12(fp)
  printf("Size: %x\n", sz);
 8007aec:	e0bffd0b 	ldhu	r2,-12(fp)
 8007af0:	100b883a 	mov	r5,r2
 8007af4:	010200b4 	movhi	r4,2050
 8007af8:	2120a404 	addi	r4,r4,-32112
 8007afc:	80082440 	call	8008244 <printf>
  if (ether.begin(sz, (const uint8_t*)mymac, SS) == 0)
 8007b00:	e0bffd0b 	ldhu	r2,-12(fp)
 8007b04:	000d883a 	mov	r6,zero
 8007b08:	d1600944 	addi	r5,gp,-32731
 8007b0c:	1009883a 	mov	r4,r2
 8007b10:	80022940 	call	8002294 <_ZN9EtherCard5beginEtPKhh>
 8007b14:	10803fcc 	andi	r2,r2,255
 8007b18:	1005003a 	cmpeq	r2,r2,zero
 8007b1c:	10803fcc 	andi	r2,r2,255
 8007b20:	10000326 	beq	r2,zero,8007b30 <main+0x68>
    printf("Failed to access Ethernet controller");
 8007b24:	010200b4 	movhi	r4,2050
 8007b28:	2120a704 	addi	r4,r4,-32100
 8007b2c:	80082440 	call	8008244 <printf>
  const static uint8_t gw[] = {192,168,0,1};
  const static uint8_t dns[] = {192,168,0,1};
  const static uint8_t mask[] = {255, 255, 255, 0};


  if(!ether.staticSetup(ip, gw, dns, mask)) {
 8007b30:	d1e00dc4 	addi	r7,gp,-32713
 8007b34:	d1a00cc4 	addi	r6,gp,-32717
 8007b38:	d1600bc4 	addi	r5,gp,-32721
 8007b3c:	d1200ac4 	addi	r4,gp,-32725
 8007b40:	80023640 	call	8002364 <_ZN9EtherCard11staticSetupEPKhS1_S1_S1_>
 8007b44:	1080005c 	xori	r2,r2,1
 8007b48:	10803fcc 	andi	r2,r2,255
 8007b4c:	10000326 	beq	r2,zero,8007b5c <main+0x94>
      // handle failure to configure static IP address (current implementation always returns true!)
	  printf("pain and suffering");
 8007b50:	010200b4 	movhi	r4,2050
 8007b54:	2120b104 	addi	r4,r4,-32060
 8007b58:	80082440 	call	8008244 <printf>
  }

  ether.printIp("IP:  ", ether.myip);
 8007b5c:	d1670444 	addi	r5,gp,-25583
 8007b60:	010200b4 	movhi	r4,2050
 8007b64:	2120b604 	addi	r4,r4,-32040
 8007b68:	80078680 	call	8007868 <_ZN9EtherCard7printIpEPKcPKh>
  ether.printIp("GW:  ", ether.gwip);
 8007b6c:	d1670744 	addi	r5,gp,-25571
 8007b70:	010200b4 	movhi	r4,2050
 8007b74:	2120b804 	addi	r4,r4,-32032
 8007b78:	80078680 	call	8007868 <_ZN9EtherCard7printIpEPKcPKh>

  // use DNS to locate the IP address we want to ping
  if (!ether.dnsLookup("www.4chan.org"))
 8007b7c:	000b883a 	mov	r5,zero
 8007b80:	010200b4 	movhi	r4,2050
 8007b84:	2120ba04 	addi	r4,r4,-32024
 8007b88:	80039c80 	call	80039c8 <_ZN9EtherCard9dnsLookupEPKcb>
 8007b8c:	1080005c 	xori	r2,r2,1
 8007b90:	10803fcc 	andi	r2,r2,255
 8007b94:	10000326 	beq	r2,zero,8007ba4 <main+0xdc>
    printf("DNS failed");
 8007b98:	010200b4 	movhi	r4,2050
 8007b9c:	2120be04 	addi	r4,r4,-32008
 8007ba0:	80082440 	call	8008244 <printf>
//  ether.hisip[0] = 34;
//  ether.hisip[1] = 222;
//  ether.hisip[2] = 248;
//  ether.hisip[3] = 68;

  ether.printIp("SRV: ", ether.hisip);
 8007ba4:	d1670a44 	addi	r5,gp,-25559
 8007ba8:	010200b4 	movhi	r4,2050
 8007bac:	2120c104 	addi	r4,r4,-31996
 8007bb0:	80078680 	call	8007868 <_ZN9EtherCard7printIpEPKcPKh>

  // call this to report others pinging us
  ether.registerPingCallback(gotPinged);
 8007bb4:	01020034 	movhi	r4,2048
 8007bb8:	211e6f04 	addi	r4,r4,31164
 8007bbc:	8006acc0 	call	8006acc <_ZN9EtherCard20registerPingCallbackEPFvPhE>

  //   timer = -9999999; // start timing out right away
  time_t prevTime = time(NULL);
 8007bc0:	0009883a 	mov	r4,zero
 8007bc4:	80086580 	call	8008658 <time>
 8007bc8:	e0bffc15 	stw	r2,-16(fp)

  while (1) {
      uint16_t len = ether.packetReceive(); // go receive new packets
 8007bcc:	80045cc0 	call	80045cc <_ZN8ENC28J6013packetReceiveEv>
 8007bd0:	e0bffd8d 	sth	r2,-10(fp)
      uint16_t pos = ether.packetLoop(len); // respond to incoming pings
 8007bd4:	e0bffd8b 	ldhu	r2,-10(fp)
 8007bd8:	1009883a 	mov	r4,r2
 8007bdc:	8006c9c0 	call	8006c9c <_ZN9EtherCard10packetLoopEt>
 8007be0:	e0bffe0d 	sth	r2,-8(fp)

      // report whenever a reply to our outgoing ping comes back
      if (len > 0 && ether.packetLoopIcmpCheckReply(ether.hisip)) {
 8007be4:	e0bffd8b 	ldhu	r2,-10(fp)
 8007be8:	10000626 	beq	r2,zero,8007c04 <main+0x13c>
 8007bec:	d1270a44 	addi	r4,gp,-25559
 8007bf0:	8006af80 	call	8006af8 <_ZN9EtherCard24packetLoopIcmpCheckReplyEPKh>
 8007bf4:	10803fcc 	andi	r2,r2,255
 8007bf8:	10000226 	beq	r2,zero,8007c04 <main+0x13c>
 8007bfc:	00800044 	movi	r2,1
 8007c00:	00000106 	br	8007c08 <main+0x140>
 8007c04:	0005883a 	mov	r2,zero
 8007c08:	10803fcc 	andi	r2,r2,255
 8007c0c:	10000f26 	beq	r2,zero,8007c4c <main+0x184>
    	int pingAmnt = (int)(clock() - prevTime);
 8007c10:	8007e680 	call	8007e68 <clock>
 8007c14:	1007883a 	mov	r3,r2
 8007c18:	e0bffc17 	ldw	r2,-16(fp)
 8007c1c:	1885c83a 	sub	r2,r3,r2
 8007c20:	e0bfff15 	stw	r2,-4(fp)
        printf("   %d ms\n", pingAmnt);
 8007c24:	e17fff17 	ldw	r5,-4(fp)
 8007c28:	010200b4 	movhi	r4,2050
 8007c2c:	2120c304 	addi	r4,r4,-31988
 8007c30:	80082440 	call	8008244 <printf>
        printSignedHex0(pingAmnt);
 8007c34:	e0bfff17 	ldw	r2,-4(fp)
 8007c38:	10803fcc 	andi	r2,r2,255
 8007c3c:	1080201c 	xori	r2,r2,128
 8007c40:	10bfe004 	addi	r2,r2,-128
 8007c44:	1009883a 	mov	r4,r2
 8007c48:	80079f80 	call	80079f8 <_Z15printSignedHex0a>
      }

      // ping a remote server once every few seconds
      if (clock() > prevTime + 2500) {
 8007c4c:	8007e680 	call	8007e68 <clock>
 8007c50:	1007883a 	mov	r3,r2
 8007c54:	e0bffc17 	ldw	r2,-16(fp)
 8007c58:	10827104 	addi	r2,r2,2500
 8007c5c:	10c5803a 	cmpltu	r2,r2,r3
 8007c60:	10803fcc 	andi	r2,r2,255
 8007c64:	103fd926 	beq	r2,zero,8007bcc <main+0x104>
        ether.printIp("Pinging: ", ether.hisip);
 8007c68:	d1670a44 	addi	r5,gp,-25559
 8007c6c:	010200b4 	movhi	r4,2050
 8007c70:	2120c604 	addi	r4,r4,-31976
 8007c74:	80078680 	call	8007868 <_ZN9EtherCard7printIpEPKcPKh>
        prevTime = clock();
 8007c78:	8007e680 	call	8007e68 <clock>
 8007c7c:	e0bffc15 	stw	r2,-16(fp)
        ether.clientIcmpRequest(ether.hisip);
 8007c80:	d1270a44 	addi	r4,gp,-25559
 8007c84:	80059d80 	call	80059d8 <_ZN9EtherCard17clientIcmpRequestEPKh>
  ether.registerPingCallback(gotPinged);

  //   timer = -9999999; // start timing out right away
  time_t prevTime = time(NULL);

  while (1) {
 8007c88:	003fd006 	br	8007bcc <main+0x104>

08007c8c <__divsi3>:
 8007c8c:	20001b16 	blt	r4,zero,8007cfc <__divsi3+0x70>
 8007c90:	000f883a 	mov	r7,zero
 8007c94:	28001616 	blt	r5,zero,8007cf0 <__divsi3+0x64>
 8007c98:	200d883a 	mov	r6,r4
 8007c9c:	29001a2e 	bgeu	r5,r4,8007d08 <__divsi3+0x7c>
 8007ca0:	00800804 	movi	r2,32
 8007ca4:	00c00044 	movi	r3,1
 8007ca8:	00000106 	br	8007cb0 <__divsi3+0x24>
 8007cac:	10000d26 	beq	r2,zero,8007ce4 <__divsi3+0x58>
 8007cb0:	294b883a 	add	r5,r5,r5
 8007cb4:	10bfffc4 	addi	r2,r2,-1
 8007cb8:	18c7883a 	add	r3,r3,r3
 8007cbc:	293ffb36 	bltu	r5,r4,8007cac <__divsi3+0x20>
 8007cc0:	0005883a 	mov	r2,zero
 8007cc4:	18000726 	beq	r3,zero,8007ce4 <__divsi3+0x58>
 8007cc8:	0005883a 	mov	r2,zero
 8007ccc:	31400236 	bltu	r6,r5,8007cd8 <__divsi3+0x4c>
 8007cd0:	314dc83a 	sub	r6,r6,r5
 8007cd4:	10c4b03a 	or	r2,r2,r3
 8007cd8:	1806d07a 	srli	r3,r3,1
 8007cdc:	280ad07a 	srli	r5,r5,1
 8007ce0:	183ffa1e 	bne	r3,zero,8007ccc <__divsi3+0x40>
 8007ce4:	38000126 	beq	r7,zero,8007cec <__divsi3+0x60>
 8007ce8:	0085c83a 	sub	r2,zero,r2
 8007cec:	f800283a 	ret
 8007cf0:	014bc83a 	sub	r5,zero,r5
 8007cf4:	39c0005c 	xori	r7,r7,1
 8007cf8:	003fe706 	br	8007c98 <__divsi3+0xc>
 8007cfc:	0109c83a 	sub	r4,zero,r4
 8007d00:	01c00044 	movi	r7,1
 8007d04:	003fe306 	br	8007c94 <__divsi3+0x8>
 8007d08:	00c00044 	movi	r3,1
 8007d0c:	003fee06 	br	8007cc8 <__divsi3+0x3c>

08007d10 <__modsi3>:
 8007d10:	20001716 	blt	r4,zero,8007d70 <__modsi3+0x60>
 8007d14:	000f883a 	mov	r7,zero
 8007d18:	2005883a 	mov	r2,r4
 8007d1c:	28001216 	blt	r5,zero,8007d68 <__modsi3+0x58>
 8007d20:	2900162e 	bgeu	r5,r4,8007d7c <__modsi3+0x6c>
 8007d24:	01800804 	movi	r6,32
 8007d28:	00c00044 	movi	r3,1
 8007d2c:	00000106 	br	8007d34 <__modsi3+0x24>
 8007d30:	30000a26 	beq	r6,zero,8007d5c <__modsi3+0x4c>
 8007d34:	294b883a 	add	r5,r5,r5
 8007d38:	31bfffc4 	addi	r6,r6,-1
 8007d3c:	18c7883a 	add	r3,r3,r3
 8007d40:	293ffb36 	bltu	r5,r4,8007d30 <__modsi3+0x20>
 8007d44:	18000526 	beq	r3,zero,8007d5c <__modsi3+0x4c>
 8007d48:	1806d07a 	srli	r3,r3,1
 8007d4c:	11400136 	bltu	r2,r5,8007d54 <__modsi3+0x44>
 8007d50:	1145c83a 	sub	r2,r2,r5
 8007d54:	280ad07a 	srli	r5,r5,1
 8007d58:	183ffb1e 	bne	r3,zero,8007d48 <__modsi3+0x38>
 8007d5c:	38000126 	beq	r7,zero,8007d64 <__modsi3+0x54>
 8007d60:	0085c83a 	sub	r2,zero,r2
 8007d64:	f800283a 	ret
 8007d68:	014bc83a 	sub	r5,zero,r5
 8007d6c:	003fec06 	br	8007d20 <__modsi3+0x10>
 8007d70:	0109c83a 	sub	r4,zero,r4
 8007d74:	01c00044 	movi	r7,1
 8007d78:	003fe706 	br	8007d18 <__modsi3+0x8>
 8007d7c:	00c00044 	movi	r3,1
 8007d80:	003ff106 	br	8007d48 <__modsi3+0x38>

08007d84 <__udivsi3>:
 8007d84:	200d883a 	mov	r6,r4
 8007d88:	2900152e 	bgeu	r5,r4,8007de0 <__udivsi3+0x5c>
 8007d8c:	28001416 	blt	r5,zero,8007de0 <__udivsi3+0x5c>
 8007d90:	00800804 	movi	r2,32
 8007d94:	00c00044 	movi	r3,1
 8007d98:	00000206 	br	8007da4 <__udivsi3+0x20>
 8007d9c:	10000e26 	beq	r2,zero,8007dd8 <__udivsi3+0x54>
 8007da0:	28000516 	blt	r5,zero,8007db8 <__udivsi3+0x34>
 8007da4:	294b883a 	add	r5,r5,r5
 8007da8:	10bfffc4 	addi	r2,r2,-1
 8007dac:	18c7883a 	add	r3,r3,r3
 8007db0:	293ffa36 	bltu	r5,r4,8007d9c <__udivsi3+0x18>
 8007db4:	18000826 	beq	r3,zero,8007dd8 <__udivsi3+0x54>
 8007db8:	0005883a 	mov	r2,zero
 8007dbc:	31400236 	bltu	r6,r5,8007dc8 <__udivsi3+0x44>
 8007dc0:	314dc83a 	sub	r6,r6,r5
 8007dc4:	10c4b03a 	or	r2,r2,r3
 8007dc8:	1806d07a 	srli	r3,r3,1
 8007dcc:	280ad07a 	srli	r5,r5,1
 8007dd0:	183ffa1e 	bne	r3,zero,8007dbc <__udivsi3+0x38>
 8007dd4:	f800283a 	ret
 8007dd8:	0005883a 	mov	r2,zero
 8007ddc:	f800283a 	ret
 8007de0:	00c00044 	movi	r3,1
 8007de4:	003ff406 	br	8007db8 <__udivsi3+0x34>

08007de8 <__umodsi3>:
 8007de8:	2005883a 	mov	r2,r4
 8007dec:	2900122e 	bgeu	r5,r4,8007e38 <__umodsi3+0x50>
 8007df0:	28001116 	blt	r5,zero,8007e38 <__umodsi3+0x50>
 8007df4:	01800804 	movi	r6,32
 8007df8:	00c00044 	movi	r3,1
 8007dfc:	00000206 	br	8007e08 <__umodsi3+0x20>
 8007e00:	30000c26 	beq	r6,zero,8007e34 <__umodsi3+0x4c>
 8007e04:	28000516 	blt	r5,zero,8007e1c <__umodsi3+0x34>
 8007e08:	294b883a 	add	r5,r5,r5
 8007e0c:	31bfffc4 	addi	r6,r6,-1
 8007e10:	18c7883a 	add	r3,r3,r3
 8007e14:	293ffa36 	bltu	r5,r4,8007e00 <__umodsi3+0x18>
 8007e18:	18000626 	beq	r3,zero,8007e34 <__umodsi3+0x4c>
 8007e1c:	1806d07a 	srli	r3,r3,1
 8007e20:	11400136 	bltu	r2,r5,8007e28 <__umodsi3+0x40>
 8007e24:	1145c83a 	sub	r2,r2,r5
 8007e28:	280ad07a 	srli	r5,r5,1
 8007e2c:	183ffb1e 	bne	r3,zero,8007e1c <__umodsi3+0x34>
 8007e30:	f800283a 	ret
 8007e34:	f800283a 	ret
 8007e38:	00c00044 	movi	r3,1
 8007e3c:	003ff706 	br	8007e1c <__umodsi3+0x34>

08007e40 <__mulsi3>:
 8007e40:	0005883a 	mov	r2,zero
 8007e44:	20000726 	beq	r4,zero,8007e64 <__mulsi3+0x24>
 8007e48:	20c0004c 	andi	r3,r4,1
 8007e4c:	2008d07a 	srli	r4,r4,1
 8007e50:	18000126 	beq	r3,zero,8007e58 <__mulsi3+0x18>
 8007e54:	1145883a 	add	r2,r2,r5
 8007e58:	294b883a 	add	r5,r5,r5
 8007e5c:	203ffa1e 	bne	r4,zero,8007e48 <__mulsi3+0x8>
 8007e60:	f800283a 	ret
 8007e64:	f800283a 	ret

08007e68 <clock>:
 8007e68:	008200b4 	movhi	r2,2050
 8007e6c:	10a85804 	addi	r2,r2,-24224
 8007e70:	11000017 	ldw	r4,0(r2)
 8007e74:	defffb04 	addi	sp,sp,-20
 8007e78:	d80b883a 	mov	r5,sp
 8007e7c:	dfc00415 	stw	ra,16(sp)
 8007e80:	80086a80 	call	80086a8 <_times_r>
 8007e84:	00ffffc4 	movi	r3,-1
 8007e88:	10c00726 	beq	r2,r3,8007ea8 <clock+0x40>
 8007e8c:	d8c00017 	ldw	r3,0(sp)
 8007e90:	d8800117 	ldw	r2,4(sp)
 8007e94:	1885883a 	add	r2,r3,r2
 8007e98:	d8c00217 	ldw	r3,8(sp)
 8007e9c:	10c7883a 	add	r3,r2,r3
 8007ea0:	d8800317 	ldw	r2,12(sp)
 8007ea4:	1885883a 	add	r2,r3,r2
 8007ea8:	dfc00417 	ldw	ra,16(sp)
 8007eac:	dec00504 	addi	sp,sp,20
 8007eb0:	f800283a 	ret

08007eb4 <ldiv>:
 8007eb4:	defffc04 	addi	sp,sp,-16
 8007eb8:	dfc00315 	stw	ra,12(sp)
 8007ebc:	dc800215 	stw	r18,8(sp)
 8007ec0:	dc400115 	stw	r17,4(sp)
 8007ec4:	dc000015 	stw	r16,0(sp)
 8007ec8:	2825883a 	mov	r18,r5
 8007ecc:	2021883a 	mov	r16,r4
 8007ed0:	8007c8c0 	call	8007c8c <__divsi3>
 8007ed4:	900b883a 	mov	r5,r18
 8007ed8:	8009883a 	mov	r4,r16
 8007edc:	1023883a 	mov	r17,r2
 8007ee0:	8007d100 	call	8007d10 <__modsi3>
 8007ee4:	1007883a 	mov	r3,r2
 8007ee8:	80000816 	blt	r16,zero,8007f0c <ldiv+0x58>
 8007eec:	10000b16 	blt	r2,zero,8007f1c <ldiv+0x68>
 8007ef0:	8805883a 	mov	r2,r17
 8007ef4:	dfc00317 	ldw	ra,12(sp)
 8007ef8:	dc800217 	ldw	r18,8(sp)
 8007efc:	dc400117 	ldw	r17,4(sp)
 8007f00:	dc000017 	ldw	r16,0(sp)
 8007f04:	dec00404 	addi	sp,sp,16
 8007f08:	f800283a 	ret
 8007f0c:	00bff80e 	bge	zero,r2,8007ef0 <ldiv+0x3c>
 8007f10:	8c7fffc4 	addi	r17,r17,-1
 8007f14:	1487883a 	add	r3,r2,r18
 8007f18:	003ff506 	br	8007ef0 <ldiv+0x3c>
 8007f1c:	8c400044 	addi	r17,r17,1
 8007f20:	1487c83a 	sub	r3,r2,r18
 8007f24:	003ff206 	br	8007ef0 <ldiv+0x3c>

08007f28 <memcmp>:
 8007f28:	01c000c4 	movi	r7,3
 8007f2c:	3980192e 	bgeu	r7,r6,8007f94 <memcmp+0x6c>
 8007f30:	2144b03a 	or	r2,r4,r5
 8007f34:	11c4703a 	and	r2,r2,r7
 8007f38:	10000f26 	beq	r2,zero,8007f78 <memcmp+0x50>
 8007f3c:	20800003 	ldbu	r2,0(r4)
 8007f40:	28c00003 	ldbu	r3,0(r5)
 8007f44:	10c0151e 	bne	r2,r3,8007f9c <memcmp+0x74>
 8007f48:	31bfff84 	addi	r6,r6,-2
 8007f4c:	01ffffc4 	movi	r7,-1
 8007f50:	00000406 	br	8007f64 <memcmp+0x3c>
 8007f54:	20800003 	ldbu	r2,0(r4)
 8007f58:	28c00003 	ldbu	r3,0(r5)
 8007f5c:	31bfffc4 	addi	r6,r6,-1
 8007f60:	10c00e1e 	bne	r2,r3,8007f9c <memcmp+0x74>
 8007f64:	21000044 	addi	r4,r4,1
 8007f68:	29400044 	addi	r5,r5,1
 8007f6c:	31fff91e 	bne	r6,r7,8007f54 <memcmp+0x2c>
 8007f70:	0005883a 	mov	r2,zero
 8007f74:	f800283a 	ret
 8007f78:	20c00017 	ldw	r3,0(r4)
 8007f7c:	28800017 	ldw	r2,0(r5)
 8007f80:	18bfee1e 	bne	r3,r2,8007f3c <memcmp+0x14>
 8007f84:	31bfff04 	addi	r6,r6,-4
 8007f88:	21000104 	addi	r4,r4,4
 8007f8c:	29400104 	addi	r5,r5,4
 8007f90:	39bff936 	bltu	r7,r6,8007f78 <memcmp+0x50>
 8007f94:	303fe91e 	bne	r6,zero,8007f3c <memcmp+0x14>
 8007f98:	003ff506 	br	8007f70 <memcmp+0x48>
 8007f9c:	10c5c83a 	sub	r2,r2,r3
 8007fa0:	f800283a 	ret

08007fa4 <memcpy>:
 8007fa4:	defffd04 	addi	sp,sp,-12
 8007fa8:	dfc00215 	stw	ra,8(sp)
 8007fac:	dc400115 	stw	r17,4(sp)
 8007fb0:	dc000015 	stw	r16,0(sp)
 8007fb4:	00c003c4 	movi	r3,15
 8007fb8:	2005883a 	mov	r2,r4
 8007fbc:	1980452e 	bgeu	r3,r6,80080d4 <memcpy+0x130>
 8007fc0:	2906b03a 	or	r3,r5,r4
 8007fc4:	18c000cc 	andi	r3,r3,3
 8007fc8:	1800441e 	bne	r3,zero,80080dc <memcpy+0x138>
 8007fcc:	347ffc04 	addi	r17,r6,-16
 8007fd0:	8822d13a 	srli	r17,r17,4
 8007fd4:	28c00104 	addi	r3,r5,4
 8007fd8:	23400104 	addi	r13,r4,4
 8007fdc:	8820913a 	slli	r16,r17,4
 8007fe0:	2b000204 	addi	r12,r5,8
 8007fe4:	22c00204 	addi	r11,r4,8
 8007fe8:	84000504 	addi	r16,r16,20
 8007fec:	2a800304 	addi	r10,r5,12
 8007ff0:	22400304 	addi	r9,r4,12
 8007ff4:	2c21883a 	add	r16,r5,r16
 8007ff8:	2811883a 	mov	r8,r5
 8007ffc:	200f883a 	mov	r7,r4
 8008000:	41000017 	ldw	r4,0(r8)
 8008004:	1fc00017 	ldw	ra,0(r3)
 8008008:	63c00017 	ldw	r15,0(r12)
 800800c:	39000015 	stw	r4,0(r7)
 8008010:	53800017 	ldw	r14,0(r10)
 8008014:	6fc00015 	stw	ra,0(r13)
 8008018:	5bc00015 	stw	r15,0(r11)
 800801c:	4b800015 	stw	r14,0(r9)
 8008020:	18c00404 	addi	r3,r3,16
 8008024:	39c00404 	addi	r7,r7,16
 8008028:	42000404 	addi	r8,r8,16
 800802c:	6b400404 	addi	r13,r13,16
 8008030:	63000404 	addi	r12,r12,16
 8008034:	5ac00404 	addi	r11,r11,16
 8008038:	52800404 	addi	r10,r10,16
 800803c:	4a400404 	addi	r9,r9,16
 8008040:	1c3fef1e 	bne	r3,r16,8008000 <memcpy+0x5c>
 8008044:	89c00044 	addi	r7,r17,1
 8008048:	380e913a 	slli	r7,r7,4
 800804c:	310003cc 	andi	r4,r6,15
 8008050:	02c000c4 	movi	r11,3
 8008054:	11c7883a 	add	r3,r2,r7
 8008058:	29cb883a 	add	r5,r5,r7
 800805c:	5900212e 	bgeu	r11,r4,80080e4 <memcpy+0x140>
 8008060:	1813883a 	mov	r9,r3
 8008064:	2811883a 	mov	r8,r5
 8008068:	200f883a 	mov	r7,r4
 800806c:	42800017 	ldw	r10,0(r8)
 8008070:	4a400104 	addi	r9,r9,4
 8008074:	39ffff04 	addi	r7,r7,-4
 8008078:	4abfff15 	stw	r10,-4(r9)
 800807c:	42000104 	addi	r8,r8,4
 8008080:	59fffa36 	bltu	r11,r7,800806c <memcpy+0xc8>
 8008084:	213fff04 	addi	r4,r4,-4
 8008088:	2008d0ba 	srli	r4,r4,2
 800808c:	318000cc 	andi	r6,r6,3
 8008090:	21000044 	addi	r4,r4,1
 8008094:	2109883a 	add	r4,r4,r4
 8008098:	2109883a 	add	r4,r4,r4
 800809c:	1907883a 	add	r3,r3,r4
 80080a0:	290b883a 	add	r5,r5,r4
 80080a4:	30000626 	beq	r6,zero,80080c0 <memcpy+0x11c>
 80080a8:	198d883a 	add	r6,r3,r6
 80080ac:	29c00003 	ldbu	r7,0(r5)
 80080b0:	18c00044 	addi	r3,r3,1
 80080b4:	29400044 	addi	r5,r5,1
 80080b8:	19ffffc5 	stb	r7,-1(r3)
 80080bc:	19bffb1e 	bne	r3,r6,80080ac <memcpy+0x108>
 80080c0:	dfc00217 	ldw	ra,8(sp)
 80080c4:	dc400117 	ldw	r17,4(sp)
 80080c8:	dc000017 	ldw	r16,0(sp)
 80080cc:	dec00304 	addi	sp,sp,12
 80080d0:	f800283a 	ret
 80080d4:	2007883a 	mov	r3,r4
 80080d8:	003ff206 	br	80080a4 <memcpy+0x100>
 80080dc:	2007883a 	mov	r3,r4
 80080e0:	003ff106 	br	80080a8 <memcpy+0x104>
 80080e4:	200d883a 	mov	r6,r4
 80080e8:	003fee06 	br	80080a4 <memcpy+0x100>

080080ec <memset>:
 80080ec:	20c000cc 	andi	r3,r4,3
 80080f0:	2005883a 	mov	r2,r4
 80080f4:	18004426 	beq	r3,zero,8008208 <memset+0x11c>
 80080f8:	31ffffc4 	addi	r7,r6,-1
 80080fc:	30004026 	beq	r6,zero,8008200 <memset+0x114>
 8008100:	2813883a 	mov	r9,r5
 8008104:	200d883a 	mov	r6,r4
 8008108:	2007883a 	mov	r3,r4
 800810c:	00000406 	br	8008120 <memset+0x34>
 8008110:	3a3fffc4 	addi	r8,r7,-1
 8008114:	31800044 	addi	r6,r6,1
 8008118:	38003926 	beq	r7,zero,8008200 <memset+0x114>
 800811c:	400f883a 	mov	r7,r8
 8008120:	18c00044 	addi	r3,r3,1
 8008124:	32400005 	stb	r9,0(r6)
 8008128:	1a0000cc 	andi	r8,r3,3
 800812c:	403ff81e 	bne	r8,zero,8008110 <memset+0x24>
 8008130:	010000c4 	movi	r4,3
 8008134:	21c02d2e 	bgeu	r4,r7,80081ec <memset+0x100>
 8008138:	29003fcc 	andi	r4,r5,255
 800813c:	200c923a 	slli	r6,r4,8
 8008140:	3108b03a 	or	r4,r6,r4
 8008144:	200c943a 	slli	r6,r4,16
 8008148:	218cb03a 	or	r6,r4,r6
 800814c:	010003c4 	movi	r4,15
 8008150:	21c0182e 	bgeu	r4,r7,80081b4 <memset+0xc8>
 8008154:	3b3ffc04 	addi	r12,r7,-16
 8008158:	6018d13a 	srli	r12,r12,4
 800815c:	1a000104 	addi	r8,r3,4
 8008160:	1ac00204 	addi	r11,r3,8
 8008164:	6008913a 	slli	r4,r12,4
 8008168:	1a800304 	addi	r10,r3,12
 800816c:	1813883a 	mov	r9,r3
 8008170:	21000504 	addi	r4,r4,20
 8008174:	1909883a 	add	r4,r3,r4
 8008178:	49800015 	stw	r6,0(r9)
 800817c:	41800015 	stw	r6,0(r8)
 8008180:	59800015 	stw	r6,0(r11)
 8008184:	51800015 	stw	r6,0(r10)
 8008188:	42000404 	addi	r8,r8,16
 800818c:	4a400404 	addi	r9,r9,16
 8008190:	5ac00404 	addi	r11,r11,16
 8008194:	52800404 	addi	r10,r10,16
 8008198:	413ff71e 	bne	r8,r4,8008178 <memset+0x8c>
 800819c:	63000044 	addi	r12,r12,1
 80081a0:	6018913a 	slli	r12,r12,4
 80081a4:	39c003cc 	andi	r7,r7,15
 80081a8:	010000c4 	movi	r4,3
 80081ac:	1b07883a 	add	r3,r3,r12
 80081b0:	21c00e2e 	bgeu	r4,r7,80081ec <memset+0x100>
 80081b4:	1813883a 	mov	r9,r3
 80081b8:	3811883a 	mov	r8,r7
 80081bc:	010000c4 	movi	r4,3
 80081c0:	49800015 	stw	r6,0(r9)
 80081c4:	423fff04 	addi	r8,r8,-4
 80081c8:	4a400104 	addi	r9,r9,4
 80081cc:	223ffc36 	bltu	r4,r8,80081c0 <memset+0xd4>
 80081d0:	393fff04 	addi	r4,r7,-4
 80081d4:	2008d0ba 	srli	r4,r4,2
 80081d8:	39c000cc 	andi	r7,r7,3
 80081dc:	21000044 	addi	r4,r4,1
 80081e0:	2109883a 	add	r4,r4,r4
 80081e4:	2109883a 	add	r4,r4,r4
 80081e8:	1907883a 	add	r3,r3,r4
 80081ec:	38000526 	beq	r7,zero,8008204 <memset+0x118>
 80081f0:	19cf883a 	add	r7,r3,r7
 80081f4:	19400005 	stb	r5,0(r3)
 80081f8:	18c00044 	addi	r3,r3,1
 80081fc:	38fffd1e 	bne	r7,r3,80081f4 <memset+0x108>
 8008200:	f800283a 	ret
 8008204:	f800283a 	ret
 8008208:	2007883a 	mov	r3,r4
 800820c:	300f883a 	mov	r7,r6
 8008210:	003fc706 	br	8008130 <memset+0x44>

08008214 <_printf_r>:
 8008214:	defffd04 	addi	sp,sp,-12
 8008218:	2805883a 	mov	r2,r5
 800821c:	dfc00015 	stw	ra,0(sp)
 8008220:	d9800115 	stw	r6,4(sp)
 8008224:	d9c00215 	stw	r7,8(sp)
 8008228:	21400217 	ldw	r5,8(r4)
 800822c:	d9c00104 	addi	r7,sp,4
 8008230:	100d883a 	mov	r6,r2
 8008234:	80086b00 	call	80086b0 <___vfprintf_internal_r>
 8008238:	dfc00017 	ldw	ra,0(sp)
 800823c:	dec00304 	addi	sp,sp,12
 8008240:	f800283a 	ret

08008244 <printf>:
 8008244:	defffc04 	addi	sp,sp,-16
 8008248:	dfc00015 	stw	ra,0(sp)
 800824c:	d9400115 	stw	r5,4(sp)
 8008250:	d9800215 	stw	r6,8(sp)
 8008254:	d9c00315 	stw	r7,12(sp)
 8008258:	008200b4 	movhi	r2,2050
 800825c:	10a85804 	addi	r2,r2,-24224
 8008260:	10800017 	ldw	r2,0(r2)
 8008264:	200b883a 	mov	r5,r4
 8008268:	d9800104 	addi	r6,sp,4
 800826c:	11000217 	ldw	r4,8(r2)
 8008270:	800a98c0 	call	800a98c <__vfprintf_internal>
 8008274:	dfc00017 	ldw	ra,0(sp)
 8008278:	dec00404 	addi	sp,sp,16
 800827c:	f800283a 	ret

08008280 <_putchar_r>:
 8008280:	21800217 	ldw	r6,8(r4)
 8008284:	800f33c1 	jmpi	800f33c <_putc_r>

08008288 <putchar>:
 8008288:	008200b4 	movhi	r2,2050
 800828c:	10a85804 	addi	r2,r2,-24224
 8008290:	200b883a 	mov	r5,r4
 8008294:	11000017 	ldw	r4,0(r2)
 8008298:	21800217 	ldw	r6,8(r4)
 800829c:	800f33c1 	jmpi	800f33c <_putc_r>

080082a0 <_puts_r>:
 80082a0:	defff604 	addi	sp,sp,-40
 80082a4:	dc000715 	stw	r16,28(sp)
 80082a8:	2021883a 	mov	r16,r4
 80082ac:	2809883a 	mov	r4,r5
 80082b0:	dc400815 	stw	r17,32(sp)
 80082b4:	dfc00915 	stw	ra,36(sp)
 80082b8:	2823883a 	mov	r17,r5
 80082bc:	80084040 	call	8008404 <strlen>
 80082c0:	10c00044 	addi	r3,r2,1
 80082c4:	d8800115 	stw	r2,4(sp)
 80082c8:	008200b4 	movhi	r2,2050
 80082cc:	10a0ca04 	addi	r2,r2,-31960
 80082d0:	d8800215 	stw	r2,8(sp)
 80082d4:	00800044 	movi	r2,1
 80082d8:	d8800315 	stw	r2,12(sp)
 80082dc:	00800084 	movi	r2,2
 80082e0:	dc400015 	stw	r17,0(sp)
 80082e4:	d8c00615 	stw	r3,24(sp)
 80082e8:	dec00415 	stw	sp,16(sp)
 80082ec:	d8800515 	stw	r2,20(sp)
 80082f0:	80000226 	beq	r16,zero,80082fc <_puts_r+0x5c>
 80082f4:	80800e17 	ldw	r2,56(r16)
 80082f8:	10001426 	beq	r2,zero,800834c <_puts_r+0xac>
 80082fc:	81400217 	ldw	r5,8(r16)
 8008300:	2880030b 	ldhu	r2,12(r5)
 8008304:	10c8000c 	andi	r3,r2,8192
 8008308:	1800061e 	bne	r3,zero,8008324 <_puts_r+0x84>
 800830c:	29001917 	ldw	r4,100(r5)
 8008310:	00f7ffc4 	movi	r3,-8193
 8008314:	10880014 	ori	r2,r2,8192
 8008318:	20c6703a 	and	r3,r4,r3
 800831c:	2880030d 	sth	r2,12(r5)
 8008320:	28c01915 	stw	r3,100(r5)
 8008324:	d9800404 	addi	r6,sp,16
 8008328:	8009883a 	mov	r4,r16
 800832c:	800cef40 	call	800cef4 <__sfvwrite_r>
 8008330:	1000091e 	bne	r2,zero,8008358 <_puts_r+0xb8>
 8008334:	00800284 	movi	r2,10
 8008338:	dfc00917 	ldw	ra,36(sp)
 800833c:	dc400817 	ldw	r17,32(sp)
 8008340:	dc000717 	ldw	r16,28(sp)
 8008344:	dec00a04 	addi	sp,sp,40
 8008348:	f800283a 	ret
 800834c:	8009883a 	mov	r4,r16
 8008350:	800ca700 	call	800ca70 <__sinit>
 8008354:	003fe906 	br	80082fc <_puts_r+0x5c>
 8008358:	00bfffc4 	movi	r2,-1
 800835c:	003ff606 	br	8008338 <_puts_r+0x98>

08008360 <puts>:
 8008360:	008200b4 	movhi	r2,2050
 8008364:	10a85804 	addi	r2,r2,-24224
 8008368:	200b883a 	mov	r5,r4
 800836c:	11000017 	ldw	r4,0(r2)
 8008370:	80082a01 	jmpi	80082a0 <_puts_r>

08008374 <strcpy>:
 8008374:	2906b03a 	or	r3,r5,r4
 8008378:	18c000cc 	andi	r3,r3,3
 800837c:	2005883a 	mov	r2,r4
 8008380:	1800161e 	bne	r3,zero,80083dc <strcpy+0x68>
 8008384:	29c00017 	ldw	r7,0(r5)
 8008388:	02ffbff4 	movhi	r11,65279
 800838c:	5affbfc4 	addi	r11,r11,-257
 8008390:	02a02074 	movhi	r10,32897
 8008394:	01c6303a 	nor	r3,zero,r7
 8008398:	3ac9883a 	add	r4,r7,r11
 800839c:	52a02004 	addi	r10,r10,-32640
 80083a0:	20c6703a 	and	r3,r4,r3
 80083a4:	1a86703a 	and	r3,r3,r10
 80083a8:	18000c1e 	bne	r3,zero,80083dc <strcpy+0x68>
 80083ac:	1011883a 	mov	r8,r2
 80083b0:	41c00015 	stw	r7,0(r8)
 80083b4:	29400104 	addi	r5,r5,4
 80083b8:	29c00017 	ldw	r7,0(r5)
 80083bc:	41800104 	addi	r6,r8,4
 80083c0:	3011883a 	mov	r8,r6
 80083c4:	3ad3883a 	add	r9,r7,r11
 80083c8:	01c6303a 	nor	r3,zero,r7
 80083cc:	48c6703a 	and	r3,r9,r3
 80083d0:	1a86703a 	and	r3,r3,r10
 80083d4:	183ff626 	beq	r3,zero,80083b0 <strcpy+0x3c>
 80083d8:	00000106 	br	80083e0 <strcpy+0x6c>
 80083dc:	100d883a 	mov	r6,r2
 80083e0:	28c00003 	ldbu	r3,0(r5)
 80083e4:	31800044 	addi	r6,r6,1
 80083e8:	29400044 	addi	r5,r5,1
 80083ec:	30ffffc5 	stb	r3,-1(r6)
 80083f0:	18c03fcc 	andi	r3,r3,255
 80083f4:	18c0201c 	xori	r3,r3,128
 80083f8:	18ffe004 	addi	r3,r3,-128
 80083fc:	183ff81e 	bne	r3,zero,80083e0 <strcpy+0x6c>
 8008400:	f800283a 	ret

08008404 <strlen>:
 8008404:	208000cc 	andi	r2,r4,3
 8008408:	10002026 	beq	r2,zero,800848c <strlen+0x88>
 800840c:	20800007 	ldb	r2,0(r4)
 8008410:	10002026 	beq	r2,zero,8008494 <strlen+0x90>
 8008414:	2005883a 	mov	r2,r4
 8008418:	00000206 	br	8008424 <strlen+0x20>
 800841c:	10c00007 	ldb	r3,0(r2)
 8008420:	18001826 	beq	r3,zero,8008484 <strlen+0x80>
 8008424:	10800044 	addi	r2,r2,1
 8008428:	10c000cc 	andi	r3,r2,3
 800842c:	183ffb1e 	bne	r3,zero,800841c <strlen+0x18>
 8008430:	10c00017 	ldw	r3,0(r2)
 8008434:	01ffbff4 	movhi	r7,65279
 8008438:	39ffbfc4 	addi	r7,r7,-257
 800843c:	00ca303a 	nor	r5,zero,r3
 8008440:	01a02074 	movhi	r6,32897
 8008444:	19c7883a 	add	r3,r3,r7
 8008448:	31a02004 	addi	r6,r6,-32640
 800844c:	1946703a 	and	r3,r3,r5
 8008450:	1986703a 	and	r3,r3,r6
 8008454:	1800091e 	bne	r3,zero,800847c <strlen+0x78>
 8008458:	10800104 	addi	r2,r2,4
 800845c:	10c00017 	ldw	r3,0(r2)
 8008460:	19cb883a 	add	r5,r3,r7
 8008464:	00c6303a 	nor	r3,zero,r3
 8008468:	28c6703a 	and	r3,r5,r3
 800846c:	1986703a 	and	r3,r3,r6
 8008470:	183ff926 	beq	r3,zero,8008458 <strlen+0x54>
 8008474:	00000106 	br	800847c <strlen+0x78>
 8008478:	10800044 	addi	r2,r2,1
 800847c:	10c00007 	ldb	r3,0(r2)
 8008480:	183ffd1e 	bne	r3,zero,8008478 <strlen+0x74>
 8008484:	1105c83a 	sub	r2,r2,r4
 8008488:	f800283a 	ret
 800848c:	2005883a 	mov	r2,r4
 8008490:	003fe706 	br	8008430 <strlen+0x2c>
 8008494:	0005883a 	mov	r2,zero
 8008498:	f800283a 	ret

0800849c <strncmp>:
 800849c:	30003126 	beq	r6,zero,8008564 <strncmp+0xc8>
 80084a0:	2144b03a 	or	r2,r4,r5
 80084a4:	108000cc 	andi	r2,r2,3
 80084a8:	10001e1e 	bne	r2,zero,8008524 <strncmp+0x88>
 80084ac:	024000c4 	movi	r9,3
 80084b0:	49801c2e 	bgeu	r9,r6,8008524 <strncmp+0x88>
 80084b4:	20800017 	ldw	r2,0(r4)
 80084b8:	28c00017 	ldw	r3,0(r5)
 80084bc:	10c0191e 	bne	r2,r3,8008524 <strncmp+0x88>
 80084c0:	31bfff04 	addi	r6,r6,-4
 80084c4:	30002726 	beq	r6,zero,8008564 <strncmp+0xc8>
 80084c8:	02ffbff4 	movhi	r11,65279
 80084cc:	5affbfc4 	addi	r11,r11,-257
 80084d0:	0086303a 	nor	r3,zero,r2
 80084d4:	02a02074 	movhi	r10,32897
 80084d8:	12c5883a 	add	r2,r2,r11
 80084dc:	52a02004 	addi	r10,r10,-32640
 80084e0:	10c4703a 	and	r2,r2,r3
 80084e4:	1284703a 	and	r2,r2,r10
 80084e8:	10000b26 	beq	r2,zero,8008518 <strncmp+0x7c>
 80084ec:	00001d06 	br	8008564 <strncmp+0xc8>
 80084f0:	20c00017 	ldw	r3,0(r4)
 80084f4:	29c00017 	ldw	r7,0(r5)
 80084f8:	1ad1883a 	add	r8,r3,r11
 80084fc:	00c4303a 	nor	r2,zero,r3
 8008500:	4084703a 	and	r2,r8,r2
 8008504:	1284703a 	and	r2,r2,r10
 8008508:	19c0061e 	bne	r3,r7,8008524 <strncmp+0x88>
 800850c:	31bfff04 	addi	r6,r6,-4
 8008510:	30001426 	beq	r6,zero,8008564 <strncmp+0xc8>
 8008514:	1000131e 	bne	r2,zero,8008564 <strncmp+0xc8>
 8008518:	21000104 	addi	r4,r4,4
 800851c:	29400104 	addi	r5,r5,4
 8008520:	49bff336 	bltu	r9,r6,80084f0 <strncmp+0x54>
 8008524:	28800007 	ldb	r2,0(r5)
 8008528:	20c00007 	ldb	r3,0(r4)
 800852c:	31bfffc4 	addi	r6,r6,-1
 8008530:	10c0081e 	bne	r2,r3,8008554 <strncmp+0xb8>
 8008534:	30000b26 	beq	r6,zero,8008564 <strncmp+0xc8>
 8008538:	10000a26 	beq	r2,zero,8008564 <strncmp+0xc8>
 800853c:	21000044 	addi	r4,r4,1
 8008540:	29400044 	addi	r5,r5,1
 8008544:	20800007 	ldb	r2,0(r4)
 8008548:	28c00007 	ldb	r3,0(r5)
 800854c:	31bfffc4 	addi	r6,r6,-1
 8008550:	10fff826 	beq	r2,r3,8008534 <strncmp+0x98>
 8008554:	20800003 	ldbu	r2,0(r4)
 8008558:	28c00003 	ldbu	r3,0(r5)
 800855c:	10c5c83a 	sub	r2,r2,r3
 8008560:	f800283a 	ret
 8008564:	0005883a 	mov	r2,zero
 8008568:	f800283a 	ret

0800856c <strncpy>:
 800856c:	2906b03a 	or	r3,r5,r4
 8008570:	18c000cc 	andi	r3,r3,3
 8008574:	2005883a 	mov	r2,r4
 8008578:	18002c1e 	bne	r3,zero,800862c <strncpy+0xc0>
 800857c:	010000c4 	movi	r4,3
 8008580:	21802a2e 	bgeu	r4,r6,800862c <strncpy+0xc0>
 8008584:	033fbff4 	movhi	r12,65279
 8008588:	02e02074 	movhi	r11,32897
 800858c:	633fbfc4 	addi	r12,r12,-257
 8008590:	5ae02004 	addi	r11,r11,-32640
 8008594:	100f883a 	mov	r7,r2
 8008598:	2a000017 	ldw	r8,0(r5)
 800859c:	3815883a 	mov	r10,r7
 80085a0:	4313883a 	add	r9,r8,r12
 80085a4:	0206303a 	nor	r3,zero,r8
 80085a8:	48c6703a 	and	r3,r9,r3
 80085ac:	1ac6703a 	and	r3,r3,r11
 80085b0:	1800261e 	bne	r3,zero,800864c <strncpy+0xe0>
 80085b4:	39c00104 	addi	r7,r7,4
 80085b8:	52000015 	stw	r8,0(r10)
 80085bc:	31bfff04 	addi	r6,r6,-4
 80085c0:	3811883a 	mov	r8,r7
 80085c4:	29400104 	addi	r5,r5,4
 80085c8:	21bff336 	bltu	r4,r6,8008598 <strncpy+0x2c>
 80085cc:	30001e26 	beq	r6,zero,8008648 <strncpy+0xdc>
 80085d0:	29c00003 	ldbu	r7,0(r5)
 80085d4:	31bfffc4 	addi	r6,r6,-1
 80085d8:	40c00044 	addi	r3,r8,1
 80085dc:	41c00005 	stb	r7,0(r8)
 80085e0:	39c03fcc 	andi	r7,r7,255
 80085e4:	39c0201c 	xori	r7,r7,128
 80085e8:	39ffe004 	addi	r7,r7,-128
 80085ec:	29400044 	addi	r5,r5,1
 80085f0:	38001026 	beq	r7,zero,8008634 <strncpy+0xc8>
 80085f4:	1811883a 	mov	r8,r3
 80085f8:	00000906 	br	8008620 <strncpy+0xb4>
 80085fc:	29c00003 	ldbu	r7,0(r5)
 8008600:	31bfffc4 	addi	r6,r6,-1
 8008604:	29400044 	addi	r5,r5,1
 8008608:	41c00005 	stb	r7,0(r8)
 800860c:	39c03fcc 	andi	r7,r7,255
 8008610:	39c0201c 	xori	r7,r7,128
 8008614:	39ffe004 	addi	r7,r7,-128
 8008618:	1811883a 	mov	r8,r3
 800861c:	38000526 	beq	r7,zero,8008634 <strncpy+0xc8>
 8008620:	18c00044 	addi	r3,r3,1
 8008624:	303ff51e 	bne	r6,zero,80085fc <strncpy+0x90>
 8008628:	f800283a 	ret
 800862c:	1011883a 	mov	r8,r2
 8008630:	003fe606 	br	80085cc <strncpy+0x60>
 8008634:	30000726 	beq	r6,zero,8008654 <strncpy+0xe8>
 8008638:	198d883a 	add	r6,r3,r6
 800863c:	18000005 	stb	zero,0(r3)
 8008640:	18c00044 	addi	r3,r3,1
 8008644:	19bffd1e 	bne	r3,r6,800863c <strncpy+0xd0>
 8008648:	f800283a 	ret
 800864c:	3811883a 	mov	r8,r7
 8008650:	003fdf06 	br	80085d0 <strncpy+0x64>
 8008654:	f800283a 	ret

08008658 <time>:
 8008658:	008200b4 	movhi	r2,2050
 800865c:	defffc04 	addi	sp,sp,-16
 8008660:	10a85804 	addi	r2,r2,-24224
 8008664:	dc000215 	stw	r16,8(sp)
 8008668:	2021883a 	mov	r16,r4
 800866c:	11000017 	ldw	r4,0(r2)
 8008670:	000d883a 	mov	r6,zero
 8008674:	d80b883a 	mov	r5,sp
 8008678:	dfc00315 	stw	ra,12(sp)
 800867c:	800d5440 	call	800d544 <_gettimeofday_r>
 8008680:	10000716 	blt	r2,zero,80086a0 <time+0x48>
 8008684:	d8800017 	ldw	r2,0(sp)
 8008688:	80000126 	beq	r16,zero,8008690 <time+0x38>
 800868c:	80800015 	stw	r2,0(r16)
 8008690:	dfc00317 	ldw	ra,12(sp)
 8008694:	dc000217 	ldw	r16,8(sp)
 8008698:	dec00404 	addi	sp,sp,16
 800869c:	f800283a 	ret
 80086a0:	00bfffc4 	movi	r2,-1
 80086a4:	003ffa06 	br	8008690 <time+0x38>

080086a8 <_times_r>:
 80086a8:	2809883a 	mov	r4,r5
 80086ac:	8015dbc1 	jmpi	8015dbc <times>

080086b0 <___vfprintf_internal_r>:
 80086b0:	deffb804 	addi	sp,sp,-288
 80086b4:	dfc04715 	stw	ra,284(sp)
 80086b8:	ddc04515 	stw	r23,276(sp)
 80086bc:	dd404315 	stw	r21,268(sp)
 80086c0:	d9002d15 	stw	r4,180(sp)
 80086c4:	282f883a 	mov	r23,r5
 80086c8:	302b883a 	mov	r21,r6
 80086cc:	d9c02e15 	stw	r7,184(sp)
 80086d0:	df004615 	stw	fp,280(sp)
 80086d4:	dd804415 	stw	r22,272(sp)
 80086d8:	dd004215 	stw	r20,264(sp)
 80086dc:	dcc04115 	stw	r19,260(sp)
 80086e0:	dc804015 	stw	r18,256(sp)
 80086e4:	dc403f15 	stw	r17,252(sp)
 80086e8:	dc003e15 	stw	r16,248(sp)
 80086ec:	800d64c0 	call	800d64c <_localeconv_r>
 80086f0:	10800017 	ldw	r2,0(r2)
 80086f4:	1009883a 	mov	r4,r2
 80086f8:	d8803415 	stw	r2,208(sp)
 80086fc:	80084040 	call	8008404 <strlen>
 8008700:	d8803715 	stw	r2,220(sp)
 8008704:	d8802d17 	ldw	r2,180(sp)
 8008708:	10000226 	beq	r2,zero,8008714 <___vfprintf_internal_r+0x64>
 800870c:	10800e17 	ldw	r2,56(r2)
 8008710:	1000fb26 	beq	r2,zero,8008b00 <___vfprintf_internal_r+0x450>
 8008714:	b880030b 	ldhu	r2,12(r23)
 8008718:	10c8000c 	andi	r3,r2,8192
 800871c:	1800061e 	bne	r3,zero,8008738 <___vfprintf_internal_r+0x88>
 8008720:	b9001917 	ldw	r4,100(r23)
 8008724:	00f7ffc4 	movi	r3,-8193
 8008728:	10880014 	ori	r2,r2,8192
 800872c:	20c6703a 	and	r3,r4,r3
 8008730:	b880030d 	sth	r2,12(r23)
 8008734:	b8c01915 	stw	r3,100(r23)
 8008738:	10c0020c 	andi	r3,r2,8
 800873c:	1800c326 	beq	r3,zero,8008a4c <___vfprintf_internal_r+0x39c>
 8008740:	b8c00417 	ldw	r3,16(r23)
 8008744:	1800c126 	beq	r3,zero,8008a4c <___vfprintf_internal_r+0x39c>
 8008748:	1080068c 	andi	r2,r2,26
 800874c:	00c00284 	movi	r3,10
 8008750:	10c0c626 	beq	r2,r3,8008a6c <___vfprintf_internal_r+0x3bc>
 8008754:	d8c00404 	addi	r3,sp,16
 8008758:	050200b4 	movhi	r20,2050
 800875c:	d9001e04 	addi	r4,sp,120
 8008760:	a520db84 	addi	r20,r20,-31890
 8008764:	d8c01e15 	stw	r3,120(sp)
 8008768:	d8002015 	stw	zero,128(sp)
 800876c:	d8001f15 	stw	zero,124(sp)
 8008770:	d8003315 	stw	zero,204(sp)
 8008774:	d8003615 	stw	zero,216(sp)
 8008778:	d8003815 	stw	zero,224(sp)
 800877c:	1811883a 	mov	r8,r3
 8008780:	d8003915 	stw	zero,228(sp)
 8008784:	d8003a15 	stw	zero,232(sp)
 8008788:	d8002f15 	stw	zero,188(sp)
 800878c:	d9002815 	stw	r4,160(sp)
 8008790:	a8800007 	ldb	r2,0(r21)
 8008794:	10028b26 	beq	r2,zero,80091c4 <___vfprintf_internal_r+0xb14>
 8008798:	00c00944 	movi	r3,37
 800879c:	a823883a 	mov	r17,r21
 80087a0:	10c0021e 	bne	r2,r3,80087ac <___vfprintf_internal_r+0xfc>
 80087a4:	00001406 	br	80087f8 <___vfprintf_internal_r+0x148>
 80087a8:	10c00326 	beq	r2,r3,80087b8 <___vfprintf_internal_r+0x108>
 80087ac:	8c400044 	addi	r17,r17,1
 80087b0:	88800007 	ldb	r2,0(r17)
 80087b4:	103ffc1e 	bne	r2,zero,80087a8 <___vfprintf_internal_r+0xf8>
 80087b8:	8d61c83a 	sub	r16,r17,r21
 80087bc:	80000e26 	beq	r16,zero,80087f8 <___vfprintf_internal_r+0x148>
 80087c0:	d8c02017 	ldw	r3,128(sp)
 80087c4:	d8801f17 	ldw	r2,124(sp)
 80087c8:	45400015 	stw	r21,0(r8)
 80087cc:	1c07883a 	add	r3,r3,r16
 80087d0:	10800044 	addi	r2,r2,1
 80087d4:	d8c02015 	stw	r3,128(sp)
 80087d8:	44000115 	stw	r16,4(r8)
 80087dc:	d8801f15 	stw	r2,124(sp)
 80087e0:	00c001c4 	movi	r3,7
 80087e4:	1880a916 	blt	r3,r2,8008a8c <___vfprintf_internal_r+0x3dc>
 80087e8:	42000204 	addi	r8,r8,8
 80087ec:	d9402f17 	ldw	r5,188(sp)
 80087f0:	2c0b883a 	add	r5,r5,r16
 80087f4:	d9402f15 	stw	r5,188(sp)
 80087f8:	88800007 	ldb	r2,0(r17)
 80087fc:	1000aa26 	beq	r2,zero,8008aa8 <___vfprintf_internal_r+0x3f8>
 8008800:	8d400044 	addi	r21,r17,1
 8008804:	8c400047 	ldb	r17,1(r17)
 8008808:	0021883a 	mov	r16,zero
 800880c:	00bfffc4 	movi	r2,-1
 8008810:	0025883a 	mov	r18,zero
 8008814:	dc002905 	stb	r16,164(sp)
 8008818:	d8002785 	stb	zero,158(sp)
 800881c:	d8002b05 	stb	zero,172(sp)
 8008820:	d8802a15 	stw	r2,168(sp)
 8008824:	d8003115 	stw	zero,196(sp)
 8008828:	04c01604 	movi	r19,88
 800882c:	05800244 	movi	r22,9
 8008830:	9021883a 	mov	r16,r18
 8008834:	4039883a 	mov	fp,r8
 8008838:	ad400044 	addi	r21,r21,1
 800883c:	88bff804 	addi	r2,r17,-32
 8008840:	98833236 	bltu	r19,r2,800950c <___vfprintf_internal_r+0xe5c>
 8008844:	100490ba 	slli	r2,r2,2
 8008848:	00c20074 	movhi	r3,2049
 800884c:	18e21704 	addi	r3,r3,-30628
 8008850:	10c5883a 	add	r2,r2,r3
 8008854:	10800017 	ldw	r2,0(r2)
 8008858:	1000683a 	jmp	r2
 800885c:	08009404 	addi	zero,at,592
 8008860:	0800950c 	andi	zero,at,596
 8008864:	0800950c 	andi	zero,at,596
 8008868:	08009424 	muli	zero,at,592
 800886c:	0800950c 	andi	zero,at,596
 8008870:	0800950c 	andi	zero,at,596
 8008874:	0800950c 	andi	zero,at,596
 8008878:	0800950c 	andi	zero,at,596
 800887c:	0800950c 	andi	zero,at,596
 8008880:	0800950c 	andi	zero,at,596
 8008884:	08008b0c 	andi	zero,at,556
 8008888:	08009314 	ori	zero,at,588
 800888c:	0800950c 	andi	zero,at,596
 8008890:	080089d0 	cmplti	zero,at,551
 8008894:	08008b30 	cmpltui	zero,at,556
 8008898:	0800950c 	andi	zero,at,596
 800889c:	08008b80 	call	8008b8 <__alt_mem_onchip_memory2_0+0x8008b8>
 80088a0:	08008b8c 	andi	zero,at,558
 80088a4:	08008b8c 	andi	zero,at,558
 80088a8:	08008b8c 	andi	zero,at,558
 80088ac:	08008b8c 	andi	zero,at,558
 80088b0:	08008b8c 	andi	zero,at,558
 80088b4:	08008b8c 	andi	zero,at,558
 80088b8:	08008b8c 	andi	zero,at,558
 80088bc:	08008b8c 	andi	zero,at,558
 80088c0:	08008b8c 	andi	zero,at,558
 80088c4:	0800950c 	andi	zero,at,596
 80088c8:	0800950c 	andi	zero,at,596
 80088cc:	0800950c 	andi	zero,at,596
 80088d0:	0800950c 	andi	zero,at,596
 80088d4:	0800950c 	andi	zero,at,596
 80088d8:	0800950c 	andi	zero,at,596
 80088dc:	0800950c 	andi	zero,at,596
 80088e0:	0800950c 	andi	zero,at,596
 80088e4:	0800950c 	andi	zero,at,596
 80088e8:	0800950c 	andi	zero,at,596
 80088ec:	08008bc8 	cmpgei	zero,at,559
 80088f0:	08008c90 	cmplti	zero,at,562
 80088f4:	0800950c 	andi	zero,at,596
 80088f8:	08008c90 	cmplti	zero,at,562
 80088fc:	0800950c 	andi	zero,at,596
 8008900:	0800950c 	andi	zero,at,596
 8008904:	0800950c 	andi	zero,at,596
 8008908:	0800950c 	andi	zero,at,596
 800890c:	08008d3c 	xorhi	zero,at,564
 8008910:	0800950c 	andi	zero,at,596
 8008914:	0800950c 	andi	zero,at,596
 8008918:	08008d48 	cmpgei	zero,at,565
 800891c:	0800950c 	andi	zero,at,596
 8008920:	0800950c 	andi	zero,at,596
 8008924:	0800950c 	andi	zero,at,596
 8008928:	0800950c 	andi	zero,at,596
 800892c:	0800950c 	andi	zero,at,596
 8008930:	080091cc 	andi	zero,at,583
 8008934:	0800950c 	andi	zero,at,596
 8008938:	0800950c 	andi	zero,at,596
 800893c:	08009238 	rdprs	zero,at,584
 8008940:	0800950c 	andi	zero,at,596
 8008944:	0800950c 	andi	zero,at,596
 8008948:	0800950c 	andi	zero,at,596
 800894c:	0800950c 	andi	zero,at,596
 8008950:	0800950c 	andi	zero,at,596
 8008954:	0800950c 	andi	zero,at,596
 8008958:	0800950c 	andi	zero,at,596
 800895c:	0800950c 	andi	zero,at,596
 8008960:	0800950c 	andi	zero,at,596
 8008964:	0800950c 	andi	zero,at,596
 8008968:	080094b0 	cmpltui	zero,at,594
 800896c:	08009430 	cmpltui	zero,at,592
 8008970:	08008c90 	cmplti	zero,at,562
 8008974:	08008c90 	cmplti	zero,at,562
 8008978:	08008c90 	cmplti	zero,at,562
 800897c:	08009450 	cmplti	zero,at,593
 8008980:	08009430 	cmpltui	zero,at,592
 8008984:	0800950c 	andi	zero,at,596
 8008988:	0800950c 	andi	zero,at,596
 800898c:	0800945c 	xori	zero,at,593
 8008990:	0800950c 	andi	zero,at,596
 8008994:	08009470 	cmpltui	zero,at,593
 8008998:	080092f4 	orhi	zero,at,587
 800899c:	080089dc 	xori	zero,at,551
 80089a0:	0800932c 	andhi	zero,at,588
 80089a4:	0800950c 	andi	zero,at,596
 80089a8:	08009338 	rdprs	zero,at,588
 80089ac:	0800950c 	andi	zero,at,596
 80089b0:	0800939c 	xori	zero,at,590
 80089b4:	0800950c 	andi	zero,at,596
 80089b8:	0800950c 	andi	zero,at,596
 80089bc:	080093bc 	xorhi	zero,at,590
 80089c0:	d8c03117 	ldw	r3,196(sp)
 80089c4:	d8802e15 	stw	r2,184(sp)
 80089c8:	00c7c83a 	sub	r3,zero,r3
 80089cc:	d8c03115 	stw	r3,196(sp)
 80089d0:	84000114 	ori	r16,r16,4
 80089d4:	ac400007 	ldb	r17,0(r21)
 80089d8:	003f9706 	br	8008838 <___vfprintf_internal_r+0x188>
 80089dc:	00800c04 	movi	r2,48
 80089e0:	d8802705 	stb	r2,156(sp)
 80089e4:	00801e04 	movi	r2,120
 80089e8:	d8802745 	stb	r2,157(sp)
 80089ec:	d9002a17 	ldw	r4,168(sp)
 80089f0:	d8802e17 	ldw	r2,184(sp)
 80089f4:	d8002785 	stb	zero,158(sp)
 80089f8:	e011883a 	mov	r8,fp
 80089fc:	10c00104 	addi	r3,r2,4
 8008a00:	14c00017 	ldw	r19,0(r2)
 8008a04:	002d883a 	mov	r22,zero
 8008a08:	80800094 	ori	r2,r16,2
 8008a0c:	2002ca16 	blt	r4,zero,8009538 <___vfprintf_internal_r+0xe88>
 8008a10:	00bfdfc4 	movi	r2,-129
 8008a14:	80a4703a 	and	r18,r16,r2
 8008a18:	d8c02e15 	stw	r3,184(sp)
 8008a1c:	94800094 	ori	r18,r18,2
 8008a20:	9802b41e 	bne	r19,zero,80094f4 <___vfprintf_internal_r+0xe44>
 8008a24:	014200b4 	movhi	r5,2050
 8008a28:	2960d404 	addi	r5,r5,-31920
 8008a2c:	d9403915 	stw	r5,228(sp)
 8008a30:	04401e04 	movi	r17,120
 8008a34:	d8802a17 	ldw	r2,168(sp)
 8008a38:	0039883a 	mov	fp,zero
 8008a3c:	1001fa26 	beq	r2,zero,8009228 <___vfprintf_internal_r+0xb78>
 8008a40:	0027883a 	mov	r19,zero
 8008a44:	002d883a 	mov	r22,zero
 8008a48:	00021906 	br	80092b0 <___vfprintf_internal_r+0xc00>
 8008a4c:	d9002d17 	ldw	r4,180(sp)
 8008a50:	b80b883a 	mov	r5,r23
 8008a54:	800aa640 	call	800aa64 <__swsetup_r>
 8008a58:	1005dc1e 	bne	r2,zero,800a1cc <___vfprintf_internal_r+0x1b1c>
 8008a5c:	b880030b 	ldhu	r2,12(r23)
 8008a60:	00c00284 	movi	r3,10
 8008a64:	1080068c 	andi	r2,r2,26
 8008a68:	10ff3a1e 	bne	r2,r3,8008754 <___vfprintf_internal_r+0xa4>
 8008a6c:	b880038f 	ldh	r2,14(r23)
 8008a70:	103f3816 	blt	r2,zero,8008754 <___vfprintf_internal_r+0xa4>
 8008a74:	d9c02e17 	ldw	r7,184(sp)
 8008a78:	d9002d17 	ldw	r4,180(sp)
 8008a7c:	a80d883a 	mov	r6,r21
 8008a80:	b80b883a 	mov	r5,r23
 8008a84:	800a9a80 	call	800a9a8 <__sbprintf>
 8008a88:	00001106 	br	8008ad0 <___vfprintf_internal_r+0x420>
 8008a8c:	d9002d17 	ldw	r4,180(sp)
 8008a90:	d9801e04 	addi	r6,sp,120
 8008a94:	b80b883a 	mov	r5,r23
 8008a98:	800fde40 	call	800fde4 <__sprint_r>
 8008a9c:	1000081e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 8008aa0:	da000404 	addi	r8,sp,16
 8008aa4:	003f5106 	br	80087ec <___vfprintf_internal_r+0x13c>
 8008aa8:	d8802017 	ldw	r2,128(sp)
 8008aac:	10000426 	beq	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 8008ab0:	d9002d17 	ldw	r4,180(sp)
 8008ab4:	d9801e04 	addi	r6,sp,120
 8008ab8:	b80b883a 	mov	r5,r23
 8008abc:	800fde40 	call	800fde4 <__sprint_r>
 8008ac0:	b880030b 	ldhu	r2,12(r23)
 8008ac4:	1080100c 	andi	r2,r2,64
 8008ac8:	1005c01e 	bne	r2,zero,800a1cc <___vfprintf_internal_r+0x1b1c>
 8008acc:	d8802f17 	ldw	r2,188(sp)
 8008ad0:	dfc04717 	ldw	ra,284(sp)
 8008ad4:	df004617 	ldw	fp,280(sp)
 8008ad8:	ddc04517 	ldw	r23,276(sp)
 8008adc:	dd804417 	ldw	r22,272(sp)
 8008ae0:	dd404317 	ldw	r21,268(sp)
 8008ae4:	dd004217 	ldw	r20,264(sp)
 8008ae8:	dcc04117 	ldw	r19,260(sp)
 8008aec:	dc804017 	ldw	r18,256(sp)
 8008af0:	dc403f17 	ldw	r17,252(sp)
 8008af4:	dc003e17 	ldw	r16,248(sp)
 8008af8:	dec04804 	addi	sp,sp,288
 8008afc:	f800283a 	ret
 8008b00:	d9002d17 	ldw	r4,180(sp)
 8008b04:	800ca700 	call	800ca70 <__sinit>
 8008b08:	003f0206 	br	8008714 <___vfprintf_internal_r+0x64>
 8008b0c:	d9002e17 	ldw	r4,184(sp)
 8008b10:	d9402e17 	ldw	r5,184(sp)
 8008b14:	21000017 	ldw	r4,0(r4)
 8008b18:	28800104 	addi	r2,r5,4
 8008b1c:	d9003115 	stw	r4,196(sp)
 8008b20:	203fa716 	blt	r4,zero,80089c0 <___vfprintf_internal_r+0x310>
 8008b24:	d8802e15 	stw	r2,184(sp)
 8008b28:	ac400007 	ldb	r17,0(r21)
 8008b2c:	003f4206 	br	8008838 <___vfprintf_internal_r+0x188>
 8008b30:	ac400007 	ldb	r17,0(r21)
 8008b34:	01000a84 	movi	r4,42
 8008b38:	a8c00044 	addi	r3,r21,1
 8008b3c:	89075826 	beq	r17,r4,800a8a0 <___vfprintf_internal_r+0x21f0>
 8008b40:	8cbff404 	addi	r18,r17,-48
 8008b44:	b486ae36 	bltu	r22,r18,800a600 <___vfprintf_internal_r+0x1f50>
 8008b48:	0009883a 	mov	r4,zero
 8008b4c:	1823883a 	mov	r17,r3
 8008b50:	01400284 	movi	r5,10
 8008b54:	8007e400 	call	8007e40 <__mulsi3>
 8008b58:	88c00007 	ldb	r3,0(r17)
 8008b5c:	1489883a 	add	r4,r2,r18
 8008b60:	8d400044 	addi	r21,r17,1
 8008b64:	1cbff404 	addi	r18,r3,-48
 8008b68:	a823883a 	mov	r17,r21
 8008b6c:	b4bff82e 	bgeu	r22,r18,8008b50 <___vfprintf_internal_r+0x4a0>
 8008b70:	1823883a 	mov	r17,r3
 8008b74:	2005f616 	blt	r4,zero,800a350 <___vfprintf_internal_r+0x1ca0>
 8008b78:	d9002a15 	stw	r4,168(sp)
 8008b7c:	003f2f06 	br	800883c <___vfprintf_internal_r+0x18c>
 8008b80:	84002014 	ori	r16,r16,128
 8008b84:	ac400007 	ldb	r17,0(r21)
 8008b88:	003f2b06 	br	8008838 <___vfprintf_internal_r+0x188>
 8008b8c:	8cbff404 	addi	r18,r17,-48
 8008b90:	d8003115 	stw	zero,196(sp)
 8008b94:	0009883a 	mov	r4,zero
 8008b98:	a823883a 	mov	r17,r21
 8008b9c:	01400284 	movi	r5,10
 8008ba0:	8007e400 	call	8007e40 <__mulsi3>
 8008ba4:	88c00007 	ldb	r3,0(r17)
 8008ba8:	9089883a 	add	r4,r18,r2
 8008bac:	ad400044 	addi	r21,r21,1
 8008bb0:	1cbff404 	addi	r18,r3,-48
 8008bb4:	a823883a 	mov	r17,r21
 8008bb8:	b4bff82e 	bgeu	r22,r18,8008b9c <___vfprintf_internal_r+0x4ec>
 8008bbc:	1823883a 	mov	r17,r3
 8008bc0:	d9003115 	stw	r4,196(sp)
 8008bc4:	003f1d06 	br	800883c <___vfprintf_internal_r+0x18c>
 8008bc8:	8025883a 	mov	r18,r16
 8008bcc:	dc002903 	ldbu	r16,164(sp)
 8008bd0:	e011883a 	mov	r8,fp
 8008bd4:	84003fcc 	andi	r16,r16,255
 8008bd8:	8007531e 	bne	r16,zero,800a928 <___vfprintf_internal_r+0x2278>
 8008bdc:	94800414 	ori	r18,r18,16
 8008be0:	9080080c 	andi	r2,r18,32
 8008be4:	1003a326 	beq	r2,zero,8009a74 <___vfprintf_internal_r+0x13c4>
 8008be8:	d9002e17 	ldw	r4,184(sp)
 8008bec:	20800117 	ldw	r2,4(r4)
 8008bf0:	24c00017 	ldw	r19,0(r4)
 8008bf4:	21000204 	addi	r4,r4,8
 8008bf8:	d9002e15 	stw	r4,184(sp)
 8008bfc:	102d883a 	mov	r22,r2
 8008c00:	10047316 	blt	r2,zero,8009dd0 <___vfprintf_internal_r+0x1720>
 8008c04:	d9002a17 	ldw	r4,168(sp)
 8008c08:	df002783 	ldbu	fp,158(sp)
 8008c0c:	2003e416 	blt	r4,zero,8009ba0 <___vfprintf_internal_r+0x14f0>
 8008c10:	00ffdfc4 	movi	r3,-129
 8008c14:	9d84b03a 	or	r2,r19,r22
 8008c18:	90e4703a 	and	r18,r18,r3
 8008c1c:	10018026 	beq	r2,zero,8009220 <___vfprintf_internal_r+0xb70>
 8008c20:	b003ab26 	beq	r22,zero,8009ad0 <___vfprintf_internal_r+0x1420>
 8008c24:	dc402915 	stw	r17,164(sp)
 8008c28:	dc001e04 	addi	r16,sp,120
 8008c2c:	b023883a 	mov	r17,r22
 8008c30:	402d883a 	mov	r22,r8
 8008c34:	9809883a 	mov	r4,r19
 8008c38:	880b883a 	mov	r5,r17
 8008c3c:	01800284 	movi	r6,10
 8008c40:	000f883a 	mov	r7,zero
 8008c44:	80123280 	call	8012328 <__umoddi3>
 8008c48:	10800c04 	addi	r2,r2,48
 8008c4c:	843fffc4 	addi	r16,r16,-1
 8008c50:	9809883a 	mov	r4,r19
 8008c54:	880b883a 	mov	r5,r17
 8008c58:	80800005 	stb	r2,0(r16)
 8008c5c:	01800284 	movi	r6,10
 8008c60:	000f883a 	mov	r7,zero
 8008c64:	8011d2c0 	call	8011d2c <__udivdi3>
 8008c68:	1027883a 	mov	r19,r2
 8008c6c:	10c4b03a 	or	r2,r2,r3
 8008c70:	1823883a 	mov	r17,r3
 8008c74:	103fef1e 	bne	r2,zero,8008c34 <___vfprintf_internal_r+0x584>
 8008c78:	d8c02817 	ldw	r3,160(sp)
 8008c7c:	dc402917 	ldw	r17,164(sp)
 8008c80:	b011883a 	mov	r8,r22
 8008c84:	1c07c83a 	sub	r3,r3,r16
 8008c88:	d8c02b15 	stw	r3,172(sp)
 8008c8c:	00005f06 	br	8008e0c <___vfprintf_internal_r+0x75c>
 8008c90:	8025883a 	mov	r18,r16
 8008c94:	dc002903 	ldbu	r16,164(sp)
 8008c98:	e011883a 	mov	r8,fp
 8008c9c:	84003fcc 	andi	r16,r16,255
 8008ca0:	80071e1e 	bne	r16,zero,800a91c <___vfprintf_internal_r+0x226c>
 8008ca4:	9080020c 	andi	r2,r18,8
 8008ca8:	1004af26 	beq	r2,zero,8009f68 <___vfprintf_internal_r+0x18b8>
 8008cac:	d9002e17 	ldw	r4,184(sp)
 8008cb0:	d9402e17 	ldw	r5,184(sp)
 8008cb4:	d8802e17 	ldw	r2,184(sp)
 8008cb8:	21000017 	ldw	r4,0(r4)
 8008cbc:	29400117 	ldw	r5,4(r5)
 8008cc0:	10800204 	addi	r2,r2,8
 8008cc4:	d9003615 	stw	r4,216(sp)
 8008cc8:	d9403815 	stw	r5,224(sp)
 8008ccc:	d8802e15 	stw	r2,184(sp)
 8008cd0:	d9003617 	ldw	r4,216(sp)
 8008cd4:	d9403817 	ldw	r5,224(sp)
 8008cd8:	da003d15 	stw	r8,244(sp)
 8008cdc:	04000044 	movi	r16,1
 8008ce0:	800fa080 	call	800fa08 <__fpclassifyd>
 8008ce4:	da003d17 	ldw	r8,244(sp)
 8008ce8:	1404441e 	bne	r2,r16,8009dfc <___vfprintf_internal_r+0x174c>
 8008cec:	d9003617 	ldw	r4,216(sp)
 8008cf0:	d9403817 	ldw	r5,224(sp)
 8008cf4:	000d883a 	mov	r6,zero
 8008cf8:	000f883a 	mov	r7,zero
 8008cfc:	8013ccc0 	call	8013ccc <__ledf2>
 8008d00:	da003d17 	ldw	r8,244(sp)
 8008d04:	1005e316 	blt	r2,zero,800a494 <___vfprintf_internal_r+0x1de4>
 8008d08:	df002783 	ldbu	fp,158(sp)
 8008d0c:	008011c4 	movi	r2,71
 8008d10:	1445580e 	bge	r2,r17,800a274 <___vfprintf_internal_r+0x1bc4>
 8008d14:	040200b4 	movhi	r16,2050
 8008d18:	8420cc04 	addi	r16,r16,-31952
 8008d1c:	00c000c4 	movi	r3,3
 8008d20:	00bfdfc4 	movi	r2,-129
 8008d24:	d8c02915 	stw	r3,164(sp)
 8008d28:	90a4703a 	and	r18,r18,r2
 8008d2c:	d8c02b15 	stw	r3,172(sp)
 8008d30:	d8002a15 	stw	zero,168(sp)
 8008d34:	d8003215 	stw	zero,200(sp)
 8008d38:	00003a06 	br	8008e24 <___vfprintf_internal_r+0x774>
 8008d3c:	84000214 	ori	r16,r16,8
 8008d40:	ac400007 	ldb	r17,0(r21)
 8008d44:	003ebc06 	br	8008838 <___vfprintf_internal_r+0x188>
 8008d48:	8025883a 	mov	r18,r16
 8008d4c:	dc002903 	ldbu	r16,164(sp)
 8008d50:	e011883a 	mov	r8,fp
 8008d54:	84003fcc 	andi	r16,r16,255
 8008d58:	8007001e 	bne	r16,zero,800a95c <___vfprintf_internal_r+0x22ac>
 8008d5c:	94800414 	ori	r18,r18,16
 8008d60:	9080080c 	andi	r2,r18,32
 8008d64:	1002fa26 	beq	r2,zero,8009950 <___vfprintf_internal_r+0x12a0>
 8008d68:	d9002e17 	ldw	r4,184(sp)
 8008d6c:	d9402a17 	ldw	r5,168(sp)
 8008d70:	d8002785 	stb	zero,158(sp)
 8008d74:	20800204 	addi	r2,r4,8
 8008d78:	24c00017 	ldw	r19,0(r4)
 8008d7c:	25800117 	ldw	r22,4(r4)
 8008d80:	2804b116 	blt	r5,zero,800a048 <___vfprintf_internal_r+0x1998>
 8008d84:	013fdfc4 	movi	r4,-129
 8008d88:	9d86b03a 	or	r3,r19,r22
 8008d8c:	d8802e15 	stw	r2,184(sp)
 8008d90:	9124703a 	and	r18,r18,r4
 8008d94:	1802fb1e 	bne	r3,zero,8009984 <___vfprintf_internal_r+0x12d4>
 8008d98:	d8c02a17 	ldw	r3,168(sp)
 8008d9c:	0039883a 	mov	fp,zero
 8008da0:	1805e526 	beq	r3,zero,800a538 <___vfprintf_internal_r+0x1e88>
 8008da4:	0027883a 	mov	r19,zero
 8008da8:	002d883a 	mov	r22,zero
 8008dac:	dc001e04 	addi	r16,sp,120
 8008db0:	9806d0fa 	srli	r3,r19,3
 8008db4:	b008977a 	slli	r4,r22,29
 8008db8:	b02cd0fa 	srli	r22,r22,3
 8008dbc:	9cc001cc 	andi	r19,r19,7
 8008dc0:	98800c04 	addi	r2,r19,48
 8008dc4:	843fffc4 	addi	r16,r16,-1
 8008dc8:	20e6b03a 	or	r19,r4,r3
 8008dcc:	80800005 	stb	r2,0(r16)
 8008dd0:	9d86b03a 	or	r3,r19,r22
 8008dd4:	183ff61e 	bne	r3,zero,8008db0 <___vfprintf_internal_r+0x700>
 8008dd8:	90c0004c 	andi	r3,r18,1
 8008ddc:	18014126 	beq	r3,zero,80092e4 <___vfprintf_internal_r+0xc34>
 8008de0:	10803fcc 	andi	r2,r2,255
 8008de4:	1080201c 	xori	r2,r2,128
 8008de8:	10bfe004 	addi	r2,r2,-128
 8008dec:	00c00c04 	movi	r3,48
 8008df0:	10c13c26 	beq	r2,r3,80092e4 <___vfprintf_internal_r+0xc34>
 8008df4:	80ffffc5 	stb	r3,-1(r16)
 8008df8:	d8c02817 	ldw	r3,160(sp)
 8008dfc:	80bfffc4 	addi	r2,r16,-1
 8008e00:	1021883a 	mov	r16,r2
 8008e04:	1887c83a 	sub	r3,r3,r2
 8008e08:	d8c02b15 	stw	r3,172(sp)
 8008e0c:	d8802b17 	ldw	r2,172(sp)
 8008e10:	d9002a17 	ldw	r4,168(sp)
 8008e14:	1100010e 	bge	r2,r4,8008e1c <___vfprintf_internal_r+0x76c>
 8008e18:	2005883a 	mov	r2,r4
 8008e1c:	d8802915 	stw	r2,164(sp)
 8008e20:	d8003215 	stw	zero,200(sp)
 8008e24:	e7003fcc 	andi	fp,fp,255
 8008e28:	e700201c 	xori	fp,fp,128
 8008e2c:	e73fe004 	addi	fp,fp,-128
 8008e30:	e0000326 	beq	fp,zero,8008e40 <___vfprintf_internal_r+0x790>
 8008e34:	d8c02917 	ldw	r3,164(sp)
 8008e38:	18c00044 	addi	r3,r3,1
 8008e3c:	d8c02915 	stw	r3,164(sp)
 8008e40:	90c0008c 	andi	r3,r18,2
 8008e44:	d8c02c15 	stw	r3,176(sp)
 8008e48:	18000326 	beq	r3,zero,8008e58 <___vfprintf_internal_r+0x7a8>
 8008e4c:	d8c02917 	ldw	r3,164(sp)
 8008e50:	18c00084 	addi	r3,r3,2
 8008e54:	d8c02915 	stw	r3,164(sp)
 8008e58:	90c0210c 	andi	r3,r18,132
 8008e5c:	d8c03015 	stw	r3,192(sp)
 8008e60:	1801c51e 	bne	r3,zero,8009578 <___vfprintf_internal_r+0xec8>
 8008e64:	d9003117 	ldw	r4,196(sp)
 8008e68:	d8c02917 	ldw	r3,164(sp)
 8008e6c:	20e7c83a 	sub	r19,r4,r3
 8008e70:	04c1c10e 	bge	zero,r19,8009578 <___vfprintf_internal_r+0xec8>
 8008e74:	02400404 	movi	r9,16
 8008e78:	d8c02017 	ldw	r3,128(sp)
 8008e7c:	d8801f17 	ldw	r2,124(sp)
 8008e80:	4cc52f0e 	bge	r9,r19,800a340 <___vfprintf_internal_r+0x1c90>
 8008e84:	014200b4 	movhi	r5,2050
 8008e88:	2960df84 	addi	r5,r5,-31874
 8008e8c:	dc403b15 	stw	r17,236(sp)
 8008e90:	d9403515 	stw	r5,212(sp)
 8008e94:	9823883a 	mov	r17,r19
 8008e98:	482d883a 	mov	r22,r9
 8008e9c:	9027883a 	mov	r19,r18
 8008ea0:	070001c4 	movi	fp,7
 8008ea4:	8025883a 	mov	r18,r16
 8008ea8:	dc002d17 	ldw	r16,180(sp)
 8008eac:	00000306 	br	8008ebc <___vfprintf_internal_r+0x80c>
 8008eb0:	8c7ffc04 	addi	r17,r17,-16
 8008eb4:	42000204 	addi	r8,r8,8
 8008eb8:	b440130e 	bge	r22,r17,8008f08 <___vfprintf_internal_r+0x858>
 8008ebc:	010200b4 	movhi	r4,2050
 8008ec0:	18c00404 	addi	r3,r3,16
 8008ec4:	10800044 	addi	r2,r2,1
 8008ec8:	2120df84 	addi	r4,r4,-31874
 8008ecc:	41000015 	stw	r4,0(r8)
 8008ed0:	45800115 	stw	r22,4(r8)
 8008ed4:	d8c02015 	stw	r3,128(sp)
 8008ed8:	d8801f15 	stw	r2,124(sp)
 8008edc:	e0bff40e 	bge	fp,r2,8008eb0 <___vfprintf_internal_r+0x800>
 8008ee0:	d9801e04 	addi	r6,sp,120
 8008ee4:	b80b883a 	mov	r5,r23
 8008ee8:	8009883a 	mov	r4,r16
 8008eec:	800fde40 	call	800fde4 <__sprint_r>
 8008ef0:	103ef31e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 8008ef4:	8c7ffc04 	addi	r17,r17,-16
 8008ef8:	d8c02017 	ldw	r3,128(sp)
 8008efc:	d8801f17 	ldw	r2,124(sp)
 8008f00:	da000404 	addi	r8,sp,16
 8008f04:	b47fed16 	blt	r22,r17,8008ebc <___vfprintf_internal_r+0x80c>
 8008f08:	9021883a 	mov	r16,r18
 8008f0c:	9825883a 	mov	r18,r19
 8008f10:	8827883a 	mov	r19,r17
 8008f14:	dc403b17 	ldw	r17,236(sp)
 8008f18:	d9403517 	ldw	r5,212(sp)
 8008f1c:	98c7883a 	add	r3,r19,r3
 8008f20:	10800044 	addi	r2,r2,1
 8008f24:	41400015 	stw	r5,0(r8)
 8008f28:	44c00115 	stw	r19,4(r8)
 8008f2c:	d8c02015 	stw	r3,128(sp)
 8008f30:	d8801f15 	stw	r2,124(sp)
 8008f34:	010001c4 	movi	r4,7
 8008f38:	2082c516 	blt	r4,r2,8009a50 <___vfprintf_internal_r+0x13a0>
 8008f3c:	df002787 	ldb	fp,158(sp)
 8008f40:	42000204 	addi	r8,r8,8
 8008f44:	e0000c26 	beq	fp,zero,8008f78 <___vfprintf_internal_r+0x8c8>
 8008f48:	d8801f17 	ldw	r2,124(sp)
 8008f4c:	d9002784 	addi	r4,sp,158
 8008f50:	18c00044 	addi	r3,r3,1
 8008f54:	10800044 	addi	r2,r2,1
 8008f58:	41000015 	stw	r4,0(r8)
 8008f5c:	01000044 	movi	r4,1
 8008f60:	41000115 	stw	r4,4(r8)
 8008f64:	d8c02015 	stw	r3,128(sp)
 8008f68:	d8801f15 	stw	r2,124(sp)
 8008f6c:	010001c4 	movi	r4,7
 8008f70:	20825e16 	blt	r4,r2,80098ec <___vfprintf_internal_r+0x123c>
 8008f74:	42000204 	addi	r8,r8,8
 8008f78:	d8802c17 	ldw	r2,176(sp)
 8008f7c:	10000c26 	beq	r2,zero,8008fb0 <___vfprintf_internal_r+0x900>
 8008f80:	d8801f17 	ldw	r2,124(sp)
 8008f84:	d9002704 	addi	r4,sp,156
 8008f88:	18c00084 	addi	r3,r3,2
 8008f8c:	10800044 	addi	r2,r2,1
 8008f90:	41000015 	stw	r4,0(r8)
 8008f94:	01000084 	movi	r4,2
 8008f98:	41000115 	stw	r4,4(r8)
 8008f9c:	d8c02015 	stw	r3,128(sp)
 8008fa0:	d8801f15 	stw	r2,124(sp)
 8008fa4:	010001c4 	movi	r4,7
 8008fa8:	20825816 	blt	r4,r2,800990c <___vfprintf_internal_r+0x125c>
 8008fac:	42000204 	addi	r8,r8,8
 8008fb0:	d9003017 	ldw	r4,192(sp)
 8008fb4:	00802004 	movi	r2,128
 8008fb8:	2081bb26 	beq	r4,r2,80096a8 <___vfprintf_internal_r+0xff8>
 8008fbc:	d9402a17 	ldw	r5,168(sp)
 8008fc0:	d8802b17 	ldw	r2,172(sp)
 8008fc4:	28adc83a 	sub	r22,r5,r2
 8008fc8:	0580310e 	bge	zero,r22,8009090 <___vfprintf_internal_r+0x9e0>
 8008fcc:	07000404 	movi	fp,16
 8008fd0:	d8801f17 	ldw	r2,124(sp)
 8008fd4:	e584360e 	bge	fp,r22,800a0b0 <___vfprintf_internal_r+0x1a00>
 8008fd8:	014200b4 	movhi	r5,2050
 8008fdc:	2960db84 	addi	r5,r5,-31890
 8008fe0:	dc402a15 	stw	r17,168(sp)
 8008fe4:	d9402c15 	stw	r5,176(sp)
 8008fe8:	b023883a 	mov	r17,r22
 8008fec:	04c001c4 	movi	r19,7
 8008ff0:	a82d883a 	mov	r22,r21
 8008ff4:	902b883a 	mov	r21,r18
 8008ff8:	8025883a 	mov	r18,r16
 8008ffc:	dc002d17 	ldw	r16,180(sp)
 8009000:	00000306 	br	8009010 <___vfprintf_internal_r+0x960>
 8009004:	8c7ffc04 	addi	r17,r17,-16
 8009008:	42000204 	addi	r8,r8,8
 800900c:	e440110e 	bge	fp,r17,8009054 <___vfprintf_internal_r+0x9a4>
 8009010:	18c00404 	addi	r3,r3,16
 8009014:	10800044 	addi	r2,r2,1
 8009018:	45000015 	stw	r20,0(r8)
 800901c:	47000115 	stw	fp,4(r8)
 8009020:	d8c02015 	stw	r3,128(sp)
 8009024:	d8801f15 	stw	r2,124(sp)
 8009028:	98bff60e 	bge	r19,r2,8009004 <___vfprintf_internal_r+0x954>
 800902c:	d9801e04 	addi	r6,sp,120
 8009030:	b80b883a 	mov	r5,r23
 8009034:	8009883a 	mov	r4,r16
 8009038:	800fde40 	call	800fde4 <__sprint_r>
 800903c:	103ea01e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 8009040:	8c7ffc04 	addi	r17,r17,-16
 8009044:	d8c02017 	ldw	r3,128(sp)
 8009048:	d8801f17 	ldw	r2,124(sp)
 800904c:	da000404 	addi	r8,sp,16
 8009050:	e47fef16 	blt	fp,r17,8009010 <___vfprintf_internal_r+0x960>
 8009054:	9021883a 	mov	r16,r18
 8009058:	a825883a 	mov	r18,r21
 800905c:	b02b883a 	mov	r21,r22
 8009060:	882d883a 	mov	r22,r17
 8009064:	dc402a17 	ldw	r17,168(sp)
 8009068:	d9002c17 	ldw	r4,176(sp)
 800906c:	1d87883a 	add	r3,r3,r22
 8009070:	10800044 	addi	r2,r2,1
 8009074:	41000015 	stw	r4,0(r8)
 8009078:	45800115 	stw	r22,4(r8)
 800907c:	d8c02015 	stw	r3,128(sp)
 8009080:	d8801f15 	stw	r2,124(sp)
 8009084:	010001c4 	movi	r4,7
 8009088:	20821016 	blt	r4,r2,80098cc <___vfprintf_internal_r+0x121c>
 800908c:	42000204 	addi	r8,r8,8
 8009090:	9080400c 	andi	r2,r18,256
 8009094:	10013a1e 	bne	r2,zero,8009580 <___vfprintf_internal_r+0xed0>
 8009098:	d9402b17 	ldw	r5,172(sp)
 800909c:	d8801f17 	ldw	r2,124(sp)
 80090a0:	44000015 	stw	r16,0(r8)
 80090a4:	1947883a 	add	r3,r3,r5
 80090a8:	10800044 	addi	r2,r2,1
 80090ac:	41400115 	stw	r5,4(r8)
 80090b0:	d8c02015 	stw	r3,128(sp)
 80090b4:	d8801f15 	stw	r2,124(sp)
 80090b8:	010001c4 	movi	r4,7
 80090bc:	2081f516 	blt	r4,r2,8009894 <___vfprintf_internal_r+0x11e4>
 80090c0:	42000204 	addi	r8,r8,8
 80090c4:	9480010c 	andi	r18,r18,4
 80090c8:	90003226 	beq	r18,zero,8009194 <___vfprintf_internal_r+0xae4>
 80090cc:	d9403117 	ldw	r5,196(sp)
 80090d0:	d8802917 	ldw	r2,164(sp)
 80090d4:	28a1c83a 	sub	r16,r5,r2
 80090d8:	04002e0e 	bge	zero,r16,8009194 <___vfprintf_internal_r+0xae4>
 80090dc:	04400404 	movi	r17,16
 80090e0:	d8801f17 	ldw	r2,124(sp)
 80090e4:	8c04c40e 	bge	r17,r16,800a3f8 <___vfprintf_internal_r+0x1d48>
 80090e8:	014200b4 	movhi	r5,2050
 80090ec:	2960df84 	addi	r5,r5,-31874
 80090f0:	d9403515 	stw	r5,212(sp)
 80090f4:	048001c4 	movi	r18,7
 80090f8:	dcc02d17 	ldw	r19,180(sp)
 80090fc:	00000306 	br	800910c <___vfprintf_internal_r+0xa5c>
 8009100:	843ffc04 	addi	r16,r16,-16
 8009104:	42000204 	addi	r8,r8,8
 8009108:	8c00130e 	bge	r17,r16,8009158 <___vfprintf_internal_r+0xaa8>
 800910c:	010200b4 	movhi	r4,2050
 8009110:	18c00404 	addi	r3,r3,16
 8009114:	10800044 	addi	r2,r2,1
 8009118:	2120df84 	addi	r4,r4,-31874
 800911c:	41000015 	stw	r4,0(r8)
 8009120:	44400115 	stw	r17,4(r8)
 8009124:	d8c02015 	stw	r3,128(sp)
 8009128:	d8801f15 	stw	r2,124(sp)
 800912c:	90bff40e 	bge	r18,r2,8009100 <___vfprintf_internal_r+0xa50>
 8009130:	d9801e04 	addi	r6,sp,120
 8009134:	b80b883a 	mov	r5,r23
 8009138:	9809883a 	mov	r4,r19
 800913c:	800fde40 	call	800fde4 <__sprint_r>
 8009140:	103e5f1e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 8009144:	843ffc04 	addi	r16,r16,-16
 8009148:	d8c02017 	ldw	r3,128(sp)
 800914c:	d8801f17 	ldw	r2,124(sp)
 8009150:	da000404 	addi	r8,sp,16
 8009154:	8c3fed16 	blt	r17,r16,800910c <___vfprintf_internal_r+0xa5c>
 8009158:	d9403517 	ldw	r5,212(sp)
 800915c:	1c07883a 	add	r3,r3,r16
 8009160:	10800044 	addi	r2,r2,1
 8009164:	41400015 	stw	r5,0(r8)
 8009168:	44000115 	stw	r16,4(r8)
 800916c:	d8c02015 	stw	r3,128(sp)
 8009170:	d8801f15 	stw	r2,124(sp)
 8009174:	010001c4 	movi	r4,7
 8009178:	2080060e 	bge	r4,r2,8009194 <___vfprintf_internal_r+0xae4>
 800917c:	d9002d17 	ldw	r4,180(sp)
 8009180:	d9801e04 	addi	r6,sp,120
 8009184:	b80b883a 	mov	r5,r23
 8009188:	800fde40 	call	800fde4 <__sprint_r>
 800918c:	103e4c1e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 8009190:	d8c02017 	ldw	r3,128(sp)
 8009194:	d8803117 	ldw	r2,196(sp)
 8009198:	d9002917 	ldw	r4,164(sp)
 800919c:	1100010e 	bge	r2,r4,80091a4 <___vfprintf_internal_r+0xaf4>
 80091a0:	2005883a 	mov	r2,r4
 80091a4:	d9402f17 	ldw	r5,188(sp)
 80091a8:	288b883a 	add	r5,r5,r2
 80091ac:	d9402f15 	stw	r5,188(sp)
 80091b0:	1801c01e 	bne	r3,zero,80098b4 <___vfprintf_internal_r+0x1204>
 80091b4:	a8800007 	ldb	r2,0(r21)
 80091b8:	d8001f15 	stw	zero,124(sp)
 80091bc:	da000404 	addi	r8,sp,16
 80091c0:	103d751e 	bne	r2,zero,8008798 <___vfprintf_internal_r+0xe8>
 80091c4:	a823883a 	mov	r17,r21
 80091c8:	003d8b06 	br	80087f8 <___vfprintf_internal_r+0x148>
 80091cc:	8025883a 	mov	r18,r16
 80091d0:	dc002903 	ldbu	r16,164(sp)
 80091d4:	e011883a 	mov	r8,fp
 80091d8:	84003fcc 	andi	r16,r16,255
 80091dc:	8005e51e 	bne	r16,zero,800a974 <___vfprintf_internal_r+0x22c4>
 80091e0:	94800414 	ori	r18,r18,16
 80091e4:	9080080c 	andi	r2,r18,32
 80091e8:	10022b26 	beq	r2,zero,8009a98 <___vfprintf_internal_r+0x13e8>
 80091ec:	d9002e17 	ldw	r4,184(sp)
 80091f0:	d9402a17 	ldw	r5,168(sp)
 80091f4:	d8002785 	stb	zero,158(sp)
 80091f8:	20c00204 	addi	r3,r4,8
 80091fc:	24c00017 	ldw	r19,0(r4)
 8009200:	25800117 	ldw	r22,4(r4)
 8009204:	28042e16 	blt	r5,zero,800a2c0 <___vfprintf_internal_r+0x1c10>
 8009208:	013fdfc4 	movi	r4,-129
 800920c:	9d84b03a 	or	r2,r19,r22
 8009210:	d8c02e15 	stw	r3,184(sp)
 8009214:	9124703a 	and	r18,r18,r4
 8009218:	0039883a 	mov	fp,zero
 800921c:	103e801e 	bne	r2,zero,8008c20 <___vfprintf_internal_r+0x570>
 8009220:	d9002a17 	ldw	r4,168(sp)
 8009224:	2002e01e 	bne	r4,zero,8009da8 <___vfprintf_internal_r+0x16f8>
 8009228:	d8002a15 	stw	zero,168(sp)
 800922c:	d8002b15 	stw	zero,172(sp)
 8009230:	dc001e04 	addi	r16,sp,120
 8009234:	003ef506 	br	8008e0c <___vfprintf_internal_r+0x75c>
 8009238:	8025883a 	mov	r18,r16
 800923c:	dc002903 	ldbu	r16,164(sp)
 8009240:	e011883a 	mov	r8,fp
 8009244:	84003fcc 	andi	r16,r16,255
 8009248:	8005ba1e 	bne	r16,zero,800a934 <___vfprintf_internal_r+0x2284>
 800924c:	010200b4 	movhi	r4,2050
 8009250:	2120cf04 	addi	r4,r4,-31940
 8009254:	d9003915 	stw	r4,228(sp)
 8009258:	9080080c 	andi	r2,r18,32
 800925c:	10006126 	beq	r2,zero,80093e4 <___vfprintf_internal_r+0xd34>
 8009260:	d9402e17 	ldw	r5,184(sp)
 8009264:	2cc00017 	ldw	r19,0(r5)
 8009268:	2d800117 	ldw	r22,4(r5)
 800926c:	29400204 	addi	r5,r5,8
 8009270:	d9402e15 	stw	r5,184(sp)
 8009274:	9080004c 	andi	r2,r18,1
 8009278:	1001ac26 	beq	r2,zero,800992c <___vfprintf_internal_r+0x127c>
 800927c:	9d84b03a 	or	r2,r19,r22
 8009280:	10038526 	beq	r2,zero,800a098 <___vfprintf_internal_r+0x19e8>
 8009284:	d8c02a17 	ldw	r3,168(sp)
 8009288:	00800c04 	movi	r2,48
 800928c:	d8802705 	stb	r2,156(sp)
 8009290:	dc402745 	stb	r17,157(sp)
 8009294:	d8002785 	stb	zero,158(sp)
 8009298:	90800094 	ori	r2,r18,2
 800929c:	18047916 	blt	r3,zero,800a484 <___vfprintf_internal_r+0x1dd4>
 80092a0:	00bfdfc4 	movi	r2,-129
 80092a4:	90a4703a 	and	r18,r18,r2
 80092a8:	94800094 	ori	r18,r18,2
 80092ac:	0039883a 	mov	fp,zero
 80092b0:	d9003917 	ldw	r4,228(sp)
 80092b4:	dc001e04 	addi	r16,sp,120
 80092b8:	988003cc 	andi	r2,r19,15
 80092bc:	b006973a 	slli	r3,r22,28
 80092c0:	2085883a 	add	r2,r4,r2
 80092c4:	9826d13a 	srli	r19,r19,4
 80092c8:	10800003 	ldbu	r2,0(r2)
 80092cc:	b02cd13a 	srli	r22,r22,4
 80092d0:	843fffc4 	addi	r16,r16,-1
 80092d4:	1ce6b03a 	or	r19,r3,r19
 80092d8:	80800005 	stb	r2,0(r16)
 80092dc:	9d84b03a 	or	r2,r19,r22
 80092e0:	103ff51e 	bne	r2,zero,80092b8 <___vfprintf_internal_r+0xc08>
 80092e4:	d8c02817 	ldw	r3,160(sp)
 80092e8:	1c07c83a 	sub	r3,r3,r16
 80092ec:	d8c02b15 	stw	r3,172(sp)
 80092f0:	003ec606 	br	8008e0c <___vfprintf_internal_r+0x75c>
 80092f4:	8025883a 	mov	r18,r16
 80092f8:	dc002903 	ldbu	r16,164(sp)
 80092fc:	e011883a 	mov	r8,fp
 8009300:	84003fcc 	andi	r16,r16,255
 8009304:	803e9626 	beq	r16,zero,8008d60 <___vfprintf_internal_r+0x6b0>
 8009308:	d8c02b03 	ldbu	r3,172(sp)
 800930c:	d8c02785 	stb	r3,158(sp)
 8009310:	003e9306 	br	8008d60 <___vfprintf_internal_r+0x6b0>
 8009314:	00c00044 	movi	r3,1
 8009318:	d8c02905 	stb	r3,164(sp)
 800931c:	00c00ac4 	movi	r3,43
 8009320:	d8c02b05 	stb	r3,172(sp)
 8009324:	ac400007 	ldb	r17,0(r21)
 8009328:	003d4306 	br	8008838 <___vfprintf_internal_r+0x188>
 800932c:	84000814 	ori	r16,r16,32
 8009330:	ac400007 	ldb	r17,0(r21)
 8009334:	003d4006 	br	8008838 <___vfprintf_internal_r+0x188>
 8009338:	d8802e17 	ldw	r2,184(sp)
 800933c:	8025883a 	mov	r18,r16
 8009340:	d8002785 	stb	zero,158(sp)
 8009344:	14000017 	ldw	r16,0(r2)
 8009348:	e011883a 	mov	r8,fp
 800934c:	14c00104 	addi	r19,r2,4
 8009350:	80042d26 	beq	r16,zero,800a408 <___vfprintf_internal_r+0x1d58>
 8009354:	d8c02a17 	ldw	r3,168(sp)
 8009358:	1803e416 	blt	r3,zero,800a2ec <___vfprintf_internal_r+0x1c3c>
 800935c:	180d883a 	mov	r6,r3
 8009360:	000b883a 	mov	r5,zero
 8009364:	8009883a 	mov	r4,r16
 8009368:	df003d15 	stw	fp,244(sp)
 800936c:	800e0440 	call	800e044 <memchr>
 8009370:	da003d17 	ldw	r8,244(sp)
 8009374:	10046826 	beq	r2,zero,800a518 <___vfprintf_internal_r+0x1e68>
 8009378:	1405c83a 	sub	r2,r2,r16
 800937c:	d8802b15 	stw	r2,172(sp)
 8009380:	1003e016 	blt	r2,zero,800a304 <___vfprintf_internal_r+0x1c54>
 8009384:	df002783 	ldbu	fp,158(sp)
 8009388:	d8802915 	stw	r2,164(sp)
 800938c:	dcc02e15 	stw	r19,184(sp)
 8009390:	d8002a15 	stw	zero,168(sp)
 8009394:	d8003215 	stw	zero,200(sp)
 8009398:	003ea206 	br	8008e24 <___vfprintf_internal_r+0x774>
 800939c:	8025883a 	mov	r18,r16
 80093a0:	dc002903 	ldbu	r16,164(sp)
 80093a4:	e011883a 	mov	r8,fp
 80093a8:	84003fcc 	andi	r16,r16,255
 80093ac:	803f8d26 	beq	r16,zero,80091e4 <___vfprintf_internal_r+0xb34>
 80093b0:	d8c02b03 	ldbu	r3,172(sp)
 80093b4:	d8c02785 	stb	r3,158(sp)
 80093b8:	003f8a06 	br	80091e4 <___vfprintf_internal_r+0xb34>
 80093bc:	8025883a 	mov	r18,r16
 80093c0:	dc002903 	ldbu	r16,164(sp)
 80093c4:	e011883a 	mov	r8,fp
 80093c8:	84003fcc 	andi	r16,r16,255
 80093cc:	8005661e 	bne	r16,zero,800a968 <___vfprintf_internal_r+0x22b8>
 80093d0:	010200b4 	movhi	r4,2050
 80093d4:	2120d404 	addi	r4,r4,-31920
 80093d8:	d9003915 	stw	r4,228(sp)
 80093dc:	9080080c 	andi	r2,r18,32
 80093e0:	103f9f1e 	bne	r2,zero,8009260 <___vfprintf_internal_r+0xbb0>
 80093e4:	9080040c 	andi	r2,r18,16
 80093e8:	1002eb26 	beq	r2,zero,8009f98 <___vfprintf_internal_r+0x18e8>
 80093ec:	d8802e17 	ldw	r2,184(sp)
 80093f0:	002d883a 	mov	r22,zero
 80093f4:	14c00017 	ldw	r19,0(r2)
 80093f8:	10800104 	addi	r2,r2,4
 80093fc:	d8802e15 	stw	r2,184(sp)
 8009400:	003f9c06 	br	8009274 <___vfprintf_internal_r+0xbc4>
 8009404:	d8802b07 	ldb	r2,172(sp)
 8009408:	1002e11e 	bne	r2,zero,8009f90 <___vfprintf_internal_r+0x18e0>
 800940c:	00c00044 	movi	r3,1
 8009410:	d8c02905 	stb	r3,164(sp)
 8009414:	00c00804 	movi	r3,32
 8009418:	d8c02b05 	stb	r3,172(sp)
 800941c:	ac400007 	ldb	r17,0(r21)
 8009420:	003d0506 	br	8008838 <___vfprintf_internal_r+0x188>
 8009424:	84000054 	ori	r16,r16,1
 8009428:	ac400007 	ldb	r17,0(r21)
 800942c:	003d0206 	br	8008838 <___vfprintf_internal_r+0x188>
 8009430:	8025883a 	mov	r18,r16
 8009434:	dc002903 	ldbu	r16,164(sp)
 8009438:	e011883a 	mov	r8,fp
 800943c:	84003fcc 	andi	r16,r16,255
 8009440:	803de726 	beq	r16,zero,8008be0 <___vfprintf_internal_r+0x530>
 8009444:	d8c02b03 	ldbu	r3,172(sp)
 8009448:	d8c02785 	stb	r3,158(sp)
 800944c:	003de406 	br	8008be0 <___vfprintf_internal_r+0x530>
 8009450:	84001014 	ori	r16,r16,64
 8009454:	ac400007 	ldb	r17,0(r21)
 8009458:	003cf706 	br	8008838 <___vfprintf_internal_r+0x188>
 800945c:	ac400007 	ldb	r17,0(r21)
 8009460:	00801b04 	movi	r2,108
 8009464:	88838f26 	beq	r17,r2,800a2a4 <___vfprintf_internal_r+0x1bf4>
 8009468:	84000414 	ori	r16,r16,16
 800946c:	003cf206 	br	8008838 <___vfprintf_internal_r+0x188>
 8009470:	8025883a 	mov	r18,r16
 8009474:	dc002903 	ldbu	r16,164(sp)
 8009478:	e011883a 	mov	r8,fp
 800947c:	84003fcc 	andi	r16,r16,255
 8009480:	80053f1e 	bne	r16,zero,800a980 <___vfprintf_internal_r+0x22d0>
 8009484:	9080080c 	andi	r2,r18,32
 8009488:	1002d226 	beq	r2,zero,8009fd4 <___vfprintf_internal_r+0x1924>
 800948c:	d9002e17 	ldw	r4,184(sp)
 8009490:	d9402f17 	ldw	r5,188(sp)
 8009494:	20800017 	ldw	r2,0(r4)
 8009498:	2807d7fa 	srai	r3,r5,31
 800949c:	21000104 	addi	r4,r4,4
 80094a0:	d9002e15 	stw	r4,184(sp)
 80094a4:	11400015 	stw	r5,0(r2)
 80094a8:	10c00115 	stw	r3,4(r2)
 80094ac:	003cb806 	br	8008790 <___vfprintf_internal_r+0xe0>
 80094b0:	d8c02e17 	ldw	r3,184(sp)
 80094b4:	d9002e17 	ldw	r4,184(sp)
 80094b8:	8025883a 	mov	r18,r16
 80094bc:	18800017 	ldw	r2,0(r3)
 80094c0:	21000104 	addi	r4,r4,4
 80094c4:	00c00044 	movi	r3,1
 80094c8:	e011883a 	mov	r8,fp
 80094cc:	d8c02915 	stw	r3,164(sp)
 80094d0:	d8002785 	stb	zero,158(sp)
 80094d4:	d8801405 	stb	r2,80(sp)
 80094d8:	d9002e15 	stw	r4,184(sp)
 80094dc:	d8c02b15 	stw	r3,172(sp)
 80094e0:	d8002a15 	stw	zero,168(sp)
 80094e4:	d8003215 	stw	zero,200(sp)
 80094e8:	dc001404 	addi	r16,sp,80
 80094ec:	0039883a 	mov	fp,zero
 80094f0:	003e5306 	br	8008e40 <___vfprintf_internal_r+0x790>
 80094f4:	010200b4 	movhi	r4,2050
 80094f8:	2120d404 	addi	r4,r4,-31920
 80094fc:	0039883a 	mov	fp,zero
 8009500:	d9003915 	stw	r4,228(sp)
 8009504:	04401e04 	movi	r17,120
 8009508:	003f6906 	br	80092b0 <___vfprintf_internal_r+0xc00>
 800950c:	8025883a 	mov	r18,r16
 8009510:	dc002903 	ldbu	r16,164(sp)
 8009514:	e011883a 	mov	r8,fp
 8009518:	84003fcc 	andi	r16,r16,255
 800951c:	8005081e 	bne	r16,zero,800a940 <___vfprintf_internal_r+0x2290>
 8009520:	883d6126 	beq	r17,zero,8008aa8 <___vfprintf_internal_r+0x3f8>
 8009524:	00c00044 	movi	r3,1
 8009528:	d8c02915 	stw	r3,164(sp)
 800952c:	dc401405 	stb	r17,80(sp)
 8009530:	d8002785 	stb	zero,158(sp)
 8009534:	003fe906 	br	80094dc <___vfprintf_internal_r+0xe2c>
 8009538:	014200b4 	movhi	r5,2050
 800953c:	2960d404 	addi	r5,r5,-31920
 8009540:	d9403915 	stw	r5,228(sp)
 8009544:	d8c02e15 	stw	r3,184(sp)
 8009548:	1025883a 	mov	r18,r2
 800954c:	04401e04 	movi	r17,120
 8009550:	9d84b03a 	or	r2,r19,r22
 8009554:	1000fc1e 	bne	r2,zero,8009948 <___vfprintf_internal_r+0x1298>
 8009558:	0039883a 	mov	fp,zero
 800955c:	00800084 	movi	r2,2
 8009560:	10803fcc 	andi	r2,r2,255
 8009564:	00c00044 	movi	r3,1
 8009568:	10c20f26 	beq	r2,r3,8009da8 <___vfprintf_internal_r+0x16f8>
 800956c:	00c00084 	movi	r3,2
 8009570:	10fd3326 	beq	r2,r3,8008a40 <___vfprintf_internal_r+0x390>
 8009574:	003e0b06 	br	8008da4 <___vfprintf_internal_r+0x6f4>
 8009578:	d8c02017 	ldw	r3,128(sp)
 800957c:	003e7106 	br	8008f44 <___vfprintf_internal_r+0x894>
 8009580:	00801944 	movi	r2,101
 8009584:	14407e0e 	bge	r2,r17,8009780 <___vfprintf_internal_r+0x10d0>
 8009588:	d9003617 	ldw	r4,216(sp)
 800958c:	d9403817 	ldw	r5,224(sp)
 8009590:	000d883a 	mov	r6,zero
 8009594:	000f883a 	mov	r7,zero
 8009598:	d8c03c15 	stw	r3,240(sp)
 800959c:	da003d15 	stw	r8,244(sp)
 80095a0:	8013b680 	call	8013b68 <__eqdf2>
 80095a4:	d8c03c17 	ldw	r3,240(sp)
 80095a8:	da003d17 	ldw	r8,244(sp)
 80095ac:	1000f71e 	bne	r2,zero,800998c <___vfprintf_internal_r+0x12dc>
 80095b0:	d8801f17 	ldw	r2,124(sp)
 80095b4:	010200b4 	movhi	r4,2050
 80095b8:	2120db04 	addi	r4,r4,-31892
 80095bc:	18c00044 	addi	r3,r3,1
 80095c0:	10800044 	addi	r2,r2,1
 80095c4:	41000015 	stw	r4,0(r8)
 80095c8:	01000044 	movi	r4,1
 80095cc:	41000115 	stw	r4,4(r8)
 80095d0:	d8c02015 	stw	r3,128(sp)
 80095d4:	d8801f15 	stw	r2,124(sp)
 80095d8:	010001c4 	movi	r4,7
 80095dc:	2082b816 	blt	r4,r2,800a0c0 <___vfprintf_internal_r+0x1a10>
 80095e0:	42000204 	addi	r8,r8,8
 80095e4:	d8802617 	ldw	r2,152(sp)
 80095e8:	d9403317 	ldw	r5,204(sp)
 80095ec:	11400216 	blt	r2,r5,80095f8 <___vfprintf_internal_r+0xf48>
 80095f0:	9080004c 	andi	r2,r18,1
 80095f4:	103eb326 	beq	r2,zero,80090c4 <___vfprintf_internal_r+0xa14>
 80095f8:	d8803717 	ldw	r2,220(sp)
 80095fc:	d9003417 	ldw	r4,208(sp)
 8009600:	d9403717 	ldw	r5,220(sp)
 8009604:	1887883a 	add	r3,r3,r2
 8009608:	d8801f17 	ldw	r2,124(sp)
 800960c:	41000015 	stw	r4,0(r8)
 8009610:	41400115 	stw	r5,4(r8)
 8009614:	10800044 	addi	r2,r2,1
 8009618:	d8c02015 	stw	r3,128(sp)
 800961c:	d8801f15 	stw	r2,124(sp)
 8009620:	010001c4 	movi	r4,7
 8009624:	20832916 	blt	r4,r2,800a2cc <___vfprintf_internal_r+0x1c1c>
 8009628:	42000204 	addi	r8,r8,8
 800962c:	d8803317 	ldw	r2,204(sp)
 8009630:	143fffc4 	addi	r16,r2,-1
 8009634:	043ea30e 	bge	zero,r16,80090c4 <___vfprintf_internal_r+0xa14>
 8009638:	04400404 	movi	r17,16
 800963c:	d8801f17 	ldw	r2,124(sp)
 8009640:	8c00880e 	bge	r17,r16,8009864 <___vfprintf_internal_r+0x11b4>
 8009644:	014200b4 	movhi	r5,2050
 8009648:	2960db84 	addi	r5,r5,-31890
 800964c:	d9402c15 	stw	r5,176(sp)
 8009650:	058001c4 	movi	r22,7
 8009654:	dcc02d17 	ldw	r19,180(sp)
 8009658:	00000306 	br	8009668 <___vfprintf_internal_r+0xfb8>
 800965c:	42000204 	addi	r8,r8,8
 8009660:	843ffc04 	addi	r16,r16,-16
 8009664:	8c00820e 	bge	r17,r16,8009870 <___vfprintf_internal_r+0x11c0>
 8009668:	18c00404 	addi	r3,r3,16
 800966c:	10800044 	addi	r2,r2,1
 8009670:	45000015 	stw	r20,0(r8)
 8009674:	44400115 	stw	r17,4(r8)
 8009678:	d8c02015 	stw	r3,128(sp)
 800967c:	d8801f15 	stw	r2,124(sp)
 8009680:	b0bff60e 	bge	r22,r2,800965c <___vfprintf_internal_r+0xfac>
 8009684:	d9801e04 	addi	r6,sp,120
 8009688:	b80b883a 	mov	r5,r23
 800968c:	9809883a 	mov	r4,r19
 8009690:	800fde40 	call	800fde4 <__sprint_r>
 8009694:	103d0a1e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 8009698:	d8c02017 	ldw	r3,128(sp)
 800969c:	d8801f17 	ldw	r2,124(sp)
 80096a0:	da000404 	addi	r8,sp,16
 80096a4:	003fee06 	br	8009660 <___vfprintf_internal_r+0xfb0>
 80096a8:	d9403117 	ldw	r5,196(sp)
 80096ac:	d8802917 	ldw	r2,164(sp)
 80096b0:	28adc83a 	sub	r22,r5,r2
 80096b4:	05be410e 	bge	zero,r22,8008fbc <___vfprintf_internal_r+0x90c>
 80096b8:	07000404 	movi	fp,16
 80096bc:	d8801f17 	ldw	r2,124(sp)
 80096c0:	e5838f0e 	bge	fp,r22,800a500 <___vfprintf_internal_r+0x1e50>
 80096c4:	014200b4 	movhi	r5,2050
 80096c8:	2960db84 	addi	r5,r5,-31890
 80096cc:	dc403015 	stw	r17,192(sp)
 80096d0:	d9402c15 	stw	r5,176(sp)
 80096d4:	b023883a 	mov	r17,r22
 80096d8:	04c001c4 	movi	r19,7
 80096dc:	a82d883a 	mov	r22,r21
 80096e0:	902b883a 	mov	r21,r18
 80096e4:	8025883a 	mov	r18,r16
 80096e8:	dc002d17 	ldw	r16,180(sp)
 80096ec:	00000306 	br	80096fc <___vfprintf_internal_r+0x104c>
 80096f0:	8c7ffc04 	addi	r17,r17,-16
 80096f4:	42000204 	addi	r8,r8,8
 80096f8:	e440110e 	bge	fp,r17,8009740 <___vfprintf_internal_r+0x1090>
 80096fc:	18c00404 	addi	r3,r3,16
 8009700:	10800044 	addi	r2,r2,1
 8009704:	45000015 	stw	r20,0(r8)
 8009708:	47000115 	stw	fp,4(r8)
 800970c:	d8c02015 	stw	r3,128(sp)
 8009710:	d8801f15 	stw	r2,124(sp)
 8009714:	98bff60e 	bge	r19,r2,80096f0 <___vfprintf_internal_r+0x1040>
 8009718:	d9801e04 	addi	r6,sp,120
 800971c:	b80b883a 	mov	r5,r23
 8009720:	8009883a 	mov	r4,r16
 8009724:	800fde40 	call	800fde4 <__sprint_r>
 8009728:	103ce51e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 800972c:	8c7ffc04 	addi	r17,r17,-16
 8009730:	d8c02017 	ldw	r3,128(sp)
 8009734:	d8801f17 	ldw	r2,124(sp)
 8009738:	da000404 	addi	r8,sp,16
 800973c:	e47fef16 	blt	fp,r17,80096fc <___vfprintf_internal_r+0x104c>
 8009740:	9021883a 	mov	r16,r18
 8009744:	a825883a 	mov	r18,r21
 8009748:	b02b883a 	mov	r21,r22
 800974c:	882d883a 	mov	r22,r17
 8009750:	dc403017 	ldw	r17,192(sp)
 8009754:	d9002c17 	ldw	r4,176(sp)
 8009758:	1d87883a 	add	r3,r3,r22
 800975c:	10800044 	addi	r2,r2,1
 8009760:	41000015 	stw	r4,0(r8)
 8009764:	45800115 	stw	r22,4(r8)
 8009768:	d8c02015 	stw	r3,128(sp)
 800976c:	d8801f15 	stw	r2,124(sp)
 8009770:	010001c4 	movi	r4,7
 8009774:	20818e16 	blt	r4,r2,8009db0 <___vfprintf_internal_r+0x1700>
 8009778:	42000204 	addi	r8,r8,8
 800977c:	003e0f06 	br	8008fbc <___vfprintf_internal_r+0x90c>
 8009780:	d9403317 	ldw	r5,204(sp)
 8009784:	00800044 	movi	r2,1
 8009788:	18c00044 	addi	r3,r3,1
 800978c:	1141530e 	bge	r2,r5,8009cdc <___vfprintf_internal_r+0x162c>
 8009790:	dc401f17 	ldw	r17,124(sp)
 8009794:	00800044 	movi	r2,1
 8009798:	40800115 	stw	r2,4(r8)
 800979c:	8c400044 	addi	r17,r17,1
 80097a0:	44000015 	stw	r16,0(r8)
 80097a4:	d8c02015 	stw	r3,128(sp)
 80097a8:	dc401f15 	stw	r17,124(sp)
 80097ac:	008001c4 	movi	r2,7
 80097b0:	14416b16 	blt	r2,r17,8009d60 <___vfprintf_internal_r+0x16b0>
 80097b4:	42000204 	addi	r8,r8,8
 80097b8:	d8803717 	ldw	r2,220(sp)
 80097bc:	d9003417 	ldw	r4,208(sp)
 80097c0:	8c400044 	addi	r17,r17,1
 80097c4:	10c7883a 	add	r3,r2,r3
 80097c8:	40800115 	stw	r2,4(r8)
 80097cc:	41000015 	stw	r4,0(r8)
 80097d0:	d8c02015 	stw	r3,128(sp)
 80097d4:	dc401f15 	stw	r17,124(sp)
 80097d8:	008001c4 	movi	r2,7
 80097dc:	14416916 	blt	r2,r17,8009d84 <___vfprintf_internal_r+0x16d4>
 80097e0:	45800204 	addi	r22,r8,8
 80097e4:	d9003617 	ldw	r4,216(sp)
 80097e8:	d9403817 	ldw	r5,224(sp)
 80097ec:	000d883a 	mov	r6,zero
 80097f0:	000f883a 	mov	r7,zero
 80097f4:	d8c03c15 	stw	r3,240(sp)
 80097f8:	8013b680 	call	8013b68 <__eqdf2>
 80097fc:	d8c03c17 	ldw	r3,240(sp)
 8009800:	1000bc26 	beq	r2,zero,8009af4 <___vfprintf_internal_r+0x1444>
 8009804:	d9403317 	ldw	r5,204(sp)
 8009808:	84000044 	addi	r16,r16,1
 800980c:	8c400044 	addi	r17,r17,1
 8009810:	28bfffc4 	addi	r2,r5,-1
 8009814:	1887883a 	add	r3,r3,r2
 8009818:	b0800115 	stw	r2,4(r22)
 800981c:	b4000015 	stw	r16,0(r22)
 8009820:	d8c02015 	stw	r3,128(sp)
 8009824:	dc401f15 	stw	r17,124(sp)
 8009828:	008001c4 	movi	r2,7
 800982c:	14414316 	blt	r2,r17,8009d3c <___vfprintf_internal_r+0x168c>
 8009830:	b5800204 	addi	r22,r22,8
 8009834:	d9003a17 	ldw	r4,232(sp)
 8009838:	df0022c4 	addi	fp,sp,139
 800983c:	8c400044 	addi	r17,r17,1
 8009840:	20c7883a 	add	r3,r4,r3
 8009844:	b7000015 	stw	fp,0(r22)
 8009848:	b1000115 	stw	r4,4(r22)
 800984c:	d8c02015 	stw	r3,128(sp)
 8009850:	dc401f15 	stw	r17,124(sp)
 8009854:	008001c4 	movi	r2,7
 8009858:	14400e16 	blt	r2,r17,8009894 <___vfprintf_internal_r+0x11e4>
 800985c:	b2000204 	addi	r8,r22,8
 8009860:	003e1806 	br	80090c4 <___vfprintf_internal_r+0xa14>
 8009864:	010200b4 	movhi	r4,2050
 8009868:	2120db84 	addi	r4,r4,-31890
 800986c:	d9002c15 	stw	r4,176(sp)
 8009870:	d9002c17 	ldw	r4,176(sp)
 8009874:	1c07883a 	add	r3,r3,r16
 8009878:	44000115 	stw	r16,4(r8)
 800987c:	41000015 	stw	r4,0(r8)
 8009880:	10800044 	addi	r2,r2,1
 8009884:	d8c02015 	stw	r3,128(sp)
 8009888:	d8801f15 	stw	r2,124(sp)
 800988c:	010001c4 	movi	r4,7
 8009890:	20be0b0e 	bge	r4,r2,80090c0 <___vfprintf_internal_r+0xa10>
 8009894:	d9002d17 	ldw	r4,180(sp)
 8009898:	d9801e04 	addi	r6,sp,120
 800989c:	b80b883a 	mov	r5,r23
 80098a0:	800fde40 	call	800fde4 <__sprint_r>
 80098a4:	103c861e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 80098a8:	d8c02017 	ldw	r3,128(sp)
 80098ac:	da000404 	addi	r8,sp,16
 80098b0:	003e0406 	br	80090c4 <___vfprintf_internal_r+0xa14>
 80098b4:	d9002d17 	ldw	r4,180(sp)
 80098b8:	d9801e04 	addi	r6,sp,120
 80098bc:	b80b883a 	mov	r5,r23
 80098c0:	800fde40 	call	800fde4 <__sprint_r>
 80098c4:	103e3b26 	beq	r2,zero,80091b4 <___vfprintf_internal_r+0xb04>
 80098c8:	003c7d06 	br	8008ac0 <___vfprintf_internal_r+0x410>
 80098cc:	d9002d17 	ldw	r4,180(sp)
 80098d0:	d9801e04 	addi	r6,sp,120
 80098d4:	b80b883a 	mov	r5,r23
 80098d8:	800fde40 	call	800fde4 <__sprint_r>
 80098dc:	103c781e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 80098e0:	d8c02017 	ldw	r3,128(sp)
 80098e4:	da000404 	addi	r8,sp,16
 80098e8:	003de906 	br	8009090 <___vfprintf_internal_r+0x9e0>
 80098ec:	d9002d17 	ldw	r4,180(sp)
 80098f0:	d9801e04 	addi	r6,sp,120
 80098f4:	b80b883a 	mov	r5,r23
 80098f8:	800fde40 	call	800fde4 <__sprint_r>
 80098fc:	103c701e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 8009900:	d8c02017 	ldw	r3,128(sp)
 8009904:	da000404 	addi	r8,sp,16
 8009908:	003d9b06 	br	8008f78 <___vfprintf_internal_r+0x8c8>
 800990c:	d9002d17 	ldw	r4,180(sp)
 8009910:	d9801e04 	addi	r6,sp,120
 8009914:	b80b883a 	mov	r5,r23
 8009918:	800fde40 	call	800fde4 <__sprint_r>
 800991c:	103c681e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 8009920:	d8c02017 	ldw	r3,128(sp)
 8009924:	da000404 	addi	r8,sp,16
 8009928:	003da106 	br	8008fb0 <___vfprintf_internal_r+0x900>
 800992c:	d9402a17 	ldw	r5,168(sp)
 8009930:	d8002785 	stb	zero,158(sp)
 8009934:	283f0616 	blt	r5,zero,8009550 <___vfprintf_internal_r+0xea0>
 8009938:	00ffdfc4 	movi	r3,-129
 800993c:	9d84b03a 	or	r2,r19,r22
 8009940:	90e4703a 	and	r18,r18,r3
 8009944:	103c3b26 	beq	r2,zero,8008a34 <___vfprintf_internal_r+0x384>
 8009948:	0039883a 	mov	fp,zero
 800994c:	003e5806 	br	80092b0 <___vfprintf_internal_r+0xc00>
 8009950:	9080040c 	andi	r2,r18,16
 8009954:	1001b326 	beq	r2,zero,800a024 <___vfprintf_internal_r+0x1974>
 8009958:	d8c02e17 	ldw	r3,184(sp)
 800995c:	d9002a17 	ldw	r4,168(sp)
 8009960:	d8002785 	stb	zero,158(sp)
 8009964:	18800104 	addi	r2,r3,4
 8009968:	1cc00017 	ldw	r19,0(r3)
 800996c:	002d883a 	mov	r22,zero
 8009970:	2001b516 	blt	r4,zero,800a048 <___vfprintf_internal_r+0x1998>
 8009974:	00ffdfc4 	movi	r3,-129
 8009978:	d8802e15 	stw	r2,184(sp)
 800997c:	90e4703a 	and	r18,r18,r3
 8009980:	983d0526 	beq	r19,zero,8008d98 <___vfprintf_internal_r+0x6e8>
 8009984:	0039883a 	mov	fp,zero
 8009988:	003d0806 	br	8008dac <___vfprintf_internal_r+0x6fc>
 800998c:	dc402617 	ldw	r17,152(sp)
 8009990:	0441d30e 	bge	zero,r17,800a0e0 <___vfprintf_internal_r+0x1a30>
 8009994:	dc403217 	ldw	r17,200(sp)
 8009998:	d8803317 	ldw	r2,204(sp)
 800999c:	1440010e 	bge	r2,r17,80099a4 <___vfprintf_internal_r+0x12f4>
 80099a0:	1023883a 	mov	r17,r2
 80099a4:	04400a0e 	bge	zero,r17,80099d0 <___vfprintf_internal_r+0x1320>
 80099a8:	d8801f17 	ldw	r2,124(sp)
 80099ac:	1c47883a 	add	r3,r3,r17
 80099b0:	44000015 	stw	r16,0(r8)
 80099b4:	10800044 	addi	r2,r2,1
 80099b8:	44400115 	stw	r17,4(r8)
 80099bc:	d8c02015 	stw	r3,128(sp)
 80099c0:	d8801f15 	stw	r2,124(sp)
 80099c4:	010001c4 	movi	r4,7
 80099c8:	20826516 	blt	r4,r2,800a360 <___vfprintf_internal_r+0x1cb0>
 80099cc:	42000204 	addi	r8,r8,8
 80099d0:	88026116 	blt	r17,zero,800a358 <___vfprintf_internal_r+0x1ca8>
 80099d4:	d9003217 	ldw	r4,200(sp)
 80099d8:	2463c83a 	sub	r17,r4,r17
 80099dc:	04407b0e 	bge	zero,r17,8009bcc <___vfprintf_internal_r+0x151c>
 80099e0:	05800404 	movi	r22,16
 80099e4:	d8801f17 	ldw	r2,124(sp)
 80099e8:	b4419d0e 	bge	r22,r17,800a060 <___vfprintf_internal_r+0x19b0>
 80099ec:	010200b4 	movhi	r4,2050
 80099f0:	2120db84 	addi	r4,r4,-31890
 80099f4:	d9002c15 	stw	r4,176(sp)
 80099f8:	070001c4 	movi	fp,7
 80099fc:	dcc02d17 	ldw	r19,180(sp)
 8009a00:	00000306 	br	8009a10 <___vfprintf_internal_r+0x1360>
 8009a04:	42000204 	addi	r8,r8,8
 8009a08:	8c7ffc04 	addi	r17,r17,-16
 8009a0c:	b441970e 	bge	r22,r17,800a06c <___vfprintf_internal_r+0x19bc>
 8009a10:	18c00404 	addi	r3,r3,16
 8009a14:	10800044 	addi	r2,r2,1
 8009a18:	45000015 	stw	r20,0(r8)
 8009a1c:	45800115 	stw	r22,4(r8)
 8009a20:	d8c02015 	stw	r3,128(sp)
 8009a24:	d8801f15 	stw	r2,124(sp)
 8009a28:	e0bff60e 	bge	fp,r2,8009a04 <___vfprintf_internal_r+0x1354>
 8009a2c:	d9801e04 	addi	r6,sp,120
 8009a30:	b80b883a 	mov	r5,r23
 8009a34:	9809883a 	mov	r4,r19
 8009a38:	800fde40 	call	800fde4 <__sprint_r>
 8009a3c:	103c201e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 8009a40:	d8c02017 	ldw	r3,128(sp)
 8009a44:	d8801f17 	ldw	r2,124(sp)
 8009a48:	da000404 	addi	r8,sp,16
 8009a4c:	003fee06 	br	8009a08 <___vfprintf_internal_r+0x1358>
 8009a50:	d9002d17 	ldw	r4,180(sp)
 8009a54:	d9801e04 	addi	r6,sp,120
 8009a58:	b80b883a 	mov	r5,r23
 8009a5c:	800fde40 	call	800fde4 <__sprint_r>
 8009a60:	103c171e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 8009a64:	d8c02017 	ldw	r3,128(sp)
 8009a68:	df002787 	ldb	fp,158(sp)
 8009a6c:	da000404 	addi	r8,sp,16
 8009a70:	003d3406 	br	8008f44 <___vfprintf_internal_r+0x894>
 8009a74:	9080040c 	andi	r2,r18,16
 8009a78:	10016126 	beq	r2,zero,800a000 <___vfprintf_internal_r+0x1950>
 8009a7c:	d9402e17 	ldw	r5,184(sp)
 8009a80:	2cc00017 	ldw	r19,0(r5)
 8009a84:	29400104 	addi	r5,r5,4
 8009a88:	d9402e15 	stw	r5,184(sp)
 8009a8c:	982dd7fa 	srai	r22,r19,31
 8009a90:	b005883a 	mov	r2,r22
 8009a94:	003c5a06 	br	8008c00 <___vfprintf_internal_r+0x550>
 8009a98:	9080040c 	andi	r2,r18,16
 8009a9c:	10003526 	beq	r2,zero,8009b74 <___vfprintf_internal_r+0x14c4>
 8009aa0:	d8c02e17 	ldw	r3,184(sp)
 8009aa4:	d9002a17 	ldw	r4,168(sp)
 8009aa8:	d8002785 	stb	zero,158(sp)
 8009aac:	18800104 	addi	r2,r3,4
 8009ab0:	1cc00017 	ldw	r19,0(r3)
 8009ab4:	002d883a 	mov	r22,zero
 8009ab8:	20003716 	blt	r4,zero,8009b98 <___vfprintf_internal_r+0x14e8>
 8009abc:	00ffdfc4 	movi	r3,-129
 8009ac0:	d8802e15 	stw	r2,184(sp)
 8009ac4:	90e4703a 	and	r18,r18,r3
 8009ac8:	0039883a 	mov	fp,zero
 8009acc:	983dd426 	beq	r19,zero,8009220 <___vfprintf_internal_r+0xb70>
 8009ad0:	00800244 	movi	r2,9
 8009ad4:	14fc5336 	bltu	r2,r19,8008c24 <___vfprintf_internal_r+0x574>
 8009ad8:	d8c02817 	ldw	r3,160(sp)
 8009adc:	dc001dc4 	addi	r16,sp,119
 8009ae0:	9cc00c04 	addi	r19,r19,48
 8009ae4:	1c07c83a 	sub	r3,r3,r16
 8009ae8:	dcc01dc5 	stb	r19,119(sp)
 8009aec:	d8c02b15 	stw	r3,172(sp)
 8009af0:	003cc606 	br	8008e0c <___vfprintf_internal_r+0x75c>
 8009af4:	d8803317 	ldw	r2,204(sp)
 8009af8:	143fffc4 	addi	r16,r2,-1
 8009afc:	043f4d0e 	bge	zero,r16,8009834 <___vfprintf_internal_r+0x1184>
 8009b00:	07000404 	movi	fp,16
 8009b04:	e400810e 	bge	fp,r16,8009d0c <___vfprintf_internal_r+0x165c>
 8009b08:	014200b4 	movhi	r5,2050
 8009b0c:	2960db84 	addi	r5,r5,-31890
 8009b10:	d9402c15 	stw	r5,176(sp)
 8009b14:	01c001c4 	movi	r7,7
 8009b18:	dcc02d17 	ldw	r19,180(sp)
 8009b1c:	00000306 	br	8009b2c <___vfprintf_internal_r+0x147c>
 8009b20:	b5800204 	addi	r22,r22,8
 8009b24:	843ffc04 	addi	r16,r16,-16
 8009b28:	e4007b0e 	bge	fp,r16,8009d18 <___vfprintf_internal_r+0x1668>
 8009b2c:	18c00404 	addi	r3,r3,16
 8009b30:	8c400044 	addi	r17,r17,1
 8009b34:	b5000015 	stw	r20,0(r22)
 8009b38:	b7000115 	stw	fp,4(r22)
 8009b3c:	d8c02015 	stw	r3,128(sp)
 8009b40:	dc401f15 	stw	r17,124(sp)
 8009b44:	3c7ff60e 	bge	r7,r17,8009b20 <___vfprintf_internal_r+0x1470>
 8009b48:	d9801e04 	addi	r6,sp,120
 8009b4c:	b80b883a 	mov	r5,r23
 8009b50:	9809883a 	mov	r4,r19
 8009b54:	d9c03c15 	stw	r7,240(sp)
 8009b58:	800fde40 	call	800fde4 <__sprint_r>
 8009b5c:	d9c03c17 	ldw	r7,240(sp)
 8009b60:	103bd71e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 8009b64:	d8c02017 	ldw	r3,128(sp)
 8009b68:	dc401f17 	ldw	r17,124(sp)
 8009b6c:	dd800404 	addi	r22,sp,16
 8009b70:	003fec06 	br	8009b24 <___vfprintf_internal_r+0x1474>
 8009b74:	9080100c 	andi	r2,r18,64
 8009b78:	d8002785 	stb	zero,158(sp)
 8009b7c:	10010e26 	beq	r2,zero,8009fb8 <___vfprintf_internal_r+0x1908>
 8009b80:	d9402e17 	ldw	r5,184(sp)
 8009b84:	d8c02a17 	ldw	r3,168(sp)
 8009b88:	002d883a 	mov	r22,zero
 8009b8c:	28800104 	addi	r2,r5,4
 8009b90:	2cc0000b 	ldhu	r19,0(r5)
 8009b94:	183fc90e 	bge	r3,zero,8009abc <___vfprintf_internal_r+0x140c>
 8009b98:	d8802e15 	stw	r2,184(sp)
 8009b9c:	0039883a 	mov	fp,zero
 8009ba0:	9d84b03a 	or	r2,r19,r22
 8009ba4:	103c1e1e 	bne	r2,zero,8008c20 <___vfprintf_internal_r+0x570>
 8009ba8:	00800044 	movi	r2,1
 8009bac:	003e6c06 	br	8009560 <___vfprintf_internal_r+0xeb0>
 8009bb0:	d9002d17 	ldw	r4,180(sp)
 8009bb4:	d9801e04 	addi	r6,sp,120
 8009bb8:	b80b883a 	mov	r5,r23
 8009bbc:	800fde40 	call	800fde4 <__sprint_r>
 8009bc0:	103bbf1e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 8009bc4:	d8c02017 	ldw	r3,128(sp)
 8009bc8:	da000404 	addi	r8,sp,16
 8009bcc:	d9003217 	ldw	r4,200(sp)
 8009bd0:	d8802617 	ldw	r2,152(sp)
 8009bd4:	d9403317 	ldw	r5,204(sp)
 8009bd8:	8123883a 	add	r17,r16,r4
 8009bdc:	11400216 	blt	r2,r5,8009be8 <___vfprintf_internal_r+0x1538>
 8009be0:	9100004c 	andi	r4,r18,1
 8009be4:	20000d26 	beq	r4,zero,8009c1c <___vfprintf_internal_r+0x156c>
 8009be8:	d9003717 	ldw	r4,220(sp)
 8009bec:	d9403417 	ldw	r5,208(sp)
 8009bf0:	1907883a 	add	r3,r3,r4
 8009bf4:	d9001f17 	ldw	r4,124(sp)
 8009bf8:	41400015 	stw	r5,0(r8)
 8009bfc:	d9403717 	ldw	r5,220(sp)
 8009c00:	21000044 	addi	r4,r4,1
 8009c04:	d8c02015 	stw	r3,128(sp)
 8009c08:	41400115 	stw	r5,4(r8)
 8009c0c:	d9001f15 	stw	r4,124(sp)
 8009c10:	014001c4 	movi	r5,7
 8009c14:	2901e816 	blt	r5,r4,800a3b8 <___vfprintf_internal_r+0x1d08>
 8009c18:	42000204 	addi	r8,r8,8
 8009c1c:	d9003317 	ldw	r4,204(sp)
 8009c20:	8121883a 	add	r16,r16,r4
 8009c24:	2085c83a 	sub	r2,r4,r2
 8009c28:	8461c83a 	sub	r16,r16,r17
 8009c2c:	1400010e 	bge	r2,r16,8009c34 <___vfprintf_internal_r+0x1584>
 8009c30:	1021883a 	mov	r16,r2
 8009c34:	04000a0e 	bge	zero,r16,8009c60 <___vfprintf_internal_r+0x15b0>
 8009c38:	d9001f17 	ldw	r4,124(sp)
 8009c3c:	1c07883a 	add	r3,r3,r16
 8009c40:	44400015 	stw	r17,0(r8)
 8009c44:	21000044 	addi	r4,r4,1
 8009c48:	44000115 	stw	r16,4(r8)
 8009c4c:	d8c02015 	stw	r3,128(sp)
 8009c50:	d9001f15 	stw	r4,124(sp)
 8009c54:	014001c4 	movi	r5,7
 8009c58:	2901fb16 	blt	r5,r4,800a448 <___vfprintf_internal_r+0x1d98>
 8009c5c:	42000204 	addi	r8,r8,8
 8009c60:	8001f716 	blt	r16,zero,800a440 <___vfprintf_internal_r+0x1d90>
 8009c64:	1421c83a 	sub	r16,r2,r16
 8009c68:	043d160e 	bge	zero,r16,80090c4 <___vfprintf_internal_r+0xa14>
 8009c6c:	04400404 	movi	r17,16
 8009c70:	d8801f17 	ldw	r2,124(sp)
 8009c74:	8c3efb0e 	bge	r17,r16,8009864 <___vfprintf_internal_r+0x11b4>
 8009c78:	014200b4 	movhi	r5,2050
 8009c7c:	2960db84 	addi	r5,r5,-31890
 8009c80:	d9402c15 	stw	r5,176(sp)
 8009c84:	058001c4 	movi	r22,7
 8009c88:	dcc02d17 	ldw	r19,180(sp)
 8009c8c:	00000306 	br	8009c9c <___vfprintf_internal_r+0x15ec>
 8009c90:	42000204 	addi	r8,r8,8
 8009c94:	843ffc04 	addi	r16,r16,-16
 8009c98:	8c3ef50e 	bge	r17,r16,8009870 <___vfprintf_internal_r+0x11c0>
 8009c9c:	18c00404 	addi	r3,r3,16
 8009ca0:	10800044 	addi	r2,r2,1
 8009ca4:	45000015 	stw	r20,0(r8)
 8009ca8:	44400115 	stw	r17,4(r8)
 8009cac:	d8c02015 	stw	r3,128(sp)
 8009cb0:	d8801f15 	stw	r2,124(sp)
 8009cb4:	b0bff60e 	bge	r22,r2,8009c90 <___vfprintf_internal_r+0x15e0>
 8009cb8:	d9801e04 	addi	r6,sp,120
 8009cbc:	b80b883a 	mov	r5,r23
 8009cc0:	9809883a 	mov	r4,r19
 8009cc4:	800fde40 	call	800fde4 <__sprint_r>
 8009cc8:	103b7d1e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 8009ccc:	d8c02017 	ldw	r3,128(sp)
 8009cd0:	d8801f17 	ldw	r2,124(sp)
 8009cd4:	da000404 	addi	r8,sp,16
 8009cd8:	003fee06 	br	8009c94 <___vfprintf_internal_r+0x15e4>
 8009cdc:	9088703a 	and	r4,r18,r2
 8009ce0:	203eab1e 	bne	r4,zero,8009790 <___vfprintf_internal_r+0x10e0>
 8009ce4:	dc401f17 	ldw	r17,124(sp)
 8009ce8:	40800115 	stw	r2,4(r8)
 8009cec:	44000015 	stw	r16,0(r8)
 8009cf0:	8c400044 	addi	r17,r17,1
 8009cf4:	d8c02015 	stw	r3,128(sp)
 8009cf8:	dc401f15 	stw	r17,124(sp)
 8009cfc:	008001c4 	movi	r2,7
 8009d00:	14400e16 	blt	r2,r17,8009d3c <___vfprintf_internal_r+0x168c>
 8009d04:	45800204 	addi	r22,r8,8
 8009d08:	003eca06 	br	8009834 <___vfprintf_internal_r+0x1184>
 8009d0c:	010200b4 	movhi	r4,2050
 8009d10:	2120db84 	addi	r4,r4,-31890
 8009d14:	d9002c15 	stw	r4,176(sp)
 8009d18:	d8802c17 	ldw	r2,176(sp)
 8009d1c:	1c07883a 	add	r3,r3,r16
 8009d20:	8c400044 	addi	r17,r17,1
 8009d24:	b0800015 	stw	r2,0(r22)
 8009d28:	b4000115 	stw	r16,4(r22)
 8009d2c:	d8c02015 	stw	r3,128(sp)
 8009d30:	dc401f15 	stw	r17,124(sp)
 8009d34:	008001c4 	movi	r2,7
 8009d38:	147ebd0e 	bge	r2,r17,8009830 <___vfprintf_internal_r+0x1180>
 8009d3c:	d9002d17 	ldw	r4,180(sp)
 8009d40:	d9801e04 	addi	r6,sp,120
 8009d44:	b80b883a 	mov	r5,r23
 8009d48:	800fde40 	call	800fde4 <__sprint_r>
 8009d4c:	103b5c1e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 8009d50:	d8c02017 	ldw	r3,128(sp)
 8009d54:	dc401f17 	ldw	r17,124(sp)
 8009d58:	dd800404 	addi	r22,sp,16
 8009d5c:	003eb506 	br	8009834 <___vfprintf_internal_r+0x1184>
 8009d60:	d9002d17 	ldw	r4,180(sp)
 8009d64:	d9801e04 	addi	r6,sp,120
 8009d68:	b80b883a 	mov	r5,r23
 8009d6c:	800fde40 	call	800fde4 <__sprint_r>
 8009d70:	103b531e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 8009d74:	d8c02017 	ldw	r3,128(sp)
 8009d78:	dc401f17 	ldw	r17,124(sp)
 8009d7c:	da000404 	addi	r8,sp,16
 8009d80:	003e8d06 	br	80097b8 <___vfprintf_internal_r+0x1108>
 8009d84:	d9002d17 	ldw	r4,180(sp)
 8009d88:	d9801e04 	addi	r6,sp,120
 8009d8c:	b80b883a 	mov	r5,r23
 8009d90:	800fde40 	call	800fde4 <__sprint_r>
 8009d94:	103b4a1e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 8009d98:	d8c02017 	ldw	r3,128(sp)
 8009d9c:	dc401f17 	ldw	r17,124(sp)
 8009da0:	dd800404 	addi	r22,sp,16
 8009da4:	003e8f06 	br	80097e4 <___vfprintf_internal_r+0x1134>
 8009da8:	0027883a 	mov	r19,zero
 8009dac:	003f4a06 	br	8009ad8 <___vfprintf_internal_r+0x1428>
 8009db0:	d9002d17 	ldw	r4,180(sp)
 8009db4:	d9801e04 	addi	r6,sp,120
 8009db8:	b80b883a 	mov	r5,r23
 8009dbc:	800fde40 	call	800fde4 <__sprint_r>
 8009dc0:	103b3f1e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 8009dc4:	d8c02017 	ldw	r3,128(sp)
 8009dc8:	da000404 	addi	r8,sp,16
 8009dcc:	003c7b06 	br	8008fbc <___vfprintf_internal_r+0x90c>
 8009dd0:	d9402a17 	ldw	r5,168(sp)
 8009dd4:	04e7c83a 	sub	r19,zero,r19
 8009dd8:	07000b44 	movi	fp,45
 8009ddc:	9804c03a 	cmpne	r2,r19,zero
 8009de0:	05adc83a 	sub	r22,zero,r22
 8009de4:	df002785 	stb	fp,158(sp)
 8009de8:	b0adc83a 	sub	r22,r22,r2
 8009dec:	28017b16 	blt	r5,zero,800a3dc <___vfprintf_internal_r+0x1d2c>
 8009df0:	00bfdfc4 	movi	r2,-129
 8009df4:	90a4703a 	and	r18,r18,r2
 8009df8:	003b8906 	br	8008c20 <___vfprintf_internal_r+0x570>
 8009dfc:	d9003617 	ldw	r4,216(sp)
 8009e00:	d9403817 	ldw	r5,224(sp)
 8009e04:	da003d15 	stw	r8,244(sp)
 8009e08:	800fa080 	call	800fa08 <__fpclassifyd>
 8009e0c:	da003d17 	ldw	r8,244(sp)
 8009e10:	1000f026 	beq	r2,zero,800a1d4 <___vfprintf_internal_r+0x1b24>
 8009e14:	d9002a17 	ldw	r4,168(sp)
 8009e18:	05bff7c4 	movi	r22,-33
 8009e1c:	00bfffc4 	movi	r2,-1
 8009e20:	8dac703a 	and	r22,r17,r22
 8009e24:	20820026 	beq	r4,r2,800a628 <___vfprintf_internal_r+0x1f78>
 8009e28:	008011c4 	movi	r2,71
 8009e2c:	b081f726 	beq	r22,r2,800a60c <___vfprintf_internal_r+0x1f5c>
 8009e30:	d9003817 	ldw	r4,224(sp)
 8009e34:	90c04014 	ori	r3,r18,256
 8009e38:	d8c02c15 	stw	r3,176(sp)
 8009e3c:	20021516 	blt	r4,zero,800a694 <___vfprintf_internal_r+0x1fe4>
 8009e40:	dcc03817 	ldw	r19,224(sp)
 8009e44:	d8002905 	stb	zero,164(sp)
 8009e48:	00801984 	movi	r2,102
 8009e4c:	8881f926 	beq	r17,r2,800a634 <___vfprintf_internal_r+0x1f84>
 8009e50:	00801184 	movi	r2,70
 8009e54:	88821c26 	beq	r17,r2,800a6c8 <___vfprintf_internal_r+0x2018>
 8009e58:	00801144 	movi	r2,69
 8009e5c:	b081ef26 	beq	r22,r2,800a61c <___vfprintf_internal_r+0x1f6c>
 8009e60:	d8c02a17 	ldw	r3,168(sp)
 8009e64:	d8802104 	addi	r2,sp,132
 8009e68:	d8800315 	stw	r2,12(sp)
 8009e6c:	d9403617 	ldw	r5,216(sp)
 8009e70:	d8802504 	addi	r2,sp,148
 8009e74:	d9002d17 	ldw	r4,180(sp)
 8009e78:	d8800215 	stw	r2,8(sp)
 8009e7c:	d8802604 	addi	r2,sp,152
 8009e80:	d8c00015 	stw	r3,0(sp)
 8009e84:	d8800115 	stw	r2,4(sp)
 8009e88:	01c00084 	movi	r7,2
 8009e8c:	980d883a 	mov	r6,r19
 8009e90:	d8c03c15 	stw	r3,240(sp)
 8009e94:	da003d15 	stw	r8,244(sp)
 8009e98:	800ade00 	call	800ade0 <_dtoa_r>
 8009e9c:	1021883a 	mov	r16,r2
 8009ea0:	008019c4 	movi	r2,103
 8009ea4:	d8c03c17 	ldw	r3,240(sp)
 8009ea8:	da003d17 	ldw	r8,244(sp)
 8009eac:	88817126 	beq	r17,r2,800a474 <___vfprintf_internal_r+0x1dc4>
 8009eb0:	008011c4 	movi	r2,71
 8009eb4:	88829126 	beq	r17,r2,800a8fc <___vfprintf_internal_r+0x224c>
 8009eb8:	80f9883a 	add	fp,r16,r3
 8009ebc:	d9003617 	ldw	r4,216(sp)
 8009ec0:	000d883a 	mov	r6,zero
 8009ec4:	000f883a 	mov	r7,zero
 8009ec8:	980b883a 	mov	r5,r19
 8009ecc:	da003d15 	stw	r8,244(sp)
 8009ed0:	8013b680 	call	8013b68 <__eqdf2>
 8009ed4:	da003d17 	ldw	r8,244(sp)
 8009ed8:	10018d26 	beq	r2,zero,800a510 <___vfprintf_internal_r+0x1e60>
 8009edc:	d8802117 	ldw	r2,132(sp)
 8009ee0:	1700062e 	bgeu	r2,fp,8009efc <___vfprintf_internal_r+0x184c>
 8009ee4:	01000c04 	movi	r4,48
 8009ee8:	10c00044 	addi	r3,r2,1
 8009eec:	d8c02115 	stw	r3,132(sp)
 8009ef0:	11000005 	stb	r4,0(r2)
 8009ef4:	d8802117 	ldw	r2,132(sp)
 8009ef8:	173ffb36 	bltu	r2,fp,8009ee8 <___vfprintf_internal_r+0x1838>
 8009efc:	1405c83a 	sub	r2,r2,r16
 8009f00:	d8803315 	stw	r2,204(sp)
 8009f04:	008011c4 	movi	r2,71
 8009f08:	b0817626 	beq	r22,r2,800a4e4 <___vfprintf_internal_r+0x1e34>
 8009f0c:	00801944 	movi	r2,101
 8009f10:	1442800e 	bge	r2,r17,800a914 <___vfprintf_internal_r+0x2264>
 8009f14:	d8c02617 	ldw	r3,152(sp)
 8009f18:	00801984 	movi	r2,102
 8009f1c:	d8c03215 	stw	r3,200(sp)
 8009f20:	8881fe26 	beq	r17,r2,800a71c <___vfprintf_internal_r+0x206c>
 8009f24:	d8c03217 	ldw	r3,200(sp)
 8009f28:	d9003317 	ldw	r4,204(sp)
 8009f2c:	1901dd16 	blt	r3,r4,800a6a4 <___vfprintf_internal_r+0x1ff4>
 8009f30:	9480004c 	andi	r18,r18,1
 8009f34:	90022b1e 	bne	r18,zero,800a7e4 <___vfprintf_internal_r+0x2134>
 8009f38:	1805883a 	mov	r2,r3
 8009f3c:	18028316 	blt	r3,zero,800a94c <___vfprintf_internal_r+0x229c>
 8009f40:	d8c03217 	ldw	r3,200(sp)
 8009f44:	044019c4 	movi	r17,103
 8009f48:	d8c02b15 	stw	r3,172(sp)
 8009f4c:	df002907 	ldb	fp,164(sp)
 8009f50:	e001531e 	bne	fp,zero,800a4a0 <___vfprintf_internal_r+0x1df0>
 8009f54:	df002783 	ldbu	fp,158(sp)
 8009f58:	d8802915 	stw	r2,164(sp)
 8009f5c:	dc802c17 	ldw	r18,176(sp)
 8009f60:	d8002a15 	stw	zero,168(sp)
 8009f64:	003baf06 	br	8008e24 <___vfprintf_internal_r+0x774>
 8009f68:	d8c02e17 	ldw	r3,184(sp)
 8009f6c:	d9002e17 	ldw	r4,184(sp)
 8009f70:	d9402e17 	ldw	r5,184(sp)
 8009f74:	18c00017 	ldw	r3,0(r3)
 8009f78:	21000117 	ldw	r4,4(r4)
 8009f7c:	29400204 	addi	r5,r5,8
 8009f80:	d8c03615 	stw	r3,216(sp)
 8009f84:	d9003815 	stw	r4,224(sp)
 8009f88:	d9402e15 	stw	r5,184(sp)
 8009f8c:	003b5006 	br	8008cd0 <___vfprintf_internal_r+0x620>
 8009f90:	ac400007 	ldb	r17,0(r21)
 8009f94:	003a2806 	br	8008838 <___vfprintf_internal_r+0x188>
 8009f98:	9080100c 	andi	r2,r18,64
 8009f9c:	1000a826 	beq	r2,zero,800a240 <___vfprintf_internal_r+0x1b90>
 8009fa0:	d8c02e17 	ldw	r3,184(sp)
 8009fa4:	002d883a 	mov	r22,zero
 8009fa8:	1cc0000b 	ldhu	r19,0(r3)
 8009fac:	18c00104 	addi	r3,r3,4
 8009fb0:	d8c02e15 	stw	r3,184(sp)
 8009fb4:	003caf06 	br	8009274 <___vfprintf_internal_r+0xbc4>
 8009fb8:	d9002e17 	ldw	r4,184(sp)
 8009fbc:	d9402a17 	ldw	r5,168(sp)
 8009fc0:	002d883a 	mov	r22,zero
 8009fc4:	20800104 	addi	r2,r4,4
 8009fc8:	24c00017 	ldw	r19,0(r4)
 8009fcc:	283ebb0e 	bge	r5,zero,8009abc <___vfprintf_internal_r+0x140c>
 8009fd0:	003ef106 	br	8009b98 <___vfprintf_internal_r+0x14e8>
 8009fd4:	9080040c 	andi	r2,r18,16
 8009fd8:	1000921e 	bne	r2,zero,800a224 <___vfprintf_internal_r+0x1b74>
 8009fdc:	9480100c 	andi	r18,r18,64
 8009fe0:	90013926 	beq	r18,zero,800a4c8 <___vfprintf_internal_r+0x1e18>
 8009fe4:	d9402e17 	ldw	r5,184(sp)
 8009fe8:	d8c02f17 	ldw	r3,188(sp)
 8009fec:	28800017 	ldw	r2,0(r5)
 8009ff0:	29400104 	addi	r5,r5,4
 8009ff4:	d9402e15 	stw	r5,184(sp)
 8009ff8:	10c0000d 	sth	r3,0(r2)
 8009ffc:	0039e406 	br	8008790 <___vfprintf_internal_r+0xe0>
 800a000:	9080100c 	andi	r2,r18,64
 800a004:	10008026 	beq	r2,zero,800a208 <___vfprintf_internal_r+0x1b58>
 800a008:	d8802e17 	ldw	r2,184(sp)
 800a00c:	14c0000f 	ldh	r19,0(r2)
 800a010:	10800104 	addi	r2,r2,4
 800a014:	d8802e15 	stw	r2,184(sp)
 800a018:	982dd7fa 	srai	r22,r19,31
 800a01c:	b005883a 	mov	r2,r22
 800a020:	003af706 	br	8008c00 <___vfprintf_internal_r+0x550>
 800a024:	9080100c 	andi	r2,r18,64
 800a028:	d8002785 	stb	zero,158(sp)
 800a02c:	10008a1e 	bne	r2,zero,800a258 <___vfprintf_internal_r+0x1ba8>
 800a030:	d9002e17 	ldw	r4,184(sp)
 800a034:	d9402a17 	ldw	r5,168(sp)
 800a038:	002d883a 	mov	r22,zero
 800a03c:	20800104 	addi	r2,r4,4
 800a040:	24c00017 	ldw	r19,0(r4)
 800a044:	283e4b0e 	bge	r5,zero,8009974 <___vfprintf_internal_r+0x12c4>
 800a048:	9d86b03a 	or	r3,r19,r22
 800a04c:	d8802e15 	stw	r2,184(sp)
 800a050:	183e4c1e 	bne	r3,zero,8009984 <___vfprintf_internal_r+0x12d4>
 800a054:	0039883a 	mov	fp,zero
 800a058:	0005883a 	mov	r2,zero
 800a05c:	003d4006 	br	8009560 <___vfprintf_internal_r+0xeb0>
 800a060:	014200b4 	movhi	r5,2050
 800a064:	2960db84 	addi	r5,r5,-31890
 800a068:	d9402c15 	stw	r5,176(sp)
 800a06c:	d9402c17 	ldw	r5,176(sp)
 800a070:	1c47883a 	add	r3,r3,r17
 800a074:	10800044 	addi	r2,r2,1
 800a078:	41400015 	stw	r5,0(r8)
 800a07c:	44400115 	stw	r17,4(r8)
 800a080:	d8c02015 	stw	r3,128(sp)
 800a084:	d8801f15 	stw	r2,124(sp)
 800a088:	010001c4 	movi	r4,7
 800a08c:	20bec816 	blt	r4,r2,8009bb0 <___vfprintf_internal_r+0x1500>
 800a090:	42000204 	addi	r8,r8,8
 800a094:	003ecd06 	br	8009bcc <___vfprintf_internal_r+0x151c>
 800a098:	d9002a17 	ldw	r4,168(sp)
 800a09c:	d8002785 	stb	zero,158(sp)
 800a0a0:	203d2d16 	blt	r4,zero,8009558 <___vfprintf_internal_r+0xea8>
 800a0a4:	00bfdfc4 	movi	r2,-129
 800a0a8:	90a4703a 	and	r18,r18,r2
 800a0ac:	003a6106 	br	8008a34 <___vfprintf_internal_r+0x384>
 800a0b0:	010200b4 	movhi	r4,2050
 800a0b4:	2120db84 	addi	r4,r4,-31890
 800a0b8:	d9002c15 	stw	r4,176(sp)
 800a0bc:	003bea06 	br	8009068 <___vfprintf_internal_r+0x9b8>
 800a0c0:	d9002d17 	ldw	r4,180(sp)
 800a0c4:	d9801e04 	addi	r6,sp,120
 800a0c8:	b80b883a 	mov	r5,r23
 800a0cc:	800fde40 	call	800fde4 <__sprint_r>
 800a0d0:	103a7b1e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 800a0d4:	d8c02017 	ldw	r3,128(sp)
 800a0d8:	da000404 	addi	r8,sp,16
 800a0dc:	003d4106 	br	80095e4 <___vfprintf_internal_r+0xf34>
 800a0e0:	d8801f17 	ldw	r2,124(sp)
 800a0e4:	014200b4 	movhi	r5,2050
 800a0e8:	01000044 	movi	r4,1
 800a0ec:	18c00044 	addi	r3,r3,1
 800a0f0:	10800044 	addi	r2,r2,1
 800a0f4:	2960db04 	addi	r5,r5,-31892
 800a0f8:	41000115 	stw	r4,4(r8)
 800a0fc:	41400015 	stw	r5,0(r8)
 800a100:	d8c02015 	stw	r3,128(sp)
 800a104:	d8801f15 	stw	r2,124(sp)
 800a108:	010001c4 	movi	r4,7
 800a10c:	20805c16 	blt	r4,r2,800a280 <___vfprintf_internal_r+0x1bd0>
 800a110:	42000204 	addi	r8,r8,8
 800a114:	8800041e 	bne	r17,zero,800a128 <___vfprintf_internal_r+0x1a78>
 800a118:	d8803317 	ldw	r2,204(sp)
 800a11c:	1000021e 	bne	r2,zero,800a128 <___vfprintf_internal_r+0x1a78>
 800a120:	9080004c 	andi	r2,r18,1
 800a124:	103be726 	beq	r2,zero,80090c4 <___vfprintf_internal_r+0xa14>
 800a128:	d9003717 	ldw	r4,220(sp)
 800a12c:	d8801f17 	ldw	r2,124(sp)
 800a130:	d9403417 	ldw	r5,208(sp)
 800a134:	20c7883a 	add	r3,r4,r3
 800a138:	10800044 	addi	r2,r2,1
 800a13c:	41000115 	stw	r4,4(r8)
 800a140:	41400015 	stw	r5,0(r8)
 800a144:	d8c02015 	stw	r3,128(sp)
 800a148:	d8801f15 	stw	r2,124(sp)
 800a14c:	010001c4 	movi	r4,7
 800a150:	20812116 	blt	r4,r2,800a5d8 <___vfprintf_internal_r+0x1f28>
 800a154:	42000204 	addi	r8,r8,8
 800a158:	0463c83a 	sub	r17,zero,r17
 800a15c:	0440730e 	bge	zero,r17,800a32c <___vfprintf_internal_r+0x1c7c>
 800a160:	05800404 	movi	r22,16
 800a164:	b440860e 	bge	r22,r17,800a380 <___vfprintf_internal_r+0x1cd0>
 800a168:	014200b4 	movhi	r5,2050
 800a16c:	2960db84 	addi	r5,r5,-31890
 800a170:	d9402c15 	stw	r5,176(sp)
 800a174:	070001c4 	movi	fp,7
 800a178:	dcc02d17 	ldw	r19,180(sp)
 800a17c:	00000306 	br	800a18c <___vfprintf_internal_r+0x1adc>
 800a180:	42000204 	addi	r8,r8,8
 800a184:	8c7ffc04 	addi	r17,r17,-16
 800a188:	b440800e 	bge	r22,r17,800a38c <___vfprintf_internal_r+0x1cdc>
 800a18c:	18c00404 	addi	r3,r3,16
 800a190:	10800044 	addi	r2,r2,1
 800a194:	45000015 	stw	r20,0(r8)
 800a198:	45800115 	stw	r22,4(r8)
 800a19c:	d8c02015 	stw	r3,128(sp)
 800a1a0:	d8801f15 	stw	r2,124(sp)
 800a1a4:	e0bff60e 	bge	fp,r2,800a180 <___vfprintf_internal_r+0x1ad0>
 800a1a8:	d9801e04 	addi	r6,sp,120
 800a1ac:	b80b883a 	mov	r5,r23
 800a1b0:	9809883a 	mov	r4,r19
 800a1b4:	800fde40 	call	800fde4 <__sprint_r>
 800a1b8:	103a411e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 800a1bc:	d8c02017 	ldw	r3,128(sp)
 800a1c0:	d8801f17 	ldw	r2,124(sp)
 800a1c4:	da000404 	addi	r8,sp,16
 800a1c8:	003fee06 	br	800a184 <___vfprintf_internal_r+0x1ad4>
 800a1cc:	00bfffc4 	movi	r2,-1
 800a1d0:	003a3f06 	br	8008ad0 <___vfprintf_internal_r+0x420>
 800a1d4:	008011c4 	movi	r2,71
 800a1d8:	1440b816 	blt	r2,r17,800a4bc <___vfprintf_internal_r+0x1e0c>
 800a1dc:	040200b4 	movhi	r16,2050
 800a1e0:	8420cd04 	addi	r16,r16,-31948
 800a1e4:	00c000c4 	movi	r3,3
 800a1e8:	00bfdfc4 	movi	r2,-129
 800a1ec:	d8c02915 	stw	r3,164(sp)
 800a1f0:	90a4703a 	and	r18,r18,r2
 800a1f4:	df002783 	ldbu	fp,158(sp)
 800a1f8:	d8c02b15 	stw	r3,172(sp)
 800a1fc:	d8002a15 	stw	zero,168(sp)
 800a200:	d8003215 	stw	zero,200(sp)
 800a204:	003b0706 	br	8008e24 <___vfprintf_internal_r+0x774>
 800a208:	d8c02e17 	ldw	r3,184(sp)
 800a20c:	1cc00017 	ldw	r19,0(r3)
 800a210:	18c00104 	addi	r3,r3,4
 800a214:	d8c02e15 	stw	r3,184(sp)
 800a218:	982dd7fa 	srai	r22,r19,31
 800a21c:	b005883a 	mov	r2,r22
 800a220:	003a7706 	br	8008c00 <___vfprintf_internal_r+0x550>
 800a224:	d8c02e17 	ldw	r3,184(sp)
 800a228:	d9002f17 	ldw	r4,188(sp)
 800a22c:	18800017 	ldw	r2,0(r3)
 800a230:	18c00104 	addi	r3,r3,4
 800a234:	d8c02e15 	stw	r3,184(sp)
 800a238:	11000015 	stw	r4,0(r2)
 800a23c:	00395406 	br	8008790 <___vfprintf_internal_r+0xe0>
 800a240:	d9002e17 	ldw	r4,184(sp)
 800a244:	002d883a 	mov	r22,zero
 800a248:	24c00017 	ldw	r19,0(r4)
 800a24c:	21000104 	addi	r4,r4,4
 800a250:	d9002e15 	stw	r4,184(sp)
 800a254:	003c0706 	br	8009274 <___vfprintf_internal_r+0xbc4>
 800a258:	d9402e17 	ldw	r5,184(sp)
 800a25c:	d8c02a17 	ldw	r3,168(sp)
 800a260:	002d883a 	mov	r22,zero
 800a264:	28800104 	addi	r2,r5,4
 800a268:	2cc0000b 	ldhu	r19,0(r5)
 800a26c:	183dc10e 	bge	r3,zero,8009974 <___vfprintf_internal_r+0x12c4>
 800a270:	003f7506 	br	800a048 <___vfprintf_internal_r+0x1998>
 800a274:	040200b4 	movhi	r16,2050
 800a278:	8420cb04 	addi	r16,r16,-31956
 800a27c:	003aa706 	br	8008d1c <___vfprintf_internal_r+0x66c>
 800a280:	d9002d17 	ldw	r4,180(sp)
 800a284:	d9801e04 	addi	r6,sp,120
 800a288:	b80b883a 	mov	r5,r23
 800a28c:	800fde40 	call	800fde4 <__sprint_r>
 800a290:	103a0b1e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 800a294:	dc402617 	ldw	r17,152(sp)
 800a298:	d8c02017 	ldw	r3,128(sp)
 800a29c:	da000404 	addi	r8,sp,16
 800a2a0:	003f9c06 	br	800a114 <___vfprintf_internal_r+0x1a64>
 800a2a4:	ac400043 	ldbu	r17,1(r21)
 800a2a8:	84000814 	ori	r16,r16,32
 800a2ac:	ad400044 	addi	r21,r21,1
 800a2b0:	8c403fcc 	andi	r17,r17,255
 800a2b4:	8c40201c 	xori	r17,r17,128
 800a2b8:	8c7fe004 	addi	r17,r17,-128
 800a2bc:	00395e06 	br	8008838 <___vfprintf_internal_r+0x188>
 800a2c0:	d8c02e15 	stw	r3,184(sp)
 800a2c4:	0039883a 	mov	fp,zero
 800a2c8:	003e3506 	br	8009ba0 <___vfprintf_internal_r+0x14f0>
 800a2cc:	d9002d17 	ldw	r4,180(sp)
 800a2d0:	d9801e04 	addi	r6,sp,120
 800a2d4:	b80b883a 	mov	r5,r23
 800a2d8:	800fde40 	call	800fde4 <__sprint_r>
 800a2dc:	1039f81e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 800a2e0:	d8c02017 	ldw	r3,128(sp)
 800a2e4:	da000404 	addi	r8,sp,16
 800a2e8:	003cd006 	br	800962c <___vfprintf_internal_r+0xf7c>
 800a2ec:	8009883a 	mov	r4,r16
 800a2f0:	df003d15 	stw	fp,244(sp)
 800a2f4:	80084040 	call	8008404 <strlen>
 800a2f8:	d8802b15 	stw	r2,172(sp)
 800a2fc:	da003d17 	ldw	r8,244(sp)
 800a300:	103c200e 	bge	r2,zero,8009384 <___vfprintf_internal_r+0xcd4>
 800a304:	0005883a 	mov	r2,zero
 800a308:	003c1e06 	br	8009384 <___vfprintf_internal_r+0xcd4>
 800a30c:	d9002d17 	ldw	r4,180(sp)
 800a310:	d9801e04 	addi	r6,sp,120
 800a314:	b80b883a 	mov	r5,r23
 800a318:	800fde40 	call	800fde4 <__sprint_r>
 800a31c:	1039e81e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 800a320:	d8c02017 	ldw	r3,128(sp)
 800a324:	d8801f17 	ldw	r2,124(sp)
 800a328:	da000404 	addi	r8,sp,16
 800a32c:	d9403317 	ldw	r5,204(sp)
 800a330:	10800044 	addi	r2,r2,1
 800a334:	44000015 	stw	r16,0(r8)
 800a338:	28c7883a 	add	r3,r5,r3
 800a33c:	003b5b06 	br	80090ac <___vfprintf_internal_r+0x9fc>
 800a340:	010200b4 	movhi	r4,2050
 800a344:	2120df84 	addi	r4,r4,-31874
 800a348:	d9003515 	stw	r4,212(sp)
 800a34c:	003af206 	br	8008f18 <___vfprintf_internal_r+0x868>
 800a350:	013fffc4 	movi	r4,-1
 800a354:	003a0806 	br	8008b78 <___vfprintf_internal_r+0x4c8>
 800a358:	0023883a 	mov	r17,zero
 800a35c:	003d9d06 	br	80099d4 <___vfprintf_internal_r+0x1324>
 800a360:	d9002d17 	ldw	r4,180(sp)
 800a364:	d9801e04 	addi	r6,sp,120
 800a368:	b80b883a 	mov	r5,r23
 800a36c:	800fde40 	call	800fde4 <__sprint_r>
 800a370:	1039d31e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 800a374:	d8c02017 	ldw	r3,128(sp)
 800a378:	da000404 	addi	r8,sp,16
 800a37c:	003d9406 	br	80099d0 <___vfprintf_internal_r+0x1320>
 800a380:	010200b4 	movhi	r4,2050
 800a384:	2120db84 	addi	r4,r4,-31890
 800a388:	d9002c15 	stw	r4,176(sp)
 800a38c:	d9002c17 	ldw	r4,176(sp)
 800a390:	1c47883a 	add	r3,r3,r17
 800a394:	10800044 	addi	r2,r2,1
 800a398:	41000015 	stw	r4,0(r8)
 800a39c:	44400115 	stw	r17,4(r8)
 800a3a0:	d8c02015 	stw	r3,128(sp)
 800a3a4:	d8801f15 	stw	r2,124(sp)
 800a3a8:	010001c4 	movi	r4,7
 800a3ac:	20bfd716 	blt	r4,r2,800a30c <___vfprintf_internal_r+0x1c5c>
 800a3b0:	42000204 	addi	r8,r8,8
 800a3b4:	003fdd06 	br	800a32c <___vfprintf_internal_r+0x1c7c>
 800a3b8:	d9002d17 	ldw	r4,180(sp)
 800a3bc:	d9801e04 	addi	r6,sp,120
 800a3c0:	b80b883a 	mov	r5,r23
 800a3c4:	800fde40 	call	800fde4 <__sprint_r>
 800a3c8:	1039bd1e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 800a3cc:	d8802617 	ldw	r2,152(sp)
 800a3d0:	d8c02017 	ldw	r3,128(sp)
 800a3d4:	da000404 	addi	r8,sp,16
 800a3d8:	003e1006 	br	8009c1c <___vfprintf_internal_r+0x156c>
 800a3dc:	00800044 	movi	r2,1
 800a3e0:	10803fcc 	andi	r2,r2,255
 800a3e4:	00c00044 	movi	r3,1
 800a3e8:	10fa0d26 	beq	r2,r3,8008c20 <___vfprintf_internal_r+0x570>
 800a3ec:	00c00084 	movi	r3,2
 800a3f0:	10fbaf26 	beq	r2,r3,80092b0 <___vfprintf_internal_r+0xc00>
 800a3f4:	003a6d06 	br	8008dac <___vfprintf_internal_r+0x6fc>
 800a3f8:	010200b4 	movhi	r4,2050
 800a3fc:	2120df84 	addi	r4,r4,-31874
 800a400:	d9003515 	stw	r4,212(sp)
 800a404:	003b5406 	br	8009158 <___vfprintf_internal_r+0xaa8>
 800a408:	d8802a17 	ldw	r2,168(sp)
 800a40c:	00c00184 	movi	r3,6
 800a410:	1880012e 	bgeu	r3,r2,800a418 <___vfprintf_internal_r+0x1d68>
 800a414:	1805883a 	mov	r2,r3
 800a418:	d8802b15 	stw	r2,172(sp)
 800a41c:	1000ef16 	blt	r2,zero,800a7dc <___vfprintf_internal_r+0x212c>
 800a420:	040200b4 	movhi	r16,2050
 800a424:	d8802915 	stw	r2,164(sp)
 800a428:	dcc02e15 	stw	r19,184(sp)
 800a42c:	d8002a15 	stw	zero,168(sp)
 800a430:	d8003215 	stw	zero,200(sp)
 800a434:	8420d904 	addi	r16,r16,-31900
 800a438:	0039883a 	mov	fp,zero
 800a43c:	003a8006 	br	8008e40 <___vfprintf_internal_r+0x790>
 800a440:	0021883a 	mov	r16,zero
 800a444:	003e0706 	br	8009c64 <___vfprintf_internal_r+0x15b4>
 800a448:	d9002d17 	ldw	r4,180(sp)
 800a44c:	d9801e04 	addi	r6,sp,120
 800a450:	b80b883a 	mov	r5,r23
 800a454:	800fde40 	call	800fde4 <__sprint_r>
 800a458:	1039991e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 800a45c:	d8802617 	ldw	r2,152(sp)
 800a460:	d9403317 	ldw	r5,204(sp)
 800a464:	d8c02017 	ldw	r3,128(sp)
 800a468:	da000404 	addi	r8,sp,16
 800a46c:	2885c83a 	sub	r2,r5,r2
 800a470:	003dfb06 	br	8009c60 <___vfprintf_internal_r+0x15b0>
 800a474:	9080004c 	andi	r2,r18,1
 800a478:	103e8f1e 	bne	r2,zero,8009eb8 <___vfprintf_internal_r+0x1808>
 800a47c:	d8802117 	ldw	r2,132(sp)
 800a480:	003e9e06 	br	8009efc <___vfprintf_internal_r+0x184c>
 800a484:	1025883a 	mov	r18,r2
 800a488:	0039883a 	mov	fp,zero
 800a48c:	00800084 	movi	r2,2
 800a490:	003fd306 	br	800a3e0 <___vfprintf_internal_r+0x1d30>
 800a494:	07000b44 	movi	fp,45
 800a498:	df002785 	stb	fp,158(sp)
 800a49c:	003a1b06 	br	8008d0c <___vfprintf_internal_r+0x65c>
 800a4a0:	00c00b44 	movi	r3,45
 800a4a4:	d8c02785 	stb	r3,158(sp)
 800a4a8:	d8802915 	stw	r2,164(sp)
 800a4ac:	dc802c17 	ldw	r18,176(sp)
 800a4b0:	d8002a15 	stw	zero,168(sp)
 800a4b4:	07000b44 	movi	fp,45
 800a4b8:	003a5e06 	br	8008e34 <___vfprintf_internal_r+0x784>
 800a4bc:	040200b4 	movhi	r16,2050
 800a4c0:	8420ce04 	addi	r16,r16,-31944
 800a4c4:	003f4706 	br	800a1e4 <___vfprintf_internal_r+0x1b34>
 800a4c8:	d9002e17 	ldw	r4,184(sp)
 800a4cc:	d9402f17 	ldw	r5,188(sp)
 800a4d0:	20800017 	ldw	r2,0(r4)
 800a4d4:	21000104 	addi	r4,r4,4
 800a4d8:	d9002e15 	stw	r4,184(sp)
 800a4dc:	11400015 	stw	r5,0(r2)
 800a4e0:	0038ab06 	br	8008790 <___vfprintf_internal_r+0xe0>
 800a4e4:	dd802617 	ldw	r22,152(sp)
 800a4e8:	00bfff44 	movi	r2,-3
 800a4ec:	b0801c16 	blt	r22,r2,800a560 <___vfprintf_internal_r+0x1eb0>
 800a4f0:	d9402a17 	ldw	r5,168(sp)
 800a4f4:	2d801a16 	blt	r5,r22,800a560 <___vfprintf_internal_r+0x1eb0>
 800a4f8:	dd803215 	stw	r22,200(sp)
 800a4fc:	003e8906 	br	8009f24 <___vfprintf_internal_r+0x1874>
 800a500:	010200b4 	movhi	r4,2050
 800a504:	2120db84 	addi	r4,r4,-31890
 800a508:	d9002c15 	stw	r4,176(sp)
 800a50c:	003c9106 	br	8009754 <___vfprintf_internal_r+0x10a4>
 800a510:	e005883a 	mov	r2,fp
 800a514:	003e7906 	br	8009efc <___vfprintf_internal_r+0x184c>
 800a518:	d9002a17 	ldw	r4,168(sp)
 800a51c:	df002783 	ldbu	fp,158(sp)
 800a520:	dcc02e15 	stw	r19,184(sp)
 800a524:	d9002915 	stw	r4,164(sp)
 800a528:	d9002b15 	stw	r4,172(sp)
 800a52c:	d8002a15 	stw	zero,168(sp)
 800a530:	d8003215 	stw	zero,200(sp)
 800a534:	003a3b06 	br	8008e24 <___vfprintf_internal_r+0x774>
 800a538:	9080004c 	andi	r2,r18,1
 800a53c:	0039883a 	mov	fp,zero
 800a540:	10000426 	beq	r2,zero,800a554 <___vfprintf_internal_r+0x1ea4>
 800a544:	00800c04 	movi	r2,48
 800a548:	dc001dc4 	addi	r16,sp,119
 800a54c:	d8801dc5 	stb	r2,119(sp)
 800a550:	003b6406 	br	80092e4 <___vfprintf_internal_r+0xc34>
 800a554:	d8002b15 	stw	zero,172(sp)
 800a558:	dc001e04 	addi	r16,sp,120
 800a55c:	003a2b06 	br	8008e0c <___vfprintf_internal_r+0x75c>
 800a560:	8c7fff84 	addi	r17,r17,-2
 800a564:	b5bfffc4 	addi	r22,r22,-1
 800a568:	dd802615 	stw	r22,152(sp)
 800a56c:	dc4022c5 	stb	r17,139(sp)
 800a570:	b000bf16 	blt	r22,zero,800a870 <___vfprintf_internal_r+0x21c0>
 800a574:	00800ac4 	movi	r2,43
 800a578:	d8802305 	stb	r2,140(sp)
 800a57c:	00800244 	movi	r2,9
 800a580:	15807016 	blt	r2,r22,800a744 <___vfprintf_internal_r+0x2094>
 800a584:	00800c04 	movi	r2,48
 800a588:	b5800c04 	addi	r22,r22,48
 800a58c:	d8802345 	stb	r2,141(sp)
 800a590:	dd802385 	stb	r22,142(sp)
 800a594:	d88023c4 	addi	r2,sp,143
 800a598:	df0022c4 	addi	fp,sp,139
 800a59c:	d8c03317 	ldw	r3,204(sp)
 800a5a0:	1739c83a 	sub	fp,r2,fp
 800a5a4:	d9003317 	ldw	r4,204(sp)
 800a5a8:	e0c7883a 	add	r3,fp,r3
 800a5ac:	df003a15 	stw	fp,232(sp)
 800a5b0:	d8c02b15 	stw	r3,172(sp)
 800a5b4:	00800044 	movi	r2,1
 800a5b8:	1100b30e 	bge	r2,r4,800a888 <___vfprintf_internal_r+0x21d8>
 800a5bc:	d8c02b17 	ldw	r3,172(sp)
 800a5c0:	18c00044 	addi	r3,r3,1
 800a5c4:	d8c02b15 	stw	r3,172(sp)
 800a5c8:	1805883a 	mov	r2,r3
 800a5cc:	1800ac16 	blt	r3,zero,800a880 <___vfprintf_internal_r+0x21d0>
 800a5d0:	d8003215 	stw	zero,200(sp)
 800a5d4:	003e5d06 	br	8009f4c <___vfprintf_internal_r+0x189c>
 800a5d8:	d9002d17 	ldw	r4,180(sp)
 800a5dc:	d9801e04 	addi	r6,sp,120
 800a5e0:	b80b883a 	mov	r5,r23
 800a5e4:	800fde40 	call	800fde4 <__sprint_r>
 800a5e8:	1039351e 	bne	r2,zero,8008ac0 <___vfprintf_internal_r+0x410>
 800a5ec:	dc402617 	ldw	r17,152(sp)
 800a5f0:	d8c02017 	ldw	r3,128(sp)
 800a5f4:	d8801f17 	ldw	r2,124(sp)
 800a5f8:	da000404 	addi	r8,sp,16
 800a5fc:	003ed606 	br	800a158 <___vfprintf_internal_r+0x1aa8>
 800a600:	182b883a 	mov	r21,r3
 800a604:	d8002a15 	stw	zero,168(sp)
 800a608:	00388c06 	br	800883c <___vfprintf_internal_r+0x18c>
 800a60c:	d8802a17 	ldw	r2,168(sp)
 800a610:	103e071e 	bne	r2,zero,8009e30 <___vfprintf_internal_r+0x1780>
 800a614:	dc002a15 	stw	r16,168(sp)
 800a618:	003e0506 	br	8009e30 <___vfprintf_internal_r+0x1780>
 800a61c:	d9002a17 	ldw	r4,168(sp)
 800a620:	20c00044 	addi	r3,r4,1
 800a624:	003e0f06 	br	8009e64 <___vfprintf_internal_r+0x17b4>
 800a628:	01400184 	movi	r5,6
 800a62c:	d9402a15 	stw	r5,168(sp)
 800a630:	003dff06 	br	8009e30 <___vfprintf_internal_r+0x1780>
 800a634:	d8802104 	addi	r2,sp,132
 800a638:	d8800315 	stw	r2,12(sp)
 800a63c:	d8802504 	addi	r2,sp,148
 800a640:	d8800215 	stw	r2,8(sp)
 800a644:	d8802604 	addi	r2,sp,152
 800a648:	d8800115 	stw	r2,4(sp)
 800a64c:	d8802a17 	ldw	r2,168(sp)
 800a650:	d9403617 	ldw	r5,216(sp)
 800a654:	d9002d17 	ldw	r4,180(sp)
 800a658:	d8800015 	stw	r2,0(sp)
 800a65c:	01c000c4 	movi	r7,3
 800a660:	980d883a 	mov	r6,r19
 800a664:	da003d15 	stw	r8,244(sp)
 800a668:	800ade00 	call	800ade0 <_dtoa_r>
 800a66c:	d8c02a17 	ldw	r3,168(sp)
 800a670:	da003d17 	ldw	r8,244(sp)
 800a674:	1021883a 	mov	r16,r2
 800a678:	10f9883a 	add	fp,r2,r3
 800a67c:	81000007 	ldb	r4,0(r16)
 800a680:	00800c04 	movi	r2,48
 800a684:	20805e26 	beq	r4,r2,800a800 <___vfprintf_internal_r+0x2150>
 800a688:	d8c02617 	ldw	r3,152(sp)
 800a68c:	e0f9883a 	add	fp,fp,r3
 800a690:	003e0a06 	br	8009ebc <___vfprintf_internal_r+0x180c>
 800a694:	00c00b44 	movi	r3,45
 800a698:	24e0003c 	xorhi	r19,r4,32768
 800a69c:	d8c02905 	stb	r3,164(sp)
 800a6a0:	003de906 	br	8009e48 <___vfprintf_internal_r+0x1798>
 800a6a4:	d8c03217 	ldw	r3,200(sp)
 800a6a8:	00c07a0e 	bge	zero,r3,800a894 <___vfprintf_internal_r+0x21e4>
 800a6ac:	00800044 	movi	r2,1
 800a6b0:	d9003317 	ldw	r4,204(sp)
 800a6b4:	1105883a 	add	r2,r2,r4
 800a6b8:	d8802b15 	stw	r2,172(sp)
 800a6bc:	10004e16 	blt	r2,zero,800a7f8 <___vfprintf_internal_r+0x2148>
 800a6c0:	044019c4 	movi	r17,103
 800a6c4:	003e2106 	br	8009f4c <___vfprintf_internal_r+0x189c>
 800a6c8:	d9002a17 	ldw	r4,168(sp)
 800a6cc:	d8802104 	addi	r2,sp,132
 800a6d0:	d8800315 	stw	r2,12(sp)
 800a6d4:	d9000015 	stw	r4,0(sp)
 800a6d8:	d8802504 	addi	r2,sp,148
 800a6dc:	d9403617 	ldw	r5,216(sp)
 800a6e0:	d9002d17 	ldw	r4,180(sp)
 800a6e4:	d8800215 	stw	r2,8(sp)
 800a6e8:	d8802604 	addi	r2,sp,152
 800a6ec:	d8800115 	stw	r2,4(sp)
 800a6f0:	01c000c4 	movi	r7,3
 800a6f4:	980d883a 	mov	r6,r19
 800a6f8:	da003d15 	stw	r8,244(sp)
 800a6fc:	800ade00 	call	800ade0 <_dtoa_r>
 800a700:	d8c02a17 	ldw	r3,168(sp)
 800a704:	da003d17 	ldw	r8,244(sp)
 800a708:	1021883a 	mov	r16,r2
 800a70c:	00801184 	movi	r2,70
 800a710:	80f9883a 	add	fp,r16,r3
 800a714:	88bfd926 	beq	r17,r2,800a67c <___vfprintf_internal_r+0x1fcc>
 800a718:	003de806 	br	8009ebc <___vfprintf_internal_r+0x180c>
 800a71c:	d9002a17 	ldw	r4,168(sp)
 800a720:	00c04d0e 	bge	zero,r3,800a858 <___vfprintf_internal_r+0x21a8>
 800a724:	2000441e 	bne	r4,zero,800a838 <___vfprintf_internal_r+0x2188>
 800a728:	9480004c 	andi	r18,r18,1
 800a72c:	9000421e 	bne	r18,zero,800a838 <___vfprintf_internal_r+0x2188>
 800a730:	1805883a 	mov	r2,r3
 800a734:	18006f16 	blt	r3,zero,800a8f4 <___vfprintf_internal_r+0x2244>
 800a738:	d8c03217 	ldw	r3,200(sp)
 800a73c:	d8c02b15 	stw	r3,172(sp)
 800a740:	003e0206 	br	8009f4c <___vfprintf_internal_r+0x189c>
 800a744:	df0022c4 	addi	fp,sp,139
 800a748:	dc002a15 	stw	r16,168(sp)
 800a74c:	4027883a 	mov	r19,r8
 800a750:	e021883a 	mov	r16,fp
 800a754:	b009883a 	mov	r4,r22
 800a758:	01400284 	movi	r5,10
 800a75c:	8007d100 	call	8007d10 <__modsi3>
 800a760:	10800c04 	addi	r2,r2,48
 800a764:	843fffc4 	addi	r16,r16,-1
 800a768:	b009883a 	mov	r4,r22
 800a76c:	01400284 	movi	r5,10
 800a770:	80800005 	stb	r2,0(r16)
 800a774:	8007c8c0 	call	8007c8c <__divsi3>
 800a778:	102d883a 	mov	r22,r2
 800a77c:	00800244 	movi	r2,9
 800a780:	15bff416 	blt	r2,r22,800a754 <___vfprintf_internal_r+0x20a4>
 800a784:	9811883a 	mov	r8,r19
 800a788:	b0800c04 	addi	r2,r22,48
 800a78c:	8027883a 	mov	r19,r16
 800a790:	997fffc4 	addi	r5,r19,-1
 800a794:	98bfffc5 	stb	r2,-1(r19)
 800a798:	dc002a17 	ldw	r16,168(sp)
 800a79c:	2f006d2e 	bgeu	r5,fp,800a954 <___vfprintf_internal_r+0x22a4>
 800a7a0:	d9c02384 	addi	r7,sp,142
 800a7a4:	3ccfc83a 	sub	r7,r7,r19
 800a7a8:	d9002344 	addi	r4,sp,141
 800a7ac:	e1cf883a 	add	r7,fp,r7
 800a7b0:	00000106 	br	800a7b8 <___vfprintf_internal_r+0x2108>
 800a7b4:	28800003 	ldbu	r2,0(r5)
 800a7b8:	20800005 	stb	r2,0(r4)
 800a7bc:	21000044 	addi	r4,r4,1
 800a7c0:	29400044 	addi	r5,r5,1
 800a7c4:	393ffb1e 	bne	r7,r4,800a7b4 <___vfprintf_internal_r+0x2104>
 800a7c8:	d8802304 	addi	r2,sp,140
 800a7cc:	14c5c83a 	sub	r2,r2,r19
 800a7d0:	d8c02344 	addi	r3,sp,141
 800a7d4:	1885883a 	add	r2,r3,r2
 800a7d8:	003f7006 	br	800a59c <___vfprintf_internal_r+0x1eec>
 800a7dc:	0005883a 	mov	r2,zero
 800a7e0:	003f0f06 	br	800a420 <___vfprintf_internal_r+0x1d70>
 800a7e4:	d8c03217 	ldw	r3,200(sp)
 800a7e8:	18c00044 	addi	r3,r3,1
 800a7ec:	d8c02b15 	stw	r3,172(sp)
 800a7f0:	1805883a 	mov	r2,r3
 800a7f4:	183fb20e 	bge	r3,zero,800a6c0 <___vfprintf_internal_r+0x2010>
 800a7f8:	0005883a 	mov	r2,zero
 800a7fc:	003fb006 	br	800a6c0 <___vfprintf_internal_r+0x2010>
 800a800:	d9003617 	ldw	r4,216(sp)
 800a804:	000d883a 	mov	r6,zero
 800a808:	000f883a 	mov	r7,zero
 800a80c:	980b883a 	mov	r5,r19
 800a810:	d8c03c15 	stw	r3,240(sp)
 800a814:	da003d15 	stw	r8,244(sp)
 800a818:	8013b680 	call	8013b68 <__eqdf2>
 800a81c:	d8c03c17 	ldw	r3,240(sp)
 800a820:	da003d17 	ldw	r8,244(sp)
 800a824:	103f9826 	beq	r2,zero,800a688 <___vfprintf_internal_r+0x1fd8>
 800a828:	00800044 	movi	r2,1
 800a82c:	10c7c83a 	sub	r3,r2,r3
 800a830:	d8c02615 	stw	r3,152(sp)
 800a834:	003f9506 	br	800a68c <___vfprintf_internal_r+0x1fdc>
 800a838:	d9002a17 	ldw	r4,168(sp)
 800a83c:	d8c03217 	ldw	r3,200(sp)
 800a840:	20800044 	addi	r2,r4,1
 800a844:	1885883a 	add	r2,r3,r2
 800a848:	d8802b15 	stw	r2,172(sp)
 800a84c:	103dbf0e 	bge	r2,zero,8009f4c <___vfprintf_internal_r+0x189c>
 800a850:	0005883a 	mov	r2,zero
 800a854:	003dbd06 	br	8009f4c <___vfprintf_internal_r+0x189c>
 800a858:	2000201e 	bne	r4,zero,800a8dc <___vfprintf_internal_r+0x222c>
 800a85c:	9480004c 	andi	r18,r18,1
 800a860:	90001e1e 	bne	r18,zero,800a8dc <___vfprintf_internal_r+0x222c>
 800a864:	00800044 	movi	r2,1
 800a868:	d8802b15 	stw	r2,172(sp)
 800a86c:	003db706 	br	8009f4c <___vfprintf_internal_r+0x189c>
 800a870:	00800b44 	movi	r2,45
 800a874:	05adc83a 	sub	r22,zero,r22
 800a878:	d8802305 	stb	r2,140(sp)
 800a87c:	003f3f06 	br	800a57c <___vfprintf_internal_r+0x1ecc>
 800a880:	0005883a 	mov	r2,zero
 800a884:	003f5206 	br	800a5d0 <___vfprintf_internal_r+0x1f20>
 800a888:	90a4703a 	and	r18,r18,r2
 800a88c:	903f4e26 	beq	r18,zero,800a5c8 <___vfprintf_internal_r+0x1f18>
 800a890:	003f4a06 	br	800a5bc <___vfprintf_internal_r+0x1f0c>
 800a894:	00800084 	movi	r2,2
 800a898:	10c5c83a 	sub	r2,r2,r3
 800a89c:	003f8406 	br	800a6b0 <___vfprintf_internal_r+0x2000>
 800a8a0:	d9402e17 	ldw	r5,184(sp)
 800a8a4:	d9002e17 	ldw	r4,184(sp)
 800a8a8:	ac400043 	ldbu	r17,1(r21)
 800a8ac:	29400017 	ldw	r5,0(r5)
 800a8b0:	20800104 	addi	r2,r4,4
 800a8b4:	d8802e15 	stw	r2,184(sp)
 800a8b8:	d9402a15 	stw	r5,168(sp)
 800a8bc:	182b883a 	mov	r21,r3
 800a8c0:	283e7b0e 	bge	r5,zero,800a2b0 <___vfprintf_internal_r+0x1c00>
 800a8c4:	8c403fcc 	andi	r17,r17,255
 800a8c8:	017fffc4 	movi	r5,-1
 800a8cc:	8c40201c 	xori	r17,r17,128
 800a8d0:	d9402a15 	stw	r5,168(sp)
 800a8d4:	8c7fe004 	addi	r17,r17,-128
 800a8d8:	0037d706 	br	8008838 <___vfprintf_internal_r+0x188>
 800a8dc:	d8c02a17 	ldw	r3,168(sp)
 800a8e0:	18c00084 	addi	r3,r3,2
 800a8e4:	d8c02b15 	stw	r3,172(sp)
 800a8e8:	1805883a 	mov	r2,r3
 800a8ec:	183d970e 	bge	r3,zero,8009f4c <___vfprintf_internal_r+0x189c>
 800a8f0:	003fd706 	br	800a850 <___vfprintf_internal_r+0x21a0>
 800a8f4:	0005883a 	mov	r2,zero
 800a8f8:	003f8f06 	br	800a738 <___vfprintf_internal_r+0x2088>
 800a8fc:	9080004c 	andi	r2,r18,1
 800a900:	103f821e 	bne	r2,zero,800a70c <___vfprintf_internal_r+0x205c>
 800a904:	d8802117 	ldw	r2,132(sp)
 800a908:	1405c83a 	sub	r2,r2,r16
 800a90c:	d8803315 	stw	r2,204(sp)
 800a910:	b47ef426 	beq	r22,r17,800a4e4 <___vfprintf_internal_r+0x1e34>
 800a914:	dd802617 	ldw	r22,152(sp)
 800a918:	003f1206 	br	800a564 <___vfprintf_internal_r+0x1eb4>
 800a91c:	d8c02b03 	ldbu	r3,172(sp)
 800a920:	d8c02785 	stb	r3,158(sp)
 800a924:	0038df06 	br	8008ca4 <___vfprintf_internal_r+0x5f4>
 800a928:	d8c02b03 	ldbu	r3,172(sp)
 800a92c:	d8c02785 	stb	r3,158(sp)
 800a930:	0038aa06 	br	8008bdc <___vfprintf_internal_r+0x52c>
 800a934:	d8c02b03 	ldbu	r3,172(sp)
 800a938:	d8c02785 	stb	r3,158(sp)
 800a93c:	003a4306 	br	800924c <___vfprintf_internal_r+0xb9c>
 800a940:	d8c02b03 	ldbu	r3,172(sp)
 800a944:	d8c02785 	stb	r3,158(sp)
 800a948:	003af506 	br	8009520 <___vfprintf_internal_r+0xe70>
 800a94c:	0005883a 	mov	r2,zero
 800a950:	003d7b06 	br	8009f40 <___vfprintf_internal_r+0x1890>
 800a954:	d8802344 	addi	r2,sp,141
 800a958:	003f1006 	br	800a59c <___vfprintf_internal_r+0x1eec>
 800a95c:	d8c02b03 	ldbu	r3,172(sp)
 800a960:	d8c02785 	stb	r3,158(sp)
 800a964:	0038fd06 	br	8008d5c <___vfprintf_internal_r+0x6ac>
 800a968:	d8c02b03 	ldbu	r3,172(sp)
 800a96c:	d8c02785 	stb	r3,158(sp)
 800a970:	003a9706 	br	80093d0 <___vfprintf_internal_r+0xd20>
 800a974:	d8c02b03 	ldbu	r3,172(sp)
 800a978:	d8c02785 	stb	r3,158(sp)
 800a97c:	003a1806 	br	80091e0 <___vfprintf_internal_r+0xb30>
 800a980:	d8c02b03 	ldbu	r3,172(sp)
 800a984:	d8c02785 	stb	r3,158(sp)
 800a988:	003abe06 	br	8009484 <___vfprintf_internal_r+0xdd4>

0800a98c <__vfprintf_internal>:
 800a98c:	008200b4 	movhi	r2,2050
 800a990:	10a85804 	addi	r2,r2,-24224
 800a994:	300f883a 	mov	r7,r6
 800a998:	280d883a 	mov	r6,r5
 800a99c:	200b883a 	mov	r5,r4
 800a9a0:	11000017 	ldw	r4,0(r2)
 800a9a4:	80086b01 	jmpi	80086b0 <___vfprintf_internal_r>

0800a9a8 <__sbprintf>:
 800a9a8:	2880030b 	ldhu	r2,12(r5)
 800a9ac:	2ac01917 	ldw	r11,100(r5)
 800a9b0:	2a80038b 	ldhu	r10,14(r5)
 800a9b4:	2a400717 	ldw	r9,28(r5)
 800a9b8:	2a000917 	ldw	r8,36(r5)
 800a9bc:	defee204 	addi	sp,sp,-1144
 800a9c0:	00c10004 	movi	r3,1024
 800a9c4:	dc011a15 	stw	r16,1128(sp)
 800a9c8:	10bfff4c 	andi	r2,r2,65533
 800a9cc:	2821883a 	mov	r16,r5
 800a9d0:	d8cb883a 	add	r5,sp,r3
 800a9d4:	dc811c15 	stw	r18,1136(sp)
 800a9d8:	dc411b15 	stw	r17,1132(sp)
 800a9dc:	dfc11d15 	stw	ra,1140(sp)
 800a9e0:	2025883a 	mov	r18,r4
 800a9e4:	d881030d 	sth	r2,1036(sp)
 800a9e8:	dac11915 	stw	r11,1124(sp)
 800a9ec:	da81038d 	sth	r10,1038(sp)
 800a9f0:	da410715 	stw	r9,1052(sp)
 800a9f4:	da010915 	stw	r8,1060(sp)
 800a9f8:	dec10015 	stw	sp,1024(sp)
 800a9fc:	dec10415 	stw	sp,1040(sp)
 800aa00:	d8c10215 	stw	r3,1032(sp)
 800aa04:	d8c10515 	stw	r3,1044(sp)
 800aa08:	d8010615 	stw	zero,1048(sp)
 800aa0c:	80086b00 	call	80086b0 <___vfprintf_internal_r>
 800aa10:	1023883a 	mov	r17,r2
 800aa14:	10000416 	blt	r2,zero,800aa28 <__sbprintf+0x80>
 800aa18:	d9410004 	addi	r5,sp,1024
 800aa1c:	9009883a 	mov	r4,r18
 800aa20:	800c6840 	call	800c684 <_fflush_r>
 800aa24:	10000d1e 	bne	r2,zero,800aa5c <__sbprintf+0xb4>
 800aa28:	d881030b 	ldhu	r2,1036(sp)
 800aa2c:	1080100c 	andi	r2,r2,64
 800aa30:	10000326 	beq	r2,zero,800aa40 <__sbprintf+0x98>
 800aa34:	8080030b 	ldhu	r2,12(r16)
 800aa38:	10801014 	ori	r2,r2,64
 800aa3c:	8080030d 	sth	r2,12(r16)
 800aa40:	8805883a 	mov	r2,r17
 800aa44:	dfc11d17 	ldw	ra,1140(sp)
 800aa48:	dc811c17 	ldw	r18,1136(sp)
 800aa4c:	dc411b17 	ldw	r17,1132(sp)
 800aa50:	dc011a17 	ldw	r16,1128(sp)
 800aa54:	dec11e04 	addi	sp,sp,1144
 800aa58:	f800283a 	ret
 800aa5c:	047fffc4 	movi	r17,-1
 800aa60:	003ff106 	br	800aa28 <__sbprintf+0x80>

0800aa64 <__swsetup_r>:
 800aa64:	008200b4 	movhi	r2,2050
 800aa68:	defffd04 	addi	sp,sp,-12
 800aa6c:	10a85804 	addi	r2,r2,-24224
 800aa70:	dc400115 	stw	r17,4(sp)
 800aa74:	2023883a 	mov	r17,r4
 800aa78:	11000017 	ldw	r4,0(r2)
 800aa7c:	dc000015 	stw	r16,0(sp)
 800aa80:	dfc00215 	stw	ra,8(sp)
 800aa84:	2821883a 	mov	r16,r5
 800aa88:	20000226 	beq	r4,zero,800aa94 <__swsetup_r+0x30>
 800aa8c:	20800e17 	ldw	r2,56(r4)
 800aa90:	10003126 	beq	r2,zero,800ab58 <__swsetup_r+0xf4>
 800aa94:	8080030b 	ldhu	r2,12(r16)
 800aa98:	10c0020c 	andi	r3,r2,8
 800aa9c:	1009883a 	mov	r4,r2
 800aaa0:	18000f26 	beq	r3,zero,800aae0 <__swsetup_r+0x7c>
 800aaa4:	80c00417 	ldw	r3,16(r16)
 800aaa8:	18001526 	beq	r3,zero,800ab00 <__swsetup_r+0x9c>
 800aaac:	1100004c 	andi	r4,r2,1
 800aab0:	20001c1e 	bne	r4,zero,800ab24 <__swsetup_r+0xc0>
 800aab4:	1080008c 	andi	r2,r2,2
 800aab8:	1000291e 	bne	r2,zero,800ab60 <__swsetup_r+0xfc>
 800aabc:	80800517 	ldw	r2,20(r16)
 800aac0:	80800215 	stw	r2,8(r16)
 800aac4:	18001c26 	beq	r3,zero,800ab38 <__swsetup_r+0xd4>
 800aac8:	0005883a 	mov	r2,zero
 800aacc:	dfc00217 	ldw	ra,8(sp)
 800aad0:	dc400117 	ldw	r17,4(sp)
 800aad4:	dc000017 	ldw	r16,0(sp)
 800aad8:	dec00304 	addi	sp,sp,12
 800aadc:	f800283a 	ret
 800aae0:	2080040c 	andi	r2,r4,16
 800aae4:	10002e26 	beq	r2,zero,800aba0 <__swsetup_r+0x13c>
 800aae8:	2080010c 	andi	r2,r4,4
 800aaec:	10001e1e 	bne	r2,zero,800ab68 <__swsetup_r+0x104>
 800aaf0:	80c00417 	ldw	r3,16(r16)
 800aaf4:	20800214 	ori	r2,r4,8
 800aaf8:	8080030d 	sth	r2,12(r16)
 800aafc:	183feb1e 	bne	r3,zero,800aaac <__swsetup_r+0x48>
 800ab00:	1100a00c 	andi	r4,r2,640
 800ab04:	01408004 	movi	r5,512
 800ab08:	217fe826 	beq	r4,r5,800aaac <__swsetup_r+0x48>
 800ab0c:	800b883a 	mov	r5,r16
 800ab10:	8809883a 	mov	r4,r17
 800ab14:	800d67c0 	call	800d67c <__smakebuf_r>
 800ab18:	8080030b 	ldhu	r2,12(r16)
 800ab1c:	80c00417 	ldw	r3,16(r16)
 800ab20:	003fe206 	br	800aaac <__swsetup_r+0x48>
 800ab24:	80800517 	ldw	r2,20(r16)
 800ab28:	80000215 	stw	zero,8(r16)
 800ab2c:	0085c83a 	sub	r2,zero,r2
 800ab30:	80800615 	stw	r2,24(r16)
 800ab34:	183fe41e 	bne	r3,zero,800aac8 <__swsetup_r+0x64>
 800ab38:	80c0030b 	ldhu	r3,12(r16)
 800ab3c:	0005883a 	mov	r2,zero
 800ab40:	1900200c 	andi	r4,r3,128
 800ab44:	203fe126 	beq	r4,zero,800aacc <__swsetup_r+0x68>
 800ab48:	18c01014 	ori	r3,r3,64
 800ab4c:	80c0030d 	sth	r3,12(r16)
 800ab50:	00bfffc4 	movi	r2,-1
 800ab54:	003fdd06 	br	800aacc <__swsetup_r+0x68>
 800ab58:	800ca700 	call	800ca70 <__sinit>
 800ab5c:	003fcd06 	br	800aa94 <__swsetup_r+0x30>
 800ab60:	0005883a 	mov	r2,zero
 800ab64:	003fd606 	br	800aac0 <__swsetup_r+0x5c>
 800ab68:	81400c17 	ldw	r5,48(r16)
 800ab6c:	28000626 	beq	r5,zero,800ab88 <__swsetup_r+0x124>
 800ab70:	80801004 	addi	r2,r16,64
 800ab74:	28800326 	beq	r5,r2,800ab84 <__swsetup_r+0x120>
 800ab78:	8809883a 	mov	r4,r17
 800ab7c:	800cbe40 	call	800cbe4 <_free_r>
 800ab80:	8100030b 	ldhu	r4,12(r16)
 800ab84:	80000c15 	stw	zero,48(r16)
 800ab88:	80c00417 	ldw	r3,16(r16)
 800ab8c:	00bff6c4 	movi	r2,-37
 800ab90:	1108703a 	and	r4,r2,r4
 800ab94:	80000115 	stw	zero,4(r16)
 800ab98:	80c00015 	stw	r3,0(r16)
 800ab9c:	003fd506 	br	800aaf4 <__swsetup_r+0x90>
 800aba0:	00800244 	movi	r2,9
 800aba4:	88800015 	stw	r2,0(r17)
 800aba8:	20801014 	ori	r2,r4,64
 800abac:	8080030d 	sth	r2,12(r16)
 800abb0:	00bfffc4 	movi	r2,-1
 800abb4:	003fc506 	br	800aacc <__swsetup_r+0x68>

0800abb8 <quorem>:
 800abb8:	defff204 	addi	sp,sp,-56
 800abbc:	ddc00b15 	stw	r23,44(sp)
 800abc0:	20800417 	ldw	r2,16(r4)
 800abc4:	2dc00417 	ldw	r23,16(r5)
 800abc8:	dfc00d15 	stw	ra,52(sp)
 800abcc:	df000c15 	stw	fp,48(sp)
 800abd0:	dd800a15 	stw	r22,40(sp)
 800abd4:	dd400915 	stw	r21,36(sp)
 800abd8:	dd000815 	stw	r20,32(sp)
 800abdc:	dcc00715 	stw	r19,28(sp)
 800abe0:	dc800615 	stw	r18,24(sp)
 800abe4:	dc400515 	stw	r17,20(sp)
 800abe8:	dc000415 	stw	r16,16(sp)
 800abec:	15c07a16 	blt	r2,r23,800add8 <quorem+0x220>
 800abf0:	bdffffc4 	addi	r23,r23,-1
 800abf4:	bde9883a 	add	r20,r23,r23
 800abf8:	28c00504 	addi	r3,r5,20
 800abfc:	a529883a 	add	r20,r20,r20
 800ac00:	1d39883a 	add	fp,r3,r20
 800ac04:	24c00504 	addi	r19,r4,20
 800ac08:	d9400215 	stw	r5,8(sp)
 800ac0c:	9d29883a 	add	r20,r19,r20
 800ac10:	e1400017 	ldw	r5,0(fp)
 800ac14:	d9000015 	stw	r4,0(sp)
 800ac18:	a1000017 	ldw	r4,0(r20)
 800ac1c:	29400044 	addi	r5,r5,1
 800ac20:	d8c00115 	stw	r3,4(sp)
 800ac24:	dd000315 	stw	r20,12(sp)
 800ac28:	8007d840 	call	8007d84 <__udivsi3>
 800ac2c:	1025883a 	mov	r18,r2
 800ac30:	10003026 	beq	r2,zero,800acf4 <quorem+0x13c>
 800ac34:	dc400117 	ldw	r17,4(sp)
 800ac38:	9829883a 	mov	r20,r19
 800ac3c:	002d883a 	mov	r22,zero
 800ac40:	0021883a 	mov	r16,zero
 800ac44:	8d400017 	ldw	r21,0(r17)
 800ac48:	900b883a 	mov	r5,r18
 800ac4c:	8c400104 	addi	r17,r17,4
 800ac50:	a93fffcc 	andi	r4,r21,65535
 800ac54:	8007e400 	call	8007e40 <__mulsi3>
 800ac58:	a808d43a 	srli	r4,r21,16
 800ac5c:	900b883a 	mov	r5,r18
 800ac60:	15ad883a 	add	r22,r2,r22
 800ac64:	8007e400 	call	8007e40 <__mulsi3>
 800ac68:	a1000017 	ldw	r4,0(r20)
 800ac6c:	b00cd43a 	srli	r6,r22,16
 800ac70:	b0ffffcc 	andi	r3,r22,65535
 800ac74:	217fffcc 	andi	r5,r4,65535
 800ac78:	2c21883a 	add	r16,r5,r16
 800ac7c:	80c7c83a 	sub	r3,r16,r3
 800ac80:	2008d43a 	srli	r4,r4,16
 800ac84:	1185883a 	add	r2,r2,r6
 800ac88:	1821d43a 	srai	r16,r3,16
 800ac8c:	117fffcc 	andi	r5,r2,65535
 800ac90:	2149c83a 	sub	r4,r4,r5
 800ac94:	2421883a 	add	r16,r4,r16
 800ac98:	8008943a 	slli	r4,r16,16
 800ac9c:	18ffffcc 	andi	r3,r3,65535
 800aca0:	102cd43a 	srli	r22,r2,16
 800aca4:	20c8b03a 	or	r4,r4,r3
 800aca8:	a1000015 	stw	r4,0(r20)
 800acac:	8021d43a 	srai	r16,r16,16
 800acb0:	a5000104 	addi	r20,r20,4
 800acb4:	e47fe32e 	bgeu	fp,r17,800ac44 <quorem+0x8c>
 800acb8:	d8c00317 	ldw	r3,12(sp)
 800acbc:	18800017 	ldw	r2,0(r3)
 800acc0:	10000c1e 	bne	r2,zero,800acf4 <quorem+0x13c>
 800acc4:	18bfff04 	addi	r2,r3,-4
 800acc8:	9880082e 	bgeu	r19,r2,800acec <quorem+0x134>
 800accc:	18ffff17 	ldw	r3,-4(r3)
 800acd0:	18000326 	beq	r3,zero,800ace0 <quorem+0x128>
 800acd4:	00000506 	br	800acec <quorem+0x134>
 800acd8:	10c00017 	ldw	r3,0(r2)
 800acdc:	1800031e 	bne	r3,zero,800acec <quorem+0x134>
 800ace0:	10bfff04 	addi	r2,r2,-4
 800ace4:	bdffffc4 	addi	r23,r23,-1
 800ace8:	98bffb36 	bltu	r19,r2,800acd8 <quorem+0x120>
 800acec:	d8c00017 	ldw	r3,0(sp)
 800acf0:	1dc00415 	stw	r23,16(r3)
 800acf4:	d9400217 	ldw	r5,8(sp)
 800acf8:	d9000017 	ldw	r4,0(sp)
 800acfc:	800ec080 	call	800ec08 <__mcmp>
 800ad00:	10002816 	blt	r2,zero,800ada4 <quorem+0x1ec>
 800ad04:	dc400117 	ldw	r17,4(sp)
 800ad08:	94800044 	addi	r18,r18,1
 800ad0c:	980d883a 	mov	r6,r19
 800ad10:	0007883a 	mov	r3,zero
 800ad14:	31000017 	ldw	r4,0(r6)
 800ad18:	89400017 	ldw	r5,0(r17)
 800ad1c:	31800104 	addi	r6,r6,4
 800ad20:	20bfffcc 	andi	r2,r4,65535
 800ad24:	10c7883a 	add	r3,r2,r3
 800ad28:	28bfffcc 	andi	r2,r5,65535
 800ad2c:	1885c83a 	sub	r2,r3,r2
 800ad30:	280ad43a 	srli	r5,r5,16
 800ad34:	2008d43a 	srli	r4,r4,16
 800ad38:	1007d43a 	srai	r3,r2,16
 800ad3c:	10bfffcc 	andi	r2,r2,65535
 800ad40:	2149c83a 	sub	r4,r4,r5
 800ad44:	20c9883a 	add	r4,r4,r3
 800ad48:	200a943a 	slli	r5,r4,16
 800ad4c:	8c400104 	addi	r17,r17,4
 800ad50:	2007d43a 	srai	r3,r4,16
 800ad54:	2884b03a 	or	r2,r5,r2
 800ad58:	30bfff15 	stw	r2,-4(r6)
 800ad5c:	e47fed2e 	bgeu	fp,r17,800ad14 <quorem+0x15c>
 800ad60:	bdc5883a 	add	r2,r23,r23
 800ad64:	1085883a 	add	r2,r2,r2
 800ad68:	9887883a 	add	r3,r19,r2
 800ad6c:	18800017 	ldw	r2,0(r3)
 800ad70:	10000c1e 	bne	r2,zero,800ada4 <quorem+0x1ec>
 800ad74:	18bfff04 	addi	r2,r3,-4
 800ad78:	9880082e 	bgeu	r19,r2,800ad9c <quorem+0x1e4>
 800ad7c:	18ffff17 	ldw	r3,-4(r3)
 800ad80:	18000326 	beq	r3,zero,800ad90 <quorem+0x1d8>
 800ad84:	00000506 	br	800ad9c <quorem+0x1e4>
 800ad88:	10c00017 	ldw	r3,0(r2)
 800ad8c:	1800031e 	bne	r3,zero,800ad9c <quorem+0x1e4>
 800ad90:	10bfff04 	addi	r2,r2,-4
 800ad94:	bdffffc4 	addi	r23,r23,-1
 800ad98:	98bffb36 	bltu	r19,r2,800ad88 <quorem+0x1d0>
 800ad9c:	d8c00017 	ldw	r3,0(sp)
 800ada0:	1dc00415 	stw	r23,16(r3)
 800ada4:	9005883a 	mov	r2,r18
 800ada8:	dfc00d17 	ldw	ra,52(sp)
 800adac:	df000c17 	ldw	fp,48(sp)
 800adb0:	ddc00b17 	ldw	r23,44(sp)
 800adb4:	dd800a17 	ldw	r22,40(sp)
 800adb8:	dd400917 	ldw	r21,36(sp)
 800adbc:	dd000817 	ldw	r20,32(sp)
 800adc0:	dcc00717 	ldw	r19,28(sp)
 800adc4:	dc800617 	ldw	r18,24(sp)
 800adc8:	dc400517 	ldw	r17,20(sp)
 800adcc:	dc000417 	ldw	r16,16(sp)
 800add0:	dec00e04 	addi	sp,sp,56
 800add4:	f800283a 	ret
 800add8:	0005883a 	mov	r2,zero
 800addc:	003ff206 	br	800ada8 <quorem+0x1f0>

0800ade0 <_dtoa_r>:
 800ade0:	20801017 	ldw	r2,64(r4)
 800ade4:	deffde04 	addi	sp,sp,-136
 800ade8:	df002015 	stw	fp,128(sp)
 800adec:	dcc01b15 	stw	r19,108(sp)
 800adf0:	dc801a15 	stw	r18,104(sp)
 800adf4:	dc401915 	stw	r17,100(sp)
 800adf8:	dc001815 	stw	r16,96(sp)
 800adfc:	dfc02115 	stw	ra,132(sp)
 800ae00:	ddc01f15 	stw	r23,124(sp)
 800ae04:	dd801e15 	stw	r22,120(sp)
 800ae08:	dd401d15 	stw	r21,116(sp)
 800ae0c:	dd001c15 	stw	r20,112(sp)
 800ae10:	d9c00315 	stw	r7,12(sp)
 800ae14:	2039883a 	mov	fp,r4
 800ae18:	3023883a 	mov	r17,r6
 800ae1c:	2825883a 	mov	r18,r5
 800ae20:	dc002417 	ldw	r16,144(sp)
 800ae24:	3027883a 	mov	r19,r6
 800ae28:	10000826 	beq	r2,zero,800ae4c <_dtoa_r+0x6c>
 800ae2c:	21801117 	ldw	r6,68(r4)
 800ae30:	00c00044 	movi	r3,1
 800ae34:	100b883a 	mov	r5,r2
 800ae38:	1986983a 	sll	r3,r3,r6
 800ae3c:	11800115 	stw	r6,4(r2)
 800ae40:	10c00215 	stw	r3,8(r2)
 800ae44:	800e32c0 	call	800e32c <_Bfree>
 800ae48:	e0001015 	stw	zero,64(fp)
 800ae4c:	88002e16 	blt	r17,zero,800af08 <_dtoa_r+0x128>
 800ae50:	80000015 	stw	zero,0(r16)
 800ae54:	889ffc2c 	andhi	r2,r17,32752
 800ae58:	00dffc34 	movhi	r3,32752
 800ae5c:	10c01c26 	beq	r2,r3,800aed0 <_dtoa_r+0xf0>
 800ae60:	000d883a 	mov	r6,zero
 800ae64:	000f883a 	mov	r7,zero
 800ae68:	9009883a 	mov	r4,r18
 800ae6c:	980b883a 	mov	r5,r19
 800ae70:	8013b680 	call	8013b68 <__eqdf2>
 800ae74:	10002b1e 	bne	r2,zero,800af24 <_dtoa_r+0x144>
 800ae78:	d9c02317 	ldw	r7,140(sp)
 800ae7c:	00800044 	movi	r2,1
 800ae80:	38800015 	stw	r2,0(r7)
 800ae84:	d8802517 	ldw	r2,148(sp)
 800ae88:	10019e26 	beq	r2,zero,800b504 <_dtoa_r+0x724>
 800ae8c:	d8c02517 	ldw	r3,148(sp)
 800ae90:	008200b4 	movhi	r2,2050
 800ae94:	10a0db44 	addi	r2,r2,-31891
 800ae98:	18800015 	stw	r2,0(r3)
 800ae9c:	10bfffc4 	addi	r2,r2,-1
 800aea0:	dfc02117 	ldw	ra,132(sp)
 800aea4:	df002017 	ldw	fp,128(sp)
 800aea8:	ddc01f17 	ldw	r23,124(sp)
 800aeac:	dd801e17 	ldw	r22,120(sp)
 800aeb0:	dd401d17 	ldw	r21,116(sp)
 800aeb4:	dd001c17 	ldw	r20,112(sp)
 800aeb8:	dcc01b17 	ldw	r19,108(sp)
 800aebc:	dc801a17 	ldw	r18,104(sp)
 800aec0:	dc401917 	ldw	r17,100(sp)
 800aec4:	dc001817 	ldw	r16,96(sp)
 800aec8:	dec02204 	addi	sp,sp,136
 800aecc:	f800283a 	ret
 800aed0:	d8c02317 	ldw	r3,140(sp)
 800aed4:	0089c3c4 	movi	r2,9999
 800aed8:	18800015 	stw	r2,0(r3)
 800aedc:	90017726 	beq	r18,zero,800b4bc <_dtoa_r+0x6dc>
 800aee0:	008200b4 	movhi	r2,2050
 800aee4:	10a0e704 	addi	r2,r2,-31844
 800aee8:	d9002517 	ldw	r4,148(sp)
 800aeec:	203fec26 	beq	r4,zero,800aea0 <_dtoa_r+0xc0>
 800aef0:	10c000c7 	ldb	r3,3(r2)
 800aef4:	1801781e 	bne	r3,zero,800b4d8 <_dtoa_r+0x6f8>
 800aef8:	10c000c4 	addi	r3,r2,3
 800aefc:	d9802517 	ldw	r6,148(sp)
 800af00:	30c00015 	stw	r3,0(r6)
 800af04:	003fe606 	br	800aea0 <_dtoa_r+0xc0>
 800af08:	04e00034 	movhi	r19,32768
 800af0c:	9cffffc4 	addi	r19,r19,-1
 800af10:	00800044 	movi	r2,1
 800af14:	8ce6703a 	and	r19,r17,r19
 800af18:	80800015 	stw	r2,0(r16)
 800af1c:	9823883a 	mov	r17,r19
 800af20:	003fcc06 	br	800ae54 <_dtoa_r+0x74>
 800af24:	d8800204 	addi	r2,sp,8
 800af28:	d8800015 	stw	r2,0(sp)
 800af2c:	d9c00104 	addi	r7,sp,4
 800af30:	900b883a 	mov	r5,r18
 800af34:	980d883a 	mov	r6,r19
 800af38:	e009883a 	mov	r4,fp
 800af3c:	8820d53a 	srli	r16,r17,20
 800af40:	800efd40 	call	800efd4 <__d2b>
 800af44:	d8800915 	stw	r2,36(sp)
 800af48:	8001651e 	bne	r16,zero,800b4e0 <_dtoa_r+0x700>
 800af4c:	dd800217 	ldw	r22,8(sp)
 800af50:	dc000117 	ldw	r16,4(sp)
 800af54:	00800804 	movi	r2,32
 800af58:	b421883a 	add	r16,r22,r16
 800af5c:	80c10c84 	addi	r3,r16,1074
 800af60:	10c2d10e 	bge	r2,r3,800baa8 <_dtoa_r+0xcc8>
 800af64:	00801004 	movi	r2,64
 800af68:	81010484 	addi	r4,r16,1042
 800af6c:	10c7c83a 	sub	r3,r2,r3
 800af70:	9108d83a 	srl	r4,r18,r4
 800af74:	88e2983a 	sll	r17,r17,r3
 800af78:	2448b03a 	or	r4,r4,r17
 800af7c:	80150840 	call	8015084 <__floatunsidf>
 800af80:	017f8434 	movhi	r5,65040
 800af84:	01800044 	movi	r6,1
 800af88:	1009883a 	mov	r4,r2
 800af8c:	194b883a 	add	r5,r3,r5
 800af90:	843fffc4 	addi	r16,r16,-1
 800af94:	d9801115 	stw	r6,68(sp)
 800af98:	000d883a 	mov	r6,zero
 800af9c:	01cffe34 	movhi	r7,16376
 800afa0:	801462c0 	call	801462c <__subdf3>
 800afa4:	0198dbf4 	movhi	r6,25455
 800afa8:	01cff4f4 	movhi	r7,16339
 800afac:	3190d844 	addi	r6,r6,17249
 800afb0:	39e1e9c4 	addi	r7,r7,-30809
 800afb4:	1009883a 	mov	r4,r2
 800afb8:	180b883a 	mov	r5,r3
 800afbc:	8013dc00 	call	8013dc0 <__muldf3>
 800afc0:	01a2d874 	movhi	r6,35681
 800afc4:	01cff1f4 	movhi	r7,16327
 800afc8:	31b22cc4 	addi	r6,r6,-14157
 800afcc:	39e28a04 	addi	r7,r7,-30168
 800afd0:	180b883a 	mov	r5,r3
 800afd4:	1009883a 	mov	r4,r2
 800afd8:	80128ec0 	call	80128ec <__adddf3>
 800afdc:	8009883a 	mov	r4,r16
 800afe0:	1029883a 	mov	r20,r2
 800afe4:	1823883a 	mov	r17,r3
 800afe8:	8014fa80 	call	8014fa8 <__floatsidf>
 800afec:	019427f4 	movhi	r6,20639
 800aff0:	01cff4f4 	movhi	r7,16339
 800aff4:	319e7ec4 	addi	r6,r6,31227
 800aff8:	39d104c4 	addi	r7,r7,17427
 800affc:	1009883a 	mov	r4,r2
 800b000:	180b883a 	mov	r5,r3
 800b004:	8013dc00 	call	8013dc0 <__muldf3>
 800b008:	100d883a 	mov	r6,r2
 800b00c:	180f883a 	mov	r7,r3
 800b010:	a009883a 	mov	r4,r20
 800b014:	880b883a 	mov	r5,r17
 800b018:	80128ec0 	call	80128ec <__adddf3>
 800b01c:	1009883a 	mov	r4,r2
 800b020:	180b883a 	mov	r5,r3
 800b024:	1029883a 	mov	r20,r2
 800b028:	1823883a 	mov	r17,r3
 800b02c:	8014f280 	call	8014f28 <__fixdfsi>
 800b030:	000d883a 	mov	r6,zero
 800b034:	000f883a 	mov	r7,zero
 800b038:	a009883a 	mov	r4,r20
 800b03c:	880b883a 	mov	r5,r17
 800b040:	d8800515 	stw	r2,20(sp)
 800b044:	8013ccc0 	call	8013ccc <__ledf2>
 800b048:	10028716 	blt	r2,zero,800ba68 <_dtoa_r+0xc88>
 800b04c:	d8c00517 	ldw	r3,20(sp)
 800b050:	00800584 	movi	r2,22
 800b054:	10c27536 	bltu	r2,r3,800ba2c <_dtoa_r+0xc4c>
 800b058:	180490fa 	slli	r2,r3,3
 800b05c:	00c200b4 	movhi	r3,2050
 800b060:	18e10204 	addi	r3,r3,-31736
 800b064:	1885883a 	add	r2,r3,r2
 800b068:	11000017 	ldw	r4,0(r2)
 800b06c:	11400117 	ldw	r5,4(r2)
 800b070:	900d883a 	mov	r6,r18
 800b074:	980f883a 	mov	r7,r19
 800b078:	8013bf00 	call	8013bf0 <__gedf2>
 800b07c:	00828d0e 	bge	zero,r2,800bab4 <_dtoa_r+0xcd4>
 800b080:	d9000517 	ldw	r4,20(sp)
 800b084:	d8000e15 	stw	zero,56(sp)
 800b088:	213fffc4 	addi	r4,r4,-1
 800b08c:	d9000515 	stw	r4,20(sp)
 800b090:	b42dc83a 	sub	r22,r22,r16
 800b094:	b5bfffc4 	addi	r22,r22,-1
 800b098:	b0026f16 	blt	r22,zero,800ba58 <_dtoa_r+0xc78>
 800b09c:	d8000815 	stw	zero,32(sp)
 800b0a0:	d9c00517 	ldw	r7,20(sp)
 800b0a4:	38026416 	blt	r7,zero,800ba38 <_dtoa_r+0xc58>
 800b0a8:	b1ed883a 	add	r22,r22,r7
 800b0ac:	d9c00d15 	stw	r7,52(sp)
 800b0b0:	d8000a15 	stw	zero,40(sp)
 800b0b4:	d9800317 	ldw	r6,12(sp)
 800b0b8:	00800244 	movi	r2,9
 800b0bc:	11811436 	bltu	r2,r6,800b510 <_dtoa_r+0x730>
 800b0c0:	00800144 	movi	r2,5
 800b0c4:	1184e10e 	bge	r2,r6,800c44c <_dtoa_r+0x166c>
 800b0c8:	31bfff04 	addi	r6,r6,-4
 800b0cc:	d9800315 	stw	r6,12(sp)
 800b0d0:	0023883a 	mov	r17,zero
 800b0d4:	d9800317 	ldw	r6,12(sp)
 800b0d8:	008000c4 	movi	r2,3
 800b0dc:	30836726 	beq	r6,r2,800be7c <_dtoa_r+0x109c>
 800b0e0:	1183410e 	bge	r2,r6,800bde8 <_dtoa_r+0x1008>
 800b0e4:	d9c00317 	ldw	r7,12(sp)
 800b0e8:	00800104 	movi	r2,4
 800b0ec:	38827c26 	beq	r7,r2,800bae0 <_dtoa_r+0xd00>
 800b0f0:	00800144 	movi	r2,5
 800b0f4:	3884c41e 	bne	r7,r2,800c408 <_dtoa_r+0x1628>
 800b0f8:	00800044 	movi	r2,1
 800b0fc:	d8800b15 	stw	r2,44(sp)
 800b100:	d8c00517 	ldw	r3,20(sp)
 800b104:	d9002217 	ldw	r4,136(sp)
 800b108:	1907883a 	add	r3,r3,r4
 800b10c:	19800044 	addi	r6,r3,1
 800b110:	d8c00c15 	stw	r3,48(sp)
 800b114:	d9800615 	stw	r6,24(sp)
 800b118:	0183a40e 	bge	zero,r6,800bfac <_dtoa_r+0x11cc>
 800b11c:	d9800617 	ldw	r6,24(sp)
 800b120:	3021883a 	mov	r16,r6
 800b124:	e0001115 	stw	zero,68(fp)
 800b128:	008005c4 	movi	r2,23
 800b12c:	1184c92e 	bgeu	r2,r6,800c454 <_dtoa_r+0x1674>
 800b130:	00c00044 	movi	r3,1
 800b134:	00800104 	movi	r2,4
 800b138:	1085883a 	add	r2,r2,r2
 800b13c:	11000504 	addi	r4,r2,20
 800b140:	180b883a 	mov	r5,r3
 800b144:	18c00044 	addi	r3,r3,1
 800b148:	313ffb2e 	bgeu	r6,r4,800b138 <_dtoa_r+0x358>
 800b14c:	e1401115 	stw	r5,68(fp)
 800b150:	e009883a 	mov	r4,fp
 800b154:	800e2840 	call	800e284 <_Balloc>
 800b158:	d8800715 	stw	r2,28(sp)
 800b15c:	e0801015 	stw	r2,64(fp)
 800b160:	00800384 	movi	r2,14
 800b164:	1400f736 	bltu	r2,r16,800b544 <_dtoa_r+0x764>
 800b168:	8800f626 	beq	r17,zero,800b544 <_dtoa_r+0x764>
 800b16c:	d9c00517 	ldw	r7,20(sp)
 800b170:	01c39a0e 	bge	zero,r7,800bfdc <_dtoa_r+0x11fc>
 800b174:	388003cc 	andi	r2,r7,15
 800b178:	100490fa 	slli	r2,r2,3
 800b17c:	382bd13a 	srai	r21,r7,4
 800b180:	00c200b4 	movhi	r3,2050
 800b184:	18e10204 	addi	r3,r3,-31736
 800b188:	1885883a 	add	r2,r3,r2
 800b18c:	a8c0040c 	andi	r3,r21,16
 800b190:	12400017 	ldw	r9,0(r2)
 800b194:	12000117 	ldw	r8,4(r2)
 800b198:	18037926 	beq	r3,zero,800bf80 <_dtoa_r+0x11a0>
 800b19c:	008200b4 	movhi	r2,2050
 800b1a0:	10a0f804 	addi	r2,r2,-31776
 800b1a4:	11800817 	ldw	r6,32(r2)
 800b1a8:	11c00917 	ldw	r7,36(r2)
 800b1ac:	9009883a 	mov	r4,r18
 800b1b0:	980b883a 	mov	r5,r19
 800b1b4:	da001715 	stw	r8,92(sp)
 800b1b8:	da401615 	stw	r9,88(sp)
 800b1bc:	80131980 	call	8013198 <__divdf3>
 800b1c0:	da001717 	ldw	r8,92(sp)
 800b1c4:	da401617 	ldw	r9,88(sp)
 800b1c8:	ad4003cc 	andi	r21,r21,15
 800b1cc:	040000c4 	movi	r16,3
 800b1d0:	1023883a 	mov	r17,r2
 800b1d4:	1829883a 	mov	r20,r3
 800b1d8:	a8001126 	beq	r21,zero,800b220 <_dtoa_r+0x440>
 800b1dc:	05c200b4 	movhi	r23,2050
 800b1e0:	bde0f804 	addi	r23,r23,-31776
 800b1e4:	4805883a 	mov	r2,r9
 800b1e8:	4007883a 	mov	r3,r8
 800b1ec:	a980004c 	andi	r6,r21,1
 800b1f0:	1009883a 	mov	r4,r2
 800b1f4:	a82bd07a 	srai	r21,r21,1
 800b1f8:	180b883a 	mov	r5,r3
 800b1fc:	30000426 	beq	r6,zero,800b210 <_dtoa_r+0x430>
 800b200:	b9800017 	ldw	r6,0(r23)
 800b204:	b9c00117 	ldw	r7,4(r23)
 800b208:	84000044 	addi	r16,r16,1
 800b20c:	8013dc00 	call	8013dc0 <__muldf3>
 800b210:	bdc00204 	addi	r23,r23,8
 800b214:	a83ff51e 	bne	r21,zero,800b1ec <_dtoa_r+0x40c>
 800b218:	1013883a 	mov	r9,r2
 800b21c:	1811883a 	mov	r8,r3
 800b220:	480d883a 	mov	r6,r9
 800b224:	400f883a 	mov	r7,r8
 800b228:	8809883a 	mov	r4,r17
 800b22c:	a00b883a 	mov	r5,r20
 800b230:	80131980 	call	8013198 <__divdf3>
 800b234:	d8800f15 	stw	r2,60(sp)
 800b238:	d8c01015 	stw	r3,64(sp)
 800b23c:	d8c00e17 	ldw	r3,56(sp)
 800b240:	18000626 	beq	r3,zero,800b25c <_dtoa_r+0x47c>
 800b244:	d9000f17 	ldw	r4,60(sp)
 800b248:	d9401017 	ldw	r5,64(sp)
 800b24c:	000d883a 	mov	r6,zero
 800b250:	01cffc34 	movhi	r7,16368
 800b254:	8013ccc0 	call	8013ccc <__ledf2>
 800b258:	10040b16 	blt	r2,zero,800c288 <_dtoa_r+0x14a8>
 800b25c:	8009883a 	mov	r4,r16
 800b260:	8014fa80 	call	8014fa8 <__floatsidf>
 800b264:	d9800f17 	ldw	r6,60(sp)
 800b268:	d9c01017 	ldw	r7,64(sp)
 800b26c:	1009883a 	mov	r4,r2
 800b270:	180b883a 	mov	r5,r3
 800b274:	8013dc00 	call	8013dc0 <__muldf3>
 800b278:	000d883a 	mov	r6,zero
 800b27c:	01d00734 	movhi	r7,16412
 800b280:	1009883a 	mov	r4,r2
 800b284:	180b883a 	mov	r5,r3
 800b288:	80128ec0 	call	80128ec <__adddf3>
 800b28c:	1021883a 	mov	r16,r2
 800b290:	d8800617 	ldw	r2,24(sp)
 800b294:	047f3034 	movhi	r17,64704
 800b298:	1c63883a 	add	r17,r3,r17
 800b29c:	10031826 	beq	r2,zero,800bf00 <_dtoa_r+0x1120>
 800b2a0:	d8c00517 	ldw	r3,20(sp)
 800b2a4:	db000617 	ldw	r12,24(sp)
 800b2a8:	d8c01315 	stw	r3,76(sp)
 800b2ac:	d9000b17 	ldw	r4,44(sp)
 800b2b0:	20038f26 	beq	r4,zero,800c0f0 <_dtoa_r+0x1310>
 800b2b4:	60bfffc4 	addi	r2,r12,-1
 800b2b8:	100490fa 	slli	r2,r2,3
 800b2bc:	00c200b4 	movhi	r3,2050
 800b2c0:	18e10204 	addi	r3,r3,-31736
 800b2c4:	1885883a 	add	r2,r3,r2
 800b2c8:	11800017 	ldw	r6,0(r2)
 800b2cc:	11c00117 	ldw	r7,4(r2)
 800b2d0:	d8800717 	ldw	r2,28(sp)
 800b2d4:	0009883a 	mov	r4,zero
 800b2d8:	014ff834 	movhi	r5,16352
 800b2dc:	db001615 	stw	r12,88(sp)
 800b2e0:	15c00044 	addi	r23,r2,1
 800b2e4:	80131980 	call	8013198 <__divdf3>
 800b2e8:	800d883a 	mov	r6,r16
 800b2ec:	880f883a 	mov	r7,r17
 800b2f0:	1009883a 	mov	r4,r2
 800b2f4:	180b883a 	mov	r5,r3
 800b2f8:	801462c0 	call	801462c <__subdf3>
 800b2fc:	d9401017 	ldw	r5,64(sp)
 800b300:	d9000f17 	ldw	r4,60(sp)
 800b304:	102b883a 	mov	r21,r2
 800b308:	d8c01215 	stw	r3,72(sp)
 800b30c:	8014f280 	call	8014f28 <__fixdfsi>
 800b310:	1009883a 	mov	r4,r2
 800b314:	1029883a 	mov	r20,r2
 800b318:	8014fa80 	call	8014fa8 <__floatsidf>
 800b31c:	d9000f17 	ldw	r4,60(sp)
 800b320:	d9401017 	ldw	r5,64(sp)
 800b324:	100d883a 	mov	r6,r2
 800b328:	180f883a 	mov	r7,r3
 800b32c:	801462c0 	call	801462c <__subdf3>
 800b330:	1823883a 	mov	r17,r3
 800b334:	d8c00717 	ldw	r3,28(sp)
 800b338:	d9401217 	ldw	r5,72(sp)
 800b33c:	a2000c04 	addi	r8,r20,48
 800b340:	1021883a 	mov	r16,r2
 800b344:	1a000005 	stb	r8,0(r3)
 800b348:	800d883a 	mov	r6,r16
 800b34c:	880f883a 	mov	r7,r17
 800b350:	a809883a 	mov	r4,r21
 800b354:	4029883a 	mov	r20,r8
 800b358:	8013bf00 	call	8013bf0 <__gedf2>
 800b35c:	00841d16 	blt	zero,r2,800c3d4 <_dtoa_r+0x15f4>
 800b360:	800d883a 	mov	r6,r16
 800b364:	880f883a 	mov	r7,r17
 800b368:	0009883a 	mov	r4,zero
 800b36c:	014ffc34 	movhi	r5,16368
 800b370:	801462c0 	call	801462c <__subdf3>
 800b374:	d9401217 	ldw	r5,72(sp)
 800b378:	100d883a 	mov	r6,r2
 800b37c:	180f883a 	mov	r7,r3
 800b380:	a809883a 	mov	r4,r21
 800b384:	8013bf00 	call	8013bf0 <__gedf2>
 800b388:	db001617 	ldw	r12,88(sp)
 800b38c:	00840e16 	blt	zero,r2,800c3c8 <_dtoa_r+0x15e8>
 800b390:	00800044 	movi	r2,1
 800b394:	13006b0e 	bge	r2,r12,800b544 <_dtoa_r+0x764>
 800b398:	d9000717 	ldw	r4,28(sp)
 800b39c:	dd800f15 	stw	r22,60(sp)
 800b3a0:	dcc01015 	stw	r19,64(sp)
 800b3a4:	2319883a 	add	r12,r4,r12
 800b3a8:	dcc01217 	ldw	r19,72(sp)
 800b3ac:	602d883a 	mov	r22,r12
 800b3b0:	dc801215 	stw	r18,72(sp)
 800b3b4:	b825883a 	mov	r18,r23
 800b3b8:	00000906 	br	800b3e0 <_dtoa_r+0x600>
 800b3bc:	801462c0 	call	801462c <__subdf3>
 800b3c0:	a80d883a 	mov	r6,r21
 800b3c4:	980f883a 	mov	r7,r19
 800b3c8:	1009883a 	mov	r4,r2
 800b3cc:	180b883a 	mov	r5,r3
 800b3d0:	8013ccc0 	call	8013ccc <__ledf2>
 800b3d4:	1003e816 	blt	r2,zero,800c378 <_dtoa_r+0x1598>
 800b3d8:	b825883a 	mov	r18,r23
 800b3dc:	bd83e926 	beq	r23,r22,800c384 <_dtoa_r+0x15a4>
 800b3e0:	a809883a 	mov	r4,r21
 800b3e4:	980b883a 	mov	r5,r19
 800b3e8:	000d883a 	mov	r6,zero
 800b3ec:	01d00934 	movhi	r7,16420
 800b3f0:	8013dc00 	call	8013dc0 <__muldf3>
 800b3f4:	000d883a 	mov	r6,zero
 800b3f8:	01d00934 	movhi	r7,16420
 800b3fc:	8009883a 	mov	r4,r16
 800b400:	880b883a 	mov	r5,r17
 800b404:	102b883a 	mov	r21,r2
 800b408:	1827883a 	mov	r19,r3
 800b40c:	8013dc00 	call	8013dc0 <__muldf3>
 800b410:	180b883a 	mov	r5,r3
 800b414:	1009883a 	mov	r4,r2
 800b418:	1821883a 	mov	r16,r3
 800b41c:	1023883a 	mov	r17,r2
 800b420:	8014f280 	call	8014f28 <__fixdfsi>
 800b424:	1009883a 	mov	r4,r2
 800b428:	1029883a 	mov	r20,r2
 800b42c:	8014fa80 	call	8014fa8 <__floatsidf>
 800b430:	8809883a 	mov	r4,r17
 800b434:	800b883a 	mov	r5,r16
 800b438:	100d883a 	mov	r6,r2
 800b43c:	180f883a 	mov	r7,r3
 800b440:	801462c0 	call	801462c <__subdf3>
 800b444:	a5000c04 	addi	r20,r20,48
 800b448:	a80d883a 	mov	r6,r21
 800b44c:	980f883a 	mov	r7,r19
 800b450:	1009883a 	mov	r4,r2
 800b454:	180b883a 	mov	r5,r3
 800b458:	95000005 	stb	r20,0(r18)
 800b45c:	1021883a 	mov	r16,r2
 800b460:	1823883a 	mov	r17,r3
 800b464:	8013ccc0 	call	8013ccc <__ledf2>
 800b468:	bdc00044 	addi	r23,r23,1
 800b46c:	800d883a 	mov	r6,r16
 800b470:	880f883a 	mov	r7,r17
 800b474:	0009883a 	mov	r4,zero
 800b478:	014ffc34 	movhi	r5,16368
 800b47c:	103fcf0e 	bge	r2,zero,800b3bc <_dtoa_r+0x5dc>
 800b480:	d8c01317 	ldw	r3,76(sp)
 800b484:	d8c00515 	stw	r3,20(sp)
 800b488:	d9400917 	ldw	r5,36(sp)
 800b48c:	e009883a 	mov	r4,fp
 800b490:	800e32c0 	call	800e32c <_Bfree>
 800b494:	d9000517 	ldw	r4,20(sp)
 800b498:	d9802317 	ldw	r6,140(sp)
 800b49c:	d9c02517 	ldw	r7,148(sp)
 800b4a0:	b8000005 	stb	zero,0(r23)
 800b4a4:	20800044 	addi	r2,r4,1
 800b4a8:	30800015 	stw	r2,0(r6)
 800b4ac:	3802aa26 	beq	r7,zero,800bf58 <_dtoa_r+0x1178>
 800b4b0:	3dc00015 	stw	r23,0(r7)
 800b4b4:	d8800717 	ldw	r2,28(sp)
 800b4b8:	003e7906 	br	800aea0 <_dtoa_r+0xc0>
 800b4bc:	00800434 	movhi	r2,16
 800b4c0:	10bfffc4 	addi	r2,r2,-1
 800b4c4:	88a2703a 	and	r17,r17,r2
 800b4c8:	883e851e 	bne	r17,zero,800aee0 <_dtoa_r+0x100>
 800b4cc:	008200b4 	movhi	r2,2050
 800b4d0:	10a0e404 	addi	r2,r2,-31856
 800b4d4:	003e8406 	br	800aee8 <_dtoa_r+0x108>
 800b4d8:	10c00204 	addi	r3,r2,8
 800b4dc:	003e8706 	br	800aefc <_dtoa_r+0x11c>
 800b4e0:	01400434 	movhi	r5,16
 800b4e4:	297fffc4 	addi	r5,r5,-1
 800b4e8:	994a703a 	and	r5,r19,r5
 800b4ec:	9009883a 	mov	r4,r18
 800b4f0:	843f0044 	addi	r16,r16,-1023
 800b4f4:	294ffc34 	orhi	r5,r5,16368
 800b4f8:	dd800217 	ldw	r22,8(sp)
 800b4fc:	d8001115 	stw	zero,68(sp)
 800b500:	003ea506 	br	800af98 <_dtoa_r+0x1b8>
 800b504:	008200b4 	movhi	r2,2050
 800b508:	10a0db04 	addi	r2,r2,-31892
 800b50c:	003e6406 	br	800aea0 <_dtoa_r+0xc0>
 800b510:	e0001115 	stw	zero,68(fp)
 800b514:	000b883a 	mov	r5,zero
 800b518:	e009883a 	mov	r4,fp
 800b51c:	800e2840 	call	800e284 <_Balloc>
 800b520:	01bfffc4 	movi	r6,-1
 800b524:	01c00044 	movi	r7,1
 800b528:	d8800715 	stw	r2,28(sp)
 800b52c:	d9800c15 	stw	r6,48(sp)
 800b530:	e0801015 	stw	r2,64(fp)
 800b534:	d8000315 	stw	zero,12(sp)
 800b538:	d9c00b15 	stw	r7,44(sp)
 800b53c:	d9800615 	stw	r6,24(sp)
 800b540:	d8002215 	stw	zero,136(sp)
 800b544:	d8800117 	ldw	r2,4(sp)
 800b548:	10008916 	blt	r2,zero,800b770 <_dtoa_r+0x990>
 800b54c:	d9000517 	ldw	r4,20(sp)
 800b550:	00c00384 	movi	r3,14
 800b554:	19008616 	blt	r3,r4,800b770 <_dtoa_r+0x990>
 800b558:	200490fa 	slli	r2,r4,3
 800b55c:	00c200b4 	movhi	r3,2050
 800b560:	d9802217 	ldw	r6,136(sp)
 800b564:	18e10204 	addi	r3,r3,-31736
 800b568:	1885883a 	add	r2,r3,r2
 800b56c:	14000017 	ldw	r16,0(r2)
 800b570:	14400117 	ldw	r17,4(r2)
 800b574:	30016316 	blt	r6,zero,800bb04 <_dtoa_r+0xd24>
 800b578:	800d883a 	mov	r6,r16
 800b57c:	880f883a 	mov	r7,r17
 800b580:	9009883a 	mov	r4,r18
 800b584:	980b883a 	mov	r5,r19
 800b588:	80131980 	call	8013198 <__divdf3>
 800b58c:	180b883a 	mov	r5,r3
 800b590:	1009883a 	mov	r4,r2
 800b594:	8014f280 	call	8014f28 <__fixdfsi>
 800b598:	1009883a 	mov	r4,r2
 800b59c:	102b883a 	mov	r21,r2
 800b5a0:	8014fa80 	call	8014fa8 <__floatsidf>
 800b5a4:	800d883a 	mov	r6,r16
 800b5a8:	880f883a 	mov	r7,r17
 800b5ac:	1009883a 	mov	r4,r2
 800b5b0:	180b883a 	mov	r5,r3
 800b5b4:	8013dc00 	call	8013dc0 <__muldf3>
 800b5b8:	100d883a 	mov	r6,r2
 800b5bc:	180f883a 	mov	r7,r3
 800b5c0:	9009883a 	mov	r4,r18
 800b5c4:	980b883a 	mov	r5,r19
 800b5c8:	801462c0 	call	801462c <__subdf3>
 800b5cc:	d9c00717 	ldw	r7,28(sp)
 800b5d0:	1009883a 	mov	r4,r2
 800b5d4:	a8800c04 	addi	r2,r21,48
 800b5d8:	38800005 	stb	r2,0(r7)
 800b5dc:	3dc00044 	addi	r23,r7,1
 800b5e0:	d9c00617 	ldw	r7,24(sp)
 800b5e4:	01800044 	movi	r6,1
 800b5e8:	180b883a 	mov	r5,r3
 800b5ec:	2005883a 	mov	r2,r4
 800b5f0:	39803826 	beq	r7,r6,800b6d4 <_dtoa_r+0x8f4>
 800b5f4:	000d883a 	mov	r6,zero
 800b5f8:	01d00934 	movhi	r7,16420
 800b5fc:	8013dc00 	call	8013dc0 <__muldf3>
 800b600:	000d883a 	mov	r6,zero
 800b604:	000f883a 	mov	r7,zero
 800b608:	1009883a 	mov	r4,r2
 800b60c:	180b883a 	mov	r5,r3
 800b610:	1025883a 	mov	r18,r2
 800b614:	1827883a 	mov	r19,r3
 800b618:	8013b680 	call	8013b68 <__eqdf2>
 800b61c:	103f9a26 	beq	r2,zero,800b488 <_dtoa_r+0x6a8>
 800b620:	d9c00617 	ldw	r7,24(sp)
 800b624:	d8c00717 	ldw	r3,28(sp)
 800b628:	b829883a 	mov	r20,r23
 800b62c:	38bfffc4 	addi	r2,r7,-1
 800b630:	18ad883a 	add	r22,r3,r2
 800b634:	00000a06 	br	800b660 <_dtoa_r+0x880>
 800b638:	8013dc00 	call	8013dc0 <__muldf3>
 800b63c:	000d883a 	mov	r6,zero
 800b640:	000f883a 	mov	r7,zero
 800b644:	1009883a 	mov	r4,r2
 800b648:	180b883a 	mov	r5,r3
 800b64c:	1025883a 	mov	r18,r2
 800b650:	1827883a 	mov	r19,r3
 800b654:	b829883a 	mov	r20,r23
 800b658:	8013b680 	call	8013b68 <__eqdf2>
 800b65c:	103f8a26 	beq	r2,zero,800b488 <_dtoa_r+0x6a8>
 800b660:	800d883a 	mov	r6,r16
 800b664:	880f883a 	mov	r7,r17
 800b668:	9009883a 	mov	r4,r18
 800b66c:	980b883a 	mov	r5,r19
 800b670:	80131980 	call	8013198 <__divdf3>
 800b674:	180b883a 	mov	r5,r3
 800b678:	1009883a 	mov	r4,r2
 800b67c:	8014f280 	call	8014f28 <__fixdfsi>
 800b680:	1009883a 	mov	r4,r2
 800b684:	102b883a 	mov	r21,r2
 800b688:	8014fa80 	call	8014fa8 <__floatsidf>
 800b68c:	800d883a 	mov	r6,r16
 800b690:	880f883a 	mov	r7,r17
 800b694:	1009883a 	mov	r4,r2
 800b698:	180b883a 	mov	r5,r3
 800b69c:	8013dc00 	call	8013dc0 <__muldf3>
 800b6a0:	100d883a 	mov	r6,r2
 800b6a4:	180f883a 	mov	r7,r3
 800b6a8:	9009883a 	mov	r4,r18
 800b6ac:	980b883a 	mov	r5,r19
 800b6b0:	801462c0 	call	801462c <__subdf3>
 800b6b4:	aa000c04 	addi	r8,r21,48
 800b6b8:	a2000005 	stb	r8,0(r20)
 800b6bc:	000d883a 	mov	r6,zero
 800b6c0:	01d00934 	movhi	r7,16420
 800b6c4:	1009883a 	mov	r4,r2
 800b6c8:	180b883a 	mov	r5,r3
 800b6cc:	a5c00044 	addi	r23,r20,1
 800b6d0:	b53fd91e 	bne	r22,r20,800b638 <_dtoa_r+0x858>
 800b6d4:	100d883a 	mov	r6,r2
 800b6d8:	180f883a 	mov	r7,r3
 800b6dc:	1009883a 	mov	r4,r2
 800b6e0:	180b883a 	mov	r5,r3
 800b6e4:	80128ec0 	call	80128ec <__adddf3>
 800b6e8:	100d883a 	mov	r6,r2
 800b6ec:	180f883a 	mov	r7,r3
 800b6f0:	8009883a 	mov	r4,r16
 800b6f4:	880b883a 	mov	r5,r17
 800b6f8:	1027883a 	mov	r19,r2
 800b6fc:	1825883a 	mov	r18,r3
 800b700:	8013ccc0 	call	8013ccc <__ledf2>
 800b704:	10000816 	blt	r2,zero,800b728 <_dtoa_r+0x948>
 800b708:	980d883a 	mov	r6,r19
 800b70c:	900f883a 	mov	r7,r18
 800b710:	8009883a 	mov	r4,r16
 800b714:	880b883a 	mov	r5,r17
 800b718:	8013b680 	call	8013b68 <__eqdf2>
 800b71c:	103f5a1e 	bne	r2,zero,800b488 <_dtoa_r+0x6a8>
 800b720:	ad40004c 	andi	r21,r21,1
 800b724:	a83f5826 	beq	r21,zero,800b488 <_dtoa_r+0x6a8>
 800b728:	bd3fffc3 	ldbu	r20,-1(r23)
 800b72c:	b8bfffc4 	addi	r2,r23,-1
 800b730:	1007883a 	mov	r3,r2
 800b734:	01400e44 	movi	r5,57
 800b738:	d9800717 	ldw	r6,28(sp)
 800b73c:	00000506 	br	800b754 <_dtoa_r+0x974>
 800b740:	18ffffc4 	addi	r3,r3,-1
 800b744:	11824726 	beq	r2,r6,800c064 <_dtoa_r+0x1284>
 800b748:	1d000003 	ldbu	r20,0(r3)
 800b74c:	102f883a 	mov	r23,r2
 800b750:	10bfffc4 	addi	r2,r2,-1
 800b754:	a1003fcc 	andi	r4,r20,255
 800b758:	2100201c 	xori	r4,r4,128
 800b75c:	213fe004 	addi	r4,r4,-128
 800b760:	217ff726 	beq	r4,r5,800b740 <_dtoa_r+0x960>
 800b764:	a2000044 	addi	r8,r20,1
 800b768:	12000005 	stb	r8,0(r2)
 800b76c:	003f4606 	br	800b488 <_dtoa_r+0x6a8>
 800b770:	d9000b17 	ldw	r4,44(sp)
 800b774:	2000c826 	beq	r4,zero,800ba98 <_dtoa_r+0xcb8>
 800b778:	d9800317 	ldw	r6,12(sp)
 800b77c:	00c00044 	movi	r3,1
 800b780:	1980f90e 	bge	r3,r6,800bb68 <_dtoa_r+0xd88>
 800b784:	d8800617 	ldw	r2,24(sp)
 800b788:	d8c00a17 	ldw	r3,40(sp)
 800b78c:	157fffc4 	addi	r21,r2,-1
 800b790:	1d41f316 	blt	r3,r21,800bf60 <_dtoa_r+0x1180>
 800b794:	1d6bc83a 	sub	r21,r3,r21
 800b798:	d9c00617 	ldw	r7,24(sp)
 800b79c:	3802aa16 	blt	r7,zero,800c248 <_dtoa_r+0x1468>
 800b7a0:	dd000817 	ldw	r20,32(sp)
 800b7a4:	d8800617 	ldw	r2,24(sp)
 800b7a8:	d8c00817 	ldw	r3,32(sp)
 800b7ac:	01400044 	movi	r5,1
 800b7b0:	e009883a 	mov	r4,fp
 800b7b4:	1887883a 	add	r3,r3,r2
 800b7b8:	d8c00815 	stw	r3,32(sp)
 800b7bc:	b0ad883a 	add	r22,r22,r2
 800b7c0:	800e6b80 	call	800e6b8 <__i2b>
 800b7c4:	1023883a 	mov	r17,r2
 800b7c8:	a0000826 	beq	r20,zero,800b7ec <_dtoa_r+0xa0c>
 800b7cc:	0580070e 	bge	zero,r22,800b7ec <_dtoa_r+0xa0c>
 800b7d0:	a005883a 	mov	r2,r20
 800b7d4:	b500b916 	blt	r22,r20,800babc <_dtoa_r+0xcdc>
 800b7d8:	d9000817 	ldw	r4,32(sp)
 800b7dc:	a0a9c83a 	sub	r20,r20,r2
 800b7e0:	b0adc83a 	sub	r22,r22,r2
 800b7e4:	2089c83a 	sub	r4,r4,r2
 800b7e8:	d9000815 	stw	r4,32(sp)
 800b7ec:	d9800a17 	ldw	r6,40(sp)
 800b7f0:	0181810e 	bge	zero,r6,800bdf8 <_dtoa_r+0x1018>
 800b7f4:	d9c00b17 	ldw	r7,44(sp)
 800b7f8:	3800b326 	beq	r7,zero,800bac8 <_dtoa_r+0xce8>
 800b7fc:	a800b226 	beq	r21,zero,800bac8 <_dtoa_r+0xce8>
 800b800:	880b883a 	mov	r5,r17
 800b804:	a80d883a 	mov	r6,r21
 800b808:	e009883a 	mov	r4,fp
 800b80c:	800e9800 	call	800e980 <__pow5mult>
 800b810:	d9800917 	ldw	r6,36(sp)
 800b814:	100b883a 	mov	r5,r2
 800b818:	e009883a 	mov	r4,fp
 800b81c:	1023883a 	mov	r17,r2
 800b820:	800e6f40 	call	800e6f4 <__multiply>
 800b824:	1021883a 	mov	r16,r2
 800b828:	d8800a17 	ldw	r2,40(sp)
 800b82c:	d9400917 	ldw	r5,36(sp)
 800b830:	e009883a 	mov	r4,fp
 800b834:	1545c83a 	sub	r2,r2,r21
 800b838:	d8800a15 	stw	r2,40(sp)
 800b83c:	800e32c0 	call	800e32c <_Bfree>
 800b840:	d8c00a17 	ldw	r3,40(sp)
 800b844:	18009f1e 	bne	r3,zero,800bac4 <_dtoa_r+0xce4>
 800b848:	05c00044 	movi	r23,1
 800b84c:	e009883a 	mov	r4,fp
 800b850:	b80b883a 	mov	r5,r23
 800b854:	800e6b80 	call	800e6b8 <__i2b>
 800b858:	d9000d17 	ldw	r4,52(sp)
 800b85c:	102b883a 	mov	r21,r2
 800b860:	2000ce26 	beq	r4,zero,800bb9c <_dtoa_r+0xdbc>
 800b864:	200d883a 	mov	r6,r4
 800b868:	100b883a 	mov	r5,r2
 800b86c:	e009883a 	mov	r4,fp
 800b870:	800e9800 	call	800e980 <__pow5mult>
 800b874:	d9800317 	ldw	r6,12(sp)
 800b878:	102b883a 	mov	r21,r2
 800b87c:	b981810e 	bge	r23,r6,800be84 <_dtoa_r+0x10a4>
 800b880:	0027883a 	mov	r19,zero
 800b884:	a8800417 	ldw	r2,16(r21)
 800b888:	05c00804 	movi	r23,32
 800b88c:	10800104 	addi	r2,r2,4
 800b890:	1085883a 	add	r2,r2,r2
 800b894:	1085883a 	add	r2,r2,r2
 800b898:	a885883a 	add	r2,r21,r2
 800b89c:	11000017 	ldw	r4,0(r2)
 800b8a0:	800e5a00 	call	800e5a0 <__hi0bits>
 800b8a4:	b885c83a 	sub	r2,r23,r2
 800b8a8:	1585883a 	add	r2,r2,r22
 800b8ac:	108007cc 	andi	r2,r2,31
 800b8b0:	1000b326 	beq	r2,zero,800bb80 <_dtoa_r+0xda0>
 800b8b4:	00c00804 	movi	r3,32
 800b8b8:	1887c83a 	sub	r3,r3,r2
 800b8bc:	01000104 	movi	r4,4
 800b8c0:	20c2cd0e 	bge	r4,r3,800c3f8 <_dtoa_r+0x1618>
 800b8c4:	00c00704 	movi	r3,28
 800b8c8:	1885c83a 	sub	r2,r3,r2
 800b8cc:	d8c00817 	ldw	r3,32(sp)
 800b8d0:	a0a9883a 	add	r20,r20,r2
 800b8d4:	b0ad883a 	add	r22,r22,r2
 800b8d8:	1887883a 	add	r3,r3,r2
 800b8dc:	d8c00815 	stw	r3,32(sp)
 800b8e0:	d9800817 	ldw	r6,32(sp)
 800b8e4:	0180040e 	bge	zero,r6,800b8f8 <_dtoa_r+0xb18>
 800b8e8:	800b883a 	mov	r5,r16
 800b8ec:	e009883a 	mov	r4,fp
 800b8f0:	800eac00 	call	800eac0 <__lshift>
 800b8f4:	1021883a 	mov	r16,r2
 800b8f8:	0580050e 	bge	zero,r22,800b910 <_dtoa_r+0xb30>
 800b8fc:	a80b883a 	mov	r5,r21
 800b900:	b00d883a 	mov	r6,r22
 800b904:	e009883a 	mov	r4,fp
 800b908:	800eac00 	call	800eac0 <__lshift>
 800b90c:	102b883a 	mov	r21,r2
 800b910:	d9c00e17 	ldw	r7,56(sp)
 800b914:	3801211e 	bne	r7,zero,800bd9c <_dtoa_r+0xfbc>
 800b918:	d9800617 	ldw	r6,24(sp)
 800b91c:	0181380e 	bge	zero,r6,800be00 <_dtoa_r+0x1020>
 800b920:	d8c00b17 	ldw	r3,44(sp)
 800b924:	1800ab1e 	bne	r3,zero,800bbd4 <_dtoa_r+0xdf4>
 800b928:	dc800717 	ldw	r18,28(sp)
 800b92c:	dcc00617 	ldw	r19,24(sp)
 800b930:	9029883a 	mov	r20,r18
 800b934:	00000206 	br	800b940 <_dtoa_r+0xb60>
 800b938:	800e3540 	call	800e354 <__multadd>
 800b93c:	1021883a 	mov	r16,r2
 800b940:	a80b883a 	mov	r5,r21
 800b944:	8009883a 	mov	r4,r16
 800b948:	800abb80 	call	800abb8 <quorem>
 800b94c:	10800c04 	addi	r2,r2,48
 800b950:	90800005 	stb	r2,0(r18)
 800b954:	94800044 	addi	r18,r18,1
 800b958:	9507c83a 	sub	r3,r18,r20
 800b95c:	000f883a 	mov	r7,zero
 800b960:	01800284 	movi	r6,10
 800b964:	800b883a 	mov	r5,r16
 800b968:	e009883a 	mov	r4,fp
 800b96c:	1cfff216 	blt	r3,r19,800b938 <_dtoa_r+0xb58>
 800b970:	1011883a 	mov	r8,r2
 800b974:	d8800617 	ldw	r2,24(sp)
 800b978:	0082370e 	bge	zero,r2,800c258 <_dtoa_r+0x1478>
 800b97c:	d9000717 	ldw	r4,28(sp)
 800b980:	0025883a 	mov	r18,zero
 800b984:	20af883a 	add	r23,r4,r2
 800b988:	01800044 	movi	r6,1
 800b98c:	800b883a 	mov	r5,r16
 800b990:	e009883a 	mov	r4,fp
 800b994:	da001715 	stw	r8,92(sp)
 800b998:	800eac00 	call	800eac0 <__lshift>
 800b99c:	a80b883a 	mov	r5,r21
 800b9a0:	1009883a 	mov	r4,r2
 800b9a4:	d8800915 	stw	r2,36(sp)
 800b9a8:	800ec080 	call	800ec08 <__mcmp>
 800b9ac:	da001717 	ldw	r8,92(sp)
 800b9b0:	0081800e 	bge	zero,r2,800bfb4 <_dtoa_r+0x11d4>
 800b9b4:	b93fffc3 	ldbu	r4,-1(r23)
 800b9b8:	b8bfffc4 	addi	r2,r23,-1
 800b9bc:	1007883a 	mov	r3,r2
 800b9c0:	01800e44 	movi	r6,57
 800b9c4:	d9c00717 	ldw	r7,28(sp)
 800b9c8:	00000506 	br	800b9e0 <_dtoa_r+0xc00>
 800b9cc:	18ffffc4 	addi	r3,r3,-1
 800b9d0:	11c12326 	beq	r2,r7,800be60 <_dtoa_r+0x1080>
 800b9d4:	19000003 	ldbu	r4,0(r3)
 800b9d8:	102f883a 	mov	r23,r2
 800b9dc:	10bfffc4 	addi	r2,r2,-1
 800b9e0:	21403fcc 	andi	r5,r4,255
 800b9e4:	2940201c 	xori	r5,r5,128
 800b9e8:	297fe004 	addi	r5,r5,-128
 800b9ec:	29bff726 	beq	r5,r6,800b9cc <_dtoa_r+0xbec>
 800b9f0:	21000044 	addi	r4,r4,1
 800b9f4:	11000005 	stb	r4,0(r2)
 800b9f8:	a80b883a 	mov	r5,r21
 800b9fc:	e009883a 	mov	r4,fp
 800ba00:	800e32c0 	call	800e32c <_Bfree>
 800ba04:	883ea026 	beq	r17,zero,800b488 <_dtoa_r+0x6a8>
 800ba08:	90000426 	beq	r18,zero,800ba1c <_dtoa_r+0xc3c>
 800ba0c:	94400326 	beq	r18,r17,800ba1c <_dtoa_r+0xc3c>
 800ba10:	900b883a 	mov	r5,r18
 800ba14:	e009883a 	mov	r4,fp
 800ba18:	800e32c0 	call	800e32c <_Bfree>
 800ba1c:	880b883a 	mov	r5,r17
 800ba20:	e009883a 	mov	r4,fp
 800ba24:	800e32c0 	call	800e32c <_Bfree>
 800ba28:	003e9706 	br	800b488 <_dtoa_r+0x6a8>
 800ba2c:	01800044 	movi	r6,1
 800ba30:	d9800e15 	stw	r6,56(sp)
 800ba34:	003d9606 	br	800b090 <_dtoa_r+0x2b0>
 800ba38:	d8800817 	ldw	r2,32(sp)
 800ba3c:	d8c00517 	ldw	r3,20(sp)
 800ba40:	d8000d15 	stw	zero,52(sp)
 800ba44:	10c5c83a 	sub	r2,r2,r3
 800ba48:	00c9c83a 	sub	r4,zero,r3
 800ba4c:	d8800815 	stw	r2,32(sp)
 800ba50:	d9000a15 	stw	r4,40(sp)
 800ba54:	003d9706 	br	800b0b4 <_dtoa_r+0x2d4>
 800ba58:	05adc83a 	sub	r22,zero,r22
 800ba5c:	dd800815 	stw	r22,32(sp)
 800ba60:	002d883a 	mov	r22,zero
 800ba64:	003d8e06 	br	800b0a0 <_dtoa_r+0x2c0>
 800ba68:	d9000517 	ldw	r4,20(sp)
 800ba6c:	8014fa80 	call	8014fa8 <__floatsidf>
 800ba70:	100d883a 	mov	r6,r2
 800ba74:	180f883a 	mov	r7,r3
 800ba78:	a009883a 	mov	r4,r20
 800ba7c:	880b883a 	mov	r5,r17
 800ba80:	8013b680 	call	8013b68 <__eqdf2>
 800ba84:	103d7126 	beq	r2,zero,800b04c <_dtoa_r+0x26c>
 800ba88:	d9c00517 	ldw	r7,20(sp)
 800ba8c:	39ffffc4 	addi	r7,r7,-1
 800ba90:	d9c00515 	stw	r7,20(sp)
 800ba94:	003d6d06 	br	800b04c <_dtoa_r+0x26c>
 800ba98:	dd400a17 	ldw	r21,40(sp)
 800ba9c:	dd000817 	ldw	r20,32(sp)
 800baa0:	0023883a 	mov	r17,zero
 800baa4:	003f4806 	br	800b7c8 <_dtoa_r+0x9e8>
 800baa8:	10e3c83a 	sub	r17,r2,r3
 800baac:	9448983a 	sll	r4,r18,r17
 800bab0:	003d3206 	br	800af7c <_dtoa_r+0x19c>
 800bab4:	d8000e15 	stw	zero,56(sp)
 800bab8:	003d7506 	br	800b090 <_dtoa_r+0x2b0>
 800babc:	b005883a 	mov	r2,r22
 800bac0:	003f4506 	br	800b7d8 <_dtoa_r+0x9f8>
 800bac4:	dc000915 	stw	r16,36(sp)
 800bac8:	d9800a17 	ldw	r6,40(sp)
 800bacc:	d9400917 	ldw	r5,36(sp)
 800bad0:	e009883a 	mov	r4,fp
 800bad4:	800e9800 	call	800e980 <__pow5mult>
 800bad8:	1021883a 	mov	r16,r2
 800badc:	003f5a06 	br	800b848 <_dtoa_r+0xa68>
 800bae0:	01c00044 	movi	r7,1
 800bae4:	d9c00b15 	stw	r7,44(sp)
 800bae8:	d8802217 	ldw	r2,136(sp)
 800baec:	0081280e 	bge	zero,r2,800bf90 <_dtoa_r+0x11b0>
 800baf0:	100d883a 	mov	r6,r2
 800baf4:	1021883a 	mov	r16,r2
 800baf8:	d8800c15 	stw	r2,48(sp)
 800bafc:	d8800615 	stw	r2,24(sp)
 800bb00:	003d8806 	br	800b124 <_dtoa_r+0x344>
 800bb04:	d8800617 	ldw	r2,24(sp)
 800bb08:	00be9b16 	blt	zero,r2,800b578 <_dtoa_r+0x798>
 800bb0c:	10010f1e 	bne	r2,zero,800bf4c <_dtoa_r+0x116c>
 800bb10:	880b883a 	mov	r5,r17
 800bb14:	000d883a 	mov	r6,zero
 800bb18:	01d00534 	movhi	r7,16404
 800bb1c:	8009883a 	mov	r4,r16
 800bb20:	8013dc00 	call	8013dc0 <__muldf3>
 800bb24:	900d883a 	mov	r6,r18
 800bb28:	980f883a 	mov	r7,r19
 800bb2c:	1009883a 	mov	r4,r2
 800bb30:	180b883a 	mov	r5,r3
 800bb34:	8013bf00 	call	8013bf0 <__gedf2>
 800bb38:	002b883a 	mov	r21,zero
 800bb3c:	0023883a 	mov	r17,zero
 800bb40:	1000bf16 	blt	r2,zero,800be40 <_dtoa_r+0x1060>
 800bb44:	d9802217 	ldw	r6,136(sp)
 800bb48:	ddc00717 	ldw	r23,28(sp)
 800bb4c:	018c303a 	nor	r6,zero,r6
 800bb50:	d9800515 	stw	r6,20(sp)
 800bb54:	a80b883a 	mov	r5,r21
 800bb58:	e009883a 	mov	r4,fp
 800bb5c:	800e32c0 	call	800e32c <_Bfree>
 800bb60:	883e4926 	beq	r17,zero,800b488 <_dtoa_r+0x6a8>
 800bb64:	003fad06 	br	800ba1c <_dtoa_r+0xc3c>
 800bb68:	d9c01117 	ldw	r7,68(sp)
 800bb6c:	3801bc26 	beq	r7,zero,800c260 <_dtoa_r+0x1480>
 800bb70:	10810cc4 	addi	r2,r2,1075
 800bb74:	dd400a17 	ldw	r21,40(sp)
 800bb78:	dd000817 	ldw	r20,32(sp)
 800bb7c:	003f0a06 	br	800b7a8 <_dtoa_r+0x9c8>
 800bb80:	00800704 	movi	r2,28
 800bb84:	d9000817 	ldw	r4,32(sp)
 800bb88:	a0a9883a 	add	r20,r20,r2
 800bb8c:	b0ad883a 	add	r22,r22,r2
 800bb90:	2089883a 	add	r4,r4,r2
 800bb94:	d9000815 	stw	r4,32(sp)
 800bb98:	003f5106 	br	800b8e0 <_dtoa_r+0xb00>
 800bb9c:	d8c00317 	ldw	r3,12(sp)
 800bba0:	b8c1fc0e 	bge	r23,r3,800c394 <_dtoa_r+0x15b4>
 800bba4:	0027883a 	mov	r19,zero
 800bba8:	b805883a 	mov	r2,r23
 800bbac:	003f3e06 	br	800b8a8 <_dtoa_r+0xac8>
 800bbb0:	880b883a 	mov	r5,r17
 800bbb4:	e009883a 	mov	r4,fp
 800bbb8:	000f883a 	mov	r7,zero
 800bbbc:	01800284 	movi	r6,10
 800bbc0:	800e3540 	call	800e354 <__multadd>
 800bbc4:	d9000c17 	ldw	r4,48(sp)
 800bbc8:	1023883a 	mov	r17,r2
 800bbcc:	0102040e 	bge	zero,r4,800c3e0 <_dtoa_r+0x1600>
 800bbd0:	d9000615 	stw	r4,24(sp)
 800bbd4:	0500050e 	bge	zero,r20,800bbec <_dtoa_r+0xe0c>
 800bbd8:	880b883a 	mov	r5,r17
 800bbdc:	a00d883a 	mov	r6,r20
 800bbe0:	e009883a 	mov	r4,fp
 800bbe4:	800eac00 	call	800eac0 <__lshift>
 800bbe8:	1023883a 	mov	r17,r2
 800bbec:	9801241e 	bne	r19,zero,800c080 <_dtoa_r+0x12a0>
 800bbf0:	8829883a 	mov	r20,r17
 800bbf4:	d9000617 	ldw	r4,24(sp)
 800bbf8:	dcc00717 	ldw	r19,28(sp)
 800bbfc:	9480004c 	andi	r18,r18,1
 800bc00:	20bfffc4 	addi	r2,r4,-1
 800bc04:	9885883a 	add	r2,r19,r2
 800bc08:	d8800415 	stw	r2,16(sp)
 800bc0c:	dc800615 	stw	r18,24(sp)
 800bc10:	a80b883a 	mov	r5,r21
 800bc14:	8009883a 	mov	r4,r16
 800bc18:	800abb80 	call	800abb8 <quorem>
 800bc1c:	880b883a 	mov	r5,r17
 800bc20:	8009883a 	mov	r4,r16
 800bc24:	102f883a 	mov	r23,r2
 800bc28:	800ec080 	call	800ec08 <__mcmp>
 800bc2c:	a80b883a 	mov	r5,r21
 800bc30:	a00d883a 	mov	r6,r20
 800bc34:	e009883a 	mov	r4,fp
 800bc38:	102d883a 	mov	r22,r2
 800bc3c:	800ec680 	call	800ec68 <__mdiff>
 800bc40:	1007883a 	mov	r3,r2
 800bc44:	10800317 	ldw	r2,12(r2)
 800bc48:	bc800c04 	addi	r18,r23,48
 800bc4c:	180b883a 	mov	r5,r3
 800bc50:	10004e1e 	bne	r2,zero,800bd8c <_dtoa_r+0xfac>
 800bc54:	8009883a 	mov	r4,r16
 800bc58:	d8c01615 	stw	r3,88(sp)
 800bc5c:	800ec080 	call	800ec08 <__mcmp>
 800bc60:	d8c01617 	ldw	r3,88(sp)
 800bc64:	e009883a 	mov	r4,fp
 800bc68:	d8801615 	stw	r2,88(sp)
 800bc6c:	180b883a 	mov	r5,r3
 800bc70:	800e32c0 	call	800e32c <_Bfree>
 800bc74:	d8801617 	ldw	r2,88(sp)
 800bc78:	1000041e 	bne	r2,zero,800bc8c <_dtoa_r+0xeac>
 800bc7c:	d9800317 	ldw	r6,12(sp)
 800bc80:	3000021e 	bne	r6,zero,800bc8c <_dtoa_r+0xeac>
 800bc84:	d8c00617 	ldw	r3,24(sp)
 800bc88:	18003726 	beq	r3,zero,800bd68 <_dtoa_r+0xf88>
 800bc8c:	b0002016 	blt	r22,zero,800bd10 <_dtoa_r+0xf30>
 800bc90:	b000041e 	bne	r22,zero,800bca4 <_dtoa_r+0xec4>
 800bc94:	d9000317 	ldw	r4,12(sp)
 800bc98:	2000021e 	bne	r4,zero,800bca4 <_dtoa_r+0xec4>
 800bc9c:	d8c00617 	ldw	r3,24(sp)
 800bca0:	18001b26 	beq	r3,zero,800bd10 <_dtoa_r+0xf30>
 800bca4:	00810716 	blt	zero,r2,800c0c4 <_dtoa_r+0x12e4>
 800bca8:	d8c00417 	ldw	r3,16(sp)
 800bcac:	9d800044 	addi	r22,r19,1
 800bcb0:	9c800005 	stb	r18,0(r19)
 800bcb4:	b02f883a 	mov	r23,r22
 800bcb8:	98c10626 	beq	r19,r3,800c0d4 <_dtoa_r+0x12f4>
 800bcbc:	800b883a 	mov	r5,r16
 800bcc0:	000f883a 	mov	r7,zero
 800bcc4:	01800284 	movi	r6,10
 800bcc8:	e009883a 	mov	r4,fp
 800bccc:	800e3540 	call	800e354 <__multadd>
 800bcd0:	1021883a 	mov	r16,r2
 800bcd4:	000f883a 	mov	r7,zero
 800bcd8:	01800284 	movi	r6,10
 800bcdc:	880b883a 	mov	r5,r17
 800bce0:	e009883a 	mov	r4,fp
 800bce4:	8d002526 	beq	r17,r20,800bd7c <_dtoa_r+0xf9c>
 800bce8:	800e3540 	call	800e354 <__multadd>
 800bcec:	a00b883a 	mov	r5,r20
 800bcf0:	000f883a 	mov	r7,zero
 800bcf4:	01800284 	movi	r6,10
 800bcf8:	e009883a 	mov	r4,fp
 800bcfc:	1023883a 	mov	r17,r2
 800bd00:	800e3540 	call	800e354 <__multadd>
 800bd04:	1029883a 	mov	r20,r2
 800bd08:	b027883a 	mov	r19,r22
 800bd0c:	003fc006 	br	800bc10 <_dtoa_r+0xe30>
 800bd10:	9011883a 	mov	r8,r18
 800bd14:	00800e0e 	bge	zero,r2,800bd50 <_dtoa_r+0xf70>
 800bd18:	800b883a 	mov	r5,r16
 800bd1c:	01800044 	movi	r6,1
 800bd20:	e009883a 	mov	r4,fp
 800bd24:	da001715 	stw	r8,92(sp)
 800bd28:	800eac00 	call	800eac0 <__lshift>
 800bd2c:	a80b883a 	mov	r5,r21
 800bd30:	1009883a 	mov	r4,r2
 800bd34:	1021883a 	mov	r16,r2
 800bd38:	800ec080 	call	800ec08 <__mcmp>
 800bd3c:	da001717 	ldw	r8,92(sp)
 800bd40:	0081960e 	bge	zero,r2,800c39c <_dtoa_r+0x15bc>
 800bd44:	00800e44 	movi	r2,57
 800bd48:	40817026 	beq	r8,r2,800c30c <_dtoa_r+0x152c>
 800bd4c:	ba000c44 	addi	r8,r23,49
 800bd50:	8825883a 	mov	r18,r17
 800bd54:	9dc00044 	addi	r23,r19,1
 800bd58:	9a000005 	stb	r8,0(r19)
 800bd5c:	a023883a 	mov	r17,r20
 800bd60:	dc000915 	stw	r16,36(sp)
 800bd64:	003f2406 	br	800b9f8 <_dtoa_r+0xc18>
 800bd68:	00800e44 	movi	r2,57
 800bd6c:	9011883a 	mov	r8,r18
 800bd70:	90816626 	beq	r18,r2,800c30c <_dtoa_r+0x152c>
 800bd74:	05bff516 	blt	zero,r22,800bd4c <_dtoa_r+0xf6c>
 800bd78:	003ff506 	br	800bd50 <_dtoa_r+0xf70>
 800bd7c:	800e3540 	call	800e354 <__multadd>
 800bd80:	1023883a 	mov	r17,r2
 800bd84:	1029883a 	mov	r20,r2
 800bd88:	003fdf06 	br	800bd08 <_dtoa_r+0xf28>
 800bd8c:	e009883a 	mov	r4,fp
 800bd90:	800e32c0 	call	800e32c <_Bfree>
 800bd94:	00800044 	movi	r2,1
 800bd98:	003fbc06 	br	800bc8c <_dtoa_r+0xeac>
 800bd9c:	a80b883a 	mov	r5,r21
 800bda0:	8009883a 	mov	r4,r16
 800bda4:	800ec080 	call	800ec08 <__mcmp>
 800bda8:	103edb0e 	bge	r2,zero,800b918 <_dtoa_r+0xb38>
 800bdac:	800b883a 	mov	r5,r16
 800bdb0:	000f883a 	mov	r7,zero
 800bdb4:	01800284 	movi	r6,10
 800bdb8:	e009883a 	mov	r4,fp
 800bdbc:	800e3540 	call	800e354 <__multadd>
 800bdc0:	1021883a 	mov	r16,r2
 800bdc4:	d8800517 	ldw	r2,20(sp)
 800bdc8:	d8c00b17 	ldw	r3,44(sp)
 800bdcc:	10bfffc4 	addi	r2,r2,-1
 800bdd0:	d8800515 	stw	r2,20(sp)
 800bdd4:	183f761e 	bne	r3,zero,800bbb0 <_dtoa_r+0xdd0>
 800bdd8:	d9000c17 	ldw	r4,48(sp)
 800bddc:	0101730e 	bge	zero,r4,800c3ac <_dtoa_r+0x15cc>
 800bde0:	d9000615 	stw	r4,24(sp)
 800bde4:	003ed006 	br	800b928 <_dtoa_r+0xb48>
 800bde8:	00800084 	movi	r2,2
 800bdec:	3081861e 	bne	r6,r2,800c408 <_dtoa_r+0x1628>
 800bdf0:	d8000b15 	stw	zero,44(sp)
 800bdf4:	003f3c06 	br	800bae8 <_dtoa_r+0xd08>
 800bdf8:	dc000917 	ldw	r16,36(sp)
 800bdfc:	003e9206 	br	800b848 <_dtoa_r+0xa68>
 800be00:	d9c00317 	ldw	r7,12(sp)
 800be04:	00800084 	movi	r2,2
 800be08:	11fec50e 	bge	r2,r7,800b920 <_dtoa_r+0xb40>
 800be0c:	d9000617 	ldw	r4,24(sp)
 800be10:	20013c1e 	bne	r4,zero,800c304 <_dtoa_r+0x1524>
 800be14:	a80b883a 	mov	r5,r21
 800be18:	000f883a 	mov	r7,zero
 800be1c:	01800144 	movi	r6,5
 800be20:	e009883a 	mov	r4,fp
 800be24:	800e3540 	call	800e354 <__multadd>
 800be28:	100b883a 	mov	r5,r2
 800be2c:	8009883a 	mov	r4,r16
 800be30:	102b883a 	mov	r21,r2
 800be34:	800ec080 	call	800ec08 <__mcmp>
 800be38:	dc000915 	stw	r16,36(sp)
 800be3c:	00bf410e 	bge	zero,r2,800bb44 <_dtoa_r+0xd64>
 800be40:	d9c00717 	ldw	r7,28(sp)
 800be44:	00800c44 	movi	r2,49
 800be48:	38800005 	stb	r2,0(r7)
 800be4c:	d8800517 	ldw	r2,20(sp)
 800be50:	3dc00044 	addi	r23,r7,1
 800be54:	10800044 	addi	r2,r2,1
 800be58:	d8800515 	stw	r2,20(sp)
 800be5c:	003f3d06 	br	800bb54 <_dtoa_r+0xd74>
 800be60:	d9800517 	ldw	r6,20(sp)
 800be64:	d9c00717 	ldw	r7,28(sp)
 800be68:	00800c44 	movi	r2,49
 800be6c:	31800044 	addi	r6,r6,1
 800be70:	d9800515 	stw	r6,20(sp)
 800be74:	38800005 	stb	r2,0(r7)
 800be78:	003edf06 	br	800b9f8 <_dtoa_r+0xc18>
 800be7c:	d8000b15 	stw	zero,44(sp)
 800be80:	003c9f06 	br	800b100 <_dtoa_r+0x320>
 800be84:	903e7e1e 	bne	r18,zero,800b880 <_dtoa_r+0xaa0>
 800be88:	00800434 	movhi	r2,16
 800be8c:	10bfffc4 	addi	r2,r2,-1
 800be90:	9884703a 	and	r2,r19,r2
 800be94:	1000ea1e 	bne	r2,zero,800c240 <_dtoa_r+0x1460>
 800be98:	9cdffc2c 	andhi	r19,r19,32752
 800be9c:	9800e826 	beq	r19,zero,800c240 <_dtoa_r+0x1460>
 800bea0:	d9c00817 	ldw	r7,32(sp)
 800bea4:	b5800044 	addi	r22,r22,1
 800bea8:	04c00044 	movi	r19,1
 800beac:	39c00044 	addi	r7,r7,1
 800beb0:	d9c00815 	stw	r7,32(sp)
 800beb4:	d8800d17 	ldw	r2,52(sp)
 800beb8:	103e721e 	bne	r2,zero,800b884 <_dtoa_r+0xaa4>
 800bebc:	00800044 	movi	r2,1
 800bec0:	003e7906 	br	800b8a8 <_dtoa_r+0xac8>
 800bec4:	8009883a 	mov	r4,r16
 800bec8:	8014fa80 	call	8014fa8 <__floatsidf>
 800becc:	d9800f17 	ldw	r6,60(sp)
 800bed0:	d9c01017 	ldw	r7,64(sp)
 800bed4:	1009883a 	mov	r4,r2
 800bed8:	180b883a 	mov	r5,r3
 800bedc:	8013dc00 	call	8013dc0 <__muldf3>
 800bee0:	000d883a 	mov	r6,zero
 800bee4:	01d00734 	movhi	r7,16412
 800bee8:	1009883a 	mov	r4,r2
 800beec:	180b883a 	mov	r5,r3
 800bef0:	80128ec0 	call	80128ec <__adddf3>
 800bef4:	047f3034 	movhi	r17,64704
 800bef8:	1021883a 	mov	r16,r2
 800befc:	1c63883a 	add	r17,r3,r17
 800bf00:	d9000f17 	ldw	r4,60(sp)
 800bf04:	d9401017 	ldw	r5,64(sp)
 800bf08:	000d883a 	mov	r6,zero
 800bf0c:	01d00534 	movhi	r7,16404
 800bf10:	801462c0 	call	801462c <__subdf3>
 800bf14:	800d883a 	mov	r6,r16
 800bf18:	880f883a 	mov	r7,r17
 800bf1c:	1009883a 	mov	r4,r2
 800bf20:	180b883a 	mov	r5,r3
 800bf24:	102b883a 	mov	r21,r2
 800bf28:	1829883a 	mov	r20,r3
 800bf2c:	8013bf00 	call	8013bf0 <__gedf2>
 800bf30:	00806c16 	blt	zero,r2,800c0e4 <_dtoa_r+0x1304>
 800bf34:	89e0003c 	xorhi	r7,r17,32768
 800bf38:	800d883a 	mov	r6,r16
 800bf3c:	a809883a 	mov	r4,r21
 800bf40:	a00b883a 	mov	r5,r20
 800bf44:	8013ccc0 	call	8013ccc <__ledf2>
 800bf48:	103d7e0e 	bge	r2,zero,800b544 <_dtoa_r+0x764>
 800bf4c:	002b883a 	mov	r21,zero
 800bf50:	0023883a 	mov	r17,zero
 800bf54:	003efb06 	br	800bb44 <_dtoa_r+0xd64>
 800bf58:	d8800717 	ldw	r2,28(sp)
 800bf5c:	003bd006 	br	800aea0 <_dtoa_r+0xc0>
 800bf60:	d9000a17 	ldw	r4,40(sp)
 800bf64:	d9800d17 	ldw	r6,52(sp)
 800bf68:	dd400a15 	stw	r21,40(sp)
 800bf6c:	a905c83a 	sub	r2,r21,r4
 800bf70:	308d883a 	add	r6,r6,r2
 800bf74:	d9800d15 	stw	r6,52(sp)
 800bf78:	002b883a 	mov	r21,zero
 800bf7c:	003e0606 	br	800b798 <_dtoa_r+0x9b8>
 800bf80:	9023883a 	mov	r17,r18
 800bf84:	9829883a 	mov	r20,r19
 800bf88:	04000084 	movi	r16,2
 800bf8c:	003c9206 	br	800b1d8 <_dtoa_r+0x3f8>
 800bf90:	04000044 	movi	r16,1
 800bf94:	dc000c15 	stw	r16,48(sp)
 800bf98:	dc000615 	stw	r16,24(sp)
 800bf9c:	dc002215 	stw	r16,136(sp)
 800bfa0:	e0001115 	stw	zero,68(fp)
 800bfa4:	000b883a 	mov	r5,zero
 800bfa8:	003c6906 	br	800b150 <_dtoa_r+0x370>
 800bfac:	3021883a 	mov	r16,r6
 800bfb0:	003ffb06 	br	800bfa0 <_dtoa_r+0x11c0>
 800bfb4:	1000021e 	bne	r2,zero,800bfc0 <_dtoa_r+0x11e0>
 800bfb8:	4200004c 	andi	r8,r8,1
 800bfbc:	403e7d1e 	bne	r8,zero,800b9b4 <_dtoa_r+0xbd4>
 800bfc0:	01000c04 	movi	r4,48
 800bfc4:	00000106 	br	800bfcc <_dtoa_r+0x11ec>
 800bfc8:	102f883a 	mov	r23,r2
 800bfcc:	b8bfffc4 	addi	r2,r23,-1
 800bfd0:	10c00007 	ldb	r3,0(r2)
 800bfd4:	193ffc26 	beq	r3,r4,800bfc8 <_dtoa_r+0x11e8>
 800bfd8:	003e8706 	br	800b9f8 <_dtoa_r+0xc18>
 800bfdc:	d8800517 	ldw	r2,20(sp)
 800bfe0:	00a3c83a 	sub	r17,zero,r2
 800bfe4:	8800a426 	beq	r17,zero,800c278 <_dtoa_r+0x1498>
 800bfe8:	888003cc 	andi	r2,r17,15
 800bfec:	100490fa 	slli	r2,r2,3
 800bff0:	00c200b4 	movhi	r3,2050
 800bff4:	18e10204 	addi	r3,r3,-31736
 800bff8:	1885883a 	add	r2,r3,r2
 800bffc:	11800017 	ldw	r6,0(r2)
 800c000:	11c00117 	ldw	r7,4(r2)
 800c004:	9009883a 	mov	r4,r18
 800c008:	980b883a 	mov	r5,r19
 800c00c:	8823d13a 	srai	r17,r17,4
 800c010:	8013dc00 	call	8013dc0 <__muldf3>
 800c014:	d8800f15 	stw	r2,60(sp)
 800c018:	d8c01015 	stw	r3,64(sp)
 800c01c:	8800e826 	beq	r17,zero,800c3c0 <_dtoa_r+0x15e0>
 800c020:	050200b4 	movhi	r20,2050
 800c024:	a520f804 	addi	r20,r20,-31776
 800c028:	04000084 	movi	r16,2
 800c02c:	8980004c 	andi	r6,r17,1
 800c030:	1009883a 	mov	r4,r2
 800c034:	8823d07a 	srai	r17,r17,1
 800c038:	180b883a 	mov	r5,r3
 800c03c:	30000426 	beq	r6,zero,800c050 <_dtoa_r+0x1270>
 800c040:	a1800017 	ldw	r6,0(r20)
 800c044:	a1c00117 	ldw	r7,4(r20)
 800c048:	84000044 	addi	r16,r16,1
 800c04c:	8013dc00 	call	8013dc0 <__muldf3>
 800c050:	a5000204 	addi	r20,r20,8
 800c054:	883ff51e 	bne	r17,zero,800c02c <_dtoa_r+0x124c>
 800c058:	d8800f15 	stw	r2,60(sp)
 800c05c:	d8c01015 	stw	r3,64(sp)
 800c060:	003c7606 	br	800b23c <_dtoa_r+0x45c>
 800c064:	00c00c04 	movi	r3,48
 800c068:	10c00005 	stb	r3,0(r2)
 800c06c:	d8c00517 	ldw	r3,20(sp)
 800c070:	bd3fffc3 	ldbu	r20,-1(r23)
 800c074:	18c00044 	addi	r3,r3,1
 800c078:	d8c00515 	stw	r3,20(sp)
 800c07c:	003db906 	br	800b764 <_dtoa_r+0x984>
 800c080:	89400117 	ldw	r5,4(r17)
 800c084:	e009883a 	mov	r4,fp
 800c088:	800e2840 	call	800e284 <_Balloc>
 800c08c:	89800417 	ldw	r6,16(r17)
 800c090:	89400304 	addi	r5,r17,12
 800c094:	11000304 	addi	r4,r2,12
 800c098:	31800084 	addi	r6,r6,2
 800c09c:	318d883a 	add	r6,r6,r6
 800c0a0:	318d883a 	add	r6,r6,r6
 800c0a4:	1027883a 	mov	r19,r2
 800c0a8:	8007fa40 	call	8007fa4 <memcpy>
 800c0ac:	01800044 	movi	r6,1
 800c0b0:	980b883a 	mov	r5,r19
 800c0b4:	e009883a 	mov	r4,fp
 800c0b8:	800eac00 	call	800eac0 <__lshift>
 800c0bc:	1029883a 	mov	r20,r2
 800c0c0:	003ecc06 	br	800bbf4 <_dtoa_r+0xe14>
 800c0c4:	00800e44 	movi	r2,57
 800c0c8:	90809026 	beq	r18,r2,800c30c <_dtoa_r+0x152c>
 800c0cc:	92000044 	addi	r8,r18,1
 800c0d0:	003f1f06 	br	800bd50 <_dtoa_r+0xf70>
 800c0d4:	9011883a 	mov	r8,r18
 800c0d8:	8825883a 	mov	r18,r17
 800c0dc:	a023883a 	mov	r17,r20
 800c0e0:	003e2906 	br	800b988 <_dtoa_r+0xba8>
 800c0e4:	002b883a 	mov	r21,zero
 800c0e8:	0023883a 	mov	r17,zero
 800c0ec:	003f5406 	br	800be40 <_dtoa_r+0x1060>
 800c0f0:	61bfffc4 	addi	r6,r12,-1
 800c0f4:	300490fa 	slli	r2,r6,3
 800c0f8:	00c200b4 	movhi	r3,2050
 800c0fc:	18e10204 	addi	r3,r3,-31736
 800c100:	1885883a 	add	r2,r3,r2
 800c104:	11000017 	ldw	r4,0(r2)
 800c108:	11400117 	ldw	r5,4(r2)
 800c10c:	d8800717 	ldw	r2,28(sp)
 800c110:	880f883a 	mov	r7,r17
 800c114:	d9801215 	stw	r6,72(sp)
 800c118:	800d883a 	mov	r6,r16
 800c11c:	db001615 	stw	r12,88(sp)
 800c120:	15c00044 	addi	r23,r2,1
 800c124:	8013dc00 	call	8013dc0 <__muldf3>
 800c128:	d9401017 	ldw	r5,64(sp)
 800c12c:	d9000f17 	ldw	r4,60(sp)
 800c130:	d8c01515 	stw	r3,84(sp)
 800c134:	d8801415 	stw	r2,80(sp)
 800c138:	8014f280 	call	8014f28 <__fixdfsi>
 800c13c:	1009883a 	mov	r4,r2
 800c140:	1021883a 	mov	r16,r2
 800c144:	8014fa80 	call	8014fa8 <__floatsidf>
 800c148:	d9000f17 	ldw	r4,60(sp)
 800c14c:	d9401017 	ldw	r5,64(sp)
 800c150:	100d883a 	mov	r6,r2
 800c154:	180f883a 	mov	r7,r3
 800c158:	801462c0 	call	801462c <__subdf3>
 800c15c:	1829883a 	mov	r20,r3
 800c160:	d8c00717 	ldw	r3,28(sp)
 800c164:	84000c04 	addi	r16,r16,48
 800c168:	1023883a 	mov	r17,r2
 800c16c:	1c000005 	stb	r16,0(r3)
 800c170:	db001617 	ldw	r12,88(sp)
 800c174:	00800044 	movi	r2,1
 800c178:	60802226 	beq	r12,r2,800c204 <_dtoa_r+0x1424>
 800c17c:	d9c00717 	ldw	r7,28(sp)
 800c180:	8805883a 	mov	r2,r17
 800c184:	b82b883a 	mov	r21,r23
 800c188:	3b19883a 	add	r12,r7,r12
 800c18c:	6023883a 	mov	r17,r12
 800c190:	a007883a 	mov	r3,r20
 800c194:	dc800f15 	stw	r18,60(sp)
 800c198:	000d883a 	mov	r6,zero
 800c19c:	01d00934 	movhi	r7,16420
 800c1a0:	1009883a 	mov	r4,r2
 800c1a4:	180b883a 	mov	r5,r3
 800c1a8:	8013dc00 	call	8013dc0 <__muldf3>
 800c1ac:	180b883a 	mov	r5,r3
 800c1b0:	1009883a 	mov	r4,r2
 800c1b4:	1829883a 	mov	r20,r3
 800c1b8:	1025883a 	mov	r18,r2
 800c1bc:	8014f280 	call	8014f28 <__fixdfsi>
 800c1c0:	1009883a 	mov	r4,r2
 800c1c4:	1021883a 	mov	r16,r2
 800c1c8:	8014fa80 	call	8014fa8 <__floatsidf>
 800c1cc:	100d883a 	mov	r6,r2
 800c1d0:	180f883a 	mov	r7,r3
 800c1d4:	9009883a 	mov	r4,r18
 800c1d8:	a00b883a 	mov	r5,r20
 800c1dc:	84000c04 	addi	r16,r16,48
 800c1e0:	801462c0 	call	801462c <__subdf3>
 800c1e4:	ad400044 	addi	r21,r21,1
 800c1e8:	ac3fffc5 	stb	r16,-1(r21)
 800c1ec:	ac7fea1e 	bne	r21,r17,800c198 <_dtoa_r+0x13b8>
 800c1f0:	1023883a 	mov	r17,r2
 800c1f4:	d8801217 	ldw	r2,72(sp)
 800c1f8:	dc800f17 	ldw	r18,60(sp)
 800c1fc:	1829883a 	mov	r20,r3
 800c200:	b8af883a 	add	r23,r23,r2
 800c204:	d9001417 	ldw	r4,80(sp)
 800c208:	d9401517 	ldw	r5,84(sp)
 800c20c:	000d883a 	mov	r6,zero
 800c210:	01cff834 	movhi	r7,16352
 800c214:	80128ec0 	call	80128ec <__adddf3>
 800c218:	880d883a 	mov	r6,r17
 800c21c:	a00f883a 	mov	r7,r20
 800c220:	1009883a 	mov	r4,r2
 800c224:	180b883a 	mov	r5,r3
 800c228:	8013ccc0 	call	8013ccc <__ledf2>
 800c22c:	10003e0e 	bge	r2,zero,800c328 <_dtoa_r+0x1548>
 800c230:	d9001317 	ldw	r4,76(sp)
 800c234:	bd3fffc3 	ldbu	r20,-1(r23)
 800c238:	d9000515 	stw	r4,20(sp)
 800c23c:	003d3b06 	br	800b72c <_dtoa_r+0x94c>
 800c240:	0027883a 	mov	r19,zero
 800c244:	003f1b06 	br	800beb4 <_dtoa_r+0x10d4>
 800c248:	d8800817 	ldw	r2,32(sp)
 800c24c:	11e9c83a 	sub	r20,r2,r7
 800c250:	0005883a 	mov	r2,zero
 800c254:	003d5406 	br	800b7a8 <_dtoa_r+0x9c8>
 800c258:	00800044 	movi	r2,1
 800c25c:	003dc706 	br	800b97c <_dtoa_r+0xb9c>
 800c260:	d8c00217 	ldw	r3,8(sp)
 800c264:	00800d84 	movi	r2,54
 800c268:	dd400a17 	ldw	r21,40(sp)
 800c26c:	10c5c83a 	sub	r2,r2,r3
 800c270:	dd000817 	ldw	r20,32(sp)
 800c274:	003d4c06 	br	800b7a8 <_dtoa_r+0x9c8>
 800c278:	dc800f15 	stw	r18,60(sp)
 800c27c:	dcc01015 	stw	r19,64(sp)
 800c280:	04000084 	movi	r16,2
 800c284:	003bed06 	br	800b23c <_dtoa_r+0x45c>
 800c288:	d9000617 	ldw	r4,24(sp)
 800c28c:	203f0d26 	beq	r4,zero,800bec4 <_dtoa_r+0x10e4>
 800c290:	d9800c17 	ldw	r6,48(sp)
 800c294:	01bcab0e 	bge	zero,r6,800b544 <_dtoa_r+0x764>
 800c298:	d9401017 	ldw	r5,64(sp)
 800c29c:	d9000f17 	ldw	r4,60(sp)
 800c2a0:	000d883a 	mov	r6,zero
 800c2a4:	01d00934 	movhi	r7,16420
 800c2a8:	8013dc00 	call	8013dc0 <__muldf3>
 800c2ac:	81000044 	addi	r4,r16,1
 800c2b0:	d8800f15 	stw	r2,60(sp)
 800c2b4:	d8c01015 	stw	r3,64(sp)
 800c2b8:	8014fa80 	call	8014fa8 <__floatsidf>
 800c2bc:	d9800f17 	ldw	r6,60(sp)
 800c2c0:	d9c01017 	ldw	r7,64(sp)
 800c2c4:	1009883a 	mov	r4,r2
 800c2c8:	180b883a 	mov	r5,r3
 800c2cc:	8013dc00 	call	8013dc0 <__muldf3>
 800c2d0:	01d00734 	movhi	r7,16412
 800c2d4:	000d883a 	mov	r6,zero
 800c2d8:	1009883a 	mov	r4,r2
 800c2dc:	180b883a 	mov	r5,r3
 800c2e0:	80128ec0 	call	80128ec <__adddf3>
 800c2e4:	d9c00517 	ldw	r7,20(sp)
 800c2e8:	047f3034 	movhi	r17,64704
 800c2ec:	1021883a 	mov	r16,r2
 800c2f0:	39ffffc4 	addi	r7,r7,-1
 800c2f4:	d9c01315 	stw	r7,76(sp)
 800c2f8:	1c63883a 	add	r17,r3,r17
 800c2fc:	db000c17 	ldw	r12,48(sp)
 800c300:	003bea06 	br	800b2ac <_dtoa_r+0x4cc>
 800c304:	dc000915 	stw	r16,36(sp)
 800c308:	003e0e06 	br	800bb44 <_dtoa_r+0xd64>
 800c30c:	01000e44 	movi	r4,57
 800c310:	8825883a 	mov	r18,r17
 800c314:	9dc00044 	addi	r23,r19,1
 800c318:	99000005 	stb	r4,0(r19)
 800c31c:	a023883a 	mov	r17,r20
 800c320:	dc000915 	stw	r16,36(sp)
 800c324:	003da406 	br	800b9b8 <_dtoa_r+0xbd8>
 800c328:	d9801417 	ldw	r6,80(sp)
 800c32c:	d9c01517 	ldw	r7,84(sp)
 800c330:	0009883a 	mov	r4,zero
 800c334:	014ff834 	movhi	r5,16352
 800c338:	801462c0 	call	801462c <__subdf3>
 800c33c:	880d883a 	mov	r6,r17
 800c340:	a00f883a 	mov	r7,r20
 800c344:	1009883a 	mov	r4,r2
 800c348:	180b883a 	mov	r5,r3
 800c34c:	8013bf00 	call	8013bf0 <__gedf2>
 800c350:	00bc7c0e 	bge	zero,r2,800b544 <_dtoa_r+0x764>
 800c354:	01000c04 	movi	r4,48
 800c358:	00000106 	br	800c360 <_dtoa_r+0x1580>
 800c35c:	102f883a 	mov	r23,r2
 800c360:	b8bfffc4 	addi	r2,r23,-1
 800c364:	10c00007 	ldb	r3,0(r2)
 800c368:	193ffc26 	beq	r3,r4,800c35c <_dtoa_r+0x157c>
 800c36c:	d9801317 	ldw	r6,76(sp)
 800c370:	d9800515 	stw	r6,20(sp)
 800c374:	003c4406 	br	800b488 <_dtoa_r+0x6a8>
 800c378:	d9801317 	ldw	r6,76(sp)
 800c37c:	d9800515 	stw	r6,20(sp)
 800c380:	003cea06 	br	800b72c <_dtoa_r+0x94c>
 800c384:	dd800f17 	ldw	r22,60(sp)
 800c388:	dcc01017 	ldw	r19,64(sp)
 800c38c:	dc801217 	ldw	r18,72(sp)
 800c390:	003c6c06 	br	800b544 <_dtoa_r+0x764>
 800c394:	903e031e 	bne	r18,zero,800bba4 <_dtoa_r+0xdc4>
 800c398:	003ebb06 	br	800be88 <_dtoa_r+0x10a8>
 800c39c:	103e6c1e 	bne	r2,zero,800bd50 <_dtoa_r+0xf70>
 800c3a0:	4080004c 	andi	r2,r8,1
 800c3a4:	103e6a26 	beq	r2,zero,800bd50 <_dtoa_r+0xf70>
 800c3a8:	003e6606 	br	800bd44 <_dtoa_r+0xf64>
 800c3ac:	d8c00317 	ldw	r3,12(sp)
 800c3b0:	00800084 	movi	r2,2
 800c3b4:	10c02916 	blt	r2,r3,800c45c <_dtoa_r+0x167c>
 800c3b8:	d9000c17 	ldw	r4,48(sp)
 800c3bc:	003e8806 	br	800bde0 <_dtoa_r+0x1000>
 800c3c0:	04000084 	movi	r16,2
 800c3c4:	003b9d06 	br	800b23c <_dtoa_r+0x45c>
 800c3c8:	d9001317 	ldw	r4,76(sp)
 800c3cc:	d9000515 	stw	r4,20(sp)
 800c3d0:	003cd606 	br	800b72c <_dtoa_r+0x94c>
 800c3d4:	d8801317 	ldw	r2,76(sp)
 800c3d8:	d8800515 	stw	r2,20(sp)
 800c3dc:	003c2a06 	br	800b488 <_dtoa_r+0x6a8>
 800c3e0:	d9800317 	ldw	r6,12(sp)
 800c3e4:	00800084 	movi	r2,2
 800c3e8:	11801516 	blt	r2,r6,800c440 <_dtoa_r+0x1660>
 800c3ec:	d9c00c17 	ldw	r7,48(sp)
 800c3f0:	d9c00615 	stw	r7,24(sp)
 800c3f4:	003df706 	br	800bbd4 <_dtoa_r+0xdf4>
 800c3f8:	193d3926 	beq	r3,r4,800b8e0 <_dtoa_r+0xb00>
 800c3fc:	00c00f04 	movi	r3,60
 800c400:	1885c83a 	sub	r2,r3,r2
 800c404:	003ddf06 	br	800bb84 <_dtoa_r+0xda4>
 800c408:	e009883a 	mov	r4,fp
 800c40c:	e0001115 	stw	zero,68(fp)
 800c410:	000b883a 	mov	r5,zero
 800c414:	800e2840 	call	800e284 <_Balloc>
 800c418:	d8800715 	stw	r2,28(sp)
 800c41c:	d8c00717 	ldw	r3,28(sp)
 800c420:	00bfffc4 	movi	r2,-1
 800c424:	01000044 	movi	r4,1
 800c428:	d8800c15 	stw	r2,48(sp)
 800c42c:	e0c01015 	stw	r3,64(fp)
 800c430:	d9000b15 	stw	r4,44(sp)
 800c434:	d8800615 	stw	r2,24(sp)
 800c438:	d8002215 	stw	zero,136(sp)
 800c43c:	003c4106 	br	800b544 <_dtoa_r+0x764>
 800c440:	d8c00c17 	ldw	r3,48(sp)
 800c444:	d8c00615 	stw	r3,24(sp)
 800c448:	003e7006 	br	800be0c <_dtoa_r+0x102c>
 800c44c:	04400044 	movi	r17,1
 800c450:	003b2006 	br	800b0d4 <_dtoa_r+0x2f4>
 800c454:	000b883a 	mov	r5,zero
 800c458:	003b3d06 	br	800b150 <_dtoa_r+0x370>
 800c45c:	d8800c17 	ldw	r2,48(sp)
 800c460:	d8800615 	stw	r2,24(sp)
 800c464:	003e6906 	br	800be0c <_dtoa_r+0x102c>

0800c468 <__sflush_r>:
 800c468:	2880030b 	ldhu	r2,12(r5)
 800c46c:	defffb04 	addi	sp,sp,-20
 800c470:	dcc00315 	stw	r19,12(sp)
 800c474:	dc400115 	stw	r17,4(sp)
 800c478:	dfc00415 	stw	ra,16(sp)
 800c47c:	dc800215 	stw	r18,8(sp)
 800c480:	dc000015 	stw	r16,0(sp)
 800c484:	10c0020c 	andi	r3,r2,8
 800c488:	2823883a 	mov	r17,r5
 800c48c:	2027883a 	mov	r19,r4
 800c490:	1800311e 	bne	r3,zero,800c558 <__sflush_r+0xf0>
 800c494:	28c00117 	ldw	r3,4(r5)
 800c498:	10820014 	ori	r2,r2,2048
 800c49c:	2880030d 	sth	r2,12(r5)
 800c4a0:	00c04b0e 	bge	zero,r3,800c5d0 <__sflush_r+0x168>
 800c4a4:	8a000a17 	ldw	r8,40(r17)
 800c4a8:	40002326 	beq	r8,zero,800c538 <__sflush_r+0xd0>
 800c4ac:	9c000017 	ldw	r16,0(r19)
 800c4b0:	10c4000c 	andi	r3,r2,4096
 800c4b4:	98000015 	stw	zero,0(r19)
 800c4b8:	18004826 	beq	r3,zero,800c5dc <__sflush_r+0x174>
 800c4bc:	89801417 	ldw	r6,80(r17)
 800c4c0:	10c0010c 	andi	r3,r2,4
 800c4c4:	18000626 	beq	r3,zero,800c4e0 <__sflush_r+0x78>
 800c4c8:	88c00117 	ldw	r3,4(r17)
 800c4cc:	88800c17 	ldw	r2,48(r17)
 800c4d0:	30cdc83a 	sub	r6,r6,r3
 800c4d4:	10000226 	beq	r2,zero,800c4e0 <__sflush_r+0x78>
 800c4d8:	88800f17 	ldw	r2,60(r17)
 800c4dc:	308dc83a 	sub	r6,r6,r2
 800c4e0:	89400717 	ldw	r5,28(r17)
 800c4e4:	000f883a 	mov	r7,zero
 800c4e8:	9809883a 	mov	r4,r19
 800c4ec:	403ee83a 	callr	r8
 800c4f0:	00ffffc4 	movi	r3,-1
 800c4f4:	10c04426 	beq	r2,r3,800c608 <__sflush_r+0x1a0>
 800c4f8:	88c0030b 	ldhu	r3,12(r17)
 800c4fc:	89000417 	ldw	r4,16(r17)
 800c500:	88000115 	stw	zero,4(r17)
 800c504:	197dffcc 	andi	r5,r3,63487
 800c508:	8940030d 	sth	r5,12(r17)
 800c50c:	89000015 	stw	r4,0(r17)
 800c510:	18c4000c 	andi	r3,r3,4096
 800c514:	18002c1e 	bne	r3,zero,800c5c8 <__sflush_r+0x160>
 800c518:	89400c17 	ldw	r5,48(r17)
 800c51c:	9c000015 	stw	r16,0(r19)
 800c520:	28000526 	beq	r5,zero,800c538 <__sflush_r+0xd0>
 800c524:	88801004 	addi	r2,r17,64
 800c528:	28800226 	beq	r5,r2,800c534 <__sflush_r+0xcc>
 800c52c:	9809883a 	mov	r4,r19
 800c530:	800cbe40 	call	800cbe4 <_free_r>
 800c534:	88000c15 	stw	zero,48(r17)
 800c538:	0005883a 	mov	r2,zero
 800c53c:	dfc00417 	ldw	ra,16(sp)
 800c540:	dcc00317 	ldw	r19,12(sp)
 800c544:	dc800217 	ldw	r18,8(sp)
 800c548:	dc400117 	ldw	r17,4(sp)
 800c54c:	dc000017 	ldw	r16,0(sp)
 800c550:	dec00504 	addi	sp,sp,20
 800c554:	f800283a 	ret
 800c558:	2c800417 	ldw	r18,16(r5)
 800c55c:	903ff626 	beq	r18,zero,800c538 <__sflush_r+0xd0>
 800c560:	2c000017 	ldw	r16,0(r5)
 800c564:	108000cc 	andi	r2,r2,3
 800c568:	2c800015 	stw	r18,0(r5)
 800c56c:	84a1c83a 	sub	r16,r16,r18
 800c570:	1000131e 	bne	r2,zero,800c5c0 <__sflush_r+0x158>
 800c574:	28800517 	ldw	r2,20(r5)
 800c578:	88800215 	stw	r2,8(r17)
 800c57c:	04000316 	blt	zero,r16,800c58c <__sflush_r+0x124>
 800c580:	003fed06 	br	800c538 <__sflush_r+0xd0>
 800c584:	90a5883a 	add	r18,r18,r2
 800c588:	043feb0e 	bge	zero,r16,800c538 <__sflush_r+0xd0>
 800c58c:	88800917 	ldw	r2,36(r17)
 800c590:	89400717 	ldw	r5,28(r17)
 800c594:	800f883a 	mov	r7,r16
 800c598:	900d883a 	mov	r6,r18
 800c59c:	9809883a 	mov	r4,r19
 800c5a0:	103ee83a 	callr	r2
 800c5a4:	80a1c83a 	sub	r16,r16,r2
 800c5a8:	00bff616 	blt	zero,r2,800c584 <__sflush_r+0x11c>
 800c5ac:	88c0030b 	ldhu	r3,12(r17)
 800c5b0:	00bfffc4 	movi	r2,-1
 800c5b4:	18c01014 	ori	r3,r3,64
 800c5b8:	88c0030d 	sth	r3,12(r17)
 800c5bc:	003fdf06 	br	800c53c <__sflush_r+0xd4>
 800c5c0:	0005883a 	mov	r2,zero
 800c5c4:	003fec06 	br	800c578 <__sflush_r+0x110>
 800c5c8:	88801415 	stw	r2,80(r17)
 800c5cc:	003fd206 	br	800c518 <__sflush_r+0xb0>
 800c5d0:	28c00f17 	ldw	r3,60(r5)
 800c5d4:	00ffb316 	blt	zero,r3,800c4a4 <__sflush_r+0x3c>
 800c5d8:	003fd706 	br	800c538 <__sflush_r+0xd0>
 800c5dc:	89400717 	ldw	r5,28(r17)
 800c5e0:	000d883a 	mov	r6,zero
 800c5e4:	01c00044 	movi	r7,1
 800c5e8:	9809883a 	mov	r4,r19
 800c5ec:	403ee83a 	callr	r8
 800c5f0:	100d883a 	mov	r6,r2
 800c5f4:	00bfffc4 	movi	r2,-1
 800c5f8:	30801426 	beq	r6,r2,800c64c <__sflush_r+0x1e4>
 800c5fc:	8880030b 	ldhu	r2,12(r17)
 800c600:	8a000a17 	ldw	r8,40(r17)
 800c604:	003fae06 	br	800c4c0 <__sflush_r+0x58>
 800c608:	98c00017 	ldw	r3,0(r19)
 800c60c:	183fba26 	beq	r3,zero,800c4f8 <__sflush_r+0x90>
 800c610:	01000744 	movi	r4,29
 800c614:	19000626 	beq	r3,r4,800c630 <__sflush_r+0x1c8>
 800c618:	01000584 	movi	r4,22
 800c61c:	19000426 	beq	r3,r4,800c630 <__sflush_r+0x1c8>
 800c620:	88c0030b 	ldhu	r3,12(r17)
 800c624:	18c01014 	ori	r3,r3,64
 800c628:	88c0030d 	sth	r3,12(r17)
 800c62c:	003fc306 	br	800c53c <__sflush_r+0xd4>
 800c630:	8880030b 	ldhu	r2,12(r17)
 800c634:	88c00417 	ldw	r3,16(r17)
 800c638:	88000115 	stw	zero,4(r17)
 800c63c:	10bdffcc 	andi	r2,r2,63487
 800c640:	8880030d 	sth	r2,12(r17)
 800c644:	88c00015 	stw	r3,0(r17)
 800c648:	003fb306 	br	800c518 <__sflush_r+0xb0>
 800c64c:	98800017 	ldw	r2,0(r19)
 800c650:	103fea26 	beq	r2,zero,800c5fc <__sflush_r+0x194>
 800c654:	00c00744 	movi	r3,29
 800c658:	10c00226 	beq	r2,r3,800c664 <__sflush_r+0x1fc>
 800c65c:	00c00584 	movi	r3,22
 800c660:	10c0031e 	bne	r2,r3,800c670 <__sflush_r+0x208>
 800c664:	9c000015 	stw	r16,0(r19)
 800c668:	0005883a 	mov	r2,zero
 800c66c:	003fb306 	br	800c53c <__sflush_r+0xd4>
 800c670:	88c0030b 	ldhu	r3,12(r17)
 800c674:	3005883a 	mov	r2,r6
 800c678:	18c01014 	ori	r3,r3,64
 800c67c:	88c0030d 	sth	r3,12(r17)
 800c680:	003fae06 	br	800c53c <__sflush_r+0xd4>

0800c684 <_fflush_r>:
 800c684:	defffd04 	addi	sp,sp,-12
 800c688:	dc000115 	stw	r16,4(sp)
 800c68c:	dfc00215 	stw	ra,8(sp)
 800c690:	2021883a 	mov	r16,r4
 800c694:	20000226 	beq	r4,zero,800c6a0 <_fflush_r+0x1c>
 800c698:	20800e17 	ldw	r2,56(r4)
 800c69c:	10000c26 	beq	r2,zero,800c6d0 <_fflush_r+0x4c>
 800c6a0:	2880030f 	ldh	r2,12(r5)
 800c6a4:	1000051e 	bne	r2,zero,800c6bc <_fflush_r+0x38>
 800c6a8:	0005883a 	mov	r2,zero
 800c6ac:	dfc00217 	ldw	ra,8(sp)
 800c6b0:	dc000117 	ldw	r16,4(sp)
 800c6b4:	dec00304 	addi	sp,sp,12
 800c6b8:	f800283a 	ret
 800c6bc:	8009883a 	mov	r4,r16
 800c6c0:	dfc00217 	ldw	ra,8(sp)
 800c6c4:	dc000117 	ldw	r16,4(sp)
 800c6c8:	dec00304 	addi	sp,sp,12
 800c6cc:	800c4681 	jmpi	800c468 <__sflush_r>
 800c6d0:	d9400015 	stw	r5,0(sp)
 800c6d4:	800ca700 	call	800ca70 <__sinit>
 800c6d8:	d9400017 	ldw	r5,0(sp)
 800c6dc:	003ff006 	br	800c6a0 <_fflush_r+0x1c>

0800c6e0 <fflush>:
 800c6e0:	20000526 	beq	r4,zero,800c6f8 <fflush+0x18>
 800c6e4:	008200b4 	movhi	r2,2050
 800c6e8:	10a85804 	addi	r2,r2,-24224
 800c6ec:	200b883a 	mov	r5,r4
 800c6f0:	11000017 	ldw	r4,0(r2)
 800c6f4:	800c6841 	jmpi	800c684 <_fflush_r>
 800c6f8:	008200b4 	movhi	r2,2050
 800c6fc:	10a85704 	addi	r2,r2,-24228
 800c700:	11000017 	ldw	r4,0(r2)
 800c704:	01420074 	movhi	r5,2049
 800c708:	2971a104 	addi	r5,r5,-14716
 800c70c:	800d4801 	jmpi	800d480 <_fwalk_reent>

0800c710 <__fp_unlock>:
 800c710:	0005883a 	mov	r2,zero
 800c714:	f800283a 	ret

0800c718 <_cleanup_r>:
 800c718:	01420074 	movhi	r5,2049
 800c71c:	2945b204 	addi	r5,r5,5832
 800c720:	800d4801 	jmpi	800d480 <_fwalk_reent>

0800c724 <__sinit.part.1>:
 800c724:	defff704 	addi	sp,sp,-36
 800c728:	00c20074 	movhi	r3,2049
 800c72c:	dfc00815 	stw	ra,32(sp)
 800c730:	ddc00715 	stw	r23,28(sp)
 800c734:	dd800615 	stw	r22,24(sp)
 800c738:	dd400515 	stw	r21,20(sp)
 800c73c:	dd000415 	stw	r20,16(sp)
 800c740:	dcc00315 	stw	r19,12(sp)
 800c744:	dc800215 	stw	r18,8(sp)
 800c748:	dc400115 	stw	r17,4(sp)
 800c74c:	dc000015 	stw	r16,0(sp)
 800c750:	18f1c604 	addi	r3,r3,-14568
 800c754:	24000117 	ldw	r16,4(r4)
 800c758:	20c00f15 	stw	r3,60(r4)
 800c75c:	2080bb04 	addi	r2,r4,748
 800c760:	00c000c4 	movi	r3,3
 800c764:	20c0b915 	stw	r3,740(r4)
 800c768:	2080ba15 	stw	r2,744(r4)
 800c76c:	2000b815 	stw	zero,736(r4)
 800c770:	05c00204 	movi	r23,8
 800c774:	00800104 	movi	r2,4
 800c778:	2025883a 	mov	r18,r4
 800c77c:	b80d883a 	mov	r6,r23
 800c780:	81001704 	addi	r4,r16,92
 800c784:	000b883a 	mov	r5,zero
 800c788:	80000015 	stw	zero,0(r16)
 800c78c:	80000115 	stw	zero,4(r16)
 800c790:	80000215 	stw	zero,8(r16)
 800c794:	8080030d 	sth	r2,12(r16)
 800c798:	80001915 	stw	zero,100(r16)
 800c79c:	8000038d 	sth	zero,14(r16)
 800c7a0:	80000415 	stw	zero,16(r16)
 800c7a4:	80000515 	stw	zero,20(r16)
 800c7a8:	80000615 	stw	zero,24(r16)
 800c7ac:	80080ec0 	call	80080ec <memset>
 800c7b0:	05820074 	movhi	r22,2049
 800c7b4:	94400217 	ldw	r17,8(r18)
 800c7b8:	05420074 	movhi	r21,2049
 800c7bc:	05020074 	movhi	r20,2049
 800c7c0:	04c20074 	movhi	r19,2049
 800c7c4:	b5beb404 	addi	r22,r22,-1328
 800c7c8:	ad7ecb04 	addi	r21,r21,-1236
 800c7cc:	a53eea04 	addi	r20,r20,-1112
 800c7d0:	9cff0104 	addi	r19,r19,-1020
 800c7d4:	85800815 	stw	r22,32(r16)
 800c7d8:	85400915 	stw	r21,36(r16)
 800c7dc:	85000a15 	stw	r20,40(r16)
 800c7e0:	84c00b15 	stw	r19,44(r16)
 800c7e4:	84000715 	stw	r16,28(r16)
 800c7e8:	00800284 	movi	r2,10
 800c7ec:	8880030d 	sth	r2,12(r17)
 800c7f0:	00800044 	movi	r2,1
 800c7f4:	b80d883a 	mov	r6,r23
 800c7f8:	89001704 	addi	r4,r17,92
 800c7fc:	000b883a 	mov	r5,zero
 800c800:	88000015 	stw	zero,0(r17)
 800c804:	88000115 	stw	zero,4(r17)
 800c808:	88000215 	stw	zero,8(r17)
 800c80c:	88001915 	stw	zero,100(r17)
 800c810:	8880038d 	sth	r2,14(r17)
 800c814:	88000415 	stw	zero,16(r17)
 800c818:	88000515 	stw	zero,20(r17)
 800c81c:	88000615 	stw	zero,24(r17)
 800c820:	80080ec0 	call	80080ec <memset>
 800c824:	94000317 	ldw	r16,12(r18)
 800c828:	00800484 	movi	r2,18
 800c82c:	8c400715 	stw	r17,28(r17)
 800c830:	8d800815 	stw	r22,32(r17)
 800c834:	8d400915 	stw	r21,36(r17)
 800c838:	8d000a15 	stw	r20,40(r17)
 800c83c:	8cc00b15 	stw	r19,44(r17)
 800c840:	8080030d 	sth	r2,12(r16)
 800c844:	00800084 	movi	r2,2
 800c848:	80000015 	stw	zero,0(r16)
 800c84c:	80000115 	stw	zero,4(r16)
 800c850:	80000215 	stw	zero,8(r16)
 800c854:	80001915 	stw	zero,100(r16)
 800c858:	8080038d 	sth	r2,14(r16)
 800c85c:	80000415 	stw	zero,16(r16)
 800c860:	80000515 	stw	zero,20(r16)
 800c864:	80000615 	stw	zero,24(r16)
 800c868:	b80d883a 	mov	r6,r23
 800c86c:	000b883a 	mov	r5,zero
 800c870:	81001704 	addi	r4,r16,92
 800c874:	80080ec0 	call	80080ec <memset>
 800c878:	00800044 	movi	r2,1
 800c87c:	84000715 	stw	r16,28(r16)
 800c880:	85800815 	stw	r22,32(r16)
 800c884:	85400915 	stw	r21,36(r16)
 800c888:	85000a15 	stw	r20,40(r16)
 800c88c:	84c00b15 	stw	r19,44(r16)
 800c890:	90800e15 	stw	r2,56(r18)
 800c894:	dfc00817 	ldw	ra,32(sp)
 800c898:	ddc00717 	ldw	r23,28(sp)
 800c89c:	dd800617 	ldw	r22,24(sp)
 800c8a0:	dd400517 	ldw	r21,20(sp)
 800c8a4:	dd000417 	ldw	r20,16(sp)
 800c8a8:	dcc00317 	ldw	r19,12(sp)
 800c8ac:	dc800217 	ldw	r18,8(sp)
 800c8b0:	dc400117 	ldw	r17,4(sp)
 800c8b4:	dc000017 	ldw	r16,0(sp)
 800c8b8:	dec00904 	addi	sp,sp,36
 800c8bc:	f800283a 	ret

0800c8c0 <__fp_lock>:
 800c8c0:	0005883a 	mov	r2,zero
 800c8c4:	f800283a 	ret

0800c8c8 <__sfmoreglue>:
 800c8c8:	defffc04 	addi	sp,sp,-16
 800c8cc:	dc800215 	stw	r18,8(sp)
 800c8d0:	2825883a 	mov	r18,r5
 800c8d4:	dc000015 	stw	r16,0(sp)
 800c8d8:	01401a04 	movi	r5,104
 800c8dc:	2021883a 	mov	r16,r4
 800c8e0:	913fffc4 	addi	r4,r18,-1
 800c8e4:	dfc00315 	stw	ra,12(sp)
 800c8e8:	dc400115 	stw	r17,4(sp)
 800c8ec:	8007e400 	call	8007e40 <__mulsi3>
 800c8f0:	8009883a 	mov	r4,r16
 800c8f4:	11401d04 	addi	r5,r2,116
 800c8f8:	1023883a 	mov	r17,r2
 800c8fc:	800d8380 	call	800d838 <_malloc_r>
 800c900:	1021883a 	mov	r16,r2
 800c904:	10000726 	beq	r2,zero,800c924 <__sfmoreglue+0x5c>
 800c908:	11000304 	addi	r4,r2,12
 800c90c:	10000015 	stw	zero,0(r2)
 800c910:	14800115 	stw	r18,4(r2)
 800c914:	11000215 	stw	r4,8(r2)
 800c918:	89801a04 	addi	r6,r17,104
 800c91c:	000b883a 	mov	r5,zero
 800c920:	80080ec0 	call	80080ec <memset>
 800c924:	8005883a 	mov	r2,r16
 800c928:	dfc00317 	ldw	ra,12(sp)
 800c92c:	dc800217 	ldw	r18,8(sp)
 800c930:	dc400117 	ldw	r17,4(sp)
 800c934:	dc000017 	ldw	r16,0(sp)
 800c938:	dec00404 	addi	sp,sp,16
 800c93c:	f800283a 	ret

0800c940 <__sfp>:
 800c940:	defffb04 	addi	sp,sp,-20
 800c944:	dc000015 	stw	r16,0(sp)
 800c948:	040200b4 	movhi	r16,2050
 800c94c:	84285704 	addi	r16,r16,-24228
 800c950:	dcc00315 	stw	r19,12(sp)
 800c954:	2027883a 	mov	r19,r4
 800c958:	81000017 	ldw	r4,0(r16)
 800c95c:	dfc00415 	stw	ra,16(sp)
 800c960:	dc800215 	stw	r18,8(sp)
 800c964:	20800e17 	ldw	r2,56(r4)
 800c968:	dc400115 	stw	r17,4(sp)
 800c96c:	1000021e 	bne	r2,zero,800c978 <__sfp+0x38>
 800c970:	800c7240 	call	800c724 <__sinit.part.1>
 800c974:	81000017 	ldw	r4,0(r16)
 800c978:	2480b804 	addi	r18,r4,736
 800c97c:	047fffc4 	movi	r17,-1
 800c980:	91000117 	ldw	r4,4(r18)
 800c984:	94000217 	ldw	r16,8(r18)
 800c988:	213fffc4 	addi	r4,r4,-1
 800c98c:	20000a16 	blt	r4,zero,800c9b8 <__sfp+0x78>
 800c990:	8080030f 	ldh	r2,12(r16)
 800c994:	10000c26 	beq	r2,zero,800c9c8 <__sfp+0x88>
 800c998:	80c01d04 	addi	r3,r16,116
 800c99c:	00000206 	br	800c9a8 <__sfp+0x68>
 800c9a0:	18bfe60f 	ldh	r2,-104(r3)
 800c9a4:	10000826 	beq	r2,zero,800c9c8 <__sfp+0x88>
 800c9a8:	213fffc4 	addi	r4,r4,-1
 800c9ac:	1c3ffd04 	addi	r16,r3,-12
 800c9b0:	18c01a04 	addi	r3,r3,104
 800c9b4:	247ffa1e 	bne	r4,r17,800c9a0 <__sfp+0x60>
 800c9b8:	90800017 	ldw	r2,0(r18)
 800c9bc:	10001d26 	beq	r2,zero,800ca34 <__sfp+0xf4>
 800c9c0:	1025883a 	mov	r18,r2
 800c9c4:	003fee06 	br	800c980 <__sfp+0x40>
 800c9c8:	00bfffc4 	movi	r2,-1
 800c9cc:	8080038d 	sth	r2,14(r16)
 800c9d0:	00800044 	movi	r2,1
 800c9d4:	8080030d 	sth	r2,12(r16)
 800c9d8:	80001915 	stw	zero,100(r16)
 800c9dc:	80000015 	stw	zero,0(r16)
 800c9e0:	80000215 	stw	zero,8(r16)
 800c9e4:	80000115 	stw	zero,4(r16)
 800c9e8:	80000415 	stw	zero,16(r16)
 800c9ec:	80000515 	stw	zero,20(r16)
 800c9f0:	80000615 	stw	zero,24(r16)
 800c9f4:	01800204 	movi	r6,8
 800c9f8:	000b883a 	mov	r5,zero
 800c9fc:	81001704 	addi	r4,r16,92
 800ca00:	80080ec0 	call	80080ec <memset>
 800ca04:	8005883a 	mov	r2,r16
 800ca08:	80000c15 	stw	zero,48(r16)
 800ca0c:	80000d15 	stw	zero,52(r16)
 800ca10:	80001115 	stw	zero,68(r16)
 800ca14:	80001215 	stw	zero,72(r16)
 800ca18:	dfc00417 	ldw	ra,16(sp)
 800ca1c:	dcc00317 	ldw	r19,12(sp)
 800ca20:	dc800217 	ldw	r18,8(sp)
 800ca24:	dc400117 	ldw	r17,4(sp)
 800ca28:	dc000017 	ldw	r16,0(sp)
 800ca2c:	dec00504 	addi	sp,sp,20
 800ca30:	f800283a 	ret
 800ca34:	01400104 	movi	r5,4
 800ca38:	9809883a 	mov	r4,r19
 800ca3c:	800c8c80 	call	800c8c8 <__sfmoreglue>
 800ca40:	90800015 	stw	r2,0(r18)
 800ca44:	103fde1e 	bne	r2,zero,800c9c0 <__sfp+0x80>
 800ca48:	00800304 	movi	r2,12
 800ca4c:	98800015 	stw	r2,0(r19)
 800ca50:	0005883a 	mov	r2,zero
 800ca54:	003ff006 	br	800ca18 <__sfp+0xd8>

0800ca58 <_cleanup>:
 800ca58:	008200b4 	movhi	r2,2050
 800ca5c:	10a85704 	addi	r2,r2,-24228
 800ca60:	11000017 	ldw	r4,0(r2)
 800ca64:	01420074 	movhi	r5,2049
 800ca68:	2945b204 	addi	r5,r5,5832
 800ca6c:	800d4801 	jmpi	800d480 <_fwalk_reent>

0800ca70 <__sinit>:
 800ca70:	20800e17 	ldw	r2,56(r4)
 800ca74:	10000126 	beq	r2,zero,800ca7c <__sinit+0xc>
 800ca78:	f800283a 	ret
 800ca7c:	800c7241 	jmpi	800c724 <__sinit.part.1>

0800ca80 <__sfp_lock_acquire>:
 800ca80:	f800283a 	ret

0800ca84 <__sfp_lock_release>:
 800ca84:	f800283a 	ret

0800ca88 <__sinit_lock_acquire>:
 800ca88:	f800283a 	ret

0800ca8c <__sinit_lock_release>:
 800ca8c:	f800283a 	ret

0800ca90 <__fp_lock_all>:
 800ca90:	008200b4 	movhi	r2,2050
 800ca94:	10a85804 	addi	r2,r2,-24224
 800ca98:	11000017 	ldw	r4,0(r2)
 800ca9c:	01420074 	movhi	r5,2049
 800caa0:	29723004 	addi	r5,r5,-14144
 800caa4:	800d3bc1 	jmpi	800d3bc <_fwalk>

0800caa8 <__fp_unlock_all>:
 800caa8:	008200b4 	movhi	r2,2050
 800caac:	10a85804 	addi	r2,r2,-24224
 800cab0:	11000017 	ldw	r4,0(r2)
 800cab4:	01420074 	movhi	r5,2049
 800cab8:	2971c404 	addi	r5,r5,-14576
 800cabc:	800d3bc1 	jmpi	800d3bc <_fwalk>

0800cac0 <_malloc_trim_r>:
 800cac0:	defffb04 	addi	sp,sp,-20
 800cac4:	dcc00315 	stw	r19,12(sp)
 800cac8:	04c200b4 	movhi	r19,2050
 800cacc:	dc800215 	stw	r18,8(sp)
 800cad0:	dc400115 	stw	r17,4(sp)
 800cad4:	dc000015 	stw	r16,0(sp)
 800cad8:	dfc00415 	stw	ra,16(sp)
 800cadc:	2821883a 	mov	r16,r5
 800cae0:	9ce2c404 	addi	r19,r19,-29936
 800cae4:	2025883a 	mov	r18,r4
 800cae8:	80159200 	call	8015920 <__malloc_lock>
 800caec:	98800217 	ldw	r2,8(r19)
 800caf0:	14400117 	ldw	r17,4(r2)
 800caf4:	00bfff04 	movi	r2,-4
 800caf8:	88a2703a 	and	r17,r17,r2
 800cafc:	8c21c83a 	sub	r16,r17,r16
 800cb00:	8403fbc4 	addi	r16,r16,4079
 800cb04:	8020d33a 	srli	r16,r16,12
 800cb08:	0083ffc4 	movi	r2,4095
 800cb0c:	843fffc4 	addi	r16,r16,-1
 800cb10:	8020933a 	slli	r16,r16,12
 800cb14:	1400060e 	bge	r2,r16,800cb30 <_malloc_trim_r+0x70>
 800cb18:	000b883a 	mov	r5,zero
 800cb1c:	9009883a 	mov	r4,r18
 800cb20:	800fa7c0 	call	800fa7c <_sbrk_r>
 800cb24:	98c00217 	ldw	r3,8(r19)
 800cb28:	1c47883a 	add	r3,r3,r17
 800cb2c:	10c00a26 	beq	r2,r3,800cb58 <_malloc_trim_r+0x98>
 800cb30:	9009883a 	mov	r4,r18
 800cb34:	80159440 	call	8015944 <__malloc_unlock>
 800cb38:	0005883a 	mov	r2,zero
 800cb3c:	dfc00417 	ldw	ra,16(sp)
 800cb40:	dcc00317 	ldw	r19,12(sp)
 800cb44:	dc800217 	ldw	r18,8(sp)
 800cb48:	dc400117 	ldw	r17,4(sp)
 800cb4c:	dc000017 	ldw	r16,0(sp)
 800cb50:	dec00504 	addi	sp,sp,20
 800cb54:	f800283a 	ret
 800cb58:	040bc83a 	sub	r5,zero,r16
 800cb5c:	9009883a 	mov	r4,r18
 800cb60:	800fa7c0 	call	800fa7c <_sbrk_r>
 800cb64:	00ffffc4 	movi	r3,-1
 800cb68:	10c00d26 	beq	r2,r3,800cba0 <_malloc_trim_r+0xe0>
 800cb6c:	00c200b4 	movhi	r3,2050
 800cb70:	18f04f04 	addi	r3,r3,-16068
 800cb74:	18800017 	ldw	r2,0(r3)
 800cb78:	99000217 	ldw	r4,8(r19)
 800cb7c:	8c23c83a 	sub	r17,r17,r16
 800cb80:	8c400054 	ori	r17,r17,1
 800cb84:	1421c83a 	sub	r16,r2,r16
 800cb88:	24400115 	stw	r17,4(r4)
 800cb8c:	9009883a 	mov	r4,r18
 800cb90:	1c000015 	stw	r16,0(r3)
 800cb94:	80159440 	call	8015944 <__malloc_unlock>
 800cb98:	00800044 	movi	r2,1
 800cb9c:	003fe706 	br	800cb3c <_malloc_trim_r+0x7c>
 800cba0:	000b883a 	mov	r5,zero
 800cba4:	9009883a 	mov	r4,r18
 800cba8:	800fa7c0 	call	800fa7c <_sbrk_r>
 800cbac:	99000217 	ldw	r4,8(r19)
 800cbb0:	014003c4 	movi	r5,15
 800cbb4:	1107c83a 	sub	r3,r2,r4
 800cbb8:	28ffdd0e 	bge	r5,r3,800cb30 <_malloc_trim_r+0x70>
 800cbbc:	014200b4 	movhi	r5,2050
 800cbc0:	29685a04 	addi	r5,r5,-24216
 800cbc4:	29400017 	ldw	r5,0(r5)
 800cbc8:	18c00054 	ori	r3,r3,1
 800cbcc:	20c00115 	stw	r3,4(r4)
 800cbd0:	00c200b4 	movhi	r3,2050
 800cbd4:	1145c83a 	sub	r2,r2,r5
 800cbd8:	18f04f04 	addi	r3,r3,-16068
 800cbdc:	18800015 	stw	r2,0(r3)
 800cbe0:	003fd306 	br	800cb30 <_malloc_trim_r+0x70>

0800cbe4 <_free_r>:
 800cbe4:	28004126 	beq	r5,zero,800ccec <_free_r+0x108>
 800cbe8:	defffd04 	addi	sp,sp,-12
 800cbec:	dc400115 	stw	r17,4(sp)
 800cbf0:	dc000015 	stw	r16,0(sp)
 800cbf4:	2023883a 	mov	r17,r4
 800cbf8:	2821883a 	mov	r16,r5
 800cbfc:	dfc00215 	stw	ra,8(sp)
 800cc00:	80159200 	call	8015920 <__malloc_lock>
 800cc04:	81ffff17 	ldw	r7,-4(r16)
 800cc08:	00bfff84 	movi	r2,-2
 800cc0c:	010200b4 	movhi	r4,2050
 800cc10:	81bffe04 	addi	r6,r16,-8
 800cc14:	3884703a 	and	r2,r7,r2
 800cc18:	2122c404 	addi	r4,r4,-29936
 800cc1c:	308b883a 	add	r5,r6,r2
 800cc20:	2a400117 	ldw	r9,4(r5)
 800cc24:	22000217 	ldw	r8,8(r4)
 800cc28:	00ffff04 	movi	r3,-4
 800cc2c:	48c6703a 	and	r3,r9,r3
 800cc30:	2a005726 	beq	r5,r8,800cd90 <_free_r+0x1ac>
 800cc34:	28c00115 	stw	r3,4(r5)
 800cc38:	39c0004c 	andi	r7,r7,1
 800cc3c:	3800091e 	bne	r7,zero,800cc64 <_free_r+0x80>
 800cc40:	823ffe17 	ldw	r8,-8(r16)
 800cc44:	22400204 	addi	r9,r4,8
 800cc48:	320dc83a 	sub	r6,r6,r8
 800cc4c:	31c00217 	ldw	r7,8(r6)
 800cc50:	1205883a 	add	r2,r2,r8
 800cc54:	3a406526 	beq	r7,r9,800cdec <_free_r+0x208>
 800cc58:	32000317 	ldw	r8,12(r6)
 800cc5c:	3a000315 	stw	r8,12(r7)
 800cc60:	41c00215 	stw	r7,8(r8)
 800cc64:	28cf883a 	add	r7,r5,r3
 800cc68:	39c00117 	ldw	r7,4(r7)
 800cc6c:	39c0004c 	andi	r7,r7,1
 800cc70:	38003a26 	beq	r7,zero,800cd5c <_free_r+0x178>
 800cc74:	10c00054 	ori	r3,r2,1
 800cc78:	30c00115 	stw	r3,4(r6)
 800cc7c:	3087883a 	add	r3,r6,r2
 800cc80:	18800015 	stw	r2,0(r3)
 800cc84:	00c07fc4 	movi	r3,511
 800cc88:	18801936 	bltu	r3,r2,800ccf0 <_free_r+0x10c>
 800cc8c:	1004d0fa 	srli	r2,r2,3
 800cc90:	01c00044 	movi	r7,1
 800cc94:	21400117 	ldw	r5,4(r4)
 800cc98:	10c00044 	addi	r3,r2,1
 800cc9c:	18c7883a 	add	r3,r3,r3
 800cca0:	1005d0ba 	srai	r2,r2,2
 800cca4:	18c7883a 	add	r3,r3,r3
 800cca8:	18c7883a 	add	r3,r3,r3
 800ccac:	1907883a 	add	r3,r3,r4
 800ccb0:	3884983a 	sll	r2,r7,r2
 800ccb4:	19c00017 	ldw	r7,0(r3)
 800ccb8:	1a3ffe04 	addi	r8,r3,-8
 800ccbc:	1144b03a 	or	r2,r2,r5
 800ccc0:	32000315 	stw	r8,12(r6)
 800ccc4:	31c00215 	stw	r7,8(r6)
 800ccc8:	20800115 	stw	r2,4(r4)
 800cccc:	19800015 	stw	r6,0(r3)
 800ccd0:	39800315 	stw	r6,12(r7)
 800ccd4:	8809883a 	mov	r4,r17
 800ccd8:	dfc00217 	ldw	ra,8(sp)
 800ccdc:	dc400117 	ldw	r17,4(sp)
 800cce0:	dc000017 	ldw	r16,0(sp)
 800cce4:	dec00304 	addi	sp,sp,12
 800cce8:	80159441 	jmpi	8015944 <__malloc_unlock>
 800ccec:	f800283a 	ret
 800ccf0:	100ad27a 	srli	r5,r2,9
 800ccf4:	00c00104 	movi	r3,4
 800ccf8:	19404a36 	bltu	r3,r5,800ce24 <_free_r+0x240>
 800ccfc:	100ad1ba 	srli	r5,r2,6
 800cd00:	28c00e44 	addi	r3,r5,57
 800cd04:	18c7883a 	add	r3,r3,r3
 800cd08:	29400e04 	addi	r5,r5,56
 800cd0c:	18c7883a 	add	r3,r3,r3
 800cd10:	18c7883a 	add	r3,r3,r3
 800cd14:	1909883a 	add	r4,r3,r4
 800cd18:	20c00017 	ldw	r3,0(r4)
 800cd1c:	01c200b4 	movhi	r7,2050
 800cd20:	213ffe04 	addi	r4,r4,-8
 800cd24:	39e2c404 	addi	r7,r7,-29936
 800cd28:	20c04426 	beq	r4,r3,800ce3c <_free_r+0x258>
 800cd2c:	01ffff04 	movi	r7,-4
 800cd30:	19400117 	ldw	r5,4(r3)
 800cd34:	29ca703a 	and	r5,r5,r7
 800cd38:	1140022e 	bgeu	r2,r5,800cd44 <_free_r+0x160>
 800cd3c:	18c00217 	ldw	r3,8(r3)
 800cd40:	20fffb1e 	bne	r4,r3,800cd30 <_free_r+0x14c>
 800cd44:	19000317 	ldw	r4,12(r3)
 800cd48:	31000315 	stw	r4,12(r6)
 800cd4c:	30c00215 	stw	r3,8(r6)
 800cd50:	21800215 	stw	r6,8(r4)
 800cd54:	19800315 	stw	r6,12(r3)
 800cd58:	003fde06 	br	800ccd4 <_free_r+0xf0>
 800cd5c:	29c00217 	ldw	r7,8(r5)
 800cd60:	10c5883a 	add	r2,r2,r3
 800cd64:	00c200b4 	movhi	r3,2050
 800cd68:	18e2c604 	addi	r3,r3,-29928
 800cd6c:	38c03b26 	beq	r7,r3,800ce5c <_free_r+0x278>
 800cd70:	2a000317 	ldw	r8,12(r5)
 800cd74:	11400054 	ori	r5,r2,1
 800cd78:	3087883a 	add	r3,r6,r2
 800cd7c:	3a000315 	stw	r8,12(r7)
 800cd80:	41c00215 	stw	r7,8(r8)
 800cd84:	31400115 	stw	r5,4(r6)
 800cd88:	18800015 	stw	r2,0(r3)
 800cd8c:	003fbd06 	br	800cc84 <_free_r+0xa0>
 800cd90:	39c0004c 	andi	r7,r7,1
 800cd94:	10c5883a 	add	r2,r2,r3
 800cd98:	3800071e 	bne	r7,zero,800cdb8 <_free_r+0x1d4>
 800cd9c:	81fffe17 	ldw	r7,-8(r16)
 800cda0:	31cdc83a 	sub	r6,r6,r7
 800cda4:	30c00317 	ldw	r3,12(r6)
 800cda8:	31400217 	ldw	r5,8(r6)
 800cdac:	11c5883a 	add	r2,r2,r7
 800cdb0:	28c00315 	stw	r3,12(r5)
 800cdb4:	19400215 	stw	r5,8(r3)
 800cdb8:	10c00054 	ori	r3,r2,1
 800cdbc:	30c00115 	stw	r3,4(r6)
 800cdc0:	00c200b4 	movhi	r3,2050
 800cdc4:	18e85b04 	addi	r3,r3,-24212
 800cdc8:	18c00017 	ldw	r3,0(r3)
 800cdcc:	21800215 	stw	r6,8(r4)
 800cdd0:	10ffc036 	bltu	r2,r3,800ccd4 <_free_r+0xf0>
 800cdd4:	008200b4 	movhi	r2,2050
 800cdd8:	10af7a04 	addi	r2,r2,-16920
 800cddc:	11400017 	ldw	r5,0(r2)
 800cde0:	8809883a 	mov	r4,r17
 800cde4:	800cac00 	call	800cac0 <_malloc_trim_r>
 800cde8:	003fba06 	br	800ccd4 <_free_r+0xf0>
 800cdec:	28c9883a 	add	r4,r5,r3
 800cdf0:	21000117 	ldw	r4,4(r4)
 800cdf4:	2100004c 	andi	r4,r4,1
 800cdf8:	2000391e 	bne	r4,zero,800cee0 <_free_r+0x2fc>
 800cdfc:	29c00217 	ldw	r7,8(r5)
 800ce00:	29000317 	ldw	r4,12(r5)
 800ce04:	1885883a 	add	r2,r3,r2
 800ce08:	10c00054 	ori	r3,r2,1
 800ce0c:	39000315 	stw	r4,12(r7)
 800ce10:	21c00215 	stw	r7,8(r4)
 800ce14:	30c00115 	stw	r3,4(r6)
 800ce18:	308d883a 	add	r6,r6,r2
 800ce1c:	30800015 	stw	r2,0(r6)
 800ce20:	003fac06 	br	800ccd4 <_free_r+0xf0>
 800ce24:	00c00504 	movi	r3,20
 800ce28:	19401536 	bltu	r3,r5,800ce80 <_free_r+0x29c>
 800ce2c:	28c01704 	addi	r3,r5,92
 800ce30:	18c7883a 	add	r3,r3,r3
 800ce34:	294016c4 	addi	r5,r5,91
 800ce38:	003fb406 	br	800cd0c <_free_r+0x128>
 800ce3c:	280bd0ba 	srai	r5,r5,2
 800ce40:	00c00044 	movi	r3,1
 800ce44:	38800117 	ldw	r2,4(r7)
 800ce48:	194a983a 	sll	r5,r3,r5
 800ce4c:	2007883a 	mov	r3,r4
 800ce50:	2884b03a 	or	r2,r5,r2
 800ce54:	38800115 	stw	r2,4(r7)
 800ce58:	003fbb06 	br	800cd48 <_free_r+0x164>
 800ce5c:	21800515 	stw	r6,20(r4)
 800ce60:	21800415 	stw	r6,16(r4)
 800ce64:	10c00054 	ori	r3,r2,1
 800ce68:	31c00315 	stw	r7,12(r6)
 800ce6c:	31c00215 	stw	r7,8(r6)
 800ce70:	30c00115 	stw	r3,4(r6)
 800ce74:	308d883a 	add	r6,r6,r2
 800ce78:	30800015 	stw	r2,0(r6)
 800ce7c:	003f9506 	br	800ccd4 <_free_r+0xf0>
 800ce80:	00c01504 	movi	r3,84
 800ce84:	19400536 	bltu	r3,r5,800ce9c <_free_r+0x2b8>
 800ce88:	100ad33a 	srli	r5,r2,12
 800ce8c:	28c01bc4 	addi	r3,r5,111
 800ce90:	18c7883a 	add	r3,r3,r3
 800ce94:	29401b84 	addi	r5,r5,110
 800ce98:	003f9c06 	br	800cd0c <_free_r+0x128>
 800ce9c:	00c05504 	movi	r3,340
 800cea0:	19400536 	bltu	r3,r5,800ceb8 <_free_r+0x2d4>
 800cea4:	100ad3fa 	srli	r5,r2,15
 800cea8:	28c01e04 	addi	r3,r5,120
 800ceac:	18c7883a 	add	r3,r3,r3
 800ceb0:	29401dc4 	addi	r5,r5,119
 800ceb4:	003f9506 	br	800cd0c <_free_r+0x128>
 800ceb8:	00c15504 	movi	r3,1364
 800cebc:	19400536 	bltu	r3,r5,800ced4 <_free_r+0x2f0>
 800cec0:	100ad4ba 	srli	r5,r2,18
 800cec4:	28c01f44 	addi	r3,r5,125
 800cec8:	18c7883a 	add	r3,r3,r3
 800cecc:	29401f04 	addi	r5,r5,124
 800ced0:	003f8e06 	br	800cd0c <_free_r+0x128>
 800ced4:	00c03f84 	movi	r3,254
 800ced8:	01401f84 	movi	r5,126
 800cedc:	003f8b06 	br	800cd0c <_free_r+0x128>
 800cee0:	10c00054 	ori	r3,r2,1
 800cee4:	30c00115 	stw	r3,4(r6)
 800cee8:	308d883a 	add	r6,r6,r2
 800ceec:	30800015 	stw	r2,0(r6)
 800cef0:	003f7806 	br	800ccd4 <_free_r+0xf0>

0800cef4 <__sfvwrite_r>:
 800cef4:	30800217 	ldw	r2,8(r6)
 800cef8:	10006726 	beq	r2,zero,800d098 <__sfvwrite_r+0x1a4>
 800cefc:	28c0030b 	ldhu	r3,12(r5)
 800cf00:	defff404 	addi	sp,sp,-48
 800cf04:	dd400715 	stw	r21,28(sp)
 800cf08:	dd000615 	stw	r20,24(sp)
 800cf0c:	dc000215 	stw	r16,8(sp)
 800cf10:	dfc00b15 	stw	ra,44(sp)
 800cf14:	df000a15 	stw	fp,40(sp)
 800cf18:	ddc00915 	stw	r23,36(sp)
 800cf1c:	dd800815 	stw	r22,32(sp)
 800cf20:	dcc00515 	stw	r19,20(sp)
 800cf24:	dc800415 	stw	r18,16(sp)
 800cf28:	dc400315 	stw	r17,12(sp)
 800cf2c:	1880020c 	andi	r2,r3,8
 800cf30:	2821883a 	mov	r16,r5
 800cf34:	202b883a 	mov	r21,r4
 800cf38:	3029883a 	mov	r20,r6
 800cf3c:	10002726 	beq	r2,zero,800cfdc <__sfvwrite_r+0xe8>
 800cf40:	28800417 	ldw	r2,16(r5)
 800cf44:	10002526 	beq	r2,zero,800cfdc <__sfvwrite_r+0xe8>
 800cf48:	1880008c 	andi	r2,r3,2
 800cf4c:	a4400017 	ldw	r17,0(r20)
 800cf50:	10002a26 	beq	r2,zero,800cffc <__sfvwrite_r+0x108>
 800cf54:	05a00034 	movhi	r22,32768
 800cf58:	0027883a 	mov	r19,zero
 800cf5c:	0025883a 	mov	r18,zero
 800cf60:	b5bf0004 	addi	r22,r22,-1024
 800cf64:	980d883a 	mov	r6,r19
 800cf68:	a809883a 	mov	r4,r21
 800cf6c:	90004626 	beq	r18,zero,800d088 <__sfvwrite_r+0x194>
 800cf70:	900f883a 	mov	r7,r18
 800cf74:	b480022e 	bgeu	r22,r18,800cf80 <__sfvwrite_r+0x8c>
 800cf78:	01e00034 	movhi	r7,32768
 800cf7c:	39ff0004 	addi	r7,r7,-1024
 800cf80:	80800917 	ldw	r2,36(r16)
 800cf84:	81400717 	ldw	r5,28(r16)
 800cf88:	103ee83a 	callr	r2
 800cf8c:	00805a0e 	bge	zero,r2,800d0f8 <__sfvwrite_r+0x204>
 800cf90:	a0c00217 	ldw	r3,8(r20)
 800cf94:	98a7883a 	add	r19,r19,r2
 800cf98:	90a5c83a 	sub	r18,r18,r2
 800cf9c:	1885c83a 	sub	r2,r3,r2
 800cfa0:	a0800215 	stw	r2,8(r20)
 800cfa4:	103fef1e 	bne	r2,zero,800cf64 <__sfvwrite_r+0x70>
 800cfa8:	0005883a 	mov	r2,zero
 800cfac:	dfc00b17 	ldw	ra,44(sp)
 800cfb0:	df000a17 	ldw	fp,40(sp)
 800cfb4:	ddc00917 	ldw	r23,36(sp)
 800cfb8:	dd800817 	ldw	r22,32(sp)
 800cfbc:	dd400717 	ldw	r21,28(sp)
 800cfc0:	dd000617 	ldw	r20,24(sp)
 800cfc4:	dcc00517 	ldw	r19,20(sp)
 800cfc8:	dc800417 	ldw	r18,16(sp)
 800cfcc:	dc400317 	ldw	r17,12(sp)
 800cfd0:	dc000217 	ldw	r16,8(sp)
 800cfd4:	dec00c04 	addi	sp,sp,48
 800cfd8:	f800283a 	ret
 800cfdc:	800b883a 	mov	r5,r16
 800cfe0:	a809883a 	mov	r4,r21
 800cfe4:	800aa640 	call	800aa64 <__swsetup_r>
 800cfe8:	1000ee1e 	bne	r2,zero,800d3a4 <__sfvwrite_r+0x4b0>
 800cfec:	80c0030b 	ldhu	r3,12(r16)
 800cff0:	a4400017 	ldw	r17,0(r20)
 800cff4:	1880008c 	andi	r2,r3,2
 800cff8:	103fd61e 	bne	r2,zero,800cf54 <__sfvwrite_r+0x60>
 800cffc:	1880004c 	andi	r2,r3,1
 800d000:	1000421e 	bne	r2,zero,800d10c <__sfvwrite_r+0x218>
 800d004:	0039883a 	mov	fp,zero
 800d008:	0025883a 	mov	r18,zero
 800d00c:	90001a26 	beq	r18,zero,800d078 <__sfvwrite_r+0x184>
 800d010:	1880800c 	andi	r2,r3,512
 800d014:	84c00217 	ldw	r19,8(r16)
 800d018:	10002126 	beq	r2,zero,800d0a0 <__sfvwrite_r+0x1ac>
 800d01c:	982f883a 	mov	r23,r19
 800d020:	94c09636 	bltu	r18,r19,800d27c <__sfvwrite_r+0x388>
 800d024:	1881200c 	andi	r2,r3,1152
 800d028:	1000a11e 	bne	r2,zero,800d2b0 <__sfvwrite_r+0x3bc>
 800d02c:	81000017 	ldw	r4,0(r16)
 800d030:	b80d883a 	mov	r6,r23
 800d034:	e00b883a 	mov	r5,fp
 800d038:	800e1280 	call	800e128 <memmove>
 800d03c:	80c00217 	ldw	r3,8(r16)
 800d040:	81000017 	ldw	r4,0(r16)
 800d044:	9005883a 	mov	r2,r18
 800d048:	1ce7c83a 	sub	r19,r3,r19
 800d04c:	25cf883a 	add	r7,r4,r23
 800d050:	84c00215 	stw	r19,8(r16)
 800d054:	81c00015 	stw	r7,0(r16)
 800d058:	a0c00217 	ldw	r3,8(r20)
 800d05c:	e0b9883a 	add	fp,fp,r2
 800d060:	90a5c83a 	sub	r18,r18,r2
 800d064:	18a7c83a 	sub	r19,r3,r2
 800d068:	a4c00215 	stw	r19,8(r20)
 800d06c:	983fce26 	beq	r19,zero,800cfa8 <__sfvwrite_r+0xb4>
 800d070:	80c0030b 	ldhu	r3,12(r16)
 800d074:	903fe61e 	bne	r18,zero,800d010 <__sfvwrite_r+0x11c>
 800d078:	8f000017 	ldw	fp,0(r17)
 800d07c:	8c800117 	ldw	r18,4(r17)
 800d080:	8c400204 	addi	r17,r17,8
 800d084:	003fe106 	br	800d00c <__sfvwrite_r+0x118>
 800d088:	8cc00017 	ldw	r19,0(r17)
 800d08c:	8c800117 	ldw	r18,4(r17)
 800d090:	8c400204 	addi	r17,r17,8
 800d094:	003fb306 	br	800cf64 <__sfvwrite_r+0x70>
 800d098:	0005883a 	mov	r2,zero
 800d09c:	f800283a 	ret
 800d0a0:	81000017 	ldw	r4,0(r16)
 800d0a4:	80800417 	ldw	r2,16(r16)
 800d0a8:	11005a36 	bltu	r2,r4,800d214 <__sfvwrite_r+0x320>
 800d0ac:	85c00517 	ldw	r23,20(r16)
 800d0b0:	95c05836 	bltu	r18,r23,800d214 <__sfvwrite_r+0x320>
 800d0b4:	00a00034 	movhi	r2,32768
 800d0b8:	10bfffc4 	addi	r2,r2,-1
 800d0bc:	9009883a 	mov	r4,r18
 800d0c0:	1480012e 	bgeu	r2,r18,800d0c8 <__sfvwrite_r+0x1d4>
 800d0c4:	1009883a 	mov	r4,r2
 800d0c8:	b80b883a 	mov	r5,r23
 800d0cc:	8007c8c0 	call	8007c8c <__divsi3>
 800d0d0:	b80b883a 	mov	r5,r23
 800d0d4:	1009883a 	mov	r4,r2
 800d0d8:	8007e400 	call	8007e40 <__mulsi3>
 800d0dc:	81400717 	ldw	r5,28(r16)
 800d0e0:	80c00917 	ldw	r3,36(r16)
 800d0e4:	100f883a 	mov	r7,r2
 800d0e8:	e00d883a 	mov	r6,fp
 800d0ec:	a809883a 	mov	r4,r21
 800d0f0:	183ee83a 	callr	r3
 800d0f4:	00bfd816 	blt	zero,r2,800d058 <__sfvwrite_r+0x164>
 800d0f8:	8080030b 	ldhu	r2,12(r16)
 800d0fc:	10801014 	ori	r2,r2,64
 800d100:	8080030d 	sth	r2,12(r16)
 800d104:	00bfffc4 	movi	r2,-1
 800d108:	003fa806 	br	800cfac <__sfvwrite_r+0xb8>
 800d10c:	0027883a 	mov	r19,zero
 800d110:	0011883a 	mov	r8,zero
 800d114:	0039883a 	mov	fp,zero
 800d118:	0025883a 	mov	r18,zero
 800d11c:	90001f26 	beq	r18,zero,800d19c <__sfvwrite_r+0x2a8>
 800d120:	40005a26 	beq	r8,zero,800d28c <__sfvwrite_r+0x398>
 800d124:	982d883a 	mov	r22,r19
 800d128:	94c0012e 	bgeu	r18,r19,800d130 <__sfvwrite_r+0x23c>
 800d12c:	902d883a 	mov	r22,r18
 800d130:	81000017 	ldw	r4,0(r16)
 800d134:	80800417 	ldw	r2,16(r16)
 800d138:	b02f883a 	mov	r23,r22
 800d13c:	81c00517 	ldw	r7,20(r16)
 800d140:	1100032e 	bgeu	r2,r4,800d150 <__sfvwrite_r+0x25c>
 800d144:	80c00217 	ldw	r3,8(r16)
 800d148:	38c7883a 	add	r3,r7,r3
 800d14c:	1d801816 	blt	r3,r22,800d1b0 <__sfvwrite_r+0x2bc>
 800d150:	b1c03e16 	blt	r22,r7,800d24c <__sfvwrite_r+0x358>
 800d154:	80800917 	ldw	r2,36(r16)
 800d158:	81400717 	ldw	r5,28(r16)
 800d15c:	e00d883a 	mov	r6,fp
 800d160:	da000115 	stw	r8,4(sp)
 800d164:	a809883a 	mov	r4,r21
 800d168:	103ee83a 	callr	r2
 800d16c:	102f883a 	mov	r23,r2
 800d170:	da000117 	ldw	r8,4(sp)
 800d174:	00bfe00e 	bge	zero,r2,800d0f8 <__sfvwrite_r+0x204>
 800d178:	9de7c83a 	sub	r19,r19,r23
 800d17c:	98001f26 	beq	r19,zero,800d1fc <__sfvwrite_r+0x308>
 800d180:	a0800217 	ldw	r2,8(r20)
 800d184:	e5f9883a 	add	fp,fp,r23
 800d188:	95e5c83a 	sub	r18,r18,r23
 800d18c:	15efc83a 	sub	r23,r2,r23
 800d190:	a5c00215 	stw	r23,8(r20)
 800d194:	b83f8426 	beq	r23,zero,800cfa8 <__sfvwrite_r+0xb4>
 800d198:	903fe11e 	bne	r18,zero,800d120 <__sfvwrite_r+0x22c>
 800d19c:	8f000017 	ldw	fp,0(r17)
 800d1a0:	8c800117 	ldw	r18,4(r17)
 800d1a4:	0011883a 	mov	r8,zero
 800d1a8:	8c400204 	addi	r17,r17,8
 800d1ac:	003fdb06 	br	800d11c <__sfvwrite_r+0x228>
 800d1b0:	180d883a 	mov	r6,r3
 800d1b4:	e00b883a 	mov	r5,fp
 800d1b8:	da000115 	stw	r8,4(sp)
 800d1bc:	d8c00015 	stw	r3,0(sp)
 800d1c0:	800e1280 	call	800e128 <memmove>
 800d1c4:	d8c00017 	ldw	r3,0(sp)
 800d1c8:	80800017 	ldw	r2,0(r16)
 800d1cc:	800b883a 	mov	r5,r16
 800d1d0:	a809883a 	mov	r4,r21
 800d1d4:	10c5883a 	add	r2,r2,r3
 800d1d8:	80800015 	stw	r2,0(r16)
 800d1dc:	d8c00015 	stw	r3,0(sp)
 800d1e0:	800c6840 	call	800c684 <_fflush_r>
 800d1e4:	d8c00017 	ldw	r3,0(sp)
 800d1e8:	da000117 	ldw	r8,4(sp)
 800d1ec:	103fc21e 	bne	r2,zero,800d0f8 <__sfvwrite_r+0x204>
 800d1f0:	182f883a 	mov	r23,r3
 800d1f4:	9de7c83a 	sub	r19,r19,r23
 800d1f8:	983fe11e 	bne	r19,zero,800d180 <__sfvwrite_r+0x28c>
 800d1fc:	800b883a 	mov	r5,r16
 800d200:	a809883a 	mov	r4,r21
 800d204:	800c6840 	call	800c684 <_fflush_r>
 800d208:	103fbb1e 	bne	r2,zero,800d0f8 <__sfvwrite_r+0x204>
 800d20c:	0011883a 	mov	r8,zero
 800d210:	003fdb06 	br	800d180 <__sfvwrite_r+0x28c>
 800d214:	94c0012e 	bgeu	r18,r19,800d21c <__sfvwrite_r+0x328>
 800d218:	9027883a 	mov	r19,r18
 800d21c:	980d883a 	mov	r6,r19
 800d220:	e00b883a 	mov	r5,fp
 800d224:	800e1280 	call	800e128 <memmove>
 800d228:	80800217 	ldw	r2,8(r16)
 800d22c:	80c00017 	ldw	r3,0(r16)
 800d230:	14c5c83a 	sub	r2,r2,r19
 800d234:	1cc7883a 	add	r3,r3,r19
 800d238:	80800215 	stw	r2,8(r16)
 800d23c:	80c00015 	stw	r3,0(r16)
 800d240:	10004326 	beq	r2,zero,800d350 <__sfvwrite_r+0x45c>
 800d244:	9805883a 	mov	r2,r19
 800d248:	003f8306 	br	800d058 <__sfvwrite_r+0x164>
 800d24c:	b00d883a 	mov	r6,r22
 800d250:	e00b883a 	mov	r5,fp
 800d254:	da000115 	stw	r8,4(sp)
 800d258:	800e1280 	call	800e128 <memmove>
 800d25c:	80800217 	ldw	r2,8(r16)
 800d260:	80c00017 	ldw	r3,0(r16)
 800d264:	da000117 	ldw	r8,4(sp)
 800d268:	1585c83a 	sub	r2,r2,r22
 800d26c:	1dad883a 	add	r22,r3,r22
 800d270:	80800215 	stw	r2,8(r16)
 800d274:	85800015 	stw	r22,0(r16)
 800d278:	003fbf06 	br	800d178 <__sfvwrite_r+0x284>
 800d27c:	81000017 	ldw	r4,0(r16)
 800d280:	9027883a 	mov	r19,r18
 800d284:	902f883a 	mov	r23,r18
 800d288:	003f6906 	br	800d030 <__sfvwrite_r+0x13c>
 800d28c:	900d883a 	mov	r6,r18
 800d290:	01400284 	movi	r5,10
 800d294:	e009883a 	mov	r4,fp
 800d298:	800e0440 	call	800e044 <memchr>
 800d29c:	10003e26 	beq	r2,zero,800d398 <__sfvwrite_r+0x4a4>
 800d2a0:	10800044 	addi	r2,r2,1
 800d2a4:	1727c83a 	sub	r19,r2,fp
 800d2a8:	02000044 	movi	r8,1
 800d2ac:	003f9d06 	br	800d124 <__sfvwrite_r+0x230>
 800d2b0:	80800517 	ldw	r2,20(r16)
 800d2b4:	81400417 	ldw	r5,16(r16)
 800d2b8:	81c00017 	ldw	r7,0(r16)
 800d2bc:	10a7883a 	add	r19,r2,r2
 800d2c0:	9885883a 	add	r2,r19,r2
 800d2c4:	1026d7fa 	srli	r19,r2,31
 800d2c8:	396dc83a 	sub	r22,r7,r5
 800d2cc:	b1000044 	addi	r4,r22,1
 800d2d0:	9885883a 	add	r2,r19,r2
 800d2d4:	1027d07a 	srai	r19,r2,1
 800d2d8:	2485883a 	add	r2,r4,r18
 800d2dc:	980d883a 	mov	r6,r19
 800d2e0:	9880022e 	bgeu	r19,r2,800d2ec <__sfvwrite_r+0x3f8>
 800d2e4:	1027883a 	mov	r19,r2
 800d2e8:	100d883a 	mov	r6,r2
 800d2ec:	18c1000c 	andi	r3,r3,1024
 800d2f0:	18001c26 	beq	r3,zero,800d364 <__sfvwrite_r+0x470>
 800d2f4:	300b883a 	mov	r5,r6
 800d2f8:	a809883a 	mov	r4,r21
 800d2fc:	800d8380 	call	800d838 <_malloc_r>
 800d300:	102f883a 	mov	r23,r2
 800d304:	10002926 	beq	r2,zero,800d3ac <__sfvwrite_r+0x4b8>
 800d308:	81400417 	ldw	r5,16(r16)
 800d30c:	b00d883a 	mov	r6,r22
 800d310:	1009883a 	mov	r4,r2
 800d314:	8007fa40 	call	8007fa4 <memcpy>
 800d318:	8080030b 	ldhu	r2,12(r16)
 800d31c:	00fedfc4 	movi	r3,-1153
 800d320:	10c4703a 	and	r2,r2,r3
 800d324:	10802014 	ori	r2,r2,128
 800d328:	8080030d 	sth	r2,12(r16)
 800d32c:	bd89883a 	add	r4,r23,r22
 800d330:	9d8fc83a 	sub	r7,r19,r22
 800d334:	85c00415 	stw	r23,16(r16)
 800d338:	84c00515 	stw	r19,20(r16)
 800d33c:	81000015 	stw	r4,0(r16)
 800d340:	9027883a 	mov	r19,r18
 800d344:	81c00215 	stw	r7,8(r16)
 800d348:	902f883a 	mov	r23,r18
 800d34c:	003f3806 	br	800d030 <__sfvwrite_r+0x13c>
 800d350:	800b883a 	mov	r5,r16
 800d354:	a809883a 	mov	r4,r21
 800d358:	800c6840 	call	800c684 <_fflush_r>
 800d35c:	103fb926 	beq	r2,zero,800d244 <__sfvwrite_r+0x350>
 800d360:	003f6506 	br	800d0f8 <__sfvwrite_r+0x204>
 800d364:	a809883a 	mov	r4,r21
 800d368:	800f4a40 	call	800f4a4 <_realloc_r>
 800d36c:	102f883a 	mov	r23,r2
 800d370:	103fee1e 	bne	r2,zero,800d32c <__sfvwrite_r+0x438>
 800d374:	81400417 	ldw	r5,16(r16)
 800d378:	a809883a 	mov	r4,r21
 800d37c:	800cbe40 	call	800cbe4 <_free_r>
 800d380:	8080030b 	ldhu	r2,12(r16)
 800d384:	00ffdfc4 	movi	r3,-129
 800d388:	1884703a 	and	r2,r3,r2
 800d38c:	00c00304 	movi	r3,12
 800d390:	a8c00015 	stw	r3,0(r21)
 800d394:	003f5906 	br	800d0fc <__sfvwrite_r+0x208>
 800d398:	94c00044 	addi	r19,r18,1
 800d39c:	02000044 	movi	r8,1
 800d3a0:	003f6006 	br	800d124 <__sfvwrite_r+0x230>
 800d3a4:	00bfffc4 	movi	r2,-1
 800d3a8:	003f0006 	br	800cfac <__sfvwrite_r+0xb8>
 800d3ac:	00800304 	movi	r2,12
 800d3b0:	a8800015 	stw	r2,0(r21)
 800d3b4:	8080030b 	ldhu	r2,12(r16)
 800d3b8:	003f5006 	br	800d0fc <__sfvwrite_r+0x208>

0800d3bc <_fwalk>:
 800d3bc:	defff704 	addi	sp,sp,-36
 800d3c0:	dd000415 	stw	r20,16(sp)
 800d3c4:	dfc00815 	stw	ra,32(sp)
 800d3c8:	ddc00715 	stw	r23,28(sp)
 800d3cc:	dd800615 	stw	r22,24(sp)
 800d3d0:	dd400515 	stw	r21,20(sp)
 800d3d4:	dcc00315 	stw	r19,12(sp)
 800d3d8:	dc800215 	stw	r18,8(sp)
 800d3dc:	dc400115 	stw	r17,4(sp)
 800d3e0:	dc000015 	stw	r16,0(sp)
 800d3e4:	2500b804 	addi	r20,r4,736
 800d3e8:	a0002326 	beq	r20,zero,800d478 <_fwalk+0xbc>
 800d3ec:	282b883a 	mov	r21,r5
 800d3f0:	002f883a 	mov	r23,zero
 800d3f4:	05800044 	movi	r22,1
 800d3f8:	04ffffc4 	movi	r19,-1
 800d3fc:	a4400117 	ldw	r17,4(r20)
 800d400:	a4800217 	ldw	r18,8(r20)
 800d404:	8c7fffc4 	addi	r17,r17,-1
 800d408:	88000d16 	blt	r17,zero,800d440 <_fwalk+0x84>
 800d40c:	94000304 	addi	r16,r18,12
 800d410:	94800384 	addi	r18,r18,14
 800d414:	8080000b 	ldhu	r2,0(r16)
 800d418:	8c7fffc4 	addi	r17,r17,-1
 800d41c:	813ffd04 	addi	r4,r16,-12
 800d420:	b080042e 	bgeu	r22,r2,800d434 <_fwalk+0x78>
 800d424:	9080000f 	ldh	r2,0(r18)
 800d428:	14c00226 	beq	r2,r19,800d434 <_fwalk+0x78>
 800d42c:	a83ee83a 	callr	r21
 800d430:	b8aeb03a 	or	r23,r23,r2
 800d434:	84001a04 	addi	r16,r16,104
 800d438:	94801a04 	addi	r18,r18,104
 800d43c:	8cfff51e 	bne	r17,r19,800d414 <_fwalk+0x58>
 800d440:	a5000017 	ldw	r20,0(r20)
 800d444:	a03fed1e 	bne	r20,zero,800d3fc <_fwalk+0x40>
 800d448:	b805883a 	mov	r2,r23
 800d44c:	dfc00817 	ldw	ra,32(sp)
 800d450:	ddc00717 	ldw	r23,28(sp)
 800d454:	dd800617 	ldw	r22,24(sp)
 800d458:	dd400517 	ldw	r21,20(sp)
 800d45c:	dd000417 	ldw	r20,16(sp)
 800d460:	dcc00317 	ldw	r19,12(sp)
 800d464:	dc800217 	ldw	r18,8(sp)
 800d468:	dc400117 	ldw	r17,4(sp)
 800d46c:	dc000017 	ldw	r16,0(sp)
 800d470:	dec00904 	addi	sp,sp,36
 800d474:	f800283a 	ret
 800d478:	002f883a 	mov	r23,zero
 800d47c:	003ff206 	br	800d448 <_fwalk+0x8c>

0800d480 <_fwalk_reent>:
 800d480:	defff704 	addi	sp,sp,-36
 800d484:	dd000415 	stw	r20,16(sp)
 800d488:	dfc00815 	stw	ra,32(sp)
 800d48c:	ddc00715 	stw	r23,28(sp)
 800d490:	dd800615 	stw	r22,24(sp)
 800d494:	dd400515 	stw	r21,20(sp)
 800d498:	dcc00315 	stw	r19,12(sp)
 800d49c:	dc800215 	stw	r18,8(sp)
 800d4a0:	dc400115 	stw	r17,4(sp)
 800d4a4:	dc000015 	stw	r16,0(sp)
 800d4a8:	2500b804 	addi	r20,r4,736
 800d4ac:	a0002326 	beq	r20,zero,800d53c <_fwalk_reent+0xbc>
 800d4b0:	282b883a 	mov	r21,r5
 800d4b4:	2027883a 	mov	r19,r4
 800d4b8:	002f883a 	mov	r23,zero
 800d4bc:	05800044 	movi	r22,1
 800d4c0:	04bfffc4 	movi	r18,-1
 800d4c4:	a4400117 	ldw	r17,4(r20)
 800d4c8:	a4000217 	ldw	r16,8(r20)
 800d4cc:	8c7fffc4 	addi	r17,r17,-1
 800d4d0:	88000c16 	blt	r17,zero,800d504 <_fwalk_reent+0x84>
 800d4d4:	84000304 	addi	r16,r16,12
 800d4d8:	8080000b 	ldhu	r2,0(r16)
 800d4dc:	8c7fffc4 	addi	r17,r17,-1
 800d4e0:	817ffd04 	addi	r5,r16,-12
 800d4e4:	b080052e 	bgeu	r22,r2,800d4fc <_fwalk_reent+0x7c>
 800d4e8:	8080008f 	ldh	r2,2(r16)
 800d4ec:	9809883a 	mov	r4,r19
 800d4f0:	14800226 	beq	r2,r18,800d4fc <_fwalk_reent+0x7c>
 800d4f4:	a83ee83a 	callr	r21
 800d4f8:	b8aeb03a 	or	r23,r23,r2
 800d4fc:	84001a04 	addi	r16,r16,104
 800d500:	8cbff51e 	bne	r17,r18,800d4d8 <_fwalk_reent+0x58>
 800d504:	a5000017 	ldw	r20,0(r20)
 800d508:	a03fee1e 	bne	r20,zero,800d4c4 <_fwalk_reent+0x44>
 800d50c:	b805883a 	mov	r2,r23
 800d510:	dfc00817 	ldw	ra,32(sp)
 800d514:	ddc00717 	ldw	r23,28(sp)
 800d518:	dd800617 	ldw	r22,24(sp)
 800d51c:	dd400517 	ldw	r21,20(sp)
 800d520:	dd000417 	ldw	r20,16(sp)
 800d524:	dcc00317 	ldw	r19,12(sp)
 800d528:	dc800217 	ldw	r18,8(sp)
 800d52c:	dc400117 	ldw	r17,4(sp)
 800d530:	dc000017 	ldw	r16,0(sp)
 800d534:	dec00904 	addi	sp,sp,36
 800d538:	f800283a 	ret
 800d53c:	002f883a 	mov	r23,zero
 800d540:	003ff206 	br	800d50c <_fwalk_reent+0x8c>

0800d544 <_gettimeofday_r>:
 800d544:	defffd04 	addi	sp,sp,-12
 800d548:	2805883a 	mov	r2,r5
 800d54c:	dc000015 	stw	r16,0(sp)
 800d550:	040200b4 	movhi	r16,2050
 800d554:	dc400115 	stw	r17,4(sp)
 800d558:	842f7404 	addi	r16,r16,-16944
 800d55c:	2023883a 	mov	r17,r4
 800d560:	300b883a 	mov	r5,r6
 800d564:	1009883a 	mov	r4,r2
 800d568:	dfc00215 	stw	ra,8(sp)
 800d56c:	80000015 	stw	zero,0(r16)
 800d570:	80153c40 	call	80153c4 <gettimeofday>
 800d574:	00ffffc4 	movi	r3,-1
 800d578:	10c00526 	beq	r2,r3,800d590 <_gettimeofday_r+0x4c>
 800d57c:	dfc00217 	ldw	ra,8(sp)
 800d580:	dc400117 	ldw	r17,4(sp)
 800d584:	dc000017 	ldw	r16,0(sp)
 800d588:	dec00304 	addi	sp,sp,12
 800d58c:	f800283a 	ret
 800d590:	80c00017 	ldw	r3,0(r16)
 800d594:	183ff926 	beq	r3,zero,800d57c <_gettimeofday_r+0x38>
 800d598:	88c00015 	stw	r3,0(r17)
 800d59c:	003ff706 	br	800d57c <_gettimeofday_r+0x38>

0800d5a0 <_setlocale_r>:
 800d5a0:	30001b26 	beq	r6,zero,800d610 <_setlocale_r+0x70>
 800d5a4:	014200b4 	movhi	r5,2050
 800d5a8:	defffe04 	addi	sp,sp,-8
 800d5ac:	2960e804 	addi	r5,r5,-31840
 800d5b0:	3009883a 	mov	r4,r6
 800d5b4:	dc000015 	stw	r16,0(sp)
 800d5b8:	dfc00115 	stw	ra,4(sp)
 800d5bc:	3021883a 	mov	r16,r6
 800d5c0:	800fc0c0 	call	800fc0c <strcmp>
 800d5c4:	1000061e 	bne	r2,zero,800d5e0 <_setlocale_r+0x40>
 800d5c8:	008200b4 	movhi	r2,2050
 800d5cc:	10a0c904 	addi	r2,r2,-31964
 800d5d0:	dfc00117 	ldw	ra,4(sp)
 800d5d4:	dc000017 	ldw	r16,0(sp)
 800d5d8:	dec00204 	addi	sp,sp,8
 800d5dc:	f800283a 	ret
 800d5e0:	014200b4 	movhi	r5,2050
 800d5e4:	2960c904 	addi	r5,r5,-31964
 800d5e8:	8009883a 	mov	r4,r16
 800d5ec:	800fc0c0 	call	800fc0c <strcmp>
 800d5f0:	103ff526 	beq	r2,zero,800d5c8 <_setlocale_r+0x28>
 800d5f4:	014200b4 	movhi	r5,2050
 800d5f8:	2960d304 	addi	r5,r5,-31924
 800d5fc:	8009883a 	mov	r4,r16
 800d600:	800fc0c0 	call	800fc0c <strcmp>
 800d604:	103ff026 	beq	r2,zero,800d5c8 <_setlocale_r+0x28>
 800d608:	0005883a 	mov	r2,zero
 800d60c:	003ff006 	br	800d5d0 <_setlocale_r+0x30>
 800d610:	008200b4 	movhi	r2,2050
 800d614:	10a0c904 	addi	r2,r2,-31964
 800d618:	f800283a 	ret

0800d61c <__locale_charset>:
 800d61c:	008200b4 	movhi	r2,2050
 800d620:	10a2ae04 	addi	r2,r2,-30024
 800d624:	f800283a 	ret

0800d628 <__locale_mb_cur_max>:
 800d628:	008200b4 	movhi	r2,2050
 800d62c:	10a85904 	addi	r2,r2,-24220
 800d630:	10800017 	ldw	r2,0(r2)
 800d634:	f800283a 	ret

0800d638 <__locale_msgcharset>:
 800d638:	008200b4 	movhi	r2,2050
 800d63c:	10a2a604 	addi	r2,r2,-30056
 800d640:	f800283a 	ret

0800d644 <__locale_cjk_lang>:
 800d644:	0005883a 	mov	r2,zero
 800d648:	f800283a 	ret

0800d64c <_localeconv_r>:
 800d64c:	008200b4 	movhi	r2,2050
 800d650:	10a2b604 	addi	r2,r2,-29992
 800d654:	f800283a 	ret

0800d658 <setlocale>:
 800d658:	008200b4 	movhi	r2,2050
 800d65c:	10a85804 	addi	r2,r2,-24224
 800d660:	280d883a 	mov	r6,r5
 800d664:	200b883a 	mov	r5,r4
 800d668:	11000017 	ldw	r4,0(r2)
 800d66c:	800d5a01 	jmpi	800d5a0 <_setlocale_r>

0800d670 <localeconv>:
 800d670:	008200b4 	movhi	r2,2050
 800d674:	10a2b604 	addi	r2,r2,-29992
 800d678:	f800283a 	ret

0800d67c <__smakebuf_r>:
 800d67c:	2880030b 	ldhu	r2,12(r5)
 800d680:	10c0008c 	andi	r3,r2,2
 800d684:	1800411e 	bne	r3,zero,800d78c <__smakebuf_r+0x110>
 800d688:	deffec04 	addi	sp,sp,-80
 800d68c:	dc000f15 	stw	r16,60(sp)
 800d690:	2821883a 	mov	r16,r5
 800d694:	2940038f 	ldh	r5,14(r5)
 800d698:	dc401015 	stw	r17,64(sp)
 800d69c:	dfc01315 	stw	ra,76(sp)
 800d6a0:	dcc01215 	stw	r19,72(sp)
 800d6a4:	dc801115 	stw	r18,68(sp)
 800d6a8:	2023883a 	mov	r17,r4
 800d6ac:	28001c16 	blt	r5,zero,800d720 <__smakebuf_r+0xa4>
 800d6b0:	d80d883a 	mov	r6,sp
 800d6b4:	80119d40 	call	80119d4 <_fstat_r>
 800d6b8:	10001816 	blt	r2,zero,800d71c <__smakebuf_r+0xa0>
 800d6bc:	d8800117 	ldw	r2,4(sp)
 800d6c0:	00e00014 	movui	r3,32768
 800d6c4:	10bc000c 	andi	r2,r2,61440
 800d6c8:	14c80020 	cmpeqi	r19,r2,8192
 800d6cc:	10c03726 	beq	r2,r3,800d7ac <__smakebuf_r+0x130>
 800d6d0:	80c0030b 	ldhu	r3,12(r16)
 800d6d4:	18c20014 	ori	r3,r3,2048
 800d6d8:	80c0030d 	sth	r3,12(r16)
 800d6dc:	00c80004 	movi	r3,8192
 800d6e0:	10c0521e 	bne	r2,r3,800d82c <__smakebuf_r+0x1b0>
 800d6e4:	8140038f 	ldh	r5,14(r16)
 800d6e8:	8809883a 	mov	r4,r17
 800d6ec:	8011a300 	call	8011a30 <_isatty_r>
 800d6f0:	10004c26 	beq	r2,zero,800d824 <__smakebuf_r+0x1a8>
 800d6f4:	8080030b 	ldhu	r2,12(r16)
 800d6f8:	80c010c4 	addi	r3,r16,67
 800d6fc:	80c00015 	stw	r3,0(r16)
 800d700:	10800054 	ori	r2,r2,1
 800d704:	8080030d 	sth	r2,12(r16)
 800d708:	00800044 	movi	r2,1
 800d70c:	80c00415 	stw	r3,16(r16)
 800d710:	80800515 	stw	r2,20(r16)
 800d714:	04810004 	movi	r18,1024
 800d718:	00000706 	br	800d738 <__smakebuf_r+0xbc>
 800d71c:	8080030b 	ldhu	r2,12(r16)
 800d720:	10c0200c 	andi	r3,r2,128
 800d724:	18001f1e 	bne	r3,zero,800d7a4 <__smakebuf_r+0x128>
 800d728:	04810004 	movi	r18,1024
 800d72c:	10820014 	ori	r2,r2,2048
 800d730:	8080030d 	sth	r2,12(r16)
 800d734:	0027883a 	mov	r19,zero
 800d738:	900b883a 	mov	r5,r18
 800d73c:	8809883a 	mov	r4,r17
 800d740:	800d8380 	call	800d838 <_malloc_r>
 800d744:	10002c26 	beq	r2,zero,800d7f8 <__smakebuf_r+0x17c>
 800d748:	80c0030b 	ldhu	r3,12(r16)
 800d74c:	01020074 	movhi	r4,2049
 800d750:	2131c604 	addi	r4,r4,-14568
 800d754:	89000f15 	stw	r4,60(r17)
 800d758:	18c02014 	ori	r3,r3,128
 800d75c:	80c0030d 	sth	r3,12(r16)
 800d760:	80800015 	stw	r2,0(r16)
 800d764:	80800415 	stw	r2,16(r16)
 800d768:	84800515 	stw	r18,20(r16)
 800d76c:	98001a1e 	bne	r19,zero,800d7d8 <__smakebuf_r+0x15c>
 800d770:	dfc01317 	ldw	ra,76(sp)
 800d774:	dcc01217 	ldw	r19,72(sp)
 800d778:	dc801117 	ldw	r18,68(sp)
 800d77c:	dc401017 	ldw	r17,64(sp)
 800d780:	dc000f17 	ldw	r16,60(sp)
 800d784:	dec01404 	addi	sp,sp,80
 800d788:	f800283a 	ret
 800d78c:	288010c4 	addi	r2,r5,67
 800d790:	28800015 	stw	r2,0(r5)
 800d794:	28800415 	stw	r2,16(r5)
 800d798:	00800044 	movi	r2,1
 800d79c:	28800515 	stw	r2,20(r5)
 800d7a0:	f800283a 	ret
 800d7a4:	04801004 	movi	r18,64
 800d7a8:	003fe006 	br	800d72c <__smakebuf_r+0xb0>
 800d7ac:	81000a17 	ldw	r4,40(r16)
 800d7b0:	00c20074 	movhi	r3,2049
 800d7b4:	18feea04 	addi	r3,r3,-1112
 800d7b8:	20ffc51e 	bne	r4,r3,800d6d0 <__smakebuf_r+0x54>
 800d7bc:	8080030b 	ldhu	r2,12(r16)
 800d7c0:	04810004 	movi	r18,1024
 800d7c4:	84801315 	stw	r18,76(r16)
 800d7c8:	1484b03a 	or	r2,r2,r18
 800d7cc:	8080030d 	sth	r2,12(r16)
 800d7d0:	0027883a 	mov	r19,zero
 800d7d4:	003fd806 	br	800d738 <__smakebuf_r+0xbc>
 800d7d8:	8140038f 	ldh	r5,14(r16)
 800d7dc:	8809883a 	mov	r4,r17
 800d7e0:	8011a300 	call	8011a30 <_isatty_r>
 800d7e4:	103fe226 	beq	r2,zero,800d770 <__smakebuf_r+0xf4>
 800d7e8:	8080030b 	ldhu	r2,12(r16)
 800d7ec:	10800054 	ori	r2,r2,1
 800d7f0:	8080030d 	sth	r2,12(r16)
 800d7f4:	003fde06 	br	800d770 <__smakebuf_r+0xf4>
 800d7f8:	8080030b 	ldhu	r2,12(r16)
 800d7fc:	10c0800c 	andi	r3,r2,512
 800d800:	183fdb1e 	bne	r3,zero,800d770 <__smakebuf_r+0xf4>
 800d804:	10800094 	ori	r2,r2,2
 800d808:	80c010c4 	addi	r3,r16,67
 800d80c:	8080030d 	sth	r2,12(r16)
 800d810:	00800044 	movi	r2,1
 800d814:	80c00015 	stw	r3,0(r16)
 800d818:	80c00415 	stw	r3,16(r16)
 800d81c:	80800515 	stw	r2,20(r16)
 800d820:	003fd306 	br	800d770 <__smakebuf_r+0xf4>
 800d824:	04810004 	movi	r18,1024
 800d828:	003fc306 	br	800d738 <__smakebuf_r+0xbc>
 800d82c:	0027883a 	mov	r19,zero
 800d830:	04810004 	movi	r18,1024
 800d834:	003fc006 	br	800d738 <__smakebuf_r+0xbc>

0800d838 <_malloc_r>:
 800d838:	defff504 	addi	sp,sp,-44
 800d83c:	dc800315 	stw	r18,12(sp)
 800d840:	dfc00a15 	stw	ra,40(sp)
 800d844:	df000915 	stw	fp,36(sp)
 800d848:	ddc00815 	stw	r23,32(sp)
 800d84c:	dd800715 	stw	r22,28(sp)
 800d850:	dd400615 	stw	r21,24(sp)
 800d854:	dd000515 	stw	r20,20(sp)
 800d858:	dcc00415 	stw	r19,16(sp)
 800d85c:	dc400215 	stw	r17,8(sp)
 800d860:	dc000115 	stw	r16,4(sp)
 800d864:	288002c4 	addi	r2,r5,11
 800d868:	00c00584 	movi	r3,22
 800d86c:	2025883a 	mov	r18,r4
 800d870:	18807f2e 	bgeu	r3,r2,800da70 <_malloc_r+0x238>
 800d874:	047ffe04 	movi	r17,-8
 800d878:	1462703a 	and	r17,r2,r17
 800d87c:	8800a316 	blt	r17,zero,800db0c <_malloc_r+0x2d4>
 800d880:	8940a236 	bltu	r17,r5,800db0c <_malloc_r+0x2d4>
 800d884:	80159200 	call	8015920 <__malloc_lock>
 800d888:	00807dc4 	movi	r2,503
 800d88c:	1441e92e 	bgeu	r2,r17,800e034 <_malloc_r+0x7fc>
 800d890:	8804d27a 	srli	r2,r17,9
 800d894:	1000a126 	beq	r2,zero,800db1c <_malloc_r+0x2e4>
 800d898:	00c00104 	movi	r3,4
 800d89c:	18811e36 	bltu	r3,r2,800dd18 <_malloc_r+0x4e0>
 800d8a0:	8804d1ba 	srli	r2,r17,6
 800d8a4:	12000e44 	addi	r8,r2,57
 800d8a8:	11c00e04 	addi	r7,r2,56
 800d8ac:	4209883a 	add	r4,r8,r8
 800d8b0:	04c200b4 	movhi	r19,2050
 800d8b4:	2109883a 	add	r4,r4,r4
 800d8b8:	9ce2c404 	addi	r19,r19,-29936
 800d8bc:	2109883a 	add	r4,r4,r4
 800d8c0:	9909883a 	add	r4,r19,r4
 800d8c4:	24000117 	ldw	r16,4(r4)
 800d8c8:	213ffe04 	addi	r4,r4,-8
 800d8cc:	24009726 	beq	r4,r16,800db2c <_malloc_r+0x2f4>
 800d8d0:	80800117 	ldw	r2,4(r16)
 800d8d4:	01bfff04 	movi	r6,-4
 800d8d8:	014003c4 	movi	r5,15
 800d8dc:	1184703a 	and	r2,r2,r6
 800d8e0:	1447c83a 	sub	r3,r2,r17
 800d8e4:	28c00716 	blt	r5,r3,800d904 <_malloc_r+0xcc>
 800d8e8:	1800920e 	bge	r3,zero,800db34 <_malloc_r+0x2fc>
 800d8ec:	84000317 	ldw	r16,12(r16)
 800d8f0:	24008e26 	beq	r4,r16,800db2c <_malloc_r+0x2f4>
 800d8f4:	80800117 	ldw	r2,4(r16)
 800d8f8:	1184703a 	and	r2,r2,r6
 800d8fc:	1447c83a 	sub	r3,r2,r17
 800d900:	28fff90e 	bge	r5,r3,800d8e8 <_malloc_r+0xb0>
 800d904:	3809883a 	mov	r4,r7
 800d908:	018200b4 	movhi	r6,2050
 800d90c:	9c000417 	ldw	r16,16(r19)
 800d910:	31a2c404 	addi	r6,r6,-29936
 800d914:	32000204 	addi	r8,r6,8
 800d918:	82013426 	beq	r16,r8,800ddec <_malloc_r+0x5b4>
 800d91c:	80c00117 	ldw	r3,4(r16)
 800d920:	00bfff04 	movi	r2,-4
 800d924:	188e703a 	and	r7,r3,r2
 800d928:	3c45c83a 	sub	r2,r7,r17
 800d92c:	00c003c4 	movi	r3,15
 800d930:	18811f16 	blt	r3,r2,800ddb0 <_malloc_r+0x578>
 800d934:	32000515 	stw	r8,20(r6)
 800d938:	32000415 	stw	r8,16(r6)
 800d93c:	10007f0e 	bge	r2,zero,800db3c <_malloc_r+0x304>
 800d940:	00807fc4 	movi	r2,511
 800d944:	11c0fd36 	bltu	r2,r7,800dd3c <_malloc_r+0x504>
 800d948:	3806d0fa 	srli	r3,r7,3
 800d94c:	01c00044 	movi	r7,1
 800d950:	30800117 	ldw	r2,4(r6)
 800d954:	19400044 	addi	r5,r3,1
 800d958:	294b883a 	add	r5,r5,r5
 800d95c:	1807d0ba 	srai	r3,r3,2
 800d960:	294b883a 	add	r5,r5,r5
 800d964:	294b883a 	add	r5,r5,r5
 800d968:	298b883a 	add	r5,r5,r6
 800d96c:	38c6983a 	sll	r3,r7,r3
 800d970:	29c00017 	ldw	r7,0(r5)
 800d974:	2a7ffe04 	addi	r9,r5,-8
 800d978:	1886b03a 	or	r3,r3,r2
 800d97c:	82400315 	stw	r9,12(r16)
 800d980:	81c00215 	stw	r7,8(r16)
 800d984:	30c00115 	stw	r3,4(r6)
 800d988:	2c000015 	stw	r16,0(r5)
 800d98c:	3c000315 	stw	r16,12(r7)
 800d990:	2005d0ba 	srai	r2,r4,2
 800d994:	01400044 	movi	r5,1
 800d998:	288a983a 	sll	r5,r5,r2
 800d99c:	19406f36 	bltu	r3,r5,800db5c <_malloc_r+0x324>
 800d9a0:	28c4703a 	and	r2,r5,r3
 800d9a4:	10000a1e 	bne	r2,zero,800d9d0 <_malloc_r+0x198>
 800d9a8:	00bfff04 	movi	r2,-4
 800d9ac:	294b883a 	add	r5,r5,r5
 800d9b0:	2088703a 	and	r4,r4,r2
 800d9b4:	28c4703a 	and	r2,r5,r3
 800d9b8:	21000104 	addi	r4,r4,4
 800d9bc:	1000041e 	bne	r2,zero,800d9d0 <_malloc_r+0x198>
 800d9c0:	294b883a 	add	r5,r5,r5
 800d9c4:	28c4703a 	and	r2,r5,r3
 800d9c8:	21000104 	addi	r4,r4,4
 800d9cc:	103ffc26 	beq	r2,zero,800d9c0 <_malloc_r+0x188>
 800d9d0:	02bfff04 	movi	r10,-4
 800d9d4:	024003c4 	movi	r9,15
 800d9d8:	21800044 	addi	r6,r4,1
 800d9dc:	318d883a 	add	r6,r6,r6
 800d9e0:	318d883a 	add	r6,r6,r6
 800d9e4:	318d883a 	add	r6,r6,r6
 800d9e8:	998d883a 	add	r6,r19,r6
 800d9ec:	333ffe04 	addi	r12,r6,-8
 800d9f0:	2017883a 	mov	r11,r4
 800d9f4:	31800104 	addi	r6,r6,4
 800d9f8:	34000017 	ldw	r16,0(r6)
 800d9fc:	31fffd04 	addi	r7,r6,-12
 800da00:	81c0041e 	bne	r16,r7,800da14 <_malloc_r+0x1dc>
 800da04:	0000fb06 	br	800ddf4 <_malloc_r+0x5bc>
 800da08:	1801030e 	bge	r3,zero,800de18 <_malloc_r+0x5e0>
 800da0c:	84000317 	ldw	r16,12(r16)
 800da10:	81c0f826 	beq	r16,r7,800ddf4 <_malloc_r+0x5bc>
 800da14:	80800117 	ldw	r2,4(r16)
 800da18:	1284703a 	and	r2,r2,r10
 800da1c:	1447c83a 	sub	r3,r2,r17
 800da20:	48fff90e 	bge	r9,r3,800da08 <_malloc_r+0x1d0>
 800da24:	80800317 	ldw	r2,12(r16)
 800da28:	81000217 	ldw	r4,8(r16)
 800da2c:	89400054 	ori	r5,r17,1
 800da30:	81400115 	stw	r5,4(r16)
 800da34:	20800315 	stw	r2,12(r4)
 800da38:	11000215 	stw	r4,8(r2)
 800da3c:	8463883a 	add	r17,r16,r17
 800da40:	9c400515 	stw	r17,20(r19)
 800da44:	9c400415 	stw	r17,16(r19)
 800da48:	18800054 	ori	r2,r3,1
 800da4c:	88800115 	stw	r2,4(r17)
 800da50:	8a000315 	stw	r8,12(r17)
 800da54:	8a000215 	stw	r8,8(r17)
 800da58:	88e3883a 	add	r17,r17,r3
 800da5c:	88c00015 	stw	r3,0(r17)
 800da60:	9009883a 	mov	r4,r18
 800da64:	80159440 	call	8015944 <__malloc_unlock>
 800da68:	80800204 	addi	r2,r16,8
 800da6c:	00001b06 	br	800dadc <_malloc_r+0x2a4>
 800da70:	04400404 	movi	r17,16
 800da74:	89402536 	bltu	r17,r5,800db0c <_malloc_r+0x2d4>
 800da78:	80159200 	call	8015920 <__malloc_lock>
 800da7c:	00800184 	movi	r2,6
 800da80:	01000084 	movi	r4,2
 800da84:	04c200b4 	movhi	r19,2050
 800da88:	1085883a 	add	r2,r2,r2
 800da8c:	9ce2c404 	addi	r19,r19,-29936
 800da90:	1085883a 	add	r2,r2,r2
 800da94:	9885883a 	add	r2,r19,r2
 800da98:	14000117 	ldw	r16,4(r2)
 800da9c:	10fffe04 	addi	r3,r2,-8
 800daa0:	80c0d926 	beq	r16,r3,800de08 <_malloc_r+0x5d0>
 800daa4:	80c00117 	ldw	r3,4(r16)
 800daa8:	81000317 	ldw	r4,12(r16)
 800daac:	00bfff04 	movi	r2,-4
 800dab0:	1884703a 	and	r2,r3,r2
 800dab4:	81400217 	ldw	r5,8(r16)
 800dab8:	8085883a 	add	r2,r16,r2
 800dabc:	10c00117 	ldw	r3,4(r2)
 800dac0:	29000315 	stw	r4,12(r5)
 800dac4:	21400215 	stw	r5,8(r4)
 800dac8:	18c00054 	ori	r3,r3,1
 800dacc:	10c00115 	stw	r3,4(r2)
 800dad0:	9009883a 	mov	r4,r18
 800dad4:	80159440 	call	8015944 <__malloc_unlock>
 800dad8:	80800204 	addi	r2,r16,8
 800dadc:	dfc00a17 	ldw	ra,40(sp)
 800dae0:	df000917 	ldw	fp,36(sp)
 800dae4:	ddc00817 	ldw	r23,32(sp)
 800dae8:	dd800717 	ldw	r22,28(sp)
 800daec:	dd400617 	ldw	r21,24(sp)
 800daf0:	dd000517 	ldw	r20,20(sp)
 800daf4:	dcc00417 	ldw	r19,16(sp)
 800daf8:	dc800317 	ldw	r18,12(sp)
 800dafc:	dc400217 	ldw	r17,8(sp)
 800db00:	dc000117 	ldw	r16,4(sp)
 800db04:	dec00b04 	addi	sp,sp,44
 800db08:	f800283a 	ret
 800db0c:	00800304 	movi	r2,12
 800db10:	90800015 	stw	r2,0(r18)
 800db14:	0005883a 	mov	r2,zero
 800db18:	003ff006 	br	800dadc <_malloc_r+0x2a4>
 800db1c:	01002004 	movi	r4,128
 800db20:	02001004 	movi	r8,64
 800db24:	01c00fc4 	movi	r7,63
 800db28:	003f6106 	br	800d8b0 <_malloc_r+0x78>
 800db2c:	4009883a 	mov	r4,r8
 800db30:	003f7506 	br	800d908 <_malloc_r+0xd0>
 800db34:	81000317 	ldw	r4,12(r16)
 800db38:	003fde06 	br	800dab4 <_malloc_r+0x27c>
 800db3c:	81c5883a 	add	r2,r16,r7
 800db40:	11400117 	ldw	r5,4(r2)
 800db44:	9009883a 	mov	r4,r18
 800db48:	29400054 	ori	r5,r5,1
 800db4c:	11400115 	stw	r5,4(r2)
 800db50:	80159440 	call	8015944 <__malloc_unlock>
 800db54:	80800204 	addi	r2,r16,8
 800db58:	003fe006 	br	800dadc <_malloc_r+0x2a4>
 800db5c:	9c000217 	ldw	r16,8(r19)
 800db60:	00bfff04 	movi	r2,-4
 800db64:	85800117 	ldw	r22,4(r16)
 800db68:	b0ac703a 	and	r22,r22,r2
 800db6c:	b4400336 	bltu	r22,r17,800db7c <_malloc_r+0x344>
 800db70:	b445c83a 	sub	r2,r22,r17
 800db74:	00c003c4 	movi	r3,15
 800db78:	18805d16 	blt	r3,r2,800dcf0 <_malloc_r+0x4b8>
 800db7c:	05c200b4 	movhi	r23,2050
 800db80:	008200b4 	movhi	r2,2050
 800db84:	10af7a04 	addi	r2,r2,-16920
 800db88:	bde85a04 	addi	r23,r23,-24216
 800db8c:	15400017 	ldw	r21,0(r2)
 800db90:	b8c00017 	ldw	r3,0(r23)
 800db94:	00bfffc4 	movi	r2,-1
 800db98:	858d883a 	add	r6,r16,r22
 800db9c:	8d6b883a 	add	r21,r17,r21
 800dba0:	1880ea26 	beq	r3,r2,800df4c <_malloc_r+0x714>
 800dba4:	ad4403c4 	addi	r21,r21,4111
 800dba8:	00bc0004 	movi	r2,-4096
 800dbac:	a8aa703a 	and	r21,r21,r2
 800dbb0:	a80b883a 	mov	r5,r21
 800dbb4:	9009883a 	mov	r4,r18
 800dbb8:	d9800015 	stw	r6,0(sp)
 800dbbc:	800fa7c0 	call	800fa7c <_sbrk_r>
 800dbc0:	1029883a 	mov	r20,r2
 800dbc4:	00bfffc4 	movi	r2,-1
 800dbc8:	d9800017 	ldw	r6,0(sp)
 800dbcc:	a080e826 	beq	r20,r2,800df70 <_malloc_r+0x738>
 800dbd0:	a180a636 	bltu	r20,r6,800de6c <_malloc_r+0x634>
 800dbd4:	070200b4 	movhi	fp,2050
 800dbd8:	e7304f04 	addi	fp,fp,-16068
 800dbdc:	e0800017 	ldw	r2,0(fp)
 800dbe0:	a887883a 	add	r3,r21,r2
 800dbe4:	e0c00015 	stw	r3,0(fp)
 800dbe8:	3500e626 	beq	r6,r20,800df84 <_malloc_r+0x74c>
 800dbec:	b9000017 	ldw	r4,0(r23)
 800dbf0:	00bfffc4 	movi	r2,-1
 800dbf4:	2080ee26 	beq	r4,r2,800dfb0 <_malloc_r+0x778>
 800dbf8:	a185c83a 	sub	r2,r20,r6
 800dbfc:	10c5883a 	add	r2,r2,r3
 800dc00:	e0800015 	stw	r2,0(fp)
 800dc04:	a0c001cc 	andi	r3,r20,7
 800dc08:	1800bc26 	beq	r3,zero,800defc <_malloc_r+0x6c4>
 800dc0c:	a0e9c83a 	sub	r20,r20,r3
 800dc10:	00840204 	movi	r2,4104
 800dc14:	a5000204 	addi	r20,r20,8
 800dc18:	10c7c83a 	sub	r3,r2,r3
 800dc1c:	a545883a 	add	r2,r20,r21
 800dc20:	1083ffcc 	andi	r2,r2,4095
 800dc24:	18abc83a 	sub	r21,r3,r2
 800dc28:	a80b883a 	mov	r5,r21
 800dc2c:	9009883a 	mov	r4,r18
 800dc30:	800fa7c0 	call	800fa7c <_sbrk_r>
 800dc34:	00ffffc4 	movi	r3,-1
 800dc38:	10c0e126 	beq	r2,r3,800dfc0 <_malloc_r+0x788>
 800dc3c:	1505c83a 	sub	r2,r2,r20
 800dc40:	1545883a 	add	r2,r2,r21
 800dc44:	10800054 	ori	r2,r2,1
 800dc48:	e0c00017 	ldw	r3,0(fp)
 800dc4c:	9d000215 	stw	r20,8(r19)
 800dc50:	a0800115 	stw	r2,4(r20)
 800dc54:	a8c7883a 	add	r3,r21,r3
 800dc58:	e0c00015 	stw	r3,0(fp)
 800dc5c:	84c00e26 	beq	r16,r19,800dc98 <_malloc_r+0x460>
 800dc60:	018003c4 	movi	r6,15
 800dc64:	3580a72e 	bgeu	r6,r22,800df04 <_malloc_r+0x6cc>
 800dc68:	81400117 	ldw	r5,4(r16)
 800dc6c:	013ffe04 	movi	r4,-8
 800dc70:	b0bffd04 	addi	r2,r22,-12
 800dc74:	1104703a 	and	r2,r2,r4
 800dc78:	2900004c 	andi	r4,r5,1
 800dc7c:	2088b03a 	or	r4,r4,r2
 800dc80:	81000115 	stw	r4,4(r16)
 800dc84:	01400144 	movi	r5,5
 800dc88:	8089883a 	add	r4,r16,r2
 800dc8c:	21400115 	stw	r5,4(r4)
 800dc90:	21400215 	stw	r5,8(r4)
 800dc94:	3080cd36 	bltu	r6,r2,800dfcc <_malloc_r+0x794>
 800dc98:	008200b4 	movhi	r2,2050
 800dc9c:	10af7904 	addi	r2,r2,-16924
 800dca0:	11000017 	ldw	r4,0(r2)
 800dca4:	20c0012e 	bgeu	r4,r3,800dcac <_malloc_r+0x474>
 800dca8:	10c00015 	stw	r3,0(r2)
 800dcac:	008200b4 	movhi	r2,2050
 800dcb0:	10af7804 	addi	r2,r2,-16928
 800dcb4:	11000017 	ldw	r4,0(r2)
 800dcb8:	9c000217 	ldw	r16,8(r19)
 800dcbc:	20c0012e 	bgeu	r4,r3,800dcc4 <_malloc_r+0x48c>
 800dcc0:	10c00015 	stw	r3,0(r2)
 800dcc4:	80c00117 	ldw	r3,4(r16)
 800dcc8:	00bfff04 	movi	r2,-4
 800dccc:	1886703a 	and	r3,r3,r2
 800dcd0:	1c45c83a 	sub	r2,r3,r17
 800dcd4:	1c400236 	bltu	r3,r17,800dce0 <_malloc_r+0x4a8>
 800dcd8:	00c003c4 	movi	r3,15
 800dcdc:	18800416 	blt	r3,r2,800dcf0 <_malloc_r+0x4b8>
 800dce0:	9009883a 	mov	r4,r18
 800dce4:	80159440 	call	8015944 <__malloc_unlock>
 800dce8:	0005883a 	mov	r2,zero
 800dcec:	003f7b06 	br	800dadc <_malloc_r+0x2a4>
 800dcf0:	88c00054 	ori	r3,r17,1
 800dcf4:	80c00115 	stw	r3,4(r16)
 800dcf8:	8463883a 	add	r17,r16,r17
 800dcfc:	10800054 	ori	r2,r2,1
 800dd00:	9c400215 	stw	r17,8(r19)
 800dd04:	88800115 	stw	r2,4(r17)
 800dd08:	9009883a 	mov	r4,r18
 800dd0c:	80159440 	call	8015944 <__malloc_unlock>
 800dd10:	80800204 	addi	r2,r16,8
 800dd14:	003f7106 	br	800dadc <_malloc_r+0x2a4>
 800dd18:	00c00504 	movi	r3,20
 800dd1c:	18804a2e 	bgeu	r3,r2,800de48 <_malloc_r+0x610>
 800dd20:	00c01504 	movi	r3,84
 800dd24:	18806e36 	bltu	r3,r2,800dee0 <_malloc_r+0x6a8>
 800dd28:	8804d33a 	srli	r2,r17,12
 800dd2c:	12001bc4 	addi	r8,r2,111
 800dd30:	11c01b84 	addi	r7,r2,110
 800dd34:	4209883a 	add	r4,r8,r8
 800dd38:	003edd06 	br	800d8b0 <_malloc_r+0x78>
 800dd3c:	3804d27a 	srli	r2,r7,9
 800dd40:	00c00104 	movi	r3,4
 800dd44:	1880442e 	bgeu	r3,r2,800de58 <_malloc_r+0x620>
 800dd48:	00c00504 	movi	r3,20
 800dd4c:	18808136 	bltu	r3,r2,800df54 <_malloc_r+0x71c>
 800dd50:	11401704 	addi	r5,r2,92
 800dd54:	10c016c4 	addi	r3,r2,91
 800dd58:	294b883a 	add	r5,r5,r5
 800dd5c:	294b883a 	add	r5,r5,r5
 800dd60:	294b883a 	add	r5,r5,r5
 800dd64:	994b883a 	add	r5,r19,r5
 800dd68:	28800017 	ldw	r2,0(r5)
 800dd6c:	018200b4 	movhi	r6,2050
 800dd70:	297ffe04 	addi	r5,r5,-8
 800dd74:	31a2c404 	addi	r6,r6,-29936
 800dd78:	28806526 	beq	r5,r2,800df10 <_malloc_r+0x6d8>
 800dd7c:	01bfff04 	movi	r6,-4
 800dd80:	10c00117 	ldw	r3,4(r2)
 800dd84:	1986703a 	and	r3,r3,r6
 800dd88:	38c0022e 	bgeu	r7,r3,800dd94 <_malloc_r+0x55c>
 800dd8c:	10800217 	ldw	r2,8(r2)
 800dd90:	28bffb1e 	bne	r5,r2,800dd80 <_malloc_r+0x548>
 800dd94:	11400317 	ldw	r5,12(r2)
 800dd98:	98c00117 	ldw	r3,4(r19)
 800dd9c:	81400315 	stw	r5,12(r16)
 800dda0:	80800215 	stw	r2,8(r16)
 800dda4:	2c000215 	stw	r16,8(r5)
 800dda8:	14000315 	stw	r16,12(r2)
 800ddac:	003ef806 	br	800d990 <_malloc_r+0x158>
 800ddb0:	88c00054 	ori	r3,r17,1
 800ddb4:	80c00115 	stw	r3,4(r16)
 800ddb8:	8463883a 	add	r17,r16,r17
 800ddbc:	34400515 	stw	r17,20(r6)
 800ddc0:	34400415 	stw	r17,16(r6)
 800ddc4:	10c00054 	ori	r3,r2,1
 800ddc8:	8a000315 	stw	r8,12(r17)
 800ddcc:	8a000215 	stw	r8,8(r17)
 800ddd0:	88c00115 	stw	r3,4(r17)
 800ddd4:	88a3883a 	add	r17,r17,r2
 800ddd8:	88800015 	stw	r2,0(r17)
 800dddc:	9009883a 	mov	r4,r18
 800dde0:	80159440 	call	8015944 <__malloc_unlock>
 800dde4:	80800204 	addi	r2,r16,8
 800dde8:	003f3c06 	br	800dadc <_malloc_r+0x2a4>
 800ddec:	30c00117 	ldw	r3,4(r6)
 800ddf0:	003ee706 	br	800d990 <_malloc_r+0x158>
 800ddf4:	5ac00044 	addi	r11,r11,1
 800ddf8:	588000cc 	andi	r2,r11,3
 800ddfc:	31800204 	addi	r6,r6,8
 800de00:	103efd1e 	bne	r2,zero,800d9f8 <_malloc_r+0x1c0>
 800de04:	00002406 	br	800de98 <_malloc_r+0x660>
 800de08:	14000317 	ldw	r16,12(r2)
 800de0c:	143f251e 	bne	r2,r16,800daa4 <_malloc_r+0x26c>
 800de10:	21000084 	addi	r4,r4,2
 800de14:	003ebc06 	br	800d908 <_malloc_r+0xd0>
 800de18:	8085883a 	add	r2,r16,r2
 800de1c:	10c00117 	ldw	r3,4(r2)
 800de20:	81000317 	ldw	r4,12(r16)
 800de24:	81400217 	ldw	r5,8(r16)
 800de28:	18c00054 	ori	r3,r3,1
 800de2c:	10c00115 	stw	r3,4(r2)
 800de30:	29000315 	stw	r4,12(r5)
 800de34:	21400215 	stw	r5,8(r4)
 800de38:	9009883a 	mov	r4,r18
 800de3c:	80159440 	call	8015944 <__malloc_unlock>
 800de40:	80800204 	addi	r2,r16,8
 800de44:	003f2506 	br	800dadc <_malloc_r+0x2a4>
 800de48:	12001704 	addi	r8,r2,92
 800de4c:	11c016c4 	addi	r7,r2,91
 800de50:	4209883a 	add	r4,r8,r8
 800de54:	003e9606 	br	800d8b0 <_malloc_r+0x78>
 800de58:	3804d1ba 	srli	r2,r7,6
 800de5c:	11400e44 	addi	r5,r2,57
 800de60:	10c00e04 	addi	r3,r2,56
 800de64:	294b883a 	add	r5,r5,r5
 800de68:	003fbc06 	br	800dd5c <_malloc_r+0x524>
 800de6c:	84ff5926 	beq	r16,r19,800dbd4 <_malloc_r+0x39c>
 800de70:	008200b4 	movhi	r2,2050
 800de74:	10a2c404 	addi	r2,r2,-29936
 800de78:	14000217 	ldw	r16,8(r2)
 800de7c:	00bfff04 	movi	r2,-4
 800de80:	80c00117 	ldw	r3,4(r16)
 800de84:	1886703a 	and	r3,r3,r2
 800de88:	003f9106 	br	800dcd0 <_malloc_r+0x498>
 800de8c:	60800217 	ldw	r2,8(r12)
 800de90:	213fffc4 	addi	r4,r4,-1
 800de94:	1300651e 	bne	r2,r12,800e02c <_malloc_r+0x7f4>
 800de98:	208000cc 	andi	r2,r4,3
 800de9c:	633ffe04 	addi	r12,r12,-8
 800dea0:	103ffa1e 	bne	r2,zero,800de8c <_malloc_r+0x654>
 800dea4:	98800117 	ldw	r2,4(r19)
 800dea8:	0146303a 	nor	r3,zero,r5
 800deac:	1884703a 	and	r2,r3,r2
 800deb0:	98800115 	stw	r2,4(r19)
 800deb4:	294b883a 	add	r5,r5,r5
 800deb8:	117f2836 	bltu	r2,r5,800db5c <_malloc_r+0x324>
 800debc:	283f2726 	beq	r5,zero,800db5c <_malloc_r+0x324>
 800dec0:	2886703a 	and	r3,r5,r2
 800dec4:	5809883a 	mov	r4,r11
 800dec8:	183ec31e 	bne	r3,zero,800d9d8 <_malloc_r+0x1a0>
 800decc:	294b883a 	add	r5,r5,r5
 800ded0:	2886703a 	and	r3,r5,r2
 800ded4:	21000104 	addi	r4,r4,4
 800ded8:	183ffc26 	beq	r3,zero,800decc <_malloc_r+0x694>
 800dedc:	003ebe06 	br	800d9d8 <_malloc_r+0x1a0>
 800dee0:	00c05504 	movi	r3,340
 800dee4:	18801236 	bltu	r3,r2,800df30 <_malloc_r+0x6f8>
 800dee8:	8804d3fa 	srli	r2,r17,15
 800deec:	12001e04 	addi	r8,r2,120
 800def0:	11c01dc4 	addi	r7,r2,119
 800def4:	4209883a 	add	r4,r8,r8
 800def8:	003e6d06 	br	800d8b0 <_malloc_r+0x78>
 800defc:	00c40004 	movi	r3,4096
 800df00:	003f4606 	br	800dc1c <_malloc_r+0x3e4>
 800df04:	00800044 	movi	r2,1
 800df08:	a0800115 	stw	r2,4(r20)
 800df0c:	003f7406 	br	800dce0 <_malloc_r+0x4a8>
 800df10:	1805d0ba 	srai	r2,r3,2
 800df14:	01c00044 	movi	r7,1
 800df18:	30c00117 	ldw	r3,4(r6)
 800df1c:	388e983a 	sll	r7,r7,r2
 800df20:	2805883a 	mov	r2,r5
 800df24:	38c6b03a 	or	r3,r7,r3
 800df28:	30c00115 	stw	r3,4(r6)
 800df2c:	003f9b06 	br	800dd9c <_malloc_r+0x564>
 800df30:	00c15504 	movi	r3,1364
 800df34:	18801a36 	bltu	r3,r2,800dfa0 <_malloc_r+0x768>
 800df38:	8804d4ba 	srli	r2,r17,18
 800df3c:	12001f44 	addi	r8,r2,125
 800df40:	11c01f04 	addi	r7,r2,124
 800df44:	4209883a 	add	r4,r8,r8
 800df48:	003e5906 	br	800d8b0 <_malloc_r+0x78>
 800df4c:	ad400404 	addi	r21,r21,16
 800df50:	003f1706 	br	800dbb0 <_malloc_r+0x378>
 800df54:	00c01504 	movi	r3,84
 800df58:	18802336 	bltu	r3,r2,800dfe8 <_malloc_r+0x7b0>
 800df5c:	3804d33a 	srli	r2,r7,12
 800df60:	11401bc4 	addi	r5,r2,111
 800df64:	10c01b84 	addi	r3,r2,110
 800df68:	294b883a 	add	r5,r5,r5
 800df6c:	003f7b06 	br	800dd5c <_malloc_r+0x524>
 800df70:	9c000217 	ldw	r16,8(r19)
 800df74:	00bfff04 	movi	r2,-4
 800df78:	80c00117 	ldw	r3,4(r16)
 800df7c:	1886703a 	and	r3,r3,r2
 800df80:	003f5306 	br	800dcd0 <_malloc_r+0x498>
 800df84:	3083ffcc 	andi	r2,r6,4095
 800df88:	103f181e 	bne	r2,zero,800dbec <_malloc_r+0x3b4>
 800df8c:	99000217 	ldw	r4,8(r19)
 800df90:	b545883a 	add	r2,r22,r21
 800df94:	10800054 	ori	r2,r2,1
 800df98:	20800115 	stw	r2,4(r4)
 800df9c:	003f3e06 	br	800dc98 <_malloc_r+0x460>
 800dfa0:	01003f84 	movi	r4,254
 800dfa4:	02001fc4 	movi	r8,127
 800dfa8:	01c01f84 	movi	r7,126
 800dfac:	003e4006 	br	800d8b0 <_malloc_r+0x78>
 800dfb0:	008200b4 	movhi	r2,2050
 800dfb4:	10a85a04 	addi	r2,r2,-24216
 800dfb8:	15000015 	stw	r20,0(r2)
 800dfbc:	003f1106 	br	800dc04 <_malloc_r+0x3cc>
 800dfc0:	00800044 	movi	r2,1
 800dfc4:	002b883a 	mov	r21,zero
 800dfc8:	003f1f06 	br	800dc48 <_malloc_r+0x410>
 800dfcc:	81400204 	addi	r5,r16,8
 800dfd0:	9009883a 	mov	r4,r18
 800dfd4:	800cbe40 	call	800cbe4 <_free_r>
 800dfd8:	008200b4 	movhi	r2,2050
 800dfdc:	10b04f04 	addi	r2,r2,-16068
 800dfe0:	10c00017 	ldw	r3,0(r2)
 800dfe4:	003f2c06 	br	800dc98 <_malloc_r+0x460>
 800dfe8:	00c05504 	movi	r3,340
 800dfec:	18800536 	bltu	r3,r2,800e004 <_malloc_r+0x7cc>
 800dff0:	3804d3fa 	srli	r2,r7,15
 800dff4:	11401e04 	addi	r5,r2,120
 800dff8:	10c01dc4 	addi	r3,r2,119
 800dffc:	294b883a 	add	r5,r5,r5
 800e000:	003f5606 	br	800dd5c <_malloc_r+0x524>
 800e004:	00c15504 	movi	r3,1364
 800e008:	18800536 	bltu	r3,r2,800e020 <_malloc_r+0x7e8>
 800e00c:	3804d4ba 	srli	r2,r7,18
 800e010:	11401f44 	addi	r5,r2,125
 800e014:	10c01f04 	addi	r3,r2,124
 800e018:	294b883a 	add	r5,r5,r5
 800e01c:	003f4f06 	br	800dd5c <_malloc_r+0x524>
 800e020:	01403f84 	movi	r5,254
 800e024:	00c01f84 	movi	r3,126
 800e028:	003f4c06 	br	800dd5c <_malloc_r+0x524>
 800e02c:	98800117 	ldw	r2,4(r19)
 800e030:	003fa006 	br	800deb4 <_malloc_r+0x67c>
 800e034:	8808d0fa 	srli	r4,r17,3
 800e038:	20800044 	addi	r2,r4,1
 800e03c:	1085883a 	add	r2,r2,r2
 800e040:	003e9006 	br	800da84 <_malloc_r+0x24c>

0800e044 <memchr>:
 800e044:	208000cc 	andi	r2,r4,3
 800e048:	280f883a 	mov	r7,r5
 800e04c:	10003426 	beq	r2,zero,800e120 <memchr+0xdc>
 800e050:	30bfffc4 	addi	r2,r6,-1
 800e054:	30001a26 	beq	r6,zero,800e0c0 <memchr+0x7c>
 800e058:	20c00003 	ldbu	r3,0(r4)
 800e05c:	29803fcc 	andi	r6,r5,255
 800e060:	30c0051e 	bne	r6,r3,800e078 <memchr+0x34>
 800e064:	00001806 	br	800e0c8 <memchr+0x84>
 800e068:	10001526 	beq	r2,zero,800e0c0 <memchr+0x7c>
 800e06c:	20c00003 	ldbu	r3,0(r4)
 800e070:	10bfffc4 	addi	r2,r2,-1
 800e074:	30c01426 	beq	r6,r3,800e0c8 <memchr+0x84>
 800e078:	21000044 	addi	r4,r4,1
 800e07c:	20c000cc 	andi	r3,r4,3
 800e080:	183ff91e 	bne	r3,zero,800e068 <memchr+0x24>
 800e084:	020000c4 	movi	r8,3
 800e088:	40801136 	bltu	r8,r2,800e0d0 <memchr+0x8c>
 800e08c:	10000c26 	beq	r2,zero,800e0c0 <memchr+0x7c>
 800e090:	20c00003 	ldbu	r3,0(r4)
 800e094:	29403fcc 	andi	r5,r5,255
 800e098:	28c00b26 	beq	r5,r3,800e0c8 <memchr+0x84>
 800e09c:	20c00044 	addi	r3,r4,1
 800e0a0:	39803fcc 	andi	r6,r7,255
 800e0a4:	2089883a 	add	r4,r4,r2
 800e0a8:	00000306 	br	800e0b8 <memchr+0x74>
 800e0ac:	18c00044 	addi	r3,r3,1
 800e0b0:	197fffc3 	ldbu	r5,-1(r3)
 800e0b4:	31400526 	beq	r6,r5,800e0cc <memchr+0x88>
 800e0b8:	1805883a 	mov	r2,r3
 800e0bc:	20fffb1e 	bne	r4,r3,800e0ac <memchr+0x68>
 800e0c0:	0005883a 	mov	r2,zero
 800e0c4:	f800283a 	ret
 800e0c8:	2005883a 	mov	r2,r4
 800e0cc:	f800283a 	ret
 800e0d0:	28c03fcc 	andi	r3,r5,255
 800e0d4:	1812923a 	slli	r9,r3,8
 800e0d8:	02ffbff4 	movhi	r11,65279
 800e0dc:	02a02074 	movhi	r10,32897
 800e0e0:	48d2b03a 	or	r9,r9,r3
 800e0e4:	4806943a 	slli	r3,r9,16
 800e0e8:	5affbfc4 	addi	r11,r11,-257
 800e0ec:	52a02004 	addi	r10,r10,-32640
 800e0f0:	48d2b03a 	or	r9,r9,r3
 800e0f4:	20c00017 	ldw	r3,0(r4)
 800e0f8:	48c6f03a 	xor	r3,r9,r3
 800e0fc:	1acd883a 	add	r6,r3,r11
 800e100:	00c6303a 	nor	r3,zero,r3
 800e104:	30c6703a 	and	r3,r6,r3
 800e108:	1a86703a 	and	r3,r3,r10
 800e10c:	183fe01e 	bne	r3,zero,800e090 <memchr+0x4c>
 800e110:	10bfff04 	addi	r2,r2,-4
 800e114:	21000104 	addi	r4,r4,4
 800e118:	40bff636 	bltu	r8,r2,800e0f4 <memchr+0xb0>
 800e11c:	003fdb06 	br	800e08c <memchr+0x48>
 800e120:	3005883a 	mov	r2,r6
 800e124:	003fd706 	br	800e084 <memchr+0x40>

0800e128 <memmove>:
 800e128:	2005883a 	mov	r2,r4
 800e12c:	29000b2e 	bgeu	r5,r4,800e15c <memmove+0x34>
 800e130:	298f883a 	add	r7,r5,r6
 800e134:	21c0092e 	bgeu	r4,r7,800e15c <memmove+0x34>
 800e138:	2187883a 	add	r3,r4,r6
 800e13c:	198bc83a 	sub	r5,r3,r6
 800e140:	30004826 	beq	r6,zero,800e264 <memmove+0x13c>
 800e144:	39ffffc4 	addi	r7,r7,-1
 800e148:	39000003 	ldbu	r4,0(r7)
 800e14c:	18ffffc4 	addi	r3,r3,-1
 800e150:	19000005 	stb	r4,0(r3)
 800e154:	28fffb1e 	bne	r5,r3,800e144 <memmove+0x1c>
 800e158:	f800283a 	ret
 800e15c:	00c003c4 	movi	r3,15
 800e160:	1980412e 	bgeu	r3,r6,800e268 <memmove+0x140>
 800e164:	2886b03a 	or	r3,r5,r2
 800e168:	18c000cc 	andi	r3,r3,3
 800e16c:	1800401e 	bne	r3,zero,800e270 <memmove+0x148>
 800e170:	33fffc04 	addi	r15,r6,-16
 800e174:	781ed13a 	srli	r15,r15,4
 800e178:	28c00104 	addi	r3,r5,4
 800e17c:	13400104 	addi	r13,r2,4
 800e180:	781c913a 	slli	r14,r15,4
 800e184:	2b000204 	addi	r12,r5,8
 800e188:	12c00204 	addi	r11,r2,8
 800e18c:	73800504 	addi	r14,r14,20
 800e190:	2a800304 	addi	r10,r5,12
 800e194:	12400304 	addi	r9,r2,12
 800e198:	2b9d883a 	add	r14,r5,r14
 800e19c:	2811883a 	mov	r8,r5
 800e1a0:	100f883a 	mov	r7,r2
 800e1a4:	41000017 	ldw	r4,0(r8)
 800e1a8:	39c00404 	addi	r7,r7,16
 800e1ac:	18c00404 	addi	r3,r3,16
 800e1b0:	393ffc15 	stw	r4,-16(r7)
 800e1b4:	193ffc17 	ldw	r4,-16(r3)
 800e1b8:	6b400404 	addi	r13,r13,16
 800e1bc:	5ac00404 	addi	r11,r11,16
 800e1c0:	693ffc15 	stw	r4,-16(r13)
 800e1c4:	61000017 	ldw	r4,0(r12)
 800e1c8:	4a400404 	addi	r9,r9,16
 800e1cc:	42000404 	addi	r8,r8,16
 800e1d0:	593ffc15 	stw	r4,-16(r11)
 800e1d4:	51000017 	ldw	r4,0(r10)
 800e1d8:	63000404 	addi	r12,r12,16
 800e1dc:	52800404 	addi	r10,r10,16
 800e1e0:	493ffc15 	stw	r4,-16(r9)
 800e1e4:	1bbfef1e 	bne	r3,r14,800e1a4 <memmove+0x7c>
 800e1e8:	79000044 	addi	r4,r15,1
 800e1ec:	2008913a 	slli	r4,r4,4
 800e1f0:	328003cc 	andi	r10,r6,15
 800e1f4:	02c000c4 	movi	r11,3
 800e1f8:	1107883a 	add	r3,r2,r4
 800e1fc:	290b883a 	add	r5,r5,r4
 800e200:	5a801e2e 	bgeu	r11,r10,800e27c <memmove+0x154>
 800e204:	1813883a 	mov	r9,r3
 800e208:	2811883a 	mov	r8,r5
 800e20c:	500f883a 	mov	r7,r10
 800e210:	41000017 	ldw	r4,0(r8)
 800e214:	4a400104 	addi	r9,r9,4
 800e218:	39ffff04 	addi	r7,r7,-4
 800e21c:	493fff15 	stw	r4,-4(r9)
 800e220:	42000104 	addi	r8,r8,4
 800e224:	59fffa36 	bltu	r11,r7,800e210 <memmove+0xe8>
 800e228:	513fff04 	addi	r4,r10,-4
 800e22c:	2008d0ba 	srli	r4,r4,2
 800e230:	318000cc 	andi	r6,r6,3
 800e234:	21000044 	addi	r4,r4,1
 800e238:	2109883a 	add	r4,r4,r4
 800e23c:	2109883a 	add	r4,r4,r4
 800e240:	1907883a 	add	r3,r3,r4
 800e244:	290b883a 	add	r5,r5,r4
 800e248:	30000b26 	beq	r6,zero,800e278 <memmove+0x150>
 800e24c:	198d883a 	add	r6,r3,r6
 800e250:	29c00003 	ldbu	r7,0(r5)
 800e254:	18c00044 	addi	r3,r3,1
 800e258:	29400044 	addi	r5,r5,1
 800e25c:	19ffffc5 	stb	r7,-1(r3)
 800e260:	19bffb1e 	bne	r3,r6,800e250 <memmove+0x128>
 800e264:	f800283a 	ret
 800e268:	1007883a 	mov	r3,r2
 800e26c:	003ff606 	br	800e248 <memmove+0x120>
 800e270:	1007883a 	mov	r3,r2
 800e274:	003ff506 	br	800e24c <memmove+0x124>
 800e278:	f800283a 	ret
 800e27c:	500d883a 	mov	r6,r10
 800e280:	003ff106 	br	800e248 <memmove+0x120>

0800e284 <_Balloc>:
 800e284:	20801317 	ldw	r2,76(r4)
 800e288:	defffc04 	addi	sp,sp,-16
 800e28c:	dc400115 	stw	r17,4(sp)
 800e290:	dc000015 	stw	r16,0(sp)
 800e294:	dfc00315 	stw	ra,12(sp)
 800e298:	dc800215 	stw	r18,8(sp)
 800e29c:	2023883a 	mov	r17,r4
 800e2a0:	2821883a 	mov	r16,r5
 800e2a4:	10000f26 	beq	r2,zero,800e2e4 <_Balloc+0x60>
 800e2a8:	8407883a 	add	r3,r16,r16
 800e2ac:	18c7883a 	add	r3,r3,r3
 800e2b0:	10c7883a 	add	r3,r2,r3
 800e2b4:	18800017 	ldw	r2,0(r3)
 800e2b8:	10001126 	beq	r2,zero,800e300 <_Balloc+0x7c>
 800e2bc:	11000017 	ldw	r4,0(r2)
 800e2c0:	19000015 	stw	r4,0(r3)
 800e2c4:	10000415 	stw	zero,16(r2)
 800e2c8:	10000315 	stw	zero,12(r2)
 800e2cc:	dfc00317 	ldw	ra,12(sp)
 800e2d0:	dc800217 	ldw	r18,8(sp)
 800e2d4:	dc400117 	ldw	r17,4(sp)
 800e2d8:	dc000017 	ldw	r16,0(sp)
 800e2dc:	dec00404 	addi	sp,sp,16
 800e2e0:	f800283a 	ret
 800e2e4:	01800844 	movi	r6,33
 800e2e8:	01400104 	movi	r5,4
 800e2ec:	80115ec0 	call	80115ec <_calloc_r>
 800e2f0:	88801315 	stw	r2,76(r17)
 800e2f4:	103fec1e 	bne	r2,zero,800e2a8 <_Balloc+0x24>
 800e2f8:	0005883a 	mov	r2,zero
 800e2fc:	003ff306 	br	800e2cc <_Balloc+0x48>
 800e300:	01400044 	movi	r5,1
 800e304:	2c24983a 	sll	r18,r5,r16
 800e308:	8809883a 	mov	r4,r17
 800e30c:	91800144 	addi	r6,r18,5
 800e310:	318d883a 	add	r6,r6,r6
 800e314:	318d883a 	add	r6,r6,r6
 800e318:	80115ec0 	call	80115ec <_calloc_r>
 800e31c:	103ff626 	beq	r2,zero,800e2f8 <_Balloc+0x74>
 800e320:	14000115 	stw	r16,4(r2)
 800e324:	14800215 	stw	r18,8(r2)
 800e328:	003fe606 	br	800e2c4 <_Balloc+0x40>

0800e32c <_Bfree>:
 800e32c:	28000826 	beq	r5,zero,800e350 <_Bfree+0x24>
 800e330:	28c00117 	ldw	r3,4(r5)
 800e334:	20801317 	ldw	r2,76(r4)
 800e338:	18c7883a 	add	r3,r3,r3
 800e33c:	18c7883a 	add	r3,r3,r3
 800e340:	10c5883a 	add	r2,r2,r3
 800e344:	10c00017 	ldw	r3,0(r2)
 800e348:	28c00015 	stw	r3,0(r5)
 800e34c:	11400015 	stw	r5,0(r2)
 800e350:	f800283a 	ret

0800e354 <__multadd>:
 800e354:	defff704 	addi	sp,sp,-36
 800e358:	dc800215 	stw	r18,8(sp)
 800e35c:	2c800417 	ldw	r18,16(r5)
 800e360:	dd800615 	stw	r22,24(sp)
 800e364:	dd400515 	stw	r21,20(sp)
 800e368:	dd000415 	stw	r20,16(sp)
 800e36c:	dcc00315 	stw	r19,12(sp)
 800e370:	dc400115 	stw	r17,4(sp)
 800e374:	dc000015 	stw	r16,0(sp)
 800e378:	dfc00815 	stw	ra,32(sp)
 800e37c:	ddc00715 	stw	r23,28(sp)
 800e380:	2827883a 	mov	r19,r5
 800e384:	2029883a 	mov	r20,r4
 800e388:	3023883a 	mov	r17,r6
 800e38c:	3821883a 	mov	r16,r7
 800e390:	2d400504 	addi	r21,r5,20
 800e394:	002d883a 	mov	r22,zero
 800e398:	adc00017 	ldw	r23,0(r21)
 800e39c:	880b883a 	mov	r5,r17
 800e3a0:	ad400104 	addi	r21,r21,4
 800e3a4:	b93fffcc 	andi	r4,r23,65535
 800e3a8:	8007e400 	call	8007e40 <__mulsi3>
 800e3ac:	b808d43a 	srli	r4,r23,16
 800e3b0:	880b883a 	mov	r5,r17
 800e3b4:	1421883a 	add	r16,r2,r16
 800e3b8:	8007e400 	call	8007e40 <__mulsi3>
 800e3bc:	800ed43a 	srli	r7,r16,16
 800e3c0:	80ffffcc 	andi	r3,r16,65535
 800e3c4:	b5800044 	addi	r22,r22,1
 800e3c8:	11c5883a 	add	r2,r2,r7
 800e3cc:	100e943a 	slli	r7,r2,16
 800e3d0:	1020d43a 	srli	r16,r2,16
 800e3d4:	38c7883a 	add	r3,r7,r3
 800e3d8:	a8ffff15 	stw	r3,-4(r21)
 800e3dc:	b4bfee16 	blt	r22,r18,800e398 <__multadd+0x44>
 800e3e0:	80000926 	beq	r16,zero,800e408 <__multadd+0xb4>
 800e3e4:	98800217 	ldw	r2,8(r19)
 800e3e8:	9080130e 	bge	r18,r2,800e438 <__multadd+0xe4>
 800e3ec:	90800144 	addi	r2,r18,5
 800e3f0:	1085883a 	add	r2,r2,r2
 800e3f4:	1085883a 	add	r2,r2,r2
 800e3f8:	9885883a 	add	r2,r19,r2
 800e3fc:	14000015 	stw	r16,0(r2)
 800e400:	94800044 	addi	r18,r18,1
 800e404:	9c800415 	stw	r18,16(r19)
 800e408:	9805883a 	mov	r2,r19
 800e40c:	dfc00817 	ldw	ra,32(sp)
 800e410:	ddc00717 	ldw	r23,28(sp)
 800e414:	dd800617 	ldw	r22,24(sp)
 800e418:	dd400517 	ldw	r21,20(sp)
 800e41c:	dd000417 	ldw	r20,16(sp)
 800e420:	dcc00317 	ldw	r19,12(sp)
 800e424:	dc800217 	ldw	r18,8(sp)
 800e428:	dc400117 	ldw	r17,4(sp)
 800e42c:	dc000017 	ldw	r16,0(sp)
 800e430:	dec00904 	addi	sp,sp,36
 800e434:	f800283a 	ret
 800e438:	99400117 	ldw	r5,4(r19)
 800e43c:	a009883a 	mov	r4,r20
 800e440:	29400044 	addi	r5,r5,1
 800e444:	800e2840 	call	800e284 <_Balloc>
 800e448:	99800417 	ldw	r6,16(r19)
 800e44c:	99400304 	addi	r5,r19,12
 800e450:	11000304 	addi	r4,r2,12
 800e454:	31800084 	addi	r6,r6,2
 800e458:	318d883a 	add	r6,r6,r6
 800e45c:	318d883a 	add	r6,r6,r6
 800e460:	1023883a 	mov	r17,r2
 800e464:	8007fa40 	call	8007fa4 <memcpy>
 800e468:	98000a26 	beq	r19,zero,800e494 <__multadd+0x140>
 800e46c:	98c00117 	ldw	r3,4(r19)
 800e470:	a0801317 	ldw	r2,76(r20)
 800e474:	18c7883a 	add	r3,r3,r3
 800e478:	18c7883a 	add	r3,r3,r3
 800e47c:	10c5883a 	add	r2,r2,r3
 800e480:	10c00017 	ldw	r3,0(r2)
 800e484:	98c00015 	stw	r3,0(r19)
 800e488:	14c00015 	stw	r19,0(r2)
 800e48c:	8827883a 	mov	r19,r17
 800e490:	003fd606 	br	800e3ec <__multadd+0x98>
 800e494:	8827883a 	mov	r19,r17
 800e498:	003fd406 	br	800e3ec <__multadd+0x98>

0800e49c <__s2b>:
 800e49c:	defff904 	addi	sp,sp,-28
 800e4a0:	dc400115 	stw	r17,4(sp)
 800e4a4:	dc000015 	stw	r16,0(sp)
 800e4a8:	2023883a 	mov	r17,r4
 800e4ac:	2821883a 	mov	r16,r5
 800e4b0:	39000204 	addi	r4,r7,8
 800e4b4:	01400244 	movi	r5,9
 800e4b8:	dcc00315 	stw	r19,12(sp)
 800e4bc:	dc800215 	stw	r18,8(sp)
 800e4c0:	dfc00615 	stw	ra,24(sp)
 800e4c4:	dd400515 	stw	r21,20(sp)
 800e4c8:	dd000415 	stw	r20,16(sp)
 800e4cc:	3825883a 	mov	r18,r7
 800e4d0:	3027883a 	mov	r19,r6
 800e4d4:	8007c8c0 	call	8007c8c <__divsi3>
 800e4d8:	00c00044 	movi	r3,1
 800e4dc:	000b883a 	mov	r5,zero
 800e4e0:	1880030e 	bge	r3,r2,800e4f0 <__s2b+0x54>
 800e4e4:	18c7883a 	add	r3,r3,r3
 800e4e8:	29400044 	addi	r5,r5,1
 800e4ec:	18bffd16 	blt	r3,r2,800e4e4 <__s2b+0x48>
 800e4f0:	8809883a 	mov	r4,r17
 800e4f4:	800e2840 	call	800e284 <_Balloc>
 800e4f8:	d8c00717 	ldw	r3,28(sp)
 800e4fc:	10c00515 	stw	r3,20(r2)
 800e500:	00c00044 	movi	r3,1
 800e504:	10c00415 	stw	r3,16(r2)
 800e508:	00c00244 	movi	r3,9
 800e50c:	1cc0210e 	bge	r3,r19,800e594 <__s2b+0xf8>
 800e510:	80eb883a 	add	r21,r16,r3
 800e514:	a829883a 	mov	r20,r21
 800e518:	84e1883a 	add	r16,r16,r19
 800e51c:	a1c00007 	ldb	r7,0(r20)
 800e520:	01800284 	movi	r6,10
 800e524:	a5000044 	addi	r20,r20,1
 800e528:	100b883a 	mov	r5,r2
 800e52c:	39fff404 	addi	r7,r7,-48
 800e530:	8809883a 	mov	r4,r17
 800e534:	800e3540 	call	800e354 <__multadd>
 800e538:	a43ff81e 	bne	r20,r16,800e51c <__s2b+0x80>
 800e53c:	ace1883a 	add	r16,r21,r19
 800e540:	843ffe04 	addi	r16,r16,-8
 800e544:	9c800a0e 	bge	r19,r18,800e570 <__s2b+0xd4>
 800e548:	94e5c83a 	sub	r18,r18,r19
 800e54c:	84a5883a 	add	r18,r16,r18
 800e550:	81c00007 	ldb	r7,0(r16)
 800e554:	01800284 	movi	r6,10
 800e558:	84000044 	addi	r16,r16,1
 800e55c:	100b883a 	mov	r5,r2
 800e560:	39fff404 	addi	r7,r7,-48
 800e564:	8809883a 	mov	r4,r17
 800e568:	800e3540 	call	800e354 <__multadd>
 800e56c:	84bff81e 	bne	r16,r18,800e550 <__s2b+0xb4>
 800e570:	dfc00617 	ldw	ra,24(sp)
 800e574:	dd400517 	ldw	r21,20(sp)
 800e578:	dd000417 	ldw	r20,16(sp)
 800e57c:	dcc00317 	ldw	r19,12(sp)
 800e580:	dc800217 	ldw	r18,8(sp)
 800e584:	dc400117 	ldw	r17,4(sp)
 800e588:	dc000017 	ldw	r16,0(sp)
 800e58c:	dec00704 	addi	sp,sp,28
 800e590:	f800283a 	ret
 800e594:	84000284 	addi	r16,r16,10
 800e598:	1827883a 	mov	r19,r3
 800e59c:	003fe906 	br	800e544 <__s2b+0xa8>

0800e5a0 <__hi0bits>:
 800e5a0:	20bfffec 	andhi	r2,r4,65535
 800e5a4:	1000141e 	bne	r2,zero,800e5f8 <__hi0bits+0x58>
 800e5a8:	2008943a 	slli	r4,r4,16
 800e5ac:	00800404 	movi	r2,16
 800e5b0:	20ffc02c 	andhi	r3,r4,65280
 800e5b4:	1800021e 	bne	r3,zero,800e5c0 <__hi0bits+0x20>
 800e5b8:	2008923a 	slli	r4,r4,8
 800e5bc:	10800204 	addi	r2,r2,8
 800e5c0:	20fc002c 	andhi	r3,r4,61440
 800e5c4:	1800021e 	bne	r3,zero,800e5d0 <__hi0bits+0x30>
 800e5c8:	2008913a 	slli	r4,r4,4
 800e5cc:	10800104 	addi	r2,r2,4
 800e5d0:	20f0002c 	andhi	r3,r4,49152
 800e5d4:	1800031e 	bne	r3,zero,800e5e4 <__hi0bits+0x44>
 800e5d8:	2109883a 	add	r4,r4,r4
 800e5dc:	10800084 	addi	r2,r2,2
 800e5e0:	2109883a 	add	r4,r4,r4
 800e5e4:	20000316 	blt	r4,zero,800e5f4 <__hi0bits+0x54>
 800e5e8:	2110002c 	andhi	r4,r4,16384
 800e5ec:	2000041e 	bne	r4,zero,800e600 <__hi0bits+0x60>
 800e5f0:	00800804 	movi	r2,32
 800e5f4:	f800283a 	ret
 800e5f8:	0005883a 	mov	r2,zero
 800e5fc:	003fec06 	br	800e5b0 <__hi0bits+0x10>
 800e600:	10800044 	addi	r2,r2,1
 800e604:	f800283a 	ret

0800e608 <__lo0bits>:
 800e608:	20c00017 	ldw	r3,0(r4)
 800e60c:	188001cc 	andi	r2,r3,7
 800e610:	10000826 	beq	r2,zero,800e634 <__lo0bits+0x2c>
 800e614:	1880004c 	andi	r2,r3,1
 800e618:	1000211e 	bne	r2,zero,800e6a0 <__lo0bits+0x98>
 800e61c:	1880008c 	andi	r2,r3,2
 800e620:	1000211e 	bne	r2,zero,800e6a8 <__lo0bits+0xa0>
 800e624:	1806d0ba 	srli	r3,r3,2
 800e628:	00800084 	movi	r2,2
 800e62c:	20c00015 	stw	r3,0(r4)
 800e630:	f800283a 	ret
 800e634:	18bfffcc 	andi	r2,r3,65535
 800e638:	10001326 	beq	r2,zero,800e688 <__lo0bits+0x80>
 800e63c:	0005883a 	mov	r2,zero
 800e640:	19403fcc 	andi	r5,r3,255
 800e644:	2800021e 	bne	r5,zero,800e650 <__lo0bits+0x48>
 800e648:	1806d23a 	srli	r3,r3,8
 800e64c:	10800204 	addi	r2,r2,8
 800e650:	194003cc 	andi	r5,r3,15
 800e654:	2800021e 	bne	r5,zero,800e660 <__lo0bits+0x58>
 800e658:	1806d13a 	srli	r3,r3,4
 800e65c:	10800104 	addi	r2,r2,4
 800e660:	194000cc 	andi	r5,r3,3
 800e664:	2800021e 	bne	r5,zero,800e670 <__lo0bits+0x68>
 800e668:	1806d0ba 	srli	r3,r3,2
 800e66c:	10800084 	addi	r2,r2,2
 800e670:	1940004c 	andi	r5,r3,1
 800e674:	2800081e 	bne	r5,zero,800e698 <__lo0bits+0x90>
 800e678:	1806d07a 	srli	r3,r3,1
 800e67c:	1800051e 	bne	r3,zero,800e694 <__lo0bits+0x8c>
 800e680:	00800804 	movi	r2,32
 800e684:	f800283a 	ret
 800e688:	1806d43a 	srli	r3,r3,16
 800e68c:	00800404 	movi	r2,16
 800e690:	003feb06 	br	800e640 <__lo0bits+0x38>
 800e694:	10800044 	addi	r2,r2,1
 800e698:	20c00015 	stw	r3,0(r4)
 800e69c:	f800283a 	ret
 800e6a0:	0005883a 	mov	r2,zero
 800e6a4:	f800283a 	ret
 800e6a8:	1806d07a 	srli	r3,r3,1
 800e6ac:	00800044 	movi	r2,1
 800e6b0:	20c00015 	stw	r3,0(r4)
 800e6b4:	f800283a 	ret

0800e6b8 <__i2b>:
 800e6b8:	defffd04 	addi	sp,sp,-12
 800e6bc:	dc000015 	stw	r16,0(sp)
 800e6c0:	04000044 	movi	r16,1
 800e6c4:	dc400115 	stw	r17,4(sp)
 800e6c8:	2823883a 	mov	r17,r5
 800e6cc:	800b883a 	mov	r5,r16
 800e6d0:	dfc00215 	stw	ra,8(sp)
 800e6d4:	800e2840 	call	800e284 <_Balloc>
 800e6d8:	14400515 	stw	r17,20(r2)
 800e6dc:	14000415 	stw	r16,16(r2)
 800e6e0:	dfc00217 	ldw	ra,8(sp)
 800e6e4:	dc400117 	ldw	r17,4(sp)
 800e6e8:	dc000017 	ldw	r16,0(sp)
 800e6ec:	dec00304 	addi	sp,sp,12
 800e6f0:	f800283a 	ret

0800e6f4 <__multiply>:
 800e6f4:	deffef04 	addi	sp,sp,-68
 800e6f8:	dc400815 	stw	r17,32(sp)
 800e6fc:	dc000715 	stw	r16,28(sp)
 800e700:	34400417 	ldw	r17,16(r6)
 800e704:	2c000417 	ldw	r16,16(r5)
 800e708:	dd800d15 	stw	r22,52(sp)
 800e70c:	dc800915 	stw	r18,36(sp)
 800e710:	dfc01015 	stw	ra,64(sp)
 800e714:	df000f15 	stw	fp,60(sp)
 800e718:	ddc00e15 	stw	r23,56(sp)
 800e71c:	dd400c15 	stw	r21,48(sp)
 800e720:	dd000b15 	stw	r20,44(sp)
 800e724:	dcc00a15 	stw	r19,40(sp)
 800e728:	2825883a 	mov	r18,r5
 800e72c:	302d883a 	mov	r22,r6
 800e730:	8440050e 	bge	r16,r17,800e748 <__multiply+0x54>
 800e734:	8007883a 	mov	r3,r16
 800e738:	3025883a 	mov	r18,r6
 800e73c:	8821883a 	mov	r16,r17
 800e740:	282d883a 	mov	r22,r5
 800e744:	1823883a 	mov	r17,r3
 800e748:	90800217 	ldw	r2,8(r18)
 800e74c:	8447883a 	add	r3,r16,r17
 800e750:	d8c00215 	stw	r3,8(sp)
 800e754:	91400117 	ldw	r5,4(r18)
 800e758:	10c0010e 	bge	r2,r3,800e760 <__multiply+0x6c>
 800e75c:	29400044 	addi	r5,r5,1
 800e760:	800e2840 	call	800e284 <_Balloc>
 800e764:	d8c00217 	ldw	r3,8(sp)
 800e768:	d8800615 	stw	r2,24(sp)
 800e76c:	18eb883a 	add	r21,r3,r3
 800e770:	ad6b883a 	add	r21,r21,r21
 800e774:	10c00504 	addi	r3,r2,20
 800e778:	1d6b883a 	add	r21,r3,r21
 800e77c:	d8c00115 	stw	r3,4(sp)
 800e780:	dd400315 	stw	r21,12(sp)
 800e784:	1805883a 	mov	r2,r3
 800e788:	1d40042e 	bgeu	r3,r21,800e79c <__multiply+0xa8>
 800e78c:	d8c00317 	ldw	r3,12(sp)
 800e790:	10000015 	stw	zero,0(r2)
 800e794:	10800104 	addi	r2,r2,4
 800e798:	10fffc36 	bltu	r2,r3,800e78c <__multiply+0x98>
 800e79c:	8c63883a 	add	r17,r17,r17
 800e7a0:	b5800504 	addi	r22,r22,20
 800e7a4:	8c63883a 	add	r17,r17,r17
 800e7a8:	94800504 	addi	r18,r18,20
 800e7ac:	8421883a 	add	r16,r16,r16
 800e7b0:	b463883a 	add	r17,r22,r17
 800e7b4:	8421883a 	add	r16,r16,r16
 800e7b8:	dd800015 	stw	r22,0(sp)
 800e7bc:	dc800415 	stw	r18,16(sp)
 800e7c0:	dc400515 	stw	r17,20(sp)
 800e7c4:	9429883a 	add	r20,r18,r16
 800e7c8:	b4404f2e 	bgeu	r22,r17,800e908 <__multiply+0x214>
 800e7cc:	d8c00017 	ldw	r3,0(sp)
 800e7d0:	1c800017 	ldw	r18,0(r3)
 800e7d4:	947fffcc 	andi	r17,r18,65535
 800e7d8:	88001e26 	beq	r17,zero,800e854 <__multiply+0x160>
 800e7dc:	dd800117 	ldw	r22,4(sp)
 800e7e0:	dd400417 	ldw	r21,16(sp)
 800e7e4:	0027883a 	mov	r19,zero
 800e7e8:	ac800017 	ldw	r18,0(r21)
 800e7ec:	b4000017 	ldw	r16,0(r22)
 800e7f0:	880b883a 	mov	r5,r17
 800e7f4:	913fffcc 	andi	r4,r18,65535
 800e7f8:	8007e400 	call	8007e40 <__mulsi3>
 800e7fc:	9008d43a 	srli	r4,r18,16
 800e800:	84bfffcc 	andi	r18,r16,65535
 800e804:	1485883a 	add	r2,r2,r18
 800e808:	14e5883a 	add	r18,r2,r19
 800e80c:	8020d43a 	srli	r16,r16,16
 800e810:	9026d43a 	srli	r19,r18,16
 800e814:	880b883a 	mov	r5,r17
 800e818:	8007e400 	call	8007e40 <__mulsi3>
 800e81c:	1405883a 	add	r2,r2,r16
 800e820:	14e1883a 	add	r16,r2,r19
 800e824:	90ffffcc 	andi	r3,r18,65535
 800e828:	8024943a 	slli	r18,r16,16
 800e82c:	ad400104 	addi	r21,r21,4
 800e830:	b005883a 	mov	r2,r22
 800e834:	90c6b03a 	or	r3,r18,r3
 800e838:	b0c00015 	stw	r3,0(r22)
 800e83c:	8026d43a 	srli	r19,r16,16
 800e840:	b5800104 	addi	r22,r22,4
 800e844:	ad3fe836 	bltu	r21,r20,800e7e8 <__multiply+0xf4>
 800e848:	d8c00017 	ldw	r3,0(sp)
 800e84c:	14c00115 	stw	r19,4(r2)
 800e850:	1c800017 	ldw	r18,0(r3)
 800e854:	9024d43a 	srli	r18,r18,16
 800e858:	90002226 	beq	r18,zero,800e8e4 <__multiply+0x1f0>
 800e85c:	d8c00117 	ldw	r3,4(sp)
 800e860:	dd800417 	ldw	r22,16(sp)
 800e864:	002f883a 	mov	r23,zero
 800e868:	1f000017 	ldw	fp,0(r3)
 800e86c:	1823883a 	mov	r17,r3
 800e870:	182b883a 	mov	r21,r3
 800e874:	e021883a 	mov	r16,fp
 800e878:	00000106 	br	800e880 <__multiply+0x18c>
 800e87c:	982b883a 	mov	r21,r19
 800e880:	b100000b 	ldhu	r4,0(r22)
 800e884:	8020d43a 	srli	r16,r16,16
 800e888:	900b883a 	mov	r5,r18
 800e88c:	8007e400 	call	8007e40 <__mulsi3>
 800e890:	1405883a 	add	r2,r2,r16
 800e894:	15ef883a 	add	r23,r2,r23
 800e898:	b804943a 	slli	r2,r23,16
 800e89c:	e0ffffcc 	andi	r3,fp,65535
 800e8a0:	8c400104 	addi	r17,r17,4
 800e8a4:	10c6b03a 	or	r3,r2,r3
 800e8a8:	88ffff15 	stw	r3,-4(r17)
 800e8ac:	b5800104 	addi	r22,r22,4
 800e8b0:	b13fff17 	ldw	r4,-4(r22)
 800e8b4:	acc00104 	addi	r19,r21,4
 800e8b8:	900b883a 	mov	r5,r18
 800e8bc:	2008d43a 	srli	r4,r4,16
 800e8c0:	9c000017 	ldw	r16,0(r19)
 800e8c4:	8007e400 	call	8007e40 <__mulsi3>
 800e8c8:	b806d43a 	srli	r3,r23,16
 800e8cc:	813fffcc 	andi	r4,r16,65535
 800e8d0:	1105883a 	add	r2,r2,r4
 800e8d4:	10f9883a 	add	fp,r2,r3
 800e8d8:	e02ed43a 	srli	r23,fp,16
 800e8dc:	b53fe736 	bltu	r22,r20,800e87c <__multiply+0x188>
 800e8e0:	af000115 	stw	fp,4(r21)
 800e8e4:	d8c00017 	ldw	r3,0(sp)
 800e8e8:	d9000517 	ldw	r4,20(sp)
 800e8ec:	18c00104 	addi	r3,r3,4
 800e8f0:	d8c00015 	stw	r3,0(sp)
 800e8f4:	d8c00117 	ldw	r3,4(sp)
 800e8f8:	18c00104 	addi	r3,r3,4
 800e8fc:	d8c00115 	stw	r3,4(sp)
 800e900:	d8c00017 	ldw	r3,0(sp)
 800e904:	193fb136 	bltu	r3,r4,800e7cc <__multiply+0xd8>
 800e908:	d8c00217 	ldw	r3,8(sp)
 800e90c:	00c00c0e 	bge	zero,r3,800e940 <__multiply+0x24c>
 800e910:	d8c00317 	ldw	r3,12(sp)
 800e914:	18bfff17 	ldw	r2,-4(r3)
 800e918:	1d7fff04 	addi	r21,r3,-4
 800e91c:	10000326 	beq	r2,zero,800e92c <__multiply+0x238>
 800e920:	00000706 	br	800e940 <__multiply+0x24c>
 800e924:	a8800017 	ldw	r2,0(r21)
 800e928:	1000051e 	bne	r2,zero,800e940 <__multiply+0x24c>
 800e92c:	d8c00217 	ldw	r3,8(sp)
 800e930:	ad7fff04 	addi	r21,r21,-4
 800e934:	18ffffc4 	addi	r3,r3,-1
 800e938:	d8c00215 	stw	r3,8(sp)
 800e93c:	183ff91e 	bne	r3,zero,800e924 <__multiply+0x230>
 800e940:	d8c00617 	ldw	r3,24(sp)
 800e944:	d9000217 	ldw	r4,8(sp)
 800e948:	1805883a 	mov	r2,r3
 800e94c:	19000415 	stw	r4,16(r3)
 800e950:	dfc01017 	ldw	ra,64(sp)
 800e954:	df000f17 	ldw	fp,60(sp)
 800e958:	ddc00e17 	ldw	r23,56(sp)
 800e95c:	dd800d17 	ldw	r22,52(sp)
 800e960:	dd400c17 	ldw	r21,48(sp)
 800e964:	dd000b17 	ldw	r20,44(sp)
 800e968:	dcc00a17 	ldw	r19,40(sp)
 800e96c:	dc800917 	ldw	r18,36(sp)
 800e970:	dc400817 	ldw	r17,32(sp)
 800e974:	dc000717 	ldw	r16,28(sp)
 800e978:	dec01104 	addi	sp,sp,68
 800e97c:	f800283a 	ret

0800e980 <__pow5mult>:
 800e980:	defffa04 	addi	sp,sp,-24
 800e984:	dcc00315 	stw	r19,12(sp)
 800e988:	dc000015 	stw	r16,0(sp)
 800e98c:	dfc00515 	stw	ra,20(sp)
 800e990:	dd000415 	stw	r20,16(sp)
 800e994:	dc800215 	stw	r18,8(sp)
 800e998:	dc400115 	stw	r17,4(sp)
 800e99c:	308000cc 	andi	r2,r6,3
 800e9a0:	3021883a 	mov	r16,r6
 800e9a4:	2027883a 	mov	r19,r4
 800e9a8:	10002f1e 	bne	r2,zero,800ea68 <__pow5mult+0xe8>
 800e9ac:	2825883a 	mov	r18,r5
 800e9b0:	8021d0ba 	srai	r16,r16,2
 800e9b4:	80001a26 	beq	r16,zero,800ea20 <__pow5mult+0xa0>
 800e9b8:	9c401217 	ldw	r17,72(r19)
 800e9bc:	8800061e 	bne	r17,zero,800e9d8 <__pow5mult+0x58>
 800e9c0:	00003406 	br	800ea94 <__pow5mult+0x114>
 800e9c4:	8021d07a 	srai	r16,r16,1
 800e9c8:	80001526 	beq	r16,zero,800ea20 <__pow5mult+0xa0>
 800e9cc:	88800017 	ldw	r2,0(r17)
 800e9d0:	10001c26 	beq	r2,zero,800ea44 <__pow5mult+0xc4>
 800e9d4:	1023883a 	mov	r17,r2
 800e9d8:	8080004c 	andi	r2,r16,1
 800e9dc:	103ff926 	beq	r2,zero,800e9c4 <__pow5mult+0x44>
 800e9e0:	880d883a 	mov	r6,r17
 800e9e4:	900b883a 	mov	r5,r18
 800e9e8:	9809883a 	mov	r4,r19
 800e9ec:	800e6f40 	call	800e6f4 <__multiply>
 800e9f0:	90001b26 	beq	r18,zero,800ea60 <__pow5mult+0xe0>
 800e9f4:	91000117 	ldw	r4,4(r18)
 800e9f8:	98c01317 	ldw	r3,76(r19)
 800e9fc:	8021d07a 	srai	r16,r16,1
 800ea00:	2109883a 	add	r4,r4,r4
 800ea04:	2109883a 	add	r4,r4,r4
 800ea08:	1907883a 	add	r3,r3,r4
 800ea0c:	19000017 	ldw	r4,0(r3)
 800ea10:	91000015 	stw	r4,0(r18)
 800ea14:	1c800015 	stw	r18,0(r3)
 800ea18:	1025883a 	mov	r18,r2
 800ea1c:	803feb1e 	bne	r16,zero,800e9cc <__pow5mult+0x4c>
 800ea20:	9005883a 	mov	r2,r18
 800ea24:	dfc00517 	ldw	ra,20(sp)
 800ea28:	dd000417 	ldw	r20,16(sp)
 800ea2c:	dcc00317 	ldw	r19,12(sp)
 800ea30:	dc800217 	ldw	r18,8(sp)
 800ea34:	dc400117 	ldw	r17,4(sp)
 800ea38:	dc000017 	ldw	r16,0(sp)
 800ea3c:	dec00604 	addi	sp,sp,24
 800ea40:	f800283a 	ret
 800ea44:	880d883a 	mov	r6,r17
 800ea48:	880b883a 	mov	r5,r17
 800ea4c:	9809883a 	mov	r4,r19
 800ea50:	800e6f40 	call	800e6f4 <__multiply>
 800ea54:	88800015 	stw	r2,0(r17)
 800ea58:	10000015 	stw	zero,0(r2)
 800ea5c:	003fdd06 	br	800e9d4 <__pow5mult+0x54>
 800ea60:	1025883a 	mov	r18,r2
 800ea64:	003fd706 	br	800e9c4 <__pow5mult+0x44>
 800ea68:	10bfffc4 	addi	r2,r2,-1
 800ea6c:	1085883a 	add	r2,r2,r2
 800ea70:	00c200b4 	movhi	r3,2050
 800ea74:	18e0eb04 	addi	r3,r3,-31828
 800ea78:	1085883a 	add	r2,r2,r2
 800ea7c:	1885883a 	add	r2,r3,r2
 800ea80:	11800017 	ldw	r6,0(r2)
 800ea84:	000f883a 	mov	r7,zero
 800ea88:	800e3540 	call	800e354 <__multadd>
 800ea8c:	1025883a 	mov	r18,r2
 800ea90:	003fc706 	br	800e9b0 <__pow5mult+0x30>
 800ea94:	05000044 	movi	r20,1
 800ea98:	a00b883a 	mov	r5,r20
 800ea9c:	9809883a 	mov	r4,r19
 800eaa0:	800e2840 	call	800e284 <_Balloc>
 800eaa4:	1023883a 	mov	r17,r2
 800eaa8:	00809c44 	movi	r2,625
 800eaac:	88800515 	stw	r2,20(r17)
 800eab0:	8d000415 	stw	r20,16(r17)
 800eab4:	9c401215 	stw	r17,72(r19)
 800eab8:	88000015 	stw	zero,0(r17)
 800eabc:	003fc606 	br	800e9d8 <__pow5mult+0x58>

0800eac0 <__lshift>:
 800eac0:	defff904 	addi	sp,sp,-28
 800eac4:	dd400515 	stw	r21,20(sp)
 800eac8:	dcc00315 	stw	r19,12(sp)
 800eacc:	302bd17a 	srai	r21,r6,5
 800ead0:	2cc00417 	ldw	r19,16(r5)
 800ead4:	28800217 	ldw	r2,8(r5)
 800ead8:	dd000415 	stw	r20,16(sp)
 800eadc:	ace7883a 	add	r19,r21,r19
 800eae0:	dc800215 	stw	r18,8(sp)
 800eae4:	dc400115 	stw	r17,4(sp)
 800eae8:	dc000015 	stw	r16,0(sp)
 800eaec:	dfc00615 	stw	ra,24(sp)
 800eaf0:	9c000044 	addi	r16,r19,1
 800eaf4:	2823883a 	mov	r17,r5
 800eaf8:	3029883a 	mov	r20,r6
 800eafc:	2025883a 	mov	r18,r4
 800eb00:	29400117 	ldw	r5,4(r5)
 800eb04:	1400030e 	bge	r2,r16,800eb14 <__lshift+0x54>
 800eb08:	1085883a 	add	r2,r2,r2
 800eb0c:	29400044 	addi	r5,r5,1
 800eb10:	143ffd16 	blt	r2,r16,800eb08 <__lshift+0x48>
 800eb14:	9009883a 	mov	r4,r18
 800eb18:	800e2840 	call	800e284 <_Balloc>
 800eb1c:	10c00504 	addi	r3,r2,20
 800eb20:	0540070e 	bge	zero,r21,800eb40 <__lshift+0x80>
 800eb24:	ad6b883a 	add	r21,r21,r21
 800eb28:	ad6b883a 	add	r21,r21,r21
 800eb2c:	1809883a 	mov	r4,r3
 800eb30:	1d47883a 	add	r3,r3,r21
 800eb34:	20000015 	stw	zero,0(r4)
 800eb38:	21000104 	addi	r4,r4,4
 800eb3c:	193ffd1e 	bne	r3,r4,800eb34 <__lshift+0x74>
 800eb40:	8a000417 	ldw	r8,16(r17)
 800eb44:	89000504 	addi	r4,r17,20
 800eb48:	a18007cc 	andi	r6,r20,31
 800eb4c:	4211883a 	add	r8,r8,r8
 800eb50:	4211883a 	add	r8,r8,r8
 800eb54:	2211883a 	add	r8,r4,r8
 800eb58:	30002326 	beq	r6,zero,800ebe8 <__lshift+0x128>
 800eb5c:	02400804 	movi	r9,32
 800eb60:	4993c83a 	sub	r9,r9,r6
 800eb64:	000b883a 	mov	r5,zero
 800eb68:	21c00017 	ldw	r7,0(r4)
 800eb6c:	1815883a 	mov	r10,r3
 800eb70:	18c00104 	addi	r3,r3,4
 800eb74:	398e983a 	sll	r7,r7,r6
 800eb78:	21000104 	addi	r4,r4,4
 800eb7c:	394ab03a 	or	r5,r7,r5
 800eb80:	197fff15 	stw	r5,-4(r3)
 800eb84:	217fff17 	ldw	r5,-4(r4)
 800eb88:	2a4ad83a 	srl	r5,r5,r9
 800eb8c:	223ff636 	bltu	r4,r8,800eb68 <__lshift+0xa8>
 800eb90:	51400115 	stw	r5,4(r10)
 800eb94:	28001a1e 	bne	r5,zero,800ec00 <__lshift+0x140>
 800eb98:	843fffc4 	addi	r16,r16,-1
 800eb9c:	14000415 	stw	r16,16(r2)
 800eba0:	88000826 	beq	r17,zero,800ebc4 <__lshift+0x104>
 800eba4:	89000117 	ldw	r4,4(r17)
 800eba8:	90c01317 	ldw	r3,76(r18)
 800ebac:	2109883a 	add	r4,r4,r4
 800ebb0:	2109883a 	add	r4,r4,r4
 800ebb4:	1907883a 	add	r3,r3,r4
 800ebb8:	19000017 	ldw	r4,0(r3)
 800ebbc:	89000015 	stw	r4,0(r17)
 800ebc0:	1c400015 	stw	r17,0(r3)
 800ebc4:	dfc00617 	ldw	ra,24(sp)
 800ebc8:	dd400517 	ldw	r21,20(sp)
 800ebcc:	dd000417 	ldw	r20,16(sp)
 800ebd0:	dcc00317 	ldw	r19,12(sp)
 800ebd4:	dc800217 	ldw	r18,8(sp)
 800ebd8:	dc400117 	ldw	r17,4(sp)
 800ebdc:	dc000017 	ldw	r16,0(sp)
 800ebe0:	dec00704 	addi	sp,sp,28
 800ebe4:	f800283a 	ret
 800ebe8:	21400017 	ldw	r5,0(r4)
 800ebec:	18c00104 	addi	r3,r3,4
 800ebf0:	21000104 	addi	r4,r4,4
 800ebf4:	197fff15 	stw	r5,-4(r3)
 800ebf8:	223ffb36 	bltu	r4,r8,800ebe8 <__lshift+0x128>
 800ebfc:	003fe606 	br	800eb98 <__lshift+0xd8>
 800ec00:	9c000084 	addi	r16,r19,2
 800ec04:	003fe406 	br	800eb98 <__lshift+0xd8>

0800ec08 <__mcmp>:
 800ec08:	20800417 	ldw	r2,16(r4)
 800ec0c:	28c00417 	ldw	r3,16(r5)
 800ec10:	10c5c83a 	sub	r2,r2,r3
 800ec14:	1000111e 	bne	r2,zero,800ec5c <__mcmp+0x54>
 800ec18:	18c7883a 	add	r3,r3,r3
 800ec1c:	18c7883a 	add	r3,r3,r3
 800ec20:	21000504 	addi	r4,r4,20
 800ec24:	29400504 	addi	r5,r5,20
 800ec28:	20c5883a 	add	r2,r4,r3
 800ec2c:	28cb883a 	add	r5,r5,r3
 800ec30:	00000106 	br	800ec38 <__mcmp+0x30>
 800ec34:	20800a2e 	bgeu	r4,r2,800ec60 <__mcmp+0x58>
 800ec38:	10bfff04 	addi	r2,r2,-4
 800ec3c:	297fff04 	addi	r5,r5,-4
 800ec40:	11800017 	ldw	r6,0(r2)
 800ec44:	28c00017 	ldw	r3,0(r5)
 800ec48:	30fffa26 	beq	r6,r3,800ec34 <__mcmp+0x2c>
 800ec4c:	30c00236 	bltu	r6,r3,800ec58 <__mcmp+0x50>
 800ec50:	00800044 	movi	r2,1
 800ec54:	f800283a 	ret
 800ec58:	00bfffc4 	movi	r2,-1
 800ec5c:	f800283a 	ret
 800ec60:	0005883a 	mov	r2,zero
 800ec64:	f800283a 	ret

0800ec68 <__mdiff>:
 800ec68:	28c00417 	ldw	r3,16(r5)
 800ec6c:	30800417 	ldw	r2,16(r6)
 800ec70:	defffa04 	addi	sp,sp,-24
 800ec74:	dcc00315 	stw	r19,12(sp)
 800ec78:	dc800215 	stw	r18,8(sp)
 800ec7c:	dfc00515 	stw	ra,20(sp)
 800ec80:	dd000415 	stw	r20,16(sp)
 800ec84:	dc400115 	stw	r17,4(sp)
 800ec88:	dc000015 	stw	r16,0(sp)
 800ec8c:	1887c83a 	sub	r3,r3,r2
 800ec90:	2825883a 	mov	r18,r5
 800ec94:	3027883a 	mov	r19,r6
 800ec98:	1800141e 	bne	r3,zero,800ecec <__mdiff+0x84>
 800ec9c:	1085883a 	add	r2,r2,r2
 800eca0:	1085883a 	add	r2,r2,r2
 800eca4:	2a000504 	addi	r8,r5,20
 800eca8:	34000504 	addi	r16,r6,20
 800ecac:	4087883a 	add	r3,r8,r2
 800ecb0:	8085883a 	add	r2,r16,r2
 800ecb4:	00000106 	br	800ecbc <__mdiff+0x54>
 800ecb8:	40c0592e 	bgeu	r8,r3,800ee20 <__mdiff+0x1b8>
 800ecbc:	18ffff04 	addi	r3,r3,-4
 800ecc0:	10bfff04 	addi	r2,r2,-4
 800ecc4:	19c00017 	ldw	r7,0(r3)
 800ecc8:	11400017 	ldw	r5,0(r2)
 800eccc:	397ffa26 	beq	r7,r5,800ecb8 <__mdiff+0x50>
 800ecd0:	3940592e 	bgeu	r7,r5,800ee38 <__mdiff+0x1d0>
 800ecd4:	9005883a 	mov	r2,r18
 800ecd8:	4023883a 	mov	r17,r8
 800ecdc:	9825883a 	mov	r18,r19
 800ece0:	05000044 	movi	r20,1
 800ece4:	1027883a 	mov	r19,r2
 800ece8:	00000406 	br	800ecfc <__mdiff+0x94>
 800ecec:	18005616 	blt	r3,zero,800ee48 <__mdiff+0x1e0>
 800ecf0:	34400504 	addi	r17,r6,20
 800ecf4:	2c000504 	addi	r16,r5,20
 800ecf8:	0029883a 	mov	r20,zero
 800ecfc:	91400117 	ldw	r5,4(r18)
 800ed00:	800e2840 	call	800e284 <_Balloc>
 800ed04:	92400417 	ldw	r9,16(r18)
 800ed08:	9b000417 	ldw	r12,16(r19)
 800ed0c:	12c00504 	addi	r11,r2,20
 800ed10:	4a51883a 	add	r8,r9,r9
 800ed14:	6319883a 	add	r12,r12,r12
 800ed18:	4211883a 	add	r8,r8,r8
 800ed1c:	6319883a 	add	r12,r12,r12
 800ed20:	15000315 	stw	r20,12(r2)
 800ed24:	8211883a 	add	r8,r16,r8
 800ed28:	8b19883a 	add	r12,r17,r12
 800ed2c:	0007883a 	mov	r3,zero
 800ed30:	81400017 	ldw	r5,0(r16)
 800ed34:	89c00017 	ldw	r7,0(r17)
 800ed38:	59800104 	addi	r6,r11,4
 800ed3c:	293fffcc 	andi	r4,r5,65535
 800ed40:	20c7883a 	add	r3,r4,r3
 800ed44:	393fffcc 	andi	r4,r7,65535
 800ed48:	1909c83a 	sub	r4,r3,r4
 800ed4c:	280ad43a 	srli	r5,r5,16
 800ed50:	380ed43a 	srli	r7,r7,16
 800ed54:	2007d43a 	srai	r3,r4,16
 800ed58:	213fffcc 	andi	r4,r4,65535
 800ed5c:	29cbc83a 	sub	r5,r5,r7
 800ed60:	28c7883a 	add	r3,r5,r3
 800ed64:	180a943a 	slli	r5,r3,16
 800ed68:	8c400104 	addi	r17,r17,4
 800ed6c:	84000104 	addi	r16,r16,4
 800ed70:	2908b03a 	or	r4,r5,r4
 800ed74:	59000015 	stw	r4,0(r11)
 800ed78:	1807d43a 	srai	r3,r3,16
 800ed7c:	3015883a 	mov	r10,r6
 800ed80:	3017883a 	mov	r11,r6
 800ed84:	8b3fea36 	bltu	r17,r12,800ed30 <__mdiff+0xc8>
 800ed88:	8200162e 	bgeu	r16,r8,800ede4 <__mdiff+0x17c>
 800ed8c:	8017883a 	mov	r11,r16
 800ed90:	59400017 	ldw	r5,0(r11)
 800ed94:	31800104 	addi	r6,r6,4
 800ed98:	5ac00104 	addi	r11,r11,4
 800ed9c:	293fffcc 	andi	r4,r5,65535
 800eda0:	20c7883a 	add	r3,r4,r3
 800eda4:	280ed43a 	srli	r7,r5,16
 800eda8:	180bd43a 	srai	r5,r3,16
 800edac:	193fffcc 	andi	r4,r3,65535
 800edb0:	3947883a 	add	r3,r7,r5
 800edb4:	180a943a 	slli	r5,r3,16
 800edb8:	1807d43a 	srai	r3,r3,16
 800edbc:	2908b03a 	or	r4,r5,r4
 800edc0:	313fff15 	stw	r4,-4(r6)
 800edc4:	5a3ff236 	bltu	r11,r8,800ed90 <__mdiff+0x128>
 800edc8:	0406303a 	nor	r3,zero,r16
 800edcc:	1a07883a 	add	r3,r3,r8
 800edd0:	1806d0ba 	srli	r3,r3,2
 800edd4:	18c00044 	addi	r3,r3,1
 800edd8:	18c7883a 	add	r3,r3,r3
 800eddc:	18c7883a 	add	r3,r3,r3
 800ede0:	50d5883a 	add	r10,r10,r3
 800ede4:	50ffff04 	addi	r3,r10,-4
 800ede8:	2000041e 	bne	r4,zero,800edfc <__mdiff+0x194>
 800edec:	18ffff04 	addi	r3,r3,-4
 800edf0:	19000017 	ldw	r4,0(r3)
 800edf4:	4a7fffc4 	addi	r9,r9,-1
 800edf8:	203ffc26 	beq	r4,zero,800edec <__mdiff+0x184>
 800edfc:	12400415 	stw	r9,16(r2)
 800ee00:	dfc00517 	ldw	ra,20(sp)
 800ee04:	dd000417 	ldw	r20,16(sp)
 800ee08:	dcc00317 	ldw	r19,12(sp)
 800ee0c:	dc800217 	ldw	r18,8(sp)
 800ee10:	dc400117 	ldw	r17,4(sp)
 800ee14:	dc000017 	ldw	r16,0(sp)
 800ee18:	dec00604 	addi	sp,sp,24
 800ee1c:	f800283a 	ret
 800ee20:	000b883a 	mov	r5,zero
 800ee24:	800e2840 	call	800e284 <_Balloc>
 800ee28:	00c00044 	movi	r3,1
 800ee2c:	10c00415 	stw	r3,16(r2)
 800ee30:	10000515 	stw	zero,20(r2)
 800ee34:	003ff206 	br	800ee00 <__mdiff+0x198>
 800ee38:	8023883a 	mov	r17,r16
 800ee3c:	0029883a 	mov	r20,zero
 800ee40:	4021883a 	mov	r16,r8
 800ee44:	003fad06 	br	800ecfc <__mdiff+0x94>
 800ee48:	9005883a 	mov	r2,r18
 800ee4c:	94400504 	addi	r17,r18,20
 800ee50:	9c000504 	addi	r16,r19,20
 800ee54:	9825883a 	mov	r18,r19
 800ee58:	05000044 	movi	r20,1
 800ee5c:	1027883a 	mov	r19,r2
 800ee60:	003fa606 	br	800ecfc <__mdiff+0x94>

0800ee64 <__ulp>:
 800ee64:	295ffc2c 	andhi	r5,r5,32752
 800ee68:	00bf3034 	movhi	r2,64704
 800ee6c:	2887883a 	add	r3,r5,r2
 800ee70:	00c0020e 	bge	zero,r3,800ee7c <__ulp+0x18>
 800ee74:	0005883a 	mov	r2,zero
 800ee78:	f800283a 	ret
 800ee7c:	00c7c83a 	sub	r3,zero,r3
 800ee80:	1807d53a 	srai	r3,r3,20
 800ee84:	008004c4 	movi	r2,19
 800ee88:	10c00b0e 	bge	r2,r3,800eeb8 <__ulp+0x54>
 800ee8c:	18bffb04 	addi	r2,r3,-20
 800ee90:	01000784 	movi	r4,30
 800ee94:	0007883a 	mov	r3,zero
 800ee98:	20800516 	blt	r4,r2,800eeb0 <__ulp+0x4c>
 800ee9c:	010007c4 	movi	r4,31
 800eea0:	2089c83a 	sub	r4,r4,r2
 800eea4:	00800044 	movi	r2,1
 800eea8:	1104983a 	sll	r2,r2,r4
 800eeac:	f800283a 	ret
 800eeb0:	00800044 	movi	r2,1
 800eeb4:	f800283a 	ret
 800eeb8:	01400234 	movhi	r5,8
 800eebc:	28c7d83a 	sra	r3,r5,r3
 800eec0:	0005883a 	mov	r2,zero
 800eec4:	f800283a 	ret

0800eec8 <__b2d>:
 800eec8:	defffa04 	addi	sp,sp,-24
 800eecc:	dc000015 	stw	r16,0(sp)
 800eed0:	24000417 	ldw	r16,16(r4)
 800eed4:	dc400115 	stw	r17,4(sp)
 800eed8:	24400504 	addi	r17,r4,20
 800eedc:	8421883a 	add	r16,r16,r16
 800eee0:	8421883a 	add	r16,r16,r16
 800eee4:	8c21883a 	add	r16,r17,r16
 800eee8:	dc800215 	stw	r18,8(sp)
 800eeec:	84bfff17 	ldw	r18,-4(r16)
 800eef0:	dd000415 	stw	r20,16(sp)
 800eef4:	dcc00315 	stw	r19,12(sp)
 800eef8:	9009883a 	mov	r4,r18
 800eefc:	2829883a 	mov	r20,r5
 800ef00:	dfc00515 	stw	ra,20(sp)
 800ef04:	800e5a00 	call	800e5a0 <__hi0bits>
 800ef08:	00c00804 	movi	r3,32
 800ef0c:	1889c83a 	sub	r4,r3,r2
 800ef10:	a1000015 	stw	r4,0(r20)
 800ef14:	01000284 	movi	r4,10
 800ef18:	84ffff04 	addi	r19,r16,-4
 800ef1c:	20801216 	blt	r4,r2,800ef68 <__b2d+0xa0>
 800ef20:	018002c4 	movi	r6,11
 800ef24:	308dc83a 	sub	r6,r6,r2
 800ef28:	9186d83a 	srl	r3,r18,r6
 800ef2c:	18cffc34 	orhi	r3,r3,16368
 800ef30:	8cc0212e 	bgeu	r17,r19,800efb8 <__b2d+0xf0>
 800ef34:	813ffe17 	ldw	r4,-8(r16)
 800ef38:	218cd83a 	srl	r6,r4,r6
 800ef3c:	10800544 	addi	r2,r2,21
 800ef40:	9084983a 	sll	r2,r18,r2
 800ef44:	1184b03a 	or	r2,r2,r6
 800ef48:	dfc00517 	ldw	ra,20(sp)
 800ef4c:	dd000417 	ldw	r20,16(sp)
 800ef50:	dcc00317 	ldw	r19,12(sp)
 800ef54:	dc800217 	ldw	r18,8(sp)
 800ef58:	dc400117 	ldw	r17,4(sp)
 800ef5c:	dc000017 	ldw	r16,0(sp)
 800ef60:	dec00604 	addi	sp,sp,24
 800ef64:	f800283a 	ret
 800ef68:	8cc00f2e 	bgeu	r17,r19,800efa8 <__b2d+0xe0>
 800ef6c:	117ffd44 	addi	r5,r2,-11
 800ef70:	80bffe17 	ldw	r2,-8(r16)
 800ef74:	28000e26 	beq	r5,zero,800efb0 <__b2d+0xe8>
 800ef78:	1949c83a 	sub	r4,r3,r5
 800ef7c:	9164983a 	sll	r18,r18,r5
 800ef80:	1106d83a 	srl	r3,r2,r4
 800ef84:	81bffe04 	addi	r6,r16,-8
 800ef88:	948ffc34 	orhi	r18,r18,16368
 800ef8c:	90c6b03a 	or	r3,r18,r3
 800ef90:	89800e2e 	bgeu	r17,r6,800efcc <__b2d+0x104>
 800ef94:	81bffd17 	ldw	r6,-12(r16)
 800ef98:	1144983a 	sll	r2,r2,r5
 800ef9c:	310ad83a 	srl	r5,r6,r4
 800efa0:	2884b03a 	or	r2,r5,r2
 800efa4:	003fe806 	br	800ef48 <__b2d+0x80>
 800efa8:	10bffd44 	addi	r2,r2,-11
 800efac:	1000041e 	bne	r2,zero,800efc0 <__b2d+0xf8>
 800efb0:	90cffc34 	orhi	r3,r18,16368
 800efb4:	003fe406 	br	800ef48 <__b2d+0x80>
 800efb8:	000d883a 	mov	r6,zero
 800efbc:	003fdf06 	br	800ef3c <__b2d+0x74>
 800efc0:	90a4983a 	sll	r18,r18,r2
 800efc4:	0005883a 	mov	r2,zero
 800efc8:	003ff906 	br	800efb0 <__b2d+0xe8>
 800efcc:	1144983a 	sll	r2,r2,r5
 800efd0:	003fdd06 	br	800ef48 <__b2d+0x80>

0800efd4 <__d2b>:
 800efd4:	defff804 	addi	sp,sp,-32
 800efd8:	dc000215 	stw	r16,8(sp)
 800efdc:	3021883a 	mov	r16,r6
 800efe0:	dc400315 	stw	r17,12(sp)
 800efe4:	8022907a 	slli	r17,r16,1
 800efe8:	dd000615 	stw	r20,24(sp)
 800efec:	2829883a 	mov	r20,r5
 800eff0:	01400044 	movi	r5,1
 800eff4:	dcc00515 	stw	r19,20(sp)
 800eff8:	dc800415 	stw	r18,16(sp)
 800effc:	dfc00715 	stw	ra,28(sp)
 800f000:	3825883a 	mov	r18,r7
 800f004:	8822d57a 	srli	r17,r17,21
 800f008:	800e2840 	call	800e284 <_Balloc>
 800f00c:	1027883a 	mov	r19,r2
 800f010:	00800434 	movhi	r2,16
 800f014:	10bfffc4 	addi	r2,r2,-1
 800f018:	808c703a 	and	r6,r16,r2
 800f01c:	88000126 	beq	r17,zero,800f024 <__d2b+0x50>
 800f020:	31800434 	orhi	r6,r6,16
 800f024:	d9800015 	stw	r6,0(sp)
 800f028:	a0002426 	beq	r20,zero,800f0bc <__d2b+0xe8>
 800f02c:	d9000104 	addi	r4,sp,4
 800f030:	dd000115 	stw	r20,4(sp)
 800f034:	800e6080 	call	800e608 <__lo0bits>
 800f038:	d8c00017 	ldw	r3,0(sp)
 800f03c:	10002f1e 	bne	r2,zero,800f0fc <__d2b+0x128>
 800f040:	d9000117 	ldw	r4,4(sp)
 800f044:	99000515 	stw	r4,20(r19)
 800f048:	1821003a 	cmpeq	r16,r3,zero
 800f04c:	01000084 	movi	r4,2
 800f050:	2421c83a 	sub	r16,r4,r16
 800f054:	98c00615 	stw	r3,24(r19)
 800f058:	9c000415 	stw	r16,16(r19)
 800f05c:	88001f1e 	bne	r17,zero,800f0dc <__d2b+0x108>
 800f060:	10bef384 	addi	r2,r2,-1074
 800f064:	90800015 	stw	r2,0(r18)
 800f068:	00900034 	movhi	r2,16384
 800f06c:	10bfffc4 	addi	r2,r2,-1
 800f070:	8085883a 	add	r2,r16,r2
 800f074:	1085883a 	add	r2,r2,r2
 800f078:	1085883a 	add	r2,r2,r2
 800f07c:	9885883a 	add	r2,r19,r2
 800f080:	11000517 	ldw	r4,20(r2)
 800f084:	8020917a 	slli	r16,r16,5
 800f088:	800e5a00 	call	800e5a0 <__hi0bits>
 800f08c:	d8c00817 	ldw	r3,32(sp)
 800f090:	8085c83a 	sub	r2,r16,r2
 800f094:	18800015 	stw	r2,0(r3)
 800f098:	9805883a 	mov	r2,r19
 800f09c:	dfc00717 	ldw	ra,28(sp)
 800f0a0:	dd000617 	ldw	r20,24(sp)
 800f0a4:	dcc00517 	ldw	r19,20(sp)
 800f0a8:	dc800417 	ldw	r18,16(sp)
 800f0ac:	dc400317 	ldw	r17,12(sp)
 800f0b0:	dc000217 	ldw	r16,8(sp)
 800f0b4:	dec00804 	addi	sp,sp,32
 800f0b8:	f800283a 	ret
 800f0bc:	d809883a 	mov	r4,sp
 800f0c0:	800e6080 	call	800e608 <__lo0bits>
 800f0c4:	d8c00017 	ldw	r3,0(sp)
 800f0c8:	04000044 	movi	r16,1
 800f0cc:	9c000415 	stw	r16,16(r19)
 800f0d0:	98c00515 	stw	r3,20(r19)
 800f0d4:	10800804 	addi	r2,r2,32
 800f0d8:	883fe126 	beq	r17,zero,800f060 <__d2b+0x8c>
 800f0dc:	00c00d44 	movi	r3,53
 800f0e0:	8c7ef344 	addi	r17,r17,-1075
 800f0e4:	88a3883a 	add	r17,r17,r2
 800f0e8:	1885c83a 	sub	r2,r3,r2
 800f0ec:	d8c00817 	ldw	r3,32(sp)
 800f0f0:	94400015 	stw	r17,0(r18)
 800f0f4:	18800015 	stw	r2,0(r3)
 800f0f8:	003fe706 	br	800f098 <__d2b+0xc4>
 800f0fc:	01000804 	movi	r4,32
 800f100:	2089c83a 	sub	r4,r4,r2
 800f104:	1908983a 	sll	r4,r3,r4
 800f108:	d9400117 	ldw	r5,4(sp)
 800f10c:	1886d83a 	srl	r3,r3,r2
 800f110:	2148b03a 	or	r4,r4,r5
 800f114:	99000515 	stw	r4,20(r19)
 800f118:	d8c00015 	stw	r3,0(sp)
 800f11c:	003fca06 	br	800f048 <__d2b+0x74>

0800f120 <__ratio>:
 800f120:	defff904 	addi	sp,sp,-28
 800f124:	dc400315 	stw	r17,12(sp)
 800f128:	2823883a 	mov	r17,r5
 800f12c:	d9400104 	addi	r5,sp,4
 800f130:	dfc00615 	stw	ra,24(sp)
 800f134:	dcc00515 	stw	r19,20(sp)
 800f138:	dc800415 	stw	r18,16(sp)
 800f13c:	2027883a 	mov	r19,r4
 800f140:	dc000215 	stw	r16,8(sp)
 800f144:	800eec80 	call	800eec8 <__b2d>
 800f148:	d80b883a 	mov	r5,sp
 800f14c:	8809883a 	mov	r4,r17
 800f150:	1025883a 	mov	r18,r2
 800f154:	1821883a 	mov	r16,r3
 800f158:	800eec80 	call	800eec8 <__b2d>
 800f15c:	8a000417 	ldw	r8,16(r17)
 800f160:	99000417 	ldw	r4,16(r19)
 800f164:	d9400117 	ldw	r5,4(sp)
 800f168:	2209c83a 	sub	r4,r4,r8
 800f16c:	2010917a 	slli	r8,r4,5
 800f170:	d9000017 	ldw	r4,0(sp)
 800f174:	2909c83a 	sub	r4,r5,r4
 800f178:	4109883a 	add	r4,r8,r4
 800f17c:	01000e0e 	bge	zero,r4,800f1b8 <__ratio+0x98>
 800f180:	2008953a 	slli	r4,r4,20
 800f184:	2421883a 	add	r16,r4,r16
 800f188:	100d883a 	mov	r6,r2
 800f18c:	180f883a 	mov	r7,r3
 800f190:	9009883a 	mov	r4,r18
 800f194:	800b883a 	mov	r5,r16
 800f198:	80131980 	call	8013198 <__divdf3>
 800f19c:	dfc00617 	ldw	ra,24(sp)
 800f1a0:	dcc00517 	ldw	r19,20(sp)
 800f1a4:	dc800417 	ldw	r18,16(sp)
 800f1a8:	dc400317 	ldw	r17,12(sp)
 800f1ac:	dc000217 	ldw	r16,8(sp)
 800f1b0:	dec00704 	addi	sp,sp,28
 800f1b4:	f800283a 	ret
 800f1b8:	2008953a 	slli	r4,r4,20
 800f1bc:	1907c83a 	sub	r3,r3,r4
 800f1c0:	003ff106 	br	800f188 <__ratio+0x68>

0800f1c4 <_mprec_log10>:
 800f1c4:	defffe04 	addi	sp,sp,-8
 800f1c8:	dc000015 	stw	r16,0(sp)
 800f1cc:	dfc00115 	stw	ra,4(sp)
 800f1d0:	008005c4 	movi	r2,23
 800f1d4:	2021883a 	mov	r16,r4
 800f1d8:	11000d0e 	bge	r2,r4,800f210 <_mprec_log10+0x4c>
 800f1dc:	0005883a 	mov	r2,zero
 800f1e0:	00cffc34 	movhi	r3,16368
 800f1e4:	843fffc4 	addi	r16,r16,-1
 800f1e8:	000d883a 	mov	r6,zero
 800f1ec:	01d00934 	movhi	r7,16420
 800f1f0:	1009883a 	mov	r4,r2
 800f1f4:	180b883a 	mov	r5,r3
 800f1f8:	8013dc00 	call	8013dc0 <__muldf3>
 800f1fc:	803ff91e 	bne	r16,zero,800f1e4 <_mprec_log10+0x20>
 800f200:	dfc00117 	ldw	ra,4(sp)
 800f204:	dc000017 	ldw	r16,0(sp)
 800f208:	dec00204 	addi	sp,sp,8
 800f20c:	f800283a 	ret
 800f210:	202090fa 	slli	r16,r4,3
 800f214:	008200b4 	movhi	r2,2050
 800f218:	10a10204 	addi	r2,r2,-31736
 800f21c:	1421883a 	add	r16,r2,r16
 800f220:	80800017 	ldw	r2,0(r16)
 800f224:	80c00117 	ldw	r3,4(r16)
 800f228:	dfc00117 	ldw	ra,4(sp)
 800f22c:	dc000017 	ldw	r16,0(sp)
 800f230:	dec00204 	addi	sp,sp,8
 800f234:	f800283a 	ret

0800f238 <__copybits>:
 800f238:	297fffc4 	addi	r5,r5,-1
 800f23c:	280fd17a 	srai	r7,r5,5
 800f240:	30c00417 	ldw	r3,16(r6)
 800f244:	30800504 	addi	r2,r6,20
 800f248:	39c00044 	addi	r7,r7,1
 800f24c:	18c7883a 	add	r3,r3,r3
 800f250:	39cf883a 	add	r7,r7,r7
 800f254:	18c7883a 	add	r3,r3,r3
 800f258:	39cf883a 	add	r7,r7,r7
 800f25c:	10c7883a 	add	r3,r2,r3
 800f260:	21cf883a 	add	r7,r4,r7
 800f264:	10c00d2e 	bgeu	r2,r3,800f29c <__copybits+0x64>
 800f268:	200b883a 	mov	r5,r4
 800f26c:	12000017 	ldw	r8,0(r2)
 800f270:	29400104 	addi	r5,r5,4
 800f274:	10800104 	addi	r2,r2,4
 800f278:	2a3fff15 	stw	r8,-4(r5)
 800f27c:	10fffb36 	bltu	r2,r3,800f26c <__copybits+0x34>
 800f280:	1985c83a 	sub	r2,r3,r6
 800f284:	10bffac4 	addi	r2,r2,-21
 800f288:	1004d0ba 	srli	r2,r2,2
 800f28c:	10800044 	addi	r2,r2,1
 800f290:	1085883a 	add	r2,r2,r2
 800f294:	1085883a 	add	r2,r2,r2
 800f298:	2089883a 	add	r4,r4,r2
 800f29c:	21c0032e 	bgeu	r4,r7,800f2ac <__copybits+0x74>
 800f2a0:	20000015 	stw	zero,0(r4)
 800f2a4:	21000104 	addi	r4,r4,4
 800f2a8:	21fffd36 	bltu	r4,r7,800f2a0 <__copybits+0x68>
 800f2ac:	f800283a 	ret

0800f2b0 <__any_on>:
 800f2b0:	20c00417 	ldw	r3,16(r4)
 800f2b4:	2805d17a 	srai	r2,r5,5
 800f2b8:	21000504 	addi	r4,r4,20
 800f2bc:	18800d0e 	bge	r3,r2,800f2f4 <__any_on+0x44>
 800f2c0:	18c7883a 	add	r3,r3,r3
 800f2c4:	18c7883a 	add	r3,r3,r3
 800f2c8:	20c7883a 	add	r3,r4,r3
 800f2cc:	20c0192e 	bgeu	r4,r3,800f334 <__any_on+0x84>
 800f2d0:	18bfff17 	ldw	r2,-4(r3)
 800f2d4:	18ffff04 	addi	r3,r3,-4
 800f2d8:	1000041e 	bne	r2,zero,800f2ec <__any_on+0x3c>
 800f2dc:	20c0142e 	bgeu	r4,r3,800f330 <__any_on+0x80>
 800f2e0:	18ffff04 	addi	r3,r3,-4
 800f2e4:	19400017 	ldw	r5,0(r3)
 800f2e8:	283ffc26 	beq	r5,zero,800f2dc <__any_on+0x2c>
 800f2ec:	00800044 	movi	r2,1
 800f2f0:	f800283a 	ret
 800f2f4:	10c00a0e 	bge	r2,r3,800f320 <__any_on+0x70>
 800f2f8:	1085883a 	add	r2,r2,r2
 800f2fc:	1085883a 	add	r2,r2,r2
 800f300:	294007cc 	andi	r5,r5,31
 800f304:	2087883a 	add	r3,r4,r2
 800f308:	283ff026 	beq	r5,zero,800f2cc <__any_on+0x1c>
 800f30c:	19800017 	ldw	r6,0(r3)
 800f310:	3144d83a 	srl	r2,r6,r5
 800f314:	114a983a 	sll	r5,r2,r5
 800f318:	317ff41e 	bne	r6,r5,800f2ec <__any_on+0x3c>
 800f31c:	003feb06 	br	800f2cc <__any_on+0x1c>
 800f320:	1085883a 	add	r2,r2,r2
 800f324:	1085883a 	add	r2,r2,r2
 800f328:	2087883a 	add	r3,r4,r2
 800f32c:	003fe706 	br	800f2cc <__any_on+0x1c>
 800f330:	f800283a 	ret
 800f334:	0005883a 	mov	r2,zero
 800f338:	f800283a 	ret

0800f33c <_putc_r>:
 800f33c:	defffc04 	addi	sp,sp,-16
 800f340:	dc000215 	stw	r16,8(sp)
 800f344:	dfc00315 	stw	ra,12(sp)
 800f348:	2021883a 	mov	r16,r4
 800f34c:	20000226 	beq	r4,zero,800f358 <_putc_r+0x1c>
 800f350:	20800e17 	ldw	r2,56(r4)
 800f354:	10001b26 	beq	r2,zero,800f3c4 <_putc_r+0x88>
 800f358:	30800217 	ldw	r2,8(r6)
 800f35c:	10bfffc4 	addi	r2,r2,-1
 800f360:	30800215 	stw	r2,8(r6)
 800f364:	10000a16 	blt	r2,zero,800f390 <_putc_r+0x54>
 800f368:	30800017 	ldw	r2,0(r6)
 800f36c:	11400005 	stb	r5,0(r2)
 800f370:	30800017 	ldw	r2,0(r6)
 800f374:	10c00044 	addi	r3,r2,1
 800f378:	30c00015 	stw	r3,0(r6)
 800f37c:	10800003 	ldbu	r2,0(r2)
 800f380:	dfc00317 	ldw	ra,12(sp)
 800f384:	dc000217 	ldw	r16,8(sp)
 800f388:	dec00404 	addi	sp,sp,16
 800f38c:	f800283a 	ret
 800f390:	30c00617 	ldw	r3,24(r6)
 800f394:	10c00616 	blt	r2,r3,800f3b0 <_putc_r+0x74>
 800f398:	30800017 	ldw	r2,0(r6)
 800f39c:	00c00284 	movi	r3,10
 800f3a0:	11400005 	stb	r5,0(r2)
 800f3a4:	30800017 	ldw	r2,0(r6)
 800f3a8:	11400003 	ldbu	r5,0(r2)
 800f3ac:	28fff11e 	bne	r5,r3,800f374 <_putc_r+0x38>
 800f3b0:	8009883a 	mov	r4,r16
 800f3b4:	dfc00317 	ldw	ra,12(sp)
 800f3b8:	dc000217 	ldw	r16,8(sp)
 800f3bc:	dec00404 	addi	sp,sp,16
 800f3c0:	80113e01 	jmpi	80113e0 <__swbuf_r>
 800f3c4:	d9400015 	stw	r5,0(sp)
 800f3c8:	d9800115 	stw	r6,4(sp)
 800f3cc:	800ca700 	call	800ca70 <__sinit>
 800f3d0:	d9800117 	ldw	r6,4(sp)
 800f3d4:	d9400017 	ldw	r5,0(sp)
 800f3d8:	003fdf06 	br	800f358 <_putc_r+0x1c>

0800f3dc <putc>:
 800f3dc:	008200b4 	movhi	r2,2050
 800f3e0:	defffc04 	addi	sp,sp,-16
 800f3e4:	10a85804 	addi	r2,r2,-24224
 800f3e8:	dc000115 	stw	r16,4(sp)
 800f3ec:	14000017 	ldw	r16,0(r2)
 800f3f0:	dc400215 	stw	r17,8(sp)
 800f3f4:	dfc00315 	stw	ra,12(sp)
 800f3f8:	2023883a 	mov	r17,r4
 800f3fc:	80000226 	beq	r16,zero,800f408 <putc+0x2c>
 800f400:	80800e17 	ldw	r2,56(r16)
 800f404:	10001a26 	beq	r2,zero,800f470 <putc+0x94>
 800f408:	28800217 	ldw	r2,8(r5)
 800f40c:	10bfffc4 	addi	r2,r2,-1
 800f410:	28800215 	stw	r2,8(r5)
 800f414:	10000b16 	blt	r2,zero,800f444 <putc+0x68>
 800f418:	28800017 	ldw	r2,0(r5)
 800f41c:	14400005 	stb	r17,0(r2)
 800f420:	28800017 	ldw	r2,0(r5)
 800f424:	10c00044 	addi	r3,r2,1
 800f428:	28c00015 	stw	r3,0(r5)
 800f42c:	10800003 	ldbu	r2,0(r2)
 800f430:	dfc00317 	ldw	ra,12(sp)
 800f434:	dc400217 	ldw	r17,8(sp)
 800f438:	dc000117 	ldw	r16,4(sp)
 800f43c:	dec00404 	addi	sp,sp,16
 800f440:	f800283a 	ret
 800f444:	28c00617 	ldw	r3,24(r5)
 800f448:	10c00e16 	blt	r2,r3,800f484 <putc+0xa8>
 800f44c:	28800017 	ldw	r2,0(r5)
 800f450:	01000284 	movi	r4,10
 800f454:	14400005 	stb	r17,0(r2)
 800f458:	28800017 	ldw	r2,0(r5)
 800f45c:	10c00003 	ldbu	r3,0(r2)
 800f460:	193ff01e 	bne	r3,r4,800f424 <putc+0x48>
 800f464:	280d883a 	mov	r6,r5
 800f468:	180b883a 	mov	r5,r3
 800f46c:	00000706 	br	800f48c <putc+0xb0>
 800f470:	8009883a 	mov	r4,r16
 800f474:	d9400015 	stw	r5,0(sp)
 800f478:	800ca700 	call	800ca70 <__sinit>
 800f47c:	d9400017 	ldw	r5,0(sp)
 800f480:	003fe106 	br	800f408 <putc+0x2c>
 800f484:	280d883a 	mov	r6,r5
 800f488:	880b883a 	mov	r5,r17
 800f48c:	8009883a 	mov	r4,r16
 800f490:	dfc00317 	ldw	ra,12(sp)
 800f494:	dc400217 	ldw	r17,8(sp)
 800f498:	dc000117 	ldw	r16,4(sp)
 800f49c:	dec00404 	addi	sp,sp,16
 800f4a0:	80113e01 	jmpi	80113e0 <__swbuf_r>

0800f4a4 <_realloc_r>:
 800f4a4:	defff604 	addi	sp,sp,-40
 800f4a8:	dc800215 	stw	r18,8(sp)
 800f4ac:	dfc00915 	stw	ra,36(sp)
 800f4b0:	df000815 	stw	fp,32(sp)
 800f4b4:	ddc00715 	stw	r23,28(sp)
 800f4b8:	dd800615 	stw	r22,24(sp)
 800f4bc:	dd400515 	stw	r21,20(sp)
 800f4c0:	dd000415 	stw	r20,16(sp)
 800f4c4:	dcc00315 	stw	r19,12(sp)
 800f4c8:	dc400115 	stw	r17,4(sp)
 800f4cc:	dc000015 	stw	r16,0(sp)
 800f4d0:	3025883a 	mov	r18,r6
 800f4d4:	2800b726 	beq	r5,zero,800f7b4 <_realloc_r+0x310>
 800f4d8:	282b883a 	mov	r21,r5
 800f4dc:	2029883a 	mov	r20,r4
 800f4e0:	80159200 	call	8015920 <__malloc_lock>
 800f4e4:	a8bfff17 	ldw	r2,-4(r21)
 800f4e8:	043fff04 	movi	r16,-4
 800f4ec:	90c002c4 	addi	r3,r18,11
 800f4f0:	01000584 	movi	r4,22
 800f4f4:	acfffe04 	addi	r19,r21,-8
 800f4f8:	1420703a 	and	r16,r2,r16
 800f4fc:	20c0332e 	bgeu	r4,r3,800f5cc <_realloc_r+0x128>
 800f500:	047ffe04 	movi	r17,-8
 800f504:	1c62703a 	and	r17,r3,r17
 800f508:	8807883a 	mov	r3,r17
 800f50c:	88005816 	blt	r17,zero,800f670 <_realloc_r+0x1cc>
 800f510:	8c805736 	bltu	r17,r18,800f670 <_realloc_r+0x1cc>
 800f514:	80c0300e 	bge	r16,r3,800f5d8 <_realloc_r+0x134>
 800f518:	070200b4 	movhi	fp,2050
 800f51c:	e722c404 	addi	fp,fp,-29936
 800f520:	e1c00217 	ldw	r7,8(fp)
 800f524:	9c09883a 	add	r4,r19,r16
 800f528:	22000117 	ldw	r8,4(r4)
 800f52c:	21c06326 	beq	r4,r7,800f6bc <_realloc_r+0x218>
 800f530:	017fff84 	movi	r5,-2
 800f534:	414a703a 	and	r5,r8,r5
 800f538:	214b883a 	add	r5,r4,r5
 800f53c:	29800117 	ldw	r6,4(r5)
 800f540:	3180004c 	andi	r6,r6,1
 800f544:	30003f26 	beq	r6,zero,800f644 <_realloc_r+0x1a0>
 800f548:	1080004c 	andi	r2,r2,1
 800f54c:	10008326 	beq	r2,zero,800f75c <_realloc_r+0x2b8>
 800f550:	900b883a 	mov	r5,r18
 800f554:	a009883a 	mov	r4,r20
 800f558:	800d8380 	call	800d838 <_malloc_r>
 800f55c:	1025883a 	mov	r18,r2
 800f560:	10011e26 	beq	r2,zero,800f9dc <_realloc_r+0x538>
 800f564:	a93fff17 	ldw	r4,-4(r21)
 800f568:	10fffe04 	addi	r3,r2,-8
 800f56c:	00bfff84 	movi	r2,-2
 800f570:	2084703a 	and	r2,r4,r2
 800f574:	9885883a 	add	r2,r19,r2
 800f578:	1880ee26 	beq	r3,r2,800f934 <_realloc_r+0x490>
 800f57c:	81bfff04 	addi	r6,r16,-4
 800f580:	00800904 	movi	r2,36
 800f584:	1180b836 	bltu	r2,r6,800f868 <_realloc_r+0x3c4>
 800f588:	00c004c4 	movi	r3,19
 800f58c:	19809636 	bltu	r3,r6,800f7e8 <_realloc_r+0x344>
 800f590:	9005883a 	mov	r2,r18
 800f594:	a807883a 	mov	r3,r21
 800f598:	19000017 	ldw	r4,0(r3)
 800f59c:	11000015 	stw	r4,0(r2)
 800f5a0:	19000117 	ldw	r4,4(r3)
 800f5a4:	11000115 	stw	r4,4(r2)
 800f5a8:	18c00217 	ldw	r3,8(r3)
 800f5ac:	10c00215 	stw	r3,8(r2)
 800f5b0:	a80b883a 	mov	r5,r21
 800f5b4:	a009883a 	mov	r4,r20
 800f5b8:	800cbe40 	call	800cbe4 <_free_r>
 800f5bc:	a009883a 	mov	r4,r20
 800f5c0:	80159440 	call	8015944 <__malloc_unlock>
 800f5c4:	9005883a 	mov	r2,r18
 800f5c8:	00001206 	br	800f614 <_realloc_r+0x170>
 800f5cc:	00c00404 	movi	r3,16
 800f5d0:	1823883a 	mov	r17,r3
 800f5d4:	003fce06 	br	800f510 <_realloc_r+0x6c>
 800f5d8:	a825883a 	mov	r18,r21
 800f5dc:	8445c83a 	sub	r2,r16,r17
 800f5e0:	00c003c4 	movi	r3,15
 800f5e4:	18802636 	bltu	r3,r2,800f680 <_realloc_r+0x1dc>
 800f5e8:	99800117 	ldw	r6,4(r19)
 800f5ec:	9c07883a 	add	r3,r19,r16
 800f5f0:	3180004c 	andi	r6,r6,1
 800f5f4:	3420b03a 	or	r16,r6,r16
 800f5f8:	9c000115 	stw	r16,4(r19)
 800f5fc:	18800117 	ldw	r2,4(r3)
 800f600:	10800054 	ori	r2,r2,1
 800f604:	18800115 	stw	r2,4(r3)
 800f608:	a009883a 	mov	r4,r20
 800f60c:	80159440 	call	8015944 <__malloc_unlock>
 800f610:	9005883a 	mov	r2,r18
 800f614:	dfc00917 	ldw	ra,36(sp)
 800f618:	df000817 	ldw	fp,32(sp)
 800f61c:	ddc00717 	ldw	r23,28(sp)
 800f620:	dd800617 	ldw	r22,24(sp)
 800f624:	dd400517 	ldw	r21,20(sp)
 800f628:	dd000417 	ldw	r20,16(sp)
 800f62c:	dcc00317 	ldw	r19,12(sp)
 800f630:	dc800217 	ldw	r18,8(sp)
 800f634:	dc400117 	ldw	r17,4(sp)
 800f638:	dc000017 	ldw	r16,0(sp)
 800f63c:	dec00a04 	addi	sp,sp,40
 800f640:	f800283a 	ret
 800f644:	017fff04 	movi	r5,-4
 800f648:	414a703a 	and	r5,r8,r5
 800f64c:	814d883a 	add	r6,r16,r5
 800f650:	30c01f16 	blt	r6,r3,800f6d0 <_realloc_r+0x22c>
 800f654:	20800317 	ldw	r2,12(r4)
 800f658:	20c00217 	ldw	r3,8(r4)
 800f65c:	a825883a 	mov	r18,r21
 800f660:	3021883a 	mov	r16,r6
 800f664:	18800315 	stw	r2,12(r3)
 800f668:	10c00215 	stw	r3,8(r2)
 800f66c:	003fdb06 	br	800f5dc <_realloc_r+0x138>
 800f670:	00800304 	movi	r2,12
 800f674:	a0800015 	stw	r2,0(r20)
 800f678:	0005883a 	mov	r2,zero
 800f67c:	003fe506 	br	800f614 <_realloc_r+0x170>
 800f680:	98c00117 	ldw	r3,4(r19)
 800f684:	9c4b883a 	add	r5,r19,r17
 800f688:	11000054 	ori	r4,r2,1
 800f68c:	18c0004c 	andi	r3,r3,1
 800f690:	1c62b03a 	or	r17,r3,r17
 800f694:	9c400115 	stw	r17,4(r19)
 800f698:	29000115 	stw	r4,4(r5)
 800f69c:	2885883a 	add	r2,r5,r2
 800f6a0:	10c00117 	ldw	r3,4(r2)
 800f6a4:	29400204 	addi	r5,r5,8
 800f6a8:	a009883a 	mov	r4,r20
 800f6ac:	18c00054 	ori	r3,r3,1
 800f6b0:	10c00115 	stw	r3,4(r2)
 800f6b4:	800cbe40 	call	800cbe4 <_free_r>
 800f6b8:	003fd306 	br	800f608 <_realloc_r+0x164>
 800f6bc:	017fff04 	movi	r5,-4
 800f6c0:	414a703a 	and	r5,r8,r5
 800f6c4:	89800404 	addi	r6,r17,16
 800f6c8:	8151883a 	add	r8,r16,r5
 800f6cc:	4180590e 	bge	r8,r6,800f834 <_realloc_r+0x390>
 800f6d0:	1080004c 	andi	r2,r2,1
 800f6d4:	103f9e1e 	bne	r2,zero,800f550 <_realloc_r+0xac>
 800f6d8:	adbffe17 	ldw	r22,-8(r21)
 800f6dc:	00bfff04 	movi	r2,-4
 800f6e0:	9dadc83a 	sub	r22,r19,r22
 800f6e4:	b1800117 	ldw	r6,4(r22)
 800f6e8:	3084703a 	and	r2,r6,r2
 800f6ec:	20002026 	beq	r4,zero,800f770 <_realloc_r+0x2cc>
 800f6f0:	80af883a 	add	r23,r16,r2
 800f6f4:	b96f883a 	add	r23,r23,r5
 800f6f8:	21c05f26 	beq	r4,r7,800f878 <_realloc_r+0x3d4>
 800f6fc:	b8c01c16 	blt	r23,r3,800f770 <_realloc_r+0x2cc>
 800f700:	20800317 	ldw	r2,12(r4)
 800f704:	20c00217 	ldw	r3,8(r4)
 800f708:	81bfff04 	addi	r6,r16,-4
 800f70c:	01000904 	movi	r4,36
 800f710:	18800315 	stw	r2,12(r3)
 800f714:	10c00215 	stw	r3,8(r2)
 800f718:	b0c00217 	ldw	r3,8(r22)
 800f71c:	b0800317 	ldw	r2,12(r22)
 800f720:	b4800204 	addi	r18,r22,8
 800f724:	18800315 	stw	r2,12(r3)
 800f728:	10c00215 	stw	r3,8(r2)
 800f72c:	21801b36 	bltu	r4,r6,800f79c <_realloc_r+0x2f8>
 800f730:	008004c4 	movi	r2,19
 800f734:	1180352e 	bgeu	r2,r6,800f80c <_realloc_r+0x368>
 800f738:	a8800017 	ldw	r2,0(r21)
 800f73c:	b0800215 	stw	r2,8(r22)
 800f740:	a8800117 	ldw	r2,4(r21)
 800f744:	b0800315 	stw	r2,12(r22)
 800f748:	008006c4 	movi	r2,27
 800f74c:	11807f36 	bltu	r2,r6,800f94c <_realloc_r+0x4a8>
 800f750:	b0800404 	addi	r2,r22,16
 800f754:	ad400204 	addi	r21,r21,8
 800f758:	00002d06 	br	800f810 <_realloc_r+0x36c>
 800f75c:	adbffe17 	ldw	r22,-8(r21)
 800f760:	00bfff04 	movi	r2,-4
 800f764:	9dadc83a 	sub	r22,r19,r22
 800f768:	b1000117 	ldw	r4,4(r22)
 800f76c:	2084703a 	and	r2,r4,r2
 800f770:	b03f7726 	beq	r22,zero,800f550 <_realloc_r+0xac>
 800f774:	80af883a 	add	r23,r16,r2
 800f778:	b8ff7516 	blt	r23,r3,800f550 <_realloc_r+0xac>
 800f77c:	b0800317 	ldw	r2,12(r22)
 800f780:	b0c00217 	ldw	r3,8(r22)
 800f784:	81bfff04 	addi	r6,r16,-4
 800f788:	01000904 	movi	r4,36
 800f78c:	18800315 	stw	r2,12(r3)
 800f790:	10c00215 	stw	r3,8(r2)
 800f794:	b4800204 	addi	r18,r22,8
 800f798:	21bfe52e 	bgeu	r4,r6,800f730 <_realloc_r+0x28c>
 800f79c:	a80b883a 	mov	r5,r21
 800f7a0:	9009883a 	mov	r4,r18
 800f7a4:	800e1280 	call	800e128 <memmove>
 800f7a8:	b821883a 	mov	r16,r23
 800f7ac:	b027883a 	mov	r19,r22
 800f7b0:	003f8a06 	br	800f5dc <_realloc_r+0x138>
 800f7b4:	300b883a 	mov	r5,r6
 800f7b8:	dfc00917 	ldw	ra,36(sp)
 800f7bc:	df000817 	ldw	fp,32(sp)
 800f7c0:	ddc00717 	ldw	r23,28(sp)
 800f7c4:	dd800617 	ldw	r22,24(sp)
 800f7c8:	dd400517 	ldw	r21,20(sp)
 800f7cc:	dd000417 	ldw	r20,16(sp)
 800f7d0:	dcc00317 	ldw	r19,12(sp)
 800f7d4:	dc800217 	ldw	r18,8(sp)
 800f7d8:	dc400117 	ldw	r17,4(sp)
 800f7dc:	dc000017 	ldw	r16,0(sp)
 800f7e0:	dec00a04 	addi	sp,sp,40
 800f7e4:	800d8381 	jmpi	800d838 <_malloc_r>
 800f7e8:	a8c00017 	ldw	r3,0(r21)
 800f7ec:	90c00015 	stw	r3,0(r18)
 800f7f0:	a8c00117 	ldw	r3,4(r21)
 800f7f4:	90c00115 	stw	r3,4(r18)
 800f7f8:	00c006c4 	movi	r3,27
 800f7fc:	19804536 	bltu	r3,r6,800f914 <_realloc_r+0x470>
 800f800:	90800204 	addi	r2,r18,8
 800f804:	a8c00204 	addi	r3,r21,8
 800f808:	003f6306 	br	800f598 <_realloc_r+0xf4>
 800f80c:	9005883a 	mov	r2,r18
 800f810:	a8c00017 	ldw	r3,0(r21)
 800f814:	b821883a 	mov	r16,r23
 800f818:	b027883a 	mov	r19,r22
 800f81c:	10c00015 	stw	r3,0(r2)
 800f820:	a8c00117 	ldw	r3,4(r21)
 800f824:	10c00115 	stw	r3,4(r2)
 800f828:	a8c00217 	ldw	r3,8(r21)
 800f82c:	10c00215 	stw	r3,8(r2)
 800f830:	003f6a06 	br	800f5dc <_realloc_r+0x138>
 800f834:	9c67883a 	add	r19,r19,r17
 800f838:	4445c83a 	sub	r2,r8,r17
 800f83c:	e4c00215 	stw	r19,8(fp)
 800f840:	10800054 	ori	r2,r2,1
 800f844:	98800115 	stw	r2,4(r19)
 800f848:	a8bfff17 	ldw	r2,-4(r21)
 800f84c:	a009883a 	mov	r4,r20
 800f850:	1080004c 	andi	r2,r2,1
 800f854:	1462b03a 	or	r17,r2,r17
 800f858:	ac7fff15 	stw	r17,-4(r21)
 800f85c:	80159440 	call	8015944 <__malloc_unlock>
 800f860:	a805883a 	mov	r2,r21
 800f864:	003f6b06 	br	800f614 <_realloc_r+0x170>
 800f868:	a80b883a 	mov	r5,r21
 800f86c:	9009883a 	mov	r4,r18
 800f870:	800e1280 	call	800e128 <memmove>
 800f874:	003f4e06 	br	800f5b0 <_realloc_r+0x10c>
 800f878:	89000404 	addi	r4,r17,16
 800f87c:	b93fbc16 	blt	r23,r4,800f770 <_realloc_r+0x2cc>
 800f880:	b0800317 	ldw	r2,12(r22)
 800f884:	b0c00217 	ldw	r3,8(r22)
 800f888:	81bfff04 	addi	r6,r16,-4
 800f88c:	01000904 	movi	r4,36
 800f890:	18800315 	stw	r2,12(r3)
 800f894:	10c00215 	stw	r3,8(r2)
 800f898:	b4800204 	addi	r18,r22,8
 800f89c:	21804336 	bltu	r4,r6,800f9ac <_realloc_r+0x508>
 800f8a0:	008004c4 	movi	r2,19
 800f8a4:	11803f2e 	bgeu	r2,r6,800f9a4 <_realloc_r+0x500>
 800f8a8:	a8800017 	ldw	r2,0(r21)
 800f8ac:	b0800215 	stw	r2,8(r22)
 800f8b0:	a8800117 	ldw	r2,4(r21)
 800f8b4:	b0800315 	stw	r2,12(r22)
 800f8b8:	008006c4 	movi	r2,27
 800f8bc:	11803f36 	bltu	r2,r6,800f9bc <_realloc_r+0x518>
 800f8c0:	b0800404 	addi	r2,r22,16
 800f8c4:	ad400204 	addi	r21,r21,8
 800f8c8:	a8c00017 	ldw	r3,0(r21)
 800f8cc:	10c00015 	stw	r3,0(r2)
 800f8d0:	a8c00117 	ldw	r3,4(r21)
 800f8d4:	10c00115 	stw	r3,4(r2)
 800f8d8:	a8c00217 	ldw	r3,8(r21)
 800f8dc:	10c00215 	stw	r3,8(r2)
 800f8e0:	b447883a 	add	r3,r22,r17
 800f8e4:	bc45c83a 	sub	r2,r23,r17
 800f8e8:	e0c00215 	stw	r3,8(fp)
 800f8ec:	10800054 	ori	r2,r2,1
 800f8f0:	18800115 	stw	r2,4(r3)
 800f8f4:	b0800117 	ldw	r2,4(r22)
 800f8f8:	a009883a 	mov	r4,r20
 800f8fc:	1080004c 	andi	r2,r2,1
 800f900:	1462b03a 	or	r17,r2,r17
 800f904:	b4400115 	stw	r17,4(r22)
 800f908:	80159440 	call	8015944 <__malloc_unlock>
 800f90c:	9005883a 	mov	r2,r18
 800f910:	003f4006 	br	800f614 <_realloc_r+0x170>
 800f914:	a8c00217 	ldw	r3,8(r21)
 800f918:	90c00215 	stw	r3,8(r18)
 800f91c:	a8c00317 	ldw	r3,12(r21)
 800f920:	90c00315 	stw	r3,12(r18)
 800f924:	30801126 	beq	r6,r2,800f96c <_realloc_r+0x4c8>
 800f928:	90800404 	addi	r2,r18,16
 800f92c:	a8c00404 	addi	r3,r21,16
 800f930:	003f1906 	br	800f598 <_realloc_r+0xf4>
 800f934:	90ffff17 	ldw	r3,-4(r18)
 800f938:	00bfff04 	movi	r2,-4
 800f93c:	a825883a 	mov	r18,r21
 800f940:	1884703a 	and	r2,r3,r2
 800f944:	80a1883a 	add	r16,r16,r2
 800f948:	003f2406 	br	800f5dc <_realloc_r+0x138>
 800f94c:	a8800217 	ldw	r2,8(r21)
 800f950:	b0800415 	stw	r2,16(r22)
 800f954:	a8800317 	ldw	r2,12(r21)
 800f958:	b0800515 	stw	r2,20(r22)
 800f95c:	31000a26 	beq	r6,r4,800f988 <_realloc_r+0x4e4>
 800f960:	b0800604 	addi	r2,r22,24
 800f964:	ad400404 	addi	r21,r21,16
 800f968:	003fa906 	br	800f810 <_realloc_r+0x36c>
 800f96c:	a9000417 	ldw	r4,16(r21)
 800f970:	90800604 	addi	r2,r18,24
 800f974:	a8c00604 	addi	r3,r21,24
 800f978:	91000415 	stw	r4,16(r18)
 800f97c:	a9000517 	ldw	r4,20(r21)
 800f980:	91000515 	stw	r4,20(r18)
 800f984:	003f0406 	br	800f598 <_realloc_r+0xf4>
 800f988:	a8c00417 	ldw	r3,16(r21)
 800f98c:	ad400604 	addi	r21,r21,24
 800f990:	b0800804 	addi	r2,r22,32
 800f994:	b0c00615 	stw	r3,24(r22)
 800f998:	a8ffff17 	ldw	r3,-4(r21)
 800f99c:	b0c00715 	stw	r3,28(r22)
 800f9a0:	003f9b06 	br	800f810 <_realloc_r+0x36c>
 800f9a4:	9005883a 	mov	r2,r18
 800f9a8:	003fc706 	br	800f8c8 <_realloc_r+0x424>
 800f9ac:	a80b883a 	mov	r5,r21
 800f9b0:	9009883a 	mov	r4,r18
 800f9b4:	800e1280 	call	800e128 <memmove>
 800f9b8:	003fc906 	br	800f8e0 <_realloc_r+0x43c>
 800f9bc:	a8800217 	ldw	r2,8(r21)
 800f9c0:	b0800415 	stw	r2,16(r22)
 800f9c4:	a8800317 	ldw	r2,12(r21)
 800f9c8:	b0800515 	stw	r2,20(r22)
 800f9cc:	31000726 	beq	r6,r4,800f9ec <_realloc_r+0x548>
 800f9d0:	b0800604 	addi	r2,r22,24
 800f9d4:	ad400404 	addi	r21,r21,16
 800f9d8:	003fbb06 	br	800f8c8 <_realloc_r+0x424>
 800f9dc:	a009883a 	mov	r4,r20
 800f9e0:	80159440 	call	8015944 <__malloc_unlock>
 800f9e4:	0005883a 	mov	r2,zero
 800f9e8:	003f0a06 	br	800f614 <_realloc_r+0x170>
 800f9ec:	a8c00417 	ldw	r3,16(r21)
 800f9f0:	ad400604 	addi	r21,r21,24
 800f9f4:	b0800804 	addi	r2,r22,32
 800f9f8:	b0c00615 	stw	r3,24(r22)
 800f9fc:	a8ffff17 	ldw	r3,-4(r21)
 800fa00:	b0c00715 	stw	r3,28(r22)
 800fa04:	003fb006 	br	800f8c8 <_realloc_r+0x424>

0800fa08 <__fpclassifyd>:
 800fa08:	00a00034 	movhi	r2,32768
 800fa0c:	10bfffc4 	addi	r2,r2,-1
 800fa10:	2884703a 	and	r2,r5,r2
 800fa14:	10000726 	beq	r2,zero,800fa34 <__fpclassifyd+0x2c>
 800fa18:	00fffc34 	movhi	r3,65520
 800fa1c:	019ff834 	movhi	r6,32736
 800fa20:	28c7883a 	add	r3,r5,r3
 800fa24:	31bfffc4 	addi	r6,r6,-1
 800fa28:	30c00536 	bltu	r6,r3,800fa40 <__fpclassifyd+0x38>
 800fa2c:	00800104 	movi	r2,4
 800fa30:	f800283a 	ret
 800fa34:	2000021e 	bne	r4,zero,800fa40 <__fpclassifyd+0x38>
 800fa38:	00800084 	movi	r2,2
 800fa3c:	f800283a 	ret
 800fa40:	00dffc34 	movhi	r3,32752
 800fa44:	019ff834 	movhi	r6,32736
 800fa48:	28cb883a 	add	r5,r5,r3
 800fa4c:	31bfffc4 	addi	r6,r6,-1
 800fa50:	317ff62e 	bgeu	r6,r5,800fa2c <__fpclassifyd+0x24>
 800fa54:	01400434 	movhi	r5,16
 800fa58:	297fffc4 	addi	r5,r5,-1
 800fa5c:	28800236 	bltu	r5,r2,800fa68 <__fpclassifyd+0x60>
 800fa60:	008000c4 	movi	r2,3
 800fa64:	f800283a 	ret
 800fa68:	10c00226 	beq	r2,r3,800fa74 <__fpclassifyd+0x6c>
 800fa6c:	0005883a 	mov	r2,zero
 800fa70:	f800283a 	ret
 800fa74:	2005003a 	cmpeq	r2,r4,zero
 800fa78:	f800283a 	ret

0800fa7c <_sbrk_r>:
 800fa7c:	defffd04 	addi	sp,sp,-12
 800fa80:	dc000015 	stw	r16,0(sp)
 800fa84:	040200b4 	movhi	r16,2050
 800fa88:	dc400115 	stw	r17,4(sp)
 800fa8c:	842f7404 	addi	r16,r16,-16944
 800fa90:	2023883a 	mov	r17,r4
 800fa94:	2809883a 	mov	r4,r5
 800fa98:	dfc00215 	stw	ra,8(sp)
 800fa9c:	80000015 	stw	zero,0(r16)
 800faa0:	8015b2c0 	call	8015b2c <sbrk>
 800faa4:	00ffffc4 	movi	r3,-1
 800faa8:	10c00526 	beq	r2,r3,800fac0 <_sbrk_r+0x44>
 800faac:	dfc00217 	ldw	ra,8(sp)
 800fab0:	dc400117 	ldw	r17,4(sp)
 800fab4:	dc000017 	ldw	r16,0(sp)
 800fab8:	dec00304 	addi	sp,sp,12
 800fabc:	f800283a 	ret
 800fac0:	80c00017 	ldw	r3,0(r16)
 800fac4:	183ff926 	beq	r3,zero,800faac <_sbrk_r+0x30>
 800fac8:	88c00015 	stw	r3,0(r17)
 800facc:	003ff706 	br	800faac <_sbrk_r+0x30>

0800fad0 <__sread>:
 800fad0:	defffe04 	addi	sp,sp,-8
 800fad4:	dc000015 	stw	r16,0(sp)
 800fad8:	2821883a 	mov	r16,r5
 800fadc:	2940038f 	ldh	r5,14(r5)
 800fae0:	dfc00115 	stw	ra,4(sp)
 800fae4:	8011ae40 	call	8011ae4 <_read_r>
 800fae8:	10000716 	blt	r2,zero,800fb08 <__sread+0x38>
 800faec:	80c01417 	ldw	r3,80(r16)
 800faf0:	1887883a 	add	r3,r3,r2
 800faf4:	80c01415 	stw	r3,80(r16)
 800faf8:	dfc00117 	ldw	ra,4(sp)
 800fafc:	dc000017 	ldw	r16,0(sp)
 800fb00:	dec00204 	addi	sp,sp,8
 800fb04:	f800283a 	ret
 800fb08:	80c0030b 	ldhu	r3,12(r16)
 800fb0c:	18fbffcc 	andi	r3,r3,61439
 800fb10:	80c0030d 	sth	r3,12(r16)
 800fb14:	dfc00117 	ldw	ra,4(sp)
 800fb18:	dc000017 	ldw	r16,0(sp)
 800fb1c:	dec00204 	addi	sp,sp,8
 800fb20:	f800283a 	ret

0800fb24 <__seofread>:
 800fb24:	0005883a 	mov	r2,zero
 800fb28:	f800283a 	ret

0800fb2c <__swrite>:
 800fb2c:	2880030b 	ldhu	r2,12(r5)
 800fb30:	defffb04 	addi	sp,sp,-20
 800fb34:	dcc00315 	stw	r19,12(sp)
 800fb38:	dc800215 	stw	r18,8(sp)
 800fb3c:	dc400115 	stw	r17,4(sp)
 800fb40:	dc000015 	stw	r16,0(sp)
 800fb44:	dfc00415 	stw	ra,16(sp)
 800fb48:	10c0400c 	andi	r3,r2,256
 800fb4c:	2821883a 	mov	r16,r5
 800fb50:	2023883a 	mov	r17,r4
 800fb54:	3025883a 	mov	r18,r6
 800fb58:	3827883a 	mov	r19,r7
 800fb5c:	18000526 	beq	r3,zero,800fb74 <__swrite+0x48>
 800fb60:	2940038f 	ldh	r5,14(r5)
 800fb64:	01c00084 	movi	r7,2
 800fb68:	000d883a 	mov	r6,zero
 800fb6c:	8011a840 	call	8011a84 <_lseek_r>
 800fb70:	8080030b 	ldhu	r2,12(r16)
 800fb74:	8140038f 	ldh	r5,14(r16)
 800fb78:	10bbffcc 	andi	r2,r2,61439
 800fb7c:	980f883a 	mov	r7,r19
 800fb80:	900d883a 	mov	r6,r18
 800fb84:	8809883a 	mov	r4,r17
 800fb88:	8080030d 	sth	r2,12(r16)
 800fb8c:	dfc00417 	ldw	ra,16(sp)
 800fb90:	dcc00317 	ldw	r19,12(sp)
 800fb94:	dc800217 	ldw	r18,8(sp)
 800fb98:	dc400117 	ldw	r17,4(sp)
 800fb9c:	dc000017 	ldw	r16,0(sp)
 800fba0:	dec00504 	addi	sp,sp,20
 800fba4:	80115381 	jmpi	8011538 <_write_r>

0800fba8 <__sseek>:
 800fba8:	defffe04 	addi	sp,sp,-8
 800fbac:	dc000015 	stw	r16,0(sp)
 800fbb0:	2821883a 	mov	r16,r5
 800fbb4:	2940038f 	ldh	r5,14(r5)
 800fbb8:	dfc00115 	stw	ra,4(sp)
 800fbbc:	8011a840 	call	8011a84 <_lseek_r>
 800fbc0:	00ffffc4 	movi	r3,-1
 800fbc4:	10c00826 	beq	r2,r3,800fbe8 <__sseek+0x40>
 800fbc8:	80c0030b 	ldhu	r3,12(r16)
 800fbcc:	80801415 	stw	r2,80(r16)
 800fbd0:	18c40014 	ori	r3,r3,4096
 800fbd4:	80c0030d 	sth	r3,12(r16)
 800fbd8:	dfc00117 	ldw	ra,4(sp)
 800fbdc:	dc000017 	ldw	r16,0(sp)
 800fbe0:	dec00204 	addi	sp,sp,8
 800fbe4:	f800283a 	ret
 800fbe8:	80c0030b 	ldhu	r3,12(r16)
 800fbec:	18fbffcc 	andi	r3,r3,61439
 800fbf0:	80c0030d 	sth	r3,12(r16)
 800fbf4:	dfc00117 	ldw	ra,4(sp)
 800fbf8:	dc000017 	ldw	r16,0(sp)
 800fbfc:	dec00204 	addi	sp,sp,8
 800fc00:	f800283a 	ret

0800fc04 <__sclose>:
 800fc04:	2940038f 	ldh	r5,14(r5)
 800fc08:	80115981 	jmpi	8011598 <_close_r>

0800fc0c <strcmp>:
 800fc0c:	2144b03a 	or	r2,r4,r5
 800fc10:	108000cc 	andi	r2,r2,3
 800fc14:	1000171e 	bne	r2,zero,800fc74 <strcmp+0x68>
 800fc18:	20800017 	ldw	r2,0(r4)
 800fc1c:	28c00017 	ldw	r3,0(r5)
 800fc20:	10c0141e 	bne	r2,r3,800fc74 <strcmp+0x68>
 800fc24:	027fbff4 	movhi	r9,65279
 800fc28:	4a7fbfc4 	addi	r9,r9,-257
 800fc2c:	0086303a 	nor	r3,zero,r2
 800fc30:	02202074 	movhi	r8,32897
 800fc34:	1245883a 	add	r2,r2,r9
 800fc38:	42202004 	addi	r8,r8,-32640
 800fc3c:	10c4703a 	and	r2,r2,r3
 800fc40:	1204703a 	and	r2,r2,r8
 800fc44:	10000226 	beq	r2,zero,800fc50 <strcmp+0x44>
 800fc48:	00002306 	br	800fcd8 <strcmp+0xcc>
 800fc4c:	1000221e 	bne	r2,zero,800fcd8 <strcmp+0xcc>
 800fc50:	21000104 	addi	r4,r4,4
 800fc54:	20c00017 	ldw	r3,0(r4)
 800fc58:	29400104 	addi	r5,r5,4
 800fc5c:	29800017 	ldw	r6,0(r5)
 800fc60:	1a4f883a 	add	r7,r3,r9
 800fc64:	00c4303a 	nor	r2,zero,r3
 800fc68:	3884703a 	and	r2,r7,r2
 800fc6c:	1204703a 	and	r2,r2,r8
 800fc70:	19bff626 	beq	r3,r6,800fc4c <strcmp+0x40>
 800fc74:	20800003 	ldbu	r2,0(r4)
 800fc78:	10c03fcc 	andi	r3,r2,255
 800fc7c:	18c0201c 	xori	r3,r3,128
 800fc80:	18ffe004 	addi	r3,r3,-128
 800fc84:	18000c26 	beq	r3,zero,800fcb8 <strcmp+0xac>
 800fc88:	29800007 	ldb	r6,0(r5)
 800fc8c:	19800326 	beq	r3,r6,800fc9c <strcmp+0x90>
 800fc90:	00001306 	br	800fce0 <strcmp+0xd4>
 800fc94:	29800007 	ldb	r6,0(r5)
 800fc98:	11800b1e 	bne	r2,r6,800fcc8 <strcmp+0xbc>
 800fc9c:	21000044 	addi	r4,r4,1
 800fca0:	20c00003 	ldbu	r3,0(r4)
 800fca4:	29400044 	addi	r5,r5,1
 800fca8:	18803fcc 	andi	r2,r3,255
 800fcac:	1080201c 	xori	r2,r2,128
 800fcb0:	10bfe004 	addi	r2,r2,-128
 800fcb4:	103ff71e 	bne	r2,zero,800fc94 <strcmp+0x88>
 800fcb8:	0007883a 	mov	r3,zero
 800fcbc:	28800003 	ldbu	r2,0(r5)
 800fcc0:	1885c83a 	sub	r2,r3,r2
 800fcc4:	f800283a 	ret
 800fcc8:	28800003 	ldbu	r2,0(r5)
 800fccc:	18c03fcc 	andi	r3,r3,255
 800fcd0:	1885c83a 	sub	r2,r3,r2
 800fcd4:	f800283a 	ret
 800fcd8:	0005883a 	mov	r2,zero
 800fcdc:	f800283a 	ret
 800fce0:	10c03fcc 	andi	r3,r2,255
 800fce4:	003ff506 	br	800fcbc <strcmp+0xb0>

0800fce8 <__sprint_r.part.0>:
 800fce8:	28801917 	ldw	r2,100(r5)
 800fcec:	defff604 	addi	sp,sp,-40
 800fcf0:	dd400515 	stw	r21,20(sp)
 800fcf4:	dfc00915 	stw	ra,36(sp)
 800fcf8:	df000815 	stw	fp,32(sp)
 800fcfc:	ddc00715 	stw	r23,28(sp)
 800fd00:	dd800615 	stw	r22,24(sp)
 800fd04:	dd000415 	stw	r20,16(sp)
 800fd08:	dcc00315 	stw	r19,12(sp)
 800fd0c:	dc800215 	stw	r18,8(sp)
 800fd10:	dc400115 	stw	r17,4(sp)
 800fd14:	dc000015 	stw	r16,0(sp)
 800fd18:	1088000c 	andi	r2,r2,8192
 800fd1c:	302b883a 	mov	r21,r6
 800fd20:	10002e26 	beq	r2,zero,800fddc <__sprint_r.part.0+0xf4>
 800fd24:	30800217 	ldw	r2,8(r6)
 800fd28:	35800017 	ldw	r22,0(r6)
 800fd2c:	10002926 	beq	r2,zero,800fdd4 <__sprint_r.part.0+0xec>
 800fd30:	2827883a 	mov	r19,r5
 800fd34:	2029883a 	mov	r20,r4
 800fd38:	b5c00104 	addi	r23,r22,4
 800fd3c:	04bfffc4 	movi	r18,-1
 800fd40:	bc400017 	ldw	r17,0(r23)
 800fd44:	b4000017 	ldw	r16,0(r22)
 800fd48:	0039883a 	mov	fp,zero
 800fd4c:	8822d0ba 	srli	r17,r17,2
 800fd50:	8800031e 	bne	r17,zero,800fd60 <__sprint_r.part.0+0x78>
 800fd54:	00001806 	br	800fdb8 <__sprint_r.part.0+0xd0>
 800fd58:	84000104 	addi	r16,r16,4
 800fd5c:	8f001526 	beq	r17,fp,800fdb4 <__sprint_r.part.0+0xcc>
 800fd60:	81400017 	ldw	r5,0(r16)
 800fd64:	980d883a 	mov	r6,r19
 800fd68:	a009883a 	mov	r4,r20
 800fd6c:	80119300 	call	8011930 <_fputwc_r>
 800fd70:	e7000044 	addi	fp,fp,1
 800fd74:	14bff81e 	bne	r2,r18,800fd58 <__sprint_r.part.0+0x70>
 800fd78:	9005883a 	mov	r2,r18
 800fd7c:	a8000215 	stw	zero,8(r21)
 800fd80:	a8000115 	stw	zero,4(r21)
 800fd84:	dfc00917 	ldw	ra,36(sp)
 800fd88:	df000817 	ldw	fp,32(sp)
 800fd8c:	ddc00717 	ldw	r23,28(sp)
 800fd90:	dd800617 	ldw	r22,24(sp)
 800fd94:	dd400517 	ldw	r21,20(sp)
 800fd98:	dd000417 	ldw	r20,16(sp)
 800fd9c:	dcc00317 	ldw	r19,12(sp)
 800fda0:	dc800217 	ldw	r18,8(sp)
 800fda4:	dc400117 	ldw	r17,4(sp)
 800fda8:	dc000017 	ldw	r16,0(sp)
 800fdac:	dec00a04 	addi	sp,sp,40
 800fdb0:	f800283a 	ret
 800fdb4:	a8800217 	ldw	r2,8(r21)
 800fdb8:	8c63883a 	add	r17,r17,r17
 800fdbc:	8c63883a 	add	r17,r17,r17
 800fdc0:	1445c83a 	sub	r2,r2,r17
 800fdc4:	a8800215 	stw	r2,8(r21)
 800fdc8:	b5800204 	addi	r22,r22,8
 800fdcc:	bdc00204 	addi	r23,r23,8
 800fdd0:	103fdb1e 	bne	r2,zero,800fd40 <__sprint_r.part.0+0x58>
 800fdd4:	0005883a 	mov	r2,zero
 800fdd8:	003fe806 	br	800fd7c <__sprint_r.part.0+0x94>
 800fddc:	800cef40 	call	800cef4 <__sfvwrite_r>
 800fde0:	003fe606 	br	800fd7c <__sprint_r.part.0+0x94>

0800fde4 <__sprint_r>:
 800fde4:	30c00217 	ldw	r3,8(r6)
 800fde8:	18000126 	beq	r3,zero,800fdf0 <__sprint_r+0xc>
 800fdec:	800fce81 	jmpi	800fce8 <__sprint_r.part.0>
 800fdf0:	30000115 	stw	zero,4(r6)
 800fdf4:	0005883a 	mov	r2,zero
 800fdf8:	f800283a 	ret

0800fdfc <___vfiprintf_internal_r>:
 800fdfc:	deffca04 	addi	sp,sp,-216
 800fe00:	dd403115 	stw	r21,196(sp)
 800fe04:	dfc03515 	stw	ra,212(sp)
 800fe08:	df003415 	stw	fp,208(sp)
 800fe0c:	ddc03315 	stw	r23,204(sp)
 800fe10:	dd803215 	stw	r22,200(sp)
 800fe14:	dd003015 	stw	r20,192(sp)
 800fe18:	dcc02f15 	stw	r19,188(sp)
 800fe1c:	dc802e15 	stw	r18,184(sp)
 800fe20:	dc402d15 	stw	r17,180(sp)
 800fe24:	dc002c15 	stw	r16,176(sp)
 800fe28:	d9002115 	stw	r4,132(sp)
 800fe2c:	d9402015 	stw	r5,128(sp)
 800fe30:	d9c02215 	stw	r7,136(sp)
 800fe34:	302b883a 	mov	r21,r6
 800fe38:	20000226 	beq	r4,zero,800fe44 <___vfiprintf_internal_r+0x48>
 800fe3c:	20800e17 	ldw	r2,56(r4)
 800fe40:	1000cf26 	beq	r2,zero,8010180 <___vfiprintf_internal_r+0x384>
 800fe44:	d8c02017 	ldw	r3,128(sp)
 800fe48:	1880030b 	ldhu	r2,12(r3)
 800fe4c:	10c8000c 	andi	r3,r2,8192
 800fe50:	1800071e 	bne	r3,zero,800fe70 <___vfiprintf_internal_r+0x74>
 800fe54:	d9402017 	ldw	r5,128(sp)
 800fe58:	00f7ffc4 	movi	r3,-8193
 800fe5c:	10880014 	ori	r2,r2,8192
 800fe60:	29001917 	ldw	r4,100(r5)
 800fe64:	2880030d 	sth	r2,12(r5)
 800fe68:	20c6703a 	and	r3,r4,r3
 800fe6c:	28c01915 	stw	r3,100(r5)
 800fe70:	10c0020c 	andi	r3,r2,8
 800fe74:	1800a526 	beq	r3,zero,801010c <___vfiprintf_internal_r+0x310>
 800fe78:	d9002017 	ldw	r4,128(sp)
 800fe7c:	20c00417 	ldw	r3,16(r4)
 800fe80:	1800a226 	beq	r3,zero,801010c <___vfiprintf_internal_r+0x310>
 800fe84:	1080068c 	andi	r2,r2,26
 800fe88:	00c00284 	movi	r3,10
 800fe8c:	10c0a826 	beq	r2,r3,8010130 <___vfiprintf_internal_r+0x334>
 800fe90:	d9001a04 	addi	r4,sp,104
 800fe94:	d94019c4 	addi	r5,sp,103
 800fe98:	048200b4 	movhi	r18,2050
 800fe9c:	2145c83a 	sub	r2,r4,r5
 800fea0:	94a13404 	addi	r18,r18,-31536
 800fea4:	d9001e15 	stw	r4,120(sp)
 800fea8:	d9401f15 	stw	r5,124(sp)
 800feac:	dec01a15 	stw	sp,104(sp)
 800feb0:	d8001c15 	stw	zero,112(sp)
 800feb4:	d8001b15 	stw	zero,108(sp)
 800feb8:	d811883a 	mov	r8,sp
 800febc:	d8002615 	stw	zero,152(sp)
 800fec0:	d8002415 	stw	zero,144(sp)
 800fec4:	d8802815 	stw	r2,160(sp)
 800fec8:	a82d883a 	mov	r22,r21
 800fecc:	b0800007 	ldb	r2,0(r22)
 800fed0:	10040d26 	beq	r2,zero,8010f08 <___vfiprintf_internal_r+0x110c>
 800fed4:	00c00944 	movi	r3,37
 800fed8:	b029883a 	mov	r20,r22
 800fedc:	10c0021e 	bne	r2,r3,800fee8 <___vfiprintf_internal_r+0xec>
 800fee0:	00001606 	br	800ff3c <___vfiprintf_internal_r+0x140>
 800fee4:	10c00326 	beq	r2,r3,800fef4 <___vfiprintf_internal_r+0xf8>
 800fee8:	a5000044 	addi	r20,r20,1
 800feec:	a0800007 	ldb	r2,0(r20)
 800fef0:	103ffc1e 	bne	r2,zero,800fee4 <___vfiprintf_internal_r+0xe8>
 800fef4:	a5a1c83a 	sub	r16,r20,r22
 800fef8:	80001026 	beq	r16,zero,800ff3c <___vfiprintf_internal_r+0x140>
 800fefc:	d8c01c17 	ldw	r3,112(sp)
 800ff00:	d8801b17 	ldw	r2,108(sp)
 800ff04:	45800015 	stw	r22,0(r8)
 800ff08:	80c7883a 	add	r3,r16,r3
 800ff0c:	10800044 	addi	r2,r2,1
 800ff10:	44000115 	stw	r16,4(r8)
 800ff14:	d8c01c15 	stw	r3,112(sp)
 800ff18:	d8801b15 	stw	r2,108(sp)
 800ff1c:	010001c4 	movi	r4,7
 800ff20:	2080750e 	bge	r4,r2,80100f8 <___vfiprintf_internal_r+0x2fc>
 800ff24:	1803951e 	bne	r3,zero,8010d7c <___vfiprintf_internal_r+0xf80>
 800ff28:	d8c02417 	ldw	r3,144(sp)
 800ff2c:	d8001b15 	stw	zero,108(sp)
 800ff30:	d811883a 	mov	r8,sp
 800ff34:	1c07883a 	add	r3,r3,r16
 800ff38:	d8c02415 	stw	r3,144(sp)
 800ff3c:	a0800007 	ldb	r2,0(r20)
 800ff40:	1002e026 	beq	r2,zero,8010ac4 <___vfiprintf_internal_r+0xcc8>
 800ff44:	a5800044 	addi	r22,r20,1
 800ff48:	a0c00047 	ldb	r3,1(r20)
 800ff4c:	d8001d85 	stb	zero,118(sp)
 800ff50:	0027883a 	mov	r19,zero
 800ff54:	d8002305 	stb	zero,140(sp)
 800ff58:	043fffc4 	movi	r16,-1
 800ff5c:	d8002515 	stw	zero,148(sp)
 800ff60:	0023883a 	mov	r17,zero
 800ff64:	05001604 	movi	r20,88
 800ff68:	05400244 	movi	r21,9
 800ff6c:	402f883a 	mov	r23,r8
 800ff70:	b5800044 	addi	r22,r22,1
 800ff74:	18bff804 	addi	r2,r3,-32
 800ff78:	a0827736 	bltu	r20,r2,8010958 <___vfiprintf_internal_r+0xb5c>
 800ff7c:	100490ba 	slli	r2,r2,2
 800ff80:	01020074 	movhi	r4,2049
 800ff84:	213fe504 	addi	r4,r4,-108
 800ff88:	1105883a 	add	r2,r2,r4
 800ff8c:	10800017 	ldw	r2,0(r2)
 800ff90:	1000683a 	jmp	r2
 800ff94:	08010658 	cmpnei	zero,at,1049
 800ff98:	08010958 	cmpnei	zero,at,1061
 800ff9c:	08010958 	cmpnei	zero,at,1061
 800ffa0:	08010674 	orhi	zero,at,1049
 800ffa4:	08010958 	cmpnei	zero,at,1061
 800ffa8:	08010958 	cmpnei	zero,at,1061
 800ffac:	08010958 	cmpnei	zero,at,1061
 800ffb0:	08010958 	cmpnei	zero,at,1061
 800ffb4:	08010958 	cmpnei	zero,at,1061
 800ffb8:	08010958 	cmpnei	zero,at,1061
 800ffbc:	0801087c 	xorhi	zero,at,1057
 800ffc0:	080108a0 	cmpeqi	zero,at,1058
 800ffc4:	08010958 	cmpnei	zero,at,1061
 800ffc8:	08010198 	cmpnei	zero,at,1030
 800ffcc:	080108b4 	orhi	zero,at,1058
 800ffd0:	08010958 	cmpnei	zero,at,1061
 800ffd4:	08010680 	call	801068 <__alt_mem_onchip_memory2_0+0x801068>
 800ffd8:	0801068c 	andi	zero,at,1050
 800ffdc:	0801068c 	andi	zero,at,1050
 800ffe0:	0801068c 	andi	zero,at,1050
 800ffe4:	0801068c 	andi	zero,at,1050
 800ffe8:	0801068c 	andi	zero,at,1050
 800ffec:	0801068c 	andi	zero,at,1050
 800fff0:	0801068c 	andi	zero,at,1050
 800fff4:	0801068c 	andi	zero,at,1050
 800fff8:	0801068c 	andi	zero,at,1050
 800fffc:	08010958 	cmpnei	zero,at,1061
 8010000:	08010958 	cmpnei	zero,at,1061
 8010004:	08010958 	cmpnei	zero,at,1061
 8010008:	08010958 	cmpnei	zero,at,1061
 801000c:	08010958 	cmpnei	zero,at,1061
 8010010:	08010958 	cmpnei	zero,at,1061
 8010014:	08010958 	cmpnei	zero,at,1061
 8010018:	08010958 	cmpnei	zero,at,1061
 801001c:	08010958 	cmpnei	zero,at,1061
 8010020:	08010958 	cmpnei	zero,at,1061
 8010024:	080106cc 	andi	zero,at,1051
 8010028:	08010958 	cmpnei	zero,at,1061
 801002c:	08010958 	cmpnei	zero,at,1061
 8010030:	08010958 	cmpnei	zero,at,1061
 8010034:	08010958 	cmpnei	zero,at,1061
 8010038:	08010958 	cmpnei	zero,at,1061
 801003c:	08010958 	cmpnei	zero,at,1061
 8010040:	08010958 	cmpnei	zero,at,1061
 8010044:	08010958 	cmpnei	zero,at,1061
 8010048:	08010958 	cmpnei	zero,at,1061
 801004c:	08010958 	cmpnei	zero,at,1061
 8010050:	08010708 	cmpgei	zero,at,1052
 8010054:	08010958 	cmpnei	zero,at,1061
 8010058:	08010958 	cmpnei	zero,at,1061
 801005c:	08010958 	cmpnei	zero,at,1061
 8010060:	08010958 	cmpnei	zero,at,1061
 8010064:	08010958 	cmpnei	zero,at,1061
 8010068:	08010764 	muli	zero,at,1053
 801006c:	08010958 	cmpnei	zero,at,1061
 8010070:	08010958 	cmpnei	zero,at,1061
 8010074:	080107d8 	cmpnei	zero,at,1055
 8010078:	08010958 	cmpnei	zero,at,1061
 801007c:	08010958 	cmpnei	zero,at,1061
 8010080:	08010958 	cmpnei	zero,at,1061
 8010084:	08010958 	cmpnei	zero,at,1061
 8010088:	08010958 	cmpnei	zero,at,1061
 801008c:	08010958 	cmpnei	zero,at,1061
 8010090:	08010958 	cmpnei	zero,at,1061
 8010094:	08010958 	cmpnei	zero,at,1061
 8010098:	08010958 	cmpnei	zero,at,1061
 801009c:	08010958 	cmpnei	zero,at,1061
 80100a0:	08010580 	call	801058 <__alt_mem_onchip_memory2_0+0x801058>
 80100a4:	080105b0 	cmpltui	zero,at,1046
 80100a8:	08010958 	cmpnei	zero,at,1061
 80100ac:	08010958 	cmpnei	zero,at,1061
 80100b0:	08010958 	cmpnei	zero,at,1061
 80100b4:	08010900 	call	801090 <__alt_mem_onchip_memory2_0+0x801090>
 80100b8:	080105b0 	cmpltui	zero,at,1046
 80100bc:	08010958 	cmpnei	zero,at,1061
 80100c0:	08010958 	cmpnei	zero,at,1061
 80100c4:	08010458 	cmpnei	zero,at,1041
 80100c8:	08010958 	cmpnei	zero,at,1061
 80100cc:	0801046c 	andhi	zero,at,1041
 80100d0:	080104a4 	muli	zero,at,1042
 80100d4:	080101a4 	muli	zero,at,1030
 80100d8:	0801044c 	andi	zero,at,1041
 80100dc:	08010958 	cmpnei	zero,at,1061
 80100e0:	08010818 	cmpnei	zero,at,1056
 80100e4:	08010958 	cmpnei	zero,at,1061
 80100e8:	08010864 	muli	zero,at,1057
 80100ec:	08010958 	cmpnei	zero,at,1061
 80100f0:	08010958 	cmpnei	zero,at,1061
 80100f4:	08010528 	cmpgeui	zero,at,1044
 80100f8:	42000204 	addi	r8,r8,8
 80100fc:	d8c02417 	ldw	r3,144(sp)
 8010100:	1c07883a 	add	r3,r3,r16
 8010104:	d8c02415 	stw	r3,144(sp)
 8010108:	003f8c06 	br	800ff3c <___vfiprintf_internal_r+0x140>
 801010c:	d9402017 	ldw	r5,128(sp)
 8010110:	d9002117 	ldw	r4,132(sp)
 8010114:	800aa640 	call	800aa64 <__swsetup_r>
 8010118:	1003c11e 	bne	r2,zero,8011020 <___vfiprintf_internal_r+0x1224>
 801011c:	d9402017 	ldw	r5,128(sp)
 8010120:	00c00284 	movi	r3,10
 8010124:	2880030b 	ldhu	r2,12(r5)
 8010128:	1080068c 	andi	r2,r2,26
 801012c:	10ff581e 	bne	r2,r3,800fe90 <___vfiprintf_internal_r+0x94>
 8010130:	d8c02017 	ldw	r3,128(sp)
 8010134:	1880038f 	ldh	r2,14(r3)
 8010138:	103f5516 	blt	r2,zero,800fe90 <___vfiprintf_internal_r+0x94>
 801013c:	d9c02217 	ldw	r7,136(sp)
 8010140:	d9002117 	ldw	r4,132(sp)
 8010144:	a80d883a 	mov	r6,r21
 8010148:	180b883a 	mov	r5,r3
 801014c:	80113240 	call	8011324 <__sbprintf>
 8010150:	dfc03517 	ldw	ra,212(sp)
 8010154:	df003417 	ldw	fp,208(sp)
 8010158:	ddc03317 	ldw	r23,204(sp)
 801015c:	dd803217 	ldw	r22,200(sp)
 8010160:	dd403117 	ldw	r21,196(sp)
 8010164:	dd003017 	ldw	r20,192(sp)
 8010168:	dcc02f17 	ldw	r19,188(sp)
 801016c:	dc802e17 	ldw	r18,184(sp)
 8010170:	dc402d17 	ldw	r17,180(sp)
 8010174:	dc002c17 	ldw	r16,176(sp)
 8010178:	dec03604 	addi	sp,sp,216
 801017c:	f800283a 	ret
 8010180:	800ca700 	call	800ca70 <__sinit>
 8010184:	003f2f06 	br	800fe44 <___vfiprintf_internal_r+0x48>
 8010188:	d8c02517 	ldw	r3,148(sp)
 801018c:	d8802215 	stw	r2,136(sp)
 8010190:	00c7c83a 	sub	r3,zero,r3
 8010194:	d8c02515 	stw	r3,148(sp)
 8010198:	8c400114 	ori	r17,r17,4
 801019c:	b0c00007 	ldb	r3,0(r22)
 80101a0:	003f7306 	br	800ff70 <___vfiprintf_internal_r+0x174>
 80101a4:	00800c04 	movi	r2,48
 80101a8:	d9402217 	ldw	r5,136(sp)
 80101ac:	d8801d05 	stb	r2,116(sp)
 80101b0:	00801e04 	movi	r2,120
 80101b4:	d8801d45 	stb	r2,117(sp)
 80101b8:	d8001d85 	stb	zero,118(sp)
 80101bc:	b811883a 	mov	r8,r23
 80101c0:	28c00104 	addi	r3,r5,4
 80101c4:	2cc00017 	ldw	r19,0(r5)
 80101c8:	0029883a 	mov	r20,zero
 80101cc:	88800094 	ori	r2,r17,2
 80101d0:	80032516 	blt	r16,zero,8010e68 <___vfiprintf_internal_r+0x106c>
 80101d4:	00bfdfc4 	movi	r2,-129
 80101d8:	88a2703a 	and	r17,r17,r2
 80101dc:	d8c02215 	stw	r3,136(sp)
 80101e0:	8c400094 	ori	r17,r17,2
 80101e4:	98032a1e 	bne	r19,zero,8010e90 <___vfiprintf_internal_r+0x1094>
 80101e8:	008200b4 	movhi	r2,2050
 80101ec:	10a0d404 	addi	r2,r2,-31920
 80101f0:	d8802615 	stw	r2,152(sp)
 80101f4:	002b883a 	mov	r21,zero
 80101f8:	8001741e 	bne	r16,zero,80107cc <___vfiprintf_internal_r+0x9d0>
 80101fc:	0021883a 	mov	r16,zero
 8010200:	0029883a 	mov	r20,zero
 8010204:	ddc01a04 	addi	r23,sp,104
 8010208:	8027883a 	mov	r19,r16
 801020c:	8500010e 	bge	r16,r20,8010214 <___vfiprintf_internal_r+0x418>
 8010210:	a027883a 	mov	r19,r20
 8010214:	ad403fcc 	andi	r21,r21,255
 8010218:	ad40201c 	xori	r21,r21,128
 801021c:	ad7fe004 	addi	r21,r21,-128
 8010220:	a8000126 	beq	r21,zero,8010228 <___vfiprintf_internal_r+0x42c>
 8010224:	9cc00044 	addi	r19,r19,1
 8010228:	89c0008c 	andi	r7,r17,2
 801022c:	38000126 	beq	r7,zero,8010234 <___vfiprintf_internal_r+0x438>
 8010230:	9cc00084 	addi	r19,r19,2
 8010234:	88c0210c 	andi	r3,r17,132
 8010238:	1801dd1e 	bne	r3,zero,80109b0 <___vfiprintf_internal_r+0xbb4>
 801023c:	d9402517 	ldw	r5,148(sp)
 8010240:	2cebc83a 	sub	r21,r5,r19
 8010244:	0541da0e 	bge	zero,r21,80109b0 <___vfiprintf_internal_r+0xbb4>
 8010248:	07000404 	movi	fp,16
 801024c:	d8801c17 	ldw	r2,112(sp)
 8010250:	e543be0e 	bge	fp,r21,801114c <___vfiprintf_internal_r+0x1350>
 8010254:	014200b4 	movhi	r5,2050
 8010258:	29613804 	addi	r5,r5,-31520
 801025c:	dc002715 	stw	r16,156(sp)
 8010260:	d9801b17 	ldw	r6,108(sp)
 8010264:	a821883a 	mov	r16,r21
 8010268:	d9402315 	stw	r5,140(sp)
 801026c:	028001c4 	movi	r10,7
 8010270:	d9c02915 	stw	r7,164(sp)
 8010274:	182b883a 	mov	r21,r3
 8010278:	00000506 	br	8010290 <___vfiprintf_internal_r+0x494>
 801027c:	31000084 	addi	r4,r6,2
 8010280:	42000204 	addi	r8,r8,8
 8010284:	180d883a 	mov	r6,r3
 8010288:	843ffc04 	addi	r16,r16,-16
 801028c:	e4000f0e 	bge	fp,r16,80102cc <___vfiprintf_internal_r+0x4d0>
 8010290:	010200b4 	movhi	r4,2050
 8010294:	10800404 	addi	r2,r2,16
 8010298:	30c00044 	addi	r3,r6,1
 801029c:	21213804 	addi	r4,r4,-31520
 80102a0:	41000015 	stw	r4,0(r8)
 80102a4:	47000115 	stw	fp,4(r8)
 80102a8:	d8801c15 	stw	r2,112(sp)
 80102ac:	d8c01b15 	stw	r3,108(sp)
 80102b0:	50fff20e 	bge	r10,r3,801027c <___vfiprintf_internal_r+0x480>
 80102b4:	1001b21e 	bne	r2,zero,8010980 <___vfiprintf_internal_r+0xb84>
 80102b8:	843ffc04 	addi	r16,r16,-16
 80102bc:	000d883a 	mov	r6,zero
 80102c0:	01000044 	movi	r4,1
 80102c4:	d811883a 	mov	r8,sp
 80102c8:	e43ff116 	blt	fp,r16,8010290 <___vfiprintf_internal_r+0x494>
 80102cc:	a807883a 	mov	r3,r21
 80102d0:	d9c02917 	ldw	r7,164(sp)
 80102d4:	802b883a 	mov	r21,r16
 80102d8:	dc002717 	ldw	r16,156(sp)
 80102dc:	d9402317 	ldw	r5,140(sp)
 80102e0:	a885883a 	add	r2,r21,r2
 80102e4:	45400115 	stw	r21,4(r8)
 80102e8:	41400015 	stw	r5,0(r8)
 80102ec:	d8801c15 	stw	r2,112(sp)
 80102f0:	d9001b15 	stw	r4,108(sp)
 80102f4:	014001c4 	movi	r5,7
 80102f8:	29026216 	blt	r5,r4,8010c84 <___vfiprintf_internal_r+0xe88>
 80102fc:	d9801d87 	ldb	r6,118(sp)
 8010300:	42000204 	addi	r8,r8,8
 8010304:	21400044 	addi	r5,r4,1
 8010308:	3001ae1e 	bne	r6,zero,80109c4 <___vfiprintf_internal_r+0xbc8>
 801030c:	3801bb26 	beq	r7,zero,80109fc <___vfiprintf_internal_r+0xc00>
 8010310:	d9001d04 	addi	r4,sp,116
 8010314:	10800084 	addi	r2,r2,2
 8010318:	41000015 	stw	r4,0(r8)
 801031c:	01000084 	movi	r4,2
 8010320:	41000115 	stw	r4,4(r8)
 8010324:	d8801c15 	stw	r2,112(sp)
 8010328:	d9401b15 	stw	r5,108(sp)
 801032c:	010001c4 	movi	r4,7
 8010330:	2142680e 	bge	r4,r5,8010cd4 <___vfiprintf_internal_r+0xed8>
 8010334:	1002b11e 	bne	r2,zero,8010dfc <___vfiprintf_internal_r+0x1000>
 8010338:	01802004 	movi	r6,128
 801033c:	01400044 	movi	r5,1
 8010340:	0009883a 	mov	r4,zero
 8010344:	d811883a 	mov	r8,sp
 8010348:	1981ae1e 	bne	r3,r6,8010a04 <___vfiprintf_internal_r+0xc08>
 801034c:	d8c02517 	ldw	r3,148(sp)
 8010350:	1cf9c83a 	sub	fp,r3,r19
 8010354:	0701ab0e 	bge	zero,fp,8010a04 <___vfiprintf_internal_r+0xc08>
 8010358:	05400404 	movi	r21,16
 801035c:	af03a90e 	bge	r21,fp,8011204 <___vfiprintf_internal_r+0x1408>
 8010360:	014200b4 	movhi	r5,2050
 8010364:	29613404 	addi	r5,r5,-31536
 8010368:	d9402315 	stw	r5,140(sp)
 801036c:	01c001c4 	movi	r7,7
 8010370:	00000506 	br	8010388 <___vfiprintf_internal_r+0x58c>
 8010374:	21800084 	addi	r6,r4,2
 8010378:	42000204 	addi	r8,r8,8
 801037c:	1809883a 	mov	r4,r3
 8010380:	e73ffc04 	addi	fp,fp,-16
 8010384:	af000d0e 	bge	r21,fp,80103bc <___vfiprintf_internal_r+0x5c0>
 8010388:	10800404 	addi	r2,r2,16
 801038c:	20c00044 	addi	r3,r4,1
 8010390:	44800015 	stw	r18,0(r8)
 8010394:	45400115 	stw	r21,4(r8)
 8010398:	d8801c15 	stw	r2,112(sp)
 801039c:	d8c01b15 	stw	r3,108(sp)
 80103a0:	38fff40e 	bge	r7,r3,8010374 <___vfiprintf_internal_r+0x578>
 80103a4:	10022b1e 	bne	r2,zero,8010c54 <___vfiprintf_internal_r+0xe58>
 80103a8:	e73ffc04 	addi	fp,fp,-16
 80103ac:	01800044 	movi	r6,1
 80103b0:	0009883a 	mov	r4,zero
 80103b4:	d811883a 	mov	r8,sp
 80103b8:	af3ff316 	blt	r21,fp,8010388 <___vfiprintf_internal_r+0x58c>
 80103bc:	d8c02317 	ldw	r3,140(sp)
 80103c0:	1705883a 	add	r2,r2,fp
 80103c4:	47000115 	stw	fp,4(r8)
 80103c8:	40c00015 	stw	r3,0(r8)
 80103cc:	d8801c15 	stw	r2,112(sp)
 80103d0:	d9801b15 	stw	r6,108(sp)
 80103d4:	00c001c4 	movi	r3,7
 80103d8:	19829416 	blt	r3,r6,8010e2c <___vfiprintf_internal_r+0x1030>
 80103dc:	8521c83a 	sub	r16,r16,r20
 80103e0:	42000204 	addi	r8,r8,8
 80103e4:	31400044 	addi	r5,r6,1
 80103e8:	3009883a 	mov	r4,r6
 80103ec:	04018716 	blt	zero,r16,8010a0c <___vfiprintf_internal_r+0xc10>
 80103f0:	a085883a 	add	r2,r20,r2
 80103f4:	45c00015 	stw	r23,0(r8)
 80103f8:	45000115 	stw	r20,4(r8)
 80103fc:	d8801c15 	stw	r2,112(sp)
 8010400:	d9401b15 	stw	r5,108(sp)
 8010404:	00c001c4 	movi	r3,7
 8010408:	1941c20e 	bge	r3,r5,8010b14 <___vfiprintf_internal_r+0xd18>
 801040c:	1002531e 	bne	r2,zero,8010d5c <___vfiprintf_internal_r+0xf60>
 8010410:	d8001b15 	stw	zero,108(sp)
 8010414:	8c40010c 	andi	r17,r17,4
 8010418:	88023226 	beq	r17,zero,8010ce4 <___vfiprintf_internal_r+0xee8>
 801041c:	d9002517 	ldw	r4,148(sp)
 8010420:	24e3c83a 	sub	r17,r4,r19
 8010424:	04432916 	blt	zero,r17,80110cc <___vfiprintf_internal_r+0x12d0>
 8010428:	d8802517 	ldw	r2,148(sp)
 801042c:	14c0010e 	bge	r2,r19,8010434 <___vfiprintf_internal_r+0x638>
 8010430:	9805883a 	mov	r2,r19
 8010434:	d8c02417 	ldw	r3,144(sp)
 8010438:	1887883a 	add	r3,r3,r2
 801043c:	d8c02415 	stw	r3,144(sp)
 8010440:	d8001b15 	stw	zero,108(sp)
 8010444:	d811883a 	mov	r8,sp
 8010448:	003ea006 	br	800fecc <___vfiprintf_internal_r+0xd0>
 801044c:	8c400814 	ori	r17,r17,32
 8010450:	b0c00007 	ldb	r3,0(r22)
 8010454:	003ec606 	br	800ff70 <___vfiprintf_internal_r+0x174>
 8010458:	b0c00007 	ldb	r3,0(r22)
 801045c:	00801b04 	movi	r2,108
 8010460:	18832026 	beq	r3,r2,80110e4 <___vfiprintf_internal_r+0x12e8>
 8010464:	8c400414 	ori	r17,r17,16
 8010468:	003ec106 	br	800ff70 <___vfiprintf_internal_r+0x174>
 801046c:	9cc03fcc 	andi	r19,r19,255
 8010470:	b811883a 	mov	r8,r23
 8010474:	9803981e 	bne	r19,zero,80112d8 <___vfiprintf_internal_r+0x14dc>
 8010478:	8880080c 	andi	r2,r17,32
 801047c:	1002be26 	beq	r2,zero,8010f78 <___vfiprintf_internal_r+0x117c>
 8010480:	d9002217 	ldw	r4,136(sp)
 8010484:	d9402417 	ldw	r5,144(sp)
 8010488:	20800017 	ldw	r2,0(r4)
 801048c:	2807d7fa 	srai	r3,r5,31
 8010490:	21000104 	addi	r4,r4,4
 8010494:	d9002215 	stw	r4,136(sp)
 8010498:	11400015 	stw	r5,0(r2)
 801049c:	10c00115 	stw	r3,4(r2)
 80104a0:	003e8a06 	br	800fecc <___vfiprintf_internal_r+0xd0>
 80104a4:	9cc03fcc 	andi	r19,r19,255
 80104a8:	b811883a 	mov	r8,r23
 80104ac:	9803871e 	bne	r19,zero,80112cc <___vfiprintf_internal_r+0x14d0>
 80104b0:	8880080c 	andi	r2,r17,32
 80104b4:	10009a26 	beq	r2,zero,8010720 <___vfiprintf_internal_r+0x924>
 80104b8:	d9002217 	ldw	r4,136(sp)
 80104bc:	d8001d85 	stb	zero,118(sp)
 80104c0:	20800204 	addi	r2,r4,8
 80104c4:	24c00017 	ldw	r19,0(r4)
 80104c8:	25000117 	ldw	r20,4(r4)
 80104cc:	8002a416 	blt	r16,zero,8010f60 <___vfiprintf_internal_r+0x1164>
 80104d0:	013fdfc4 	movi	r4,-129
 80104d4:	9d06b03a 	or	r3,r19,r20
 80104d8:	d8802215 	stw	r2,136(sp)
 80104dc:	8922703a 	and	r17,r17,r4
 80104e0:	18009b26 	beq	r3,zero,8010750 <___vfiprintf_internal_r+0x954>
 80104e4:	002b883a 	mov	r21,zero
 80104e8:	ddc01a04 	addi	r23,sp,104
 80104ec:	9806d0fa 	srli	r3,r19,3
 80104f0:	a008977a 	slli	r4,r20,29
 80104f4:	a028d0fa 	srli	r20,r20,3
 80104f8:	9cc001cc 	andi	r19,r19,7
 80104fc:	98800c04 	addi	r2,r19,48
 8010500:	bdffffc4 	addi	r23,r23,-1
 8010504:	20e6b03a 	or	r19,r4,r3
 8010508:	b8800005 	stb	r2,0(r23)
 801050c:	9d06b03a 	or	r3,r19,r20
 8010510:	183ff61e 	bne	r3,zero,80104ec <___vfiprintf_internal_r+0x6f0>
 8010514:	88c0004c 	andi	r3,r17,1
 8010518:	18021f1e 	bne	r3,zero,8010d98 <___vfiprintf_internal_r+0xf9c>
 801051c:	d9401e17 	ldw	r5,120(sp)
 8010520:	2de9c83a 	sub	r20,r5,r23
 8010524:	003f3806 	br	8010208 <___vfiprintf_internal_r+0x40c>
 8010528:	9cc03fcc 	andi	r19,r19,255
 801052c:	b811883a 	mov	r8,r23
 8010530:	98034f1e 	bne	r19,zero,8011270 <___vfiprintf_internal_r+0x1474>
 8010534:	008200b4 	movhi	r2,2050
 8010538:	10a0d404 	addi	r2,r2,-31920
 801053c:	d8802615 	stw	r2,152(sp)
 8010540:	8880080c 	andi	r2,r17,32
 8010544:	1000ac26 	beq	r2,zero,80107f8 <___vfiprintf_internal_r+0x9fc>
 8010548:	d9002217 	ldw	r4,136(sp)
 801054c:	24c00017 	ldw	r19,0(r4)
 8010550:	25000117 	ldw	r20,4(r4)
 8010554:	21000204 	addi	r4,r4,8
 8010558:	d9002215 	stw	r4,136(sp)
 801055c:	8880004c 	andi	r2,r17,1
 8010560:	1001e726 	beq	r2,zero,8010d00 <___vfiprintf_internal_r+0xf04>
 8010564:	9d04b03a 	or	r2,r19,r20
 8010568:	10025c1e 	bne	r2,zero,8010edc <___vfiprintf_internal_r+0x10e0>
 801056c:	d8001d85 	stb	zero,118(sp)
 8010570:	80024416 	blt	r16,zero,8010e84 <___vfiprintf_internal_r+0x1088>
 8010574:	00bfdfc4 	movi	r2,-129
 8010578:	88a2703a 	and	r17,r17,r2
 801057c:	003f1d06 	br	80101f4 <___vfiprintf_internal_r+0x3f8>
 8010580:	d8c02217 	ldw	r3,136(sp)
 8010584:	04c00044 	movi	r19,1
 8010588:	b811883a 	mov	r8,r23
 801058c:	18800017 	ldw	r2,0(r3)
 8010590:	18c00104 	addi	r3,r3,4
 8010594:	d8001d85 	stb	zero,118(sp)
 8010598:	d8801005 	stb	r2,64(sp)
 801059c:	d8c02215 	stw	r3,136(sp)
 80105a0:	9829883a 	mov	r20,r19
 80105a4:	ddc01004 	addi	r23,sp,64
 80105a8:	0021883a 	mov	r16,zero
 80105ac:	003f1e06 	br	8010228 <___vfiprintf_internal_r+0x42c>
 80105b0:	9cc03fcc 	andi	r19,r19,255
 80105b4:	b811883a 	mov	r8,r23
 80105b8:	9803331e 	bne	r19,zero,8011288 <___vfiprintf_internal_r+0x148c>
 80105bc:	8880080c 	andi	r2,r17,32
 80105c0:	10004826 	beq	r2,zero,80106e4 <___vfiprintf_internal_r+0x8e8>
 80105c4:	d9002217 	ldw	r4,136(sp)
 80105c8:	20800117 	ldw	r2,4(r4)
 80105cc:	24c00017 	ldw	r19,0(r4)
 80105d0:	21000204 	addi	r4,r4,8
 80105d4:	d9002215 	stw	r4,136(sp)
 80105d8:	1029883a 	mov	r20,r2
 80105dc:	10024c16 	blt	r2,zero,8010f10 <___vfiprintf_internal_r+0x1114>
 80105e0:	dd401d83 	ldbu	r21,118(sp)
 80105e4:	80007116 	blt	r16,zero,80107ac <___vfiprintf_internal_r+0x9b0>
 80105e8:	00ffdfc4 	movi	r3,-129
 80105ec:	9d04b03a 	or	r2,r19,r20
 80105f0:	88e2703a 	and	r17,r17,r3
 80105f4:	1000d126 	beq	r2,zero,801093c <___vfiprintf_internal_r+0xb40>
 80105f8:	a0023526 	beq	r20,zero,8010ed0 <___vfiprintf_internal_r+0x10d4>
 80105fc:	ddc01a04 	addi	r23,sp,104
 8010600:	4039883a 	mov	fp,r8
 8010604:	9809883a 	mov	r4,r19
 8010608:	a00b883a 	mov	r5,r20
 801060c:	01800284 	movi	r6,10
 8010610:	000f883a 	mov	r7,zero
 8010614:	80123280 	call	8012328 <__umoddi3>
 8010618:	10800c04 	addi	r2,r2,48
 801061c:	bdffffc4 	addi	r23,r23,-1
 8010620:	9809883a 	mov	r4,r19
 8010624:	a00b883a 	mov	r5,r20
 8010628:	b8800005 	stb	r2,0(r23)
 801062c:	01800284 	movi	r6,10
 8010630:	000f883a 	mov	r7,zero
 8010634:	8011d2c0 	call	8011d2c <__udivdi3>
 8010638:	1027883a 	mov	r19,r2
 801063c:	10c4b03a 	or	r2,r2,r3
 8010640:	1829883a 	mov	r20,r3
 8010644:	103fef1e 	bne	r2,zero,8010604 <___vfiprintf_internal_r+0x808>
 8010648:	d9001e17 	ldw	r4,120(sp)
 801064c:	e011883a 	mov	r8,fp
 8010650:	25e9c83a 	sub	r20,r4,r23
 8010654:	003eec06 	br	8010208 <___vfiprintf_internal_r+0x40c>
 8010658:	d8802307 	ldb	r2,140(sp)
 801065c:	1002361e 	bne	r2,zero,8010f38 <___vfiprintf_internal_r+0x113c>
 8010660:	00c00804 	movi	r3,32
 8010664:	d8c02305 	stb	r3,140(sp)
 8010668:	04c00044 	movi	r19,1
 801066c:	b0c00007 	ldb	r3,0(r22)
 8010670:	003e3f06 	br	800ff70 <___vfiprintf_internal_r+0x174>
 8010674:	8c400054 	ori	r17,r17,1
 8010678:	b0c00007 	ldb	r3,0(r22)
 801067c:	003e3c06 	br	800ff70 <___vfiprintf_internal_r+0x174>
 8010680:	8c402014 	ori	r17,r17,128
 8010684:	b0c00007 	ldb	r3,0(r22)
 8010688:	003e3906 	br	800ff70 <___vfiprintf_internal_r+0x174>
 801068c:	dc002715 	stw	r16,156(sp)
 8010690:	d8002515 	stw	zero,148(sp)
 8010694:	1f3ff404 	addi	fp,r3,-48
 8010698:	0009883a 	mov	r4,zero
 801069c:	b021883a 	mov	r16,r22
 80106a0:	01400284 	movi	r5,10
 80106a4:	8007e400 	call	8007e40 <__mulsi3>
 80106a8:	80c00007 	ldb	r3,0(r16)
 80106ac:	e089883a 	add	r4,fp,r2
 80106b0:	b5800044 	addi	r22,r22,1
 80106b4:	1f3ff404 	addi	fp,r3,-48
 80106b8:	b021883a 	mov	r16,r22
 80106bc:	af3ff82e 	bgeu	r21,fp,80106a0 <___vfiprintf_internal_r+0x8a4>
 80106c0:	d9002515 	stw	r4,148(sp)
 80106c4:	dc002717 	ldw	r16,156(sp)
 80106c8:	003e2a06 	br	800ff74 <___vfiprintf_internal_r+0x178>
 80106cc:	9cc03fcc 	andi	r19,r19,255
 80106d0:	b811883a 	mov	r8,r23
 80106d4:	9802e91e 	bne	r19,zero,801127c <___vfiprintf_internal_r+0x1480>
 80106d8:	8c400414 	ori	r17,r17,16
 80106dc:	8880080c 	andi	r2,r17,32
 80106e0:	103fb81e 	bne	r2,zero,80105c4 <___vfiprintf_internal_r+0x7c8>
 80106e4:	8880040c 	andi	r2,r17,16
 80106e8:	10022e26 	beq	r2,zero,8010fa4 <___vfiprintf_internal_r+0x11a8>
 80106ec:	d9402217 	ldw	r5,136(sp)
 80106f0:	2cc00017 	ldw	r19,0(r5)
 80106f4:	29400104 	addi	r5,r5,4
 80106f8:	d9402215 	stw	r5,136(sp)
 80106fc:	9829d7fa 	srai	r20,r19,31
 8010700:	a005883a 	mov	r2,r20
 8010704:	003fb506 	br	80105dc <___vfiprintf_internal_r+0x7e0>
 8010708:	9cc03fcc 	andi	r19,r19,255
 801070c:	b811883a 	mov	r8,r23
 8010710:	9802fa1e 	bne	r19,zero,80112fc <___vfiprintf_internal_r+0x1500>
 8010714:	8c400414 	ori	r17,r17,16
 8010718:	8880080c 	andi	r2,r17,32
 801071c:	103f661e 	bne	r2,zero,80104b8 <___vfiprintf_internal_r+0x6bc>
 8010720:	8880040c 	andi	r2,r17,16
 8010724:	10020626 	beq	r2,zero,8010f40 <___vfiprintf_internal_r+0x1144>
 8010728:	d9402217 	ldw	r5,136(sp)
 801072c:	d8001d85 	stb	zero,118(sp)
 8010730:	0029883a 	mov	r20,zero
 8010734:	28800104 	addi	r2,r5,4
 8010738:	2cc00017 	ldw	r19,0(r5)
 801073c:	80020816 	blt	r16,zero,8010f60 <___vfiprintf_internal_r+0x1164>
 8010740:	00ffdfc4 	movi	r3,-129
 8010744:	d8802215 	stw	r2,136(sp)
 8010748:	88e2703a 	and	r17,r17,r3
 801074c:	983f651e 	bne	r19,zero,80104e4 <___vfiprintf_internal_r+0x6e8>
 8010750:	002b883a 	mov	r21,zero
 8010754:	8002cf26 	beq	r16,zero,8011294 <___vfiprintf_internal_r+0x1498>
 8010758:	0027883a 	mov	r19,zero
 801075c:	0029883a 	mov	r20,zero
 8010760:	003f6106 	br	80104e8 <___vfiprintf_internal_r+0x6ec>
 8010764:	9cc03fcc 	andi	r19,r19,255
 8010768:	b811883a 	mov	r8,r23
 801076c:	9802e01e 	bne	r19,zero,80112f0 <___vfiprintf_internal_r+0x14f4>
 8010770:	8c400414 	ori	r17,r17,16
 8010774:	8880080c 	andi	r2,r17,32
 8010778:	1000641e 	bne	r2,zero,801090c <___vfiprintf_internal_r+0xb10>
 801077c:	8880040c 	andi	r2,r17,16
 8010780:	1001c81e 	bne	r2,zero,8010ea4 <___vfiprintf_internal_r+0x10a8>
 8010784:	8880100c 	andi	r2,r17,64
 8010788:	d8001d85 	stb	zero,118(sp)
 801078c:	1002281e 	bne	r2,zero,8011030 <___vfiprintf_internal_r+0x1234>
 8010790:	d9002217 	ldw	r4,136(sp)
 8010794:	0029883a 	mov	r20,zero
 8010798:	20800104 	addi	r2,r4,4
 801079c:	24c00017 	ldw	r19,0(r4)
 80107a0:	8001c60e 	bge	r16,zero,8010ebc <___vfiprintf_internal_r+0x10c0>
 80107a4:	d8802215 	stw	r2,136(sp)
 80107a8:	002b883a 	mov	r21,zero
 80107ac:	9d04b03a 	or	r2,r19,r20
 80107b0:	103f911e 	bne	r2,zero,80105f8 <___vfiprintf_internal_r+0x7fc>
 80107b4:	00800044 	movi	r2,1
 80107b8:	10803fcc 	andi	r2,r2,255
 80107bc:	00c00044 	movi	r3,1
 80107c0:	10c05f26 	beq	r2,r3,8010940 <___vfiprintf_internal_r+0xb44>
 80107c4:	00c00084 	movi	r3,2
 80107c8:	10ffe31e 	bne	r2,r3,8010758 <___vfiprintf_internal_r+0x95c>
 80107cc:	0027883a 	mov	r19,zero
 80107d0:	0029883a 	mov	r20,zero
 80107d4:	00015106 	br	8010d1c <___vfiprintf_internal_r+0xf20>
 80107d8:	9cc03fcc 	andi	r19,r19,255
 80107dc:	b811883a 	mov	r8,r23
 80107e0:	9802c01e 	bne	r19,zero,80112e4 <___vfiprintf_internal_r+0x14e8>
 80107e4:	014200b4 	movhi	r5,2050
 80107e8:	2960cf04 	addi	r5,r5,-31940
 80107ec:	d9402615 	stw	r5,152(sp)
 80107f0:	8880080c 	andi	r2,r17,32
 80107f4:	103f541e 	bne	r2,zero,8010548 <___vfiprintf_internal_r+0x74c>
 80107f8:	8880040c 	andi	r2,r17,16
 80107fc:	1001f226 	beq	r2,zero,8010fc8 <___vfiprintf_internal_r+0x11cc>
 8010800:	d9402217 	ldw	r5,136(sp)
 8010804:	0029883a 	mov	r20,zero
 8010808:	2cc00017 	ldw	r19,0(r5)
 801080c:	29400104 	addi	r5,r5,4
 8010810:	d9402215 	stw	r5,136(sp)
 8010814:	003f5106 	br	801055c <___vfiprintf_internal_r+0x760>
 8010818:	d8c02217 	ldw	r3,136(sp)
 801081c:	b811883a 	mov	r8,r23
 8010820:	d8001d85 	stb	zero,118(sp)
 8010824:	1dc00017 	ldw	r23,0(r3)
 8010828:	1f000104 	addi	fp,r3,4
 801082c:	b8025926 	beq	r23,zero,8011194 <___vfiprintf_internal_r+0x1398>
 8010830:	80023316 	blt	r16,zero,8011100 <___vfiprintf_internal_r+0x1304>
 8010834:	800d883a 	mov	r6,r16
 8010838:	000b883a 	mov	r5,zero
 801083c:	b809883a 	mov	r4,r23
 8010840:	da002a15 	stw	r8,168(sp)
 8010844:	800e0440 	call	800e044 <memchr>
 8010848:	da002a17 	ldw	r8,168(sp)
 801084c:	10026826 	beq	r2,zero,80111f0 <___vfiprintf_internal_r+0x13f4>
 8010850:	15e9c83a 	sub	r20,r2,r23
 8010854:	dd401d83 	ldbu	r21,118(sp)
 8010858:	df002215 	stw	fp,136(sp)
 801085c:	0021883a 	mov	r16,zero
 8010860:	003e6906 	br	8010208 <___vfiprintf_internal_r+0x40c>
 8010864:	9cc03fcc 	andi	r19,r19,255
 8010868:	b811883a 	mov	r8,r23
 801086c:	983fc126 	beq	r19,zero,8010774 <___vfiprintf_internal_r+0x978>
 8010870:	d8c02303 	ldbu	r3,140(sp)
 8010874:	d8c01d85 	stb	r3,118(sp)
 8010878:	003fbe06 	br	8010774 <___vfiprintf_internal_r+0x978>
 801087c:	d9002217 	ldw	r4,136(sp)
 8010880:	d9402217 	ldw	r5,136(sp)
 8010884:	21000017 	ldw	r4,0(r4)
 8010888:	28800104 	addi	r2,r5,4
 801088c:	d9002515 	stw	r4,148(sp)
 8010890:	203e3d16 	blt	r4,zero,8010188 <___vfiprintf_internal_r+0x38c>
 8010894:	d8802215 	stw	r2,136(sp)
 8010898:	b0c00007 	ldb	r3,0(r22)
 801089c:	003db406 	br	800ff70 <___vfiprintf_internal_r+0x174>
 80108a0:	00c00ac4 	movi	r3,43
 80108a4:	d8c02305 	stb	r3,140(sp)
 80108a8:	04c00044 	movi	r19,1
 80108ac:	b0c00007 	ldb	r3,0(r22)
 80108b0:	003daf06 	br	800ff70 <___vfiprintf_internal_r+0x174>
 80108b4:	b0c00007 	ldb	r3,0(r22)
 80108b8:	01000a84 	movi	r4,42
 80108bc:	b4000044 	addi	r16,r22,1
 80108c0:	19025e26 	beq	r3,r4,801123c <___vfiprintf_internal_r+0x1440>
 80108c4:	1f3ff404 	addi	fp,r3,-48
 80108c8:	0009883a 	mov	r4,zero
 80108cc:	af025236 	bltu	r21,fp,8011218 <___vfiprintf_internal_r+0x141c>
 80108d0:	01400284 	movi	r5,10
 80108d4:	8007e400 	call	8007e40 <__mulsi3>
 80108d8:	80c00007 	ldb	r3,0(r16)
 80108dc:	1709883a 	add	r4,r2,fp
 80108e0:	85800044 	addi	r22,r16,1
 80108e4:	1f3ff404 	addi	fp,r3,-48
 80108e8:	b021883a 	mov	r16,r22
 80108ec:	af3ff82e 	bgeu	r21,fp,80108d0 <___vfiprintf_internal_r+0xad4>
 80108f0:	2021883a 	mov	r16,r4
 80108f4:	203d9f0e 	bge	r4,zero,800ff74 <___vfiprintf_internal_r+0x178>
 80108f8:	043fffc4 	movi	r16,-1
 80108fc:	003d9d06 	br	800ff74 <___vfiprintf_internal_r+0x178>
 8010900:	8c401014 	ori	r17,r17,64
 8010904:	b0c00007 	ldb	r3,0(r22)
 8010908:	003d9906 	br	800ff70 <___vfiprintf_internal_r+0x174>
 801090c:	d9002217 	ldw	r4,136(sp)
 8010910:	d8001d85 	stb	zero,118(sp)
 8010914:	20c00204 	addi	r3,r4,8
 8010918:	24c00017 	ldw	r19,0(r4)
 801091c:	25000117 	ldw	r20,4(r4)
 8010920:	8001e716 	blt	r16,zero,80110c0 <___vfiprintf_internal_r+0x12c4>
 8010924:	013fdfc4 	movi	r4,-129
 8010928:	9d04b03a 	or	r2,r19,r20
 801092c:	d8c02215 	stw	r3,136(sp)
 8010930:	8922703a 	and	r17,r17,r4
 8010934:	002b883a 	mov	r21,zero
 8010938:	103f2f1e 	bne	r2,zero,80105f8 <___vfiprintf_internal_r+0x7fc>
 801093c:	803e2f26 	beq	r16,zero,80101fc <___vfiprintf_internal_r+0x400>
 8010940:	0027883a 	mov	r19,zero
 8010944:	9cc00c04 	addi	r19,r19,48
 8010948:	dcc019c5 	stb	r19,103(sp)
 801094c:	dd002817 	ldw	r20,160(sp)
 8010950:	ddc019c4 	addi	r23,sp,103
 8010954:	003e2c06 	br	8010208 <___vfiprintf_internal_r+0x40c>
 8010958:	9cc03fcc 	andi	r19,r19,255
 801095c:	b811883a 	mov	r8,r23
 8010960:	9802571e 	bne	r19,zero,80112c0 <___vfiprintf_internal_r+0x14c4>
 8010964:	18005726 	beq	r3,zero,8010ac4 <___vfiprintf_internal_r+0xcc8>
 8010968:	04c00044 	movi	r19,1
 801096c:	d8c01005 	stb	r3,64(sp)
 8010970:	d8001d85 	stb	zero,118(sp)
 8010974:	9829883a 	mov	r20,r19
 8010978:	ddc01004 	addi	r23,sp,64
 801097c:	003f0a06 	br	80105a8 <___vfiprintf_internal_r+0x7ac>
 8010980:	d9402017 	ldw	r5,128(sp)
 8010984:	d9002117 	ldw	r4,132(sp)
 8010988:	d9801a04 	addi	r6,sp,104
 801098c:	da802a15 	stw	r10,168(sp)
 8010990:	800fce80 	call	800fce8 <__sprint_r.part.0>
 8010994:	da802a17 	ldw	r10,168(sp)
 8010998:	1000501e 	bne	r2,zero,8010adc <___vfiprintf_internal_r+0xce0>
 801099c:	d9801b17 	ldw	r6,108(sp)
 80109a0:	d8801c17 	ldw	r2,112(sp)
 80109a4:	d811883a 	mov	r8,sp
 80109a8:	31000044 	addi	r4,r6,1
 80109ac:	003e3606 	br	8010288 <___vfiprintf_internal_r+0x48c>
 80109b0:	d9001b17 	ldw	r4,108(sp)
 80109b4:	d8801c17 	ldw	r2,112(sp)
 80109b8:	21400044 	addi	r5,r4,1
 80109bc:	d9801d87 	ldb	r6,118(sp)
 80109c0:	303e5226 	beq	r6,zero,801030c <___vfiprintf_internal_r+0x510>
 80109c4:	01800044 	movi	r6,1
 80109c8:	d9001d84 	addi	r4,sp,118
 80109cc:	1185883a 	add	r2,r2,r6
 80109d0:	41000015 	stw	r4,0(r8)
 80109d4:	41800115 	stw	r6,4(r8)
 80109d8:	d8801c15 	stw	r2,112(sp)
 80109dc:	d9401b15 	stw	r5,108(sp)
 80109e0:	010001c4 	movi	r4,7
 80109e4:	2140b00e 	bge	r4,r5,8010ca8 <___vfiprintf_internal_r+0xeac>
 80109e8:	1000f61e 	bne	r2,zero,8010dc4 <___vfiprintf_internal_r+0xfc8>
 80109ec:	3800b31e 	bne	r7,zero,8010cbc <___vfiprintf_internal_r+0xec0>
 80109f0:	0009883a 	mov	r4,zero
 80109f4:	300b883a 	mov	r5,r6
 80109f8:	d811883a 	mov	r8,sp
 80109fc:	01802004 	movi	r6,128
 8010a00:	19be5226 	beq	r3,r6,801034c <___vfiprintf_internal_r+0x550>
 8010a04:	8521c83a 	sub	r16,r16,r20
 8010a08:	043e790e 	bge	zero,r16,80103f0 <___vfiprintf_internal_r+0x5f4>
 8010a0c:	05400404 	movi	r21,16
 8010a10:	ac01b00e 	bge	r21,r16,80110d4 <___vfiprintf_internal_r+0x12d8>
 8010a14:	014200b4 	movhi	r5,2050
 8010a18:	29613404 	addi	r5,r5,-31536
 8010a1c:	d9402315 	stw	r5,140(sp)
 8010a20:	070001c4 	movi	fp,7
 8010a24:	00000506 	br	8010a3c <___vfiprintf_internal_r+0xc40>
 8010a28:	21400084 	addi	r5,r4,2
 8010a2c:	42000204 	addi	r8,r8,8
 8010a30:	1809883a 	mov	r4,r3
 8010a34:	843ffc04 	addi	r16,r16,-16
 8010a38:	ac000d0e 	bge	r21,r16,8010a70 <___vfiprintf_internal_r+0xc74>
 8010a3c:	10800404 	addi	r2,r2,16
 8010a40:	20c00044 	addi	r3,r4,1
 8010a44:	44800015 	stw	r18,0(r8)
 8010a48:	45400115 	stw	r21,4(r8)
 8010a4c:	d8801c15 	stw	r2,112(sp)
 8010a50:	d8c01b15 	stw	r3,108(sp)
 8010a54:	e0fff40e 	bge	fp,r3,8010a28 <___vfiprintf_internal_r+0xc2c>
 8010a58:	1000101e 	bne	r2,zero,8010a9c <___vfiprintf_internal_r+0xca0>
 8010a5c:	843ffc04 	addi	r16,r16,-16
 8010a60:	01400044 	movi	r5,1
 8010a64:	0009883a 	mov	r4,zero
 8010a68:	d811883a 	mov	r8,sp
 8010a6c:	ac3ff316 	blt	r21,r16,8010a3c <___vfiprintf_internal_r+0xc40>
 8010a70:	d8c02317 	ldw	r3,140(sp)
 8010a74:	1405883a 	add	r2,r2,r16
 8010a78:	44000115 	stw	r16,4(r8)
 8010a7c:	40c00015 	stw	r3,0(r8)
 8010a80:	d8801c15 	stw	r2,112(sp)
 8010a84:	d9401b15 	stw	r5,108(sp)
 8010a88:	00c001c4 	movi	r3,7
 8010a8c:	19401916 	blt	r3,r5,8010af4 <___vfiprintf_internal_r+0xcf8>
 8010a90:	42000204 	addi	r8,r8,8
 8010a94:	29400044 	addi	r5,r5,1
 8010a98:	003e5506 	br	80103f0 <___vfiprintf_internal_r+0x5f4>
 8010a9c:	d9402017 	ldw	r5,128(sp)
 8010aa0:	d9002117 	ldw	r4,132(sp)
 8010aa4:	d9801a04 	addi	r6,sp,104
 8010aa8:	800fce80 	call	800fce8 <__sprint_r.part.0>
 8010aac:	10000b1e 	bne	r2,zero,8010adc <___vfiprintf_internal_r+0xce0>
 8010ab0:	d9001b17 	ldw	r4,108(sp)
 8010ab4:	d8801c17 	ldw	r2,112(sp)
 8010ab8:	d811883a 	mov	r8,sp
 8010abc:	21400044 	addi	r5,r4,1
 8010ac0:	003fdc06 	br	8010a34 <___vfiprintf_internal_r+0xc38>
 8010ac4:	d8801c17 	ldw	r2,112(sp)
 8010ac8:	10000426 	beq	r2,zero,8010adc <___vfiprintf_internal_r+0xce0>
 8010acc:	d9402017 	ldw	r5,128(sp)
 8010ad0:	d9002117 	ldw	r4,132(sp)
 8010ad4:	d9801a04 	addi	r6,sp,104
 8010ad8:	800fce80 	call	800fce8 <__sprint_r.part.0>
 8010adc:	d9402017 	ldw	r5,128(sp)
 8010ae0:	2880030b 	ldhu	r2,12(r5)
 8010ae4:	1080100c 	andi	r2,r2,64
 8010ae8:	10014d1e 	bne	r2,zero,8011020 <___vfiprintf_internal_r+0x1224>
 8010aec:	d8802417 	ldw	r2,144(sp)
 8010af0:	003d9706 	br	8010150 <___vfiprintf_internal_r+0x354>
 8010af4:	1000d21e 	bne	r2,zero,8010e40 <___vfiprintf_internal_r+0x1044>
 8010af8:	00c00044 	movi	r3,1
 8010afc:	a005883a 	mov	r2,r20
 8010b00:	ddc00015 	stw	r23,0(sp)
 8010b04:	dd000115 	stw	r20,4(sp)
 8010b08:	dd001c15 	stw	r20,112(sp)
 8010b0c:	d8c01b15 	stw	r3,108(sp)
 8010b10:	d811883a 	mov	r8,sp
 8010b14:	42000204 	addi	r8,r8,8
 8010b18:	8c40010c 	andi	r17,r17,4
 8010b1c:	88004026 	beq	r17,zero,8010c20 <___vfiprintf_internal_r+0xe24>
 8010b20:	d9002517 	ldw	r4,148(sp)
 8010b24:	24e3c83a 	sub	r17,r4,r19
 8010b28:	04403d0e 	bge	zero,r17,8010c20 <___vfiprintf_internal_r+0xe24>
 8010b2c:	04000404 	movi	r16,16
 8010b30:	8441a90e 	bge	r16,r17,80111d8 <___vfiprintf_internal_r+0x13dc>
 8010b34:	00c200b4 	movhi	r3,2050
 8010b38:	18e13804 	addi	r3,r3,-31520
 8010b3c:	d9001b17 	ldw	r4,108(sp)
 8010b40:	d8c02315 	stw	r3,140(sp)
 8010b44:	050001c4 	movi	r20,7
 8010b48:	dd402117 	ldw	r21,132(sp)
 8010b4c:	ddc02017 	ldw	r23,128(sp)
 8010b50:	00000506 	br	8010b68 <___vfiprintf_internal_r+0xd6c>
 8010b54:	21400084 	addi	r5,r4,2
 8010b58:	42000204 	addi	r8,r8,8
 8010b5c:	1809883a 	mov	r4,r3
 8010b60:	8c7ffc04 	addi	r17,r17,-16
 8010b64:	84400f0e 	bge	r16,r17,8010ba4 <___vfiprintf_internal_r+0xda8>
 8010b68:	014200b4 	movhi	r5,2050
 8010b6c:	10800404 	addi	r2,r2,16
 8010b70:	20c00044 	addi	r3,r4,1
 8010b74:	29613804 	addi	r5,r5,-31520
 8010b78:	41400015 	stw	r5,0(r8)
 8010b7c:	44000115 	stw	r16,4(r8)
 8010b80:	d8801c15 	stw	r2,112(sp)
 8010b84:	d8c01b15 	stw	r3,108(sp)
 8010b88:	a0fff20e 	bge	r20,r3,8010b54 <___vfiprintf_internal_r+0xd58>
 8010b8c:	1000141e 	bne	r2,zero,8010be0 <___vfiprintf_internal_r+0xde4>
 8010b90:	8c7ffc04 	addi	r17,r17,-16
 8010b94:	01400044 	movi	r5,1
 8010b98:	0009883a 	mov	r4,zero
 8010b9c:	d811883a 	mov	r8,sp
 8010ba0:	847ff116 	blt	r16,r17,8010b68 <___vfiprintf_internal_r+0xd6c>
 8010ba4:	d8c02317 	ldw	r3,140(sp)
 8010ba8:	1445883a 	add	r2,r2,r17
 8010bac:	44400115 	stw	r17,4(r8)
 8010bb0:	40c00015 	stw	r3,0(r8)
 8010bb4:	d8801c15 	stw	r2,112(sp)
 8010bb8:	d9401b15 	stw	r5,108(sp)
 8010bbc:	00c001c4 	movi	r3,7
 8010bc0:	1940170e 	bge	r3,r5,8010c20 <___vfiprintf_internal_r+0xe24>
 8010bc4:	1000101e 	bne	r2,zero,8010c08 <___vfiprintf_internal_r+0xe0c>
 8010bc8:	d8802517 	ldw	r2,148(sp)
 8010bcc:	14c11616 	blt	r2,r19,8011028 <___vfiprintf_internal_r+0x122c>
 8010bd0:	d9002417 	ldw	r4,144(sp)
 8010bd4:	2089883a 	add	r4,r4,r2
 8010bd8:	d9002415 	stw	r4,144(sp)
 8010bdc:	003e1806 	br	8010440 <___vfiprintf_internal_r+0x644>
 8010be0:	d9801a04 	addi	r6,sp,104
 8010be4:	b80b883a 	mov	r5,r23
 8010be8:	a809883a 	mov	r4,r21
 8010bec:	800fce80 	call	800fce8 <__sprint_r.part.0>
 8010bf0:	103fba1e 	bne	r2,zero,8010adc <___vfiprintf_internal_r+0xce0>
 8010bf4:	d9001b17 	ldw	r4,108(sp)
 8010bf8:	d8801c17 	ldw	r2,112(sp)
 8010bfc:	d811883a 	mov	r8,sp
 8010c00:	21400044 	addi	r5,r4,1
 8010c04:	003fd606 	br	8010b60 <___vfiprintf_internal_r+0xd64>
 8010c08:	d9402017 	ldw	r5,128(sp)
 8010c0c:	d9002117 	ldw	r4,132(sp)
 8010c10:	d9801a04 	addi	r6,sp,104
 8010c14:	800fce80 	call	800fce8 <__sprint_r.part.0>
 8010c18:	103fb01e 	bne	r2,zero,8010adc <___vfiprintf_internal_r+0xce0>
 8010c1c:	d8801c17 	ldw	r2,112(sp)
 8010c20:	d8c02517 	ldw	r3,148(sp)
 8010c24:	1cc0010e 	bge	r3,r19,8010c2c <___vfiprintf_internal_r+0xe30>
 8010c28:	9807883a 	mov	r3,r19
 8010c2c:	d9002417 	ldw	r4,144(sp)
 8010c30:	20c9883a 	add	r4,r4,r3
 8010c34:	d9002415 	stw	r4,144(sp)
 8010c38:	103e0126 	beq	r2,zero,8010440 <___vfiprintf_internal_r+0x644>
 8010c3c:	d9402017 	ldw	r5,128(sp)
 8010c40:	d9002117 	ldw	r4,132(sp)
 8010c44:	d9801a04 	addi	r6,sp,104
 8010c48:	800fce80 	call	800fce8 <__sprint_r.part.0>
 8010c4c:	103dfc26 	beq	r2,zero,8010440 <___vfiprintf_internal_r+0x644>
 8010c50:	003fa206 	br	8010adc <___vfiprintf_internal_r+0xce0>
 8010c54:	d9402017 	ldw	r5,128(sp)
 8010c58:	d9002117 	ldw	r4,132(sp)
 8010c5c:	d9801a04 	addi	r6,sp,104
 8010c60:	d9c02b15 	stw	r7,172(sp)
 8010c64:	800fce80 	call	800fce8 <__sprint_r.part.0>
 8010c68:	d9c02b17 	ldw	r7,172(sp)
 8010c6c:	103f9b1e 	bne	r2,zero,8010adc <___vfiprintf_internal_r+0xce0>
 8010c70:	d9001b17 	ldw	r4,108(sp)
 8010c74:	d8801c17 	ldw	r2,112(sp)
 8010c78:	d811883a 	mov	r8,sp
 8010c7c:	21800044 	addi	r6,r4,1
 8010c80:	003dbf06 	br	8010380 <___vfiprintf_internal_r+0x584>
 8010c84:	1000d81e 	bne	r2,zero,8010fe8 <___vfiprintf_internal_r+0x11ec>
 8010c88:	d9001d87 	ldb	r4,118(sp)
 8010c8c:	20000a26 	beq	r4,zero,8010cb8 <___vfiprintf_internal_r+0xebc>
 8010c90:	00800044 	movi	r2,1
 8010c94:	d9001d84 	addi	r4,sp,118
 8010c98:	100b883a 	mov	r5,r2
 8010c9c:	d9000015 	stw	r4,0(sp)
 8010ca0:	d8800115 	stw	r2,4(sp)
 8010ca4:	d811883a 	mov	r8,sp
 8010ca8:	2809883a 	mov	r4,r5
 8010cac:	42000204 	addi	r8,r8,8
 8010cb0:	29400044 	addi	r5,r5,1
 8010cb4:	003d9506 	br	801030c <___vfiprintf_internal_r+0x510>
 8010cb8:	3800fd26 	beq	r7,zero,80110b0 <___vfiprintf_internal_r+0x12b4>
 8010cbc:	00800084 	movi	r2,2
 8010cc0:	d9001d04 	addi	r4,sp,116
 8010cc4:	d9000015 	stw	r4,0(sp)
 8010cc8:	d8800115 	stw	r2,4(sp)
 8010ccc:	01400044 	movi	r5,1
 8010cd0:	d811883a 	mov	r8,sp
 8010cd4:	2809883a 	mov	r4,r5
 8010cd8:	42000204 	addi	r8,r8,8
 8010cdc:	29400044 	addi	r5,r5,1
 8010ce0:	003f4606 	br	80109fc <___vfiprintf_internal_r+0xc00>
 8010ce4:	d8802517 	ldw	r2,148(sp)
 8010ce8:	14c0010e 	bge	r2,r19,8010cf0 <___vfiprintf_internal_r+0xef4>
 8010cec:	9805883a 	mov	r2,r19
 8010cf0:	d9402417 	ldw	r5,144(sp)
 8010cf4:	288b883a 	add	r5,r5,r2
 8010cf8:	d9402415 	stw	r5,144(sp)
 8010cfc:	003dd006 	br	8010440 <___vfiprintf_internal_r+0x644>
 8010d00:	d8001d85 	stb	zero,118(sp)
 8010d04:	80005d16 	blt	r16,zero,8010e7c <___vfiprintf_internal_r+0x1080>
 8010d08:	00ffdfc4 	movi	r3,-129
 8010d0c:	9d04b03a 	or	r2,r19,r20
 8010d10:	88e2703a 	and	r17,r17,r3
 8010d14:	103d3726 	beq	r2,zero,80101f4 <___vfiprintf_internal_r+0x3f8>
 8010d18:	002b883a 	mov	r21,zero
 8010d1c:	d9002617 	ldw	r4,152(sp)
 8010d20:	ddc01a04 	addi	r23,sp,104
 8010d24:	988003cc 	andi	r2,r19,15
 8010d28:	a006973a 	slli	r3,r20,28
 8010d2c:	2085883a 	add	r2,r4,r2
 8010d30:	9826d13a 	srli	r19,r19,4
 8010d34:	10800003 	ldbu	r2,0(r2)
 8010d38:	a028d13a 	srli	r20,r20,4
 8010d3c:	bdffffc4 	addi	r23,r23,-1
 8010d40:	1ce6b03a 	or	r19,r3,r19
 8010d44:	b8800005 	stb	r2,0(r23)
 8010d48:	9d04b03a 	or	r2,r19,r20
 8010d4c:	103ff51e 	bne	r2,zero,8010d24 <___vfiprintf_internal_r+0xf28>
 8010d50:	d8801e17 	ldw	r2,120(sp)
 8010d54:	15e9c83a 	sub	r20,r2,r23
 8010d58:	003d2b06 	br	8010208 <___vfiprintf_internal_r+0x40c>
 8010d5c:	d9402017 	ldw	r5,128(sp)
 8010d60:	d9002117 	ldw	r4,132(sp)
 8010d64:	d9801a04 	addi	r6,sp,104
 8010d68:	800fce80 	call	800fce8 <__sprint_r.part.0>
 8010d6c:	103f5b1e 	bne	r2,zero,8010adc <___vfiprintf_internal_r+0xce0>
 8010d70:	d8801c17 	ldw	r2,112(sp)
 8010d74:	d811883a 	mov	r8,sp
 8010d78:	003f6706 	br	8010b18 <___vfiprintf_internal_r+0xd1c>
 8010d7c:	d9402017 	ldw	r5,128(sp)
 8010d80:	d9002117 	ldw	r4,132(sp)
 8010d84:	d9801a04 	addi	r6,sp,104
 8010d88:	800fce80 	call	800fce8 <__sprint_r.part.0>
 8010d8c:	103f531e 	bne	r2,zero,8010adc <___vfiprintf_internal_r+0xce0>
 8010d90:	d811883a 	mov	r8,sp
 8010d94:	003cd906 	br	80100fc <___vfiprintf_internal_r+0x300>
 8010d98:	10803fcc 	andi	r2,r2,255
 8010d9c:	1080201c 	xori	r2,r2,128
 8010da0:	10bfe004 	addi	r2,r2,-128
 8010da4:	00c00c04 	movi	r3,48
 8010da8:	10ffe926 	beq	r2,r3,8010d50 <___vfiprintf_internal_r+0xf54>
 8010dac:	b8ffffc5 	stb	r3,-1(r23)
 8010db0:	d8c01e17 	ldw	r3,120(sp)
 8010db4:	b8bfffc4 	addi	r2,r23,-1
 8010db8:	102f883a 	mov	r23,r2
 8010dbc:	18a9c83a 	sub	r20,r3,r2
 8010dc0:	003d1106 	br	8010208 <___vfiprintf_internal_r+0x40c>
 8010dc4:	d9402017 	ldw	r5,128(sp)
 8010dc8:	d9002117 	ldw	r4,132(sp)
 8010dcc:	d9801a04 	addi	r6,sp,104
 8010dd0:	d8c02a15 	stw	r3,168(sp)
 8010dd4:	d9c02b15 	stw	r7,172(sp)
 8010dd8:	800fce80 	call	800fce8 <__sprint_r.part.0>
 8010ddc:	d8c02a17 	ldw	r3,168(sp)
 8010de0:	d9c02b17 	ldw	r7,172(sp)
 8010de4:	103f3d1e 	bne	r2,zero,8010adc <___vfiprintf_internal_r+0xce0>
 8010de8:	d9001b17 	ldw	r4,108(sp)
 8010dec:	d8801c17 	ldw	r2,112(sp)
 8010df0:	d811883a 	mov	r8,sp
 8010df4:	21400044 	addi	r5,r4,1
 8010df8:	003d4406 	br	801030c <___vfiprintf_internal_r+0x510>
 8010dfc:	d9402017 	ldw	r5,128(sp)
 8010e00:	d9002117 	ldw	r4,132(sp)
 8010e04:	d9801a04 	addi	r6,sp,104
 8010e08:	d8c02a15 	stw	r3,168(sp)
 8010e0c:	800fce80 	call	800fce8 <__sprint_r.part.0>
 8010e10:	d8c02a17 	ldw	r3,168(sp)
 8010e14:	103f311e 	bne	r2,zero,8010adc <___vfiprintf_internal_r+0xce0>
 8010e18:	d9001b17 	ldw	r4,108(sp)
 8010e1c:	d8801c17 	ldw	r2,112(sp)
 8010e20:	d811883a 	mov	r8,sp
 8010e24:	21400044 	addi	r5,r4,1
 8010e28:	003ef406 	br	80109fc <___vfiprintf_internal_r+0xc00>
 8010e2c:	1000bd1e 	bne	r2,zero,8011124 <___vfiprintf_internal_r+0x1328>
 8010e30:	01400044 	movi	r5,1
 8010e34:	0009883a 	mov	r4,zero
 8010e38:	d811883a 	mov	r8,sp
 8010e3c:	003ef106 	br	8010a04 <___vfiprintf_internal_r+0xc08>
 8010e40:	d9402017 	ldw	r5,128(sp)
 8010e44:	d9002117 	ldw	r4,132(sp)
 8010e48:	d9801a04 	addi	r6,sp,104
 8010e4c:	800fce80 	call	800fce8 <__sprint_r.part.0>
 8010e50:	103f221e 	bne	r2,zero,8010adc <___vfiprintf_internal_r+0xce0>
 8010e54:	d9401b17 	ldw	r5,108(sp)
 8010e58:	d8801c17 	ldw	r2,112(sp)
 8010e5c:	d811883a 	mov	r8,sp
 8010e60:	29400044 	addi	r5,r5,1
 8010e64:	003d6206 	br	80103f0 <___vfiprintf_internal_r+0x5f4>
 8010e68:	014200b4 	movhi	r5,2050
 8010e6c:	2960d404 	addi	r5,r5,-31920
 8010e70:	d9402615 	stw	r5,152(sp)
 8010e74:	d8c02215 	stw	r3,136(sp)
 8010e78:	1023883a 	mov	r17,r2
 8010e7c:	9d04b03a 	or	r2,r19,r20
 8010e80:	103fa51e 	bne	r2,zero,8010d18 <___vfiprintf_internal_r+0xf1c>
 8010e84:	002b883a 	mov	r21,zero
 8010e88:	00800084 	movi	r2,2
 8010e8c:	003e4a06 	br	80107b8 <___vfiprintf_internal_r+0x9bc>
 8010e90:	014200b4 	movhi	r5,2050
 8010e94:	2960d404 	addi	r5,r5,-31920
 8010e98:	002b883a 	mov	r21,zero
 8010e9c:	d9402615 	stw	r5,152(sp)
 8010ea0:	003f9e06 	br	8010d1c <___vfiprintf_internal_r+0xf20>
 8010ea4:	d9402217 	ldw	r5,136(sp)
 8010ea8:	d8001d85 	stb	zero,118(sp)
 8010eac:	0029883a 	mov	r20,zero
 8010eb0:	28800104 	addi	r2,r5,4
 8010eb4:	2cc00017 	ldw	r19,0(r5)
 8010eb8:	803e3a16 	blt	r16,zero,80107a4 <___vfiprintf_internal_r+0x9a8>
 8010ebc:	00ffdfc4 	movi	r3,-129
 8010ec0:	d8802215 	stw	r2,136(sp)
 8010ec4:	88e2703a 	and	r17,r17,r3
 8010ec8:	002b883a 	mov	r21,zero
 8010ecc:	983e9b26 	beq	r19,zero,801093c <___vfiprintf_internal_r+0xb40>
 8010ed0:	00800244 	movi	r2,9
 8010ed4:	14fdc936 	bltu	r2,r19,80105fc <___vfiprintf_internal_r+0x800>
 8010ed8:	003e9a06 	br	8010944 <___vfiprintf_internal_r+0xb48>
 8010edc:	00800c04 	movi	r2,48
 8010ee0:	d8c01d45 	stb	r3,117(sp)
 8010ee4:	d8801d05 	stb	r2,116(sp)
 8010ee8:	d8001d85 	stb	zero,118(sp)
 8010eec:	88c00094 	ori	r3,r17,2
 8010ef0:	80009c16 	blt	r16,zero,8011164 <___vfiprintf_internal_r+0x1368>
 8010ef4:	00bfdfc4 	movi	r2,-129
 8010ef8:	88a2703a 	and	r17,r17,r2
 8010efc:	8c400094 	ori	r17,r17,2
 8010f00:	002b883a 	mov	r21,zero
 8010f04:	003f8506 	br	8010d1c <___vfiprintf_internal_r+0xf20>
 8010f08:	b029883a 	mov	r20,r22
 8010f0c:	003c0b06 	br	800ff3c <___vfiprintf_internal_r+0x140>
 8010f10:	04e7c83a 	sub	r19,zero,r19
 8010f14:	05400b44 	movi	r21,45
 8010f18:	9804c03a 	cmpne	r2,r19,zero
 8010f1c:	0529c83a 	sub	r20,zero,r20
 8010f20:	dd401d85 	stb	r21,118(sp)
 8010f24:	a0a9c83a 	sub	r20,r20,r2
 8010f28:	80009716 	blt	r16,zero,8011188 <___vfiprintf_internal_r+0x138c>
 8010f2c:	00bfdfc4 	movi	r2,-129
 8010f30:	88a2703a 	and	r17,r17,r2
 8010f34:	003db006 	br	80105f8 <___vfiprintf_internal_r+0x7fc>
 8010f38:	b0c00007 	ldb	r3,0(r22)
 8010f3c:	003c0c06 	br	800ff70 <___vfiprintf_internal_r+0x174>
 8010f40:	8880100c 	andi	r2,r17,64
 8010f44:	d8001d85 	stb	zero,118(sp)
 8010f48:	1000461e 	bne	r2,zero,8011064 <___vfiprintf_internal_r+0x1268>
 8010f4c:	d9002217 	ldw	r4,136(sp)
 8010f50:	0029883a 	mov	r20,zero
 8010f54:	20800104 	addi	r2,r4,4
 8010f58:	24c00017 	ldw	r19,0(r4)
 8010f5c:	803df80e 	bge	r16,zero,8010740 <___vfiprintf_internal_r+0x944>
 8010f60:	9d06b03a 	or	r3,r19,r20
 8010f64:	d8802215 	stw	r2,136(sp)
 8010f68:	183d5e1e 	bne	r3,zero,80104e4 <___vfiprintf_internal_r+0x6e8>
 8010f6c:	002b883a 	mov	r21,zero
 8010f70:	0005883a 	mov	r2,zero
 8010f74:	003e1006 	br	80107b8 <___vfiprintf_internal_r+0x9bc>
 8010f78:	8880040c 	andi	r2,r17,16
 8010f7c:	1000321e 	bne	r2,zero,8011048 <___vfiprintf_internal_r+0x124c>
 8010f80:	8c40100c 	andi	r17,r17,64
 8010f84:	88008d26 	beq	r17,zero,80111bc <___vfiprintf_internal_r+0x13c0>
 8010f88:	d9402217 	ldw	r5,136(sp)
 8010f8c:	d8c02417 	ldw	r3,144(sp)
 8010f90:	28800017 	ldw	r2,0(r5)
 8010f94:	29400104 	addi	r5,r5,4
 8010f98:	d9402215 	stw	r5,136(sp)
 8010f9c:	10c0000d 	sth	r3,0(r2)
 8010fa0:	003bca06 	br	800fecc <___vfiprintf_internal_r+0xd0>
 8010fa4:	8880100c 	andi	r2,r17,64
 8010fa8:	10003a26 	beq	r2,zero,8011094 <___vfiprintf_internal_r+0x1298>
 8010fac:	d8802217 	ldw	r2,136(sp)
 8010fb0:	14c0000f 	ldh	r19,0(r2)
 8010fb4:	10800104 	addi	r2,r2,4
 8010fb8:	d8802215 	stw	r2,136(sp)
 8010fbc:	9829d7fa 	srai	r20,r19,31
 8010fc0:	a005883a 	mov	r2,r20
 8010fc4:	003d8506 	br	80105dc <___vfiprintf_internal_r+0x7e0>
 8010fc8:	8880100c 	andi	r2,r17,64
 8010fcc:	10002b26 	beq	r2,zero,801107c <___vfiprintf_internal_r+0x1280>
 8010fd0:	d8802217 	ldw	r2,136(sp)
 8010fd4:	0029883a 	mov	r20,zero
 8010fd8:	14c0000b 	ldhu	r19,0(r2)
 8010fdc:	10800104 	addi	r2,r2,4
 8010fe0:	d8802215 	stw	r2,136(sp)
 8010fe4:	003d5d06 	br	801055c <___vfiprintf_internal_r+0x760>
 8010fe8:	d9402017 	ldw	r5,128(sp)
 8010fec:	d9002117 	ldw	r4,132(sp)
 8010ff0:	d9801a04 	addi	r6,sp,104
 8010ff4:	d8c02a15 	stw	r3,168(sp)
 8010ff8:	d9c02b15 	stw	r7,172(sp)
 8010ffc:	800fce80 	call	800fce8 <__sprint_r.part.0>
 8011000:	d8c02a17 	ldw	r3,168(sp)
 8011004:	d9c02b17 	ldw	r7,172(sp)
 8011008:	103eb41e 	bne	r2,zero,8010adc <___vfiprintf_internal_r+0xce0>
 801100c:	d9001b17 	ldw	r4,108(sp)
 8011010:	d8801c17 	ldw	r2,112(sp)
 8011014:	d811883a 	mov	r8,sp
 8011018:	21400044 	addi	r5,r4,1
 801101c:	003e6706 	br	80109bc <___vfiprintf_internal_r+0xbc0>
 8011020:	00bfffc4 	movi	r2,-1
 8011024:	003c4a06 	br	8010150 <___vfiprintf_internal_r+0x354>
 8011028:	9805883a 	mov	r2,r19
 801102c:	003ee806 	br	8010bd0 <___vfiprintf_internal_r+0xdd4>
 8011030:	d8c02217 	ldw	r3,136(sp)
 8011034:	0029883a 	mov	r20,zero
 8011038:	18800104 	addi	r2,r3,4
 801103c:	1cc0000b 	ldhu	r19,0(r3)
 8011040:	803f9e0e 	bge	r16,zero,8010ebc <___vfiprintf_internal_r+0x10c0>
 8011044:	003dd706 	br	80107a4 <___vfiprintf_internal_r+0x9a8>
 8011048:	d8c02217 	ldw	r3,136(sp)
 801104c:	d9002417 	ldw	r4,144(sp)
 8011050:	18800017 	ldw	r2,0(r3)
 8011054:	18c00104 	addi	r3,r3,4
 8011058:	d8c02215 	stw	r3,136(sp)
 801105c:	11000015 	stw	r4,0(r2)
 8011060:	003b9a06 	br	800fecc <___vfiprintf_internal_r+0xd0>
 8011064:	d8c02217 	ldw	r3,136(sp)
 8011068:	0029883a 	mov	r20,zero
 801106c:	18800104 	addi	r2,r3,4
 8011070:	1cc0000b 	ldhu	r19,0(r3)
 8011074:	803db20e 	bge	r16,zero,8010740 <___vfiprintf_internal_r+0x944>
 8011078:	003fb906 	br	8010f60 <___vfiprintf_internal_r+0x1164>
 801107c:	d9002217 	ldw	r4,136(sp)
 8011080:	0029883a 	mov	r20,zero
 8011084:	24c00017 	ldw	r19,0(r4)
 8011088:	21000104 	addi	r4,r4,4
 801108c:	d9002215 	stw	r4,136(sp)
 8011090:	003d3206 	br	801055c <___vfiprintf_internal_r+0x760>
 8011094:	d8c02217 	ldw	r3,136(sp)
 8011098:	1cc00017 	ldw	r19,0(r3)
 801109c:	18c00104 	addi	r3,r3,4
 80110a0:	d8c02215 	stw	r3,136(sp)
 80110a4:	9829d7fa 	srai	r20,r19,31
 80110a8:	a005883a 	mov	r2,r20
 80110ac:	003d4b06 	br	80105dc <___vfiprintf_internal_r+0x7e0>
 80110b0:	0009883a 	mov	r4,zero
 80110b4:	01400044 	movi	r5,1
 80110b8:	d811883a 	mov	r8,sp
 80110bc:	003e4f06 	br	80109fc <___vfiprintf_internal_r+0xc00>
 80110c0:	d8c02215 	stw	r3,136(sp)
 80110c4:	002b883a 	mov	r21,zero
 80110c8:	003db806 	br	80107ac <___vfiprintf_internal_r+0x9b0>
 80110cc:	d811883a 	mov	r8,sp
 80110d0:	003e9606 	br	8010b2c <___vfiprintf_internal_r+0xd30>
 80110d4:	010200b4 	movhi	r4,2050
 80110d8:	21213404 	addi	r4,r4,-31536
 80110dc:	d9002315 	stw	r4,140(sp)
 80110e0:	003e6306 	br	8010a70 <___vfiprintf_internal_r+0xc74>
 80110e4:	b0c00043 	ldbu	r3,1(r22)
 80110e8:	8c400814 	ori	r17,r17,32
 80110ec:	b5800044 	addi	r22,r22,1
 80110f0:	18c03fcc 	andi	r3,r3,255
 80110f4:	18c0201c 	xori	r3,r3,128
 80110f8:	18ffe004 	addi	r3,r3,-128
 80110fc:	003b9c06 	br	800ff70 <___vfiprintf_internal_r+0x174>
 8011100:	b809883a 	mov	r4,r23
 8011104:	da002a15 	stw	r8,168(sp)
 8011108:	80084040 	call	8008404 <strlen>
 801110c:	1029883a 	mov	r20,r2
 8011110:	dd401d83 	ldbu	r21,118(sp)
 8011114:	df002215 	stw	fp,136(sp)
 8011118:	0021883a 	mov	r16,zero
 801111c:	da002a17 	ldw	r8,168(sp)
 8011120:	003c3906 	br	8010208 <___vfiprintf_internal_r+0x40c>
 8011124:	d9402017 	ldw	r5,128(sp)
 8011128:	d9002117 	ldw	r4,132(sp)
 801112c:	d9801a04 	addi	r6,sp,104
 8011130:	800fce80 	call	800fce8 <__sprint_r.part.0>
 8011134:	103e691e 	bne	r2,zero,8010adc <___vfiprintf_internal_r+0xce0>
 8011138:	d9001b17 	ldw	r4,108(sp)
 801113c:	d8801c17 	ldw	r2,112(sp)
 8011140:	d811883a 	mov	r8,sp
 8011144:	21400044 	addi	r5,r4,1
 8011148:	003e2e06 	br	8010a04 <___vfiprintf_internal_r+0xc08>
 801114c:	010200b4 	movhi	r4,2050
 8011150:	21213804 	addi	r4,r4,-31520
 8011154:	d9002315 	stw	r4,140(sp)
 8011158:	d9001b17 	ldw	r4,108(sp)
 801115c:	21000044 	addi	r4,r4,1
 8011160:	003c5e06 	br	80102dc <___vfiprintf_internal_r+0x4e0>
 8011164:	002b883a 	mov	r21,zero
 8011168:	00800084 	movi	r2,2
 801116c:	10803fcc 	andi	r2,r2,255
 8011170:	01000044 	movi	r4,1
 8011174:	11002b26 	beq	r2,r4,8011224 <___vfiprintf_internal_r+0x1428>
 8011178:	01000084 	movi	r4,2
 801117c:	11002b1e 	bne	r2,r4,801122c <___vfiprintf_internal_r+0x1430>
 8011180:	1823883a 	mov	r17,r3
 8011184:	003ee506 	br	8010d1c <___vfiprintf_internal_r+0xf20>
 8011188:	8807883a 	mov	r3,r17
 801118c:	00800044 	movi	r2,1
 8011190:	003ff606 	br	801116c <___vfiprintf_internal_r+0x1370>
 8011194:	00800184 	movi	r2,6
 8011198:	1400012e 	bgeu	r2,r16,80111a0 <___vfiprintf_internal_r+0x13a4>
 801119c:	1021883a 	mov	r16,r2
 80111a0:	8029883a 	mov	r20,r16
 80111a4:	8027883a 	mov	r19,r16
 80111a8:	80002216 	blt	r16,zero,8011234 <___vfiprintf_internal_r+0x1438>
 80111ac:	05c200b4 	movhi	r23,2050
 80111b0:	df002215 	stw	fp,136(sp)
 80111b4:	bde0d904 	addi	r23,r23,-31900
 80111b8:	003cfb06 	br	80105a8 <___vfiprintf_internal_r+0x7ac>
 80111bc:	d9002217 	ldw	r4,136(sp)
 80111c0:	d9402417 	ldw	r5,144(sp)
 80111c4:	20800017 	ldw	r2,0(r4)
 80111c8:	21000104 	addi	r4,r4,4
 80111cc:	d9002215 	stw	r4,136(sp)
 80111d0:	11400015 	stw	r5,0(r2)
 80111d4:	003b3d06 	br	800fecc <___vfiprintf_internal_r+0xd0>
 80111d8:	014200b4 	movhi	r5,2050
 80111dc:	29613804 	addi	r5,r5,-31520
 80111e0:	d9402315 	stw	r5,140(sp)
 80111e4:	d9401b17 	ldw	r5,108(sp)
 80111e8:	29400044 	addi	r5,r5,1
 80111ec:	003e6d06 	br	8010ba4 <___vfiprintf_internal_r+0xda8>
 80111f0:	8029883a 	mov	r20,r16
 80111f4:	dd401d83 	ldbu	r21,118(sp)
 80111f8:	df002215 	stw	fp,136(sp)
 80111fc:	0021883a 	mov	r16,zero
 8011200:	003c0106 	br	8010208 <___vfiprintf_internal_r+0x40c>
 8011204:	00c200b4 	movhi	r3,2050
 8011208:	18e13404 	addi	r3,r3,-31536
 801120c:	d8c02315 	stw	r3,140(sp)
 8011210:	280d883a 	mov	r6,r5
 8011214:	003c6906 	br	80103bc <___vfiprintf_internal_r+0x5c0>
 8011218:	802d883a 	mov	r22,r16
 801121c:	0021883a 	mov	r16,zero
 8011220:	003b5406 	br	800ff74 <___vfiprintf_internal_r+0x178>
 8011224:	1823883a 	mov	r17,r3
 8011228:	003cf306 	br	80105f8 <___vfiprintf_internal_r+0x7fc>
 801122c:	1823883a 	mov	r17,r3
 8011230:	003cad06 	br	80104e8 <___vfiprintf_internal_r+0x6ec>
 8011234:	0027883a 	mov	r19,zero
 8011238:	003fdc06 	br	80111ac <___vfiprintf_internal_r+0x13b0>
 801123c:	d9402217 	ldw	r5,136(sp)
 8011240:	8005883a 	mov	r2,r16
 8011244:	b0c00043 	ldbu	r3,1(r22)
 8011248:	2c000017 	ldw	r16,0(r5)
 801124c:	29000104 	addi	r4,r5,4
 8011250:	d9002215 	stw	r4,136(sp)
 8011254:	102d883a 	mov	r22,r2
 8011258:	803fa50e 	bge	r16,zero,80110f0 <___vfiprintf_internal_r+0x12f4>
 801125c:	18c03fcc 	andi	r3,r3,255
 8011260:	18c0201c 	xori	r3,r3,128
 8011264:	043fffc4 	movi	r16,-1
 8011268:	18ffe004 	addi	r3,r3,-128
 801126c:	003b4006 	br	800ff70 <___vfiprintf_internal_r+0x174>
 8011270:	d9402303 	ldbu	r5,140(sp)
 8011274:	d9401d85 	stb	r5,118(sp)
 8011278:	003cae06 	br	8010534 <___vfiprintf_internal_r+0x738>
 801127c:	d8c02303 	ldbu	r3,140(sp)
 8011280:	d8c01d85 	stb	r3,118(sp)
 8011284:	003d1406 	br	80106d8 <___vfiprintf_internal_r+0x8dc>
 8011288:	d8c02303 	ldbu	r3,140(sp)
 801128c:	d8c01d85 	stb	r3,118(sp)
 8011290:	003cca06 	br	80105bc <___vfiprintf_internal_r+0x7c0>
 8011294:	8880004c 	andi	r2,r17,1
 8011298:	002b883a 	mov	r21,zero
 801129c:	10000526 	beq	r2,zero,80112b4 <___vfiprintf_internal_r+0x14b8>
 80112a0:	00800c04 	movi	r2,48
 80112a4:	d88019c5 	stb	r2,103(sp)
 80112a8:	dd002817 	ldw	r20,160(sp)
 80112ac:	ddc019c4 	addi	r23,sp,103
 80112b0:	003bd506 	br	8010208 <___vfiprintf_internal_r+0x40c>
 80112b4:	0029883a 	mov	r20,zero
 80112b8:	ddc01a04 	addi	r23,sp,104
 80112bc:	003bd206 	br	8010208 <___vfiprintf_internal_r+0x40c>
 80112c0:	d9002303 	ldbu	r4,140(sp)
 80112c4:	d9001d85 	stb	r4,118(sp)
 80112c8:	003da606 	br	8010964 <___vfiprintf_internal_r+0xb68>
 80112cc:	d8c02303 	ldbu	r3,140(sp)
 80112d0:	d8c01d85 	stb	r3,118(sp)
 80112d4:	003c7606 	br	80104b0 <___vfiprintf_internal_r+0x6b4>
 80112d8:	d8c02303 	ldbu	r3,140(sp)
 80112dc:	d8c01d85 	stb	r3,118(sp)
 80112e0:	003c6506 	br	8010478 <___vfiprintf_internal_r+0x67c>
 80112e4:	d9002303 	ldbu	r4,140(sp)
 80112e8:	d9001d85 	stb	r4,118(sp)
 80112ec:	003d3d06 	br	80107e4 <___vfiprintf_internal_r+0x9e8>
 80112f0:	d8c02303 	ldbu	r3,140(sp)
 80112f4:	d8c01d85 	stb	r3,118(sp)
 80112f8:	003d1d06 	br	8010770 <___vfiprintf_internal_r+0x974>
 80112fc:	d8c02303 	ldbu	r3,140(sp)
 8011300:	d8c01d85 	stb	r3,118(sp)
 8011304:	003d0306 	br	8010714 <___vfiprintf_internal_r+0x918>

08011308 <__vfiprintf_internal>:
 8011308:	008200b4 	movhi	r2,2050
 801130c:	10a85804 	addi	r2,r2,-24224
 8011310:	300f883a 	mov	r7,r6
 8011314:	280d883a 	mov	r6,r5
 8011318:	200b883a 	mov	r5,r4
 801131c:	11000017 	ldw	r4,0(r2)
 8011320:	800fdfc1 	jmpi	800fdfc <___vfiprintf_internal_r>

08011324 <__sbprintf>:
 8011324:	2880030b 	ldhu	r2,12(r5)
 8011328:	2ac01917 	ldw	r11,100(r5)
 801132c:	2a80038b 	ldhu	r10,14(r5)
 8011330:	2a400717 	ldw	r9,28(r5)
 8011334:	2a000917 	ldw	r8,36(r5)
 8011338:	defee204 	addi	sp,sp,-1144
 801133c:	00c10004 	movi	r3,1024
 8011340:	dc011a15 	stw	r16,1128(sp)
 8011344:	10bfff4c 	andi	r2,r2,65533
 8011348:	2821883a 	mov	r16,r5
 801134c:	d8cb883a 	add	r5,sp,r3
 8011350:	dc811c15 	stw	r18,1136(sp)
 8011354:	dc411b15 	stw	r17,1132(sp)
 8011358:	dfc11d15 	stw	ra,1140(sp)
 801135c:	2025883a 	mov	r18,r4
 8011360:	d881030d 	sth	r2,1036(sp)
 8011364:	dac11915 	stw	r11,1124(sp)
 8011368:	da81038d 	sth	r10,1038(sp)
 801136c:	da410715 	stw	r9,1052(sp)
 8011370:	da010915 	stw	r8,1060(sp)
 8011374:	dec10015 	stw	sp,1024(sp)
 8011378:	dec10415 	stw	sp,1040(sp)
 801137c:	d8c10215 	stw	r3,1032(sp)
 8011380:	d8c10515 	stw	r3,1044(sp)
 8011384:	d8010615 	stw	zero,1048(sp)
 8011388:	800fdfc0 	call	800fdfc <___vfiprintf_internal_r>
 801138c:	1023883a 	mov	r17,r2
 8011390:	10000416 	blt	r2,zero,80113a4 <__sbprintf+0x80>
 8011394:	d9410004 	addi	r5,sp,1024
 8011398:	9009883a 	mov	r4,r18
 801139c:	800c6840 	call	800c684 <_fflush_r>
 80113a0:	10000d1e 	bne	r2,zero,80113d8 <__sbprintf+0xb4>
 80113a4:	d881030b 	ldhu	r2,1036(sp)
 80113a8:	1080100c 	andi	r2,r2,64
 80113ac:	10000326 	beq	r2,zero,80113bc <__sbprintf+0x98>
 80113b0:	8080030b 	ldhu	r2,12(r16)
 80113b4:	10801014 	ori	r2,r2,64
 80113b8:	8080030d 	sth	r2,12(r16)
 80113bc:	8805883a 	mov	r2,r17
 80113c0:	dfc11d17 	ldw	ra,1140(sp)
 80113c4:	dc811c17 	ldw	r18,1136(sp)
 80113c8:	dc411b17 	ldw	r17,1132(sp)
 80113cc:	dc011a17 	ldw	r16,1128(sp)
 80113d0:	dec11e04 	addi	sp,sp,1144
 80113d4:	f800283a 	ret
 80113d8:	047fffc4 	movi	r17,-1
 80113dc:	003ff106 	br	80113a4 <__sbprintf+0x80>

080113e0 <__swbuf_r>:
 80113e0:	defffb04 	addi	sp,sp,-20
 80113e4:	dcc00315 	stw	r19,12(sp)
 80113e8:	dc800215 	stw	r18,8(sp)
 80113ec:	dc000015 	stw	r16,0(sp)
 80113f0:	dfc00415 	stw	ra,16(sp)
 80113f4:	dc400115 	stw	r17,4(sp)
 80113f8:	2025883a 	mov	r18,r4
 80113fc:	2827883a 	mov	r19,r5
 8011400:	3021883a 	mov	r16,r6
 8011404:	20000226 	beq	r4,zero,8011410 <__swbuf_r+0x30>
 8011408:	20800e17 	ldw	r2,56(r4)
 801140c:	10004226 	beq	r2,zero,8011518 <__swbuf_r+0x138>
 8011410:	80800617 	ldw	r2,24(r16)
 8011414:	8100030b 	ldhu	r4,12(r16)
 8011418:	80800215 	stw	r2,8(r16)
 801141c:	2080020c 	andi	r2,r4,8
 8011420:	10003626 	beq	r2,zero,80114fc <__swbuf_r+0x11c>
 8011424:	80c00417 	ldw	r3,16(r16)
 8011428:	18003426 	beq	r3,zero,80114fc <__swbuf_r+0x11c>
 801142c:	2088000c 	andi	r2,r4,8192
 8011430:	9c403fcc 	andi	r17,r19,255
 8011434:	10001a26 	beq	r2,zero,80114a0 <__swbuf_r+0xc0>
 8011438:	80800017 	ldw	r2,0(r16)
 801143c:	81000517 	ldw	r4,20(r16)
 8011440:	10c7c83a 	sub	r3,r2,r3
 8011444:	1900200e 	bge	r3,r4,80114c8 <__swbuf_r+0xe8>
 8011448:	18c00044 	addi	r3,r3,1
 801144c:	81000217 	ldw	r4,8(r16)
 8011450:	11400044 	addi	r5,r2,1
 8011454:	81400015 	stw	r5,0(r16)
 8011458:	213fffc4 	addi	r4,r4,-1
 801145c:	81000215 	stw	r4,8(r16)
 8011460:	14c00005 	stb	r19,0(r2)
 8011464:	80800517 	ldw	r2,20(r16)
 8011468:	10c01e26 	beq	r2,r3,80114e4 <__swbuf_r+0x104>
 801146c:	8080030b 	ldhu	r2,12(r16)
 8011470:	1080004c 	andi	r2,r2,1
 8011474:	10000226 	beq	r2,zero,8011480 <__swbuf_r+0xa0>
 8011478:	00800284 	movi	r2,10
 801147c:	88801926 	beq	r17,r2,80114e4 <__swbuf_r+0x104>
 8011480:	8805883a 	mov	r2,r17
 8011484:	dfc00417 	ldw	ra,16(sp)
 8011488:	dcc00317 	ldw	r19,12(sp)
 801148c:	dc800217 	ldw	r18,8(sp)
 8011490:	dc400117 	ldw	r17,4(sp)
 8011494:	dc000017 	ldw	r16,0(sp)
 8011498:	dec00504 	addi	sp,sp,20
 801149c:	f800283a 	ret
 80114a0:	81401917 	ldw	r5,100(r16)
 80114a4:	00b7ffc4 	movi	r2,-8193
 80114a8:	21080014 	ori	r4,r4,8192
 80114ac:	2884703a 	and	r2,r5,r2
 80114b0:	80801915 	stw	r2,100(r16)
 80114b4:	80800017 	ldw	r2,0(r16)
 80114b8:	8100030d 	sth	r4,12(r16)
 80114bc:	81000517 	ldw	r4,20(r16)
 80114c0:	10c7c83a 	sub	r3,r2,r3
 80114c4:	193fe016 	blt	r3,r4,8011448 <__swbuf_r+0x68>
 80114c8:	800b883a 	mov	r5,r16
 80114cc:	9009883a 	mov	r4,r18
 80114d0:	800c6840 	call	800c684 <_fflush_r>
 80114d4:	1000071e 	bne	r2,zero,80114f4 <__swbuf_r+0x114>
 80114d8:	80800017 	ldw	r2,0(r16)
 80114dc:	00c00044 	movi	r3,1
 80114e0:	003fda06 	br	801144c <__swbuf_r+0x6c>
 80114e4:	800b883a 	mov	r5,r16
 80114e8:	9009883a 	mov	r4,r18
 80114ec:	800c6840 	call	800c684 <_fflush_r>
 80114f0:	103fe326 	beq	r2,zero,8011480 <__swbuf_r+0xa0>
 80114f4:	00bfffc4 	movi	r2,-1
 80114f8:	003fe206 	br	8011484 <__swbuf_r+0xa4>
 80114fc:	800b883a 	mov	r5,r16
 8011500:	9009883a 	mov	r4,r18
 8011504:	800aa640 	call	800aa64 <__swsetup_r>
 8011508:	103ffa1e 	bne	r2,zero,80114f4 <__swbuf_r+0x114>
 801150c:	8100030b 	ldhu	r4,12(r16)
 8011510:	80c00417 	ldw	r3,16(r16)
 8011514:	003fc506 	br	801142c <__swbuf_r+0x4c>
 8011518:	800ca700 	call	800ca70 <__sinit>
 801151c:	003fbc06 	br	8011410 <__swbuf_r+0x30>

08011520 <__swbuf>:
 8011520:	008200b4 	movhi	r2,2050
 8011524:	10a85804 	addi	r2,r2,-24224
 8011528:	280d883a 	mov	r6,r5
 801152c:	200b883a 	mov	r5,r4
 8011530:	11000017 	ldw	r4,0(r2)
 8011534:	80113e01 	jmpi	80113e0 <__swbuf_r>

08011538 <_write_r>:
 8011538:	defffd04 	addi	sp,sp,-12
 801153c:	2805883a 	mov	r2,r5
 8011540:	dc000015 	stw	r16,0(sp)
 8011544:	040200b4 	movhi	r16,2050
 8011548:	dc400115 	stw	r17,4(sp)
 801154c:	300b883a 	mov	r5,r6
 8011550:	842f7404 	addi	r16,r16,-16944
 8011554:	2023883a 	mov	r17,r4
 8011558:	380d883a 	mov	r6,r7
 801155c:	1009883a 	mov	r4,r2
 8011560:	dfc00215 	stw	ra,8(sp)
 8011564:	80000015 	stw	zero,0(r16)
 8011568:	8015ea00 	call	8015ea0 <write>
 801156c:	00ffffc4 	movi	r3,-1
 8011570:	10c00526 	beq	r2,r3,8011588 <_write_r+0x50>
 8011574:	dfc00217 	ldw	ra,8(sp)
 8011578:	dc400117 	ldw	r17,4(sp)
 801157c:	dc000017 	ldw	r16,0(sp)
 8011580:	dec00304 	addi	sp,sp,12
 8011584:	f800283a 	ret
 8011588:	80c00017 	ldw	r3,0(r16)
 801158c:	183ff926 	beq	r3,zero,8011574 <_write_r+0x3c>
 8011590:	88c00015 	stw	r3,0(r17)
 8011594:	003ff706 	br	8011574 <_write_r+0x3c>

08011598 <_close_r>:
 8011598:	defffd04 	addi	sp,sp,-12
 801159c:	dc000015 	stw	r16,0(sp)
 80115a0:	040200b4 	movhi	r16,2050
 80115a4:	dc400115 	stw	r17,4(sp)
 80115a8:	842f7404 	addi	r16,r16,-16944
 80115ac:	2023883a 	mov	r17,r4
 80115b0:	2809883a 	mov	r4,r5
 80115b4:	dfc00215 	stw	ra,8(sp)
 80115b8:	80000015 	stw	zero,0(r16)
 80115bc:	80151cc0 	call	80151cc <close>
 80115c0:	00ffffc4 	movi	r3,-1
 80115c4:	10c00526 	beq	r2,r3,80115dc <_close_r+0x44>
 80115c8:	dfc00217 	ldw	ra,8(sp)
 80115cc:	dc400117 	ldw	r17,4(sp)
 80115d0:	dc000017 	ldw	r16,0(sp)
 80115d4:	dec00304 	addi	sp,sp,12
 80115d8:	f800283a 	ret
 80115dc:	80c00017 	ldw	r3,0(r16)
 80115e0:	183ff926 	beq	r3,zero,80115c8 <_close_r+0x30>
 80115e4:	88c00015 	stw	r3,0(r17)
 80115e8:	003ff706 	br	80115c8 <_close_r+0x30>

080115ec <_calloc_r>:
 80115ec:	defffe04 	addi	sp,sp,-8
 80115f0:	2805883a 	mov	r2,r5
 80115f4:	dc000015 	stw	r16,0(sp)
 80115f8:	300b883a 	mov	r5,r6
 80115fc:	2021883a 	mov	r16,r4
 8011600:	1009883a 	mov	r4,r2
 8011604:	dfc00115 	stw	ra,4(sp)
 8011608:	8007e400 	call	8007e40 <__mulsi3>
 801160c:	100b883a 	mov	r5,r2
 8011610:	8009883a 	mov	r4,r16
 8011614:	800d8380 	call	800d838 <_malloc_r>
 8011618:	10002926 	beq	r2,zero,80116c0 <_calloc_r+0xd4>
 801161c:	11bfff17 	ldw	r6,-4(r2)
 8011620:	1021883a 	mov	r16,r2
 8011624:	00bfff04 	movi	r2,-4
 8011628:	308c703a 	and	r6,r6,r2
 801162c:	00c00904 	movi	r3,36
 8011630:	308d883a 	add	r6,r6,r2
 8011634:	19801636 	bltu	r3,r6,8011690 <_calloc_r+0xa4>
 8011638:	008004c4 	movi	r2,19
 801163c:	11800b2e 	bgeu	r2,r6,801166c <_calloc_r+0x80>
 8011640:	80000015 	stw	zero,0(r16)
 8011644:	80000115 	stw	zero,4(r16)
 8011648:	008006c4 	movi	r2,27
 801164c:	11801a2e 	bgeu	r2,r6,80116b8 <_calloc_r+0xcc>
 8011650:	80000215 	stw	zero,8(r16)
 8011654:	80000315 	stw	zero,12(r16)
 8011658:	30c0151e 	bne	r6,r3,80116b0 <_calloc_r+0xc4>
 801165c:	80000415 	stw	zero,16(r16)
 8011660:	80800604 	addi	r2,r16,24
 8011664:	80000515 	stw	zero,20(r16)
 8011668:	00000106 	br	8011670 <_calloc_r+0x84>
 801166c:	8005883a 	mov	r2,r16
 8011670:	10000015 	stw	zero,0(r2)
 8011674:	10000115 	stw	zero,4(r2)
 8011678:	10000215 	stw	zero,8(r2)
 801167c:	8005883a 	mov	r2,r16
 8011680:	dfc00117 	ldw	ra,4(sp)
 8011684:	dc000017 	ldw	r16,0(sp)
 8011688:	dec00204 	addi	sp,sp,8
 801168c:	f800283a 	ret
 8011690:	000b883a 	mov	r5,zero
 8011694:	8009883a 	mov	r4,r16
 8011698:	80080ec0 	call	80080ec <memset>
 801169c:	8005883a 	mov	r2,r16
 80116a0:	dfc00117 	ldw	ra,4(sp)
 80116a4:	dc000017 	ldw	r16,0(sp)
 80116a8:	dec00204 	addi	sp,sp,8
 80116ac:	f800283a 	ret
 80116b0:	80800404 	addi	r2,r16,16
 80116b4:	003fee06 	br	8011670 <_calloc_r+0x84>
 80116b8:	80800204 	addi	r2,r16,8
 80116bc:	003fec06 	br	8011670 <_calloc_r+0x84>
 80116c0:	0005883a 	mov	r2,zero
 80116c4:	003fee06 	br	8011680 <_calloc_r+0x94>

080116c8 <_fclose_r>:
 80116c8:	28003926 	beq	r5,zero,80117b0 <_fclose_r+0xe8>
 80116cc:	defffc04 	addi	sp,sp,-16
 80116d0:	dc400115 	stw	r17,4(sp)
 80116d4:	dc000015 	stw	r16,0(sp)
 80116d8:	dfc00315 	stw	ra,12(sp)
 80116dc:	dc800215 	stw	r18,8(sp)
 80116e0:	2023883a 	mov	r17,r4
 80116e4:	2821883a 	mov	r16,r5
 80116e8:	20000226 	beq	r4,zero,80116f4 <_fclose_r+0x2c>
 80116ec:	20800e17 	ldw	r2,56(r4)
 80116f0:	10002726 	beq	r2,zero,8011790 <_fclose_r+0xc8>
 80116f4:	8080030f 	ldh	r2,12(r16)
 80116f8:	1000071e 	bne	r2,zero,8011718 <_fclose_r+0x50>
 80116fc:	0005883a 	mov	r2,zero
 8011700:	dfc00317 	ldw	ra,12(sp)
 8011704:	dc800217 	ldw	r18,8(sp)
 8011708:	dc400117 	ldw	r17,4(sp)
 801170c:	dc000017 	ldw	r16,0(sp)
 8011710:	dec00404 	addi	sp,sp,16
 8011714:	f800283a 	ret
 8011718:	800b883a 	mov	r5,r16
 801171c:	8809883a 	mov	r4,r17
 8011720:	800c4680 	call	800c468 <__sflush_r>
 8011724:	1025883a 	mov	r18,r2
 8011728:	80800b17 	ldw	r2,44(r16)
 801172c:	10000426 	beq	r2,zero,8011740 <_fclose_r+0x78>
 8011730:	81400717 	ldw	r5,28(r16)
 8011734:	8809883a 	mov	r4,r17
 8011738:	103ee83a 	callr	r2
 801173c:	10001616 	blt	r2,zero,8011798 <_fclose_r+0xd0>
 8011740:	8080030b 	ldhu	r2,12(r16)
 8011744:	1080200c 	andi	r2,r2,128
 8011748:	1000151e 	bne	r2,zero,80117a0 <_fclose_r+0xd8>
 801174c:	81400c17 	ldw	r5,48(r16)
 8011750:	28000526 	beq	r5,zero,8011768 <_fclose_r+0xa0>
 8011754:	80801004 	addi	r2,r16,64
 8011758:	28800226 	beq	r5,r2,8011764 <_fclose_r+0x9c>
 801175c:	8809883a 	mov	r4,r17
 8011760:	800cbe40 	call	800cbe4 <_free_r>
 8011764:	80000c15 	stw	zero,48(r16)
 8011768:	81401117 	ldw	r5,68(r16)
 801176c:	28000326 	beq	r5,zero,801177c <_fclose_r+0xb4>
 8011770:	8809883a 	mov	r4,r17
 8011774:	800cbe40 	call	800cbe4 <_free_r>
 8011778:	80001115 	stw	zero,68(r16)
 801177c:	800ca800 	call	800ca80 <__sfp_lock_acquire>
 8011780:	8000030d 	sth	zero,12(r16)
 8011784:	800ca840 	call	800ca84 <__sfp_lock_release>
 8011788:	9005883a 	mov	r2,r18
 801178c:	003fdc06 	br	8011700 <_fclose_r+0x38>
 8011790:	800ca700 	call	800ca70 <__sinit>
 8011794:	003fd706 	br	80116f4 <_fclose_r+0x2c>
 8011798:	04bfffc4 	movi	r18,-1
 801179c:	003fe806 	br	8011740 <_fclose_r+0x78>
 80117a0:	81400417 	ldw	r5,16(r16)
 80117a4:	8809883a 	mov	r4,r17
 80117a8:	800cbe40 	call	800cbe4 <_free_r>
 80117ac:	003fe706 	br	801174c <_fclose_r+0x84>
 80117b0:	0005883a 	mov	r2,zero
 80117b4:	f800283a 	ret

080117b8 <fclose>:
 80117b8:	008200b4 	movhi	r2,2050
 80117bc:	10a85804 	addi	r2,r2,-24224
 80117c0:	200b883a 	mov	r5,r4
 80117c4:	11000017 	ldw	r4,0(r2)
 80117c8:	80116c81 	jmpi	80116c8 <_fclose_r>

080117cc <__fputwc>:
 80117cc:	defff804 	addi	sp,sp,-32
 80117d0:	dcc00415 	stw	r19,16(sp)
 80117d4:	dc800315 	stw	r18,12(sp)
 80117d8:	dc000115 	stw	r16,4(sp)
 80117dc:	dfc00715 	stw	ra,28(sp)
 80117e0:	dd400615 	stw	r21,24(sp)
 80117e4:	dd000515 	stw	r20,20(sp)
 80117e8:	dc400215 	stw	r17,8(sp)
 80117ec:	2027883a 	mov	r19,r4
 80117f0:	2825883a 	mov	r18,r5
 80117f4:	3021883a 	mov	r16,r6
 80117f8:	800d6280 	call	800d628 <__locale_mb_cur_max>
 80117fc:	00c00044 	movi	r3,1
 8011800:	10c03e26 	beq	r2,r3,80118fc <__fputwc+0x130>
 8011804:	81c01704 	addi	r7,r16,92
 8011808:	900d883a 	mov	r6,r18
 801180c:	d80b883a 	mov	r5,sp
 8011810:	9809883a 	mov	r4,r19
 8011814:	8011b440 	call	8011b44 <_wcrtomb_r>
 8011818:	1029883a 	mov	r20,r2
 801181c:	00bfffc4 	movi	r2,-1
 8011820:	a0802026 	beq	r20,r2,80118a4 <__fputwc+0xd8>
 8011824:	d9400003 	ldbu	r5,0(sp)
 8011828:	a0001c26 	beq	r20,zero,801189c <__fputwc+0xd0>
 801182c:	0023883a 	mov	r17,zero
 8011830:	05400284 	movi	r21,10
 8011834:	00000906 	br	801185c <__fputwc+0x90>
 8011838:	80800017 	ldw	r2,0(r16)
 801183c:	11400005 	stb	r5,0(r2)
 8011840:	80c00017 	ldw	r3,0(r16)
 8011844:	18c00044 	addi	r3,r3,1
 8011848:	80c00015 	stw	r3,0(r16)
 801184c:	8c400044 	addi	r17,r17,1
 8011850:	dc45883a 	add	r2,sp,r17
 8011854:	8d00112e 	bgeu	r17,r20,801189c <__fputwc+0xd0>
 8011858:	11400003 	ldbu	r5,0(r2)
 801185c:	80c00217 	ldw	r3,8(r16)
 8011860:	18ffffc4 	addi	r3,r3,-1
 8011864:	80c00215 	stw	r3,8(r16)
 8011868:	183ff30e 	bge	r3,zero,8011838 <__fputwc+0x6c>
 801186c:	80800617 	ldw	r2,24(r16)
 8011870:	18801916 	blt	r3,r2,80118d8 <__fputwc+0x10c>
 8011874:	80800017 	ldw	r2,0(r16)
 8011878:	11400005 	stb	r5,0(r2)
 801187c:	80800017 	ldw	r2,0(r16)
 8011880:	10c00003 	ldbu	r3,0(r2)
 8011884:	10800044 	addi	r2,r2,1
 8011888:	1d402326 	beq	r3,r21,8011918 <__fputwc+0x14c>
 801188c:	80800015 	stw	r2,0(r16)
 8011890:	8c400044 	addi	r17,r17,1
 8011894:	dc45883a 	add	r2,sp,r17
 8011898:	8d3fef36 	bltu	r17,r20,8011858 <__fputwc+0x8c>
 801189c:	9005883a 	mov	r2,r18
 80118a0:	00000406 	br	80118b4 <__fputwc+0xe8>
 80118a4:	80c0030b 	ldhu	r3,12(r16)
 80118a8:	a005883a 	mov	r2,r20
 80118ac:	18c01014 	ori	r3,r3,64
 80118b0:	80c0030d 	sth	r3,12(r16)
 80118b4:	dfc00717 	ldw	ra,28(sp)
 80118b8:	dd400617 	ldw	r21,24(sp)
 80118bc:	dd000517 	ldw	r20,20(sp)
 80118c0:	dcc00417 	ldw	r19,16(sp)
 80118c4:	dc800317 	ldw	r18,12(sp)
 80118c8:	dc400217 	ldw	r17,8(sp)
 80118cc:	dc000117 	ldw	r16,4(sp)
 80118d0:	dec00804 	addi	sp,sp,32
 80118d4:	f800283a 	ret
 80118d8:	800d883a 	mov	r6,r16
 80118dc:	29403fcc 	andi	r5,r5,255
 80118e0:	9809883a 	mov	r4,r19
 80118e4:	80113e00 	call	80113e0 <__swbuf_r>
 80118e8:	10bfffe0 	cmpeqi	r2,r2,-1
 80118ec:	10803fcc 	andi	r2,r2,255
 80118f0:	103fd626 	beq	r2,zero,801184c <__fputwc+0x80>
 80118f4:	00bfffc4 	movi	r2,-1
 80118f8:	003fee06 	br	80118b4 <__fputwc+0xe8>
 80118fc:	90ffffc4 	addi	r3,r18,-1
 8011900:	01003f84 	movi	r4,254
 8011904:	20ffbf36 	bltu	r4,r3,8011804 <__fputwc+0x38>
 8011908:	900b883a 	mov	r5,r18
 801190c:	dc800005 	stb	r18,0(sp)
 8011910:	1029883a 	mov	r20,r2
 8011914:	003fc506 	br	801182c <__fputwc+0x60>
 8011918:	800d883a 	mov	r6,r16
 801191c:	a80b883a 	mov	r5,r21
 8011920:	9809883a 	mov	r4,r19
 8011924:	80113e00 	call	80113e0 <__swbuf_r>
 8011928:	10bfffe0 	cmpeqi	r2,r2,-1
 801192c:	003fef06 	br	80118ec <__fputwc+0x120>

08011930 <_fputwc_r>:
 8011930:	3080030b 	ldhu	r2,12(r6)
 8011934:	10c8000c 	andi	r3,r2,8192
 8011938:	1800051e 	bne	r3,zero,8011950 <_fputwc_r+0x20>
 801193c:	30c01917 	ldw	r3,100(r6)
 8011940:	10880014 	ori	r2,r2,8192
 8011944:	3080030d 	sth	r2,12(r6)
 8011948:	18880014 	ori	r2,r3,8192
 801194c:	30801915 	stw	r2,100(r6)
 8011950:	80117cc1 	jmpi	80117cc <__fputwc>

08011954 <fputwc>:
 8011954:	008200b4 	movhi	r2,2050
 8011958:	defffc04 	addi	sp,sp,-16
 801195c:	10a85804 	addi	r2,r2,-24224
 8011960:	dc000115 	stw	r16,4(sp)
 8011964:	14000017 	ldw	r16,0(r2)
 8011968:	dc400215 	stw	r17,8(sp)
 801196c:	dfc00315 	stw	ra,12(sp)
 8011970:	2023883a 	mov	r17,r4
 8011974:	80000226 	beq	r16,zero,8011980 <fputwc+0x2c>
 8011978:	80800e17 	ldw	r2,56(r16)
 801197c:	10001026 	beq	r2,zero,80119c0 <fputwc+0x6c>
 8011980:	2880030b 	ldhu	r2,12(r5)
 8011984:	10c8000c 	andi	r3,r2,8192
 8011988:	1800051e 	bne	r3,zero,80119a0 <fputwc+0x4c>
 801198c:	28c01917 	ldw	r3,100(r5)
 8011990:	10880014 	ori	r2,r2,8192
 8011994:	2880030d 	sth	r2,12(r5)
 8011998:	18880014 	ori	r2,r3,8192
 801199c:	28801915 	stw	r2,100(r5)
 80119a0:	280d883a 	mov	r6,r5
 80119a4:	8009883a 	mov	r4,r16
 80119a8:	880b883a 	mov	r5,r17
 80119ac:	dfc00317 	ldw	ra,12(sp)
 80119b0:	dc400217 	ldw	r17,8(sp)
 80119b4:	dc000117 	ldw	r16,4(sp)
 80119b8:	dec00404 	addi	sp,sp,16
 80119bc:	80117cc1 	jmpi	80117cc <__fputwc>
 80119c0:	8009883a 	mov	r4,r16
 80119c4:	d9400015 	stw	r5,0(sp)
 80119c8:	800ca700 	call	800ca70 <__sinit>
 80119cc:	d9400017 	ldw	r5,0(sp)
 80119d0:	003feb06 	br	8011980 <fputwc+0x2c>

080119d4 <_fstat_r>:
 80119d4:	defffd04 	addi	sp,sp,-12
 80119d8:	2805883a 	mov	r2,r5
 80119dc:	dc000015 	stw	r16,0(sp)
 80119e0:	040200b4 	movhi	r16,2050
 80119e4:	dc400115 	stw	r17,4(sp)
 80119e8:	842f7404 	addi	r16,r16,-16944
 80119ec:	2023883a 	mov	r17,r4
 80119f0:	300b883a 	mov	r5,r6
 80119f4:	1009883a 	mov	r4,r2
 80119f8:	dfc00215 	stw	ra,8(sp)
 80119fc:	80000015 	stw	zero,0(r16)
 8011a00:	801530c0 	call	801530c <fstat>
 8011a04:	00ffffc4 	movi	r3,-1
 8011a08:	10c00526 	beq	r2,r3,8011a20 <_fstat_r+0x4c>
 8011a0c:	dfc00217 	ldw	ra,8(sp)
 8011a10:	dc400117 	ldw	r17,4(sp)
 8011a14:	dc000017 	ldw	r16,0(sp)
 8011a18:	dec00304 	addi	sp,sp,12
 8011a1c:	f800283a 	ret
 8011a20:	80c00017 	ldw	r3,0(r16)
 8011a24:	183ff926 	beq	r3,zero,8011a0c <_fstat_r+0x38>
 8011a28:	88c00015 	stw	r3,0(r17)
 8011a2c:	003ff706 	br	8011a0c <_fstat_r+0x38>

08011a30 <_isatty_r>:
 8011a30:	defffd04 	addi	sp,sp,-12
 8011a34:	dc000015 	stw	r16,0(sp)
 8011a38:	040200b4 	movhi	r16,2050
 8011a3c:	dc400115 	stw	r17,4(sp)
 8011a40:	842f7404 	addi	r16,r16,-16944
 8011a44:	2023883a 	mov	r17,r4
 8011a48:	2809883a 	mov	r4,r5
 8011a4c:	dfc00215 	stw	ra,8(sp)
 8011a50:	80000015 	stw	zero,0(r16)
 8011a54:	80155f40 	call	80155f4 <isatty>
 8011a58:	00ffffc4 	movi	r3,-1
 8011a5c:	10c00526 	beq	r2,r3,8011a74 <_isatty_r+0x44>
 8011a60:	dfc00217 	ldw	ra,8(sp)
 8011a64:	dc400117 	ldw	r17,4(sp)
 8011a68:	dc000017 	ldw	r16,0(sp)
 8011a6c:	dec00304 	addi	sp,sp,12
 8011a70:	f800283a 	ret
 8011a74:	80c00017 	ldw	r3,0(r16)
 8011a78:	183ff926 	beq	r3,zero,8011a60 <_isatty_r+0x30>
 8011a7c:	88c00015 	stw	r3,0(r17)
 8011a80:	003ff706 	br	8011a60 <_isatty_r+0x30>

08011a84 <_lseek_r>:
 8011a84:	defffd04 	addi	sp,sp,-12
 8011a88:	2805883a 	mov	r2,r5
 8011a8c:	dc000015 	stw	r16,0(sp)
 8011a90:	040200b4 	movhi	r16,2050
 8011a94:	dc400115 	stw	r17,4(sp)
 8011a98:	300b883a 	mov	r5,r6
 8011a9c:	842f7404 	addi	r16,r16,-16944
 8011aa0:	2023883a 	mov	r17,r4
 8011aa4:	380d883a 	mov	r6,r7
 8011aa8:	1009883a 	mov	r4,r2
 8011aac:	dfc00215 	stw	ra,8(sp)
 8011ab0:	80000015 	stw	zero,0(r16)
 8011ab4:	80157c80 	call	80157c8 <lseek>
 8011ab8:	00ffffc4 	movi	r3,-1
 8011abc:	10c00526 	beq	r2,r3,8011ad4 <_lseek_r+0x50>
 8011ac0:	dfc00217 	ldw	ra,8(sp)
 8011ac4:	dc400117 	ldw	r17,4(sp)
 8011ac8:	dc000017 	ldw	r16,0(sp)
 8011acc:	dec00304 	addi	sp,sp,12
 8011ad0:	f800283a 	ret
 8011ad4:	80c00017 	ldw	r3,0(r16)
 8011ad8:	183ff926 	beq	r3,zero,8011ac0 <_lseek_r+0x3c>
 8011adc:	88c00015 	stw	r3,0(r17)
 8011ae0:	003ff706 	br	8011ac0 <_lseek_r+0x3c>

08011ae4 <_read_r>:
 8011ae4:	defffd04 	addi	sp,sp,-12
 8011ae8:	2805883a 	mov	r2,r5
 8011aec:	dc000015 	stw	r16,0(sp)
 8011af0:	040200b4 	movhi	r16,2050
 8011af4:	dc400115 	stw	r17,4(sp)
 8011af8:	300b883a 	mov	r5,r6
 8011afc:	842f7404 	addi	r16,r16,-16944
 8011b00:	2023883a 	mov	r17,r4
 8011b04:	380d883a 	mov	r6,r7
 8011b08:	1009883a 	mov	r4,r2
 8011b0c:	dfc00215 	stw	ra,8(sp)
 8011b10:	80000015 	stw	zero,0(r16)
 8011b14:	80159a40 	call	80159a4 <read>
 8011b18:	00ffffc4 	movi	r3,-1
 8011b1c:	10c00526 	beq	r2,r3,8011b34 <_read_r+0x50>
 8011b20:	dfc00217 	ldw	ra,8(sp)
 8011b24:	dc400117 	ldw	r17,4(sp)
 8011b28:	dc000017 	ldw	r16,0(sp)
 8011b2c:	dec00304 	addi	sp,sp,12
 8011b30:	f800283a 	ret
 8011b34:	80c00017 	ldw	r3,0(r16)
 8011b38:	183ff926 	beq	r3,zero,8011b20 <_read_r+0x3c>
 8011b3c:	88c00015 	stw	r3,0(r17)
 8011b40:	003ff706 	br	8011b20 <_read_r+0x3c>

08011b44 <_wcrtomb_r>:
 8011b44:	defff604 	addi	sp,sp,-40
 8011b48:	008200b4 	movhi	r2,2050
 8011b4c:	dc800815 	stw	r18,32(sp)
 8011b50:	dc400715 	stw	r17,28(sp)
 8011b54:	dc000615 	stw	r16,24(sp)
 8011b58:	10a85c04 	addi	r2,r2,-24208
 8011b5c:	dfc00915 	stw	ra,36(sp)
 8011b60:	2021883a 	mov	r16,r4
 8011b64:	3823883a 	mov	r17,r7
 8011b68:	14800017 	ldw	r18,0(r2)
 8011b6c:	28001426 	beq	r5,zero,8011bc0 <_wcrtomb_r+0x7c>
 8011b70:	d9400415 	stw	r5,16(sp)
 8011b74:	d9800515 	stw	r6,20(sp)
 8011b78:	800d61c0 	call	800d61c <__locale_charset>
 8011b7c:	d9800517 	ldw	r6,20(sp)
 8011b80:	d9400417 	ldw	r5,16(sp)
 8011b84:	100f883a 	mov	r7,r2
 8011b88:	dc400015 	stw	r17,0(sp)
 8011b8c:	8009883a 	mov	r4,r16
 8011b90:	903ee83a 	callr	r18
 8011b94:	00ffffc4 	movi	r3,-1
 8011b98:	10c0031e 	bne	r2,r3,8011ba8 <_wcrtomb_r+0x64>
 8011b9c:	88000015 	stw	zero,0(r17)
 8011ba0:	00c02284 	movi	r3,138
 8011ba4:	80c00015 	stw	r3,0(r16)
 8011ba8:	dfc00917 	ldw	ra,36(sp)
 8011bac:	dc800817 	ldw	r18,32(sp)
 8011bb0:	dc400717 	ldw	r17,28(sp)
 8011bb4:	dc000617 	ldw	r16,24(sp)
 8011bb8:	dec00a04 	addi	sp,sp,40
 8011bbc:	f800283a 	ret
 8011bc0:	800d61c0 	call	800d61c <__locale_charset>
 8011bc4:	100f883a 	mov	r7,r2
 8011bc8:	dc400015 	stw	r17,0(sp)
 8011bcc:	000d883a 	mov	r6,zero
 8011bd0:	d9400104 	addi	r5,sp,4
 8011bd4:	8009883a 	mov	r4,r16
 8011bd8:	903ee83a 	callr	r18
 8011bdc:	003fed06 	br	8011b94 <_wcrtomb_r+0x50>

08011be0 <wcrtomb>:
 8011be0:	defff604 	addi	sp,sp,-40
 8011be4:	008200b4 	movhi	r2,2050
 8011be8:	dc800615 	stw	r18,24(sp)
 8011bec:	dc400515 	stw	r17,20(sp)
 8011bf0:	10a85804 	addi	r2,r2,-24224
 8011bf4:	dfc00915 	stw	ra,36(sp)
 8011bf8:	dd000815 	stw	r20,32(sp)
 8011bfc:	dcc00715 	stw	r19,28(sp)
 8011c00:	dc000415 	stw	r16,16(sp)
 8011c04:	3025883a 	mov	r18,r6
 8011c08:	14400017 	ldw	r17,0(r2)
 8011c0c:	20001926 	beq	r4,zero,8011c74 <wcrtomb+0x94>
 8011c10:	008200b4 	movhi	r2,2050
 8011c14:	10a85c04 	addi	r2,r2,-24208
 8011c18:	15000017 	ldw	r20,0(r2)
 8011c1c:	2021883a 	mov	r16,r4
 8011c20:	2827883a 	mov	r19,r5
 8011c24:	800d61c0 	call	800d61c <__locale_charset>
 8011c28:	100f883a 	mov	r7,r2
 8011c2c:	dc800015 	stw	r18,0(sp)
 8011c30:	980d883a 	mov	r6,r19
 8011c34:	800b883a 	mov	r5,r16
 8011c38:	8809883a 	mov	r4,r17
 8011c3c:	a03ee83a 	callr	r20
 8011c40:	00ffffc4 	movi	r3,-1
 8011c44:	10c0031e 	bne	r2,r3,8011c54 <wcrtomb+0x74>
 8011c48:	90000015 	stw	zero,0(r18)
 8011c4c:	00c02284 	movi	r3,138
 8011c50:	88c00015 	stw	r3,0(r17)
 8011c54:	dfc00917 	ldw	ra,36(sp)
 8011c58:	dd000817 	ldw	r20,32(sp)
 8011c5c:	dcc00717 	ldw	r19,28(sp)
 8011c60:	dc800617 	ldw	r18,24(sp)
 8011c64:	dc400517 	ldw	r17,20(sp)
 8011c68:	dc000417 	ldw	r16,16(sp)
 8011c6c:	dec00a04 	addi	sp,sp,40
 8011c70:	f800283a 	ret
 8011c74:	008200b4 	movhi	r2,2050
 8011c78:	10a85c04 	addi	r2,r2,-24208
 8011c7c:	14000017 	ldw	r16,0(r2)
 8011c80:	800d61c0 	call	800d61c <__locale_charset>
 8011c84:	100f883a 	mov	r7,r2
 8011c88:	dc800015 	stw	r18,0(sp)
 8011c8c:	000d883a 	mov	r6,zero
 8011c90:	d9400104 	addi	r5,sp,4
 8011c94:	8809883a 	mov	r4,r17
 8011c98:	803ee83a 	callr	r16
 8011c9c:	003fe806 	br	8011c40 <wcrtomb+0x60>

08011ca0 <__ascii_wctomb>:
 8011ca0:	28000526 	beq	r5,zero,8011cb8 <__ascii_wctomb+0x18>
 8011ca4:	00803fc4 	movi	r2,255
 8011ca8:	11800536 	bltu	r2,r6,8011cc0 <__ascii_wctomb+0x20>
 8011cac:	29800005 	stb	r6,0(r5)
 8011cb0:	00800044 	movi	r2,1
 8011cb4:	f800283a 	ret
 8011cb8:	0005883a 	mov	r2,zero
 8011cbc:	f800283a 	ret
 8011cc0:	00802284 	movi	r2,138
 8011cc4:	20800015 	stw	r2,0(r4)
 8011cc8:	00bfffc4 	movi	r2,-1
 8011ccc:	f800283a 	ret

08011cd0 <_wctomb_r>:
 8011cd0:	008200b4 	movhi	r2,2050
 8011cd4:	defff904 	addi	sp,sp,-28
 8011cd8:	10a85c04 	addi	r2,r2,-24208
 8011cdc:	dfc00615 	stw	ra,24(sp)
 8011ce0:	dc400515 	stw	r17,20(sp)
 8011ce4:	dc000415 	stw	r16,16(sp)
 8011ce8:	3823883a 	mov	r17,r7
 8011cec:	14000017 	ldw	r16,0(r2)
 8011cf0:	d9000115 	stw	r4,4(sp)
 8011cf4:	d9400215 	stw	r5,8(sp)
 8011cf8:	d9800315 	stw	r6,12(sp)
 8011cfc:	800d61c0 	call	800d61c <__locale_charset>
 8011d00:	d9800317 	ldw	r6,12(sp)
 8011d04:	d9400217 	ldw	r5,8(sp)
 8011d08:	d9000117 	ldw	r4,4(sp)
 8011d0c:	100f883a 	mov	r7,r2
 8011d10:	dc400015 	stw	r17,0(sp)
 8011d14:	803ee83a 	callr	r16
 8011d18:	dfc00617 	ldw	ra,24(sp)
 8011d1c:	dc400517 	ldw	r17,20(sp)
 8011d20:	dc000417 	ldw	r16,16(sp)
 8011d24:	dec00704 	addi	sp,sp,28
 8011d28:	f800283a 	ret

08011d2c <__udivdi3>:
 8011d2c:	defff404 	addi	sp,sp,-48
 8011d30:	dcc00515 	stw	r19,20(sp)
 8011d34:	dc000215 	stw	r16,8(sp)
 8011d38:	dfc00b15 	stw	ra,44(sp)
 8011d3c:	df000a15 	stw	fp,40(sp)
 8011d40:	ddc00915 	stw	r23,36(sp)
 8011d44:	dd800815 	stw	r22,32(sp)
 8011d48:	dd400715 	stw	r21,28(sp)
 8011d4c:	dd000615 	stw	r20,24(sp)
 8011d50:	dc800415 	stw	r18,16(sp)
 8011d54:	dc400315 	stw	r17,12(sp)
 8011d58:	2027883a 	mov	r19,r4
 8011d5c:	2821883a 	mov	r16,r5
 8011d60:	3800461e 	bne	r7,zero,8011e7c <__udivdi3+0x150>
 8011d64:	3023883a 	mov	r17,r6
 8011d68:	2025883a 	mov	r18,r4
 8011d6c:	2980572e 	bgeu	r5,r6,8011ecc <__udivdi3+0x1a0>
 8011d70:	00bfffd4 	movui	r2,65535
 8011d74:	282d883a 	mov	r22,r5
 8011d78:	1180b236 	bltu	r2,r6,8012044 <__udivdi3+0x318>
 8011d7c:	00803fc4 	movi	r2,255
 8011d80:	1185803a 	cmpltu	r2,r2,r6
 8011d84:	100490fa 	slli	r2,r2,3
 8011d88:	3086d83a 	srl	r3,r6,r2
 8011d8c:	010200b4 	movhi	r4,2050
 8011d90:	21213c04 	addi	r4,r4,-31504
 8011d94:	20c7883a 	add	r3,r4,r3
 8011d98:	18c00003 	ldbu	r3,0(r3)
 8011d9c:	1885883a 	add	r2,r3,r2
 8011da0:	00c00804 	movi	r3,32
 8011da4:	1887c83a 	sub	r3,r3,r2
 8011da8:	18000526 	beq	r3,zero,8011dc0 <__udivdi3+0x94>
 8011dac:	80e0983a 	sll	r16,r16,r3
 8011db0:	9884d83a 	srl	r2,r19,r2
 8011db4:	30e2983a 	sll	r17,r6,r3
 8011db8:	98e4983a 	sll	r18,r19,r3
 8011dbc:	142cb03a 	or	r22,r2,r16
 8011dc0:	882ad43a 	srli	r21,r17,16
 8011dc4:	b009883a 	mov	r4,r22
 8011dc8:	8d3fffcc 	andi	r20,r17,65535
 8011dcc:	a80b883a 	mov	r5,r21
 8011dd0:	8007de80 	call	8007de8 <__umodsi3>
 8011dd4:	b009883a 	mov	r4,r22
 8011dd8:	a80b883a 	mov	r5,r21
 8011ddc:	1027883a 	mov	r19,r2
 8011de0:	8007d840 	call	8007d84 <__udivsi3>
 8011de4:	100b883a 	mov	r5,r2
 8011de8:	a009883a 	mov	r4,r20
 8011dec:	102d883a 	mov	r22,r2
 8011df0:	8007e400 	call	8007e40 <__mulsi3>
 8011df4:	9826943a 	slli	r19,r19,16
 8011df8:	9006d43a 	srli	r3,r18,16
 8011dfc:	1cc6b03a 	or	r3,r3,r19
 8011e00:	1880052e 	bgeu	r3,r2,8011e18 <__udivdi3+0xec>
 8011e04:	1c47883a 	add	r3,r3,r17
 8011e08:	b13fffc4 	addi	r4,r22,-1
 8011e0c:	1c400136 	bltu	r3,r17,8011e14 <__udivdi3+0xe8>
 8011e10:	18814236 	bltu	r3,r2,801231c <__udivdi3+0x5f0>
 8011e14:	202d883a 	mov	r22,r4
 8011e18:	18a1c83a 	sub	r16,r3,r2
 8011e1c:	8009883a 	mov	r4,r16
 8011e20:	a80b883a 	mov	r5,r21
 8011e24:	8007de80 	call	8007de8 <__umodsi3>
 8011e28:	1027883a 	mov	r19,r2
 8011e2c:	8009883a 	mov	r4,r16
 8011e30:	a80b883a 	mov	r5,r21
 8011e34:	9826943a 	slli	r19,r19,16
 8011e38:	8007d840 	call	8007d84 <__udivsi3>
 8011e3c:	100b883a 	mov	r5,r2
 8011e40:	a009883a 	mov	r4,r20
 8011e44:	94bfffcc 	andi	r18,r18,65535
 8011e48:	1021883a 	mov	r16,r2
 8011e4c:	94e4b03a 	or	r18,r18,r19
 8011e50:	8007e400 	call	8007e40 <__mulsi3>
 8011e54:	9080052e 	bgeu	r18,r2,8011e6c <__udivdi3+0x140>
 8011e58:	8ca5883a 	add	r18,r17,r18
 8011e5c:	80ffffc4 	addi	r3,r16,-1
 8011e60:	94410c36 	bltu	r18,r17,8012294 <__udivdi3+0x568>
 8011e64:	90810b2e 	bgeu	r18,r2,8012294 <__udivdi3+0x568>
 8011e68:	843fff84 	addi	r16,r16,-2
 8011e6c:	b004943a 	slli	r2,r22,16
 8011e70:	0007883a 	mov	r3,zero
 8011e74:	1404b03a 	or	r2,r2,r16
 8011e78:	00005e06 	br	8011ff4 <__udivdi3+0x2c8>
 8011e7c:	29c05b36 	bltu	r5,r7,8011fec <__udivdi3+0x2c0>
 8011e80:	00bfffd4 	movui	r2,65535
 8011e84:	11c0672e 	bgeu	r2,r7,8012024 <__udivdi3+0x2f8>
 8011e88:	00804034 	movhi	r2,256
 8011e8c:	10bfffc4 	addi	r2,r2,-1
 8011e90:	11c10a36 	bltu	r2,r7,80122bc <__udivdi3+0x590>
 8011e94:	00800404 	movi	r2,16
 8011e98:	3886d83a 	srl	r3,r7,r2
 8011e9c:	010200b4 	movhi	r4,2050
 8011ea0:	21213c04 	addi	r4,r4,-31504
 8011ea4:	20c7883a 	add	r3,r4,r3
 8011ea8:	18c00003 	ldbu	r3,0(r3)
 8011eac:	05c00804 	movi	r23,32
 8011eb0:	1885883a 	add	r2,r3,r2
 8011eb4:	b8afc83a 	sub	r23,r23,r2
 8011eb8:	b800671e 	bne	r23,zero,8012058 <__udivdi3+0x32c>
 8011ebc:	3c010536 	bltu	r7,r16,80122d4 <__udivdi3+0x5a8>
 8011ec0:	9985403a 	cmpgeu	r2,r19,r6
 8011ec4:	0007883a 	mov	r3,zero
 8011ec8:	00004a06 	br	8011ff4 <__udivdi3+0x2c8>
 8011ecc:	3000041e 	bne	r6,zero,8011ee0 <__udivdi3+0x1b4>
 8011ed0:	000b883a 	mov	r5,zero
 8011ed4:	01000044 	movi	r4,1
 8011ed8:	8007d840 	call	8007d84 <__udivsi3>
 8011edc:	1023883a 	mov	r17,r2
 8011ee0:	00bfffd4 	movui	r2,65535
 8011ee4:	1440532e 	bgeu	r2,r17,8012034 <__udivdi3+0x308>
 8011ee8:	00804034 	movhi	r2,256
 8011eec:	10bfffc4 	addi	r2,r2,-1
 8011ef0:	1440f436 	bltu	r2,r17,80122c4 <__udivdi3+0x598>
 8011ef4:	00800404 	movi	r2,16
 8011ef8:	8886d83a 	srl	r3,r17,r2
 8011efc:	010200b4 	movhi	r4,2050
 8011f00:	21213c04 	addi	r4,r4,-31504
 8011f04:	20c7883a 	add	r3,r4,r3
 8011f08:	18c00003 	ldbu	r3,0(r3)
 8011f0c:	1885883a 	add	r2,r3,r2
 8011f10:	00c00804 	movi	r3,32
 8011f14:	1887c83a 	sub	r3,r3,r2
 8011f18:	1800a51e 	bne	r3,zero,80121b0 <__udivdi3+0x484>
 8011f1c:	882ad43a 	srli	r21,r17,16
 8011f20:	8461c83a 	sub	r16,r16,r17
 8011f24:	8d3fffcc 	andi	r20,r17,65535
 8011f28:	00c00044 	movi	r3,1
 8011f2c:	a80b883a 	mov	r5,r21
 8011f30:	8009883a 	mov	r4,r16
 8011f34:	d8c00115 	stw	r3,4(sp)
 8011f38:	8007de80 	call	8007de8 <__umodsi3>
 8011f3c:	a80b883a 	mov	r5,r21
 8011f40:	8009883a 	mov	r4,r16
 8011f44:	1027883a 	mov	r19,r2
 8011f48:	8007d840 	call	8007d84 <__udivsi3>
 8011f4c:	a00b883a 	mov	r5,r20
 8011f50:	1009883a 	mov	r4,r2
 8011f54:	102d883a 	mov	r22,r2
 8011f58:	8007e400 	call	8007e40 <__mulsi3>
 8011f5c:	9826943a 	slli	r19,r19,16
 8011f60:	900ed43a 	srli	r7,r18,16
 8011f64:	d8c00117 	ldw	r3,4(sp)
 8011f68:	3cceb03a 	or	r7,r7,r19
 8011f6c:	3880052e 	bgeu	r7,r2,8011f84 <__udivdi3+0x258>
 8011f70:	3c4f883a 	add	r7,r7,r17
 8011f74:	b13fffc4 	addi	r4,r22,-1
 8011f78:	3c400136 	bltu	r7,r17,8011f80 <__udivdi3+0x254>
 8011f7c:	3880e436 	bltu	r7,r2,8012310 <__udivdi3+0x5e4>
 8011f80:	202d883a 	mov	r22,r4
 8011f84:	38a1c83a 	sub	r16,r7,r2
 8011f88:	8009883a 	mov	r4,r16
 8011f8c:	a80b883a 	mov	r5,r21
 8011f90:	d8c00115 	stw	r3,4(sp)
 8011f94:	8007de80 	call	8007de8 <__umodsi3>
 8011f98:	1027883a 	mov	r19,r2
 8011f9c:	8009883a 	mov	r4,r16
 8011fa0:	a80b883a 	mov	r5,r21
 8011fa4:	9826943a 	slli	r19,r19,16
 8011fa8:	8007d840 	call	8007d84 <__udivsi3>
 8011fac:	a00b883a 	mov	r5,r20
 8011fb0:	1009883a 	mov	r4,r2
 8011fb4:	94bfffcc 	andi	r18,r18,65535
 8011fb8:	1021883a 	mov	r16,r2
 8011fbc:	94e4b03a 	or	r18,r18,r19
 8011fc0:	8007e400 	call	8007e40 <__mulsi3>
 8011fc4:	d8c00117 	ldw	r3,4(sp)
 8011fc8:	9080052e 	bgeu	r18,r2,8011fe0 <__udivdi3+0x2b4>
 8011fcc:	8ca5883a 	add	r18,r17,r18
 8011fd0:	813fffc4 	addi	r4,r16,-1
 8011fd4:	9440ad36 	bltu	r18,r17,801228c <__udivdi3+0x560>
 8011fd8:	9080ac2e 	bgeu	r18,r2,801228c <__udivdi3+0x560>
 8011fdc:	843fff84 	addi	r16,r16,-2
 8011fe0:	b004943a 	slli	r2,r22,16
 8011fe4:	1404b03a 	or	r2,r2,r16
 8011fe8:	00000206 	br	8011ff4 <__udivdi3+0x2c8>
 8011fec:	0007883a 	mov	r3,zero
 8011ff0:	0005883a 	mov	r2,zero
 8011ff4:	dfc00b17 	ldw	ra,44(sp)
 8011ff8:	df000a17 	ldw	fp,40(sp)
 8011ffc:	ddc00917 	ldw	r23,36(sp)
 8012000:	dd800817 	ldw	r22,32(sp)
 8012004:	dd400717 	ldw	r21,28(sp)
 8012008:	dd000617 	ldw	r20,24(sp)
 801200c:	dcc00517 	ldw	r19,20(sp)
 8012010:	dc800417 	ldw	r18,16(sp)
 8012014:	dc400317 	ldw	r17,12(sp)
 8012018:	dc000217 	ldw	r16,8(sp)
 801201c:	dec00c04 	addi	sp,sp,48
 8012020:	f800283a 	ret
 8012024:	00803fc4 	movi	r2,255
 8012028:	11c5803a 	cmpltu	r2,r2,r7
 801202c:	100490fa 	slli	r2,r2,3
 8012030:	003f9906 	br	8011e98 <__udivdi3+0x16c>
 8012034:	00803fc4 	movi	r2,255
 8012038:	1445803a 	cmpltu	r2,r2,r17
 801203c:	100490fa 	slli	r2,r2,3
 8012040:	003fad06 	br	8011ef8 <__udivdi3+0x1cc>
 8012044:	00804034 	movhi	r2,256
 8012048:	10bfffc4 	addi	r2,r2,-1
 801204c:	11809f36 	bltu	r2,r6,80122cc <__udivdi3+0x5a0>
 8012050:	00800404 	movi	r2,16
 8012054:	003f4c06 	br	8011d88 <__udivdi3+0x5c>
 8012058:	3dce983a 	sll	r7,r7,r23
 801205c:	30b8d83a 	srl	fp,r6,r2
 8012060:	80a2d83a 	srl	r17,r16,r2
 8012064:	35cc983a 	sll	r6,r6,r23
 8012068:	3f38b03a 	or	fp,r7,fp
 801206c:	e024d43a 	srli	r18,fp,16
 8012070:	9884d83a 	srl	r2,r19,r2
 8012074:	85e0983a 	sll	r16,r16,r23
 8012078:	8809883a 	mov	r4,r17
 801207c:	900b883a 	mov	r5,r18
 8012080:	d9800015 	stw	r6,0(sp)
 8012084:	1420b03a 	or	r16,r2,r16
 8012088:	8007de80 	call	8007de8 <__umodsi3>
 801208c:	900b883a 	mov	r5,r18
 8012090:	8809883a 	mov	r4,r17
 8012094:	1029883a 	mov	r20,r2
 8012098:	e5bfffcc 	andi	r22,fp,65535
 801209c:	8007d840 	call	8007d84 <__udivsi3>
 80120a0:	100b883a 	mov	r5,r2
 80120a4:	b009883a 	mov	r4,r22
 80120a8:	102b883a 	mov	r21,r2
 80120ac:	8007e400 	call	8007e40 <__mulsi3>
 80120b0:	a028943a 	slli	r20,r20,16
 80120b4:	8006d43a 	srli	r3,r16,16
 80120b8:	1d06b03a 	or	r3,r3,r20
 80120bc:	1880042e 	bgeu	r3,r2,80120d0 <__udivdi3+0x3a4>
 80120c0:	1f07883a 	add	r3,r3,fp
 80120c4:	a93fffc4 	addi	r4,r21,-1
 80120c8:	1f00892e 	bgeu	r3,fp,80122f0 <__udivdi3+0x5c4>
 80120cc:	202b883a 	mov	r21,r4
 80120d0:	18a3c83a 	sub	r17,r3,r2
 80120d4:	8809883a 	mov	r4,r17
 80120d8:	900b883a 	mov	r5,r18
 80120dc:	8007de80 	call	8007de8 <__umodsi3>
 80120e0:	1029883a 	mov	r20,r2
 80120e4:	8809883a 	mov	r4,r17
 80120e8:	900b883a 	mov	r5,r18
 80120ec:	a028943a 	slli	r20,r20,16
 80120f0:	8007d840 	call	8007d84 <__udivsi3>
 80120f4:	100b883a 	mov	r5,r2
 80120f8:	b009883a 	mov	r4,r22
 80120fc:	843fffcc 	andi	r16,r16,65535
 8012100:	1023883a 	mov	r17,r2
 8012104:	8520b03a 	or	r16,r16,r20
 8012108:	8007e400 	call	8007e40 <__mulsi3>
 801210c:	8080042e 	bgeu	r16,r2,8012120 <__udivdi3+0x3f4>
 8012110:	8721883a 	add	r16,r16,fp
 8012114:	88ffffc4 	addi	r3,r17,-1
 8012118:	8700712e 	bgeu	r16,fp,80122e0 <__udivdi3+0x5b4>
 801211c:	1823883a 	mov	r17,r3
 8012120:	a80e943a 	slli	r7,r21,16
 8012124:	d8c00017 	ldw	r3,0(sp)
 8012128:	80a1c83a 	sub	r16,r16,r2
 801212c:	3c64b03a 	or	r18,r7,r17
 8012130:	1d3fffcc 	andi	r20,r3,65535
 8012134:	9022d43a 	srli	r17,r18,16
 8012138:	95bfffcc 	andi	r22,r18,65535
 801213c:	a00b883a 	mov	r5,r20
 8012140:	b009883a 	mov	r4,r22
 8012144:	182ad43a 	srli	r21,r3,16
 8012148:	8007e400 	call	8007e40 <__mulsi3>
 801214c:	a00b883a 	mov	r5,r20
 8012150:	8809883a 	mov	r4,r17
 8012154:	1039883a 	mov	fp,r2
 8012158:	8007e400 	call	8007e40 <__mulsi3>
 801215c:	8809883a 	mov	r4,r17
 8012160:	a80b883a 	mov	r5,r21
 8012164:	1029883a 	mov	r20,r2
 8012168:	8007e400 	call	8007e40 <__mulsi3>
 801216c:	a80b883a 	mov	r5,r21
 8012170:	b009883a 	mov	r4,r22
 8012174:	1023883a 	mov	r17,r2
 8012178:	8007e400 	call	8007e40 <__mulsi3>
 801217c:	e006d43a 	srli	r3,fp,16
 8012180:	1505883a 	add	r2,r2,r20
 8012184:	1887883a 	add	r3,r3,r2
 8012188:	1d00022e 	bgeu	r3,r20,8012194 <__udivdi3+0x468>
 801218c:	00800074 	movhi	r2,1
 8012190:	88a3883a 	add	r17,r17,r2
 8012194:	1804d43a 	srli	r2,r3,16
 8012198:	1463883a 	add	r17,r2,r17
 801219c:	84404436 	bltu	r16,r17,80122b0 <__udivdi3+0x584>
 80121a0:	84403e26 	beq	r16,r17,801229c <__udivdi3+0x570>
 80121a4:	9005883a 	mov	r2,r18
 80121a8:	0007883a 	mov	r3,zero
 80121ac:	003f9106 	br	8011ff4 <__udivdi3+0x2c8>
 80121b0:	88e2983a 	sll	r17,r17,r3
 80121b4:	80aed83a 	srl	r23,r16,r2
 80121b8:	80e0983a 	sll	r16,r16,r3
 80121bc:	882ad43a 	srli	r21,r17,16
 80121c0:	9884d83a 	srl	r2,r19,r2
 80121c4:	b809883a 	mov	r4,r23
 80121c8:	a80b883a 	mov	r5,r21
 80121cc:	98e4983a 	sll	r18,r19,r3
 80121d0:	142cb03a 	or	r22,r2,r16
 80121d4:	8007de80 	call	8007de8 <__umodsi3>
 80121d8:	b809883a 	mov	r4,r23
 80121dc:	a80b883a 	mov	r5,r21
 80121e0:	1027883a 	mov	r19,r2
 80121e4:	8d3fffcc 	andi	r20,r17,65535
 80121e8:	8007d840 	call	8007d84 <__udivsi3>
 80121ec:	a009883a 	mov	r4,r20
 80121f0:	100b883a 	mov	r5,r2
 80121f4:	102f883a 	mov	r23,r2
 80121f8:	8007e400 	call	8007e40 <__mulsi3>
 80121fc:	9826943a 	slli	r19,r19,16
 8012200:	b008d43a 	srli	r4,r22,16
 8012204:	24c8b03a 	or	r4,r4,r19
 8012208:	2080062e 	bgeu	r4,r2,8012224 <__udivdi3+0x4f8>
 801220c:	2449883a 	add	r4,r4,r17
 8012210:	b8ffffc4 	addi	r3,r23,-1
 8012214:	24403c36 	bltu	r4,r17,8012308 <__udivdi3+0x5dc>
 8012218:	20803b2e 	bgeu	r4,r2,8012308 <__udivdi3+0x5dc>
 801221c:	bdffff84 	addi	r23,r23,-2
 8012220:	2449883a 	add	r4,r4,r17
 8012224:	20a1c83a 	sub	r16,r4,r2
 8012228:	a80b883a 	mov	r5,r21
 801222c:	8009883a 	mov	r4,r16
 8012230:	8007de80 	call	8007de8 <__umodsi3>
 8012234:	a80b883a 	mov	r5,r21
 8012238:	8009883a 	mov	r4,r16
 801223c:	1027883a 	mov	r19,r2
 8012240:	8007d840 	call	8007d84 <__udivsi3>
 8012244:	a009883a 	mov	r4,r20
 8012248:	100b883a 	mov	r5,r2
 801224c:	9826943a 	slli	r19,r19,16
 8012250:	1039883a 	mov	fp,r2
 8012254:	8007e400 	call	8007e40 <__mulsi3>
 8012258:	b13fffcc 	andi	r4,r22,65535
 801225c:	24c8b03a 	or	r4,r4,r19
 8012260:	2080062e 	bgeu	r4,r2,801227c <__udivdi3+0x550>
 8012264:	2449883a 	add	r4,r4,r17
 8012268:	e0ffffc4 	addi	r3,fp,-1
 801226c:	24402436 	bltu	r4,r17,8012300 <__udivdi3+0x5d4>
 8012270:	2080232e 	bgeu	r4,r2,8012300 <__udivdi3+0x5d4>
 8012274:	e73fff84 	addi	fp,fp,-2
 8012278:	2449883a 	add	r4,r4,r17
 801227c:	b82e943a 	slli	r23,r23,16
 8012280:	20a1c83a 	sub	r16,r4,r2
 8012284:	bf06b03a 	or	r3,r23,fp
 8012288:	003f2806 	br	8011f2c <__udivdi3+0x200>
 801228c:	2021883a 	mov	r16,r4
 8012290:	003f5306 	br	8011fe0 <__udivdi3+0x2b4>
 8012294:	1821883a 	mov	r16,r3
 8012298:	003ef406 	br	8011e6c <__udivdi3+0x140>
 801229c:	1806943a 	slli	r3,r3,16
 80122a0:	9de6983a 	sll	r19,r19,r23
 80122a4:	e73fffcc 	andi	fp,fp,65535
 80122a8:	1f07883a 	add	r3,r3,fp
 80122ac:	98ffbd2e 	bgeu	r19,r3,80121a4 <__udivdi3+0x478>
 80122b0:	90bfffc4 	addi	r2,r18,-1
 80122b4:	0007883a 	mov	r3,zero
 80122b8:	003f4e06 	br	8011ff4 <__udivdi3+0x2c8>
 80122bc:	00800604 	movi	r2,24
 80122c0:	003ef506 	br	8011e98 <__udivdi3+0x16c>
 80122c4:	00800604 	movi	r2,24
 80122c8:	003f0b06 	br	8011ef8 <__udivdi3+0x1cc>
 80122cc:	00800604 	movi	r2,24
 80122d0:	003ead06 	br	8011d88 <__udivdi3+0x5c>
 80122d4:	0007883a 	mov	r3,zero
 80122d8:	00800044 	movi	r2,1
 80122dc:	003f4506 	br	8011ff4 <__udivdi3+0x2c8>
 80122e0:	80bf8e2e 	bgeu	r16,r2,801211c <__udivdi3+0x3f0>
 80122e4:	8c7fff84 	addi	r17,r17,-2
 80122e8:	8721883a 	add	r16,r16,fp
 80122ec:	003f8c06 	br	8012120 <__udivdi3+0x3f4>
 80122f0:	18bf762e 	bgeu	r3,r2,80120cc <__udivdi3+0x3a0>
 80122f4:	ad7fff84 	addi	r21,r21,-2
 80122f8:	1f07883a 	add	r3,r3,fp
 80122fc:	003f7406 	br	80120d0 <__udivdi3+0x3a4>
 8012300:	1839883a 	mov	fp,r3
 8012304:	003fdd06 	br	801227c <__udivdi3+0x550>
 8012308:	182f883a 	mov	r23,r3
 801230c:	003fc506 	br	8012224 <__udivdi3+0x4f8>
 8012310:	b5bfff84 	addi	r22,r22,-2
 8012314:	3c4f883a 	add	r7,r7,r17
 8012318:	003f1a06 	br	8011f84 <__udivdi3+0x258>
 801231c:	b5bfff84 	addi	r22,r22,-2
 8012320:	1c47883a 	add	r3,r3,r17
 8012324:	003ebc06 	br	8011e18 <__udivdi3+0xec>

08012328 <__umoddi3>:
 8012328:	defff304 	addi	sp,sp,-52
 801232c:	df000b15 	stw	fp,44(sp)
 8012330:	dc400415 	stw	r17,16(sp)
 8012334:	dc000315 	stw	r16,12(sp)
 8012338:	dfc00c15 	stw	ra,48(sp)
 801233c:	ddc00a15 	stw	r23,40(sp)
 8012340:	dd800915 	stw	r22,36(sp)
 8012344:	dd400815 	stw	r21,32(sp)
 8012348:	dd000715 	stw	r20,28(sp)
 801234c:	dcc00615 	stw	r19,24(sp)
 8012350:	dc800515 	stw	r18,20(sp)
 8012354:	2021883a 	mov	r16,r4
 8012358:	2823883a 	mov	r17,r5
 801235c:	2839883a 	mov	fp,r5
 8012360:	3800401e 	bne	r7,zero,8012464 <__umoddi3+0x13c>
 8012364:	3027883a 	mov	r19,r6
 8012368:	2029883a 	mov	r20,r4
 801236c:	2980552e 	bgeu	r5,r6,80124c4 <__umoddi3+0x19c>
 8012370:	00bfffd4 	movui	r2,65535
 8012374:	1180a236 	bltu	r2,r6,8012600 <__umoddi3+0x2d8>
 8012378:	01003fc4 	movi	r4,255
 801237c:	2189803a 	cmpltu	r4,r4,r6
 8012380:	200890fa 	slli	r4,r4,3
 8012384:	3104d83a 	srl	r2,r6,r4
 8012388:	00c200b4 	movhi	r3,2050
 801238c:	18e13c04 	addi	r3,r3,-31504
 8012390:	1885883a 	add	r2,r3,r2
 8012394:	10c00003 	ldbu	r3,0(r2)
 8012398:	00800804 	movi	r2,32
 801239c:	1909883a 	add	r4,r3,r4
 80123a0:	1125c83a 	sub	r18,r2,r4
 80123a4:	90000526 	beq	r18,zero,80123bc <__umoddi3+0x94>
 80123a8:	8ca2983a 	sll	r17,r17,r18
 80123ac:	8108d83a 	srl	r4,r16,r4
 80123b0:	34a6983a 	sll	r19,r6,r18
 80123b4:	84a8983a 	sll	r20,r16,r18
 80123b8:	2478b03a 	or	fp,r4,r17
 80123bc:	982cd43a 	srli	r22,r19,16
 80123c0:	e009883a 	mov	r4,fp
 80123c4:	9dffffcc 	andi	r23,r19,65535
 80123c8:	b00b883a 	mov	r5,r22
 80123cc:	8007de80 	call	8007de8 <__umodsi3>
 80123d0:	b00b883a 	mov	r5,r22
 80123d4:	e009883a 	mov	r4,fp
 80123d8:	102b883a 	mov	r21,r2
 80123dc:	8007d840 	call	8007d84 <__udivsi3>
 80123e0:	100b883a 	mov	r5,r2
 80123e4:	b809883a 	mov	r4,r23
 80123e8:	8007e400 	call	8007e40 <__mulsi3>
 80123ec:	a82a943a 	slli	r21,r21,16
 80123f0:	a006d43a 	srli	r3,r20,16
 80123f4:	1d46b03a 	or	r3,r3,r21
 80123f8:	1880032e 	bgeu	r3,r2,8012408 <__umoddi3+0xe0>
 80123fc:	1cc7883a 	add	r3,r3,r19
 8012400:	1cc00136 	bltu	r3,r19,8012408 <__umoddi3+0xe0>
 8012404:	18813136 	bltu	r3,r2,80128cc <__umoddi3+0x5a4>
 8012408:	18a1c83a 	sub	r16,r3,r2
 801240c:	b00b883a 	mov	r5,r22
 8012410:	8009883a 	mov	r4,r16
 8012414:	8007de80 	call	8007de8 <__umodsi3>
 8012418:	b00b883a 	mov	r5,r22
 801241c:	8009883a 	mov	r4,r16
 8012420:	1023883a 	mov	r17,r2
 8012424:	8007d840 	call	8007d84 <__udivsi3>
 8012428:	100b883a 	mov	r5,r2
 801242c:	b809883a 	mov	r4,r23
 8012430:	8822943a 	slli	r17,r17,16
 8012434:	8007e400 	call	8007e40 <__mulsi3>
 8012438:	a0ffffcc 	andi	r3,r20,65535
 801243c:	1c46b03a 	or	r3,r3,r17
 8012440:	1880042e 	bgeu	r3,r2,8012454 <__umoddi3+0x12c>
 8012444:	1cc7883a 	add	r3,r3,r19
 8012448:	1cc00236 	bltu	r3,r19,8012454 <__umoddi3+0x12c>
 801244c:	1880012e 	bgeu	r3,r2,8012454 <__umoddi3+0x12c>
 8012450:	1cc7883a 	add	r3,r3,r19
 8012454:	1885c83a 	sub	r2,r3,r2
 8012458:	1484d83a 	srl	r2,r2,r18
 801245c:	0007883a 	mov	r3,zero
 8012460:	00005306 	br	80125b0 <__umoddi3+0x288>
 8012464:	29c05036 	bltu	r5,r7,80125a8 <__umoddi3+0x280>
 8012468:	00bfffd4 	movui	r2,65535
 801246c:	11c05c2e 	bgeu	r2,r7,80125e0 <__umoddi3+0x2b8>
 8012470:	00804034 	movhi	r2,256
 8012474:	10bfffc4 	addi	r2,r2,-1
 8012478:	11c10636 	bltu	r2,r7,8012894 <__umoddi3+0x56c>
 801247c:	01000404 	movi	r4,16
 8012480:	3904d83a 	srl	r2,r7,r4
 8012484:	00c200b4 	movhi	r3,2050
 8012488:	18e13c04 	addi	r3,r3,-31504
 801248c:	1885883a 	add	r2,r3,r2
 8012490:	14c00003 	ldbu	r19,0(r2)
 8012494:	00c00804 	movi	r3,32
 8012498:	9927883a 	add	r19,r19,r4
 801249c:	1ce9c83a 	sub	r20,r3,r19
 80124a0:	a0005c1e 	bne	r20,zero,8012614 <__umoddi3+0x2ec>
 80124a4:	3c400136 	bltu	r7,r17,80124ac <__umoddi3+0x184>
 80124a8:	81810a36 	bltu	r16,r6,80128d4 <__umoddi3+0x5ac>
 80124ac:	8185c83a 	sub	r2,r16,r6
 80124b0:	89e3c83a 	sub	r17,r17,r7
 80124b4:	8089803a 	cmpltu	r4,r16,r2
 80124b8:	8939c83a 	sub	fp,r17,r4
 80124bc:	e007883a 	mov	r3,fp
 80124c0:	00003b06 	br	80125b0 <__umoddi3+0x288>
 80124c4:	3000041e 	bne	r6,zero,80124d8 <__umoddi3+0x1b0>
 80124c8:	000b883a 	mov	r5,zero
 80124cc:	01000044 	movi	r4,1
 80124d0:	8007d840 	call	8007d84 <__udivsi3>
 80124d4:	1027883a 	mov	r19,r2
 80124d8:	00bfffd4 	movui	r2,65535
 80124dc:	14c0442e 	bgeu	r2,r19,80125f0 <__umoddi3+0x2c8>
 80124e0:	00804034 	movhi	r2,256
 80124e4:	10bfffc4 	addi	r2,r2,-1
 80124e8:	14c0ec36 	bltu	r2,r19,801289c <__umoddi3+0x574>
 80124ec:	00800404 	movi	r2,16
 80124f0:	9886d83a 	srl	r3,r19,r2
 80124f4:	010200b4 	movhi	r4,2050
 80124f8:	21213c04 	addi	r4,r4,-31504
 80124fc:	20c7883a 	add	r3,r4,r3
 8012500:	18c00003 	ldbu	r3,0(r3)
 8012504:	1887883a 	add	r3,r3,r2
 8012508:	00800804 	movi	r2,32
 801250c:	10e5c83a 	sub	r18,r2,r3
 8012510:	9000ab1e 	bne	r18,zero,80127c0 <__umoddi3+0x498>
 8012514:	982cd43a 	srli	r22,r19,16
 8012518:	8ce3c83a 	sub	r17,r17,r19
 801251c:	9dffffcc 	andi	r23,r19,65535
 8012520:	b00b883a 	mov	r5,r22
 8012524:	8809883a 	mov	r4,r17
 8012528:	8007de80 	call	8007de8 <__umodsi3>
 801252c:	b00b883a 	mov	r5,r22
 8012530:	8809883a 	mov	r4,r17
 8012534:	102b883a 	mov	r21,r2
 8012538:	8007d840 	call	8007d84 <__udivsi3>
 801253c:	b80b883a 	mov	r5,r23
 8012540:	1009883a 	mov	r4,r2
 8012544:	8007e400 	call	8007e40 <__mulsi3>
 8012548:	a82a943a 	slli	r21,r21,16
 801254c:	a006d43a 	srli	r3,r20,16
 8012550:	1d46b03a 	or	r3,r3,r21
 8012554:	1880042e 	bgeu	r3,r2,8012568 <__umoddi3+0x240>
 8012558:	1cc7883a 	add	r3,r3,r19
 801255c:	1cc00236 	bltu	r3,r19,8012568 <__umoddi3+0x240>
 8012560:	1880012e 	bgeu	r3,r2,8012568 <__umoddi3+0x240>
 8012564:	1cc7883a 	add	r3,r3,r19
 8012568:	18a1c83a 	sub	r16,r3,r2
 801256c:	b00b883a 	mov	r5,r22
 8012570:	8009883a 	mov	r4,r16
 8012574:	8007de80 	call	8007de8 <__umodsi3>
 8012578:	1023883a 	mov	r17,r2
 801257c:	b00b883a 	mov	r5,r22
 8012580:	8009883a 	mov	r4,r16
 8012584:	8007d840 	call	8007d84 <__udivsi3>
 8012588:	8822943a 	slli	r17,r17,16
 801258c:	b80b883a 	mov	r5,r23
 8012590:	1009883a 	mov	r4,r2
 8012594:	8007e400 	call	8007e40 <__mulsi3>
 8012598:	a53fffcc 	andi	r20,r20,65535
 801259c:	a446b03a 	or	r3,r20,r17
 80125a0:	18bfac2e 	bgeu	r3,r2,8012454 <__umoddi3+0x12c>
 80125a4:	003fa706 	br	8012444 <__umoddi3+0x11c>
 80125a8:	2005883a 	mov	r2,r4
 80125ac:	2807883a 	mov	r3,r5
 80125b0:	dfc00c17 	ldw	ra,48(sp)
 80125b4:	df000b17 	ldw	fp,44(sp)
 80125b8:	ddc00a17 	ldw	r23,40(sp)
 80125bc:	dd800917 	ldw	r22,36(sp)
 80125c0:	dd400817 	ldw	r21,32(sp)
 80125c4:	dd000717 	ldw	r20,28(sp)
 80125c8:	dcc00617 	ldw	r19,24(sp)
 80125cc:	dc800517 	ldw	r18,20(sp)
 80125d0:	dc400417 	ldw	r17,16(sp)
 80125d4:	dc000317 	ldw	r16,12(sp)
 80125d8:	dec00d04 	addi	sp,sp,52
 80125dc:	f800283a 	ret
 80125e0:	04c03fc4 	movi	r19,255
 80125e4:	99c9803a 	cmpltu	r4,r19,r7
 80125e8:	200890fa 	slli	r4,r4,3
 80125ec:	003fa406 	br	8012480 <__umoddi3+0x158>
 80125f0:	00803fc4 	movi	r2,255
 80125f4:	14c5803a 	cmpltu	r2,r2,r19
 80125f8:	100490fa 	slli	r2,r2,3
 80125fc:	003fbc06 	br	80124f0 <__umoddi3+0x1c8>
 8012600:	00804034 	movhi	r2,256
 8012604:	10bfffc4 	addi	r2,r2,-1
 8012608:	1180a636 	bltu	r2,r6,80128a4 <__umoddi3+0x57c>
 801260c:	01000404 	movi	r4,16
 8012610:	003f5c06 	br	8012384 <__umoddi3+0x5c>
 8012614:	3d0e983a 	sll	r7,r7,r20
 8012618:	34ead83a 	srl	r21,r6,r19
 801261c:	8cc6d83a 	srl	r3,r17,r19
 8012620:	8d10983a 	sll	r8,r17,r20
 8012624:	3d6ab03a 	or	r21,r7,r21
 8012628:	a82cd43a 	srli	r22,r21,16
 801262c:	84e2d83a 	srl	r17,r16,r19
 8012630:	1809883a 	mov	r4,r3
 8012634:	b00b883a 	mov	r5,r22
 8012638:	8a22b03a 	or	r17,r17,r8
 801263c:	3524983a 	sll	r18,r6,r20
 8012640:	dc400015 	stw	r17,0(sp)
 8012644:	d8c00115 	stw	r3,4(sp)
 8012648:	8007de80 	call	8007de8 <__umodsi3>
 801264c:	d8c00117 	ldw	r3,4(sp)
 8012650:	b00b883a 	mov	r5,r22
 8012654:	1039883a 	mov	fp,r2
 8012658:	1809883a 	mov	r4,r3
 801265c:	8007d840 	call	8007d84 <__udivsi3>
 8012660:	adffffcc 	andi	r23,r21,65535
 8012664:	100b883a 	mov	r5,r2
 8012668:	b809883a 	mov	r4,r23
 801266c:	1023883a 	mov	r17,r2
 8012670:	8007e400 	call	8007e40 <__mulsi3>
 8012674:	d9400017 	ldw	r5,0(sp)
 8012678:	e008943a 	slli	r4,fp,16
 801267c:	8520983a 	sll	r16,r16,r20
 8012680:	2806d43a 	srli	r3,r5,16
 8012684:	1906b03a 	or	r3,r3,r4
 8012688:	1880042e 	bgeu	r3,r2,801269c <__umoddi3+0x374>
 801268c:	1d47883a 	add	r3,r3,r21
 8012690:	893fffc4 	addi	r4,r17,-1
 8012694:	1d40892e 	bgeu	r3,r21,80128bc <__umoddi3+0x594>
 8012698:	2023883a 	mov	r17,r4
 801269c:	18b9c83a 	sub	fp,r3,r2
 80126a0:	b00b883a 	mov	r5,r22
 80126a4:	e009883a 	mov	r4,fp
 80126a8:	8007de80 	call	8007de8 <__umodsi3>
 80126ac:	b00b883a 	mov	r5,r22
 80126b0:	e009883a 	mov	r4,fp
 80126b4:	d8800215 	stw	r2,8(sp)
 80126b8:	8007d840 	call	8007d84 <__udivsi3>
 80126bc:	100b883a 	mov	r5,r2
 80126c0:	b809883a 	mov	r4,r23
 80126c4:	102d883a 	mov	r22,r2
 80126c8:	8007e400 	call	8007e40 <__mulsi3>
 80126cc:	d9800217 	ldw	r6,8(sp)
 80126d0:	d8c00017 	ldw	r3,0(sp)
 80126d4:	300c943a 	slli	r6,r6,16
 80126d8:	1a3fffcc 	andi	r8,r3,65535
 80126dc:	4190b03a 	or	r8,r8,r6
 80126e0:	4080042e 	bgeu	r8,r2,80126f4 <__umoddi3+0x3cc>
 80126e4:	4551883a 	add	r8,r8,r21
 80126e8:	b0ffffc4 	addi	r3,r22,-1
 80126ec:	45406f2e 	bgeu	r8,r21,80128ac <__umoddi3+0x584>
 80126f0:	182d883a 	mov	r22,r3
 80126f4:	880e943a 	slli	r7,r17,16
 80126f8:	9006d43a 	srli	r3,r18,16
 80126fc:	91bfffcc 	andi	r6,r18,65535
 8012700:	3dacb03a 	or	r22,r7,r22
 8012704:	b02ed43a 	srli	r23,r22,16
 8012708:	b5bfffcc 	andi	r22,r22,65535
 801270c:	300b883a 	mov	r5,r6
 8012710:	b009883a 	mov	r4,r22
 8012714:	40a3c83a 	sub	r17,r8,r2
 8012718:	d8c00115 	stw	r3,4(sp)
 801271c:	d9800215 	stw	r6,8(sp)
 8012720:	8007e400 	call	8007e40 <__mulsi3>
 8012724:	d9800217 	ldw	r6,8(sp)
 8012728:	b809883a 	mov	r4,r23
 801272c:	1039883a 	mov	fp,r2
 8012730:	300b883a 	mov	r5,r6
 8012734:	8007e400 	call	8007e40 <__mulsi3>
 8012738:	d8c00117 	ldw	r3,4(sp)
 801273c:	b809883a 	mov	r4,r23
 8012740:	d8800215 	stw	r2,8(sp)
 8012744:	180b883a 	mov	r5,r3
 8012748:	8007e400 	call	8007e40 <__mulsi3>
 801274c:	d8c00117 	ldw	r3,4(sp)
 8012750:	b009883a 	mov	r4,r22
 8012754:	102f883a 	mov	r23,r2
 8012758:	180b883a 	mov	r5,r3
 801275c:	8007e400 	call	8007e40 <__mulsi3>
 8012760:	d9800217 	ldw	r6,8(sp)
 8012764:	e006d43a 	srli	r3,fp,16
 8012768:	1185883a 	add	r2,r2,r6
 801276c:	1885883a 	add	r2,r3,r2
 8012770:	1180022e 	bgeu	r2,r6,801277c <__umoddi3+0x454>
 8012774:	00c00074 	movhi	r3,1
 8012778:	b8ef883a 	add	r23,r23,r3
 801277c:	1006d43a 	srli	r3,r2,16
 8012780:	1004943a 	slli	r2,r2,16
 8012784:	e73fffcc 	andi	fp,fp,65535
 8012788:	1dc7883a 	add	r3,r3,r23
 801278c:	1739883a 	add	fp,r2,fp
 8012790:	88c03a36 	bltu	r17,r3,801287c <__umoddi3+0x554>
 8012794:	88c05126 	beq	r17,r3,80128dc <__umoddi3+0x5b4>
 8012798:	88c9c83a 	sub	r4,r17,r3
 801279c:	e00f883a 	mov	r7,fp
 80127a0:	81cfc83a 	sub	r7,r16,r7
 80127a4:	81c7803a 	cmpltu	r3,r16,r7
 80127a8:	20c7c83a 	sub	r3,r4,r3
 80127ac:	1cc4983a 	sll	r2,r3,r19
 80127b0:	3d0ed83a 	srl	r7,r7,r20
 80127b4:	1d06d83a 	srl	r3,r3,r20
 80127b8:	11c4b03a 	or	r2,r2,r7
 80127bc:	003f7c06 	br	80125b0 <__umoddi3+0x288>
 80127c0:	9ca6983a 	sll	r19,r19,r18
 80127c4:	88f8d83a 	srl	fp,r17,r3
 80127c8:	80c4d83a 	srl	r2,r16,r3
 80127cc:	982cd43a 	srli	r22,r19,16
 80127d0:	8ca2983a 	sll	r17,r17,r18
 80127d4:	e009883a 	mov	r4,fp
 80127d8:	b00b883a 	mov	r5,r22
 80127dc:	146ab03a 	or	r21,r2,r17
 80127e0:	8007de80 	call	8007de8 <__umodsi3>
 80127e4:	b00b883a 	mov	r5,r22
 80127e8:	e009883a 	mov	r4,fp
 80127ec:	1029883a 	mov	r20,r2
 80127f0:	9dffffcc 	andi	r23,r19,65535
 80127f4:	8007d840 	call	8007d84 <__udivsi3>
 80127f8:	b809883a 	mov	r4,r23
 80127fc:	100b883a 	mov	r5,r2
 8012800:	8007e400 	call	8007e40 <__mulsi3>
 8012804:	a008943a 	slli	r4,r20,16
 8012808:	a806d43a 	srli	r3,r21,16
 801280c:	84a8983a 	sll	r20,r16,r18
 8012810:	1906b03a 	or	r3,r3,r4
 8012814:	1880042e 	bgeu	r3,r2,8012828 <__umoddi3+0x500>
 8012818:	1cc7883a 	add	r3,r3,r19
 801281c:	1cc00236 	bltu	r3,r19,8012828 <__umoddi3+0x500>
 8012820:	1880012e 	bgeu	r3,r2,8012828 <__umoddi3+0x500>
 8012824:	1cc7883a 	add	r3,r3,r19
 8012828:	18a3c83a 	sub	r17,r3,r2
 801282c:	b00b883a 	mov	r5,r22
 8012830:	8809883a 	mov	r4,r17
 8012834:	8007de80 	call	8007de8 <__umodsi3>
 8012838:	b00b883a 	mov	r5,r22
 801283c:	8809883a 	mov	r4,r17
 8012840:	1021883a 	mov	r16,r2
 8012844:	8007d840 	call	8007d84 <__udivsi3>
 8012848:	100b883a 	mov	r5,r2
 801284c:	b809883a 	mov	r4,r23
 8012850:	8020943a 	slli	r16,r16,16
 8012854:	8007e400 	call	8007e40 <__mulsi3>
 8012858:	a8ffffcc 	andi	r3,r21,65535
 801285c:	1c06b03a 	or	r3,r3,r16
 8012860:	1880042e 	bgeu	r3,r2,8012874 <__umoddi3+0x54c>
 8012864:	1cc7883a 	add	r3,r3,r19
 8012868:	1cc00236 	bltu	r3,r19,8012874 <__umoddi3+0x54c>
 801286c:	1880012e 	bgeu	r3,r2,8012874 <__umoddi3+0x54c>
 8012870:	1cc7883a 	add	r3,r3,r19
 8012874:	18a3c83a 	sub	r17,r3,r2
 8012878:	003f2906 	br	8012520 <__umoddi3+0x1f8>
 801287c:	e48fc83a 	sub	r7,fp,r18
 8012880:	1d49c83a 	sub	r4,r3,r21
 8012884:	e1f9803a 	cmpltu	fp,fp,r7
 8012888:	2739c83a 	sub	fp,r4,fp
 801288c:	8f09c83a 	sub	r4,r17,fp
 8012890:	003fc306 	br	80127a0 <__umoddi3+0x478>
 8012894:	01000604 	movi	r4,24
 8012898:	003ef906 	br	8012480 <__umoddi3+0x158>
 801289c:	00800604 	movi	r2,24
 80128a0:	003f1306 	br	80124f0 <__umoddi3+0x1c8>
 80128a4:	01000604 	movi	r4,24
 80128a8:	003eb606 	br	8012384 <__umoddi3+0x5c>
 80128ac:	40bf902e 	bgeu	r8,r2,80126f0 <__umoddi3+0x3c8>
 80128b0:	b5bfff84 	addi	r22,r22,-2
 80128b4:	4551883a 	add	r8,r8,r21
 80128b8:	003f8e06 	br	80126f4 <__umoddi3+0x3cc>
 80128bc:	18bf762e 	bgeu	r3,r2,8012698 <__umoddi3+0x370>
 80128c0:	8c7fff84 	addi	r17,r17,-2
 80128c4:	1d47883a 	add	r3,r3,r21
 80128c8:	003f7406 	br	801269c <__umoddi3+0x374>
 80128cc:	1cc7883a 	add	r3,r3,r19
 80128d0:	003ecd06 	br	8012408 <__umoddi3+0xe0>
 80128d4:	8005883a 	mov	r2,r16
 80128d8:	003ef806 	br	80124bc <__umoddi3+0x194>
 80128dc:	873fe736 	bltu	r16,fp,801287c <__umoddi3+0x554>
 80128e0:	e00f883a 	mov	r7,fp
 80128e4:	0009883a 	mov	r4,zero
 80128e8:	003fad06 	br	80127a0 <__umoddi3+0x478>

080128ec <__adddf3>:
 80128ec:	02c00434 	movhi	r11,16
 80128f0:	5affffc4 	addi	r11,r11,-1
 80128f4:	2806d7fa 	srli	r3,r5,31
 80128f8:	2ad4703a 	and	r10,r5,r11
 80128fc:	3ad2703a 	and	r9,r7,r11
 8012900:	3804d53a 	srli	r2,r7,20
 8012904:	3018d77a 	srli	r12,r6,29
 8012908:	280ad53a 	srli	r5,r5,20
 801290c:	501490fa 	slli	r10,r10,3
 8012910:	2010d77a 	srli	r8,r4,29
 8012914:	481290fa 	slli	r9,r9,3
 8012918:	380ed7fa 	srli	r7,r7,31
 801291c:	defffb04 	addi	sp,sp,-20
 8012920:	dc800215 	stw	r18,8(sp)
 8012924:	dc400115 	stw	r17,4(sp)
 8012928:	dc000015 	stw	r16,0(sp)
 801292c:	dfc00415 	stw	ra,16(sp)
 8012930:	dcc00315 	stw	r19,12(sp)
 8012934:	1c803fcc 	andi	r18,r3,255
 8012938:	2c01ffcc 	andi	r16,r5,2047
 801293c:	5210b03a 	or	r8,r10,r8
 8012940:	202290fa 	slli	r17,r4,3
 8012944:	1081ffcc 	andi	r2,r2,2047
 8012948:	4b12b03a 	or	r9,r9,r12
 801294c:	300c90fa 	slli	r6,r6,3
 8012950:	91c07526 	beq	r18,r7,8012b28 <__adddf3+0x23c>
 8012954:	8087c83a 	sub	r3,r16,r2
 8012958:	00c0ab0e 	bge	zero,r3,8012c08 <__adddf3+0x31c>
 801295c:	10002a1e 	bne	r2,zero,8012a08 <__adddf3+0x11c>
 8012960:	4984b03a 	or	r2,r9,r6
 8012964:	1000961e 	bne	r2,zero,8012bc0 <__adddf3+0x2d4>
 8012968:	888001cc 	andi	r2,r17,7
 801296c:	10000726 	beq	r2,zero,801298c <__adddf3+0xa0>
 8012970:	888003cc 	andi	r2,r17,15
 8012974:	00c00104 	movi	r3,4
 8012978:	10c00426 	beq	r2,r3,801298c <__adddf3+0xa0>
 801297c:	88c7883a 	add	r3,r17,r3
 8012980:	1c63803a 	cmpltu	r17,r3,r17
 8012984:	4451883a 	add	r8,r8,r17
 8012988:	1823883a 	mov	r17,r3
 801298c:	4080202c 	andhi	r2,r8,128
 8012990:	10005926 	beq	r2,zero,8012af8 <__adddf3+0x20c>
 8012994:	84000044 	addi	r16,r16,1
 8012998:	0081ffc4 	movi	r2,2047
 801299c:	8080ba26 	beq	r16,r2,8012c88 <__adddf3+0x39c>
 80129a0:	00bfe034 	movhi	r2,65408
 80129a4:	10bfffc4 	addi	r2,r2,-1
 80129a8:	4090703a 	and	r8,r8,r2
 80129ac:	4004977a 	slli	r2,r8,29
 80129b0:	4010927a 	slli	r8,r8,9
 80129b4:	8822d0fa 	srli	r17,r17,3
 80129b8:	8401ffcc 	andi	r16,r16,2047
 80129bc:	4010d33a 	srli	r8,r8,12
 80129c0:	9007883a 	mov	r3,r18
 80129c4:	1444b03a 	or	r2,r2,r17
 80129c8:	8401ffcc 	andi	r16,r16,2047
 80129cc:	8020953a 	slli	r16,r16,20
 80129d0:	18c03fcc 	andi	r3,r3,255
 80129d4:	01000434 	movhi	r4,16
 80129d8:	213fffc4 	addi	r4,r4,-1
 80129dc:	180697fa 	slli	r3,r3,31
 80129e0:	4110703a 	and	r8,r8,r4
 80129e4:	4410b03a 	or	r8,r8,r16
 80129e8:	40c6b03a 	or	r3,r8,r3
 80129ec:	dfc00417 	ldw	ra,16(sp)
 80129f0:	dcc00317 	ldw	r19,12(sp)
 80129f4:	dc800217 	ldw	r18,8(sp)
 80129f8:	dc400117 	ldw	r17,4(sp)
 80129fc:	dc000017 	ldw	r16,0(sp)
 8012a00:	dec00504 	addi	sp,sp,20
 8012a04:	f800283a 	ret
 8012a08:	0081ffc4 	movi	r2,2047
 8012a0c:	80bfd626 	beq	r16,r2,8012968 <__adddf3+0x7c>
 8012a10:	4a402034 	orhi	r9,r9,128
 8012a14:	00800e04 	movi	r2,56
 8012a18:	10c09f16 	blt	r2,r3,8012c98 <__adddf3+0x3ac>
 8012a1c:	008007c4 	movi	r2,31
 8012a20:	10c0c216 	blt	r2,r3,8012d2c <__adddf3+0x440>
 8012a24:	00800804 	movi	r2,32
 8012a28:	10c5c83a 	sub	r2,r2,r3
 8012a2c:	488a983a 	sll	r5,r9,r2
 8012a30:	30c8d83a 	srl	r4,r6,r3
 8012a34:	3084983a 	sll	r2,r6,r2
 8012a38:	48c6d83a 	srl	r3,r9,r3
 8012a3c:	290cb03a 	or	r6,r5,r4
 8012a40:	1004c03a 	cmpne	r2,r2,zero
 8012a44:	308cb03a 	or	r6,r6,r2
 8012a48:	898dc83a 	sub	r6,r17,r6
 8012a4c:	89a3803a 	cmpltu	r17,r17,r6
 8012a50:	40d1c83a 	sub	r8,r8,r3
 8012a54:	4451c83a 	sub	r8,r8,r17
 8012a58:	3023883a 	mov	r17,r6
 8012a5c:	4080202c 	andhi	r2,r8,128
 8012a60:	10002326 	beq	r2,zero,8012af0 <__adddf3+0x204>
 8012a64:	04c02034 	movhi	r19,128
 8012a68:	9cffffc4 	addi	r19,r19,-1
 8012a6c:	44e6703a 	and	r19,r8,r19
 8012a70:	98007626 	beq	r19,zero,8012c4c <__adddf3+0x360>
 8012a74:	9809883a 	mov	r4,r19
 8012a78:	801512c0 	call	801512c <__clzsi2>
 8012a7c:	10fffe04 	addi	r3,r2,-8
 8012a80:	010007c4 	movi	r4,31
 8012a84:	20c07716 	blt	r4,r3,8012c64 <__adddf3+0x378>
 8012a88:	00800804 	movi	r2,32
 8012a8c:	10c5c83a 	sub	r2,r2,r3
 8012a90:	8884d83a 	srl	r2,r17,r2
 8012a94:	98d0983a 	sll	r8,r19,r3
 8012a98:	88e2983a 	sll	r17,r17,r3
 8012a9c:	1204b03a 	or	r2,r2,r8
 8012aa0:	1c007416 	blt	r3,r16,8012c74 <__adddf3+0x388>
 8012aa4:	1c21c83a 	sub	r16,r3,r16
 8012aa8:	82000044 	addi	r8,r16,1
 8012aac:	00c007c4 	movi	r3,31
 8012ab0:	1a009116 	blt	r3,r8,8012cf8 <__adddf3+0x40c>
 8012ab4:	00c00804 	movi	r3,32
 8012ab8:	1a07c83a 	sub	r3,r3,r8
 8012abc:	8a08d83a 	srl	r4,r17,r8
 8012ac0:	88e2983a 	sll	r17,r17,r3
 8012ac4:	10c6983a 	sll	r3,r2,r3
 8012ac8:	1210d83a 	srl	r8,r2,r8
 8012acc:	8804c03a 	cmpne	r2,r17,zero
 8012ad0:	1906b03a 	or	r3,r3,r4
 8012ad4:	18a2b03a 	or	r17,r3,r2
 8012ad8:	0021883a 	mov	r16,zero
 8012adc:	003fa206 	br	8012968 <__adddf3+0x7c>
 8012ae0:	1890b03a 	or	r8,r3,r2
 8012ae4:	40017d26 	beq	r8,zero,80130dc <__adddf3+0x7f0>
 8012ae8:	1011883a 	mov	r8,r2
 8012aec:	1823883a 	mov	r17,r3
 8012af0:	888001cc 	andi	r2,r17,7
 8012af4:	103f9e1e 	bne	r2,zero,8012970 <__adddf3+0x84>
 8012af8:	4004977a 	slli	r2,r8,29
 8012afc:	8822d0fa 	srli	r17,r17,3
 8012b00:	4010d0fa 	srli	r8,r8,3
 8012b04:	9007883a 	mov	r3,r18
 8012b08:	1444b03a 	or	r2,r2,r17
 8012b0c:	0101ffc4 	movi	r4,2047
 8012b10:	81002426 	beq	r16,r4,8012ba4 <__adddf3+0x2b8>
 8012b14:	8120703a 	and	r16,r16,r4
 8012b18:	01000434 	movhi	r4,16
 8012b1c:	213fffc4 	addi	r4,r4,-1
 8012b20:	4110703a 	and	r8,r8,r4
 8012b24:	003fa806 	br	80129c8 <__adddf3+0xdc>
 8012b28:	8089c83a 	sub	r4,r16,r2
 8012b2c:	01005e0e 	bge	zero,r4,8012ca8 <__adddf3+0x3bc>
 8012b30:	10002b26 	beq	r2,zero,8012be0 <__adddf3+0x2f4>
 8012b34:	0081ffc4 	movi	r2,2047
 8012b38:	80bf8b26 	beq	r16,r2,8012968 <__adddf3+0x7c>
 8012b3c:	4a402034 	orhi	r9,r9,128
 8012b40:	00800e04 	movi	r2,56
 8012b44:	1100a40e 	bge	r2,r4,8012dd8 <__adddf3+0x4ec>
 8012b48:	498cb03a 	or	r6,r9,r6
 8012b4c:	300ac03a 	cmpne	r5,r6,zero
 8012b50:	0013883a 	mov	r9,zero
 8012b54:	2c4b883a 	add	r5,r5,r17
 8012b58:	2c63803a 	cmpltu	r17,r5,r17
 8012b5c:	4a11883a 	add	r8,r9,r8
 8012b60:	8a11883a 	add	r8,r17,r8
 8012b64:	2823883a 	mov	r17,r5
 8012b68:	4080202c 	andhi	r2,r8,128
 8012b6c:	103fe026 	beq	r2,zero,8012af0 <__adddf3+0x204>
 8012b70:	84000044 	addi	r16,r16,1
 8012b74:	0081ffc4 	movi	r2,2047
 8012b78:	8080d226 	beq	r16,r2,8012ec4 <__adddf3+0x5d8>
 8012b7c:	00bfe034 	movhi	r2,65408
 8012b80:	10bfffc4 	addi	r2,r2,-1
 8012b84:	4090703a 	and	r8,r8,r2
 8012b88:	880ad07a 	srli	r5,r17,1
 8012b8c:	400897fa 	slli	r4,r8,31
 8012b90:	88c0004c 	andi	r3,r17,1
 8012b94:	28e2b03a 	or	r17,r5,r3
 8012b98:	4010d07a 	srli	r8,r8,1
 8012b9c:	2462b03a 	or	r17,r4,r17
 8012ba0:	003f7106 	br	8012968 <__adddf3+0x7c>
 8012ba4:	4088b03a 	or	r4,r8,r2
 8012ba8:	20014526 	beq	r4,zero,80130c0 <__adddf3+0x7d4>
 8012bac:	01000434 	movhi	r4,16
 8012bb0:	42000234 	orhi	r8,r8,8
 8012bb4:	213fffc4 	addi	r4,r4,-1
 8012bb8:	4110703a 	and	r8,r8,r4
 8012bbc:	003f8206 	br	80129c8 <__adddf3+0xdc>
 8012bc0:	18ffffc4 	addi	r3,r3,-1
 8012bc4:	1800491e 	bne	r3,zero,8012cec <__adddf3+0x400>
 8012bc8:	898bc83a 	sub	r5,r17,r6
 8012bcc:	8963803a 	cmpltu	r17,r17,r5
 8012bd0:	4251c83a 	sub	r8,r8,r9
 8012bd4:	4451c83a 	sub	r8,r8,r17
 8012bd8:	2823883a 	mov	r17,r5
 8012bdc:	003f9f06 	br	8012a5c <__adddf3+0x170>
 8012be0:	4984b03a 	or	r2,r9,r6
 8012be4:	103f6026 	beq	r2,zero,8012968 <__adddf3+0x7c>
 8012be8:	213fffc4 	addi	r4,r4,-1
 8012bec:	2000931e 	bne	r4,zero,8012e3c <__adddf3+0x550>
 8012bf0:	898d883a 	add	r6,r17,r6
 8012bf4:	3463803a 	cmpltu	r17,r6,r17
 8012bf8:	4251883a 	add	r8,r8,r9
 8012bfc:	8a11883a 	add	r8,r17,r8
 8012c00:	3023883a 	mov	r17,r6
 8012c04:	003fd806 	br	8012b68 <__adddf3+0x27c>
 8012c08:	1800541e 	bne	r3,zero,8012d5c <__adddf3+0x470>
 8012c0c:	80800044 	addi	r2,r16,1
 8012c10:	1081ffcc 	andi	r2,r2,2047
 8012c14:	00c00044 	movi	r3,1
 8012c18:	1880a00e 	bge	r3,r2,8012e9c <__adddf3+0x5b0>
 8012c1c:	8989c83a 	sub	r4,r17,r6
 8012c20:	8905803a 	cmpltu	r2,r17,r4
 8012c24:	4267c83a 	sub	r19,r8,r9
 8012c28:	98a7c83a 	sub	r19,r19,r2
 8012c2c:	9880202c 	andhi	r2,r19,128
 8012c30:	10006326 	beq	r2,zero,8012dc0 <__adddf3+0x4d4>
 8012c34:	3463c83a 	sub	r17,r6,r17
 8012c38:	4a07c83a 	sub	r3,r9,r8
 8012c3c:	344d803a 	cmpltu	r6,r6,r17
 8012c40:	19a7c83a 	sub	r19,r3,r6
 8012c44:	3825883a 	mov	r18,r7
 8012c48:	983f8a1e 	bne	r19,zero,8012a74 <__adddf3+0x188>
 8012c4c:	8809883a 	mov	r4,r17
 8012c50:	801512c0 	call	801512c <__clzsi2>
 8012c54:	10800804 	addi	r2,r2,32
 8012c58:	10fffe04 	addi	r3,r2,-8
 8012c5c:	010007c4 	movi	r4,31
 8012c60:	20ff890e 	bge	r4,r3,8012a88 <__adddf3+0x19c>
 8012c64:	10bff604 	addi	r2,r2,-40
 8012c68:	8884983a 	sll	r2,r17,r2
 8012c6c:	0023883a 	mov	r17,zero
 8012c70:	1c3f8c0e 	bge	r3,r16,8012aa4 <__adddf3+0x1b8>
 8012c74:	023fe034 	movhi	r8,65408
 8012c78:	423fffc4 	addi	r8,r8,-1
 8012c7c:	80e1c83a 	sub	r16,r16,r3
 8012c80:	1210703a 	and	r8,r2,r8
 8012c84:	003f3806 	br	8012968 <__adddf3+0x7c>
 8012c88:	9007883a 	mov	r3,r18
 8012c8c:	0011883a 	mov	r8,zero
 8012c90:	0005883a 	mov	r2,zero
 8012c94:	003f4c06 	br	80129c8 <__adddf3+0xdc>
 8012c98:	498cb03a 	or	r6,r9,r6
 8012c9c:	300cc03a 	cmpne	r6,r6,zero
 8012ca0:	0007883a 	mov	r3,zero
 8012ca4:	003f6806 	br	8012a48 <__adddf3+0x15c>
 8012ca8:	20009c1e 	bne	r4,zero,8012f1c <__adddf3+0x630>
 8012cac:	80800044 	addi	r2,r16,1
 8012cb0:	1141ffcc 	andi	r5,r2,2047
 8012cb4:	01000044 	movi	r4,1
 8012cb8:	2140670e 	bge	r4,r5,8012e58 <__adddf3+0x56c>
 8012cbc:	0101ffc4 	movi	r4,2047
 8012cc0:	11007f26 	beq	r2,r4,8012ec0 <__adddf3+0x5d4>
 8012cc4:	898d883a 	add	r6,r17,r6
 8012cc8:	4247883a 	add	r3,r8,r9
 8012ccc:	3451803a 	cmpltu	r8,r6,r17
 8012cd0:	40d1883a 	add	r8,r8,r3
 8012cd4:	402297fa 	slli	r17,r8,31
 8012cd8:	300cd07a 	srli	r6,r6,1
 8012cdc:	4010d07a 	srli	r8,r8,1
 8012ce0:	1021883a 	mov	r16,r2
 8012ce4:	89a2b03a 	or	r17,r17,r6
 8012ce8:	003f1f06 	br	8012968 <__adddf3+0x7c>
 8012cec:	0081ffc4 	movi	r2,2047
 8012cf0:	80bf481e 	bne	r16,r2,8012a14 <__adddf3+0x128>
 8012cf4:	003f1c06 	br	8012968 <__adddf3+0x7c>
 8012cf8:	843ff844 	addi	r16,r16,-31
 8012cfc:	01000804 	movi	r4,32
 8012d00:	1406d83a 	srl	r3,r2,r16
 8012d04:	41005026 	beq	r8,r4,8012e48 <__adddf3+0x55c>
 8012d08:	01001004 	movi	r4,64
 8012d0c:	2211c83a 	sub	r8,r4,r8
 8012d10:	1204983a 	sll	r2,r2,r8
 8012d14:	88a2b03a 	or	r17,r17,r2
 8012d18:	8822c03a 	cmpne	r17,r17,zero
 8012d1c:	1c62b03a 	or	r17,r3,r17
 8012d20:	0011883a 	mov	r8,zero
 8012d24:	0021883a 	mov	r16,zero
 8012d28:	003f7106 	br	8012af0 <__adddf3+0x204>
 8012d2c:	193ff804 	addi	r4,r3,-32
 8012d30:	00800804 	movi	r2,32
 8012d34:	4908d83a 	srl	r4,r9,r4
 8012d38:	18804526 	beq	r3,r2,8012e50 <__adddf3+0x564>
 8012d3c:	00801004 	movi	r2,64
 8012d40:	10c5c83a 	sub	r2,r2,r3
 8012d44:	4886983a 	sll	r3,r9,r2
 8012d48:	198cb03a 	or	r6,r3,r6
 8012d4c:	300cc03a 	cmpne	r6,r6,zero
 8012d50:	218cb03a 	or	r6,r4,r6
 8012d54:	0007883a 	mov	r3,zero
 8012d58:	003f3b06 	br	8012a48 <__adddf3+0x15c>
 8012d5c:	80002a26 	beq	r16,zero,8012e08 <__adddf3+0x51c>
 8012d60:	0101ffc4 	movi	r4,2047
 8012d64:	11006826 	beq	r2,r4,8012f08 <__adddf3+0x61c>
 8012d68:	00c7c83a 	sub	r3,zero,r3
 8012d6c:	42002034 	orhi	r8,r8,128
 8012d70:	01000e04 	movi	r4,56
 8012d74:	20c07c16 	blt	r4,r3,8012f68 <__adddf3+0x67c>
 8012d78:	010007c4 	movi	r4,31
 8012d7c:	20c0da16 	blt	r4,r3,80130e8 <__adddf3+0x7fc>
 8012d80:	01000804 	movi	r4,32
 8012d84:	20c9c83a 	sub	r4,r4,r3
 8012d88:	4114983a 	sll	r10,r8,r4
 8012d8c:	88cad83a 	srl	r5,r17,r3
 8012d90:	8908983a 	sll	r4,r17,r4
 8012d94:	40c6d83a 	srl	r3,r8,r3
 8012d98:	5162b03a 	or	r17,r10,r5
 8012d9c:	2008c03a 	cmpne	r4,r4,zero
 8012da0:	8922b03a 	or	r17,r17,r4
 8012da4:	3463c83a 	sub	r17,r6,r17
 8012da8:	48c7c83a 	sub	r3,r9,r3
 8012dac:	344d803a 	cmpltu	r6,r6,r17
 8012db0:	1991c83a 	sub	r8,r3,r6
 8012db4:	1021883a 	mov	r16,r2
 8012db8:	3825883a 	mov	r18,r7
 8012dbc:	003f2706 	br	8012a5c <__adddf3+0x170>
 8012dc0:	24d0b03a 	or	r8,r4,r19
 8012dc4:	40001b1e 	bne	r8,zero,8012e34 <__adddf3+0x548>
 8012dc8:	0005883a 	mov	r2,zero
 8012dcc:	0007883a 	mov	r3,zero
 8012dd0:	0021883a 	mov	r16,zero
 8012dd4:	003f4d06 	br	8012b0c <__adddf3+0x220>
 8012dd8:	008007c4 	movi	r2,31
 8012ddc:	11003c16 	blt	r2,r4,8012ed0 <__adddf3+0x5e4>
 8012de0:	00800804 	movi	r2,32
 8012de4:	1105c83a 	sub	r2,r2,r4
 8012de8:	488e983a 	sll	r7,r9,r2
 8012dec:	310ad83a 	srl	r5,r6,r4
 8012df0:	3084983a 	sll	r2,r6,r2
 8012df4:	4912d83a 	srl	r9,r9,r4
 8012df8:	394ab03a 	or	r5,r7,r5
 8012dfc:	1004c03a 	cmpne	r2,r2,zero
 8012e00:	288ab03a 	or	r5,r5,r2
 8012e04:	003f5306 	br	8012b54 <__adddf3+0x268>
 8012e08:	4448b03a 	or	r4,r8,r17
 8012e0c:	20003e26 	beq	r4,zero,8012f08 <__adddf3+0x61c>
 8012e10:	00c6303a 	nor	r3,zero,r3
 8012e14:	18003a1e 	bne	r3,zero,8012f00 <__adddf3+0x614>
 8012e18:	3463c83a 	sub	r17,r6,r17
 8012e1c:	4a07c83a 	sub	r3,r9,r8
 8012e20:	344d803a 	cmpltu	r6,r6,r17
 8012e24:	1991c83a 	sub	r8,r3,r6
 8012e28:	1021883a 	mov	r16,r2
 8012e2c:	3825883a 	mov	r18,r7
 8012e30:	003f0a06 	br	8012a5c <__adddf3+0x170>
 8012e34:	2023883a 	mov	r17,r4
 8012e38:	003f0d06 	br	8012a70 <__adddf3+0x184>
 8012e3c:	0081ffc4 	movi	r2,2047
 8012e40:	80bf3f1e 	bne	r16,r2,8012b40 <__adddf3+0x254>
 8012e44:	003ec806 	br	8012968 <__adddf3+0x7c>
 8012e48:	0005883a 	mov	r2,zero
 8012e4c:	003fb106 	br	8012d14 <__adddf3+0x428>
 8012e50:	0007883a 	mov	r3,zero
 8012e54:	003fbc06 	br	8012d48 <__adddf3+0x45c>
 8012e58:	4444b03a 	or	r2,r8,r17
 8012e5c:	8000871e 	bne	r16,zero,801307c <__adddf3+0x790>
 8012e60:	1000ba26 	beq	r2,zero,801314c <__adddf3+0x860>
 8012e64:	4984b03a 	or	r2,r9,r6
 8012e68:	103ebf26 	beq	r2,zero,8012968 <__adddf3+0x7c>
 8012e6c:	8985883a 	add	r2,r17,r6
 8012e70:	4247883a 	add	r3,r8,r9
 8012e74:	1451803a 	cmpltu	r8,r2,r17
 8012e78:	40d1883a 	add	r8,r8,r3
 8012e7c:	40c0202c 	andhi	r3,r8,128
 8012e80:	1023883a 	mov	r17,r2
 8012e84:	183f1a26 	beq	r3,zero,8012af0 <__adddf3+0x204>
 8012e88:	00bfe034 	movhi	r2,65408
 8012e8c:	10bfffc4 	addi	r2,r2,-1
 8012e90:	2021883a 	mov	r16,r4
 8012e94:	4090703a 	and	r8,r8,r2
 8012e98:	003eb306 	br	8012968 <__adddf3+0x7c>
 8012e9c:	4444b03a 	or	r2,r8,r17
 8012ea0:	8000291e 	bne	r16,zero,8012f48 <__adddf3+0x65c>
 8012ea4:	10004b1e 	bne	r2,zero,8012fd4 <__adddf3+0x6e8>
 8012ea8:	4990b03a 	or	r8,r9,r6
 8012eac:	40008b26 	beq	r8,zero,80130dc <__adddf3+0x7f0>
 8012eb0:	4811883a 	mov	r8,r9
 8012eb4:	3023883a 	mov	r17,r6
 8012eb8:	3825883a 	mov	r18,r7
 8012ebc:	003eaa06 	br	8012968 <__adddf3+0x7c>
 8012ec0:	1021883a 	mov	r16,r2
 8012ec4:	0011883a 	mov	r8,zero
 8012ec8:	0005883a 	mov	r2,zero
 8012ecc:	003f0f06 	br	8012b0c <__adddf3+0x220>
 8012ed0:	217ff804 	addi	r5,r4,-32
 8012ed4:	00800804 	movi	r2,32
 8012ed8:	494ad83a 	srl	r5,r9,r5
 8012edc:	20807d26 	beq	r4,r2,80130d4 <__adddf3+0x7e8>
 8012ee0:	00801004 	movi	r2,64
 8012ee4:	1109c83a 	sub	r4,r2,r4
 8012ee8:	4912983a 	sll	r9,r9,r4
 8012eec:	498cb03a 	or	r6,r9,r6
 8012ef0:	300cc03a 	cmpne	r6,r6,zero
 8012ef4:	298ab03a 	or	r5,r5,r6
 8012ef8:	0013883a 	mov	r9,zero
 8012efc:	003f1506 	br	8012b54 <__adddf3+0x268>
 8012f00:	0101ffc4 	movi	r4,2047
 8012f04:	113f9a1e 	bne	r2,r4,8012d70 <__adddf3+0x484>
 8012f08:	4811883a 	mov	r8,r9
 8012f0c:	3023883a 	mov	r17,r6
 8012f10:	1021883a 	mov	r16,r2
 8012f14:	3825883a 	mov	r18,r7
 8012f18:	003e9306 	br	8012968 <__adddf3+0x7c>
 8012f1c:	8000161e 	bne	r16,zero,8012f78 <__adddf3+0x68c>
 8012f20:	444ab03a 	or	r5,r8,r17
 8012f24:	28005126 	beq	r5,zero,801306c <__adddf3+0x780>
 8012f28:	0108303a 	nor	r4,zero,r4
 8012f2c:	20004d1e 	bne	r4,zero,8013064 <__adddf3+0x778>
 8012f30:	89a3883a 	add	r17,r17,r6
 8012f34:	4253883a 	add	r9,r8,r9
 8012f38:	898d803a 	cmpltu	r6,r17,r6
 8012f3c:	3251883a 	add	r8,r6,r9
 8012f40:	1021883a 	mov	r16,r2
 8012f44:	003f0806 	br	8012b68 <__adddf3+0x27c>
 8012f48:	1000301e 	bne	r2,zero,801300c <__adddf3+0x720>
 8012f4c:	4984b03a 	or	r2,r9,r6
 8012f50:	10007126 	beq	r2,zero,8013118 <__adddf3+0x82c>
 8012f54:	4811883a 	mov	r8,r9
 8012f58:	3023883a 	mov	r17,r6
 8012f5c:	3825883a 	mov	r18,r7
 8012f60:	0401ffc4 	movi	r16,2047
 8012f64:	003e8006 	br	8012968 <__adddf3+0x7c>
 8012f68:	4462b03a 	or	r17,r8,r17
 8012f6c:	8822c03a 	cmpne	r17,r17,zero
 8012f70:	0007883a 	mov	r3,zero
 8012f74:	003f8b06 	br	8012da4 <__adddf3+0x4b8>
 8012f78:	0141ffc4 	movi	r5,2047
 8012f7c:	11403b26 	beq	r2,r5,801306c <__adddf3+0x780>
 8012f80:	0109c83a 	sub	r4,zero,r4
 8012f84:	42002034 	orhi	r8,r8,128
 8012f88:	01400e04 	movi	r5,56
 8012f8c:	29006716 	blt	r5,r4,801312c <__adddf3+0x840>
 8012f90:	014007c4 	movi	r5,31
 8012f94:	29007016 	blt	r5,r4,8013158 <__adddf3+0x86c>
 8012f98:	01400804 	movi	r5,32
 8012f9c:	290bc83a 	sub	r5,r5,r4
 8012fa0:	4154983a 	sll	r10,r8,r5
 8012fa4:	890ed83a 	srl	r7,r17,r4
 8012fa8:	894a983a 	sll	r5,r17,r5
 8012fac:	4108d83a 	srl	r4,r8,r4
 8012fb0:	51e2b03a 	or	r17,r10,r7
 8012fb4:	280ac03a 	cmpne	r5,r5,zero
 8012fb8:	8962b03a 	or	r17,r17,r5
 8012fbc:	89a3883a 	add	r17,r17,r6
 8012fc0:	2253883a 	add	r9,r4,r9
 8012fc4:	898d803a 	cmpltu	r6,r17,r6
 8012fc8:	3251883a 	add	r8,r6,r9
 8012fcc:	1021883a 	mov	r16,r2
 8012fd0:	003ee506 	br	8012b68 <__adddf3+0x27c>
 8012fd4:	4984b03a 	or	r2,r9,r6
 8012fd8:	103e6326 	beq	r2,zero,8012968 <__adddf3+0x7c>
 8012fdc:	8987c83a 	sub	r3,r17,r6
 8012fe0:	88c9803a 	cmpltu	r4,r17,r3
 8012fe4:	4245c83a 	sub	r2,r8,r9
 8012fe8:	1105c83a 	sub	r2,r2,r4
 8012fec:	1100202c 	andhi	r4,r2,128
 8012ff0:	203ebb26 	beq	r4,zero,8012ae0 <__adddf3+0x1f4>
 8012ff4:	3463c83a 	sub	r17,r6,r17
 8012ff8:	4a07c83a 	sub	r3,r9,r8
 8012ffc:	344d803a 	cmpltu	r6,r6,r17
 8013000:	1991c83a 	sub	r8,r3,r6
 8013004:	3825883a 	mov	r18,r7
 8013008:	003e5706 	br	8012968 <__adddf3+0x7c>
 801300c:	4984b03a 	or	r2,r9,r6
 8013010:	10002e26 	beq	r2,zero,80130cc <__adddf3+0x7e0>
 8013014:	4004d0fa 	srli	r2,r8,3
 8013018:	8822d0fa 	srli	r17,r17,3
 801301c:	4010977a 	slli	r8,r8,29
 8013020:	10c0022c 	andhi	r3,r2,8
 8013024:	4462b03a 	or	r17,r8,r17
 8013028:	18000826 	beq	r3,zero,801304c <__adddf3+0x760>
 801302c:	4808d0fa 	srli	r4,r9,3
 8013030:	20c0022c 	andhi	r3,r4,8
 8013034:	1800051e 	bne	r3,zero,801304c <__adddf3+0x760>
 8013038:	300cd0fa 	srli	r6,r6,3
 801303c:	4806977a 	slli	r3,r9,29
 8013040:	2005883a 	mov	r2,r4
 8013044:	3825883a 	mov	r18,r7
 8013048:	19a2b03a 	or	r17,r3,r6
 801304c:	8810d77a 	srli	r8,r17,29
 8013050:	100490fa 	slli	r2,r2,3
 8013054:	882290fa 	slli	r17,r17,3
 8013058:	0401ffc4 	movi	r16,2047
 801305c:	4090b03a 	or	r8,r8,r2
 8013060:	003e4106 	br	8012968 <__adddf3+0x7c>
 8013064:	0141ffc4 	movi	r5,2047
 8013068:	117fc71e 	bne	r2,r5,8012f88 <__adddf3+0x69c>
 801306c:	4811883a 	mov	r8,r9
 8013070:	3023883a 	mov	r17,r6
 8013074:	1021883a 	mov	r16,r2
 8013078:	003e3b06 	br	8012968 <__adddf3+0x7c>
 801307c:	10002f26 	beq	r2,zero,801313c <__adddf3+0x850>
 8013080:	4984b03a 	or	r2,r9,r6
 8013084:	10001126 	beq	r2,zero,80130cc <__adddf3+0x7e0>
 8013088:	4004d0fa 	srli	r2,r8,3
 801308c:	8822d0fa 	srli	r17,r17,3
 8013090:	4010977a 	slli	r8,r8,29
 8013094:	10c0022c 	andhi	r3,r2,8
 8013098:	4462b03a 	or	r17,r8,r17
 801309c:	183feb26 	beq	r3,zero,801304c <__adddf3+0x760>
 80130a0:	4808d0fa 	srli	r4,r9,3
 80130a4:	20c0022c 	andhi	r3,r4,8
 80130a8:	183fe81e 	bne	r3,zero,801304c <__adddf3+0x760>
 80130ac:	300cd0fa 	srli	r6,r6,3
 80130b0:	4806977a 	slli	r3,r9,29
 80130b4:	2005883a 	mov	r2,r4
 80130b8:	19a2b03a 	or	r17,r3,r6
 80130bc:	003fe306 	br	801304c <__adddf3+0x760>
 80130c0:	0011883a 	mov	r8,zero
 80130c4:	0005883a 	mov	r2,zero
 80130c8:	003e3f06 	br	80129c8 <__adddf3+0xdc>
 80130cc:	0401ffc4 	movi	r16,2047
 80130d0:	003e2506 	br	8012968 <__adddf3+0x7c>
 80130d4:	0013883a 	mov	r9,zero
 80130d8:	003f8406 	br	8012eec <__adddf3+0x600>
 80130dc:	0005883a 	mov	r2,zero
 80130e0:	0007883a 	mov	r3,zero
 80130e4:	003e8906 	br	8012b0c <__adddf3+0x220>
 80130e8:	197ff804 	addi	r5,r3,-32
 80130ec:	01000804 	movi	r4,32
 80130f0:	414ad83a 	srl	r5,r8,r5
 80130f4:	19002426 	beq	r3,r4,8013188 <__adddf3+0x89c>
 80130f8:	01001004 	movi	r4,64
 80130fc:	20c7c83a 	sub	r3,r4,r3
 8013100:	40c6983a 	sll	r3,r8,r3
 8013104:	1c46b03a 	or	r3,r3,r17
 8013108:	1806c03a 	cmpne	r3,r3,zero
 801310c:	28e2b03a 	or	r17,r5,r3
 8013110:	0007883a 	mov	r3,zero
 8013114:	003f2306 	br	8012da4 <__adddf3+0x4b8>
 8013118:	0007883a 	mov	r3,zero
 801311c:	5811883a 	mov	r8,r11
 8013120:	00bfffc4 	movi	r2,-1
 8013124:	0401ffc4 	movi	r16,2047
 8013128:	003e7806 	br	8012b0c <__adddf3+0x220>
 801312c:	4462b03a 	or	r17,r8,r17
 8013130:	8822c03a 	cmpne	r17,r17,zero
 8013134:	0009883a 	mov	r4,zero
 8013138:	003fa006 	br	8012fbc <__adddf3+0x6d0>
 801313c:	4811883a 	mov	r8,r9
 8013140:	3023883a 	mov	r17,r6
 8013144:	0401ffc4 	movi	r16,2047
 8013148:	003e0706 	br	8012968 <__adddf3+0x7c>
 801314c:	4811883a 	mov	r8,r9
 8013150:	3023883a 	mov	r17,r6
 8013154:	003e0406 	br	8012968 <__adddf3+0x7c>
 8013158:	21fff804 	addi	r7,r4,-32
 801315c:	01400804 	movi	r5,32
 8013160:	41ced83a 	srl	r7,r8,r7
 8013164:	21400a26 	beq	r4,r5,8013190 <__adddf3+0x8a4>
 8013168:	01401004 	movi	r5,64
 801316c:	2909c83a 	sub	r4,r5,r4
 8013170:	4108983a 	sll	r4,r8,r4
 8013174:	2448b03a 	or	r4,r4,r17
 8013178:	2008c03a 	cmpne	r4,r4,zero
 801317c:	3922b03a 	or	r17,r7,r4
 8013180:	0009883a 	mov	r4,zero
 8013184:	003f8d06 	br	8012fbc <__adddf3+0x6d0>
 8013188:	0007883a 	mov	r3,zero
 801318c:	003fdd06 	br	8013104 <__adddf3+0x818>
 8013190:	0009883a 	mov	r4,zero
 8013194:	003ff706 	br	8013174 <__adddf3+0x888>

08013198 <__divdf3>:
 8013198:	defff004 	addi	sp,sp,-64
 801319c:	dc800815 	stw	r18,32(sp)
 80131a0:	2824d53a 	srli	r18,r5,20
 80131a4:	dd800c15 	stw	r22,48(sp)
 80131a8:	282cd7fa 	srli	r22,r5,31
 80131ac:	dc000615 	stw	r16,24(sp)
 80131b0:	04000434 	movhi	r16,16
 80131b4:	843fffc4 	addi	r16,r16,-1
 80131b8:	dfc00f15 	stw	ra,60(sp)
 80131bc:	df000e15 	stw	fp,56(sp)
 80131c0:	ddc00d15 	stw	r23,52(sp)
 80131c4:	dd400b15 	stw	r21,44(sp)
 80131c8:	dd000a15 	stw	r20,40(sp)
 80131cc:	dcc00915 	stw	r19,36(sp)
 80131d0:	dc400715 	stw	r17,28(sp)
 80131d4:	9481ffcc 	andi	r18,r18,2047
 80131d8:	2c20703a 	and	r16,r5,r16
 80131dc:	b2003fcc 	andi	r8,r22,255
 80131e0:	90006126 	beq	r18,zero,8013368 <__divdf3+0x1d0>
 80131e4:	0081ffc4 	movi	r2,2047
 80131e8:	202b883a 	mov	r21,r4
 80131ec:	90803726 	beq	r18,r2,80132cc <__divdf3+0x134>
 80131f0:	80800434 	orhi	r2,r16,16
 80131f4:	100490fa 	slli	r2,r2,3
 80131f8:	2020d77a 	srli	r16,r4,29
 80131fc:	202a90fa 	slli	r21,r4,3
 8013200:	94bf0044 	addi	r18,r18,-1023
 8013204:	80a0b03a 	or	r16,r16,r2
 8013208:	0013883a 	mov	r9,zero
 801320c:	000b883a 	mov	r5,zero
 8013210:	3806d53a 	srli	r3,r7,20
 8013214:	382ed7fa 	srli	r23,r7,31
 8013218:	04400434 	movhi	r17,16
 801321c:	8c7fffc4 	addi	r17,r17,-1
 8013220:	18c1ffcc 	andi	r3,r3,2047
 8013224:	3029883a 	mov	r20,r6
 8013228:	3c62703a 	and	r17,r7,r17
 801322c:	bf003fcc 	andi	fp,r23,255
 8013230:	18006e26 	beq	r3,zero,80133ec <__divdf3+0x254>
 8013234:	0081ffc4 	movi	r2,2047
 8013238:	18806626 	beq	r3,r2,80133d4 <__divdf3+0x23c>
 801323c:	88800434 	orhi	r2,r17,16
 8013240:	100490fa 	slli	r2,r2,3
 8013244:	3022d77a 	srli	r17,r6,29
 8013248:	302890fa 	slli	r20,r6,3
 801324c:	18ff0044 	addi	r3,r3,-1023
 8013250:	88a2b03a 	or	r17,r17,r2
 8013254:	000f883a 	mov	r7,zero
 8013258:	b5e6f03a 	xor	r19,r22,r23
 801325c:	3a4cb03a 	or	r6,r7,r9
 8013260:	008003c4 	movi	r2,15
 8013264:	9809883a 	mov	r4,r19
 8013268:	90c7c83a 	sub	r3,r18,r3
 801326c:	9cc03fcc 	andi	r19,r19,255
 8013270:	11809636 	bltu	r2,r6,80134cc <__divdf3+0x334>
 8013274:	300c90ba 	slli	r6,r6,2
 8013278:	00820074 	movhi	r2,2049
 801327c:	108ca304 	addi	r2,r2,12940
 8013280:	308d883a 	add	r6,r6,r2
 8013284:	30800017 	ldw	r2,0(r6)
 8013288:	1000683a 	jmp	r2
 801328c:	080134cc 	andi	zero,at,1235
 8013290:	08013304 	addi	zero,at,1228
 8013294:	080134bc 	xorhi	zero,at,1234
 8013298:	080132f8 	rdprs	zero,at,1227
 801329c:	080134bc 	xorhi	zero,at,1234
 80132a0:	08013490 	cmplti	zero,at,1234
 80132a4:	080134bc 	xorhi	zero,at,1234
 80132a8:	080132f8 	rdprs	zero,at,1227
 80132ac:	08013304 	addi	zero,at,1228
 80132b0:	08013304 	addi	zero,at,1228
 80132b4:	08013490 	cmplti	zero,at,1234
 80132b8:	080132f8 	rdprs	zero,at,1227
 80132bc:	080132e8 	cmpgeui	zero,at,1227
 80132c0:	080132e8 	cmpgeui	zero,at,1227
 80132c4:	080132e8 	cmpgeui	zero,at,1227
 80132c8:	08013854 	ori	zero,at,1249
 80132cc:	2404b03a 	or	r2,r4,r16
 80132d0:	10006c1e 	bne	r2,zero,8013484 <__divdf3+0x2ec>
 80132d4:	02400204 	movi	r9,8
 80132d8:	0021883a 	mov	r16,zero
 80132dc:	002b883a 	mov	r21,zero
 80132e0:	01400084 	movi	r5,2
 80132e4:	003fca06 	br	8013210 <__divdf3+0x78>
 80132e8:	8023883a 	mov	r17,r16
 80132ec:	a829883a 	mov	r20,r21
 80132f0:	4039883a 	mov	fp,r8
 80132f4:	280f883a 	mov	r7,r5
 80132f8:	00800084 	movi	r2,2
 80132fc:	3881601e 	bne	r7,r2,8013880 <__divdf3+0x6e8>
 8013300:	e027883a 	mov	r19,fp
 8013304:	9900004c 	andi	r4,r19,1
 8013308:	0081ffc4 	movi	r2,2047
 801330c:	0021883a 	mov	r16,zero
 8013310:	002b883a 	mov	r21,zero
 8013314:	1004953a 	slli	r2,r2,20
 8013318:	20c03fcc 	andi	r3,r4,255
 801331c:	01400434 	movhi	r5,16
 8013320:	297fffc4 	addi	r5,r5,-1
 8013324:	180697fa 	slli	r3,r3,31
 8013328:	8160703a 	and	r16,r16,r5
 801332c:	80a0b03a 	or	r16,r16,r2
 8013330:	80c6b03a 	or	r3,r16,r3
 8013334:	a805883a 	mov	r2,r21
 8013338:	dfc00f17 	ldw	ra,60(sp)
 801333c:	df000e17 	ldw	fp,56(sp)
 8013340:	ddc00d17 	ldw	r23,52(sp)
 8013344:	dd800c17 	ldw	r22,48(sp)
 8013348:	dd400b17 	ldw	r21,44(sp)
 801334c:	dd000a17 	ldw	r20,40(sp)
 8013350:	dcc00917 	ldw	r19,36(sp)
 8013354:	dc800817 	ldw	r18,32(sp)
 8013358:	dc400717 	ldw	r17,28(sp)
 801335c:	dc000617 	ldw	r16,24(sp)
 8013360:	dec01004 	addi	sp,sp,64
 8013364:	f800283a 	ret
 8013368:	2404b03a 	or	r2,r4,r16
 801336c:	2023883a 	mov	r17,r4
 8013370:	10003f26 	beq	r2,zero,8013470 <__divdf3+0x2d8>
 8013374:	80015e26 	beq	r16,zero,80138f0 <__divdf3+0x758>
 8013378:	8009883a 	mov	r4,r16
 801337c:	d9800215 	stw	r6,8(sp)
 8013380:	d9c00515 	stw	r7,20(sp)
 8013384:	da000415 	stw	r8,16(sp)
 8013388:	801512c0 	call	801512c <__clzsi2>
 801338c:	d9800217 	ldw	r6,8(sp)
 8013390:	d9c00517 	ldw	r7,20(sp)
 8013394:	da000417 	ldw	r8,16(sp)
 8013398:	113ffd44 	addi	r4,r2,-11
 801339c:	00c00704 	movi	r3,28
 80133a0:	19014f16 	blt	r3,r4,80138e0 <__divdf3+0x748>
 80133a4:	00c00744 	movi	r3,29
 80133a8:	157ffe04 	addi	r21,r2,-8
 80133ac:	1907c83a 	sub	r3,r3,r4
 80133b0:	8560983a 	sll	r16,r16,r21
 80133b4:	88c6d83a 	srl	r3,r17,r3
 80133b8:	8d6a983a 	sll	r21,r17,r21
 80133bc:	1c20b03a 	or	r16,r3,r16
 80133c0:	1080fcc4 	addi	r2,r2,1011
 80133c4:	00a5c83a 	sub	r18,zero,r2
 80133c8:	0013883a 	mov	r9,zero
 80133cc:	000b883a 	mov	r5,zero
 80133d0:	003f8f06 	br	8013210 <__divdf3+0x78>
 80133d4:	3444b03a 	or	r2,r6,r17
 80133d8:	1000231e 	bne	r2,zero,8013468 <__divdf3+0x2d0>
 80133dc:	0023883a 	mov	r17,zero
 80133e0:	0029883a 	mov	r20,zero
 80133e4:	01c00084 	movi	r7,2
 80133e8:	003f9b06 	br	8013258 <__divdf3+0xc0>
 80133ec:	3444b03a 	or	r2,r6,r17
 80133f0:	10001926 	beq	r2,zero,8013458 <__divdf3+0x2c0>
 80133f4:	88014b26 	beq	r17,zero,8013924 <__divdf3+0x78c>
 80133f8:	8809883a 	mov	r4,r17
 80133fc:	d9400115 	stw	r5,4(sp)
 8013400:	d9800215 	stw	r6,8(sp)
 8013404:	da000415 	stw	r8,16(sp)
 8013408:	da400315 	stw	r9,12(sp)
 801340c:	801512c0 	call	801512c <__clzsi2>
 8013410:	d9400117 	ldw	r5,4(sp)
 8013414:	d9800217 	ldw	r6,8(sp)
 8013418:	da000417 	ldw	r8,16(sp)
 801341c:	da400317 	ldw	r9,12(sp)
 8013420:	113ffd44 	addi	r4,r2,-11
 8013424:	00c00704 	movi	r3,28
 8013428:	19013a16 	blt	r3,r4,8013914 <__divdf3+0x77c>
 801342c:	00c00744 	movi	r3,29
 8013430:	153ffe04 	addi	r20,r2,-8
 8013434:	1907c83a 	sub	r3,r3,r4
 8013438:	8d22983a 	sll	r17,r17,r20
 801343c:	30c6d83a 	srl	r3,r6,r3
 8013440:	3528983a 	sll	r20,r6,r20
 8013444:	1c62b03a 	or	r17,r3,r17
 8013448:	1080fcc4 	addi	r2,r2,1011
 801344c:	0087c83a 	sub	r3,zero,r2
 8013450:	000f883a 	mov	r7,zero
 8013454:	003f8006 	br	8013258 <__divdf3+0xc0>
 8013458:	0023883a 	mov	r17,zero
 801345c:	0029883a 	mov	r20,zero
 8013460:	01c00044 	movi	r7,1
 8013464:	003f7c06 	br	8013258 <__divdf3+0xc0>
 8013468:	01c000c4 	movi	r7,3
 801346c:	003f7a06 	br	8013258 <__divdf3+0xc0>
 8013470:	02400104 	movi	r9,4
 8013474:	0021883a 	mov	r16,zero
 8013478:	002b883a 	mov	r21,zero
 801347c:	01400044 	movi	r5,1
 8013480:	003f6306 	br	8013210 <__divdf3+0x78>
 8013484:	02400304 	movi	r9,12
 8013488:	014000c4 	movi	r5,3
 801348c:	003f6006 	br	8013210 <__divdf3+0x78>
 8013490:	04000434 	movhi	r16,16
 8013494:	0009883a 	mov	r4,zero
 8013498:	843fffc4 	addi	r16,r16,-1
 801349c:	057fffc4 	movi	r21,-1
 80134a0:	0081ffc4 	movi	r2,2047
 80134a4:	003f9b06 	br	8013314 <__divdf3+0x17c>
 80134a8:	00c00044 	movi	r3,1
 80134ac:	1887c83a 	sub	r3,r3,r2
 80134b0:	01000e04 	movi	r4,56
 80134b4:	20c1530e 	bge	r4,r3,8013a04 <__divdf3+0x86c>
 80134b8:	9900004c 	andi	r4,r19,1
 80134bc:	0005883a 	mov	r2,zero
 80134c0:	0021883a 	mov	r16,zero
 80134c4:	002b883a 	mov	r21,zero
 80134c8:	003f9206 	br	8013314 <__divdf3+0x17c>
 80134cc:	8c012e36 	bltu	r17,r16,8013988 <__divdf3+0x7f0>
 80134d0:	84412c26 	beq	r16,r17,8013984 <__divdf3+0x7ec>
 80134d4:	a82f883a 	mov	r23,r21
 80134d8:	18ffffc4 	addi	r3,r3,-1
 80134dc:	002b883a 	mov	r21,zero
 80134e0:	a004d63a 	srli	r2,r20,24
 80134e4:	8822923a 	slli	r17,r17,8
 80134e8:	a028923a 	slli	r20,r20,8
 80134ec:	8009883a 	mov	r4,r16
 80134f0:	88acb03a 	or	r22,r17,r2
 80134f4:	dd000015 	stw	r20,0(sp)
 80134f8:	b028d43a 	srli	r20,r22,16
 80134fc:	d8c00215 	stw	r3,8(sp)
 8013500:	b4bfffcc 	andi	r18,r22,65535
 8013504:	a00b883a 	mov	r5,r20
 8013508:	8007d840 	call	8007d84 <__udivsi3>
 801350c:	100b883a 	mov	r5,r2
 8013510:	9009883a 	mov	r4,r18
 8013514:	1023883a 	mov	r17,r2
 8013518:	8007e400 	call	8007e40 <__mulsi3>
 801351c:	8009883a 	mov	r4,r16
 8013520:	a00b883a 	mov	r5,r20
 8013524:	1039883a 	mov	fp,r2
 8013528:	8007de80 	call	8007de8 <__umodsi3>
 801352c:	1004943a 	slli	r2,r2,16
 8013530:	b808d43a 	srli	r4,r23,16
 8013534:	d8c00217 	ldw	r3,8(sp)
 8013538:	2084b03a 	or	r2,r4,r2
 801353c:	1700062e 	bgeu	r2,fp,8013558 <__divdf3+0x3c0>
 8013540:	1585883a 	add	r2,r2,r22
 8013544:	893fffc4 	addi	r4,r17,-1
 8013548:	15811d36 	bltu	r2,r22,80139c0 <__divdf3+0x828>
 801354c:	17011c2e 	bgeu	r2,fp,80139c0 <__divdf3+0x828>
 8013550:	8c7fff84 	addi	r17,r17,-2
 8013554:	1585883a 	add	r2,r2,r22
 8013558:	1739c83a 	sub	fp,r2,fp
 801355c:	a00b883a 	mov	r5,r20
 8013560:	e009883a 	mov	r4,fp
 8013564:	d8c00215 	stw	r3,8(sp)
 8013568:	8007d840 	call	8007d84 <__udivsi3>
 801356c:	100b883a 	mov	r5,r2
 8013570:	9009883a 	mov	r4,r18
 8013574:	1021883a 	mov	r16,r2
 8013578:	8007e400 	call	8007e40 <__mulsi3>
 801357c:	a00b883a 	mov	r5,r20
 8013580:	e009883a 	mov	r4,fp
 8013584:	d8800415 	stw	r2,16(sp)
 8013588:	8007de80 	call	8007de8 <__umodsi3>
 801358c:	1004943a 	slli	r2,r2,16
 8013590:	da000417 	ldw	r8,16(sp)
 8013594:	bdffffcc 	andi	r23,r23,65535
 8013598:	b884b03a 	or	r2,r23,r2
 801359c:	d8c00217 	ldw	r3,8(sp)
 80135a0:	1200062e 	bgeu	r2,r8,80135bc <__divdf3+0x424>
 80135a4:	1585883a 	add	r2,r2,r22
 80135a8:	813fffc4 	addi	r4,r16,-1
 80135ac:	15810236 	bltu	r2,r22,80139b8 <__divdf3+0x820>
 80135b0:	1201012e 	bgeu	r2,r8,80139b8 <__divdf3+0x820>
 80135b4:	843fff84 	addi	r16,r16,-2
 80135b8:	1585883a 	add	r2,r2,r22
 80135bc:	8822943a 	slli	r17,r17,16
 80135c0:	d9800017 	ldw	r6,0(sp)
 80135c4:	1211c83a 	sub	r8,r2,r8
 80135c8:	8c22b03a 	or	r17,r17,r16
 80135cc:	373fffcc 	andi	fp,r6,65535
 80135d0:	8abfffcc 	andi	r10,r17,65535
 80135d4:	8820d43a 	srli	r16,r17,16
 80135d8:	5009883a 	mov	r4,r10
 80135dc:	e00b883a 	mov	r5,fp
 80135e0:	302ed43a 	srli	r23,r6,16
 80135e4:	d8c00215 	stw	r3,8(sp)
 80135e8:	da000415 	stw	r8,16(sp)
 80135ec:	da800115 	stw	r10,4(sp)
 80135f0:	8007e400 	call	8007e40 <__mulsi3>
 80135f4:	800b883a 	mov	r5,r16
 80135f8:	e009883a 	mov	r4,fp
 80135fc:	d8800515 	stw	r2,20(sp)
 8013600:	8007e400 	call	8007e40 <__mulsi3>
 8013604:	8009883a 	mov	r4,r16
 8013608:	b80b883a 	mov	r5,r23
 801360c:	d8800315 	stw	r2,12(sp)
 8013610:	8007e400 	call	8007e40 <__mulsi3>
 8013614:	da800117 	ldw	r10,4(sp)
 8013618:	b80b883a 	mov	r5,r23
 801361c:	1021883a 	mov	r16,r2
 8013620:	5009883a 	mov	r4,r10
 8013624:	8007e400 	call	8007e40 <__mulsi3>
 8013628:	d9c00517 	ldw	r7,20(sp)
 801362c:	da400317 	ldw	r9,12(sp)
 8013630:	d8c00217 	ldw	r3,8(sp)
 8013634:	3808d43a 	srli	r4,r7,16
 8013638:	1245883a 	add	r2,r2,r9
 801363c:	da000417 	ldw	r8,16(sp)
 8013640:	2085883a 	add	r2,r4,r2
 8013644:	1240022e 	bgeu	r2,r9,8013650 <__divdf3+0x4b8>
 8013648:	01000074 	movhi	r4,1
 801364c:	8121883a 	add	r16,r16,r4
 8013650:	1008d43a 	srli	r4,r2,16
 8013654:	1004943a 	slli	r2,r2,16
 8013658:	39ffffcc 	andi	r7,r7,65535
 801365c:	2409883a 	add	r4,r4,r16
 8013660:	11c5883a 	add	r2,r2,r7
 8013664:	4100bb36 	bltu	r8,r4,8013954 <__divdf3+0x7bc>
 8013668:	4100d726 	beq	r8,r4,80139c8 <__divdf3+0x830>
 801366c:	4109c83a 	sub	r4,r8,r4
 8013670:	a8a1c83a 	sub	r16,r21,r2
 8013674:	ac2b803a 	cmpltu	r21,r21,r16
 8013678:	256bc83a 	sub	r21,r4,r21
 801367c:	b540d926 	beq	r22,r21,80139e4 <__divdf3+0x84c>
 8013680:	a00b883a 	mov	r5,r20
 8013684:	a809883a 	mov	r4,r21
 8013688:	d8c00215 	stw	r3,8(sp)
 801368c:	8007d840 	call	8007d84 <__udivsi3>
 8013690:	100b883a 	mov	r5,r2
 8013694:	9009883a 	mov	r4,r18
 8013698:	d8800515 	stw	r2,20(sp)
 801369c:	8007e400 	call	8007e40 <__mulsi3>
 80136a0:	a809883a 	mov	r4,r21
 80136a4:	a00b883a 	mov	r5,r20
 80136a8:	d8800415 	stw	r2,16(sp)
 80136ac:	8007de80 	call	8007de8 <__umodsi3>
 80136b0:	1004943a 	slli	r2,r2,16
 80136b4:	8008d43a 	srli	r4,r16,16
 80136b8:	da000417 	ldw	r8,16(sp)
 80136bc:	d8c00217 	ldw	r3,8(sp)
 80136c0:	2084b03a 	or	r2,r4,r2
 80136c4:	d9c00517 	ldw	r7,20(sp)
 80136c8:	1200062e 	bgeu	r2,r8,80136e4 <__divdf3+0x54c>
 80136cc:	1585883a 	add	r2,r2,r22
 80136d0:	393fffc4 	addi	r4,r7,-1
 80136d4:	1580c536 	bltu	r2,r22,80139ec <__divdf3+0x854>
 80136d8:	1200c42e 	bgeu	r2,r8,80139ec <__divdf3+0x854>
 80136dc:	39ffff84 	addi	r7,r7,-2
 80136e0:	1585883a 	add	r2,r2,r22
 80136e4:	122bc83a 	sub	r21,r2,r8
 80136e8:	a00b883a 	mov	r5,r20
 80136ec:	a809883a 	mov	r4,r21
 80136f0:	d8c00215 	stw	r3,8(sp)
 80136f4:	d9c00515 	stw	r7,20(sp)
 80136f8:	8007d840 	call	8007d84 <__udivsi3>
 80136fc:	9009883a 	mov	r4,r18
 8013700:	100b883a 	mov	r5,r2
 8013704:	d8800415 	stw	r2,16(sp)
 8013708:	8007e400 	call	8007e40 <__mulsi3>
 801370c:	a809883a 	mov	r4,r21
 8013710:	a00b883a 	mov	r5,r20
 8013714:	1025883a 	mov	r18,r2
 8013718:	8007de80 	call	8007de8 <__umodsi3>
 801371c:	1004943a 	slli	r2,r2,16
 8013720:	813fffcc 	andi	r4,r16,65535
 8013724:	d8c00217 	ldw	r3,8(sp)
 8013728:	20a0b03a 	or	r16,r4,r2
 801372c:	d9c00517 	ldw	r7,20(sp)
 8013730:	da000417 	ldw	r8,16(sp)
 8013734:	8480062e 	bgeu	r16,r18,8013750 <__divdf3+0x5b8>
 8013738:	85a1883a 	add	r16,r16,r22
 801373c:	40bfffc4 	addi	r2,r8,-1
 8013740:	8580ac36 	bltu	r16,r22,80139f4 <__divdf3+0x85c>
 8013744:	8480ab2e 	bgeu	r16,r18,80139f4 <__divdf3+0x85c>
 8013748:	423fff84 	addi	r8,r8,-2
 801374c:	85a1883a 	add	r16,r16,r22
 8013750:	3804943a 	slli	r2,r7,16
 8013754:	84a1c83a 	sub	r16,r16,r18
 8013758:	e009883a 	mov	r4,fp
 801375c:	1228b03a 	or	r20,r2,r8
 8013760:	a1ffffcc 	andi	r7,r20,65535
 8013764:	a024d43a 	srli	r18,r20,16
 8013768:	380b883a 	mov	r5,r7
 801376c:	d8c00215 	stw	r3,8(sp)
 8013770:	d9c00515 	stw	r7,20(sp)
 8013774:	8007e400 	call	8007e40 <__mulsi3>
 8013778:	900b883a 	mov	r5,r18
 801377c:	e009883a 	mov	r4,fp
 8013780:	102b883a 	mov	r21,r2
 8013784:	8007e400 	call	8007e40 <__mulsi3>
 8013788:	900b883a 	mov	r5,r18
 801378c:	b809883a 	mov	r4,r23
 8013790:	1039883a 	mov	fp,r2
 8013794:	8007e400 	call	8007e40 <__mulsi3>
 8013798:	d9c00517 	ldw	r7,20(sp)
 801379c:	b80b883a 	mov	r5,r23
 80137a0:	1025883a 	mov	r18,r2
 80137a4:	3809883a 	mov	r4,r7
 80137a8:	8007e400 	call	8007e40 <__mulsi3>
 80137ac:	a808d43a 	srli	r4,r21,16
 80137b0:	1705883a 	add	r2,r2,fp
 80137b4:	d8c00217 	ldw	r3,8(sp)
 80137b8:	2085883a 	add	r2,r4,r2
 80137bc:	1700022e 	bgeu	r2,fp,80137c8 <__divdf3+0x630>
 80137c0:	01000074 	movhi	r4,1
 80137c4:	9125883a 	add	r18,r18,r4
 80137c8:	1008d43a 	srli	r4,r2,16
 80137cc:	1004943a 	slli	r2,r2,16
 80137d0:	ad7fffcc 	andi	r21,r21,65535
 80137d4:	2489883a 	add	r4,r4,r18
 80137d8:	1545883a 	add	r2,r2,r21
 80137dc:	81003836 	bltu	r16,r4,80138c0 <__divdf3+0x728>
 80137e0:	81003626 	beq	r16,r4,80138bc <__divdf3+0x724>
 80137e4:	a5000054 	ori	r20,r20,1
 80137e8:	1880ffc4 	addi	r2,r3,1023
 80137ec:	00bf2e0e 	bge	zero,r2,80134a8 <__divdf3+0x310>
 80137f0:	a10001cc 	andi	r4,r20,7
 80137f4:	20000726 	beq	r4,zero,8013814 <__divdf3+0x67c>
 80137f8:	a10003cc 	andi	r4,r20,15
 80137fc:	01400104 	movi	r5,4
 8013800:	21400426 	beq	r4,r5,8013814 <__divdf3+0x67c>
 8013804:	a149883a 	add	r4,r20,r5
 8013808:	2529803a 	cmpltu	r20,r4,r20
 801380c:	8d23883a 	add	r17,r17,r20
 8013810:	2029883a 	mov	r20,r4
 8013814:	8900402c 	andhi	r4,r17,256
 8013818:	20000426 	beq	r4,zero,801382c <__divdf3+0x694>
 801381c:	18810004 	addi	r2,r3,1024
 8013820:	00ffc034 	movhi	r3,65280
 8013824:	18ffffc4 	addi	r3,r3,-1
 8013828:	88e2703a 	and	r17,r17,r3
 801382c:	00c1ff84 	movi	r3,2046
 8013830:	18beb416 	blt	r3,r2,8013304 <__divdf3+0x16c>
 8013834:	a028d0fa 	srli	r20,r20,3
 8013838:	882a977a 	slli	r21,r17,29
 801383c:	8820927a 	slli	r16,r17,9
 8013840:	1081ffcc 	andi	r2,r2,2047
 8013844:	ad2ab03a 	or	r21,r21,r20
 8013848:	8020d33a 	srli	r16,r16,12
 801384c:	9900004c 	andi	r4,r19,1
 8013850:	003eb006 	br	8013314 <__divdf3+0x17c>
 8013854:	8080022c 	andhi	r2,r16,8
 8013858:	10001226 	beq	r2,zero,80138a4 <__divdf3+0x70c>
 801385c:	8880022c 	andhi	r2,r17,8
 8013860:	1000101e 	bne	r2,zero,80138a4 <__divdf3+0x70c>
 8013864:	00800434 	movhi	r2,16
 8013868:	8c000234 	orhi	r16,r17,8
 801386c:	10bfffc4 	addi	r2,r2,-1
 8013870:	b809883a 	mov	r4,r23
 8013874:	80a0703a 	and	r16,r16,r2
 8013878:	a02b883a 	mov	r21,r20
 801387c:	003f0806 	br	80134a0 <__divdf3+0x308>
 8013880:	008000c4 	movi	r2,3
 8013884:	3880b126 	beq	r7,r2,8013b4c <__divdf3+0x9b4>
 8013888:	00800044 	movi	r2,1
 801388c:	38805b1e 	bne	r7,r2,80139fc <__divdf3+0x864>
 8013890:	e009883a 	mov	r4,fp
 8013894:	0005883a 	mov	r2,zero
 8013898:	0021883a 	mov	r16,zero
 801389c:	002b883a 	mov	r21,zero
 80138a0:	003e9c06 	br	8013314 <__divdf3+0x17c>
 80138a4:	00800434 	movhi	r2,16
 80138a8:	84000234 	orhi	r16,r16,8
 80138ac:	10bfffc4 	addi	r2,r2,-1
 80138b0:	b009883a 	mov	r4,r22
 80138b4:	80a0703a 	and	r16,r16,r2
 80138b8:	003ef906 	br	80134a0 <__divdf3+0x308>
 80138bc:	103fca26 	beq	r2,zero,80137e8 <__divdf3+0x650>
 80138c0:	b421883a 	add	r16,r22,r16
 80138c4:	a17fffc4 	addi	r5,r20,-1
 80138c8:	8580422e 	bgeu	r16,r22,80139d4 <__divdf3+0x83c>
 80138cc:	2829883a 	mov	r20,r5
 80138d0:	813fc41e 	bne	r16,r4,80137e4 <__divdf3+0x64c>
 80138d4:	d9800017 	ldw	r6,0(sp)
 80138d8:	30bfc21e 	bne	r6,r2,80137e4 <__divdf3+0x64c>
 80138dc:	003fc206 	br	80137e8 <__divdf3+0x650>
 80138e0:	143ff604 	addi	r16,r2,-40
 80138e4:	8c20983a 	sll	r16,r17,r16
 80138e8:	002b883a 	mov	r21,zero
 80138ec:	003eb406 	br	80133c0 <__divdf3+0x228>
 80138f0:	d9800215 	stw	r6,8(sp)
 80138f4:	d9c00515 	stw	r7,20(sp)
 80138f8:	da000415 	stw	r8,16(sp)
 80138fc:	801512c0 	call	801512c <__clzsi2>
 8013900:	10800804 	addi	r2,r2,32
 8013904:	da000417 	ldw	r8,16(sp)
 8013908:	d9c00517 	ldw	r7,20(sp)
 801390c:	d9800217 	ldw	r6,8(sp)
 8013910:	003ea106 	br	8013398 <__divdf3+0x200>
 8013914:	147ff604 	addi	r17,r2,-40
 8013918:	3462983a 	sll	r17,r6,r17
 801391c:	0029883a 	mov	r20,zero
 8013920:	003ec906 	br	8013448 <__divdf3+0x2b0>
 8013924:	3009883a 	mov	r4,r6
 8013928:	d9400115 	stw	r5,4(sp)
 801392c:	d9800215 	stw	r6,8(sp)
 8013930:	da000415 	stw	r8,16(sp)
 8013934:	da400315 	stw	r9,12(sp)
 8013938:	801512c0 	call	801512c <__clzsi2>
 801393c:	10800804 	addi	r2,r2,32
 8013940:	da400317 	ldw	r9,12(sp)
 8013944:	da000417 	ldw	r8,16(sp)
 8013948:	d9800217 	ldw	r6,8(sp)
 801394c:	d9400117 	ldw	r5,4(sp)
 8013950:	003eb306 	br	8013420 <__divdf3+0x288>
 8013954:	d9800017 	ldw	r6,0(sp)
 8013958:	a9ab883a 	add	r21,r21,r6
 801395c:	a98b803a 	cmpltu	r5,r21,r6
 8013960:	2d8b883a 	add	r5,r5,r22
 8013964:	2a11883a 	add	r8,r5,r8
 8013968:	897fffc4 	addi	r5,r17,-1
 801396c:	b2000c2e 	bgeu	r22,r8,80139a0 <__divdf3+0x808>
 8013970:	41003f36 	bltu	r8,r4,8013a70 <__divdf3+0x8d8>
 8013974:	22006c26 	beq	r4,r8,8013b28 <__divdf3+0x990>
 8013978:	4109c83a 	sub	r4,r8,r4
 801397c:	2823883a 	mov	r17,r5
 8013980:	003f3b06 	br	8013670 <__divdf3+0x4d8>
 8013984:	ad3ed336 	bltu	r21,r20,80134d4 <__divdf3+0x33c>
 8013988:	a804d07a 	srli	r2,r21,1
 801398c:	802e97fa 	slli	r23,r16,31
 8013990:	a82a97fa 	slli	r21,r21,31
 8013994:	8020d07a 	srli	r16,r16,1
 8013998:	b8aeb03a 	or	r23,r23,r2
 801399c:	003ed006 	br	80134e0 <__divdf3+0x348>
 80139a0:	b23ff51e 	bne	r22,r8,8013978 <__divdf3+0x7e0>
 80139a4:	d9800017 	ldw	r6,0(sp)
 80139a8:	a9bff12e 	bgeu	r21,r6,8013970 <__divdf3+0x7d8>
 80139ac:	b109c83a 	sub	r4,r22,r4
 80139b0:	2823883a 	mov	r17,r5
 80139b4:	003f2e06 	br	8013670 <__divdf3+0x4d8>
 80139b8:	2021883a 	mov	r16,r4
 80139bc:	003eff06 	br	80135bc <__divdf3+0x424>
 80139c0:	2023883a 	mov	r17,r4
 80139c4:	003ee406 	br	8013558 <__divdf3+0x3c0>
 80139c8:	a8bfe236 	bltu	r21,r2,8013954 <__divdf3+0x7bc>
 80139cc:	0009883a 	mov	r4,zero
 80139d0:	003f2706 	br	8013670 <__divdf3+0x4d8>
 80139d4:	81002d36 	bltu	r16,r4,8013a8c <__divdf3+0x8f4>
 80139d8:	24005626 	beq	r4,r16,8013b34 <__divdf3+0x99c>
 80139dc:	2829883a 	mov	r20,r5
 80139e0:	003f8006 	br	80137e4 <__divdf3+0x64c>
 80139e4:	053fffc4 	movi	r20,-1
 80139e8:	003f7f06 	br	80137e8 <__divdf3+0x650>
 80139ec:	200f883a 	mov	r7,r4
 80139f0:	003f3c06 	br	80136e4 <__divdf3+0x54c>
 80139f4:	1011883a 	mov	r8,r2
 80139f8:	003f5506 	br	8013750 <__divdf3+0x5b8>
 80139fc:	e027883a 	mov	r19,fp
 8013a00:	003f7906 	br	80137e8 <__divdf3+0x650>
 8013a04:	010007c4 	movi	r4,31
 8013a08:	20c02816 	blt	r4,r3,8013aac <__divdf3+0x914>
 8013a0c:	00800804 	movi	r2,32
 8013a10:	10c5c83a 	sub	r2,r2,r3
 8013a14:	888a983a 	sll	r5,r17,r2
 8013a18:	a0c8d83a 	srl	r4,r20,r3
 8013a1c:	a084983a 	sll	r2,r20,r2
 8013a20:	88e2d83a 	srl	r17,r17,r3
 8013a24:	2906b03a 	or	r3,r5,r4
 8013a28:	1004c03a 	cmpne	r2,r2,zero
 8013a2c:	1886b03a 	or	r3,r3,r2
 8013a30:	188001cc 	andi	r2,r3,7
 8013a34:	10000726 	beq	r2,zero,8013a54 <__divdf3+0x8bc>
 8013a38:	188003cc 	andi	r2,r3,15
 8013a3c:	01000104 	movi	r4,4
 8013a40:	11000426 	beq	r2,r4,8013a54 <__divdf3+0x8bc>
 8013a44:	1805883a 	mov	r2,r3
 8013a48:	10c00104 	addi	r3,r2,4
 8013a4c:	1885803a 	cmpltu	r2,r3,r2
 8013a50:	88a3883a 	add	r17,r17,r2
 8013a54:	8880202c 	andhi	r2,r17,128
 8013a58:	10002926 	beq	r2,zero,8013b00 <__divdf3+0x968>
 8013a5c:	9900004c 	andi	r4,r19,1
 8013a60:	00800044 	movi	r2,1
 8013a64:	0021883a 	mov	r16,zero
 8013a68:	002b883a 	mov	r21,zero
 8013a6c:	003e2906 	br	8013314 <__divdf3+0x17c>
 8013a70:	d9800017 	ldw	r6,0(sp)
 8013a74:	8c7fff84 	addi	r17,r17,-2
 8013a78:	a9ab883a 	add	r21,r21,r6
 8013a7c:	a98b803a 	cmpltu	r5,r21,r6
 8013a80:	2d8b883a 	add	r5,r5,r22
 8013a84:	2a11883a 	add	r8,r5,r8
 8013a88:	003ef806 	br	801366c <__divdf3+0x4d4>
 8013a8c:	d9800017 	ldw	r6,0(sp)
 8013a90:	318f883a 	add	r7,r6,r6
 8013a94:	398b803a 	cmpltu	r5,r7,r6
 8013a98:	2d8d883a 	add	r6,r5,r22
 8013a9c:	81a1883a 	add	r16,r16,r6
 8013aa0:	a17fff84 	addi	r5,r20,-2
 8013aa4:	d9c00015 	stw	r7,0(sp)
 8013aa8:	003f8806 	br	80138cc <__divdf3+0x734>
 8013aac:	013ff844 	movi	r4,-31
 8013ab0:	2085c83a 	sub	r2,r4,r2
 8013ab4:	8888d83a 	srl	r4,r17,r2
 8013ab8:	00800804 	movi	r2,32
 8013abc:	18802126 	beq	r3,r2,8013b44 <__divdf3+0x9ac>
 8013ac0:	04001004 	movi	r16,64
 8013ac4:	80c7c83a 	sub	r3,r16,r3
 8013ac8:	88e0983a 	sll	r16,r17,r3
 8013acc:	8504b03a 	or	r2,r16,r20
 8013ad0:	1004c03a 	cmpne	r2,r2,zero
 8013ad4:	2084b03a 	or	r2,r4,r2
 8013ad8:	144001cc 	andi	r17,r2,7
 8013adc:	88000d1e 	bne	r17,zero,8013b14 <__divdf3+0x97c>
 8013ae0:	0021883a 	mov	r16,zero
 8013ae4:	102ad0fa 	srli	r21,r2,3
 8013ae8:	9900004c 	andi	r4,r19,1
 8013aec:	0005883a 	mov	r2,zero
 8013af0:	ac6ab03a 	or	r21,r21,r17
 8013af4:	003e0706 	br	8013314 <__divdf3+0x17c>
 8013af8:	1007883a 	mov	r3,r2
 8013afc:	0023883a 	mov	r17,zero
 8013b00:	8820927a 	slli	r16,r17,9
 8013b04:	1805883a 	mov	r2,r3
 8013b08:	8822977a 	slli	r17,r17,29
 8013b0c:	8020d33a 	srli	r16,r16,12
 8013b10:	003ff406 	br	8013ae4 <__divdf3+0x94c>
 8013b14:	10c003cc 	andi	r3,r2,15
 8013b18:	01000104 	movi	r4,4
 8013b1c:	193ff626 	beq	r3,r4,8013af8 <__divdf3+0x960>
 8013b20:	0023883a 	mov	r17,zero
 8013b24:	003fc806 	br	8013a48 <__divdf3+0x8b0>
 8013b28:	a8bfd136 	bltu	r21,r2,8013a70 <__divdf3+0x8d8>
 8013b2c:	2823883a 	mov	r17,r5
 8013b30:	003fa606 	br	80139cc <__divdf3+0x834>
 8013b34:	d9800017 	ldw	r6,0(sp)
 8013b38:	30bfd436 	bltu	r6,r2,8013a8c <__divdf3+0x8f4>
 8013b3c:	2829883a 	mov	r20,r5
 8013b40:	003f6406 	br	80138d4 <__divdf3+0x73c>
 8013b44:	0021883a 	mov	r16,zero
 8013b48:	003fe006 	br	8013acc <__divdf3+0x934>
 8013b4c:	00800434 	movhi	r2,16
 8013b50:	8c000234 	orhi	r16,r17,8
 8013b54:	10bfffc4 	addi	r2,r2,-1
 8013b58:	e009883a 	mov	r4,fp
 8013b5c:	80a0703a 	and	r16,r16,r2
 8013b60:	a02b883a 	mov	r21,r20
 8013b64:	003e4e06 	br	80134a0 <__divdf3+0x308>

08013b68 <__eqdf2>:
 8013b68:	2804d53a 	srli	r2,r5,20
 8013b6c:	3806d53a 	srli	r3,r7,20
 8013b70:	02000434 	movhi	r8,16
 8013b74:	423fffc4 	addi	r8,r8,-1
 8013b78:	1081ffcc 	andi	r2,r2,2047
 8013b7c:	0281ffc4 	movi	r10,2047
 8013b80:	2a12703a 	and	r9,r5,r8
 8013b84:	18c1ffcc 	andi	r3,r3,2047
 8013b88:	3a10703a 	and	r8,r7,r8
 8013b8c:	280ad7fa 	srli	r5,r5,31
 8013b90:	380ed7fa 	srli	r7,r7,31
 8013b94:	12801026 	beq	r2,r10,8013bd8 <__eqdf2+0x70>
 8013b98:	0281ffc4 	movi	r10,2047
 8013b9c:	1a800a26 	beq	r3,r10,8013bc8 <__eqdf2+0x60>
 8013ba0:	10c00226 	beq	r2,r3,8013bac <__eqdf2+0x44>
 8013ba4:	00800044 	movi	r2,1
 8013ba8:	f800283a 	ret
 8013bac:	4a3ffd1e 	bne	r9,r8,8013ba4 <__eqdf2+0x3c>
 8013bb0:	21bffc1e 	bne	r4,r6,8013ba4 <__eqdf2+0x3c>
 8013bb4:	29c00c26 	beq	r5,r7,8013be8 <__eqdf2+0x80>
 8013bb8:	103ffa1e 	bne	r2,zero,8013ba4 <__eqdf2+0x3c>
 8013bbc:	2244b03a 	or	r2,r4,r9
 8013bc0:	1004c03a 	cmpne	r2,r2,zero
 8013bc4:	f800283a 	ret
 8013bc8:	3214b03a 	or	r10,r6,r8
 8013bcc:	503ff426 	beq	r10,zero,8013ba0 <__eqdf2+0x38>
 8013bd0:	00800044 	movi	r2,1
 8013bd4:	f800283a 	ret
 8013bd8:	2254b03a 	or	r10,r4,r9
 8013bdc:	503fee26 	beq	r10,zero,8013b98 <__eqdf2+0x30>
 8013be0:	00800044 	movi	r2,1
 8013be4:	f800283a 	ret
 8013be8:	0005883a 	mov	r2,zero
 8013bec:	f800283a 	ret

08013bf0 <__gedf2>:
 8013bf0:	2804d53a 	srli	r2,r5,20
 8013bf4:	3806d53a 	srli	r3,r7,20
 8013bf8:	02000434 	movhi	r8,16
 8013bfc:	423fffc4 	addi	r8,r8,-1
 8013c00:	1081ffcc 	andi	r2,r2,2047
 8013c04:	0241ffc4 	movi	r9,2047
 8013c08:	2a14703a 	and	r10,r5,r8
 8013c0c:	18c1ffcc 	andi	r3,r3,2047
 8013c10:	3a10703a 	and	r8,r7,r8
 8013c14:	280ad7fa 	srli	r5,r5,31
 8013c18:	380ed7fa 	srli	r7,r7,31
 8013c1c:	12401d26 	beq	r2,r9,8013c94 <__gedf2+0xa4>
 8013c20:	0241ffc4 	movi	r9,2047
 8013c24:	1a401226 	beq	r3,r9,8013c70 <__gedf2+0x80>
 8013c28:	1000081e 	bne	r2,zero,8013c4c <__gedf2+0x5c>
 8013c2c:	2296b03a 	or	r11,r4,r10
 8013c30:	5813003a 	cmpeq	r9,r11,zero
 8013c34:	1800091e 	bne	r3,zero,8013c5c <__gedf2+0x6c>
 8013c38:	3218b03a 	or	r12,r6,r8
 8013c3c:	6000071e 	bne	r12,zero,8013c5c <__gedf2+0x6c>
 8013c40:	0005883a 	mov	r2,zero
 8013c44:	5800101e 	bne	r11,zero,8013c88 <__gedf2+0x98>
 8013c48:	f800283a 	ret
 8013c4c:	18000c1e 	bne	r3,zero,8013c80 <__gedf2+0x90>
 8013c50:	3212b03a 	or	r9,r6,r8
 8013c54:	48000c26 	beq	r9,zero,8013c88 <__gedf2+0x98>
 8013c58:	0013883a 	mov	r9,zero
 8013c5c:	39c03fcc 	andi	r7,r7,255
 8013c60:	48000826 	beq	r9,zero,8013c84 <__gedf2+0x94>
 8013c64:	38000926 	beq	r7,zero,8013c8c <__gedf2+0x9c>
 8013c68:	00800044 	movi	r2,1
 8013c6c:	f800283a 	ret
 8013c70:	3212b03a 	or	r9,r6,r8
 8013c74:	483fec26 	beq	r9,zero,8013c28 <__gedf2+0x38>
 8013c78:	00bfff84 	movi	r2,-2
 8013c7c:	f800283a 	ret
 8013c80:	39c03fcc 	andi	r7,r7,255
 8013c84:	29c00626 	beq	r5,r7,8013ca0 <__gedf2+0xb0>
 8013c88:	283ff726 	beq	r5,zero,8013c68 <__gedf2+0x78>
 8013c8c:	00bfffc4 	movi	r2,-1
 8013c90:	f800283a 	ret
 8013c94:	2292b03a 	or	r9,r4,r10
 8013c98:	483fe126 	beq	r9,zero,8013c20 <__gedf2+0x30>
 8013c9c:	003ff606 	br	8013c78 <__gedf2+0x88>
 8013ca0:	18bff916 	blt	r3,r2,8013c88 <__gedf2+0x98>
 8013ca4:	10c00316 	blt	r2,r3,8013cb4 <__gedf2+0xc4>
 8013ca8:	42bff736 	bltu	r8,r10,8013c88 <__gedf2+0x98>
 8013cac:	52000326 	beq	r10,r8,8013cbc <__gedf2+0xcc>
 8013cb0:	5200042e 	bgeu	r10,r8,8013cc4 <__gedf2+0xd4>
 8013cb4:	283fec1e 	bne	r5,zero,8013c68 <__gedf2+0x78>
 8013cb8:	003ff406 	br	8013c8c <__gedf2+0x9c>
 8013cbc:	313ff236 	bltu	r6,r4,8013c88 <__gedf2+0x98>
 8013cc0:	21bffc36 	bltu	r4,r6,8013cb4 <__gedf2+0xc4>
 8013cc4:	0005883a 	mov	r2,zero
 8013cc8:	f800283a 	ret

08013ccc <__ledf2>:
 8013ccc:	2804d53a 	srli	r2,r5,20
 8013cd0:	3810d53a 	srli	r8,r7,20
 8013cd4:	00c00434 	movhi	r3,16
 8013cd8:	18ffffc4 	addi	r3,r3,-1
 8013cdc:	1081ffcc 	andi	r2,r2,2047
 8013ce0:	0241ffc4 	movi	r9,2047
 8013ce4:	28d4703a 	and	r10,r5,r3
 8013ce8:	4201ffcc 	andi	r8,r8,2047
 8013cec:	38c6703a 	and	r3,r7,r3
 8013cf0:	280ad7fa 	srli	r5,r5,31
 8013cf4:	380ed7fa 	srli	r7,r7,31
 8013cf8:	12401f26 	beq	r2,r9,8013d78 <__ledf2+0xac>
 8013cfc:	0241ffc4 	movi	r9,2047
 8013d00:	42401426 	beq	r8,r9,8013d54 <__ledf2+0x88>
 8013d04:	1000091e 	bne	r2,zero,8013d2c <__ledf2+0x60>
 8013d08:	2296b03a 	or	r11,r4,r10
 8013d0c:	5813003a 	cmpeq	r9,r11,zero
 8013d10:	29403fcc 	andi	r5,r5,255
 8013d14:	40000a1e 	bne	r8,zero,8013d40 <__ledf2+0x74>
 8013d18:	30d8b03a 	or	r12,r6,r3
 8013d1c:	6000081e 	bne	r12,zero,8013d40 <__ledf2+0x74>
 8013d20:	0005883a 	mov	r2,zero
 8013d24:	5800111e 	bne	r11,zero,8013d6c <__ledf2+0xa0>
 8013d28:	f800283a 	ret
 8013d2c:	29403fcc 	andi	r5,r5,255
 8013d30:	40000c1e 	bne	r8,zero,8013d64 <__ledf2+0x98>
 8013d34:	30d2b03a 	or	r9,r6,r3
 8013d38:	48000c26 	beq	r9,zero,8013d6c <__ledf2+0xa0>
 8013d3c:	0013883a 	mov	r9,zero
 8013d40:	39c03fcc 	andi	r7,r7,255
 8013d44:	48000826 	beq	r9,zero,8013d68 <__ledf2+0x9c>
 8013d48:	38001126 	beq	r7,zero,8013d90 <__ledf2+0xc4>
 8013d4c:	00800044 	movi	r2,1
 8013d50:	f800283a 	ret
 8013d54:	30d2b03a 	or	r9,r6,r3
 8013d58:	483fea26 	beq	r9,zero,8013d04 <__ledf2+0x38>
 8013d5c:	00800084 	movi	r2,2
 8013d60:	f800283a 	ret
 8013d64:	39c03fcc 	andi	r7,r7,255
 8013d68:	39400726 	beq	r7,r5,8013d88 <__ledf2+0xbc>
 8013d6c:	2800081e 	bne	r5,zero,8013d90 <__ledf2+0xc4>
 8013d70:	00800044 	movi	r2,1
 8013d74:	f800283a 	ret
 8013d78:	2292b03a 	or	r9,r4,r10
 8013d7c:	483fdf26 	beq	r9,zero,8013cfc <__ledf2+0x30>
 8013d80:	00800084 	movi	r2,2
 8013d84:	f800283a 	ret
 8013d88:	4080030e 	bge	r8,r2,8013d98 <__ledf2+0xcc>
 8013d8c:	383fef26 	beq	r7,zero,8013d4c <__ledf2+0x80>
 8013d90:	00bfffc4 	movi	r2,-1
 8013d94:	f800283a 	ret
 8013d98:	123feb16 	blt	r2,r8,8013d48 <__ledf2+0x7c>
 8013d9c:	1abff336 	bltu	r3,r10,8013d6c <__ledf2+0xa0>
 8013da0:	50c00326 	beq	r10,r3,8013db0 <__ledf2+0xe4>
 8013da4:	50c0042e 	bgeu	r10,r3,8013db8 <__ledf2+0xec>
 8013da8:	283fe81e 	bne	r5,zero,8013d4c <__ledf2+0x80>
 8013dac:	003ff806 	br	8013d90 <__ledf2+0xc4>
 8013db0:	313fee36 	bltu	r6,r4,8013d6c <__ledf2+0xa0>
 8013db4:	21bffc36 	bltu	r4,r6,8013da8 <__ledf2+0xdc>
 8013db8:	0005883a 	mov	r2,zero
 8013dbc:	f800283a 	ret

08013dc0 <__muldf3>:
 8013dc0:	deffee04 	addi	sp,sp,-72
 8013dc4:	dd000c15 	stw	r20,48(sp)
 8013dc8:	2828d53a 	srli	r20,r5,20
 8013dcc:	ddc00f15 	stw	r23,60(sp)
 8013dd0:	282ed7fa 	srli	r23,r5,31
 8013dd4:	dc000815 	stw	r16,32(sp)
 8013dd8:	04000434 	movhi	r16,16
 8013ddc:	dcc00b15 	stw	r19,44(sp)
 8013de0:	843fffc4 	addi	r16,r16,-1
 8013de4:	dfc01115 	stw	ra,68(sp)
 8013de8:	df001015 	stw	fp,64(sp)
 8013dec:	dd800e15 	stw	r22,56(sp)
 8013df0:	dd400d15 	stw	r21,52(sp)
 8013df4:	dc800a15 	stw	r18,40(sp)
 8013df8:	dc400915 	stw	r17,36(sp)
 8013dfc:	a501ffcc 	andi	r20,r20,2047
 8013e00:	2c20703a 	and	r16,r5,r16
 8013e04:	b827883a 	mov	r19,r23
 8013e08:	ba403fcc 	andi	r9,r23,255
 8013e0c:	a0006026 	beq	r20,zero,8013f90 <__muldf3+0x1d0>
 8013e10:	0081ffc4 	movi	r2,2047
 8013e14:	202d883a 	mov	r22,r4
 8013e18:	a0803626 	beq	r20,r2,8013ef4 <__muldf3+0x134>
 8013e1c:	84000434 	orhi	r16,r16,16
 8013e20:	200ad77a 	srli	r5,r4,29
 8013e24:	800490fa 	slli	r2,r16,3
 8013e28:	202c90fa 	slli	r22,r4,3
 8013e2c:	a53f0044 	addi	r20,r20,-1023
 8013e30:	28a0b03a 	or	r16,r5,r2
 8013e34:	002b883a 	mov	r21,zero
 8013e38:	000b883a 	mov	r5,zero
 8013e3c:	3804d53a 	srli	r2,r7,20
 8013e40:	3838d7fa 	srli	fp,r7,31
 8013e44:	04400434 	movhi	r17,16
 8013e48:	8c7fffc4 	addi	r17,r17,-1
 8013e4c:	1081ffcc 	andi	r2,r2,2047
 8013e50:	3025883a 	mov	r18,r6
 8013e54:	3c62703a 	and	r17,r7,r17
 8013e58:	e2803fcc 	andi	r10,fp,255
 8013e5c:	10006d26 	beq	r2,zero,8014014 <__muldf3+0x254>
 8013e60:	00c1ffc4 	movi	r3,2047
 8013e64:	10c06526 	beq	r2,r3,8013ffc <__muldf3+0x23c>
 8013e68:	8c400434 	orhi	r17,r17,16
 8013e6c:	300ed77a 	srli	r7,r6,29
 8013e70:	880690fa 	slli	r3,r17,3
 8013e74:	302490fa 	slli	r18,r6,3
 8013e78:	10bf0044 	addi	r2,r2,-1023
 8013e7c:	38e2b03a 	or	r17,r7,r3
 8013e80:	000f883a 	mov	r7,zero
 8013e84:	a087883a 	add	r3,r20,r2
 8013e88:	010003c4 	movi	r4,15
 8013e8c:	3d44b03a 	or	r2,r7,r21
 8013e90:	e5ccf03a 	xor	r6,fp,r23
 8013e94:	1a000044 	addi	r8,r3,1
 8013e98:	20809b36 	bltu	r4,r2,8014108 <__muldf3+0x348>
 8013e9c:	100490ba 	slli	r2,r2,2
 8013ea0:	01020074 	movhi	r4,2049
 8013ea4:	210fad04 	addi	r4,r4,16052
 8013ea8:	1105883a 	add	r2,r2,r4
 8013eac:	10800017 	ldw	r2,0(r2)
 8013eb0:	1000683a 	jmp	r2
 8013eb4:	08014108 	cmpgei	zero,at,1284
 8013eb8:	08013f14 	ori	zero,at,1276
 8013ebc:	08013f14 	ori	zero,at,1276
 8013ec0:	08013f10 	cmplti	zero,at,1276
 8013ec4:	080140e4 	muli	zero,at,1283
 8013ec8:	080140e4 	muli	zero,at,1283
 8013ecc:	080140cc 	andi	zero,at,1283
 8013ed0:	08013f10 	cmplti	zero,at,1276
 8013ed4:	080140e4 	muli	zero,at,1283
 8013ed8:	080140cc 	andi	zero,at,1283
 8013edc:	080140e4 	muli	zero,at,1283
 8013ee0:	08013f10 	cmplti	zero,at,1276
 8013ee4:	080140f4 	orhi	zero,at,1283
 8013ee8:	080140f4 	orhi	zero,at,1283
 8013eec:	080140f4 	orhi	zero,at,1283
 8013ef0:	08014454 	ori	zero,at,1297
 8013ef4:	2404b03a 	or	r2,r4,r16
 8013ef8:	1000711e 	bne	r2,zero,80140c0 <__muldf3+0x300>
 8013efc:	05400204 	movi	r21,8
 8013f00:	0021883a 	mov	r16,zero
 8013f04:	002d883a 	mov	r22,zero
 8013f08:	01400084 	movi	r5,2
 8013f0c:	003fcb06 	br	8013e3c <__muldf3+0x7c>
 8013f10:	500d883a 	mov	r6,r10
 8013f14:	00800084 	movi	r2,2
 8013f18:	38805926 	beq	r7,r2,8014080 <__muldf3+0x2c0>
 8013f1c:	008000c4 	movi	r2,3
 8013f20:	3881bb26 	beq	r7,r2,8014610 <__muldf3+0x850>
 8013f24:	00800044 	movi	r2,1
 8013f28:	3881961e 	bne	r7,r2,8014584 <__muldf3+0x7c4>
 8013f2c:	3027883a 	mov	r19,r6
 8013f30:	0005883a 	mov	r2,zero
 8013f34:	0021883a 	mov	r16,zero
 8013f38:	002d883a 	mov	r22,zero
 8013f3c:	1004953a 	slli	r2,r2,20
 8013f40:	98c03fcc 	andi	r3,r19,255
 8013f44:	04400434 	movhi	r17,16
 8013f48:	8c7fffc4 	addi	r17,r17,-1
 8013f4c:	180697fa 	slli	r3,r3,31
 8013f50:	8460703a 	and	r16,r16,r17
 8013f54:	80a0b03a 	or	r16,r16,r2
 8013f58:	80c6b03a 	or	r3,r16,r3
 8013f5c:	b005883a 	mov	r2,r22
 8013f60:	dfc01117 	ldw	ra,68(sp)
 8013f64:	df001017 	ldw	fp,64(sp)
 8013f68:	ddc00f17 	ldw	r23,60(sp)
 8013f6c:	dd800e17 	ldw	r22,56(sp)
 8013f70:	dd400d17 	ldw	r21,52(sp)
 8013f74:	dd000c17 	ldw	r20,48(sp)
 8013f78:	dcc00b17 	ldw	r19,44(sp)
 8013f7c:	dc800a17 	ldw	r18,40(sp)
 8013f80:	dc400917 	ldw	r17,36(sp)
 8013f84:	dc000817 	ldw	r16,32(sp)
 8013f88:	dec01204 	addi	sp,sp,72
 8013f8c:	f800283a 	ret
 8013f90:	2404b03a 	or	r2,r4,r16
 8013f94:	202b883a 	mov	r21,r4
 8013f98:	10004426 	beq	r2,zero,80140ac <__muldf3+0x2ec>
 8013f9c:	80015126 	beq	r16,zero,80144e4 <__muldf3+0x724>
 8013fa0:	8009883a 	mov	r4,r16
 8013fa4:	d9800715 	stw	r6,28(sp)
 8013fa8:	d9c00215 	stw	r7,8(sp)
 8013fac:	da400415 	stw	r9,16(sp)
 8013fb0:	801512c0 	call	801512c <__clzsi2>
 8013fb4:	d9800717 	ldw	r6,28(sp)
 8013fb8:	d9c00217 	ldw	r7,8(sp)
 8013fbc:	da400417 	ldw	r9,16(sp)
 8013fc0:	113ffd44 	addi	r4,r2,-11
 8013fc4:	00c00704 	movi	r3,28
 8013fc8:	19014216 	blt	r3,r4,80144d4 <__muldf3+0x714>
 8013fcc:	00c00744 	movi	r3,29
 8013fd0:	15bffe04 	addi	r22,r2,-8
 8013fd4:	1907c83a 	sub	r3,r3,r4
 8013fd8:	85a0983a 	sll	r16,r16,r22
 8013fdc:	a8c6d83a 	srl	r3,r21,r3
 8013fe0:	adac983a 	sll	r22,r21,r22
 8013fe4:	1c20b03a 	or	r16,r3,r16
 8013fe8:	1080fcc4 	addi	r2,r2,1011
 8013fec:	00a9c83a 	sub	r20,zero,r2
 8013ff0:	002b883a 	mov	r21,zero
 8013ff4:	000b883a 	mov	r5,zero
 8013ff8:	003f9006 	br	8013e3c <__muldf3+0x7c>
 8013ffc:	3446b03a 	or	r3,r6,r17
 8014000:	1800281e 	bne	r3,zero,80140a4 <__muldf3+0x2e4>
 8014004:	0023883a 	mov	r17,zero
 8014008:	0025883a 	mov	r18,zero
 801400c:	01c00084 	movi	r7,2
 8014010:	003f9c06 	br	8013e84 <__muldf3+0xc4>
 8014014:	3446b03a 	or	r3,r6,r17
 8014018:	18001e26 	beq	r3,zero,8014094 <__muldf3+0x2d4>
 801401c:	88012126 	beq	r17,zero,80144a4 <__muldf3+0x6e4>
 8014020:	8809883a 	mov	r4,r17
 8014024:	d9400215 	stw	r5,8(sp)
 8014028:	d9800715 	stw	r6,28(sp)
 801402c:	da400415 	stw	r9,16(sp)
 8014030:	da800315 	stw	r10,12(sp)
 8014034:	801512c0 	call	801512c <__clzsi2>
 8014038:	d9400217 	ldw	r5,8(sp)
 801403c:	d9800717 	ldw	r6,28(sp)
 8014040:	da400417 	ldw	r9,16(sp)
 8014044:	da800317 	ldw	r10,12(sp)
 8014048:	113ffd44 	addi	r4,r2,-11
 801404c:	00c00704 	movi	r3,28
 8014050:	19011016 	blt	r3,r4,8014494 <__muldf3+0x6d4>
 8014054:	00c00744 	movi	r3,29
 8014058:	14bffe04 	addi	r18,r2,-8
 801405c:	1907c83a 	sub	r3,r3,r4
 8014060:	8ca2983a 	sll	r17,r17,r18
 8014064:	30c6d83a 	srl	r3,r6,r3
 8014068:	34a4983a 	sll	r18,r6,r18
 801406c:	1c62b03a 	or	r17,r3,r17
 8014070:	1080fcc4 	addi	r2,r2,1011
 8014074:	0085c83a 	sub	r2,zero,r2
 8014078:	000f883a 	mov	r7,zero
 801407c:	003f8106 	br	8013e84 <__muldf3+0xc4>
 8014080:	3027883a 	mov	r19,r6
 8014084:	0081ffc4 	movi	r2,2047
 8014088:	0021883a 	mov	r16,zero
 801408c:	002d883a 	mov	r22,zero
 8014090:	003faa06 	br	8013f3c <__muldf3+0x17c>
 8014094:	0023883a 	mov	r17,zero
 8014098:	0025883a 	mov	r18,zero
 801409c:	01c00044 	movi	r7,1
 80140a0:	003f7806 	br	8013e84 <__muldf3+0xc4>
 80140a4:	01c000c4 	movi	r7,3
 80140a8:	003f7606 	br	8013e84 <__muldf3+0xc4>
 80140ac:	05400104 	movi	r21,4
 80140b0:	0021883a 	mov	r16,zero
 80140b4:	002d883a 	mov	r22,zero
 80140b8:	01400044 	movi	r5,1
 80140bc:	003f5f06 	br	8013e3c <__muldf3+0x7c>
 80140c0:	05400304 	movi	r21,12
 80140c4:	014000c4 	movi	r5,3
 80140c8:	003f5c06 	br	8013e3c <__muldf3+0x7c>
 80140cc:	04000434 	movhi	r16,16
 80140d0:	0027883a 	mov	r19,zero
 80140d4:	843fffc4 	addi	r16,r16,-1
 80140d8:	05bfffc4 	movi	r22,-1
 80140dc:	0081ffc4 	movi	r2,2047
 80140e0:	003f9606 	br	8013f3c <__muldf3+0x17c>
 80140e4:	8023883a 	mov	r17,r16
 80140e8:	b025883a 	mov	r18,r22
 80140ec:	280f883a 	mov	r7,r5
 80140f0:	003f8806 	br	8013f14 <__muldf3+0x154>
 80140f4:	8023883a 	mov	r17,r16
 80140f8:	b025883a 	mov	r18,r22
 80140fc:	480d883a 	mov	r6,r9
 8014100:	280f883a 	mov	r7,r5
 8014104:	003f8306 	br	8013f14 <__muldf3+0x154>
 8014108:	b026d43a 	srli	r19,r22,16
 801410c:	902ed43a 	srli	r23,r18,16
 8014110:	b5bfffcc 	andi	r22,r22,65535
 8014114:	94bfffcc 	andi	r18,r18,65535
 8014118:	b00b883a 	mov	r5,r22
 801411c:	9009883a 	mov	r4,r18
 8014120:	d8c00515 	stw	r3,20(sp)
 8014124:	d9800715 	stw	r6,28(sp)
 8014128:	da000615 	stw	r8,24(sp)
 801412c:	8007e400 	call	8007e40 <__mulsi3>
 8014130:	980b883a 	mov	r5,r19
 8014134:	9009883a 	mov	r4,r18
 8014138:	1029883a 	mov	r20,r2
 801413c:	8007e400 	call	8007e40 <__mulsi3>
 8014140:	b80b883a 	mov	r5,r23
 8014144:	9809883a 	mov	r4,r19
 8014148:	102b883a 	mov	r21,r2
 801414c:	8007e400 	call	8007e40 <__mulsi3>
 8014150:	b809883a 	mov	r4,r23
 8014154:	b00b883a 	mov	r5,r22
 8014158:	1039883a 	mov	fp,r2
 801415c:	8007e400 	call	8007e40 <__mulsi3>
 8014160:	a008d43a 	srli	r4,r20,16
 8014164:	1545883a 	add	r2,r2,r21
 8014168:	d8c00517 	ldw	r3,20(sp)
 801416c:	2085883a 	add	r2,r4,r2
 8014170:	d9800717 	ldw	r6,28(sp)
 8014174:	da000617 	ldw	r8,24(sp)
 8014178:	1540022e 	bgeu	r2,r21,8014184 <__muldf3+0x3c4>
 801417c:	01000074 	movhi	r4,1
 8014180:	e139883a 	add	fp,fp,r4
 8014184:	100e943a 	slli	r7,r2,16
 8014188:	1004d43a 	srli	r2,r2,16
 801418c:	882ad43a 	srli	r21,r17,16
 8014190:	a53fffcc 	andi	r20,r20,65535
 8014194:	8c7fffcc 	andi	r17,r17,65535
 8014198:	3d29883a 	add	r20,r7,r20
 801419c:	b00b883a 	mov	r5,r22
 80141a0:	8809883a 	mov	r4,r17
 80141a4:	d8c00515 	stw	r3,20(sp)
 80141a8:	d9800715 	stw	r6,28(sp)
 80141ac:	da000615 	stw	r8,24(sp)
 80141b0:	dd000115 	stw	r20,4(sp)
 80141b4:	d8800015 	stw	r2,0(sp)
 80141b8:	8007e400 	call	8007e40 <__mulsi3>
 80141bc:	980b883a 	mov	r5,r19
 80141c0:	8809883a 	mov	r4,r17
 80141c4:	d8800215 	stw	r2,8(sp)
 80141c8:	8007e400 	call	8007e40 <__mulsi3>
 80141cc:	9809883a 	mov	r4,r19
 80141d0:	a80b883a 	mov	r5,r21
 80141d4:	1029883a 	mov	r20,r2
 80141d8:	8007e400 	call	8007e40 <__mulsi3>
 80141dc:	b00b883a 	mov	r5,r22
 80141e0:	a809883a 	mov	r4,r21
 80141e4:	d8800415 	stw	r2,16(sp)
 80141e8:	8007e400 	call	8007e40 <__mulsi3>
 80141ec:	d9c00217 	ldw	r7,8(sp)
 80141f0:	1505883a 	add	r2,r2,r20
 80141f4:	d8c00517 	ldw	r3,20(sp)
 80141f8:	3826d43a 	srli	r19,r7,16
 80141fc:	d9800717 	ldw	r6,28(sp)
 8014200:	da000617 	ldw	r8,24(sp)
 8014204:	9885883a 	add	r2,r19,r2
 8014208:	da400417 	ldw	r9,16(sp)
 801420c:	1500022e 	bgeu	r2,r20,8014218 <__muldf3+0x458>
 8014210:	01000074 	movhi	r4,1
 8014214:	4913883a 	add	r9,r9,r4
 8014218:	1028d43a 	srli	r20,r2,16
 801421c:	1004943a 	slli	r2,r2,16
 8014220:	802cd43a 	srli	r22,r16,16
 8014224:	843fffcc 	andi	r16,r16,65535
 8014228:	3cffffcc 	andi	r19,r7,65535
 801422c:	9009883a 	mov	r4,r18
 8014230:	800b883a 	mov	r5,r16
 8014234:	a269883a 	add	r20,r20,r9
 8014238:	d8c00515 	stw	r3,20(sp)
 801423c:	d9800715 	stw	r6,28(sp)
 8014240:	da000615 	stw	r8,24(sp)
 8014244:	14e7883a 	add	r19,r2,r19
 8014248:	8007e400 	call	8007e40 <__mulsi3>
 801424c:	9009883a 	mov	r4,r18
 8014250:	b00b883a 	mov	r5,r22
 8014254:	d8800315 	stw	r2,12(sp)
 8014258:	8007e400 	call	8007e40 <__mulsi3>
 801425c:	b809883a 	mov	r4,r23
 8014260:	b00b883a 	mov	r5,r22
 8014264:	d8800215 	stw	r2,8(sp)
 8014268:	8007e400 	call	8007e40 <__mulsi3>
 801426c:	b80b883a 	mov	r5,r23
 8014270:	8009883a 	mov	r4,r16
 8014274:	d8800415 	stw	r2,16(sp)
 8014278:	8007e400 	call	8007e40 <__mulsi3>
 801427c:	da800317 	ldw	r10,12(sp)
 8014280:	d9c00217 	ldw	r7,8(sp)
 8014284:	d9000017 	ldw	r4,0(sp)
 8014288:	502ed43a 	srli	r23,r10,16
 801428c:	11c5883a 	add	r2,r2,r7
 8014290:	24e5883a 	add	r18,r4,r19
 8014294:	b885883a 	add	r2,r23,r2
 8014298:	d8c00517 	ldw	r3,20(sp)
 801429c:	d9800717 	ldw	r6,28(sp)
 80142a0:	da000617 	ldw	r8,24(sp)
 80142a4:	da400417 	ldw	r9,16(sp)
 80142a8:	11c0022e 	bgeu	r2,r7,80142b4 <__muldf3+0x4f4>
 80142ac:	01000074 	movhi	r4,1
 80142b0:	4913883a 	add	r9,r9,r4
 80142b4:	100ed43a 	srli	r7,r2,16
 80142b8:	1004943a 	slli	r2,r2,16
 80142bc:	55ffffcc 	andi	r23,r10,65535
 80142c0:	3a53883a 	add	r9,r7,r9
 80142c4:	8809883a 	mov	r4,r17
 80142c8:	800b883a 	mov	r5,r16
 80142cc:	d8c00515 	stw	r3,20(sp)
 80142d0:	d9800715 	stw	r6,28(sp)
 80142d4:	da000615 	stw	r8,24(sp)
 80142d8:	da400415 	stw	r9,16(sp)
 80142dc:	15ef883a 	add	r23,r2,r23
 80142e0:	8007e400 	call	8007e40 <__mulsi3>
 80142e4:	8809883a 	mov	r4,r17
 80142e8:	b00b883a 	mov	r5,r22
 80142ec:	d8800215 	stw	r2,8(sp)
 80142f0:	8007e400 	call	8007e40 <__mulsi3>
 80142f4:	b00b883a 	mov	r5,r22
 80142f8:	a809883a 	mov	r4,r21
 80142fc:	d8800315 	stw	r2,12(sp)
 8014300:	8007e400 	call	8007e40 <__mulsi3>
 8014304:	8009883a 	mov	r4,r16
 8014308:	a80b883a 	mov	r5,r21
 801430c:	1023883a 	mov	r17,r2
 8014310:	8007e400 	call	8007e40 <__mulsi3>
 8014314:	d9c00217 	ldw	r7,8(sp)
 8014318:	da800317 	ldw	r10,12(sp)
 801431c:	d8c00517 	ldw	r3,20(sp)
 8014320:	3808d43a 	srli	r4,r7,16
 8014324:	1285883a 	add	r2,r2,r10
 8014328:	d9800717 	ldw	r6,28(sp)
 801432c:	2085883a 	add	r2,r4,r2
 8014330:	da000617 	ldw	r8,24(sp)
 8014334:	da400417 	ldw	r9,16(sp)
 8014338:	1280022e 	bgeu	r2,r10,8014344 <__muldf3+0x584>
 801433c:	01000074 	movhi	r4,1
 8014340:	8923883a 	add	r17,r17,r4
 8014344:	1008943a 	slli	r4,r2,16
 8014348:	39ffffcc 	andi	r7,r7,65535
 801434c:	e4b9883a 	add	fp,fp,r18
 8014350:	21cf883a 	add	r7,r4,r7
 8014354:	e4e7803a 	cmpltu	r19,fp,r19
 8014358:	3d0f883a 	add	r7,r7,r20
 801435c:	bf39883a 	add	fp,r23,fp
 8014360:	99c9883a 	add	r4,r19,r7
 8014364:	e5ef803a 	cmpltu	r23,fp,r23
 8014368:	490b883a 	add	r5,r9,r4
 801436c:	1004d43a 	srli	r2,r2,16
 8014370:	b965883a 	add	r18,r23,r5
 8014374:	24c9803a 	cmpltu	r4,r4,r19
 8014378:	3d29803a 	cmpltu	r20,r7,r20
 801437c:	a128b03a 	or	r20,r20,r4
 8014380:	95ef803a 	cmpltu	r23,r18,r23
 8014384:	2a53803a 	cmpltu	r9,r5,r9
 8014388:	a0a9883a 	add	r20,r20,r2
 801438c:	4deeb03a 	or	r23,r9,r23
 8014390:	a5ef883a 	add	r23,r20,r23
 8014394:	bc63883a 	add	r17,r23,r17
 8014398:	e004927a 	slli	r2,fp,9
 801439c:	d9000117 	ldw	r4,4(sp)
 80143a0:	882e927a 	slli	r23,r17,9
 80143a4:	9022d5fa 	srli	r17,r18,23
 80143a8:	e038d5fa 	srli	fp,fp,23
 80143ac:	1104b03a 	or	r2,r2,r4
 80143b0:	9024927a 	slli	r18,r18,9
 80143b4:	1004c03a 	cmpne	r2,r2,zero
 80143b8:	bc62b03a 	or	r17,r23,r17
 80143bc:	1738b03a 	or	fp,r2,fp
 80143c0:	8880402c 	andhi	r2,r17,256
 80143c4:	e4a4b03a 	or	r18,fp,r18
 80143c8:	10000726 	beq	r2,zero,80143e8 <__muldf3+0x628>
 80143cc:	9006d07a 	srli	r3,r18,1
 80143d0:	880497fa 	slli	r2,r17,31
 80143d4:	9480004c 	andi	r18,r18,1
 80143d8:	8822d07a 	srli	r17,r17,1
 80143dc:	1ca4b03a 	or	r18,r3,r18
 80143e0:	14a4b03a 	or	r18,r2,r18
 80143e4:	4007883a 	mov	r3,r8
 80143e8:	1880ffc4 	addi	r2,r3,1023
 80143ec:	0080460e 	bge	zero,r2,8014508 <__muldf3+0x748>
 80143f0:	910001cc 	andi	r4,r18,7
 80143f4:	20000726 	beq	r4,zero,8014414 <__muldf3+0x654>
 80143f8:	910003cc 	andi	r4,r18,15
 80143fc:	01400104 	movi	r5,4
 8014400:	21400426 	beq	r4,r5,8014414 <__muldf3+0x654>
 8014404:	9149883a 	add	r4,r18,r5
 8014408:	24a5803a 	cmpltu	r18,r4,r18
 801440c:	8ca3883a 	add	r17,r17,r18
 8014410:	2025883a 	mov	r18,r4
 8014414:	8900402c 	andhi	r4,r17,256
 8014418:	20000426 	beq	r4,zero,801442c <__muldf3+0x66c>
 801441c:	18810004 	addi	r2,r3,1024
 8014420:	00ffc034 	movhi	r3,65280
 8014424:	18ffffc4 	addi	r3,r3,-1
 8014428:	88e2703a 	and	r17,r17,r3
 801442c:	00c1ff84 	movi	r3,2046
 8014430:	18bf1316 	blt	r3,r2,8014080 <__muldf3+0x2c0>
 8014434:	882c977a 	slli	r22,r17,29
 8014438:	9024d0fa 	srli	r18,r18,3
 801443c:	8822927a 	slli	r17,r17,9
 8014440:	1081ffcc 	andi	r2,r2,2047
 8014444:	b4acb03a 	or	r22,r22,r18
 8014448:	8820d33a 	srli	r16,r17,12
 801444c:	3027883a 	mov	r19,r6
 8014450:	003eba06 	br	8013f3c <__muldf3+0x17c>
 8014454:	8080022c 	andhi	r2,r16,8
 8014458:	10000926 	beq	r2,zero,8014480 <__muldf3+0x6c0>
 801445c:	8880022c 	andhi	r2,r17,8
 8014460:	1000071e 	bne	r2,zero,8014480 <__muldf3+0x6c0>
 8014464:	00800434 	movhi	r2,16
 8014468:	8c000234 	orhi	r16,r17,8
 801446c:	10bfffc4 	addi	r2,r2,-1
 8014470:	e027883a 	mov	r19,fp
 8014474:	80a0703a 	and	r16,r16,r2
 8014478:	902d883a 	mov	r22,r18
 801447c:	003f1706 	br	80140dc <__muldf3+0x31c>
 8014480:	00800434 	movhi	r2,16
 8014484:	84000234 	orhi	r16,r16,8
 8014488:	10bfffc4 	addi	r2,r2,-1
 801448c:	80a0703a 	and	r16,r16,r2
 8014490:	003f1206 	br	80140dc <__muldf3+0x31c>
 8014494:	147ff604 	addi	r17,r2,-40
 8014498:	3462983a 	sll	r17,r6,r17
 801449c:	0025883a 	mov	r18,zero
 80144a0:	003ef306 	br	8014070 <__muldf3+0x2b0>
 80144a4:	3009883a 	mov	r4,r6
 80144a8:	d9400215 	stw	r5,8(sp)
 80144ac:	d9800715 	stw	r6,28(sp)
 80144b0:	da400415 	stw	r9,16(sp)
 80144b4:	da800315 	stw	r10,12(sp)
 80144b8:	801512c0 	call	801512c <__clzsi2>
 80144bc:	10800804 	addi	r2,r2,32
 80144c0:	da800317 	ldw	r10,12(sp)
 80144c4:	da400417 	ldw	r9,16(sp)
 80144c8:	d9800717 	ldw	r6,28(sp)
 80144cc:	d9400217 	ldw	r5,8(sp)
 80144d0:	003edd06 	br	8014048 <__muldf3+0x288>
 80144d4:	143ff604 	addi	r16,r2,-40
 80144d8:	ac20983a 	sll	r16,r21,r16
 80144dc:	002d883a 	mov	r22,zero
 80144e0:	003ec106 	br	8013fe8 <__muldf3+0x228>
 80144e4:	d9800715 	stw	r6,28(sp)
 80144e8:	d9c00215 	stw	r7,8(sp)
 80144ec:	da400415 	stw	r9,16(sp)
 80144f0:	801512c0 	call	801512c <__clzsi2>
 80144f4:	10800804 	addi	r2,r2,32
 80144f8:	da400417 	ldw	r9,16(sp)
 80144fc:	d9c00217 	ldw	r7,8(sp)
 8014500:	d9800717 	ldw	r6,28(sp)
 8014504:	003eae06 	br	8013fc0 <__muldf3+0x200>
 8014508:	00c00044 	movi	r3,1
 801450c:	1887c83a 	sub	r3,r3,r2
 8014510:	01000e04 	movi	r4,56
 8014514:	20fe8516 	blt	r4,r3,8013f2c <__muldf3+0x16c>
 8014518:	010007c4 	movi	r4,31
 801451c:	20c01b16 	blt	r4,r3,801458c <__muldf3+0x7cc>
 8014520:	00800804 	movi	r2,32
 8014524:	10c5c83a 	sub	r2,r2,r3
 8014528:	888a983a 	sll	r5,r17,r2
 801452c:	90c8d83a 	srl	r4,r18,r3
 8014530:	9084983a 	sll	r2,r18,r2
 8014534:	88e2d83a 	srl	r17,r17,r3
 8014538:	2906b03a 	or	r3,r5,r4
 801453c:	1004c03a 	cmpne	r2,r2,zero
 8014540:	1886b03a 	or	r3,r3,r2
 8014544:	188001cc 	andi	r2,r3,7
 8014548:	10000726 	beq	r2,zero,8014568 <__muldf3+0x7a8>
 801454c:	188003cc 	andi	r2,r3,15
 8014550:	01000104 	movi	r4,4
 8014554:	11000426 	beq	r2,r4,8014568 <__muldf3+0x7a8>
 8014558:	1805883a 	mov	r2,r3
 801455c:	10c00104 	addi	r3,r2,4
 8014560:	1885803a 	cmpltu	r2,r3,r2
 8014564:	88a3883a 	add	r17,r17,r2
 8014568:	8880202c 	andhi	r2,r17,128
 801456c:	10001c26 	beq	r2,zero,80145e0 <__muldf3+0x820>
 8014570:	3027883a 	mov	r19,r6
 8014574:	00800044 	movi	r2,1
 8014578:	0021883a 	mov	r16,zero
 801457c:	002d883a 	mov	r22,zero
 8014580:	003e6e06 	br	8013f3c <__muldf3+0x17c>
 8014584:	4007883a 	mov	r3,r8
 8014588:	003f9706 	br	80143e8 <__muldf3+0x628>
 801458c:	017ff844 	movi	r5,-31
 8014590:	2885c83a 	sub	r2,r5,r2
 8014594:	888ad83a 	srl	r5,r17,r2
 8014598:	00800804 	movi	r2,32
 801459c:	18801a26 	beq	r3,r2,8014608 <__muldf3+0x848>
 80145a0:	01001004 	movi	r4,64
 80145a4:	20c7c83a 	sub	r3,r4,r3
 80145a8:	88e2983a 	sll	r17,r17,r3
 80145ac:	8ca4b03a 	or	r18,r17,r18
 80145b0:	9004c03a 	cmpne	r2,r18,zero
 80145b4:	2884b03a 	or	r2,r5,r2
 80145b8:	144001cc 	andi	r17,r2,7
 80145bc:	88000d1e 	bne	r17,zero,80145f4 <__muldf3+0x834>
 80145c0:	0021883a 	mov	r16,zero
 80145c4:	102cd0fa 	srli	r22,r2,3
 80145c8:	3027883a 	mov	r19,r6
 80145cc:	0005883a 	mov	r2,zero
 80145d0:	b46cb03a 	or	r22,r22,r17
 80145d4:	003e5906 	br	8013f3c <__muldf3+0x17c>
 80145d8:	1007883a 	mov	r3,r2
 80145dc:	0023883a 	mov	r17,zero
 80145e0:	8820927a 	slli	r16,r17,9
 80145e4:	1805883a 	mov	r2,r3
 80145e8:	8822977a 	slli	r17,r17,29
 80145ec:	8020d33a 	srli	r16,r16,12
 80145f0:	003ff406 	br	80145c4 <__muldf3+0x804>
 80145f4:	10c003cc 	andi	r3,r2,15
 80145f8:	01000104 	movi	r4,4
 80145fc:	193ff626 	beq	r3,r4,80145d8 <__muldf3+0x818>
 8014600:	0023883a 	mov	r17,zero
 8014604:	003fd506 	br	801455c <__muldf3+0x79c>
 8014608:	0023883a 	mov	r17,zero
 801460c:	003fe706 	br	80145ac <__muldf3+0x7ec>
 8014610:	00800434 	movhi	r2,16
 8014614:	8c000234 	orhi	r16,r17,8
 8014618:	10bfffc4 	addi	r2,r2,-1
 801461c:	3027883a 	mov	r19,r6
 8014620:	80a0703a 	and	r16,r16,r2
 8014624:	902d883a 	mov	r22,r18
 8014628:	003eac06 	br	80140dc <__muldf3+0x31c>

0801462c <__subdf3>:
 801462c:	02000434 	movhi	r8,16
 8014630:	423fffc4 	addi	r8,r8,-1
 8014634:	defffb04 	addi	sp,sp,-20
 8014638:	2a14703a 	and	r10,r5,r8
 801463c:	3812d53a 	srli	r9,r7,20
 8014640:	3a10703a 	and	r8,r7,r8
 8014644:	2006d77a 	srli	r3,r4,29
 8014648:	3004d77a 	srli	r2,r6,29
 801464c:	dc000015 	stw	r16,0(sp)
 8014650:	501490fa 	slli	r10,r10,3
 8014654:	2820d53a 	srli	r16,r5,20
 8014658:	401090fa 	slli	r8,r8,3
 801465c:	dc800215 	stw	r18,8(sp)
 8014660:	dc400115 	stw	r17,4(sp)
 8014664:	dfc00415 	stw	ra,16(sp)
 8014668:	202290fa 	slli	r17,r4,3
 801466c:	dcc00315 	stw	r19,12(sp)
 8014670:	4a41ffcc 	andi	r9,r9,2047
 8014674:	0101ffc4 	movi	r4,2047
 8014678:	2824d7fa 	srli	r18,r5,31
 801467c:	8401ffcc 	andi	r16,r16,2047
 8014680:	50c6b03a 	or	r3,r10,r3
 8014684:	380ed7fa 	srli	r7,r7,31
 8014688:	408ab03a 	or	r5,r8,r2
 801468c:	300c90fa 	slli	r6,r6,3
 8014690:	49009626 	beq	r9,r4,80148ec <__subdf3+0x2c0>
 8014694:	39c0005c 	xori	r7,r7,1
 8014698:	8245c83a 	sub	r2,r16,r9
 801469c:	3c807426 	beq	r7,r18,8014870 <__subdf3+0x244>
 80146a0:	0080af0e 	bge	zero,r2,8014960 <__subdf3+0x334>
 80146a4:	48002a1e 	bne	r9,zero,8014750 <__subdf3+0x124>
 80146a8:	2988b03a 	or	r4,r5,r6
 80146ac:	20009a1e 	bne	r4,zero,8014918 <__subdf3+0x2ec>
 80146b0:	888001cc 	andi	r2,r17,7
 80146b4:	10000726 	beq	r2,zero,80146d4 <__subdf3+0xa8>
 80146b8:	888003cc 	andi	r2,r17,15
 80146bc:	01000104 	movi	r4,4
 80146c0:	11000426 	beq	r2,r4,80146d4 <__subdf3+0xa8>
 80146c4:	890b883a 	add	r5,r17,r4
 80146c8:	2c63803a 	cmpltu	r17,r5,r17
 80146cc:	1c47883a 	add	r3,r3,r17
 80146d0:	2823883a 	mov	r17,r5
 80146d4:	1880202c 	andhi	r2,r3,128
 80146d8:	10005926 	beq	r2,zero,8014840 <__subdf3+0x214>
 80146dc:	84000044 	addi	r16,r16,1
 80146e0:	0081ffc4 	movi	r2,2047
 80146e4:	8080be26 	beq	r16,r2,80149e0 <__subdf3+0x3b4>
 80146e8:	017fe034 	movhi	r5,65408
 80146ec:	297fffc4 	addi	r5,r5,-1
 80146f0:	1946703a 	and	r3,r3,r5
 80146f4:	1804977a 	slli	r2,r3,29
 80146f8:	1806927a 	slli	r3,r3,9
 80146fc:	8822d0fa 	srli	r17,r17,3
 8014700:	8401ffcc 	andi	r16,r16,2047
 8014704:	180ad33a 	srli	r5,r3,12
 8014708:	9100004c 	andi	r4,r18,1
 801470c:	1444b03a 	or	r2,r2,r17
 8014710:	80c1ffcc 	andi	r3,r16,2047
 8014714:	1820953a 	slli	r16,r3,20
 8014718:	20c03fcc 	andi	r3,r4,255
 801471c:	180897fa 	slli	r4,r3,31
 8014720:	00c00434 	movhi	r3,16
 8014724:	18ffffc4 	addi	r3,r3,-1
 8014728:	28c6703a 	and	r3,r5,r3
 801472c:	1c06b03a 	or	r3,r3,r16
 8014730:	1906b03a 	or	r3,r3,r4
 8014734:	dfc00417 	ldw	ra,16(sp)
 8014738:	dcc00317 	ldw	r19,12(sp)
 801473c:	dc800217 	ldw	r18,8(sp)
 8014740:	dc400117 	ldw	r17,4(sp)
 8014744:	dc000017 	ldw	r16,0(sp)
 8014748:	dec00504 	addi	sp,sp,20
 801474c:	f800283a 	ret
 8014750:	0101ffc4 	movi	r4,2047
 8014754:	813fd626 	beq	r16,r4,80146b0 <__subdf3+0x84>
 8014758:	29402034 	orhi	r5,r5,128
 801475c:	01000e04 	movi	r4,56
 8014760:	2080a316 	blt	r4,r2,80149f0 <__subdf3+0x3c4>
 8014764:	010007c4 	movi	r4,31
 8014768:	2080c616 	blt	r4,r2,8014a84 <__subdf3+0x458>
 801476c:	01000804 	movi	r4,32
 8014770:	2089c83a 	sub	r4,r4,r2
 8014774:	2910983a 	sll	r8,r5,r4
 8014778:	308ed83a 	srl	r7,r6,r2
 801477c:	3108983a 	sll	r4,r6,r4
 8014780:	2884d83a 	srl	r2,r5,r2
 8014784:	41ccb03a 	or	r6,r8,r7
 8014788:	2008c03a 	cmpne	r4,r4,zero
 801478c:	310cb03a 	or	r6,r6,r4
 8014790:	898dc83a 	sub	r6,r17,r6
 8014794:	89a3803a 	cmpltu	r17,r17,r6
 8014798:	1887c83a 	sub	r3,r3,r2
 801479c:	1c47c83a 	sub	r3,r3,r17
 80147a0:	3023883a 	mov	r17,r6
 80147a4:	1880202c 	andhi	r2,r3,128
 80147a8:	10002326 	beq	r2,zero,8014838 <__subdf3+0x20c>
 80147ac:	04c02034 	movhi	r19,128
 80147b0:	9cffffc4 	addi	r19,r19,-1
 80147b4:	1ce6703a 	and	r19,r3,r19
 80147b8:	98007a26 	beq	r19,zero,80149a4 <__subdf3+0x378>
 80147bc:	9809883a 	mov	r4,r19
 80147c0:	801512c0 	call	801512c <__clzsi2>
 80147c4:	113ffe04 	addi	r4,r2,-8
 80147c8:	00c007c4 	movi	r3,31
 80147cc:	19007b16 	blt	r3,r4,80149bc <__subdf3+0x390>
 80147d0:	00800804 	movi	r2,32
 80147d4:	1105c83a 	sub	r2,r2,r4
 80147d8:	8884d83a 	srl	r2,r17,r2
 80147dc:	9906983a 	sll	r3,r19,r4
 80147e0:	8922983a 	sll	r17,r17,r4
 80147e4:	10c4b03a 	or	r2,r2,r3
 80147e8:	24007816 	blt	r4,r16,80149cc <__subdf3+0x3a0>
 80147ec:	2421c83a 	sub	r16,r4,r16
 80147f0:	80c00044 	addi	r3,r16,1
 80147f4:	010007c4 	movi	r4,31
 80147f8:	20c09516 	blt	r4,r3,8014a50 <__subdf3+0x424>
 80147fc:	01400804 	movi	r5,32
 8014800:	28cbc83a 	sub	r5,r5,r3
 8014804:	88c8d83a 	srl	r4,r17,r3
 8014808:	8962983a 	sll	r17,r17,r5
 801480c:	114a983a 	sll	r5,r2,r5
 8014810:	10c6d83a 	srl	r3,r2,r3
 8014814:	8804c03a 	cmpne	r2,r17,zero
 8014818:	290ab03a 	or	r5,r5,r4
 801481c:	28a2b03a 	or	r17,r5,r2
 8014820:	0021883a 	mov	r16,zero
 8014824:	003fa206 	br	80146b0 <__subdf3+0x84>
 8014828:	2090b03a 	or	r8,r4,r2
 801482c:	40018e26 	beq	r8,zero,8014e68 <__subdf3+0x83c>
 8014830:	1007883a 	mov	r3,r2
 8014834:	2023883a 	mov	r17,r4
 8014838:	888001cc 	andi	r2,r17,7
 801483c:	103f9e1e 	bne	r2,zero,80146b8 <__subdf3+0x8c>
 8014840:	1804977a 	slli	r2,r3,29
 8014844:	8822d0fa 	srli	r17,r17,3
 8014848:	1810d0fa 	srli	r8,r3,3
 801484c:	9100004c 	andi	r4,r18,1
 8014850:	1444b03a 	or	r2,r2,r17
 8014854:	00c1ffc4 	movi	r3,2047
 8014858:	80c02826 	beq	r16,r3,80148fc <__subdf3+0x2d0>
 801485c:	01400434 	movhi	r5,16
 8014860:	297fffc4 	addi	r5,r5,-1
 8014864:	80e0703a 	and	r16,r16,r3
 8014868:	414a703a 	and	r5,r8,r5
 801486c:	003fa806 	br	8014710 <__subdf3+0xe4>
 8014870:	0080630e 	bge	zero,r2,8014a00 <__subdf3+0x3d4>
 8014874:	48003026 	beq	r9,zero,8014938 <__subdf3+0x30c>
 8014878:	0101ffc4 	movi	r4,2047
 801487c:	813f8c26 	beq	r16,r4,80146b0 <__subdf3+0x84>
 8014880:	29402034 	orhi	r5,r5,128
 8014884:	01000e04 	movi	r4,56
 8014888:	2080a90e 	bge	r4,r2,8014b30 <__subdf3+0x504>
 801488c:	298cb03a 	or	r6,r5,r6
 8014890:	3012c03a 	cmpne	r9,r6,zero
 8014894:	0005883a 	mov	r2,zero
 8014898:	4c53883a 	add	r9,r9,r17
 801489c:	4c63803a 	cmpltu	r17,r9,r17
 80148a0:	10c7883a 	add	r3,r2,r3
 80148a4:	88c7883a 	add	r3,r17,r3
 80148a8:	4823883a 	mov	r17,r9
 80148ac:	1880202c 	andhi	r2,r3,128
 80148b0:	1000d026 	beq	r2,zero,8014bf4 <__subdf3+0x5c8>
 80148b4:	84000044 	addi	r16,r16,1
 80148b8:	0081ffc4 	movi	r2,2047
 80148bc:	8080fe26 	beq	r16,r2,8014cb8 <__subdf3+0x68c>
 80148c0:	00bfe034 	movhi	r2,65408
 80148c4:	10bfffc4 	addi	r2,r2,-1
 80148c8:	1886703a 	and	r3,r3,r2
 80148cc:	880ad07a 	srli	r5,r17,1
 80148d0:	180497fa 	slli	r2,r3,31
 80148d4:	8900004c 	andi	r4,r17,1
 80148d8:	2922b03a 	or	r17,r5,r4
 80148dc:	1806d07a 	srli	r3,r3,1
 80148e0:	1462b03a 	or	r17,r2,r17
 80148e4:	3825883a 	mov	r18,r7
 80148e8:	003f7106 	br	80146b0 <__subdf3+0x84>
 80148ec:	2984b03a 	or	r2,r5,r6
 80148f0:	103f6826 	beq	r2,zero,8014694 <__subdf3+0x68>
 80148f4:	39c03fcc 	andi	r7,r7,255
 80148f8:	003f6706 	br	8014698 <__subdf3+0x6c>
 80148fc:	4086b03a 	or	r3,r8,r2
 8014900:	18015226 	beq	r3,zero,8014e4c <__subdf3+0x820>
 8014904:	00c00434 	movhi	r3,16
 8014908:	41400234 	orhi	r5,r8,8
 801490c:	18ffffc4 	addi	r3,r3,-1
 8014910:	28ca703a 	and	r5,r5,r3
 8014914:	003f7e06 	br	8014710 <__subdf3+0xe4>
 8014918:	10bfffc4 	addi	r2,r2,-1
 801491c:	1000491e 	bne	r2,zero,8014a44 <__subdf3+0x418>
 8014920:	898fc83a 	sub	r7,r17,r6
 8014924:	89e3803a 	cmpltu	r17,r17,r7
 8014928:	1947c83a 	sub	r3,r3,r5
 801492c:	1c47c83a 	sub	r3,r3,r17
 8014930:	3823883a 	mov	r17,r7
 8014934:	003f9b06 	br	80147a4 <__subdf3+0x178>
 8014938:	2988b03a 	or	r4,r5,r6
 801493c:	203f5c26 	beq	r4,zero,80146b0 <__subdf3+0x84>
 8014940:	10bfffc4 	addi	r2,r2,-1
 8014944:	1000931e 	bne	r2,zero,8014b94 <__subdf3+0x568>
 8014948:	898d883a 	add	r6,r17,r6
 801494c:	3463803a 	cmpltu	r17,r6,r17
 8014950:	1947883a 	add	r3,r3,r5
 8014954:	88c7883a 	add	r3,r17,r3
 8014958:	3023883a 	mov	r17,r6
 801495c:	003fd306 	br	80148ac <__subdf3+0x280>
 8014960:	1000541e 	bne	r2,zero,8014ab4 <__subdf3+0x488>
 8014964:	80800044 	addi	r2,r16,1
 8014968:	1081ffcc 	andi	r2,r2,2047
 801496c:	01000044 	movi	r4,1
 8014970:	2080a20e 	bge	r4,r2,8014bfc <__subdf3+0x5d0>
 8014974:	8989c83a 	sub	r4,r17,r6
 8014978:	8905803a 	cmpltu	r2,r17,r4
 801497c:	1967c83a 	sub	r19,r3,r5
 8014980:	98a7c83a 	sub	r19,r19,r2
 8014984:	9880202c 	andhi	r2,r19,128
 8014988:	10006326 	beq	r2,zero,8014b18 <__subdf3+0x4ec>
 801498c:	3463c83a 	sub	r17,r6,r17
 8014990:	28c7c83a 	sub	r3,r5,r3
 8014994:	344d803a 	cmpltu	r6,r6,r17
 8014998:	19a7c83a 	sub	r19,r3,r6
 801499c:	3825883a 	mov	r18,r7
 80149a0:	983f861e 	bne	r19,zero,80147bc <__subdf3+0x190>
 80149a4:	8809883a 	mov	r4,r17
 80149a8:	801512c0 	call	801512c <__clzsi2>
 80149ac:	10800804 	addi	r2,r2,32
 80149b0:	113ffe04 	addi	r4,r2,-8
 80149b4:	00c007c4 	movi	r3,31
 80149b8:	193f850e 	bge	r3,r4,80147d0 <__subdf3+0x1a4>
 80149bc:	10bff604 	addi	r2,r2,-40
 80149c0:	8884983a 	sll	r2,r17,r2
 80149c4:	0023883a 	mov	r17,zero
 80149c8:	243f880e 	bge	r4,r16,80147ec <__subdf3+0x1c0>
 80149cc:	00ffe034 	movhi	r3,65408
 80149d0:	18ffffc4 	addi	r3,r3,-1
 80149d4:	8121c83a 	sub	r16,r16,r4
 80149d8:	10c6703a 	and	r3,r2,r3
 80149dc:	003f3406 	br	80146b0 <__subdf3+0x84>
 80149e0:	9100004c 	andi	r4,r18,1
 80149e4:	000b883a 	mov	r5,zero
 80149e8:	0005883a 	mov	r2,zero
 80149ec:	003f4806 	br	8014710 <__subdf3+0xe4>
 80149f0:	298cb03a 	or	r6,r5,r6
 80149f4:	300cc03a 	cmpne	r6,r6,zero
 80149f8:	0005883a 	mov	r2,zero
 80149fc:	003f6406 	br	8014790 <__subdf3+0x164>
 8014a00:	10009a1e 	bne	r2,zero,8014c6c <__subdf3+0x640>
 8014a04:	82400044 	addi	r9,r16,1
 8014a08:	4881ffcc 	andi	r2,r9,2047
 8014a0c:	02800044 	movi	r10,1
 8014a10:	5080670e 	bge	r10,r2,8014bb0 <__subdf3+0x584>
 8014a14:	0081ffc4 	movi	r2,2047
 8014a18:	4880af26 	beq	r9,r2,8014cd8 <__subdf3+0x6ac>
 8014a1c:	898d883a 	add	r6,r17,r6
 8014a20:	1945883a 	add	r2,r3,r5
 8014a24:	3447803a 	cmpltu	r3,r6,r17
 8014a28:	1887883a 	add	r3,r3,r2
 8014a2c:	182297fa 	slli	r17,r3,31
 8014a30:	300cd07a 	srli	r6,r6,1
 8014a34:	1806d07a 	srli	r3,r3,1
 8014a38:	4821883a 	mov	r16,r9
 8014a3c:	89a2b03a 	or	r17,r17,r6
 8014a40:	003f1b06 	br	80146b0 <__subdf3+0x84>
 8014a44:	0101ffc4 	movi	r4,2047
 8014a48:	813f441e 	bne	r16,r4,801475c <__subdf3+0x130>
 8014a4c:	003f1806 	br	80146b0 <__subdf3+0x84>
 8014a50:	843ff844 	addi	r16,r16,-31
 8014a54:	01400804 	movi	r5,32
 8014a58:	1408d83a 	srl	r4,r2,r16
 8014a5c:	19405026 	beq	r3,r5,8014ba0 <__subdf3+0x574>
 8014a60:	01401004 	movi	r5,64
 8014a64:	28c7c83a 	sub	r3,r5,r3
 8014a68:	10c4983a 	sll	r2,r2,r3
 8014a6c:	88a2b03a 	or	r17,r17,r2
 8014a70:	8822c03a 	cmpne	r17,r17,zero
 8014a74:	2462b03a 	or	r17,r4,r17
 8014a78:	0007883a 	mov	r3,zero
 8014a7c:	0021883a 	mov	r16,zero
 8014a80:	003f6d06 	br	8014838 <__subdf3+0x20c>
 8014a84:	11fff804 	addi	r7,r2,-32
 8014a88:	01000804 	movi	r4,32
 8014a8c:	29ced83a 	srl	r7,r5,r7
 8014a90:	11004526 	beq	r2,r4,8014ba8 <__subdf3+0x57c>
 8014a94:	01001004 	movi	r4,64
 8014a98:	2089c83a 	sub	r4,r4,r2
 8014a9c:	2904983a 	sll	r2,r5,r4
 8014aa0:	118cb03a 	or	r6,r2,r6
 8014aa4:	300cc03a 	cmpne	r6,r6,zero
 8014aa8:	398cb03a 	or	r6,r7,r6
 8014aac:	0005883a 	mov	r2,zero
 8014ab0:	003f3706 	br	8014790 <__subdf3+0x164>
 8014ab4:	80002a26 	beq	r16,zero,8014b60 <__subdf3+0x534>
 8014ab8:	0101ffc4 	movi	r4,2047
 8014abc:	49006626 	beq	r9,r4,8014c58 <__subdf3+0x62c>
 8014ac0:	0085c83a 	sub	r2,zero,r2
 8014ac4:	18c02034 	orhi	r3,r3,128
 8014ac8:	01000e04 	movi	r4,56
 8014acc:	20807e16 	blt	r4,r2,8014cc8 <__subdf3+0x69c>
 8014ad0:	010007c4 	movi	r4,31
 8014ad4:	2080e716 	blt	r4,r2,8014e74 <__subdf3+0x848>
 8014ad8:	01000804 	movi	r4,32
 8014adc:	2089c83a 	sub	r4,r4,r2
 8014ae0:	1914983a 	sll	r10,r3,r4
 8014ae4:	8890d83a 	srl	r8,r17,r2
 8014ae8:	8908983a 	sll	r4,r17,r4
 8014aec:	1884d83a 	srl	r2,r3,r2
 8014af0:	5222b03a 	or	r17,r10,r8
 8014af4:	2006c03a 	cmpne	r3,r4,zero
 8014af8:	88e2b03a 	or	r17,r17,r3
 8014afc:	3463c83a 	sub	r17,r6,r17
 8014b00:	2885c83a 	sub	r2,r5,r2
 8014b04:	344d803a 	cmpltu	r6,r6,r17
 8014b08:	1187c83a 	sub	r3,r2,r6
 8014b0c:	4821883a 	mov	r16,r9
 8014b10:	3825883a 	mov	r18,r7
 8014b14:	003f2306 	br	80147a4 <__subdf3+0x178>
 8014b18:	24d0b03a 	or	r8,r4,r19
 8014b1c:	40001b1e 	bne	r8,zero,8014b8c <__subdf3+0x560>
 8014b20:	0005883a 	mov	r2,zero
 8014b24:	0009883a 	mov	r4,zero
 8014b28:	0021883a 	mov	r16,zero
 8014b2c:	003f4906 	br	8014854 <__subdf3+0x228>
 8014b30:	010007c4 	movi	r4,31
 8014b34:	20803a16 	blt	r4,r2,8014c20 <__subdf3+0x5f4>
 8014b38:	01000804 	movi	r4,32
 8014b3c:	2089c83a 	sub	r4,r4,r2
 8014b40:	2912983a 	sll	r9,r5,r4
 8014b44:	3090d83a 	srl	r8,r6,r2
 8014b48:	3108983a 	sll	r4,r6,r4
 8014b4c:	2884d83a 	srl	r2,r5,r2
 8014b50:	4a12b03a 	or	r9,r9,r8
 8014b54:	2008c03a 	cmpne	r4,r4,zero
 8014b58:	4912b03a 	or	r9,r9,r4
 8014b5c:	003f4e06 	br	8014898 <__subdf3+0x26c>
 8014b60:	1c48b03a 	or	r4,r3,r17
 8014b64:	20003c26 	beq	r4,zero,8014c58 <__subdf3+0x62c>
 8014b68:	0084303a 	nor	r2,zero,r2
 8014b6c:	1000381e 	bne	r2,zero,8014c50 <__subdf3+0x624>
 8014b70:	3463c83a 	sub	r17,r6,r17
 8014b74:	28c5c83a 	sub	r2,r5,r3
 8014b78:	344d803a 	cmpltu	r6,r6,r17
 8014b7c:	1187c83a 	sub	r3,r2,r6
 8014b80:	4821883a 	mov	r16,r9
 8014b84:	3825883a 	mov	r18,r7
 8014b88:	003f0606 	br	80147a4 <__subdf3+0x178>
 8014b8c:	2023883a 	mov	r17,r4
 8014b90:	003f0906 	br	80147b8 <__subdf3+0x18c>
 8014b94:	0101ffc4 	movi	r4,2047
 8014b98:	813f3a1e 	bne	r16,r4,8014884 <__subdf3+0x258>
 8014b9c:	003ec406 	br	80146b0 <__subdf3+0x84>
 8014ba0:	0005883a 	mov	r2,zero
 8014ba4:	003fb106 	br	8014a6c <__subdf3+0x440>
 8014ba8:	0005883a 	mov	r2,zero
 8014bac:	003fbc06 	br	8014aa0 <__subdf3+0x474>
 8014bb0:	1c44b03a 	or	r2,r3,r17
 8014bb4:	80008e1e 	bne	r16,zero,8014df0 <__subdf3+0x7c4>
 8014bb8:	1000c826 	beq	r2,zero,8014edc <__subdf3+0x8b0>
 8014bbc:	2984b03a 	or	r2,r5,r6
 8014bc0:	103ebb26 	beq	r2,zero,80146b0 <__subdf3+0x84>
 8014bc4:	8989883a 	add	r4,r17,r6
 8014bc8:	1945883a 	add	r2,r3,r5
 8014bcc:	2447803a 	cmpltu	r3,r4,r17
 8014bd0:	1887883a 	add	r3,r3,r2
 8014bd4:	1880202c 	andhi	r2,r3,128
 8014bd8:	2023883a 	mov	r17,r4
 8014bdc:	103f1626 	beq	r2,zero,8014838 <__subdf3+0x20c>
 8014be0:	00bfe034 	movhi	r2,65408
 8014be4:	10bfffc4 	addi	r2,r2,-1
 8014be8:	5021883a 	mov	r16,r10
 8014bec:	1886703a 	and	r3,r3,r2
 8014bf0:	003eaf06 	br	80146b0 <__subdf3+0x84>
 8014bf4:	3825883a 	mov	r18,r7
 8014bf8:	003f0f06 	br	8014838 <__subdf3+0x20c>
 8014bfc:	1c44b03a 	or	r2,r3,r17
 8014c00:	8000251e 	bne	r16,zero,8014c98 <__subdf3+0x66c>
 8014c04:	1000661e 	bne	r2,zero,8014da0 <__subdf3+0x774>
 8014c08:	2990b03a 	or	r8,r5,r6
 8014c0c:	40009626 	beq	r8,zero,8014e68 <__subdf3+0x83c>
 8014c10:	2807883a 	mov	r3,r5
 8014c14:	3023883a 	mov	r17,r6
 8014c18:	3825883a 	mov	r18,r7
 8014c1c:	003ea406 	br	80146b0 <__subdf3+0x84>
 8014c20:	127ff804 	addi	r9,r2,-32
 8014c24:	01000804 	movi	r4,32
 8014c28:	2a52d83a 	srl	r9,r5,r9
 8014c2c:	11008c26 	beq	r2,r4,8014e60 <__subdf3+0x834>
 8014c30:	01001004 	movi	r4,64
 8014c34:	2085c83a 	sub	r2,r4,r2
 8014c38:	2884983a 	sll	r2,r5,r2
 8014c3c:	118cb03a 	or	r6,r2,r6
 8014c40:	300cc03a 	cmpne	r6,r6,zero
 8014c44:	4992b03a 	or	r9,r9,r6
 8014c48:	0005883a 	mov	r2,zero
 8014c4c:	003f1206 	br	8014898 <__subdf3+0x26c>
 8014c50:	0101ffc4 	movi	r4,2047
 8014c54:	493f9c1e 	bne	r9,r4,8014ac8 <__subdf3+0x49c>
 8014c58:	2807883a 	mov	r3,r5
 8014c5c:	3023883a 	mov	r17,r6
 8014c60:	4821883a 	mov	r16,r9
 8014c64:	3825883a 	mov	r18,r7
 8014c68:	003e9106 	br	80146b0 <__subdf3+0x84>
 8014c6c:	80001f1e 	bne	r16,zero,8014cec <__subdf3+0x6c0>
 8014c70:	1c48b03a 	or	r4,r3,r17
 8014c74:	20005a26 	beq	r4,zero,8014de0 <__subdf3+0x7b4>
 8014c78:	0084303a 	nor	r2,zero,r2
 8014c7c:	1000561e 	bne	r2,zero,8014dd8 <__subdf3+0x7ac>
 8014c80:	89a3883a 	add	r17,r17,r6
 8014c84:	1945883a 	add	r2,r3,r5
 8014c88:	898d803a 	cmpltu	r6,r17,r6
 8014c8c:	3087883a 	add	r3,r6,r2
 8014c90:	4821883a 	mov	r16,r9
 8014c94:	003f0506 	br	80148ac <__subdf3+0x280>
 8014c98:	10002b1e 	bne	r2,zero,8014d48 <__subdf3+0x71c>
 8014c9c:	2984b03a 	or	r2,r5,r6
 8014ca0:	10008026 	beq	r2,zero,8014ea4 <__subdf3+0x878>
 8014ca4:	2807883a 	mov	r3,r5
 8014ca8:	3023883a 	mov	r17,r6
 8014cac:	3825883a 	mov	r18,r7
 8014cb0:	0401ffc4 	movi	r16,2047
 8014cb4:	003e7e06 	br	80146b0 <__subdf3+0x84>
 8014cb8:	3809883a 	mov	r4,r7
 8014cbc:	0011883a 	mov	r8,zero
 8014cc0:	0005883a 	mov	r2,zero
 8014cc4:	003ee306 	br	8014854 <__subdf3+0x228>
 8014cc8:	1c62b03a 	or	r17,r3,r17
 8014ccc:	8822c03a 	cmpne	r17,r17,zero
 8014cd0:	0005883a 	mov	r2,zero
 8014cd4:	003f8906 	br	8014afc <__subdf3+0x4d0>
 8014cd8:	3809883a 	mov	r4,r7
 8014cdc:	4821883a 	mov	r16,r9
 8014ce0:	0011883a 	mov	r8,zero
 8014ce4:	0005883a 	mov	r2,zero
 8014ce8:	003eda06 	br	8014854 <__subdf3+0x228>
 8014cec:	0101ffc4 	movi	r4,2047
 8014cf0:	49003b26 	beq	r9,r4,8014de0 <__subdf3+0x7b4>
 8014cf4:	0085c83a 	sub	r2,zero,r2
 8014cf8:	18c02034 	orhi	r3,r3,128
 8014cfc:	01000e04 	movi	r4,56
 8014d00:	20806e16 	blt	r4,r2,8014ebc <__subdf3+0x890>
 8014d04:	010007c4 	movi	r4,31
 8014d08:	20807716 	blt	r4,r2,8014ee8 <__subdf3+0x8bc>
 8014d0c:	01000804 	movi	r4,32
 8014d10:	2089c83a 	sub	r4,r4,r2
 8014d14:	1914983a 	sll	r10,r3,r4
 8014d18:	8890d83a 	srl	r8,r17,r2
 8014d1c:	8908983a 	sll	r4,r17,r4
 8014d20:	1884d83a 	srl	r2,r3,r2
 8014d24:	5222b03a 	or	r17,r10,r8
 8014d28:	2006c03a 	cmpne	r3,r4,zero
 8014d2c:	88e2b03a 	or	r17,r17,r3
 8014d30:	89a3883a 	add	r17,r17,r6
 8014d34:	1145883a 	add	r2,r2,r5
 8014d38:	898d803a 	cmpltu	r6,r17,r6
 8014d3c:	3087883a 	add	r3,r6,r2
 8014d40:	4821883a 	mov	r16,r9
 8014d44:	003ed906 	br	80148ac <__subdf3+0x280>
 8014d48:	2984b03a 	or	r2,r5,r6
 8014d4c:	10004226 	beq	r2,zero,8014e58 <__subdf3+0x82c>
 8014d50:	1808d0fa 	srli	r4,r3,3
 8014d54:	8822d0fa 	srli	r17,r17,3
 8014d58:	1806977a 	slli	r3,r3,29
 8014d5c:	2080022c 	andhi	r2,r4,8
 8014d60:	1c62b03a 	or	r17,r3,r17
 8014d64:	10000826 	beq	r2,zero,8014d88 <__subdf3+0x75c>
 8014d68:	2812d0fa 	srli	r9,r5,3
 8014d6c:	4880022c 	andhi	r2,r9,8
 8014d70:	1000051e 	bne	r2,zero,8014d88 <__subdf3+0x75c>
 8014d74:	300cd0fa 	srli	r6,r6,3
 8014d78:	2804977a 	slli	r2,r5,29
 8014d7c:	4809883a 	mov	r4,r9
 8014d80:	3825883a 	mov	r18,r7
 8014d84:	11a2b03a 	or	r17,r2,r6
 8014d88:	8806d77a 	srli	r3,r17,29
 8014d8c:	200890fa 	slli	r4,r4,3
 8014d90:	882290fa 	slli	r17,r17,3
 8014d94:	0401ffc4 	movi	r16,2047
 8014d98:	1906b03a 	or	r3,r3,r4
 8014d9c:	003e4406 	br	80146b0 <__subdf3+0x84>
 8014da0:	2984b03a 	or	r2,r5,r6
 8014da4:	103e4226 	beq	r2,zero,80146b0 <__subdf3+0x84>
 8014da8:	8989c83a 	sub	r4,r17,r6
 8014dac:	8911803a 	cmpltu	r8,r17,r4
 8014db0:	1945c83a 	sub	r2,r3,r5
 8014db4:	1205c83a 	sub	r2,r2,r8
 8014db8:	1200202c 	andhi	r8,r2,128
 8014dbc:	403e9a26 	beq	r8,zero,8014828 <__subdf3+0x1fc>
 8014dc0:	3463c83a 	sub	r17,r6,r17
 8014dc4:	28c5c83a 	sub	r2,r5,r3
 8014dc8:	344d803a 	cmpltu	r6,r6,r17
 8014dcc:	1187c83a 	sub	r3,r2,r6
 8014dd0:	3825883a 	mov	r18,r7
 8014dd4:	003e3606 	br	80146b0 <__subdf3+0x84>
 8014dd8:	0101ffc4 	movi	r4,2047
 8014ddc:	493fc71e 	bne	r9,r4,8014cfc <__subdf3+0x6d0>
 8014de0:	2807883a 	mov	r3,r5
 8014de4:	3023883a 	mov	r17,r6
 8014de8:	4821883a 	mov	r16,r9
 8014dec:	003e3006 	br	80146b0 <__subdf3+0x84>
 8014df0:	10003626 	beq	r2,zero,8014ecc <__subdf3+0x8a0>
 8014df4:	2984b03a 	or	r2,r5,r6
 8014df8:	10001726 	beq	r2,zero,8014e58 <__subdf3+0x82c>
 8014dfc:	1808d0fa 	srli	r4,r3,3
 8014e00:	8822d0fa 	srli	r17,r17,3
 8014e04:	1806977a 	slli	r3,r3,29
 8014e08:	2080022c 	andhi	r2,r4,8
 8014e0c:	1c62b03a 	or	r17,r3,r17
 8014e10:	10000726 	beq	r2,zero,8014e30 <__subdf3+0x804>
 8014e14:	2812d0fa 	srli	r9,r5,3
 8014e18:	4880022c 	andhi	r2,r9,8
 8014e1c:	1000041e 	bne	r2,zero,8014e30 <__subdf3+0x804>
 8014e20:	300cd0fa 	srli	r6,r6,3
 8014e24:	2804977a 	slli	r2,r5,29
 8014e28:	4809883a 	mov	r4,r9
 8014e2c:	11a2b03a 	or	r17,r2,r6
 8014e30:	8806d77a 	srli	r3,r17,29
 8014e34:	200890fa 	slli	r4,r4,3
 8014e38:	882290fa 	slli	r17,r17,3
 8014e3c:	3825883a 	mov	r18,r7
 8014e40:	1906b03a 	or	r3,r3,r4
 8014e44:	0401ffc4 	movi	r16,2047
 8014e48:	003e1906 	br	80146b0 <__subdf3+0x84>
 8014e4c:	000b883a 	mov	r5,zero
 8014e50:	0005883a 	mov	r2,zero
 8014e54:	003e2e06 	br	8014710 <__subdf3+0xe4>
 8014e58:	0401ffc4 	movi	r16,2047
 8014e5c:	003e1406 	br	80146b0 <__subdf3+0x84>
 8014e60:	0005883a 	mov	r2,zero
 8014e64:	003f7506 	br	8014c3c <__subdf3+0x610>
 8014e68:	0005883a 	mov	r2,zero
 8014e6c:	0009883a 	mov	r4,zero
 8014e70:	003e7806 	br	8014854 <__subdf3+0x228>
 8014e74:	123ff804 	addi	r8,r2,-32
 8014e78:	01000804 	movi	r4,32
 8014e7c:	1a10d83a 	srl	r8,r3,r8
 8014e80:	11002526 	beq	r2,r4,8014f18 <__subdf3+0x8ec>
 8014e84:	01001004 	movi	r4,64
 8014e88:	2085c83a 	sub	r2,r4,r2
 8014e8c:	1884983a 	sll	r2,r3,r2
 8014e90:	1444b03a 	or	r2,r2,r17
 8014e94:	1004c03a 	cmpne	r2,r2,zero
 8014e98:	40a2b03a 	or	r17,r8,r2
 8014e9c:	0005883a 	mov	r2,zero
 8014ea0:	003f1606 	br	8014afc <__subdf3+0x4d0>
 8014ea4:	02000434 	movhi	r8,16
 8014ea8:	0009883a 	mov	r4,zero
 8014eac:	423fffc4 	addi	r8,r8,-1
 8014eb0:	00bfffc4 	movi	r2,-1
 8014eb4:	0401ffc4 	movi	r16,2047
 8014eb8:	003e6606 	br	8014854 <__subdf3+0x228>
 8014ebc:	1c62b03a 	or	r17,r3,r17
 8014ec0:	8822c03a 	cmpne	r17,r17,zero
 8014ec4:	0005883a 	mov	r2,zero
 8014ec8:	003f9906 	br	8014d30 <__subdf3+0x704>
 8014ecc:	2807883a 	mov	r3,r5
 8014ed0:	3023883a 	mov	r17,r6
 8014ed4:	0401ffc4 	movi	r16,2047
 8014ed8:	003df506 	br	80146b0 <__subdf3+0x84>
 8014edc:	2807883a 	mov	r3,r5
 8014ee0:	3023883a 	mov	r17,r6
 8014ee4:	003df206 	br	80146b0 <__subdf3+0x84>
 8014ee8:	123ff804 	addi	r8,r2,-32
 8014eec:	01000804 	movi	r4,32
 8014ef0:	1a10d83a 	srl	r8,r3,r8
 8014ef4:	11000a26 	beq	r2,r4,8014f20 <__subdf3+0x8f4>
 8014ef8:	01001004 	movi	r4,64
 8014efc:	2085c83a 	sub	r2,r4,r2
 8014f00:	1884983a 	sll	r2,r3,r2
 8014f04:	1444b03a 	or	r2,r2,r17
 8014f08:	1004c03a 	cmpne	r2,r2,zero
 8014f0c:	40a2b03a 	or	r17,r8,r2
 8014f10:	0005883a 	mov	r2,zero
 8014f14:	003f8606 	br	8014d30 <__subdf3+0x704>
 8014f18:	0005883a 	mov	r2,zero
 8014f1c:	003fdc06 	br	8014e90 <__subdf3+0x864>
 8014f20:	0005883a 	mov	r2,zero
 8014f24:	003ff706 	br	8014f04 <__subdf3+0x8d8>

08014f28 <__fixdfsi>:
 8014f28:	280cd53a 	srli	r6,r5,20
 8014f2c:	00c00434 	movhi	r3,16
 8014f30:	18ffffc4 	addi	r3,r3,-1
 8014f34:	3181ffcc 	andi	r6,r6,2047
 8014f38:	01c0ff84 	movi	r7,1022
 8014f3c:	28c6703a 	and	r3,r5,r3
 8014f40:	280ad7fa 	srli	r5,r5,31
 8014f44:	3980120e 	bge	r7,r6,8014f90 <__fixdfsi+0x68>
 8014f48:	00810744 	movi	r2,1053
 8014f4c:	11800c16 	blt	r2,r6,8014f80 <__fixdfsi+0x58>
 8014f50:	00810cc4 	movi	r2,1075
 8014f54:	1185c83a 	sub	r2,r2,r6
 8014f58:	01c007c4 	movi	r7,31
 8014f5c:	18c00434 	orhi	r3,r3,16
 8014f60:	38800d16 	blt	r7,r2,8014f98 <__fixdfsi+0x70>
 8014f64:	31befb44 	addi	r6,r6,-1043
 8014f68:	2084d83a 	srl	r2,r4,r2
 8014f6c:	1986983a 	sll	r3,r3,r6
 8014f70:	1884b03a 	or	r2,r3,r2
 8014f74:	28000726 	beq	r5,zero,8014f94 <__fixdfsi+0x6c>
 8014f78:	0085c83a 	sub	r2,zero,r2
 8014f7c:	f800283a 	ret
 8014f80:	00a00034 	movhi	r2,32768
 8014f84:	10bfffc4 	addi	r2,r2,-1
 8014f88:	2885883a 	add	r2,r5,r2
 8014f8c:	f800283a 	ret
 8014f90:	0005883a 	mov	r2,zero
 8014f94:	f800283a 	ret
 8014f98:	008104c4 	movi	r2,1043
 8014f9c:	1185c83a 	sub	r2,r2,r6
 8014fa0:	1884d83a 	srl	r2,r3,r2
 8014fa4:	003ff306 	br	8014f74 <__fixdfsi+0x4c>

08014fa8 <__floatsidf>:
 8014fa8:	defffd04 	addi	sp,sp,-12
 8014fac:	dfc00215 	stw	ra,8(sp)
 8014fb0:	dc400115 	stw	r17,4(sp)
 8014fb4:	dc000015 	stw	r16,0(sp)
 8014fb8:	20002b26 	beq	r4,zero,8015068 <__floatsidf+0xc0>
 8014fbc:	2023883a 	mov	r17,r4
 8014fc0:	2020d7fa 	srli	r16,r4,31
 8014fc4:	20002d16 	blt	r4,zero,801507c <__floatsidf+0xd4>
 8014fc8:	8809883a 	mov	r4,r17
 8014fcc:	801512c0 	call	801512c <__clzsi2>
 8014fd0:	01410784 	movi	r5,1054
 8014fd4:	288bc83a 	sub	r5,r5,r2
 8014fd8:	01010cc4 	movi	r4,1075
 8014fdc:	2149c83a 	sub	r4,r4,r5
 8014fe0:	00c007c4 	movi	r3,31
 8014fe4:	1900160e 	bge	r3,r4,8015040 <__floatsidf+0x98>
 8014fe8:	00c104c4 	movi	r3,1043
 8014fec:	1947c83a 	sub	r3,r3,r5
 8014ff0:	88c6983a 	sll	r3,r17,r3
 8014ff4:	00800434 	movhi	r2,16
 8014ff8:	10bfffc4 	addi	r2,r2,-1
 8014ffc:	1886703a 	and	r3,r3,r2
 8015000:	2941ffcc 	andi	r5,r5,2047
 8015004:	800d883a 	mov	r6,r16
 8015008:	0005883a 	mov	r2,zero
 801500c:	280a953a 	slli	r5,r5,20
 8015010:	31803fcc 	andi	r6,r6,255
 8015014:	01000434 	movhi	r4,16
 8015018:	300c97fa 	slli	r6,r6,31
 801501c:	213fffc4 	addi	r4,r4,-1
 8015020:	1906703a 	and	r3,r3,r4
 8015024:	1946b03a 	or	r3,r3,r5
 8015028:	1986b03a 	or	r3,r3,r6
 801502c:	dfc00217 	ldw	ra,8(sp)
 8015030:	dc400117 	ldw	r17,4(sp)
 8015034:	dc000017 	ldw	r16,0(sp)
 8015038:	dec00304 	addi	sp,sp,12
 801503c:	f800283a 	ret
 8015040:	00c002c4 	movi	r3,11
 8015044:	1887c83a 	sub	r3,r3,r2
 8015048:	88c6d83a 	srl	r3,r17,r3
 801504c:	8904983a 	sll	r2,r17,r4
 8015050:	01000434 	movhi	r4,16
 8015054:	213fffc4 	addi	r4,r4,-1
 8015058:	2941ffcc 	andi	r5,r5,2047
 801505c:	1906703a 	and	r3,r3,r4
 8015060:	800d883a 	mov	r6,r16
 8015064:	003fe906 	br	801500c <__floatsidf+0x64>
 8015068:	000d883a 	mov	r6,zero
 801506c:	000b883a 	mov	r5,zero
 8015070:	0007883a 	mov	r3,zero
 8015074:	0005883a 	mov	r2,zero
 8015078:	003fe406 	br	801500c <__floatsidf+0x64>
 801507c:	0123c83a 	sub	r17,zero,r4
 8015080:	003fd106 	br	8014fc8 <__floatsidf+0x20>

08015084 <__floatunsidf>:
 8015084:	defffe04 	addi	sp,sp,-8
 8015088:	dc000015 	stw	r16,0(sp)
 801508c:	dfc00115 	stw	ra,4(sp)
 8015090:	2021883a 	mov	r16,r4
 8015094:	20002226 	beq	r4,zero,8015120 <__floatunsidf+0x9c>
 8015098:	801512c0 	call	801512c <__clzsi2>
 801509c:	01010784 	movi	r4,1054
 80150a0:	2089c83a 	sub	r4,r4,r2
 80150a4:	01810cc4 	movi	r6,1075
 80150a8:	310dc83a 	sub	r6,r6,r4
 80150ac:	00c007c4 	movi	r3,31
 80150b0:	1980120e 	bge	r3,r6,80150fc <__floatunsidf+0x78>
 80150b4:	00c104c4 	movi	r3,1043
 80150b8:	1907c83a 	sub	r3,r3,r4
 80150bc:	80ca983a 	sll	r5,r16,r3
 80150c0:	00800434 	movhi	r2,16
 80150c4:	10bfffc4 	addi	r2,r2,-1
 80150c8:	2101ffcc 	andi	r4,r4,2047
 80150cc:	0021883a 	mov	r16,zero
 80150d0:	288a703a 	and	r5,r5,r2
 80150d4:	2008953a 	slli	r4,r4,20
 80150d8:	00c00434 	movhi	r3,16
 80150dc:	18ffffc4 	addi	r3,r3,-1
 80150e0:	28c6703a 	and	r3,r5,r3
 80150e4:	8005883a 	mov	r2,r16
 80150e8:	1906b03a 	or	r3,r3,r4
 80150ec:	dfc00117 	ldw	ra,4(sp)
 80150f0:	dc000017 	ldw	r16,0(sp)
 80150f4:	dec00204 	addi	sp,sp,8
 80150f8:	f800283a 	ret
 80150fc:	00c002c4 	movi	r3,11
 8015100:	188bc83a 	sub	r5,r3,r2
 8015104:	814ad83a 	srl	r5,r16,r5
 8015108:	00c00434 	movhi	r3,16
 801510c:	18ffffc4 	addi	r3,r3,-1
 8015110:	81a0983a 	sll	r16,r16,r6
 8015114:	2101ffcc 	andi	r4,r4,2047
 8015118:	28ca703a 	and	r5,r5,r3
 801511c:	003fed06 	br	80150d4 <__floatunsidf+0x50>
 8015120:	0009883a 	mov	r4,zero
 8015124:	000b883a 	mov	r5,zero
 8015128:	003fea06 	br	80150d4 <__floatunsidf+0x50>

0801512c <__clzsi2>:
 801512c:	00bfffd4 	movui	r2,65535
 8015130:	11000536 	bltu	r2,r4,8015148 <__clzsi2+0x1c>
 8015134:	00803fc4 	movi	r2,255
 8015138:	11000f36 	bltu	r2,r4,8015178 <__clzsi2+0x4c>
 801513c:	00800804 	movi	r2,32
 8015140:	0007883a 	mov	r3,zero
 8015144:	00000506 	br	801515c <__clzsi2+0x30>
 8015148:	00804034 	movhi	r2,256
 801514c:	10bfffc4 	addi	r2,r2,-1
 8015150:	11000c2e 	bgeu	r2,r4,8015184 <__clzsi2+0x58>
 8015154:	00800204 	movi	r2,8
 8015158:	00c00604 	movi	r3,24
 801515c:	20c8d83a 	srl	r4,r4,r3
 8015160:	00c200b4 	movhi	r3,2050
 8015164:	18e13c04 	addi	r3,r3,-31504
 8015168:	1909883a 	add	r4,r3,r4
 801516c:	20c00003 	ldbu	r3,0(r4)
 8015170:	10c5c83a 	sub	r2,r2,r3
 8015174:	f800283a 	ret
 8015178:	00800604 	movi	r2,24
 801517c:	00c00204 	movi	r3,8
 8015180:	003ff606 	br	801515c <__clzsi2+0x30>
 8015184:	00800404 	movi	r2,16
 8015188:	1007883a 	mov	r3,r2
 801518c:	003ff306 	br	801515c <__clzsi2+0x30>

08015190 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015190:	defffe04 	addi	sp,sp,-8
 8015194:	dfc00115 	stw	ra,4(sp)
 8015198:	df000015 	stw	fp,0(sp)
 801519c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80151a0:	d0a01a17 	ldw	r2,-32664(gp)
 80151a4:	10000326 	beq	r2,zero,80151b4 <alt_get_errno+0x24>
 80151a8:	d0a01a17 	ldw	r2,-32664(gp)
 80151ac:	103ee83a 	callr	r2
 80151b0:	00000106 	br	80151b8 <alt_get_errno+0x28>
 80151b4:	d0a72c04 	addi	r2,gp,-25424
}
 80151b8:	e037883a 	mov	sp,fp
 80151bc:	dfc00117 	ldw	ra,4(sp)
 80151c0:	df000017 	ldw	fp,0(sp)
 80151c4:	dec00204 	addi	sp,sp,8
 80151c8:	f800283a 	ret

080151cc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 80151cc:	defffb04 	addi	sp,sp,-20
 80151d0:	dfc00415 	stw	ra,16(sp)
 80151d4:	df000315 	stw	fp,12(sp)
 80151d8:	df000304 	addi	fp,sp,12
 80151dc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 80151e0:	e0bfff17 	ldw	r2,-4(fp)
 80151e4:	10000816 	blt	r2,zero,8015208 <close+0x3c>
 80151e8:	01400304 	movi	r5,12
 80151ec:	e13fff17 	ldw	r4,-4(fp)
 80151f0:	8007e400 	call	8007e40 <__mulsi3>
 80151f4:	1007883a 	mov	r3,r2
 80151f8:	008200b4 	movhi	r2,2050
 80151fc:	10a3d004 	addi	r2,r2,-28864
 8015200:	1885883a 	add	r2,r3,r2
 8015204:	00000106 	br	801520c <close+0x40>
 8015208:	0005883a 	mov	r2,zero
 801520c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8015210:	e0bffd17 	ldw	r2,-12(fp)
 8015214:	10001926 	beq	r2,zero,801527c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8015218:	e0bffd17 	ldw	r2,-12(fp)
 801521c:	10800017 	ldw	r2,0(r2)
 8015220:	10800417 	ldw	r2,16(r2)
 8015224:	10000626 	beq	r2,zero,8015240 <close+0x74>
 8015228:	e0bffd17 	ldw	r2,-12(fp)
 801522c:	10800017 	ldw	r2,0(r2)
 8015230:	10800417 	ldw	r2,16(r2)
 8015234:	e13ffd17 	ldw	r4,-12(fp)
 8015238:	103ee83a 	callr	r2
 801523c:	00000106 	br	8015244 <close+0x78>
 8015240:	0005883a 	mov	r2,zero
 8015244:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8015248:	e13fff17 	ldw	r4,-4(fp)
 801524c:	8015aa80 	call	8015aa8 <alt_release_fd>
    if (rval < 0)
 8015250:	e0bffe17 	ldw	r2,-8(fp)
 8015254:	1000070e 	bge	r2,zero,8015274 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 8015258:	80151900 	call	8015190 <alt_get_errno>
 801525c:	1007883a 	mov	r3,r2
 8015260:	e0bffe17 	ldw	r2,-8(fp)
 8015264:	0085c83a 	sub	r2,zero,r2
 8015268:	18800015 	stw	r2,0(r3)
      return -1;
 801526c:	00bfffc4 	movi	r2,-1
 8015270:	00000706 	br	8015290 <close+0xc4>
    }
    return 0;
 8015274:	0005883a 	mov	r2,zero
 8015278:	00000506 	br	8015290 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 801527c:	80151900 	call	8015190 <alt_get_errno>
 8015280:	1007883a 	mov	r3,r2
 8015284:	00801444 	movi	r2,81
 8015288:	18800015 	stw	r2,0(r3)
    return -1;
 801528c:	00bfffc4 	movi	r2,-1
  }
}
 8015290:	e037883a 	mov	sp,fp
 8015294:	dfc00117 	ldw	ra,4(sp)
 8015298:	df000017 	ldw	fp,0(sp)
 801529c:	dec00204 	addi	sp,sp,8
 80152a0:	f800283a 	ret

080152a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80152a4:	defffc04 	addi	sp,sp,-16
 80152a8:	df000315 	stw	fp,12(sp)
 80152ac:	df000304 	addi	fp,sp,12
 80152b0:	e13ffd15 	stw	r4,-12(fp)
 80152b4:	e17ffe15 	stw	r5,-8(fp)
 80152b8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 80152bc:	e0bfff17 	ldw	r2,-4(fp)
}
 80152c0:	e037883a 	mov	sp,fp
 80152c4:	df000017 	ldw	fp,0(sp)
 80152c8:	dec00104 	addi	sp,sp,4
 80152cc:	f800283a 	ret

080152d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80152d0:	defffe04 	addi	sp,sp,-8
 80152d4:	dfc00115 	stw	ra,4(sp)
 80152d8:	df000015 	stw	fp,0(sp)
 80152dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80152e0:	d0a01a17 	ldw	r2,-32664(gp)
 80152e4:	10000326 	beq	r2,zero,80152f4 <alt_get_errno+0x24>
 80152e8:	d0a01a17 	ldw	r2,-32664(gp)
 80152ec:	103ee83a 	callr	r2
 80152f0:	00000106 	br	80152f8 <alt_get_errno+0x28>
 80152f4:	d0a72c04 	addi	r2,gp,-25424
}
 80152f8:	e037883a 	mov	sp,fp
 80152fc:	dfc00117 	ldw	ra,4(sp)
 8015300:	df000017 	ldw	fp,0(sp)
 8015304:	dec00204 	addi	sp,sp,8
 8015308:	f800283a 	ret

0801530c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 801530c:	defffb04 	addi	sp,sp,-20
 8015310:	dfc00415 	stw	ra,16(sp)
 8015314:	df000315 	stw	fp,12(sp)
 8015318:	df000304 	addi	fp,sp,12
 801531c:	e13ffe15 	stw	r4,-8(fp)
 8015320:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8015324:	e0bffe17 	ldw	r2,-8(fp)
 8015328:	10000816 	blt	r2,zero,801534c <fstat+0x40>
 801532c:	01400304 	movi	r5,12
 8015330:	e13ffe17 	ldw	r4,-8(fp)
 8015334:	8007e400 	call	8007e40 <__mulsi3>
 8015338:	1007883a 	mov	r3,r2
 801533c:	008200b4 	movhi	r2,2050
 8015340:	10a3d004 	addi	r2,r2,-28864
 8015344:	1885883a 	add	r2,r3,r2
 8015348:	00000106 	br	8015350 <fstat+0x44>
 801534c:	0005883a 	mov	r2,zero
 8015350:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8015354:	e0bffd17 	ldw	r2,-12(fp)
 8015358:	10001026 	beq	r2,zero,801539c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 801535c:	e0bffd17 	ldw	r2,-12(fp)
 8015360:	10800017 	ldw	r2,0(r2)
 8015364:	10800817 	ldw	r2,32(r2)
 8015368:	10000726 	beq	r2,zero,8015388 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 801536c:	e0bffd17 	ldw	r2,-12(fp)
 8015370:	10800017 	ldw	r2,0(r2)
 8015374:	10800817 	ldw	r2,32(r2)
 8015378:	e17fff17 	ldw	r5,-4(fp)
 801537c:	e13ffd17 	ldw	r4,-12(fp)
 8015380:	103ee83a 	callr	r2
 8015384:	00000a06 	br	80153b0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8015388:	e0bfff17 	ldw	r2,-4(fp)
 801538c:	00c80004 	movi	r3,8192
 8015390:	10c00115 	stw	r3,4(r2)
      return 0;
 8015394:	0005883a 	mov	r2,zero
 8015398:	00000506 	br	80153b0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 801539c:	80152d00 	call	80152d0 <alt_get_errno>
 80153a0:	1007883a 	mov	r3,r2
 80153a4:	00801444 	movi	r2,81
 80153a8:	18800015 	stw	r2,0(r3)
    return -1;
 80153ac:	00bfffc4 	movi	r2,-1
  }
}
 80153b0:	e037883a 	mov	sp,fp
 80153b4:	dfc00117 	ldw	ra,4(sp)
 80153b8:	df000017 	ldw	fp,0(sp)
 80153bc:	dec00204 	addi	sp,sp,8
 80153c0:	f800283a 	ret

080153c4 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
 80153c4:	defff404 	addi	sp,sp,-48
 80153c8:	dfc00b15 	stw	ra,44(sp)
 80153cc:	df000a15 	stw	fp,40(sp)
 80153d0:	dd000915 	stw	r20,36(sp)
 80153d4:	dcc00815 	stw	r19,32(sp)
 80153d8:	dc800715 	stw	r18,28(sp)
 80153dc:	dc400615 	stw	r17,24(sp)
 80153e0:	dc000515 	stw	r16,20(sp)
 80153e4:	df000a04 	addi	fp,sp,40
 80153e8:	e13ff915 	stw	r4,-28(fp)
 80153ec:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
 80153f0:	e0bffa17 	ldw	r2,-24(fp)
 80153f4:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80153f8:	d0a73b17 	ldw	r2,-25364(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
 80153fc:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8015400:	d0a73a17 	ldw	r2,-25368(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
 8015404:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
 8015408:	e0bff817 	ldw	r2,-32(fp)
 801540c:	10005f26 	beq	r2,zero,801558c <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 8015410:	d0a73517 	ldw	r2,-25388(gp)
 8015414:	1029883a 	mov	r20,r2
 8015418:	e17ff817 	ldw	r5,-32(fp)
 801541c:	e13ff717 	ldw	r4,-36(fp)
 8015420:	8007d840 	call	8007d84 <__udivsi3>
 8015424:	a085883a 	add	r2,r20,r2
 8015428:	1007883a 	mov	r3,r2
 801542c:	e0bff917 	ldw	r2,-28(fp)
 8015430:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
 8015434:	d0a73617 	ldw	r2,-25384(gp)
 8015438:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
 801543c:	e0bff717 	ldw	r2,-36(fp)
 8015440:	1021883a 	mov	r16,r2
 8015444:	0023883a 	mov	r17,zero
 8015448:	e17ff817 	ldw	r5,-32(fp)
 801544c:	010003f4 	movhi	r4,15
 8015450:	21109004 	addi	r4,r4,16960
 8015454:	8007d840 	call	8007d84 <__udivsi3>
 8015458:	1025883a 	mov	r18,r2
 801545c:	0027883a 	mov	r19,zero
 8015460:	900d883a 	mov	r6,r18
 8015464:	980f883a 	mov	r7,r19
 8015468:	8009883a 	mov	r4,r16
 801546c:	880b883a 	mov	r5,r17
 8015470:	8017eb40 	call	8017eb4 <__muldi3>
 8015474:	1009883a 	mov	r4,r2
 8015478:	180b883a 	mov	r5,r3
 801547c:	2005883a 	mov	r2,r4
 8015480:	2807883a 	mov	r3,r5
 8015484:	018003f4 	movhi	r6,15
 8015488:	31909004 	addi	r6,r6,16960
 801548c:	000f883a 	mov	r7,zero
 8015490:	1009883a 	mov	r4,r2
 8015494:	180b883a 	mov	r5,r3
 8015498:	80123280 	call	8012328 <__umoddi3>
 801549c:	1009883a 	mov	r4,r2
 80154a0:	180b883a 	mov	r5,r3
 80154a4:	2005883a 	mov	r2,r4
 80154a8:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
 80154ac:	a085883a 	add	r2,r20,r2
 80154b0:	1007883a 	mov	r3,r2
 80154b4:	e0bff917 	ldw	r2,-28(fp)
 80154b8:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 80154bc:	00001406 	br	8015510 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
 80154c0:	e0bff917 	ldw	r2,-28(fp)
 80154c4:	10800017 	ldw	r2,0(r2)
 80154c8:	00800516 	blt	zero,r2,80154e0 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
 80154cc:	e0bff917 	ldw	r2,-28(fp)
 80154d0:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
 80154d4:	e0bff917 	ldw	r2,-28(fp)
 80154d8:	10000115 	stw	zero,4(r2)
          break;
 80154dc:	00000f06 	br	801551c <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
 80154e0:	e0bff917 	ldw	r2,-28(fp)
 80154e4:	10800017 	ldw	r2,0(r2)
 80154e8:	10ffffc4 	addi	r3,r2,-1
 80154ec:	e0bff917 	ldw	r2,-28(fp)
 80154f0:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
 80154f4:	e0bff917 	ldw	r2,-28(fp)
 80154f8:	10c00117 	ldw	r3,4(r2)
 80154fc:	008003f4 	movhi	r2,15
 8015500:	10909004 	addi	r2,r2,16960
 8015504:	1887883a 	add	r3,r3,r2
 8015508:	e0bff917 	ldw	r2,-28(fp)
 801550c:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 8015510:	e0bff917 	ldw	r2,-28(fp)
 8015514:	10800117 	ldw	r2,4(r2)
 8015518:	103fe916 	blt	r2,zero,80154c0 <gettimeofday+0xfc>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 801551c:	00000c06 	br	8015550 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
 8015520:	e0bff917 	ldw	r2,-28(fp)
 8015524:	10800017 	ldw	r2,0(r2)
 8015528:	10c00044 	addi	r3,r2,1
 801552c:	e0bff917 	ldw	r2,-28(fp)
 8015530:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
 8015534:	e0bff917 	ldw	r2,-28(fp)
 8015538:	10c00117 	ldw	r3,4(r2)
 801553c:	00bffc74 	movhi	r2,65521
 8015540:	10af7004 	addi	r2,r2,-16960
 8015544:	1887883a 	add	r3,r3,r2
 8015548:	e0bff917 	ldw	r2,-28(fp)
 801554c:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 8015550:	e0bff917 	ldw	r2,-28(fp)
 8015554:	10c00117 	ldw	r3,4(r2)
 8015558:	008003f4 	movhi	r2,15
 801555c:	10908fc4 	addi	r2,r2,16959
 8015560:	10ffef16 	blt	r2,r3,8015520 <gettimeofday+0x15c>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
 8015564:	e0bff617 	ldw	r2,-40(fp)
 8015568:	10000626 	beq	r2,zero,8015584 <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
 801556c:	d0e73317 	ldw	r3,-25396(gp)
 8015570:	e0bff617 	ldw	r2,-40(fp)
 8015574:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
 8015578:	d0e73417 	ldw	r3,-25392(gp)
 801557c:	e0bff617 	ldw	r2,-40(fp)
 8015580:	10c00115 	stw	r3,4(r2)
    }

    return 0;
 8015584:	0005883a 	mov	r2,zero
 8015588:	00000106 	br	8015590 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
 801558c:	00bfde84 	movi	r2,-134
}
 8015590:	e6fffb04 	addi	sp,fp,-20
 8015594:	dfc00617 	ldw	ra,24(sp)
 8015598:	df000517 	ldw	fp,20(sp)
 801559c:	dd000417 	ldw	r20,16(sp)
 80155a0:	dcc00317 	ldw	r19,12(sp)
 80155a4:	dc800217 	ldw	r18,8(sp)
 80155a8:	dc400117 	ldw	r17,4(sp)
 80155ac:	dc000017 	ldw	r16,0(sp)
 80155b0:	dec00704 	addi	sp,sp,28
 80155b4:	f800283a 	ret

080155b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80155b8:	defffe04 	addi	sp,sp,-8
 80155bc:	dfc00115 	stw	ra,4(sp)
 80155c0:	df000015 	stw	fp,0(sp)
 80155c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80155c8:	d0a01a17 	ldw	r2,-32664(gp)
 80155cc:	10000326 	beq	r2,zero,80155dc <alt_get_errno+0x24>
 80155d0:	d0a01a17 	ldw	r2,-32664(gp)
 80155d4:	103ee83a 	callr	r2
 80155d8:	00000106 	br	80155e0 <alt_get_errno+0x28>
 80155dc:	d0a72c04 	addi	r2,gp,-25424
}
 80155e0:	e037883a 	mov	sp,fp
 80155e4:	dfc00117 	ldw	ra,4(sp)
 80155e8:	df000017 	ldw	fp,0(sp)
 80155ec:	dec00204 	addi	sp,sp,8
 80155f0:	f800283a 	ret

080155f4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 80155f4:	deffed04 	addi	sp,sp,-76
 80155f8:	dfc01215 	stw	ra,72(sp)
 80155fc:	df001115 	stw	fp,68(sp)
 8015600:	df001104 	addi	fp,sp,68
 8015604:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8015608:	e0bfff17 	ldw	r2,-4(fp)
 801560c:	10000816 	blt	r2,zero,8015630 <isatty+0x3c>
 8015610:	01400304 	movi	r5,12
 8015614:	e13fff17 	ldw	r4,-4(fp)
 8015618:	8007e400 	call	8007e40 <__mulsi3>
 801561c:	1007883a 	mov	r3,r2
 8015620:	008200b4 	movhi	r2,2050
 8015624:	10a3d004 	addi	r2,r2,-28864
 8015628:	1885883a 	add	r2,r3,r2
 801562c:	00000106 	br	8015634 <isatty+0x40>
 8015630:	0005883a 	mov	r2,zero
 8015634:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8015638:	e0bfef17 	ldw	r2,-68(fp)
 801563c:	10000e26 	beq	r2,zero,8015678 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8015640:	e0bfef17 	ldw	r2,-68(fp)
 8015644:	10800017 	ldw	r2,0(r2)
 8015648:	10800817 	ldw	r2,32(r2)
 801564c:	1000021e 	bne	r2,zero,8015658 <isatty+0x64>
    {
      return 1;
 8015650:	00800044 	movi	r2,1
 8015654:	00000d06 	br	801568c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8015658:	e0bff004 	addi	r2,fp,-64
 801565c:	100b883a 	mov	r5,r2
 8015660:	e13fff17 	ldw	r4,-4(fp)
 8015664:	801530c0 	call	801530c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8015668:	e0bff117 	ldw	r2,-60(fp)
 801566c:	10880020 	cmpeqi	r2,r2,8192
 8015670:	10803fcc 	andi	r2,r2,255
 8015674:	00000506 	br	801568c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8015678:	80155b80 	call	80155b8 <alt_get_errno>
 801567c:	1007883a 	mov	r3,r2
 8015680:	00801444 	movi	r2,81
 8015684:	18800015 	stw	r2,0(r3)
    return 0;
 8015688:	0005883a 	mov	r2,zero
  }
}
 801568c:	e037883a 	mov	sp,fp
 8015690:	dfc00117 	ldw	ra,4(sp)
 8015694:	df000017 	ldw	fp,0(sp)
 8015698:	dec00204 	addi	sp,sp,8
 801569c:	f800283a 	ret

080156a0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 80156a0:	defffc04 	addi	sp,sp,-16
 80156a4:	df000315 	stw	fp,12(sp)
 80156a8:	df000304 	addi	fp,sp,12
 80156ac:	e13ffd15 	stw	r4,-12(fp)
 80156b0:	e17ffe15 	stw	r5,-8(fp)
 80156b4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 80156b8:	e0fffe17 	ldw	r3,-8(fp)
 80156bc:	e0bffd17 	ldw	r2,-12(fp)
 80156c0:	18800c26 	beq	r3,r2,80156f4 <alt_load_section+0x54>
  {
    while( to != end )
 80156c4:	00000806 	br	80156e8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 80156c8:	e0bffe17 	ldw	r2,-8(fp)
 80156cc:	10c00104 	addi	r3,r2,4
 80156d0:	e0fffe15 	stw	r3,-8(fp)
 80156d4:	e0fffd17 	ldw	r3,-12(fp)
 80156d8:	19000104 	addi	r4,r3,4
 80156dc:	e13ffd15 	stw	r4,-12(fp)
 80156e0:	18c00017 	ldw	r3,0(r3)
 80156e4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 80156e8:	e0fffe17 	ldw	r3,-8(fp)
 80156ec:	e0bfff17 	ldw	r2,-4(fp)
 80156f0:	18bff51e 	bne	r3,r2,80156c8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 80156f4:	0001883a 	nop
 80156f8:	e037883a 	mov	sp,fp
 80156fc:	df000017 	ldw	fp,0(sp)
 8015700:	dec00104 	addi	sp,sp,4
 8015704:	f800283a 	ret

08015708 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8015708:	defffe04 	addi	sp,sp,-8
 801570c:	dfc00115 	stw	ra,4(sp)
 8015710:	df000015 	stw	fp,0(sp)
 8015714:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8015718:	018200b4 	movhi	r6,2050
 801571c:	31a86704 	addi	r6,r6,-24164
 8015720:	014200b4 	movhi	r5,2050
 8015724:	29618904 	addi	r5,r5,-31196
 8015728:	010200b4 	movhi	r4,2050
 801572c:	21286704 	addi	r4,r4,-24164
 8015730:	80156a00 	call	80156a0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8015734:	01820034 	movhi	r6,2048
 8015738:	31808c04 	addi	r6,r6,560
 801573c:	01420034 	movhi	r5,2048
 8015740:	29400804 	addi	r5,r5,32
 8015744:	01020034 	movhi	r4,2048
 8015748:	21000804 	addi	r4,r4,32
 801574c:	80156a00 	call	80156a0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8015750:	018200b4 	movhi	r6,2050
 8015754:	31a18904 	addi	r6,r6,-31196
 8015758:	01420074 	movhi	r5,2049
 801575c:	295ffd04 	addi	r5,r5,32756
 8015760:	01020074 	movhi	r4,2049
 8015764:	211ffd04 	addi	r4,r4,32756
 8015768:	80156a00 	call	80156a0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 801576c:	80170500 	call	8017050 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8015770:	80172100 	call	8017210 <alt_icache_flush_all>
}
 8015774:	0001883a 	nop
 8015778:	e037883a 	mov	sp,fp
 801577c:	dfc00117 	ldw	ra,4(sp)
 8015780:	df000017 	ldw	fp,0(sp)
 8015784:	dec00204 	addi	sp,sp,8
 8015788:	f800283a 	ret

0801578c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801578c:	defffe04 	addi	sp,sp,-8
 8015790:	dfc00115 	stw	ra,4(sp)
 8015794:	df000015 	stw	fp,0(sp)
 8015798:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801579c:	d0a01a17 	ldw	r2,-32664(gp)
 80157a0:	10000326 	beq	r2,zero,80157b0 <alt_get_errno+0x24>
 80157a4:	d0a01a17 	ldw	r2,-32664(gp)
 80157a8:	103ee83a 	callr	r2
 80157ac:	00000106 	br	80157b4 <alt_get_errno+0x28>
 80157b0:	d0a72c04 	addi	r2,gp,-25424
}
 80157b4:	e037883a 	mov	sp,fp
 80157b8:	dfc00117 	ldw	ra,4(sp)
 80157bc:	df000017 	ldw	fp,0(sp)
 80157c0:	dec00204 	addi	sp,sp,8
 80157c4:	f800283a 	ret

080157c8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 80157c8:	defff904 	addi	sp,sp,-28
 80157cc:	dfc00615 	stw	ra,24(sp)
 80157d0:	df000515 	stw	fp,20(sp)
 80157d4:	df000504 	addi	fp,sp,20
 80157d8:	e13ffd15 	stw	r4,-12(fp)
 80157dc:	e17ffe15 	stw	r5,-8(fp)
 80157e0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 80157e4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80157e8:	e0bffd17 	ldw	r2,-12(fp)
 80157ec:	10000816 	blt	r2,zero,8015810 <lseek+0x48>
 80157f0:	01400304 	movi	r5,12
 80157f4:	e13ffd17 	ldw	r4,-12(fp)
 80157f8:	8007e400 	call	8007e40 <__mulsi3>
 80157fc:	1007883a 	mov	r3,r2
 8015800:	008200b4 	movhi	r2,2050
 8015804:	10a3d004 	addi	r2,r2,-28864
 8015808:	1885883a 	add	r2,r3,r2
 801580c:	00000106 	br	8015814 <lseek+0x4c>
 8015810:	0005883a 	mov	r2,zero
 8015814:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8015818:	e0bffc17 	ldw	r2,-16(fp)
 801581c:	10001026 	beq	r2,zero,8015860 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8015820:	e0bffc17 	ldw	r2,-16(fp)
 8015824:	10800017 	ldw	r2,0(r2)
 8015828:	10800717 	ldw	r2,28(r2)
 801582c:	10000926 	beq	r2,zero,8015854 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8015830:	e0bffc17 	ldw	r2,-16(fp)
 8015834:	10800017 	ldw	r2,0(r2)
 8015838:	10800717 	ldw	r2,28(r2)
 801583c:	e1bfff17 	ldw	r6,-4(fp)
 8015840:	e17ffe17 	ldw	r5,-8(fp)
 8015844:	e13ffc17 	ldw	r4,-16(fp)
 8015848:	103ee83a 	callr	r2
 801584c:	e0bffb15 	stw	r2,-20(fp)
 8015850:	00000506 	br	8015868 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8015854:	00bfde84 	movi	r2,-134
 8015858:	e0bffb15 	stw	r2,-20(fp)
 801585c:	00000206 	br	8015868 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 8015860:	00bfebc4 	movi	r2,-81
 8015864:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8015868:	e0bffb17 	ldw	r2,-20(fp)
 801586c:	1000070e 	bge	r2,zero,801588c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 8015870:	801578c0 	call	801578c <alt_get_errno>
 8015874:	1007883a 	mov	r3,r2
 8015878:	e0bffb17 	ldw	r2,-20(fp)
 801587c:	0085c83a 	sub	r2,zero,r2
 8015880:	18800015 	stw	r2,0(r3)
    rc = -1;
 8015884:	00bfffc4 	movi	r2,-1
 8015888:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 801588c:	e0bffb17 	ldw	r2,-20(fp)
}
 8015890:	e037883a 	mov	sp,fp
 8015894:	dfc00117 	ldw	ra,4(sp)
 8015898:	df000017 	ldw	fp,0(sp)
 801589c:	dec00204 	addi	sp,sp,8
 80158a0:	f800283a 	ret

080158a4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 80158a4:	defffd04 	addi	sp,sp,-12
 80158a8:	dfc00215 	stw	ra,8(sp)
 80158ac:	df000115 	stw	fp,4(sp)
 80158b0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 80158b4:	0009883a 	mov	r4,zero
 80158b8:	8015fd40 	call	8015fd4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 80158bc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 80158c0:	801600c0 	call	801600c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 80158c4:	018200b4 	movhi	r6,2050
 80158c8:	31a17f04 	addi	r6,r6,-31236
 80158cc:	014200b4 	movhi	r5,2050
 80158d0:	29617f04 	addi	r5,r5,-31236
 80158d4:	010200b4 	movhi	r4,2050
 80158d8:	21217f04 	addi	r4,r4,-31236
 80158dc:	80175b40 	call	80175b4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 80158e0:	80171500 	call	8017150 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 80158e4:	01020074 	movhi	r4,2049
 80158e8:	211c6c04 	addi	r4,r4,29104
 80158ec:	8017bd00 	call	8017bd0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 80158f0:	d0a73717 	ldw	r2,-25380(gp)
 80158f4:	d0e73817 	ldw	r3,-25376(gp)
 80158f8:	d1273917 	ldw	r4,-25372(gp)
 80158fc:	200d883a 	mov	r6,r4
 8015900:	180b883a 	mov	r5,r3
 8015904:	1009883a 	mov	r4,r2
 8015908:	8007ac80 	call	8007ac8 <main>
 801590c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8015910:	01000044 	movi	r4,1
 8015914:	80151cc0 	call	80151cc <close>
  exit (result);
 8015918:	e13fff17 	ldw	r4,-4(fp)
 801591c:	8017be40 	call	8017be4 <exit>

08015920 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8015920:	defffe04 	addi	sp,sp,-8
 8015924:	df000115 	stw	fp,4(sp)
 8015928:	df000104 	addi	fp,sp,4
 801592c:	e13fff15 	stw	r4,-4(fp)
}
 8015930:	0001883a 	nop
 8015934:	e037883a 	mov	sp,fp
 8015938:	df000017 	ldw	fp,0(sp)
 801593c:	dec00104 	addi	sp,sp,4
 8015940:	f800283a 	ret

08015944 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8015944:	defffe04 	addi	sp,sp,-8
 8015948:	df000115 	stw	fp,4(sp)
 801594c:	df000104 	addi	fp,sp,4
 8015950:	e13fff15 	stw	r4,-4(fp)
}
 8015954:	0001883a 	nop
 8015958:	e037883a 	mov	sp,fp
 801595c:	df000017 	ldw	fp,0(sp)
 8015960:	dec00104 	addi	sp,sp,4
 8015964:	f800283a 	ret

08015968 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015968:	defffe04 	addi	sp,sp,-8
 801596c:	dfc00115 	stw	ra,4(sp)
 8015970:	df000015 	stw	fp,0(sp)
 8015974:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8015978:	d0a01a17 	ldw	r2,-32664(gp)
 801597c:	10000326 	beq	r2,zero,801598c <alt_get_errno+0x24>
 8015980:	d0a01a17 	ldw	r2,-32664(gp)
 8015984:	103ee83a 	callr	r2
 8015988:	00000106 	br	8015990 <alt_get_errno+0x28>
 801598c:	d0a72c04 	addi	r2,gp,-25424
}
 8015990:	e037883a 	mov	sp,fp
 8015994:	dfc00117 	ldw	ra,4(sp)
 8015998:	df000017 	ldw	fp,0(sp)
 801599c:	dec00204 	addi	sp,sp,8
 80159a0:	f800283a 	ret

080159a4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 80159a4:	defff904 	addi	sp,sp,-28
 80159a8:	dfc00615 	stw	ra,24(sp)
 80159ac:	df000515 	stw	fp,20(sp)
 80159b0:	df000504 	addi	fp,sp,20
 80159b4:	e13ffd15 	stw	r4,-12(fp)
 80159b8:	e17ffe15 	stw	r5,-8(fp)
 80159bc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80159c0:	e0bffd17 	ldw	r2,-12(fp)
 80159c4:	10000816 	blt	r2,zero,80159e8 <read+0x44>
 80159c8:	01400304 	movi	r5,12
 80159cc:	e13ffd17 	ldw	r4,-12(fp)
 80159d0:	8007e400 	call	8007e40 <__mulsi3>
 80159d4:	1007883a 	mov	r3,r2
 80159d8:	008200b4 	movhi	r2,2050
 80159dc:	10a3d004 	addi	r2,r2,-28864
 80159e0:	1885883a 	add	r2,r3,r2
 80159e4:	00000106 	br	80159ec <read+0x48>
 80159e8:	0005883a 	mov	r2,zero
 80159ec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 80159f0:	e0bffb17 	ldw	r2,-20(fp)
 80159f4:	10002226 	beq	r2,zero,8015a80 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 80159f8:	e0bffb17 	ldw	r2,-20(fp)
 80159fc:	10800217 	ldw	r2,8(r2)
 8015a00:	108000cc 	andi	r2,r2,3
 8015a04:	10800060 	cmpeqi	r2,r2,1
 8015a08:	1000181e 	bne	r2,zero,8015a6c <read+0xc8>
        (fd->dev->read))
 8015a0c:	e0bffb17 	ldw	r2,-20(fp)
 8015a10:	10800017 	ldw	r2,0(r2)
 8015a14:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8015a18:	10001426 	beq	r2,zero,8015a6c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8015a1c:	e0bffb17 	ldw	r2,-20(fp)
 8015a20:	10800017 	ldw	r2,0(r2)
 8015a24:	10800517 	ldw	r2,20(r2)
 8015a28:	e0ffff17 	ldw	r3,-4(fp)
 8015a2c:	180d883a 	mov	r6,r3
 8015a30:	e17ffe17 	ldw	r5,-8(fp)
 8015a34:	e13ffb17 	ldw	r4,-20(fp)
 8015a38:	103ee83a 	callr	r2
 8015a3c:	e0bffc15 	stw	r2,-16(fp)
 8015a40:	e0bffc17 	ldw	r2,-16(fp)
 8015a44:	1000070e 	bge	r2,zero,8015a64 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 8015a48:	80159680 	call	8015968 <alt_get_errno>
 8015a4c:	1007883a 	mov	r3,r2
 8015a50:	e0bffc17 	ldw	r2,-16(fp)
 8015a54:	0085c83a 	sub	r2,zero,r2
 8015a58:	18800015 	stw	r2,0(r3)
          return -1;
 8015a5c:	00bfffc4 	movi	r2,-1
 8015a60:	00000c06 	br	8015a94 <read+0xf0>
        }
        return rval;
 8015a64:	e0bffc17 	ldw	r2,-16(fp)
 8015a68:	00000a06 	br	8015a94 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8015a6c:	80159680 	call	8015968 <alt_get_errno>
 8015a70:	1007883a 	mov	r3,r2
 8015a74:	00800344 	movi	r2,13
 8015a78:	18800015 	stw	r2,0(r3)
 8015a7c:	00000406 	br	8015a90 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8015a80:	80159680 	call	8015968 <alt_get_errno>
 8015a84:	1007883a 	mov	r3,r2
 8015a88:	00801444 	movi	r2,81
 8015a8c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8015a90:	00bfffc4 	movi	r2,-1
}
 8015a94:	e037883a 	mov	sp,fp
 8015a98:	dfc00117 	ldw	ra,4(sp)
 8015a9c:	df000017 	ldw	fp,0(sp)
 8015aa0:	dec00204 	addi	sp,sp,8
 8015aa4:	f800283a 	ret

08015aa8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8015aa8:	defffc04 	addi	sp,sp,-16
 8015aac:	dfc00315 	stw	ra,12(sp)
 8015ab0:	df000215 	stw	fp,8(sp)
 8015ab4:	dc000115 	stw	r16,4(sp)
 8015ab8:	df000204 	addi	fp,sp,8
 8015abc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 8015ac0:	e0bffe17 	ldw	r2,-8(fp)
 8015ac4:	108000d0 	cmplti	r2,r2,3
 8015ac8:	1000111e 	bne	r2,zero,8015b10 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 8015acc:	040200b4 	movhi	r16,2050
 8015ad0:	8423d004 	addi	r16,r16,-28864
 8015ad4:	e0bffe17 	ldw	r2,-8(fp)
 8015ad8:	01400304 	movi	r5,12
 8015adc:	1009883a 	mov	r4,r2
 8015ae0:	8007e400 	call	8007e40 <__mulsi3>
 8015ae4:	8085883a 	add	r2,r16,r2
 8015ae8:	10800204 	addi	r2,r2,8
 8015aec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8015af0:	040200b4 	movhi	r16,2050
 8015af4:	8423d004 	addi	r16,r16,-28864
 8015af8:	e0bffe17 	ldw	r2,-8(fp)
 8015afc:	01400304 	movi	r5,12
 8015b00:	1009883a 	mov	r4,r2
 8015b04:	8007e400 	call	8007e40 <__mulsi3>
 8015b08:	8085883a 	add	r2,r16,r2
 8015b0c:	10000015 	stw	zero,0(r2)
  }
}
 8015b10:	0001883a 	nop
 8015b14:	e6ffff04 	addi	sp,fp,-4
 8015b18:	dfc00217 	ldw	ra,8(sp)
 8015b1c:	df000117 	ldw	fp,4(sp)
 8015b20:	dc000017 	ldw	r16,0(sp)
 8015b24:	dec00304 	addi	sp,sp,12
 8015b28:	f800283a 	ret

08015b2c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8015b2c:	defff904 	addi	sp,sp,-28
 8015b30:	df000615 	stw	fp,24(sp)
 8015b34:	df000604 	addi	fp,sp,24
 8015b38:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015b3c:	0005303a 	rdctl	r2,status
 8015b40:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015b44:	e0fffe17 	ldw	r3,-8(fp)
 8015b48:	00bfff84 	movi	r2,-2
 8015b4c:	1884703a 	and	r2,r3,r2
 8015b50:	1001703a 	wrctl	status,r2
  
  return context;
 8015b54:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8015b58:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8015b5c:	d0a01b17 	ldw	r2,-32660(gp)
 8015b60:	10c000c4 	addi	r3,r2,3
 8015b64:	00bfff04 	movi	r2,-4
 8015b68:	1884703a 	and	r2,r3,r2
 8015b6c:	d0a01b15 	stw	r2,-32660(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8015b70:	d0e01b17 	ldw	r3,-32660(gp)
 8015b74:	e0bfff17 	ldw	r2,-4(fp)
 8015b78:	1887883a 	add	r3,r3,r2
 8015b7c:	00830034 	movhi	r2,3072
 8015b80:	10800004 	addi	r2,r2,0
 8015b84:	10c0062e 	bgeu	r2,r3,8015ba0 <sbrk+0x74>
 8015b88:	e0bffb17 	ldw	r2,-20(fp)
 8015b8c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015b90:	e0bffa17 	ldw	r2,-24(fp)
 8015b94:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8015b98:	00bfffc4 	movi	r2,-1
 8015b9c:	00000b06 	br	8015bcc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8015ba0:	d0a01b17 	ldw	r2,-32660(gp)
 8015ba4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 8015ba8:	d0e01b17 	ldw	r3,-32660(gp)
 8015bac:	e0bfff17 	ldw	r2,-4(fp)
 8015bb0:	1885883a 	add	r2,r3,r2
 8015bb4:	d0a01b15 	stw	r2,-32660(gp)
 8015bb8:	e0bffb17 	ldw	r2,-20(fp)
 8015bbc:	e0bffc15 	stw	r2,-16(fp)
 8015bc0:	e0bffc17 	ldw	r2,-16(fp)
 8015bc4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8015bc8:	e0bffd17 	ldw	r2,-12(fp)
} 
 8015bcc:	e037883a 	mov	sp,fp
 8015bd0:	df000017 	ldw	fp,0(sp)
 8015bd4:	dec00104 	addi	sp,sp,4
 8015bd8:	f800283a 	ret

08015bdc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8015bdc:	defffa04 	addi	sp,sp,-24
 8015be0:	df000515 	stw	fp,20(sp)
 8015be4:	df000504 	addi	fp,sp,20
 8015be8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015bec:	0005303a 	rdctl	r2,status
 8015bf0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015bf4:	e0fffc17 	ldw	r3,-16(fp)
 8015bf8:	00bfff84 	movi	r2,-2
 8015bfc:	1884703a 	and	r2,r3,r2
 8015c00:	1001703a 	wrctl	status,r2
  
  return context;
 8015c04:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8015c08:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8015c0c:	e0bfff17 	ldw	r2,-4(fp)
 8015c10:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8015c14:	e0bffd17 	ldw	r2,-12(fp)
 8015c18:	10800017 	ldw	r2,0(r2)
 8015c1c:	e0fffd17 	ldw	r3,-12(fp)
 8015c20:	18c00117 	ldw	r3,4(r3)
 8015c24:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8015c28:	e0bffd17 	ldw	r2,-12(fp)
 8015c2c:	10800117 	ldw	r2,4(r2)
 8015c30:	e0fffd17 	ldw	r3,-12(fp)
 8015c34:	18c00017 	ldw	r3,0(r3)
 8015c38:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8015c3c:	e0bffd17 	ldw	r2,-12(fp)
 8015c40:	e0fffd17 	ldw	r3,-12(fp)
 8015c44:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8015c48:	e0bffd17 	ldw	r2,-12(fp)
 8015c4c:	e0fffd17 	ldw	r3,-12(fp)
 8015c50:	10c00015 	stw	r3,0(r2)
 8015c54:	e0bffb17 	ldw	r2,-20(fp)
 8015c58:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015c5c:	e0bffe17 	ldw	r2,-8(fp)
 8015c60:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8015c64:	0001883a 	nop
 8015c68:	e037883a 	mov	sp,fp
 8015c6c:	df000017 	ldw	fp,0(sp)
 8015c70:	dec00104 	addi	sp,sp,4
 8015c74:	f800283a 	ret

08015c78 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8015c78:	defffb04 	addi	sp,sp,-20
 8015c7c:	dfc00415 	stw	ra,16(sp)
 8015c80:	df000315 	stw	fp,12(sp)
 8015c84:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8015c88:	d0a01c17 	ldw	r2,-32656(gp)
 8015c8c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8015c90:	d0a73b17 	ldw	r2,-25364(gp)
 8015c94:	10800044 	addi	r2,r2,1
 8015c98:	d0a73b15 	stw	r2,-25364(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8015c9c:	00002e06 	br	8015d58 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8015ca0:	e0bffd17 	ldw	r2,-12(fp)
 8015ca4:	10800017 	ldw	r2,0(r2)
 8015ca8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8015cac:	e0bffd17 	ldw	r2,-12(fp)
 8015cb0:	10800403 	ldbu	r2,16(r2)
 8015cb4:	10803fcc 	andi	r2,r2,255
 8015cb8:	10000426 	beq	r2,zero,8015ccc <alt_tick+0x54>
 8015cbc:	d0a73b17 	ldw	r2,-25364(gp)
 8015cc0:	1000021e 	bne	r2,zero,8015ccc <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8015cc4:	e0bffd17 	ldw	r2,-12(fp)
 8015cc8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8015ccc:	e0bffd17 	ldw	r2,-12(fp)
 8015cd0:	10800217 	ldw	r2,8(r2)
 8015cd4:	d0e73b17 	ldw	r3,-25364(gp)
 8015cd8:	18801d36 	bltu	r3,r2,8015d50 <alt_tick+0xd8>
 8015cdc:	e0bffd17 	ldw	r2,-12(fp)
 8015ce0:	10800403 	ldbu	r2,16(r2)
 8015ce4:	10803fcc 	andi	r2,r2,255
 8015ce8:	1000191e 	bne	r2,zero,8015d50 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8015cec:	e0bffd17 	ldw	r2,-12(fp)
 8015cf0:	10800317 	ldw	r2,12(r2)
 8015cf4:	e0fffd17 	ldw	r3,-12(fp)
 8015cf8:	18c00517 	ldw	r3,20(r3)
 8015cfc:	1809883a 	mov	r4,r3
 8015d00:	103ee83a 	callr	r2
 8015d04:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8015d08:	e0bfff17 	ldw	r2,-4(fp)
 8015d0c:	1000031e 	bne	r2,zero,8015d1c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8015d10:	e13ffd17 	ldw	r4,-12(fp)
 8015d14:	8015bdc0 	call	8015bdc <alt_alarm_stop>
 8015d18:	00000d06 	br	8015d50 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8015d1c:	e0bffd17 	ldw	r2,-12(fp)
 8015d20:	10c00217 	ldw	r3,8(r2)
 8015d24:	e0bfff17 	ldw	r2,-4(fp)
 8015d28:	1887883a 	add	r3,r3,r2
 8015d2c:	e0bffd17 	ldw	r2,-12(fp)
 8015d30:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8015d34:	e0bffd17 	ldw	r2,-12(fp)
 8015d38:	10c00217 	ldw	r3,8(r2)
 8015d3c:	d0a73b17 	ldw	r2,-25364(gp)
 8015d40:	1880032e 	bgeu	r3,r2,8015d50 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8015d44:	e0bffd17 	ldw	r2,-12(fp)
 8015d48:	00c00044 	movi	r3,1
 8015d4c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8015d50:	e0bffe17 	ldw	r2,-8(fp)
 8015d54:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8015d58:	e0fffd17 	ldw	r3,-12(fp)
 8015d5c:	d0a01c04 	addi	r2,gp,-32656
 8015d60:	18bfcf1e 	bne	r3,r2,8015ca0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8015d64:	0001883a 	nop
}
 8015d68:	0001883a 	nop
 8015d6c:	e037883a 	mov	sp,fp
 8015d70:	dfc00117 	ldw	ra,4(sp)
 8015d74:	df000017 	ldw	fp,0(sp)
 8015d78:	dec00204 	addi	sp,sp,8
 8015d7c:	f800283a 	ret

08015d80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015d80:	defffe04 	addi	sp,sp,-8
 8015d84:	dfc00115 	stw	ra,4(sp)
 8015d88:	df000015 	stw	fp,0(sp)
 8015d8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8015d90:	d0a01a17 	ldw	r2,-32664(gp)
 8015d94:	10000326 	beq	r2,zero,8015da4 <alt_get_errno+0x24>
 8015d98:	d0a01a17 	ldw	r2,-32664(gp)
 8015d9c:	103ee83a 	callr	r2
 8015da0:	00000106 	br	8015da8 <alt_get_errno+0x28>
 8015da4:	d0a72c04 	addi	r2,gp,-25424
}
 8015da8:	e037883a 	mov	sp,fp
 8015dac:	dfc00117 	ldw	ra,4(sp)
 8015db0:	df000017 	ldw	fp,0(sp)
 8015db4:	dec00204 	addi	sp,sp,8
 8015db8:	f800283a 	ret

08015dbc <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
 8015dbc:	defffc04 	addi	sp,sp,-16
 8015dc0:	dfc00315 	stw	ra,12(sp)
 8015dc4:	df000215 	stw	fp,8(sp)
 8015dc8:	df000204 	addi	fp,sp,8
 8015dcc:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8015dd0:	d0a73b17 	ldw	r2,-25364(gp)
  clock_t ticks = alt_nticks(); 
 8015dd4:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8015dd8:	d0a73a17 	ldw	r2,-25368(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
 8015ddc:	1000061e 	bne	r2,zero,8015df8 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
 8015de0:	8015d800 	call	8015d80 <alt_get_errno>
 8015de4:	1007883a 	mov	r3,r2
 8015de8:	00801604 	movi	r2,88
 8015dec:	18800015 	stw	r2,0(r3)
    return 0;
 8015df0:	0005883a 	mov	r2,zero
 8015df4:	00000a06 	br	8015e20 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
 8015df8:	e0bfff17 	ldw	r2,-4(fp)
 8015dfc:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
 8015e00:	e0bfff17 	ldw	r2,-4(fp)
 8015e04:	e0fffe17 	ldw	r3,-8(fp)
 8015e08:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
 8015e0c:	e0bfff17 	ldw	r2,-4(fp)
 8015e10:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
 8015e14:	e0bfff17 	ldw	r2,-4(fp)
 8015e18:	10000315 	stw	zero,12(r2)

  return ticks;
 8015e1c:	e0bffe17 	ldw	r2,-8(fp)
}
 8015e20:	e037883a 	mov	sp,fp
 8015e24:	dfc00117 	ldw	ra,4(sp)
 8015e28:	df000017 	ldw	fp,0(sp)
 8015e2c:	dec00204 	addi	sp,sp,8
 8015e30:	f800283a 	ret

08015e34 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 8015e34:	defffd04 	addi	sp,sp,-12
 8015e38:	dfc00215 	stw	ra,8(sp)
 8015e3c:	df000115 	stw	fp,4(sp)
 8015e40:	df000104 	addi	fp,sp,4
 8015e44:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 8015e48:	e13fff17 	ldw	r4,-4(fp)
 8015e4c:	8016ef80 	call	8016ef8 <alt_busy_sleep>
}
 8015e50:	e037883a 	mov	sp,fp
 8015e54:	dfc00117 	ldw	ra,4(sp)
 8015e58:	df000017 	ldw	fp,0(sp)
 8015e5c:	dec00204 	addi	sp,sp,8
 8015e60:	f800283a 	ret

08015e64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015e64:	defffe04 	addi	sp,sp,-8
 8015e68:	dfc00115 	stw	ra,4(sp)
 8015e6c:	df000015 	stw	fp,0(sp)
 8015e70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8015e74:	d0a01a17 	ldw	r2,-32664(gp)
 8015e78:	10000326 	beq	r2,zero,8015e88 <alt_get_errno+0x24>
 8015e7c:	d0a01a17 	ldw	r2,-32664(gp)
 8015e80:	103ee83a 	callr	r2
 8015e84:	00000106 	br	8015e8c <alt_get_errno+0x28>
 8015e88:	d0a72c04 	addi	r2,gp,-25424
}
 8015e8c:	e037883a 	mov	sp,fp
 8015e90:	dfc00117 	ldw	ra,4(sp)
 8015e94:	df000017 	ldw	fp,0(sp)
 8015e98:	dec00204 	addi	sp,sp,8
 8015e9c:	f800283a 	ret

08015ea0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8015ea0:	defff904 	addi	sp,sp,-28
 8015ea4:	dfc00615 	stw	ra,24(sp)
 8015ea8:	df000515 	stw	fp,20(sp)
 8015eac:	df000504 	addi	fp,sp,20
 8015eb0:	e13ffd15 	stw	r4,-12(fp)
 8015eb4:	e17ffe15 	stw	r5,-8(fp)
 8015eb8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8015ebc:	e0bffd17 	ldw	r2,-12(fp)
 8015ec0:	10000816 	blt	r2,zero,8015ee4 <write+0x44>
 8015ec4:	01400304 	movi	r5,12
 8015ec8:	e13ffd17 	ldw	r4,-12(fp)
 8015ecc:	8007e400 	call	8007e40 <__mulsi3>
 8015ed0:	1007883a 	mov	r3,r2
 8015ed4:	008200b4 	movhi	r2,2050
 8015ed8:	10a3d004 	addi	r2,r2,-28864
 8015edc:	1885883a 	add	r2,r3,r2
 8015ee0:	00000106 	br	8015ee8 <write+0x48>
 8015ee4:	0005883a 	mov	r2,zero
 8015ee8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8015eec:	e0bffb17 	ldw	r2,-20(fp)
 8015ef0:	10002126 	beq	r2,zero,8015f78 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8015ef4:	e0bffb17 	ldw	r2,-20(fp)
 8015ef8:	10800217 	ldw	r2,8(r2)
 8015efc:	108000cc 	andi	r2,r2,3
 8015f00:	10001826 	beq	r2,zero,8015f64 <write+0xc4>
 8015f04:	e0bffb17 	ldw	r2,-20(fp)
 8015f08:	10800017 	ldw	r2,0(r2)
 8015f0c:	10800617 	ldw	r2,24(r2)
 8015f10:	10001426 	beq	r2,zero,8015f64 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8015f14:	e0bffb17 	ldw	r2,-20(fp)
 8015f18:	10800017 	ldw	r2,0(r2)
 8015f1c:	10800617 	ldw	r2,24(r2)
 8015f20:	e0ffff17 	ldw	r3,-4(fp)
 8015f24:	180d883a 	mov	r6,r3
 8015f28:	e17ffe17 	ldw	r5,-8(fp)
 8015f2c:	e13ffb17 	ldw	r4,-20(fp)
 8015f30:	103ee83a 	callr	r2
 8015f34:	e0bffc15 	stw	r2,-16(fp)
 8015f38:	e0bffc17 	ldw	r2,-16(fp)
 8015f3c:	1000070e 	bge	r2,zero,8015f5c <write+0xbc>
      {
        ALT_ERRNO = -rval;
 8015f40:	8015e640 	call	8015e64 <alt_get_errno>
 8015f44:	1007883a 	mov	r3,r2
 8015f48:	e0bffc17 	ldw	r2,-16(fp)
 8015f4c:	0085c83a 	sub	r2,zero,r2
 8015f50:	18800015 	stw	r2,0(r3)
        return -1;
 8015f54:	00bfffc4 	movi	r2,-1
 8015f58:	00000c06 	br	8015f8c <write+0xec>
      }
      return rval;
 8015f5c:	e0bffc17 	ldw	r2,-16(fp)
 8015f60:	00000a06 	br	8015f8c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8015f64:	8015e640 	call	8015e64 <alt_get_errno>
 8015f68:	1007883a 	mov	r3,r2
 8015f6c:	00800344 	movi	r2,13
 8015f70:	18800015 	stw	r2,0(r3)
 8015f74:	00000406 	br	8015f88 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8015f78:	8015e640 	call	8015e64 <alt_get_errno>
 8015f7c:	1007883a 	mov	r3,r2
 8015f80:	00801444 	movi	r2,81
 8015f84:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8015f88:	00bfffc4 	movi	r2,-1
}
 8015f8c:	e037883a 	mov	sp,fp
 8015f90:	dfc00117 	ldw	ra,4(sp)
 8015f94:	df000017 	ldw	fp,0(sp)
 8015f98:	dec00204 	addi	sp,sp,8
 8015f9c:	f800283a 	ret

08015fa0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8015fa0:	defffd04 	addi	sp,sp,-12
 8015fa4:	dfc00215 	stw	ra,8(sp)
 8015fa8:	df000115 	stw	fp,4(sp)
 8015fac:	df000104 	addi	fp,sp,4
 8015fb0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8015fb4:	d1601704 	addi	r5,gp,-32676
 8015fb8:	e13fff17 	ldw	r4,-4(fp)
 8015fbc:	80170ac0 	call	80170ac <alt_dev_llist_insert>
}
 8015fc0:	e037883a 	mov	sp,fp
 8015fc4:	dfc00117 	ldw	ra,4(sp)
 8015fc8:	df000017 	ldw	fp,0(sp)
 8015fcc:	dec00204 	addi	sp,sp,8
 8015fd0:	f800283a 	ret

08015fd4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8015fd4:	defffd04 	addi	sp,sp,-12
 8015fd8:	dfc00215 	stw	ra,8(sp)
 8015fdc:	df000115 	stw	fp,4(sp)
 8015fe0:	df000104 	addi	fp,sp,4
 8015fe4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8015fe8:	80178b40 	call	80178b4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8015fec:	00800044 	movi	r2,1
 8015ff0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8015ff4:	0001883a 	nop
 8015ff8:	e037883a 	mov	sp,fp
 8015ffc:	dfc00117 	ldw	ra,4(sp)
 8016000:	df000017 	ldw	fp,0(sp)
 8016004:	dec00204 	addi	sp,sp,8
 8016008:	f800283a 	ret

0801600c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 801600c:	defffe04 	addi	sp,sp,-8
 8016010:	dfc00115 	stw	ra,4(sp)
 8016014:	df000015 	stw	fp,0(sp)
 8016018:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 801601c:	01c0fa04 	movi	r7,1000
 8016020:	018000c4 	movi	r6,3
 8016024:	000b883a 	mov	r5,zero
 8016028:	01000074 	movhi	r4,1
 801602c:	21041004 	addi	r4,r4,4160
 8016030:	8016d500 	call	8016d50 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8016034:	01800084 	movi	r6,2
 8016038:	000b883a 	mov	r5,zero
 801603c:	010200b4 	movhi	r4,2050
 8016040:	21243a04 	addi	r4,r4,-28440
 8016044:	80161d80 	call	80161d8 <altera_avalon_jtag_uart_init>
 8016048:	010200b4 	movhi	r4,2050
 801604c:	21243004 	addi	r4,r4,-28480
 8016050:	8015fa00 	call	8015fa0 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 8016054:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 8016058:	0001883a 	nop
}
 801605c:	0001883a 	nop
 8016060:	e037883a 	mov	sp,fp
 8016064:	dfc00117 	ldw	ra,4(sp)
 8016068:	df000017 	ldw	fp,0(sp)
 801606c:	dec00204 	addi	sp,sp,8
 8016070:	f800283a 	ret

08016074 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8016074:	defffa04 	addi	sp,sp,-24
 8016078:	dfc00515 	stw	ra,20(sp)
 801607c:	df000415 	stw	fp,16(sp)
 8016080:	df000404 	addi	fp,sp,16
 8016084:	e13ffd15 	stw	r4,-12(fp)
 8016088:	e17ffe15 	stw	r5,-8(fp)
 801608c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8016090:	e0bffd17 	ldw	r2,-12(fp)
 8016094:	10800017 	ldw	r2,0(r2)
 8016098:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 801609c:	e0bffc17 	ldw	r2,-16(fp)
 80160a0:	10c00a04 	addi	r3,r2,40
 80160a4:	e0bffd17 	ldw	r2,-12(fp)
 80160a8:	10800217 	ldw	r2,8(r2)
 80160ac:	100f883a 	mov	r7,r2
 80160b0:	e1bfff17 	ldw	r6,-4(fp)
 80160b4:	e17ffe17 	ldw	r5,-8(fp)
 80160b8:	1809883a 	mov	r4,r3
 80160bc:	801669c0 	call	801669c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 80160c0:	e037883a 	mov	sp,fp
 80160c4:	dfc00117 	ldw	ra,4(sp)
 80160c8:	df000017 	ldw	fp,0(sp)
 80160cc:	dec00204 	addi	sp,sp,8
 80160d0:	f800283a 	ret

080160d4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 80160d4:	defffa04 	addi	sp,sp,-24
 80160d8:	dfc00515 	stw	ra,20(sp)
 80160dc:	df000415 	stw	fp,16(sp)
 80160e0:	df000404 	addi	fp,sp,16
 80160e4:	e13ffd15 	stw	r4,-12(fp)
 80160e8:	e17ffe15 	stw	r5,-8(fp)
 80160ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80160f0:	e0bffd17 	ldw	r2,-12(fp)
 80160f4:	10800017 	ldw	r2,0(r2)
 80160f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 80160fc:	e0bffc17 	ldw	r2,-16(fp)
 8016100:	10c00a04 	addi	r3,r2,40
 8016104:	e0bffd17 	ldw	r2,-12(fp)
 8016108:	10800217 	ldw	r2,8(r2)
 801610c:	100f883a 	mov	r7,r2
 8016110:	e1bfff17 	ldw	r6,-4(fp)
 8016114:	e17ffe17 	ldw	r5,-8(fp)
 8016118:	1809883a 	mov	r4,r3
 801611c:	80168b80 	call	80168b8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8016120:	e037883a 	mov	sp,fp
 8016124:	dfc00117 	ldw	ra,4(sp)
 8016128:	df000017 	ldw	fp,0(sp)
 801612c:	dec00204 	addi	sp,sp,8
 8016130:	f800283a 	ret

08016134 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8016134:	defffc04 	addi	sp,sp,-16
 8016138:	dfc00315 	stw	ra,12(sp)
 801613c:	df000215 	stw	fp,8(sp)
 8016140:	df000204 	addi	fp,sp,8
 8016144:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8016148:	e0bfff17 	ldw	r2,-4(fp)
 801614c:	10800017 	ldw	r2,0(r2)
 8016150:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8016154:	e0bffe17 	ldw	r2,-8(fp)
 8016158:	10c00a04 	addi	r3,r2,40
 801615c:	e0bfff17 	ldw	r2,-4(fp)
 8016160:	10800217 	ldw	r2,8(r2)
 8016164:	100b883a 	mov	r5,r2
 8016168:	1809883a 	mov	r4,r3
 801616c:	80165440 	call	8016544 <altera_avalon_jtag_uart_close>
}
 8016170:	e037883a 	mov	sp,fp
 8016174:	dfc00117 	ldw	ra,4(sp)
 8016178:	df000017 	ldw	fp,0(sp)
 801617c:	dec00204 	addi	sp,sp,8
 8016180:	f800283a 	ret

08016184 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8016184:	defffa04 	addi	sp,sp,-24
 8016188:	dfc00515 	stw	ra,20(sp)
 801618c:	df000415 	stw	fp,16(sp)
 8016190:	df000404 	addi	fp,sp,16
 8016194:	e13ffd15 	stw	r4,-12(fp)
 8016198:	e17ffe15 	stw	r5,-8(fp)
 801619c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 80161a0:	e0bffd17 	ldw	r2,-12(fp)
 80161a4:	10800017 	ldw	r2,0(r2)
 80161a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 80161ac:	e0bffc17 	ldw	r2,-16(fp)
 80161b0:	10800a04 	addi	r2,r2,40
 80161b4:	e1bfff17 	ldw	r6,-4(fp)
 80161b8:	e17ffe17 	ldw	r5,-8(fp)
 80161bc:	1009883a 	mov	r4,r2
 80161c0:	80165ac0 	call	80165ac <altera_avalon_jtag_uart_ioctl>
}
 80161c4:	e037883a 	mov	sp,fp
 80161c8:	dfc00117 	ldw	ra,4(sp)
 80161cc:	df000017 	ldw	fp,0(sp)
 80161d0:	dec00204 	addi	sp,sp,8
 80161d4:	f800283a 	ret

080161d8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 80161d8:	defffa04 	addi	sp,sp,-24
 80161dc:	dfc00515 	stw	ra,20(sp)
 80161e0:	df000415 	stw	fp,16(sp)
 80161e4:	df000404 	addi	fp,sp,16
 80161e8:	e13ffd15 	stw	r4,-12(fp)
 80161ec:	e17ffe15 	stw	r5,-8(fp)
 80161f0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80161f4:	e0bffd17 	ldw	r2,-12(fp)
 80161f8:	00c00044 	movi	r3,1
 80161fc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8016200:	e0bffd17 	ldw	r2,-12(fp)
 8016204:	10800017 	ldw	r2,0(r2)
 8016208:	10800104 	addi	r2,r2,4
 801620c:	1007883a 	mov	r3,r2
 8016210:	e0bffd17 	ldw	r2,-12(fp)
 8016214:	10800817 	ldw	r2,32(r2)
 8016218:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 801621c:	e0bffe17 	ldw	r2,-8(fp)
 8016220:	e0ffff17 	ldw	r3,-4(fp)
 8016224:	d8000015 	stw	zero,0(sp)
 8016228:	e1fffd17 	ldw	r7,-12(fp)
 801622c:	01820074 	movhi	r6,2049
 8016230:	3198a604 	addi	r6,r6,25240
 8016234:	180b883a 	mov	r5,r3
 8016238:	1009883a 	mov	r4,r2
 801623c:	80172300 	call	8017230 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8016240:	e0bffd17 	ldw	r2,-12(fp)
 8016244:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8016248:	e0bffd17 	ldw	r2,-12(fp)
 801624c:	10800204 	addi	r2,r2,8
 8016250:	d0e73a17 	ldw	r3,-25368(gp)
 8016254:	e1fffd17 	ldw	r7,-12(fp)
 8016258:	01820074 	movhi	r6,2049
 801625c:	31992904 	addi	r6,r6,25764
 8016260:	180b883a 	mov	r5,r3
 8016264:	1009883a 	mov	r4,r2
 8016268:	8016dcc0 	call	8016dcc <alt_alarm_start>
 801626c:	1000040e 	bge	r2,zero,8016280 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8016270:	e0fffd17 	ldw	r3,-12(fp)
 8016274:	00a00034 	movhi	r2,32768
 8016278:	10bfffc4 	addi	r2,r2,-1
 801627c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8016280:	0001883a 	nop
 8016284:	e037883a 	mov	sp,fp
 8016288:	dfc00117 	ldw	ra,4(sp)
 801628c:	df000017 	ldw	fp,0(sp)
 8016290:	dec00204 	addi	sp,sp,8
 8016294:	f800283a 	ret

08016298 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8016298:	defff804 	addi	sp,sp,-32
 801629c:	df000715 	stw	fp,28(sp)
 80162a0:	df000704 	addi	fp,sp,28
 80162a4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 80162a8:	e0bfff17 	ldw	r2,-4(fp)
 80162ac:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 80162b0:	e0bffb17 	ldw	r2,-20(fp)
 80162b4:	10800017 	ldw	r2,0(r2)
 80162b8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80162bc:	e0bffc17 	ldw	r2,-16(fp)
 80162c0:	10800104 	addi	r2,r2,4
 80162c4:	10800037 	ldwio	r2,0(r2)
 80162c8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 80162cc:	e0bffd17 	ldw	r2,-12(fp)
 80162d0:	1080c00c 	andi	r2,r2,768
 80162d4:	10006d26 	beq	r2,zero,801648c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 80162d8:	e0bffd17 	ldw	r2,-12(fp)
 80162dc:	1080400c 	andi	r2,r2,256
 80162e0:	10003526 	beq	r2,zero,80163b8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 80162e4:	00800074 	movhi	r2,1
 80162e8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80162ec:	e0bffb17 	ldw	r2,-20(fp)
 80162f0:	10800a17 	ldw	r2,40(r2)
 80162f4:	10800044 	addi	r2,r2,1
 80162f8:	1081ffcc 	andi	r2,r2,2047
 80162fc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8016300:	e0bffb17 	ldw	r2,-20(fp)
 8016304:	10c00b17 	ldw	r3,44(r2)
 8016308:	e0bffe17 	ldw	r2,-8(fp)
 801630c:	18801526 	beq	r3,r2,8016364 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8016310:	e0bffc17 	ldw	r2,-16(fp)
 8016314:	10800037 	ldwio	r2,0(r2)
 8016318:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 801631c:	e0bff917 	ldw	r2,-28(fp)
 8016320:	10a0000c 	andi	r2,r2,32768
 8016324:	10001126 	beq	r2,zero,801636c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8016328:	e0bffb17 	ldw	r2,-20(fp)
 801632c:	10800a17 	ldw	r2,40(r2)
 8016330:	e0fff917 	ldw	r3,-28(fp)
 8016334:	1809883a 	mov	r4,r3
 8016338:	e0fffb17 	ldw	r3,-20(fp)
 801633c:	1885883a 	add	r2,r3,r2
 8016340:	10800e04 	addi	r2,r2,56
 8016344:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8016348:	e0bffb17 	ldw	r2,-20(fp)
 801634c:	10800a17 	ldw	r2,40(r2)
 8016350:	10800044 	addi	r2,r2,1
 8016354:	10c1ffcc 	andi	r3,r2,2047
 8016358:	e0bffb17 	ldw	r2,-20(fp)
 801635c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8016360:	003fe206 	br	80162ec <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8016364:	0001883a 	nop
 8016368:	00000106 	br	8016370 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 801636c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8016370:	e0bff917 	ldw	r2,-28(fp)
 8016374:	10bfffec 	andhi	r2,r2,65535
 8016378:	10000f26 	beq	r2,zero,80163b8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801637c:	e0bffb17 	ldw	r2,-20(fp)
 8016380:	10c00817 	ldw	r3,32(r2)
 8016384:	00bfff84 	movi	r2,-2
 8016388:	1886703a 	and	r3,r3,r2
 801638c:	e0bffb17 	ldw	r2,-20(fp)
 8016390:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8016394:	e0bffc17 	ldw	r2,-16(fp)
 8016398:	10800104 	addi	r2,r2,4
 801639c:	1007883a 	mov	r3,r2
 80163a0:	e0bffb17 	ldw	r2,-20(fp)
 80163a4:	10800817 	ldw	r2,32(r2)
 80163a8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80163ac:	e0bffc17 	ldw	r2,-16(fp)
 80163b0:	10800104 	addi	r2,r2,4
 80163b4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 80163b8:	e0bffd17 	ldw	r2,-12(fp)
 80163bc:	1080800c 	andi	r2,r2,512
 80163c0:	103fbe26 	beq	r2,zero,80162bc <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 80163c4:	e0bffd17 	ldw	r2,-12(fp)
 80163c8:	1004d43a 	srli	r2,r2,16
 80163cc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 80163d0:	00001406 	br	8016424 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 80163d4:	e0bffc17 	ldw	r2,-16(fp)
 80163d8:	e0fffb17 	ldw	r3,-20(fp)
 80163dc:	18c00d17 	ldw	r3,52(r3)
 80163e0:	e13ffb17 	ldw	r4,-20(fp)
 80163e4:	20c7883a 	add	r3,r4,r3
 80163e8:	18c20e04 	addi	r3,r3,2104
 80163ec:	18c00003 	ldbu	r3,0(r3)
 80163f0:	18c03fcc 	andi	r3,r3,255
 80163f4:	18c0201c 	xori	r3,r3,128
 80163f8:	18ffe004 	addi	r3,r3,-128
 80163fc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8016400:	e0bffb17 	ldw	r2,-20(fp)
 8016404:	10800d17 	ldw	r2,52(r2)
 8016408:	10800044 	addi	r2,r2,1
 801640c:	10c1ffcc 	andi	r3,r2,2047
 8016410:	e0bffb17 	ldw	r2,-20(fp)
 8016414:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8016418:	e0bffa17 	ldw	r2,-24(fp)
 801641c:	10bfffc4 	addi	r2,r2,-1
 8016420:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8016424:	e0bffa17 	ldw	r2,-24(fp)
 8016428:	10000526 	beq	r2,zero,8016440 <altera_avalon_jtag_uart_irq+0x1a8>
 801642c:	e0bffb17 	ldw	r2,-20(fp)
 8016430:	10c00d17 	ldw	r3,52(r2)
 8016434:	e0bffb17 	ldw	r2,-20(fp)
 8016438:	10800c17 	ldw	r2,48(r2)
 801643c:	18bfe51e 	bne	r3,r2,80163d4 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8016440:	e0bffa17 	ldw	r2,-24(fp)
 8016444:	103f9d26 	beq	r2,zero,80162bc <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8016448:	e0bffb17 	ldw	r2,-20(fp)
 801644c:	10c00817 	ldw	r3,32(r2)
 8016450:	00bfff44 	movi	r2,-3
 8016454:	1886703a 	and	r3,r3,r2
 8016458:	e0bffb17 	ldw	r2,-20(fp)
 801645c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8016460:	e0bffb17 	ldw	r2,-20(fp)
 8016464:	10800017 	ldw	r2,0(r2)
 8016468:	10800104 	addi	r2,r2,4
 801646c:	1007883a 	mov	r3,r2
 8016470:	e0bffb17 	ldw	r2,-20(fp)
 8016474:	10800817 	ldw	r2,32(r2)
 8016478:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801647c:	e0bffc17 	ldw	r2,-16(fp)
 8016480:	10800104 	addi	r2,r2,4
 8016484:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8016488:	003f8c06 	br	80162bc <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 801648c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8016490:	0001883a 	nop
 8016494:	e037883a 	mov	sp,fp
 8016498:	df000017 	ldw	fp,0(sp)
 801649c:	dec00104 	addi	sp,sp,4
 80164a0:	f800283a 	ret

080164a4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 80164a4:	defff804 	addi	sp,sp,-32
 80164a8:	df000715 	stw	fp,28(sp)
 80164ac:	df000704 	addi	fp,sp,28
 80164b0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 80164b4:	e0bffb17 	ldw	r2,-20(fp)
 80164b8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 80164bc:	e0bff917 	ldw	r2,-28(fp)
 80164c0:	10800017 	ldw	r2,0(r2)
 80164c4:	10800104 	addi	r2,r2,4
 80164c8:	10800037 	ldwio	r2,0(r2)
 80164cc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 80164d0:	e0bffa17 	ldw	r2,-24(fp)
 80164d4:	1081000c 	andi	r2,r2,1024
 80164d8:	10000b26 	beq	r2,zero,8016508 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 80164dc:	e0bff917 	ldw	r2,-28(fp)
 80164e0:	10800017 	ldw	r2,0(r2)
 80164e4:	10800104 	addi	r2,r2,4
 80164e8:	1007883a 	mov	r3,r2
 80164ec:	e0bff917 	ldw	r2,-28(fp)
 80164f0:	10800817 	ldw	r2,32(r2)
 80164f4:	10810014 	ori	r2,r2,1024
 80164f8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 80164fc:	e0bff917 	ldw	r2,-28(fp)
 8016500:	10000915 	stw	zero,36(r2)
 8016504:	00000a06 	br	8016530 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8016508:	e0bff917 	ldw	r2,-28(fp)
 801650c:	10c00917 	ldw	r3,36(r2)
 8016510:	00a00034 	movhi	r2,32768
 8016514:	10bfff04 	addi	r2,r2,-4
 8016518:	10c00536 	bltu	r2,r3,8016530 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 801651c:	e0bff917 	ldw	r2,-28(fp)
 8016520:	10800917 	ldw	r2,36(r2)
 8016524:	10c00044 	addi	r3,r2,1
 8016528:	e0bff917 	ldw	r2,-28(fp)
 801652c:	10c00915 	stw	r3,36(r2)
 8016530:	d0a73a17 	ldw	r2,-25368(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8016534:	e037883a 	mov	sp,fp
 8016538:	df000017 	ldw	fp,0(sp)
 801653c:	dec00104 	addi	sp,sp,4
 8016540:	f800283a 	ret

08016544 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8016544:	defffd04 	addi	sp,sp,-12
 8016548:	df000215 	stw	fp,8(sp)
 801654c:	df000204 	addi	fp,sp,8
 8016550:	e13ffe15 	stw	r4,-8(fp)
 8016554:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8016558:	00000506 	br	8016570 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 801655c:	e0bfff17 	ldw	r2,-4(fp)
 8016560:	1090000c 	andi	r2,r2,16384
 8016564:	10000226 	beq	r2,zero,8016570 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8016568:	00bffd44 	movi	r2,-11
 801656c:	00000b06 	br	801659c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8016570:	e0bffe17 	ldw	r2,-8(fp)
 8016574:	10c00d17 	ldw	r3,52(r2)
 8016578:	e0bffe17 	ldw	r2,-8(fp)
 801657c:	10800c17 	ldw	r2,48(r2)
 8016580:	18800526 	beq	r3,r2,8016598 <altera_avalon_jtag_uart_close+0x54>
 8016584:	e0bffe17 	ldw	r2,-8(fp)
 8016588:	10c00917 	ldw	r3,36(r2)
 801658c:	e0bffe17 	ldw	r2,-8(fp)
 8016590:	10800117 	ldw	r2,4(r2)
 8016594:	18bff136 	bltu	r3,r2,801655c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8016598:	0005883a 	mov	r2,zero
}
 801659c:	e037883a 	mov	sp,fp
 80165a0:	df000017 	ldw	fp,0(sp)
 80165a4:	dec00104 	addi	sp,sp,4
 80165a8:	f800283a 	ret

080165ac <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 80165ac:	defffa04 	addi	sp,sp,-24
 80165b0:	df000515 	stw	fp,20(sp)
 80165b4:	df000504 	addi	fp,sp,20
 80165b8:	e13ffd15 	stw	r4,-12(fp)
 80165bc:	e17ffe15 	stw	r5,-8(fp)
 80165c0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 80165c4:	00bff9c4 	movi	r2,-25
 80165c8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 80165cc:	e0bffe17 	ldw	r2,-8(fp)
 80165d0:	10da8060 	cmpeqi	r3,r2,27137
 80165d4:	1800031e 	bne	r3,zero,80165e4 <altera_avalon_jtag_uart_ioctl+0x38>
 80165d8:	109a80a0 	cmpeqi	r2,r2,27138
 80165dc:	1000181e 	bne	r2,zero,8016640 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 80165e0:	00002906 	br	8016688 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 80165e4:	e0bffd17 	ldw	r2,-12(fp)
 80165e8:	10c00117 	ldw	r3,4(r2)
 80165ec:	00a00034 	movhi	r2,32768
 80165f0:	10bfffc4 	addi	r2,r2,-1
 80165f4:	18802126 	beq	r3,r2,801667c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 80165f8:	e0bfff17 	ldw	r2,-4(fp)
 80165fc:	10800017 	ldw	r2,0(r2)
 8016600:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8016604:	e0bffc17 	ldw	r2,-16(fp)
 8016608:	10800090 	cmplti	r2,r2,2
 801660c:	1000061e 	bne	r2,zero,8016628 <altera_avalon_jtag_uart_ioctl+0x7c>
 8016610:	e0fffc17 	ldw	r3,-16(fp)
 8016614:	00a00034 	movhi	r2,32768
 8016618:	10bfffc4 	addi	r2,r2,-1
 801661c:	18800226 	beq	r3,r2,8016628 <altera_avalon_jtag_uart_ioctl+0x7c>
 8016620:	e0bffc17 	ldw	r2,-16(fp)
 8016624:	00000206 	br	8016630 <altera_avalon_jtag_uart_ioctl+0x84>
 8016628:	00a00034 	movhi	r2,32768
 801662c:	10bfff84 	addi	r2,r2,-2
 8016630:	e0fffd17 	ldw	r3,-12(fp)
 8016634:	18800115 	stw	r2,4(r3)
      rc = 0;
 8016638:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 801663c:	00000f06 	br	801667c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8016640:	e0bffd17 	ldw	r2,-12(fp)
 8016644:	10c00117 	ldw	r3,4(r2)
 8016648:	00a00034 	movhi	r2,32768
 801664c:	10bfffc4 	addi	r2,r2,-1
 8016650:	18800c26 	beq	r3,r2,8016684 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8016654:	e0bffd17 	ldw	r2,-12(fp)
 8016658:	10c00917 	ldw	r3,36(r2)
 801665c:	e0bffd17 	ldw	r2,-12(fp)
 8016660:	10800117 	ldw	r2,4(r2)
 8016664:	1885803a 	cmpltu	r2,r3,r2
 8016668:	10c03fcc 	andi	r3,r2,255
 801666c:	e0bfff17 	ldw	r2,-4(fp)
 8016670:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8016674:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8016678:	00000206 	br	8016684 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 801667c:	0001883a 	nop
 8016680:	00000106 	br	8016688 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 8016684:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8016688:	e0bffb17 	ldw	r2,-20(fp)
}
 801668c:	e037883a 	mov	sp,fp
 8016690:	df000017 	ldw	fp,0(sp)
 8016694:	dec00104 	addi	sp,sp,4
 8016698:	f800283a 	ret

0801669c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 801669c:	defff304 	addi	sp,sp,-52
 80166a0:	dfc00c15 	stw	ra,48(sp)
 80166a4:	df000b15 	stw	fp,44(sp)
 80166a8:	df000b04 	addi	fp,sp,44
 80166ac:	e13ffc15 	stw	r4,-16(fp)
 80166b0:	e17ffd15 	stw	r5,-12(fp)
 80166b4:	e1bffe15 	stw	r6,-8(fp)
 80166b8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 80166bc:	e0bffd17 	ldw	r2,-12(fp)
 80166c0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80166c4:	00004706 	br	80167e4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 80166c8:	e0bffc17 	ldw	r2,-16(fp)
 80166cc:	10800a17 	ldw	r2,40(r2)
 80166d0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 80166d4:	e0bffc17 	ldw	r2,-16(fp)
 80166d8:	10800b17 	ldw	r2,44(r2)
 80166dc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 80166e0:	e0fff717 	ldw	r3,-36(fp)
 80166e4:	e0bff817 	ldw	r2,-32(fp)
 80166e8:	18800536 	bltu	r3,r2,8016700 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 80166ec:	e0fff717 	ldw	r3,-36(fp)
 80166f0:	e0bff817 	ldw	r2,-32(fp)
 80166f4:	1885c83a 	sub	r2,r3,r2
 80166f8:	e0bff615 	stw	r2,-40(fp)
 80166fc:	00000406 	br	8016710 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8016700:	00c20004 	movi	r3,2048
 8016704:	e0bff817 	ldw	r2,-32(fp)
 8016708:	1885c83a 	sub	r2,r3,r2
 801670c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8016710:	e0bff617 	ldw	r2,-40(fp)
 8016714:	10001e26 	beq	r2,zero,8016790 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8016718:	e0fffe17 	ldw	r3,-8(fp)
 801671c:	e0bff617 	ldw	r2,-40(fp)
 8016720:	1880022e 	bgeu	r3,r2,801672c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8016724:	e0bffe17 	ldw	r2,-8(fp)
 8016728:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 801672c:	e0bffc17 	ldw	r2,-16(fp)
 8016730:	10c00e04 	addi	r3,r2,56
 8016734:	e0bff817 	ldw	r2,-32(fp)
 8016738:	1885883a 	add	r2,r3,r2
 801673c:	e1bff617 	ldw	r6,-40(fp)
 8016740:	100b883a 	mov	r5,r2
 8016744:	e13ff517 	ldw	r4,-44(fp)
 8016748:	8007fa40 	call	8007fa4 <memcpy>
      ptr   += n;
 801674c:	e0fff517 	ldw	r3,-44(fp)
 8016750:	e0bff617 	ldw	r2,-40(fp)
 8016754:	1885883a 	add	r2,r3,r2
 8016758:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 801675c:	e0fffe17 	ldw	r3,-8(fp)
 8016760:	e0bff617 	ldw	r2,-40(fp)
 8016764:	1885c83a 	sub	r2,r3,r2
 8016768:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801676c:	e0fff817 	ldw	r3,-32(fp)
 8016770:	e0bff617 	ldw	r2,-40(fp)
 8016774:	1885883a 	add	r2,r3,r2
 8016778:	10c1ffcc 	andi	r3,r2,2047
 801677c:	e0bffc17 	ldw	r2,-16(fp)
 8016780:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8016784:	e0bffe17 	ldw	r2,-8(fp)
 8016788:	00bfcf16 	blt	zero,r2,80166c8 <altera_avalon_jtag_uart_read+0x2c>
 801678c:	00000106 	br	8016794 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 8016790:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 8016794:	e0fff517 	ldw	r3,-44(fp)
 8016798:	e0bffd17 	ldw	r2,-12(fp)
 801679c:	1880141e 	bne	r3,r2,80167f0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 80167a0:	e0bfff17 	ldw	r2,-4(fp)
 80167a4:	1090000c 	andi	r2,r2,16384
 80167a8:	1000131e 	bne	r2,zero,80167f8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 80167ac:	0001883a 	nop
 80167b0:	e0bffc17 	ldw	r2,-16(fp)
 80167b4:	10c00a17 	ldw	r3,40(r2)
 80167b8:	e0bff717 	ldw	r2,-36(fp)
 80167bc:	1880051e 	bne	r3,r2,80167d4 <altera_avalon_jtag_uart_read+0x138>
 80167c0:	e0bffc17 	ldw	r2,-16(fp)
 80167c4:	10c00917 	ldw	r3,36(r2)
 80167c8:	e0bffc17 	ldw	r2,-16(fp)
 80167cc:	10800117 	ldw	r2,4(r2)
 80167d0:	18bff736 	bltu	r3,r2,80167b0 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 80167d4:	e0bffc17 	ldw	r2,-16(fp)
 80167d8:	10c00a17 	ldw	r3,40(r2)
 80167dc:	e0bff717 	ldw	r2,-36(fp)
 80167e0:	18800726 	beq	r3,r2,8016800 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80167e4:	e0bffe17 	ldw	r2,-8(fp)
 80167e8:	00bfb716 	blt	zero,r2,80166c8 <altera_avalon_jtag_uart_read+0x2c>
 80167ec:	00000506 	br	8016804 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 80167f0:	0001883a 	nop
 80167f4:	00000306 	br	8016804 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 80167f8:	0001883a 	nop
 80167fc:	00000106 	br	8016804 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8016800:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8016804:	e0fff517 	ldw	r3,-44(fp)
 8016808:	e0bffd17 	ldw	r2,-12(fp)
 801680c:	18801826 	beq	r3,r2,8016870 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016810:	0005303a 	rdctl	r2,status
 8016814:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016818:	e0fffb17 	ldw	r3,-20(fp)
 801681c:	00bfff84 	movi	r2,-2
 8016820:	1884703a 	and	r2,r3,r2
 8016824:	1001703a 	wrctl	status,r2
  
  return context;
 8016828:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 801682c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8016830:	e0bffc17 	ldw	r2,-16(fp)
 8016834:	10800817 	ldw	r2,32(r2)
 8016838:	10c00054 	ori	r3,r2,1
 801683c:	e0bffc17 	ldw	r2,-16(fp)
 8016840:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8016844:	e0bffc17 	ldw	r2,-16(fp)
 8016848:	10800017 	ldw	r2,0(r2)
 801684c:	10800104 	addi	r2,r2,4
 8016850:	1007883a 	mov	r3,r2
 8016854:	e0bffc17 	ldw	r2,-16(fp)
 8016858:	10800817 	ldw	r2,32(r2)
 801685c:	18800035 	stwio	r2,0(r3)
 8016860:	e0bffa17 	ldw	r2,-24(fp)
 8016864:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016868:	e0bff917 	ldw	r2,-28(fp)
 801686c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8016870:	e0fff517 	ldw	r3,-44(fp)
 8016874:	e0bffd17 	ldw	r2,-12(fp)
 8016878:	18800426 	beq	r3,r2,801688c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 801687c:	e0fff517 	ldw	r3,-44(fp)
 8016880:	e0bffd17 	ldw	r2,-12(fp)
 8016884:	1885c83a 	sub	r2,r3,r2
 8016888:	00000606 	br	80168a4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 801688c:	e0bfff17 	ldw	r2,-4(fp)
 8016890:	1090000c 	andi	r2,r2,16384
 8016894:	10000226 	beq	r2,zero,80168a0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8016898:	00bffd44 	movi	r2,-11
 801689c:	00000106 	br	80168a4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 80168a0:	00bffec4 	movi	r2,-5
}
 80168a4:	e037883a 	mov	sp,fp
 80168a8:	dfc00117 	ldw	ra,4(sp)
 80168ac:	df000017 	ldw	fp,0(sp)
 80168b0:	dec00204 	addi	sp,sp,8
 80168b4:	f800283a 	ret

080168b8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80168b8:	defff304 	addi	sp,sp,-52
 80168bc:	dfc00c15 	stw	ra,48(sp)
 80168c0:	df000b15 	stw	fp,44(sp)
 80168c4:	df000b04 	addi	fp,sp,44
 80168c8:	e13ffc15 	stw	r4,-16(fp)
 80168cc:	e17ffd15 	stw	r5,-12(fp)
 80168d0:	e1bffe15 	stw	r6,-8(fp)
 80168d4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 80168d8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 80168dc:	e0bffd17 	ldw	r2,-12(fp)
 80168e0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80168e4:	00003706 	br	80169c4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 80168e8:	e0bffc17 	ldw	r2,-16(fp)
 80168ec:	10800c17 	ldw	r2,48(r2)
 80168f0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 80168f4:	e0bffc17 	ldw	r2,-16(fp)
 80168f8:	10800d17 	ldw	r2,52(r2)
 80168fc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8016900:	e0fff917 	ldw	r3,-28(fp)
 8016904:	e0bff517 	ldw	r2,-44(fp)
 8016908:	1880062e 	bgeu	r3,r2,8016924 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 801690c:	e0fff517 	ldw	r3,-44(fp)
 8016910:	e0bff917 	ldw	r2,-28(fp)
 8016914:	1885c83a 	sub	r2,r3,r2
 8016918:	10bfffc4 	addi	r2,r2,-1
 801691c:	e0bff615 	stw	r2,-40(fp)
 8016920:	00000b06 	br	8016950 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8016924:	e0bff517 	ldw	r2,-44(fp)
 8016928:	10000526 	beq	r2,zero,8016940 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 801692c:	00c20004 	movi	r3,2048
 8016930:	e0bff917 	ldw	r2,-28(fp)
 8016934:	1885c83a 	sub	r2,r3,r2
 8016938:	e0bff615 	stw	r2,-40(fp)
 801693c:	00000406 	br	8016950 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8016940:	00c1ffc4 	movi	r3,2047
 8016944:	e0bff917 	ldw	r2,-28(fp)
 8016948:	1885c83a 	sub	r2,r3,r2
 801694c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8016950:	e0bff617 	ldw	r2,-40(fp)
 8016954:	10001e26 	beq	r2,zero,80169d0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8016958:	e0fffe17 	ldw	r3,-8(fp)
 801695c:	e0bff617 	ldw	r2,-40(fp)
 8016960:	1880022e 	bgeu	r3,r2,801696c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8016964:	e0bffe17 	ldw	r2,-8(fp)
 8016968:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 801696c:	e0bffc17 	ldw	r2,-16(fp)
 8016970:	10c20e04 	addi	r3,r2,2104
 8016974:	e0bff917 	ldw	r2,-28(fp)
 8016978:	1885883a 	add	r2,r3,r2
 801697c:	e1bff617 	ldw	r6,-40(fp)
 8016980:	e17ffd17 	ldw	r5,-12(fp)
 8016984:	1009883a 	mov	r4,r2
 8016988:	8007fa40 	call	8007fa4 <memcpy>
      ptr   += n;
 801698c:	e0fffd17 	ldw	r3,-12(fp)
 8016990:	e0bff617 	ldw	r2,-40(fp)
 8016994:	1885883a 	add	r2,r3,r2
 8016998:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 801699c:	e0fffe17 	ldw	r3,-8(fp)
 80169a0:	e0bff617 	ldw	r2,-40(fp)
 80169a4:	1885c83a 	sub	r2,r3,r2
 80169a8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80169ac:	e0fff917 	ldw	r3,-28(fp)
 80169b0:	e0bff617 	ldw	r2,-40(fp)
 80169b4:	1885883a 	add	r2,r3,r2
 80169b8:	10c1ffcc 	andi	r3,r2,2047
 80169bc:	e0bffc17 	ldw	r2,-16(fp)
 80169c0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80169c4:	e0bffe17 	ldw	r2,-8(fp)
 80169c8:	00bfc716 	blt	zero,r2,80168e8 <altera_avalon_jtag_uart_write+0x30>
 80169cc:	00000106 	br	80169d4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 80169d0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80169d4:	0005303a 	rdctl	r2,status
 80169d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80169dc:	e0fffb17 	ldw	r3,-20(fp)
 80169e0:	00bfff84 	movi	r2,-2
 80169e4:	1884703a 	and	r2,r3,r2
 80169e8:	1001703a 	wrctl	status,r2
  
  return context;
 80169ec:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 80169f0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80169f4:	e0bffc17 	ldw	r2,-16(fp)
 80169f8:	10800817 	ldw	r2,32(r2)
 80169fc:	10c00094 	ori	r3,r2,2
 8016a00:	e0bffc17 	ldw	r2,-16(fp)
 8016a04:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8016a08:	e0bffc17 	ldw	r2,-16(fp)
 8016a0c:	10800017 	ldw	r2,0(r2)
 8016a10:	10800104 	addi	r2,r2,4
 8016a14:	1007883a 	mov	r3,r2
 8016a18:	e0bffc17 	ldw	r2,-16(fp)
 8016a1c:	10800817 	ldw	r2,32(r2)
 8016a20:	18800035 	stwio	r2,0(r3)
 8016a24:	e0bffa17 	ldw	r2,-24(fp)
 8016a28:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016a2c:	e0bff817 	ldw	r2,-32(fp)
 8016a30:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8016a34:	e0bffe17 	ldw	r2,-8(fp)
 8016a38:	0080100e 	bge	zero,r2,8016a7c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8016a3c:	e0bfff17 	ldw	r2,-4(fp)
 8016a40:	1090000c 	andi	r2,r2,16384
 8016a44:	1000101e 	bne	r2,zero,8016a88 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8016a48:	0001883a 	nop
 8016a4c:	e0bffc17 	ldw	r2,-16(fp)
 8016a50:	10c00d17 	ldw	r3,52(r2)
 8016a54:	e0bff517 	ldw	r2,-44(fp)
 8016a58:	1880051e 	bne	r3,r2,8016a70 <altera_avalon_jtag_uart_write+0x1b8>
 8016a5c:	e0bffc17 	ldw	r2,-16(fp)
 8016a60:	10c00917 	ldw	r3,36(r2)
 8016a64:	e0bffc17 	ldw	r2,-16(fp)
 8016a68:	10800117 	ldw	r2,4(r2)
 8016a6c:	18bff736 	bltu	r3,r2,8016a4c <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8016a70:	e0bffc17 	ldw	r2,-16(fp)
 8016a74:	10800917 	ldw	r2,36(r2)
 8016a78:	1000051e 	bne	r2,zero,8016a90 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8016a7c:	e0bffe17 	ldw	r2,-8(fp)
 8016a80:	00bfd016 	blt	zero,r2,80169c4 <altera_avalon_jtag_uart_write+0x10c>
 8016a84:	00000306 	br	8016a94 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8016a88:	0001883a 	nop
 8016a8c:	00000106 	br	8016a94 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8016a90:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8016a94:	e0fffd17 	ldw	r3,-12(fp)
 8016a98:	e0bff717 	ldw	r2,-36(fp)
 8016a9c:	18800426 	beq	r3,r2,8016ab0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8016aa0:	e0fffd17 	ldw	r3,-12(fp)
 8016aa4:	e0bff717 	ldw	r2,-36(fp)
 8016aa8:	1885c83a 	sub	r2,r3,r2
 8016aac:	00000606 	br	8016ac8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8016ab0:	e0bfff17 	ldw	r2,-4(fp)
 8016ab4:	1090000c 	andi	r2,r2,16384
 8016ab8:	10000226 	beq	r2,zero,8016ac4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8016abc:	00bffd44 	movi	r2,-11
 8016ac0:	00000106 	br	8016ac8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8016ac4:	00bffec4 	movi	r2,-5
}
 8016ac8:	e037883a 	mov	sp,fp
 8016acc:	dfc00117 	ldw	ra,4(sp)
 8016ad0:	df000017 	ldw	fp,0(sp)
 8016ad4:	dec00204 	addi	sp,sp,8
 8016ad8:	f800283a 	ret

08016adc <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 8016adc:	defff404 	addi	sp,sp,-48
 8016ae0:	df000b15 	stw	fp,44(sp)
 8016ae4:	df000b04 	addi	fp,sp,44
 8016ae8:	e13ffc15 	stw	r4,-16(fp)
 8016aec:	e17ffd15 	stw	r5,-12(fp)
 8016af0:	e1bffe15 	stw	r6,-8(fp)
 8016af4:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 8016af8:	e0ffff17 	ldw	r3,-4(fp)
 8016afc:	e0bffe17 	ldw	r2,-8(fp)
 8016b00:	1885883a 	add	r2,r3,r2
 8016b04:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 8016b08:	e0c00217 	ldw	r3,8(fp)
 8016b0c:	e0800117 	ldw	r2,4(fp)
 8016b10:	1885883a 	add	r2,r3,r2
 8016b14:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 8016b18:	e0800117 	ldw	r2,4(fp)
 8016b1c:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 8016b20:	e0bffe17 	ldw	r2,-8(fp)
 8016b24:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 8016b28:	00800044 	movi	r2,1
 8016b2c:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 8016b30:	e0bffc17 	ldw	r2,-16(fp)
 8016b34:	10800504 	addi	r2,r2,20
 8016b38:	1009883a 	mov	r4,r2
 8016b3c:	00c00044 	movi	r3,1
 8016b40:	e0bffd17 	ldw	r2,-12(fp)
 8016b44:	1884983a 	sll	r2,r3,r2
 8016b48:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 8016b4c:	e0800317 	ldw	r2,12(fp)
 8016b50:	1080008c 	andi	r2,r2,2
 8016b54:	1000051e 	bne	r2,zero,8016b6c <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 8016b58:	e0bffc17 	ldw	r2,-16(fp)
 8016b5c:	10800304 	addi	r2,r2,12
 8016b60:	1007883a 	mov	r3,r2
 8016b64:	00810004 	movi	r2,1024
 8016b68:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 8016b6c:	e0bffc17 	ldw	r2,-16(fp)
 8016b70:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 8016b74:	e0bffc17 	ldw	r2,-16(fp)
 8016b78:	10800204 	addi	r2,r2,8
 8016b7c:	10800037 	ldwio	r2,0(r2)
 8016b80:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 8016b84:	e0bffa17 	ldw	r2,-24(fp)
 8016b88:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 8016b8c:	10000226 	beq	r2,zero,8016b98 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 8016b90:	e0bff717 	ldw	r2,-36(fp)
 8016b94:	1000031e 	bne	r2,zero,8016ba4 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 8016b98:	e0bffa17 	ldw	r2,-24(fp)
 8016b9c:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 8016ba0:	103ff426 	beq	r2,zero,8016b74 <alt_avalon_spi_command+0x98>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 8016ba4:	e0bffa17 	ldw	r2,-24(fp)
 8016ba8:	1080100c 	andi	r2,r2,64
 8016bac:	10001e26 	beq	r2,zero,8016c28 <alt_avalon_spi_command+0x14c>
 8016bb0:	e0bff717 	ldw	r2,-36(fp)
 8016bb4:	00801c0e 	bge	zero,r2,8016c28 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 8016bb8:	e0bff717 	ldw	r2,-36(fp)
 8016bbc:	10bfffc4 	addi	r2,r2,-1
 8016bc0:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 8016bc4:	e0ffff17 	ldw	r3,-4(fp)
 8016bc8:	e0bff817 	ldw	r2,-32(fp)
 8016bcc:	18800a2e 	bgeu	r3,r2,8016bf8 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 8016bd0:	e0bffc17 	ldw	r2,-16(fp)
 8016bd4:	10800104 	addi	r2,r2,4
 8016bd8:	1009883a 	mov	r4,r2
 8016bdc:	e0bfff17 	ldw	r2,-4(fp)
 8016be0:	10c00044 	addi	r3,r2,1
 8016be4:	e0ffff15 	stw	r3,-4(fp)
 8016be8:	10800003 	ldbu	r2,0(r2)
 8016bec:	10803fcc 	andi	r2,r2,255
 8016bf0:	20800035 	stwio	r2,0(r4)
 8016bf4:	00000c06 	br	8016c28 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 8016bf8:	e0bff517 	ldw	r2,-44(fp)
 8016bfc:	10000826 	beq	r2,zero,8016c20 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 8016c00:	e0bff517 	ldw	r2,-44(fp)
 8016c04:	10bfffc4 	addi	r2,r2,-1
 8016c08:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 8016c0c:	e0bffc17 	ldw	r2,-16(fp)
 8016c10:	10800104 	addi	r2,r2,4
 8016c14:	0007883a 	mov	r3,zero
 8016c18:	10c00035 	stwio	r3,0(r2)
 8016c1c:	00000206 	br	8016c28 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 8016c20:	00bf0004 	movi	r2,-1024
 8016c24:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 8016c28:	e0bffa17 	ldw	r2,-24(fp)
 8016c2c:	1080200c 	andi	r2,r2,128
 8016c30:	103fd026 	beq	r2,zero,8016b74 <alt_avalon_spi_command+0x98>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 8016c34:	e0bffc17 	ldw	r2,-16(fp)
 8016c38:	10800037 	ldwio	r2,0(r2)
 8016c3c:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 8016c40:	e0bff617 	ldw	r2,-40(fp)
 8016c44:	10000426 	beq	r2,zero,8016c58 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 8016c48:	e0bff617 	ldw	r2,-40(fp)
 8016c4c:	10bfffc4 	addi	r2,r2,-1
 8016c50:	e0bff615 	stw	r2,-40(fp)
 8016c54:	00000506 	br	8016c6c <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 8016c58:	e0800217 	ldw	r2,8(fp)
 8016c5c:	10c00044 	addi	r3,r2,1
 8016c60:	e0c00215 	stw	r3,8(fp)
 8016c64:	e0fffb17 	ldw	r3,-20(fp)
 8016c68:	10c00005 	stb	r3,0(r2)
      credits++;
 8016c6c:	e0bff717 	ldw	r2,-36(fp)
 8016c70:	10800044 	addi	r2,r2,1
 8016c74:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 8016c78:	e0bff617 	ldw	r2,-40(fp)
 8016c7c:	103fbd1e 	bne	r2,zero,8016b74 <alt_avalon_spi_command+0x98>
 8016c80:	e0c00217 	ldw	r3,8(fp)
 8016c84:	e0bff917 	ldw	r2,-28(fp)
 8016c88:	18bfba1e 	bne	r3,r2,8016b74 <alt_avalon_spi_command+0x98>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 8016c8c:	e0bffc17 	ldw	r2,-16(fp)
 8016c90:	10800204 	addi	r2,r2,8
 8016c94:	10800037 	ldwio	r2,0(r2)
 8016c98:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 8016c9c:	e0bffa17 	ldw	r2,-24(fp)
 8016ca0:	1080080c 	andi	r2,r2,32
 8016ca4:	103ff926 	beq	r2,zero,8016c8c <alt_avalon_spi_command+0x1b0>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 8016ca8:	e0800317 	ldw	r2,12(fp)
 8016cac:	1080004c 	andi	r2,r2,1
 8016cb0:	1000041e 	bne	r2,zero,8016cc4 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 8016cb4:	e0bffc17 	ldw	r2,-16(fp)
 8016cb8:	10800304 	addi	r2,r2,12
 8016cbc:	0007883a 	mov	r3,zero
 8016cc0:	10c00035 	stwio	r3,0(r2)

  return read_length;
 8016cc4:	e0800117 	ldw	r2,4(fp)
}
 8016cc8:	e037883a 	mov	sp,fp
 8016ccc:	df000017 	ldw	fp,0(sp)
 8016cd0:	dec00104 	addi	sp,sp,4
 8016cd4:	f800283a 	ret

08016cd8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8016cd8:	defffa04 	addi	sp,sp,-24
 8016cdc:	dfc00515 	stw	ra,20(sp)
 8016ce0:	df000415 	stw	fp,16(sp)
 8016ce4:	df000404 	addi	fp,sp,16
 8016ce8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8016cec:	0007883a 	mov	r3,zero
 8016cf0:	e0bfff17 	ldw	r2,-4(fp)
 8016cf4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8016cf8:	e0bfff17 	ldw	r2,-4(fp)
 8016cfc:	10800104 	addi	r2,r2,4
 8016d00:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016d04:	0005303a 	rdctl	r2,status
 8016d08:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016d0c:	e0fffd17 	ldw	r3,-12(fp)
 8016d10:	00bfff84 	movi	r2,-2
 8016d14:	1884703a 	and	r2,r3,r2
 8016d18:	1001703a 	wrctl	status,r2
  
  return context;
 8016d1c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8016d20:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8016d24:	8015c780 	call	8015c78 <alt_tick>
 8016d28:	e0bffc17 	ldw	r2,-16(fp)
 8016d2c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016d30:	e0bffe17 	ldw	r2,-8(fp)
 8016d34:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8016d38:	0001883a 	nop
 8016d3c:	e037883a 	mov	sp,fp
 8016d40:	dfc00117 	ldw	ra,4(sp)
 8016d44:	df000017 	ldw	fp,0(sp)
 8016d48:	dec00204 	addi	sp,sp,8
 8016d4c:	f800283a 	ret

08016d50 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8016d50:	defff804 	addi	sp,sp,-32
 8016d54:	dfc00715 	stw	ra,28(sp)
 8016d58:	df000615 	stw	fp,24(sp)
 8016d5c:	df000604 	addi	fp,sp,24
 8016d60:	e13ffc15 	stw	r4,-16(fp)
 8016d64:	e17ffd15 	stw	r5,-12(fp)
 8016d68:	e1bffe15 	stw	r6,-8(fp)
 8016d6c:	e1ffff15 	stw	r7,-4(fp)
 8016d70:	e0bfff17 	ldw	r2,-4(fp)
 8016d74:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8016d78:	d0a73a17 	ldw	r2,-25368(gp)
 8016d7c:	1000021e 	bne	r2,zero,8016d88 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 8016d80:	e0bffb17 	ldw	r2,-20(fp)
 8016d84:	d0a73a15 	stw	r2,-25368(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8016d88:	e0bffc17 	ldw	r2,-16(fp)
 8016d8c:	10800104 	addi	r2,r2,4
 8016d90:	00c001c4 	movi	r3,7
 8016d94:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8016d98:	d8000015 	stw	zero,0(sp)
 8016d9c:	e1fffc17 	ldw	r7,-16(fp)
 8016da0:	01820074 	movhi	r6,2049
 8016da4:	319b3604 	addi	r6,r6,27864
 8016da8:	e17ffe17 	ldw	r5,-8(fp)
 8016dac:	e13ffd17 	ldw	r4,-12(fp)
 8016db0:	80172300 	call	8017230 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8016db4:	0001883a 	nop
 8016db8:	e037883a 	mov	sp,fp
 8016dbc:	dfc00117 	ldw	ra,4(sp)
 8016dc0:	df000017 	ldw	fp,0(sp)
 8016dc4:	dec00204 	addi	sp,sp,8
 8016dc8:	f800283a 	ret

08016dcc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8016dcc:	defff504 	addi	sp,sp,-44
 8016dd0:	df000a15 	stw	fp,40(sp)
 8016dd4:	df000a04 	addi	fp,sp,40
 8016dd8:	e13ffc15 	stw	r4,-16(fp)
 8016ddc:	e17ffd15 	stw	r5,-12(fp)
 8016de0:	e1bffe15 	stw	r6,-8(fp)
 8016de4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8016de8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8016dec:	d0a73a17 	ldw	r2,-25368(gp)
  
  if (alt_ticks_per_second ())
 8016df0:	10003c26 	beq	r2,zero,8016ee4 <alt_alarm_start+0x118>
  {
    if (alarm)
 8016df4:	e0bffc17 	ldw	r2,-16(fp)
 8016df8:	10003826 	beq	r2,zero,8016edc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8016dfc:	e0bffc17 	ldw	r2,-16(fp)
 8016e00:	e0fffe17 	ldw	r3,-8(fp)
 8016e04:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8016e08:	e0bffc17 	ldw	r2,-16(fp)
 8016e0c:	e0ffff17 	ldw	r3,-4(fp)
 8016e10:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016e14:	0005303a 	rdctl	r2,status
 8016e18:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016e1c:	e0fff917 	ldw	r3,-28(fp)
 8016e20:	00bfff84 	movi	r2,-2
 8016e24:	1884703a 	and	r2,r3,r2
 8016e28:	1001703a 	wrctl	status,r2
  
  return context;
 8016e2c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8016e30:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8016e34:	d0a73b17 	ldw	r2,-25364(gp)
      
      current_nticks = alt_nticks();
 8016e38:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8016e3c:	e0fffd17 	ldw	r3,-12(fp)
 8016e40:	e0bff617 	ldw	r2,-40(fp)
 8016e44:	1885883a 	add	r2,r3,r2
 8016e48:	10c00044 	addi	r3,r2,1
 8016e4c:	e0bffc17 	ldw	r2,-16(fp)
 8016e50:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8016e54:	e0bffc17 	ldw	r2,-16(fp)
 8016e58:	10c00217 	ldw	r3,8(r2)
 8016e5c:	e0bff617 	ldw	r2,-40(fp)
 8016e60:	1880042e 	bgeu	r3,r2,8016e74 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8016e64:	e0bffc17 	ldw	r2,-16(fp)
 8016e68:	00c00044 	movi	r3,1
 8016e6c:	10c00405 	stb	r3,16(r2)
 8016e70:	00000206 	br	8016e7c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8016e74:	e0bffc17 	ldw	r2,-16(fp)
 8016e78:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8016e7c:	e0bffc17 	ldw	r2,-16(fp)
 8016e80:	d0e01c04 	addi	r3,gp,-32656
 8016e84:	e0fffa15 	stw	r3,-24(fp)
 8016e88:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8016e8c:	e0bffb17 	ldw	r2,-20(fp)
 8016e90:	e0fffa17 	ldw	r3,-24(fp)
 8016e94:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8016e98:	e0bffa17 	ldw	r2,-24(fp)
 8016e9c:	10c00017 	ldw	r3,0(r2)
 8016ea0:	e0bffb17 	ldw	r2,-20(fp)
 8016ea4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8016ea8:	e0bffa17 	ldw	r2,-24(fp)
 8016eac:	10800017 	ldw	r2,0(r2)
 8016eb0:	e0fffb17 	ldw	r3,-20(fp)
 8016eb4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8016eb8:	e0bffa17 	ldw	r2,-24(fp)
 8016ebc:	e0fffb17 	ldw	r3,-20(fp)
 8016ec0:	10c00015 	stw	r3,0(r2)
 8016ec4:	e0bff817 	ldw	r2,-32(fp)
 8016ec8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016ecc:	e0bff717 	ldw	r2,-36(fp)
 8016ed0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8016ed4:	0005883a 	mov	r2,zero
 8016ed8:	00000306 	br	8016ee8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8016edc:	00bffa84 	movi	r2,-22
 8016ee0:	00000106 	br	8016ee8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8016ee4:	00bfde84 	movi	r2,-134
  }
}
 8016ee8:	e037883a 	mov	sp,fp
 8016eec:	df000017 	ldw	fp,0(sp)
 8016ef0:	dec00104 	addi	sp,sp,4
 8016ef4:	f800283a 	ret

08016ef8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8016ef8:	defffa04 	addi	sp,sp,-24
 8016efc:	dfc00515 	stw	ra,20(sp)
 8016f00:	df000415 	stw	fp,16(sp)
 8016f04:	df000404 	addi	fp,sp,16
 8016f08:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 8016f0c:	00800244 	movi	r2,9
 8016f10:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8016f14:	014003f4 	movhi	r5,15
 8016f18:	29509004 	addi	r5,r5,16960
 8016f1c:	e13ffd17 	ldw	r4,-12(fp)
 8016f20:	8007e400 	call	8007e40 <__mulsi3>
 8016f24:	100b883a 	mov	r5,r2
 8016f28:	0100bef4 	movhi	r4,763
 8016f2c:	213c2004 	addi	r4,r4,-3968
 8016f30:	8007d840 	call	8007d84 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8016f34:	100b883a 	mov	r5,r2
 8016f38:	01200034 	movhi	r4,32768
 8016f3c:	213fffc4 	addi	r4,r4,-1
 8016f40:	8007d840 	call	8007d84 <__udivsi3>
 8016f44:	100b883a 	mov	r5,r2
 8016f48:	e13fff17 	ldw	r4,-4(fp)
 8016f4c:	8007d840 	call	8007d84 <__udivsi3>
 8016f50:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8016f54:	e0bffe17 	ldw	r2,-8(fp)
 8016f58:	10002a26 	beq	r2,zero,8017004 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8016f5c:	e03ffc15 	stw	zero,-16(fp)
 8016f60:	00001706 	br	8016fc0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8016f64:	00a00034 	movhi	r2,32768
 8016f68:	10bfffc4 	addi	r2,r2,-1
 8016f6c:	10bfffc4 	addi	r2,r2,-1
 8016f70:	103ffe1e 	bne	r2,zero,8016f6c <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8016f74:	014003f4 	movhi	r5,15
 8016f78:	29509004 	addi	r5,r5,16960
 8016f7c:	e13ffd17 	ldw	r4,-12(fp)
 8016f80:	8007e400 	call	8007e40 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8016f84:	100b883a 	mov	r5,r2
 8016f88:	0100bef4 	movhi	r4,763
 8016f8c:	213c2004 	addi	r4,r4,-3968
 8016f90:	8007d840 	call	8007d84 <__udivsi3>
 8016f94:	100b883a 	mov	r5,r2
 8016f98:	01200034 	movhi	r4,32768
 8016f9c:	213fffc4 	addi	r4,r4,-1
 8016fa0:	8007d840 	call	8007d84 <__udivsi3>
 8016fa4:	1007883a 	mov	r3,r2
 8016fa8:	e0bfff17 	ldw	r2,-4(fp)
 8016fac:	10c5c83a 	sub	r2,r2,r3
 8016fb0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8016fb4:	e0bffc17 	ldw	r2,-16(fp)
 8016fb8:	10800044 	addi	r2,r2,1
 8016fbc:	e0bffc15 	stw	r2,-16(fp)
 8016fc0:	e0fffc17 	ldw	r3,-16(fp)
 8016fc4:	e0bffe17 	ldw	r2,-8(fp)
 8016fc8:	18bfe616 	blt	r3,r2,8016f64 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8016fcc:	014003f4 	movhi	r5,15
 8016fd0:	29509004 	addi	r5,r5,16960
 8016fd4:	e13ffd17 	ldw	r4,-12(fp)
 8016fd8:	8007e400 	call	8007e40 <__mulsi3>
 8016fdc:	100b883a 	mov	r5,r2
 8016fe0:	0100bef4 	movhi	r4,763
 8016fe4:	213c2004 	addi	r4,r4,-3968
 8016fe8:	8007d840 	call	8007d84 <__udivsi3>
 8016fec:	e17fff17 	ldw	r5,-4(fp)
 8016ff0:	1009883a 	mov	r4,r2
 8016ff4:	8007e400 	call	8007e40 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8016ff8:	10bfffc4 	addi	r2,r2,-1
 8016ffc:	103ffe1e 	bne	r2,zero,8016ff8 <alt_busy_sleep+0x100>
 8017000:	00000d06 	br	8017038 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8017004:	014003f4 	movhi	r5,15
 8017008:	29509004 	addi	r5,r5,16960
 801700c:	e13ffd17 	ldw	r4,-12(fp)
 8017010:	8007e400 	call	8007e40 <__mulsi3>
 8017014:	100b883a 	mov	r5,r2
 8017018:	0100bef4 	movhi	r4,763
 801701c:	213c2004 	addi	r4,r4,-3968
 8017020:	8007d840 	call	8007d84 <__udivsi3>
 8017024:	e17fff17 	ldw	r5,-4(fp)
 8017028:	1009883a 	mov	r4,r2
 801702c:	8007e400 	call	8007e40 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8017030:	10bfffc4 	addi	r2,r2,-1
 8017034:	00bffe16 	blt	zero,r2,8017030 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8017038:	0005883a 	mov	r2,zero
}
 801703c:	e037883a 	mov	sp,fp
 8017040:	dfc00117 	ldw	ra,4(sp)
 8017044:	df000017 	ldw	fp,0(sp)
 8017048:	dec00204 	addi	sp,sp,8
 801704c:	f800283a 	ret

08017050 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8017050:	deffff04 	addi	sp,sp,-4
 8017054:	df000015 	stw	fp,0(sp)
 8017058:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 801705c:	0001883a 	nop
 8017060:	e037883a 	mov	sp,fp
 8017064:	df000017 	ldw	fp,0(sp)
 8017068:	dec00104 	addi	sp,sp,4
 801706c:	f800283a 	ret

08017070 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8017070:	defffe04 	addi	sp,sp,-8
 8017074:	dfc00115 	stw	ra,4(sp)
 8017078:	df000015 	stw	fp,0(sp)
 801707c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8017080:	d0a01a17 	ldw	r2,-32664(gp)
 8017084:	10000326 	beq	r2,zero,8017094 <alt_get_errno+0x24>
 8017088:	d0a01a17 	ldw	r2,-32664(gp)
 801708c:	103ee83a 	callr	r2
 8017090:	00000106 	br	8017098 <alt_get_errno+0x28>
 8017094:	d0a72c04 	addi	r2,gp,-25424
}
 8017098:	e037883a 	mov	sp,fp
 801709c:	dfc00117 	ldw	ra,4(sp)
 80170a0:	df000017 	ldw	fp,0(sp)
 80170a4:	dec00204 	addi	sp,sp,8
 80170a8:	f800283a 	ret

080170ac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 80170ac:	defffa04 	addi	sp,sp,-24
 80170b0:	dfc00515 	stw	ra,20(sp)
 80170b4:	df000415 	stw	fp,16(sp)
 80170b8:	df000404 	addi	fp,sp,16
 80170bc:	e13ffe15 	stw	r4,-8(fp)
 80170c0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 80170c4:	e0bffe17 	ldw	r2,-8(fp)
 80170c8:	10000326 	beq	r2,zero,80170d8 <alt_dev_llist_insert+0x2c>
 80170cc:	e0bffe17 	ldw	r2,-8(fp)
 80170d0:	10800217 	ldw	r2,8(r2)
 80170d4:	1000061e 	bne	r2,zero,80170f0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 80170d8:	80170700 	call	8017070 <alt_get_errno>
 80170dc:	1007883a 	mov	r3,r2
 80170e0:	00800584 	movi	r2,22
 80170e4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 80170e8:	00bffa84 	movi	r2,-22
 80170ec:	00001306 	br	801713c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 80170f0:	e0bffe17 	ldw	r2,-8(fp)
 80170f4:	e0ffff17 	ldw	r3,-4(fp)
 80170f8:	e0fffc15 	stw	r3,-16(fp)
 80170fc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8017100:	e0bffd17 	ldw	r2,-12(fp)
 8017104:	e0fffc17 	ldw	r3,-16(fp)
 8017108:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 801710c:	e0bffc17 	ldw	r2,-16(fp)
 8017110:	10c00017 	ldw	r3,0(r2)
 8017114:	e0bffd17 	ldw	r2,-12(fp)
 8017118:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 801711c:	e0bffc17 	ldw	r2,-16(fp)
 8017120:	10800017 	ldw	r2,0(r2)
 8017124:	e0fffd17 	ldw	r3,-12(fp)
 8017128:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 801712c:	e0bffc17 	ldw	r2,-16(fp)
 8017130:	e0fffd17 	ldw	r3,-12(fp)
 8017134:	10c00015 	stw	r3,0(r2)

  return 0;  
 8017138:	0005883a 	mov	r2,zero
}
 801713c:	e037883a 	mov	sp,fp
 8017140:	dfc00117 	ldw	ra,4(sp)
 8017144:	df000017 	ldw	fp,0(sp)
 8017148:	dec00204 	addi	sp,sp,8
 801714c:	f800283a 	ret

08017150 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8017150:	defffd04 	addi	sp,sp,-12
 8017154:	dfc00215 	stw	ra,8(sp)
 8017158:	df000115 	stw	fp,4(sp)
 801715c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8017160:	00820074 	movhi	r2,2049
 8017164:	109ffc04 	addi	r2,r2,32752
 8017168:	e0bfff15 	stw	r2,-4(fp)
 801716c:	00000606 	br	8017188 <_do_ctors+0x38>
        (*ctor) (); 
 8017170:	e0bfff17 	ldw	r2,-4(fp)
 8017174:	10800017 	ldw	r2,0(r2)
 8017178:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 801717c:	e0bfff17 	ldw	r2,-4(fp)
 8017180:	10bfff04 	addi	r2,r2,-4
 8017184:	e0bfff15 	stw	r2,-4(fp)
 8017188:	e0ffff17 	ldw	r3,-4(fp)
 801718c:	00820074 	movhi	r2,2049
 8017190:	109ffd04 	addi	r2,r2,32756
 8017194:	18bff62e 	bgeu	r3,r2,8017170 <_do_ctors+0x20>
        (*ctor) (); 
}
 8017198:	0001883a 	nop
 801719c:	e037883a 	mov	sp,fp
 80171a0:	dfc00117 	ldw	ra,4(sp)
 80171a4:	df000017 	ldw	fp,0(sp)
 80171a8:	dec00204 	addi	sp,sp,8
 80171ac:	f800283a 	ret

080171b0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 80171b0:	defffd04 	addi	sp,sp,-12
 80171b4:	dfc00215 	stw	ra,8(sp)
 80171b8:	df000115 	stw	fp,4(sp)
 80171bc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80171c0:	00820074 	movhi	r2,2049
 80171c4:	109ffc04 	addi	r2,r2,32752
 80171c8:	e0bfff15 	stw	r2,-4(fp)
 80171cc:	00000606 	br	80171e8 <_do_dtors+0x38>
        (*dtor) (); 
 80171d0:	e0bfff17 	ldw	r2,-4(fp)
 80171d4:	10800017 	ldw	r2,0(r2)
 80171d8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80171dc:	e0bfff17 	ldw	r2,-4(fp)
 80171e0:	10bfff04 	addi	r2,r2,-4
 80171e4:	e0bfff15 	stw	r2,-4(fp)
 80171e8:	e0ffff17 	ldw	r3,-4(fp)
 80171ec:	00820074 	movhi	r2,2049
 80171f0:	109ffd04 	addi	r2,r2,32756
 80171f4:	18bff62e 	bgeu	r3,r2,80171d0 <_do_dtors+0x20>
        (*dtor) (); 
}
 80171f8:	0001883a 	nop
 80171fc:	e037883a 	mov	sp,fp
 8017200:	dfc00117 	ldw	ra,4(sp)
 8017204:	df000017 	ldw	fp,0(sp)
 8017208:	dec00204 	addi	sp,sp,8
 801720c:	f800283a 	ret

08017210 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8017210:	deffff04 	addi	sp,sp,-4
 8017214:	df000015 	stw	fp,0(sp)
 8017218:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 801721c:	0001883a 	nop
 8017220:	e037883a 	mov	sp,fp
 8017224:	df000017 	ldw	fp,0(sp)
 8017228:	dec00104 	addi	sp,sp,4
 801722c:	f800283a 	ret

08017230 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8017230:	defff904 	addi	sp,sp,-28
 8017234:	dfc00615 	stw	ra,24(sp)
 8017238:	df000515 	stw	fp,20(sp)
 801723c:	df000504 	addi	fp,sp,20
 8017240:	e13ffc15 	stw	r4,-16(fp)
 8017244:	e17ffd15 	stw	r5,-12(fp)
 8017248:	e1bffe15 	stw	r6,-8(fp)
 801724c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8017250:	e0800217 	ldw	r2,8(fp)
 8017254:	d8800015 	stw	r2,0(sp)
 8017258:	e1ffff17 	ldw	r7,-4(fp)
 801725c:	e1bffe17 	ldw	r6,-8(fp)
 8017260:	e17ffd17 	ldw	r5,-12(fp)
 8017264:	e13ffc17 	ldw	r4,-16(fp)
 8017268:	80173e00 	call	80173e0 <alt_iic_isr_register>
}  
 801726c:	e037883a 	mov	sp,fp
 8017270:	dfc00117 	ldw	ra,4(sp)
 8017274:	df000017 	ldw	fp,0(sp)
 8017278:	dec00204 	addi	sp,sp,8
 801727c:	f800283a 	ret

08017280 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8017280:	defff904 	addi	sp,sp,-28
 8017284:	df000615 	stw	fp,24(sp)
 8017288:	df000604 	addi	fp,sp,24
 801728c:	e13ffe15 	stw	r4,-8(fp)
 8017290:	e17fff15 	stw	r5,-4(fp)
 8017294:	e0bfff17 	ldw	r2,-4(fp)
 8017298:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801729c:	0005303a 	rdctl	r2,status
 80172a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80172a4:	e0fffb17 	ldw	r3,-20(fp)
 80172a8:	00bfff84 	movi	r2,-2
 80172ac:	1884703a 	and	r2,r3,r2
 80172b0:	1001703a 	wrctl	status,r2
  
  return context;
 80172b4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80172b8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 80172bc:	00c00044 	movi	r3,1
 80172c0:	e0bffa17 	ldw	r2,-24(fp)
 80172c4:	1884983a 	sll	r2,r3,r2
 80172c8:	1007883a 	mov	r3,r2
 80172cc:	d0a73c17 	ldw	r2,-25360(gp)
 80172d0:	1884b03a 	or	r2,r3,r2
 80172d4:	d0a73c15 	stw	r2,-25360(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80172d8:	d0a73c17 	ldw	r2,-25360(gp)
 80172dc:	100170fa 	wrctl	ienable,r2
 80172e0:	e0bffc17 	ldw	r2,-16(fp)
 80172e4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80172e8:	e0bffd17 	ldw	r2,-12(fp)
 80172ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80172f0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 80172f4:	0001883a 	nop
}
 80172f8:	e037883a 	mov	sp,fp
 80172fc:	df000017 	ldw	fp,0(sp)
 8017300:	dec00104 	addi	sp,sp,4
 8017304:	f800283a 	ret

08017308 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8017308:	defff904 	addi	sp,sp,-28
 801730c:	df000615 	stw	fp,24(sp)
 8017310:	df000604 	addi	fp,sp,24
 8017314:	e13ffe15 	stw	r4,-8(fp)
 8017318:	e17fff15 	stw	r5,-4(fp)
 801731c:	e0bfff17 	ldw	r2,-4(fp)
 8017320:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8017324:	0005303a 	rdctl	r2,status
 8017328:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801732c:	e0fffb17 	ldw	r3,-20(fp)
 8017330:	00bfff84 	movi	r2,-2
 8017334:	1884703a 	and	r2,r3,r2
 8017338:	1001703a 	wrctl	status,r2
  
  return context;
 801733c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8017340:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8017344:	00c00044 	movi	r3,1
 8017348:	e0bffa17 	ldw	r2,-24(fp)
 801734c:	1884983a 	sll	r2,r3,r2
 8017350:	0084303a 	nor	r2,zero,r2
 8017354:	1007883a 	mov	r3,r2
 8017358:	d0a73c17 	ldw	r2,-25360(gp)
 801735c:	1884703a 	and	r2,r3,r2
 8017360:	d0a73c15 	stw	r2,-25360(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8017364:	d0a73c17 	ldw	r2,-25360(gp)
 8017368:	100170fa 	wrctl	ienable,r2
 801736c:	e0bffc17 	ldw	r2,-16(fp)
 8017370:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8017374:	e0bffd17 	ldw	r2,-12(fp)
 8017378:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 801737c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8017380:	0001883a 	nop
}
 8017384:	e037883a 	mov	sp,fp
 8017388:	df000017 	ldw	fp,0(sp)
 801738c:	dec00104 	addi	sp,sp,4
 8017390:	f800283a 	ret

08017394 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8017394:	defffc04 	addi	sp,sp,-16
 8017398:	df000315 	stw	fp,12(sp)
 801739c:	df000304 	addi	fp,sp,12
 80173a0:	e13ffe15 	stw	r4,-8(fp)
 80173a4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 80173a8:	000530fa 	rdctl	r2,ienable
 80173ac:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 80173b0:	00c00044 	movi	r3,1
 80173b4:	e0bfff17 	ldw	r2,-4(fp)
 80173b8:	1884983a 	sll	r2,r3,r2
 80173bc:	1007883a 	mov	r3,r2
 80173c0:	e0bffd17 	ldw	r2,-12(fp)
 80173c4:	1884703a 	and	r2,r3,r2
 80173c8:	1004c03a 	cmpne	r2,r2,zero
 80173cc:	10803fcc 	andi	r2,r2,255
}
 80173d0:	e037883a 	mov	sp,fp
 80173d4:	df000017 	ldw	fp,0(sp)
 80173d8:	dec00104 	addi	sp,sp,4
 80173dc:	f800283a 	ret

080173e0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80173e0:	defff504 	addi	sp,sp,-44
 80173e4:	dfc00a15 	stw	ra,40(sp)
 80173e8:	df000915 	stw	fp,36(sp)
 80173ec:	df000904 	addi	fp,sp,36
 80173f0:	e13ffc15 	stw	r4,-16(fp)
 80173f4:	e17ffd15 	stw	r5,-12(fp)
 80173f8:	e1bffe15 	stw	r6,-8(fp)
 80173fc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8017400:	00bffa84 	movi	r2,-22
 8017404:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8017408:	e0bffd17 	ldw	r2,-12(fp)
 801740c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8017410:	e0bff817 	ldw	r2,-32(fp)
 8017414:	10800808 	cmpgei	r2,r2,32
 8017418:	1000271e 	bne	r2,zero,80174b8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801741c:	0005303a 	rdctl	r2,status
 8017420:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017424:	e0fffb17 	ldw	r3,-20(fp)
 8017428:	00bfff84 	movi	r2,-2
 801742c:	1884703a 	and	r2,r3,r2
 8017430:	1001703a 	wrctl	status,r2
  
  return context;
 8017434:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8017438:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 801743c:	008200b4 	movhi	r2,2050
 8017440:	10b0ab04 	addi	r2,r2,-15700
 8017444:	e0fff817 	ldw	r3,-32(fp)
 8017448:	180690fa 	slli	r3,r3,3
 801744c:	10c5883a 	add	r2,r2,r3
 8017450:	e0fffe17 	ldw	r3,-8(fp)
 8017454:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8017458:	008200b4 	movhi	r2,2050
 801745c:	10b0ab04 	addi	r2,r2,-15700
 8017460:	e0fff817 	ldw	r3,-32(fp)
 8017464:	180690fa 	slli	r3,r3,3
 8017468:	10c5883a 	add	r2,r2,r3
 801746c:	10800104 	addi	r2,r2,4
 8017470:	e0ffff17 	ldw	r3,-4(fp)
 8017474:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8017478:	e0bffe17 	ldw	r2,-8(fp)
 801747c:	10000526 	beq	r2,zero,8017494 <alt_iic_isr_register+0xb4>
 8017480:	e0bff817 	ldw	r2,-32(fp)
 8017484:	100b883a 	mov	r5,r2
 8017488:	e13ffc17 	ldw	r4,-16(fp)
 801748c:	80172800 	call	8017280 <alt_ic_irq_enable>
 8017490:	00000406 	br	80174a4 <alt_iic_isr_register+0xc4>
 8017494:	e0bff817 	ldw	r2,-32(fp)
 8017498:	100b883a 	mov	r5,r2
 801749c:	e13ffc17 	ldw	r4,-16(fp)
 80174a0:	80173080 	call	8017308 <alt_ic_irq_disable>
 80174a4:	e0bff715 	stw	r2,-36(fp)
 80174a8:	e0bffa17 	ldw	r2,-24(fp)
 80174ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80174b0:	e0bff917 	ldw	r2,-28(fp)
 80174b4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 80174b8:	e0bff717 	ldw	r2,-36(fp)
}
 80174bc:	e037883a 	mov	sp,fp
 80174c0:	dfc00117 	ldw	ra,4(sp)
 80174c4:	df000017 	ldw	fp,0(sp)
 80174c8:	dec00204 	addi	sp,sp,8
 80174cc:	f800283a 	ret

080174d0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 80174d0:	defff804 	addi	sp,sp,-32
 80174d4:	dfc00715 	stw	ra,28(sp)
 80174d8:	df000615 	stw	fp,24(sp)
 80174dc:	dc000515 	stw	r16,20(sp)
 80174e0:	df000604 	addi	fp,sp,24
 80174e4:	e13ffb15 	stw	r4,-20(fp)
 80174e8:	e17ffc15 	stw	r5,-16(fp)
 80174ec:	e1bffd15 	stw	r6,-12(fp)
 80174f0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 80174f4:	e1bffe17 	ldw	r6,-8(fp)
 80174f8:	e17ffd17 	ldw	r5,-12(fp)
 80174fc:	e13ffc17 	ldw	r4,-16(fp)
 8017500:	80177580 	call	8017758 <open>
 8017504:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 8017508:	e0bffa17 	ldw	r2,-24(fp)
 801750c:	10002216 	blt	r2,zero,8017598 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 8017510:	040200b4 	movhi	r16,2050
 8017514:	8423d004 	addi	r16,r16,-28864
 8017518:	e0bffa17 	ldw	r2,-24(fp)
 801751c:	01400304 	movi	r5,12
 8017520:	1009883a 	mov	r4,r2
 8017524:	8007e400 	call	8007e40 <__mulsi3>
 8017528:	8085883a 	add	r2,r16,r2
 801752c:	10c00017 	ldw	r3,0(r2)
 8017530:	e0bffb17 	ldw	r2,-20(fp)
 8017534:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8017538:	040200b4 	movhi	r16,2050
 801753c:	8423d004 	addi	r16,r16,-28864
 8017540:	e0bffa17 	ldw	r2,-24(fp)
 8017544:	01400304 	movi	r5,12
 8017548:	1009883a 	mov	r4,r2
 801754c:	8007e400 	call	8007e40 <__mulsi3>
 8017550:	8085883a 	add	r2,r16,r2
 8017554:	10800104 	addi	r2,r2,4
 8017558:	10c00017 	ldw	r3,0(r2)
 801755c:	e0bffb17 	ldw	r2,-20(fp)
 8017560:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8017564:	040200b4 	movhi	r16,2050
 8017568:	8423d004 	addi	r16,r16,-28864
 801756c:	e0bffa17 	ldw	r2,-24(fp)
 8017570:	01400304 	movi	r5,12
 8017574:	1009883a 	mov	r4,r2
 8017578:	8007e400 	call	8007e40 <__mulsi3>
 801757c:	8085883a 	add	r2,r16,r2
 8017580:	10800204 	addi	r2,r2,8
 8017584:	10c00017 	ldw	r3,0(r2)
 8017588:	e0bffb17 	ldw	r2,-20(fp)
 801758c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8017590:	e13ffa17 	ldw	r4,-24(fp)
 8017594:	8015aa80 	call	8015aa8 <alt_release_fd>
  }
} 
 8017598:	0001883a 	nop
 801759c:	e6ffff04 	addi	sp,fp,-4
 80175a0:	dfc00217 	ldw	ra,8(sp)
 80175a4:	df000117 	ldw	fp,4(sp)
 80175a8:	dc000017 	ldw	r16,0(sp)
 80175ac:	dec00304 	addi	sp,sp,12
 80175b0:	f800283a 	ret

080175b4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 80175b4:	defffb04 	addi	sp,sp,-20
 80175b8:	dfc00415 	stw	ra,16(sp)
 80175bc:	df000315 	stw	fp,12(sp)
 80175c0:	df000304 	addi	fp,sp,12
 80175c4:	e13ffd15 	stw	r4,-12(fp)
 80175c8:	e17ffe15 	stw	r5,-8(fp)
 80175cc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80175d0:	01c07fc4 	movi	r7,511
 80175d4:	01800044 	movi	r6,1
 80175d8:	e17ffd17 	ldw	r5,-12(fp)
 80175dc:	010200b4 	movhi	r4,2050
 80175e0:	2123d304 	addi	r4,r4,-28852
 80175e4:	80174d00 	call	80174d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80175e8:	01c07fc4 	movi	r7,511
 80175ec:	000d883a 	mov	r6,zero
 80175f0:	e17ffe17 	ldw	r5,-8(fp)
 80175f4:	010200b4 	movhi	r4,2050
 80175f8:	2123d004 	addi	r4,r4,-28864
 80175fc:	80174d00 	call	80174d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8017600:	01c07fc4 	movi	r7,511
 8017604:	01800044 	movi	r6,1
 8017608:	e17fff17 	ldw	r5,-4(fp)
 801760c:	010200b4 	movhi	r4,2050
 8017610:	2123d604 	addi	r4,r4,-28840
 8017614:	80174d00 	call	80174d0 <alt_open_fd>
}  
 8017618:	0001883a 	nop
 801761c:	e037883a 	mov	sp,fp
 8017620:	dfc00117 	ldw	ra,4(sp)
 8017624:	df000017 	ldw	fp,0(sp)
 8017628:	dec00204 	addi	sp,sp,8
 801762c:	f800283a 	ret

08017630 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8017630:	defffe04 	addi	sp,sp,-8
 8017634:	dfc00115 	stw	ra,4(sp)
 8017638:	df000015 	stw	fp,0(sp)
 801763c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8017640:	d0a01a17 	ldw	r2,-32664(gp)
 8017644:	10000326 	beq	r2,zero,8017654 <alt_get_errno+0x24>
 8017648:	d0a01a17 	ldw	r2,-32664(gp)
 801764c:	103ee83a 	callr	r2
 8017650:	00000106 	br	8017658 <alt_get_errno+0x28>
 8017654:	d0a72c04 	addi	r2,gp,-25424
}
 8017658:	e037883a 	mov	sp,fp
 801765c:	dfc00117 	ldw	ra,4(sp)
 8017660:	df000017 	ldw	fp,0(sp)
 8017664:	dec00204 	addi	sp,sp,8
 8017668:	f800283a 	ret

0801766c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 801766c:	defffb04 	addi	sp,sp,-20
 8017670:	dfc00415 	stw	ra,16(sp)
 8017674:	df000315 	stw	fp,12(sp)
 8017678:	dc000215 	stw	r16,8(sp)
 801767c:	df000304 	addi	fp,sp,12
 8017680:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8017684:	e0bffe17 	ldw	r2,-8(fp)
 8017688:	10800217 	ldw	r2,8(r2)
 801768c:	10d00034 	orhi	r3,r2,16384
 8017690:	e0bffe17 	ldw	r2,-8(fp)
 8017694:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8017698:	e03ffd15 	stw	zero,-12(fp)
 801769c:	00002306 	br	801772c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80176a0:	040200b4 	movhi	r16,2050
 80176a4:	8423d004 	addi	r16,r16,-28864
 80176a8:	e0bffd17 	ldw	r2,-12(fp)
 80176ac:	01400304 	movi	r5,12
 80176b0:	1009883a 	mov	r4,r2
 80176b4:	8007e400 	call	8007e40 <__mulsi3>
 80176b8:	8085883a 	add	r2,r16,r2
 80176bc:	10c00017 	ldw	r3,0(r2)
 80176c0:	e0bffe17 	ldw	r2,-8(fp)
 80176c4:	10800017 	ldw	r2,0(r2)
 80176c8:	1880151e 	bne	r3,r2,8017720 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80176cc:	040200b4 	movhi	r16,2050
 80176d0:	8423d004 	addi	r16,r16,-28864
 80176d4:	e0bffd17 	ldw	r2,-12(fp)
 80176d8:	01400304 	movi	r5,12
 80176dc:	1009883a 	mov	r4,r2
 80176e0:	8007e400 	call	8007e40 <__mulsi3>
 80176e4:	8085883a 	add	r2,r16,r2
 80176e8:	10800204 	addi	r2,r2,8
 80176ec:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80176f0:	10000b0e 	bge	r2,zero,8017720 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 80176f4:	01400304 	movi	r5,12
 80176f8:	e13ffd17 	ldw	r4,-12(fp)
 80176fc:	8007e400 	call	8007e40 <__mulsi3>
 8017700:	1007883a 	mov	r3,r2
 8017704:	008200b4 	movhi	r2,2050
 8017708:	10a3d004 	addi	r2,r2,-28864
 801770c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8017710:	e0bffe17 	ldw	r2,-8(fp)
 8017714:	18800226 	beq	r3,r2,8017720 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8017718:	00bffcc4 	movi	r2,-13
 801771c:	00000806 	br	8017740 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8017720:	e0bffd17 	ldw	r2,-12(fp)
 8017724:	10800044 	addi	r2,r2,1
 8017728:	e0bffd15 	stw	r2,-12(fp)
 801772c:	d0a01917 	ldw	r2,-32668(gp)
 8017730:	1007883a 	mov	r3,r2
 8017734:	e0bffd17 	ldw	r2,-12(fp)
 8017738:	18bfd92e 	bgeu	r3,r2,80176a0 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 801773c:	0005883a 	mov	r2,zero
}
 8017740:	e6ffff04 	addi	sp,fp,-4
 8017744:	dfc00217 	ldw	ra,8(sp)
 8017748:	df000117 	ldw	fp,4(sp)
 801774c:	dc000017 	ldw	r16,0(sp)
 8017750:	dec00304 	addi	sp,sp,12
 8017754:	f800283a 	ret

08017758 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8017758:	defff604 	addi	sp,sp,-40
 801775c:	dfc00915 	stw	ra,36(sp)
 8017760:	df000815 	stw	fp,32(sp)
 8017764:	df000804 	addi	fp,sp,32
 8017768:	e13ffd15 	stw	r4,-12(fp)
 801776c:	e17ffe15 	stw	r5,-8(fp)
 8017770:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8017774:	00bfffc4 	movi	r2,-1
 8017778:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 801777c:	00bffb44 	movi	r2,-19
 8017780:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8017784:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8017788:	d1601704 	addi	r5,gp,-32676
 801778c:	e13ffd17 	ldw	r4,-12(fp)
 8017790:	80178d80 	call	80178d8 <alt_find_dev>
 8017794:	e0bff815 	stw	r2,-32(fp)
 8017798:	e0bff817 	ldw	r2,-32(fp)
 801779c:	1000051e 	bne	r2,zero,80177b4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 80177a0:	e13ffd17 	ldw	r4,-12(fp)
 80177a4:	80179680 	call	8017968 <alt_find_file>
 80177a8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 80177ac:	00800044 	movi	r2,1
 80177b0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 80177b4:	e0bff817 	ldw	r2,-32(fp)
 80177b8:	10002b26 	beq	r2,zero,8017868 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80177bc:	e13ff817 	ldw	r4,-32(fp)
 80177c0:	8017a700 	call	8017a70 <alt_get_fd>
 80177c4:	e0bff915 	stw	r2,-28(fp)
 80177c8:	e0bff917 	ldw	r2,-28(fp)
 80177cc:	1000030e 	bge	r2,zero,80177dc <open+0x84>
    {
      status = index;
 80177d0:	e0bff917 	ldw	r2,-28(fp)
 80177d4:	e0bffa15 	stw	r2,-24(fp)
 80177d8:	00002506 	br	8017870 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 80177dc:	01400304 	movi	r5,12
 80177e0:	e13ff917 	ldw	r4,-28(fp)
 80177e4:	8007e400 	call	8007e40 <__mulsi3>
 80177e8:	1007883a 	mov	r3,r2
 80177ec:	008200b4 	movhi	r2,2050
 80177f0:	10a3d004 	addi	r2,r2,-28864
 80177f4:	1885883a 	add	r2,r3,r2
 80177f8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 80177fc:	e0fffe17 	ldw	r3,-8(fp)
 8017800:	00900034 	movhi	r2,16384
 8017804:	10bfffc4 	addi	r2,r2,-1
 8017808:	1886703a 	and	r3,r3,r2
 801780c:	e0bffc17 	ldw	r2,-16(fp)
 8017810:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8017814:	e0bffb17 	ldw	r2,-20(fp)
 8017818:	1000051e 	bne	r2,zero,8017830 <open+0xd8>
 801781c:	e13ffc17 	ldw	r4,-16(fp)
 8017820:	801766c0 	call	801766c <alt_file_locked>
 8017824:	e0bffa15 	stw	r2,-24(fp)
 8017828:	e0bffa17 	ldw	r2,-24(fp)
 801782c:	10001016 	blt	r2,zero,8017870 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8017830:	e0bff817 	ldw	r2,-32(fp)
 8017834:	10800317 	ldw	r2,12(r2)
 8017838:	10000826 	beq	r2,zero,801785c <open+0x104>
 801783c:	e0bff817 	ldw	r2,-32(fp)
 8017840:	10800317 	ldw	r2,12(r2)
 8017844:	e1ffff17 	ldw	r7,-4(fp)
 8017848:	e1bffe17 	ldw	r6,-8(fp)
 801784c:	e17ffd17 	ldw	r5,-12(fp)
 8017850:	e13ffc17 	ldw	r4,-16(fp)
 8017854:	103ee83a 	callr	r2
 8017858:	00000106 	br	8017860 <open+0x108>
 801785c:	0005883a 	mov	r2,zero
 8017860:	e0bffa15 	stw	r2,-24(fp)
 8017864:	00000206 	br	8017870 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8017868:	00bffb44 	movi	r2,-19
 801786c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8017870:	e0bffa17 	ldw	r2,-24(fp)
 8017874:	1000090e 	bge	r2,zero,801789c <open+0x144>
  {
    alt_release_fd (index);  
 8017878:	e13ff917 	ldw	r4,-28(fp)
 801787c:	8015aa80 	call	8015aa8 <alt_release_fd>
    ALT_ERRNO = -status;
 8017880:	80176300 	call	8017630 <alt_get_errno>
 8017884:	1007883a 	mov	r3,r2
 8017888:	e0bffa17 	ldw	r2,-24(fp)
 801788c:	0085c83a 	sub	r2,zero,r2
 8017890:	18800015 	stw	r2,0(r3)
    return -1;
 8017894:	00bfffc4 	movi	r2,-1
 8017898:	00000106 	br	80178a0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 801789c:	e0bff917 	ldw	r2,-28(fp)
}
 80178a0:	e037883a 	mov	sp,fp
 80178a4:	dfc00117 	ldw	ra,4(sp)
 80178a8:	df000017 	ldw	fp,0(sp)
 80178ac:	dec00204 	addi	sp,sp,8
 80178b0:	f800283a 	ret

080178b4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 80178b4:	deffff04 	addi	sp,sp,-4
 80178b8:	df000015 	stw	fp,0(sp)
 80178bc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80178c0:	000170fa 	wrctl	ienable,zero
}
 80178c4:	0001883a 	nop
 80178c8:	e037883a 	mov	sp,fp
 80178cc:	df000017 	ldw	fp,0(sp)
 80178d0:	dec00104 	addi	sp,sp,4
 80178d4:	f800283a 	ret

080178d8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 80178d8:	defffa04 	addi	sp,sp,-24
 80178dc:	dfc00515 	stw	ra,20(sp)
 80178e0:	df000415 	stw	fp,16(sp)
 80178e4:	df000404 	addi	fp,sp,16
 80178e8:	e13ffe15 	stw	r4,-8(fp)
 80178ec:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 80178f0:	e0bfff17 	ldw	r2,-4(fp)
 80178f4:	10800017 	ldw	r2,0(r2)
 80178f8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 80178fc:	e13ffe17 	ldw	r4,-8(fp)
 8017900:	80084040 	call	8008404 <strlen>
 8017904:	10800044 	addi	r2,r2,1
 8017908:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 801790c:	00000d06 	br	8017944 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8017910:	e0bffc17 	ldw	r2,-16(fp)
 8017914:	10800217 	ldw	r2,8(r2)
 8017918:	e0fffd17 	ldw	r3,-12(fp)
 801791c:	180d883a 	mov	r6,r3
 8017920:	e17ffe17 	ldw	r5,-8(fp)
 8017924:	1009883a 	mov	r4,r2
 8017928:	8007f280 	call	8007f28 <memcmp>
 801792c:	1000021e 	bne	r2,zero,8017938 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8017930:	e0bffc17 	ldw	r2,-16(fp)
 8017934:	00000706 	br	8017954 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8017938:	e0bffc17 	ldw	r2,-16(fp)
 801793c:	10800017 	ldw	r2,0(r2)
 8017940:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8017944:	e0fffc17 	ldw	r3,-16(fp)
 8017948:	e0bfff17 	ldw	r2,-4(fp)
 801794c:	18bff01e 	bne	r3,r2,8017910 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8017950:	0005883a 	mov	r2,zero
}
 8017954:	e037883a 	mov	sp,fp
 8017958:	dfc00117 	ldw	ra,4(sp)
 801795c:	df000017 	ldw	fp,0(sp)
 8017960:	dec00204 	addi	sp,sp,8
 8017964:	f800283a 	ret

08017968 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8017968:	defffb04 	addi	sp,sp,-20
 801796c:	dfc00415 	stw	ra,16(sp)
 8017970:	df000315 	stw	fp,12(sp)
 8017974:	df000304 	addi	fp,sp,12
 8017978:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 801797c:	d0a01517 	ldw	r2,-32684(gp)
 8017980:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8017984:	00003106 	br	8017a4c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8017988:	e0bffd17 	ldw	r2,-12(fp)
 801798c:	10800217 	ldw	r2,8(r2)
 8017990:	1009883a 	mov	r4,r2
 8017994:	80084040 	call	8008404 <strlen>
 8017998:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 801799c:	e0bffd17 	ldw	r2,-12(fp)
 80179a0:	10c00217 	ldw	r3,8(r2)
 80179a4:	e0bffe17 	ldw	r2,-8(fp)
 80179a8:	10bfffc4 	addi	r2,r2,-1
 80179ac:	1885883a 	add	r2,r3,r2
 80179b0:	10800003 	ldbu	r2,0(r2)
 80179b4:	10803fcc 	andi	r2,r2,255
 80179b8:	1080201c 	xori	r2,r2,128
 80179bc:	10bfe004 	addi	r2,r2,-128
 80179c0:	10800bd8 	cmpnei	r2,r2,47
 80179c4:	1000031e 	bne	r2,zero,80179d4 <alt_find_file+0x6c>
    {
      len -= 1;
 80179c8:	e0bffe17 	ldw	r2,-8(fp)
 80179cc:	10bfffc4 	addi	r2,r2,-1
 80179d0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80179d4:	e0bffe17 	ldw	r2,-8(fp)
 80179d8:	e0ffff17 	ldw	r3,-4(fp)
 80179dc:	1885883a 	add	r2,r3,r2
 80179e0:	10800003 	ldbu	r2,0(r2)
 80179e4:	10803fcc 	andi	r2,r2,255
 80179e8:	1080201c 	xori	r2,r2,128
 80179ec:	10bfe004 	addi	r2,r2,-128
 80179f0:	10800be0 	cmpeqi	r2,r2,47
 80179f4:	1000081e 	bne	r2,zero,8017a18 <alt_find_file+0xb0>
 80179f8:	e0bffe17 	ldw	r2,-8(fp)
 80179fc:	e0ffff17 	ldw	r3,-4(fp)
 8017a00:	1885883a 	add	r2,r3,r2
 8017a04:	10800003 	ldbu	r2,0(r2)
 8017a08:	10803fcc 	andi	r2,r2,255
 8017a0c:	1080201c 	xori	r2,r2,128
 8017a10:	10bfe004 	addi	r2,r2,-128
 8017a14:	10000a1e 	bne	r2,zero,8017a40 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8017a18:	e0bffd17 	ldw	r2,-12(fp)
 8017a1c:	10800217 	ldw	r2,8(r2)
 8017a20:	e0fffe17 	ldw	r3,-8(fp)
 8017a24:	180d883a 	mov	r6,r3
 8017a28:	e17fff17 	ldw	r5,-4(fp)
 8017a2c:	1009883a 	mov	r4,r2
 8017a30:	8007f280 	call	8007f28 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8017a34:	1000021e 	bne	r2,zero,8017a40 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8017a38:	e0bffd17 	ldw	r2,-12(fp)
 8017a3c:	00000706 	br	8017a5c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8017a40:	e0bffd17 	ldw	r2,-12(fp)
 8017a44:	10800017 	ldw	r2,0(r2)
 8017a48:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8017a4c:	e0fffd17 	ldw	r3,-12(fp)
 8017a50:	d0a01504 	addi	r2,gp,-32684
 8017a54:	18bfcc1e 	bne	r3,r2,8017988 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8017a58:	0005883a 	mov	r2,zero
}
 8017a5c:	e037883a 	mov	sp,fp
 8017a60:	dfc00117 	ldw	ra,4(sp)
 8017a64:	df000017 	ldw	fp,0(sp)
 8017a68:	dec00204 	addi	sp,sp,8
 8017a6c:	f800283a 	ret

08017a70 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8017a70:	defffa04 	addi	sp,sp,-24
 8017a74:	dfc00515 	stw	ra,20(sp)
 8017a78:	df000415 	stw	fp,16(sp)
 8017a7c:	dc000315 	stw	r16,12(sp)
 8017a80:	df000404 	addi	fp,sp,16
 8017a84:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8017a88:	00bffa04 	movi	r2,-24
 8017a8c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8017a90:	e03ffc15 	stw	zero,-16(fp)
 8017a94:	00001d06 	br	8017b0c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 8017a98:	040200b4 	movhi	r16,2050
 8017a9c:	8423d004 	addi	r16,r16,-28864
 8017aa0:	e0bffc17 	ldw	r2,-16(fp)
 8017aa4:	01400304 	movi	r5,12
 8017aa8:	1009883a 	mov	r4,r2
 8017aac:	8007e400 	call	8007e40 <__mulsi3>
 8017ab0:	8085883a 	add	r2,r16,r2
 8017ab4:	10800017 	ldw	r2,0(r2)
 8017ab8:	1000111e 	bne	r2,zero,8017b00 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 8017abc:	040200b4 	movhi	r16,2050
 8017ac0:	8423d004 	addi	r16,r16,-28864
 8017ac4:	e0bffc17 	ldw	r2,-16(fp)
 8017ac8:	01400304 	movi	r5,12
 8017acc:	1009883a 	mov	r4,r2
 8017ad0:	8007e400 	call	8007e40 <__mulsi3>
 8017ad4:	8085883a 	add	r2,r16,r2
 8017ad8:	e0fffe17 	ldw	r3,-8(fp)
 8017adc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8017ae0:	d0e01917 	ldw	r3,-32668(gp)
 8017ae4:	e0bffc17 	ldw	r2,-16(fp)
 8017ae8:	1880020e 	bge	r3,r2,8017af4 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 8017aec:	e0bffc17 	ldw	r2,-16(fp)
 8017af0:	d0a01915 	stw	r2,-32668(gp)
      }
      rc = i;
 8017af4:	e0bffc17 	ldw	r2,-16(fp)
 8017af8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8017afc:	00000606 	br	8017b18 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8017b00:	e0bffc17 	ldw	r2,-16(fp)
 8017b04:	10800044 	addi	r2,r2,1
 8017b08:	e0bffc15 	stw	r2,-16(fp)
 8017b0c:	e0bffc17 	ldw	r2,-16(fp)
 8017b10:	10800810 	cmplti	r2,r2,32
 8017b14:	103fe01e 	bne	r2,zero,8017a98 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8017b18:	e0bffd17 	ldw	r2,-12(fp)
}
 8017b1c:	e6ffff04 	addi	sp,fp,-4
 8017b20:	dfc00217 	ldw	ra,8(sp)
 8017b24:	df000117 	ldw	fp,4(sp)
 8017b28:	dc000017 	ldw	r16,0(sp)
 8017b2c:	dec00304 	addi	sp,sp,12
 8017b30:	f800283a 	ret

08017b34 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8017b34:	defffe04 	addi	sp,sp,-8
 8017b38:	df000115 	stw	fp,4(sp)
 8017b3c:	df000104 	addi	fp,sp,4
 8017b40:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8017b44:	e0bfff17 	ldw	r2,-4(fp)
 8017b48:	10bffe84 	addi	r2,r2,-6
 8017b4c:	10c00428 	cmpgeui	r3,r2,16
 8017b50:	18001a1e 	bne	r3,zero,8017bbc <alt_exception_cause_generated_bad_addr+0x88>
 8017b54:	100690ba 	slli	r3,r2,2
 8017b58:	00820074 	movhi	r2,2049
 8017b5c:	109edb04 	addi	r2,r2,31596
 8017b60:	1885883a 	add	r2,r3,r2
 8017b64:	10800017 	ldw	r2,0(r2)
 8017b68:	1000683a 	jmp	r2
 8017b6c:	08017bac 	andhi	zero,at,1518
 8017b70:	08017bac 	andhi	zero,at,1518
 8017b74:	08017bbc 	xorhi	zero,at,1518
 8017b78:	08017bbc 	xorhi	zero,at,1518
 8017b7c:	08017bbc 	xorhi	zero,at,1518
 8017b80:	08017bac 	andhi	zero,at,1518
 8017b84:	08017bb4 	orhi	zero,at,1518
 8017b88:	08017bbc 	xorhi	zero,at,1518
 8017b8c:	08017bac 	andhi	zero,at,1518
 8017b90:	08017bac 	andhi	zero,at,1518
 8017b94:	08017bbc 	xorhi	zero,at,1518
 8017b98:	08017bac 	andhi	zero,at,1518
 8017b9c:	08017bb4 	orhi	zero,at,1518
 8017ba0:	08017bbc 	xorhi	zero,at,1518
 8017ba4:	08017bbc 	xorhi	zero,at,1518
 8017ba8:	08017bac 	andhi	zero,at,1518
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8017bac:	00800044 	movi	r2,1
 8017bb0:	00000306 	br	8017bc0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8017bb4:	0005883a 	mov	r2,zero
 8017bb8:	00000106 	br	8017bc0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8017bbc:	0005883a 	mov	r2,zero
  }
}
 8017bc0:	e037883a 	mov	sp,fp
 8017bc4:	df000017 	ldw	fp,0(sp)
 8017bc8:	dec00104 	addi	sp,sp,4
 8017bcc:	f800283a 	ret

08017bd0 <atexit>:
 8017bd0:	200b883a 	mov	r5,r4
 8017bd4:	000f883a 	mov	r7,zero
 8017bd8:	000d883a 	mov	r6,zero
 8017bdc:	0009883a 	mov	r4,zero
 8017be0:	8017c1c1 	jmpi	8017c1c <__register_exitproc>

08017be4 <exit>:
 8017be4:	defffe04 	addi	sp,sp,-8
 8017be8:	000b883a 	mov	r5,zero
 8017bec:	dc000015 	stw	r16,0(sp)
 8017bf0:	dfc00115 	stw	ra,4(sp)
 8017bf4:	2021883a 	mov	r16,r4
 8017bf8:	8017d340 	call	8017d34 <__call_exitprocs>
 8017bfc:	008200b4 	movhi	r2,2050
 8017c00:	10a85704 	addi	r2,r2,-24228
 8017c04:	11000017 	ldw	r4,0(r2)
 8017c08:	20800f17 	ldw	r2,60(r4)
 8017c0c:	10000126 	beq	r2,zero,8017c14 <exit+0x30>
 8017c10:	103ee83a 	callr	r2
 8017c14:	8009883a 	mov	r4,r16
 8017c18:	8017fc00 	call	8017fc0 <_exit>

08017c1c <__register_exitproc>:
 8017c1c:	defffa04 	addi	sp,sp,-24
 8017c20:	dc000315 	stw	r16,12(sp)
 8017c24:	040200b4 	movhi	r16,2050
 8017c28:	84285704 	addi	r16,r16,-24228
 8017c2c:	80c00017 	ldw	r3,0(r16)
 8017c30:	dc400415 	stw	r17,16(sp)
 8017c34:	dfc00515 	stw	ra,20(sp)
 8017c38:	18805217 	ldw	r2,328(r3)
 8017c3c:	2023883a 	mov	r17,r4
 8017c40:	10003726 	beq	r2,zero,8017d20 <__register_exitproc+0x104>
 8017c44:	10c00117 	ldw	r3,4(r2)
 8017c48:	010007c4 	movi	r4,31
 8017c4c:	20c00e16 	blt	r4,r3,8017c88 <__register_exitproc+0x6c>
 8017c50:	1a000044 	addi	r8,r3,1
 8017c54:	8800221e 	bne	r17,zero,8017ce0 <__register_exitproc+0xc4>
 8017c58:	18c00084 	addi	r3,r3,2
 8017c5c:	18c7883a 	add	r3,r3,r3
 8017c60:	18c7883a 	add	r3,r3,r3
 8017c64:	12000115 	stw	r8,4(r2)
 8017c68:	10c7883a 	add	r3,r2,r3
 8017c6c:	19400015 	stw	r5,0(r3)
 8017c70:	0005883a 	mov	r2,zero
 8017c74:	dfc00517 	ldw	ra,20(sp)
 8017c78:	dc400417 	ldw	r17,16(sp)
 8017c7c:	dc000317 	ldw	r16,12(sp)
 8017c80:	dec00604 	addi	sp,sp,24
 8017c84:	f800283a 	ret
 8017c88:	00800034 	movhi	r2,0
 8017c8c:	10800004 	addi	r2,r2,0
 8017c90:	10002626 	beq	r2,zero,8017d2c <__register_exitproc+0x110>
 8017c94:	01006404 	movi	r4,400
 8017c98:	d9400015 	stw	r5,0(sp)
 8017c9c:	d9800115 	stw	r6,4(sp)
 8017ca0:	d9c00215 	stw	r7,8(sp)
 8017ca4:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8017ca8:	d9400017 	ldw	r5,0(sp)
 8017cac:	d9800117 	ldw	r6,4(sp)
 8017cb0:	d9c00217 	ldw	r7,8(sp)
 8017cb4:	10001d26 	beq	r2,zero,8017d2c <__register_exitproc+0x110>
 8017cb8:	81000017 	ldw	r4,0(r16)
 8017cbc:	10000115 	stw	zero,4(r2)
 8017cc0:	02000044 	movi	r8,1
 8017cc4:	22405217 	ldw	r9,328(r4)
 8017cc8:	0007883a 	mov	r3,zero
 8017ccc:	12400015 	stw	r9,0(r2)
 8017cd0:	20805215 	stw	r2,328(r4)
 8017cd4:	10006215 	stw	zero,392(r2)
 8017cd8:	10006315 	stw	zero,396(r2)
 8017cdc:	883fde26 	beq	r17,zero,8017c58 <__register_exitproc+0x3c>
 8017ce0:	18c9883a 	add	r4,r3,r3
 8017ce4:	2109883a 	add	r4,r4,r4
 8017ce8:	1109883a 	add	r4,r2,r4
 8017cec:	21802215 	stw	r6,136(r4)
 8017cf0:	01800044 	movi	r6,1
 8017cf4:	12406217 	ldw	r9,392(r2)
 8017cf8:	30cc983a 	sll	r6,r6,r3
 8017cfc:	4992b03a 	or	r9,r9,r6
 8017d00:	12406215 	stw	r9,392(r2)
 8017d04:	21c04215 	stw	r7,264(r4)
 8017d08:	01000084 	movi	r4,2
 8017d0c:	893fd21e 	bne	r17,r4,8017c58 <__register_exitproc+0x3c>
 8017d10:	11006317 	ldw	r4,396(r2)
 8017d14:	218cb03a 	or	r6,r4,r6
 8017d18:	11806315 	stw	r6,396(r2)
 8017d1c:	003fce06 	br	8017c58 <__register_exitproc+0x3c>
 8017d20:	18805304 	addi	r2,r3,332
 8017d24:	18805215 	stw	r2,328(r3)
 8017d28:	003fc606 	br	8017c44 <__register_exitproc+0x28>
 8017d2c:	00bfffc4 	movi	r2,-1
 8017d30:	003fd006 	br	8017c74 <__register_exitproc+0x58>

08017d34 <__call_exitprocs>:
 8017d34:	defff504 	addi	sp,sp,-44
 8017d38:	df000915 	stw	fp,36(sp)
 8017d3c:	dd400615 	stw	r21,24(sp)
 8017d40:	dc800315 	stw	r18,12(sp)
 8017d44:	dfc00a15 	stw	ra,40(sp)
 8017d48:	ddc00815 	stw	r23,32(sp)
 8017d4c:	dd800715 	stw	r22,28(sp)
 8017d50:	dd000515 	stw	r20,20(sp)
 8017d54:	dcc00415 	stw	r19,16(sp)
 8017d58:	dc400215 	stw	r17,8(sp)
 8017d5c:	dc000115 	stw	r16,4(sp)
 8017d60:	d9000015 	stw	r4,0(sp)
 8017d64:	2839883a 	mov	fp,r5
 8017d68:	04800044 	movi	r18,1
 8017d6c:	057fffc4 	movi	r21,-1
 8017d70:	008200b4 	movhi	r2,2050
 8017d74:	10a85704 	addi	r2,r2,-24228
 8017d78:	12000017 	ldw	r8,0(r2)
 8017d7c:	45005217 	ldw	r20,328(r8)
 8017d80:	44c05204 	addi	r19,r8,328
 8017d84:	a0001c26 	beq	r20,zero,8017df8 <__call_exitprocs+0xc4>
 8017d88:	a0800117 	ldw	r2,4(r20)
 8017d8c:	15ffffc4 	addi	r23,r2,-1
 8017d90:	b8000d16 	blt	r23,zero,8017dc8 <__call_exitprocs+0x94>
 8017d94:	14000044 	addi	r16,r2,1
 8017d98:	8421883a 	add	r16,r16,r16
 8017d9c:	8421883a 	add	r16,r16,r16
 8017da0:	84402004 	addi	r17,r16,128
 8017da4:	a463883a 	add	r17,r20,r17
 8017da8:	a421883a 	add	r16,r20,r16
 8017dac:	e0001e26 	beq	fp,zero,8017e28 <__call_exitprocs+0xf4>
 8017db0:	80804017 	ldw	r2,256(r16)
 8017db4:	e0801c26 	beq	fp,r2,8017e28 <__call_exitprocs+0xf4>
 8017db8:	bdffffc4 	addi	r23,r23,-1
 8017dbc:	843fff04 	addi	r16,r16,-4
 8017dc0:	8c7fff04 	addi	r17,r17,-4
 8017dc4:	bd7ff91e 	bne	r23,r21,8017dac <__call_exitprocs+0x78>
 8017dc8:	00800034 	movhi	r2,0
 8017dcc:	10800004 	addi	r2,r2,0
 8017dd0:	10000926 	beq	r2,zero,8017df8 <__call_exitprocs+0xc4>
 8017dd4:	a0800117 	ldw	r2,4(r20)
 8017dd8:	1000301e 	bne	r2,zero,8017e9c <__call_exitprocs+0x168>
 8017ddc:	a0800017 	ldw	r2,0(r20)
 8017de0:	10003226 	beq	r2,zero,8017eac <__call_exitprocs+0x178>
 8017de4:	a009883a 	mov	r4,r20
 8017de8:	98800015 	stw	r2,0(r19)
 8017dec:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8017df0:	9d000017 	ldw	r20,0(r19)
 8017df4:	a03fe41e 	bne	r20,zero,8017d88 <__call_exitprocs+0x54>
 8017df8:	dfc00a17 	ldw	ra,40(sp)
 8017dfc:	df000917 	ldw	fp,36(sp)
 8017e00:	ddc00817 	ldw	r23,32(sp)
 8017e04:	dd800717 	ldw	r22,28(sp)
 8017e08:	dd400617 	ldw	r21,24(sp)
 8017e0c:	dd000517 	ldw	r20,20(sp)
 8017e10:	dcc00417 	ldw	r19,16(sp)
 8017e14:	dc800317 	ldw	r18,12(sp)
 8017e18:	dc400217 	ldw	r17,8(sp)
 8017e1c:	dc000117 	ldw	r16,4(sp)
 8017e20:	dec00b04 	addi	sp,sp,44
 8017e24:	f800283a 	ret
 8017e28:	a0800117 	ldw	r2,4(r20)
 8017e2c:	80c00017 	ldw	r3,0(r16)
 8017e30:	10bfffc4 	addi	r2,r2,-1
 8017e34:	15c01426 	beq	r2,r23,8017e88 <__call_exitprocs+0x154>
 8017e38:	80000015 	stw	zero,0(r16)
 8017e3c:	183fde26 	beq	r3,zero,8017db8 <__call_exitprocs+0x84>
 8017e40:	95c8983a 	sll	r4,r18,r23
 8017e44:	a0806217 	ldw	r2,392(r20)
 8017e48:	a5800117 	ldw	r22,4(r20)
 8017e4c:	2084703a 	and	r2,r4,r2
 8017e50:	10000b26 	beq	r2,zero,8017e80 <__call_exitprocs+0x14c>
 8017e54:	a0806317 	ldw	r2,396(r20)
 8017e58:	2088703a 	and	r4,r4,r2
 8017e5c:	20000c1e 	bne	r4,zero,8017e90 <__call_exitprocs+0x15c>
 8017e60:	89400017 	ldw	r5,0(r17)
 8017e64:	d9000017 	ldw	r4,0(sp)
 8017e68:	183ee83a 	callr	r3
 8017e6c:	a0800117 	ldw	r2,4(r20)
 8017e70:	15bfbf1e 	bne	r2,r22,8017d70 <__call_exitprocs+0x3c>
 8017e74:	98800017 	ldw	r2,0(r19)
 8017e78:	153fcf26 	beq	r2,r20,8017db8 <__call_exitprocs+0x84>
 8017e7c:	003fbc06 	br	8017d70 <__call_exitprocs+0x3c>
 8017e80:	183ee83a 	callr	r3
 8017e84:	003ff906 	br	8017e6c <__call_exitprocs+0x138>
 8017e88:	a5c00115 	stw	r23,4(r20)
 8017e8c:	003feb06 	br	8017e3c <__call_exitprocs+0x108>
 8017e90:	89000017 	ldw	r4,0(r17)
 8017e94:	183ee83a 	callr	r3
 8017e98:	003ff406 	br	8017e6c <__call_exitprocs+0x138>
 8017e9c:	a0800017 	ldw	r2,0(r20)
 8017ea0:	a027883a 	mov	r19,r20
 8017ea4:	1029883a 	mov	r20,r2
 8017ea8:	003fb606 	br	8017d84 <__call_exitprocs+0x50>
 8017eac:	0005883a 	mov	r2,zero
 8017eb0:	003ffb06 	br	8017ea0 <__call_exitprocs+0x16c>

08017eb4 <__muldi3>:
 8017eb4:	defff604 	addi	sp,sp,-40
 8017eb8:	dd800615 	stw	r22,24(sp)
 8017ebc:	dd400515 	stw	r21,20(sp)
 8017ec0:	dc400115 	stw	r17,4(sp)
 8017ec4:	357fffcc 	andi	r21,r6,65535
 8017ec8:	2022d43a 	srli	r17,r4,16
 8017ecc:	25bfffcc 	andi	r22,r4,65535
 8017ed0:	dcc00315 	stw	r19,12(sp)
 8017ed4:	dc800215 	stw	r18,8(sp)
 8017ed8:	2027883a 	mov	r19,r4
 8017edc:	2825883a 	mov	r18,r5
 8017ee0:	b009883a 	mov	r4,r22
 8017ee4:	a80b883a 	mov	r5,r21
 8017ee8:	dfc00915 	stw	ra,36(sp)
 8017eec:	df000815 	stw	fp,32(sp)
 8017ef0:	ddc00715 	stw	r23,28(sp)
 8017ef4:	3839883a 	mov	fp,r7
 8017ef8:	302ed43a 	srli	r23,r6,16
 8017efc:	dd000415 	stw	r20,16(sp)
 8017f00:	dc000015 	stw	r16,0(sp)
 8017f04:	3029883a 	mov	r20,r6
 8017f08:	8007e400 	call	8007e40 <__mulsi3>
 8017f0c:	a80b883a 	mov	r5,r21
 8017f10:	8809883a 	mov	r4,r17
 8017f14:	1021883a 	mov	r16,r2
 8017f18:	8007e400 	call	8007e40 <__mulsi3>
 8017f1c:	8809883a 	mov	r4,r17
 8017f20:	b80b883a 	mov	r5,r23
 8017f24:	102b883a 	mov	r21,r2
 8017f28:	8007e400 	call	8007e40 <__mulsi3>
 8017f2c:	b80b883a 	mov	r5,r23
 8017f30:	b009883a 	mov	r4,r22
 8017f34:	1023883a 	mov	r17,r2
 8017f38:	8007e400 	call	8007e40 <__mulsi3>
 8017f3c:	8006d43a 	srli	r3,r16,16
 8017f40:	1545883a 	add	r2,r2,r21
 8017f44:	1885883a 	add	r2,r3,r2
 8017f48:	1540022e 	bgeu	r2,r21,8017f54 <__muldi3+0xa0>
 8017f4c:	00c00074 	movhi	r3,1
 8017f50:	88e3883a 	add	r17,r17,r3
 8017f54:	1006d43a 	srli	r3,r2,16
 8017f58:	1004943a 	slli	r2,r2,16
 8017f5c:	e00b883a 	mov	r5,fp
 8017f60:	9809883a 	mov	r4,r19
 8017f64:	843fffcc 	andi	r16,r16,65535
 8017f68:	1c63883a 	add	r17,r3,r17
 8017f6c:	1421883a 	add	r16,r2,r16
 8017f70:	8007e400 	call	8007e40 <__mulsi3>
 8017f74:	900b883a 	mov	r5,r18
 8017f78:	a009883a 	mov	r4,r20
 8017f7c:	1027883a 	mov	r19,r2
 8017f80:	8007e400 	call	8007e40 <__mulsi3>
 8017f84:	9885883a 	add	r2,r19,r2
 8017f88:	1447883a 	add	r3,r2,r17
 8017f8c:	8005883a 	mov	r2,r16
 8017f90:	dfc00917 	ldw	ra,36(sp)
 8017f94:	df000817 	ldw	fp,32(sp)
 8017f98:	ddc00717 	ldw	r23,28(sp)
 8017f9c:	dd800617 	ldw	r22,24(sp)
 8017fa0:	dd400517 	ldw	r21,20(sp)
 8017fa4:	dd000417 	ldw	r20,16(sp)
 8017fa8:	dcc00317 	ldw	r19,12(sp)
 8017fac:	dc800217 	ldw	r18,8(sp)
 8017fb0:	dc400117 	ldw	r17,4(sp)
 8017fb4:	dc000017 	ldw	r16,0(sp)
 8017fb8:	dec00a04 	addi	sp,sp,40
 8017fbc:	f800283a 	ret

08017fc0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8017fc0:	defffd04 	addi	sp,sp,-12
 8017fc4:	df000215 	stw	fp,8(sp)
 8017fc8:	df000204 	addi	fp,sp,8
 8017fcc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8017fd0:	0001883a 	nop
 8017fd4:	e0bfff17 	ldw	r2,-4(fp)
 8017fd8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8017fdc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8017fe0:	10000226 	beq	r2,zero,8017fec <_exit+0x2c>
    ALT_SIM_FAIL();
 8017fe4:	002af070 	cmpltui	zero,zero,43969
 8017fe8:	00000106 	br	8017ff0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8017fec:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8017ff0:	003fff06 	br	8017ff0 <_exit+0x30>
